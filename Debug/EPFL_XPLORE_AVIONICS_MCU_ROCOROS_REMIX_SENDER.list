
EPFL_XPLORE_AVIONICS_MCU_ROCOROS_REMIX_SENDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018930  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  08018bd0  08018bd0  00028bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080199d4  080199d4  000299d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080199dc  080199dc  000299dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080199e4  080199e4  000299e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  080199ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007238  240001ec  08019bd8  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24007424  08019bd8  00037424  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000841be  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a49c  00000000  00000000  000b43d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005f58  00000000  00000000  000be878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00005c30  00000000  00000000  000c47d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004f305  00000000  00000000  000ca400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000576f5  00000000  00000000  00119705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00203e32  00000000  00000000  00170dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00374c2c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0001c8bc  00000000  00000000  00374c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018bb8 	.word	0x08018bb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	08018bb8 	.word	0x08018bb8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006da:	4a30      	ldr	r2, [pc, #192]	; (800079c <MX_ADC1_Init+0xe8>)
 80006dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_ADC1_Init+0xe4>)
 8000704:	2201      	movs	r2, #1
 8000706:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_ADC1_Init+0xe4>)
 800070a:	2200      	movs	r2, #0
 800070c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_ADC1_Init+0xe4>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_ADC1_Init+0xe4>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0xe4>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_ADC1_Init+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0xe4>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ADC1_Init+0xe4>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000734:	4818      	ldr	r0, [pc, #96]	; (8000798 <MX_ADC1_Init+0xe4>)
 8000736:	f003 fab3 	bl	8003ca0 <HAL_ADC_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000740:	f001 f972 	bl	8001a28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <MX_ADC1_Init+0xe4>)
 8000750:	f004 f8c8 	bl	80048e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800075a:	f001 f965 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_ADC1_Init+0xec>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000762:	2306      	movs	r3, #6
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_ADC1_Init+0xf0>)
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_ADC1_Init+0xe4>)
 8000780:	f003 fc30 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800078a:	f001 f94d 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	24000208 	.word	0x24000208
 800079c:	40022000 	.word	0x40022000
 80007a0:	10c00010 	.word	0x10c00010
 80007a4:	47ff0000 	.word	0x47ff0000

080007a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007c2:	4a29      	ldr	r2, [pc, #164]	; (8000868 <MX_ADC2_Init+0xc0>)
 80007c4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007da:	2204      	movs	r2, #4
 80007dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_ADC2_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_ADC2_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_ADC2_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_ADC2_Init+0xbc>)
 8000810:	2200      	movs	r2, #0
 8000812:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_ADC2_Init+0xbc>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_ADC2_Init+0xbc>)
 800081e:	f003 fa3f 	bl	8003ca0 <HAL_ADC_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000828:	f001 f8fe 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_ADC2_Init+0xc4>)
 800082e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000830:	2306      	movs	r3, #6
 8000832:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <MX_ADC2_Init+0xc8>)
 800083a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083c:	2304      	movs	r3, #4
 800083e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_ADC2_Init+0xbc>)
 800084e:	f003 fbc9 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000858:	f001 f8e6 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2400026c 	.word	0x2400026c
 8000868:	40022100 	.word	0x40022100
 800086c:	10c00010 	.word	0x10c00010
 8000870:	47ff0000 	.word	0x47ff0000

08000874 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]
 800088a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_ADC3_Init+0xb8>)
 800088e:	4a28      	ldr	r2, [pc, #160]	; (8000930 <MX_ADC3_Init+0xbc>)
 8000890:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_ADC3_Init+0xb8>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_ADC3_Init+0xb8>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_ADC3_Init+0xb8>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC3_Init+0xb8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_ADC3_Init+0xb8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_ADC3_Init+0xb8>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC3_Init+0xb8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_ADC3_Init+0xb8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC3_Init+0xb8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_ADC3_Init+0xb8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC3_Init+0xb8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC3_Init+0xb8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC3_Init+0xb8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_ADC3_Init+0xb8>)
 80008e4:	f003 f9dc 	bl	8003ca0 <HAL_ADC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80008ee:	f001 f89b 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_ADC3_Init+0xc0>)
 80008f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ADC3_Init+0xc4>)
 8000900:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000902:	2304      	movs	r3, #4
 8000904:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_ADC3_Init+0xb8>)
 8000914:	f003 fb66 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 800091e:	f001 f883 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3720      	adds	r7, #32
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	240002d0 	.word	0x240002d0
 8000930:	58026000 	.word	0x58026000
 8000934:	2a000400 	.word	0x2a000400
 8000938:	47ff0000 	.word	0x47ff0000

0800093c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b090      	sub	sp, #64	; 0x40
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a79      	ldr	r2, [pc, #484]	; (8000b40 <HAL_ADC_MspInit+0x204>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d14e      	bne.n	80009fc <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800095e:	4b79      	ldr	r3, [pc, #484]	; (8000b44 <HAL_ADC_MspInit+0x208>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	4a77      	ldr	r2, [pc, #476]	; (8000b44 <HAL_ADC_MspInit+0x208>)
 8000966:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000968:	4b76      	ldr	r3, [pc, #472]	; (8000b44 <HAL_ADC_MspInit+0x208>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10e      	bne.n	800098e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b75      	ldr	r3, [pc, #468]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a74      	ldr	r2, [pc, #464]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b71      	ldr	r3, [pc, #452]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b6e      	ldr	r3, [pc, #440]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a6c      	ldr	r2, [pc, #432]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6a      	ldr	r3, [pc, #424]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b66      	ldr	r3, [pc, #408]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a65      	ldr	r2, [pc, #404]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b62      	ldr	r3, [pc, #392]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
 80009c8:	6a3b      	ldr	r3, [r7, #32]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009ca:	2333      	movs	r3, #51	; 0x33
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009da:	4619      	mov	r1, r3
 80009dc:	485b      	ldr	r0, [pc, #364]	; (8000b4c <HAL_ADC_MspInit+0x210>)
 80009de:	f007 fc9f 	bl	8008320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009e2:	2303      	movs	r3, #3
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e6:	2303      	movs	r3, #3
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f2:	4619      	mov	r1, r3
 80009f4:	4856      	ldr	r0, [pc, #344]	; (8000b50 <HAL_ADC_MspInit+0x214>)
 80009f6:	f007 fc93 	bl	8008320 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009fa:	e09d      	b.n	8000b38 <HAL_ADC_MspInit+0x1fc>
  else if(adcHandle->Instance==ADC2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a54      	ldr	r2, [pc, #336]	; (8000b54 <HAL_ADC_MspInit+0x218>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d169      	bne.n	8000ada <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a06:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <HAL_ADC_MspInit+0x208>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a4d      	ldr	r2, [pc, #308]	; (8000b44 <HAL_ADC_MspInit+0x208>)
 8000a0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a10:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <HAL_ADC_MspInit+0x208>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10e      	bne.n	8000a36 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a18:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a1e:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a2e:	f003 0320 	and.w	r3, r3, #32
 8000a32:	61fb      	str	r3, [r7, #28]
 8000a34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a42      	ldr	r2, [pc, #264]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a3b      	ldr	r2, [pc, #236]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a33      	ldr	r2, [pc, #204]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a7a:	f043 0302 	orr.w	r3, r3, #2
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a90:	2333      	movs	r3, #51	; 0x33
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a94:	2303      	movs	r3, #3
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	482a      	ldr	r0, [pc, #168]	; (8000b4c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f007 fc3c 	bl	8008320 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4827      	ldr	r0, [pc, #156]	; (8000b58 <HAL_ADC_MspInit+0x21c>)
 8000abc:	f007 fc30 	bl	8008320 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481f      	ldr	r0, [pc, #124]	; (8000b50 <HAL_ADC_MspInit+0x214>)
 8000ad4:	f007 fc24 	bl	8008320 <HAL_GPIO_Init>
}
 8000ad8:	e02e      	b.n	8000b38 <HAL_ADC_MspInit+0x1fc>
  else if(adcHandle->Instance==ADC3)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <HAL_ADC_MspInit+0x220>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d129      	bne.n	8000b38 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_ADC_MspInit+0x20c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b20:	2303      	movs	r3, #3
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b24:	2303      	movs	r3, #3
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <HAL_ADC_MspInit+0x210>)
 8000b34:	f007 fbf4 	bl	8008320 <HAL_GPIO_Init>
}
 8000b38:	bf00      	nop
 8000b3a:	3740      	adds	r7, #64	; 0x40
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40022000 	.word	0x40022000
 8000b44:	24000334 	.word	0x24000334
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020800 	.word	0x58020800
 8000b50:	58020400 	.word	0x58020400
 8000b54:	40022100 	.word	0x40022100
 8000b58:	58020000 	.word	0x58020000
 8000b5c:	58026000 	.word	0x58026000

08000b60 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2224      	movs	r2, #36	; 0x24
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f015 fa1b 	bl	8015fa8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_DAC1_Init+0x70>)
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <MX_DAC1_Init+0x74>)
 8000b76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b78:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <MX_DAC1_Init+0x70>)
 8000b7a:	f004 f871 	bl	8004c60 <HAL_DAC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b84:	f000 ff50 	bl	8001a28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_DAC1_Init+0x70>)
 8000ba4:	f004 f8e2 	bl	8004d6c <HAL_DAC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bae:	f000 ff3b 	bl	8001a28 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_DAC1_Init+0x70>)
 8000bba:	f004 f8d7 	bl	8004d6c <HAL_DAC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000bc4:	f000 ff30 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	24000338 	.word	0x24000338
 8000bd4:	40007400 	.word	0x40007400

08000bd8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <HAL_DAC_MspInit+0x90>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d131      	bne.n	8000c5e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_DAC_MspInit+0x94>)
 8000bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <HAL_DAC_MspInit+0x94>)
 8000c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_DAC_MspInit+0x94>)
 8000c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_DAC_MspInit+0x94>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <HAL_DAC_MspInit+0x94>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_DAC_MspInit+0x94>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c36:	2330      	movs	r3, #48	; 0x30
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <HAL_DAC_MspInit+0x98>)
 8000c4a:	f007 fb69 	bl	8008320 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	210f      	movs	r1, #15
 8000c52:	2036      	movs	r0, #54	; 0x36
 8000c54:	f003 ffdc 	bl	8004c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c58:	2036      	movs	r0, #54	; 0x36
 8000c5a:	f003 fff3 	bl	8004c44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40007400 	.word	0x40007400
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58020000 	.word	0x58020000

08000c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <MX_DMA_Init+0x3c>)
 8000c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <MX_DMA_Init+0x3c>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_DMA_Init+0x3c>)
 8000c8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	200b      	movs	r0, #11
 8000c9e:	f003 ffb7 	bl	8004c10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ca2:	200b      	movs	r0, #11
 8000ca4:	f003 ffce 	bl	8004c44 <HAL_NVIC_EnableIRQ>

}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	58024400 	.word	0x58024400

08000cb4 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cba:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <MX_FDCAN1_Init+0xc4>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cde:	2210      	movs	r2, #16
 8000ce0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d26:	2204      	movs	r2, #4
 8000d28:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_FDCAN1_Init+0xc0>)
 8000d62:	f006 ff79 	bl	8007c58 <HAL_FDCAN_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d6c:	f000 fe5c 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2400034c 	.word	0x2400034c
 8000d78:	4000a000 	.word	0x4000a000

08000d7c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <MX_FDCAN2_Init+0xc4>)
 8000d84:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d9e:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000da6:	2210      	movs	r2, #16
 8000da8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000e06:	2204      	movs	r2, #4
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_FDCAN2_Init+0xc0>)
 8000e2a:	f006 ff15 	bl	8007c58 <HAL_FDCAN_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000e34:	f000 fdf8 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	240003ec 	.word	0x240003ec
 8000e40:	4000a400 	.word	0x4000a400

08000e44 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ba      	sub	sp, #232	; 0xe8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	22bc      	movs	r2, #188	; 0xbc
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f015 f89f 	bl	8015fa8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a54      	ldr	r2, [pc, #336]	; (8000fc0 <HAL_FDCAN_MspInit+0x17c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d14e      	bne.n	8000f12 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	4618      	mov	r0, r3
 8000e88:	f008 fe2c 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000e92:	f000 fdc9 	bl	8001a28 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e96:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <HAL_FDCAN_MspInit+0x180>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a49      	ldr	r2, [pc, #292]	; (8000fc4 <HAL_FDCAN_MspInit+0x180>)
 8000e9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ea0:	4b48      	ldr	r3, [pc, #288]	; (8000fc4 <HAL_FDCAN_MspInit+0x180>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d10e      	bne.n	8000ec6 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ea8:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000eaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eae:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000eba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b40      	ldr	r3, [pc, #256]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	4a3e      	ldr	r2, [pc, #248]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ee4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000efe:	2309      	movs	r3, #9
 8000f00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4830      	ldr	r0, [pc, #192]	; (8000fcc <HAL_FDCAN_MspInit+0x188>)
 8000f0c:	f007 fa08 	bl	8008320 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000f10:	e052      	b.n	8000fb8 <HAL_FDCAN_MspInit+0x174>
  else if(fdcanHandle->Instance==FDCAN2)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a2e      	ldr	r2, [pc, #184]	; (8000fd0 <HAL_FDCAN_MspInit+0x18c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d14d      	bne.n	8000fb8 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f008 fdd8 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8000f3a:	f000 fd75 	bl	8001a28 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_FDCAN_MspInit+0x180>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a1f      	ldr	r2, [pc, #124]	; (8000fc4 <HAL_FDCAN_MspInit+0x180>)
 8000f46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_FDCAN_MspInit+0x180>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10e      	bne.n	8000f6e <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000f52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000f62:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_FDCAN_MspInit+0x184>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000fa6:	2309      	movs	r3, #9
 8000fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <HAL_FDCAN_MspInit+0x190>)
 8000fb4:	f007 f9b4 	bl	8008320 <HAL_GPIO_Init>
}
 8000fb8:	bf00      	nop
 8000fba:	37e8      	adds	r7, #232	; 0xe8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	4000a000 	.word	0x4000a000
 8000fc4:	2400048c 	.word	0x2400048c
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020000 	.word	0x58020000
 8000fd0:	4000a400 	.word	0x4000a400
 8000fd4:	58020400 	.word	0x58020400

08000fd8 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <MX_GPIO_Init>:
     PC12   ------> UART5_TX
     PB4 (NJTRST)   ------> SPI3_MISO
     PB5   ------> SPI3_MOSI
*/
void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffe:	4b7b      	ldr	r3, [pc, #492]	; (80011ec <MX_GPIO_Init+0x204>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	4a79      	ldr	r2, [pc, #484]	; (80011ec <MX_GPIO_Init+0x204>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100e:	4b77      	ldr	r3, [pc, #476]	; (80011ec <MX_GPIO_Init+0x204>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4b73      	ldr	r3, [pc, #460]	; (80011ec <MX_GPIO_Init+0x204>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a72      	ldr	r2, [pc, #456]	; (80011ec <MX_GPIO_Init+0x204>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <MX_GPIO_Init+0x204>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	4b6c      	ldr	r3, [pc, #432]	; (80011ec <MX_GPIO_Init+0x204>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	4a6a      	ldr	r2, [pc, #424]	; (80011ec <MX_GPIO_Init+0x204>)
 8001042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104a:	4b68      	ldr	r3, [pc, #416]	; (80011ec <MX_GPIO_Init+0x204>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b64      	ldr	r3, [pc, #400]	; (80011ec <MX_GPIO_Init+0x204>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105e:	4a63      	ldr	r2, [pc, #396]	; (80011ec <MX_GPIO_Init+0x204>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001068:	4b60      	ldr	r3, [pc, #384]	; (80011ec <MX_GPIO_Init+0x204>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <MX_GPIO_Init+0x204>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a5b      	ldr	r2, [pc, #364]	; (80011ec <MX_GPIO_Init+0x204>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b59      	ldr	r3, [pc, #356]	; (80011ec <MX_GPIO_Init+0x204>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001094:	4b55      	ldr	r3, [pc, #340]	; (80011ec <MX_GPIO_Init+0x204>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	4a54      	ldr	r2, [pc, #336]	; (80011ec <MX_GPIO_Init+0x204>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a4:	4b51      	ldr	r3, [pc, #324]	; (80011ec <MX_GPIO_Init+0x204>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 80010b2:	2200      	movs	r2, #0
 80010b4:	f24f 0118 	movw	r1, #61464	; 0xf018
 80010b8:	484d      	ldr	r0, [pc, #308]	; (80011f0 <MX_GPIO_Init+0x208>)
 80010ba:	f007 fae1 	bl	8008680 <HAL_GPIO_WritePin>
                          |SPI2_CS1_Pin|SPI2_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_AUX_4_Pin|GPIO_AUX_1_Pin|SPI3_CS0_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f644 0190 	movw	r1, #18576	; 0x4890
 80010c4:	484b      	ldr	r0, [pc, #300]	; (80011f4 <MX_GPIO_Init+0x20c>)
 80010c6:	f007 fadb 	bl	8008680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS1_GPIO_Port, SPI3_CS1_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d0:	4849      	ldr	r0, [pc, #292]	; (80011f8 <MX_GPIO_Init+0x210>)
 80010d2:	f007 fad5 	bl	8008680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS2_Pin|SPI4_CS1_Pin|SPI1_CS_Pin|SPI2_CS0_Pin
 80010d6:	f24f 0318 	movw	r3, #61464	; 0xf018
 80010da:	61fb      	str	r3, [r7, #28]
                          |SPI2_CS1_Pin|SPI2_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4840      	ldr	r0, [pc, #256]	; (80011f0 <MX_GPIO_Init+0x208>)
 80010f0:	f007 f916 	bl	8008320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	483a      	ldr	r0, [pc, #232]	; (80011f8 <MX_GPIO_Init+0x210>)
 8001110:	f007 f906 	bl	8008320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PD7 */
  GPIO_InitStruct.Pin = GPIO_AUX_4_Pin|GPIO_AUX_1_Pin|SPI3_CS0_Pin|GPIO_PIN_7;
 8001114:	f644 0390 	movw	r3, #18576	; 0x4890
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4831      	ldr	r0, [pc, #196]	; (80011f4 <MX_GPIO_Init+0x20c>)
 800112e:	f007 f8f7 	bl	8008320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	482d      	ldr	r0, [pc, #180]	; (80011fc <MX_GPIO_Init+0x214>)
 8001148:	f007 f8ea 	bl	8008320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 800114c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4824      	ldr	r0, [pc, #144]	; (80011f8 <MX_GPIO_Init+0x210>)
 8001166:	f007 f8db 	bl	8008320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800117c:	2308      	movs	r3, #8
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	481d      	ldr	r0, [pc, #116]	; (80011fc <MX_GPIO_Init+0x214>)
 8001188:	f007 f8ca 	bl	8008320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118c:	2304      	movs	r3, #4
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <MX_GPIO_Init+0x20c>)
 80011a0:	f007 f8be 	bl	8008320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011a4:	2310      	movs	r3, #16
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b4:	2306      	movs	r3, #6
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4810      	ldr	r0, [pc, #64]	; (8001200 <MX_GPIO_Init+0x218>)
 80011c0:	f007 f8ae 	bl	8008320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011c4:	2320      	movs	r3, #32
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80011d4:	2307      	movs	r3, #7
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <MX_GPIO_Init+0x218>)
 80011e0:	f007 f89e 	bl	8008320 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3730      	adds	r7, #48	; 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58021000 	.word	0x58021000
 80011f4:	58020c00 	.word	0x58020c00
 80011f8:	58020000 	.word	0x58020000
 80011fc:	58020800 	.word	0x58020800
 8001200:	58020400 	.word	0x58020400

08001204 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_I2C1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <MX_I2C1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_I2C1_Init+0x74>)
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <MX_I2C1_Init+0x7c>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_I2C1_Init+0x74>)
 800121c:	2201      	movs	r2, #1
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_I2C1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <MX_I2C1_Init+0x74>)
 8001240:	f007 fa38 	bl	80086b4 <HAL_I2C_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124a:	f000 fbed 	bl	8001a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4809      	ldr	r0, [pc, #36]	; (8001278 <MX_I2C1_Init+0x74>)
 8001252:	f007 fabf 	bl	80087d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800125c:	f000 fbe4 	bl	8001a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_I2C1_Init+0x74>)
 8001264:	f007 fb01 	bl	800886a <HAL_I2CEx_ConfigDigitalFilter>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 fbdb 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24000490 	.word	0x24000490
 800127c:	40005400 	.word	0x40005400
 8001280:	00707cbb 	.word	0x00707cbb

08001284 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_I2C2_Init+0x74>)
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <MX_I2C2_Init+0x78>)
 800128c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_I2C2_Init+0x74>)
 8001290:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <MX_I2C2_Init+0x7c>)
 8001292:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_I2C2_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_I2C2_Init+0x74>)
 800129c:	2201      	movs	r2, #1
 800129e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_I2C2_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_I2C2_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_I2C2_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_I2C2_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_I2C2_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <MX_I2C2_Init+0x74>)
 80012c0:	f007 f9f8 	bl	80086b4 <HAL_I2C_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012ca:	f000 fbad 	bl	8001a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <MX_I2C2_Init+0x74>)
 80012d2:	f007 fa7f 	bl	80087d4 <HAL_I2CEx_ConfigAnalogFilter>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012dc:	f000 fba4 	bl	8001a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_I2C2_Init+0x74>)
 80012e4:	f007 fac1 	bl	800886a <HAL_I2CEx_ConfigDigitalFilter>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 fb9b 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	240004dc 	.word	0x240004dc
 80012fc:	40005800 	.word	0x40005800
 8001300:	00707cbb 	.word	0x00707cbb

08001304 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_I2C4_Init+0x74>)
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <MX_I2C4_Init+0x78>)
 800130c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_I2C4_Init+0x74>)
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <MX_I2C4_Init+0x7c>)
 8001312:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_I2C4_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <MX_I2C4_Init+0x74>)
 800131c:	2201      	movs	r2, #1
 800131e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_I2C4_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_I2C4_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2C4_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_I2C4_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_I2C4_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <MX_I2C4_Init+0x74>)
 8001340:	f007 f9b8 	bl	80086b4 <HAL_I2C_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800134a:	f000 fb6d 	bl	8001a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <MX_I2C4_Init+0x74>)
 8001352:	f007 fa3f 	bl	80087d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800135c:	f000 fb64 	bl	8001a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_I2C4_Init+0x74>)
 8001364:	f007 fa81 	bl	800886a <HAL_I2CEx_ConfigDigitalFilter>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800136e:	f000 fb5b 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	24000528 	.word	0x24000528
 800137c:	58001c00 	.word	0x58001c00
 8001380:	00707cbb 	.word	0x00707cbb

08001384 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0bc      	sub	sp, #240	; 0xf0
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	22bc      	movs	r2, #188	; 0xbc
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f014 fdff 	bl	8015fa8 <memset>
  if(i2cHandle->Instance==I2C1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6d      	ldr	r2, [pc, #436]	; (8001564 <HAL_I2C_MspInit+0x1e0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d142      	bne.n	800143a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013b4:	2308      	movs	r3, #8
 80013b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fb8e 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013ce:	f000 fb2b 	bl	8001a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a63      	ldr	r2, [pc, #396]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b61      	ldr	r3, [pc, #388]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f0:	23c0      	movs	r3, #192	; 0xc0
 80013f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f6:	2312      	movs	r3, #18
 80013f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001408:	2304      	movs	r3, #4
 800140a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001412:	4619      	mov	r1, r3
 8001414:	4855      	ldr	r0, [pc, #340]	; (800156c <HAL_I2C_MspInit+0x1e8>)
 8001416:	f006 ff83 	bl	8008320 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800141a:	4b53      	ldr	r3, [pc, #332]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 800141c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001420:	4a51      	ldr	r2, [pc, #324]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 8001422:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001426:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800142a:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 800142c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001438:	e090      	b.n	800155c <HAL_I2C_MspInit+0x1d8>
  else if(i2cHandle->Instance==I2C2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <HAL_I2C_MspInit+0x1ec>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d143      	bne.n	80014cc <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4618      	mov	r0, r3
 8001454:	f008 fb46 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_MspInit+0xde>
      Error_Handler();
 800145e:	f000 fae3 	bl	8001a28 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	4a3f      	ldr	r2, [pc, #252]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001480:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800149a:	2304      	movs	r3, #4
 800149c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a4:	4619      	mov	r1, r3
 80014a6:	4831      	ldr	r0, [pc, #196]	; (800156c <HAL_I2C_MspInit+0x1e8>)
 80014a8:	f006 ff3a 	bl	8008320 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014ac:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 80014ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 80014b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 80014be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
}
 80014ca:	e047      	b.n	800155c <HAL_I2C_MspInit+0x1d8>
  else if(i2cHandle->Instance==I2C4)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a28      	ldr	r2, [pc, #160]	; (8001574 <HAL_I2C_MspInit+0x1f0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d142      	bne.n	800155c <HAL_I2C_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80014d6:	2310      	movs	r3, #16
 80014d8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4618      	mov	r0, r3
 80014e6:	f008 fafd 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_MspInit+0x170>
      Error_Handler();
 80014f0:	f000 fa9a 	bl	8001a28 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001512:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151a:	2312      	movs	r3, #18
 800151c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800152c:	2304      	movs	r3, #4
 800152e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001532:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <HAL_I2C_MspInit+0x1f4>)
 800153a:	f006 fef1 	bl	8008320 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 8001540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001544:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 8001546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_I2C_MspInit+0x1e4>)
 8001550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
}
 800155c:	bf00      	nop
 800155e:	37f0      	adds	r7, #240	; 0xf0
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40005400 	.word	0x40005400
 8001568:	58024400 	.word	0x58024400
 800156c:	58020400 	.word	0x58020400
 8001570:	40005800 	.word	0x40005800
 8001574:	58001c00 	.word	0x58001c00
 8001578:	58020c00 	.word	0x58020c00

0800157c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4798      	blx	r3
    }
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <__tcf_0>:
//  MX_IWDG1_Init();
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_TogglePin(GPIOD, 15);
  //
//      static STMUARTDriver telemtryDriver(&husart6); // Point to Huart6
	static STMUARTDriver thread(&huart6);
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
 8001608:	4801      	ldr	r0, [pc, #4]	; (8001610 <__tcf_0+0xc>)
 800160a:	f013 fb91 	bl	8014d30 <_ZN13STMUARTDriverD1Ev>
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24000574 	.word	0x24000574

08001614 <__tcf_1>:
//      //NetworkBus* network = new IOBus((IODriver*) telemtryDriver, buffer, ROCO_BUFFER_SIZE);
    static NetworkBus true_network(&thread);
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
 8001618:	4801      	ldr	r0, [pc, #4]	; (8001620 <__tcf_1+0xc>)
 800161a:	f013 fae9 	bl	8014bf0 <_ZN10NetworkBusD1Ev>
 800161e:	bd80      	pop	{r7, pc}
 8001620:	240005cc 	.word	0x240005cc

08001624 <_ZNSt8functionIFvhP19avionics_IMU_packetEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffd4 	bl	80015dc <_ZNSt14_Function_baseD1Ev>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <main>:
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
  HAL_Init();
 8001646:	f002 f913 	bl	8003870 <HAL_Init>
  SystemClock_Config();
 800164a:	f000 f89f 	bl	800178c <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 800164e:	f000 f935 	bl	80018bc <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 8001652:	f7ff fcc9 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001656:	f7ff fb0d 	bl	8000c74 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800165a:	f7ff fb2b 	bl	8000cb4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800165e:	f7ff fb8d 	bl	8000d7c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001662:	f7ff fdcf 	bl	8001204 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001666:	f7ff fe0d 	bl	8001284 <MX_I2C2_Init>
  MX_I2C4_Init();
 800166a:	f7ff fe4b 	bl	8001304 <MX_I2C4_Init>
  MX_USART1_UART_Init();
 800166e:	f001 fcf7 	bl	8003060 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001672:	f001 fd41 	bl	80030f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001676:	f001 fd8b 	bl	8003190 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800167a:	f7ff f81b 	bl	80006b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800167e:	f7ff f893 	bl	80007a8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001682:	f7ff f8f7 	bl	8000874 <MX_ADC3_Init>
  MX_QUADSPI_Init();
 8001686:	f000 fb91 	bl	8001dac <MX_QUADSPI_Init>
  MX_SPI1_Init();
 800168a:	f000 fc6f 	bl	8001f6c <MX_SPI1_Init>
  MX_SPI2_Init();
 800168e:	f000 fcc3 	bl	8002018 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001692:	f000 fd17 	bl	80020c4 <MX_SPI4_Init>
  MX_USART6_UART_Init();
 8001696:	f001 fdc7 	bl	8003228 <MX_USART6_UART_Init>
  MX_DAC1_Init();
 800169a:	f7ff fa61 	bl	8000b60 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 800169e:	f001 fbf9 	bl	8002e94 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80016a2:	f001 fc45 	bl	8002f30 <MX_UART4_Init>
  MX_UART8_Init();
 80016a6:	f001 fc8f 	bl	8002fc8 <MX_UART8_Init>
  MX_TIM1_Init();
 80016aa:	f001 f8c3 	bl	8002834 <MX_TIM1_Init>
  MX_TIM5_Init();
 80016ae:	f001 f9c9 	bl	8002a44 <MX_TIM5_Init>
  MX_TIM15_Init();
 80016b2:	f001 fa21 	bl	8002af8 <MX_TIM15_Init>
  MX_TIM4_Init();
 80016b6:	f001 f94d 	bl	8002954 <MX_TIM4_Init>
	static STMUARTDriver thread(&huart6);
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <main+0x12c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	f3bf 8f5b 	dmb	ish
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d014      	beq.n	8001700 <main+0xc0>
 80016d6:	4825      	ldr	r0, [pc, #148]	; (800176c <main+0x12c>)
 80016d8:	f013 ff24 	bl	8015524 <__cxa_guard_acquire>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <main+0xc0>
 80016ec:	4920      	ldr	r1, [pc, #128]	; (8001770 <main+0x130>)
 80016ee:	4821      	ldr	r0, [pc, #132]	; (8001774 <main+0x134>)
 80016f0:	f013 fad2 	bl	8014c98 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
 80016f4:	4820      	ldr	r0, [pc, #128]	; (8001778 <main+0x138>)
 80016f6:	f014 fb1f 	bl	8015d38 <atexit>
 80016fa:	481c      	ldr	r0, [pc, #112]	; (800176c <main+0x12c>)
 80016fc:	f013 ff1e 	bl	801553c <__cxa_guard_release>
    static NetworkBus true_network(&thread);
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <main+0x13c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f3bf 8f5b 	dmb	ish
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	bf0c      	ite	eq
 8001712:	2301      	moveq	r3, #1
 8001714:	2300      	movne	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d014      	beq.n	8001746 <main+0x106>
 800171c:	4817      	ldr	r0, [pc, #92]	; (800177c <main+0x13c>)
 800171e:	f013 ff01 	bl	8015524 <__cxa_guard_acquire>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf14      	ite	ne
 8001728:	2301      	movne	r3, #1
 800172a:	2300      	moveq	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <main+0x106>
 8001732:	4910      	ldr	r1, [pc, #64]	; (8001774 <main+0x134>)
 8001734:	4812      	ldr	r0, [pc, #72]	; (8001780 <main+0x140>)
 8001736:	f013 f9bb 	bl	8014ab0 <_ZN10NetworkBusC1EP8IODriver>
 800173a:	4812      	ldr	r0, [pc, #72]	; (8001784 <main+0x144>)
 800173c:	f014 fafc 	bl	8015d38 <atexit>
 8001740:	480e      	ldr	r0, [pc, #56]	; (800177c <main+0x13c>)
 8001742:	f013 fefb 	bl	801553c <__cxa_guard_release>
//    HAL_USART_RxCpltCallback(&husart6);
  //    huart6.Instance->CR3 |= USART_CR3_DMAT;
  //    HAL_DMA_RegisterCallback(&hdma_usart6_tx, HAL_DMA_XFER_CPLT_CB_ID,
  //                              &roco_callback);

    true_network.handle<avionics_IMU_packet>(&roco_callback);//    osDelay(50);
 8001746:	463b      	mov	r3, r7
 8001748:	490f      	ldr	r1, [pc, #60]	; (8001788 <main+0x148>)
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f972 	bl	8001a34 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1IPS2_vvEET_>
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	480a      	ldr	r0, [pc, #40]	; (8001780 <main+0x140>)
 8001756:	f011 f90f 	bl	8012978 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EE>
 800175a:	463b      	mov	r3, r7
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff61 	bl	8001624 <_ZNSt8functionIFvhP19avionics_IMU_packetEED1Ev>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001762:	f7ff fc39 	bl	8000fd8 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8001766:	f00d fdef 	bl	800f348 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800176a:	e7fe      	b.n	800176a <main+0x12a>
 800176c:	240005c8 	.word	0x240005c8
 8001770:	240020b0 	.word	0x240020b0
 8001774:	24000574 	.word	0x24000574
 8001778:	08001605 	.word	0x08001605
 800177c:	240019e8 	.word	0x240019e8
 8001780:	240005cc 	.word	0x240005cc
 8001784:	08001615 	.word	0x08001615
 8001788:	08001921 	.word	0x08001921

0800178c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b09c      	sub	sp, #112	; 0x70
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	224c      	movs	r2, #76	; 0x4c
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f014 fc04 	bl	8015fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2220      	movs	r2, #32
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f014 fbfe 	bl	8015fa8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017ac:	2002      	movs	r0, #2
 80017ae:	f007 f8a9 	bl	8008904 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <_Z18SystemClock_Configv+0x124>)
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <_Z18SystemClock_Configv+0x124>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <_Z18SystemClock_Configv+0x124>)
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <_Z18SystemClock_Configv+0x128>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d4:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <_Z18SystemClock_Configv+0x128>)
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <_Z18SystemClock_Configv+0x128>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <_Z18SystemClock_Configv+0x128>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d000      	beq.n	8001802 <_Z18SystemClock_Configv+0x76>
 8001800:	e7f2      	b.n	80017e8 <_Z18SystemClock_Configv+0x5c>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <_Z18SystemClock_Configv+0x12c>)
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <_Z18SystemClock_Configv+0x12c>)
 8001808:	f023 0303 	bic.w	r3, r3, #3
 800180c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800180e:	230a      	movs	r3, #10
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001812:	2301      	movs	r3, #1
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001816:	2340      	movs	r3, #64	; 0x40
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800181a:	2301      	movs	r3, #1
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181e:	2302      	movs	r3, #2
 8001820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001822:	2300      	movs	r3, #0
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001826:	2304      	movs	r3, #4
 8001828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800182a:	2309      	movs	r3, #9
 800182c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800182e:	2302      	movs	r3, #2
 8001830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001832:	2303      	movs	r3, #3
 8001834:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001836:	2302      	movs	r3, #2
 8001838:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800183a:	230c      	movs	r3, #12
 800183c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800183e:	2302      	movs	r3, #2
 8001840:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001842:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001846:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	4618      	mov	r0, r3
 800184e:	f007 f94d 	bl	8008aec <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001862:	f000 f8e1 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	233f      	movs	r3, #63	; 0x3f
 8001868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001876:	2340      	movs	r3, #64	; 0x40
 8001878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800187a:	2340      	movs	r3, #64	; 0x40
 800187c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800187e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001884:	2340      	movs	r3, #64	; 0x40
 8001886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2101      	movs	r1, #1
 800188c:	4618      	mov	r0, r3
 800188e:	f007 fd5b 	bl	8009348 <HAL_RCC_ClockConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <_Z18SystemClock_Configv+0x11a>
  {
    Error_Handler();
 80018a2:	f000 f8c1 	bl	8001a28 <Error_Handler>
  }
}
 80018a6:	bf00      	nop
 80018a8:	3770      	adds	r7, #112	; 0x70
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	58000400 	.word	0x58000400
 80018b4:	58024800 	.word	0x58024800
 80018b8:	58024400 	.word	0x58024400

080018bc <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0b0      	sub	sp, #192	; 0xc0
 80018c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	22bc      	movs	r2, #188	; 0xbc
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f014 fb6d 	bl	8015fa8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018d2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80018d4:	2304      	movs	r3, #4
 80018d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80018d8:	2309      	movs	r3, #9
 80018da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80018dc:	2304      	movs	r3, #4
 80018de:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80018e0:	2302      	movs	r3, #2
 80018e2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80018e8:	23c0      	movs	r3, #192	; 0xc0
 80018ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80018ec:	2320      	movs	r3, #32
 80018ee:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80018f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4618      	mov	r0, r3
 8001900:	f008 f8f0 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	bf14      	ite	ne
 800190a:	2301      	movne	r3, #1
 800190c:	2300      	moveq	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <_Z24PeriphCommonClock_Configv+0x5c>
  {
    Error_Handler();
 8001914:	f000 f888 	bl	8001a28 <Error_Handler>
  }
}
 8001918:	bf00      	nop
 800191a:	37c0      	adds	r7, #192	; 0xc0
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_Z13roco_callbackhP19avionics_IMU_packet>:

/* USER CODE BEGIN 4 */
void roco_callback(uint8_t sender_id, avionics_IMU_packet* packet)
{
 8001920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001924:	b0a3      	sub	sp, #140	; 0x8c
 8001926:	af04      	add	r7, sp, #16
 8001928:	4603      	mov	r3, r0
 800192a:	6039      	str	r1, [r7, #0]
 800192c:	71fb      	strb	r3, [r7, #7]

	int size = strlen(text);
	uint8_t buf[size];

	strcpy((char*)buf, text);
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf),HAL_MAX_DELAY);
 800192e:	466b      	mov	r3, sp
 8001930:	461e      	mov	r6, r3
	sprintf(text, "acc_x: %.2f acc_y: %.2f acc_z: %.2f\r\n", packet->acceleration[0], packet->acceleration[1], packet->acceleration[2]);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	ee06 3a90 	vmov	s13, r3
 8001952:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001956:	f107 0008 	add.w	r0, r7, #8
 800195a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800195e:	ed8d 7b00 	vstr	d7, [sp]
 8001962:	ec53 2b15 	vmov	r2, r3, d5
 8001966:	4925      	ldr	r1, [pc, #148]	; (80019fc <_Z13roco_callbackhP19avionics_IMU_packet+0xdc>)
 8001968:	f015 f8ba 	bl	8016ae0 <siprintf>
	int size = strlen(text);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fcbf 	bl	80002f4 <strlen>
 8001976:	4603      	mov	r3, r0
 8001978:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t buf[size];
 800197a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800197c:	1e59      	subs	r1, r3, #1
 800197e:	6739      	str	r1, [r7, #112]	; 0x70
 8001980:	460b      	mov	r3, r1
 8001982:	3301      	adds	r3, #1
 8001984:	2200      	movs	r2, #0
 8001986:	4698      	mov	r8, r3
 8001988:	4691      	mov	r9, r2
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800199a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800199e:	460b      	mov	r3, r1
 80019a0:	3301      	adds	r3, #1
 80019a2:	2200      	movs	r2, #0
 80019a4:	461c      	mov	r4, r3
 80019a6:	4615      	mov	r5, r2
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	00eb      	lsls	r3, r5, #3
 80019b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b6:	00e2      	lsls	r2, r4, #3
 80019b8:	460b      	mov	r3, r1
 80019ba:	3301      	adds	r3, #1
 80019bc:	3307      	adds	r3, #7
 80019be:	08db      	lsrs	r3, r3, #3
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	ebad 0d03 	sub.w	sp, sp, r3
 80019c6:	ab04      	add	r3, sp, #16
 80019c8:	3300      	adds	r3, #0
 80019ca:	66fb      	str	r3, [r7, #108]	; 0x6c
	strcpy((char*)buf, text);
 80019cc:	f107 0308 	add.w	r3, r7, #8
 80019d0:	4619      	mov	r1, r3
 80019d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80019d4:	f015 f8e7 	bl	8016ba6 <strcpy>
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf),HAL_MAX_DELAY);
 80019d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80019da:	f7fe fc8b 	bl	80002f4 <strlen>
 80019de:	4603      	mov	r3, r0
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <_Z13roco_callbackhP19avionics_IMU_packet+0xe0>)
 80019ea:	f00b fd29 	bl	800d440 <HAL_UART_Transmit>
 80019ee:	46b5      	mov	sp, r6
}
 80019f0:	bf00      	nop
 80019f2:	377c      	adds	r7, #124	; 0x7c
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019fa:	bf00      	nop
 80019fc:	08018bd0 	.word	0x08018bd0
 8001a00:	24001f90 	.word	0x24001f90

08001a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a16:	f001 ff67 	bl	80038e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40001000 	.word	0x40001000

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <Error_Handler+0x8>
	...

08001a34 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1IPS2_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fdbd 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f81d 	bl	8001a88 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE21_M_not_empty_functionIS3_EEbPT_>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00f      	beq.n	8001a74 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1IPS2_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001a54:	687c      	ldr	r4, [r7, #4]
 8001a56:	463b      	mov	r3, r7
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f825 	bl	8001aa8 <_ZSt4moveIRPFvhP19avionics_IMU_packetEEONSt16remove_referenceIT_E4typeEOS6_>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4619      	mov	r1, r3
 8001a62:	4620      	mov	r0, r4
 8001a64:	f000 f82b 	bl	8001abe <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1IPS2_vvEET_+0x4c>)
 8001a6c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1IPS2_vvEET_+0x50>)
 8001a72:	609a      	str	r2, [r3, #8]
	  }
      }
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08001ae3 	.word	0x08001ae3
 8001a84:	08001b19 	.word	0x08001b19

08001a88 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_ZSt4moveIRPFvhP19avionics_IMU_packetEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8001abe:	b590      	push	{r4, r7, lr}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8001ac8:	6838      	ldr	r0, [r7, #0]
 8001aca:	f7ff ffed 	bl	8001aa8 <_ZSt4moveIRPFvhP19avionics_IMU_packetEEONSt16remove_referenceIT_E4typeEOS6_>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f84b 	bl	8001b70 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}

08001ae2 <_ZNSt17_Function_handlerIFvhP19avionics_IMU_packetEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8001ae2:	b5b0      	push	{r4, r5, r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f857 	bl	8001ba2 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE14_M_get_pointerERKSt9_Any_data>
 8001af4:	4604      	mov	r4, r0
 8001af6:	68b8      	ldr	r0, [r7, #8]
 8001af8:	f000 f864 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001afc:	4605      	mov	r5, r0
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f86b 	bl	8001bda <_ZSt7forwardIP19avionics_IMU_packetEOT_RNSt16remove_referenceIS2_E4typeE>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4629      	mov	r1, r5
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f000 f870 	bl	8001bf0 <_ZSt10__invoke_rIvRPFvhP19avionics_IMU_packetEJhS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 8001b10:	bf00      	nop
      }
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}

08001b18 <_ZNSt17_Function_handlerIFvhP19avionics_IMU_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	4613      	mov	r3, r2
 8001b24:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <_ZNSt17_Function_handlerIFvhP19avionics_IMU_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1a>
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d007      	beq.n	8001b40 <_ZNSt17_Function_handlerIFvhP19avionics_IMU_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
 8001b30:	e010      	b.n	8001b54 <_ZNSt17_Function_handlerIFvhP19avionics_IMU_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f877 	bl	8001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <_ZNSt17_Function_handlerIFvhP19avionics_IMU_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x54>)
 8001b3c:	601a      	str	r2, [r3, #0]
	    break;
 8001b3e:	e00f      	b.n	8001b60 <_ZNSt17_Function_handlerIFvhP19avionics_IMU_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f87c 	bl	8001c3e <_ZNSt9_Any_data9_M_accessIPPFvhP19avionics_IMU_packetEEERT_v>
 8001b46:	4604      	mov	r4, r0
 8001b48:	68b8      	ldr	r0, [r7, #8]
 8001b4a:	f000 f82a 	bl	8001ba2 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE14_M_get_pointerERKSt9_Any_data>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6023      	str	r3, [r4, #0]
	    break;
 8001b52:	e005      	b.n	8001b60 <_ZNSt17_Function_handlerIFvhP19avionics_IMU_packetEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f87c 	bl	8001c58 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8001b60:	2300      	movs	r3, #0
      }
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	08018c7c 	.word	0x08018c7c

08001b70 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8001b7c:	68b8      	ldr	r0, [r7, #8]
 8001b7e:	f7ff ff93 	bl	8001aa8 <_ZSt4moveIRPFvhP19avionics_IMU_packetEEONSt16remove_referenceIT_E4typeEOS6_>
 8001b82:	4603      	mov	r3, r0
 8001b84:	681c      	ldr	r4, [r3, #0]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff fd04 	bl	8001594 <_ZNSt9_Any_data9_M_accessEv>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	2004      	movs	r0, #4
 8001b92:	f7ff fcf3 	bl	800157c <_ZnwjPv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	601c      	str	r4, [r3, #0]
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}

08001ba2 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f88e 	bl	8001ccc <_ZNKSt9_Any_data9_M_accessIPFvhP19avionics_IMU_packetEEERKT_v>
 8001bb0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f896 	bl	8001ce4 <_ZSt11__addressofIKPFvhP19avionics_IMU_packetEEPT_RS5_>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	bf00      	nop
	}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_ZSt7forwardIP19avionics_IMU_packetEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_ZSt10__invoke_rIvRPFvhP19avionics_IMU_packetEJhS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f87c 	bl	8001cfa <_ZSt7forwardIRPFvhP19avionics_IMU_packetEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001c02:	4604      	mov	r4, r0
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff ffdd 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe4 	bl	8001bda <_ZSt7forwardIP19avionics_IMU_packetEOT_RNSt16remove_referenceIS2_E4typeE>
 8001c12:	4603      	mov	r3, r0
 8001c14:	462a      	mov	r2, r5
 8001c16:	4621      	mov	r1, r4
 8001c18:	4630      	mov	r0, r6
 8001c1a:	f000 f879 	bl	8001d10 <_ZSt13__invoke_implIvRPFvhP19avionics_IMU_packetEJhS1_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fcb0 	bl	8001594 <_ZNSt9_Any_data9_M_accessEv>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_ZNSt9_Any_data9_M_accessIPPFvhP19avionics_IMU_packetEEERT_v>:
      _M_access()
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fca4 	bl	8001594 <_ZNSt9_Any_data9_M_accessEv>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	4613      	mov	r3, r2
 8001c64:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d827      	bhi.n	8001cbc <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x64>
 8001c6c:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x1c>)
 8001c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c72:	bf00      	nop
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c93 	.word	0x08001c93
 8001c7c:	08001ca7 	.word	0x08001ca7
 8001c80:	08001cb3 	.word	0x08001cb3
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff ffce 	bl	8001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x70>)
 8001c8e:	601a      	str	r2, [r3, #0]
	      break;
 8001c90:	e014      	b.n	8001cbc <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff ffd3 	bl	8001c3e <_ZNSt9_Any_data9_M_accessIPPFvhP19avionics_IMU_packetEEERT_v>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	f7ff ff81 	bl	8001ba2 <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE14_M_get_pointerERKSt9_Any_data>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	6023      	str	r3, [r4, #0]
	      break;
 8001ca4:	e00a      	b.n	8001cbc <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 8001ca6:	462a      	mov	r2, r5
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f84d 	bl	8001d4a <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8001cb0:	e004      	b.n	8001cbc <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f861 	bl	8001d7c <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001cba:	bf00      	nop
	  return false;
 8001cbc:	2300      	movs	r3, #0
	}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08018c7c 	.word	0x08018c7c

08001ccc <_ZNKSt9_Any_data9_M_accessIPFvhP19avionics_IMU_packetEEERKT_v>:
      _M_access() const
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fc68 	bl	80015aa <_ZNKSt9_Any_data9_M_accessEv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZSt11__addressofIKPFvhP19avionics_IMU_packetEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_ZSt7forwardIRPFvhP19avionics_IMU_packetEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_ZSt13__invoke_implIvRPFvhP19avionics_IMU_packetEJhS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	7338      	strb	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	f7ff ffeb 	bl	8001cfa <_ZSt7forwardIRPFvhP19avionics_IMU_packetEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001d24:	4603      	mov	r3, r0
 8001d26:	681c      	ldr	r4, [r3, #0]
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff4b 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	781d      	ldrb	r5, [r3, #0]
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	f7ff ff51 	bl	8001bda <_ZSt7forwardIP19avionics_IMU_packetEOT_RNSt16remove_referenceIS2_E4typeE>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4628      	mov	r0, r5
 8001d40:	47a0      	blx	r4
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bdb0      	pop	{r4, r5, r7, pc}

08001d4a <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8001d4a:	b590      	push	{r4, r7, lr}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8001d56:	68b8      	ldr	r0, [r7, #8]
 8001d58:	f7ff ffb8 	bl	8001ccc <_ZNKSt9_Any_data9_M_accessIPFvhP19avionics_IMU_packetEEERKT_v>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	681c      	ldr	r4, [r3, #0]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7ff fc17 	bl	8001594 <_ZNSt9_Any_data9_M_accessEv>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2004      	movs	r0, #4
 8001d6c:	f7ff fc06 	bl	800157c <_ZnwjPv>
 8001d70:	4603      	mov	r3, r0
 8001d72:	601c      	str	r4, [r3, #0]
	}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}

08001d7c <_ZNSt14_Function_base13_Base_managerIPFvhP19avionics_IMU_packetEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f804 	bl	8001d94 <_ZNSt9_Any_data9_M_accessIPFvhP19avionics_IMU_packetEEERT_v>
	}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_ZNSt9_Any_data9_M_accessIPFvhP19avionics_IMU_packetEEERT_v>:
      _M_access()
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fbf9 	bl	8001594 <_ZNSt9_Any_data9_M_accessEv>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <MX_QUADSPI_Init+0x54>)
 8001db4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001db8:	22ff      	movs	r2, #255	; 0xff
 8001dba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_QUADSPI_Init+0x50>)
 8001de8:	f006 fdc6 	bl	8008978 <HAL_QSPI_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001df2:	f7ff fe19 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	240019ec 	.word	0x240019ec
 8001e00:	52005000 	.word	0x52005000

08001e04 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0ba      	sub	sp, #232	; 0xe8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	22bc      	movs	r2, #188	; 0xbc
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f014 f8bf 	bl	8015fa8 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <HAL_QSPI_MspInit+0x154>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	f040 808c 	bne.w	8001f4e <HAL_QSPI_MspInit+0x14a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	4618      	mov	r0, r3
 8001e46:	f007 fe4d 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001e50:	f7ff fdea 	bl	8001a28 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001e56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e5a:	4a40      	ldr	r2, [pc, #256]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001e64:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001e66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e78:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e96:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001e98:	f043 0310 	orr.w	r3, r3, #16
 8001e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb4:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HAL_QSPI_MspInit+0x158>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ee4:	2309      	movs	r3, #9
 8001ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	481b      	ldr	r0, [pc, #108]	; (8001f60 <HAL_QSPI_MspInit+0x15c>)
 8001ef2:	f006 fa15 	bl	8008320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ef6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f10:	230a      	movs	r3, #10
 8001f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f16:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4811      	ldr	r0, [pc, #68]	; (8001f64 <HAL_QSPI_MspInit+0x160>)
 8001f1e:	f006 f9ff 	bl	8008320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f3c:	2309      	movs	r3, #9
 8001f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4807      	ldr	r0, [pc, #28]	; (8001f68 <HAL_QSPI_MspInit+0x164>)
 8001f4a:	f006 f9e9 	bl	8008320 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001f4e:	bf00      	nop
 8001f50:	37e8      	adds	r7, #232	; 0xe8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	52005000 	.word	0x52005000
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58020400 	.word	0x58020400
 8001f64:	58021000 	.word	0x58021000
 8001f68:	58020800 	.word	0x58020800

08001f6c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001f72:	4a28      	ldr	r2, [pc, #160]	; (8002014 <MX_SPI1_Init+0xa8>)
 8001f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001f78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001f86:	2203      	movs	r2, #3
 8001f88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001f98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_SPI1_Init+0xa4>)
 8001ffc:	f009 fefe 	bl	800bdfc <HAL_SPI_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8002006:	f7ff fd0f 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	24001a38 	.word	0x24001a38
 8002014:	40013000 	.word	0x40013000

08002018 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <MX_SPI2_Init+0xa4>)
 800201e:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <MX_SPI2_Init+0xa8>)
 8002020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002024:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002028:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <MX_SPI2_Init+0xa4>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002032:	2203      	movs	r2, #3
 8002034:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <MX_SPI2_Init+0xa4>)
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002044:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002048:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_SPI2_Init+0xa4>)
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_SPI2_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <MX_SPI2_Init+0xa4>)
 800206a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002072:	2200      	movs	r2, #0
 8002074:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002078:	2200      	movs	r2, #0
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <MX_SPI2_Init+0xa4>)
 800207e:	2200      	movs	r2, #0
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002084:	2200      	movs	r2, #0
 8002086:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_SPI2_Init+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_SPI2_Init+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <MX_SPI2_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_SPI2_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_SPI2_Init+0xa4>)
 80020a8:	f009 fea8 	bl	800bdfc <HAL_SPI_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80020b2:	f7ff fcb9 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	24001ac0 	.word	0x24001ac0
 80020c0:	40003800 	.word	0x40003800

080020c4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <MX_SPI4_Init+0xa8>)
 80020cc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020d4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020de:	2203      	movs	r2, #3
 80020e0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020e8:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020f4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <MX_SPI4_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_SPI4_Init+0xa4>)
 800210a:	2200      	movs	r2, #0
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800211a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_SPI4_Init+0xa4>)
 800211e:	2200      	movs	r2, #0
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002124:	2200      	movs	r2, #0
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_SPI4_Init+0xa4>)
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002130:	2200      	movs	r2, #0
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002136:	2200      	movs	r2, #0
 8002138:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_SPI4_Init+0xa4>)
 800213c:	2200      	movs	r2, #0
 800213e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002142:	2200      	movs	r2, #0
 8002144:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002148:	2200      	movs	r2, #0
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_SPI4_Init+0xa4>)
 800214e:	2200      	movs	r2, #0
 8002150:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_SPI4_Init+0xa4>)
 8002154:	f009 fe52 	bl	800bdfc <HAL_SPI_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800215e:	f7ff fc63 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24001b48 	.word	0x24001b48
 800216c:	40013400 	.word	0x40013400

08002170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0be      	sub	sp, #248	; 0xf8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218c:	22bc      	movs	r2, #188	; 0xbc
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f013 ff09 	bl	8015fa8 <memset>
  if(spiHandle->Instance==SPI1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a92      	ldr	r2, [pc, #584]	; (80023e4 <HAL_SPI_MspInit+0x274>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d167      	bne.n	8002270 <HAL_SPI_MspInit+0x100>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b0:	4618      	mov	r0, r3
 80021b2:	f007 fc97 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80021bc:	f7ff fc34 	bl	8001a28 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021c0:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80021c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c6:	4a88      	ldr	r2, [pc, #544]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80021c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021d0:	4b85      	ldr	r3, [pc, #532]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80021d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b82      	ldr	r3, [pc, #520]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e4:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ee:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b7a      	ldr	r3, [pc, #488]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002202:	4a79      	ldr	r2, [pc, #484]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800220c:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002232:	2305      	movs	r3, #5
 8002234:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800223c:	4619      	mov	r1, r3
 800223e:	486b      	ldr	r0, [pc, #428]	; (80023ec <HAL_SPI_MspInit+0x27c>)
 8002240:	f006 f86e 	bl	8008320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002244:	2308      	movs	r3, #8
 8002246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800225c:	2305      	movs	r3, #5
 800225e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002266:	4619      	mov	r1, r3
 8002268:	4861      	ldr	r0, [pc, #388]	; (80023f0 <HAL_SPI_MspInit+0x280>)
 800226a:	f006 f859 	bl	8008320 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800226e:	e0b4      	b.n	80023da <HAL_SPI_MspInit+0x26a>
  else if(spiHandle->Instance==SPI2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a5f      	ldr	r2, [pc, #380]	; (80023f4 <HAL_SPI_MspInit+0x284>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d167      	bne.n	800234a <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800227a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228a:	4618      	mov	r0, r3
 800228c:	f007 fc2a 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_SPI_MspInit+0x12a>
      Error_Handler();
 8002296:	f7ff fbc7 	bl	8001a28 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800229a:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 800229c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a0:	4a51      	ldr	r2, [pc, #324]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80022a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022aa:	4b4f      	ldr	r3, [pc, #316]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80022ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80022ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022be:	4a4a      	ldr	r2, [pc, #296]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c8:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80022ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	4a42      	ldr	r2, [pc, #264]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022f4:	230c      	movs	r3, #12
 80022f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800230c:	2305      	movs	r3, #5
 800230e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002312:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002316:	4619      	mov	r1, r3
 8002318:	4837      	ldr	r0, [pc, #220]	; (80023f8 <HAL_SPI_MspInit+0x288>)
 800231a:	f006 f801 	bl	8008320 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800231e:	2308      	movs	r3, #8
 8002320:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002336:	2305      	movs	r3, #5
 8002338:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002340:	4619      	mov	r1, r3
 8002342:	482e      	ldr	r0, [pc, #184]	; (80023fc <HAL_SPI_MspInit+0x28c>)
 8002344:	f005 ffec 	bl	8008320 <HAL_GPIO_Init>
}
 8002348:	e047      	b.n	80023da <HAL_SPI_MspInit+0x26a>
  else if(spiHandle->Instance==SPI4)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <HAL_SPI_MspInit+0x290>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d142      	bne.n	80023da <HAL_SPI_MspInit+0x26a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002364:	4618      	mov	r0, r3
 8002366:	f007 fbbd 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_SPI_MspInit+0x204>
      Error_Handler();
 8002370:	f7ff fb5a 	bl	8001a28 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 8002376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800237a:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 800237c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002380:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 8002386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800238a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 800239a:	f043 0310 	orr.w	r3, r3, #16
 800239e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_SPI_MspInit+0x278>)
 80023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80023b0:	2364      	movs	r3, #100	; 0x64
 80023b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80023c8:	2305      	movs	r3, #5
 80023ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023d2:	4619      	mov	r1, r3
 80023d4:	480b      	ldr	r0, [pc, #44]	; (8002404 <HAL_SPI_MspInit+0x294>)
 80023d6:	f005 ffa3 	bl	8008320 <HAL_GPIO_Init>
}
 80023da:	bf00      	nop
 80023dc:	37f8      	adds	r7, #248	; 0xf8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40013000 	.word	0x40013000
 80023e8:	58024400 	.word	0x58024400
 80023ec:	58020000 	.word	0x58020000
 80023f0:	58020400 	.word	0x58020400
 80023f4:	40003800 	.word	0x40003800
 80023f8:	58020800 	.word	0x58020800
 80023fc:	58020c00 	.word	0x58020c00
 8002400:	40013400 	.word	0x40013400
 8002404:	58021000 	.word	0x58021000

08002408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_MspInit+0x38>)
 8002410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_MspInit+0x38>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_MspInit+0x38>)
 8002420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	210f      	movs	r1, #15
 8002430:	f06f 0001 	mvn.w	r0, #1
 8002434:	f002 fbec 	bl	8004c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58024400 	.word	0x58024400

08002444 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b090      	sub	sp, #64	; 0x40
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	d827      	bhi.n	80024a2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002452:	2200      	movs	r2, #0
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	2036      	movs	r0, #54	; 0x36
 8002458:	f002 fbda 	bl	8004c10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800245c:	2036      	movs	r0, #54	; 0x36
 800245e:	f002 fbf1 	bl	8004c44 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002462:	4a29      	ldr	r2, [pc, #164]	; (8002508 <HAL_InitTick+0xc4>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_InitTick+0xc8>)
 800246a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800246e:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_InitTick+0xc8>)
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_InitTick+0xc8>)
 800247a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002486:	f107 0210 	add.w	r2, r7, #16
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f007 fae5 	bl	8009a60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <HAL_InitTick+0x6a>
 80024a0:	e001      	b.n	80024a6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e02b      	b.n	80024fe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024a6:	f007 faaf 	bl	8009a08 <HAL_RCC_GetPCLK1Freq>
 80024aa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80024ac:	e004      	b.n	80024b8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024ae:	f007 faab 	bl	8009a08 <HAL_RCC_GetPCLK1Freq>
 80024b2:	4603      	mov	r3, r0
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <HAL_InitTick+0xcc>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	0c9b      	lsrs	r3, r3, #18
 80024c2:	3b01      	subs	r3, #1
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_InitTick+0xd0>)
 80024c8:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_InitTick+0xd4>)
 80024ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_InitTick+0xd0>)
 80024ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024d4:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <HAL_InitTick+0xd0>)
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_InitTick+0xd0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_InitTick+0xd0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024e6:	480b      	ldr	r0, [pc, #44]	; (8002514 <HAL_InitTick+0xd0>)
 80024e8:	f009 fda9 	bl	800c03e <HAL_TIM_Base_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d104      	bne.n	80024fc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024f2:	4808      	ldr	r0, [pc, #32]	; (8002514 <HAL_InitTick+0xd0>)
 80024f4:	f009 fdfa 	bl	800c0ec <HAL_TIM_Base_Start_IT>
 80024f8:	4603      	mov	r3, r0
 80024fa:	e000      	b.n	80024fe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3740      	adds	r7, #64	; 0x40
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	24000008 	.word	0x24000008
 800250c:	58024400 	.word	0x58024400
 8002510:	431bde83 	.word	0x431bde83
 8002514:	24001bd0 	.word	0x24001bd0
 8002518:	40001000 	.word	0x40001000

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <NMI_Handler+0x4>

08002522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <HardFault_Handler+0x4>

08002528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <MemManage_Handler+0x4>

0800252e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <UsageFault_Handler+0x4>

0800253a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <DMA1_Stream0_IRQHandler+0x10>)
 800254e:	f004 f871 	bl	8006634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	24002140 	.word	0x24002140

0800255c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <TIM6_DAC_IRQHandler+0x20>)
 8002562:	791b      	ldrb	r3, [r3, #4]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800256a:	4804      	ldr	r0, [pc, #16]	; (800257c <TIM6_DAC_IRQHandler+0x20>)
 800256c:	f002 fb9a 	bl	8004ca4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002570:	4803      	ldr	r0, [pc, #12]	; (8002580 <TIM6_DAC_IRQHandler+0x24>)
 8002572:	f009 fe8a 	bl	800c28a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	24000338 	.word	0x24000338
 8002580:	24001bd0 	.word	0x24001bd0

08002584 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <USART6_IRQHandler+0x10>)
 800258a:	f00a ffef 	bl	800d56c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	240020b0 	.word	0x240020b0

08002598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
	return 1;
 800259c:	2301      	movs	r3, #1
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_kill>:

int _kill(int pid, int sig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025b2:	f013 fbc7 	bl	8015d44 <__errno>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2216      	movs	r2, #22
 80025ba:	601a      	str	r2, [r3, #0]
	return -1;
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_exit>:

void _exit (int status)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ffe7 	bl	80025a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025da:	e7fe      	b.n	80025da <_exit+0x12>

080025dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e00a      	b.n	8002604 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ee:	f3af 8000 	nop.w
 80025f2:	4601      	mov	r1, r0
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	60ba      	str	r2, [r7, #8]
 80025fa:	b2ca      	uxtb	r2, r1
 80025fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	dbf0      	blt.n	80025ee <_read+0x12>
	}

return len;
 800260c:	687b      	ldr	r3, [r7, #4]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e009      	b.n	800263c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	60ba      	str	r2, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	dbf1      	blt.n	8002628 <_write+0x12>
	}
	return len;
 8002644:	687b      	ldr	r3, [r7, #4]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_close>:

int _close(int file)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	return -1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002676:	605a      	str	r2, [r3, #4]
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <_isatty>:

int _isatty(int file)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
	return 1;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
	return 0;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f013 fb2c 	bl	8015d44 <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	24080000 	.word	0x24080000
 8002718:	00000400 	.word	0x00000400
 800271c:	24001c1c 	.word	0x24001c1c
 8002720:	24007428 	.word	0x24007428

08002724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002728:	4b37      	ldr	r3, [pc, #220]	; (8002808 <SystemInit+0xe4>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	4a36      	ldr	r2, [pc, #216]	; (8002808 <SystemInit+0xe4>)
 8002730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <SystemInit+0xe8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	2b06      	cmp	r3, #6
 8002742:	d807      	bhi.n	8002754 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <SystemInit+0xe8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 030f 	bic.w	r3, r3, #15
 800274c:	4a2f      	ldr	r2, [pc, #188]	; (800280c <SystemInit+0xe8>)
 800274e:	f043 0307 	orr.w	r3, r3, #7
 8002752:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002754:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <SystemInit+0xec>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2d      	ldr	r2, [pc, #180]	; (8002810 <SystemInit+0xec>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <SystemInit+0xec>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <SystemInit+0xec>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4929      	ldr	r1, [pc, #164]	; (8002810 <SystemInit+0xec>)
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <SystemInit+0xf0>)
 800276e:	4013      	ands	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002772:	4b26      	ldr	r3, [pc, #152]	; (800280c <SystemInit+0xe8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <SystemInit+0xe8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 030f 	bic.w	r3, r3, #15
 8002786:	4a21      	ldr	r2, [pc, #132]	; (800280c <SystemInit+0xe8>)
 8002788:	f043 0307 	orr.w	r3, r3, #7
 800278c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <SystemInit+0xec>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <SystemInit+0xec>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <SystemInit+0xec>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <SystemInit+0xec>)
 80027a2:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <SystemInit+0xf4>)
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <SystemInit+0xec>)
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <SystemInit+0xf8>)
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <SystemInit+0xec>)
 80027ae:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <SystemInit+0xfc>)
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <SystemInit+0xec>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <SystemInit+0xec>)
 80027ba:	4a19      	ldr	r2, [pc, #100]	; (8002820 <SystemInit+0xfc>)
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <SystemInit+0xec>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <SystemInit+0xec>)
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <SystemInit+0xfc>)
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <SystemInit+0xec>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <SystemInit+0xec>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <SystemInit+0xec>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <SystemInit+0xec>)
 80027de:	2200      	movs	r2, #0
 80027e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <SystemInit+0x100>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <SystemInit+0x104>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ee:	d202      	bcs.n	80027f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <SystemInit+0x108>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <SystemInit+0x10c>)
 80027f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00
 800280c:	52002000 	.word	0x52002000
 8002810:	58024400 	.word	0x58024400
 8002814:	eaf6ed7f 	.word	0xeaf6ed7f
 8002818:	02020200 	.word	0x02020200
 800281c:	01ff0000 	.word	0x01ff0000
 8002820:	01010280 	.word	0x01010280
 8002824:	5c001000 	.word	0x5c001000
 8002828:	ffff0000 	.word	0xffff0000
 800282c:	51008108 	.word	0x51008108
 8002830:	52004000 	.word	0x52004000

08002834 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b096      	sub	sp, #88	; 0x58
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	615a      	str	r2, [r3, #20]
 8002858:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	222c      	movs	r2, #44	; 0x2c
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f013 fba1 	bl	8015fa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <MX_TIM1_Init+0x118>)
 8002868:	4a39      	ldr	r2, [pc, #228]	; (8002950 <MX_TIM1_Init+0x11c>)
 800286a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 800286c:	4b37      	ldr	r3, [pc, #220]	; (800294c <MX_TIM1_Init+0x118>)
 800286e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002872:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <MX_TIM1_Init+0x118>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <MX_TIM1_Init+0x118>)
 800287c:	2213      	movs	r2, #19
 800287e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <MX_TIM1_Init+0x118>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <MX_TIM1_Init+0x118>)
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <MX_TIM1_Init+0x118>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002892:	482e      	ldr	r0, [pc, #184]	; (800294c <MX_TIM1_Init+0x118>)
 8002894:	f009 fca2 	bl	800c1dc <HAL_TIM_PWM_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800289e:	f7ff f8c3 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028b2:	4619      	mov	r1, r3
 80028b4:	4825      	ldr	r0, [pc, #148]	; (800294c <MX_TIM1_Init+0x118>)
 80028b6:	f00a fc49 	bl	800d14c <HAL_TIMEx_MasterConfigSynchronization>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80028c0:	f7ff f8b2 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c4:	2360      	movs	r3, #96	; 0x60
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 15;
 80028c8:	230f      	movs	r3, #15
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028d8:	2300      	movs	r3, #0
 80028da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e4:	2204      	movs	r2, #4
 80028e6:	4619      	mov	r1, r3
 80028e8:	4818      	ldr	r0, [pc, #96]	; (800294c <MX_TIM1_Init+0x118>)
 80028ea:	f009 fded 	bl	800c4c8 <HAL_TIM_PWM_ConfigChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80028f4:	f7ff f898 	bl	8001a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800290c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002910:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800291a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	4619      	mov	r1, r3
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <MX_TIM1_Init+0x118>)
 800292e:	f00a fc9b 	bl	800d268 <HAL_TIMEx_ConfigBreakDeadTime>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002938:	f7ff f876 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800293c:	4803      	ldr	r0, [pc, #12]	; (800294c <MX_TIM1_Init+0x118>)
 800293e:	f000 f9f3 	bl	8002d28 <HAL_TIM_MspPostInit>

}
 8002942:	bf00      	nop
 8002944:	3758      	adds	r7, #88	; 0x58
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	24001c20 	.word	0x24001c20
 8002950:	40010000 	.word	0x40010000

08002954 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	; 0x38
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002974:	463b      	mov	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]
 8002982:	615a      	str	r2, [r3, #20]
 8002984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002986:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <MX_TIM4_Init+0xe8>)
 8002988:	4a2d      	ldr	r2, [pc, #180]	; (8002a40 <MX_TIM4_Init+0xec>)
 800298a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <MX_TIM4_Init+0xe8>)
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002992:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <MX_TIM4_Init+0xe8>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <MX_TIM4_Init+0xe8>)
 800299a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a0:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <MX_TIM4_Init+0xe8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a6:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <MX_TIM4_Init+0xe8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029ac:	4823      	ldr	r0, [pc, #140]	; (8002a3c <MX_TIM4_Init+0xe8>)
 80029ae:	f009 fb46 	bl	800c03e <HAL_TIM_Base_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80029b8:	f7ff f836 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80029c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029c6:	4619      	mov	r1, r3
 80029c8:	481c      	ldr	r0, [pc, #112]	; (8002a3c <MX_TIM4_Init+0xe8>)
 80029ca:	f009 fe91 	bl	800c6f0 <HAL_TIM_ConfigClockSource>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80029d4:	f7ff f828 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029d8:	4818      	ldr	r0, [pc, #96]	; (8002a3c <MX_TIM4_Init+0xe8>)
 80029da:	f009 fbff 	bl	800c1dc <HAL_TIM_PWM_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80029e4:	f7ff f820 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	4619      	mov	r1, r3
 80029f6:	4811      	ldr	r0, [pc, #68]	; (8002a3c <MX_TIM4_Init+0xe8>)
 80029f8:	f00a fba8 	bl	800d14c <HAL_TIMEx_MasterConfigSynchronization>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002a02:	f7ff f811 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a06:	2360      	movs	r3, #96	; 0x60
 8002a08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a16:	463b      	mov	r3, r7
 8002a18:	220c      	movs	r2, #12
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4807      	ldr	r0, [pc, #28]	; (8002a3c <MX_TIM4_Init+0xe8>)
 8002a1e:	f009 fd53 	bl	800c4c8 <HAL_TIM_PWM_ConfigChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002a28:	f7fe fffe 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <MX_TIM4_Init+0xe8>)
 8002a2e:	f000 f97b 	bl	8002d28 <HAL_TIM_MspPostInit>

}
 8002a32:	bf00      	nop
 8002a34:	3738      	adds	r7, #56	; 0x38
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	24001c6c 	.word	0x24001c6c
 8002a40:	40000800 	.word	0x40000800

08002a44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a56:	463b      	mov	r3, r7
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
 8002a64:	615a      	str	r2, [r3, #20]
 8002a66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002a6a:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <MX_TIM5_Init+0xb0>)
 8002a6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 6400-1;
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002a70:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002a74:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002a7e:	22c7      	movs	r2, #199	; 0xc7
 8002a80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a8e:	4818      	ldr	r0, [pc, #96]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002a90:	f009 fba4 	bl	800c1dc <HAL_TIM_PWM_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002a9a:	f7fe ffc5 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002aa6:	f107 031c 	add.w	r3, r7, #28
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4810      	ldr	r0, [pc, #64]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002aae:	f00a fb4d 	bl	800d14c <HAL_TIMEx_MasterConfigSynchronization>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002ab8:	f7fe ffb6 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002abc:	2360      	movs	r3, #96	; 0x60
 8002abe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100-1;
 8002ac0:	2363      	movs	r3, #99	; 0x63
 8002ac2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002acc:	463b      	mov	r3, r7
 8002ace:	2204      	movs	r2, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4807      	ldr	r0, [pc, #28]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002ad4:	f009 fcf8 	bl	800c4c8 <HAL_TIM_PWM_ConfigChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002ade:	f7fe ffa3 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ae2:	4803      	ldr	r0, [pc, #12]	; (8002af0 <MX_TIM5_Init+0xac>)
 8002ae4:	f000 f920 	bl	8002d28 <HAL_TIM_MspPostInit>

}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	; 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	24001cb8 	.word	0x24001cb8
 8002af4:	40000c00 	.word	0x40000c00

08002af8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b09a      	sub	sp, #104	; 0x68
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
 8002b28:	615a      	str	r2, [r3, #20]
 8002b2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	222c      	movs	r2, #44	; 0x2c
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f013 fa38 	bl	8015fa8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002b38:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b3a:	4a40      	ldr	r2, [pc, #256]	; (8002c3c <MX_TIM15_Init+0x144>)
 8002b3c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 6400;
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b40:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002b44:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b46:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8002b4c:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b4e:	22c7      	movs	r2, #199	; 0xc7
 8002b50:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b52:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002b58:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002b64:	4834      	ldr	r0, [pc, #208]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b66:	f009 fa6a 	bl	800c03e <HAL_TIM_Base_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002b70:	f7fe ff5a 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b78:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002b7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b7e:	4619      	mov	r1, r3
 8002b80:	482d      	ldr	r0, [pc, #180]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b82:	f009 fdb5 	bl	800c6f0 <HAL_TIM_ConfigClockSource>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8002b8c:	f7fe ff4c 	bl	8001a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002b90:	4829      	ldr	r0, [pc, #164]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002b92:	f009 fb23 	bl	800c1dc <HAL_TIM_PWM_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8002b9c:	f7fe ff44 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002ba8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bac:	4619      	mov	r1, r3
 8002bae:	4822      	ldr	r0, [pc, #136]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002bb0:	f00a facc 	bl	800d14c <HAL_TIMEx_MasterConfigSynchronization>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8002bba:	f7fe ff35 	bl	8001a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbe:	2360      	movs	r3, #96	; 0x60
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 8002bc2:	2363      	movs	r3, #99	; 0x63
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bde:	2204      	movs	r2, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4815      	ldr	r0, [pc, #84]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002be4:	f009 fc70 	bl	800c4c8 <HAL_TIM_PWM_ConfigChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8002bee:	f7fe ff1b 	bl	8001a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	4807      	ldr	r0, [pc, #28]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002c1a:	f00a fb25 	bl	800d268 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8002c24:	f7fe ff00 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <MX_TIM15_Init+0x140>)
 8002c2a:	f000 f87d 	bl	8002d28 <HAL_TIM_MspPostInit>

}
 8002c2e:	bf00      	nop
 8002c30:	3768      	adds	r7, #104	; 0x68
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	24001d04 	.word	0x24001d04
 8002c3c:	40014000 	.word	0x40014000

08002c40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <HAL_TIM_PWM_MspInit+0x68>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10f      	bne.n	8002c72 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_TIM_PWM_MspInit+0x6c>)
 8002c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_TIM_PWM_MspInit+0x6c>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_TIM_PWM_MspInit+0x6c>)
 8002c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c70:	e013      	b.n	8002c9a <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM5)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <HAL_TIM_PWM_MspInit+0x70>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10e      	bne.n	8002c9a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_TIM_PWM_MspInit+0x6c>)
 8002c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_TIM_PWM_MspInit+0x6c>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <HAL_TIM_PWM_MspInit+0x6c>)
 8002c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	40000c00 	.word	0x40000c00

08002cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a16      	ldr	r2, [pc, #88]	; (8002d1c <HAL_TIM_Base_MspInit+0x68>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <HAL_TIM_Base_MspInit+0x6c>)
 8002cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_TIM_Base_MspInit+0x6c>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_TIM_Base_MspInit+0x6c>)
 8002cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002ce4:	e013      	b.n	8002d0e <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM15)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <HAL_TIM_Base_MspInit+0x70>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10e      	bne.n	8002d0e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_TIM_Base_MspInit+0x6c>)
 8002cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_TIM_Base_MspInit+0x6c>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_TIM_Base_MspInit+0x6c>)
 8002d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	58024400 	.word	0x58024400
 8002d24:	40014000 	.word	0x40014000

08002d28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 031c 	add.w	r3, r7, #28
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_TIM_MspPostInit+0x14c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d120      	bne.n	8002d8c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d4a:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d50:	4a49      	ldr	r2, [pc, #292]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002d52:	f043 0310 	orr.w	r3, r3, #16
 8002d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d76:	2300      	movs	r3, #0
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d7e:	f107 031c 	add.w	r3, r7, #28
 8002d82:	4619      	mov	r1, r3
 8002d84:	483d      	ldr	r0, [pc, #244]	; (8002e7c <HAL_TIM_MspPostInit+0x154>)
 8002d86:	f005 facb 	bl	8008320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002d8a:	e06e      	b.n	8002e6a <HAL_TIM_MspPostInit+0x142>
  else if(timHandle->Instance==TIM4)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3b      	ldr	r2, [pc, #236]	; (8002e80 <HAL_TIM_MspPostInit+0x158>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d120      	bne.n	8002dd8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d96:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d9c:	4a36      	ldr	r2, [pc, #216]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002d9e:	f043 0308 	orr.w	r3, r3, #8
 8002da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da6:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	4619      	mov	r1, r3
 8002dd0:	482c      	ldr	r0, [pc, #176]	; (8002e84 <HAL_TIM_MspPostInit+0x15c>)
 8002dd2:	f005 faa5 	bl	8008320 <HAL_GPIO_Init>
}
 8002dd6:	e048      	b.n	8002e6a <HAL_TIM_MspPostInit+0x142>
  else if(timHandle->Instance==TIM5)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <HAL_TIM_MspPostInit+0x160>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d11f      	bne.n	8002e22 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de8:	4a23      	ldr	r2, [pc, #140]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e10:	2302      	movs	r3, #2
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481c      	ldr	r0, [pc, #112]	; (8002e8c <HAL_TIM_MspPostInit+0x164>)
 8002e1c:	f005 fa80 	bl	8008320 <HAL_GPIO_Init>
}
 8002e20:	e023      	b.n	8002e6a <HAL_TIM_MspPostInit+0x142>
  else if(timHandle->Instance==TIM15)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_TIM_MspPostInit+0x168>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d11e      	bne.n	8002e6a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e32:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_TIM_MspPostInit+0x150>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	4809      	ldr	r0, [pc, #36]	; (8002e8c <HAL_TIM_MspPostInit+0x164>)
 8002e66:	f005 fa5b 	bl	8008320 <HAL_GPIO_Init>
}
 8002e6a:	bf00      	nop
 8002e6c:	3730      	adds	r7, #48	; 0x30
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40010000 	.word	0x40010000
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	58021000 	.word	0x58021000
 8002e80:	40000800 	.word	0x40000800
 8002e84:	58020c00 	.word	0x58020c00
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	58020000 	.word	0x58020000
 8002e90:	40014000 	.word	0x40014000

08002e94 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e98:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002e9a:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <MX_LPUART1_UART_Init+0x94>)
 8002e9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002e9e:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <MX_LPUART1_UART_Init+0x98>)
 8002ea2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002eb8:	220c      	movs	r2, #12
 8002eba:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002eda:	4812      	ldr	r0, [pc, #72]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002edc:	f00a fa60 	bl	800d3a0 <HAL_UART_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002ee6:	f7fe fd9f 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eea:	2100      	movs	r1, #0
 8002eec:	480d      	ldr	r0, [pc, #52]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002eee:	f00c f8ec 	bl	800f0ca <HAL_UARTEx_SetTxFifoThreshold>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002ef8:	f7fe fd96 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002efc:	2100      	movs	r1, #0
 8002efe:	4809      	ldr	r0, [pc, #36]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002f00:	f00c f921 	bl	800f146 <HAL_UARTEx_SetRxFifoThreshold>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002f0a:	f7fe fd8d 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_LPUART1_UART_Init+0x90>)
 8002f10:	f00c f8a2 	bl	800f058 <HAL_UARTEx_DisableFifoMode>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002f1a:	f7fe fd85 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	24001d50 	.word	0x24001d50
 8002f28:	58000c00 	.word	0x58000c00
 8002f2c:	00033324 	.word	0x00033324

08002f30 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f36:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <MX_UART4_Init+0x94>)
 8002f38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5a:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f78:	4811      	ldr	r0, [pc, #68]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f7a:	f00a fa11 	bl	800d3a0 <HAL_UART_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002f84:	f7fe fd50 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f88:	2100      	movs	r1, #0
 8002f8a:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f8c:	f00c f89d 	bl	800f0ca <HAL_UARTEx_SetTxFifoThreshold>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002f96:	f7fe fd47 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4808      	ldr	r0, [pc, #32]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002f9e:	f00c f8d2 	bl	800f146 <HAL_UARTEx_SetRxFifoThreshold>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002fa8:	f7fe fd3e 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <MX_UART4_Init+0x90>)
 8002fae:	f00c f853 	bl	800f058 <HAL_UARTEx_DisableFifoMode>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002fb8:	f7fe fd36 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	24001de0 	.word	0x24001de0
 8002fc4:	40004c00 	.word	0x40004c00

08002fc8 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <MX_UART8_Init+0x90>)
 8002fce:	4a23      	ldr	r2, [pc, #140]	; (800305c <MX_UART8_Init+0x94>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <MX_UART8_Init+0x90>)
 8002fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <MX_UART8_Init+0x90>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <MX_UART8_Init+0x90>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <MX_UART8_Init+0x90>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <MX_UART8_Init+0x90>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <MX_UART8_Init+0x90>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b17      	ldr	r3, [pc, #92]	; (8003058 <MX_UART8_Init+0x90>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <MX_UART8_Init+0x90>)
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_UART8_Init+0x90>)
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <MX_UART8_Init+0x90>)
 800300c:	2200      	movs	r2, #0
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003010:	4811      	ldr	r0, [pc, #68]	; (8003058 <MX_UART8_Init+0x90>)
 8003012:	f00a f9c5 	bl	800d3a0 <HAL_UART_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800301c:	f7fe fd04 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003020:	2100      	movs	r1, #0
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <MX_UART8_Init+0x90>)
 8003024:	f00c f851 	bl	800f0ca <HAL_UARTEx_SetTxFifoThreshold>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800302e:	f7fe fcfb 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003032:	2100      	movs	r1, #0
 8003034:	4808      	ldr	r0, [pc, #32]	; (8003058 <MX_UART8_Init+0x90>)
 8003036:	f00c f886 	bl	800f146 <HAL_UARTEx_SetRxFifoThreshold>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8003040:	f7fe fcf2 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003044:	4804      	ldr	r0, [pc, #16]	; (8003058 <MX_UART8_Init+0x90>)
 8003046:	f00c f807 	bl	800f058 <HAL_UARTEx_DisableFifoMode>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8003050:	f7fe fcea 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}
 8003058:	24001e70 	.word	0x24001e70
 800305c:	40007c00 	.word	0x40007c00

08003060 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 8003066:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <MX_USART1_UART_Init+0x94>)
 8003068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 800306c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a8:	4811      	ldr	r0, [pc, #68]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 80030aa:	f00a f979 	bl	800d3a0 <HAL_UART_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80030b4:	f7fe fcb8 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b8:	2100      	movs	r1, #0
 80030ba:	480d      	ldr	r0, [pc, #52]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 80030bc:	f00c f805 	bl	800f0ca <HAL_UARTEx_SetTxFifoThreshold>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80030c6:	f7fe fcaf 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ca:	2100      	movs	r1, #0
 80030cc:	4808      	ldr	r0, [pc, #32]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 80030ce:	f00c f83a 	bl	800f146 <HAL_UARTEx_SetRxFifoThreshold>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80030d8:	f7fe fca6 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80030dc:	4804      	ldr	r0, [pc, #16]	; (80030f0 <MX_USART1_UART_Init+0x90>)
 80030de:	f00b ffbb 	bl	800f058 <HAL_UARTEx_DisableFifoMode>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80030e8:	f7fe fc9e 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	24001f00 	.word	0x24001f00
 80030f4:	40011000 	.word	0x40011000

080030f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030fc:	4b22      	ldr	r3, [pc, #136]	; (8003188 <MX_USART2_UART_Init+0x90>)
 80030fe:	4a23      	ldr	r2, [pc, #140]	; (800318c <MX_USART2_UART_Init+0x94>)
 8003100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003102:	4b21      	ldr	r3, [pc, #132]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800310a:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <MX_USART2_UART_Init+0x90>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <MX_USART2_UART_Init+0x90>)
 800311e:	220c      	movs	r2, #12
 8003120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003122:	4b19      	ldr	r3, [pc, #100]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <MX_USART2_UART_Init+0x90>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800312e:	4b16      	ldr	r3, [pc, #88]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003130:	2200      	movs	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003136:	2200      	movs	r2, #0
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <MX_USART2_UART_Init+0x90>)
 800313c:	2200      	movs	r2, #0
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003140:	4811      	ldr	r0, [pc, #68]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003142:	f00a f92d 	bl	800d3a0 <HAL_UART_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800314c:	f7fe fc6c 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003150:	2100      	movs	r1, #0
 8003152:	480d      	ldr	r0, [pc, #52]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003154:	f00b ffb9 	bl	800f0ca <HAL_UARTEx_SetTxFifoThreshold>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800315e:	f7fe fc63 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003162:	2100      	movs	r1, #0
 8003164:	4808      	ldr	r0, [pc, #32]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003166:	f00b ffee 	bl	800f146 <HAL_UARTEx_SetRxFifoThreshold>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003170:	f7fe fc5a 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <MX_USART2_UART_Init+0x90>)
 8003176:	f00b ff6f 	bl	800f058 <HAL_UARTEx_DisableFifoMode>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003180:	f7fe fc52 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	24001f90 	.word	0x24001f90
 800318c:	40004400 	.word	0x40004400

08003190 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003194:	4b22      	ldr	r3, [pc, #136]	; (8003220 <MX_USART3_UART_Init+0x90>)
 8003196:	4a23      	ldr	r2, [pc, #140]	; (8003224 <MX_USART3_UART_Init+0x94>)
 8003198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <MX_USART3_UART_Init+0x90>)
 800319c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031a2:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031b4:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031b6:	220c      	movs	r2, #12
 80031b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ba:	4b19      	ldr	r3, [pc, #100]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c0:	4b17      	ldr	r3, [pc, #92]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031d8:	4811      	ldr	r0, [pc, #68]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031da:	f00a f8e1 	bl	800d3a0 <HAL_UART_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80031e4:	f7fe fc20 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031e8:	2100      	movs	r1, #0
 80031ea:	480d      	ldr	r0, [pc, #52]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031ec:	f00b ff6d 	bl	800f0ca <HAL_UARTEx_SetTxFifoThreshold>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80031f6:	f7fe fc17 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031fa:	2100      	movs	r1, #0
 80031fc:	4808      	ldr	r0, [pc, #32]	; (8003220 <MX_USART3_UART_Init+0x90>)
 80031fe:	f00b ffa2 	bl	800f146 <HAL_UARTEx_SetRxFifoThreshold>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003208:	f7fe fc0e 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800320c:	4804      	ldr	r0, [pc, #16]	; (8003220 <MX_USART3_UART_Init+0x90>)
 800320e:	f00b ff23 	bl	800f058 <HAL_UARTEx_DisableFifoMode>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003218:	f7fe fc06 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}
 8003220:	24002020 	.word	0x24002020
 8003224:	40004800 	.word	0x40004800

08003228 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800322c:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 800322e:	4a23      	ldr	r2, [pc, #140]	; (80032bc <MX_USART6_UART_Init+0x94>)
 8003230:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003232:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003238:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003246:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 800324e:	220c      	movs	r2, #12
 8003250:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 800325a:	2200      	movs	r2, #0
 800325c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003260:	2200      	movs	r2, #0
 8003262:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003266:	2200      	movs	r2, #0
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 800326c:	2200      	movs	r2, #0
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003270:	4811      	ldr	r0, [pc, #68]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003272:	f00a f895 	bl	800d3a0 <HAL_UART_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800327c:	f7fe fbd4 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003280:	2100      	movs	r1, #0
 8003282:	480d      	ldr	r0, [pc, #52]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003284:	f00b ff21 	bl	800f0ca <HAL_UARTEx_SetTxFifoThreshold>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800328e:	f7fe fbcb 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003292:	2100      	movs	r1, #0
 8003294:	4808      	ldr	r0, [pc, #32]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 8003296:	f00b ff56 	bl	800f146 <HAL_UARTEx_SetRxFifoThreshold>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80032a0:	f7fe fbc2 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80032a4:	4804      	ldr	r0, [pc, #16]	; (80032b8 <MX_USART6_UART_Init+0x90>)
 80032a6:	f00b fed7 	bl	800f058 <HAL_UARTEx_DisableFifoMode>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80032b0:	f7fe fbba 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	240020b0 	.word	0x240020b0
 80032bc:	40011400 	.word	0x40011400

080032c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b0c4      	sub	sp, #272	; 0x110
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032ce:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032e4:	22bc      	movs	r2, #188	; 0xbc
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f012 fe5d 	bl	8015fa8 <memset>
  if(uartHandle->Instance==LPUART1)
 80032ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4abc      	ldr	r2, [pc, #752]	; (80035ec <HAL_UART_MspInit+0x32c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d143      	bne.n	8003388 <HAL_UART_MspInit+0xc8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003300:	2304      	movs	r3, #4
 8003302:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8003304:	2300      	movs	r3, #0
 8003306:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800330a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800330e:	4618      	mov	r0, r3
 8003310:	f006 fbe8 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800331a:	f7fe fb85 	bl	8001a28 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800331e:	4bb4      	ldr	r3, [pc, #720]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003324:	4ab2      	ldr	r2, [pc, #712]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003326:	f043 0308 	orr.w	r3, r3, #8
 800332a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800332e:	4bb0      	ldr	r3, [pc, #704]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333c:	4bac      	ldr	r3, [pc, #688]	; (80035f0 <HAL_UART_MspInit+0x330>)
 800333e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003342:	4aab      	ldr	r2, [pc, #684]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800334c:	4ba8      	ldr	r3, [pc, #672]	; (80035f0 <HAL_UART_MspInit+0x330>)
 800334e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	63bb      	str	r3, [r7, #56]	; 0x38
 8003358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800335a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800335e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	2302      	movs	r3, #2
 8003364:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8003374:	2303      	movs	r3, #3
 8003376:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800337e:	4619      	mov	r1, r3
 8003380:	489c      	ldr	r0, [pc, #624]	; (80035f4 <HAL_UART_MspInit+0x334>)
 8003382:	f004 ffcd 	bl	8008320 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003386:	e235      	b.n	80037f4 <HAL_UART_MspInit+0x534>
  else if(uartHandle->Instance==UART4)
 8003388:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800338c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a98      	ldr	r2, [pc, #608]	; (80035f8 <HAL_UART_MspInit+0x338>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d142      	bne.n	8003420 <HAL_UART_MspInit+0x160>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800339a:	2302      	movs	r3, #2
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033a8:	4618      	mov	r0, r3
 80033aa:	f006 fb9b 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_UART_MspInit+0xf8>
      Error_Handler();
 80033b4:	f7fe fb38 	bl	8001a28 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80033b8:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80033ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033be:	4a8c      	ldr	r2, [pc, #560]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80033c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033c8:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80033ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d6:	4b86      	ldr	r3, [pc, #536]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80033d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033dc:	4a84      	ldr	r2, [pc, #528]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e6:	4b82      	ldr	r3, [pc, #520]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80033e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	633b      	str	r3, [r7, #48]	; 0x30
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033f4:	2303      	movs	r3, #3
 80033f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800340c:	2308      	movs	r3, #8
 800340e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003412:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003416:	4619      	mov	r1, r3
 8003418:	4878      	ldr	r0, [pc, #480]	; (80035fc <HAL_UART_MspInit+0x33c>)
 800341a:	f004 ff81 	bl	8008320 <HAL_GPIO_Init>
}
 800341e:	e1e9      	b.n	80037f4 <HAL_UART_MspInit+0x534>
  else if(uartHandle->Instance==UART8)
 8003420:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003424:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a74      	ldr	r2, [pc, #464]	; (8003600 <HAL_UART_MspInit+0x340>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d142      	bne.n	80034b8 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003432:	2302      	movs	r3, #2
 8003434:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800343c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003440:	4618      	mov	r0, r3
 8003442:	f006 fb4f 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800344c:	f7fe faec 	bl	8001a28 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003450:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003456:	4a66      	ldr	r2, [pc, #408]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800345c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003460:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800346e:	4b60      	ldr	r3, [pc, #384]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003474:	4a5e      	ldr	r2, [pc, #376]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003476:	f043 0310 	orr.w	r3, r3, #16
 800347a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800347e:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800348c:	2303      	movs	r3, #3
 800348e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80034a4:	2308      	movs	r3, #8
 80034a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80034ae:	4619      	mov	r1, r3
 80034b0:	4854      	ldr	r0, [pc, #336]	; (8003604 <HAL_UART_MspInit+0x344>)
 80034b2:	f004 ff35 	bl	8008320 <HAL_GPIO_Init>
}
 80034b6:	e19d      	b.n	80037f4 <HAL_UART_MspInit+0x534>
  else if(uartHandle->Instance==USART1)
 80034b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80034bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a50      	ldr	r2, [pc, #320]	; (8003608 <HAL_UART_MspInit+0x348>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d143      	bne.n	8003552 <HAL_UART_MspInit+0x292>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034d8:	4618      	mov	r0, r3
 80034da:	f006 fb03 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80034e4:	f7fe faa0 	bl	8001a28 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e8:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80034ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ee:	4a40      	ldr	r2, [pc, #256]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80034f0:	f043 0310 	orr.w	r3, r3, #16
 80034f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034f8:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80034fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003506:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350c:	4a38      	ldr	r2, [pc, #224]	; (80035f0 <HAL_UART_MspInit+0x330>)
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	623b      	str	r3, [r7, #32]
 8003522:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003524:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003528:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800353e:	2304      	movs	r3, #4
 8003540:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003544:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003548:	4619      	mov	r1, r3
 800354a:	4830      	ldr	r0, [pc, #192]	; (800360c <HAL_UART_MspInit+0x34c>)
 800354c:	f004 fee8 	bl	8008320 <HAL_GPIO_Init>
}
 8003550:	e150      	b.n	80037f4 <HAL_UART_MspInit+0x534>
  else if(uartHandle->Instance==USART2)
 8003552:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003556:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <HAL_UART_MspInit+0x350>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d157      	bne.n	8003614 <HAL_UART_MspInit+0x354>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003564:	2302      	movs	r3, #2
 8003566:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800356e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003572:	4618      	mov	r0, r3
 8003574:	f006 fab6 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_UART_MspInit+0x2c2>
      Error_Handler();
 800357e:	f7fe fa53 	bl	8001a28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_UART_MspInit+0x330>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_UART_MspInit+0x330>)
 8003594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80035a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_UART_MspInit+0x330>)
 80035b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035be:	2360      	movs	r3, #96	; 0x60
 80035c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c4:	2302      	movs	r3, #2
 80035c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035d6:	2307      	movs	r3, #7
 80035d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80035e0:	4619      	mov	r1, r3
 80035e2:	4806      	ldr	r0, [pc, #24]	; (80035fc <HAL_UART_MspInit+0x33c>)
 80035e4:	f004 fe9c 	bl	8008320 <HAL_GPIO_Init>
}
 80035e8:	e104      	b.n	80037f4 <HAL_UART_MspInit+0x534>
 80035ea:	bf00      	nop
 80035ec:	58000c00 	.word	0x58000c00
 80035f0:	58024400 	.word	0x58024400
 80035f4:	58020000 	.word	0x58020000
 80035f8:	40004c00 	.word	0x40004c00
 80035fc:	58020c00 	.word	0x58020c00
 8003600:	40007c00 	.word	0x40007c00
 8003604:	58021000 	.word	0x58021000
 8003608:	40011000 	.word	0x40011000
 800360c:	58020400 	.word	0x58020400
 8003610:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8003614:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003618:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a77      	ldr	r2, [pc, #476]	; (8003800 <HAL_UART_MspInit+0x540>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d14b      	bne.n	80036be <HAL_UART_MspInit+0x3fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003626:	2302      	movs	r3, #2
 8003628:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003634:	4618      	mov	r0, r3
 8003636:	f006 fa55 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_MspInit+0x384>
      Error_Handler();
 8003640:	f7fe f9f2 	bl	8001a28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003644:	4b6f      	ldr	r3, [pc, #444]	; (8003804 <HAL_UART_MspInit+0x544>)
 8003646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800364a:	4a6e      	ldr	r2, [pc, #440]	; (8003804 <HAL_UART_MspInit+0x544>)
 800364c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003650:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003654:	4b6b      	ldr	r3, [pc, #428]	; (8003804 <HAL_UART_MspInit+0x544>)
 8003656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800365a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003662:	4b68      	ldr	r3, [pc, #416]	; (8003804 <HAL_UART_MspInit+0x544>)
 8003664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003668:	4a66      	ldr	r2, [pc, #408]	; (8003804 <HAL_UART_MspInit+0x544>)
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003672:	4b64      	ldr	r3, [pc, #400]	; (8003804 <HAL_UART_MspInit+0x544>)
 8003674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003678:	f003 0208 	and.w	r2, r3, #8
 800367c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003680:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800368a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800368e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003690:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003694:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	2302      	movs	r3, #2
 800369a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036aa:	2307      	movs	r3, #7
 80036ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80036b4:	4619      	mov	r1, r3
 80036b6:	4854      	ldr	r0, [pc, #336]	; (8003808 <HAL_UART_MspInit+0x548>)
 80036b8:	f004 fe32 	bl	8008320 <HAL_GPIO_Init>
}
 80036bc:	e09a      	b.n	80037f4 <HAL_UART_MspInit+0x534>
  else if(uartHandle->Instance==USART6)
 80036be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a50      	ldr	r2, [pc, #320]	; (800380c <HAL_UART_MspInit+0x54c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	f040 8091 	bne.w	80037f4 <HAL_UART_MspInit+0x534>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80036d2:	2301      	movs	r3, #1
 80036d4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036e0:	4618      	mov	r0, r3
 80036e2:	f006 f9ff 	bl	8009ae4 <HAL_RCCEx_PeriphCLKConfig>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_UART_MspInit+0x430>
      Error_Handler();
 80036ec:	f7fe f99c 	bl	8001a28 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036f0:	4b44      	ldr	r3, [pc, #272]	; (8003804 <HAL_UART_MspInit+0x544>)
 80036f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036f6:	4a43      	ldr	r2, [pc, #268]	; (8003804 <HAL_UART_MspInit+0x544>)
 80036f8:	f043 0320 	orr.w	r3, r3, #32
 80036fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003700:	4b40      	ldr	r3, [pc, #256]	; (8003804 <HAL_UART_MspInit+0x544>)
 8003702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003706:	f003 0220 	and.w	r2, r3, #32
 800370a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800370e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800371c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800371e:	4b39      	ldr	r3, [pc, #228]	; (8003804 <HAL_UART_MspInit+0x544>)
 8003720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003724:	4a37      	ldr	r2, [pc, #220]	; (8003804 <HAL_UART_MspInit+0x544>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800372e:	4b35      	ldr	r3, [pc, #212]	; (8003804 <HAL_UART_MspInit+0x544>)
 8003730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003734:	f003 0204 	and.w	r2, r3, #4
 8003738:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800373c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800374a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800374c:	23c0      	movs	r3, #192	; 0xc0
 800374e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003752:	2302      	movs	r3, #2
 8003754:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003764:	2307      	movs	r3, #7
 8003766:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800376e:	4619      	mov	r1, r3
 8003770:	4827      	ldr	r0, [pc, #156]	; (8003810 <HAL_UART_MspInit+0x550>)
 8003772:	f004 fdd5 	bl	8008320 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream0;
 8003776:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_UART_MspInit+0x554>)
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <HAL_UART_MspInit+0x558>)
 800377a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <HAL_UART_MspInit+0x554>)
 800377e:	2247      	movs	r2, #71	; 0x47
 8003780:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_UART_MspInit+0x554>)
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <HAL_UART_MspInit+0x554>)
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_UART_MspInit+0x554>)
 8003790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003794:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003796:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_UART_MspInit+0x554>)
 8003798:	2200      	movs	r2, #0
 800379a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_UART_MspInit+0x554>)
 800379e:	2200      	movs	r2, #0
 80037a0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_UART_MspInit+0x554>)
 80037a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_UART_MspInit+0x554>)
 80037ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037b0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_UART_MspInit+0x554>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80037b8:	4816      	ldr	r0, [pc, #88]	; (8003814 <HAL_UART_MspInit+0x554>)
 80037ba:	f001 fc11 	bl	8004fe0 <HAL_DMA_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_UART_MspInit+0x508>
      Error_Handler();
 80037c4:	f7fe f930 	bl	8001a28 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80037c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <HAL_UART_MspInit+0x554>)
 80037d4:	67da      	str	r2, [r3, #124]	; 0x7c
 80037d6:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <HAL_UART_MspInit+0x554>)
 80037d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2105      	movs	r1, #5
 80037e8:	2047      	movs	r0, #71	; 0x47
 80037ea:	f001 fa11 	bl	8004c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80037ee:	2047      	movs	r0, #71	; 0x47
 80037f0:	f001 fa28 	bl	8004c44 <HAL_NVIC_EnableIRQ>
}
 80037f4:	bf00      	nop
 80037f6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40004800 	.word	0x40004800
 8003804:	58024400 	.word	0x58024400
 8003808:	58020c00 	.word	0x58020c00
 800380c:	40011400 	.word	0x40011400
 8003810:	58020800 	.word	0x58020800
 8003814:	24002140 	.word	0x24002140
 8003818:	40020010 	.word	0x40020010

0800381c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800381c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003854 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003820:	f7fe ff80 	bl	8002724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003826:	490d      	ldr	r1, [pc, #52]	; (800385c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800382c:	e002      	b.n	8003834 <LoopCopyDataInit>

0800382e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003832:	3304      	adds	r3, #4

08003834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003838:	d3f9      	bcc.n	800382e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800383c:	4c0a      	ldr	r4, [pc, #40]	; (8003868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003840:	e001      	b.n	8003846 <LoopFillZerobss>

08003842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003844:	3204      	adds	r2, #4

08003846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003848:	d3fb      	bcc.n	8003842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800384a:	f012 fb77 	bl	8015f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800384e:	f7fd fef7 	bl	8001640 <main>
  bx  lr
 8003852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003854:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003858:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800385c:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8003860:	080199ec 	.word	0x080199ec
  ldr r2, =_sbss
 8003864:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8003868:	24007424 	.word	0x24007424

0800386c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800386c:	e7fe      	b.n	800386c <ADC3_IRQHandler>
	...

08003870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003876:	2003      	movs	r0, #3
 8003878:	f001 f9bf 	bl	8004bfa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800387c:	f005 ff1a 	bl	80096b4 <HAL_RCC_GetSysClockFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_Init+0x68>)
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	4913      	ldr	r1, [pc, #76]	; (80038dc <HAL_Init+0x6c>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
 8003898:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_Init+0x68>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <HAL_Init+0x6c>)
 80038a4:	5cd3      	ldrb	r3, [r2, r3]
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <HAL_Init+0x70>)
 80038b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038b4:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_Init+0x74>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ba:	200f      	movs	r0, #15
 80038bc:	f7fe fdc2 	bl	8002444 <HAL_InitTick>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e002      	b.n	80038d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038ca:	f7fe fd9d 	bl	8002408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	58024400 	.word	0x58024400
 80038dc:	08018ccc 	.word	0x08018ccc
 80038e0:	24000004 	.word	0x24000004
 80038e4:	24000000 	.word	0x24000000

080038e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_IncTick+0x20>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_IncTick+0x24>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_IncTick+0x24>)
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	2400000c 	.word	0x2400000c
 800390c:	240021b8 	.word	0x240021b8

08003910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return uwTick;
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_GetTick+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	240021b8 	.word	0x240021b8

08003928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7ff ffee 	bl	8003910 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d005      	beq.n	800394e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_Delay+0x44>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800394e:	bf00      	nop
 8003950:	f7ff ffde 	bl	8003910 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d8f7      	bhi.n	8003950 <HAL_Delay+0x28>
  {
  }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2400000c 	.word	0x2400000c

08003970 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_GetREVID+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0c1b      	lsrs	r3, r3, #16
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	5c001000 	.word	0x5c001000

08003988 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3360      	adds	r3, #96	; 0x60
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	611a      	str	r2, [r3, #16]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b087      	sub	sp, #28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3360      	adds	r3, #96	; 0x60
 8003a72:	461a      	mov	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	601a      	str	r2, [r3, #0]
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3330      	adds	r3, #48	; 0x30
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	4413      	add	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	211f      	movs	r1, #31
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	f003 011f 	and.w	r1, r3, #31
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3314      	adds	r3, #20
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	0e5b      	lsrs	r3, r3, #25
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	4413      	add	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	0d1b      	lsrs	r3, r3, #20
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2107      	movs	r1, #7
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	401a      	ands	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	0d1b      	lsrs	r3, r3, #20
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	431a      	orrs	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b60:	43db      	mvns	r3, r3
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0318 	and.w	r3, r3, #24
 8003b6a:	4908      	ldr	r1, [pc, #32]	; (8003b8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b6c:	40d9      	lsrs	r1, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	400b      	ands	r3, r1
 8003b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	000fffff 	.word	0x000fffff

08003b90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6093      	str	r3, [r2, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	5fffffc0 	.word	0x5fffffc0

08003bb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc8:	d101      	bne.n	8003bce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <LL_ADC_EnableInternalRegulator+0x24>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	6fffffc0 	.word	0x6fffffc0

08003c04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c18:	d101      	bne.n	8003c1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <LL_ADC_IsEnabled+0x18>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <LL_ADC_IsEnabled+0x1a>
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d101      	bne.n	8003c6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d101      	bne.n	8003c90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e18f      	b.n	8003fda <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fc fe37 	bl	800093c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff67 	bl	8003bb4 <LL_ADC_IsDeepPowerDownEnabled>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff4d 	bl	8003b90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff82 	bl	8003c04 <LL_ADC_IsInternalRegulatorEnabled>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d114      	bne.n	8003d30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff66 	bl	8003bdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d10:	4b87      	ldr	r3, [pc, #540]	; (8003f30 <HAL_ADC_Init+0x290>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	4a87      	ldr	r2, [pc, #540]	; (8003f34 <HAL_ADC_Init+0x294>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d22:	e002      	b.n	8003d2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f9      	bne.n	8003d24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff65 	bl	8003c04 <LL_ADC_IsInternalRegulatorEnabled>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10d      	bne.n	8003d5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f043 0210 	orr.w	r2, r3, #16
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f043 0201 	orr.w	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff76 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8003d66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 8129 	bne.w	8003fc8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f040 8125 	bne.w	8003fc8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d86:	f043 0202 	orr.w	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff ff4a 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d136      	bne.n	8003e0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a65      	ldr	r2, [pc, #404]	; (8003f38 <HAL_ADC_Init+0x298>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_ADC_Init+0x112>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a63      	ldr	r2, [pc, #396]	; (8003f3c <HAL_ADC_Init+0x29c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10e      	bne.n	8003dd0 <HAL_ADC_Init+0x130>
 8003db2:	4861      	ldr	r0, [pc, #388]	; (8003f38 <HAL_ADC_Init+0x298>)
 8003db4:	f7ff ff3a 	bl	8003c2c <LL_ADC_IsEnabled>
 8003db8:	4604      	mov	r4, r0
 8003dba:	4860      	ldr	r0, [pc, #384]	; (8003f3c <HAL_ADC_Init+0x29c>)
 8003dbc:	f7ff ff36 	bl	8003c2c <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4323      	orrs	r3, r4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e008      	b.n	8003de2 <HAL_ADC_Init+0x142>
 8003dd0:	485b      	ldr	r0, [pc, #364]	; (8003f40 <HAL_ADC_Init+0x2a0>)
 8003dd2:	f7ff ff2b 	bl	8003c2c <LL_ADC_IsEnabled>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a53      	ldr	r2, [pc, #332]	; (8003f38 <HAL_ADC_Init+0x298>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_ADC_Init+0x15a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a51      	ldr	r2, [pc, #324]	; (8003f3c <HAL_ADC_Init+0x29c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_Init+0x15e>
 8003dfa:	4a52      	ldr	r2, [pc, #328]	; (8003f44 <HAL_ADC_Init+0x2a4>)
 8003dfc:	e000      	b.n	8003e00 <HAL_ADC_Init+0x160>
 8003dfe:	4a52      	ldr	r2, [pc, #328]	; (8003f48 <HAL_ADC_Init+0x2a8>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f7ff fdbe 	bl	8003988 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003e0c:	f7ff fdb0 	bl	8003970 <HAL_GetREVID>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d914      	bls.n	8003e44 <HAL_ADC_Init+0x1a4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d110      	bne.n	8003e44 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7d5b      	ldrb	r3, [r3, #21]
 8003e26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e2c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7f1b      	ldrb	r3, [r3, #28]
 8003e38:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003e3a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e3c:	f043 030c 	orr.w	r3, r3, #12
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	e00d      	b.n	8003e60 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7d5b      	ldrb	r3, [r3, #21]
 8003e48:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e4e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e54:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7f1b      	ldrb	r3, [r3, #28]
 8003e5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7f1b      	ldrb	r3, [r3, #28]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	045b      	lsls	r3, r3, #17
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <HAL_ADC_Init+0x2ac>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	69b9      	ldr	r1, [r7, #24]
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fed1 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8003eb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fede 	bl	8003c78 <LL_ADC_INJ_IsConversionOngoing>
 8003ebc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d15f      	bne.n	8003f84 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d15c      	bne.n	8003f84 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7d1b      	ldrb	r3, [r3, #20]
 8003ece:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <HAL_ADC_Init+0x2b0>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d130      	bne.n	8003f58 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_ADC_Init+0x2b4>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f0a:	3a01      	subs	r2, #1
 8003f0c:	0411      	lsls	r1, r2, #16
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f12:	4311      	orrs	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	611a      	str	r2, [r3, #16]
 8003f2c:	e01c      	b.n	8003f68 <HAL_ADC_Init+0x2c8>
 8003f2e:	bf00      	nop
 8003f30:	24000000 	.word	0x24000000
 8003f34:	053e2d63 	.word	0x053e2d63
 8003f38:	40022000 	.word	0x40022000
 8003f3c:	40022100 	.word	0x40022100
 8003f40:	58026000 	.word	0x58026000
 8003f44:	40022300 	.word	0x40022300
 8003f48:	58026300 	.word	0x58026300
 8003f4c:	fff0c003 	.word	0xfff0c003
 8003f50:	ffffbffc 	.word	0xffffbffc
 8003f54:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fb80 	bl	8004684 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f023 010f 	bic.w	r1, r3, #15
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa4:	e007      	b.n	8003fb6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 020f 	bic.w	r2, r2, #15
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	f043 0201 	orr.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54
 8003fc6:	e007      	b.n	8003fd8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	f043 0210 	orr.w	r2, r3, #16
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd90      	pop	{r4, r7, pc}
 8003fe2:	bf00      	nop

08003fe4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b0a1      	sub	sp, #132	; 0x84
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a9d      	ldr	r2, [pc, #628]	; (8004274 <HAL_ADC_ConfigChannel+0x290>)
 8003ffe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_ADC_ConfigChannel+0x2a>
 800400a:	2302      	movs	r3, #2
 800400c:	e321      	b.n	8004652 <HAL_ADC_ConfigChannel+0x66e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fe19 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 8306 	bne.w	8004634 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004030:	2b00      	cmp	r3, #0
 8004032:	d108      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x62>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	0e9b      	lsrs	r3, r3, #26
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2201      	movs	r2, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	e016      	b.n	8004074 <HAL_ADC_ConfigChannel+0x90>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004056:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800405e:	2320      	movs	r3, #32
 8004060:	e003      	b.n	800406a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	2201      	movs	r2, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	69d1      	ldr	r1, [r2, #28]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	430b      	orrs	r3, r1
 8004080:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	f7ff fd02 	bl	8003a98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fdda 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 800409e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fde7 	bl	8003c78 <LL_ADC_INJ_IsConversionOngoing>
 80040aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 80b3 	bne.w	800421a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 80af 	bne.w	800421a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	461a      	mov	r2, r3
 80040ca:	f7ff fd11 	bl	8003af0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040ce:	4b6a      	ldr	r3, [pc, #424]	; (8004278 <HAL_ADC_ConfigChannel+0x294>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80040d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040da:	d10b      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x110>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	e01d      	b.n	8004130 <HAL_ADC_ConfigChannel+0x14c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10b      	bne.n	800411a <HAL_ADC_ConfigChannel+0x136>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	e00a      	b.n	8004130 <HAL_ADC_ConfigChannel+0x14c>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d027      	beq.n	800418a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6919      	ldr	r1, [r3, #16]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004148:	f7ff fc52 	bl	80039f0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6919      	ldr	r1, [r3, #16]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	7e5b      	ldrb	r3, [r3, #25]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d102      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x17e>
 800415c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004160:	e000      	b.n	8004164 <HAL_ADC_ConfigChannel+0x180>
 8004162:	2300      	movs	r3, #0
 8004164:	461a      	mov	r2, r3
 8004166:	f7ff fc7c 	bl	8003a62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6919      	ldr	r1, [r3, #16]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	7e1b      	ldrb	r3, [r3, #24]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x19c>
 800417a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800417e:	e000      	b.n	8004182 <HAL_ADC_ConfigChannel+0x19e>
 8004180:	2300      	movs	r3, #0
 8004182:	461a      	mov	r2, r3
 8004184:	f7ff fc54 	bl	8003a30 <LL_ADC_SetDataRightShift>
 8004188:	e047      	b.n	800421a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004190:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	069b      	lsls	r3, r3, #26
 800419a:	429a      	cmp	r2, r3
 800419c:	d107      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	069b      	lsls	r3, r3, #26
 80041be:	429a      	cmp	r2, r3
 80041c0:	d107      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	069b      	lsls	r3, r3, #26
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d107      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	069b      	lsls	r3, r3, #26
 8004206:	429a      	cmp	r2, r3
 8004208:	d107      	bne.n	800421a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004218:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fd04 	bl	8003c2c <LL_ADC_IsEnabled>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	f040 820d 	bne.w	8004646 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	461a      	mov	r2, r3
 800423a:	f7ff fc85 	bl	8003b48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <HAL_ADC_ConfigChannel+0x290>)
 8004244:	4293      	cmp	r3, r2
 8004246:	f040 8133 	bne.w	80044b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004256:	2b00      	cmp	r3, #0
 8004258:	d110      	bne.n	800427c <HAL_ADC_ConfigChannel+0x298>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	0e9b      	lsrs	r3, r3, #26
 8004260:	3301      	adds	r3, #1
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2b09      	cmp	r3, #9
 8004268:	bf94      	ite	ls
 800426a:	2301      	movls	r3, #1
 800426c:	2300      	movhi	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	e01e      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x2cc>
 8004272:	bf00      	nop
 8004274:	47ff0000 	.word	0x47ff0000
 8004278:	5c001000 	.word	0x5c001000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800428a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800428e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004294:	2320      	movs	r3, #32
 8004296:	e003      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3301      	adds	r3, #1
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	2b09      	cmp	r3, #9
 80042a8:	bf94      	ite	ls
 80042aa:	2301      	movls	r3, #1
 80042ac:	2300      	movhi	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d079      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d107      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x2ec>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0e9b      	lsrs	r3, r3, #26
 80042c6:	3301      	adds	r3, #1
 80042c8:	069b      	lsls	r3, r3, #26
 80042ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ce:	e015      	b.n	80042fc <HAL_ADC_ConfigChannel+0x318>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80042e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e003      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80042ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	069b      	lsls	r3, r3, #26
 80042f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_ADC_ConfigChannel+0x338>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0e9b      	lsrs	r3, r3, #26
 800430e:	3301      	adds	r3, #1
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	e017      	b.n	800434c <HAL_ADC_ConfigChannel+0x368>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800432a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800432e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004334:	2320      	movs	r3, #32
 8004336:	e003      	b.n	8004340 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	3301      	adds	r3, #1
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	ea42 0103 	orr.w	r1, r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x38e>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	0e9b      	lsrs	r3, r3, #26
 8004362:	3301      	adds	r3, #1
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	051b      	lsls	r3, r3, #20
 8004370:	e018      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x3c0>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e003      	b.n	8004396 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
 8004396:	3301      	adds	r3, #1
 8004398:	f003 021f 	and.w	r2, r3, #31
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043a4:	430b      	orrs	r3, r1
 80043a6:	e07e      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x3e0>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	0e9b      	lsrs	r3, r3, #26
 80043ba:	3301      	adds	r3, #1
 80043bc:	069b      	lsls	r3, r3, #26
 80043be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043c2:	e015      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x40c>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80043dc:	2320      	movs	r3, #32
 80043de:	e003      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	069b      	lsls	r3, r3, #26
 80043ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x42c>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	3301      	adds	r3, #1
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	e017      	b.n	8004440 <HAL_ADC_ConfigChannel+0x45c>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	61bb      	str	r3, [r7, #24]
  return result;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004428:	2320      	movs	r3, #32
 800442a:	e003      	b.n	8004434 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	3301      	adds	r3, #1
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	ea42 0103 	orr.w	r1, r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10d      	bne.n	800446c <HAL_ADC_ConfigChannel+0x488>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	3301      	adds	r3, #1
 8004458:	f003 021f 	and.w	r2, r3, #31
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	3b1e      	subs	r3, #30
 8004464:	051b      	lsls	r3, r3, #20
 8004466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800446a:	e01b      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x4c0>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	fa93 f3a3 	rbit	r3, r3
 8004478:	60fb      	str	r3, [r7, #12]
  return result;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004484:	2320      	movs	r3, #32
 8004486:	e003      	b.n	8004490 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3301      	adds	r3, #1
 8004492:	f003 021f 	and.w	r2, r3, #31
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	3b1e      	subs	r3, #30
 800449e:	051b      	lsls	r3, r3, #20
 80044a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044a4:	430b      	orrs	r3, r1
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	6892      	ldr	r2, [r2, #8]
 80044aa:	4619      	mov	r1, r3
 80044ac:	f7ff fb20 	bl	8003af0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f280 80c6 	bge.w	8004646 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a67      	ldr	r2, [pc, #412]	; (800465c <HAL_ADC_ConfigChannel+0x678>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <HAL_ADC_ConfigChannel+0x4ea>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a65      	ldr	r2, [pc, #404]	; (8004660 <HAL_ADC_ConfigChannel+0x67c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x4ee>
 80044ce:	4b65      	ldr	r3, [pc, #404]	; (8004664 <HAL_ADC_ConfigChannel+0x680>)
 80044d0:	e000      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x4f0>
 80044d2:	4b65      	ldr	r3, [pc, #404]	; (8004668 <HAL_ADC_ConfigChannel+0x684>)
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fa7d 	bl	80039d4 <LL_ADC_GetCommonPathInternalCh>
 80044da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a5e      	ldr	r2, [pc, #376]	; (800465c <HAL_ADC_ConfigChannel+0x678>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_ADC_ConfigChannel+0x50c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a5d      	ldr	r2, [pc, #372]	; (8004660 <HAL_ADC_ConfigChannel+0x67c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10e      	bne.n	800450e <HAL_ADC_ConfigChannel+0x52a>
 80044f0:	485a      	ldr	r0, [pc, #360]	; (800465c <HAL_ADC_ConfigChannel+0x678>)
 80044f2:	f7ff fb9b 	bl	8003c2c <LL_ADC_IsEnabled>
 80044f6:	4604      	mov	r4, r0
 80044f8:	4859      	ldr	r0, [pc, #356]	; (8004660 <HAL_ADC_ConfigChannel+0x67c>)
 80044fa:	f7ff fb97 	bl	8003c2c <LL_ADC_IsEnabled>
 80044fe:	4603      	mov	r3, r0
 8004500:	4323      	orrs	r3, r4
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	e008      	b.n	8004520 <HAL_ADC_ConfigChannel+0x53c>
 800450e:	4857      	ldr	r0, [pc, #348]	; (800466c <HAL_ADC_ConfigChannel+0x688>)
 8004510:	f7ff fb8c 	bl	8003c2c <LL_ADC_IsEnabled>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d07d      	beq.n	8004620 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a51      	ldr	r2, [pc, #324]	; (8004670 <HAL_ADC_ConfigChannel+0x68c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d130      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x5ac>
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d12b      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a4b      	ldr	r2, [pc, #300]	; (800466c <HAL_ADC_ConfigChannel+0x688>)
 800453e:	4293      	cmp	r3, r2
 8004540:	f040 8081 	bne.w	8004646 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a44      	ldr	r2, [pc, #272]	; (800465c <HAL_ADC_ConfigChannel+0x678>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_ADC_ConfigChannel+0x574>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a43      	ldr	r2, [pc, #268]	; (8004660 <HAL_ADC_ConfigChannel+0x67c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_ADC_ConfigChannel+0x578>
 8004558:	4a42      	ldr	r2, [pc, #264]	; (8004664 <HAL_ADC_ConfigChannel+0x680>)
 800455a:	e000      	b.n	800455e <HAL_ADC_ConfigChannel+0x57a>
 800455c:	4a42      	ldr	r2, [pc, #264]	; (8004668 <HAL_ADC_ConfigChannel+0x684>)
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f7ff fa21 	bl	80039ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_ADC_ConfigChannel+0x690>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	4a41      	ldr	r2, [pc, #260]	; (8004678 <HAL_ADC_ConfigChannel+0x694>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	099b      	lsrs	r3, r3, #6
 800457a:	3301      	adds	r3, #1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004580:	e002      	b.n	8004588 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3b01      	subs	r3, #1
 8004586:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f9      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800458e:	e05a      	b.n	8004646 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a39      	ldr	r2, [pc, #228]	; (800467c <HAL_ADC_ConfigChannel+0x698>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d11e      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x5f4>
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d119      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a30      	ldr	r2, [pc, #192]	; (800466c <HAL_ADC_ConfigChannel+0x688>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d14b      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2a      	ldr	r2, [pc, #168]	; (800465c <HAL_ADC_ConfigChannel+0x678>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x5de>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a28      	ldr	r2, [pc, #160]	; (8004660 <HAL_ADC_ConfigChannel+0x67c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x5e2>
 80045c2:	4a28      	ldr	r2, [pc, #160]	; (8004664 <HAL_ADC_ConfigChannel+0x680>)
 80045c4:	e000      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x5e4>
 80045c6:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_ADC_ConfigChannel+0x684>)
 80045c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ce:	4619      	mov	r1, r3
 80045d0:	4610      	mov	r0, r2
 80045d2:	f7ff f9ec 	bl	80039ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045d6:	e036      	b.n	8004646 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a28      	ldr	r2, [pc, #160]	; (8004680 <HAL_ADC_ConfigChannel+0x69c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d131      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x662>
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d12c      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1e      	ldr	r2, [pc, #120]	; (800466c <HAL_ADC_ConfigChannel+0x688>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d127      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_ADC_ConfigChannel+0x678>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_ADC_ConfigChannel+0x626>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_ADC_ConfigChannel+0x67c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_ADC_ConfigChannel+0x62a>
 800460a:	4a16      	ldr	r2, [pc, #88]	; (8004664 <HAL_ADC_ConfigChannel+0x680>)
 800460c:	e000      	b.n	8004610 <HAL_ADC_ConfigChannel+0x62c>
 800460e:	4a16      	ldr	r2, [pc, #88]	; (8004668 <HAL_ADC_ConfigChannel+0x684>)
 8004610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7ff f9c8 	bl	80039ae <LL_ADC_SetCommonPathInternalCh>
 800461e:	e012      	b.n	8004646 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004632:	e008      	b.n	8004646 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800464e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004652:	4618      	mov	r0, r3
 8004654:	3784      	adds	r7, #132	; 0x84
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}
 800465a:	bf00      	nop
 800465c:	40022000 	.word	0x40022000
 8004660:	40022100 	.word	0x40022100
 8004664:	40022300 	.word	0x40022300
 8004668:	58026300 	.word	0x58026300
 800466c:	58026000 	.word	0x58026000
 8004670:	cb840000 	.word	0xcb840000
 8004674:	24000000 	.word	0x24000000
 8004678:	053e2d63 	.word	0x053e2d63
 800467c:	c7520000 	.word	0xc7520000
 8004680:	cfb80000 	.word	0xcfb80000

08004684 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a79      	ldr	r2, [pc, #484]	; (8004878 <ADC_ConfigureBoostMode+0x1f4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <ADC_ConfigureBoostMode+0x1c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a78      	ldr	r2, [pc, #480]	; (800487c <ADC_ConfigureBoostMode+0x1f8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d109      	bne.n	80046b4 <ADC_ConfigureBoostMode+0x30>
 80046a0:	4b77      	ldr	r3, [pc, #476]	; (8004880 <ADC_ConfigureBoostMode+0x1fc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e008      	b.n	80046c6 <ADC_ConfigureBoostMode+0x42>
 80046b4:	4b73      	ldr	r3, [pc, #460]	; (8004884 <ADC_ConfigureBoostMode+0x200>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01c      	beq.n	8004704 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80046ca:	f005 f96d 	bl	80099a8 <HAL_RCC_GetHCLKFreq>
 80046ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046d8:	d010      	beq.n	80046fc <ADC_ConfigureBoostMode+0x78>
 80046da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046de:	d871      	bhi.n	80047c4 <ADC_ConfigureBoostMode+0x140>
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d002      	beq.n	80046ec <ADC_ConfigureBoostMode+0x68>
 80046e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ea:	d16b      	bne.n	80047c4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	60fb      	str	r3, [r7, #12]
        break;
 80046fa:	e066      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	60fb      	str	r3, [r7, #12]
        break;
 8004702:	e062      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004708:	f006 f932 	bl	800a970 <HAL_RCCEx_GetPeriphCLKFreq>
 800470c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004716:	d051      	beq.n	80047bc <ADC_ConfigureBoostMode+0x138>
 8004718:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800471c:	d854      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 800471e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004722:	d047      	beq.n	80047b4 <ADC_ConfigureBoostMode+0x130>
 8004724:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004728:	d84e      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 800472a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800472e:	d03d      	beq.n	80047ac <ADC_ConfigureBoostMode+0x128>
 8004730:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004734:	d848      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 8004736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800473a:	d033      	beq.n	80047a4 <ADC_ConfigureBoostMode+0x120>
 800473c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004740:	d842      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 8004742:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004746:	d029      	beq.n	800479c <ADC_ConfigureBoostMode+0x118>
 8004748:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800474c:	d83c      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 800474e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004752:	d01a      	beq.n	800478a <ADC_ConfigureBoostMode+0x106>
 8004754:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004758:	d836      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 800475a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800475e:	d014      	beq.n	800478a <ADC_ConfigureBoostMode+0x106>
 8004760:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004764:	d830      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 8004766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476a:	d00e      	beq.n	800478a <ADC_ConfigureBoostMode+0x106>
 800476c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004770:	d82a      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 8004772:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004776:	d008      	beq.n	800478a <ADC_ConfigureBoostMode+0x106>
 8004778:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800477c:	d824      	bhi.n	80047c8 <ADC_ConfigureBoostMode+0x144>
 800477e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004782:	d002      	beq.n	800478a <ADC_ConfigureBoostMode+0x106>
 8004784:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004788:	d11e      	bne.n	80047c8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	0c9b      	lsrs	r3, r3, #18
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	60fb      	str	r3, [r7, #12]
        break;
 800479a:	e016      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	60fb      	str	r3, [r7, #12]
        break;
 80047a2:	e012      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	60fb      	str	r3, [r7, #12]
        break;
 80047aa:	e00e      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	60fb      	str	r3, [r7, #12]
        break;
 80047b2:	e00a      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	09db      	lsrs	r3, r3, #7
 80047b8:	60fb      	str	r3, [r7, #12]
        break;
 80047ba:	e006      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	60fb      	str	r3, [r7, #12]
        break;
 80047c2:	e002      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
        break;
 80047c4:	bf00      	nop
 80047c6:	e000      	b.n	80047ca <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80047c8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80047ca:	f7ff f8d1 	bl	8003970 <HAL_GetREVID>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d815      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4a2b      	ldr	r2, [pc, #172]	; (8004888 <ADC_ConfigureBoostMode+0x204>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d908      	bls.n	80047f2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80047f0:	e03e      	b.n	8004870 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004800:	609a      	str	r2, [r3, #8]
}
 8004802:	e035      	b.n	8004870 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <ADC_ConfigureBoostMode+0x208>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d808      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004820:	609a      	str	r2, [r3, #8]
}
 8004822:	e025      	b.n	8004870 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4a1a      	ldr	r2, [pc, #104]	; (8004890 <ADC_ConfigureBoostMode+0x20c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d80a      	bhi.n	8004842 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	e016      	b.n	8004870 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a13      	ldr	r2, [pc, #76]	; (8004894 <ADC_ConfigureBoostMode+0x210>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d80a      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	e007      	b.n	8004870 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800486e:	609a      	str	r2, [r3, #8]
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40022000 	.word	0x40022000
 800487c:	40022100 	.word	0x40022100
 8004880:	40022300 	.word	0x40022300
 8004884:	58026300 	.word	0x58026300
 8004888:	01312d00 	.word	0x01312d00
 800488c:	005f5e10 	.word	0x005f5e10
 8004890:	00bebc20 	.word	0x00bebc20
 8004894:	017d7840 	.word	0x017d7840

08004898 <LL_ADC_IsEnabled>:
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <LL_ADC_IsEnabled+0x18>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <LL_ADC_IsEnabled+0x1a>
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <LL_ADC_REG_IsConversionOngoing>:
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d101      	bne.n	80048d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b09f      	sub	sp, #124	; 0x7c
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048fe:	2302      	movs	r3, #2
 8004900:	e0be      	b.n	8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800490e:	2300      	movs	r3, #0
 8004910:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a5c      	ldr	r2, [pc, #368]	; (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d102      	bne.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800491c:	4b5b      	ldr	r3, [pc, #364]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	e001      	b.n	8004926 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	f043 0220 	orr.w	r2, r3, #32
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e09d      	b.n	8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff ffb9 	bl	80048be <LL_ADC_REG_IsConversionOngoing>
 800494c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ffb3 	bl	80048be <LL_ADC_REG_IsConversionOngoing>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d17f      	bne.n	8004a5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800495e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004960:	2b00      	cmp	r3, #0
 8004962:	d17c      	bne.n	8004a5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a47      	ldr	r2, [pc, #284]	; (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a46      	ldr	r2, [pc, #280]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004978:	4b45      	ldr	r3, [pc, #276]	; (8004a90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800497a:	e000      	b.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800497c:	4b45      	ldr	r3, [pc, #276]	; (8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800497e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d039      	beq.n	80049fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	431a      	orrs	r2, r3
 8004996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004998:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a3a      	ldr	r2, [pc, #232]	; (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a38      	ldr	r2, [pc, #224]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d10e      	bne.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80049ae:	4836      	ldr	r0, [pc, #216]	; (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049b0:	f7ff ff72 	bl	8004898 <LL_ADC_IsEnabled>
 80049b4:	4604      	mov	r4, r0
 80049b6:	4835      	ldr	r0, [pc, #212]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049b8:	f7ff ff6e 	bl	8004898 <LL_ADC_IsEnabled>
 80049bc:	4603      	mov	r3, r0
 80049be:	4323      	orrs	r3, r4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e008      	b.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80049cc:	4832      	ldr	r0, [pc, #200]	; (8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049ce:	f7ff ff63 	bl	8004898 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d047      	beq.n	8004a72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	6811      	ldr	r1, [r2, #0]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	6892      	ldr	r2, [r2, #8]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	431a      	orrs	r2, r3
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049fa:	e03a      	b.n	8004a72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d004      	beq.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d10e      	bne.n	8004a3a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004a1c:	481a      	ldr	r0, [pc, #104]	; (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a1e:	f7ff ff3b 	bl	8004898 <LL_ADC_IsEnabled>
 8004a22:	4604      	mov	r4, r0
 8004a24:	4819      	ldr	r0, [pc, #100]	; (8004a8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a26:	f7ff ff37 	bl	8004898 <LL_ADC_IsEnabled>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4323      	orrs	r3, r4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	e008      	b.n	8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004a3a:	4817      	ldr	r0, [pc, #92]	; (8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a3c:	f7ff ff2c 	bl	8004898 <LL_ADC_IsEnabled>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d010      	beq.n	8004a72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a5c:	e009      	b.n	8004a72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f043 0220 	orr.w	r2, r3, #32
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004a70:	e000      	b.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	377c      	adds	r7, #124	; 0x7c
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd90      	pop	{r4, r7, pc}
 8004a88:	40022000 	.word	0x40022000
 8004a8c:	40022100 	.word	0x40022100
 8004a90:	40022300 	.word	0x40022300
 8004a94:	58026300 	.word	0x58026300
 8004a98:	58026000 	.word	0x58026000
 8004a9c:	fffff0e0 	.word	0xfffff0e0

08004aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004abc:	4013      	ands	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	60d3      	str	r3, [r2, #12]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000ed00 	.word	0xe000ed00
 8004ae4:	05fa0000 	.word	0x05fa0000

08004ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <__NVIC_GetPriorityGrouping+0x18>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	f003 0307 	and.w	r3, r3, #7
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	e000ed00 	.word	0xe000ed00

08004b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	db0b      	blt.n	8004b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	f003 021f 	and.w	r2, r3, #31
 8004b1c:	4907      	ldr	r1, [pc, #28]	; (8004b3c <__NVIC_EnableIRQ+0x38>)
 8004b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	2001      	movs	r0, #1
 8004b26:	fa00 f202 	lsl.w	r2, r0, r2
 8004b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000e100 	.word	0xe000e100

08004b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	6039      	str	r1, [r7, #0]
 8004b4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	db0a      	blt.n	8004b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	490c      	ldr	r1, [pc, #48]	; (8004b8c <__NVIC_SetPriority+0x4c>)
 8004b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b5e:	0112      	lsls	r2, r2, #4
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	440b      	add	r3, r1
 8004b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b68:	e00a      	b.n	8004b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4908      	ldr	r1, [pc, #32]	; (8004b90 <__NVIC_SetPriority+0x50>)
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	3b04      	subs	r3, #4
 8004b78:	0112      	lsls	r2, r2, #4
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	761a      	strb	r2, [r3, #24]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000e100 	.word	0xe000e100
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	; 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f1c3 0307 	rsb	r3, r3, #7
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	bf28      	it	cs
 8004bb2:	2304      	movcs	r3, #4
 8004bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	2b06      	cmp	r3, #6
 8004bbc:	d902      	bls.n	8004bc4 <NVIC_EncodePriority+0x30>
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	3b03      	subs	r3, #3
 8004bc2:	e000      	b.n	8004bc6 <NVIC_EncodePriority+0x32>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	fa01 f303 	lsl.w	r3, r1, r3
 8004be6:	43d9      	mvns	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bec:	4313      	orrs	r3, r2
         );
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3724      	adds	r7, #36	; 0x24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ff4c 	bl	8004aa0 <__NVIC_SetPriorityGrouping>
}
 8004c08:	bf00      	nop
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c1e:	f7ff ff63 	bl	8004ae8 <__NVIC_GetPriorityGrouping>
 8004c22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	6978      	ldr	r0, [r7, #20]
 8004c2a:	f7ff ffb3 	bl	8004b94 <NVIC_EncodePriority>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff ff82 	bl	8004b40 <__NVIC_SetPriority>
}
 8004c3c:	bf00      	nop
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff ff56 	bl	8004b04 <__NVIC_EnableIRQ>
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e014      	b.n	8004c9c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	791b      	ldrb	r3, [r3, #4]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fb ffa8 	bl	8000bd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cba:	d120      	bne.n	8004cfe <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cca:	d118      	bne.n	8004cfe <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ce6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f82d 	bl	8004d58 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0c:	d120      	bne.n	8004d50 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d1c:	d118      	bne.n	8004d50 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2204      	movs	r2, #4
 8004d22:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f043 0202 	orr.w	r2, r3, #2
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004d48:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f93e 	bl	8004fcc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	795b      	ldrb	r3, [r3, #5]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_DAC_ConfigChannel+0x18>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e11d      	b.n	8004fc0 <HAL_DAC_ConfigChannel+0x254>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d174      	bne.n	8004e82 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004d98:	f7fe fdba 	bl	8003910 <HAL_GetTick>
 8004d9c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d134      	bne.n	8004e0e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004da4:	e011      	b.n	8004dca <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004da6:	f7fe fdb3 	bl	8003910 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d90a      	bls.n	8004dca <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f043 0208 	orr.w	r2, r3, #8
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e0fa      	b.n	8004fc0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd0:	4b7d      	ldr	r3, [pc, #500]	; (8004fc8 <HAL_DAC_ConfigChannel+0x25c>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e6      	bne.n	8004da6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f7fe fda5 	bl	8003928 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	6992      	ldr	r2, [r2, #24]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40
 8004de8:	e01e      	b.n	8004e28 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004dea:	f7fe fd91 	bl	8003910 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d90a      	bls.n	8004e0e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f043 0208 	orr.w	r2, r3, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2203      	movs	r2, #3
 8004e08:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e0d8      	b.n	8004fc0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dbe8      	blt.n	8004dea <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004e18:	2001      	movs	r0, #1
 8004e1a:	f7fe fd85 	bl	8003928 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	6992      	ldr	r2, [r2, #24]
 8004e26:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	ea02 0103 	and.w	r1, r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	21ff      	movs	r1, #255	; 0xff
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	ea02 0103 	and.w	r1, r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	6a1a      	ldr	r2, [r3, #32]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d11d      	bne.n	8004ec6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	221f      	movs	r2, #31
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2207      	movs	r2, #7
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	e00f      	b.n	8004f10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d102      	bne.n	8004efe <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e008      	b.n	8004f10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004f06:	2301      	movs	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	e001      	b.n	8004f10 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43da      	mvns	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	400a      	ands	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4013      	ands	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	22c0      	movs	r2, #192	; 0xc0
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	400a      	ands	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20008000 	.word	0x20008000

08004fcc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fe8:	f7fe fc92 	bl	8003910 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e316      	b.n	8005626 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a66      	ldr	r2, [pc, #408]	; (8005198 <HAL_DMA_Init+0x1b8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d04a      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a65      	ldr	r2, [pc, #404]	; (800519c <HAL_DMA_Init+0x1bc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d045      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a63      	ldr	r2, [pc, #396]	; (80051a0 <HAL_DMA_Init+0x1c0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d040      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a62      	ldr	r2, [pc, #392]	; (80051a4 <HAL_DMA_Init+0x1c4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d03b      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a60      	ldr	r2, [pc, #384]	; (80051a8 <HAL_DMA_Init+0x1c8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d036      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a5f      	ldr	r2, [pc, #380]	; (80051ac <HAL_DMA_Init+0x1cc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d031      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5d      	ldr	r2, [pc, #372]	; (80051b0 <HAL_DMA_Init+0x1d0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02c      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a5c      	ldr	r2, [pc, #368]	; (80051b4 <HAL_DMA_Init+0x1d4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d027      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5a      	ldr	r2, [pc, #360]	; (80051b8 <HAL_DMA_Init+0x1d8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a59      	ldr	r2, [pc, #356]	; (80051bc <HAL_DMA_Init+0x1dc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01d      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a57      	ldr	r2, [pc, #348]	; (80051c0 <HAL_DMA_Init+0x1e0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a56      	ldr	r2, [pc, #344]	; (80051c4 <HAL_DMA_Init+0x1e4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a54      	ldr	r2, [pc, #336]	; (80051c8 <HAL_DMA_Init+0x1e8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a53      	ldr	r2, [pc, #332]	; (80051cc <HAL_DMA_Init+0x1ec>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a51      	ldr	r2, [pc, #324]	; (80051d0 <HAL_DMA_Init+0x1f0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_DMA_Init+0xb8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a50      	ldr	r2, [pc, #320]	; (80051d4 <HAL_DMA_Init+0x1f4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_DMA_Init+0xbc>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_DMA_Init+0xbe>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 813b 	beq.w	800531a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a37      	ldr	r2, [pc, #220]	; (8005198 <HAL_DMA_Init+0x1b8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d04a      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a36      	ldr	r2, [pc, #216]	; (800519c <HAL_DMA_Init+0x1bc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d045      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a34      	ldr	r2, [pc, #208]	; (80051a0 <HAL_DMA_Init+0x1c0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d040      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <HAL_DMA_Init+0x1c4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d03b      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a31      	ldr	r2, [pc, #196]	; (80051a8 <HAL_DMA_Init+0x1c8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d036      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a30      	ldr	r2, [pc, #192]	; (80051ac <HAL_DMA_Init+0x1cc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d031      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2e      	ldr	r2, [pc, #184]	; (80051b0 <HAL_DMA_Init+0x1d0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d02c      	beq.n	8005154 <HAL_DMA_Init+0x174>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <HAL_DMA_Init+0x1d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d027      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <HAL_DMA_Init+0x1d8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <HAL_DMA_Init+0x1dc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01d      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <HAL_DMA_Init+0x1e0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_DMA_Init+0x1e4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a25      	ldr	r2, [pc, #148]	; (80051c8 <HAL_DMA_Init+0x1e8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a24      	ldr	r2, [pc, #144]	; (80051cc <HAL_DMA_Init+0x1ec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_DMA_Init+0x174>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <HAL_DMA_Init+0x1f0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_DMA_Init+0x174>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <HAL_DMA_Init+0x1f4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d108      	bne.n	8005166 <HAL_DMA_Init+0x186>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e007      	b.n	8005176 <HAL_DMA_Init+0x196>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005176:	e02f      	b.n	80051d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005178:	f7fe fbca 	bl	8003910 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b05      	cmp	r3, #5
 8005184:	d928      	bls.n	80051d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2203      	movs	r2, #3
 8005190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e246      	b.n	8005626 <HAL_DMA_Init+0x646>
 8005198:	40020010 	.word	0x40020010
 800519c:	40020028 	.word	0x40020028
 80051a0:	40020040 	.word	0x40020040
 80051a4:	40020058 	.word	0x40020058
 80051a8:	40020070 	.word	0x40020070
 80051ac:	40020088 	.word	0x40020088
 80051b0:	400200a0 	.word	0x400200a0
 80051b4:	400200b8 	.word	0x400200b8
 80051b8:	40020410 	.word	0x40020410
 80051bc:	40020428 	.word	0x40020428
 80051c0:	40020440 	.word	0x40020440
 80051c4:	40020458 	.word	0x40020458
 80051c8:	40020470 	.word	0x40020470
 80051cc:	40020488 	.word	0x40020488
 80051d0:	400204a0 	.word	0x400204a0
 80051d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1c8      	bne.n	8005178 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4b83      	ldr	r3, [pc, #524]	; (8005400 <HAL_DMA_Init+0x420>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80051fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005216:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b04      	cmp	r3, #4
 800522a:	d107      	bne.n	800523c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	4313      	orrs	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800523c:	4b71      	ldr	r3, [pc, #452]	; (8005404 <HAL_DMA_Init+0x424>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4b71      	ldr	r3, [pc, #452]	; (8005408 <HAL_DMA_Init+0x428>)
 8005242:	4013      	ands	r3, r2
 8005244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005248:	d328      	bcc.n	800529c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b28      	cmp	r3, #40	; 0x28
 8005250:	d903      	bls.n	800525a <HAL_DMA_Init+0x27a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b2e      	cmp	r3, #46	; 0x2e
 8005258:	d917      	bls.n	800528a <HAL_DMA_Init+0x2aa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b3e      	cmp	r3, #62	; 0x3e
 8005260:	d903      	bls.n	800526a <HAL_DMA_Init+0x28a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b42      	cmp	r3, #66	; 0x42
 8005268:	d90f      	bls.n	800528a <HAL_DMA_Init+0x2aa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b46      	cmp	r3, #70	; 0x46
 8005270:	d903      	bls.n	800527a <HAL_DMA_Init+0x29a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b48      	cmp	r3, #72	; 0x48
 8005278:	d907      	bls.n	800528a <HAL_DMA_Init+0x2aa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b4e      	cmp	r3, #78	; 0x4e
 8005280:	d905      	bls.n	800528e <HAL_DMA_Init+0x2ae>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b52      	cmp	r3, #82	; 0x52
 8005288:	d801      	bhi.n	800528e <HAL_DMA_Init+0x2ae>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_DMA_Init+0x2b0>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800529a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0307 	bic.w	r3, r3, #7
 80052b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d117      	bne.n	80052f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00e      	beq.n	80052f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f002 fb33 	bl	8007944 <DMA_CheckFifoParam>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e197      	b.n	8005626 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f002 fa6e 	bl	80077e0 <DMA_CalcBaseAndBitshift>
 8005304:	4603      	mov	r3, r0
 8005306:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	223f      	movs	r2, #63	; 0x3f
 8005312:	409a      	lsls	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	e0cd      	b.n	80054b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3b      	ldr	r2, [pc, #236]	; (800540c <HAL_DMA_Init+0x42c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d022      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a39      	ldr	r2, [pc, #228]	; (8005410 <HAL_DMA_Init+0x430>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01d      	beq.n	800536a <HAL_DMA_Init+0x38a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a38      	ldr	r2, [pc, #224]	; (8005414 <HAL_DMA_Init+0x434>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d018      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a36      	ldr	r2, [pc, #216]	; (8005418 <HAL_DMA_Init+0x438>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a35      	ldr	r2, [pc, #212]	; (800541c <HAL_DMA_Init+0x43c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00e      	beq.n	800536a <HAL_DMA_Init+0x38a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a33      	ldr	r2, [pc, #204]	; (8005420 <HAL_DMA_Init+0x440>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d009      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a32      	ldr	r2, [pc, #200]	; (8005424 <HAL_DMA_Init+0x444>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_DMA_Init+0x38a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a30      	ldr	r2, [pc, #192]	; (8005428 <HAL_DMA_Init+0x448>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d101      	bne.n	800536e <HAL_DMA_Init+0x38e>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_DMA_Init+0x390>
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8097 	beq.w	80054a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a24      	ldr	r2, [pc, #144]	; (800540c <HAL_DMA_Init+0x42c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d021      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a22      	ldr	r2, [pc, #136]	; (8005410 <HAL_DMA_Init+0x430>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01c      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a21      	ldr	r2, [pc, #132]	; (8005414 <HAL_DMA_Init+0x434>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d017      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <HAL_DMA_Init+0x438>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d012      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1e      	ldr	r2, [pc, #120]	; (800541c <HAL_DMA_Init+0x43c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00d      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <HAL_DMA_Init+0x440>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d008      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <HAL_DMA_Init+0x444>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <HAL_DMA_Init+0x3e4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a19      	ldr	r2, [pc, #100]	; (8005428 <HAL_DMA_Init+0x448>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4b12      	ldr	r3, [pc, #72]	; (800542c <HAL_DMA_Init+0x44c>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d020      	beq.n	8005430 <HAL_DMA_Init+0x450>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d102      	bne.n	80053fc <HAL_DMA_Init+0x41c>
 80053f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053fa:	e01a      	b.n	8005432 <HAL_DMA_Init+0x452>
 80053fc:	2300      	movs	r3, #0
 80053fe:	e018      	b.n	8005432 <HAL_DMA_Init+0x452>
 8005400:	fe10803f 	.word	0xfe10803f
 8005404:	5c001000 	.word	0x5c001000
 8005408:	ffff0000 	.word	0xffff0000
 800540c:	58025408 	.word	0x58025408
 8005410:	5802541c 	.word	0x5802541c
 8005414:	58025430 	.word	0x58025430
 8005418:	58025444 	.word	0x58025444
 800541c:	58025458 	.word	0x58025458
 8005420:	5802546c 	.word	0x5802546c
 8005424:	58025480 	.word	0x58025480
 8005428:	58025494 	.word	0x58025494
 800542c:	fffe000f 	.word	0xfffe000f
 8005430:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68d2      	ldr	r2, [r2, #12]
 8005436:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005460:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	4b6e      	ldr	r3, [pc, #440]	; (8005630 <HAL_DMA_Init+0x650>)
 8005478:	4413      	add	r3, r2
 800547a:	4a6e      	ldr	r2, [pc, #440]	; (8005634 <HAL_DMA_Init+0x654>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	009a      	lsls	r2, r3, #2
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f002 f9a9 	bl	80077e0 <DMA_CalcBaseAndBitshift>
 800548e:	4603      	mov	r3, r0
 8005490:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2201      	movs	r2, #1
 800549c:	409a      	lsls	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	e008      	b.n	80054b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2240      	movs	r2, #64	; 0x40
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2203      	movs	r2, #3
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0b7      	b.n	8005626 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5f      	ldr	r2, [pc, #380]	; (8005638 <HAL_DMA_Init+0x658>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d072      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a5d      	ldr	r2, [pc, #372]	; (800563c <HAL_DMA_Init+0x65c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d06d      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5c      	ldr	r2, [pc, #368]	; (8005640 <HAL_DMA_Init+0x660>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d068      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5a      	ldr	r2, [pc, #360]	; (8005644 <HAL_DMA_Init+0x664>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d063      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a59      	ldr	r2, [pc, #356]	; (8005648 <HAL_DMA_Init+0x668>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d05e      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a57      	ldr	r2, [pc, #348]	; (800564c <HAL_DMA_Init+0x66c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d059      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a56      	ldr	r2, [pc, #344]	; (8005650 <HAL_DMA_Init+0x670>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d054      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a54      	ldr	r2, [pc, #336]	; (8005654 <HAL_DMA_Init+0x674>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d04f      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a53      	ldr	r2, [pc, #332]	; (8005658 <HAL_DMA_Init+0x678>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d04a      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a51      	ldr	r2, [pc, #324]	; (800565c <HAL_DMA_Init+0x67c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d045      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a50      	ldr	r2, [pc, #320]	; (8005660 <HAL_DMA_Init+0x680>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d040      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a4e      	ldr	r2, [pc, #312]	; (8005664 <HAL_DMA_Init+0x684>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d03b      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4d      	ldr	r2, [pc, #308]	; (8005668 <HAL_DMA_Init+0x688>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d036      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a4b      	ldr	r2, [pc, #300]	; (800566c <HAL_DMA_Init+0x68c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d031      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a4a      	ldr	r2, [pc, #296]	; (8005670 <HAL_DMA_Init+0x690>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d02c      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a48      	ldr	r2, [pc, #288]	; (8005674 <HAL_DMA_Init+0x694>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d027      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a47      	ldr	r2, [pc, #284]	; (8005678 <HAL_DMA_Init+0x698>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d022      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a45      	ldr	r2, [pc, #276]	; (800567c <HAL_DMA_Init+0x69c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01d      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a44      	ldr	r2, [pc, #272]	; (8005680 <HAL_DMA_Init+0x6a0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d018      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a42      	ldr	r2, [pc, #264]	; (8005684 <HAL_DMA_Init+0x6a4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a41      	ldr	r2, [pc, #260]	; (8005688 <HAL_DMA_Init+0x6a8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a3f      	ldr	r2, [pc, #252]	; (800568c <HAL_DMA_Init+0x6ac>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a3e      	ldr	r2, [pc, #248]	; (8005690 <HAL_DMA_Init+0x6b0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_DMA_Init+0x5c6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a3c      	ldr	r2, [pc, #240]	; (8005694 <HAL_DMA_Init+0x6b4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_DMA_Init+0x5ca>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <HAL_DMA_Init+0x5cc>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d032      	beq.n	8005616 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fa43 	bl	8007a3c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d102      	bne.n	80055c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d010      	beq.n	8005604 <HAL_DMA_Init+0x624>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d80c      	bhi.n	8005604 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f002 fac0 	bl	8007b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	e008      	b.n	8005616 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	a7fdabf8 	.word	0xa7fdabf8
 8005634:	cccccccd 	.word	0xcccccccd
 8005638:	40020010 	.word	0x40020010
 800563c:	40020028 	.word	0x40020028
 8005640:	40020040 	.word	0x40020040
 8005644:	40020058 	.word	0x40020058
 8005648:	40020070 	.word	0x40020070
 800564c:	40020088 	.word	0x40020088
 8005650:	400200a0 	.word	0x400200a0
 8005654:	400200b8 	.word	0x400200b8
 8005658:	40020410 	.word	0x40020410
 800565c:	40020428 	.word	0x40020428
 8005660:	40020440 	.word	0x40020440
 8005664:	40020458 	.word	0x40020458
 8005668:	40020470 	.word	0x40020470
 800566c:	40020488 	.word	0x40020488
 8005670:	400204a0 	.word	0x400204a0
 8005674:	400204b8 	.word	0x400204b8
 8005678:	58025408 	.word	0x58025408
 800567c:	5802541c 	.word	0x5802541c
 8005680:	58025430 	.word	0x58025430
 8005684:	58025444 	.word	0x58025444
 8005688:	58025458 	.word	0x58025458
 800568c:	5802546c 	.word	0x5802546c
 8005690:	58025480 	.word	0x58025480
 8005694:	58025494 	.word	0x58025494

08005698 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e226      	b.n	8005b02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_DMA_Start_IT+0x2a>
 80056be:	2302      	movs	r3, #2
 80056c0:	e21f      	b.n	8005b02 <HAL_DMA_Start_IT+0x46a>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f040 820a 	bne.w	8005aec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a68      	ldr	r2, [pc, #416]	; (800588c <HAL_DMA_Start_IT+0x1f4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d04a      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a66      	ldr	r2, [pc, #408]	; (8005890 <HAL_DMA_Start_IT+0x1f8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d045      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a65      	ldr	r2, [pc, #404]	; (8005894 <HAL_DMA_Start_IT+0x1fc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d040      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a63      	ldr	r2, [pc, #396]	; (8005898 <HAL_DMA_Start_IT+0x200>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d03b      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a62      	ldr	r2, [pc, #392]	; (800589c <HAL_DMA_Start_IT+0x204>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d036      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a60      	ldr	r2, [pc, #384]	; (80058a0 <HAL_DMA_Start_IT+0x208>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d031      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a5f      	ldr	r2, [pc, #380]	; (80058a4 <HAL_DMA_Start_IT+0x20c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d02c      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a5d      	ldr	r2, [pc, #372]	; (80058a8 <HAL_DMA_Start_IT+0x210>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d027      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a5c      	ldr	r2, [pc, #368]	; (80058ac <HAL_DMA_Start_IT+0x214>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a5a      	ldr	r2, [pc, #360]	; (80058b0 <HAL_DMA_Start_IT+0x218>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01d      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a59      	ldr	r2, [pc, #356]	; (80058b4 <HAL_DMA_Start_IT+0x21c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a57      	ldr	r2, [pc, #348]	; (80058b8 <HAL_DMA_Start_IT+0x220>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a56      	ldr	r2, [pc, #344]	; (80058bc <HAL_DMA_Start_IT+0x224>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a54      	ldr	r2, [pc, #336]	; (80058c0 <HAL_DMA_Start_IT+0x228>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a53      	ldr	r2, [pc, #332]	; (80058c4 <HAL_DMA_Start_IT+0x22c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_DMA_Start_IT+0xee>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a51      	ldr	r2, [pc, #324]	; (80058c8 <HAL_DMA_Start_IT+0x230>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <HAL_DMA_Start_IT+0x100>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e007      	b.n	80057a8 <HAL_DMA_Start_IT+0x110>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f001 fe6a 	bl	8007488 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a34      	ldr	r2, [pc, #208]	; (800588c <HAL_DMA_Start_IT+0x1f4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d04a      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a33      	ldr	r2, [pc, #204]	; (8005890 <HAL_DMA_Start_IT+0x1f8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d045      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a31      	ldr	r2, [pc, #196]	; (8005894 <HAL_DMA_Start_IT+0x1fc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d040      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a30      	ldr	r2, [pc, #192]	; (8005898 <HAL_DMA_Start_IT+0x200>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d03b      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	; (800589c <HAL_DMA_Start_IT+0x204>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d036      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2d      	ldr	r2, [pc, #180]	; (80058a0 <HAL_DMA_Start_IT+0x208>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d031      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2b      	ldr	r2, [pc, #172]	; (80058a4 <HAL_DMA_Start_IT+0x20c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02c      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2a      	ldr	r2, [pc, #168]	; (80058a8 <HAL_DMA_Start_IT+0x210>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d027      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a28      	ldr	r2, [pc, #160]	; (80058ac <HAL_DMA_Start_IT+0x214>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <HAL_DMA_Start_IT+0x218>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d01d      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <HAL_DMA_Start_IT+0x21c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a24      	ldr	r2, [pc, #144]	; (80058b8 <HAL_DMA_Start_IT+0x220>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a22      	ldr	r2, [pc, #136]	; (80058bc <HAL_DMA_Start_IT+0x224>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <HAL_DMA_Start_IT+0x228>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <HAL_DMA_Start_IT+0x22c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Start_IT+0x1bc>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <HAL_DMA_Start_IT+0x230>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_DMA_Start_IT+0x1c0>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_DMA_Start_IT+0x1c2>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d036      	beq.n	80058cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f023 021e 	bic.w	r2, r3, #30
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0216 	orr.w	r2, r2, #22
 8005870:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03e      	beq.n	80058f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e035      	b.n	80058f8 <HAL_DMA_Start_IT+0x260>
 800588c:	40020010 	.word	0x40020010
 8005890:	40020028 	.word	0x40020028
 8005894:	40020040 	.word	0x40020040
 8005898:	40020058 	.word	0x40020058
 800589c:	40020070 	.word	0x40020070
 80058a0:	40020088 	.word	0x40020088
 80058a4:	400200a0 	.word	0x400200a0
 80058a8:	400200b8 	.word	0x400200b8
 80058ac:	40020410 	.word	0x40020410
 80058b0:	40020428 	.word	0x40020428
 80058b4:	40020440 	.word	0x40020440
 80058b8:	40020458 	.word	0x40020458
 80058bc:	40020470 	.word	0x40020470
 80058c0:	40020488 	.word	0x40020488
 80058c4:	400204a0 	.word	0x400204a0
 80058c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 020e 	bic.w	r2, r3, #14
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 020a 	orr.w	r2, r2, #10
 80058de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0204 	orr.w	r2, r2, #4
 80058f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a83      	ldr	r2, [pc, #524]	; (8005b0c <HAL_DMA_Start_IT+0x474>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d072      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a82      	ldr	r2, [pc, #520]	; (8005b10 <HAL_DMA_Start_IT+0x478>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d06d      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a80      	ldr	r2, [pc, #512]	; (8005b14 <HAL_DMA_Start_IT+0x47c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d068      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a7f      	ldr	r2, [pc, #508]	; (8005b18 <HAL_DMA_Start_IT+0x480>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d063      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a7d      	ldr	r2, [pc, #500]	; (8005b1c <HAL_DMA_Start_IT+0x484>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d05e      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a7c      	ldr	r2, [pc, #496]	; (8005b20 <HAL_DMA_Start_IT+0x488>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d059      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a7a      	ldr	r2, [pc, #488]	; (8005b24 <HAL_DMA_Start_IT+0x48c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d054      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a79      	ldr	r2, [pc, #484]	; (8005b28 <HAL_DMA_Start_IT+0x490>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d04f      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a77      	ldr	r2, [pc, #476]	; (8005b2c <HAL_DMA_Start_IT+0x494>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d04a      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a76      	ldr	r2, [pc, #472]	; (8005b30 <HAL_DMA_Start_IT+0x498>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d045      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a74      	ldr	r2, [pc, #464]	; (8005b34 <HAL_DMA_Start_IT+0x49c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d040      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a73      	ldr	r2, [pc, #460]	; (8005b38 <HAL_DMA_Start_IT+0x4a0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d03b      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a71      	ldr	r2, [pc, #452]	; (8005b3c <HAL_DMA_Start_IT+0x4a4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d036      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a70      	ldr	r2, [pc, #448]	; (8005b40 <HAL_DMA_Start_IT+0x4a8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d031      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a6e      	ldr	r2, [pc, #440]	; (8005b44 <HAL_DMA_Start_IT+0x4ac>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d02c      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a6d      	ldr	r2, [pc, #436]	; (8005b48 <HAL_DMA_Start_IT+0x4b0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d027      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a6b      	ldr	r2, [pc, #428]	; (8005b4c <HAL_DMA_Start_IT+0x4b4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d022      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6a      	ldr	r2, [pc, #424]	; (8005b50 <HAL_DMA_Start_IT+0x4b8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d01d      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a68      	ldr	r2, [pc, #416]	; (8005b54 <HAL_DMA_Start_IT+0x4bc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d018      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a67      	ldr	r2, [pc, #412]	; (8005b58 <HAL_DMA_Start_IT+0x4c0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a65      	ldr	r2, [pc, #404]	; (8005b5c <HAL_DMA_Start_IT+0x4c4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00e      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a64      	ldr	r2, [pc, #400]	; (8005b60 <HAL_DMA_Start_IT+0x4c8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d009      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a62      	ldr	r2, [pc, #392]	; (8005b64 <HAL_DMA_Start_IT+0x4cc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_DMA_Start_IT+0x350>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a61      	ldr	r2, [pc, #388]	; (8005b68 <HAL_DMA_Start_IT+0x4d0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_DMA_Start_IT+0x354>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <HAL_DMA_Start_IT+0x356>
 80059ec:	2300      	movs	r3, #0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01a      	beq.n	8005a28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a37      	ldr	r2, [pc, #220]	; (8005b0c <HAL_DMA_Start_IT+0x474>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d04a      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a36      	ldr	r2, [pc, #216]	; (8005b10 <HAL_DMA_Start_IT+0x478>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d045      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a34      	ldr	r2, [pc, #208]	; (8005b14 <HAL_DMA_Start_IT+0x47c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d040      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a33      	ldr	r2, [pc, #204]	; (8005b18 <HAL_DMA_Start_IT+0x480>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d03b      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a31      	ldr	r2, [pc, #196]	; (8005b1c <HAL_DMA_Start_IT+0x484>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d036      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a30      	ldr	r2, [pc, #192]	; (8005b20 <HAL_DMA_Start_IT+0x488>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d031      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2e      	ldr	r2, [pc, #184]	; (8005b24 <HAL_DMA_Start_IT+0x48c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d02c      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <HAL_DMA_Start_IT+0x490>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d027      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <HAL_DMA_Start_IT+0x494>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d022      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <HAL_DMA_Start_IT+0x498>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d01d      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a28      	ldr	r2, [pc, #160]	; (8005b34 <HAL_DMA_Start_IT+0x49c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d018      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <HAL_DMA_Start_IT+0x4a0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <HAL_DMA_Start_IT+0x4a4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_DMA_Start_IT+0x4a8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <HAL_DMA_Start_IT+0x4ac>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x430>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <HAL_DMA_Start_IT+0x4b0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d108      	bne.n	8005ada <HAL_DMA_Start_IT+0x442>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e012      	b.n	8005b00 <HAL_DMA_Start_IT+0x468>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e009      	b.n	8005b00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40020010 	.word	0x40020010
 8005b10:	40020028 	.word	0x40020028
 8005b14:	40020040 	.word	0x40020040
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	40020070 	.word	0x40020070
 8005b20:	40020088 	.word	0x40020088
 8005b24:	400200a0 	.word	0x400200a0
 8005b28:	400200b8 	.word	0x400200b8
 8005b2c:	40020410 	.word	0x40020410
 8005b30:	40020428 	.word	0x40020428
 8005b34:	40020440 	.word	0x40020440
 8005b38:	40020458 	.word	0x40020458
 8005b3c:	40020470 	.word	0x40020470
 8005b40:	40020488 	.word	0x40020488
 8005b44:	400204a0 	.word	0x400204a0
 8005b48:	400204b8 	.word	0x400204b8
 8005b4c:	58025408 	.word	0x58025408
 8005b50:	5802541c 	.word	0x5802541c
 8005b54:	58025430 	.word	0x58025430
 8005b58:	58025444 	.word	0x58025444
 8005b5c:	58025458 	.word	0x58025458
 8005b60:	5802546c 	.word	0x5802546c
 8005b64:	58025480 	.word	0x58025480
 8005b68:	58025494 	.word	0x58025494

08005b6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005b74:	f7fd fecc 	bl	8003910 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e2dc      	b.n	800613e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d008      	beq.n	8005ba2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e2cd      	b.n	800613e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a76      	ldr	r2, [pc, #472]	; (8005d80 <HAL_DMA_Abort+0x214>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d04a      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a74      	ldr	r2, [pc, #464]	; (8005d84 <HAL_DMA_Abort+0x218>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d045      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a73      	ldr	r2, [pc, #460]	; (8005d88 <HAL_DMA_Abort+0x21c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d040      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a71      	ldr	r2, [pc, #452]	; (8005d8c <HAL_DMA_Abort+0x220>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d03b      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a70      	ldr	r2, [pc, #448]	; (8005d90 <HAL_DMA_Abort+0x224>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d036      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6e      	ldr	r2, [pc, #440]	; (8005d94 <HAL_DMA_Abort+0x228>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d031      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a6d      	ldr	r2, [pc, #436]	; (8005d98 <HAL_DMA_Abort+0x22c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d02c      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a6b      	ldr	r2, [pc, #428]	; (8005d9c <HAL_DMA_Abort+0x230>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d027      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6a      	ldr	r2, [pc, #424]	; (8005da0 <HAL_DMA_Abort+0x234>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a68      	ldr	r2, [pc, #416]	; (8005da4 <HAL_DMA_Abort+0x238>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01d      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a67      	ldr	r2, [pc, #412]	; (8005da8 <HAL_DMA_Abort+0x23c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d018      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a65      	ldr	r2, [pc, #404]	; (8005dac <HAL_DMA_Abort+0x240>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a64      	ldr	r2, [pc, #400]	; (8005db0 <HAL_DMA_Abort+0x244>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a62      	ldr	r2, [pc, #392]	; (8005db4 <HAL_DMA_Abort+0x248>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a61      	ldr	r2, [pc, #388]	; (8005db8 <HAL_DMA_Abort+0x24c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_DMA_Abort+0xd6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a5f      	ldr	r2, [pc, #380]	; (8005dbc <HAL_DMA_Abort+0x250>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <HAL_DMA_Abort+0xda>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_DMA_Abort+0xdc>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d013      	beq.n	8005c74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 021e 	bic.w	r2, r2, #30
 8005c5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e00a      	b.n	8005c8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 020e 	bic.w	r2, r2, #14
 8005c82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a3c      	ldr	r2, [pc, #240]	; (8005d80 <HAL_DMA_Abort+0x214>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d072      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a3a      	ldr	r2, [pc, #232]	; (8005d84 <HAL_DMA_Abort+0x218>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d06d      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a39      	ldr	r2, [pc, #228]	; (8005d88 <HAL_DMA_Abort+0x21c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d068      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a37      	ldr	r2, [pc, #220]	; (8005d8c <HAL_DMA_Abort+0x220>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d063      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a36      	ldr	r2, [pc, #216]	; (8005d90 <HAL_DMA_Abort+0x224>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d05e      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a34      	ldr	r2, [pc, #208]	; (8005d94 <HAL_DMA_Abort+0x228>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d059      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a33      	ldr	r2, [pc, #204]	; (8005d98 <HAL_DMA_Abort+0x22c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d054      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a31      	ldr	r2, [pc, #196]	; (8005d9c <HAL_DMA_Abort+0x230>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d04f      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <HAL_DMA_Abort+0x234>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d04a      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2e      	ldr	r2, [pc, #184]	; (8005da4 <HAL_DMA_Abort+0x238>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d045      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2d      	ldr	r2, [pc, #180]	; (8005da8 <HAL_DMA_Abort+0x23c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d040      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2b      	ldr	r2, [pc, #172]	; (8005dac <HAL_DMA_Abort+0x240>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d03b      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <HAL_DMA_Abort+0x244>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d036      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <HAL_DMA_Abort+0x248>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d031      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <HAL_DMA_Abort+0x24c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d02c      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <HAL_DMA_Abort+0x250>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d027      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a24      	ldr	r2, [pc, #144]	; (8005dc0 <HAL_DMA_Abort+0x254>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d022      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <HAL_DMA_Abort+0x258>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01d      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a21      	ldr	r2, [pc, #132]	; (8005dc8 <HAL_DMA_Abort+0x25c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d018      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1f      	ldr	r2, [pc, #124]	; (8005dcc <HAL_DMA_Abort+0x260>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <HAL_DMA_Abort+0x264>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00e      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <HAL_DMA_Abort+0x268>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d009      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <HAL_DMA_Abort+0x26c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_DMA_Abort+0x20e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a19      	ldr	r2, [pc, #100]	; (8005ddc <HAL_DMA_Abort+0x270>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d132      	bne.n	8005de0 <HAL_DMA_Abort+0x274>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e031      	b.n	8005de2 <HAL_DMA_Abort+0x276>
 8005d7e:	bf00      	nop
 8005d80:	40020010 	.word	0x40020010
 8005d84:	40020028 	.word	0x40020028
 8005d88:	40020040 	.word	0x40020040
 8005d8c:	40020058 	.word	0x40020058
 8005d90:	40020070 	.word	0x40020070
 8005d94:	40020088 	.word	0x40020088
 8005d98:	400200a0 	.word	0x400200a0
 8005d9c:	400200b8 	.word	0x400200b8
 8005da0:	40020410 	.word	0x40020410
 8005da4:	40020428 	.word	0x40020428
 8005da8:	40020440 	.word	0x40020440
 8005dac:	40020458 	.word	0x40020458
 8005db0:	40020470 	.word	0x40020470
 8005db4:	40020488 	.word	0x40020488
 8005db8:	400204a0 	.word	0x400204a0
 8005dbc:	400204b8 	.word	0x400204b8
 8005dc0:	58025408 	.word	0x58025408
 8005dc4:	5802541c 	.word	0x5802541c
 8005dc8:	58025430 	.word	0x58025430
 8005dcc:	58025444 	.word	0x58025444
 8005dd0:	58025458 	.word	0x58025458
 8005dd4:	5802546c 	.word	0x5802546c
 8005dd8:	58025480 	.word	0x58025480
 8005ddc:	58025494 	.word	0x58025494
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6d      	ldr	r2, [pc, #436]	; (8005fb0 <HAL_DMA_Abort+0x444>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a6b      	ldr	r2, [pc, #428]	; (8005fb4 <HAL_DMA_Abort+0x448>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6a      	ldr	r2, [pc, #424]	; (8005fb8 <HAL_DMA_Abort+0x44c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a68      	ldr	r2, [pc, #416]	; (8005fbc <HAL_DMA_Abort+0x450>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a67      	ldr	r2, [pc, #412]	; (8005fc0 <HAL_DMA_Abort+0x454>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a65      	ldr	r2, [pc, #404]	; (8005fc4 <HAL_DMA_Abort+0x458>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a64      	ldr	r2, [pc, #400]	; (8005fc8 <HAL_DMA_Abort+0x45c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a62      	ldr	r2, [pc, #392]	; (8005fcc <HAL_DMA_Abort+0x460>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a61      	ldr	r2, [pc, #388]	; (8005fd0 <HAL_DMA_Abort+0x464>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a5f      	ldr	r2, [pc, #380]	; (8005fd4 <HAL_DMA_Abort+0x468>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a5e      	ldr	r2, [pc, #376]	; (8005fd8 <HAL_DMA_Abort+0x46c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5c      	ldr	r2, [pc, #368]	; (8005fdc <HAL_DMA_Abort+0x470>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a5b      	ldr	r2, [pc, #364]	; (8005fe0 <HAL_DMA_Abort+0x474>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a59      	ldr	r2, [pc, #356]	; (8005fe4 <HAL_DMA_Abort+0x478>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a58      	ldr	r2, [pc, #352]	; (8005fe8 <HAL_DMA_Abort+0x47c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_DMA_Abort+0x32a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a56      	ldr	r2, [pc, #344]	; (8005fec <HAL_DMA_Abort+0x480>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <HAL_DMA_Abort+0x33c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e007      	b.n	8005eb8 <HAL_DMA_Abort+0x34c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0201 	bic.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005eb8:	e013      	b.n	8005ee2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eba:	f7fd fd29 	bl	8003910 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d90c      	bls.n	8005ee2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e12d      	b.n	800613e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2f      	ldr	r2, [pc, #188]	; (8005fb0 <HAL_DMA_Abort+0x444>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d04a      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2d      	ldr	r2, [pc, #180]	; (8005fb4 <HAL_DMA_Abort+0x448>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d045      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a2c      	ldr	r2, [pc, #176]	; (8005fb8 <HAL_DMA_Abort+0x44c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d040      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <HAL_DMA_Abort+0x450>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d03b      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <HAL_DMA_Abort+0x454>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d036      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a27      	ldr	r2, [pc, #156]	; (8005fc4 <HAL_DMA_Abort+0x458>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d031      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a26      	ldr	r2, [pc, #152]	; (8005fc8 <HAL_DMA_Abort+0x45c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d02c      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a24      	ldr	r2, [pc, #144]	; (8005fcc <HAL_DMA_Abort+0x460>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d027      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a23      	ldr	r2, [pc, #140]	; (8005fd0 <HAL_DMA_Abort+0x464>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d022      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	; (8005fd4 <HAL_DMA_Abort+0x468>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01d      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a20      	ldr	r2, [pc, #128]	; (8005fd8 <HAL_DMA_Abort+0x46c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d018      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_DMA_Abort+0x470>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1d      	ldr	r2, [pc, #116]	; (8005fe0 <HAL_DMA_Abort+0x474>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00e      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_DMA_Abort+0x478>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	; (8005fe8 <HAL_DMA_Abort+0x47c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <HAL_DMA_Abort+0x422>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_DMA_Abort+0x480>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <HAL_DMA_Abort+0x426>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <HAL_DMA_Abort+0x428>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d02b      	beq.n	8005ff0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	223f      	movs	r2, #63	; 0x3f
 8005fa8:	409a      	lsls	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	609a      	str	r2, [r3, #8]
 8005fae:	e02a      	b.n	8006006 <HAL_DMA_Abort+0x49a>
 8005fb0:	40020010 	.word	0x40020010
 8005fb4:	40020028 	.word	0x40020028
 8005fb8:	40020040 	.word	0x40020040
 8005fbc:	40020058 	.word	0x40020058
 8005fc0:	40020070 	.word	0x40020070
 8005fc4:	40020088 	.word	0x40020088
 8005fc8:	400200a0 	.word	0x400200a0
 8005fcc:	400200b8 	.word	0x400200b8
 8005fd0:	40020410 	.word	0x40020410
 8005fd4:	40020428 	.word	0x40020428
 8005fd8:	40020440 	.word	0x40020440
 8005fdc:	40020458 	.word	0x40020458
 8005fe0:	40020470 	.word	0x40020470
 8005fe4:	40020488 	.word	0x40020488
 8005fe8:	400204a0 	.word	0x400204a0
 8005fec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2201      	movs	r2, #1
 8006000:	409a      	lsls	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a4f      	ldr	r2, [pc, #316]	; (8006148 <HAL_DMA_Abort+0x5dc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d072      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a4d      	ldr	r2, [pc, #308]	; (800614c <HAL_DMA_Abort+0x5e0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d06d      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a4c      	ldr	r2, [pc, #304]	; (8006150 <HAL_DMA_Abort+0x5e4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d068      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a4a      	ldr	r2, [pc, #296]	; (8006154 <HAL_DMA_Abort+0x5e8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d063      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a49      	ldr	r2, [pc, #292]	; (8006158 <HAL_DMA_Abort+0x5ec>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d05e      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a47      	ldr	r2, [pc, #284]	; (800615c <HAL_DMA_Abort+0x5f0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d059      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a46      	ldr	r2, [pc, #280]	; (8006160 <HAL_DMA_Abort+0x5f4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d054      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a44      	ldr	r2, [pc, #272]	; (8006164 <HAL_DMA_Abort+0x5f8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d04f      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a43      	ldr	r2, [pc, #268]	; (8006168 <HAL_DMA_Abort+0x5fc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d04a      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a41      	ldr	r2, [pc, #260]	; (800616c <HAL_DMA_Abort+0x600>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d045      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a40      	ldr	r2, [pc, #256]	; (8006170 <HAL_DMA_Abort+0x604>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d040      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a3e      	ldr	r2, [pc, #248]	; (8006174 <HAL_DMA_Abort+0x608>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d03b      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a3d      	ldr	r2, [pc, #244]	; (8006178 <HAL_DMA_Abort+0x60c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d036      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a3b      	ldr	r2, [pc, #236]	; (800617c <HAL_DMA_Abort+0x610>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d031      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a3a      	ldr	r2, [pc, #232]	; (8006180 <HAL_DMA_Abort+0x614>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d02c      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a38      	ldr	r2, [pc, #224]	; (8006184 <HAL_DMA_Abort+0x618>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d027      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a37      	ldr	r2, [pc, #220]	; (8006188 <HAL_DMA_Abort+0x61c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d022      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a35      	ldr	r2, [pc, #212]	; (800618c <HAL_DMA_Abort+0x620>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01d      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a34      	ldr	r2, [pc, #208]	; (8006190 <HAL_DMA_Abort+0x624>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d018      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a32      	ldr	r2, [pc, #200]	; (8006194 <HAL_DMA_Abort+0x628>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a31      	ldr	r2, [pc, #196]	; (8006198 <HAL_DMA_Abort+0x62c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a2f      	ldr	r2, [pc, #188]	; (800619c <HAL_DMA_Abort+0x630>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d009      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a2e      	ldr	r2, [pc, #184]	; (80061a0 <HAL_DMA_Abort+0x634>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_DMA_Abort+0x58a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <HAL_DMA_Abort+0x638>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_DMA_Abort+0x58e>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <HAL_DMA_Abort+0x590>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006108:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006120:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800612a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40020010 	.word	0x40020010
 800614c:	40020028 	.word	0x40020028
 8006150:	40020040 	.word	0x40020040
 8006154:	40020058 	.word	0x40020058
 8006158:	40020070 	.word	0x40020070
 800615c:	40020088 	.word	0x40020088
 8006160:	400200a0 	.word	0x400200a0
 8006164:	400200b8 	.word	0x400200b8
 8006168:	40020410 	.word	0x40020410
 800616c:	40020428 	.word	0x40020428
 8006170:	40020440 	.word	0x40020440
 8006174:	40020458 	.word	0x40020458
 8006178:	40020470 	.word	0x40020470
 800617c:	40020488 	.word	0x40020488
 8006180:	400204a0 	.word	0x400204a0
 8006184:	400204b8 	.word	0x400204b8
 8006188:	58025408 	.word	0x58025408
 800618c:	5802541c 	.word	0x5802541c
 8006190:	58025430 	.word	0x58025430
 8006194:	58025444 	.word	0x58025444
 8006198:	58025458 	.word	0x58025458
 800619c:	5802546c 	.word	0x5802546c
 80061a0:	58025480 	.word	0x58025480
 80061a4:	58025494 	.word	0x58025494

080061a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e237      	b.n	800662a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d004      	beq.n	80061d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2280      	movs	r2, #128	; 0x80
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e22c      	b.n	800662a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a5c      	ldr	r2, [pc, #368]	; (8006348 <HAL_DMA_Abort_IT+0x1a0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d04a      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a5b      	ldr	r2, [pc, #364]	; (800634c <HAL_DMA_Abort_IT+0x1a4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d045      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a59      	ldr	r2, [pc, #356]	; (8006350 <HAL_DMA_Abort_IT+0x1a8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d040      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a58      	ldr	r2, [pc, #352]	; (8006354 <HAL_DMA_Abort_IT+0x1ac>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d03b      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a56      	ldr	r2, [pc, #344]	; (8006358 <HAL_DMA_Abort_IT+0x1b0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d036      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a55      	ldr	r2, [pc, #340]	; (800635c <HAL_DMA_Abort_IT+0x1b4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d031      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a53      	ldr	r2, [pc, #332]	; (8006360 <HAL_DMA_Abort_IT+0x1b8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d02c      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_DMA_Abort_IT+0x1bc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d027      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a50      	ldr	r2, [pc, #320]	; (8006368 <HAL_DMA_Abort_IT+0x1c0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d022      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a4f      	ldr	r2, [pc, #316]	; (800636c <HAL_DMA_Abort_IT+0x1c4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d01d      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a4d      	ldr	r2, [pc, #308]	; (8006370 <HAL_DMA_Abort_IT+0x1c8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d018      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a4c      	ldr	r2, [pc, #304]	; (8006374 <HAL_DMA_Abort_IT+0x1cc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a4a      	ldr	r2, [pc, #296]	; (8006378 <HAL_DMA_Abort_IT+0x1d0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a49      	ldr	r2, [pc, #292]	; (800637c <HAL_DMA_Abort_IT+0x1d4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d009      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a47      	ldr	r2, [pc, #284]	; (8006380 <HAL_DMA_Abort_IT+0x1d8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d004      	beq.n	8006270 <HAL_DMA_Abort_IT+0xc8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a46      	ldr	r2, [pc, #280]	; (8006384 <HAL_DMA_Abort_IT+0x1dc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d101      	bne.n	8006274 <HAL_DMA_Abort_IT+0xcc>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <HAL_DMA_Abort_IT+0xce>
 8006274:	2300      	movs	r3, #0
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 8086 	beq.w	8006388 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2204      	movs	r2, #4
 8006280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2f      	ldr	r2, [pc, #188]	; (8006348 <HAL_DMA_Abort_IT+0x1a0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d04a      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2e      	ldr	r2, [pc, #184]	; (800634c <HAL_DMA_Abort_IT+0x1a4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d045      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <HAL_DMA_Abort_IT+0x1a8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d040      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <HAL_DMA_Abort_IT+0x1ac>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d03b      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a29      	ldr	r2, [pc, #164]	; (8006358 <HAL_DMA_Abort_IT+0x1b0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d036      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a28      	ldr	r2, [pc, #160]	; (800635c <HAL_DMA_Abort_IT+0x1b4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d031      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a26      	ldr	r2, [pc, #152]	; (8006360 <HAL_DMA_Abort_IT+0x1b8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d02c      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a25      	ldr	r2, [pc, #148]	; (8006364 <HAL_DMA_Abort_IT+0x1bc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d027      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a23      	ldr	r2, [pc, #140]	; (8006368 <HAL_DMA_Abort_IT+0x1c0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a22      	ldr	r2, [pc, #136]	; (800636c <HAL_DMA_Abort_IT+0x1c4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d01d      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a20      	ldr	r2, [pc, #128]	; (8006370 <HAL_DMA_Abort_IT+0x1c8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_DMA_Abort_IT+0x1cc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <HAL_DMA_Abort_IT+0x1d0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_DMA_Abort_IT+0x1d4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1a      	ldr	r2, [pc, #104]	; (8006380 <HAL_DMA_Abort_IT+0x1d8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_DMA_Abort_IT+0x17c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a19      	ldr	r2, [pc, #100]	; (8006384 <HAL_DMA_Abort_IT+0x1dc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <HAL_DMA_Abort_IT+0x18e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e178      	b.n	8006628 <HAL_DMA_Abort_IT+0x480>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0201 	bic.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	e16f      	b.n	8006628 <HAL_DMA_Abort_IT+0x480>
 8006348:	40020010 	.word	0x40020010
 800634c:	40020028 	.word	0x40020028
 8006350:	40020040 	.word	0x40020040
 8006354:	40020058 	.word	0x40020058
 8006358:	40020070 	.word	0x40020070
 800635c:	40020088 	.word	0x40020088
 8006360:	400200a0 	.word	0x400200a0
 8006364:	400200b8 	.word	0x400200b8
 8006368:	40020410 	.word	0x40020410
 800636c:	40020428 	.word	0x40020428
 8006370:	40020440 	.word	0x40020440
 8006374:	40020458 	.word	0x40020458
 8006378:	40020470 	.word	0x40020470
 800637c:	40020488 	.word	0x40020488
 8006380:	400204a0 	.word	0x400204a0
 8006384:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 020e 	bic.w	r2, r2, #14
 8006396:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a6c      	ldr	r2, [pc, #432]	; (8006550 <HAL_DMA_Abort_IT+0x3a8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d04a      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a6b      	ldr	r2, [pc, #428]	; (8006554 <HAL_DMA_Abort_IT+0x3ac>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d045      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a69      	ldr	r2, [pc, #420]	; (8006558 <HAL_DMA_Abort_IT+0x3b0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d040      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a68      	ldr	r2, [pc, #416]	; (800655c <HAL_DMA_Abort_IT+0x3b4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d03b      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a66      	ldr	r2, [pc, #408]	; (8006560 <HAL_DMA_Abort_IT+0x3b8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d036      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a65      	ldr	r2, [pc, #404]	; (8006564 <HAL_DMA_Abort_IT+0x3bc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d031      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a63      	ldr	r2, [pc, #396]	; (8006568 <HAL_DMA_Abort_IT+0x3c0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d02c      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a62      	ldr	r2, [pc, #392]	; (800656c <HAL_DMA_Abort_IT+0x3c4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d027      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a60      	ldr	r2, [pc, #384]	; (8006570 <HAL_DMA_Abort_IT+0x3c8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d022      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a5f      	ldr	r2, [pc, #380]	; (8006574 <HAL_DMA_Abort_IT+0x3cc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d01d      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a5d      	ldr	r2, [pc, #372]	; (8006578 <HAL_DMA_Abort_IT+0x3d0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d018      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a5c      	ldr	r2, [pc, #368]	; (800657c <HAL_DMA_Abort_IT+0x3d4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d013      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a5a      	ldr	r2, [pc, #360]	; (8006580 <HAL_DMA_Abort_IT+0x3d8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00e      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a59      	ldr	r2, [pc, #356]	; (8006584 <HAL_DMA_Abort_IT+0x3dc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d009      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a57      	ldr	r2, [pc, #348]	; (8006588 <HAL_DMA_Abort_IT+0x3e0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_DMA_Abort_IT+0x290>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a56      	ldr	r2, [pc, #344]	; (800658c <HAL_DMA_Abort_IT+0x3e4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d108      	bne.n	800644a <HAL_DMA_Abort_IT+0x2a2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e007      	b.n	800645a <HAL_DMA_Abort_IT+0x2b2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a3c      	ldr	r2, [pc, #240]	; (8006550 <HAL_DMA_Abort_IT+0x3a8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d072      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a3a      	ldr	r2, [pc, #232]	; (8006554 <HAL_DMA_Abort_IT+0x3ac>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d06d      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a39      	ldr	r2, [pc, #228]	; (8006558 <HAL_DMA_Abort_IT+0x3b0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d068      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a37      	ldr	r2, [pc, #220]	; (800655c <HAL_DMA_Abort_IT+0x3b4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d063      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a36      	ldr	r2, [pc, #216]	; (8006560 <HAL_DMA_Abort_IT+0x3b8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d05e      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a34      	ldr	r2, [pc, #208]	; (8006564 <HAL_DMA_Abort_IT+0x3bc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d059      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a33      	ldr	r2, [pc, #204]	; (8006568 <HAL_DMA_Abort_IT+0x3c0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d054      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a31      	ldr	r2, [pc, #196]	; (800656c <HAL_DMA_Abort_IT+0x3c4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d04f      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a30      	ldr	r2, [pc, #192]	; (8006570 <HAL_DMA_Abort_IT+0x3c8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d04a      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a2e      	ldr	r2, [pc, #184]	; (8006574 <HAL_DMA_Abort_IT+0x3cc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d045      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a2d      	ldr	r2, [pc, #180]	; (8006578 <HAL_DMA_Abort_IT+0x3d0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d040      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a2b      	ldr	r2, [pc, #172]	; (800657c <HAL_DMA_Abort_IT+0x3d4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d03b      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a2a      	ldr	r2, [pc, #168]	; (8006580 <HAL_DMA_Abort_IT+0x3d8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d036      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a28      	ldr	r2, [pc, #160]	; (8006584 <HAL_DMA_Abort_IT+0x3dc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d031      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a27      	ldr	r2, [pc, #156]	; (8006588 <HAL_DMA_Abort_IT+0x3e0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02c      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a25      	ldr	r2, [pc, #148]	; (800658c <HAL_DMA_Abort_IT+0x3e4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d027      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a24      	ldr	r2, [pc, #144]	; (8006590 <HAL_DMA_Abort_IT+0x3e8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a22      	ldr	r2, [pc, #136]	; (8006594 <HAL_DMA_Abort_IT+0x3ec>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01d      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a21      	ldr	r2, [pc, #132]	; (8006598 <HAL_DMA_Abort_IT+0x3f0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1f      	ldr	r2, [pc, #124]	; (800659c <HAL_DMA_Abort_IT+0x3f4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <HAL_DMA_Abort_IT+0x3f8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <HAL_DMA_Abort_IT+0x3fc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <HAL_DMA_Abort_IT+0x400>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_DMA_Abort_IT+0x3a2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <HAL_DMA_Abort_IT+0x404>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d132      	bne.n	80065b0 <HAL_DMA_Abort_IT+0x408>
 800654a:	2301      	movs	r3, #1
 800654c:	e031      	b.n	80065b2 <HAL_DMA_Abort_IT+0x40a>
 800654e:	bf00      	nop
 8006550:	40020010 	.word	0x40020010
 8006554:	40020028 	.word	0x40020028
 8006558:	40020040 	.word	0x40020040
 800655c:	40020058 	.word	0x40020058
 8006560:	40020070 	.word	0x40020070
 8006564:	40020088 	.word	0x40020088
 8006568:	400200a0 	.word	0x400200a0
 800656c:	400200b8 	.word	0x400200b8
 8006570:	40020410 	.word	0x40020410
 8006574:	40020428 	.word	0x40020428
 8006578:	40020440 	.word	0x40020440
 800657c:	40020458 	.word	0x40020458
 8006580:	40020470 	.word	0x40020470
 8006584:	40020488 	.word	0x40020488
 8006588:	400204a0 	.word	0x400204a0
 800658c:	400204b8 	.word	0x400204b8
 8006590:	58025408 	.word	0x58025408
 8006594:	5802541c 	.word	0x5802541c
 8006598:	58025430 	.word	0x58025430
 800659c:	58025444 	.word	0x58025444
 80065a0:	58025458 	.word	0x58025458
 80065a4:	5802546c 	.word	0x5802546c
 80065a8:	58025480 	.word	0x58025480
 80065ac:	58025494 	.word	0x58025494
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d028      	beq.n	8006608 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	2201      	movs	r2, #1
 80065d6:	409a      	lsls	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006606:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop

08006634 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	; 0x28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006640:	4b67      	ldr	r3, [pc, #412]	; (80067e0 <HAL_DMA_IRQHandler+0x1ac>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a67      	ldr	r2, [pc, #412]	; (80067e4 <HAL_DMA_IRQHandler+0x1b0>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	0a9b      	lsrs	r3, r3, #10
 800664c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006652:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006658:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5f      	ldr	r2, [pc, #380]	; (80067e8 <HAL_DMA_IRQHandler+0x1b4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d04a      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5d      	ldr	r2, [pc, #372]	; (80067ec <HAL_DMA_IRQHandler+0x1b8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d045      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a5c      	ldr	r2, [pc, #368]	; (80067f0 <HAL_DMA_IRQHandler+0x1bc>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d040      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5a      	ldr	r2, [pc, #360]	; (80067f4 <HAL_DMA_IRQHandler+0x1c0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d03b      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a59      	ldr	r2, [pc, #356]	; (80067f8 <HAL_DMA_IRQHandler+0x1c4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d036      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a57      	ldr	r2, [pc, #348]	; (80067fc <HAL_DMA_IRQHandler+0x1c8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d031      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a56      	ldr	r2, [pc, #344]	; (8006800 <HAL_DMA_IRQHandler+0x1cc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d02c      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a54      	ldr	r2, [pc, #336]	; (8006804 <HAL_DMA_IRQHandler+0x1d0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d027      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a53      	ldr	r2, [pc, #332]	; (8006808 <HAL_DMA_IRQHandler+0x1d4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d022      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a51      	ldr	r2, [pc, #324]	; (800680c <HAL_DMA_IRQHandler+0x1d8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01d      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a50      	ldr	r2, [pc, #320]	; (8006810 <HAL_DMA_IRQHandler+0x1dc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d018      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a4e      	ldr	r2, [pc, #312]	; (8006814 <HAL_DMA_IRQHandler+0x1e0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a4d      	ldr	r2, [pc, #308]	; (8006818 <HAL_DMA_IRQHandler+0x1e4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a4b      	ldr	r2, [pc, #300]	; (800681c <HAL_DMA_IRQHandler+0x1e8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a4a      	ldr	r2, [pc, #296]	; (8006820 <HAL_DMA_IRQHandler+0x1ec>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <HAL_DMA_IRQHandler+0xd2>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a48      	ldr	r2, [pc, #288]	; (8006824 <HAL_DMA_IRQHandler+0x1f0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d101      	bne.n	800670a <HAL_DMA_IRQHandler+0xd6>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <HAL_DMA_IRQHandler+0xd8>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 842b 	beq.w	8006f68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2208      	movs	r2, #8
 800671c:	409a      	lsls	r2, r3
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	4013      	ands	r3, r2
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80a2 	beq.w	800686c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2e      	ldr	r2, [pc, #184]	; (80067e8 <HAL_DMA_IRQHandler+0x1b4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d04a      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2d      	ldr	r2, [pc, #180]	; (80067ec <HAL_DMA_IRQHandler+0x1b8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d045      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2b      	ldr	r2, [pc, #172]	; (80067f0 <HAL_DMA_IRQHandler+0x1bc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d040      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <HAL_DMA_IRQHandler+0x1c0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d03b      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <HAL_DMA_IRQHandler+0x1c4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d036      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a27      	ldr	r2, [pc, #156]	; (80067fc <HAL_DMA_IRQHandler+0x1c8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d031      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a25      	ldr	r2, [pc, #148]	; (8006800 <HAL_DMA_IRQHandler+0x1cc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d02c      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a24      	ldr	r2, [pc, #144]	; (8006804 <HAL_DMA_IRQHandler+0x1d0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d027      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a22      	ldr	r2, [pc, #136]	; (8006808 <HAL_DMA_IRQHandler+0x1d4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d022      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a21      	ldr	r2, [pc, #132]	; (800680c <HAL_DMA_IRQHandler+0x1d8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d01d      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <HAL_DMA_IRQHandler+0x1dc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d018      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1e      	ldr	r2, [pc, #120]	; (8006814 <HAL_DMA_IRQHandler+0x1e0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d013      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_DMA_IRQHandler+0x1e4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00e      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1b      	ldr	r2, [pc, #108]	; (800681c <HAL_DMA_IRQHandler+0x1e8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d009      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a19      	ldr	r2, [pc, #100]	; (8006820 <HAL_DMA_IRQHandler+0x1ec>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <HAL_DMA_IRQHandler+0x194>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a18      	ldr	r2, [pc, #96]	; (8006824 <HAL_DMA_IRQHandler+0x1f0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d12f      	bne.n	8006828 <HAL_DMA_IRQHandler+0x1f4>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bf14      	ite	ne
 80067d6:	2301      	movne	r3, #1
 80067d8:	2300      	moveq	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e02e      	b.n	800683c <HAL_DMA_IRQHandler+0x208>
 80067de:	bf00      	nop
 80067e0:	24000000 	.word	0x24000000
 80067e4:	1b4e81b5 	.word	0x1b4e81b5
 80067e8:	40020010 	.word	0x40020010
 80067ec:	40020028 	.word	0x40020028
 80067f0:	40020040 	.word	0x40020040
 80067f4:	40020058 	.word	0x40020058
 80067f8:	40020070 	.word	0x40020070
 80067fc:	40020088 	.word	0x40020088
 8006800:	400200a0 	.word	0x400200a0
 8006804:	400200b8 	.word	0x400200b8
 8006808:	40020410 	.word	0x40020410
 800680c:	40020428 	.word	0x40020428
 8006810:	40020440 	.word	0x40020440
 8006814:	40020458 	.word	0x40020458
 8006818:	40020470 	.word	0x40020470
 800681c:	40020488 	.word	0x40020488
 8006820:	400204a0 	.word	0x400204a0
 8006824:	400204b8 	.word	0x400204b8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	bf14      	ite	ne
 8006836:	2301      	movne	r3, #1
 8006838:	2300      	moveq	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d015      	beq.n	800686c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0204 	bic.w	r2, r2, #4
 800684e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	2208      	movs	r2, #8
 800685a:	409a      	lsls	r2, r3
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006864:	f043 0201 	orr.w	r2, r3, #1
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d06e      	beq.n	8006960 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a69      	ldr	r2, [pc, #420]	; (8006a2c <HAL_DMA_IRQHandler+0x3f8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d04a      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a67      	ldr	r2, [pc, #412]	; (8006a30 <HAL_DMA_IRQHandler+0x3fc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d045      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a66      	ldr	r2, [pc, #408]	; (8006a34 <HAL_DMA_IRQHandler+0x400>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d040      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a64      	ldr	r2, [pc, #400]	; (8006a38 <HAL_DMA_IRQHandler+0x404>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d03b      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a63      	ldr	r2, [pc, #396]	; (8006a3c <HAL_DMA_IRQHandler+0x408>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d036      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a61      	ldr	r2, [pc, #388]	; (8006a40 <HAL_DMA_IRQHandler+0x40c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d031      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a60      	ldr	r2, [pc, #384]	; (8006a44 <HAL_DMA_IRQHandler+0x410>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d02c      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a5e      	ldr	r2, [pc, #376]	; (8006a48 <HAL_DMA_IRQHandler+0x414>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d027      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a5d      	ldr	r2, [pc, #372]	; (8006a4c <HAL_DMA_IRQHandler+0x418>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d022      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a5b      	ldr	r2, [pc, #364]	; (8006a50 <HAL_DMA_IRQHandler+0x41c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01d      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a5a      	ldr	r2, [pc, #360]	; (8006a54 <HAL_DMA_IRQHandler+0x420>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d018      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a58      	ldr	r2, [pc, #352]	; (8006a58 <HAL_DMA_IRQHandler+0x424>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a57      	ldr	r2, [pc, #348]	; (8006a5c <HAL_DMA_IRQHandler+0x428>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a55      	ldr	r2, [pc, #340]	; (8006a60 <HAL_DMA_IRQHandler+0x42c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a54      	ldr	r2, [pc, #336]	; (8006a64 <HAL_DMA_IRQHandler+0x430>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_DMA_IRQHandler+0x2ee>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a52      	ldr	r2, [pc, #328]	; (8006a68 <HAL_DMA_IRQHandler+0x434>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d10a      	bne.n	8006938 <HAL_DMA_IRQHandler+0x304>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692c:	2b00      	cmp	r3, #0
 800692e:	bf14      	ite	ne
 8006930:	2301      	movne	r3, #1
 8006932:	2300      	moveq	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	e003      	b.n	8006940 <HAL_DMA_IRQHandler+0x30c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00d      	beq.n	8006960 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	2201      	movs	r2, #1
 800694e:	409a      	lsls	r2, r3
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	f043 0202 	orr.w	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006964:	f003 031f 	and.w	r3, r3, #31
 8006968:	2204      	movs	r2, #4
 800696a:	409a      	lsls	r2, r3
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 808f 	beq.w	8006a94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a2c      	ldr	r2, [pc, #176]	; (8006a2c <HAL_DMA_IRQHandler+0x3f8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d04a      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <HAL_DMA_IRQHandler+0x3fc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d045      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a29      	ldr	r2, [pc, #164]	; (8006a34 <HAL_DMA_IRQHandler+0x400>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d040      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a27      	ldr	r2, [pc, #156]	; (8006a38 <HAL_DMA_IRQHandler+0x404>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d03b      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <HAL_DMA_IRQHandler+0x408>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d036      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a24      	ldr	r2, [pc, #144]	; (8006a40 <HAL_DMA_IRQHandler+0x40c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d031      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a23      	ldr	r2, [pc, #140]	; (8006a44 <HAL_DMA_IRQHandler+0x410>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d02c      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a21      	ldr	r2, [pc, #132]	; (8006a48 <HAL_DMA_IRQHandler+0x414>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d027      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a20      	ldr	r2, [pc, #128]	; (8006a4c <HAL_DMA_IRQHandler+0x418>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d022      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a1e      	ldr	r2, [pc, #120]	; (8006a50 <HAL_DMA_IRQHandler+0x41c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01d      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <HAL_DMA_IRQHandler+0x420>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d018      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <HAL_DMA_IRQHandler+0x424>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1a      	ldr	r2, [pc, #104]	; (8006a5c <HAL_DMA_IRQHandler+0x428>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00e      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a18      	ldr	r2, [pc, #96]	; (8006a60 <HAL_DMA_IRQHandler+0x42c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d009      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a17      	ldr	r2, [pc, #92]	; (8006a64 <HAL_DMA_IRQHandler+0x430>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d004      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x3e2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <HAL_DMA_IRQHandler+0x434>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d12a      	bne.n	8006a6c <HAL_DMA_IRQHandler+0x438>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bf14      	ite	ne
 8006a24:	2301      	movne	r3, #1
 8006a26:	2300      	moveq	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	e023      	b.n	8006a74 <HAL_DMA_IRQHandler+0x440>
 8006a2c:	40020010 	.word	0x40020010
 8006a30:	40020028 	.word	0x40020028
 8006a34:	40020040 	.word	0x40020040
 8006a38:	40020058 	.word	0x40020058
 8006a3c:	40020070 	.word	0x40020070
 8006a40:	40020088 	.word	0x40020088
 8006a44:	400200a0 	.word	0x400200a0
 8006a48:	400200b8 	.word	0x400200b8
 8006a4c:	40020410 	.word	0x40020410
 8006a50:	40020428 	.word	0x40020428
 8006a54:	40020440 	.word	0x40020440
 8006a58:	40020458 	.word	0x40020458
 8006a5c:	40020470 	.word	0x40020470
 8006a60:	40020488 	.word	0x40020488
 8006a64:	400204a0 	.word	0x400204a0
 8006a68:	400204b8 	.word	0x400204b8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00d      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	2204      	movs	r2, #4
 8006a82:	409a      	lsls	r2, r3
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8c:	f043 0204 	orr.w	r2, r3, #4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	409a      	lsls	r2, r3
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80a6 	beq.w	8006bf6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a85      	ldr	r2, [pc, #532]	; (8006cc4 <HAL_DMA_IRQHandler+0x690>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d04a      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a83      	ldr	r2, [pc, #524]	; (8006cc8 <HAL_DMA_IRQHandler+0x694>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d045      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a82      	ldr	r2, [pc, #520]	; (8006ccc <HAL_DMA_IRQHandler+0x698>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d040      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a80      	ldr	r2, [pc, #512]	; (8006cd0 <HAL_DMA_IRQHandler+0x69c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d03b      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a7f      	ldr	r2, [pc, #508]	; (8006cd4 <HAL_DMA_IRQHandler+0x6a0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d036      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a7d      	ldr	r2, [pc, #500]	; (8006cd8 <HAL_DMA_IRQHandler+0x6a4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d031      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a7c      	ldr	r2, [pc, #496]	; (8006cdc <HAL_DMA_IRQHandler+0x6a8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d02c      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a7a      	ldr	r2, [pc, #488]	; (8006ce0 <HAL_DMA_IRQHandler+0x6ac>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d027      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a79      	ldr	r2, [pc, #484]	; (8006ce4 <HAL_DMA_IRQHandler+0x6b0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d022      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a77      	ldr	r2, [pc, #476]	; (8006ce8 <HAL_DMA_IRQHandler+0x6b4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01d      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a76      	ldr	r2, [pc, #472]	; (8006cec <HAL_DMA_IRQHandler+0x6b8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d018      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a74      	ldr	r2, [pc, #464]	; (8006cf0 <HAL_DMA_IRQHandler+0x6bc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a73      	ldr	r2, [pc, #460]	; (8006cf4 <HAL_DMA_IRQHandler+0x6c0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00e      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a71      	ldr	r2, [pc, #452]	; (8006cf8 <HAL_DMA_IRQHandler+0x6c4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a70      	ldr	r2, [pc, #448]	; (8006cfc <HAL_DMA_IRQHandler+0x6c8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x516>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a6e      	ldr	r2, [pc, #440]	; (8006d00 <HAL_DMA_IRQHandler+0x6cc>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d10a      	bne.n	8006b60 <HAL_DMA_IRQHandler+0x52c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bf14      	ite	ne
 8006b58:	2301      	movne	r3, #1
 8006b5a:	2300      	moveq	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	e009      	b.n	8006b74 <HAL_DMA_IRQHandler+0x540>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	2300      	moveq	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d03e      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7c:	f003 031f 	and.w	r3, r3, #31
 8006b80:	2210      	movs	r2, #16
 8006b82:	409a      	lsls	r2, r3
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d018      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d108      	bne.n	8006bb6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d024      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
 8006bb4:	e01f      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01b      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
 8006bc6:	e016      	b.n	8006bf6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d107      	bne.n	8006be6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0208 	bic.w	r2, r2, #8
 8006be4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	2220      	movs	r2, #32
 8006c00:	409a      	lsls	r2, r3
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 8110 	beq.w	8006e2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <HAL_DMA_IRQHandler+0x690>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d04a      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <HAL_DMA_IRQHandler+0x694>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d045      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a29      	ldr	r2, [pc, #164]	; (8006ccc <HAL_DMA_IRQHandler+0x698>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d040      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a28      	ldr	r2, [pc, #160]	; (8006cd0 <HAL_DMA_IRQHandler+0x69c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d03b      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <HAL_DMA_IRQHandler+0x6a0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d036      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a25      	ldr	r2, [pc, #148]	; (8006cd8 <HAL_DMA_IRQHandler+0x6a4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d031      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a23      	ldr	r2, [pc, #140]	; (8006cdc <HAL_DMA_IRQHandler+0x6a8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d02c      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a22      	ldr	r2, [pc, #136]	; (8006ce0 <HAL_DMA_IRQHandler+0x6ac>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d027      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <HAL_DMA_IRQHandler+0x6b0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d022      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ce8 <HAL_DMA_IRQHandler+0x6b4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d01d      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <HAL_DMA_IRQHandler+0x6b8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d018      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <HAL_DMA_IRQHandler+0x6bc>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d013      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <HAL_DMA_IRQHandler+0x6c0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00e      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <HAL_DMA_IRQHandler+0x6c4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d009      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <HAL_DMA_IRQHandler+0x6c8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d004      	beq.n	8006cac <HAL_DMA_IRQHandler+0x678>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <HAL_DMA_IRQHandler+0x6cc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d12b      	bne.n	8006d04 <HAL_DMA_IRQHandler+0x6d0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bf14      	ite	ne
 8006cba:	2301      	movne	r3, #1
 8006cbc:	2300      	moveq	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	e02a      	b.n	8006d18 <HAL_DMA_IRQHandler+0x6e4>
 8006cc2:	bf00      	nop
 8006cc4:	40020010 	.word	0x40020010
 8006cc8:	40020028 	.word	0x40020028
 8006ccc:	40020040 	.word	0x40020040
 8006cd0:	40020058 	.word	0x40020058
 8006cd4:	40020070 	.word	0x40020070
 8006cd8:	40020088 	.word	0x40020088
 8006cdc:	400200a0 	.word	0x400200a0
 8006ce0:	400200b8 	.word	0x400200b8
 8006ce4:	40020410 	.word	0x40020410
 8006ce8:	40020428 	.word	0x40020428
 8006cec:	40020440 	.word	0x40020440
 8006cf0:	40020458 	.word	0x40020458
 8006cf4:	40020470 	.word	0x40020470
 8006cf8:	40020488 	.word	0x40020488
 8006cfc:	400204a0 	.word	0x400204a0
 8006d00:	400204b8 	.word	0x400204b8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bf14      	ite	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	2300      	moveq	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8087 	beq.w	8006e2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2220      	movs	r2, #32
 8006d28:	409a      	lsls	r2, r3
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d139      	bne.n	8006dae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0216 	bic.w	r2, r2, #22
 8006d48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695a      	ldr	r2, [r3, #20]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d103      	bne.n	8006d6a <HAL_DMA_IRQHandler+0x736>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0208 	bic.w	r2, r2, #8
 8006d78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	223f      	movs	r2, #63	; 0x3f
 8006d84:	409a      	lsls	r2, r3
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 834a 	beq.w	8007438 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
          }
          return;
 8006dac:	e344      	b.n	8007438 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d018      	beq.n	8006dee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d108      	bne.n	8006ddc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d02c      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
 8006dda:	e027      	b.n	8006e2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d023      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
 8006dec:	e01e      	b.n	8006e2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10f      	bne.n	8006e1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0210 	bic.w	r2, r2, #16
 8006e0a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8306 	beq.w	8007442 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 8088 	beq.w	8006f54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2204      	movs	r2, #4
 8006e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a7a      	ldr	r2, [pc, #488]	; (800703c <HAL_DMA_IRQHandler+0xa08>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d04a      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a79      	ldr	r2, [pc, #484]	; (8007040 <HAL_DMA_IRQHandler+0xa0c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d045      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a77      	ldr	r2, [pc, #476]	; (8007044 <HAL_DMA_IRQHandler+0xa10>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d040      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a76      	ldr	r2, [pc, #472]	; (8007048 <HAL_DMA_IRQHandler+0xa14>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d03b      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a74      	ldr	r2, [pc, #464]	; (800704c <HAL_DMA_IRQHandler+0xa18>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d036      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a73      	ldr	r2, [pc, #460]	; (8007050 <HAL_DMA_IRQHandler+0xa1c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d031      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a71      	ldr	r2, [pc, #452]	; (8007054 <HAL_DMA_IRQHandler+0xa20>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d02c      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a70      	ldr	r2, [pc, #448]	; (8007058 <HAL_DMA_IRQHandler+0xa24>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d027      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a6e      	ldr	r2, [pc, #440]	; (800705c <HAL_DMA_IRQHandler+0xa28>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d022      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a6d      	ldr	r2, [pc, #436]	; (8007060 <HAL_DMA_IRQHandler+0xa2c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d01d      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a6b      	ldr	r2, [pc, #428]	; (8007064 <HAL_DMA_IRQHandler+0xa30>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d018      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6a      	ldr	r2, [pc, #424]	; (8007068 <HAL_DMA_IRQHandler+0xa34>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d013      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a68      	ldr	r2, [pc, #416]	; (800706c <HAL_DMA_IRQHandler+0xa38>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00e      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a67      	ldr	r2, [pc, #412]	; (8007070 <HAL_DMA_IRQHandler+0xa3c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d009      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a65      	ldr	r2, [pc, #404]	; (8007074 <HAL_DMA_IRQHandler+0xa40>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <HAL_DMA_IRQHandler+0x8b8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a64      	ldr	r2, [pc, #400]	; (8007078 <HAL_DMA_IRQHandler+0xa44>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d108      	bne.n	8006efe <HAL_DMA_IRQHandler+0x8ca>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	e007      	b.n	8006f0e <HAL_DMA_IRQHandler+0x8da>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d307      	bcc.n	8006f2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f2      	bne.n	8006f0e <HAL_DMA_IRQHandler+0x8da>
 8006f28:	e000      	b.n	8006f2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2203      	movs	r2, #3
 8006f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006f42:	e003      	b.n	8006f4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8272 	beq.w	8007442 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
 8006f66:	e26c      	b.n	8007442 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a43      	ldr	r2, [pc, #268]	; (800707c <HAL_DMA_IRQHandler+0xa48>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d022      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x984>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a42      	ldr	r2, [pc, #264]	; (8007080 <HAL_DMA_IRQHandler+0xa4c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d01d      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x984>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a40      	ldr	r2, [pc, #256]	; (8007084 <HAL_DMA_IRQHandler+0xa50>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x984>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a3f      	ldr	r2, [pc, #252]	; (8007088 <HAL_DMA_IRQHandler+0xa54>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x984>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a3d      	ldr	r2, [pc, #244]	; (800708c <HAL_DMA_IRQHandler+0xa58>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x984>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a3c      	ldr	r2, [pc, #240]	; (8007090 <HAL_DMA_IRQHandler+0xa5c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x984>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a3a      	ldr	r2, [pc, #232]	; (8007094 <HAL_DMA_IRQHandler+0xa60>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x984>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a39      	ldr	r2, [pc, #228]	; (8007098 <HAL_DMA_IRQHandler+0xa64>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d101      	bne.n	8006fbc <HAL_DMA_IRQHandler+0x988>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <HAL_DMA_IRQHandler+0x98a>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 823f 	beq.w	8007442 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	409a      	lsls	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80cd 	beq.w	800717c <HAL_DMA_IRQHandler+0xb48>
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80c7 	beq.w	800717c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	409a      	lsls	r2, r3
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d049      	beq.n	800709c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 8210 	beq.w	800743c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007024:	e20a      	b.n	800743c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8206 	beq.w	800743c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007038:	e200      	b.n	800743c <HAL_DMA_IRQHandler+0xe08>
 800703a:	bf00      	nop
 800703c:	40020010 	.word	0x40020010
 8007040:	40020028 	.word	0x40020028
 8007044:	40020040 	.word	0x40020040
 8007048:	40020058 	.word	0x40020058
 800704c:	40020070 	.word	0x40020070
 8007050:	40020088 	.word	0x40020088
 8007054:	400200a0 	.word	0x400200a0
 8007058:	400200b8 	.word	0x400200b8
 800705c:	40020410 	.word	0x40020410
 8007060:	40020428 	.word	0x40020428
 8007064:	40020440 	.word	0x40020440
 8007068:	40020458 	.word	0x40020458
 800706c:	40020470 	.word	0x40020470
 8007070:	40020488 	.word	0x40020488
 8007074:	400204a0 	.word	0x400204a0
 8007078:	400204b8 	.word	0x400204b8
 800707c:	58025408 	.word	0x58025408
 8007080:	5802541c 	.word	0x5802541c
 8007084:	58025430 	.word	0x58025430
 8007088:	58025444 	.word	0x58025444
 800708c:	58025458 	.word	0x58025458
 8007090:	5802546c 	.word	0x5802546c
 8007094:	58025480 	.word	0x58025480
 8007098:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d160      	bne.n	8007168 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a7f      	ldr	r2, [pc, #508]	; (80072a8 <HAL_DMA_IRQHandler+0xc74>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d04a      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a7d      	ldr	r2, [pc, #500]	; (80072ac <HAL_DMA_IRQHandler+0xc78>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d045      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a7c      	ldr	r2, [pc, #496]	; (80072b0 <HAL_DMA_IRQHandler+0xc7c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d040      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7a      	ldr	r2, [pc, #488]	; (80072b4 <HAL_DMA_IRQHandler+0xc80>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d03b      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a79      	ldr	r2, [pc, #484]	; (80072b8 <HAL_DMA_IRQHandler+0xc84>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d036      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a77      	ldr	r2, [pc, #476]	; (80072bc <HAL_DMA_IRQHandler+0xc88>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d031      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a76      	ldr	r2, [pc, #472]	; (80072c0 <HAL_DMA_IRQHandler+0xc8c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d02c      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a74      	ldr	r2, [pc, #464]	; (80072c4 <HAL_DMA_IRQHandler+0xc90>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d027      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a73      	ldr	r2, [pc, #460]	; (80072c8 <HAL_DMA_IRQHandler+0xc94>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d022      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a71      	ldr	r2, [pc, #452]	; (80072cc <HAL_DMA_IRQHandler+0xc98>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01d      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a70      	ldr	r2, [pc, #448]	; (80072d0 <HAL_DMA_IRQHandler+0xc9c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d018      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a6e      	ldr	r2, [pc, #440]	; (80072d4 <HAL_DMA_IRQHandler+0xca0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a6d      	ldr	r2, [pc, #436]	; (80072d8 <HAL_DMA_IRQHandler+0xca4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00e      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a6b      	ldr	r2, [pc, #428]	; (80072dc <HAL_DMA_IRQHandler+0xca8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d009      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a6a      	ldr	r2, [pc, #424]	; (80072e0 <HAL_DMA_IRQHandler+0xcac>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d004      	beq.n	8007146 <HAL_DMA_IRQHandler+0xb12>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a68      	ldr	r2, [pc, #416]	; (80072e4 <HAL_DMA_IRQHandler+0xcb0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d108      	bne.n	8007158 <HAL_DMA_IRQHandler+0xb24>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0208 	bic.w	r2, r2, #8
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	e007      	b.n	8007168 <HAL_DMA_IRQHandler+0xb34>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0204 	bic.w	r2, r2, #4
 8007166:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8165 	beq.w	800743c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800717a:	e15f      	b.n	800743c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007180:	f003 031f 	and.w	r3, r3, #31
 8007184:	2202      	movs	r2, #2
 8007186:	409a      	lsls	r2, r3
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4013      	ands	r3, r2
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 80c5 	beq.w	800731c <HAL_DMA_IRQHandler+0xce8>
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80bf 	beq.w	800731c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	2202      	movs	r2, #2
 80071a8:	409a      	lsls	r2, r3
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d018      	beq.n	80071ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 813a 	beq.w	8007440 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d4:	e134      	b.n	8007440 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 8130 	beq.w	8007440 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e8:	e12a      	b.n	8007440 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f040 8089 	bne.w	8007308 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2b      	ldr	r2, [pc, #172]	; (80072a8 <HAL_DMA_IRQHandler+0xc74>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d04a      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a29      	ldr	r2, [pc, #164]	; (80072ac <HAL_DMA_IRQHandler+0xc78>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d045      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a28      	ldr	r2, [pc, #160]	; (80072b0 <HAL_DMA_IRQHandler+0xc7c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d040      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a26      	ldr	r2, [pc, #152]	; (80072b4 <HAL_DMA_IRQHandler+0xc80>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d03b      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a25      	ldr	r2, [pc, #148]	; (80072b8 <HAL_DMA_IRQHandler+0xc84>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d036      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a23      	ldr	r2, [pc, #140]	; (80072bc <HAL_DMA_IRQHandler+0xc88>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d031      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <HAL_DMA_IRQHandler+0xc8c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d02c      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a20      	ldr	r2, [pc, #128]	; (80072c4 <HAL_DMA_IRQHandler+0xc90>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d027      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <HAL_DMA_IRQHandler+0xc94>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d022      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1d      	ldr	r2, [pc, #116]	; (80072cc <HAL_DMA_IRQHandler+0xc98>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d01d      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <HAL_DMA_IRQHandler+0xc9c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d018      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1a      	ldr	r2, [pc, #104]	; (80072d4 <HAL_DMA_IRQHandler+0xca0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d013      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_DMA_IRQHandler+0xca4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00e      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a17      	ldr	r2, [pc, #92]	; (80072dc <HAL_DMA_IRQHandler+0xca8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d009      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <HAL_DMA_IRQHandler+0xcac>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d004      	beq.n	8007296 <HAL_DMA_IRQHandler+0xc62>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a14      	ldr	r2, [pc, #80]	; (80072e4 <HAL_DMA_IRQHandler+0xcb0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d128      	bne.n	80072e8 <HAL_DMA_IRQHandler+0xcb4>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0214 	bic.w	r2, r2, #20
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e027      	b.n	80072f8 <HAL_DMA_IRQHandler+0xcc4>
 80072a8:	40020010 	.word	0x40020010
 80072ac:	40020028 	.word	0x40020028
 80072b0:	40020040 	.word	0x40020040
 80072b4:	40020058 	.word	0x40020058
 80072b8:	40020070 	.word	0x40020070
 80072bc:	40020088 	.word	0x40020088
 80072c0:	400200a0 	.word	0x400200a0
 80072c4:	400200b8 	.word	0x400200b8
 80072c8:	40020410 	.word	0x40020410
 80072cc:	40020428 	.word	0x40020428
 80072d0:	40020440 	.word	0x40020440
 80072d4:	40020458 	.word	0x40020458
 80072d8:	40020470 	.word	0x40020470
 80072dc:	40020488 	.word	0x40020488
 80072e0:	400204a0 	.word	0x400204a0
 80072e4:	400204b8 	.word	0x400204b8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 020a 	bic.w	r2, r2, #10
 80072f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8097 	beq.w	8007440 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800731a:	e091      	b.n	8007440 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2208      	movs	r2, #8
 8007326:	409a      	lsls	r2, r3
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8088 	beq.w	8007442 <HAL_DMA_IRQHandler+0xe0e>
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8082 	beq.w	8007442 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a41      	ldr	r2, [pc, #260]	; (8007448 <HAL_DMA_IRQHandler+0xe14>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d04a      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a3f      	ldr	r2, [pc, #252]	; (800744c <HAL_DMA_IRQHandler+0xe18>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d045      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a3e      	ldr	r2, [pc, #248]	; (8007450 <HAL_DMA_IRQHandler+0xe1c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d040      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a3c      	ldr	r2, [pc, #240]	; (8007454 <HAL_DMA_IRQHandler+0xe20>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d03b      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a3b      	ldr	r2, [pc, #236]	; (8007458 <HAL_DMA_IRQHandler+0xe24>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d036      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a39      	ldr	r2, [pc, #228]	; (800745c <HAL_DMA_IRQHandler+0xe28>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d031      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a38      	ldr	r2, [pc, #224]	; (8007460 <HAL_DMA_IRQHandler+0xe2c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d02c      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a36      	ldr	r2, [pc, #216]	; (8007464 <HAL_DMA_IRQHandler+0xe30>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d027      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a35      	ldr	r2, [pc, #212]	; (8007468 <HAL_DMA_IRQHandler+0xe34>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d022      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a33      	ldr	r2, [pc, #204]	; (800746c <HAL_DMA_IRQHandler+0xe38>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d01d      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a32      	ldr	r2, [pc, #200]	; (8007470 <HAL_DMA_IRQHandler+0xe3c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d018      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a30      	ldr	r2, [pc, #192]	; (8007474 <HAL_DMA_IRQHandler+0xe40>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d013      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a2f      	ldr	r2, [pc, #188]	; (8007478 <HAL_DMA_IRQHandler+0xe44>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00e      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a2d      	ldr	r2, [pc, #180]	; (800747c <HAL_DMA_IRQHandler+0xe48>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d009      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a2c      	ldr	r2, [pc, #176]	; (8007480 <HAL_DMA_IRQHandler+0xe4c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <HAL_DMA_IRQHandler+0xdaa>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a2a      	ldr	r2, [pc, #168]	; (8007484 <HAL_DMA_IRQHandler+0xe50>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d108      	bne.n	80073f0 <HAL_DMA_IRQHandler+0xdbc>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 021c 	bic.w	r2, r2, #28
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e007      	b.n	8007400 <HAL_DMA_IRQHandler+0xdcc>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 020e 	bic.w	r2, r2, #14
 80073fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2201      	movs	r2, #1
 800740a:	409a      	lsls	r2, r3
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d009      	beq.n	8007442 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
 8007436:	e004      	b.n	8007442 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007438:	bf00      	nop
 800743a:	e002      	b.n	8007442 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007440:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007442:	3728      	adds	r7, #40	; 0x28
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40020010 	.word	0x40020010
 800744c:	40020028 	.word	0x40020028
 8007450:	40020040 	.word	0x40020040
 8007454:	40020058 	.word	0x40020058
 8007458:	40020070 	.word	0x40020070
 800745c:	40020088 	.word	0x40020088
 8007460:	400200a0 	.word	0x400200a0
 8007464:	400200b8 	.word	0x400200b8
 8007468:	40020410 	.word	0x40020410
 800746c:	40020428 	.word	0x40020428
 8007470:	40020440 	.word	0x40020440
 8007474:	40020458 	.word	0x40020458
 8007478:	40020470 	.word	0x40020470
 800747c:	40020488 	.word	0x40020488
 8007480:	400204a0 	.word	0x400204a0
 8007484:	400204b8 	.word	0x400204b8

08007488 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a7f      	ldr	r2, [pc, #508]	; (80076a4 <DMA_SetConfig+0x21c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d072      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a7d      	ldr	r2, [pc, #500]	; (80076a8 <DMA_SetConfig+0x220>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d06d      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a7c      	ldr	r2, [pc, #496]	; (80076ac <DMA_SetConfig+0x224>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d068      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a7a      	ldr	r2, [pc, #488]	; (80076b0 <DMA_SetConfig+0x228>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d063      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a79      	ldr	r2, [pc, #484]	; (80076b4 <DMA_SetConfig+0x22c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d05e      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a77      	ldr	r2, [pc, #476]	; (80076b8 <DMA_SetConfig+0x230>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d059      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a76      	ldr	r2, [pc, #472]	; (80076bc <DMA_SetConfig+0x234>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d054      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a74      	ldr	r2, [pc, #464]	; (80076c0 <DMA_SetConfig+0x238>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d04f      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a73      	ldr	r2, [pc, #460]	; (80076c4 <DMA_SetConfig+0x23c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d04a      	beq.n	8007592 <DMA_SetConfig+0x10a>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a71      	ldr	r2, [pc, #452]	; (80076c8 <DMA_SetConfig+0x240>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d045      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a70      	ldr	r2, [pc, #448]	; (80076cc <DMA_SetConfig+0x244>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d040      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a6e      	ldr	r2, [pc, #440]	; (80076d0 <DMA_SetConfig+0x248>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d03b      	beq.n	8007592 <DMA_SetConfig+0x10a>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a6d      	ldr	r2, [pc, #436]	; (80076d4 <DMA_SetConfig+0x24c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d036      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a6b      	ldr	r2, [pc, #428]	; (80076d8 <DMA_SetConfig+0x250>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d031      	beq.n	8007592 <DMA_SetConfig+0x10a>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a6a      	ldr	r2, [pc, #424]	; (80076dc <DMA_SetConfig+0x254>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d02c      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a68      	ldr	r2, [pc, #416]	; (80076e0 <DMA_SetConfig+0x258>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d027      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a67      	ldr	r2, [pc, #412]	; (80076e4 <DMA_SetConfig+0x25c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d022      	beq.n	8007592 <DMA_SetConfig+0x10a>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a65      	ldr	r2, [pc, #404]	; (80076e8 <DMA_SetConfig+0x260>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d01d      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a64      	ldr	r2, [pc, #400]	; (80076ec <DMA_SetConfig+0x264>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d018      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a62      	ldr	r2, [pc, #392]	; (80076f0 <DMA_SetConfig+0x268>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <DMA_SetConfig+0x10a>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a61      	ldr	r2, [pc, #388]	; (80076f4 <DMA_SetConfig+0x26c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00e      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a5f      	ldr	r2, [pc, #380]	; (80076f8 <DMA_SetConfig+0x270>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d009      	beq.n	8007592 <DMA_SetConfig+0x10a>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a5e      	ldr	r2, [pc, #376]	; (80076fc <DMA_SetConfig+0x274>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d004      	beq.n	8007592 <DMA_SetConfig+0x10a>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a5c      	ldr	r2, [pc, #368]	; (8007700 <DMA_SetConfig+0x278>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d101      	bne.n	8007596 <DMA_SetConfig+0x10e>
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <DMA_SetConfig+0x110>
 8007596:	2300      	movs	r3, #0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00d      	beq.n	80075b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a39      	ldr	r2, [pc, #228]	; (80076a4 <DMA_SetConfig+0x21c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d04a      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a38      	ldr	r2, [pc, #224]	; (80076a8 <DMA_SetConfig+0x220>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d045      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a36      	ldr	r2, [pc, #216]	; (80076ac <DMA_SetConfig+0x224>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d040      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a35      	ldr	r2, [pc, #212]	; (80076b0 <DMA_SetConfig+0x228>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d03b      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a33      	ldr	r2, [pc, #204]	; (80076b4 <DMA_SetConfig+0x22c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d036      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a32      	ldr	r2, [pc, #200]	; (80076b8 <DMA_SetConfig+0x230>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d031      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a30      	ldr	r2, [pc, #192]	; (80076bc <DMA_SetConfig+0x234>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d02c      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a2f      	ldr	r2, [pc, #188]	; (80076c0 <DMA_SetConfig+0x238>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d027      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a2d      	ldr	r2, [pc, #180]	; (80076c4 <DMA_SetConfig+0x23c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d022      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2c      	ldr	r2, [pc, #176]	; (80076c8 <DMA_SetConfig+0x240>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d01d      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <DMA_SetConfig+0x244>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d018      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a29      	ldr	r2, [pc, #164]	; (80076d0 <DMA_SetConfig+0x248>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d013      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a27      	ldr	r2, [pc, #156]	; (80076d4 <DMA_SetConfig+0x24c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00e      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a26      	ldr	r2, [pc, #152]	; (80076d8 <DMA_SetConfig+0x250>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d009      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a24      	ldr	r2, [pc, #144]	; (80076dc <DMA_SetConfig+0x254>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d004      	beq.n	8007658 <DMA_SetConfig+0x1d0>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a23      	ldr	r2, [pc, #140]	; (80076e0 <DMA_SetConfig+0x258>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d101      	bne.n	800765c <DMA_SetConfig+0x1d4>
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <DMA_SetConfig+0x1d6>
 800765c:	2300      	movs	r3, #0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d059      	beq.n	8007716 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	223f      	movs	r2, #63	; 0x3f
 800766c:	409a      	lsls	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007680:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d138      	bne.n	8007704 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80076a2:	e086      	b.n	80077b2 <DMA_SetConfig+0x32a>
 80076a4:	40020010 	.word	0x40020010
 80076a8:	40020028 	.word	0x40020028
 80076ac:	40020040 	.word	0x40020040
 80076b0:	40020058 	.word	0x40020058
 80076b4:	40020070 	.word	0x40020070
 80076b8:	40020088 	.word	0x40020088
 80076bc:	400200a0 	.word	0x400200a0
 80076c0:	400200b8 	.word	0x400200b8
 80076c4:	40020410 	.word	0x40020410
 80076c8:	40020428 	.word	0x40020428
 80076cc:	40020440 	.word	0x40020440
 80076d0:	40020458 	.word	0x40020458
 80076d4:	40020470 	.word	0x40020470
 80076d8:	40020488 	.word	0x40020488
 80076dc:	400204a0 	.word	0x400204a0
 80076e0:	400204b8 	.word	0x400204b8
 80076e4:	58025408 	.word	0x58025408
 80076e8:	5802541c 	.word	0x5802541c
 80076ec:	58025430 	.word	0x58025430
 80076f0:	58025444 	.word	0x58025444
 80076f4:	58025458 	.word	0x58025458
 80076f8:	5802546c 	.word	0x5802546c
 80076fc:	58025480 	.word	0x58025480
 8007700:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	60da      	str	r2, [r3, #12]
}
 8007714:	e04d      	b.n	80077b2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a29      	ldr	r2, [pc, #164]	; (80077c0 <DMA_SetConfig+0x338>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d022      	beq.n	8007766 <DMA_SetConfig+0x2de>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a27      	ldr	r2, [pc, #156]	; (80077c4 <DMA_SetConfig+0x33c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d01d      	beq.n	8007766 <DMA_SetConfig+0x2de>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a26      	ldr	r2, [pc, #152]	; (80077c8 <DMA_SetConfig+0x340>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d018      	beq.n	8007766 <DMA_SetConfig+0x2de>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a24      	ldr	r2, [pc, #144]	; (80077cc <DMA_SetConfig+0x344>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <DMA_SetConfig+0x2de>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a23      	ldr	r2, [pc, #140]	; (80077d0 <DMA_SetConfig+0x348>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00e      	beq.n	8007766 <DMA_SetConfig+0x2de>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a21      	ldr	r2, [pc, #132]	; (80077d4 <DMA_SetConfig+0x34c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d009      	beq.n	8007766 <DMA_SetConfig+0x2de>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a20      	ldr	r2, [pc, #128]	; (80077d8 <DMA_SetConfig+0x350>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d004      	beq.n	8007766 <DMA_SetConfig+0x2de>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <DMA_SetConfig+0x354>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d101      	bne.n	800776a <DMA_SetConfig+0x2e2>
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <DMA_SetConfig+0x2e4>
 800776a:	2300      	movs	r3, #0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d020      	beq.n	80077b2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	2201      	movs	r2, #1
 800777a:	409a      	lsls	r2, r3
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b40      	cmp	r3, #64	; 0x40
 800778e:	d108      	bne.n	80077a2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	60da      	str	r2, [r3, #12]
}
 80077a0:	e007      	b.n	80077b2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	60da      	str	r2, [r3, #12]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	58025408 	.word	0x58025408
 80077c4:	5802541c 	.word	0x5802541c
 80077c8:	58025430 	.word	0x58025430
 80077cc:	58025444 	.word	0x58025444
 80077d0:	58025458 	.word	0x58025458
 80077d4:	5802546c 	.word	0x5802546c
 80077d8:	58025480 	.word	0x58025480
 80077dc:	58025494 	.word	0x58025494

080077e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a42      	ldr	r2, [pc, #264]	; (80078f8 <DMA_CalcBaseAndBitshift+0x118>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d04a      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a41      	ldr	r2, [pc, #260]	; (80078fc <DMA_CalcBaseAndBitshift+0x11c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d045      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a3f      	ldr	r2, [pc, #252]	; (8007900 <DMA_CalcBaseAndBitshift+0x120>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d040      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a3e      	ldr	r2, [pc, #248]	; (8007904 <DMA_CalcBaseAndBitshift+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d03b      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a3c      	ldr	r2, [pc, #240]	; (8007908 <DMA_CalcBaseAndBitshift+0x128>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d036      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a3b      	ldr	r2, [pc, #236]	; (800790c <DMA_CalcBaseAndBitshift+0x12c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d031      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a39      	ldr	r2, [pc, #228]	; (8007910 <DMA_CalcBaseAndBitshift+0x130>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d02c      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a38      	ldr	r2, [pc, #224]	; (8007914 <DMA_CalcBaseAndBitshift+0x134>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d027      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a36      	ldr	r2, [pc, #216]	; (8007918 <DMA_CalcBaseAndBitshift+0x138>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d022      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a35      	ldr	r2, [pc, #212]	; (800791c <DMA_CalcBaseAndBitshift+0x13c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d01d      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a33      	ldr	r2, [pc, #204]	; (8007920 <DMA_CalcBaseAndBitshift+0x140>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d018      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a32      	ldr	r2, [pc, #200]	; (8007924 <DMA_CalcBaseAndBitshift+0x144>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d013      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a30      	ldr	r2, [pc, #192]	; (8007928 <DMA_CalcBaseAndBitshift+0x148>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00e      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a2f      	ldr	r2, [pc, #188]	; (800792c <DMA_CalcBaseAndBitshift+0x14c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d009      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a2d      	ldr	r2, [pc, #180]	; (8007930 <DMA_CalcBaseAndBitshift+0x150>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d004      	beq.n	8007888 <DMA_CalcBaseAndBitshift+0xa8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a2c      	ldr	r2, [pc, #176]	; (8007934 <DMA_CalcBaseAndBitshift+0x154>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d101      	bne.n	800788c <DMA_CalcBaseAndBitshift+0xac>
 8007888:	2301      	movs	r3, #1
 800788a:	e000      	b.n	800788e <DMA_CalcBaseAndBitshift+0xae>
 800788c:	2300      	movs	r3, #0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d024      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	3b10      	subs	r3, #16
 800789a:	4a27      	ldr	r2, [pc, #156]	; (8007938 <DMA_CalcBaseAndBitshift+0x158>)
 800789c:	fba2 2303 	umull	r2, r3, r2, r3
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	4a24      	ldr	r2, [pc, #144]	; (800793c <DMA_CalcBaseAndBitshift+0x15c>)
 80078ac:	5cd3      	ldrb	r3, [r2, r3]
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d908      	bls.n	80078cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <DMA_CalcBaseAndBitshift+0x160>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	1d1a      	adds	r2, r3, #4
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	659a      	str	r2, [r3, #88]	; 0x58
 80078ca:	e00d      	b.n	80078e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b1b      	ldr	r3, [pc, #108]	; (8007940 <DMA_CalcBaseAndBitshift+0x160>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6593      	str	r3, [r2, #88]	; 0x58
 80078da:	e005      	b.n	80078e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	40020010 	.word	0x40020010
 80078fc:	40020028 	.word	0x40020028
 8007900:	40020040 	.word	0x40020040
 8007904:	40020058 	.word	0x40020058
 8007908:	40020070 	.word	0x40020070
 800790c:	40020088 	.word	0x40020088
 8007910:	400200a0 	.word	0x400200a0
 8007914:	400200b8 	.word	0x400200b8
 8007918:	40020410 	.word	0x40020410
 800791c:	40020428 	.word	0x40020428
 8007920:	40020440 	.word	0x40020440
 8007924:	40020458 	.word	0x40020458
 8007928:	40020470 	.word	0x40020470
 800792c:	40020488 	.word	0x40020488
 8007930:	400204a0 	.word	0x400204a0
 8007934:	400204b8 	.word	0x400204b8
 8007938:	aaaaaaab 	.word	0xaaaaaaab
 800793c:	08018cdc 	.word	0x08018cdc
 8007940:	fffffc00 	.word	0xfffffc00

08007944 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d120      	bne.n	800799a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	2b03      	cmp	r3, #3
 800795e:	d858      	bhi.n	8007a12 <DMA_CheckFifoParam+0xce>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <DMA_CheckFifoParam+0x24>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007979 	.word	0x08007979
 800796c:	0800798b 	.word	0x0800798b
 8007970:	08007979 	.word	0x08007979
 8007974:	08007a13 	.word	0x08007a13
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d048      	beq.n	8007a16 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007988:	e045      	b.n	8007a16 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007992:	d142      	bne.n	8007a1a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007998:	e03f      	b.n	8007a1a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a2:	d123      	bne.n	80079ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d838      	bhi.n	8007a1e <DMA_CheckFifoParam+0xda>
 80079ac:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <DMA_CheckFifoParam+0x70>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079c5 	.word	0x080079c5
 80079b8:	080079cb 	.word	0x080079cb
 80079bc:	080079c5 	.word	0x080079c5
 80079c0:	080079dd 	.word	0x080079dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	73fb      	strb	r3, [r7, #15]
        break;
 80079c8:	e030      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d025      	beq.n	8007a22 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079da:	e022      	b.n	8007a22 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079e4:	d11f      	bne.n	8007a26 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079ea:	e01c      	b.n	8007a26 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d902      	bls.n	80079fa <DMA_CheckFifoParam+0xb6>
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d003      	beq.n	8007a00 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80079f8:	e018      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	73fb      	strb	r3, [r7, #15]
        break;
 80079fe:	e015      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00e      	beq.n	8007a2a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a10:	e00b      	b.n	8007a2a <DMA_CheckFifoParam+0xe6>
        break;
 8007a12:	bf00      	nop
 8007a14:	e00a      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>
        break;
 8007a16:	bf00      	nop
 8007a18:	e008      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>
        break;
 8007a1a:	bf00      	nop
 8007a1c:	e006      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>
        break;
 8007a1e:	bf00      	nop
 8007a20:	e004      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>
        break;
 8007a22:	bf00      	nop
 8007a24:	e002      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>
        break;
 8007a26:	bf00      	nop
 8007a28:	e000      	b.n	8007a2c <DMA_CheckFifoParam+0xe8>
    break;
 8007a2a:	bf00      	nop
    }
  }

  return status;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop

08007a3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a38      	ldr	r2, [pc, #224]	; (8007b30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d022      	beq.n	8007a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a36      	ldr	r2, [pc, #216]	; (8007b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d01d      	beq.n	8007a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a35      	ldr	r2, [pc, #212]	; (8007b38 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d018      	beq.n	8007a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a33      	ldr	r2, [pc, #204]	; (8007b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d013      	beq.n	8007a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a32      	ldr	r2, [pc, #200]	; (8007b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00e      	beq.n	8007a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a30      	ldr	r2, [pc, #192]	; (8007b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d009      	beq.n	8007a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a2f      	ldr	r2, [pc, #188]	; (8007b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d004      	beq.n	8007a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a2d      	ldr	r2, [pc, #180]	; (8007b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d101      	bne.n	8007a9e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01a      	beq.n	8007ada <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	3b08      	subs	r3, #8
 8007aac:	4a28      	ldr	r2, [pc, #160]	; (8007b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007aae:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab2:	091b      	lsrs	r3, r3, #4
 8007ab4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4b26      	ldr	r3, [pc, #152]	; (8007b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	461a      	mov	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a24      	ldr	r2, [pc, #144]	; (8007b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007ac8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f003 031f 	and.w	r3, r3, #31
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	409a      	lsls	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ad8:	e024      	b.n	8007b24 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	3b10      	subs	r3, #16
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d806      	bhi.n	8007b02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d902      	bls.n	8007b02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3308      	adds	r3, #8
 8007b00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4b18      	ldr	r3, [pc, #96]	; (8007b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a16      	ldr	r2, [pc, #88]	; (8007b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	409a      	lsls	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	58025408 	.word	0x58025408
 8007b34:	5802541c 	.word	0x5802541c
 8007b38:	58025430 	.word	0x58025430
 8007b3c:	58025444 	.word	0x58025444
 8007b40:	58025458 	.word	0x58025458
 8007b44:	5802546c 	.word	0x5802546c
 8007b48:	58025480 	.word	0x58025480
 8007b4c:	58025494 	.word	0x58025494
 8007b50:	cccccccd 	.word	0xcccccccd
 8007b54:	16009600 	.word	0x16009600
 8007b58:	58025880 	.word	0x58025880
 8007b5c:	aaaaaaab 	.word	0xaaaaaaab
 8007b60:	400204b8 	.word	0x400204b8
 8007b64:	4002040f 	.word	0x4002040f
 8007b68:	10008200 	.word	0x10008200
 8007b6c:	40020880 	.word	0x40020880

08007b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d04a      	beq.n	8007c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d847      	bhi.n	8007c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a25      	ldr	r2, [pc, #148]	; (8007c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d022      	beq.n	8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a24      	ldr	r2, [pc, #144]	; (8007c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d01d      	beq.n	8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a22      	ldr	r2, [pc, #136]	; (8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d018      	beq.n	8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a21      	ldr	r2, [pc, #132]	; (8007c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d013      	beq.n	8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1f      	ldr	r2, [pc, #124]	; (8007c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00e      	beq.n	8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1e      	ldr	r2, [pc, #120]	; (8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d009      	beq.n	8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a1c      	ldr	r2, [pc, #112]	; (8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d101      	bne.n	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e000      	b.n	8007be2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007be0:	2300      	movs	r3, #0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4b17      	ldr	r3, [pc, #92]	; (8007c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a15      	ldr	r2, [pc, #84]	; (8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007bf8:	671a      	str	r2, [r3, #112]	; 0x70
 8007bfa:	e009      	b.n	8007c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	461a      	mov	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a11      	ldr	r2, [pc, #68]	; (8007c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	2201      	movs	r2, #1
 8007c16:	409a      	lsls	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	58025408 	.word	0x58025408
 8007c2c:	5802541c 	.word	0x5802541c
 8007c30:	58025430 	.word	0x58025430
 8007c34:	58025444 	.word	0x58025444
 8007c38:	58025458 	.word	0x58025458
 8007c3c:	5802546c 	.word	0x5802546c
 8007c40:	58025480 	.word	0x58025480
 8007c44:	58025494 	.word	0x58025494
 8007c48:	1600963f 	.word	0x1600963f
 8007c4c:	58025940 	.word	0x58025940
 8007c50:	1000823f 	.word	0x1000823f
 8007c54:	40020940 	.word	0x40020940

08007c58 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b098      	sub	sp, #96	; 0x60
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007c60:	4a84      	ldr	r2, [pc, #528]	; (8007e74 <HAL_FDCAN_Init+0x21c>)
 8007c62:	f107 030c 	add.w	r3, r7, #12
 8007c66:	4611      	mov	r1, r2
 8007c68:	224c      	movs	r2, #76	; 0x4c
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f00e f98e 	bl	8015f8c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e1c6      	b.n	8008008 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a7e      	ldr	r2, [pc, #504]	; (8007e78 <HAL_FDCAN_Init+0x220>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d106      	bne.n	8007c92 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7f9 f8cc 	bl	8000e44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0210 	bic.w	r2, r2, #16
 8007cba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cbc:	f7fb fe28 	bl	8003910 <HAL_GetTick>
 8007cc0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007cc2:	e014      	b.n	8007cee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007cc4:	f7fb fe24 	bl	8003910 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b0a      	cmp	r3, #10
 8007cd0:	d90d      	bls.n	8007cee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cd8:	f043 0201 	orr.w	r2, r3, #1
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e18c      	b.n	8008008 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d0e3      	beq.n	8007cc4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 0201 	orr.w	r2, r2, #1
 8007d0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d0c:	f7fb fe00 	bl	8003910 <HAL_GetTick>
 8007d10:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007d12:	e014      	b.n	8007d3e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007d14:	f7fb fdfc 	bl	8003910 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b0a      	cmp	r3, #10
 8007d20:	d90d      	bls.n	8007d3e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d28:	f043 0201 	orr.w	r2, r3, #1
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2203      	movs	r2, #3
 8007d36:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e164      	b.n	8008008 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0e3      	beq.n	8007d14 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699a      	ldr	r2, [r3, #24]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0202 	orr.w	r2, r2, #2
 8007d5a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7c1b      	ldrb	r3, [r3, #16]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d108      	bne.n	8007d76 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d72:	619a      	str	r2, [r3, #24]
 8007d74:	e007      	b.n	8007d86 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699a      	ldr	r2, [r3, #24]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d84:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	7c5b      	ldrb	r3, [r3, #17]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d108      	bne.n	8007da0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699a      	ldr	r2, [r3, #24]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d9c:	619a      	str	r2, [r3, #24]
 8007d9e:	e007      	b.n	8007db0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007dae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7c9b      	ldrb	r3, [r3, #18]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d108      	bne.n	8007dca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dc6:	619a      	str	r2, [r3, #24]
 8007dc8:	e007      	b.n	8007dda <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	699a      	ldr	r2, [r3, #24]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dd8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007dfe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691a      	ldr	r2, [r3, #16]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0210 	bic.w	r2, r2, #16
 8007e0e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d108      	bne.n	8007e2a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0204 	orr.w	r2, r2, #4
 8007e26:	619a      	str	r2, [r3, #24]
 8007e28:	e030      	b.n	8007e8c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d02c      	beq.n	8007e8c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d020      	beq.n	8007e7c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e48:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0210 	orr.w	r2, r2, #16
 8007e58:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d114      	bne.n	8007e8c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 0220 	orr.w	r2, r2, #32
 8007e70:	619a      	str	r2, [r3, #24]
 8007e72:	e00b      	b.n	8007e8c <HAL_FDCAN_Init+0x234>
 8007e74:	08018bf8 	.word	0x08018bf8
 8007e78:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0220 	orr.w	r2, r2, #32
 8007e8a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007e9c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007ea4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007eb4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007eb6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec0:	d115      	bne.n	8007eee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007ed0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007eda:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007eea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007eec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f14:	4413      	add	r3, r2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d011      	beq.n	8007f3e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007f22:	f023 0107 	bic.w	r1, r3, #7
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	3360      	adds	r3, #96	; 0x60
 8007f2e:	443b      	add	r3, r7
 8007f30:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d011      	beq.n	8007f6a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007f4e:	f023 0107 	bic.w	r1, r3, #7
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	3360      	adds	r3, #96	; 0x60
 8007f5a:	443b      	add	r3, r7
 8007f5c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d012      	beq.n	8007f98 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007f7a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	3360      	adds	r3, #96	; 0x60
 8007f86:	443b      	add	r3, r7
 8007f88:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007f8c:	011a      	lsls	r2, r3, #4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d012      	beq.n	8007fc6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fa8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	3360      	adds	r3, #96	; 0x60
 8007fb4:	443b      	add	r3, r7
 8007fb6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007fba:	021a      	lsls	r2, r3, #8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a11      	ldr	r2, [pc, #68]	; (8008010 <HAL_FDCAN_Init+0x3b8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d107      	bne.n	8007fe0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f022 0203 	bic.w	r2, r2, #3
 8007fde:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f80b 	bl	8008014 <FDCAN_CalcultateRamBlockAddresses>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008004:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008008:	4618      	mov	r0, r3
 800800a:	3760      	adds	r7, #96	; 0x60
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	4000a000 	.word	0x4000a000

08008014 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800802a:	4ba7      	ldr	r3, [pc, #668]	; (80082c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800802c:	4013      	ands	r3, r2
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	0091      	lsls	r1, r2, #2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6812      	ldr	r2, [r2, #0]
 8008036:	430b      	orrs	r3, r1
 8008038:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008044:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804c:	041a      	lsls	r2, r3, #16
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	4413      	add	r3, r2
 8008060:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800806a:	4b97      	ldr	r3, [pc, #604]	; (80082c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800806c:	4013      	ands	r3, r2
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	0091      	lsls	r1, r2, #2
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6812      	ldr	r2, [r2, #0]
 8008076:	430b      	orrs	r3, r1
 8008078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008084:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808c:	041a      	lsls	r2, r3, #16
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	4413      	add	r3, r2
 80080a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80080ac:	4b86      	ldr	r3, [pc, #536]	; (80082c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080ae:	4013      	ands	r3, r2
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	0091      	lsls	r1, r2, #2
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	430b      	orrs	r3, r1
 80080ba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080c6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	041a      	lsls	r2, r3, #16
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	4413      	add	r3, r2
 80080ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80080f4:	4b74      	ldr	r3, [pc, #464]	; (80082c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	0091      	lsls	r1, r2, #2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	430b      	orrs	r3, r1
 8008102:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800810e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008116:	041a      	lsls	r2, r3, #16
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800812a:	fb02 f303 	mul.w	r3, r2, r3
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	4413      	add	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800813c:	4b62      	ldr	r3, [pc, #392]	; (80082c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800813e:	4013      	ands	r3, r2
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	0091      	lsls	r1, r2, #2
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	430b      	orrs	r3, r1
 800814a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008156:	fb02 f303 	mul.w	r3, r2, r3
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008168:	4b57      	ldr	r3, [pc, #348]	; (80082c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800816a:	4013      	ands	r3, r2
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	0091      	lsls	r1, r2, #2
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6812      	ldr	r2, [r2, #0]
 8008174:	430b      	orrs	r3, r1
 8008176:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008182:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818a:	041a      	lsls	r2, r3, #16
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	4413      	add	r3, r2
 80081a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80081aa:	4b47      	ldr	r3, [pc, #284]	; (80082c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	0091      	lsls	r1, r2, #2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	430b      	orrs	r3, r1
 80081b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80081c4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081cc:	041a      	lsls	r2, r3, #16
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80081e0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e8:	061a      	lsls	r2, r3, #24
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f8:	4b34      	ldr	r3, [pc, #208]	; (80082cc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80081fa:	4413      	add	r3, r2
 80081fc:	009a      	lsls	r2, r3, #2
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	441a      	add	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	441a      	add	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800822e:	fb01 f303 	mul.w	r3, r1, r3
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	441a      	add	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008246:	fb01 f303 	mul.w	r3, r1, r3
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	441a      	add	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800825e:	fb01 f303 	mul.w	r3, r1, r3
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	441a      	add	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	441a      	add	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	441a      	add	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80082aa:	fb01 f303 	mul.w	r3, r1, r3
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	441a      	add	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082be:	4a04      	ldr	r2, [pc, #16]	; (80082d0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d915      	bls.n	80082f0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80082c4:	e006      	b.n	80082d4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80082c6:	bf00      	nop
 80082c8:	ffff0003 	.word	0xffff0003
 80082cc:	10002b00 	.word	0x10002b00
 80082d0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082da:	f043 0220 	orr.w	r2, r3, #32
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2203      	movs	r2, #3
 80082e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e010      	b.n	8008312 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	e005      	b.n	8008304 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3304      	adds	r3, #4
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	429a      	cmp	r2, r3
 800830e:	d3f3      	bcc.n	80082f8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop

08008320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008320:	b480      	push	{r7}
 8008322:	b089      	sub	sp, #36	; 0x24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800832a:	2300      	movs	r3, #0
 800832c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800832e:	4b89      	ldr	r3, [pc, #548]	; (8008554 <HAL_GPIO_Init+0x234>)
 8008330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008332:	e194      	b.n	800865e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	2101      	movs	r1, #1
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	fa01 f303 	lsl.w	r3, r1, r3
 8008340:	4013      	ands	r3, r2
 8008342:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 8186 	beq.w	8008658 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	2b01      	cmp	r3, #1
 8008356:	d005      	beq.n	8008364 <HAL_GPIO_Init+0x44>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d130      	bne.n	80083c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	2203      	movs	r2, #3
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	43db      	mvns	r3, r3
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4013      	ands	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	4313      	orrs	r3, r2
 800838c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800839a:	2201      	movs	r2, #1
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	fa02 f303 	lsl.w	r3, r2, r3
 80083a2:	43db      	mvns	r3, r3
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	4013      	ands	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	091b      	lsrs	r3, r3, #4
 80083b0:	f003 0201 	and.w	r2, r3, #1
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	4313      	orrs	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d017      	beq.n	8008402 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	2203      	movs	r2, #3
 80083de:	fa02 f303 	lsl.w	r3, r2, r3
 80083e2:	43db      	mvns	r3, r3
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	4013      	ands	r3, r2
 80083e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	fa02 f303 	lsl.w	r3, r2, r3
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f003 0303 	and.w	r3, r3, #3
 800840a:	2b02      	cmp	r3, #2
 800840c:	d123      	bne.n	8008456 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	08da      	lsrs	r2, r3, #3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3208      	adds	r2, #8
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	220f      	movs	r2, #15
 8008426:	fa02 f303 	lsl.w	r3, r2, r3
 800842a:	43db      	mvns	r3, r3
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	4013      	ands	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	691a      	ldr	r2, [r3, #16]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	fa02 f303 	lsl.w	r3, r2, r3
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	4313      	orrs	r3, r2
 8008446:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	08da      	lsrs	r2, r3, #3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3208      	adds	r2, #8
 8008450:	69b9      	ldr	r1, [r7, #24]
 8008452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	2203      	movs	r2, #3
 8008462:	fa02 f303 	lsl.w	r3, r2, r3
 8008466:	43db      	mvns	r3, r3
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	4013      	ands	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f003 0203 	and.w	r2, r3, #3
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	4313      	orrs	r3, r2
 8008482:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 80e0 	beq.w	8008658 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008498:	4b2f      	ldr	r3, [pc, #188]	; (8008558 <HAL_GPIO_Init+0x238>)
 800849a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800849e:	4a2e      	ldr	r2, [pc, #184]	; (8008558 <HAL_GPIO_Init+0x238>)
 80084a0:	f043 0302 	orr.w	r3, r3, #2
 80084a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80084a8:	4b2b      	ldr	r3, [pc, #172]	; (8008558 <HAL_GPIO_Init+0x238>)
 80084aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084b6:	4a29      	ldr	r2, [pc, #164]	; (800855c <HAL_GPIO_Init+0x23c>)
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	089b      	lsrs	r3, r3, #2
 80084bc:	3302      	adds	r3, #2
 80084be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	f003 0303 	and.w	r3, r3, #3
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	220f      	movs	r2, #15
 80084ce:	fa02 f303 	lsl.w	r3, r2, r3
 80084d2:	43db      	mvns	r3, r3
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	4013      	ands	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a20      	ldr	r2, [pc, #128]	; (8008560 <HAL_GPIO_Init+0x240>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d052      	beq.n	8008588 <HAL_GPIO_Init+0x268>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1f      	ldr	r2, [pc, #124]	; (8008564 <HAL_GPIO_Init+0x244>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d031      	beq.n	800854e <HAL_GPIO_Init+0x22e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <HAL_GPIO_Init+0x248>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d02b      	beq.n	800854a <HAL_GPIO_Init+0x22a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1d      	ldr	r2, [pc, #116]	; (800856c <HAL_GPIO_Init+0x24c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d025      	beq.n	8008546 <HAL_GPIO_Init+0x226>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a1c      	ldr	r2, [pc, #112]	; (8008570 <HAL_GPIO_Init+0x250>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01f      	beq.n	8008542 <HAL_GPIO_Init+0x222>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a1b      	ldr	r2, [pc, #108]	; (8008574 <HAL_GPIO_Init+0x254>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d019      	beq.n	800853e <HAL_GPIO_Init+0x21e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a1a      	ldr	r2, [pc, #104]	; (8008578 <HAL_GPIO_Init+0x258>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <HAL_GPIO_Init+0x21a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a19      	ldr	r2, [pc, #100]	; (800857c <HAL_GPIO_Init+0x25c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00d      	beq.n	8008536 <HAL_GPIO_Init+0x216>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a18      	ldr	r2, [pc, #96]	; (8008580 <HAL_GPIO_Init+0x260>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d007      	beq.n	8008532 <HAL_GPIO_Init+0x212>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a17      	ldr	r2, [pc, #92]	; (8008584 <HAL_GPIO_Init+0x264>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d101      	bne.n	800852e <HAL_GPIO_Init+0x20e>
 800852a:	2309      	movs	r3, #9
 800852c:	e02d      	b.n	800858a <HAL_GPIO_Init+0x26a>
 800852e:	230a      	movs	r3, #10
 8008530:	e02b      	b.n	800858a <HAL_GPIO_Init+0x26a>
 8008532:	2308      	movs	r3, #8
 8008534:	e029      	b.n	800858a <HAL_GPIO_Init+0x26a>
 8008536:	2307      	movs	r3, #7
 8008538:	e027      	b.n	800858a <HAL_GPIO_Init+0x26a>
 800853a:	2306      	movs	r3, #6
 800853c:	e025      	b.n	800858a <HAL_GPIO_Init+0x26a>
 800853e:	2305      	movs	r3, #5
 8008540:	e023      	b.n	800858a <HAL_GPIO_Init+0x26a>
 8008542:	2304      	movs	r3, #4
 8008544:	e021      	b.n	800858a <HAL_GPIO_Init+0x26a>
 8008546:	2303      	movs	r3, #3
 8008548:	e01f      	b.n	800858a <HAL_GPIO_Init+0x26a>
 800854a:	2302      	movs	r3, #2
 800854c:	e01d      	b.n	800858a <HAL_GPIO_Init+0x26a>
 800854e:	2301      	movs	r3, #1
 8008550:	e01b      	b.n	800858a <HAL_GPIO_Init+0x26a>
 8008552:	bf00      	nop
 8008554:	58000080 	.word	0x58000080
 8008558:	58024400 	.word	0x58024400
 800855c:	58000400 	.word	0x58000400
 8008560:	58020000 	.word	0x58020000
 8008564:	58020400 	.word	0x58020400
 8008568:	58020800 	.word	0x58020800
 800856c:	58020c00 	.word	0x58020c00
 8008570:	58021000 	.word	0x58021000
 8008574:	58021400 	.word	0x58021400
 8008578:	58021800 	.word	0x58021800
 800857c:	58021c00 	.word	0x58021c00
 8008580:	58022000 	.word	0x58022000
 8008584:	58022400 	.word	0x58022400
 8008588:	2300      	movs	r3, #0
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	f002 0203 	and.w	r2, r2, #3
 8008590:	0092      	lsls	r2, r2, #2
 8008592:	4093      	lsls	r3, r2
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	4313      	orrs	r3, r2
 8008598:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800859a:	4938      	ldr	r1, [pc, #224]	; (800867c <HAL_GPIO_Init+0x35c>)
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	089b      	lsrs	r3, r3, #2
 80085a0:	3302      	adds	r3, #2
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	43db      	mvns	r3, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4013      	ands	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80085ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80085d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	43db      	mvns	r3, r3
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	4013      	ands	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80085fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	43db      	mvns	r3, r3
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	4013      	ands	r3, r2
 8008612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	4313      	orrs	r3, r2
 8008626:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	43db      	mvns	r3, r3
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	4013      	ands	r3, r2
 800863c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800864a:	69ba      	ldr	r2, [r7, #24]
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	3301      	adds	r3, #1
 800865c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	fa22 f303 	lsr.w	r3, r2, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	f47f ae63 	bne.w	8008334 <HAL_GPIO_Init+0x14>
  }
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	3724      	adds	r7, #36	; 0x24
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	58000400 	.word	0x58000400

08008680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	807b      	strh	r3, [r7, #2]
 800868c:	4613      	mov	r3, r2
 800868e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008690:	787b      	ldrb	r3, [r7, #1]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008696:	887a      	ldrh	r2, [r7, #2]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800869c:	e003      	b.n	80086a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800869e:	887b      	ldrh	r3, [r7, #2]
 80086a0:	041a      	lsls	r2, r3, #16
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	619a      	str	r2, [r3, #24]
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
	...

080086b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e07f      	b.n	80087c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7f8 fe52 	bl	8001384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2224      	movs	r2, #36	; 0x24
 80086e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0201 	bic.w	r2, r2, #1
 80086f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d107      	bne.n	800872e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	e006      	b.n	800873c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800873a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d104      	bne.n	800874e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800874c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6859      	ldr	r1, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4b1d      	ldr	r3, [pc, #116]	; (80087d0 <HAL_I2C_Init+0x11c>)
 800875a:	430b      	orrs	r3, r1
 800875c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800876c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691a      	ldr	r2, [r3, #16]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	69d9      	ldr	r1, [r3, #28]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a1a      	ldr	r2, [r3, #32]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	02008000 	.word	0x02008000

080087d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d138      	bne.n	800885c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e032      	b.n	800885e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2224      	movs	r2, #36	; 0x24
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0201 	bic.w	r2, r2, #1
 8008816:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6819      	ldr	r1, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0201 	orr.w	r2, r2, #1
 8008846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	e000      	b.n	800885e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800885c:	2302      	movs	r3, #2
  }
}
 800885e:	4618      	mov	r0, r3
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b20      	cmp	r3, #32
 800887e:	d139      	bne.n	80088f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800888a:	2302      	movs	r3, #2
 800888c:	e033      	b.n	80088f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2224      	movs	r2, #36	; 0x24
 800889a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0201 	bic.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80088bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	021b      	lsls	r3, r3, #8
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0201 	orr.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	e000      	b.n	80088f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80088f4:	2302      	movs	r3, #2
  }
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
	...

08008904 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800890c:	4b19      	ldr	r3, [pc, #100]	; (8008974 <HAL_PWREx_ConfigSupply+0x70>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b04      	cmp	r3, #4
 8008916:	d00a      	beq.n	800892e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008918:	4b16      	ldr	r3, [pc, #88]	; (8008974 <HAL_PWREx_ConfigSupply+0x70>)
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d001      	beq.n	800892a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e01f      	b.n	800896a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	e01d      	b.n	800896a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800892e:	4b11      	ldr	r3, [pc, #68]	; (8008974 <HAL_PWREx_ConfigSupply+0x70>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f023 0207 	bic.w	r2, r3, #7
 8008936:	490f      	ldr	r1, [pc, #60]	; (8008974 <HAL_PWREx_ConfigSupply+0x70>)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4313      	orrs	r3, r2
 800893c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800893e:	f7fa ffe7 	bl	8003910 <HAL_GetTick>
 8008942:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008944:	e009      	b.n	800895a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008946:	f7fa ffe3 	bl	8003910 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008954:	d901      	bls.n	800895a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e007      	b.n	800896a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <HAL_PWREx_ConfigSupply+0x70>)
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008966:	d1ee      	bne.n	8008946 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	58024800 	.word	0x58024800

08008978 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af02      	add	r7, sp, #8
 800897e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008980:	f7fa ffc6 	bl	8003910 <HAL_GetTick>
 8008984:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e05f      	b.n	8008a50 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d107      	bne.n	80089ac <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7f9 fa31 	bl	8001e04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80089a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f85a 	bl	8008a60 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	021a      	lsls	r2, r3, #8
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	2120      	movs	r1, #32
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f852 	bl	8008a7c <QSPI_WaitFlagStateUntilTimeout>
 80089d8:	4603      	mov	r3, r0
 80089da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d135      	bne.n	8008a4e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <HAL_QSPI_Init+0xe0>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6852      	ldr	r2, [r2, #4]
 80089f0:	0611      	lsls	r1, r2, #24
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68d2      	ldr	r2, [r2, #12]
 80089f6:	4311      	orrs	r1, r2
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	69d2      	ldr	r2, [r2, #28]
 80089fc:	4311      	orrs	r1, r2
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	6a12      	ldr	r2, [r2, #32]
 8008a02:	4311      	orrs	r1, r2
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <HAL_QSPI_Init+0xe4>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6912      	ldr	r2, [r2, #16]
 8008a1a:	0411      	lsls	r1, r2, #16
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6952      	ldr	r2, [r2, #20]
 8008a20:	4311      	orrs	r1, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6992      	ldr	r2, [r2, #24]
 8008a26:	4311      	orrs	r1, r2
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6812      	ldr	r2, [r2, #0]
 8008a2c:	430b      	orrs	r3, r1
 8008a2e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0201 	orr.w	r2, r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	00ffff2f 	.word	0x00ffff2f
 8008a5c:	ffe0f8fe 	.word	0xffe0f8fe

08008a60 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a8c:	e01a      	b.n	8008ac4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a94:	d016      	beq.n	8008ac4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a96:	f7fa ff3b 	bl	8003910 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d302      	bcc.n	8008aac <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10b      	bne.n	8008ac4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2204      	movs	r2, #4
 8008ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab8:	f043 0201 	orr.w	r2, r3, #1
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e00e      	b.n	8008ae2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	4013      	ands	r3, r2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bf14      	ite	ne
 8008ad2:	2301      	movne	r3, #1
 8008ad4:	2300      	moveq	r3, #0
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	461a      	mov	r2, r3
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d1d6      	bne.n	8008a8e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08c      	sub	sp, #48	; 0x30
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	f000 bc1d 	b.w	800933a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 8087 	beq.w	8008c1c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b0e:	4b99      	ldr	r3, [pc, #612]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b18:	4b96      	ldr	r3, [pc, #600]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d007      	beq.n	8008b34 <HAL_RCC_OscConfig+0x48>
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	2b18      	cmp	r3, #24
 8008b28:	d110      	bne.n	8008b4c <HAL_RCC_OscConfig+0x60>
 8008b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d10b      	bne.n	8008b4c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b34:	4b8f      	ldr	r3, [pc, #572]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d06c      	beq.n	8008c1a <HAL_RCC_OscConfig+0x12e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d168      	bne.n	8008c1a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e3f6      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b54:	d106      	bne.n	8008b64 <HAL_RCC_OscConfig+0x78>
 8008b56:	4b87      	ldr	r3, [pc, #540]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a86      	ldr	r2, [pc, #536]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	e02e      	b.n	8008bc2 <HAL_RCC_OscConfig+0xd6>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10c      	bne.n	8008b86 <HAL_RCC_OscConfig+0x9a>
 8008b6c:	4b81      	ldr	r3, [pc, #516]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a80      	ldr	r2, [pc, #512]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	4b7e      	ldr	r3, [pc, #504]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a7d      	ldr	r2, [pc, #500]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	e01d      	b.n	8008bc2 <HAL_RCC_OscConfig+0xd6>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b8e:	d10c      	bne.n	8008baa <HAL_RCC_OscConfig+0xbe>
 8008b90:	4b78      	ldr	r3, [pc, #480]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a77      	ldr	r2, [pc, #476]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	4b75      	ldr	r3, [pc, #468]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a74      	ldr	r2, [pc, #464]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	e00b      	b.n	8008bc2 <HAL_RCC_OscConfig+0xd6>
 8008baa:	4b72      	ldr	r3, [pc, #456]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a71      	ldr	r2, [pc, #452]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	4b6f      	ldr	r3, [pc, #444]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a6e      	ldr	r2, [pc, #440]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d013      	beq.n	8008bf2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bca:	f7fa fea1 	bl	8003910 <HAL_GetTick>
 8008bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bd0:	e008      	b.n	8008be4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bd2:	f7fa fe9d 	bl	8003910 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	2b64      	cmp	r3, #100	; 0x64
 8008bde:	d901      	bls.n	8008be4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e3aa      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008be4:	4b63      	ldr	r3, [pc, #396]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0f0      	beq.n	8008bd2 <HAL_RCC_OscConfig+0xe6>
 8008bf0:	e014      	b.n	8008c1c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf2:	f7fa fe8d 	bl	8003910 <HAL_GetTick>
 8008bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bf8:	e008      	b.n	8008c0c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bfa:	f7fa fe89 	bl	8003910 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b64      	cmp	r3, #100	; 0x64
 8008c06:	d901      	bls.n	8008c0c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e396      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c0c:	4b59      	ldr	r3, [pc, #356]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f0      	bne.n	8008bfa <HAL_RCC_OscConfig+0x10e>
 8008c18:	e000      	b.n	8008c1c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80cb 	beq.w	8008dc0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c2a:	4b52      	ldr	r3, [pc, #328]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c32:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c34:	4b4f      	ldr	r3, [pc, #316]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c38:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d007      	beq.n	8008c50 <HAL_RCC_OscConfig+0x164>
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	2b18      	cmp	r3, #24
 8008c44:	d156      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x208>
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d151      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c50:	4b48      	ldr	r3, [pc, #288]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <HAL_RCC_OscConfig+0x17c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e368      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c68:	4b42      	ldr	r3, [pc, #264]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f023 0219 	bic.w	r2, r3, #25
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	493f      	ldr	r1, [pc, #252]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c7a:	f7fa fe49 	bl	8003910 <HAL_GetTick>
 8008c7e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c80:	e008      	b.n	8008c94 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c82:	f7fa fe45 	bl	8003910 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d901      	bls.n	8008c94 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e352      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c94:	4b37      	ldr	r3, [pc, #220]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d0f0      	beq.n	8008c82 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ca0:	f7fa fe66 	bl	8003970 <HAL_GetREVID>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d817      	bhi.n	8008cde <HAL_RCC_OscConfig+0x1f2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b40      	cmp	r3, #64	; 0x40
 8008cb4:	d108      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x1dc>
 8008cb6:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008cbe:	4a2d      	ldr	r2, [pc, #180]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cc4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cc6:	e07b      	b.n	8008dc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cc8:	4b2a      	ldr	r3, [pc, #168]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	031b      	lsls	r3, r3, #12
 8008cd6:	4927      	ldr	r1, [pc, #156]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cdc:	e070      	b.n	8008dc0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cde:	4b25      	ldr	r3, [pc, #148]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	061b      	lsls	r3, r3, #24
 8008cec:	4921      	ldr	r1, [pc, #132]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cf2:	e065      	b.n	8008dc0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d048      	beq.n	8008d8e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cfc:	4b1d      	ldr	r3, [pc, #116]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f023 0219 	bic.w	r2, r3, #25
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	491a      	ldr	r1, [pc, #104]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0e:	f7fa fdff 	bl	8003910 <HAL_GetTick>
 8008d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d14:	e008      	b.n	8008d28 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d16:	f7fa fdfb 	bl	8003910 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d901      	bls.n	8008d28 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e308      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d28:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0f0      	beq.n	8008d16 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d34:	f7fa fe1c 	bl	8003970 <HAL_GetREVID>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d81a      	bhi.n	8008d78 <HAL_RCC_OscConfig+0x28c>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b40      	cmp	r3, #64	; 0x40
 8008d48:	d108      	bne.n	8008d5c <HAL_RCC_OscConfig+0x270>
 8008d4a:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d52:	4a08      	ldr	r2, [pc, #32]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d58:	6053      	str	r3, [r2, #4]
 8008d5a:	e031      	b.n	8008dc0 <HAL_RCC_OscConfig+0x2d4>
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	031b      	lsls	r3, r3, #12
 8008d6a:	4902      	ldr	r1, [pc, #8]	; (8008d74 <HAL_RCC_OscConfig+0x288>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	604b      	str	r3, [r1, #4]
 8008d70:	e026      	b.n	8008dc0 <HAL_RCC_OscConfig+0x2d4>
 8008d72:	bf00      	nop
 8008d74:	58024400 	.word	0x58024400
 8008d78:	4b9a      	ldr	r3, [pc, #616]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	061b      	lsls	r3, r3, #24
 8008d86:	4997      	ldr	r1, [pc, #604]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	604b      	str	r3, [r1, #4]
 8008d8c:	e018      	b.n	8008dc0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d8e:	4b95      	ldr	r3, [pc, #596]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a94      	ldr	r2, [pc, #592]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9a:	f7fa fdb9 	bl	8003910 <HAL_GetTick>
 8008d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008da0:	e008      	b.n	8008db4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008da2:	f7fa fdb5 	bl	8003910 <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d901      	bls.n	8008db4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e2c2      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008db4:	4b8b      	ldr	r3, [pc, #556]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1f0      	bne.n	8008da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 80a9 	beq.w	8008f20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dce:	4b85      	ldr	r3, [pc, #532]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dd8:	4b82      	ldr	r3, [pc, #520]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ddc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d007      	beq.n	8008df4 <HAL_RCC_OscConfig+0x308>
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	2b18      	cmp	r3, #24
 8008de8:	d13a      	bne.n	8008e60 <HAL_RCC_OscConfig+0x374>
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d135      	bne.n	8008e60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008df4:	4b7b      	ldr	r3, [pc, #492]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <HAL_RCC_OscConfig+0x320>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	2b80      	cmp	r3, #128	; 0x80
 8008e06:	d001      	beq.n	8008e0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e296      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e0c:	f7fa fdb0 	bl	8003970 <HAL_GetREVID>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d817      	bhi.n	8008e4a <HAL_RCC_OscConfig+0x35e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	d108      	bne.n	8008e34 <HAL_RCC_OscConfig+0x348>
 8008e22:	4b70      	ldr	r3, [pc, #448]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008e2a:	4a6e      	ldr	r2, [pc, #440]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e32:	e075      	b.n	8008f20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e34:	4b6b      	ldr	r3, [pc, #428]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a1b      	ldr	r3, [r3, #32]
 8008e40:	069b      	lsls	r3, r3, #26
 8008e42:	4968      	ldr	r1, [pc, #416]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e48:	e06a      	b.n	8008f20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e4a:	4b66      	ldr	r3, [pc, #408]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	061b      	lsls	r3, r3, #24
 8008e58:	4962      	ldr	r1, [pc, #392]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e5e:	e05f      	b.n	8008f20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d042      	beq.n	8008eee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e68:	4b5e      	ldr	r3, [pc, #376]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a5d      	ldr	r2, [pc, #372]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e74:	f7fa fd4c 	bl	8003910 <HAL_GetTick>
 8008e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008e7c:	f7fa fd48 	bl	8003910 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e255      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e8e:	4b55      	ldr	r3, [pc, #340]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f0      	beq.n	8008e7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e9a:	f7fa fd69 	bl	8003970 <HAL_GetREVID>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d817      	bhi.n	8008ed8 <HAL_RCC_OscConfig+0x3ec>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d108      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x3d6>
 8008eb0:	4b4c      	ldr	r3, [pc, #304]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008eb8:	4a4a      	ldr	r2, [pc, #296]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008eba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ebe:	6053      	str	r3, [r2, #4]
 8008ec0:	e02e      	b.n	8008f20 <HAL_RCC_OscConfig+0x434>
 8008ec2:	4b48      	ldr	r3, [pc, #288]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	069b      	lsls	r3, r3, #26
 8008ed0:	4944      	ldr	r1, [pc, #272]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	604b      	str	r3, [r1, #4]
 8008ed6:	e023      	b.n	8008f20 <HAL_RCC_OscConfig+0x434>
 8008ed8:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a1b      	ldr	r3, [r3, #32]
 8008ee4:	061b      	lsls	r3, r3, #24
 8008ee6:	493f      	ldr	r1, [pc, #252]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60cb      	str	r3, [r1, #12]
 8008eec:	e018      	b.n	8008f20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008eee:	4b3d      	ldr	r3, [pc, #244]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a3c      	ldr	r2, [pc, #240]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008efa:	f7fa fd09 	bl	8003910 <HAL_GetTick>
 8008efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f00:	e008      	b.n	8008f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008f02:	f7fa fd05 	bl	8003910 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d901      	bls.n	8008f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e212      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f14:	4b33      	ldr	r3, [pc, #204]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1f0      	bne.n	8008f02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d036      	beq.n	8008f9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d019      	beq.n	8008f68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f34:	4b2b      	ldr	r3, [pc, #172]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f38:	4a2a      	ldr	r2, [pc, #168]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008f3a:	f043 0301 	orr.w	r3, r3, #1
 8008f3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f40:	f7fa fce6 	bl	8003910 <HAL_GetTick>
 8008f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f48:	f7fa fce2 	bl	8003910 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e1ef      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f5a:	4b22      	ldr	r3, [pc, #136]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0f0      	beq.n	8008f48 <HAL_RCC_OscConfig+0x45c>
 8008f66:	e018      	b.n	8008f9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f68:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f6c:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008f6e:	f023 0301 	bic.w	r3, r3, #1
 8008f72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f74:	f7fa fccc 	bl	8003910 <HAL_GetTick>
 8008f78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f7a:	e008      	b.n	8008f8e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f7c:	f7fa fcc8 	bl	8003910 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e1d5      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f8e:	4b15      	ldr	r3, [pc, #84]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f0      	bne.n	8008f7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0320 	and.w	r3, r3, #32
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d039      	beq.n	800901a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01c      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fae:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a0c      	ldr	r2, [pc, #48]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fba:	f7fa fca9 	bl	8003910 <HAL_GetTick>
 8008fbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fc0:	e008      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008fc2:	f7fa fca5 	bl	8003910 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d901      	bls.n	8008fd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e1b2      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fd4:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <HAL_RCC_OscConfig+0x4f8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0f0      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x4d6>
 8008fe0:	e01b      	b.n	800901a <HAL_RCC_OscConfig+0x52e>
 8008fe2:	bf00      	nop
 8008fe4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fe8:	4b9b      	ldr	r3, [pc, #620]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a9a      	ldr	r2, [pc, #616]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8008fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ff2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ff4:	f7fa fc8c 	bl	8003910 <HAL_GetTick>
 8008ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ffc:	f7fa fc88 	bl	8003910 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e195      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800900e:	4b92      	ldr	r3, [pc, #584]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f0      	bne.n	8008ffc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8081 	beq.w	800912a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009028:	4b8c      	ldr	r3, [pc, #560]	; (800925c <HAL_RCC_OscConfig+0x770>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a8b      	ldr	r2, [pc, #556]	; (800925c <HAL_RCC_OscConfig+0x770>)
 800902e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009034:	f7fa fc6c 	bl	8003910 <HAL_GetTick>
 8009038:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800903c:	f7fa fc68 	bl	8003910 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b64      	cmp	r3, #100	; 0x64
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e175      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800904e:	4b83      	ldr	r3, [pc, #524]	; (800925c <HAL_RCC_OscConfig+0x770>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0f0      	beq.n	800903c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d106      	bne.n	8009070 <HAL_RCC_OscConfig+0x584>
 8009062:	4b7d      	ldr	r3, [pc, #500]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009066:	4a7c      	ldr	r2, [pc, #496]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009068:	f043 0301 	orr.w	r3, r3, #1
 800906c:	6713      	str	r3, [r2, #112]	; 0x70
 800906e:	e02d      	b.n	80090cc <HAL_RCC_OscConfig+0x5e0>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10c      	bne.n	8009092 <HAL_RCC_OscConfig+0x5a6>
 8009078:	4b77      	ldr	r3, [pc, #476]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	4a76      	ldr	r2, [pc, #472]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 800907e:	f023 0301 	bic.w	r3, r3, #1
 8009082:	6713      	str	r3, [r2, #112]	; 0x70
 8009084:	4b74      	ldr	r3, [pc, #464]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009088:	4a73      	ldr	r2, [pc, #460]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 800908a:	f023 0304 	bic.w	r3, r3, #4
 800908e:	6713      	str	r3, [r2, #112]	; 0x70
 8009090:	e01c      	b.n	80090cc <HAL_RCC_OscConfig+0x5e0>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	2b05      	cmp	r3, #5
 8009098:	d10c      	bne.n	80090b4 <HAL_RCC_OscConfig+0x5c8>
 800909a:	4b6f      	ldr	r3, [pc, #444]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 800909c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909e:	4a6e      	ldr	r2, [pc, #440]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80090a0:	f043 0304 	orr.w	r3, r3, #4
 80090a4:	6713      	str	r3, [r2, #112]	; 0x70
 80090a6:	4b6c      	ldr	r3, [pc, #432]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80090a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090aa:	4a6b      	ldr	r2, [pc, #428]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80090ac:	f043 0301 	orr.w	r3, r3, #1
 80090b0:	6713      	str	r3, [r2, #112]	; 0x70
 80090b2:	e00b      	b.n	80090cc <HAL_RCC_OscConfig+0x5e0>
 80090b4:	4b68      	ldr	r3, [pc, #416]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80090b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b8:	4a67      	ldr	r2, [pc, #412]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80090ba:	f023 0301 	bic.w	r3, r3, #1
 80090be:	6713      	str	r3, [r2, #112]	; 0x70
 80090c0:	4b65      	ldr	r3, [pc, #404]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80090c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c4:	4a64      	ldr	r2, [pc, #400]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80090c6:	f023 0304 	bic.w	r3, r3, #4
 80090ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d015      	beq.n	8009100 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d4:	f7fa fc1c 	bl	8003910 <HAL_GetTick>
 80090d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090da:	e00a      	b.n	80090f2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090dc:	f7fa fc18 	bl	8003910 <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e123      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090f2:	4b59      	ldr	r3, [pc, #356]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0ee      	beq.n	80090dc <HAL_RCC_OscConfig+0x5f0>
 80090fe:	e014      	b.n	800912a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009100:	f7fa fc06 	bl	8003910 <HAL_GetTick>
 8009104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009106:	e00a      	b.n	800911e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009108:	f7fa fc02 	bl	8003910 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	f241 3288 	movw	r2, #5000	; 0x1388
 8009116:	4293      	cmp	r3, r2
 8009118:	d901      	bls.n	800911e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e10d      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800911e:	4b4e      	ldr	r3, [pc, #312]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1ee      	bne.n	8009108 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8102 	beq.w	8009338 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009134:	4b48      	ldr	r3, [pc, #288]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800913c:	2b18      	cmp	r3, #24
 800913e:	f000 80bd 	beq.w	80092bc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	2b02      	cmp	r3, #2
 8009148:	f040 809e 	bne.w	8009288 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800914c:	4b42      	ldr	r3, [pc, #264]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a41      	ldr	r2, [pc, #260]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009158:	f7fa fbda 	bl	8003910 <HAL_GetTick>
 800915c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800915e:	e008      	b.n	8009172 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009160:	f7fa fbd6 	bl	8003910 <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	2b02      	cmp	r3, #2
 800916c:	d901      	bls.n	8009172 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e0e3      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009172:	4b39      	ldr	r3, [pc, #228]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1f0      	bne.n	8009160 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800917e:	4b36      	ldr	r3, [pc, #216]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009182:	4b37      	ldr	r3, [pc, #220]	; (8009260 <HAL_RCC_OscConfig+0x774>)
 8009184:	4013      	ands	r3, r2
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800918e:	0112      	lsls	r2, r2, #4
 8009190:	430a      	orrs	r2, r1
 8009192:	4931      	ldr	r1, [pc, #196]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009194:	4313      	orrs	r3, r2
 8009196:	628b      	str	r3, [r1, #40]	; 0x28
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919c:	3b01      	subs	r3, #1
 800919e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	3b01      	subs	r3, #1
 80091a8:	025b      	lsls	r3, r3, #9
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	431a      	orrs	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	3b01      	subs	r3, #1
 80091b4:	041b      	lsls	r3, r3, #16
 80091b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091ba:	431a      	orrs	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c0:	3b01      	subs	r3, #1
 80091c2:	061b      	lsls	r3, r3, #24
 80091c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091c8:	4923      	ldr	r1, [pc, #140]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80091ce:	4b22      	ldr	r3, [pc, #136]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	4a21      	ldr	r2, [pc, #132]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80091d4:	f023 0301 	bic.w	r3, r3, #1
 80091d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091da:	4b1f      	ldr	r3, [pc, #124]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80091dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091de:	4b21      	ldr	r3, [pc, #132]	; (8009264 <HAL_RCC_OscConfig+0x778>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091e6:	00d2      	lsls	r2, r2, #3
 80091e8:	491b      	ldr	r1, [pc, #108]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091ee:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80091f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f2:	f023 020c 	bic.w	r2, r3, #12
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	4917      	ldr	r1, [pc, #92]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009200:	4b15      	ldr	r3, [pc, #84]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	f023 0202 	bic.w	r2, r3, #2
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920c:	4912      	ldr	r1, [pc, #72]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 800920e:	4313      	orrs	r3, r2
 8009210:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009212:	4b11      	ldr	r3, [pc, #68]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009216:	4a10      	ldr	r2, [pc, #64]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800921c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921e:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009222:	4a0d      	ldr	r2, [pc, #52]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800922a:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 800922c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922e:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009236:	4b08      	ldr	r3, [pc, #32]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923a:	4a07      	ldr	r2, [pc, #28]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 800923c:	f043 0301 	orr.w	r3, r3, #1
 8009240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009242:	4b05      	ldr	r3, [pc, #20]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a04      	ldr	r2, [pc, #16]	; (8009258 <HAL_RCC_OscConfig+0x76c>)
 8009248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800924c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924e:	f7fa fb5f 	bl	8003910 <HAL_GetTick>
 8009252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009254:	e011      	b.n	800927a <HAL_RCC_OscConfig+0x78e>
 8009256:	bf00      	nop
 8009258:	58024400 	.word	0x58024400
 800925c:	58024800 	.word	0x58024800
 8009260:	fffffc0c 	.word	0xfffffc0c
 8009264:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009268:	f7fa fb52 	bl	8003910 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d901      	bls.n	800927a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e05f      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800927a:	4b32      	ldr	r3, [pc, #200]	; (8009344 <HAL_RCC_OscConfig+0x858>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0f0      	beq.n	8009268 <HAL_RCC_OscConfig+0x77c>
 8009286:	e057      	b.n	8009338 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009288:	4b2e      	ldr	r3, [pc, #184]	; (8009344 <HAL_RCC_OscConfig+0x858>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a2d      	ldr	r2, [pc, #180]	; (8009344 <HAL_RCC_OscConfig+0x858>)
 800928e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009294:	f7fa fb3c 	bl	8003910 <HAL_GetTick>
 8009298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800929a:	e008      	b.n	80092ae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800929c:	f7fa fb38 	bl	8003910 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d901      	bls.n	80092ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e045      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092ae:	4b25      	ldr	r3, [pc, #148]	; (8009344 <HAL_RCC_OscConfig+0x858>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1f0      	bne.n	800929c <HAL_RCC_OscConfig+0x7b0>
 80092ba:	e03d      	b.n	8009338 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80092bc:	4b21      	ldr	r3, [pc, #132]	; (8009344 <HAL_RCC_OscConfig+0x858>)
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80092c2:	4b20      	ldr	r3, [pc, #128]	; (8009344 <HAL_RCC_OscConfig+0x858>)
 80092c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d031      	beq.n	8009334 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f003 0203 	and.w	r2, r3, #3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092da:	429a      	cmp	r2, r3
 80092dc:	d12a      	bne.n	8009334 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	091b      	lsrs	r3, r3, #4
 80092e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d122      	bne.n	8009334 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d11a      	bne.n	8009334 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	0a5b      	lsrs	r3, r3, #9
 8009302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800930c:	429a      	cmp	r2, r3
 800930e:	d111      	bne.n	8009334 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	0c1b      	lsrs	r3, r3, #16
 8009314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800931e:	429a      	cmp	r2, r3
 8009320:	d108      	bne.n	8009334 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	0e1b      	lsrs	r3, r3, #24
 8009326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009330:	429a      	cmp	r2, r3
 8009332:	d001      	beq.n	8009338 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e000      	b.n	800933a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3730      	adds	r7, #48	; 0x30
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	58024400 	.word	0x58024400

08009348 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e19c      	b.n	8009696 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800935c:	4b8a      	ldr	r3, [pc, #552]	; (8009588 <HAL_RCC_ClockConfig+0x240>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	d910      	bls.n	800938c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800936a:	4b87      	ldr	r3, [pc, #540]	; (8009588 <HAL_RCC_ClockConfig+0x240>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f023 020f 	bic.w	r2, r3, #15
 8009372:	4985      	ldr	r1, [pc, #532]	; (8009588 <HAL_RCC_ClockConfig+0x240>)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	4313      	orrs	r3, r2
 8009378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800937a:	4b83      	ldr	r3, [pc, #524]	; (8009588 <HAL_RCC_ClockConfig+0x240>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	429a      	cmp	r2, r3
 8009386:	d001      	beq.n	800938c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e184      	b.n	8009696 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d010      	beq.n	80093ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	691a      	ldr	r2, [r3, #16]
 800939c:	4b7b      	ldr	r3, [pc, #492]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d908      	bls.n	80093ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093a8:	4b78      	ldr	r3, [pc, #480]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	4975      	ldr	r1, [pc, #468]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 0308 	and.w	r3, r3, #8
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d010      	beq.n	80093e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	695a      	ldr	r2, [r3, #20]
 80093ca:	4b70      	ldr	r3, [pc, #448]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d908      	bls.n	80093e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093d6:	4b6d      	ldr	r3, [pc, #436]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	496a      	ldr	r1, [pc, #424]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0310 	and.w	r3, r3, #16
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d010      	beq.n	8009416 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	699a      	ldr	r2, [r3, #24]
 80093f8:	4b64      	ldr	r3, [pc, #400]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009400:	429a      	cmp	r2, r3
 8009402:	d908      	bls.n	8009416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009404:	4b61      	ldr	r3, [pc, #388]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	495e      	ldr	r1, [pc, #376]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009412:	4313      	orrs	r3, r2
 8009414:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b00      	cmp	r3, #0
 8009420:	d010      	beq.n	8009444 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	69da      	ldr	r2, [r3, #28]
 8009426:	4b59      	ldr	r3, [pc, #356]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800942e:	429a      	cmp	r2, r3
 8009430:	d908      	bls.n	8009444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009432:	4b56      	ldr	r3, [pc, #344]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	4953      	ldr	r1, [pc, #332]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009440:	4313      	orrs	r3, r2
 8009442:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d010      	beq.n	8009472 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	4b4d      	ldr	r3, [pc, #308]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	429a      	cmp	r2, r3
 800945e:	d908      	bls.n	8009472 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009460:	4b4a      	ldr	r3, [pc, #296]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	f023 020f 	bic.w	r2, r3, #15
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	4947      	ldr	r1, [pc, #284]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 800946e:	4313      	orrs	r3, r2
 8009470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	d055      	beq.n	800952a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800947e:	4b43      	ldr	r3, [pc, #268]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	4940      	ldr	r1, [pc, #256]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 800948c:	4313      	orrs	r3, r2
 800948e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	2b02      	cmp	r3, #2
 8009496:	d107      	bne.n	80094a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009498:	4b3c      	ldr	r3, [pc, #240]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d121      	bne.n	80094e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e0f6      	b.n	8009696 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d107      	bne.n	80094c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094b0:	4b36      	ldr	r3, [pc, #216]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d115      	bne.n	80094e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e0ea      	b.n	8009696 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d107      	bne.n	80094d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094c8:	4b30      	ldr	r3, [pc, #192]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d109      	bne.n	80094e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e0de      	b.n	8009696 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094d8:	4b2c      	ldr	r3, [pc, #176]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e0d6      	b.n	8009696 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094e8:	4b28      	ldr	r3, [pc, #160]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f023 0207 	bic.w	r2, r3, #7
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	4925      	ldr	r1, [pc, #148]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094fa:	f7fa fa09 	bl	8003910 <HAL_GetTick>
 80094fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009500:	e00a      	b.n	8009518 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009502:	f7fa fa05 	bl	8003910 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009510:	4293      	cmp	r3, r2
 8009512:	d901      	bls.n	8009518 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e0be      	b.n	8009696 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009518:	4b1c      	ldr	r3, [pc, #112]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	429a      	cmp	r2, r3
 8009528:	d1eb      	bne.n	8009502 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d010      	beq.n	8009558 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	4b14      	ldr	r3, [pc, #80]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	429a      	cmp	r2, r3
 8009544:	d208      	bcs.n	8009558 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009546:	4b11      	ldr	r3, [pc, #68]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	f023 020f 	bic.w	r2, r3, #15
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	490e      	ldr	r1, [pc, #56]	; (800958c <HAL_RCC_ClockConfig+0x244>)
 8009554:	4313      	orrs	r3, r2
 8009556:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009558:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <HAL_RCC_ClockConfig+0x240>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d214      	bcs.n	8009590 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009566:	4b08      	ldr	r3, [pc, #32]	; (8009588 <HAL_RCC_ClockConfig+0x240>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f023 020f 	bic.w	r2, r3, #15
 800956e:	4906      	ldr	r1, [pc, #24]	; (8009588 <HAL_RCC_ClockConfig+0x240>)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	4313      	orrs	r3, r2
 8009574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009576:	4b04      	ldr	r3, [pc, #16]	; (8009588 <HAL_RCC_ClockConfig+0x240>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 030f 	and.w	r3, r3, #15
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d005      	beq.n	8009590 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e086      	b.n	8009696 <HAL_RCC_ClockConfig+0x34e>
 8009588:	52002000 	.word	0x52002000
 800958c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b00      	cmp	r3, #0
 800959a:	d010      	beq.n	80095be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691a      	ldr	r2, [r3, #16]
 80095a0:	4b3f      	ldr	r3, [pc, #252]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d208      	bcs.n	80095be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095ac:	4b3c      	ldr	r3, [pc, #240]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	4939      	ldr	r1, [pc, #228]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d010      	beq.n	80095ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	695a      	ldr	r2, [r3, #20]
 80095ce:	4b34      	ldr	r3, [pc, #208]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d208      	bcs.n	80095ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095da:	4b31      	ldr	r3, [pc, #196]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	492e      	ldr	r1, [pc, #184]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d010      	beq.n	800961a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699a      	ldr	r2, [r3, #24]
 80095fc:	4b28      	ldr	r3, [pc, #160]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009604:	429a      	cmp	r2, r3
 8009606:	d208      	bcs.n	800961a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009608:	4b25      	ldr	r3, [pc, #148]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	4922      	ldr	r1, [pc, #136]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 8009616:	4313      	orrs	r3, r2
 8009618:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d010      	beq.n	8009648 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	69da      	ldr	r2, [r3, #28]
 800962a:	4b1d      	ldr	r3, [pc, #116]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009632:	429a      	cmp	r2, r3
 8009634:	d208      	bcs.n	8009648 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009636:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	4917      	ldr	r1, [pc, #92]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 8009644:	4313      	orrs	r3, r2
 8009646:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009648:	f000 f834 	bl	80096b4 <HAL_RCC_GetSysClockFreq>
 800964c:	4602      	mov	r2, r0
 800964e:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	0a1b      	lsrs	r3, r3, #8
 8009654:	f003 030f 	and.w	r3, r3, #15
 8009658:	4912      	ldr	r1, [pc, #72]	; (80096a4 <HAL_RCC_ClockConfig+0x35c>)
 800965a:	5ccb      	ldrb	r3, [r1, r3]
 800965c:	f003 031f 	and.w	r3, r3, #31
 8009660:	fa22 f303 	lsr.w	r3, r2, r3
 8009664:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009666:	4b0e      	ldr	r3, [pc, #56]	; (80096a0 <HAL_RCC_ClockConfig+0x358>)
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	f003 030f 	and.w	r3, r3, #15
 800966e:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <HAL_RCC_ClockConfig+0x35c>)
 8009670:	5cd3      	ldrb	r3, [r2, r3]
 8009672:	f003 031f 	and.w	r3, r3, #31
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	fa22 f303 	lsr.w	r3, r2, r3
 800967c:	4a0a      	ldr	r2, [pc, #40]	; (80096a8 <HAL_RCC_ClockConfig+0x360>)
 800967e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009680:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <HAL_RCC_ClockConfig+0x364>)
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009686:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <HAL_RCC_ClockConfig+0x368>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4618      	mov	r0, r3
 800968c:	f7f8 feda 	bl	8002444 <HAL_InitTick>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	58024400 	.word	0x58024400
 80096a4:	08018ccc 	.word	0x08018ccc
 80096a8:	24000004 	.word	0x24000004
 80096ac:	24000000 	.word	0x24000000
 80096b0:	24000008 	.word	0x24000008

080096b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b089      	sub	sp, #36	; 0x24
 80096b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096ba:	4bb3      	ldr	r3, [pc, #716]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096c2:	2b18      	cmp	r3, #24
 80096c4:	f200 8155 	bhi.w	8009972 <HAL_RCC_GetSysClockFreq+0x2be>
 80096c8:	a201      	add	r2, pc, #4	; (adr r2, 80096d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80096ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ce:	bf00      	nop
 80096d0:	08009735 	.word	0x08009735
 80096d4:	08009973 	.word	0x08009973
 80096d8:	08009973 	.word	0x08009973
 80096dc:	08009973 	.word	0x08009973
 80096e0:	08009973 	.word	0x08009973
 80096e4:	08009973 	.word	0x08009973
 80096e8:	08009973 	.word	0x08009973
 80096ec:	08009973 	.word	0x08009973
 80096f0:	0800975b 	.word	0x0800975b
 80096f4:	08009973 	.word	0x08009973
 80096f8:	08009973 	.word	0x08009973
 80096fc:	08009973 	.word	0x08009973
 8009700:	08009973 	.word	0x08009973
 8009704:	08009973 	.word	0x08009973
 8009708:	08009973 	.word	0x08009973
 800970c:	08009973 	.word	0x08009973
 8009710:	08009761 	.word	0x08009761
 8009714:	08009973 	.word	0x08009973
 8009718:	08009973 	.word	0x08009973
 800971c:	08009973 	.word	0x08009973
 8009720:	08009973 	.word	0x08009973
 8009724:	08009973 	.word	0x08009973
 8009728:	08009973 	.word	0x08009973
 800972c:	08009973 	.word	0x08009973
 8009730:	08009767 	.word	0x08009767
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009734:	4b94      	ldr	r3, [pc, #592]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0320 	and.w	r3, r3, #32
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009740:	4b91      	ldr	r3, [pc, #580]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	08db      	lsrs	r3, r3, #3
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	4a90      	ldr	r2, [pc, #576]	; (800998c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800974c:	fa22 f303 	lsr.w	r3, r2, r3
 8009750:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009752:	e111      	b.n	8009978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009754:	4b8d      	ldr	r3, [pc, #564]	; (800998c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009756:	61bb      	str	r3, [r7, #24]
    break;
 8009758:	e10e      	b.n	8009978 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800975a:	4b8d      	ldr	r3, [pc, #564]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800975c:	61bb      	str	r3, [r7, #24]
    break;
 800975e:	e10b      	b.n	8009978 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009760:	4b8c      	ldr	r3, [pc, #560]	; (8009994 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009762:	61bb      	str	r3, [r7, #24]
    break;
 8009764:	e108      	b.n	8009978 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009766:	4b88      	ldr	r3, [pc, #544]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009770:	4b85      	ldr	r3, [pc, #532]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	091b      	lsrs	r3, r3, #4
 8009776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800977a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800977c:	4b82      	ldr	r3, [pc, #520]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800977e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009786:	4b80      	ldr	r3, [pc, #512]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978a:	08db      	lsrs	r3, r3, #3
 800978c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	fb02 f303 	mul.w	r3, r2, r3
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 80e1 	beq.w	800996c <HAL_RCC_GetSysClockFreq+0x2b8>
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	f000 8083 	beq.w	80098b8 <HAL_RCC_GetSysClockFreq+0x204>
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	f200 80a1 	bhi.w	80098fc <HAL_RCC_GetSysClockFreq+0x248>
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <HAL_RCC_GetSysClockFreq+0x114>
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d056      	beq.n	8009874 <HAL_RCC_GetSysClockFreq+0x1c0>
 80097c6:	e099      	b.n	80098fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097c8:	4b6f      	ldr	r3, [pc, #444]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0320 	and.w	r3, r3, #32
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d02d      	beq.n	8009830 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097d4:	4b6c      	ldr	r3, [pc, #432]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	08db      	lsrs	r3, r3, #3
 80097da:	f003 0303 	and.w	r3, r3, #3
 80097de:	4a6b      	ldr	r2, [pc, #428]	; (800998c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097e0:	fa22 f303 	lsr.w	r3, r2, r3
 80097e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	ee07 3a90 	vmov	s15, r3
 80097ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097fe:	4b62      	ldr	r3, [pc, #392]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009812:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800981a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800981e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800982a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800982e:	e087      	b.n	8009940 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	ee07 3a90 	vmov	s15, r3
 8009836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800999c <HAL_RCC_GetSysClockFreq+0x2e8>
 800983e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009842:	4b51      	ldr	r3, [pc, #324]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009852:	ed97 6a02 	vldr	s12, [r7, #8]
 8009856:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800985a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800985e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800986a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009872:	e065      	b.n	8009940 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80099a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009886:	4b40      	ldr	r3, [pc, #256]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009896:	ed97 6a02 	vldr	s12, [r7, #8]
 800989a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800989e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098b6:	e043      	b.n	8009940 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80099a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80098c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ca:	4b2f      	ldr	r3, [pc, #188]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098da:	ed97 6a02 	vldr	s12, [r7, #8]
 80098de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009998 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098fa:	e021      	b.n	8009940 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	eddf 6a26 	vldr	s13, [pc, #152]	; 80099a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800990a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990e:	4b1e      	ldr	r3, [pc, #120]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009922:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800993e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009944:	0a5b      	lsrs	r3, r3, #9
 8009946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994a:	3301      	adds	r3, #1
 800994c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	ee07 3a90 	vmov	s15, r3
 8009954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009958:	edd7 6a07 	vldr	s13, [r7, #28]
 800995c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009964:	ee17 3a90 	vmov	r3, s15
 8009968:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800996a:	e005      	b.n	8009978 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	61bb      	str	r3, [r7, #24]
    break;
 8009970:	e002      	b.n	8009978 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009972:	4b07      	ldr	r3, [pc, #28]	; (8009990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009974:	61bb      	str	r3, [r7, #24]
    break;
 8009976:	bf00      	nop
  }

  return sysclockfreq;
 8009978:	69bb      	ldr	r3, [r7, #24]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3724      	adds	r7, #36	; 0x24
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400
 800998c:	03d09000 	.word	0x03d09000
 8009990:	003d0900 	.word	0x003d0900
 8009994:	02dc6c00 	.word	0x02dc6c00
 8009998:	46000000 	.word	0x46000000
 800999c:	4c742400 	.word	0x4c742400
 80099a0:	4a742400 	.word	0x4a742400
 80099a4:	4c371b00 	.word	0x4c371b00

080099a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80099ae:	f7ff fe81 	bl	80096b4 <HAL_RCC_GetSysClockFreq>
 80099b2:	4602      	mov	r2, r0
 80099b4:	4b10      	ldr	r3, [pc, #64]	; (80099f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	490f      	ldr	r1, [pc, #60]	; (80099fc <HAL_RCC_GetHCLKFreq+0x54>)
 80099c0:	5ccb      	ldrb	r3, [r1, r3]
 80099c2:	f003 031f 	and.w	r3, r3, #31
 80099c6:	fa22 f303 	lsr.w	r3, r2, r3
 80099ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	4a09      	ldr	r2, [pc, #36]	; (80099fc <HAL_RCC_GetHCLKFreq+0x54>)
 80099d6:	5cd3      	ldrb	r3, [r2, r3]
 80099d8:	f003 031f 	and.w	r3, r3, #31
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	fa22 f303 	lsr.w	r3, r2, r3
 80099e2:	4a07      	ldr	r2, [pc, #28]	; (8009a00 <HAL_RCC_GetHCLKFreq+0x58>)
 80099e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099e6:	4a07      	ldr	r2, [pc, #28]	; (8009a04 <HAL_RCC_GetHCLKFreq+0x5c>)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80099ec:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <HAL_RCC_GetHCLKFreq+0x58>)
 80099ee:	681b      	ldr	r3, [r3, #0]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	58024400 	.word	0x58024400
 80099fc:	08018ccc 	.word	0x08018ccc
 8009a00:	24000004 	.word	0x24000004
 8009a04:	24000000 	.word	0x24000000

08009a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a0c:	f7ff ffcc 	bl	80099a8 <HAL_RCC_GetHCLKFreq>
 8009a10:	4602      	mov	r2, r0
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	091b      	lsrs	r3, r3, #4
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	4904      	ldr	r1, [pc, #16]	; (8009a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a1e:	5ccb      	ldrb	r3, [r1, r3]
 8009a20:	f003 031f 	and.w	r3, r3, #31
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	58024400 	.word	0x58024400
 8009a30:	08018ccc 	.word	0x08018ccc

08009a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a38:	f7ff ffb6 	bl	80099a8 <HAL_RCC_GetHCLKFreq>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	0a1b      	lsrs	r3, r3, #8
 8009a44:	f003 0307 	and.w	r3, r3, #7
 8009a48:	4904      	ldr	r1, [pc, #16]	; (8009a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a4a:	5ccb      	ldrb	r3, [r1, r3]
 8009a4c:	f003 031f 	and.w	r3, r3, #31
 8009a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	58024400 	.word	0x58024400
 8009a5c:	08018ccc 	.word	0x08018ccc

08009a60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	223f      	movs	r2, #63	; 0x3f
 8009a6e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009a70:	4b1a      	ldr	r3, [pc, #104]	; (8009adc <HAL_RCC_GetClockConfig+0x7c>)
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f003 0207 	and.w	r2, r3, #7
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009a7c:	4b17      	ldr	r3, [pc, #92]	; (8009adc <HAL_RCC_GetClockConfig+0x7c>)
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009a88:	4b14      	ldr	r3, [pc, #80]	; (8009adc <HAL_RCC_GetClockConfig+0x7c>)
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	f003 020f 	and.w	r2, r3, #15
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009a94:	4b11      	ldr	r3, [pc, #68]	; (8009adc <HAL_RCC_GetClockConfig+0x7c>)
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <HAL_RCC_GetClockConfig+0x7c>)
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009aac:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <HAL_RCC_GetClockConfig+0x7c>)
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009ab8:	4b08      	ldr	r3, [pc, #32]	; (8009adc <HAL_RCC_GetClockConfig+0x7c>)
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ac4:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <HAL_RCC_GetClockConfig+0x80>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 020f 	and.w	r2, r3, #15
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	601a      	str	r2, [r3, #0]
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	52002000 	.word	0x52002000

08009ae4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009aec:	2300      	movs	r3, #0
 8009aee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009af0:	2300      	movs	r3, #0
 8009af2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d03f      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b08:	d02a      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009b0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b0e:	d824      	bhi.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b14:	d018      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b1a:	d81e      	bhi.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b24:	d007      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009b26:	e018      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b28:	4ba3      	ldr	r3, [pc, #652]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	4aa2      	ldr	r2, [pc, #648]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b34:	e015      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	2102      	movs	r1, #2
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 fff9 	bl	800bb34 <RCCEx_PLL2_Config>
 8009b42:	4603      	mov	r3, r0
 8009b44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b46:	e00c      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3324      	adds	r3, #36	; 0x24
 8009b4c:	2102      	movs	r1, #2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f002 f8a2 	bl	800bc98 <RCCEx_PLL3_Config>
 8009b54:	4603      	mov	r3, r0
 8009b56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b58:	e003      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5e:	e000      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b62:	7dfb      	ldrb	r3, [r7, #23]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d109      	bne.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b68:	4b93      	ldr	r3, [pc, #588]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b74:	4990      	ldr	r1, [pc, #576]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	650b      	str	r3, [r1, #80]	; 0x50
 8009b7a:	e001      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d03d      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d826      	bhi.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009b94:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9a:	bf00      	nop
 8009b9c:	08009bb1 	.word	0x08009bb1
 8009ba0:	08009bbf 	.word	0x08009bbf
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	08009be9 	.word	0x08009be9
 8009bac:	08009be9 	.word	0x08009be9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb0:	4b81      	ldr	r3, [pc, #516]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	4a80      	ldr	r2, [pc, #512]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bbc:	e015      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 ffb5 	bl	800bb34 <RCCEx_PLL2_Config>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bce:	e00c      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3324      	adds	r3, #36	; 0x24
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f002 f85e 	bl	800bc98 <RCCEx_PLL3_Config>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009be0:	e003      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	75fb      	strb	r3, [r7, #23]
      break;
 8009be6:	e000      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d109      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bf0:	4b71      	ldr	r3, [pc, #452]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf4:	f023 0207 	bic.w	r2, r3, #7
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfc:	496e      	ldr	r1, [pc, #440]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	650b      	str	r3, [r1, #80]	; 0x50
 8009c02:	e001      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d042      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c1c:	d02b      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c22:	d825      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c24:	2bc0      	cmp	r3, #192	; 0xc0
 8009c26:	d028      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009c28:	2bc0      	cmp	r3, #192	; 0xc0
 8009c2a:	d821      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c2c:	2b80      	cmp	r3, #128	; 0x80
 8009c2e:	d016      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	d81d      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009c38:	2b40      	cmp	r3, #64	; 0x40
 8009c3a:	d007      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009c3c:	e018      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c3e:	4b5e      	ldr	r3, [pc, #376]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c42:	4a5d      	ldr	r2, [pc, #372]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c4a:	e017      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 ff6e 	bl	800bb34 <RCCEx_PLL2_Config>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c5c:	e00e      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3324      	adds	r3, #36	; 0x24
 8009c62:	2100      	movs	r1, #0
 8009c64:	4618      	mov	r0, r3
 8009c66:	f002 f817 	bl	800bc98 <RCCEx_PLL3_Config>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009c6e:	e005      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	75fb      	strb	r3, [r7, #23]
      break;
 8009c74:	e002      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009c76:	bf00      	nop
 8009c78:	e000      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d109      	bne.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009c82:	4b4d      	ldr	r3, [pc, #308]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8e:	494a      	ldr	r1, [pc, #296]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	650b      	str	r3, [r1, #80]	; 0x50
 8009c94:	e001      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d049      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cb0:	d030      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cb6:	d82a      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009cb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cbc:	d02c      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009cbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cc2:	d824      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cc8:	d018      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cce:	d81e      	bhi.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cd8:	d007      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009cda:	e018      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cdc:	4b36      	ldr	r3, [pc, #216]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce0:	4a35      	ldr	r2, [pc, #212]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ce8:	e017      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3304      	adds	r3, #4
 8009cee:	2100      	movs	r1, #0
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f001 ff1f 	bl	800bb34 <RCCEx_PLL2_Config>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009cfa:	e00e      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3324      	adds	r3, #36	; 0x24
 8009d00:	2100      	movs	r1, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f001 ffc8 	bl	800bc98 <RCCEx_PLL3_Config>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d0c:	e005      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	75fb      	strb	r3, [r7, #23]
      break;
 8009d12:	e002      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009d14:	bf00      	nop
 8009d16:	e000      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009d20:	4b25      	ldr	r3, [pc, #148]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d2e:	4922      	ldr	r1, [pc, #136]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	658b      	str	r3, [r1, #88]	; 0x58
 8009d34:	e001      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d04b      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d50:	d030      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d56:	d82a      	bhi.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d5c:	d02e      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009d5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d62:	d824      	bhi.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d68:	d018      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d6e:	d81e      	bhi.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d78:	d007      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009d7a:	e018      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d7c:	4b0e      	ldr	r3, [pc, #56]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	4a0d      	ldr	r2, [pc, #52]	; (8009db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d88:	e019      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 fecf 	bl	800bb34 <RCCEx_PLL2_Config>
 8009d96:	4603      	mov	r3, r0
 8009d98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d9a:	e010      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3324      	adds	r3, #36	; 0x24
 8009da0:	2100      	movs	r1, #0
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 ff78 	bl	800bc98 <RCCEx_PLL3_Config>
 8009da8:	4603      	mov	r3, r0
 8009daa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009dac:	e007      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	75fb      	strb	r3, [r7, #23]
      break;
 8009db2:	e004      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009db4:	bf00      	nop
 8009db6:	e002      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009db8:	58024400 	.word	0x58024400
      break;
 8009dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009dc4:	4b99      	ldr	r3, [pc, #612]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dd2:	4996      	ldr	r1, [pc, #600]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	658b      	str	r3, [r1, #88]	; 0x58
 8009dd8:	e001      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d032      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dee:	2b30      	cmp	r3, #48	; 0x30
 8009df0:	d01c      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009df2:	2b30      	cmp	r3, #48	; 0x30
 8009df4:	d817      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009df6:	2b20      	cmp	r3, #32
 8009df8:	d00c      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009dfa:	2b20      	cmp	r3, #32
 8009dfc:	d813      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d016      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009e02:	2b10      	cmp	r3, #16
 8009e04:	d10f      	bne.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e06:	4b89      	ldr	r3, [pc, #548]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0a:	4a88      	ldr	r2, [pc, #544]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009e12:	e00e      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3304      	adds	r3, #4
 8009e18:	2102      	movs	r1, #2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 fe8a 	bl	800bb34 <RCCEx_PLL2_Config>
 8009e20:	4603      	mov	r3, r0
 8009e22:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009e24:	e005      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	75fb      	strb	r3, [r7, #23]
      break;
 8009e2a:	e002      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009e2c:	bf00      	nop
 8009e2e:	e000      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d109      	bne.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e38:	4b7c      	ldr	r3, [pc, #496]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e44:	4979      	ldr	r1, [pc, #484]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e4a:	e001      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d047      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e64:	d030      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e6a:	d82a      	bhi.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009e6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e70:	d02c      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009e72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e76:	d824      	bhi.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e7c:	d018      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e82:	d81e      	bhi.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d003      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e8c:	d007      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009e8e:	e018      	b.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e90:	4b66      	ldr	r3, [pc, #408]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	4a65      	ldr	r2, [pc, #404]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e9c:	e017      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 fe45 	bl	800bb34 <RCCEx_PLL2_Config>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009eae:	e00e      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3324      	adds	r3, #36	; 0x24
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 feee 	bl	800bc98 <RCCEx_PLL3_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ec0:	e005      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec6:	e002      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009ec8:	bf00      	nop
 8009eca:	e000      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d109      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ed4:	4b55      	ldr	r3, [pc, #340]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee0:	4952      	ldr	r1, [pc, #328]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	650b      	str	r3, [r1, #80]	; 0x50
 8009ee6:	e001      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d049      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f00:	d02e      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009f02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f06:	d828      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f0c:	d02a      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009f0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f12:	d822      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009f14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f18:	d026      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009f1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f1e:	d81c      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f24:	d010      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f2a:	d816      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d01d      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f34:	d111      	bne.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 fdf9 	bl	800bb34 <RCCEx_PLL2_Config>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f46:	e012      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3324      	adds	r3, #36	; 0x24
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 fea2 	bl	800bc98 <RCCEx_PLL3_Config>
 8009f54:	4603      	mov	r3, r0
 8009f56:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f58:	e009      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f5e:	e006      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009f60:	bf00      	nop
 8009f62:	e004      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009f64:	bf00      	nop
 8009f66:	e002      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009f68:	bf00      	nop
 8009f6a:	e000      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f74:	4b2d      	ldr	r3, [pc, #180]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f80:	492a      	ldr	r1, [pc, #168]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	650b      	str	r3, [r1, #80]	; 0x50
 8009f86:	e001      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d04d      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fa2:	d02e      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fa8:	d828      	bhi.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fae:	d02a      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb4:	d822      	bhi.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fba:	d026      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009fbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fc0:	d81c      	bhi.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc6:	d010      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fcc:	d816      	bhi.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d01d      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fd6:	d111      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3304      	adds	r3, #4
 8009fdc:	2101      	movs	r1, #1
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 fda8 	bl	800bb34 <RCCEx_PLL2_Config>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fe8:	e012      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3324      	adds	r3, #36	; 0x24
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 fe51 	bl	800bc98 <RCCEx_PLL3_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009ffa:	e009      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	75fb      	strb	r3, [r7, #23]
      break;
 800a000:	e006      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a002:	bf00      	nop
 800a004:	e004      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a006:	bf00      	nop
 800a008:	e002      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a00a:	bf00      	nop
 800a00c:	e000      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a00e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a010:	7dfb      	ldrb	r3, [r7, #23]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10c      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a024:	4901      	ldr	r1, [pc, #4]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a026:	4313      	orrs	r3, r2
 800a028:	658b      	str	r3, [r1, #88]	; 0x58
 800a02a:	e003      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a02c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d02f      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a048:	d00e      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800a04a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a04e:	d814      	bhi.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x596>
 800a050:	2b00      	cmp	r3, #0
 800a052:	d015      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800a054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a058:	d10f      	bne.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a05a:	4baf      	ldr	r3, [pc, #700]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05e:	4aae      	ldr	r2, [pc, #696]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a066:	e00c      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3304      	adds	r3, #4
 800a06c:	2101      	movs	r1, #1
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 fd60 	bl	800bb34 <RCCEx_PLL2_Config>
 800a074:	4603      	mov	r3, r0
 800a076:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a078:	e003      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	75fb      	strb	r3, [r7, #23]
      break;
 800a07e:	e000      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800a080:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a088:	4ba3      	ldr	r3, [pc, #652]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a094:	49a0      	ldr	r1, [pc, #640]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a096:	4313      	orrs	r3, r2
 800a098:	650b      	str	r3, [r1, #80]	; 0x50
 800a09a:	e001      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d032      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d81b      	bhi.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a0b4:	a201      	add	r2, pc, #4	; (adr r2, 800a0bc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800a0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ba:	bf00      	nop
 800a0bc:	0800a0f3 	.word	0x0800a0f3
 800a0c0:	0800a0cd 	.word	0x0800a0cd
 800a0c4:	0800a0db 	.word	0x0800a0db
 800a0c8:	0800a0f3 	.word	0x0800a0f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0cc:	4b92      	ldr	r3, [pc, #584]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	4a91      	ldr	r2, [pc, #580]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a0d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0d8:	e00c      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	2102      	movs	r1, #2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f001 fd27 	bl	800bb34 <RCCEx_PLL2_Config>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0ea:	e003      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a0f0:	e000      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a0f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d109      	bne.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a0fa:	4b87      	ldr	r3, [pc, #540]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fe:	f023 0203 	bic.w	r2, r3, #3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a106:	4984      	ldr	r1, [pc, #528]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a10c:	e001      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8086 	beq.w	800a22c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a120:	4b7e      	ldr	r3, [pc, #504]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a7d      	ldr	r2, [pc, #500]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a12a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a12c:	f7f9 fbf0 	bl	8003910 <HAL_GetTick>
 800a130:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a132:	e009      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a134:	f7f9 fbec 	bl	8003910 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	2b64      	cmp	r3, #100	; 0x64
 800a140:	d902      	bls.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	75fb      	strb	r3, [r7, #23]
        break;
 800a146:	e005      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a148:	4b74      	ldr	r3, [pc, #464]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0ef      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d166      	bne.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a15a:	4b6f      	ldr	r3, [pc, #444]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a15c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a164:	4053      	eors	r3, r2
 800a166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d013      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a16e:	4b6a      	ldr	r3, [pc, #424]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a176:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a178:	4b67      	ldr	r3, [pc, #412]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a17c:	4a66      	ldr	r2, [pc, #408]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a17e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a182:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a184:	4b64      	ldr	r3, [pc, #400]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a188:	4a63      	ldr	r2, [pc, #396]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a18a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a18e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a190:	4a61      	ldr	r2, [pc, #388]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a0:	d115      	bne.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1a2:	f7f9 fbb5 	bl	8003910 <HAL_GetTick>
 800a1a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1a8:	e00b      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1aa:	f7f9 fbb1 	bl	8003910 <HAL_GetTick>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d902      	bls.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	75fb      	strb	r3, [r7, #23]
            break;
 800a1c0:	e005      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1c2:	4b55      	ldr	r3, [pc, #340]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0ed      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d126      	bne.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1e2:	d10d      	bne.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a1e4:	4b4c      	ldr	r3, [pc, #304]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1f2:	0919      	lsrs	r1, r3, #4
 800a1f4:	4b4a      	ldr	r3, [pc, #296]	; (800a320 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800a1f6:	400b      	ands	r3, r1
 800a1f8:	4947      	ldr	r1, [pc, #284]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	610b      	str	r3, [r1, #16]
 800a1fe:	e005      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a200:	4b45      	ldr	r3, [pc, #276]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	4a44      	ldr	r2, [pc, #272]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a206:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a20a:	6113      	str	r3, [r2, #16]
 800a20c:	4b42      	ldr	r3, [pc, #264]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a20e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a21a:	493f      	ldr	r1, [pc, #252]	; (800a318 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	670b      	str	r3, [r1, #112]	; 0x70
 800a220:	e004      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	75bb      	strb	r3, [r7, #22]
 800a226:	e001      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8085 	beq.w	800a344 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a23e:	2b28      	cmp	r3, #40	; 0x28
 800a240:	d866      	bhi.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a242:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a248:	0800a325 	.word	0x0800a325
 800a24c:	0800a311 	.word	0x0800a311
 800a250:	0800a311 	.word	0x0800a311
 800a254:	0800a311 	.word	0x0800a311
 800a258:	0800a311 	.word	0x0800a311
 800a25c:	0800a311 	.word	0x0800a311
 800a260:	0800a311 	.word	0x0800a311
 800a264:	0800a311 	.word	0x0800a311
 800a268:	0800a2ed 	.word	0x0800a2ed
 800a26c:	0800a311 	.word	0x0800a311
 800a270:	0800a311 	.word	0x0800a311
 800a274:	0800a311 	.word	0x0800a311
 800a278:	0800a311 	.word	0x0800a311
 800a27c:	0800a311 	.word	0x0800a311
 800a280:	0800a311 	.word	0x0800a311
 800a284:	0800a311 	.word	0x0800a311
 800a288:	0800a2ff 	.word	0x0800a2ff
 800a28c:	0800a311 	.word	0x0800a311
 800a290:	0800a311 	.word	0x0800a311
 800a294:	0800a311 	.word	0x0800a311
 800a298:	0800a311 	.word	0x0800a311
 800a29c:	0800a311 	.word	0x0800a311
 800a2a0:	0800a311 	.word	0x0800a311
 800a2a4:	0800a311 	.word	0x0800a311
 800a2a8:	0800a325 	.word	0x0800a325
 800a2ac:	0800a311 	.word	0x0800a311
 800a2b0:	0800a311 	.word	0x0800a311
 800a2b4:	0800a311 	.word	0x0800a311
 800a2b8:	0800a311 	.word	0x0800a311
 800a2bc:	0800a311 	.word	0x0800a311
 800a2c0:	0800a311 	.word	0x0800a311
 800a2c4:	0800a311 	.word	0x0800a311
 800a2c8:	0800a325 	.word	0x0800a325
 800a2cc:	0800a311 	.word	0x0800a311
 800a2d0:	0800a311 	.word	0x0800a311
 800a2d4:	0800a311 	.word	0x0800a311
 800a2d8:	0800a311 	.word	0x0800a311
 800a2dc:	0800a311 	.word	0x0800a311
 800a2e0:	0800a311 	.word	0x0800a311
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	0800a325 	.word	0x0800a325
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f001 fc1e 	bl	800bb34 <RCCEx_PLL2_Config>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2fc:	e013      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3324      	adds	r3, #36	; 0x24
 800a302:	2101      	movs	r1, #1
 800a304:	4618      	mov	r0, r3
 800a306:	f001 fcc7 	bl	800bc98 <RCCEx_PLL3_Config>
 800a30a:	4603      	mov	r3, r0
 800a30c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a30e:	e00a      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	75fb      	strb	r3, [r7, #23]
      break;
 800a314:	e007      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a316:	bf00      	nop
 800a318:	58024400 	.word	0x58024400
 800a31c:	58024800 	.word	0x58024800
 800a320:	00ffffcf 	.word	0x00ffffcf
      break;
 800a324:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d109      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a32c:	4b96      	ldr	r3, [pc, #600]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a330:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a338:	4993      	ldr	r1, [pc, #588]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	654b      	str	r3, [r1, #84]	; 0x54
 800a33e:	e001      	b.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a340:	7dfb      	ldrb	r3, [r7, #23]
 800a342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0302 	and.w	r3, r3, #2
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d038      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a354:	2b05      	cmp	r3, #5
 800a356:	d821      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a358:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800a35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35e:	bf00      	nop
 800a360:	0800a3a3 	.word	0x0800a3a3
 800a364:	0800a379 	.word	0x0800a379
 800a368:	0800a38b 	.word	0x0800a38b
 800a36c:	0800a3a3 	.word	0x0800a3a3
 800a370:	0800a3a3 	.word	0x0800a3a3
 800a374:	0800a3a3 	.word	0x0800a3a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3304      	adds	r3, #4
 800a37c:	2101      	movs	r1, #1
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 fbd8 	bl	800bb34 <RCCEx_PLL2_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a388:	e00c      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3324      	adds	r3, #36	; 0x24
 800a38e:	2101      	movs	r1, #1
 800a390:	4618      	mov	r0, r3
 800a392:	f001 fc81 	bl	800bc98 <RCCEx_PLL3_Config>
 800a396:	4603      	mov	r3, r0
 800a398:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a39a:	e003      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a0:	e000      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800a3a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d109      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a3aa:	4b77      	ldr	r3, [pc, #476]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ae:	f023 0207 	bic.w	r2, r3, #7
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b6:	4974      	ldr	r1, [pc, #464]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	654b      	str	r3, [r1, #84]	; 0x54
 800a3bc:	e001      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0304 	and.w	r3, r3, #4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d03a      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d4:	2b05      	cmp	r3, #5
 800a3d6:	d821      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a423 	.word	0x0800a423
 800a3e4:	0800a3f9 	.word	0x0800a3f9
 800a3e8:	0800a40b 	.word	0x0800a40b
 800a3ec:	0800a423 	.word	0x0800a423
 800a3f0:	0800a423 	.word	0x0800a423
 800a3f4:	0800a423 	.word	0x0800a423
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 fb98 	bl	800bb34 <RCCEx_PLL2_Config>
 800a404:	4603      	mov	r3, r0
 800a406:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a408:	e00c      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3324      	adds	r3, #36	; 0x24
 800a40e:	2101      	movs	r1, #1
 800a410:	4618      	mov	r0, r3
 800a412:	f001 fc41 	bl	800bc98 <RCCEx_PLL3_Config>
 800a416:	4603      	mov	r3, r0
 800a418:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a41a:	e003      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]
      break;
 800a420:	e000      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800a422:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10a      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a42a:	4b57      	ldr	r3, [pc, #348]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42e:	f023 0207 	bic.w	r2, r3, #7
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a438:	4953      	ldr	r1, [pc, #332]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	658b      	str	r3, [r1, #88]	; 0x58
 800a43e:	e001      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0320 	and.w	r3, r3, #32
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d04b      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a45a:	d02e      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a45c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a460:	d828      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a466:	d02a      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a46c:	d822      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a46e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a472:	d026      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a474:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a478:	d81c      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a47a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a47e:	d010      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a484:	d816      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d01d      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a48a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a48e:	d111      	bne.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3304      	adds	r3, #4
 800a494:	2100      	movs	r1, #0
 800a496:	4618      	mov	r0, r3
 800a498:	f001 fb4c 	bl	800bb34 <RCCEx_PLL2_Config>
 800a49c:	4603      	mov	r3, r0
 800a49e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a4a0:	e012      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3324      	adds	r3, #36	; 0x24
 800a4a6:	2102      	movs	r1, #2
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f001 fbf5 	bl	800bc98 <RCCEx_PLL3_Config>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a4b2:	e009      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4b8:	e006      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a4ba:	bf00      	nop
 800a4bc:	e004      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a4be:	bf00      	nop
 800a4c0:	e002      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a4c2:	bf00      	nop
 800a4c4:	e000      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a4c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4ce:	4b2e      	ldr	r3, [pc, #184]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4dc:	492a      	ldr	r1, [pc, #168]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	654b      	str	r3, [r1, #84]	; 0x54
 800a4e2:	e001      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d04d      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a4fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4fe:	d02e      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a500:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a504:	d828      	bhi.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50a:	d02a      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a510:	d822      	bhi.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a512:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a516:	d026      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a518:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a51c:	d81c      	bhi.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a51e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a522:	d010      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a528:	d816      	bhi.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01d      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a52e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a532:	d111      	bne.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3304      	adds	r3, #4
 800a538:	2100      	movs	r1, #0
 800a53a:	4618      	mov	r0, r3
 800a53c:	f001 fafa 	bl	800bb34 <RCCEx_PLL2_Config>
 800a540:	4603      	mov	r3, r0
 800a542:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a544:	e012      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3324      	adds	r3, #36	; 0x24
 800a54a:	2102      	movs	r1, #2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f001 fba3 	bl	800bc98 <RCCEx_PLL3_Config>
 800a552:	4603      	mov	r3, r0
 800a554:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a556:	e009      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	75fb      	strb	r3, [r7, #23]
      break;
 800a55c:	e006      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a55e:	bf00      	nop
 800a560:	e004      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a562:	bf00      	nop
 800a564:	e002      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a566:	bf00      	nop
 800a568:	e000      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a56a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10c      	bne.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a572:	4b05      	ldr	r3, [pc, #20]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a576:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a580:	4901      	ldr	r1, [pc, #4]	; (800a588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a582:	4313      	orrs	r3, r2
 800a584:	658b      	str	r3, [r1, #88]	; 0x58
 800a586:	e003      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d04b      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a5a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5a6:	d02e      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a5a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5ac:	d828      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a5ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5b2:	d02a      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a5b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5b8:	d822      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a5ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5be:	d026      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a5c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5c4:	d81c      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a5c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5ca:	d010      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a5cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5d0:	d816      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d01d      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a5d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5da:	d111      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 faa6 	bl	800bb34 <RCCEx_PLL2_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5ec:	e012      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3324      	adds	r3, #36	; 0x24
 800a5f2:	2102      	movs	r1, #2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 fb4f 	bl	800bc98 <RCCEx_PLL3_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5fe:	e009      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
      break;
 800a604:	e006      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a606:	bf00      	nop
 800a608:	e004      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a60a:	bf00      	nop
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a612:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a61a:	4b9d      	ldr	r3, [pc, #628]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a628:	4999      	ldr	r1, [pc, #612]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	658b      	str	r3, [r1, #88]	; 0x58
 800a62e:	e001      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0308 	and.w	r3, r3, #8
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d01a      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a64a:	d10a      	bne.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3324      	adds	r3, #36	; 0x24
 800a650:	2102      	movs	r1, #2
 800a652:	4618      	mov	r0, r3
 800a654:	f001 fb20 	bl	800bc98 <RCCEx_PLL3_Config>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a662:	4b8b      	ldr	r3, [pc, #556]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a666:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a670:	4987      	ldr	r1, [pc, #540]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a672:	4313      	orrs	r3, r2
 800a674:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 0310 	and.w	r3, r3, #16
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d01a      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68c:	d10a      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	3324      	adds	r3, #36	; 0x24
 800a692:	2102      	movs	r1, #2
 800a694:	4618      	mov	r0, r3
 800a696:	f001 faff 	bl	800bc98 <RCCEx_PLL3_Config>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6a4:	4b7a      	ldr	r3, [pc, #488]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6b2:	4977      	ldr	r1, [pc, #476]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d034      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a6ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6ce:	d01d      	beq.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a6d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6d4:	d817      	bhi.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a6da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6de:	d009      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a6e0:	e011      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f001 fa23 	bl	800bb34 <RCCEx_PLL2_Config>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6f2:	e00c      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3324      	adds	r3, #36	; 0x24
 800a6f8:	2102      	movs	r1, #2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f001 facc 	bl	800bc98 <RCCEx_PLL3_Config>
 800a700:	4603      	mov	r3, r0
 800a702:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a704:	e003      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	75fb      	strb	r3, [r7, #23]
      break;
 800a70a:	e000      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a70c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a714:	4b5e      	ldr	r3, [pc, #376]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a722:	495b      	ldr	r1, [pc, #364]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a724:	4313      	orrs	r3, r2
 800a726:	658b      	str	r3, [r1, #88]	; 0x58
 800a728:	e001      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d033      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a740:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a744:	d01c      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a746:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a74a:	d816      	bhi.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a74c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a750:	d003      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a756:	d007      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a758:	e00f      	b.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a75a:	4b4d      	ldr	r3, [pc, #308]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75e:	4a4c      	ldr	r2, [pc, #304]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a766:	e00c      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3324      	adds	r3, #36	; 0x24
 800a76c:	2101      	movs	r1, #1
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 fa92 	bl	800bc98 <RCCEx_PLL3_Config>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a778:	e003      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	75fb      	strb	r3, [r7, #23]
      break;
 800a77e:	e000      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a780:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10a      	bne.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a788:	4b41      	ldr	r3, [pc, #260]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a78c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a796:	493e      	ldr	r1, [pc, #248]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	654b      	str	r3, [r1, #84]	; 0x54
 800a79c:	e001      	b.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a79e:	7dfb      	ldrb	r3, [r7, #23]
 800a7a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d029      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ba:	d007      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a7bc:	e00f      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7be:	4b34      	ldr	r3, [pc, #208]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	4a33      	ldr	r2, [pc, #204]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a7c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7ca:	e00b      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	2102      	movs	r1, #2
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 f9ae 	bl	800bb34 <RCCEx_PLL2_Config>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7dc:	e002      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d109      	bne.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7ea:	4b29      	ldr	r3, [pc, #164]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f6:	4926      	ldr	r1, [pc, #152]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a7fc:	e001      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3324      	adds	r3, #36	; 0x24
 800a812:	2102      	movs	r1, #2
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fa3f 	bl	800bc98 <RCCEx_PLL3_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d033      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a838:	d017      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a83a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a83e:	d811      	bhi.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a844:	d013      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a84a:	d80b      	bhi.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d010      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a854:	d106      	bne.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a856:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85a:	4a0d      	ldr	r2, [pc, #52]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a85c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a862:	e007      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	75fb      	strb	r3, [r7, #23]
      break;
 800a868:	e004      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a86a:	bf00      	nop
 800a86c:	e002      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a86e:	bf00      	nop
 800a870:	e000      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a872:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10c      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a87a:	4b05      	ldr	r3, [pc, #20]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a886:	4902      	ldr	r1, [pc, #8]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a888:	4313      	orrs	r3, r2
 800a88a:	654b      	str	r3, [r1, #84]	; 0x54
 800a88c:	e004      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a88e:	bf00      	nop
 800a890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d008      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8a4:	4b31      	ldr	r3, [pc, #196]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b0:	492e      	ldr	r1, [pc, #184]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d009      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a8c2:	4b2a      	ldr	r3, [pc, #168]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a8d0:	4926      	ldr	r1, [pc, #152]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d008      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8e2:	4b22      	ldr	r3, [pc, #136]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8ee:	491f      	ldr	r1, [pc, #124]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00d      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a900:	4b1a      	ldr	r3, [pc, #104]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	4a19      	ldr	r2, [pc, #100]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a906:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a90a:	6113      	str	r3, [r2, #16]
 800a90c:	4b17      	ldr	r3, [pc, #92]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a90e:	691a      	ldr	r2, [r3, #16]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a916:	4915      	ldr	r1, [pc, #84]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	da08      	bge.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a924:	4b11      	ldr	r3, [pc, #68]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a928:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a930:	490e      	ldr	r1, [pc, #56]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a932:	4313      	orrs	r3, r2
 800a934:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d009      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a942:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a946:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a950:	4906      	ldr	r1, [pc, #24]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a952:	4313      	orrs	r3, r2
 800a954:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a956:	7dbb      	ldrb	r3, [r7, #22]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	e000      	b.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	58024400 	.word	0x58024400

0800a970 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b090      	sub	sp, #64	; 0x40
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a97e:	f040 8095 	bne.w	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a982:	4b97      	ldr	r3, [pc, #604]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a986:	f003 0307 	and.w	r3, r3, #7
 800a98a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	2b04      	cmp	r3, #4
 800a990:	f200 8088 	bhi.w	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a994:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99a:	bf00      	nop
 800a99c:	0800a9b1 	.word	0x0800a9b1
 800a9a0:	0800a9d9 	.word	0x0800a9d9
 800a9a4:	0800aa01 	.word	0x0800aa01
 800a9a8:	0800aa9d 	.word	0x0800aa9d
 800a9ac:	0800aa29 	.word	0x0800aa29
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9b0:	4b8b      	ldr	r3, [pc, #556]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9bc:	d108      	bne.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 ff64 	bl	800b890 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9cc:	f000 bc94 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9d4:	f000 bc90 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9d8:	4b81      	ldr	r3, [pc, #516]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9e4:	d108      	bne.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9e6:	f107 0318 	add.w	r3, r7, #24
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 fca8 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9f4:	f000 bc80 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9fc:	f000 bc7c 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa00:	4b77      	ldr	r3, [pc, #476]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa0c:	d108      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa0e:	f107 030c 	add.w	r3, r7, #12
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 fde8 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa1c:	f000 bc6c 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa24:	f000 bc68 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa28:	4b6d      	ldr	r3, [pc, #436]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa30:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa32:	4b6b      	ldr	r3, [pc, #428]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0304 	and.w	r3, r3, #4
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d10c      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800aa3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d109      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa44:	4b66      	ldr	r3, [pc, #408]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	08db      	lsrs	r3, r3, #3
 800aa4a:	f003 0303 	and.w	r3, r3, #3
 800aa4e:	4a65      	ldr	r2, [pc, #404]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800aa50:	fa22 f303 	lsr.w	r3, r2, r3
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa56:	e01f      	b.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa58:	4b61      	ldr	r3, [pc, #388]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa64:	d106      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800aa66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa6c:	d102      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa6e:	4b5e      	ldr	r3, [pc, #376]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa72:	e011      	b.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa74:	4b5a      	ldr	r3, [pc, #360]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa80:	d106      	bne.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa88:	d102      	bne.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa8a:	4b58      	ldr	r3, [pc, #352]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800aa8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa8e:	e003      	b.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa94:	f000 bc30 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa98:	f000 bc2e 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa9c:	4b54      	ldr	r3, [pc, #336]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa0:	f000 bc2a 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa8:	f000 bc26 	b.w	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab2:	f040 809f 	bne.w	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800aab6:	4b4a      	ldr	r3, [pc, #296]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800aabe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac6:	d04d      	beq.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aace:	f200 8084 	bhi.w	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	2bc0      	cmp	r3, #192	; 0xc0
 800aad6:	d07d      	beq.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	2bc0      	cmp	r3, #192	; 0xc0
 800aadc:	d87d      	bhi.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	2b80      	cmp	r3, #128	; 0x80
 800aae2:	d02d      	beq.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	2b80      	cmp	r3, #128	; 0x80
 800aae8:	d877      	bhi.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	2b40      	cmp	r3, #64	; 0x40
 800aaf4:	d012      	beq.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800aaf6:	e070      	b.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaf8:	4b39      	ldr	r3, [pc, #228]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab04:	d107      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fec0 	bl	800b890 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab14:	e3f0      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab1a:	e3ed      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab1c:	4b30      	ldr	r3, [pc, #192]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab28:	d107      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab2a:	f107 0318 	add.w	r3, r7, #24
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fc06 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab38:	e3de      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab3e:	e3db      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab40:	4b27      	ldr	r3, [pc, #156]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab4c:	d107      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab4e:	f107 030c 	add.w	r3, r7, #12
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fd48 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab5c:	e3cc      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab62:	e3c9      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab64:	4b1e      	ldr	r3, [pc, #120]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab6c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab6e:	4b1c      	ldr	r3, [pc, #112]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0304 	and.w	r3, r3, #4
 800ab76:	2b04      	cmp	r3, #4
 800ab78:	d10c      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800ab7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d109      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab80:	4b17      	ldr	r3, [pc, #92]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	08db      	lsrs	r3, r3, #3
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	4a16      	ldr	r2, [pc, #88]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ab8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab92:	e01e      	b.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab94:	4b12      	ldr	r3, [pc, #72]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aba0:	d106      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aba8:	d102      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800abaa:	4b0f      	ldr	r3, [pc, #60]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abae:	e010      	b.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abb0:	4b0b      	ldr	r3, [pc, #44]	; (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abbc:	d106      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800abbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abc4:	d102      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800abc6:	4b09      	ldr	r3, [pc, #36]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abca:	e002      	b.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800abd0:	e392      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800abd2:	e391      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800abd4:	4b06      	ldr	r3, [pc, #24]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abd8:	e38e      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abde:	e38b      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800abe0:	58024400 	.word	0x58024400
 800abe4:	03d09000 	.word	0x03d09000
 800abe8:	003d0900 	.word	0x003d0900
 800abec:	02dc6c00 	.word	0x02dc6c00
 800abf0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abfa:	f040 809c 	bne.w	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800abfe:	4b9d      	ldr	r3, [pc, #628]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac02:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ac06:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac0e:	d054      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800ac10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac16:	f200 808b 	bhi.w	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac20:	f000 8083 	beq.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac2a:	f200 8081 	bhi.w	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac34:	d02f      	beq.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac3c:	d878      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d004      	beq.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac4a:	d012      	beq.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800ac4c:	e070      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac4e:	4b89      	ldr	r3, [pc, #548]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac5a:	d107      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 fe15 	bl	800b890 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac6a:	e345      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac70:	e342      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac72:	4b80      	ldr	r3, [pc, #512]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac7e:	d107      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac80:	f107 0318 	add.w	r3, r7, #24
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fb5b 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac8e:	e333      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac94:	e330      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac96:	4b77      	ldr	r3, [pc, #476]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aca2:	d107      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aca4:	f107 030c 	add.w	r3, r7, #12
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 fc9d 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800acb2:	e321      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acb8:	e31e      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800acba:	4b6e      	ldr	r3, [pc, #440]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800acbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acc2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acc4:	4b6b      	ldr	r3, [pc, #428]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0304 	and.w	r3, r3, #4
 800accc:	2b04      	cmp	r3, #4
 800acce:	d10c      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d109      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acd6:	4b67      	ldr	r3, [pc, #412]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	08db      	lsrs	r3, r3, #3
 800acdc:	f003 0303 	and.w	r3, r3, #3
 800ace0:	4a65      	ldr	r2, [pc, #404]	; (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ace2:	fa22 f303 	lsr.w	r3, r2, r3
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace8:	e01e      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acea:	4b62      	ldr	r3, [pc, #392]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acf6:	d106      	bne.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800acf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acfe:	d102      	bne.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ad00:	4b5e      	ldr	r3, [pc, #376]	; (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad04:	e010      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad06:	4b5b      	ldr	r3, [pc, #364]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad12:	d106      	bne.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ad14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad1a:	d102      	bne.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ad1c:	4b58      	ldr	r3, [pc, #352]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ad1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad20:	e002      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ad26:	e2e7      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ad28:	e2e6      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ad2a:	4b56      	ldr	r3, [pc, #344]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad2e:	e2e3      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad34:	e2e0      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad3c:	f040 80a7 	bne.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ad40:	4b4c      	ldr	r3, [pc, #304]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ad42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad44:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ad48:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad50:	d055      	beq.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad58:	f200 8096 	bhi.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad62:	f000 8084 	beq.w	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800ad66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad6c:	f200 808c 	bhi.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad76:	d030      	beq.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad7e:	f200 8083 	bhi.w	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d004      	beq.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad8e:	d012      	beq.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800ad90:	e07a      	b.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad92:	4b38      	ldr	r3, [pc, #224]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad9e:	d107      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ada0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 fd73 	bl	800b890 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adae:	e2a3      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adb4:	e2a0      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adb6:	4b2f      	ldr	r3, [pc, #188]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adc2:	d107      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc4:	f107 0318 	add.w	r3, r7, #24
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fab9 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800add2:	e291      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800add8:	e28e      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adda:	4b26      	ldr	r3, [pc, #152]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ade2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade6:	d107      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ade8:	f107 030c 	add.w	r3, r7, #12
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fbfb 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adf6:	e27f      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adfc:	e27c      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800adfe:	4b1d      	ldr	r3, [pc, #116]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ae00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae06:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae08:	4b1a      	ldr	r3, [pc, #104]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b04      	cmp	r3, #4
 800ae12:	d10c      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800ae14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae1a:	4b16      	ldr	r3, [pc, #88]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	08db      	lsrs	r3, r3, #3
 800ae20:	f003 0303 	and.w	r3, r3, #3
 800ae24:	4a14      	ldr	r2, [pc, #80]	; (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ae26:	fa22 f303 	lsr.w	r3, r2, r3
 800ae2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae2c:	e01e      	b.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae2e:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae3a:	d106      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800ae3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae42:	d102      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae44:	4b0d      	ldr	r3, [pc, #52]	; (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae48:	e010      	b.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae56:	d106      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800ae58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae5e:	d102      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ae62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae64:	e002      	b.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ae6a:	e245      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ae6c:	e244      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae6e:	4b05      	ldr	r3, [pc, #20]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae72:	e241      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ae74:	58024400 	.word	0x58024400
 800ae78:	03d09000 	.word	0x03d09000
 800ae7c:	003d0900 	.word	0x003d0900
 800ae80:	02dc6c00 	.word	0x02dc6c00
 800ae84:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae8c:	e234      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae94:	f040 809c 	bne.w	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ae98:	4b9b      	ldr	r3, [pc, #620]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae9c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aea0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aea8:	d054      	beq.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeb0:	f200 808b 	bhi.w	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aeba:	f000 8083 	beq.w	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aec4:	f200 8081 	bhi.w	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aece:	d02f      	beq.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800aed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aed6:	d878      	bhi.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800aed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d004      	beq.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800aede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aee4:	d012      	beq.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800aee6:	e070      	b.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aee8:	4b87      	ldr	r3, [pc, #540]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aef4:	d107      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fcc8 	bl	800b890 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af04:	e1f8      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af0a:	e1f5      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af0c:	4b7e      	ldr	r3, [pc, #504]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af18:	d107      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af1a:	f107 0318 	add.w	r3, r7, #24
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 fa0e 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af28:	e1e6      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af2e:	e1e3      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af30:	4b75      	ldr	r3, [pc, #468]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af3c:	d107      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af3e:	f107 030c 	add.w	r3, r7, #12
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fb50 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af4c:	e1d4      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af52:	e1d1      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af54:	4b6c      	ldr	r3, [pc, #432]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af5e:	4b6a      	ldr	r3, [pc, #424]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b04      	cmp	r3, #4
 800af68:	d10c      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d109      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af70:	4b65      	ldr	r3, [pc, #404]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	08db      	lsrs	r3, r3, #3
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	4a64      	ldr	r2, [pc, #400]	; (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800af7c:	fa22 f303 	lsr.w	r3, r2, r3
 800af80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af82:	e01e      	b.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af84:	4b60      	ldr	r3, [pc, #384]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af90:	d106      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af98:	d102      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af9a:	4b5d      	ldr	r3, [pc, #372]	; (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800af9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af9e:	e010      	b.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afa0:	4b59      	ldr	r3, [pc, #356]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afac:	d106      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800afae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb4:	d102      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800afb6:	4b57      	ldr	r3, [pc, #348]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800afb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afba:	e002      	b.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800afc0:	e19a      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800afc2:	e199      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800afc4:	4b54      	ldr	r3, [pc, #336]	; (800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afc8:	e196      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afce:	e193      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800afd6:	d173      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800afd8:	4b4b      	ldr	r3, [pc, #300]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800afda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afe0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afe8:	d02f      	beq.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aff0:	d863      	bhi.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d004      	beq.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800affe:	d012      	beq.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800b000:	e05b      	b.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b002:	4b41      	ldr	r3, [pc, #260]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b00a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b00e:	d107      	bne.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b010:	f107 0318 	add.w	r3, r7, #24
 800b014:	4618      	mov	r0, r3
 800b016:	f000 f993 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b01e:	e16b      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b024:	e168      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b026:	4b38      	ldr	r3, [pc, #224]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b032:	d107      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b034:	f107 030c 	add.w	r3, r7, #12
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 fad5 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b042:	e159      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b048:	e156      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b04a:	4b2f      	ldr	r3, [pc, #188]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b04e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b052:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b054:	4b2c      	ldr	r3, [pc, #176]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0304 	and.w	r3, r3, #4
 800b05c:	2b04      	cmp	r3, #4
 800b05e:	d10c      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b062:	2b00      	cmp	r3, #0
 800b064:	d109      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b066:	4b28      	ldr	r3, [pc, #160]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	08db      	lsrs	r3, r3, #3
 800b06c:	f003 0303 	and.w	r3, r3, #3
 800b070:	4a26      	ldr	r2, [pc, #152]	; (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800b072:	fa22 f303 	lsr.w	r3, r2, r3
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b078:	e01e      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b07a:	4b23      	ldr	r3, [pc, #140]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b086:	d106      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800b088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b08e:	d102      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b090:	4b1f      	ldr	r3, [pc, #124]	; (800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b094:	e010      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b096:	4b1c      	ldr	r3, [pc, #112]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b09e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0a2:	d106      	bne.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800b0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0aa:	d102      	bne.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b0ac:	4b19      	ldr	r3, [pc, #100]	; (800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800b0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0b0:	e002      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b0b6:	e11f      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b0b8:	e11e      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0be:	e11b      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c6:	d13e      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b0ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d004      	beq.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0de:	d01d      	beq.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b0e0:	e02e      	b.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0e2:	4b09      	ldr	r3, [pc, #36]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0ee:	d107      	bne.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 fbcb 	bl	800b890 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b0fe:	e0fb      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b104:	e0f8      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b106:	bf00      	nop
 800b108:	58024400 	.word	0x58024400
 800b10c:	03d09000 	.word	0x03d09000
 800b110:	003d0900 	.word	0x003d0900
 800b114:	02dc6c00 	.word	0x02dc6c00
 800b118:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b11c:	4b79      	ldr	r3, [pc, #484]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b128:	d107      	bne.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b12a:	f107 0318 	add.w	r3, r7, #24
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 f906 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b138:	e0de      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b13e:	e0db      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800b140:	2300      	movs	r3, #0
 800b142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b144:	e0d8      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b14c:	f040 8085 	bne.w	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b150:	4b6c      	ldr	r3, [pc, #432]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b154:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b158:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b160:	d06b      	beq.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b168:	d874      	bhi.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b170:	d056      	beq.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b178:	d86c      	bhi.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b180:	d03b      	beq.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b188:	d864      	bhi.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b190:	d021      	beq.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800b192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b198:	d85c      	bhi.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1a6:	d004      	beq.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800b1a8:	e054      	b.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b1aa:	f000 f8b3 	bl	800b314 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1ae:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b1b0:	e0a2      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1b2:	4b54      	ldr	r3, [pc, #336]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1be:	d107      	bne.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1c0:	f107 0318 	add.w	r3, r7, #24
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f000 f8bb 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b1ce:	e093      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1d4:	e090      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1d6:	4b4b      	ldr	r3, [pc, #300]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1e2:	d107      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1e4:	f107 030c 	add.w	r3, r7, #12
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 f9fd 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b1f2:	e081      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1f8:	e07e      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b1fa:	4b42      	ldr	r3, [pc, #264]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b04      	cmp	r3, #4
 800b204:	d109      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b206:	4b3f      	ldr	r3, [pc, #252]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	08db      	lsrs	r3, r3, #3
 800b20c:	f003 0303 	and.w	r3, r3, #3
 800b210:	4a3d      	ldr	r2, [pc, #244]	; (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b212:	fa22 f303 	lsr.w	r3, r2, r3
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b218:	e06e      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b21e:	e06b      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b220:	4b38      	ldr	r3, [pc, #224]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b22c:	d102      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800b22e:	4b37      	ldr	r3, [pc, #220]	; (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b230:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b232:	e061      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b238:	e05e      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b23a:	4b32      	ldr	r3, [pc, #200]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b246:	d102      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800b248:	4b31      	ldr	r3, [pc, #196]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b24a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b24c:	e054      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b252:	e051      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b258:	e04e      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b260:	d148      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b262:	4b28      	ldr	r3, [pc, #160]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b26a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b272:	d02a      	beq.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b27a:	d838      	bhi.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800b27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d004      	beq.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b288:	d00d      	beq.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b28a:	e030      	b.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b28c:	4b1d      	ldr	r3, [pc, #116]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b298:	d102      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800b29a:	4b1d      	ldr	r3, [pc, #116]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b29c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b29e:	e02b      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2a4:	e028      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2a6:	4b17      	ldr	r3, [pc, #92]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2b2:	d107      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 fae9 	bl	800b890 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b2c2:	e019      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2c8:	e016      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2ca:	4b0e      	ldr	r3, [pc, #56]	; (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2d6:	d107      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d8:	f107 0318 	add.w	r3, r7, #24
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 f82f 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b2e6:	e007      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2ec:	e004      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2f2:	e001      	b.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3740      	adds	r7, #64	; 0x40
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	58024400 	.word	0x58024400
 800b308:	03d09000 	.word	0x03d09000
 800b30c:	003d0900 	.word	0x003d0900
 800b310:	02dc6c00 	.word	0x02dc6c00

0800b314 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b318:	f7fe fb46 	bl	80099a8 <HAL_RCC_GetHCLKFreq>
 800b31c:	4602      	mov	r2, r0
 800b31e:	4b06      	ldr	r3, [pc, #24]	; (800b338 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	091b      	lsrs	r3, r3, #4
 800b324:	f003 0307 	and.w	r3, r3, #7
 800b328:	4904      	ldr	r1, [pc, #16]	; (800b33c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b32a:	5ccb      	ldrb	r3, [r1, r3]
 800b32c:	f003 031f 	and.w	r3, r3, #31
 800b330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b334:	4618      	mov	r0, r3
 800b336:	bd80      	pop	{r7, pc}
 800b338:	58024400 	.word	0x58024400
 800b33c:	08018ccc 	.word	0x08018ccc

0800b340 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b340:	b480      	push	{r7}
 800b342:	b089      	sub	sp, #36	; 0x24
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b348:	4ba1      	ldr	r3, [pc, #644]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34c:	f003 0303 	and.w	r3, r3, #3
 800b350:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b352:	4b9f      	ldr	r3, [pc, #636]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b356:	0b1b      	lsrs	r3, r3, #12
 800b358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b35c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b35e:	4b9c      	ldr	r3, [pc, #624]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b362:	091b      	lsrs	r3, r3, #4
 800b364:	f003 0301 	and.w	r3, r3, #1
 800b368:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b36a:	4b99      	ldr	r3, [pc, #612]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36e:	08db      	lsrs	r3, r3, #3
 800b370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	fb02 f303 	mul.w	r3, r2, r3
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 8111 	beq.w	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	2b02      	cmp	r3, #2
 800b392:	f000 8083 	beq.w	800b49c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	2b02      	cmp	r3, #2
 800b39a:	f200 80a1 	bhi.w	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d056      	beq.n	800b458 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b3aa:	e099      	b.n	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ac:	4b88      	ldr	r3, [pc, #544]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0320 	and.w	r3, r3, #32
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d02d      	beq.n	800b414 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3b8:	4b85      	ldr	r3, [pc, #532]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	08db      	lsrs	r3, r3, #3
 800b3be:	f003 0303 	and.w	r3, r3, #3
 800b3c2:	4a84      	ldr	r2, [pc, #528]	; (800b5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b3c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	ee07 3a90 	vmov	s15, r3
 800b3d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	ee07 3a90 	vmov	s15, r3
 800b3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e2:	4b7b      	ldr	r3, [pc, #492]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b40e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b412:	e087      	b.n	800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b41e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b5dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b426:	4b6a      	ldr	r3, [pc, #424]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b42e:	ee07 3a90 	vmov	s15, r3
 800b432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b436:	ed97 6a03 	vldr	s12, [r7, #12]
 800b43a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b456:	e065      	b.n	800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b462:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46a:	4b59      	ldr	r3, [pc, #356]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b47e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b49a:	e043      	b.n	800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ae:	4b48      	ldr	r3, [pc, #288]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4de:	e021      	b.n	800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f2:	4b37      	ldr	r3, [pc, #220]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b502:	ed97 6a03 	vldr	s12, [r7, #12]
 800b506:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b50a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b50e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b522:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b524:	4b2a      	ldr	r3, [pc, #168]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b528:	0a5b      	lsrs	r3, r3, #9
 800b52a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b52e:	ee07 3a90 	vmov	s15, r3
 800b532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b53a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b53e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b54a:	ee17 2a90 	vmov	r2, s15
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b552:	4b1f      	ldr	r3, [pc, #124]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b556:	0c1b      	lsrs	r3, r3, #16
 800b558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b55c:	ee07 3a90 	vmov	s15, r3
 800b560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b56c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b578:	ee17 2a90 	vmov	r2, s15
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b580:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b584:	0e1b      	lsrs	r3, r3, #24
 800b586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b58a:	ee07 3a90 	vmov	s15, r3
 800b58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b59a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b59e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a6:	ee17 2a90 	vmov	r2, s15
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b5ae:	e008      	b.n	800b5c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	609a      	str	r2, [r3, #8]
}
 800b5c2:	bf00      	nop
 800b5c4:	3724      	adds	r7, #36	; 0x24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	58024400 	.word	0x58024400
 800b5d4:	03d09000 	.word	0x03d09000
 800b5d8:	46000000 	.word	0x46000000
 800b5dc:	4c742400 	.word	0x4c742400
 800b5e0:	4a742400 	.word	0x4a742400
 800b5e4:	4c371b00 	.word	0x4c371b00

0800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b089      	sub	sp, #36	; 0x24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5f0:	4ba1      	ldr	r3, [pc, #644]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f4:	f003 0303 	and.w	r3, r3, #3
 800b5f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b5fa:	4b9f      	ldr	r3, [pc, #636]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fe:	0d1b      	lsrs	r3, r3, #20
 800b600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b604:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b606:	4b9c      	ldr	r3, [pc, #624]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60a:	0a1b      	lsrs	r3, r3, #8
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b612:	4b99      	ldr	r3, [pc, #612]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b616:	08db      	lsrs	r3, r3, #3
 800b618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	fb02 f303 	mul.w	r3, r2, r3
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 8111 	beq.w	800b858 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	f000 8083 	beq.w	800b744 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	2b02      	cmp	r3, #2
 800b642:	f200 80a1 	bhi.w	800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d003      	beq.n	800b654 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d056      	beq.n	800b700 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b652:	e099      	b.n	800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b654:	4b88      	ldr	r3, [pc, #544]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0320 	and.w	r3, r3, #32
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d02d      	beq.n	800b6bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b660:	4b85      	ldr	r3, [pc, #532]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	08db      	lsrs	r3, r3, #3
 800b666:	f003 0303 	and.w	r3, r3, #3
 800b66a:	4a84      	ldr	r2, [pc, #528]	; (800b87c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b66c:	fa22 f303 	lsr.w	r3, r2, r3
 800b670:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	ee07 3a90 	vmov	s15, r3
 800b678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	ee07 3a90 	vmov	s15, r3
 800b682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b68a:	4b7b      	ldr	r3, [pc, #492]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b692:	ee07 3a90 	vmov	s15, r3
 800b696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b69e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b6ba:	e087      	b.n	800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b884 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ce:	4b6a      	ldr	r3, [pc, #424]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d6:	ee07 3a90 	vmov	s15, r3
 800b6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6fe:	e065      	b.n	800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b712:	4b59      	ldr	r3, [pc, #356]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71a:	ee07 3a90 	vmov	s15, r3
 800b71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b722:	ed97 6a03 	vldr	s12, [r7, #12]
 800b726:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b742:	e043      	b.n	800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	ee07 3a90 	vmov	s15, r3
 800b74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b756:	4b48      	ldr	r3, [pc, #288]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75e:	ee07 3a90 	vmov	s15, r3
 800b762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b766:	ed97 6a03 	vldr	s12, [r7, #12]
 800b76a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b786:	e021      	b.n	800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b792:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79a:	4b37      	ldr	r3, [pc, #220]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a2:	ee07 3a90 	vmov	s15, r3
 800b7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b7cc:	4b2a      	ldr	r3, [pc, #168]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d0:	0a5b      	lsrs	r3, r3, #9
 800b7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7d6:	ee07 3a90 	vmov	s15, r3
 800b7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7f2:	ee17 2a90 	vmov	r2, s15
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b7fa:	4b1f      	ldr	r3, [pc, #124]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fe:	0c1b      	lsrs	r3, r3, #16
 800b800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b804:	ee07 3a90 	vmov	s15, r3
 800b808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b810:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b814:	edd7 6a07 	vldr	s13, [r7, #28]
 800b818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b81c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b820:	ee17 2a90 	vmov	r2, s15
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b828:	4b13      	ldr	r3, [pc, #76]	; (800b878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82c:	0e1b      	lsrs	r3, r3, #24
 800b82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b83e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b842:	edd7 6a07 	vldr	s13, [r7, #28]
 800b846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b84a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b84e:	ee17 2a90 	vmov	r2, s15
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b856:	e008      	b.n	800b86a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	609a      	str	r2, [r3, #8]
}
 800b86a:	bf00      	nop
 800b86c:	3724      	adds	r7, #36	; 0x24
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	58024400 	.word	0x58024400
 800b87c:	03d09000 	.word	0x03d09000
 800b880:	46000000 	.word	0x46000000
 800b884:	4c742400 	.word	0x4c742400
 800b888:	4a742400 	.word	0x4a742400
 800b88c:	4c371b00 	.word	0x4c371b00

0800b890 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b890:	b480      	push	{r7}
 800b892:	b089      	sub	sp, #36	; 0x24
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b898:	4ba0      	ldr	r3, [pc, #640]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b8a2:	4b9e      	ldr	r3, [pc, #632]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a6:	091b      	lsrs	r3, r3, #4
 800b8a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b8ae:	4b9b      	ldr	r3, [pc, #620]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b8b8:	4b98      	ldr	r3, [pc, #608]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8bc:	08db      	lsrs	r3, r3, #3
 800b8be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	fb02 f303 	mul.w	r3, r2, r3
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 8111 	beq.w	800bafe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	f000 8083 	beq.w	800b9ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	f200 80a1 	bhi.w	800ba2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d003      	beq.n	800b8fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d056      	beq.n	800b9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b8f8:	e099      	b.n	800ba2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8fa:	4b88      	ldr	r3, [pc, #544]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f003 0320 	and.w	r3, r3, #32
 800b902:	2b00      	cmp	r3, #0
 800b904:	d02d      	beq.n	800b962 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b906:	4b85      	ldr	r3, [pc, #532]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	08db      	lsrs	r3, r3, #3
 800b90c:	f003 0303 	and.w	r3, r3, #3
 800b910:	4a83      	ldr	r2, [pc, #524]	; (800bb20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b912:	fa22 f303 	lsr.w	r3, r2, r3
 800b916:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	ee07 3a90 	vmov	s15, r3
 800b91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	ee07 3a90 	vmov	s15, r3
 800b928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b930:	4b7a      	ldr	r3, [pc, #488]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b938:	ee07 3a90 	vmov	s15, r3
 800b93c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b940:	ed97 6a03 	vldr	s12, [r7, #12]
 800b944:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bb24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b94c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b960:	e087      	b.n	800ba72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	ee07 3a90 	vmov	s15, r3
 800b968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bb28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b974:	4b69      	ldr	r3, [pc, #420]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97c:	ee07 3a90 	vmov	s15, r3
 800b980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b984:	ed97 6a03 	vldr	s12, [r7, #12]
 800b988:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bb24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b98c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9a4:	e065      	b.n	800ba72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	ee07 3a90 	vmov	s15, r3
 800b9ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bb2c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b9b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b8:	4b58      	ldr	r3, [pc, #352]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c0:	ee07 3a90 	vmov	s15, r3
 800b9c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bb24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9e8:	e043      	b.n	800ba72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	ee07 3a90 	vmov	s15, r3
 800b9f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b9f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fc:	4b47      	ldr	r3, [pc, #284]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba04:	ee07 3a90 	vmov	s15, r3
 800ba08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba10:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bb24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba2c:	e021      	b.n	800ba72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba38:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bb28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba40:	4b36      	ldr	r3, [pc, #216]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba48:	ee07 3a90 	vmov	s15, r3
 800ba4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba50:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba54:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bb24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba70:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ba72:	4b2a      	ldr	r3, [pc, #168]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba76:	0a5b      	lsrs	r3, r3, #9
 800ba78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba7c:	ee07 3a90 	vmov	s15, r3
 800ba80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba98:	ee17 2a90 	vmov	r2, s15
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800baa0:	4b1e      	ldr	r3, [pc, #120]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa4:	0c1b      	lsrs	r3, r3, #16
 800baa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baaa:	ee07 3a90 	vmov	s15, r3
 800baae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baba:	edd7 6a07 	vldr	s13, [r7, #28]
 800babe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bac6:	ee17 2a90 	vmov	r2, s15
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800bace:	4b13      	ldr	r3, [pc, #76]	; (800bb1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad2:	0e1b      	lsrs	r3, r3, #24
 800bad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bae8:	edd7 6a07 	vldr	s13, [r7, #28]
 800baec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baf4:	ee17 2a90 	vmov	r2, s15
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bafc:	e008      	b.n	800bb10 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	609a      	str	r2, [r3, #8]
}
 800bb10:	bf00      	nop
 800bb12:	3724      	adds	r7, #36	; 0x24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	58024400 	.word	0x58024400
 800bb20:	03d09000 	.word	0x03d09000
 800bb24:	46000000 	.word	0x46000000
 800bb28:	4c742400 	.word	0x4c742400
 800bb2c:	4a742400 	.word	0x4a742400
 800bb30:	4c371b00 	.word	0x4c371b00

0800bb34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb42:	4b53      	ldr	r3, [pc, #332]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb46:	f003 0303 	and.w	r3, r3, #3
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d101      	bne.n	800bb52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e099      	b.n	800bc86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb52:	4b4f      	ldr	r3, [pc, #316]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a4e      	ldr	r2, [pc, #312]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bb58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb5e:	f7f7 fed7 	bl	8003910 <HAL_GetTick>
 800bb62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb64:	e008      	b.n	800bb78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bb66:	f7f7 fed3 	bl	8003910 <HAL_GetTick>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d901      	bls.n	800bb78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e086      	b.n	800bc86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb78:	4b45      	ldr	r3, [pc, #276]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d1f0      	bne.n	800bb66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb84:	4b42      	ldr	r3, [pc, #264]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	031b      	lsls	r3, r3, #12
 800bb92:	493f      	ldr	r1, [pc, #252]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	628b      	str	r3, [r1, #40]	; 0x28
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	025b      	lsls	r3, r3, #9
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	431a      	orrs	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	041b      	lsls	r3, r3, #16
 800bbb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	061b      	lsls	r3, r3, #24
 800bbc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bbc8:	4931      	ldr	r1, [pc, #196]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbce:	4b30      	ldr	r3, [pc, #192]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	492d      	ldr	r1, [pc, #180]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbe0:	4b2b      	ldr	r3, [pc, #172]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	f023 0220 	bic.w	r2, r3, #32
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	4928      	ldr	r1, [pc, #160]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bbf2:	4b27      	ldr	r3, [pc, #156]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	4a26      	ldr	r2, [pc, #152]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bbf8:	f023 0310 	bic.w	r3, r3, #16
 800bbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bbfe:	4b24      	ldr	r3, [pc, #144]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc02:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <RCCEx_PLL2_Config+0x160>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	69d2      	ldr	r2, [r2, #28]
 800bc0a:	00d2      	lsls	r2, r2, #3
 800bc0c:	4920      	ldr	r1, [pc, #128]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc12:	4b1f      	ldr	r3, [pc, #124]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc16:	4a1e      	ldr	r2, [pc, #120]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc18:	f043 0310 	orr.w	r3, r3, #16
 800bc1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d106      	bne.n	800bc32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc24:	4b1a      	ldr	r3, [pc, #104]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc28:	4a19      	ldr	r2, [pc, #100]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc30:	e00f      	b.n	800bc52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d106      	bne.n	800bc46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc38:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3c:	4a14      	ldr	r2, [pc, #80]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc44:	e005      	b.n	800bc52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc46:	4b12      	ldr	r3, [pc, #72]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4a:	4a11      	ldr	r2, [pc, #68]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc52:	4b0f      	ldr	r3, [pc, #60]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a0e      	ldr	r2, [pc, #56]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc5e:	f7f7 fe57 	bl	8003910 <HAL_GetTick>
 800bc62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc64:	e008      	b.n	800bc78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bc66:	f7f7 fe53 	bl	8003910 <HAL_GetTick>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d901      	bls.n	800bc78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc74:	2303      	movs	r3, #3
 800bc76:	e006      	b.n	800bc86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc78:	4b05      	ldr	r3, [pc, #20]	; (800bc90 <RCCEx_PLL2_Config+0x15c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d0f0      	beq.n	800bc66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	58024400 	.word	0x58024400
 800bc94:	ffff0007 	.word	0xffff0007

0800bc98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bca6:	4b53      	ldr	r3, [pc, #332]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcaa:	f003 0303 	and.w	r3, r3, #3
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d101      	bne.n	800bcb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e099      	b.n	800bdea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bcb6:	4b4f      	ldr	r3, [pc, #316]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a4e      	ldr	r2, [pc, #312]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bcbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcc2:	f7f7 fe25 	bl	8003910 <HAL_GetTick>
 800bcc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcc8:	e008      	b.n	800bcdc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bcca:	f7f7 fe21 	bl	8003910 <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d901      	bls.n	800bcdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e086      	b.n	800bdea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcdc:	4b45      	ldr	r3, [pc, #276]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1f0      	bne.n	800bcca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bce8:	4b42      	ldr	r3, [pc, #264]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	051b      	lsls	r3, r3, #20
 800bcf6:	493f      	ldr	r1, [pc, #252]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	628b      	str	r3, [r1, #40]	; 0x28
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	025b      	lsls	r3, r3, #9
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	431a      	orrs	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	3b01      	subs	r3, #1
 800bd18:	041b      	lsls	r3, r3, #16
 800bd1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	061b      	lsls	r3, r3, #24
 800bd28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd2c:	4931      	ldr	r1, [pc, #196]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd32:	4b30      	ldr	r3, [pc, #192]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	492d      	ldr	r1, [pc, #180]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd44:	4b2b      	ldr	r3, [pc, #172]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	699b      	ldr	r3, [r3, #24]
 800bd50:	4928      	ldr	r1, [pc, #160]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd56:	4b27      	ldr	r3, [pc, #156]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5a:	4a26      	ldr	r2, [pc, #152]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd62:	4b24      	ldr	r3, [pc, #144]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd66:	4b24      	ldr	r3, [pc, #144]	; (800bdf8 <RCCEx_PLL3_Config+0x160>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	69d2      	ldr	r2, [r2, #28]
 800bd6e:	00d2      	lsls	r2, r2, #3
 800bd70:	4920      	ldr	r1, [pc, #128]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd76:	4b1f      	ldr	r3, [pc, #124]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7a:	4a1e      	ldr	r2, [pc, #120]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d106      	bne.n	800bd96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd88:	4b1a      	ldr	r3, [pc, #104]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	4a19      	ldr	r2, [pc, #100]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bd92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd94:	e00f      	b.n	800bdb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d106      	bne.n	800bdaa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd9c:	4b15      	ldr	r3, [pc, #84]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda0:	4a14      	ldr	r2, [pc, #80]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bda2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bda6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bda8:	e005      	b.n	800bdb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bdaa:	4b12      	ldr	r3, [pc, #72]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	4a11      	ldr	r2, [pc, #68]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bdb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a0e      	ldr	r2, [pc, #56]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bdbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdc2:	f7f7 fda5 	bl	8003910 <HAL_GetTick>
 800bdc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdc8:	e008      	b.n	800bddc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bdca:	f7f7 fda1 	bl	8003910 <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	2b02      	cmp	r3, #2
 800bdd6:	d901      	bls.n	800bddc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdd8:	2303      	movs	r3, #3
 800bdda:	e006      	b.n	800bdea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bddc:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <RCCEx_PLL3_Config+0x15c>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0f0      	beq.n	800bdca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	58024400 	.word	0x58024400
 800bdf8:	ffff0007 	.word	0xffff0007

0800bdfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d101      	bne.n	800be0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e0f1      	b.n	800bff2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a78      	ldr	r2, [pc, #480]	; (800bffc <HAL_SPI_Init+0x200>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d00f      	beq.n	800be3e <HAL_SPI_Init+0x42>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a77      	ldr	r2, [pc, #476]	; (800c000 <HAL_SPI_Init+0x204>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d00a      	beq.n	800be3e <HAL_SPI_Init+0x42>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a75      	ldr	r2, [pc, #468]	; (800c004 <HAL_SPI_Init+0x208>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d005      	beq.n	800be3e <HAL_SPI_Init+0x42>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	2b0f      	cmp	r3, #15
 800be38:	d901      	bls.n	800be3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e0d9      	b.n	800bff2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f8e2 	bl	800c008 <SPI_GetPacketSize>
 800be44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a6c      	ldr	r2, [pc, #432]	; (800bffc <HAL_SPI_Init+0x200>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d00c      	beq.n	800be6a <HAL_SPI_Init+0x6e>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a6a      	ldr	r2, [pc, #424]	; (800c000 <HAL_SPI_Init+0x204>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d007      	beq.n	800be6a <HAL_SPI_Init+0x6e>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a69      	ldr	r2, [pc, #420]	; (800c004 <HAL_SPI_Init+0x208>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d002      	beq.n	800be6a <HAL_SPI_Init+0x6e>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2b08      	cmp	r3, #8
 800be68:	d811      	bhi.n	800be8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be6e:	4a63      	ldr	r2, [pc, #396]	; (800bffc <HAL_SPI_Init+0x200>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d009      	beq.n	800be88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a61      	ldr	r2, [pc, #388]	; (800c000 <HAL_SPI_Init+0x204>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d004      	beq.n	800be88 <HAL_SPI_Init+0x8c>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a60      	ldr	r2, [pc, #384]	; (800c004 <HAL_SPI_Init+0x208>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d104      	bne.n	800be92 <HAL_SPI_Init+0x96>
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2b10      	cmp	r3, #16
 800be8c:	d901      	bls.n	800be92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e0af      	b.n	800bff2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d106      	bne.n	800beac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f7f6 f962 	bl	8002170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2202      	movs	r2, #2
 800beb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f022 0201 	bic.w	r2, r2, #1
 800bec2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bece:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bed8:	d119      	bne.n	800bf0e <HAL_SPI_Init+0x112>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bee2:	d103      	bne.n	800beec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d008      	beq.n	800befe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10c      	bne.n	800bf0e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800befc:	d107      	bne.n	800bf0e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	69da      	ldr	r2, [r3, #28]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf16:	431a      	orrs	r2, r3
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	431a      	orrs	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf20:	ea42 0103 	orr.w	r1, r2, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68da      	ldr	r2, [r3, #12]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	431a      	orrs	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	431a      	orrs	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	431a      	orrs	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	431a      	orrs	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	431a      	orrs	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf62:	431a      	orrs	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf6e:	ea42 0103 	orr.w	r1, r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d113      	bne.n	800bfae <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bfac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f022 0201 	bic.w	r2, r2, #1
 800bfbc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00a      	beq.n	800bfe0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	40013000 	.word	0x40013000
 800c000:	40003800 	.word	0x40003800
 800c004:	40003c00 	.word	0x40003c00

0800c008 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c014:	095b      	lsrs	r3, r3, #5
 800c016:	3301      	adds	r3, #1
 800c018:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	3301      	adds	r3, #1
 800c020:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	3307      	adds	r3, #7
 800c026:	08db      	lsrs	r3, r3, #3
 800c028:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c032:	4618      	mov	r0, r3
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e049      	b.n	800c0e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c056:	b2db      	uxtb	r3, r3
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d106      	bne.n	800c06a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f7f6 fe25 	bl	8002cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2202      	movs	r2, #2
 800c06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	3304      	adds	r3, #4
 800c07a:	4619      	mov	r1, r3
 800c07c:	4610      	mov	r0, r2
 800c07e:	f000 fc57 	bl	800c930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d001      	beq.n	800c104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	e054      	b.n	800c1ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2202      	movs	r2, #2
 800c108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68da      	ldr	r2, [r3, #12]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f042 0201 	orr.w	r2, r2, #1
 800c11a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a26      	ldr	r2, [pc, #152]	; (800c1bc <HAL_TIM_Base_Start_IT+0xd0>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d022      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12e:	d01d      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a22      	ldr	r2, [pc, #136]	; (800c1c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d018      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a21      	ldr	r2, [pc, #132]	; (800c1c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d013      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a1f      	ldr	r2, [pc, #124]	; (800c1c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d00e      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a1e      	ldr	r2, [pc, #120]	; (800c1cc <HAL_TIM_Base_Start_IT+0xe0>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d009      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a1c      	ldr	r2, [pc, #112]	; (800c1d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d004      	beq.n	800c16c <HAL_TIM_Base_Start_IT+0x80>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a1b      	ldr	r2, [pc, #108]	; (800c1d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d115      	bne.n	800c198 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689a      	ldr	r2, [r3, #8]
 800c172:	4b19      	ldr	r3, [pc, #100]	; (800c1d8 <HAL_TIM_Base_Start_IT+0xec>)
 800c174:	4013      	ands	r3, r2
 800c176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b06      	cmp	r3, #6
 800c17c:	d015      	beq.n	800c1aa <HAL_TIM_Base_Start_IT+0xbe>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c184:	d011      	beq.n	800c1aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f042 0201 	orr.w	r2, r2, #1
 800c194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c196:	e008      	b.n	800c1aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f042 0201 	orr.w	r2, r2, #1
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	e000      	b.n	800c1ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3714      	adds	r7, #20
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	40010000 	.word	0x40010000
 800c1c0:	40000400 	.word	0x40000400
 800c1c4:	40000800 	.word	0x40000800
 800c1c8:	40000c00 	.word	0x40000c00
 800c1cc:	40010400 	.word	0x40010400
 800c1d0:	40001800 	.word	0x40001800
 800c1d4:	40014000 	.word	0x40014000
 800c1d8:	00010007 	.word	0x00010007

0800c1dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e049      	b.n	800c282 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7f6 fd1c 	bl	8002c40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3304      	adds	r3, #4
 800c218:	4619      	mov	r1, r3
 800c21a:	4610      	mov	r0, r2
 800c21c:	f000 fb88 	bl	800c930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b082      	sub	sp, #8
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	f003 0302 	and.w	r3, r3, #2
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d122      	bne.n	800c2e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d11b      	bne.n	800c2e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f06f 0202 	mvn.w	r2, #2
 800c2b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	f003 0303 	and.w	r3, r3, #3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d003      	beq.n	800c2d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fb11 	bl	800c8f4 <HAL_TIM_IC_CaptureCallback>
 800c2d2:	e005      	b.n	800c2e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fb03 	bl	800c8e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fb14 	bl	800c908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	f003 0304 	and.w	r3, r3, #4
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d122      	bne.n	800c33a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	f003 0304 	and.w	r3, r3, #4
 800c2fe:	2b04      	cmp	r3, #4
 800c300:	d11b      	bne.n	800c33a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f06f 0204 	mvn.w	r2, #4
 800c30a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2202      	movs	r2, #2
 800c310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d003      	beq.n	800c328 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fae7 	bl	800c8f4 <HAL_TIM_IC_CaptureCallback>
 800c326:	e005      	b.n	800c334 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fad9 	bl	800c8e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 faea 	bl	800c908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	f003 0308 	and.w	r3, r3, #8
 800c344:	2b08      	cmp	r3, #8
 800c346:	d122      	bne.n	800c38e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	f003 0308 	and.w	r3, r3, #8
 800c352:	2b08      	cmp	r3, #8
 800c354:	d11b      	bne.n	800c38e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f06f 0208 	mvn.w	r2, #8
 800c35e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2204      	movs	r2, #4
 800c364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	f003 0303 	and.w	r3, r3, #3
 800c370:	2b00      	cmp	r3, #0
 800c372:	d003      	beq.n	800c37c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fabd 	bl	800c8f4 <HAL_TIM_IC_CaptureCallback>
 800c37a:	e005      	b.n	800c388 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 faaf 	bl	800c8e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fac0 	bl	800c908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	f003 0310 	and.w	r3, r3, #16
 800c398:	2b10      	cmp	r3, #16
 800c39a:	d122      	bne.n	800c3e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	f003 0310 	and.w	r3, r3, #16
 800c3a6:	2b10      	cmp	r3, #16
 800c3a8:	d11b      	bne.n	800c3e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f06f 0210 	mvn.w	r2, #16
 800c3b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2208      	movs	r2, #8
 800c3b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69db      	ldr	r3, [r3, #28]
 800c3c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d003      	beq.n	800c3d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fa93 	bl	800c8f4 <HAL_TIM_IC_CaptureCallback>
 800c3ce:	e005      	b.n	800c3dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fa85 	bl	800c8e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa96 	bl	800c908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d10e      	bne.n	800c40e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d107      	bne.n	800c40e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f06f 0201 	mvn.w	r2, #1
 800c406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7f5 fafb 	bl	8001a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c418:	2b80      	cmp	r3, #128	; 0x80
 800c41a:	d10e      	bne.n	800c43a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c426:	2b80      	cmp	r3, #128	; 0x80
 800c428:	d107      	bne.n	800c43a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 ff9f 	bl	800d378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c448:	d10e      	bne.n	800c468 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c454:	2b80      	cmp	r3, #128	; 0x80
 800c456:	d107      	bne.n	800c468 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 ff92 	bl	800d38c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c472:	2b40      	cmp	r3, #64	; 0x40
 800c474:	d10e      	bne.n	800c494 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c480:	2b40      	cmp	r3, #64	; 0x40
 800c482:	d107      	bne.n	800c494 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c48c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fa44 	bl	800c91c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	f003 0320 	and.w	r3, r3, #32
 800c49e:	2b20      	cmp	r3, #32
 800c4a0:	d10e      	bne.n	800c4c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f003 0320 	and.w	r3, r3, #32
 800c4ac:	2b20      	cmp	r3, #32
 800c4ae:	d107      	bne.n	800c4c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f06f 0220 	mvn.w	r2, #32
 800c4b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 ff52 	bl	800d364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c4c0:	bf00      	nop
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d101      	bne.n	800c4e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	e0ff      	b.n	800c6e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2b14      	cmp	r3, #20
 800c4f2:	f200 80f0 	bhi.w	800c6d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c4f6:	a201      	add	r2, pc, #4	; (adr r2, 800c4fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c551 	.word	0x0800c551
 800c500:	0800c6d7 	.word	0x0800c6d7
 800c504:	0800c6d7 	.word	0x0800c6d7
 800c508:	0800c6d7 	.word	0x0800c6d7
 800c50c:	0800c591 	.word	0x0800c591
 800c510:	0800c6d7 	.word	0x0800c6d7
 800c514:	0800c6d7 	.word	0x0800c6d7
 800c518:	0800c6d7 	.word	0x0800c6d7
 800c51c:	0800c5d3 	.word	0x0800c5d3
 800c520:	0800c6d7 	.word	0x0800c6d7
 800c524:	0800c6d7 	.word	0x0800c6d7
 800c528:	0800c6d7 	.word	0x0800c6d7
 800c52c:	0800c613 	.word	0x0800c613
 800c530:	0800c6d7 	.word	0x0800c6d7
 800c534:	0800c6d7 	.word	0x0800c6d7
 800c538:	0800c6d7 	.word	0x0800c6d7
 800c53c:	0800c655 	.word	0x0800c655
 800c540:	0800c6d7 	.word	0x0800c6d7
 800c544:	0800c6d7 	.word	0x0800c6d7
 800c548:	0800c6d7 	.word	0x0800c6d7
 800c54c:	0800c695 	.word	0x0800c695
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 fa84 	bl	800ca64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	699a      	ldr	r2, [r3, #24]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f042 0208 	orr.w	r2, r2, #8
 800c56a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	699a      	ldr	r2, [r3, #24]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0204 	bic.w	r2, r2, #4
 800c57a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6999      	ldr	r1, [r3, #24]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	691a      	ldr	r2, [r3, #16]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	430a      	orrs	r2, r1
 800c58c:	619a      	str	r2, [r3, #24]
      break;
 800c58e:	e0a5      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	4618      	mov	r0, r3
 800c598:	f000 faf4 	bl	800cb84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	699a      	ldr	r2, [r3, #24]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	699a      	ldr	r2, [r3, #24]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6999      	ldr	r1, [r3, #24]
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	021a      	lsls	r2, r3, #8
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	619a      	str	r2, [r3, #24]
      break;
 800c5d0:	e084      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f000 fb5d 	bl	800cc98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	69da      	ldr	r2, [r3, #28]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f042 0208 	orr.w	r2, r2, #8
 800c5ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	69da      	ldr	r2, [r3, #28]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f022 0204 	bic.w	r2, r2, #4
 800c5fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	69d9      	ldr	r1, [r3, #28]
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	691a      	ldr	r2, [r3, #16]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	430a      	orrs	r2, r1
 800c60e:	61da      	str	r2, [r3, #28]
      break;
 800c610:	e064      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68b9      	ldr	r1, [r7, #8]
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 fbc5 	bl	800cda8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69da      	ldr	r2, [r3, #28]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c62c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	69da      	ldr	r2, [r3, #28]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c63c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	69d9      	ldr	r1, [r3, #28]
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	021a      	lsls	r2, r3, #8
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	430a      	orrs	r2, r1
 800c650:	61da      	str	r2, [r3, #28]
      break;
 800c652:	e043      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68b9      	ldr	r1, [r7, #8]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fc0e 	bl	800ce7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f042 0208 	orr.w	r2, r2, #8
 800c66e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f022 0204 	bic.w	r2, r2, #4
 800c67e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	691a      	ldr	r2, [r3, #16]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	430a      	orrs	r2, r1
 800c690:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c692:	e023      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 fc52 	bl	800cf44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	021a      	lsls	r2, r3, #8
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c6d4:	e002      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c6da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop

0800c6f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c704:	2b01      	cmp	r3, #1
 800c706:	d101      	bne.n	800c70c <HAL_TIM_ConfigClockSource+0x1c>
 800c708:	2302      	movs	r3, #2
 800c70a:	e0dc      	b.n	800c8c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2202      	movs	r2, #2
 800c718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	4b6a      	ldr	r3, [pc, #424]	; (800c8d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c728:	4013      	ands	r3, r2
 800c72a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a64      	ldr	r2, [pc, #400]	; (800c8d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c742:	4293      	cmp	r3, r2
 800c744:	f000 80a9 	beq.w	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c748:	4a62      	ldr	r2, [pc, #392]	; (800c8d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	f200 80ae 	bhi.w	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c750:	4a61      	ldr	r2, [pc, #388]	; (800c8d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c752:	4293      	cmp	r3, r2
 800c754:	f000 80a1 	beq.w	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c758:	4a5f      	ldr	r2, [pc, #380]	; (800c8d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	f200 80a6 	bhi.w	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c760:	4a5e      	ldr	r2, [pc, #376]	; (800c8dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c762:	4293      	cmp	r3, r2
 800c764:	f000 8099 	beq.w	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c768:	4a5c      	ldr	r2, [pc, #368]	; (800c8dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	f200 809e 	bhi.w	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c770:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c774:	f000 8091 	beq.w	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c778:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c77c:	f200 8096 	bhi.w	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c784:	f000 8089 	beq.w	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c78c:	f200 808e 	bhi.w	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c794:	d03e      	beq.n	800c814 <HAL_TIM_ConfigClockSource+0x124>
 800c796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c79a:	f200 8087 	bhi.w	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c79e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7a2:	f000 8086 	beq.w	800c8b2 <HAL_TIM_ConfigClockSource+0x1c2>
 800c7a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7aa:	d87f      	bhi.n	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c7ac:	2b70      	cmp	r3, #112	; 0x70
 800c7ae:	d01a      	beq.n	800c7e6 <HAL_TIM_ConfigClockSource+0xf6>
 800c7b0:	2b70      	cmp	r3, #112	; 0x70
 800c7b2:	d87b      	bhi.n	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c7b4:	2b60      	cmp	r3, #96	; 0x60
 800c7b6:	d050      	beq.n	800c85a <HAL_TIM_ConfigClockSource+0x16a>
 800c7b8:	2b60      	cmp	r3, #96	; 0x60
 800c7ba:	d877      	bhi.n	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c7bc:	2b50      	cmp	r3, #80	; 0x50
 800c7be:	d03c      	beq.n	800c83a <HAL_TIM_ConfigClockSource+0x14a>
 800c7c0:	2b50      	cmp	r3, #80	; 0x50
 800c7c2:	d873      	bhi.n	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c7c4:	2b40      	cmp	r3, #64	; 0x40
 800c7c6:	d058      	beq.n	800c87a <HAL_TIM_ConfigClockSource+0x18a>
 800c7c8:	2b40      	cmp	r3, #64	; 0x40
 800c7ca:	d86f      	bhi.n	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c7cc:	2b30      	cmp	r3, #48	; 0x30
 800c7ce:	d064      	beq.n	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c7d0:	2b30      	cmp	r3, #48	; 0x30
 800c7d2:	d86b      	bhi.n	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c7d4:	2b20      	cmp	r3, #32
 800c7d6:	d060      	beq.n	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c7d8:	2b20      	cmp	r3, #32
 800c7da:	d867      	bhi.n	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d05c      	beq.n	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c7e0:	2b10      	cmp	r3, #16
 800c7e2:	d05a      	beq.n	800c89a <HAL_TIM_ConfigClockSource+0x1aa>
 800c7e4:	e062      	b.n	800c8ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	6899      	ldr	r1, [r3, #8]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	f000 fc89 	bl	800d10c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	609a      	str	r2, [r3, #8]
      break;
 800c812:	e04f      	b.n	800c8b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	6899      	ldr	r1, [r3, #8]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f000 fc72 	bl	800d10c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	689a      	ldr	r2, [r3, #8]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c836:	609a      	str	r2, [r3, #8]
      break;
 800c838:	e03c      	b.n	800c8b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6818      	ldr	r0, [r3, #0]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	6859      	ldr	r1, [r3, #4]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	461a      	mov	r2, r3
 800c848:	f000 fbe2 	bl	800d010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2150      	movs	r1, #80	; 0x50
 800c852:	4618      	mov	r0, r3
 800c854:	f000 fc3c 	bl	800d0d0 <TIM_ITRx_SetConfig>
      break;
 800c858:	e02c      	b.n	800c8b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6818      	ldr	r0, [r3, #0]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	6859      	ldr	r1, [r3, #4]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	461a      	mov	r2, r3
 800c868:	f000 fc01 	bl	800d06e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2160      	movs	r1, #96	; 0x60
 800c872:	4618      	mov	r0, r3
 800c874:	f000 fc2c 	bl	800d0d0 <TIM_ITRx_SetConfig>
      break;
 800c878:	e01c      	b.n	800c8b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6818      	ldr	r0, [r3, #0]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	6859      	ldr	r1, [r3, #4]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	461a      	mov	r2, r3
 800c888:	f000 fbc2 	bl	800d010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2140      	movs	r1, #64	; 0x40
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fc1c 	bl	800d0d0 <TIM_ITRx_SetConfig>
      break;
 800c898:	e00c      	b.n	800c8b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	f000 fc13 	bl	800d0d0 <TIM_ITRx_SetConfig>
      break;
 800c8aa:	e003      	b.n	800c8b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c8b0:	e000      	b.n	800c8b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c8b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	ffceff88 	.word	0xffceff88
 800c8d4:	00100040 	.word	0x00100040
 800c8d8:	00100030 	.word	0x00100030
 800c8dc:	00100020 	.word	0x00100020

0800c8e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c910:	bf00      	nop
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c924:	bf00      	nop
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a40      	ldr	r2, [pc, #256]	; (800ca44 <TIM_Base_SetConfig+0x114>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d013      	beq.n	800c970 <TIM_Base_SetConfig+0x40>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c94e:	d00f      	beq.n	800c970 <TIM_Base_SetConfig+0x40>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a3d      	ldr	r2, [pc, #244]	; (800ca48 <TIM_Base_SetConfig+0x118>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d00b      	beq.n	800c970 <TIM_Base_SetConfig+0x40>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a3c      	ldr	r2, [pc, #240]	; (800ca4c <TIM_Base_SetConfig+0x11c>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d007      	beq.n	800c970 <TIM_Base_SetConfig+0x40>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a3b      	ldr	r2, [pc, #236]	; (800ca50 <TIM_Base_SetConfig+0x120>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d003      	beq.n	800c970 <TIM_Base_SetConfig+0x40>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a3a      	ldr	r2, [pc, #232]	; (800ca54 <TIM_Base_SetConfig+0x124>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d108      	bne.n	800c982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	4313      	orrs	r3, r2
 800c980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a2f      	ldr	r2, [pc, #188]	; (800ca44 <TIM_Base_SetConfig+0x114>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d01f      	beq.n	800c9ca <TIM_Base_SetConfig+0x9a>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c990:	d01b      	beq.n	800c9ca <TIM_Base_SetConfig+0x9a>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a2c      	ldr	r2, [pc, #176]	; (800ca48 <TIM_Base_SetConfig+0x118>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d017      	beq.n	800c9ca <TIM_Base_SetConfig+0x9a>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a2b      	ldr	r2, [pc, #172]	; (800ca4c <TIM_Base_SetConfig+0x11c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d013      	beq.n	800c9ca <TIM_Base_SetConfig+0x9a>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a2a      	ldr	r2, [pc, #168]	; (800ca50 <TIM_Base_SetConfig+0x120>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d00f      	beq.n	800c9ca <TIM_Base_SetConfig+0x9a>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a29      	ldr	r2, [pc, #164]	; (800ca54 <TIM_Base_SetConfig+0x124>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d00b      	beq.n	800c9ca <TIM_Base_SetConfig+0x9a>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a28      	ldr	r2, [pc, #160]	; (800ca58 <TIM_Base_SetConfig+0x128>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d007      	beq.n	800c9ca <TIM_Base_SetConfig+0x9a>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a27      	ldr	r2, [pc, #156]	; (800ca5c <TIM_Base_SetConfig+0x12c>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d003      	beq.n	800c9ca <TIM_Base_SetConfig+0x9a>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a26      	ldr	r2, [pc, #152]	; (800ca60 <TIM_Base_SetConfig+0x130>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d108      	bne.n	800c9dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	689a      	ldr	r2, [r3, #8]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a10      	ldr	r2, [pc, #64]	; (800ca44 <TIM_Base_SetConfig+0x114>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d00f      	beq.n	800ca28 <TIM_Base_SetConfig+0xf8>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a12      	ldr	r2, [pc, #72]	; (800ca54 <TIM_Base_SetConfig+0x124>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d00b      	beq.n	800ca28 <TIM_Base_SetConfig+0xf8>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a11      	ldr	r2, [pc, #68]	; (800ca58 <TIM_Base_SetConfig+0x128>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d007      	beq.n	800ca28 <TIM_Base_SetConfig+0xf8>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a10      	ldr	r2, [pc, #64]	; (800ca5c <TIM_Base_SetConfig+0x12c>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d003      	beq.n	800ca28 <TIM_Base_SetConfig+0xf8>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a0f      	ldr	r2, [pc, #60]	; (800ca60 <TIM_Base_SetConfig+0x130>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d103      	bne.n	800ca30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	691a      	ldr	r2, [r3, #16]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2201      	movs	r2, #1
 800ca34:	615a      	str	r2, [r3, #20]
}
 800ca36:	bf00      	nop
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	40010000 	.word	0x40010000
 800ca48:	40000400 	.word	0x40000400
 800ca4c:	40000800 	.word	0x40000800
 800ca50:	40000c00 	.word	0x40000c00
 800ca54:	40010400 	.word	0x40010400
 800ca58:	40014000 	.word	0x40014000
 800ca5c:	40014400 	.word	0x40014400
 800ca60:	40014800 	.word	0x40014800

0800ca64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b087      	sub	sp, #28
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a1b      	ldr	r3, [r3, #32]
 800ca72:	f023 0201 	bic.w	r2, r3, #1
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	4b37      	ldr	r3, [pc, #220]	; (800cb6c <TIM_OC1_SetConfig+0x108>)
 800ca90:	4013      	ands	r3, r2
 800ca92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f023 0302 	bic.w	r3, r3, #2
 800caac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a2d      	ldr	r2, [pc, #180]	; (800cb70 <TIM_OC1_SetConfig+0x10c>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d00f      	beq.n	800cae0 <TIM_OC1_SetConfig+0x7c>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a2c      	ldr	r2, [pc, #176]	; (800cb74 <TIM_OC1_SetConfig+0x110>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d00b      	beq.n	800cae0 <TIM_OC1_SetConfig+0x7c>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a2b      	ldr	r2, [pc, #172]	; (800cb78 <TIM_OC1_SetConfig+0x114>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d007      	beq.n	800cae0 <TIM_OC1_SetConfig+0x7c>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a2a      	ldr	r2, [pc, #168]	; (800cb7c <TIM_OC1_SetConfig+0x118>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d003      	beq.n	800cae0 <TIM_OC1_SetConfig+0x7c>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a29      	ldr	r2, [pc, #164]	; (800cb80 <TIM_OC1_SetConfig+0x11c>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d10c      	bne.n	800cafa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	f023 0308 	bic.w	r3, r3, #8
 800cae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	4313      	orrs	r3, r2
 800caf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f023 0304 	bic.w	r3, r3, #4
 800caf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a1c      	ldr	r2, [pc, #112]	; (800cb70 <TIM_OC1_SetConfig+0x10c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d00f      	beq.n	800cb22 <TIM_OC1_SetConfig+0xbe>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a1b      	ldr	r2, [pc, #108]	; (800cb74 <TIM_OC1_SetConfig+0x110>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d00b      	beq.n	800cb22 <TIM_OC1_SetConfig+0xbe>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a1a      	ldr	r2, [pc, #104]	; (800cb78 <TIM_OC1_SetConfig+0x114>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d007      	beq.n	800cb22 <TIM_OC1_SetConfig+0xbe>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a19      	ldr	r2, [pc, #100]	; (800cb7c <TIM_OC1_SetConfig+0x118>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d003      	beq.n	800cb22 <TIM_OC1_SetConfig+0xbe>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a18      	ldr	r2, [pc, #96]	; (800cb80 <TIM_OC1_SetConfig+0x11c>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d111      	bne.n	800cb46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	693a      	ldr	r2, [r7, #16]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	699b      	ldr	r3, [r3, #24]
 800cb40:	693a      	ldr	r2, [r7, #16]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	621a      	str	r2, [r3, #32]
}
 800cb60:	bf00      	nop
 800cb62:	371c      	adds	r7, #28
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	fffeff8f 	.word	0xfffeff8f
 800cb70:	40010000 	.word	0x40010000
 800cb74:	40010400 	.word	0x40010400
 800cb78:	40014000 	.word	0x40014000
 800cb7c:	40014400 	.word	0x40014400
 800cb80:	40014800 	.word	0x40014800

0800cb84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	f023 0210 	bic.w	r2, r3, #16
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	4b34      	ldr	r3, [pc, #208]	; (800cc80 <TIM_OC2_SetConfig+0xfc>)
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	021b      	lsls	r3, r3, #8
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	f023 0320 	bic.w	r3, r3, #32
 800cbce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	011b      	lsls	r3, r3, #4
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a29      	ldr	r2, [pc, #164]	; (800cc84 <TIM_OC2_SetConfig+0x100>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d003      	beq.n	800cbec <TIM_OC2_SetConfig+0x68>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a28      	ldr	r2, [pc, #160]	; (800cc88 <TIM_OC2_SetConfig+0x104>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d10d      	bne.n	800cc08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	011b      	lsls	r3, r3, #4
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a1e      	ldr	r2, [pc, #120]	; (800cc84 <TIM_OC2_SetConfig+0x100>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d00f      	beq.n	800cc30 <TIM_OC2_SetConfig+0xac>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a1d      	ldr	r2, [pc, #116]	; (800cc88 <TIM_OC2_SetConfig+0x104>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d00b      	beq.n	800cc30 <TIM_OC2_SetConfig+0xac>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a1c      	ldr	r2, [pc, #112]	; (800cc8c <TIM_OC2_SetConfig+0x108>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d007      	beq.n	800cc30 <TIM_OC2_SetConfig+0xac>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a1b      	ldr	r2, [pc, #108]	; (800cc90 <TIM_OC2_SetConfig+0x10c>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d003      	beq.n	800cc30 <TIM_OC2_SetConfig+0xac>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <TIM_OC2_SetConfig+0x110>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d113      	bne.n	800cc58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	695b      	ldr	r3, [r3, #20]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	699b      	ldr	r3, [r3, #24]
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	693a      	ldr	r2, [r7, #16]
 800cc5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	685a      	ldr	r2, [r3, #4]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	621a      	str	r2, [r3, #32]
}
 800cc72:	bf00      	nop
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	feff8fff 	.word	0xfeff8fff
 800cc84:	40010000 	.word	0x40010000
 800cc88:	40010400 	.word	0x40010400
 800cc8c:	40014000 	.word	0x40014000
 800cc90:	40014400 	.word	0x40014400
 800cc94:	40014800 	.word	0x40014800

0800cc98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b087      	sub	sp, #28
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6a1b      	ldr	r3, [r3, #32]
 800cca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	69db      	ldr	r3, [r3, #28]
 800ccbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	4b33      	ldr	r3, [pc, #204]	; (800cd90 <TIM_OC3_SetConfig+0xf8>)
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f023 0303 	bic.w	r3, r3, #3
 800ccce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	021b      	lsls	r3, r3, #8
 800cce8:	697a      	ldr	r2, [r7, #20]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4a28      	ldr	r2, [pc, #160]	; (800cd94 <TIM_OC3_SetConfig+0xfc>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d003      	beq.n	800ccfe <TIM_OC3_SetConfig+0x66>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4a27      	ldr	r2, [pc, #156]	; (800cd98 <TIM_OC3_SetConfig+0x100>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d10d      	bne.n	800cd1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	021b      	lsls	r3, r3, #8
 800cd0c:	697a      	ldr	r2, [r7, #20]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a1d      	ldr	r2, [pc, #116]	; (800cd94 <TIM_OC3_SetConfig+0xfc>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00f      	beq.n	800cd42 <TIM_OC3_SetConfig+0xaa>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a1c      	ldr	r2, [pc, #112]	; (800cd98 <TIM_OC3_SetConfig+0x100>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d00b      	beq.n	800cd42 <TIM_OC3_SetConfig+0xaa>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a1b      	ldr	r2, [pc, #108]	; (800cd9c <TIM_OC3_SetConfig+0x104>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d007      	beq.n	800cd42 <TIM_OC3_SetConfig+0xaa>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a1a      	ldr	r2, [pc, #104]	; (800cda0 <TIM_OC3_SetConfig+0x108>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d003      	beq.n	800cd42 <TIM_OC3_SetConfig+0xaa>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4a19      	ldr	r2, [pc, #100]	; (800cda4 <TIM_OC3_SetConfig+0x10c>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d113      	bne.n	800cd6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	011b      	lsls	r3, r3, #4
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	699b      	ldr	r3, [r3, #24]
 800cd62:	011b      	lsls	r3, r3, #4
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	693a      	ldr	r2, [r7, #16]
 800cd6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	685a      	ldr	r2, [r3, #4]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	621a      	str	r2, [r3, #32]
}
 800cd84:	bf00      	nop
 800cd86:	371c      	adds	r7, #28
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	fffeff8f 	.word	0xfffeff8f
 800cd94:	40010000 	.word	0x40010000
 800cd98:	40010400 	.word	0x40010400
 800cd9c:	40014000 	.word	0x40014000
 800cda0:	40014400 	.word	0x40014400
 800cda4:	40014800 	.word	0x40014800

0800cda8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b087      	sub	sp, #28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	69db      	ldr	r3, [r3, #28]
 800cdce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	4b24      	ldr	r3, [pc, #144]	; (800ce64 <TIM_OC4_SetConfig+0xbc>)
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	021b      	lsls	r3, r3, #8
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	031b      	lsls	r3, r3, #12
 800cdfa:	693a      	ldr	r2, [r7, #16]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a19      	ldr	r2, [pc, #100]	; (800ce68 <TIM_OC4_SetConfig+0xc0>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d00f      	beq.n	800ce28 <TIM_OC4_SetConfig+0x80>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a18      	ldr	r2, [pc, #96]	; (800ce6c <TIM_OC4_SetConfig+0xc4>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d00b      	beq.n	800ce28 <TIM_OC4_SetConfig+0x80>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a17      	ldr	r2, [pc, #92]	; (800ce70 <TIM_OC4_SetConfig+0xc8>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d007      	beq.n	800ce28 <TIM_OC4_SetConfig+0x80>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a16      	ldr	r2, [pc, #88]	; (800ce74 <TIM_OC4_SetConfig+0xcc>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d003      	beq.n	800ce28 <TIM_OC4_SetConfig+0x80>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a15      	ldr	r2, [pc, #84]	; (800ce78 <TIM_OC4_SetConfig+0xd0>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d109      	bne.n	800ce3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	695b      	ldr	r3, [r3, #20]
 800ce34:	019b      	lsls	r3, r3, #6
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	693a      	ldr	r2, [r7, #16]
 800ce54:	621a      	str	r2, [r3, #32]
}
 800ce56:	bf00      	nop
 800ce58:	371c      	adds	r7, #28
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	feff8fff 	.word	0xfeff8fff
 800ce68:	40010000 	.word	0x40010000
 800ce6c:	40010400 	.word	0x40010400
 800ce70:	40014000 	.word	0x40014000
 800ce74:	40014400 	.word	0x40014400
 800ce78:	40014800 	.word	0x40014800

0800ce7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b087      	sub	sp, #28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a1b      	ldr	r3, [r3, #32]
 800ce96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	4b21      	ldr	r3, [pc, #132]	; (800cf2c <TIM_OC5_SetConfig+0xb0>)
 800cea8:	4013      	ands	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	041b      	lsls	r3, r3, #16
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a18      	ldr	r2, [pc, #96]	; (800cf30 <TIM_OC5_SetConfig+0xb4>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d00f      	beq.n	800cef2 <TIM_OC5_SetConfig+0x76>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a17      	ldr	r2, [pc, #92]	; (800cf34 <TIM_OC5_SetConfig+0xb8>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d00b      	beq.n	800cef2 <TIM_OC5_SetConfig+0x76>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4a16      	ldr	r2, [pc, #88]	; (800cf38 <TIM_OC5_SetConfig+0xbc>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d007      	beq.n	800cef2 <TIM_OC5_SetConfig+0x76>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4a15      	ldr	r2, [pc, #84]	; (800cf3c <TIM_OC5_SetConfig+0xc0>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d003      	beq.n	800cef2 <TIM_OC5_SetConfig+0x76>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4a14      	ldr	r2, [pc, #80]	; (800cf40 <TIM_OC5_SetConfig+0xc4>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d109      	bne.n	800cf06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	021b      	lsls	r3, r3, #8
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	697a      	ldr	r2, [r7, #20]
 800cf0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	693a      	ldr	r2, [r7, #16]
 800cf1e:	621a      	str	r2, [r3, #32]
}
 800cf20:	bf00      	nop
 800cf22:	371c      	adds	r7, #28
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	fffeff8f 	.word	0xfffeff8f
 800cf30:	40010000 	.word	0x40010000
 800cf34:	40010400 	.word	0x40010400
 800cf38:	40014000 	.word	0x40014000
 800cf3c:	40014400 	.word	0x40014400
 800cf40:	40014800 	.word	0x40014800

0800cf44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	4b22      	ldr	r3, [pc, #136]	; (800cff8 <TIM_OC6_SetConfig+0xb4>)
 800cf70:	4013      	ands	r3, r2
 800cf72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	021b      	lsls	r3, r3, #8
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	051b      	lsls	r3, r3, #20
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a19      	ldr	r2, [pc, #100]	; (800cffc <TIM_OC6_SetConfig+0xb8>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d00f      	beq.n	800cfbc <TIM_OC6_SetConfig+0x78>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a18      	ldr	r2, [pc, #96]	; (800d000 <TIM_OC6_SetConfig+0xbc>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d00b      	beq.n	800cfbc <TIM_OC6_SetConfig+0x78>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4a17      	ldr	r2, [pc, #92]	; (800d004 <TIM_OC6_SetConfig+0xc0>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d007      	beq.n	800cfbc <TIM_OC6_SetConfig+0x78>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4a16      	ldr	r2, [pc, #88]	; (800d008 <TIM_OC6_SetConfig+0xc4>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d003      	beq.n	800cfbc <TIM_OC6_SetConfig+0x78>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4a15      	ldr	r2, [pc, #84]	; (800d00c <TIM_OC6_SetConfig+0xc8>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d109      	bne.n	800cfd0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cfc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	029b      	lsls	r3, r3, #10
 800cfca:	697a      	ldr	r2, [r7, #20]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	697a      	ldr	r2, [r7, #20]
 800cfd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	685a      	ldr	r2, [r3, #4]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	621a      	str	r2, [r3, #32]
}
 800cfea:	bf00      	nop
 800cfec:	371c      	adds	r7, #28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	feff8fff 	.word	0xfeff8fff
 800cffc:	40010000 	.word	0x40010000
 800d000:	40010400 	.word	0x40010400
 800d004:	40014000 	.word	0x40014000
 800d008:	40014400 	.word	0x40014400
 800d00c:	40014800 	.word	0x40014800

0800d010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d010:	b480      	push	{r7}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	6a1b      	ldr	r3, [r3, #32]
 800d020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6a1b      	ldr	r3, [r3, #32]
 800d026:	f023 0201 	bic.w	r2, r3, #1
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d03a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	011b      	lsls	r3, r3, #4
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	4313      	orrs	r3, r2
 800d044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f023 030a 	bic.w	r3, r3, #10
 800d04c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	4313      	orrs	r3, r2
 800d054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	621a      	str	r2, [r3, #32]
}
 800d062:	bf00      	nop
 800d064:	371c      	adds	r7, #28
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d06e:	b480      	push	{r7}
 800d070:	b087      	sub	sp, #28
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	60b9      	str	r1, [r7, #8]
 800d078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	f023 0210 	bic.w	r2, r3, #16
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	699b      	ldr	r3, [r3, #24]
 800d08a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6a1b      	ldr	r3, [r3, #32]
 800d090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d098:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	031b      	lsls	r3, r3, #12
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d0aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	011b      	lsls	r3, r3, #4
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	697a      	ldr	r2, [r7, #20]
 800d0ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	621a      	str	r2, [r3, #32]
}
 800d0c2:	bf00      	nop
 800d0c4:	371c      	adds	r7, #28
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
	...

0800d0d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	4b09      	ldr	r3, [pc, #36]	; (800d108 <TIM_ITRx_SetConfig+0x38>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0e8:	683a      	ldr	r2, [r7, #0]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	f043 0307 	orr.w	r3, r3, #7
 800d0f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	609a      	str	r2, [r3, #8]
}
 800d0fa:	bf00      	nop
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	ffcfff8f 	.word	0xffcfff8f

0800d10c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b087      	sub	sp, #28
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
 800d118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	021a      	lsls	r2, r3, #8
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	431a      	orrs	r2, r3
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	4313      	orrs	r3, r2
 800d134:	697a      	ldr	r2, [r7, #20]
 800d136:	4313      	orrs	r3, r2
 800d138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	609a      	str	r2, [r3, #8]
}
 800d140:	bf00      	nop
 800d142:	371c      	adds	r7, #28
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d101      	bne.n	800d164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d160:	2302      	movs	r3, #2
 800d162:	e06d      	b.n	800d240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a30      	ldr	r2, [pc, #192]	; (800d24c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d004      	beq.n	800d198 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4a2f      	ldr	r2, [pc, #188]	; (800d250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d108      	bne.n	800d1aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d19e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a20      	ldr	r2, [pc, #128]	; (800d24c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d022      	beq.n	800d214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1d6:	d01d      	beq.n	800d214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a1d      	ldr	r2, [pc, #116]	; (800d254 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d018      	beq.n	800d214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a1c      	ldr	r2, [pc, #112]	; (800d258 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d013      	beq.n	800d214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a1a      	ldr	r2, [pc, #104]	; (800d25c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d00e      	beq.n	800d214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a15      	ldr	r2, [pc, #84]	; (800d250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d009      	beq.n	800d214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a16      	ldr	r2, [pc, #88]	; (800d260 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d004      	beq.n	800d214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a15      	ldr	r2, [pc, #84]	; (800d264 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d10c      	bne.n	800d22e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d21a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	68ba      	ldr	r2, [r7, #8]
 800d222:	4313      	orrs	r3, r2
 800d224:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3714      	adds	r7, #20
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	40010000 	.word	0x40010000
 800d250:	40010400 	.word	0x40010400
 800d254:	40000400 	.word	0x40000400
 800d258:	40000800 	.word	0x40000800
 800d25c:	40000c00 	.word	0x40000c00
 800d260:	40001800 	.word	0x40001800
 800d264:	40014000 	.word	0x40014000

0800d268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d272:	2300      	movs	r3, #0
 800d274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d101      	bne.n	800d284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d280:	2302      	movs	r3, #2
 800d282:	e065      	b.n	800d350 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	4313      	orrs	r3, r2
 800d298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	695b      	ldr	r3, [r3, #20]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	041b      	lsls	r3, r3, #16
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a16      	ldr	r2, [pc, #88]	; (800d35c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d004      	beq.n	800d312 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a14      	ldr	r2, [pc, #80]	; (800d360 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d115      	bne.n	800d33e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31c:	051b      	lsls	r3, r3, #20
 800d31e:	4313      	orrs	r3, r2
 800d320:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	69db      	ldr	r3, [r3, #28]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	6a1b      	ldr	r3, [r3, #32]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	40010000 	.word	0x40010000
 800d360:	40010400 	.word	0x40010400

0800d364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d36c:	bf00      	nop
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d394:	bf00      	nop
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d101      	bne.n	800d3b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e042      	b.n	800d438 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7f5 ff7b 	bl	80032c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2224      	movs	r2, #36	; 0x24
 800d3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f022 0201 	bic.w	r2, r2, #1
 800d3e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fc7e 	bl	800dce4 <UART_SetConfig>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d101      	bne.n	800d3f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e022      	b.n	800d438 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f001 f9da 	bl	800e7b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d40e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	689a      	ldr	r2, [r3, #8]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d41e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f042 0201 	orr.w	r2, r2, #1
 800d42e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f001 fa61 	bl	800e8f8 <UART_CheckIdleState>
 800d436:	4603      	mov	r3, r0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b08a      	sub	sp, #40	; 0x28
 800d444:	af02      	add	r7, sp, #8
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	603b      	str	r3, [r7, #0]
 800d44c:	4613      	mov	r3, r2
 800d44e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d456:	2b20      	cmp	r3, #32
 800d458:	f040 8083 	bne.w	800d562 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d002      	beq.n	800d468 <HAL_UART_Transmit+0x28>
 800d462:	88fb      	ldrh	r3, [r7, #6]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	e07b      	b.n	800d564 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d472:	2b01      	cmp	r3, #1
 800d474:	d101      	bne.n	800d47a <HAL_UART_Transmit+0x3a>
 800d476:	2302      	movs	r3, #2
 800d478:	e074      	b.n	800d564 <HAL_UART_Transmit+0x124>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2201      	movs	r2, #1
 800d47e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2221      	movs	r2, #33	; 0x21
 800d48e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d492:	f7f6 fa3d 	bl	8003910 <HAL_GetTick>
 800d496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	88fa      	ldrh	r2, [r7, #6]
 800d49c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	88fa      	ldrh	r2, [r7, #6]
 800d4a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4b0:	d108      	bne.n	800d4c4 <HAL_UART_Transmit+0x84>
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d104      	bne.n	800d4c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	61bb      	str	r3, [r7, #24]
 800d4c2:	e003      	b.n	800d4cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d4d4:	e02c      	b.n	800d530 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	2180      	movs	r1, #128	; 0x80
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f001 fa54 	bl	800e98e <UART_WaitOnFlagUntilTimeout>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d001      	beq.n	800d4f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	e039      	b.n	800d564 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10b      	bne.n	800d50e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d504:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	3302      	adds	r3, #2
 800d50a:	61bb      	str	r3, [r7, #24]
 800d50c:	e007      	b.n	800d51e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	781a      	ldrb	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	3301      	adds	r3, #1
 800d51c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d524:	b29b      	uxth	r3, r3
 800d526:	3b01      	subs	r3, #1
 800d528:	b29a      	uxth	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d536:	b29b      	uxth	r3, r3
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1cc      	bne.n	800d4d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2200      	movs	r2, #0
 800d544:	2140      	movs	r1, #64	; 0x40
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f001 fa21 	bl	800e98e <UART_WaitOnFlagUntilTimeout>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d552:	2303      	movs	r3, #3
 800d554:	e006      	b.n	800d564 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2220      	movs	r2, #32
 800d55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	e000      	b.n	800d564 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d562:	2302      	movs	r3, #2
  }
}
 800d564:	4618      	mov	r0, r3
 800d566:	3720      	adds	r7, #32
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b0ba      	sub	sp, #232	; 0xe8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	69db      	ldr	r3, [r3, #28]
 800d57a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d592:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d596:	f640 030f 	movw	r3, #2063	; 0x80f
 800d59a:	4013      	ands	r3, r2
 800d59c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d5a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d11b      	bne.n	800d5e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ac:	f003 0320 	and.w	r3, r3, #32
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d015      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d5b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5b8:	f003 0320 	and.w	r3, r3, #32
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d105      	bne.n	800d5cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d5c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d009      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 835a 	beq.w	800dc8a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	4798      	blx	r3
      }
      return;
 800d5de:	e354      	b.n	800dc8a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d5e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f000 811f 	beq.w	800d828 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d5ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d5ee:	4b8b      	ldr	r3, [pc, #556]	; (800d81c <HAL_UART_IRQHandler+0x2b0>)
 800d5f0:	4013      	ands	r3, r2
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d106      	bne.n	800d604 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d5f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d5fa:	4b89      	ldr	r3, [pc, #548]	; (800d820 <HAL_UART_IRQHandler+0x2b4>)
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f000 8112 	beq.w	800d828 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d011      	beq.n	800d634 <HAL_UART_IRQHandler+0xc8>
 800d610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2201      	movs	r2, #1
 800d622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d62a:	f043 0201 	orr.w	r2, r3, #1
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d638:	f003 0302 	and.w	r3, r3, #2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d011      	beq.n	800d664 <HAL_UART_IRQHandler+0xf8>
 800d640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d644:	f003 0301 	and.w	r3, r3, #1
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00b      	beq.n	800d664 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2202      	movs	r2, #2
 800d652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d65a:	f043 0204 	orr.w	r2, r3, #4
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d668:	f003 0304 	and.w	r3, r3, #4
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d011      	beq.n	800d694 <HAL_UART_IRQHandler+0x128>
 800d670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d674:	f003 0301 	and.w	r3, r3, #1
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00b      	beq.n	800d694 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2204      	movs	r2, #4
 800d682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d68a:	f043 0202 	orr.w	r2, r3, #2
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d698:	f003 0308 	and.w	r3, r3, #8
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d017      	beq.n	800d6d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6a4:	f003 0320 	and.w	r3, r3, #32
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d105      	bne.n	800d6b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d6ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d6b0:	4b5a      	ldr	r3, [pc, #360]	; (800d81c <HAL_UART_IRQHandler+0x2b0>)
 800d6b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2208      	movs	r2, #8
 800d6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6c6:	f043 0208 	orr.w	r2, r3, #8
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d012      	beq.n	800d702 <HAL_UART_IRQHandler+0x196>
 800d6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00c      	beq.n	800d702 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6f8:	f043 0220 	orr.w	r2, r3, #32
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 82c0 	beq.w	800dc8e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d712:	f003 0320 	and.w	r3, r3, #32
 800d716:	2b00      	cmp	r3, #0
 800d718:	d013      	beq.n	800d742 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d71e:	f003 0320 	and.w	r3, r3, #32
 800d722:	2b00      	cmp	r3, #0
 800d724:	d105      	bne.n	800d732 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d72a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d007      	beq.n	800d742 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d748:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d756:	2b40      	cmp	r3, #64	; 0x40
 800d758:	d005      	beq.n	800d766 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d75a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d75e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d762:	2b00      	cmp	r3, #0
 800d764:	d04f      	beq.n	800d806 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f001 fac4 	bl	800ecf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d776:	2b40      	cmp	r3, #64	; 0x40
 800d778:	d141      	bne.n	800d7fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	3308      	adds	r3, #8
 800d780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d788:	e853 3f00 	ldrex	r3, [r3]
 800d78c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3308      	adds	r3, #8
 800d7a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d7a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d7aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d7b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d7be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1d9      	bne.n	800d77a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d013      	beq.n	800d7f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7d2:	4a14      	ldr	r2, [pc, #80]	; (800d824 <HAL_UART_IRQHandler+0x2b8>)
 800d7d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f8 fce4 	bl	80061a8 <HAL_DMA_Abort_IT>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d017      	beq.n	800d816 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7f4:	e00f      	b.n	800d816 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f007 fc0e 	bl	8015018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7fc:	e00b      	b.n	800d816 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f007 fc0a 	bl	8015018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d804:	e007      	b.n	800d816 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f007 fc06 	bl	8015018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d814:	e23b      	b.n	800dc8e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d816:	bf00      	nop
    return;
 800d818:	e239      	b.n	800dc8e <HAL_UART_IRQHandler+0x722>
 800d81a:	bf00      	nop
 800d81c:	10000001 	.word	0x10000001
 800d820:	04000120 	.word	0x04000120
 800d824:	0800ef9b 	.word	0x0800ef9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	f040 81ce 	bne.w	800dbce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d836:	f003 0310 	and.w	r3, r3, #16
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f000 81c7 	beq.w	800dbce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d844:	f003 0310 	and.w	r3, r3, #16
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f000 81c0 	beq.w	800dbce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2210      	movs	r2, #16
 800d854:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d860:	2b40      	cmp	r3, #64	; 0x40
 800d862:	f040 813b 	bne.w	800dadc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a8b      	ldr	r2, [pc, #556]	; (800da9c <HAL_UART_IRQHandler+0x530>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d059      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a89      	ldr	r2, [pc, #548]	; (800daa0 <HAL_UART_IRQHandler+0x534>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d053      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a87      	ldr	r2, [pc, #540]	; (800daa4 <HAL_UART_IRQHandler+0x538>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d04d      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a85      	ldr	r2, [pc, #532]	; (800daa8 <HAL_UART_IRQHandler+0x53c>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d047      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a83      	ldr	r2, [pc, #524]	; (800daac <HAL_UART_IRQHandler+0x540>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d041      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a81      	ldr	r2, [pc, #516]	; (800dab0 <HAL_UART_IRQHandler+0x544>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d03b      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a7f      	ldr	r2, [pc, #508]	; (800dab4 <HAL_UART_IRQHandler+0x548>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d035      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a7d      	ldr	r2, [pc, #500]	; (800dab8 <HAL_UART_IRQHandler+0x54c>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d02f      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a7b      	ldr	r2, [pc, #492]	; (800dabc <HAL_UART_IRQHandler+0x550>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d029      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a79      	ldr	r2, [pc, #484]	; (800dac0 <HAL_UART_IRQHandler+0x554>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d023      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a77      	ldr	r2, [pc, #476]	; (800dac4 <HAL_UART_IRQHandler+0x558>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d01d      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a75      	ldr	r2, [pc, #468]	; (800dac8 <HAL_UART_IRQHandler+0x55c>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d017      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a73      	ldr	r2, [pc, #460]	; (800dacc <HAL_UART_IRQHandler+0x560>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d011      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a71      	ldr	r2, [pc, #452]	; (800dad0 <HAL_UART_IRQHandler+0x564>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d00b      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a6f      	ldr	r2, [pc, #444]	; (800dad4 <HAL_UART_IRQHandler+0x568>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d005      	beq.n	800d926 <HAL_UART_IRQHandler+0x3ba>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a6d      	ldr	r2, [pc, #436]	; (800dad8 <HAL_UART_IRQHandler+0x56c>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d105      	bne.n	800d932 <HAL_UART_IRQHandler+0x3c6>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	e004      	b.n	800d93c <HAL_UART_IRQHandler+0x3d0>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d944:	2b00      	cmp	r3, #0
 800d946:	f000 81a4 	beq.w	800dc92 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d950:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d954:	429a      	cmp	r2, r3
 800d956:	f080 819c 	bcs.w	800dc92 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d96e:	f000 8086 	beq.w	800da7e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d97e:	e853 3f00 	ldrex	r3, [r3]
 800d982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d986:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d98a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d98e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	461a      	mov	r2, r3
 800d998:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d99c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d9a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d9a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d9ac:	e841 2300 	strex	r3, r2, [r1]
 800d9b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1da      	bne.n	800d972 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3308      	adds	r3, #8
 800d9c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9c6:	e853 3f00 	ldrex	r3, [r3]
 800d9ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d9cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9ce:	f023 0301 	bic.w	r3, r3, #1
 800d9d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3308      	adds	r3, #8
 800d9dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d9e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d9e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d9e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d9ec:	e841 2300 	strex	r3, r2, [r1]
 800d9f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d9f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1e1      	bne.n	800d9bc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3308      	adds	r3, #8
 800d9fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da02:	e853 3f00 	ldrex	r3, [r3]
 800da06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800da08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3308      	adds	r3, #8
 800da18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800da1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800da1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800da22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da24:	e841 2300 	strex	r3, r2, [r1]
 800da28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800da2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1e3      	bne.n	800d9f8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2220      	movs	r2, #32
 800da34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da46:	e853 3f00 	ldrex	r3, [r3]
 800da4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da4e:	f023 0310 	bic.w	r3, r3, #16
 800da52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da60:	65bb      	str	r3, [r7, #88]	; 0x58
 800da62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da68:	e841 2300 	strex	r3, r2, [r1]
 800da6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da70:	2b00      	cmp	r3, #0
 800da72:	d1e4      	bne.n	800da3e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da78:	4618      	mov	r0, r3
 800da7a:	f7f8 f877 	bl	8005b6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	b29b      	uxth	r3, r3
 800da90:	4619      	mov	r1, r3
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f007 fae8 	bl	8015068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da98:	e0fb      	b.n	800dc92 <HAL_UART_IRQHandler+0x726>
 800da9a:	bf00      	nop
 800da9c:	40020010 	.word	0x40020010
 800daa0:	40020028 	.word	0x40020028
 800daa4:	40020040 	.word	0x40020040
 800daa8:	40020058 	.word	0x40020058
 800daac:	40020070 	.word	0x40020070
 800dab0:	40020088 	.word	0x40020088
 800dab4:	400200a0 	.word	0x400200a0
 800dab8:	400200b8 	.word	0x400200b8
 800dabc:	40020410 	.word	0x40020410
 800dac0:	40020428 	.word	0x40020428
 800dac4:	40020440 	.word	0x40020440
 800dac8:	40020458 	.word	0x40020458
 800dacc:	40020470 	.word	0x40020470
 800dad0:	40020488 	.word	0x40020488
 800dad4:	400204a0 	.word	0x400204a0
 800dad8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dae8:	b29b      	uxth	r3, r3
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 80cc 	beq.w	800dc96 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dafe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 80c7 	beq.w	800dc96 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db10:	e853 3f00 	ldrex	r3, [r3]
 800db14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800db1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db2a:	647b      	str	r3, [r7, #68]	; 0x44
 800db2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db32:	e841 2300 	strex	r3, r2, [r1]
 800db36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d1e4      	bne.n	800db08 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	3308      	adds	r3, #8
 800db44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db48:	e853 3f00 	ldrex	r3, [r3]
 800db4c:	623b      	str	r3, [r7, #32]
   return(result);
 800db4e:	6a3a      	ldr	r2, [r7, #32]
 800db50:	4b54      	ldr	r3, [pc, #336]	; (800dca4 <HAL_UART_IRQHandler+0x738>)
 800db52:	4013      	ands	r3, r2
 800db54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	3308      	adds	r3, #8
 800db5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800db62:	633a      	str	r2, [r7, #48]	; 0x30
 800db64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db6a:	e841 2300 	strex	r3, r2, [r1]
 800db6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1e3      	bne.n	800db3e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2220      	movs	r2, #32
 800db7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	e853 3f00 	ldrex	r3, [r3]
 800db96:	60fb      	str	r3, [r7, #12]
   return(result);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f023 0310 	bic.w	r3, r3, #16
 800db9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dbac:	61fb      	str	r3, [r7, #28]
 800dbae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb0:	69b9      	ldr	r1, [r7, #24]
 800dbb2:	69fa      	ldr	r2, [r7, #28]
 800dbb4:	e841 2300 	strex	r3, r2, [r1]
 800dbb8:	617b      	str	r3, [r7, #20]
   return(result);
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1e4      	bne.n	800db8a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dbc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f007 fa4e 	bl	8015068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dbcc:	e063      	b.n	800dc96 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dbce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00e      	beq.n	800dbf8 <HAL_UART_IRQHandler+0x68c>
 800dbda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d008      	beq.n	800dbf8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dbee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f001 fa13 	bl	800f01c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbf6:	e051      	b.n	800dc9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d014      	beq.n	800dc2e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d105      	bne.n	800dc1c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dc10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d008      	beq.n	800dc2e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d03a      	beq.n	800dc9a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	4798      	blx	r3
    }
    return;
 800dc2c:	e035      	b.n	800dc9a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d009      	beq.n	800dc4e <HAL_UART_IRQHandler+0x6e2>
 800dc3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f001 f9bd 	bl	800efc6 <UART_EndTransmit_IT>
    return;
 800dc4c:	e026      	b.n	800dc9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d009      	beq.n	800dc6e <HAL_UART_IRQHandler+0x702>
 800dc5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d003      	beq.n	800dc6e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f001 f9ec 	bl	800f044 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc6c:	e016      	b.n	800dc9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dc6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d010      	beq.n	800dc9c <HAL_UART_IRQHandler+0x730>
 800dc7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	da0c      	bge.n	800dc9c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f001 f9d4 	bl	800f030 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc88:	e008      	b.n	800dc9c <HAL_UART_IRQHandler+0x730>
      return;
 800dc8a:	bf00      	nop
 800dc8c:	e006      	b.n	800dc9c <HAL_UART_IRQHandler+0x730>
    return;
 800dc8e:	bf00      	nop
 800dc90:	e004      	b.n	800dc9c <HAL_UART_IRQHandler+0x730>
      return;
 800dc92:	bf00      	nop
 800dc94:	e002      	b.n	800dc9c <HAL_UART_IRQHandler+0x730>
      return;
 800dc96:	bf00      	nop
 800dc98:	e000      	b.n	800dc9c <HAL_UART_IRQHandler+0x730>
    return;
 800dc9a:	bf00      	nop
  }
}
 800dc9c:	37e8      	adds	r7, #232	; 0xe8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	effffffe 	.word	0xeffffffe

0800dca8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800dcc4:	bf00      	nop
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dce8:	b092      	sub	sp, #72	; 0x48
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	689a      	ldr	r2, [r3, #8]
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	695b      	ldr	r3, [r3, #20]
 800dd02:	431a      	orrs	r2, r3
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	69db      	ldr	r3, [r3, #28]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	4bbe      	ldr	r3, [pc, #760]	; (800e00c <UART_SetConfig+0x328>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	6812      	ldr	r2, [r2, #0]
 800dd1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd1c:	430b      	orrs	r3, r1
 800dd1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	68da      	ldr	r2, [r3, #12]
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	430a      	orrs	r2, r1
 800dd34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	699b      	ldr	r3, [r3, #24]
 800dd3a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4ab3      	ldr	r2, [pc, #716]	; (800e010 <UART_SetConfig+0x32c>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d004      	beq.n	800dd50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
 800dd4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	689a      	ldr	r2, [r3, #8]
 800dd56:	4baf      	ldr	r3, [pc, #700]	; (800e014 <UART_SetConfig+0x330>)
 800dd58:	4013      	ands	r3, r2
 800dd5a:	697a      	ldr	r2, [r7, #20]
 800dd5c:	6812      	ldr	r2, [r2, #0]
 800dd5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd60:	430b      	orrs	r3, r1
 800dd62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6a:	f023 010f 	bic.w	r1, r3, #15
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	430a      	orrs	r2, r1
 800dd78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4aa6      	ldr	r2, [pc, #664]	; (800e018 <UART_SetConfig+0x334>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d177      	bne.n	800de74 <UART_SetConfig+0x190>
 800dd84:	4ba5      	ldr	r3, [pc, #660]	; (800e01c <UART_SetConfig+0x338>)
 800dd86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd8c:	2b28      	cmp	r3, #40	; 0x28
 800dd8e:	d86d      	bhi.n	800de6c <UART_SetConfig+0x188>
 800dd90:	a201      	add	r2, pc, #4	; (adr r2, 800dd98 <UART_SetConfig+0xb4>)
 800dd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd96:	bf00      	nop
 800dd98:	0800de3d 	.word	0x0800de3d
 800dd9c:	0800de6d 	.word	0x0800de6d
 800dda0:	0800de6d 	.word	0x0800de6d
 800dda4:	0800de6d 	.word	0x0800de6d
 800dda8:	0800de6d 	.word	0x0800de6d
 800ddac:	0800de6d 	.word	0x0800de6d
 800ddb0:	0800de6d 	.word	0x0800de6d
 800ddb4:	0800de6d 	.word	0x0800de6d
 800ddb8:	0800de45 	.word	0x0800de45
 800ddbc:	0800de6d 	.word	0x0800de6d
 800ddc0:	0800de6d 	.word	0x0800de6d
 800ddc4:	0800de6d 	.word	0x0800de6d
 800ddc8:	0800de6d 	.word	0x0800de6d
 800ddcc:	0800de6d 	.word	0x0800de6d
 800ddd0:	0800de6d 	.word	0x0800de6d
 800ddd4:	0800de6d 	.word	0x0800de6d
 800ddd8:	0800de4d 	.word	0x0800de4d
 800dddc:	0800de6d 	.word	0x0800de6d
 800dde0:	0800de6d 	.word	0x0800de6d
 800dde4:	0800de6d 	.word	0x0800de6d
 800dde8:	0800de6d 	.word	0x0800de6d
 800ddec:	0800de6d 	.word	0x0800de6d
 800ddf0:	0800de6d 	.word	0x0800de6d
 800ddf4:	0800de6d 	.word	0x0800de6d
 800ddf8:	0800de55 	.word	0x0800de55
 800ddfc:	0800de6d 	.word	0x0800de6d
 800de00:	0800de6d 	.word	0x0800de6d
 800de04:	0800de6d 	.word	0x0800de6d
 800de08:	0800de6d 	.word	0x0800de6d
 800de0c:	0800de6d 	.word	0x0800de6d
 800de10:	0800de6d 	.word	0x0800de6d
 800de14:	0800de6d 	.word	0x0800de6d
 800de18:	0800de5d 	.word	0x0800de5d
 800de1c:	0800de6d 	.word	0x0800de6d
 800de20:	0800de6d 	.word	0x0800de6d
 800de24:	0800de6d 	.word	0x0800de6d
 800de28:	0800de6d 	.word	0x0800de6d
 800de2c:	0800de6d 	.word	0x0800de6d
 800de30:	0800de6d 	.word	0x0800de6d
 800de34:	0800de6d 	.word	0x0800de6d
 800de38:	0800de65 	.word	0x0800de65
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e222      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de44:	2304      	movs	r3, #4
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e21e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de4c:	2308      	movs	r3, #8
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e21a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de54:	2310      	movs	r3, #16
 800de56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5a:	e216      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de5c:	2320      	movs	r3, #32
 800de5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de62:	e212      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de64:	2340      	movs	r3, #64	; 0x40
 800de66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6a:	e20e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de6c:	2380      	movs	r3, #128	; 0x80
 800de6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de72:	e20a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a69      	ldr	r2, [pc, #420]	; (800e020 <UART_SetConfig+0x33c>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d130      	bne.n	800dee0 <UART_SetConfig+0x1fc>
 800de7e:	4b67      	ldr	r3, [pc, #412]	; (800e01c <UART_SetConfig+0x338>)
 800de80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de82:	f003 0307 	and.w	r3, r3, #7
 800de86:	2b05      	cmp	r3, #5
 800de88:	d826      	bhi.n	800ded8 <UART_SetConfig+0x1f4>
 800de8a:	a201      	add	r2, pc, #4	; (adr r2, 800de90 <UART_SetConfig+0x1ac>)
 800de8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de90:	0800dea9 	.word	0x0800dea9
 800de94:	0800deb1 	.word	0x0800deb1
 800de98:	0800deb9 	.word	0x0800deb9
 800de9c:	0800dec1 	.word	0x0800dec1
 800dea0:	0800dec9 	.word	0x0800dec9
 800dea4:	0800ded1 	.word	0x0800ded1
 800dea8:	2300      	movs	r3, #0
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deae:	e1ec      	b.n	800e28a <UART_SetConfig+0x5a6>
 800deb0:	2304      	movs	r3, #4
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb6:	e1e8      	b.n	800e28a <UART_SetConfig+0x5a6>
 800deb8:	2308      	movs	r3, #8
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800debe:	e1e4      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dec0:	2310      	movs	r3, #16
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec6:	e1e0      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dec8:	2320      	movs	r3, #32
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dece:	e1dc      	b.n	800e28a <UART_SetConfig+0x5a6>
 800ded0:	2340      	movs	r3, #64	; 0x40
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded6:	e1d8      	b.n	800e28a <UART_SetConfig+0x5a6>
 800ded8:	2380      	movs	r3, #128	; 0x80
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dede:	e1d4      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a4f      	ldr	r2, [pc, #316]	; (800e024 <UART_SetConfig+0x340>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d130      	bne.n	800df4c <UART_SetConfig+0x268>
 800deea:	4b4c      	ldr	r3, [pc, #304]	; (800e01c <UART_SetConfig+0x338>)
 800deec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	2b05      	cmp	r3, #5
 800def4:	d826      	bhi.n	800df44 <UART_SetConfig+0x260>
 800def6:	a201      	add	r2, pc, #4	; (adr r2, 800defc <UART_SetConfig+0x218>)
 800def8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defc:	0800df15 	.word	0x0800df15
 800df00:	0800df1d 	.word	0x0800df1d
 800df04:	0800df25 	.word	0x0800df25
 800df08:	0800df2d 	.word	0x0800df2d
 800df0c:	0800df35 	.word	0x0800df35
 800df10:	0800df3d 	.word	0x0800df3d
 800df14:	2300      	movs	r3, #0
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1a:	e1b6      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df1c:	2304      	movs	r3, #4
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df22:	e1b2      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df24:	2308      	movs	r3, #8
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2a:	e1ae      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df2c:	2310      	movs	r3, #16
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df32:	e1aa      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df34:	2320      	movs	r3, #32
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3a:	e1a6      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df3c:	2340      	movs	r3, #64	; 0x40
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df42:	e1a2      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df44:	2380      	movs	r3, #128	; 0x80
 800df46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4a:	e19e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a35      	ldr	r2, [pc, #212]	; (800e028 <UART_SetConfig+0x344>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d130      	bne.n	800dfb8 <UART_SetConfig+0x2d4>
 800df56:	4b31      	ldr	r3, [pc, #196]	; (800e01c <UART_SetConfig+0x338>)
 800df58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df5a:	f003 0307 	and.w	r3, r3, #7
 800df5e:	2b05      	cmp	r3, #5
 800df60:	d826      	bhi.n	800dfb0 <UART_SetConfig+0x2cc>
 800df62:	a201      	add	r2, pc, #4	; (adr r2, 800df68 <UART_SetConfig+0x284>)
 800df64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df68:	0800df81 	.word	0x0800df81
 800df6c:	0800df89 	.word	0x0800df89
 800df70:	0800df91 	.word	0x0800df91
 800df74:	0800df99 	.word	0x0800df99
 800df78:	0800dfa1 	.word	0x0800dfa1
 800df7c:	0800dfa9 	.word	0x0800dfa9
 800df80:	2300      	movs	r3, #0
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df86:	e180      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df88:	2304      	movs	r3, #4
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8e:	e17c      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df90:	2308      	movs	r3, #8
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df96:	e178      	b.n	800e28a <UART_SetConfig+0x5a6>
 800df98:	2310      	movs	r3, #16
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9e:	e174      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dfa0:	2320      	movs	r3, #32
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa6:	e170      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dfa8:	2340      	movs	r3, #64	; 0x40
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfae:	e16c      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dfb0:	2380      	movs	r3, #128	; 0x80
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb6:	e168      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a1b      	ldr	r2, [pc, #108]	; (800e02c <UART_SetConfig+0x348>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d142      	bne.n	800e048 <UART_SetConfig+0x364>
 800dfc2:	4b16      	ldr	r3, [pc, #88]	; (800e01c <UART_SetConfig+0x338>)
 800dfc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	2b05      	cmp	r3, #5
 800dfcc:	d838      	bhi.n	800e040 <UART_SetConfig+0x35c>
 800dfce:	a201      	add	r2, pc, #4	; (adr r2, 800dfd4 <UART_SetConfig+0x2f0>)
 800dfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd4:	0800dfed 	.word	0x0800dfed
 800dfd8:	0800dff5 	.word	0x0800dff5
 800dfdc:	0800dffd 	.word	0x0800dffd
 800dfe0:	0800e005 	.word	0x0800e005
 800dfe4:	0800e031 	.word	0x0800e031
 800dfe8:	0800e039 	.word	0x0800e039
 800dfec:	2300      	movs	r3, #0
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff2:	e14a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dff4:	2304      	movs	r3, #4
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffa:	e146      	b.n	800e28a <UART_SetConfig+0x5a6>
 800dffc:	2308      	movs	r3, #8
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e002:	e142      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e004:	2310      	movs	r3, #16
 800e006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00a:	e13e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e00c:	cfff69f3 	.word	0xcfff69f3
 800e010:	58000c00 	.word	0x58000c00
 800e014:	11fff4ff 	.word	0x11fff4ff
 800e018:	40011000 	.word	0x40011000
 800e01c:	58024400 	.word	0x58024400
 800e020:	40004400 	.word	0x40004400
 800e024:	40004800 	.word	0x40004800
 800e028:	40004c00 	.word	0x40004c00
 800e02c:	40005000 	.word	0x40005000
 800e030:	2320      	movs	r3, #32
 800e032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e036:	e128      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e038:	2340      	movs	r3, #64	; 0x40
 800e03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03e:	e124      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e040:	2380      	movs	r3, #128	; 0x80
 800e042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e046:	e120      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4acb      	ldr	r2, [pc, #812]	; (800e37c <UART_SetConfig+0x698>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d176      	bne.n	800e140 <UART_SetConfig+0x45c>
 800e052:	4bcb      	ldr	r3, [pc, #812]	; (800e380 <UART_SetConfig+0x69c>)
 800e054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e05a:	2b28      	cmp	r3, #40	; 0x28
 800e05c:	d86c      	bhi.n	800e138 <UART_SetConfig+0x454>
 800e05e:	a201      	add	r2, pc, #4	; (adr r2, 800e064 <UART_SetConfig+0x380>)
 800e060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e064:	0800e109 	.word	0x0800e109
 800e068:	0800e139 	.word	0x0800e139
 800e06c:	0800e139 	.word	0x0800e139
 800e070:	0800e139 	.word	0x0800e139
 800e074:	0800e139 	.word	0x0800e139
 800e078:	0800e139 	.word	0x0800e139
 800e07c:	0800e139 	.word	0x0800e139
 800e080:	0800e139 	.word	0x0800e139
 800e084:	0800e111 	.word	0x0800e111
 800e088:	0800e139 	.word	0x0800e139
 800e08c:	0800e139 	.word	0x0800e139
 800e090:	0800e139 	.word	0x0800e139
 800e094:	0800e139 	.word	0x0800e139
 800e098:	0800e139 	.word	0x0800e139
 800e09c:	0800e139 	.word	0x0800e139
 800e0a0:	0800e139 	.word	0x0800e139
 800e0a4:	0800e119 	.word	0x0800e119
 800e0a8:	0800e139 	.word	0x0800e139
 800e0ac:	0800e139 	.word	0x0800e139
 800e0b0:	0800e139 	.word	0x0800e139
 800e0b4:	0800e139 	.word	0x0800e139
 800e0b8:	0800e139 	.word	0x0800e139
 800e0bc:	0800e139 	.word	0x0800e139
 800e0c0:	0800e139 	.word	0x0800e139
 800e0c4:	0800e121 	.word	0x0800e121
 800e0c8:	0800e139 	.word	0x0800e139
 800e0cc:	0800e139 	.word	0x0800e139
 800e0d0:	0800e139 	.word	0x0800e139
 800e0d4:	0800e139 	.word	0x0800e139
 800e0d8:	0800e139 	.word	0x0800e139
 800e0dc:	0800e139 	.word	0x0800e139
 800e0e0:	0800e139 	.word	0x0800e139
 800e0e4:	0800e129 	.word	0x0800e129
 800e0e8:	0800e139 	.word	0x0800e139
 800e0ec:	0800e139 	.word	0x0800e139
 800e0f0:	0800e139 	.word	0x0800e139
 800e0f4:	0800e139 	.word	0x0800e139
 800e0f8:	0800e139 	.word	0x0800e139
 800e0fc:	0800e139 	.word	0x0800e139
 800e100:	0800e139 	.word	0x0800e139
 800e104:	0800e131 	.word	0x0800e131
 800e108:	2301      	movs	r3, #1
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e0bc      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e110:	2304      	movs	r3, #4
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e0b8      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e118:	2308      	movs	r3, #8
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e0b4      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e120:	2310      	movs	r3, #16
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e0b0      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e128:	2320      	movs	r3, #32
 800e12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12e:	e0ac      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e130:	2340      	movs	r3, #64	; 0x40
 800e132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e136:	e0a8      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e138:	2380      	movs	r3, #128	; 0x80
 800e13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13e:	e0a4      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a8f      	ldr	r2, [pc, #572]	; (800e384 <UART_SetConfig+0x6a0>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d130      	bne.n	800e1ac <UART_SetConfig+0x4c8>
 800e14a:	4b8d      	ldr	r3, [pc, #564]	; (800e380 <UART_SetConfig+0x69c>)
 800e14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e14e:	f003 0307 	and.w	r3, r3, #7
 800e152:	2b05      	cmp	r3, #5
 800e154:	d826      	bhi.n	800e1a4 <UART_SetConfig+0x4c0>
 800e156:	a201      	add	r2, pc, #4	; (adr r2, 800e15c <UART_SetConfig+0x478>)
 800e158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15c:	0800e175 	.word	0x0800e175
 800e160:	0800e17d 	.word	0x0800e17d
 800e164:	0800e185 	.word	0x0800e185
 800e168:	0800e18d 	.word	0x0800e18d
 800e16c:	0800e195 	.word	0x0800e195
 800e170:	0800e19d 	.word	0x0800e19d
 800e174:	2300      	movs	r3, #0
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e086      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e17c:	2304      	movs	r3, #4
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e082      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e184:	2308      	movs	r3, #8
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e07e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e18c:	2310      	movs	r3, #16
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e192:	e07a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e194:	2320      	movs	r3, #32
 800e196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19a:	e076      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e19c:	2340      	movs	r3, #64	; 0x40
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a2:	e072      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1a4:	2380      	movs	r3, #128	; 0x80
 800e1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1aa:	e06e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a75      	ldr	r2, [pc, #468]	; (800e388 <UART_SetConfig+0x6a4>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d130      	bne.n	800e218 <UART_SetConfig+0x534>
 800e1b6:	4b72      	ldr	r3, [pc, #456]	; (800e380 <UART_SetConfig+0x69c>)
 800e1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ba:	f003 0307 	and.w	r3, r3, #7
 800e1be:	2b05      	cmp	r3, #5
 800e1c0:	d826      	bhi.n	800e210 <UART_SetConfig+0x52c>
 800e1c2:	a201      	add	r2, pc, #4	; (adr r2, 800e1c8 <UART_SetConfig+0x4e4>)
 800e1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c8:	0800e1e1 	.word	0x0800e1e1
 800e1cc:	0800e1e9 	.word	0x0800e1e9
 800e1d0:	0800e1f1 	.word	0x0800e1f1
 800e1d4:	0800e1f9 	.word	0x0800e1f9
 800e1d8:	0800e201 	.word	0x0800e201
 800e1dc:	0800e209 	.word	0x0800e209
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e050      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1e8:	2304      	movs	r3, #4
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e04c      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1f0:	2308      	movs	r3, #8
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e048      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e1f8:	2310      	movs	r3, #16
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e044      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e200:	2320      	movs	r3, #32
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e206:	e040      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e208:	2340      	movs	r3, #64	; 0x40
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e03c      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e210:	2380      	movs	r3, #128	; 0x80
 800e212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e216:	e038      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a5b      	ldr	r2, [pc, #364]	; (800e38c <UART_SetConfig+0x6a8>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d130      	bne.n	800e284 <UART_SetConfig+0x5a0>
 800e222:	4b57      	ldr	r3, [pc, #348]	; (800e380 <UART_SetConfig+0x69c>)
 800e224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e226:	f003 0307 	and.w	r3, r3, #7
 800e22a:	2b05      	cmp	r3, #5
 800e22c:	d826      	bhi.n	800e27c <UART_SetConfig+0x598>
 800e22e:	a201      	add	r2, pc, #4	; (adr r2, 800e234 <UART_SetConfig+0x550>)
 800e230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e234:	0800e24d 	.word	0x0800e24d
 800e238:	0800e255 	.word	0x0800e255
 800e23c:	0800e25d 	.word	0x0800e25d
 800e240:	0800e265 	.word	0x0800e265
 800e244:	0800e26d 	.word	0x0800e26d
 800e248:	0800e275 	.word	0x0800e275
 800e24c:	2302      	movs	r3, #2
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e01a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e254:	2304      	movs	r3, #4
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e016      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e25c:	2308      	movs	r3, #8
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e012      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e264:	2310      	movs	r3, #16
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e00e      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e26c:	2320      	movs	r3, #32
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e272:	e00a      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e274:	2340      	movs	r3, #64	; 0x40
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e006      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e27c:	2380      	movs	r3, #128	; 0x80
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e282:	e002      	b.n	800e28a <UART_SetConfig+0x5a6>
 800e284:	2380      	movs	r3, #128	; 0x80
 800e286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a3f      	ldr	r2, [pc, #252]	; (800e38c <UART_SetConfig+0x6a8>)
 800e290:	4293      	cmp	r3, r2
 800e292:	f040 80f8 	bne.w	800e486 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e296:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e29a:	2b20      	cmp	r3, #32
 800e29c:	dc46      	bgt.n	800e32c <UART_SetConfig+0x648>
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	f2c0 8082 	blt.w	800e3a8 <UART_SetConfig+0x6c4>
 800e2a4:	3b02      	subs	r3, #2
 800e2a6:	2b1e      	cmp	r3, #30
 800e2a8:	d87e      	bhi.n	800e3a8 <UART_SetConfig+0x6c4>
 800e2aa:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <UART_SetConfig+0x5cc>)
 800e2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b0:	0800e333 	.word	0x0800e333
 800e2b4:	0800e3a9 	.word	0x0800e3a9
 800e2b8:	0800e33b 	.word	0x0800e33b
 800e2bc:	0800e3a9 	.word	0x0800e3a9
 800e2c0:	0800e3a9 	.word	0x0800e3a9
 800e2c4:	0800e3a9 	.word	0x0800e3a9
 800e2c8:	0800e34b 	.word	0x0800e34b
 800e2cc:	0800e3a9 	.word	0x0800e3a9
 800e2d0:	0800e3a9 	.word	0x0800e3a9
 800e2d4:	0800e3a9 	.word	0x0800e3a9
 800e2d8:	0800e3a9 	.word	0x0800e3a9
 800e2dc:	0800e3a9 	.word	0x0800e3a9
 800e2e0:	0800e3a9 	.word	0x0800e3a9
 800e2e4:	0800e3a9 	.word	0x0800e3a9
 800e2e8:	0800e35b 	.word	0x0800e35b
 800e2ec:	0800e3a9 	.word	0x0800e3a9
 800e2f0:	0800e3a9 	.word	0x0800e3a9
 800e2f4:	0800e3a9 	.word	0x0800e3a9
 800e2f8:	0800e3a9 	.word	0x0800e3a9
 800e2fc:	0800e3a9 	.word	0x0800e3a9
 800e300:	0800e3a9 	.word	0x0800e3a9
 800e304:	0800e3a9 	.word	0x0800e3a9
 800e308:	0800e3a9 	.word	0x0800e3a9
 800e30c:	0800e3a9 	.word	0x0800e3a9
 800e310:	0800e3a9 	.word	0x0800e3a9
 800e314:	0800e3a9 	.word	0x0800e3a9
 800e318:	0800e3a9 	.word	0x0800e3a9
 800e31c:	0800e3a9 	.word	0x0800e3a9
 800e320:	0800e3a9 	.word	0x0800e3a9
 800e324:	0800e3a9 	.word	0x0800e3a9
 800e328:	0800e39b 	.word	0x0800e39b
 800e32c:	2b40      	cmp	r3, #64	; 0x40
 800e32e:	d037      	beq.n	800e3a0 <UART_SetConfig+0x6bc>
 800e330:	e03a      	b.n	800e3a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e332:	f7fc ffef 	bl	800b314 <HAL_RCCEx_GetD3PCLK1Freq>
 800e336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e338:	e03c      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e33a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fc fffe 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e348:	e034      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e34a:	f107 0318 	add.w	r3, r7, #24
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fd f94a 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e358:	e02c      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e35a:	4b09      	ldr	r3, [pc, #36]	; (800e380 <UART_SetConfig+0x69c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f003 0320 	and.w	r3, r3, #32
 800e362:	2b00      	cmp	r3, #0
 800e364:	d016      	beq.n	800e394 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e366:	4b06      	ldr	r3, [pc, #24]	; (800e380 <UART_SetConfig+0x69c>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	08db      	lsrs	r3, r3, #3
 800e36c:	f003 0303 	and.w	r3, r3, #3
 800e370:	4a07      	ldr	r2, [pc, #28]	; (800e390 <UART_SetConfig+0x6ac>)
 800e372:	fa22 f303 	lsr.w	r3, r2, r3
 800e376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e378:	e01c      	b.n	800e3b4 <UART_SetConfig+0x6d0>
 800e37a:	bf00      	nop
 800e37c:	40011400 	.word	0x40011400
 800e380:	58024400 	.word	0x58024400
 800e384:	40007800 	.word	0x40007800
 800e388:	40007c00 	.word	0x40007c00
 800e38c:	58000c00 	.word	0x58000c00
 800e390:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e394:	4b9d      	ldr	r3, [pc, #628]	; (800e60c <UART_SetConfig+0x928>)
 800e396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e398:	e00c      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e39a:	4b9d      	ldr	r3, [pc, #628]	; (800e610 <UART_SetConfig+0x92c>)
 800e39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e39e:	e009      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3a6:	e005      	b.n	800e3b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f000 81de 	beq.w	800e778 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c0:	4a94      	ldr	r2, [pc, #592]	; (800e614 <UART_SetConfig+0x930>)
 800e3c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	685a      	ldr	r2, [r3, #4]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	4413      	add	r3, r2
 800e3da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d305      	bcc.n	800e3ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d903      	bls.n	800e3f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3f2:	e1c1      	b.n	800e778 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	60bb      	str	r3, [r7, #8]
 800e3fa:	60fa      	str	r2, [r7, #12]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e400:	4a84      	ldr	r2, [pc, #528]	; (800e614 <UART_SetConfig+0x930>)
 800e402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e406:	b29b      	uxth	r3, r3
 800e408:	2200      	movs	r2, #0
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	607a      	str	r2, [r7, #4]
 800e40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e416:	f7f1 ffcb 	bl	80003b0 <__aeabi_uldivmod>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	4610      	mov	r0, r2
 800e420:	4619      	mov	r1, r3
 800e422:	f04f 0200 	mov.w	r2, #0
 800e426:	f04f 0300 	mov.w	r3, #0
 800e42a:	020b      	lsls	r3, r1, #8
 800e42c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e430:	0202      	lsls	r2, r0, #8
 800e432:	6979      	ldr	r1, [r7, #20]
 800e434:	6849      	ldr	r1, [r1, #4]
 800e436:	0849      	lsrs	r1, r1, #1
 800e438:	2000      	movs	r0, #0
 800e43a:	460c      	mov	r4, r1
 800e43c:	4605      	mov	r5, r0
 800e43e:	eb12 0804 	adds.w	r8, r2, r4
 800e442:	eb43 0905 	adc.w	r9, r3, r5
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	469a      	mov	sl, r3
 800e44e:	4693      	mov	fp, r2
 800e450:	4652      	mov	r2, sl
 800e452:	465b      	mov	r3, fp
 800e454:	4640      	mov	r0, r8
 800e456:	4649      	mov	r1, r9
 800e458:	f7f1 ffaa 	bl	80003b0 <__aeabi_uldivmod>
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
 800e460:	4613      	mov	r3, r2
 800e462:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e46a:	d308      	bcc.n	800e47e <UART_SetConfig+0x79a>
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e472:	d204      	bcs.n	800e47e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e47a:	60da      	str	r2, [r3, #12]
 800e47c:	e17c      	b.n	800e778 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e47e:	2301      	movs	r3, #1
 800e480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e484:	e178      	b.n	800e778 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	69db      	ldr	r3, [r3, #28]
 800e48a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e48e:	f040 80c5 	bne.w	800e61c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e492:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e496:	2b20      	cmp	r3, #32
 800e498:	dc48      	bgt.n	800e52c <UART_SetConfig+0x848>
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	db7b      	blt.n	800e596 <UART_SetConfig+0x8b2>
 800e49e:	2b20      	cmp	r3, #32
 800e4a0:	d879      	bhi.n	800e596 <UART_SetConfig+0x8b2>
 800e4a2:	a201      	add	r2, pc, #4	; (adr r2, 800e4a8 <UART_SetConfig+0x7c4>)
 800e4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a8:	0800e533 	.word	0x0800e533
 800e4ac:	0800e53b 	.word	0x0800e53b
 800e4b0:	0800e597 	.word	0x0800e597
 800e4b4:	0800e597 	.word	0x0800e597
 800e4b8:	0800e543 	.word	0x0800e543
 800e4bc:	0800e597 	.word	0x0800e597
 800e4c0:	0800e597 	.word	0x0800e597
 800e4c4:	0800e597 	.word	0x0800e597
 800e4c8:	0800e553 	.word	0x0800e553
 800e4cc:	0800e597 	.word	0x0800e597
 800e4d0:	0800e597 	.word	0x0800e597
 800e4d4:	0800e597 	.word	0x0800e597
 800e4d8:	0800e597 	.word	0x0800e597
 800e4dc:	0800e597 	.word	0x0800e597
 800e4e0:	0800e597 	.word	0x0800e597
 800e4e4:	0800e597 	.word	0x0800e597
 800e4e8:	0800e563 	.word	0x0800e563
 800e4ec:	0800e597 	.word	0x0800e597
 800e4f0:	0800e597 	.word	0x0800e597
 800e4f4:	0800e597 	.word	0x0800e597
 800e4f8:	0800e597 	.word	0x0800e597
 800e4fc:	0800e597 	.word	0x0800e597
 800e500:	0800e597 	.word	0x0800e597
 800e504:	0800e597 	.word	0x0800e597
 800e508:	0800e597 	.word	0x0800e597
 800e50c:	0800e597 	.word	0x0800e597
 800e510:	0800e597 	.word	0x0800e597
 800e514:	0800e597 	.word	0x0800e597
 800e518:	0800e597 	.word	0x0800e597
 800e51c:	0800e597 	.word	0x0800e597
 800e520:	0800e597 	.word	0x0800e597
 800e524:	0800e597 	.word	0x0800e597
 800e528:	0800e589 	.word	0x0800e589
 800e52c:	2b40      	cmp	r3, #64	; 0x40
 800e52e:	d02e      	beq.n	800e58e <UART_SetConfig+0x8aa>
 800e530:	e031      	b.n	800e596 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e532:	f7fb fa69 	bl	8009a08 <HAL_RCC_GetPCLK1Freq>
 800e536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e538:	e033      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e53a:	f7fb fa7b 	bl	8009a34 <HAL_RCC_GetPCLK2Freq>
 800e53e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e540:	e02f      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e546:	4618      	mov	r0, r3
 800e548:	f7fc fefa 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e550:	e027      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e552:	f107 0318 	add.w	r3, r7, #24
 800e556:	4618      	mov	r0, r3
 800e558:	f7fd f846 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e560:	e01f      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e562:	4b2d      	ldr	r3, [pc, #180]	; (800e618 <UART_SetConfig+0x934>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 0320 	and.w	r3, r3, #32
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d009      	beq.n	800e582 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e56e:	4b2a      	ldr	r3, [pc, #168]	; (800e618 <UART_SetConfig+0x934>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	08db      	lsrs	r3, r3, #3
 800e574:	f003 0303 	and.w	r3, r3, #3
 800e578:	4a24      	ldr	r2, [pc, #144]	; (800e60c <UART_SetConfig+0x928>)
 800e57a:	fa22 f303 	lsr.w	r3, r2, r3
 800e57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e580:	e00f      	b.n	800e5a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e582:	4b22      	ldr	r3, [pc, #136]	; (800e60c <UART_SetConfig+0x928>)
 800e584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e586:	e00c      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e588:	4b21      	ldr	r3, [pc, #132]	; (800e610 <UART_SetConfig+0x92c>)
 800e58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e58c:	e009      	b.n	800e5a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e58e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e594:	e005      	b.n	800e5a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e596:	2300      	movs	r3, #0
 800e598:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 80e7 	beq.w	800e778 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ae:	4a19      	ldr	r2, [pc, #100]	; (800e614 <UART_SetConfig+0x930>)
 800e5b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5bc:	005a      	lsls	r2, r3, #1
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	085b      	lsrs	r3, r3, #1
 800e5c4:	441a      	add	r2, r3
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	2b0f      	cmp	r3, #15
 800e5d4:	d916      	bls.n	800e604 <UART_SetConfig+0x920>
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5dc:	d212      	bcs.n	800e604 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	f023 030f 	bic.w	r3, r3, #15
 800e5e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	085b      	lsrs	r3, r3, #1
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	f003 0307 	and.w	r3, r3, #7
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e600:	60da      	str	r2, [r3, #12]
 800e602:	e0b9      	b.n	800e778 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e60a:	e0b5      	b.n	800e778 <UART_SetConfig+0xa94>
 800e60c:	03d09000 	.word	0x03d09000
 800e610:	003d0900 	.word	0x003d0900
 800e614:	08018ce4 	.word	0x08018ce4
 800e618:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e61c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e620:	2b20      	cmp	r3, #32
 800e622:	dc49      	bgt.n	800e6b8 <UART_SetConfig+0x9d4>
 800e624:	2b00      	cmp	r3, #0
 800e626:	db7c      	blt.n	800e722 <UART_SetConfig+0xa3e>
 800e628:	2b20      	cmp	r3, #32
 800e62a:	d87a      	bhi.n	800e722 <UART_SetConfig+0xa3e>
 800e62c:	a201      	add	r2, pc, #4	; (adr r2, 800e634 <UART_SetConfig+0x950>)
 800e62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e632:	bf00      	nop
 800e634:	0800e6bf 	.word	0x0800e6bf
 800e638:	0800e6c7 	.word	0x0800e6c7
 800e63c:	0800e723 	.word	0x0800e723
 800e640:	0800e723 	.word	0x0800e723
 800e644:	0800e6cf 	.word	0x0800e6cf
 800e648:	0800e723 	.word	0x0800e723
 800e64c:	0800e723 	.word	0x0800e723
 800e650:	0800e723 	.word	0x0800e723
 800e654:	0800e6df 	.word	0x0800e6df
 800e658:	0800e723 	.word	0x0800e723
 800e65c:	0800e723 	.word	0x0800e723
 800e660:	0800e723 	.word	0x0800e723
 800e664:	0800e723 	.word	0x0800e723
 800e668:	0800e723 	.word	0x0800e723
 800e66c:	0800e723 	.word	0x0800e723
 800e670:	0800e723 	.word	0x0800e723
 800e674:	0800e6ef 	.word	0x0800e6ef
 800e678:	0800e723 	.word	0x0800e723
 800e67c:	0800e723 	.word	0x0800e723
 800e680:	0800e723 	.word	0x0800e723
 800e684:	0800e723 	.word	0x0800e723
 800e688:	0800e723 	.word	0x0800e723
 800e68c:	0800e723 	.word	0x0800e723
 800e690:	0800e723 	.word	0x0800e723
 800e694:	0800e723 	.word	0x0800e723
 800e698:	0800e723 	.word	0x0800e723
 800e69c:	0800e723 	.word	0x0800e723
 800e6a0:	0800e723 	.word	0x0800e723
 800e6a4:	0800e723 	.word	0x0800e723
 800e6a8:	0800e723 	.word	0x0800e723
 800e6ac:	0800e723 	.word	0x0800e723
 800e6b0:	0800e723 	.word	0x0800e723
 800e6b4:	0800e715 	.word	0x0800e715
 800e6b8:	2b40      	cmp	r3, #64	; 0x40
 800e6ba:	d02e      	beq.n	800e71a <UART_SetConfig+0xa36>
 800e6bc:	e031      	b.n	800e722 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6be:	f7fb f9a3 	bl	8009a08 <HAL_RCC_GetPCLK1Freq>
 800e6c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6c4:	e033      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6c6:	f7fb f9b5 	bl	8009a34 <HAL_RCC_GetPCLK2Freq>
 800e6ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6cc:	e02f      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fc fe34 	bl	800b340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6dc:	e027      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6de:	f107 0318 	add.w	r3, r7, #24
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fc ff80 	bl	800b5e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6ec:	e01f      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6ee:	4b2d      	ldr	r3, [pc, #180]	; (800e7a4 <UART_SetConfig+0xac0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f003 0320 	and.w	r3, r3, #32
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d009      	beq.n	800e70e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e6fa:	4b2a      	ldr	r3, [pc, #168]	; (800e7a4 <UART_SetConfig+0xac0>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	08db      	lsrs	r3, r3, #3
 800e700:	f003 0303 	and.w	r3, r3, #3
 800e704:	4a28      	ldr	r2, [pc, #160]	; (800e7a8 <UART_SetConfig+0xac4>)
 800e706:	fa22 f303 	lsr.w	r3, r2, r3
 800e70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e70c:	e00f      	b.n	800e72e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e70e:	4b26      	ldr	r3, [pc, #152]	; (800e7a8 <UART_SetConfig+0xac4>)
 800e710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e712:	e00c      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e714:	4b25      	ldr	r3, [pc, #148]	; (800e7ac <UART_SetConfig+0xac8>)
 800e716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e718:	e009      	b.n	800e72e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e71a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e720:	e005      	b.n	800e72e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e722:	2300      	movs	r3, #0
 800e724:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e726:	2301      	movs	r3, #1
 800e728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e72c:	bf00      	nop
    }

    if (pclk != 0U)
 800e72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e730:	2b00      	cmp	r3, #0
 800e732:	d021      	beq.n	800e778 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e738:	4a1d      	ldr	r2, [pc, #116]	; (800e7b0 <UART_SetConfig+0xacc>)
 800e73a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e73e:	461a      	mov	r2, r3
 800e740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e742:	fbb3 f2f2 	udiv	r2, r3, r2
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	085b      	lsrs	r3, r3, #1
 800e74c:	441a      	add	r2, r3
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	fbb2 f3f3 	udiv	r3, r2, r3
 800e756:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	2b0f      	cmp	r3, #15
 800e75c:	d909      	bls.n	800e772 <UART_SetConfig+0xa8e>
 800e75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e764:	d205      	bcs.n	800e772 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e768:	b29a      	uxth	r2, r3
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	60da      	str	r2, [r3, #12]
 800e770:	e002      	b.n	800e778 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	2201      	movs	r2, #1
 800e784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	2200      	movs	r2, #0
 800e78c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	2200      	movs	r2, #0
 800e792:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e794:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3748      	adds	r7, #72	; 0x48
 800e79c:	46bd      	mov	sp, r7
 800e79e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7a2:	bf00      	nop
 800e7a4:	58024400 	.word	0x58024400
 800e7a8:	03d09000 	.word	0x03d09000
 800e7ac:	003d0900 	.word	0x003d0900
 800e7b0:	08018ce4 	.word	0x08018ce4

0800e7b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00a      	beq.n	800e7de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	430a      	orrs	r2, r1
 800e7dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e2:	f003 0302 	and.w	r3, r3, #2
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00a      	beq.n	800e800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	430a      	orrs	r2, r1
 800e7fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e804:	f003 0304 	and.w	r3, r3, #4
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00a      	beq.n	800e822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	430a      	orrs	r2, r1
 800e820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e826:	f003 0308 	and.w	r3, r3, #8
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00a      	beq.n	800e844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	430a      	orrs	r2, r1
 800e842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e848:	f003 0310 	and.w	r3, r3, #16
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00a      	beq.n	800e866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	430a      	orrs	r2, r1
 800e864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e86a:	f003 0320 	and.w	r3, r3, #32
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00a      	beq.n	800e888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	430a      	orrs	r2, r1
 800e886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e890:	2b00      	cmp	r3, #0
 800e892:	d01a      	beq.n	800e8ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8b2:	d10a      	bne.n	800e8ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	430a      	orrs	r2, r1
 800e8c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00a      	beq.n	800e8ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	605a      	str	r2, [r3, #4]
  }
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af02      	add	r7, sp, #8
 800e8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e908:	f7f5 f802 	bl	8003910 <HAL_GetTick>
 800e90c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f003 0308 	and.w	r3, r3, #8
 800e918:	2b08      	cmp	r3, #8
 800e91a:	d10e      	bne.n	800e93a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e91c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e920:	9300      	str	r3, [sp, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f82f 	bl	800e98e <UART_WaitOnFlagUntilTimeout>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e936:	2303      	movs	r3, #3
 800e938:	e025      	b.n	800e986 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f003 0304 	and.w	r3, r3, #4
 800e944:	2b04      	cmp	r3, #4
 800e946:	d10e      	bne.n	800e966 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f819 	bl	800e98e <UART_WaitOnFlagUntilTimeout>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e00f      	b.n	800e986 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2220      	movs	r2, #32
 800e96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2220      	movs	r2, #32
 800e972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b09c      	sub	sp, #112	; 0x70
 800e992:	af00      	add	r7, sp, #0
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	603b      	str	r3, [r7, #0]
 800e99a:	4613      	mov	r3, r2
 800e99c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e99e:	e0a9      	b.n	800eaf4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a6:	f000 80a5 	beq.w	800eaf4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9aa:	f7f4 ffb1 	bl	8003910 <HAL_GetTick>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d302      	bcc.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e9ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d140      	bne.n	800ea42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9c8:	e853 3f00 	ldrex	r3, [r3]
 800e9cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e9d4:	667b      	str	r3, [r7, #100]	; 0x64
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e9e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e9e6:	e841 2300 	strex	r3, r2, [r1]
 800e9ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d1e6      	bne.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	3308      	adds	r3, #8
 800e9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fc:	e853 3f00 	ldrex	r3, [r3]
 800ea00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea04:	f023 0301 	bic.w	r3, r3, #1
 800ea08:	663b      	str	r3, [r7, #96]	; 0x60
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	3308      	adds	r3, #8
 800ea10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea12:	64ba      	str	r2, [r7, #72]	; 0x48
 800ea14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea1a:	e841 2300 	strex	r3, r2, [r1]
 800ea1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ea20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e5      	bne.n	800e9f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2220      	movs	r2, #32
 800ea2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2220      	movs	r2, #32
 800ea32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	e069      	b.n	800eb16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 0304 	and.w	r3, r3, #4
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d051      	beq.n	800eaf4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	69db      	ldr	r3, [r3, #28]
 800ea56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea5e:	d149      	bne.n	800eaf4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	e853 3f00 	ldrex	r3, [r3]
 800ea76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ea7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	461a      	mov	r2, r3
 800ea86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea88:	637b      	str	r3, [r7, #52]	; 0x34
 800ea8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea90:	e841 2300 	strex	r3, r2, [r1]
 800ea94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1e6      	bne.n	800ea6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	e853 3f00 	ldrex	r3, [r3]
 800eaaa:	613b      	str	r3, [r7, #16]
   return(result);
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	f023 0301 	bic.w	r3, r3, #1
 800eab2:	66bb      	str	r3, [r7, #104]	; 0x68
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3308      	adds	r3, #8
 800eaba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eabc:	623a      	str	r2, [r7, #32]
 800eabe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac0:	69f9      	ldr	r1, [r7, #28]
 800eac2:	6a3a      	ldr	r2, [r7, #32]
 800eac4:	e841 2300 	strex	r3, r2, [r1]
 800eac8:	61bb      	str	r3, [r7, #24]
   return(result);
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1e5      	bne.n	800ea9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2220      	movs	r2, #32
 800ead4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2220      	movs	r2, #32
 800eadc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2220      	movs	r2, #32
 800eae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eaf0:	2303      	movs	r3, #3
 800eaf2:	e010      	b.n	800eb16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	69da      	ldr	r2, [r3, #28]
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	4013      	ands	r3, r2
 800eafe:	68ba      	ldr	r2, [r7, #8]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	bf0c      	ite	eq
 800eb04:	2301      	moveq	r3, #1
 800eb06:	2300      	movne	r3, #0
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	f43f af46 	beq.w	800e9a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb14:	2300      	movs	r3, #0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3770      	adds	r7, #112	; 0x70
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b096      	sub	sp, #88	; 0x58
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	68ba      	ldr	r2, [r7, #8]
 800eb32:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	88fa      	ldrh	r2, [r7, #6]
 800eb38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2222      	movs	r2, #34	; 0x22
 800eb48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d02c      	beq.n	800ebae <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb58:	4a42      	ldr	r2, [pc, #264]	; (800ec64 <UART_Start_Receive_DMA+0x144>)
 800eb5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb60:	4a41      	ldr	r2, [pc, #260]	; (800ec68 <UART_Start_Receive_DMA+0x148>)
 800eb62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb68:	4a40      	ldr	r2, [pc, #256]	; (800ec6c <UART_Start_Receive_DMA+0x14c>)
 800eb6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb70:	2200      	movs	r2, #0
 800eb72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	3324      	adds	r3, #36	; 0x24
 800eb7e:	4619      	mov	r1, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb84:	461a      	mov	r2, r3
 800eb86:	88fb      	ldrh	r3, [r7, #6]
 800eb88:	f7f6 fd86 	bl	8005698 <HAL_DMA_Start_IT>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00d      	beq.n	800ebae <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2210      	movs	r2, #16
 800eb96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2220      	movs	r2, #32
 800eba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e055      	b.n	800ec5a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d018      	beq.n	800ebf0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc6:	e853 3f00 	ldrex	r3, [r3]
 800ebca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebd2:	657b      	str	r3, [r7, #84]	; 0x54
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	461a      	mov	r2, r3
 800ebda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebdc:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebde:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebe4:	e841 2300 	strex	r3, r2, [r1]
 800ebe8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ebea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1e6      	bne.n	800ebbe <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfa:	e853 3f00 	ldrex	r3, [r3]
 800ebfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	f043 0301 	orr.w	r3, r3, #1
 800ec06:	653b      	str	r3, [r7, #80]	; 0x50
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec10:	637a      	str	r2, [r7, #52]	; 0x34
 800ec12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec18:	e841 2300 	strex	r3, r2, [r1]
 800ec1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1e5      	bne.n	800ebf0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	3308      	adds	r3, #8
 800ec2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	e853 3f00 	ldrex	r3, [r3]
 800ec32:	613b      	str	r3, [r7, #16]
   return(result);
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	3308      	adds	r3, #8
 800ec42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec44:	623a      	str	r2, [r7, #32]
 800ec46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec48:	69f9      	ldr	r1, [r7, #28]
 800ec4a:	6a3a      	ldr	r2, [r7, #32]
 800ec4c:	e841 2300 	strex	r3, r2, [r1]
 800ec50:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d1e5      	bne.n	800ec24 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3758      	adds	r7, #88	; 0x58
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	0800edc1 	.word	0x0800edc1
 800ec68:	0800eee3 	.word	0x0800eee3
 800ec6c:	0800ef1b 	.word	0x0800ef1b

0800ec70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b08f      	sub	sp, #60	; 0x3c
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec7e:	6a3b      	ldr	r3, [r7, #32]
 800ec80:	e853 3f00 	ldrex	r3, [r3]
 800ec84:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ec8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	461a      	mov	r2, r3
 800ec94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec9e:	e841 2300 	strex	r3, r2, [r1]
 800eca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1e6      	bne.n	800ec78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	3308      	adds	r3, #8
 800ecb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	e853 3f00 	ldrex	r3, [r3]
 800ecb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ecc0:	633b      	str	r3, [r7, #48]	; 0x30
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecca:	61ba      	str	r2, [r7, #24]
 800eccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecce:	6979      	ldr	r1, [r7, #20]
 800ecd0:	69ba      	ldr	r2, [r7, #24]
 800ecd2:	e841 2300 	strex	r3, r2, [r1]
 800ecd6:	613b      	str	r3, [r7, #16]
   return(result);
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d1e5      	bne.n	800ecaa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2220      	movs	r2, #32
 800ece2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ece6:	bf00      	nop
 800ece8:	373c      	adds	r7, #60	; 0x3c
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
	...

0800ecf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b095      	sub	sp, #84	; 0x54
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed04:	e853 3f00 	ldrex	r3, [r3]
 800ed08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	461a      	mov	r2, r3
 800ed18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ed1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed22:	e841 2300 	strex	r3, r2, [r1]
 800ed26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d1e6      	bne.n	800ecfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	3308      	adds	r3, #8
 800ed34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	e853 3f00 	ldrex	r3, [r3]
 800ed3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed3e:	69fa      	ldr	r2, [r7, #28]
 800ed40:	4b1e      	ldr	r3, [pc, #120]	; (800edbc <UART_EndRxTransfer+0xc8>)
 800ed42:	4013      	ands	r3, r2
 800ed44:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	3308      	adds	r3, #8
 800ed4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed56:	e841 2300 	strex	r3, r2, [r1]
 800ed5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1e5      	bne.n	800ed2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d118      	bne.n	800ed9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	e853 3f00 	ldrex	r3, [r3]
 800ed76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	f023 0310 	bic.w	r3, r3, #16
 800ed7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	461a      	mov	r2, r3
 800ed86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed88:	61bb      	str	r3, [r7, #24]
 800ed8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed8c:	6979      	ldr	r1, [r7, #20]
 800ed8e:	69ba      	ldr	r2, [r7, #24]
 800ed90:	e841 2300 	strex	r3, r2, [r1]
 800ed94:	613b      	str	r3, [r7, #16]
   return(result);
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1e6      	bne.n	800ed6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2220      	movs	r2, #32
 800eda0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2200      	movs	r2, #0
 800edae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800edb0:	bf00      	nop
 800edb2:	3754      	adds	r7, #84	; 0x54
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	effffffe 	.word	0xeffffffe

0800edc0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b09c      	sub	sp, #112	; 0x70
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edcc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	69db      	ldr	r3, [r3, #28]
 800edd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edd6:	d071      	beq.n	800eebc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800edd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edda:	2200      	movs	r2, #0
 800eddc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ede0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ede6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ede8:	e853 3f00 	ldrex	r3, [r3]
 800edec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800edee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800edf4:	66bb      	str	r3, [r7, #104]	; 0x68
 800edf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	461a      	mov	r2, r3
 800edfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edfe:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ee04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee06:	e841 2300 	strex	r3, r2, [r1]
 800ee0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ee0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1e6      	bne.n	800ede0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	3308      	adds	r3, #8
 800ee18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1c:	e853 3f00 	ldrex	r3, [r3]
 800ee20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee24:	f023 0301 	bic.w	r3, r3, #1
 800ee28:	667b      	str	r3, [r7, #100]	; 0x64
 800ee2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	3308      	adds	r3, #8
 800ee30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee32:	647a      	str	r2, [r7, #68]	; 0x44
 800ee34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee3a:	e841 2300 	strex	r3, r2, [r1]
 800ee3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1e5      	bne.n	800ee12 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3308      	adds	r3, #8
 800ee4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee50:	e853 3f00 	ldrex	r3, [r3]
 800ee54:	623b      	str	r3, [r7, #32]
   return(result);
 800ee56:	6a3b      	ldr	r3, [r7, #32]
 800ee58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee5c:	663b      	str	r3, [r7, #96]	; 0x60
 800ee5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	3308      	adds	r3, #8
 800ee64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee66:	633a      	str	r2, [r7, #48]	; 0x30
 800ee68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee6e:	e841 2300 	strex	r3, r2, [r1]
 800ee72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1e5      	bne.n	800ee46 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ee7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee7c:	2220      	movs	r2, #32
 800ee7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d118      	bne.n	800eebc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	e853 3f00 	ldrex	r3, [r3]
 800ee96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f023 0310 	bic.w	r3, r3, #16
 800ee9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	461a      	mov	r2, r3
 800eea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eea8:	61fb      	str	r3, [r7, #28]
 800eeaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeac:	69b9      	ldr	r1, [r7, #24]
 800eeae:	69fa      	ldr	r2, [r7, #28]
 800eeb0:	e841 2300 	strex	r3, r2, [r1]
 800eeb4:	617b      	str	r3, [r7, #20]
   return(result);
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d1e6      	bne.n	800ee8a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d107      	bne.n	800eed4 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eec6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eeca:	4619      	mov	r1, r3
 800eecc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eece:	f006 f8cb 	bl	8015068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eed2:	e002      	b.n	800eeda <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800eed4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eed6:	f7fe fef1 	bl	800dcbc <HAL_UART_RxCpltCallback>
}
 800eeda:	bf00      	nop
 800eedc:	3770      	adds	r7, #112	; 0x70
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b084      	sub	sp, #16
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d109      	bne.n	800ef0c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eefe:	085b      	lsrs	r3, r3, #1
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	4619      	mov	r1, r3
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	f006 f8af 	bl	8015068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ef0a:	e002      	b.n	800ef12 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f7fe fedf 	bl	800dcd0 <HAL_UART_RxHalfCpltCallback>
}
 800ef12:	bf00      	nop
 800ef14:	3710      	adds	r7, #16
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}

0800ef1a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b086      	sub	sp, #24
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef26:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef42:	2b80      	cmp	r3, #128	; 0x80
 800ef44:	d109      	bne.n	800ef5a <UART_DMAError+0x40>
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	2b21      	cmp	r3, #33	; 0x21
 800ef4a:	d106      	bne.n	800ef5a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ef54:	6978      	ldr	r0, [r7, #20]
 800ef56:	f7ff fe8b 	bl	800ec70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef64:	2b40      	cmp	r3, #64	; 0x40
 800ef66:	d109      	bne.n	800ef7c <UART_DMAError+0x62>
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b22      	cmp	r3, #34	; 0x22
 800ef6c:	d106      	bne.n	800ef7c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ef76:	6978      	ldr	r0, [r7, #20]
 800ef78:	f7ff febc 	bl	800ecf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef82:	f043 0210 	orr.w	r2, r3, #16
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef8c:	6978      	ldr	r0, [r7, #20]
 800ef8e:	f006 f843 	bl	8015018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef92:	bf00      	nop
 800ef94:	3718      	adds	r7, #24
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b084      	sub	sp, #16
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f006 f82d 	bl	8015018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800efbe:	bf00      	nop
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b088      	sub	sp, #32
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	e853 3f00 	ldrex	r3, [r3]
 800efda:	60bb      	str	r3, [r7, #8]
   return(result);
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efe2:	61fb      	str	r3, [r7, #28]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	61bb      	str	r3, [r7, #24]
 800efee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff0:	6979      	ldr	r1, [r7, #20]
 800eff2:	69ba      	ldr	r2, [r7, #24]
 800eff4:	e841 2300 	strex	r3, r2, [r1]
 800eff8:	613b      	str	r3, [r7, #16]
   return(result);
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1e6      	bne.n	800efce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2220      	movs	r2, #32
 800f004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7fe fe4a 	bl	800dca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f014:	bf00      	nop
 800f016:	3720      	adds	r7, #32
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f024:	bf00      	nop
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f038:	bf00      	nop
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f058:	b480      	push	{r7}
 800f05a:	b085      	sub	sp, #20
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f066:	2b01      	cmp	r3, #1
 800f068:	d101      	bne.n	800f06e <HAL_UARTEx_DisableFifoMode+0x16>
 800f06a:	2302      	movs	r3, #2
 800f06c:	e027      	b.n	800f0be <HAL_UARTEx_DisableFifoMode+0x66>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2201      	movs	r2, #1
 800f072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2224      	movs	r2, #36	; 0x24
 800f07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f022 0201 	bic.w	r2, r2, #1
 800f094:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f09c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2220      	movs	r2, #32
 800f0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f0bc:	2300      	movs	r3, #0
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3714      	adds	r7, #20
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d101      	bne.n	800f0e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f0de:	2302      	movs	r3, #2
 800f0e0:	e02d      	b.n	800f13e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2224      	movs	r2, #36	; 0x24
 800f0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f022 0201 	bic.w	r2, r2, #1
 800f108:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	683a      	ldr	r2, [r7, #0]
 800f11a:	430a      	orrs	r2, r1
 800f11c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 f8ac 	bl	800f27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2220      	movs	r2, #32
 800f130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3710      	adds	r7, #16
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b084      	sub	sp, #16
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
 800f14e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f156:	2b01      	cmp	r3, #1
 800f158:	d101      	bne.n	800f15e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f15a:	2302      	movs	r3, #2
 800f15c:	e02d      	b.n	800f1ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2201      	movs	r2, #1
 800f162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2224      	movs	r2, #36	; 0x24
 800f16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f022 0201 	bic.w	r2, r2, #1
 800f184:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	683a      	ldr	r2, [r7, #0]
 800f196:	430a      	orrs	r2, r1
 800f198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 f86e 	bl	800f27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2220      	movs	r2, #32
 800f1ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b08c      	sub	sp, #48	; 0x30
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	60f8      	str	r0, [r7, #12]
 800f1ca:	60b9      	str	r1, [r7, #8]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1d6:	2b20      	cmp	r3, #32
 800f1d8:	d14a      	bne.n	800f270 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f1e0:	88fb      	ldrh	r3, [r7, #6]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e043      	b.n	800f272 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d101      	bne.n	800f1f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	e03c      	b.n	800f272 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2201      	movs	r2, #1
 800f204:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f206:	88fb      	ldrh	r3, [r7, #6]
 800f208:	461a      	mov	r2, r3
 800f20a:	68b9      	ldr	r1, [r7, #8]
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f7ff fc87 	bl	800eb20 <UART_Start_Receive_DMA>
 800f212:	4603      	mov	r3, r0
 800f214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d124      	bne.n	800f26a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f224:	2b01      	cmp	r3, #1
 800f226:	d11d      	bne.n	800f264 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2210      	movs	r2, #16
 800f22e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	e853 3f00 	ldrex	r3, [r3]
 800f23c:	617b      	str	r3, [r7, #20]
   return(result);
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	f043 0310 	orr.w	r3, r3, #16
 800f244:	62bb      	str	r3, [r7, #40]	; 0x28
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	461a      	mov	r2, r3
 800f24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24e:	627b      	str	r3, [r7, #36]	; 0x24
 800f250:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f252:	6a39      	ldr	r1, [r7, #32]
 800f254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f256:	e841 2300 	strex	r3, r2, [r1]
 800f25a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d1e6      	bne.n	800f230 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800f262:	e002      	b.n	800f26a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f264:	2301      	movs	r3, #1
 800f266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f26a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f26e:	e000      	b.n	800f272 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f270:	2302      	movs	r3, #2
  }
}
 800f272:	4618      	mov	r0, r3
 800f274:	3730      	adds	r7, #48	; 0x30
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
	...

0800f27c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d108      	bne.n	800f29e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2201      	movs	r2, #1
 800f298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f29c:	e031      	b.n	800f302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f29e:	2310      	movs	r3, #16
 800f2a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2a2:	2310      	movs	r3, #16
 800f2a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	0e5b      	lsrs	r3, r3, #25
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	f003 0307 	and.w	r3, r3, #7
 800f2b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	0f5b      	lsrs	r3, r3, #29
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	f003 0307 	and.w	r3, r3, #7
 800f2c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2c6:	7bbb      	ldrb	r3, [r7, #14]
 800f2c8:	7b3a      	ldrb	r2, [r7, #12]
 800f2ca:	4911      	ldr	r1, [pc, #68]	; (800f310 <UARTEx_SetNbDataToProcess+0x94>)
 800f2cc:	5c8a      	ldrb	r2, [r1, r2]
 800f2ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f2d2:	7b3a      	ldrb	r2, [r7, #12]
 800f2d4:	490f      	ldr	r1, [pc, #60]	; (800f314 <UARTEx_SetNbDataToProcess+0x98>)
 800f2d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f2e4:	7bfb      	ldrb	r3, [r7, #15]
 800f2e6:	7b7a      	ldrb	r2, [r7, #13]
 800f2e8:	4909      	ldr	r1, [pc, #36]	; (800f310 <UARTEx_SetNbDataToProcess+0x94>)
 800f2ea:	5c8a      	ldrb	r2, [r1, r2]
 800f2ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f2f0:	7b7a      	ldrb	r2, [r7, #13]
 800f2f2:	4908      	ldr	r1, [pc, #32]	; (800f314 <UARTEx_SetNbDataToProcess+0x98>)
 800f2f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f2f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f302:	bf00      	nop
 800f304:	3714      	adds	r7, #20
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	08018cfc 	.word	0x08018cfc
 800f314:	08018d04 	.word	0x08018d04

0800f318 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	4603      	mov	r3, r0
 800f320:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f322:	2300      	movs	r3, #0
 800f324:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f32a:	2b84      	cmp	r3, #132	; 0x84
 800f32c:	d005      	beq.n	800f33a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f32e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	4413      	add	r3, r2
 800f336:	3303      	adds	r3, #3
 800f338:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f33a:	68fb      	ldr	r3, [r7, #12]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3714      	adds	r7, #20
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f34c:	f000 feb0 	bl	80100b0 <vTaskStartScheduler>
  
  return osOK;
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	bd80      	pop	{r7, pc}

0800f356 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f356:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f358:	b087      	sub	sp, #28
 800f35a:	af02      	add	r7, sp, #8
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	685c      	ldr	r4, [r3, #4]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f36c:	b29e      	uxth	r6, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f374:	4618      	mov	r0, r3
 800f376:	f7ff ffcf 	bl	800f318 <makeFreeRtosPriority>
 800f37a:	4602      	mov	r2, r0
 800f37c:	f107 030c 	add.w	r3, r7, #12
 800f380:	9301      	str	r3, [sp, #4]
 800f382:	9200      	str	r2, [sp, #0]
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	4632      	mov	r2, r6
 800f388:	4629      	mov	r1, r5
 800f38a:	4620      	mov	r0, r4
 800f38c:	f000 fc82 	bl	800fc94 <xTaskCreate>
 800f390:	4603      	mov	r3, r0
 800f392:	2b01      	cmp	r3, #1
 800f394:	d001      	beq.n	800f39a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800f396:	2300      	movs	r3, #0
 800f398:	e000      	b.n	800f39c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800f39a:	68fb      	ldr	r3, [r7, #12]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3714      	adds	r7, #20
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f3a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <osDelay+0x16>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	e000      	b.n	800f3bc <osDelay+0x18>
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f000 fe43 	bl	8010048 <vTaskDelay>
  
  return osOK;
 800f3c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3710      	adds	r7, #16
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f103 0208 	add.w	r2, r3, #8
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f103 0208 	add.w	r2, r3, #8
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f103 0208 	add.w	r2, r3, #8
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f400:	bf00      	nop
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f41a:	bf00      	nop
 800f41c:	370c      	adds	r7, #12
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f426:	b480      	push	{r7}
 800f428:	b085      	sub	sp, #20
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
 800f42e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	689a      	ldr	r2, [r3, #8]
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	683a      	ldr	r2, [r7, #0]
 800f450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	1c5a      	adds	r2, r3, #1
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	601a      	str	r2, [r3, #0]
}
 800f462:	bf00      	nop
 800f464:	3714      	adds	r7, #20
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f46e:	b480      	push	{r7}
 800f470:	b085      	sub	sp, #20
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f484:	d103      	bne.n	800f48e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	60fb      	str	r3, [r7, #12]
 800f48c:	e00c      	b.n	800f4a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	3308      	adds	r3, #8
 800f492:	60fb      	str	r3, [r7, #12]
 800f494:	e002      	b.n	800f49c <vListInsert+0x2e>
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d2f6      	bcs.n	800f496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	685a      	ldr	r2, [r3, #4]
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	685b      	ldr	r3, [r3, #4]
 800f4b4:	683a      	ldr	r2, [r7, #0]
 800f4b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	68fa      	ldr	r2, [r7, #12]
 800f4bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	1c5a      	adds	r2, r3, #1
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	601a      	str	r2, [r3, #0]
}
 800f4d4:	bf00      	nop
 800f4d6:	3714      	adds	r7, #20
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b085      	sub	sp, #20
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	6892      	ldr	r2, [r2, #8]
 800f4f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	6852      	ldr	r2, [r2, #4]
 800f500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d103      	bne.n	800f514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	689a      	ldr	r2, [r3, #8]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	1e5a      	subs	r2, r3, #1
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3714      	adds	r7, #20
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d10a      	bne.n	800f55e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54c:	f383 8811 	msr	BASEPRI, r3
 800f550:	f3bf 8f6f 	isb	sy
 800f554:	f3bf 8f4f 	dsb	sy
 800f558:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f55a:	bf00      	nop
 800f55c:	e7fe      	b.n	800f55c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f55e:	f001 fc59 	bl	8010e14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f56a:	68f9      	ldr	r1, [r7, #12]
 800f56c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f56e:	fb01 f303 	mul.w	r3, r1, r3
 800f572:	441a      	add	r2, r3
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f58e:	3b01      	subs	r3, #1
 800f590:	68f9      	ldr	r1, [r7, #12]
 800f592:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f594:	fb01 f303 	mul.w	r3, r1, r3
 800f598:	441a      	add	r2, r3
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	22ff      	movs	r2, #255	; 0xff
 800f5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	22ff      	movs	r2, #255	; 0xff
 800f5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d114      	bne.n	800f5de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d01a      	beq.n	800f5f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	3310      	adds	r3, #16
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f000 ffbf 	bl	8010544 <xTaskRemoveFromEventList>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d012      	beq.n	800f5f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f5cc:	4b0c      	ldr	r3, [pc, #48]	; (800f600 <xQueueGenericReset+0xcc>)
 800f5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5d2:	601a      	str	r2, [r3, #0]
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	e009      	b.n	800f5f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	3310      	adds	r3, #16
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7ff fef2 	bl	800f3cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	3324      	adds	r3, #36	; 0x24
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7ff feed 	bl	800f3cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f5f2:	f001 fc3f 	bl	8010e74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f5f6:	2301      	movs	r3, #1
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	e000ed04 	.word	0xe000ed04

0800f604 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f604:	b580      	push	{r7, lr}
 800f606:	b08a      	sub	sp, #40	; 0x28
 800f608:	af02      	add	r7, sp, #8
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	4613      	mov	r3, r2
 800f610:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10a      	bne.n	800f62e <xQueueGenericCreate+0x2a>
	__asm volatile
 800f618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	613b      	str	r3, [r7, #16]
}
 800f62a:	bf00      	nop
 800f62c:	e7fe      	b.n	800f62c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	68ba      	ldr	r2, [r7, #8]
 800f632:	fb02 f303 	mul.w	r3, r2, r3
 800f636:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	3348      	adds	r3, #72	; 0x48
 800f63c:	4618      	mov	r0, r3
 800f63e:	f001 fd0b 	bl	8011058 <pvPortMalloc>
 800f642:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f644:	69bb      	ldr	r3, [r7, #24]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00d      	beq.n	800f666 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	3348      	adds	r3, #72	; 0x48
 800f652:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f654:	79fa      	ldrb	r2, [r7, #7]
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	4613      	mov	r3, r2
 800f65c:	697a      	ldr	r2, [r7, #20]
 800f65e:	68b9      	ldr	r1, [r7, #8]
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f000 f805 	bl	800f670 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f666:	69bb      	ldr	r3, [r7, #24]
	}
 800f668:	4618      	mov	r0, r3
 800f66a:	3720      	adds	r7, #32
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
 800f67c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d103      	bne.n	800f68c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	69ba      	ldr	r2, [r7, #24]
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	e002      	b.n	800f692 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f69e:	2101      	movs	r1, #1
 800f6a0:	69b8      	ldr	r0, [r7, #24]
 800f6a2:	f7ff ff47 	bl	800f534 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f6a6:	bf00      	nop
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b086      	sub	sp, #24
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
 800f6b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d10a      	bne.n	800f6d4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c2:	f383 8811 	msr	BASEPRI, r3
 800f6c6:	f3bf 8f6f 	isb	sy
 800f6ca:	f3bf 8f4f 	dsb	sy
 800f6ce:	613b      	str	r3, [r7, #16]
}
 800f6d0:	bf00      	nop
 800f6d2:	e7fe      	b.n	800f6d2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f6d4:	683a      	ldr	r2, [r7, #0]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d90a      	bls.n	800f6f2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e0:	f383 8811 	msr	BASEPRI, r3
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	f3bf 8f4f 	dsb	sy
 800f6ec:	60fb      	str	r3, [r7, #12]
}
 800f6ee:	bf00      	nop
 800f6f0:	e7fe      	b.n	800f6f0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f6f2:	2202      	movs	r2, #2
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7ff ff84 	bl	800f604 <xQueueGenericCreate>
 800f6fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d002      	beq.n	800f70a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f70a:	697b      	ldr	r3, [r7, #20]
	}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3718      	adds	r7, #24
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b08e      	sub	sp, #56	; 0x38
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	2b00      	cmp	r3, #0
 800f726:	d10a      	bne.n	800f73e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	623b      	str	r3, [r7, #32]
}
 800f73a:	bf00      	nop
 800f73c:	e7fe      	b.n	800f73c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00a      	beq.n	800f75c <xQueueGiveFromISR+0x48>
	__asm volatile
 800f746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74a:	f383 8811 	msr	BASEPRI, r3
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	61fb      	str	r3, [r7, #28]
}
 800f758:	bf00      	nop
 800f75a:	e7fe      	b.n	800f75a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d103      	bne.n	800f76c <xQueueGiveFromISR+0x58>
 800f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f766:	689b      	ldr	r3, [r3, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d101      	bne.n	800f770 <xQueueGiveFromISR+0x5c>
 800f76c:	2301      	movs	r3, #1
 800f76e:	e000      	b.n	800f772 <xQueueGiveFromISR+0x5e>
 800f770:	2300      	movs	r3, #0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10a      	bne.n	800f78c <xQueueGiveFromISR+0x78>
	__asm volatile
 800f776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	61bb      	str	r3, [r7, #24]
}
 800f788:	bf00      	nop
 800f78a:	e7fe      	b.n	800f78a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f78c:	f001 fc24 	bl	8010fd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f790:	f3ef 8211 	mrs	r2, BASEPRI
 800f794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f798:	f383 8811 	msr	BASEPRI, r3
 800f79c:	f3bf 8f6f 	isb	sy
 800f7a0:	f3bf 8f4f 	dsb	sy
 800f7a4:	617a      	str	r2, [r7, #20]
 800f7a6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f7a8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d22b      	bcs.n	800f814 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c8:	1c5a      	adds	r2, r3, #1
 800f7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7cc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d6:	d112      	bne.n	800f7fe <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d016      	beq.n	800f80e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e2:	3324      	adds	r3, #36	; 0x24
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f000 fead 	bl	8010544 <xTaskRemoveFromEventList>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d00e      	beq.n	800f80e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00b      	beq.n	800f80e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	601a      	str	r2, [r3, #0]
 800f7fc:	e007      	b.n	800f80e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f802:	3301      	adds	r3, #1
 800f804:	b2db      	uxtb	r3, r3
 800f806:	b25a      	sxtb	r2, r3
 800f808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f80e:	2301      	movs	r3, #1
 800f810:	637b      	str	r3, [r7, #52]	; 0x34
 800f812:	e001      	b.n	800f818 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f814:	2300      	movs	r3, #0
 800f816:	637b      	str	r3, [r7, #52]	; 0x34
 800f818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f822:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f826:	4618      	mov	r0, r3
 800f828:	3738      	adds	r7, #56	; 0x38
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
	...

0800f830 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b08e      	sub	sp, #56	; 0x38
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f83a:	2300      	movs	r3, #0
 800f83c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f842:	2300      	movs	r3, #0
 800f844:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d10a      	bne.n	800f862 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f850:	f383 8811 	msr	BASEPRI, r3
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	623b      	str	r3, [r7, #32]
}
 800f85e:	bf00      	nop
 800f860:	e7fe      	b.n	800f860 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00a      	beq.n	800f880 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	61fb      	str	r3, [r7, #28]
}
 800f87c:	bf00      	nop
 800f87e:	e7fe      	b.n	800f87e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f880:	f001 f802 	bl	8010888 <xTaskGetSchedulerState>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d102      	bne.n	800f890 <xQueueSemaphoreTake+0x60>
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d101      	bne.n	800f894 <xQueueSemaphoreTake+0x64>
 800f890:	2301      	movs	r3, #1
 800f892:	e000      	b.n	800f896 <xQueueSemaphoreTake+0x66>
 800f894:	2300      	movs	r3, #0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10a      	bne.n	800f8b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	61bb      	str	r3, [r7, #24]
}
 800f8ac:	bf00      	nop
 800f8ae:	e7fe      	b.n	800f8ae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8b0:	f001 fab0 	bl	8010e14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d024      	beq.n	800f90a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	1e5a      	subs	r2, r3, #1
 800f8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d104      	bne.n	800f8da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f8d0:	f001 f8fc 	bl	8010acc <pvTaskIncrementMutexHeldCount>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00f      	beq.n	800f902 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	3310      	adds	r3, #16
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 fe2c 	bl	8010544 <xTaskRemoveFromEventList>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d007      	beq.n	800f902 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f8f2:	4b54      	ldr	r3, [pc, #336]	; (800fa44 <xQueueSemaphoreTake+0x214>)
 800f8f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8f8:	601a      	str	r2, [r3, #0]
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f902:	f001 fab7 	bl	8010e74 <vPortExitCritical>
				return pdPASS;
 800f906:	2301      	movs	r3, #1
 800f908:	e097      	b.n	800fa3a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d111      	bne.n	800f934 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00a      	beq.n	800f92c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91a:	f383 8811 	msr	BASEPRI, r3
 800f91e:	f3bf 8f6f 	isb	sy
 800f922:	f3bf 8f4f 	dsb	sy
 800f926:	617b      	str	r3, [r7, #20]
}
 800f928:	bf00      	nop
 800f92a:	e7fe      	b.n	800f92a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f92c:	f001 faa2 	bl	8010e74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f930:	2300      	movs	r3, #0
 800f932:	e082      	b.n	800fa3a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f936:	2b00      	cmp	r3, #0
 800f938:	d106      	bne.n	800f948 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f93a:	f107 030c 	add.w	r3, r7, #12
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 fe62 	bl	8010608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f944:	2301      	movs	r3, #1
 800f946:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f948:	f001 fa94 	bl	8010e74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f94c:	f000 fc02 	bl	8010154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f950:	f001 fa60 	bl	8010e14 <vPortEnterCritical>
 800f954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f95a:	b25b      	sxtb	r3, r3
 800f95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f960:	d103      	bne.n	800f96a <xQueueSemaphoreTake+0x13a>
 800f962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f964:	2200      	movs	r2, #0
 800f966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f970:	b25b      	sxtb	r3, r3
 800f972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f976:	d103      	bne.n	800f980 <xQueueSemaphoreTake+0x150>
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	2200      	movs	r2, #0
 800f97c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f980:	f001 fa78 	bl	8010e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f984:	463a      	mov	r2, r7
 800f986:	f107 030c 	add.w	r3, r7, #12
 800f98a:	4611      	mov	r1, r2
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 fe51 	bl	8010634 <xTaskCheckForTimeOut>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	d132      	bne.n	800f9fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f99a:	f000 f965 	bl	800fc68 <prvIsQueueEmpty>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d026      	beq.n	800f9f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d109      	bne.n	800f9c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f9ac:	f001 fa32 	bl	8010e14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f000 ff85 	bl	80108c4 <xTaskPriorityInherit>
 800f9ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f9bc:	f001 fa5a 	bl	8010e74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c2:	3324      	adds	r3, #36	; 0x24
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	4611      	mov	r1, r2
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f000 fd97 	bl	80104fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9d0:	f000 f8f8 	bl	800fbc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9d4:	f000 fbcc 	bl	8010170 <xTaskResumeAll>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f47f af68 	bne.w	800f8b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f9e0:	4b18      	ldr	r3, [pc, #96]	; (800fa44 <xQueueSemaphoreTake+0x214>)
 800f9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9e6:	601a      	str	r2, [r3, #0]
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	e75e      	b.n	800f8b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f9f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9f4:	f000 f8e6 	bl	800fbc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9f8:	f000 fbba 	bl	8010170 <xTaskResumeAll>
 800f9fc:	e758      	b.n	800f8b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f9fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa00:	f000 f8e0 	bl	800fbc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa04:	f000 fbb4 	bl	8010170 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa0a:	f000 f92d 	bl	800fc68 <prvIsQueueEmpty>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f43f af4d 	beq.w	800f8b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00d      	beq.n	800fa38 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fa1c:	f001 f9fa 	bl	8010e14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fa20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa22:	f000 f891 	bl	800fb48 <prvGetDisinheritPriorityAfterTimeout>
 800fa26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 ffbe 	bl	80109b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fa34:	f001 fa1e 	bl	8010e74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3738      	adds	r7, #56	; 0x38
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	e000ed04 	.word	0xe000ed04

0800fa48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b08e      	sub	sp, #56	; 0x38
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d10a      	bne.n	800fa74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	623b      	str	r3, [r7, #32]
}
 800fa70:	bf00      	nop
 800fa72:	e7fe      	b.n	800fa72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d103      	bne.n	800fa82 <xQueueReceiveFromISR+0x3a>
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d101      	bne.n	800fa86 <xQueueReceiveFromISR+0x3e>
 800fa82:	2301      	movs	r3, #1
 800fa84:	e000      	b.n	800fa88 <xQueueReceiveFromISR+0x40>
 800fa86:	2300      	movs	r3, #0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10a      	bne.n	800faa2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa90:	f383 8811 	msr	BASEPRI, r3
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	61fb      	str	r3, [r7, #28]
}
 800fa9e:	bf00      	nop
 800faa0:	e7fe      	b.n	800faa0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800faa2:	f001 fa99 	bl	8010fd8 <vPortValidateInterruptPriority>
	__asm volatile
 800faa6:	f3ef 8211 	mrs	r2, BASEPRI
 800faaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faae:	f383 8811 	msr	BASEPRI, r3
 800fab2:	f3bf 8f6f 	isb	sy
 800fab6:	f3bf 8f4f 	dsb	sy
 800faba:	61ba      	str	r2, [r7, #24]
 800fabc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fabe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fac6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faca:	2b00      	cmp	r3, #0
 800facc:	d02f      	beq.n	800fb2e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800face:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fad8:	68b9      	ldr	r1, [r7, #8]
 800fada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fadc:	f000 f84c 	bl	800fb78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae2:	1e5a      	subs	r2, r3, #1
 800fae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800faec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf0:	d112      	bne.n	800fb18 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800faf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf4:	691b      	ldr	r3, [r3, #16]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d016      	beq.n	800fb28 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	3310      	adds	r3, #16
 800fafe:	4618      	mov	r0, r3
 800fb00:	f000 fd20 	bl	8010544 <xTaskRemoveFromEventList>
 800fb04:	4603      	mov	r3, r0
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00e      	beq.n	800fb28 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00b      	beq.n	800fb28 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2201      	movs	r2, #1
 800fb14:	601a      	str	r2, [r3, #0]
 800fb16:	e007      	b.n	800fb28 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fb18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	b25a      	sxtb	r2, r3
 800fb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fb28:	2301      	movs	r3, #1
 800fb2a:	637b      	str	r3, [r7, #52]	; 0x34
 800fb2c:	e001      	b.n	800fb32 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	637b      	str	r3, [r7, #52]	; 0x34
 800fb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb34:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	f383 8811 	msr	BASEPRI, r3
}
 800fb3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3738      	adds	r7, #56	; 0x38
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d006      	beq.n	800fb66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f1c3 0307 	rsb	r3, r3, #7
 800fb62:	60fb      	str	r3, [r7, #12]
 800fb64:	e001      	b.n	800fb6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fb66:	2300      	movs	r3, #0
 800fb68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
	}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3714      	adds	r7, #20
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr

0800fb78 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d018      	beq.n	800fbbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	68da      	ldr	r2, [r3, #12]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb92:	441a      	add	r2, r3
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68da      	ldr	r2, [r3, #12]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d303      	bcc.n	800fbac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	68d9      	ldr	r1, [r3, #12]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	6838      	ldr	r0, [r7, #0]
 800fbb8:	f006 f9e8 	bl	8015f8c <memcpy>
	}
}
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fbcc:	f001 f922 	bl	8010e14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fbd8:	e011      	b.n	800fbfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d012      	beq.n	800fc08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	3324      	adds	r3, #36	; 0x24
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f000 fcac 	bl	8010544 <xTaskRemoveFromEventList>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d001      	beq.n	800fbf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fbf2:	f000 fd81 	bl	80106f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fbf6:	7bfb      	ldrb	r3, [r7, #15]
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	dce9      	bgt.n	800fbda <prvUnlockQueue+0x16>
 800fc06:	e000      	b.n	800fc0a <prvUnlockQueue+0x46>
					break;
 800fc08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	22ff      	movs	r2, #255	; 0xff
 800fc0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fc12:	f001 f92f 	bl	8010e74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fc16:	f001 f8fd 	bl	8010e14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc22:	e011      	b.n	800fc48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	691b      	ldr	r3, [r3, #16]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d012      	beq.n	800fc52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	3310      	adds	r3, #16
 800fc30:	4618      	mov	r0, r3
 800fc32:	f000 fc87 	bl	8010544 <xTaskRemoveFromEventList>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d001      	beq.n	800fc40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fc3c:	f000 fd5c 	bl	80106f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fc40:	7bbb      	ldrb	r3, [r7, #14]
 800fc42:	3b01      	subs	r3, #1
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	dce9      	bgt.n	800fc24 <prvUnlockQueue+0x60>
 800fc50:	e000      	b.n	800fc54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fc52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	22ff      	movs	r2, #255	; 0xff
 800fc58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fc5c:	f001 f90a 	bl	8010e74 <vPortExitCritical>
}
 800fc60:	bf00      	nop
 800fc62:	3710      	adds	r7, #16
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc70:	f001 f8d0 	bl	8010e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d102      	bne.n	800fc82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	60fb      	str	r3, [r7, #12]
 800fc80:	e001      	b.n	800fc86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fc82:	2300      	movs	r3, #0
 800fc84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc86:	f001 f8f5 	bl	8010e74 <vPortExitCritical>

	return xReturn;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3710      	adds	r7, #16
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b08c      	sub	sp, #48	; 0x30
 800fc98:	af04      	add	r7, sp, #16
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	603b      	str	r3, [r7, #0]
 800fca0:	4613      	mov	r3, r2
 800fca2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fca4:	88fb      	ldrh	r3, [r7, #6]
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f001 f9d5 	bl	8011058 <pvPortMalloc>
 800fcae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00e      	beq.n	800fcd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fcb6:	20b4      	movs	r0, #180	; 0xb4
 800fcb8:	f001 f9ce 	bl	8011058 <pvPortMalloc>
 800fcbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fcbe:	69fb      	ldr	r3, [r7, #28]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d003      	beq.n	800fccc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	697a      	ldr	r2, [r7, #20]
 800fcc8:	631a      	str	r2, [r3, #48]	; 0x30
 800fcca:	e005      	b.n	800fcd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fccc:	6978      	ldr	r0, [r7, #20]
 800fcce:	f001 fa8f 	bl	80111f0 <vPortFree>
 800fcd2:	e001      	b.n	800fcd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d013      	beq.n	800fd06 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fcde:	88fa      	ldrh	r2, [r7, #6]
 800fce0:	2300      	movs	r3, #0
 800fce2:	9303      	str	r3, [sp, #12]
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	9302      	str	r3, [sp, #8]
 800fce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcea:	9301      	str	r3, [sp, #4]
 800fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	68b9      	ldr	r1, [r7, #8]
 800fcf4:	68f8      	ldr	r0, [r7, #12]
 800fcf6:	f000 f80f 	bl	800fd18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fcfa:	69f8      	ldr	r0, [r7, #28]
 800fcfc:	f000 f8aa 	bl	800fe54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fd00:	2301      	movs	r3, #1
 800fd02:	61bb      	str	r3, [r7, #24]
 800fd04:	e002      	b.n	800fd0c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd06:	f04f 33ff 	mov.w	r3, #4294967295
 800fd0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fd0c:	69bb      	ldr	r3, [r7, #24]
	}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3720      	adds	r7, #32
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
	...

0800fd18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b088      	sub	sp, #32
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	607a      	str	r2, [r7, #4]
 800fd24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd2a:	6879      	ldr	r1, [r7, #4]
 800fd2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fd30:	440b      	add	r3, r1
 800fd32:	009b      	lsls	r3, r3, #2
 800fd34:	4413      	add	r3, r2
 800fd36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	f023 0307 	bic.w	r3, r3, #7
 800fd3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	f003 0307 	and.w	r3, r3, #7
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00a      	beq.n	800fd60 <prvInitialiseNewTask+0x48>
	__asm volatile
 800fd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4e:	f383 8811 	msr	BASEPRI, r3
 800fd52:	f3bf 8f6f 	isb	sy
 800fd56:	f3bf 8f4f 	dsb	sy
 800fd5a:	617b      	str	r3, [r7, #20]
}
 800fd5c:	bf00      	nop
 800fd5e:	e7fe      	b.n	800fd5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d01f      	beq.n	800fda6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd66:	2300      	movs	r3, #0
 800fd68:	61fb      	str	r3, [r7, #28]
 800fd6a:	e012      	b.n	800fd92 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	4413      	add	r3, r2
 800fd72:	7819      	ldrb	r1, [r3, #0]
 800fd74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	4413      	add	r3, r2
 800fd7a:	3334      	adds	r3, #52	; 0x34
 800fd7c:	460a      	mov	r2, r1
 800fd7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	4413      	add	r3, r2
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d006      	beq.n	800fd9a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	61fb      	str	r3, [r7, #28]
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	2b0f      	cmp	r3, #15
 800fd96:	d9e9      	bls.n	800fd6c <prvInitialiseNewTask+0x54>
 800fd98:	e000      	b.n	800fd9c <prvInitialiseNewTask+0x84>
			{
				break;
 800fd9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fda4:	e003      	b.n	800fdae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	2b06      	cmp	r3, #6
 800fdb2:	d901      	bls.n	800fdb8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fdb4:	2306      	movs	r3, #6
 800fdb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdcc:	3304      	adds	r3, #4
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7ff fb1c 	bl	800f40c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd6:	3318      	adds	r3, #24
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7ff fb17 	bl	800f40c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fde2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde6:	f1c3 0207 	rsb	r2, r3, #7
 800fdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfe:	2200      	movs	r2, #0
 800fe00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fe04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe06:	334c      	adds	r3, #76	; 0x4c
 800fe08:	2260      	movs	r2, #96	; 0x60
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f006 f8cb 	bl	8015fa8 <memset>
 800fe12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe14:	4a0c      	ldr	r2, [pc, #48]	; (800fe48 <prvInitialiseNewTask+0x130>)
 800fe16:	651a      	str	r2, [r3, #80]	; 0x50
 800fe18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1a:	4a0c      	ldr	r2, [pc, #48]	; (800fe4c <prvInitialiseNewTask+0x134>)
 800fe1c:	655a      	str	r2, [r3, #84]	; 0x54
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	4a0b      	ldr	r2, [pc, #44]	; (800fe50 <prvInitialiseNewTask+0x138>)
 800fe22:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fe24:	683a      	ldr	r2, [r7, #0]
 800fe26:	68f9      	ldr	r1, [r7, #12]
 800fe28:	69b8      	ldr	r0, [r7, #24]
 800fe2a:	f000 fec9 	bl	8010bc0 <pxPortInitialiseStack>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d002      	beq.n	800fe40 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fe3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe40:	bf00      	nop
 800fe42:	3720      	adds	r7, #32
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	0801961c 	.word	0x0801961c
 800fe4c:	0801963c 	.word	0x0801963c
 800fe50:	080195fc 	.word	0x080195fc

0800fe54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fe5c:	f000 ffda 	bl	8010e14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fe60:	4b2a      	ldr	r3, [pc, #168]	; (800ff0c <prvAddNewTaskToReadyList+0xb8>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	3301      	adds	r3, #1
 800fe66:	4a29      	ldr	r2, [pc, #164]	; (800ff0c <prvAddNewTaskToReadyList+0xb8>)
 800fe68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fe6a:	4b29      	ldr	r3, [pc, #164]	; (800ff10 <prvAddNewTaskToReadyList+0xbc>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d109      	bne.n	800fe86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fe72:	4a27      	ldr	r2, [pc, #156]	; (800ff10 <prvAddNewTaskToReadyList+0xbc>)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fe78:	4b24      	ldr	r3, [pc, #144]	; (800ff0c <prvAddNewTaskToReadyList+0xb8>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d110      	bne.n	800fea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fe80:	f000 fc5e 	bl	8010740 <prvInitialiseTaskLists>
 800fe84:	e00d      	b.n	800fea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fe86:	4b23      	ldr	r3, [pc, #140]	; (800ff14 <prvAddNewTaskToReadyList+0xc0>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d109      	bne.n	800fea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe8e:	4b20      	ldr	r3, [pc, #128]	; (800ff10 <prvAddNewTaskToReadyList+0xbc>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d802      	bhi.n	800fea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe9c:	4a1c      	ldr	r2, [pc, #112]	; (800ff10 <prvAddNewTaskToReadyList+0xbc>)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fea2:	4b1d      	ldr	r3, [pc, #116]	; (800ff18 <prvAddNewTaskToReadyList+0xc4>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	3301      	adds	r3, #1
 800fea8:	4a1b      	ldr	r2, [pc, #108]	; (800ff18 <prvAddNewTaskToReadyList+0xc4>)
 800feaa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb0:	2201      	movs	r2, #1
 800feb2:	409a      	lsls	r2, r3
 800feb4:	4b19      	ldr	r3, [pc, #100]	; (800ff1c <prvAddNewTaskToReadyList+0xc8>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4313      	orrs	r3, r2
 800feba:	4a18      	ldr	r2, [pc, #96]	; (800ff1c <prvAddNewTaskToReadyList+0xc8>)
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec2:	4613      	mov	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4413      	add	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	4a15      	ldr	r2, [pc, #84]	; (800ff20 <prvAddNewTaskToReadyList+0xcc>)
 800fecc:	441a      	add	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	3304      	adds	r3, #4
 800fed2:	4619      	mov	r1, r3
 800fed4:	4610      	mov	r0, r2
 800fed6:	f7ff faa6 	bl	800f426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800feda:	f000 ffcb 	bl	8010e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fede:	4b0d      	ldr	r3, [pc, #52]	; (800ff14 <prvAddNewTaskToReadyList+0xc0>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00e      	beq.n	800ff04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fee6:	4b0a      	ldr	r3, [pc, #40]	; (800ff10 <prvAddNewTaskToReadyList+0xbc>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d207      	bcs.n	800ff04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fef4:	4b0b      	ldr	r3, [pc, #44]	; (800ff24 <prvAddNewTaskToReadyList+0xd0>)
 800fef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fefa:	601a      	str	r2, [r3, #0]
 800fefc:	f3bf 8f4f 	dsb	sy
 800ff00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	240022bc 	.word	0x240022bc
 800ff10:	240021bc 	.word	0x240021bc
 800ff14:	240022c8 	.word	0x240022c8
 800ff18:	240022d8 	.word	0x240022d8
 800ff1c:	240022c4 	.word	0x240022c4
 800ff20:	240021c0 	.word	0x240021c0
 800ff24:	e000ed04 	.word	0xe000ed04

0800ff28 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ff30:	f000 ff70 	bl	8010e14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d102      	bne.n	800ff40 <vTaskDelete+0x18>
 800ff3a:	4b39      	ldr	r3, [pc, #228]	; (8010020 <vTaskDelete+0xf8>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	e000      	b.n	800ff42 <vTaskDelete+0x1a>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	3304      	adds	r3, #4
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7ff fac9 	bl	800f4e0 <uxListRemove>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d115      	bne.n	800ff80 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff58:	4932      	ldr	r1, [pc, #200]	; (8010024 <vTaskDelete+0xfc>)
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	4413      	add	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	440b      	add	r3, r1
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <vTaskDelete+0x58>
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff6e:	2201      	movs	r2, #1
 800ff70:	fa02 f303 	lsl.w	r3, r2, r3
 800ff74:	43da      	mvns	r2, r3
 800ff76:	4b2c      	ldr	r3, [pc, #176]	; (8010028 <vTaskDelete+0x100>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4013      	ands	r3, r2
 800ff7c:	4a2a      	ldr	r2, [pc, #168]	; (8010028 <vTaskDelete+0x100>)
 800ff7e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d004      	beq.n	800ff92 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	3318      	adds	r3, #24
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7ff faa7 	bl	800f4e0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ff92:	4b26      	ldr	r3, [pc, #152]	; (801002c <vTaskDelete+0x104>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3301      	adds	r3, #1
 800ff98:	4a24      	ldr	r2, [pc, #144]	; (801002c <vTaskDelete+0x104>)
 800ff9a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ff9c:	4b20      	ldr	r3, [pc, #128]	; (8010020 <vTaskDelete+0xf8>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d10b      	bne.n	800ffbe <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	3304      	adds	r3, #4
 800ffaa:	4619      	mov	r1, r3
 800ffac:	4820      	ldr	r0, [pc, #128]	; (8010030 <vTaskDelete+0x108>)
 800ffae:	f7ff fa3a 	bl	800f426 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ffb2:	4b20      	ldr	r3, [pc, #128]	; (8010034 <vTaskDelete+0x10c>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	4a1e      	ldr	r2, [pc, #120]	; (8010034 <vTaskDelete+0x10c>)
 800ffba:	6013      	str	r3, [r2, #0]
 800ffbc:	e009      	b.n	800ffd2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ffbe:	4b1e      	ldr	r3, [pc, #120]	; (8010038 <vTaskDelete+0x110>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	4a1c      	ldr	r2, [pc, #112]	; (8010038 <vTaskDelete+0x110>)
 800ffc6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f000 fc27 	bl	801081c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ffce:	f000 fc3b 	bl	8010848 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ffd2:	f000 ff4f 	bl	8010e74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ffd6:	4b19      	ldr	r3, [pc, #100]	; (801003c <vTaskDelete+0x114>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d01b      	beq.n	8010016 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800ffde:	4b10      	ldr	r3, [pc, #64]	; (8010020 <vTaskDelete+0xf8>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68fa      	ldr	r2, [r7, #12]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d116      	bne.n	8010016 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ffe8:	4b15      	ldr	r3, [pc, #84]	; (8010040 <vTaskDelete+0x118>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00a      	beq.n	8010006 <vTaskDelete+0xde>
	__asm volatile
 800fff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	60bb      	str	r3, [r7, #8]
}
 8010002:	bf00      	nop
 8010004:	e7fe      	b.n	8010004 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8010006:	4b0f      	ldr	r3, [pc, #60]	; (8010044 <vTaskDelete+0x11c>)
 8010008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010016:	bf00      	nop
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	240021bc 	.word	0x240021bc
 8010024:	240021c0 	.word	0x240021c0
 8010028:	240022c4 	.word	0x240022c4
 801002c:	240022d8 	.word	0x240022d8
 8010030:	24002290 	.word	0x24002290
 8010034:	240022a4 	.word	0x240022a4
 8010038:	240022bc 	.word	0x240022bc
 801003c:	240022c8 	.word	0x240022c8
 8010040:	240022e4 	.word	0x240022e4
 8010044:	e000ed04 	.word	0xe000ed04

08010048 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010050:	2300      	movs	r3, #0
 8010052:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d017      	beq.n	801008a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801005a:	4b13      	ldr	r3, [pc, #76]	; (80100a8 <vTaskDelay+0x60>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00a      	beq.n	8010078 <vTaskDelay+0x30>
	__asm volatile
 8010062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010066:	f383 8811 	msr	BASEPRI, r3
 801006a:	f3bf 8f6f 	isb	sy
 801006e:	f3bf 8f4f 	dsb	sy
 8010072:	60bb      	str	r3, [r7, #8]
}
 8010074:	bf00      	nop
 8010076:	e7fe      	b.n	8010076 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010078:	f000 f86c 	bl	8010154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801007c:	2100      	movs	r1, #0
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 fd38 	bl	8010af4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010084:	f000 f874 	bl	8010170 <xTaskResumeAll>
 8010088:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d107      	bne.n	80100a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010090:	4b06      	ldr	r3, [pc, #24]	; (80100ac <vTaskDelay+0x64>)
 8010092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010096:	601a      	str	r2, [r3, #0]
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100a0:	bf00      	nop
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	240022e4 	.word	0x240022e4
 80100ac:	e000ed04 	.word	0xe000ed04

080100b0 <vTaskStartScheduler>:
#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80100b6:	4b1f      	ldr	r3, [pc, #124]	; (8010134 <vTaskStartScheduler+0x84>)
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	2300      	movs	r3, #0
 80100bc:	9300      	str	r3, [sp, #0]
 80100be:	2300      	movs	r3, #0
 80100c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100c4:	491c      	ldr	r1, [pc, #112]	; (8010138 <vTaskStartScheduler+0x88>)
 80100c6:	481d      	ldr	r0, [pc, #116]	; (801013c <vTaskStartScheduler+0x8c>)
 80100c8:	f7ff fde4 	bl	800fc94 <xTaskCreate>
 80100cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d11b      	bne.n	801010c <vTaskStartScheduler+0x5c>
	__asm volatile
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	60bb      	str	r3, [r7, #8]
}
 80100e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80100e8:	4b15      	ldr	r3, [pc, #84]	; (8010140 <vTaskStartScheduler+0x90>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	334c      	adds	r3, #76	; 0x4c
 80100ee:	4a15      	ldr	r2, [pc, #84]	; (8010144 <vTaskStartScheduler+0x94>)
 80100f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80100f2:	4b15      	ldr	r3, [pc, #84]	; (8010148 <vTaskStartScheduler+0x98>)
 80100f4:	f04f 32ff 	mov.w	r2, #4294967295
 80100f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80100fa:	4b14      	ldr	r3, [pc, #80]	; (801014c <vTaskStartScheduler+0x9c>)
 80100fc:	2201      	movs	r2, #1
 80100fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010100:	4b13      	ldr	r3, [pc, #76]	; (8010150 <vTaskStartScheduler+0xa0>)
 8010102:	2200      	movs	r2, #0
 8010104:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010106:	f000 fde3 	bl	8010cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801010a:	e00e      	b.n	801012a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010112:	d10a      	bne.n	801012a <vTaskStartScheduler+0x7a>
	__asm volatile
 8010114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010118:	f383 8811 	msr	BASEPRI, r3
 801011c:	f3bf 8f6f 	isb	sy
 8010120:	f3bf 8f4f 	dsb	sy
 8010124:	607b      	str	r3, [r7, #4]
}
 8010126:	bf00      	nop
 8010128:	e7fe      	b.n	8010128 <vTaskStartScheduler+0x78>
}
 801012a:	bf00      	nop
 801012c:	3710      	adds	r7, #16
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	240022e0 	.word	0x240022e0
 8010138:	08018c44 	.word	0x08018c44
 801013c:	08010711 	.word	0x08010711
 8010140:	240021bc 	.word	0x240021bc
 8010144:	24000018 	.word	0x24000018
 8010148:	240022dc 	.word	0x240022dc
 801014c:	240022c8 	.word	0x240022c8
 8010150:	240022c0 	.word	0x240022c0

08010154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010154:	b480      	push	{r7}
 8010156:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010158:	4b04      	ldr	r3, [pc, #16]	; (801016c <vTaskSuspendAll+0x18>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3301      	adds	r3, #1
 801015e:	4a03      	ldr	r2, [pc, #12]	; (801016c <vTaskSuspendAll+0x18>)
 8010160:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010162:	bf00      	nop
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	240022e4 	.word	0x240022e4

08010170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010176:	2300      	movs	r3, #0
 8010178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801017a:	2300      	movs	r3, #0
 801017c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801017e:	4b41      	ldr	r3, [pc, #260]	; (8010284 <xTaskResumeAll+0x114>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d10a      	bne.n	801019c <xTaskResumeAll+0x2c>
	__asm volatile
 8010186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	603b      	str	r3, [r7, #0]
}
 8010198:	bf00      	nop
 801019a:	e7fe      	b.n	801019a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801019c:	f000 fe3a 	bl	8010e14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80101a0:	4b38      	ldr	r3, [pc, #224]	; (8010284 <xTaskResumeAll+0x114>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	3b01      	subs	r3, #1
 80101a6:	4a37      	ldr	r2, [pc, #220]	; (8010284 <xTaskResumeAll+0x114>)
 80101a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101aa:	4b36      	ldr	r3, [pc, #216]	; (8010284 <xTaskResumeAll+0x114>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d161      	bne.n	8010276 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80101b2:	4b35      	ldr	r3, [pc, #212]	; (8010288 <xTaskResumeAll+0x118>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d05d      	beq.n	8010276 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80101ba:	e02e      	b.n	801021a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101bc:	4b33      	ldr	r3, [pc, #204]	; (801028c <xTaskResumeAll+0x11c>)
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	3318      	adds	r3, #24
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7ff f989 	bl	800f4e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	3304      	adds	r3, #4
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7ff f984 	bl	800f4e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101dc:	2201      	movs	r2, #1
 80101de:	409a      	lsls	r2, r3
 80101e0:	4b2b      	ldr	r3, [pc, #172]	; (8010290 <xTaskResumeAll+0x120>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4313      	orrs	r3, r2
 80101e6:	4a2a      	ldr	r2, [pc, #168]	; (8010290 <xTaskResumeAll+0x120>)
 80101e8:	6013      	str	r3, [r2, #0]
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ee:	4613      	mov	r3, r2
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	4413      	add	r3, r2
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4a27      	ldr	r2, [pc, #156]	; (8010294 <xTaskResumeAll+0x124>)
 80101f8:	441a      	add	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	3304      	adds	r3, #4
 80101fe:	4619      	mov	r1, r3
 8010200:	4610      	mov	r0, r2
 8010202:	f7ff f910 	bl	800f426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801020a:	4b23      	ldr	r3, [pc, #140]	; (8010298 <xTaskResumeAll+0x128>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010210:	429a      	cmp	r2, r3
 8010212:	d302      	bcc.n	801021a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010214:	4b21      	ldr	r3, [pc, #132]	; (801029c <xTaskResumeAll+0x12c>)
 8010216:	2201      	movs	r2, #1
 8010218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801021a:	4b1c      	ldr	r3, [pc, #112]	; (801028c <xTaskResumeAll+0x11c>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1cc      	bne.n	80101bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d001      	beq.n	801022c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010228:	f000 fb0e 	bl	8010848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801022c:	4b1c      	ldr	r3, [pc, #112]	; (80102a0 <xTaskResumeAll+0x130>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d010      	beq.n	801025a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010238:	f000 f836 	bl	80102a8 <xTaskIncrementTick>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d002      	beq.n	8010248 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010242:	4b16      	ldr	r3, [pc, #88]	; (801029c <xTaskResumeAll+0x12c>)
 8010244:	2201      	movs	r2, #1
 8010246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	3b01      	subs	r3, #1
 801024c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1f1      	bne.n	8010238 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010254:	4b12      	ldr	r3, [pc, #72]	; (80102a0 <xTaskResumeAll+0x130>)
 8010256:	2200      	movs	r2, #0
 8010258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801025a:	4b10      	ldr	r3, [pc, #64]	; (801029c <xTaskResumeAll+0x12c>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d009      	beq.n	8010276 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010262:	2301      	movs	r3, #1
 8010264:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010266:	4b0f      	ldr	r3, [pc, #60]	; (80102a4 <xTaskResumeAll+0x134>)
 8010268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026c:	601a      	str	r2, [r3, #0]
 801026e:	f3bf 8f4f 	dsb	sy
 8010272:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010276:	f000 fdfd 	bl	8010e74 <vPortExitCritical>

	return xAlreadyYielded;
 801027a:	68bb      	ldr	r3, [r7, #8]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3710      	adds	r7, #16
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	240022e4 	.word	0x240022e4
 8010288:	240022bc 	.word	0x240022bc
 801028c:	2400227c 	.word	0x2400227c
 8010290:	240022c4 	.word	0x240022c4
 8010294:	240021c0 	.word	0x240021c0
 8010298:	240021bc 	.word	0x240021bc
 801029c:	240022d0 	.word	0x240022d0
 80102a0:	240022cc 	.word	0x240022cc
 80102a4:	e000ed04 	.word	0xe000ed04

080102a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b086      	sub	sp, #24
 80102ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80102ae:	2300      	movs	r3, #0
 80102b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102b2:	4b4e      	ldr	r3, [pc, #312]	; (80103ec <xTaskIncrementTick+0x144>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f040 808e 	bne.w	80103d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80102bc:	4b4c      	ldr	r3, [pc, #304]	; (80103f0 <xTaskIncrementTick+0x148>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	3301      	adds	r3, #1
 80102c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80102c4:	4a4a      	ldr	r2, [pc, #296]	; (80103f0 <xTaskIncrementTick+0x148>)
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d120      	bne.n	8010312 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80102d0:	4b48      	ldr	r3, [pc, #288]	; (80103f4 <xTaskIncrementTick+0x14c>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00a      	beq.n	80102f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80102da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	603b      	str	r3, [r7, #0]
}
 80102ec:	bf00      	nop
 80102ee:	e7fe      	b.n	80102ee <xTaskIncrementTick+0x46>
 80102f0:	4b40      	ldr	r3, [pc, #256]	; (80103f4 <xTaskIncrementTick+0x14c>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	60fb      	str	r3, [r7, #12]
 80102f6:	4b40      	ldr	r3, [pc, #256]	; (80103f8 <xTaskIncrementTick+0x150>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a3e      	ldr	r2, [pc, #248]	; (80103f4 <xTaskIncrementTick+0x14c>)
 80102fc:	6013      	str	r3, [r2, #0]
 80102fe:	4a3e      	ldr	r2, [pc, #248]	; (80103f8 <xTaskIncrementTick+0x150>)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	6013      	str	r3, [r2, #0]
 8010304:	4b3d      	ldr	r3, [pc, #244]	; (80103fc <xTaskIncrementTick+0x154>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	3301      	adds	r3, #1
 801030a:	4a3c      	ldr	r2, [pc, #240]	; (80103fc <xTaskIncrementTick+0x154>)
 801030c:	6013      	str	r3, [r2, #0]
 801030e:	f000 fa9b 	bl	8010848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010312:	4b3b      	ldr	r3, [pc, #236]	; (8010400 <xTaskIncrementTick+0x158>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	693a      	ldr	r2, [r7, #16]
 8010318:	429a      	cmp	r2, r3
 801031a:	d348      	bcc.n	80103ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801031c:	4b35      	ldr	r3, [pc, #212]	; (80103f4 <xTaskIncrementTick+0x14c>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d104      	bne.n	8010330 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010326:	4b36      	ldr	r3, [pc, #216]	; (8010400 <xTaskIncrementTick+0x158>)
 8010328:	f04f 32ff 	mov.w	r2, #4294967295
 801032c:	601a      	str	r2, [r3, #0]
					break;
 801032e:	e03e      	b.n	80103ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010330:	4b30      	ldr	r3, [pc, #192]	; (80103f4 <xTaskIncrementTick+0x14c>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010340:	693a      	ldr	r2, [r7, #16]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	429a      	cmp	r2, r3
 8010346:	d203      	bcs.n	8010350 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010348:	4a2d      	ldr	r2, [pc, #180]	; (8010400 <xTaskIncrementTick+0x158>)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801034e:	e02e      	b.n	80103ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	3304      	adds	r3, #4
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff f8c3 	bl	800f4e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801035e:	2b00      	cmp	r3, #0
 8010360:	d004      	beq.n	801036c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	3318      	adds	r3, #24
 8010366:	4618      	mov	r0, r3
 8010368:	f7ff f8ba 	bl	800f4e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010370:	2201      	movs	r2, #1
 8010372:	409a      	lsls	r2, r3
 8010374:	4b23      	ldr	r3, [pc, #140]	; (8010404 <xTaskIncrementTick+0x15c>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4313      	orrs	r3, r2
 801037a:	4a22      	ldr	r2, [pc, #136]	; (8010404 <xTaskIncrementTick+0x15c>)
 801037c:	6013      	str	r3, [r2, #0]
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010382:	4613      	mov	r3, r2
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	4413      	add	r3, r2
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	4a1f      	ldr	r2, [pc, #124]	; (8010408 <xTaskIncrementTick+0x160>)
 801038c:	441a      	add	r2, r3
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	3304      	adds	r3, #4
 8010392:	4619      	mov	r1, r3
 8010394:	4610      	mov	r0, r2
 8010396:	f7ff f846 	bl	800f426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801039e:	4b1b      	ldr	r3, [pc, #108]	; (801040c <xTaskIncrementTick+0x164>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d3b9      	bcc.n	801031c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80103a8:	2301      	movs	r3, #1
 80103aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103ac:	e7b6      	b.n	801031c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80103ae:	4b17      	ldr	r3, [pc, #92]	; (801040c <xTaskIncrementTick+0x164>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b4:	4914      	ldr	r1, [pc, #80]	; (8010408 <xTaskIncrementTick+0x160>)
 80103b6:	4613      	mov	r3, r2
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	440b      	add	r3, r1
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	d901      	bls.n	80103ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80103c6:	2301      	movs	r3, #1
 80103c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80103ca:	4b11      	ldr	r3, [pc, #68]	; (8010410 <xTaskIncrementTick+0x168>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d007      	beq.n	80103e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80103d2:	2301      	movs	r3, #1
 80103d4:	617b      	str	r3, [r7, #20]
 80103d6:	e004      	b.n	80103e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80103d8:	4b0e      	ldr	r3, [pc, #56]	; (8010414 <xTaskIncrementTick+0x16c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	3301      	adds	r3, #1
 80103de:	4a0d      	ldr	r2, [pc, #52]	; (8010414 <xTaskIncrementTick+0x16c>)
 80103e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80103e2:	697b      	ldr	r3, [r7, #20]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	240022e4 	.word	0x240022e4
 80103f0:	240022c0 	.word	0x240022c0
 80103f4:	24002274 	.word	0x24002274
 80103f8:	24002278 	.word	0x24002278
 80103fc:	240022d4 	.word	0x240022d4
 8010400:	240022dc 	.word	0x240022dc
 8010404:	240022c4 	.word	0x240022c4
 8010408:	240021c0 	.word	0x240021c0
 801040c:	240021bc 	.word	0x240021bc
 8010410:	240022d0 	.word	0x240022d0
 8010414:	240022cc 	.word	0x240022cc

08010418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b086      	sub	sp, #24
 801041c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801041e:	4b31      	ldr	r3, [pc, #196]	; (80104e4 <vTaskSwitchContext+0xcc>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d003      	beq.n	801042e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010426:	4b30      	ldr	r3, [pc, #192]	; (80104e8 <vTaskSwitchContext+0xd0>)
 8010428:	2201      	movs	r2, #1
 801042a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801042c:	e055      	b.n	80104da <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 801042e:	4b2e      	ldr	r3, [pc, #184]	; (80104e8 <vTaskSwitchContext+0xd0>)
 8010430:	2200      	movs	r2, #0
 8010432:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010434:	4b2d      	ldr	r3, [pc, #180]	; (80104ec <vTaskSwitchContext+0xd4>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	4b2c      	ldr	r3, [pc, #176]	; (80104ec <vTaskSwitchContext+0xd4>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010440:	429a      	cmp	r2, r3
 8010442:	d808      	bhi.n	8010456 <vTaskSwitchContext+0x3e>
 8010444:	4b29      	ldr	r3, [pc, #164]	; (80104ec <vTaskSwitchContext+0xd4>)
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	4b28      	ldr	r3, [pc, #160]	; (80104ec <vTaskSwitchContext+0xd4>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	3334      	adds	r3, #52	; 0x34
 801044e:	4619      	mov	r1, r3
 8010450:	4610      	mov	r0, r2
 8010452:	f004 ff16 	bl	8015282 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010456:	4b26      	ldr	r3, [pc, #152]	; (80104f0 <vTaskSwitchContext+0xd8>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	fab3 f383 	clz	r3, r3
 8010462:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010464:	7afb      	ldrb	r3, [r7, #11]
 8010466:	f1c3 031f 	rsb	r3, r3, #31
 801046a:	617b      	str	r3, [r7, #20]
 801046c:	4921      	ldr	r1, [pc, #132]	; (80104f4 <vTaskSwitchContext+0xdc>)
 801046e:	697a      	ldr	r2, [r7, #20]
 8010470:	4613      	mov	r3, r2
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	4413      	add	r3, r2
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	440b      	add	r3, r1
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d10a      	bne.n	8010496 <vTaskSwitchContext+0x7e>
	__asm volatile
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	607b      	str	r3, [r7, #4]
}
 8010492:	bf00      	nop
 8010494:	e7fe      	b.n	8010494 <vTaskSwitchContext+0x7c>
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	4613      	mov	r3, r2
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	4413      	add	r3, r2
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	4a14      	ldr	r2, [pc, #80]	; (80104f4 <vTaskSwitchContext+0xdc>)
 80104a2:	4413      	add	r3, r2
 80104a4:	613b      	str	r3, [r7, #16]
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	685a      	ldr	r2, [r3, #4]
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	605a      	str	r2, [r3, #4]
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	685a      	ldr	r2, [r3, #4]
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	3308      	adds	r3, #8
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d104      	bne.n	80104c6 <vTaskSwitchContext+0xae>
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	685a      	ldr	r2, [r3, #4]
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	605a      	str	r2, [r3, #4]
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	4a07      	ldr	r2, [pc, #28]	; (80104ec <vTaskSwitchContext+0xd4>)
 80104ce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80104d0:	4b06      	ldr	r3, [pc, #24]	; (80104ec <vTaskSwitchContext+0xd4>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	334c      	adds	r3, #76	; 0x4c
 80104d6:	4a08      	ldr	r2, [pc, #32]	; (80104f8 <vTaskSwitchContext+0xe0>)
 80104d8:	6013      	str	r3, [r2, #0]
}
 80104da:	bf00      	nop
 80104dc:	3718      	adds	r7, #24
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	240022e4 	.word	0x240022e4
 80104e8:	240022d0 	.word	0x240022d0
 80104ec:	240021bc 	.word	0x240021bc
 80104f0:	240022c4 	.word	0x240022c4
 80104f4:	240021c0 	.word	0x240021c0
 80104f8:	24000018 	.word	0x24000018

080104fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d10a      	bne.n	8010522 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010510:	f383 8811 	msr	BASEPRI, r3
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	60fb      	str	r3, [r7, #12]
}
 801051e:	bf00      	nop
 8010520:	e7fe      	b.n	8010520 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010522:	4b07      	ldr	r3, [pc, #28]	; (8010540 <vTaskPlaceOnEventList+0x44>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	3318      	adds	r3, #24
 8010528:	4619      	mov	r1, r3
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7fe ff9f 	bl	800f46e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010530:	2101      	movs	r1, #1
 8010532:	6838      	ldr	r0, [r7, #0]
 8010534:	f000 fade 	bl	8010af4 <prvAddCurrentTaskToDelayedList>
}
 8010538:	bf00      	nop
 801053a:	3710      	adds	r7, #16
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	240021bc 	.word	0x240021bc

08010544 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b086      	sub	sp, #24
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d10a      	bne.n	8010570 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801055a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055e:	f383 8811 	msr	BASEPRI, r3
 8010562:	f3bf 8f6f 	isb	sy
 8010566:	f3bf 8f4f 	dsb	sy
 801056a:	60fb      	str	r3, [r7, #12]
}
 801056c:	bf00      	nop
 801056e:	e7fe      	b.n	801056e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	3318      	adds	r3, #24
 8010574:	4618      	mov	r0, r3
 8010576:	f7fe ffb3 	bl	800f4e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801057a:	4b1d      	ldr	r3, [pc, #116]	; (80105f0 <xTaskRemoveFromEventList+0xac>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d11c      	bne.n	80105bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	3304      	adds	r3, #4
 8010586:	4618      	mov	r0, r3
 8010588:	f7fe ffaa 	bl	800f4e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010590:	2201      	movs	r2, #1
 8010592:	409a      	lsls	r2, r3
 8010594:	4b17      	ldr	r3, [pc, #92]	; (80105f4 <xTaskRemoveFromEventList+0xb0>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	4313      	orrs	r3, r2
 801059a:	4a16      	ldr	r2, [pc, #88]	; (80105f4 <xTaskRemoveFromEventList+0xb0>)
 801059c:	6013      	str	r3, [r2, #0]
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105a2:	4613      	mov	r3, r2
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	4413      	add	r3, r2
 80105a8:	009b      	lsls	r3, r3, #2
 80105aa:	4a13      	ldr	r2, [pc, #76]	; (80105f8 <xTaskRemoveFromEventList+0xb4>)
 80105ac:	441a      	add	r2, r3
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	3304      	adds	r3, #4
 80105b2:	4619      	mov	r1, r3
 80105b4:	4610      	mov	r0, r2
 80105b6:	f7fe ff36 	bl	800f426 <vListInsertEnd>
 80105ba:	e005      	b.n	80105c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	3318      	adds	r3, #24
 80105c0:	4619      	mov	r1, r3
 80105c2:	480e      	ldr	r0, [pc, #56]	; (80105fc <xTaskRemoveFromEventList+0xb8>)
 80105c4:	f7fe ff2f 	bl	800f426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105cc:	4b0c      	ldr	r3, [pc, #48]	; (8010600 <xTaskRemoveFromEventList+0xbc>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d905      	bls.n	80105e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80105d6:	2301      	movs	r3, #1
 80105d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80105da:	4b0a      	ldr	r3, [pc, #40]	; (8010604 <xTaskRemoveFromEventList+0xc0>)
 80105dc:	2201      	movs	r2, #1
 80105de:	601a      	str	r2, [r3, #0]
 80105e0:	e001      	b.n	80105e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80105e2:	2300      	movs	r3, #0
 80105e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80105e6:	697b      	ldr	r3, [r7, #20]
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3718      	adds	r7, #24
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	240022e4 	.word	0x240022e4
 80105f4:	240022c4 	.word	0x240022c4
 80105f8:	240021c0 	.word	0x240021c0
 80105fc:	2400227c 	.word	0x2400227c
 8010600:	240021bc 	.word	0x240021bc
 8010604:	240022d0 	.word	0x240022d0

08010608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010608:	b480      	push	{r7}
 801060a:	b083      	sub	sp, #12
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010610:	4b06      	ldr	r3, [pc, #24]	; (801062c <vTaskInternalSetTimeOutState+0x24>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010618:	4b05      	ldr	r3, [pc, #20]	; (8010630 <vTaskInternalSetTimeOutState+0x28>)
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	605a      	str	r2, [r3, #4]
}
 8010620:	bf00      	nop
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr
 801062c:	240022d4 	.word	0x240022d4
 8010630:	240022c0 	.word	0x240022c0

08010634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b088      	sub	sp, #32
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10a      	bne.n	801065a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	613b      	str	r3, [r7, #16]
}
 8010656:	bf00      	nop
 8010658:	e7fe      	b.n	8010658 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d10a      	bne.n	8010676 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010664:	f383 8811 	msr	BASEPRI, r3
 8010668:	f3bf 8f6f 	isb	sy
 801066c:	f3bf 8f4f 	dsb	sy
 8010670:	60fb      	str	r3, [r7, #12]
}
 8010672:	bf00      	nop
 8010674:	e7fe      	b.n	8010674 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010676:	f000 fbcd 	bl	8010e14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801067a:	4b1d      	ldr	r3, [pc, #116]	; (80106f0 <xTaskCheckForTimeOut+0xbc>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	69ba      	ldr	r2, [r7, #24]
 8010686:	1ad3      	subs	r3, r2, r3
 8010688:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010692:	d102      	bne.n	801069a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010694:	2300      	movs	r3, #0
 8010696:	61fb      	str	r3, [r7, #28]
 8010698:	e023      	b.n	80106e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	4b15      	ldr	r3, [pc, #84]	; (80106f4 <xTaskCheckForTimeOut+0xc0>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d007      	beq.n	80106b6 <xTaskCheckForTimeOut+0x82>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	69ba      	ldr	r2, [r7, #24]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d302      	bcc.n	80106b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80106b0:	2301      	movs	r3, #1
 80106b2:	61fb      	str	r3, [r7, #28]
 80106b4:	e015      	b.n	80106e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	697a      	ldr	r2, [r7, #20]
 80106bc:	429a      	cmp	r2, r3
 80106be:	d20b      	bcs.n	80106d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	1ad2      	subs	r2, r2, r3
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff ff9b 	bl	8010608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80106d2:	2300      	movs	r3, #0
 80106d4:	61fb      	str	r3, [r7, #28]
 80106d6:	e004      	b.n	80106e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	2200      	movs	r2, #0
 80106dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80106de:	2301      	movs	r3, #1
 80106e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80106e2:	f000 fbc7 	bl	8010e74 <vPortExitCritical>

	return xReturn;
 80106e6:	69fb      	ldr	r3, [r7, #28]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3720      	adds	r7, #32
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	240022c0 	.word	0x240022c0
 80106f4:	240022d4 	.word	0x240022d4

080106f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80106f8:	b480      	push	{r7}
 80106fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80106fc:	4b03      	ldr	r3, [pc, #12]	; (801070c <vTaskMissedYield+0x14>)
 80106fe:	2201      	movs	r2, #1
 8010700:	601a      	str	r2, [r3, #0]
}
 8010702:	bf00      	nop
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr
 801070c:	240022d0 	.word	0x240022d0

08010710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010718:	f000 f852 	bl	80107c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801071c:	4b06      	ldr	r3, [pc, #24]	; (8010738 <prvIdleTask+0x28>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d9f9      	bls.n	8010718 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010724:	4b05      	ldr	r3, [pc, #20]	; (801073c <prvIdleTask+0x2c>)
 8010726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801072a:	601a      	str	r2, [r3, #0]
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010734:	e7f0      	b.n	8010718 <prvIdleTask+0x8>
 8010736:	bf00      	nop
 8010738:	240021c0 	.word	0x240021c0
 801073c:	e000ed04 	.word	0xe000ed04

08010740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010746:	2300      	movs	r3, #0
 8010748:	607b      	str	r3, [r7, #4]
 801074a:	e00c      	b.n	8010766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	4613      	mov	r3, r2
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	4413      	add	r3, r2
 8010754:	009b      	lsls	r3, r3, #2
 8010756:	4a12      	ldr	r2, [pc, #72]	; (80107a0 <prvInitialiseTaskLists+0x60>)
 8010758:	4413      	add	r3, r2
 801075a:	4618      	mov	r0, r3
 801075c:	f7fe fe36 	bl	800f3cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	3301      	adds	r3, #1
 8010764:	607b      	str	r3, [r7, #4]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b06      	cmp	r3, #6
 801076a:	d9ef      	bls.n	801074c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801076c:	480d      	ldr	r0, [pc, #52]	; (80107a4 <prvInitialiseTaskLists+0x64>)
 801076e:	f7fe fe2d 	bl	800f3cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010772:	480d      	ldr	r0, [pc, #52]	; (80107a8 <prvInitialiseTaskLists+0x68>)
 8010774:	f7fe fe2a 	bl	800f3cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010778:	480c      	ldr	r0, [pc, #48]	; (80107ac <prvInitialiseTaskLists+0x6c>)
 801077a:	f7fe fe27 	bl	800f3cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801077e:	480c      	ldr	r0, [pc, #48]	; (80107b0 <prvInitialiseTaskLists+0x70>)
 8010780:	f7fe fe24 	bl	800f3cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010784:	480b      	ldr	r0, [pc, #44]	; (80107b4 <prvInitialiseTaskLists+0x74>)
 8010786:	f7fe fe21 	bl	800f3cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801078a:	4b0b      	ldr	r3, [pc, #44]	; (80107b8 <prvInitialiseTaskLists+0x78>)
 801078c:	4a05      	ldr	r2, [pc, #20]	; (80107a4 <prvInitialiseTaskLists+0x64>)
 801078e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010790:	4b0a      	ldr	r3, [pc, #40]	; (80107bc <prvInitialiseTaskLists+0x7c>)
 8010792:	4a05      	ldr	r2, [pc, #20]	; (80107a8 <prvInitialiseTaskLists+0x68>)
 8010794:	601a      	str	r2, [r3, #0]
}
 8010796:	bf00      	nop
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	240021c0 	.word	0x240021c0
 80107a4:	2400224c 	.word	0x2400224c
 80107a8:	24002260 	.word	0x24002260
 80107ac:	2400227c 	.word	0x2400227c
 80107b0:	24002290 	.word	0x24002290
 80107b4:	240022a8 	.word	0x240022a8
 80107b8:	24002274 	.word	0x24002274
 80107bc:	24002278 	.word	0x24002278

080107c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107c6:	e019      	b.n	80107fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80107c8:	f000 fb24 	bl	8010e14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107cc:	4b10      	ldr	r3, [pc, #64]	; (8010810 <prvCheckTasksWaitingTermination+0x50>)
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	3304      	adds	r3, #4
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe fe81 	bl	800f4e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80107de:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <prvCheckTasksWaitingTermination+0x54>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	3b01      	subs	r3, #1
 80107e4:	4a0b      	ldr	r2, [pc, #44]	; (8010814 <prvCheckTasksWaitingTermination+0x54>)
 80107e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80107e8:	4b0b      	ldr	r3, [pc, #44]	; (8010818 <prvCheckTasksWaitingTermination+0x58>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	4a0a      	ldr	r2, [pc, #40]	; (8010818 <prvCheckTasksWaitingTermination+0x58>)
 80107f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80107f2:	f000 fb3f 	bl	8010e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 f810 	bl	801081c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107fc:	4b06      	ldr	r3, [pc, #24]	; (8010818 <prvCheckTasksWaitingTermination+0x58>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1e1      	bne.n	80107c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010804:	bf00      	nop
 8010806:	bf00      	nop
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	24002290 	.word	0x24002290
 8010814:	240022bc 	.word	0x240022bc
 8010818:	240022a4 	.word	0x240022a4

0801081c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	334c      	adds	r3, #76	; 0x4c
 8010828:	4618      	mov	r0, r3
 801082a:	f006 f8a9 	bl	8016980 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010832:	4618      	mov	r0, r3
 8010834:	f000 fcdc 	bl	80111f0 <vPortFree>
			vPortFree( pxTCB );
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f000 fcd9 	bl	80111f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801083e:	bf00      	nop
 8010840:	3708      	adds	r7, #8
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
	...

08010848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801084e:	4b0c      	ldr	r3, [pc, #48]	; (8010880 <prvResetNextTaskUnblockTime+0x38>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d104      	bne.n	8010862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010858:	4b0a      	ldr	r3, [pc, #40]	; (8010884 <prvResetNextTaskUnblockTime+0x3c>)
 801085a:	f04f 32ff 	mov.w	r2, #4294967295
 801085e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010860:	e008      	b.n	8010874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010862:	4b07      	ldr	r3, [pc, #28]	; (8010880 <prvResetNextTaskUnblockTime+0x38>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	4a04      	ldr	r2, [pc, #16]	; (8010884 <prvResetNextTaskUnblockTime+0x3c>)
 8010872:	6013      	str	r3, [r2, #0]
}
 8010874:	bf00      	nop
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr
 8010880:	24002274 	.word	0x24002274
 8010884:	240022dc 	.word	0x240022dc

08010888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801088e:	4b0b      	ldr	r3, [pc, #44]	; (80108bc <xTaskGetSchedulerState+0x34>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d102      	bne.n	801089c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010896:	2301      	movs	r3, #1
 8010898:	607b      	str	r3, [r7, #4]
 801089a:	e008      	b.n	80108ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801089c:	4b08      	ldr	r3, [pc, #32]	; (80108c0 <xTaskGetSchedulerState+0x38>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d102      	bne.n	80108aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108a4:	2302      	movs	r3, #2
 80108a6:	607b      	str	r3, [r7, #4]
 80108a8:	e001      	b.n	80108ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108aa:	2300      	movs	r3, #0
 80108ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80108ae:	687b      	ldr	r3, [r7, #4]
	}
 80108b0:	4618      	mov	r0, r3
 80108b2:	370c      	adds	r7, #12
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr
 80108bc:	240022c8 	.word	0x240022c8
 80108c0:	240022e4 	.word	0x240022e4

080108c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80108d0:	2300      	movs	r3, #0
 80108d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d05e      	beq.n	8010998 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108de:	4b31      	ldr	r3, [pc, #196]	; (80109a4 <xTaskPriorityInherit+0xe0>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d24e      	bcs.n	8010986 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	699b      	ldr	r3, [r3, #24]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	db06      	blt.n	80108fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108f0:	4b2c      	ldr	r3, [pc, #176]	; (80109a4 <xTaskPriorityInherit+0xe0>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108f6:	f1c3 0207 	rsb	r2, r3, #7
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	6959      	ldr	r1, [r3, #20]
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010906:	4613      	mov	r3, r2
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	4413      	add	r3, r2
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4a26      	ldr	r2, [pc, #152]	; (80109a8 <xTaskPriorityInherit+0xe4>)
 8010910:	4413      	add	r3, r2
 8010912:	4299      	cmp	r1, r3
 8010914:	d12f      	bne.n	8010976 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	3304      	adds	r3, #4
 801091a:	4618      	mov	r0, r3
 801091c:	f7fe fde0 	bl	800f4e0 <uxListRemove>
 8010920:	4603      	mov	r3, r0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d10a      	bne.n	801093c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801092a:	2201      	movs	r2, #1
 801092c:	fa02 f303 	lsl.w	r3, r2, r3
 8010930:	43da      	mvns	r2, r3
 8010932:	4b1e      	ldr	r3, [pc, #120]	; (80109ac <xTaskPriorityInherit+0xe8>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4013      	ands	r3, r2
 8010938:	4a1c      	ldr	r2, [pc, #112]	; (80109ac <xTaskPriorityInherit+0xe8>)
 801093a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801093c:	4b19      	ldr	r3, [pc, #100]	; (80109a4 <xTaskPriorityInherit+0xe0>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801094a:	2201      	movs	r2, #1
 801094c:	409a      	lsls	r2, r3
 801094e:	4b17      	ldr	r3, [pc, #92]	; (80109ac <xTaskPriorityInherit+0xe8>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4313      	orrs	r3, r2
 8010954:	4a15      	ldr	r2, [pc, #84]	; (80109ac <xTaskPriorityInherit+0xe8>)
 8010956:	6013      	str	r3, [r2, #0]
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801095c:	4613      	mov	r3, r2
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	4413      	add	r3, r2
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4a10      	ldr	r2, [pc, #64]	; (80109a8 <xTaskPriorityInherit+0xe4>)
 8010966:	441a      	add	r2, r3
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	3304      	adds	r3, #4
 801096c:	4619      	mov	r1, r3
 801096e:	4610      	mov	r0, r2
 8010970:	f7fe fd59 	bl	800f426 <vListInsertEnd>
 8010974:	e004      	b.n	8010980 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010976:	4b0b      	ldr	r3, [pc, #44]	; (80109a4 <xTaskPriorityInherit+0xe0>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010980:	2301      	movs	r3, #1
 8010982:	60fb      	str	r3, [r7, #12]
 8010984:	e008      	b.n	8010998 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801098a:	4b06      	ldr	r3, [pc, #24]	; (80109a4 <xTaskPriorityInherit+0xe0>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010990:	429a      	cmp	r2, r3
 8010992:	d201      	bcs.n	8010998 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010994:	2301      	movs	r3, #1
 8010996:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010998:	68fb      	ldr	r3, [r7, #12]
	}
 801099a:	4618      	mov	r0, r3
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	240021bc 	.word	0x240021bc
 80109a8:	240021c0 	.word	0x240021c0
 80109ac:	240022c4 	.word	0x240022c4

080109b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b088      	sub	sp, #32
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80109be:	2301      	movs	r3, #1
 80109c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d077      	beq.n	8010ab8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d10a      	bne.n	80109e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80109d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d4:	f383 8811 	msr	BASEPRI, r3
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	f3bf 8f4f 	dsb	sy
 80109e0:	60fb      	str	r3, [r7, #12]
}
 80109e2:	bf00      	nop
 80109e4:	e7fe      	b.n	80109e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ea:	683a      	ldr	r2, [r7, #0]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d902      	bls.n	80109f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	61fb      	str	r3, [r7, #28]
 80109f4:	e002      	b.n	80109fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80109fc:	69bb      	ldr	r3, [r7, #24]
 80109fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a00:	69fa      	ldr	r2, [r7, #28]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d058      	beq.n	8010ab8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a0a:	697a      	ldr	r2, [r7, #20]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d153      	bne.n	8010ab8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010a10:	4b2b      	ldr	r3, [pc, #172]	; (8010ac0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	69ba      	ldr	r2, [r7, #24]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d10a      	bne.n	8010a30 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	60bb      	str	r3, [r7, #8]
}
 8010a2c:	bf00      	nop
 8010a2e:	e7fe      	b.n	8010a2e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	69fa      	ldr	r2, [r7, #28]
 8010a3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	699b      	ldr	r3, [r3, #24]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	db04      	blt.n	8010a4e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	f1c3 0207 	rsb	r2, r3, #7
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	6959      	ldr	r1, [r3, #20]
 8010a52:	693a      	ldr	r2, [r7, #16]
 8010a54:	4613      	mov	r3, r2
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	4413      	add	r3, r2
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	4a19      	ldr	r2, [pc, #100]	; (8010ac4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010a5e:	4413      	add	r3, r2
 8010a60:	4299      	cmp	r1, r3
 8010a62:	d129      	bne.n	8010ab8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a64:	69bb      	ldr	r3, [r7, #24]
 8010a66:	3304      	adds	r3, #4
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fe fd39 	bl	800f4e0 <uxListRemove>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d10a      	bne.n	8010a8a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a78:	2201      	movs	r2, #1
 8010a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a7e:	43da      	mvns	r2, r3
 8010a80:	4b11      	ldr	r3, [pc, #68]	; (8010ac8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4013      	ands	r3, r2
 8010a86:	4a10      	ldr	r2, [pc, #64]	; (8010ac8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a88:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a8e:	2201      	movs	r2, #1
 8010a90:	409a      	lsls	r2, r3
 8010a92:	4b0d      	ldr	r3, [pc, #52]	; (8010ac8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4313      	orrs	r3, r2
 8010a98:	4a0b      	ldr	r2, [pc, #44]	; (8010ac8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a9a:	6013      	str	r3, [r2, #0]
 8010a9c:	69bb      	ldr	r3, [r7, #24]
 8010a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	4413      	add	r3, r2
 8010aa6:	009b      	lsls	r3, r3, #2
 8010aa8:	4a06      	ldr	r2, [pc, #24]	; (8010ac4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010aaa:	441a      	add	r2, r3
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	3304      	adds	r3, #4
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4610      	mov	r0, r2
 8010ab4:	f7fe fcb7 	bl	800f426 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ab8:	bf00      	nop
 8010aba:	3720      	adds	r7, #32
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	240021bc 	.word	0x240021bc
 8010ac4:	240021c0 	.word	0x240021c0
 8010ac8:	240022c4 	.word	0x240022c4

08010acc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010acc:	b480      	push	{r7}
 8010ace:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010ad0:	4b07      	ldr	r3, [pc, #28]	; (8010af0 <pvTaskIncrementMutexHeldCount+0x24>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d004      	beq.n	8010ae2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010ad8:	4b05      	ldr	r3, [pc, #20]	; (8010af0 <pvTaskIncrementMutexHeldCount+0x24>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010ade:	3201      	adds	r2, #1
 8010ae0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010ae2:	4b03      	ldr	r3, [pc, #12]	; (8010af0 <pvTaskIncrementMutexHeldCount+0x24>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
	}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr
 8010af0:	240021bc 	.word	0x240021bc

08010af4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010afe:	4b29      	ldr	r3, [pc, #164]	; (8010ba4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b04:	4b28      	ldr	r3, [pc, #160]	; (8010ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	3304      	adds	r3, #4
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fe fce8 	bl	800f4e0 <uxListRemove>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d10b      	bne.n	8010b2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010b16:	4b24      	ldr	r3, [pc, #144]	; (8010ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b22:	43da      	mvns	r2, r3
 8010b24:	4b21      	ldr	r3, [pc, #132]	; (8010bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4013      	ands	r3, r2
 8010b2a:	4a20      	ldr	r2, [pc, #128]	; (8010bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8010b2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b34:	d10a      	bne.n	8010b4c <prvAddCurrentTaskToDelayedList+0x58>
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d007      	beq.n	8010b4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b3c:	4b1a      	ldr	r3, [pc, #104]	; (8010ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	3304      	adds	r3, #4
 8010b42:	4619      	mov	r1, r3
 8010b44:	481a      	ldr	r0, [pc, #104]	; (8010bb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010b46:	f7fe fc6e 	bl	800f426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b4a:	e026      	b.n	8010b9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4413      	add	r3, r2
 8010b52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b54:	4b14      	ldr	r3, [pc, #80]	; (8010ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68ba      	ldr	r2, [r7, #8]
 8010b5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b5c:	68ba      	ldr	r2, [r7, #8]
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d209      	bcs.n	8010b78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b64:	4b13      	ldr	r3, [pc, #76]	; (8010bb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	4b0f      	ldr	r3, [pc, #60]	; (8010ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	3304      	adds	r3, #4
 8010b6e:	4619      	mov	r1, r3
 8010b70:	4610      	mov	r0, r2
 8010b72:	f7fe fc7c 	bl	800f46e <vListInsert>
}
 8010b76:	e010      	b.n	8010b9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b78:	4b0f      	ldr	r3, [pc, #60]	; (8010bb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	4b0a      	ldr	r3, [pc, #40]	; (8010ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	3304      	adds	r3, #4
 8010b82:	4619      	mov	r1, r3
 8010b84:	4610      	mov	r0, r2
 8010b86:	f7fe fc72 	bl	800f46e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b8a:	4b0c      	ldr	r3, [pc, #48]	; (8010bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	68ba      	ldr	r2, [r7, #8]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d202      	bcs.n	8010b9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010b94:	4a09      	ldr	r2, [pc, #36]	; (8010bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	6013      	str	r3, [r2, #0]
}
 8010b9a:	bf00      	nop
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	240022c0 	.word	0x240022c0
 8010ba8:	240021bc 	.word	0x240021bc
 8010bac:	240022c4 	.word	0x240022c4
 8010bb0:	240022a8 	.word	0x240022a8
 8010bb4:	24002278 	.word	0x24002278
 8010bb8:	24002274 	.word	0x24002274
 8010bbc:	240022dc 	.word	0x240022dc

08010bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	3b04      	subs	r3, #4
 8010bd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	3b04      	subs	r3, #4
 8010bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	f023 0201 	bic.w	r2, r3, #1
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	3b04      	subs	r3, #4
 8010bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010bf0:	4a0c      	ldr	r2, [pc, #48]	; (8010c24 <pxPortInitialiseStack+0x64>)
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3b14      	subs	r3, #20
 8010bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	3b04      	subs	r3, #4
 8010c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f06f 0202 	mvn.w	r2, #2
 8010c0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	3b20      	subs	r3, #32
 8010c14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010c16:	68fb      	ldr	r3, [r7, #12]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3714      	adds	r7, #20
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr
 8010c24:	08010c29 	.word	0x08010c29

08010c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010c32:	4b12      	ldr	r3, [pc, #72]	; (8010c7c <prvTaskExitError+0x54>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c3a:	d00a      	beq.n	8010c52 <prvTaskExitError+0x2a>
	__asm volatile
 8010c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	60fb      	str	r3, [r7, #12]
}
 8010c4e:	bf00      	nop
 8010c50:	e7fe      	b.n	8010c50 <prvTaskExitError+0x28>
	__asm volatile
 8010c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c56:	f383 8811 	msr	BASEPRI, r3
 8010c5a:	f3bf 8f6f 	isb	sy
 8010c5e:	f3bf 8f4f 	dsb	sy
 8010c62:	60bb      	str	r3, [r7, #8]
}
 8010c64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c66:	bf00      	nop
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d0fc      	beq.n	8010c68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c6e:	bf00      	nop
 8010c70:	bf00      	nop
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr
 8010c7c:	24000010 	.word	0x24000010

08010c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c80:	4b07      	ldr	r3, [pc, #28]	; (8010ca0 <pxCurrentTCBConst2>)
 8010c82:	6819      	ldr	r1, [r3, #0]
 8010c84:	6808      	ldr	r0, [r1, #0]
 8010c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c8a:	f380 8809 	msr	PSP, r0
 8010c8e:	f3bf 8f6f 	isb	sy
 8010c92:	f04f 0000 	mov.w	r0, #0
 8010c96:	f380 8811 	msr	BASEPRI, r0
 8010c9a:	4770      	bx	lr
 8010c9c:	f3af 8000 	nop.w

08010ca0 <pxCurrentTCBConst2>:
 8010ca0:	240021bc 	.word	0x240021bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010ca4:	bf00      	nop
 8010ca6:	bf00      	nop

08010ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010ca8:	4808      	ldr	r0, [pc, #32]	; (8010ccc <prvPortStartFirstTask+0x24>)
 8010caa:	6800      	ldr	r0, [r0, #0]
 8010cac:	6800      	ldr	r0, [r0, #0]
 8010cae:	f380 8808 	msr	MSP, r0
 8010cb2:	f04f 0000 	mov.w	r0, #0
 8010cb6:	f380 8814 	msr	CONTROL, r0
 8010cba:	b662      	cpsie	i
 8010cbc:	b661      	cpsie	f
 8010cbe:	f3bf 8f4f 	dsb	sy
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	df00      	svc	0
 8010cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010cca:	bf00      	nop
 8010ccc:	e000ed08 	.word	0xe000ed08

08010cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b086      	sub	sp, #24
 8010cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010cd6:	4b46      	ldr	r3, [pc, #280]	; (8010df0 <xPortStartScheduler+0x120>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4a46      	ldr	r2, [pc, #280]	; (8010df4 <xPortStartScheduler+0x124>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d10a      	bne.n	8010cf6 <xPortStartScheduler+0x26>
	__asm volatile
 8010ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	613b      	str	r3, [r7, #16]
}
 8010cf2:	bf00      	nop
 8010cf4:	e7fe      	b.n	8010cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010cf6:	4b3e      	ldr	r3, [pc, #248]	; (8010df0 <xPortStartScheduler+0x120>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4a3f      	ldr	r2, [pc, #252]	; (8010df8 <xPortStartScheduler+0x128>)
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	d10a      	bne.n	8010d16 <xPortStartScheduler+0x46>
	__asm volatile
 8010d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d04:	f383 8811 	msr	BASEPRI, r3
 8010d08:	f3bf 8f6f 	isb	sy
 8010d0c:	f3bf 8f4f 	dsb	sy
 8010d10:	60fb      	str	r3, [r7, #12]
}
 8010d12:	bf00      	nop
 8010d14:	e7fe      	b.n	8010d14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010d16:	4b39      	ldr	r3, [pc, #228]	; (8010dfc <xPortStartScheduler+0x12c>)
 8010d18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	22ff      	movs	r2, #255	; 0xff
 8010d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010d30:	78fb      	ldrb	r3, [r7, #3]
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010d38:	b2da      	uxtb	r2, r3
 8010d3a:	4b31      	ldr	r3, [pc, #196]	; (8010e00 <xPortStartScheduler+0x130>)
 8010d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010d3e:	4b31      	ldr	r3, [pc, #196]	; (8010e04 <xPortStartScheduler+0x134>)
 8010d40:	2207      	movs	r2, #7
 8010d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d44:	e009      	b.n	8010d5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010d46:	4b2f      	ldr	r3, [pc, #188]	; (8010e04 <xPortStartScheduler+0x134>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	4a2d      	ldr	r2, [pc, #180]	; (8010e04 <xPortStartScheduler+0x134>)
 8010d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d50:	78fb      	ldrb	r3, [r7, #3]
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	005b      	lsls	r3, r3, #1
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d5a:	78fb      	ldrb	r3, [r7, #3]
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d62:	2b80      	cmp	r3, #128	; 0x80
 8010d64:	d0ef      	beq.n	8010d46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d66:	4b27      	ldr	r3, [pc, #156]	; (8010e04 <xPortStartScheduler+0x134>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f1c3 0307 	rsb	r3, r3, #7
 8010d6e:	2b04      	cmp	r3, #4
 8010d70:	d00a      	beq.n	8010d88 <xPortStartScheduler+0xb8>
	__asm volatile
 8010d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d76:	f383 8811 	msr	BASEPRI, r3
 8010d7a:	f3bf 8f6f 	isb	sy
 8010d7e:	f3bf 8f4f 	dsb	sy
 8010d82:	60bb      	str	r3, [r7, #8]
}
 8010d84:	bf00      	nop
 8010d86:	e7fe      	b.n	8010d86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d88:	4b1e      	ldr	r3, [pc, #120]	; (8010e04 <xPortStartScheduler+0x134>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	021b      	lsls	r3, r3, #8
 8010d8e:	4a1d      	ldr	r2, [pc, #116]	; (8010e04 <xPortStartScheduler+0x134>)
 8010d90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d92:	4b1c      	ldr	r3, [pc, #112]	; (8010e04 <xPortStartScheduler+0x134>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d9a:	4a1a      	ldr	r2, [pc, #104]	; (8010e04 <xPortStartScheduler+0x134>)
 8010d9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010da6:	4b18      	ldr	r3, [pc, #96]	; (8010e08 <xPortStartScheduler+0x138>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4a17      	ldr	r2, [pc, #92]	; (8010e08 <xPortStartScheduler+0x138>)
 8010dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010db2:	4b15      	ldr	r3, [pc, #84]	; (8010e08 <xPortStartScheduler+0x138>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4a14      	ldr	r2, [pc, #80]	; (8010e08 <xPortStartScheduler+0x138>)
 8010db8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010dbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010dbe:	f000 f8dd 	bl	8010f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010dc2:	4b12      	ldr	r3, [pc, #72]	; (8010e0c <xPortStartScheduler+0x13c>)
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010dc8:	f000 f8fc 	bl	8010fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010dcc:	4b10      	ldr	r3, [pc, #64]	; (8010e10 <xPortStartScheduler+0x140>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a0f      	ldr	r2, [pc, #60]	; (8010e10 <xPortStartScheduler+0x140>)
 8010dd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010dd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010dd8:	f7ff ff66 	bl	8010ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010ddc:	f7ff fb1c 	bl	8010418 <vTaskSwitchContext>
	prvTaskExitError();
 8010de0:	f7ff ff22 	bl	8010c28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010de4:	2300      	movs	r3, #0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3718      	adds	r7, #24
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	e000ed00 	.word	0xe000ed00
 8010df4:	410fc271 	.word	0x410fc271
 8010df8:	410fc270 	.word	0x410fc270
 8010dfc:	e000e400 	.word	0xe000e400
 8010e00:	240022e8 	.word	0x240022e8
 8010e04:	240022ec 	.word	0x240022ec
 8010e08:	e000ed20 	.word	0xe000ed20
 8010e0c:	24000010 	.word	0x24000010
 8010e10:	e000ef34 	.word	0xe000ef34

08010e14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	607b      	str	r3, [r7, #4]
}
 8010e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010e2e:	4b0f      	ldr	r3, [pc, #60]	; (8010e6c <vPortEnterCritical+0x58>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	3301      	adds	r3, #1
 8010e34:	4a0d      	ldr	r2, [pc, #52]	; (8010e6c <vPortEnterCritical+0x58>)
 8010e36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010e38:	4b0c      	ldr	r3, [pc, #48]	; (8010e6c <vPortEnterCritical+0x58>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d10f      	bne.n	8010e60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010e40:	4b0b      	ldr	r3, [pc, #44]	; (8010e70 <vPortEnterCritical+0x5c>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00a      	beq.n	8010e60 <vPortEnterCritical+0x4c>
	__asm volatile
 8010e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4e:	f383 8811 	msr	BASEPRI, r3
 8010e52:	f3bf 8f6f 	isb	sy
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	603b      	str	r3, [r7, #0]
}
 8010e5c:	bf00      	nop
 8010e5e:	e7fe      	b.n	8010e5e <vPortEnterCritical+0x4a>
	}
}
 8010e60:	bf00      	nop
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr
 8010e6c:	24000010 	.word	0x24000010
 8010e70:	e000ed04 	.word	0xe000ed04

08010e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e7a:	4b12      	ldr	r3, [pc, #72]	; (8010ec4 <vPortExitCritical+0x50>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d10a      	bne.n	8010e98 <vPortExitCritical+0x24>
	__asm volatile
 8010e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e86:	f383 8811 	msr	BASEPRI, r3
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	f3bf 8f4f 	dsb	sy
 8010e92:	607b      	str	r3, [r7, #4]
}
 8010e94:	bf00      	nop
 8010e96:	e7fe      	b.n	8010e96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e98:	4b0a      	ldr	r3, [pc, #40]	; (8010ec4 <vPortExitCritical+0x50>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	4a09      	ldr	r2, [pc, #36]	; (8010ec4 <vPortExitCritical+0x50>)
 8010ea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010ea2:	4b08      	ldr	r3, [pc, #32]	; (8010ec4 <vPortExitCritical+0x50>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d105      	bne.n	8010eb6 <vPortExitCritical+0x42>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	f383 8811 	msr	BASEPRI, r3
}
 8010eb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010eb6:	bf00      	nop
 8010eb8:	370c      	adds	r7, #12
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr
 8010ec2:	bf00      	nop
 8010ec4:	24000010 	.word	0x24000010
	...

08010ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010ed0:	f3ef 8009 	mrs	r0, PSP
 8010ed4:	f3bf 8f6f 	isb	sy
 8010ed8:	4b15      	ldr	r3, [pc, #84]	; (8010f30 <pxCurrentTCBConst>)
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	f01e 0f10 	tst.w	lr, #16
 8010ee0:	bf08      	it	eq
 8010ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eea:	6010      	str	r0, [r2, #0]
 8010eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010ef4:	f380 8811 	msr	BASEPRI, r0
 8010ef8:	f3bf 8f4f 	dsb	sy
 8010efc:	f3bf 8f6f 	isb	sy
 8010f00:	f7ff fa8a 	bl	8010418 <vTaskSwitchContext>
 8010f04:	f04f 0000 	mov.w	r0, #0
 8010f08:	f380 8811 	msr	BASEPRI, r0
 8010f0c:	bc09      	pop	{r0, r3}
 8010f0e:	6819      	ldr	r1, [r3, #0]
 8010f10:	6808      	ldr	r0, [r1, #0]
 8010f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f16:	f01e 0f10 	tst.w	lr, #16
 8010f1a:	bf08      	it	eq
 8010f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010f20:	f380 8809 	msr	PSP, r0
 8010f24:	f3bf 8f6f 	isb	sy
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	f3af 8000 	nop.w

08010f30 <pxCurrentTCBConst>:
 8010f30:	240021bc 	.word	0x240021bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010f34:	bf00      	nop
 8010f36:	bf00      	nop

08010f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8010f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f42:	f383 8811 	msr	BASEPRI, r3
 8010f46:	f3bf 8f6f 	isb	sy
 8010f4a:	f3bf 8f4f 	dsb	sy
 8010f4e:	607b      	str	r3, [r7, #4]
}
 8010f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f52:	f7ff f9a9 	bl	80102a8 <xTaskIncrementTick>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d003      	beq.n	8010f64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f5c:	4b06      	ldr	r3, [pc, #24]	; (8010f78 <SysTick_Handler+0x40>)
 8010f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f62:	601a      	str	r2, [r3, #0]
 8010f64:	2300      	movs	r3, #0
 8010f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	f383 8811 	msr	BASEPRI, r3
}
 8010f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f70:	bf00      	nop
 8010f72:	3708      	adds	r7, #8
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	e000ed04 	.word	0xe000ed04

08010f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f80:	4b0b      	ldr	r3, [pc, #44]	; (8010fb0 <vPortSetupTimerInterrupt+0x34>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f86:	4b0b      	ldr	r3, [pc, #44]	; (8010fb4 <vPortSetupTimerInterrupt+0x38>)
 8010f88:	2200      	movs	r2, #0
 8010f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f8c:	4b0a      	ldr	r3, [pc, #40]	; (8010fb8 <vPortSetupTimerInterrupt+0x3c>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4a0a      	ldr	r2, [pc, #40]	; (8010fbc <vPortSetupTimerInterrupt+0x40>)
 8010f92:	fba2 2303 	umull	r2, r3, r2, r3
 8010f96:	099b      	lsrs	r3, r3, #6
 8010f98:	4a09      	ldr	r2, [pc, #36]	; (8010fc0 <vPortSetupTimerInterrupt+0x44>)
 8010f9a:	3b01      	subs	r3, #1
 8010f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f9e:	4b04      	ldr	r3, [pc, #16]	; (8010fb0 <vPortSetupTimerInterrupt+0x34>)
 8010fa0:	2207      	movs	r2, #7
 8010fa2:	601a      	str	r2, [r3, #0]
}
 8010fa4:	bf00      	nop
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop
 8010fb0:	e000e010 	.word	0xe000e010
 8010fb4:	e000e018 	.word	0xe000e018
 8010fb8:	24000000 	.word	0x24000000
 8010fbc:	10624dd3 	.word	0x10624dd3
 8010fc0:	e000e014 	.word	0xe000e014

08010fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010fd4 <vPortEnableVFP+0x10>
 8010fc8:	6801      	ldr	r1, [r0, #0]
 8010fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010fce:	6001      	str	r1, [r0, #0]
 8010fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010fd2:	bf00      	nop
 8010fd4:	e000ed88 	.word	0xe000ed88

08010fd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010fd8:	b480      	push	{r7}
 8010fda:	b085      	sub	sp, #20
 8010fdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010fde:	f3ef 8305 	mrs	r3, IPSR
 8010fe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2b0f      	cmp	r3, #15
 8010fe8:	d914      	bls.n	8011014 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010fea:	4a17      	ldr	r2, [pc, #92]	; (8011048 <vPortValidateInterruptPriority+0x70>)
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	4413      	add	r3, r2
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ff4:	4b15      	ldr	r3, [pc, #84]	; (801104c <vPortValidateInterruptPriority+0x74>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	7afa      	ldrb	r2, [r7, #11]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d20a      	bcs.n	8011014 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011002:	f383 8811 	msr	BASEPRI, r3
 8011006:	f3bf 8f6f 	isb	sy
 801100a:	f3bf 8f4f 	dsb	sy
 801100e:	607b      	str	r3, [r7, #4]
}
 8011010:	bf00      	nop
 8011012:	e7fe      	b.n	8011012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011014:	4b0e      	ldr	r3, [pc, #56]	; (8011050 <vPortValidateInterruptPriority+0x78>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801101c:	4b0d      	ldr	r3, [pc, #52]	; (8011054 <vPortValidateInterruptPriority+0x7c>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	429a      	cmp	r2, r3
 8011022:	d90a      	bls.n	801103a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011028:	f383 8811 	msr	BASEPRI, r3
 801102c:	f3bf 8f6f 	isb	sy
 8011030:	f3bf 8f4f 	dsb	sy
 8011034:	603b      	str	r3, [r7, #0]
}
 8011036:	bf00      	nop
 8011038:	e7fe      	b.n	8011038 <vPortValidateInterruptPriority+0x60>
	}
 801103a:	bf00      	nop
 801103c:	3714      	adds	r7, #20
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop
 8011048:	e000e3f0 	.word	0xe000e3f0
 801104c:	240022e8 	.word	0x240022e8
 8011050:	e000ed0c 	.word	0xe000ed0c
 8011054:	240022ec 	.word	0x240022ec

08011058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08a      	sub	sp, #40	; 0x28
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011060:	2300      	movs	r3, #0
 8011062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011064:	f7ff f876 	bl	8010154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011068:	4b5b      	ldr	r3, [pc, #364]	; (80111d8 <pvPortMalloc+0x180>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d101      	bne.n	8011074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011070:	f000 f920 	bl	80112b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011074:	4b59      	ldr	r3, [pc, #356]	; (80111dc <pvPortMalloc+0x184>)
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	4013      	ands	r3, r2
 801107c:	2b00      	cmp	r3, #0
 801107e:	f040 8093 	bne.w	80111a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d01d      	beq.n	80110c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011088:	2208      	movs	r2, #8
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4413      	add	r3, r2
 801108e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f003 0307 	and.w	r3, r3, #7
 8011096:	2b00      	cmp	r3, #0
 8011098:	d014      	beq.n	80110c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f023 0307 	bic.w	r3, r3, #7
 80110a0:	3308      	adds	r3, #8
 80110a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f003 0307 	and.w	r3, r3, #7
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d00a      	beq.n	80110c4 <pvPortMalloc+0x6c>
	__asm volatile
 80110ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b2:	f383 8811 	msr	BASEPRI, r3
 80110b6:	f3bf 8f6f 	isb	sy
 80110ba:	f3bf 8f4f 	dsb	sy
 80110be:	617b      	str	r3, [r7, #20]
}
 80110c0:	bf00      	nop
 80110c2:	e7fe      	b.n	80110c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d06e      	beq.n	80111a8 <pvPortMalloc+0x150>
 80110ca:	4b45      	ldr	r3, [pc, #276]	; (80111e0 <pvPortMalloc+0x188>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d869      	bhi.n	80111a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80110d4:	4b43      	ldr	r3, [pc, #268]	; (80111e4 <pvPortMalloc+0x18c>)
 80110d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80110d8:	4b42      	ldr	r3, [pc, #264]	; (80111e4 <pvPortMalloc+0x18c>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110de:	e004      	b.n	80110ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80110e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d903      	bls.n	80110fc <pvPortMalloc+0xa4>
 80110f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d1f1      	bne.n	80110e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80110fc:	4b36      	ldr	r3, [pc, #216]	; (80111d8 <pvPortMalloc+0x180>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011102:	429a      	cmp	r2, r3
 8011104:	d050      	beq.n	80111a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011106:	6a3b      	ldr	r3, [r7, #32]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2208      	movs	r2, #8
 801110c:	4413      	add	r3, r2
 801110e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011112:	681a      	ldr	r2, [r3, #0]
 8011114:	6a3b      	ldr	r3, [r7, #32]
 8011116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	1ad2      	subs	r2, r2, r3
 8011120:	2308      	movs	r3, #8
 8011122:	005b      	lsls	r3, r3, #1
 8011124:	429a      	cmp	r2, r3
 8011126:	d91f      	bls.n	8011168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4413      	add	r3, r2
 801112e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	f003 0307 	and.w	r3, r3, #7
 8011136:	2b00      	cmp	r3, #0
 8011138:	d00a      	beq.n	8011150 <pvPortMalloc+0xf8>
	__asm volatile
 801113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113e:	f383 8811 	msr	BASEPRI, r3
 8011142:	f3bf 8f6f 	isb	sy
 8011146:	f3bf 8f4f 	dsb	sy
 801114a:	613b      	str	r3, [r7, #16]
}
 801114c:	bf00      	nop
 801114e:	e7fe      	b.n	801114e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011152:	685a      	ldr	r2, [r3, #4]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	1ad2      	subs	r2, r2, r3
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011162:	69b8      	ldr	r0, [r7, #24]
 8011164:	f000 f908 	bl	8011378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011168:	4b1d      	ldr	r3, [pc, #116]	; (80111e0 <pvPortMalloc+0x188>)
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	4a1b      	ldr	r2, [pc, #108]	; (80111e0 <pvPortMalloc+0x188>)
 8011174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011176:	4b1a      	ldr	r3, [pc, #104]	; (80111e0 <pvPortMalloc+0x188>)
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	4b1b      	ldr	r3, [pc, #108]	; (80111e8 <pvPortMalloc+0x190>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	429a      	cmp	r2, r3
 8011180:	d203      	bcs.n	801118a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011182:	4b17      	ldr	r3, [pc, #92]	; (80111e0 <pvPortMalloc+0x188>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4a18      	ldr	r2, [pc, #96]	; (80111e8 <pvPortMalloc+0x190>)
 8011188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118c:	685a      	ldr	r2, [r3, #4]
 801118e:	4b13      	ldr	r3, [pc, #76]	; (80111dc <pvPortMalloc+0x184>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	431a      	orrs	r2, r3
 8011194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119a:	2200      	movs	r2, #0
 801119c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801119e:	4b13      	ldr	r3, [pc, #76]	; (80111ec <pvPortMalloc+0x194>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	3301      	adds	r3, #1
 80111a4:	4a11      	ldr	r2, [pc, #68]	; (80111ec <pvPortMalloc+0x194>)
 80111a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80111a8:	f7fe ffe2 	bl	8010170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	f003 0307 	and.w	r3, r3, #7
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00a      	beq.n	80111cc <pvPortMalloc+0x174>
	__asm volatile
 80111b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ba:	f383 8811 	msr	BASEPRI, r3
 80111be:	f3bf 8f6f 	isb	sy
 80111c2:	f3bf 8f4f 	dsb	sy
 80111c6:	60fb      	str	r3, [r7, #12]
}
 80111c8:	bf00      	nop
 80111ca:	e7fe      	b.n	80111ca <pvPortMalloc+0x172>
	return pvReturn;
 80111cc:	69fb      	ldr	r3, [r7, #28]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3728      	adds	r7, #40	; 0x28
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	24005ef8 	.word	0x24005ef8
 80111dc:	24005f0c 	.word	0x24005f0c
 80111e0:	24005efc 	.word	0x24005efc
 80111e4:	24005ef0 	.word	0x24005ef0
 80111e8:	24005f00 	.word	0x24005f00
 80111ec:	24005f04 	.word	0x24005f04

080111f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d04d      	beq.n	801129e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011202:	2308      	movs	r3, #8
 8011204:	425b      	negs	r3, r3
 8011206:	697a      	ldr	r2, [r7, #20]
 8011208:	4413      	add	r3, r2
 801120a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	4b24      	ldr	r3, [pc, #144]	; (80112a8 <vPortFree+0xb8>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	4013      	ands	r3, r2
 801121a:	2b00      	cmp	r3, #0
 801121c:	d10a      	bne.n	8011234 <vPortFree+0x44>
	__asm volatile
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	60fb      	str	r3, [r7, #12]
}
 8011230:	bf00      	nop
 8011232:	e7fe      	b.n	8011232 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d00a      	beq.n	8011252 <vPortFree+0x62>
	__asm volatile
 801123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011240:	f383 8811 	msr	BASEPRI, r3
 8011244:	f3bf 8f6f 	isb	sy
 8011248:	f3bf 8f4f 	dsb	sy
 801124c:	60bb      	str	r3, [r7, #8]
}
 801124e:	bf00      	nop
 8011250:	e7fe      	b.n	8011250 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	685a      	ldr	r2, [r3, #4]
 8011256:	4b14      	ldr	r3, [pc, #80]	; (80112a8 <vPortFree+0xb8>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	4013      	ands	r3, r2
 801125c:	2b00      	cmp	r3, #0
 801125e:	d01e      	beq.n	801129e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d11a      	bne.n	801129e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	685a      	ldr	r2, [r3, #4]
 801126c:	4b0e      	ldr	r3, [pc, #56]	; (80112a8 <vPortFree+0xb8>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	43db      	mvns	r3, r3
 8011272:	401a      	ands	r2, r3
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011278:	f7fe ff6c 	bl	8010154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	685a      	ldr	r2, [r3, #4]
 8011280:	4b0a      	ldr	r3, [pc, #40]	; (80112ac <vPortFree+0xbc>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	4413      	add	r3, r2
 8011286:	4a09      	ldr	r2, [pc, #36]	; (80112ac <vPortFree+0xbc>)
 8011288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801128a:	6938      	ldr	r0, [r7, #16]
 801128c:	f000 f874 	bl	8011378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011290:	4b07      	ldr	r3, [pc, #28]	; (80112b0 <vPortFree+0xc0>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	3301      	adds	r3, #1
 8011296:	4a06      	ldr	r2, [pc, #24]	; (80112b0 <vPortFree+0xc0>)
 8011298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801129a:	f7fe ff69 	bl	8010170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801129e:	bf00      	nop
 80112a0:	3718      	adds	r7, #24
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	24005f0c 	.word	0x24005f0c
 80112ac:	24005efc 	.word	0x24005efc
 80112b0:	24005f08 	.word	0x24005f08

080112b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80112b4:	b480      	push	{r7}
 80112b6:	b085      	sub	sp, #20
 80112b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80112ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80112be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80112c0:	4b27      	ldr	r3, [pc, #156]	; (8011360 <prvHeapInit+0xac>)
 80112c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	f003 0307 	and.w	r3, r3, #7
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d00c      	beq.n	80112e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	3307      	adds	r3, #7
 80112d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f023 0307 	bic.w	r3, r3, #7
 80112da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80112dc:	68ba      	ldr	r2, [r7, #8]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	4a1f      	ldr	r2, [pc, #124]	; (8011360 <prvHeapInit+0xac>)
 80112e4:	4413      	add	r3, r2
 80112e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80112ec:	4a1d      	ldr	r2, [pc, #116]	; (8011364 <prvHeapInit+0xb0>)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80112f2:	4b1c      	ldr	r3, [pc, #112]	; (8011364 <prvHeapInit+0xb0>)
 80112f4:	2200      	movs	r2, #0
 80112f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	68ba      	ldr	r2, [r7, #8]
 80112fc:	4413      	add	r3, r2
 80112fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011300:	2208      	movs	r2, #8
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	1a9b      	subs	r3, r3, r2
 8011306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f023 0307 	bic.w	r3, r3, #7
 801130e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	4a15      	ldr	r2, [pc, #84]	; (8011368 <prvHeapInit+0xb4>)
 8011314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011316:	4b14      	ldr	r3, [pc, #80]	; (8011368 <prvHeapInit+0xb4>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2200      	movs	r2, #0
 801131c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801131e:	4b12      	ldr	r3, [pc, #72]	; (8011368 <prvHeapInit+0xb4>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2200      	movs	r2, #0
 8011324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	68fa      	ldr	r2, [r7, #12]
 801132e:	1ad2      	subs	r2, r2, r3
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011334:	4b0c      	ldr	r3, [pc, #48]	; (8011368 <prvHeapInit+0xb4>)
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	4a0a      	ldr	r2, [pc, #40]	; (801136c <prvHeapInit+0xb8>)
 8011342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	4a09      	ldr	r2, [pc, #36]	; (8011370 <prvHeapInit+0xbc>)
 801134a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801134c:	4b09      	ldr	r3, [pc, #36]	; (8011374 <prvHeapInit+0xc0>)
 801134e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011352:	601a      	str	r2, [r3, #0]
}
 8011354:	bf00      	nop
 8011356:	3714      	adds	r7, #20
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr
 8011360:	240022f0 	.word	0x240022f0
 8011364:	24005ef0 	.word	0x24005ef0
 8011368:	24005ef8 	.word	0x24005ef8
 801136c:	24005f00 	.word	0x24005f00
 8011370:	24005efc 	.word	0x24005efc
 8011374:	24005f0c 	.word	0x24005f0c

08011378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011378:	b480      	push	{r7}
 801137a:	b085      	sub	sp, #20
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011380:	4b28      	ldr	r3, [pc, #160]	; (8011424 <prvInsertBlockIntoFreeList+0xac>)
 8011382:	60fb      	str	r3, [r7, #12]
 8011384:	e002      	b.n	801138c <prvInsertBlockIntoFreeList+0x14>
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	60fb      	str	r3, [r7, #12]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	429a      	cmp	r2, r3
 8011394:	d8f7      	bhi.n	8011386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	68ba      	ldr	r2, [r7, #8]
 80113a0:	4413      	add	r3, r2
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d108      	bne.n	80113ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	685a      	ldr	r2, [r3, #4]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	441a      	add	r2, r3
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	68ba      	ldr	r2, [r7, #8]
 80113c4:	441a      	add	r2, r3
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d118      	bne.n	8011400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681a      	ldr	r2, [r3, #0]
 80113d2:	4b15      	ldr	r3, [pc, #84]	; (8011428 <prvInsertBlockIntoFreeList+0xb0>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d00d      	beq.n	80113f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	685a      	ldr	r2, [r3, #4]
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	441a      	add	r2, r3
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	601a      	str	r2, [r3, #0]
 80113f4:	e008      	b.n	8011408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80113f6:	4b0c      	ldr	r3, [pc, #48]	; (8011428 <prvInsertBlockIntoFreeList+0xb0>)
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	e003      	b.n	8011408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011408:	68fa      	ldr	r2, [r7, #12]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	429a      	cmp	r2, r3
 801140e:	d002      	beq.n	8011416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011416:	bf00      	nop
 8011418:	3714      	adds	r7, #20
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr
 8011422:	bf00      	nop
 8011424:	24005ef0 	.word	0x24005ef0
 8011428:	24005ef8 	.word	0x24005ef8

0801142c <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f7ff fe0f 	bl	8011058 <pvPortMalloc>
 801143a:	4603      	mov	r3, r0
}
 801143c:	4618      	mov	r0, r3
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f7ff fecf 	bl	80111f0 <vPortFree>
}
 8011452:	bf00      	nop
 8011454:	3708      	adds	r7, #8
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
	...

0801145c <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
 801145c:	b480      	push	{r7}
 801145e:	b083      	sub	sp, #12
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	4a04      	ldr	r2, [pc, #16]	; (8011478 <_ZN6ThreadD1Ev+0x1c>)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	4618      	mov	r0, r3
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr
 8011478:	08018d14 	.word	0x08018d14

0801147c <_ZN6ThreadD0Ev>:
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f7ff ffe9 	bl	801145c <_ZN6ThreadD1Ev>
 801148a:	2110      	movs	r1, #16
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f004 f831 	bl	80154f4 <_ZdlPvj>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	4618      	mov	r0, r3
 8011496:	3708      	adds	r7, #8
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <_ZNSt8functionIFvhPvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7f0 f898 	bl	80015dc <_ZNSt14_Function_baseD1Ev>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4618      	mov	r0, r3
 80114b0:	3708      	adds	r7, #8
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
	...

080114b8 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
 80114b8:	b590      	push	{r4, r7, lr}
 80114ba:	b083      	sub	sp, #12
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	4a0d      	ldr	r2, [pc, #52]	; (80114f8 <_ZN10MessageBusD1Ev+0x40>)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	601a      	str	r2, [r3, #0]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f603 630c 	addw	r3, r3, #3596	; 0xe0c
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d00e      	beq.n	80114ee <_ZN10MessageBusD1Ev+0x36>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f603 630c 	addw	r3, r3, #3596	; 0xe0c
 80114d6:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f603 630c 	addw	r3, r3, #3596	; 0xe0c
 80114e0:	429c      	cmp	r4, r3
 80114e2:	d004      	beq.n	80114ee <_ZN10MessageBusD1Ev+0x36>
 80114e4:	3c10      	subs	r4, #16
 80114e6:	4620      	mov	r0, r4
 80114e8:	f7ff ffd8 	bl	801149c <_ZNSt8functionIFvhPvEED1Ev>
 80114ec:	e7f5      	b.n	80114da <_ZN10MessageBusD1Ev+0x22>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	4618      	mov	r0, r3
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd90      	pop	{r4, r7, pc}
 80114f8:	08018e34 	.word	0x08018e34

080114fc <_ZN10MessageBusD0Ev>:
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f7ff ffd7 	bl	80114b8 <_ZN10MessageBusD1Ev>
 801150a:	f241 310c 	movw	r1, #4876	; 0x130c
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f003 fff0 	bl	80154f4 <_ZdlPvj>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	4618      	mov	r0, r3
 8011518:	3708      	adds	r7, #8
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
	...

08011520 <_ZN10MessageBusC1Ev>:
class MessageBus {
 8011520:	b5b0      	push	{r4, r5, r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	4a0a      	ldr	r2, [pc, #40]	; (8011554 <_ZN10MessageBusC1Ev+0x34>)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f603 630c 	addw	r3, r3, #3596	; 0xe0c
 8011534:	243f      	movs	r4, #63	; 0x3f
 8011536:	461d      	mov	r5, r3
 8011538:	2c00      	cmp	r4, #0
 801153a:	db05      	blt.n	8011548 <_ZN10MessageBusC1Ev+0x28>
 801153c:	4628      	mov	r0, r5
 801153e:	f000 f95d 	bl	80117fc <_ZNSt8functionIFvhPvEEC1Ev>
 8011542:	3510      	adds	r5, #16
 8011544:	3c01      	subs	r4, #1
 8011546:	e7f7      	b.n	8011538 <_ZN10MessageBusC1Ev+0x18>
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	4618      	mov	r0, r3
 801154c:	3708      	adds	r7, #8
 801154e:	46bd      	mov	sp, r7
 8011550:	bdb0      	pop	{r4, r5, r7, pc}
 8011552:	bf00      	nop
 8011554:	08018e34 	.word	0x08018e34

08011558 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	683a      	ldr	r2, [r7, #0]
 8011566:	4611      	mov	r1, r2
 8011568:	4618      	mov	r0, r3
 801156a:	f000 f97d 	bl	8011868 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4618      	mov	r0, r3
 8011572:	3708      	adds	r7, #8
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}

08011578 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
 8011580:	6039      	str	r1, [r7, #0]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	e892 0003 	ldmia.w	r2, {r0, r1}
 801158a:	e883 0003 	stmia.w	r3, {r0, r1}
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f103 0208 	add.w	r2, r3, #8
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	3308      	adds	r3, #8
 8011598:	4619      	mov	r1, r3
 801159a:	4610      	mov	r0, r2
 801159c:	f7ff ffdc 	bl	8011558 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	4618      	mov	r0, r3
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <_ZNSt8functionIFvhPhmEED1Ev>:
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b082      	sub	sp, #8
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7f0 f811 	bl	80015dc <_ZNSt14_Function_baseD1Ev>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
 80115c4:	b590      	push	{r4, r7, lr}
 80115c6:	b091      	sub	sp, #68	; 0x44
 80115c8:	af02      	add	r7, sp, #8
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
 80115d0:	603b      	str	r3, [r7, #0]
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7ff ffa3 	bl	8011520 <_ZN10MessageBusC1Ev>
 80115da:	4a26      	ldr	r2, [pc, #152]	; (8011674 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	601a      	str	r2, [r3, #0]
	this->driver = driver;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115e6:	461a      	mov	r2, r3
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	f8c2 330c 	str.w	r3, [r2, #780]	; 0x30c
	this->packet_buffer = buffer;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115f4:	461a      	mov	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8c2 3310 	str.w	r3, [r2, #784]	; 0x310
	this->buffer_length = length;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011602:	461a      	mov	r2, r3
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
	this->buffer_index = 0;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011610:	2200      	movs	r2, #0
 8011612:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	3308      	adds	r3, #8
 801161c:	681c      	ldr	r4, [r3, #0]
 801161e:	4b16      	ldr	r3, [pc, #88]	; (8011678 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
 8011620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011622:	2300      	movs	r3, #0
 8011624:	633b      	str	r3, [r7, #48]	; 0x30
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	637b      	str	r3, [r7, #52]	; 0x34
 801162a:	f107 0020 	add.w	r0, r7, #32
 801162e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011632:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011636:	4b11      	ldr	r3, [pc, #68]	; (801167c <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	4b11      	ldr	r3, [pc, #68]	; (8011680 <_ZN5IOBusC1EP8IODriverPhm+0xbc>)
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	4b11      	ldr	r3, [pc, #68]	; (8011684 <_ZN5IOBusC1EP8IODriverPhm+0xc0>)
 8011640:	f000 f8e9 	bl	8011816 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
 8011644:	f107 0220 	add.w	r2, r7, #32
 8011648:	f107 0310 	add.w	r3, r7, #16
 801164c:	4611      	mov	r1, r2
 801164e:	4618      	mov	r0, r3
 8011650:	f000 f92e 	bl	80118b0 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
 8011654:	f107 0310 	add.w	r3, r7, #16
 8011658:	4619      	mov	r1, r3
 801165a:	68b8      	ldr	r0, [r7, #8]
 801165c:	47a0      	blx	r4
 801165e:	f107 0310 	add.w	r3, r7, #16
 8011662:	4618      	mov	r0, r3
 8011664:	f7ff ffa1 	bl	80115aa <_ZNSt8functionIFvhPhmEED1Ev>
}
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	4618      	mov	r0, r3
 801166c:	373c      	adds	r7, #60	; 0x3c
 801166e:	46bd      	mov	sp, r7
 8011670:	bd90      	pop	{r4, r7, pc}
 8011672:	bf00      	nop
 8011674:	08018d3c 	.word	0x08018d3c
 8011678:	080116cf 	.word	0x080116cf
 801167c:	080194f6 	.word	0x080194f6
 8011680:	080194f5 	.word	0x080194f5
 8011684:	080194f4 	.word	0x080194f4

08011688 <_ZN5IOBusD1Ev>:

IOBus::~IOBus(){}
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	4a05      	ldr	r2, [pc, #20]	; (80116a8 <_ZN5IOBusD1Ev+0x20>)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	601a      	str	r2, [r3, #0]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4618      	mov	r0, r3
 801169a:	f7ff ff0d 	bl	80114b8 <_ZN10MessageBusD1Ev>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	08018d3c 	.word	0x08018d3c

080116ac <_ZN5IOBusD0Ev>:
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f7ff ffe7 	bl	8011688 <_ZN5IOBusD1Ev>
 80116ba:	f241 311c 	movw	r1, #4892	; 0x131c
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f003 ff18 	bl	80154f4 <_ZdlPvj>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4618      	mov	r0, r3
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b084      	sub	sp, #16
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	60f8      	str	r0, [r7, #12]
 80116d6:	607a      	str	r2, [r7, #4]
 80116d8:	603b      	str	r3, [r7, #0]
 80116da:	460b      	mov	r3, r1
 80116dc:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116e4:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 80116e8:	683a      	ldr	r2, [r7, #0]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d91a      	bls.n	8011724 <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
 80116ee:	68f8      	ldr	r0, [r7, #12]
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80116f6:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 80116fa:	7af9      	ldrb	r1, [r7, #11]
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	f002 fb09 	bl	8013d14 <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011708:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 801170c:	683a      	ldr	r2, [r7, #0]
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011718:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	4413      	add	r3, r2
 8011720:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
 8011722:	e7dc      	b.n	80116de <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
 8011724:	68f8      	ldr	r0, [r7, #12]
 8011726:	7af9      	ldrb	r1, [r7, #11]
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	f002 faf2 	bl	8013d14 <_ZN10MessageBus7receiveEhPhm>
}
 8011730:	bf00      	nop
 8011732:	3710      	adds	r7, #16
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <_ZN5IOBus6appendEPhm>:

uint8_t IOBus::append(uint8_t* buffer, uint32_t length) {
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801174a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011754:	f892 2318 	ldrb.w	r2, [r2, #792]	; 0x318
 8011758:	1a9b      	subs	r3, r3, r2
 801175a:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	429a      	cmp	r2, r3
 8011762:	d901      	bls.n	8011768 <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801176e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011778:	f892 2318 	ldrb.w	r2, [r2, #792]	; 0x318
 801177c:	4413      	add	r3, r2
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	68b9      	ldr	r1, [r7, #8]
 8011782:	4618      	mov	r0, r3
 8011784:	f004 fc02 	bl	8015f8c <memcpy>

	buffer_index += length;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801178e:	f893 2318 	ldrb.w	r2, [r3, #792]	; 0x318
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	b2db      	uxtb	r3, r3
 8011796:	4413      	add	r3, r2
 8011798:	b2da      	uxtb	r2, r3
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117a0:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318


	return length;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	b2db      	uxtb	r3, r3
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	3718      	adds	r7, #24
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117be:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117c8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	330c      	adds	r3, #12
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80117d8:	f8d2 1310 	ldr.w	r1, [r2, #784]	; 0x310
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80117e2:	f892 2318 	ldrb.w	r2, [r2, #792]	; 0x318
 80117e6:	4798      	blx	r3
	buffer_index = 0;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117ee:	2200      	movs	r2, #0
 80117f0:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
}
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <_ZNSt8functionIFvhPvEEC1Ev>:
      function() noexcept
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4618      	mov	r0, r3
 8011808:	f7ef feda 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	4618      	mov	r0, r3
 8011810:	3708      	adds	r7, #8
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}

08011816 <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8011816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801181a:	b086      	sub	sp, #24
 801181c:	af02      	add	r7, sp, #8
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	607a      	str	r2, [r7, #4]
 8011824:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8011826:	68b8      	ldr	r0, [r7, #8]
 8011828:	f000 f86a 	bl	8011900 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
 801182c:	4605      	mov	r5, r0
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 f871 	bl	8011916 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8011834:	4606      	mov	r6, r0
 8011836:	6838      	ldr	r0, [r7, #0]
 8011838:	f000 f878 	bl	801192c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801183c:	4680      	mov	r8, r0
 801183e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011840:	f000 f87f 	bl	8011942 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011844:	4604      	mov	r4, r0
 8011846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011848:	f000 f886 	bl	8011958 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 801184c:	4603      	mov	r3, r0
 801184e:	9301      	str	r3, [sp, #4]
 8011850:	9400      	str	r4, [sp, #0]
 8011852:	4643      	mov	r3, r8
 8011854:	4632      	mov	r2, r6
 8011856:	4629      	mov	r1, r5
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f000 f888 	bl	801196e <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	3710      	adds	r7, #16
 8011862:	46bd      	mov	sp, r7
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011868 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8011868:	b590      	push	{r4, r7, lr}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
 8011870:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 8011872:	6838      	ldr	r0, [r7, #0]
 8011874:	f000 f8ac 	bl	80119d0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
 8011878:	4603      	mov	r3, r0
 801187a:	4618      	mov	r0, r3
 801187c:	f000 f8b3 	bl	80119e6 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8011880:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 8011882:	4619      	mov	r1, r3
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f000 f8c6 	bl	8011a16 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
 801188a:	687c      	ldr	r4, [r7, #4]
 801188c:	6838      	ldr	r0, [r7, #0]
 801188e:	f000 f8b5 	bl	80119fc <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 8011892:	4603      	mov	r3, r0
 8011894:	4618      	mov	r0, r3
 8011896:	f000 f83e 	bl	8011916 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801189a:	4603      	mov	r3, r0
 801189c:	4619      	mov	r1, r3
 801189e:	4620      	mov	r0, r4
 80118a0:	f000 f8db 	bl	8011a5a <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	4618      	mov	r0, r3
 80118a8:	370c      	adds	r7, #12
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd90      	pop	{r4, r7, pc}
	...

080118b0 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:
      function<_Res(_ArgTypes...)>::
 80118b0:	b590      	push	{r4, r7, lr}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4618      	mov	r0, r3
 80118be:	f7ef fe7f 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80118c2:	6838      	ldr	r0, [r7, #0]
 80118c4:	f000 f8da 	bl	8011a7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00e      	beq.n	80118ec <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80118ce:	687c      	ldr	r4, [r7, #4]
 80118d0:	6838      	ldr	r0, [r7, #0]
 80118d2:	f000 f8de 	bl	8011a92 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 80118d6:	4603      	mov	r3, r0
 80118d8:	4619      	mov	r1, r3
 80118da:	4620      	mov	r0, r4
 80118dc:	f000 f8e4 	bl	8011aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a05      	ldr	r2, [pc, #20]	; (80118f8 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
 80118e4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4a04      	ldr	r2, [pc, #16]	; (80118fc <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
 80118ea:	609a      	str	r2, [r3, #8]
      }
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	4618      	mov	r0, r3
 80118f0:	370c      	adds	r7, #12
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd90      	pop	{r4, r7, pc}
 80118f6:	bf00      	nop
 80118f8:	08011acd 	.word	0x08011acd
 80118fc:	08011b0d 	.word	0x08011b0d

08011900 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	4618      	mov	r0, r3
 801190c:	370c      	adds	r7, #12
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr

08011916 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011916:	b480      	push	{r7}
 8011918:	b083      	sub	sp, #12
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	4618      	mov	r0, r3
 8011922:	370c      	adds	r7, #12
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr

0801192c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4618      	mov	r0, r3
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011942:	b480      	push	{r7}
 8011944:	b083      	sub	sp, #12
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4618      	mov	r0, r3
 801194e:	370c      	adds	r7, #12
 8011950:	46bd      	mov	sp, r7
 8011952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011956:	4770      	bx	lr

08011958 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4618      	mov	r0, r3
 8011964:	370c      	adds	r7, #12
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr

0801196e <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
 801196e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011972:	b086      	sub	sp, #24
 8011974:	af02      	add	r7, sp, #8
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	607a      	str	r2, [r7, #4]
 801197c:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 801197e:	68b8      	ldr	r0, [r7, #8]
 8011980:	f000 f8f0 	bl	8011b64 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
 8011984:	4602      	mov	r2, r0
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	e892 0003 	ldmia.w	r2, {r0, r1}
 801198c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f103 0408 	add.w	r4, r3, #8
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f7ff ffbd 	bl	8011916 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 801199c:	4605      	mov	r5, r0
 801199e:	6838      	ldr	r0, [r7, #0]
 80119a0:	f7ff ffc4 	bl	801192c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 80119a4:	4606      	mov	r6, r0
 80119a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119a8:	f7ff ffcb 	bl	8011942 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 80119ac:	4680      	mov	r8, r0
 80119ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80119b0:	f7ff ffd2 	bl	8011958 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 80119b4:	4603      	mov	r3, r0
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	4643      	mov	r3, r8
 80119ba:	4632      	mov	r2, r6
 80119bc:	4629      	mov	r1, r5
 80119be:	4620      	mov	r0, r4
 80119c0:	f000 f8db 	bl	8011b7a <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1ELb1EEEDpOT_>
	{ }
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	4618      	mov	r0, r3
 80119c8:	3710      	adds	r7, #16
 80119ca:	46bd      	mov	sp, r7
 80119cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119d0 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 80119d0:	b480      	push	{r7}
 80119d2:	b083      	sub	sp, #12
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	4618      	mov	r0, r3
 80119dc:	370c      	adds	r7, #12
 80119de:	46bd      	mov	sp, r7
 80119e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e4:	4770      	bx	lr

080119e6 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80119e6:	b480      	push	{r7}
 80119e8:	b083      	sub	sp, #12
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	4618      	mov	r0, r3
 80119f2:	370c      	adds	r7, #12
 80119f4:	46bd      	mov	sp, r7
 80119f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fa:	4770      	bx	lr

080119fc <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f000 f8dd 	bl	8011bc6 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b082      	sub	sp, #8
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
 8011a1e:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 8011a20:	6838      	ldr	r0, [r7, #0]
 8011a22:	f000 f8db 	bl	8011bdc <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
 8011a26:	4603      	mov	r3, r0
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f000 f8e2 	bl	8011bf2 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 8011a2e:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 8011a30:	4619      	mov	r1, r3
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 f8ff 	bl	8011c36 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
 8011a38:	6838      	ldr	r0, [r7, #0]
 8011a3a:	f000 f8e5 	bl	8011c08 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	4618      	mov	r0, r3
 8011a42:	f000 f8ed 	bl	8011c20 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a46:	4603      	mov	r3, r0
 8011a48:	4619      	mov	r1, r3
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f000 f915 	bl	8011c7a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	4618      	mov	r0, r3
 8011a54:	3708      	adds	r7, #8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b082      	sub	sp, #8
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
 8011a62:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8011a64:	6838      	ldr	r0, [r7, #0]
 8011a66:	f7ff ff56 	bl	8011916 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	601a      	str	r2, [r3, #0]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	4618      	mov	r0, r3
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
	  { return true; }
 8011a84:	2301      	movs	r3, #1
 8011a86:	4618      	mov	r0, r3
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr

08011a92 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
 8011a92:	b480      	push	{r7}
 8011a94:	b083      	sub	sp, #12
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8011aa8:	b590      	push	{r4, r7, lr}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8011ab2:	6838      	ldr	r0, [r7, #0]
 8011ab4:	f7ff ffed 	bl	8011a92 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	4622      	mov	r2, r4
 8011abc:	4619      	mov	r1, r3
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f000 f8e8 	bl	8011c94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
 8011ac4:	bf00      	nop
 8011ac6:	370c      	adds	r7, #12
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd90      	pop	{r4, r7, pc}

08011acc <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8011acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ace:	b085      	sub	sp, #20
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	607a      	str	r2, [r7, #4]
 8011ad8:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011ada:	68f8      	ldr	r0, [r7, #12]
 8011adc:	f000 f8f6 	bl	8011ccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 8011ae0:	4604      	mov	r4, r0
 8011ae2:	68b8      	ldr	r0, [r7, #8]
 8011ae4:	f7f0 f86e 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011ae8:	4605      	mov	r5, r0
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 f8fb 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8011af0:	4606      	mov	r6, r0
 8011af2:	6838      	ldr	r0, [r7, #0]
 8011af4:	f000 f902 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8011af8:	4603      	mov	r3, r0
 8011afa:	4632      	mov	r2, r6
 8011afc:	4629      	mov	r1, r5
 8011afe:	4620      	mov	r0, r4
 8011b00:	f000 f907 	bl	8011d12 <_ZSt10__invoke_rIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESG_E4typeEOSJ_DpOSK_>
				     std::forward<_ArgTypes>(__args)...);
 8011b04:	bf00      	nop
      }
 8011b06:	3714      	adds	r7, #20
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b0c <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011b0c:	b590      	push	{r4, r7, lr}
 8011b0e:	b085      	sub	sp, #20
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	4613      	mov	r3, r2
 8011b18:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011b1a:	79fb      	ldrb	r3, [r7, #7]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d002      	beq.n	8011b26 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
 8011b20:	2b01      	cmp	r3, #1
 8011b22:	d007      	beq.n	8011b34 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x28>
 8011b24:	e010      	b.n	8011b48 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f7f0 f87d 	bl	8001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	4a0c      	ldr	r2, [pc, #48]	; (8011b60 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x54>)
 8011b30:	601a      	str	r2, [r3, #0]
	    break;
 8011b32:	e00f      	b.n	8011b54 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011b34:	68f8      	ldr	r0, [r7, #12]
 8011b36:	f000 f910 	bl	8011d5a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	68b8      	ldr	r0, [r7, #8]
 8011b3e:	f000 f8c5 	bl	8011ccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 8011b42:	4603      	mov	r3, r0
 8011b44:	6023      	str	r3, [r4, #0]
	    break;
 8011b46:	e005      	b.n	8011b54 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8011b48:	79fb      	ldrb	r3, [r7, #7]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	68b9      	ldr	r1, [r7, #8]
 8011b4e:	68f8      	ldr	r0, [r7, #12]
 8011b50:	f000 f910 	bl	8011d74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>
	return false;
 8011b54:	2300      	movs	r3, #0
      }
 8011b56:	4618      	mov	r0, r3
 8011b58:	3714      	adds	r7, #20
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd90      	pop	{r4, r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	08018d54 	.word	0x08018d54

08011b64 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8011b64:	b480      	push	{r7}
 8011b66:	b083      	sub	sp, #12
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	4618      	mov	r0, r3
 8011b70:	370c      	adds	r7, #12
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr

08011b7a <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8011b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b7e:	b086      	sub	sp, #24
 8011b80:	af02      	add	r7, sp, #8
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
 8011b88:	603b      	str	r3, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8011b8a:	68fc      	ldr	r4, [r7, #12]
 8011b8c:	68b8      	ldr	r0, [r7, #8]
 8011b8e:	f7ff fec2 	bl	8011916 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8011b92:	4605      	mov	r5, r0
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7ff fec9 	bl	801192c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011b9a:	4606      	mov	r6, r0
 8011b9c:	6838      	ldr	r0, [r7, #0]
 8011b9e:	f7ff fed0 	bl	8011942 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011ba2:	4680      	mov	r8, r0
 8011ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ba6:	f7ff fed7 	bl	8011958 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011baa:	4603      	mov	r3, r0
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	4643      	mov	r3, r8
 8011bb0:	4632      	mov	r2, r6
 8011bb2:	4629      	mov	r1, r5
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f000 f917 	bl	8011de8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3710      	adds	r7, #16
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011bc6 <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011bc6:	b480      	push	{r7}
 8011bc8:	b083      	sub	sp, #12
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	4618      	mov	r0, r3
 8011be8:	370c      	adds	r7, #12
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr

08011bf2 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8011bf2:	b480      	push	{r7}
 8011bf4:	b083      	sub	sp, #12
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f000 f90f 	bl	8011e34 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 8011c16:	4603      	mov	r3, r0
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3708      	adds	r7, #8
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011c20:	b480      	push	{r7}
 8011c22:	b083      	sub	sp, #12
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	370c      	adds	r7, #12
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr

08011c36 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8011c36:	b580      	push	{r7, lr}
 8011c38:	b082      	sub	sp, #8
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
 8011c3e:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 8011c40:	6838      	ldr	r0, [r7, #0]
 8011c42:	f000 f902 	bl	8011e4a <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
 8011c46:	4603      	mov	r3, r0
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f000 f909 	bl	8011e60 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 8011c4e:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 8011c50:	4619      	mov	r1, r3
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f000 f926 	bl	8011ea4 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
 8011c58:	6838      	ldr	r0, [r7, #0]
 8011c5a:	f000 f90c 	bl	8011e76 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	4618      	mov	r0, r3
 8011c62:	f000 f914 	bl	8011e8e <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011c66:	4603      	mov	r3, r0
 8011c68:	4619      	mov	r1, r3
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f000 f930 	bl	8011ed0 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	4618      	mov	r0, r3
 8011c74:	3708      	adds	r7, #8
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}

08011c7a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b082      	sub	sp, #8
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
 8011c82:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 8011c84:	6838      	ldr	r0, [r7, #0]
 8011c86:	f7ff ffcb 	bl	8011c20 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3708      	adds	r7, #8
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 8011c94:	b5b0      	push	{r4, r5, r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8011ca0:	68b8      	ldr	r0, [r7, #8]
 8011ca2:	f7ff fef6 	bl	8011a92 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
 8011ca6:	4605      	mov	r5, r0
 8011ca8:	200c      	movs	r0, #12
 8011caa:	f7ff fbbf 	bl	801142c <_Znwj>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	461c      	mov	r4, r3
 8011cb2:	4629      	mov	r1, r5
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f7ff fc5f 	bl	8011578 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f000 f84d 	bl	8011d5a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	601c      	str	r4, [r3, #0]
 8011cc4:	bf00      	nop
 8011cc6:	3710      	adds	r7, #16
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bdb0      	pop	{r4, r5, r7, pc}

08011ccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f000 f908 	bl	8011eea <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	681b      	ldr	r3, [r3, #0]
	}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3708      	adds	r7, #8
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011ce6:	b480      	push	{r7}
 8011ce8:	b083      	sub	sp, #12
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	370c      	adds	r7, #12
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	4618      	mov	r0, r3
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr

08011d12 <_ZSt10__invoke_rIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESG_E4typeEOSJ_DpOSK_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d16:	b086      	sub	sp, #24
 8011d18:	af02      	add	r7, sp, #8
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
 8011d20:	603b      	str	r3, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011d22:	68f8      	ldr	r0, [r7, #12]
 8011d24:	f000 f8ed 	bl	8011f02 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>
 8011d28:	4604      	mov	r4, r0
 8011d2a:	68b8      	ldr	r0, [r7, #8]
 8011d2c:	f7ef ff4a 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011d30:	4605      	mov	r5, r0
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f7ff ffd7 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8011d38:	4606      	mov	r6, r0
 8011d3a:	6838      	ldr	r0, [r7, #0]
 8011d3c:	f7ff ffde 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8011d40:	4603      	mov	r3, r0
 8011d42:	9300      	str	r3, [sp, #0]
 8011d44:	4633      	mov	r3, r6
 8011d46:	462a      	mov	r2, r5
 8011d48:	4621      	mov	r1, r4
 8011d4a:	4640      	mov	r0, r8
 8011d4c:	f000 f8e4 	bl	8011f18 <_ZSt13__invoke_implIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011d50:	bf00      	nop
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d5a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b082      	sub	sp, #8
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7ef fc16 	bl	8001594 <_ZNSt9_Any_data9_M_accessEv>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3708      	adds	r7, #8
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
	...

08011d74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011d74:	b5b0      	push	{r4, r5, r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	4613      	mov	r3, r2
 8011d80:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011d82:	79fb      	ldrb	r3, [r7, #7]
 8011d84:	2b03      	cmp	r3, #3
 8011d86:	d827      	bhi.n	8011dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
 8011d88:	a201      	add	r2, pc, #4	; (adr r2, 8011d90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
 8011d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d8e:	bf00      	nop
 8011d90:	08011da1 	.word	0x08011da1
 8011d94:	08011daf 	.word	0x08011daf
 8011d98:	08011dc3 	.word	0x08011dc3
 8011d9c:	08011dcf 	.word	0x08011dcf
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	f7ef ff40 	bl	8001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8011da6:	4603      	mov	r3, r0
 8011da8:	4a0e      	ldr	r2, [pc, #56]	; (8011de4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
 8011daa:	601a      	str	r2, [r3, #0]
	      break;
 8011dac:	e014      	b.n	8011dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f7ff ffd3 	bl	8011d5a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 8011db4:	4604      	mov	r4, r0
 8011db6:	68b8      	ldr	r0, [r7, #8]
 8011db8:	f7ff ff88 	bl	8011ccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	6023      	str	r3, [r4, #0]
	      break;
 8011dc0:	e00a      	b.n	8011dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 8011dc2:	462a      	mov	r2, r5
 8011dc4:	68b9      	ldr	r1, [r7, #8]
 8011dc6:	68f8      	ldr	r0, [r7, #12]
 8011dc8:	f000 f8c6 	bl	8011f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
 8011dcc:	e004      	b.n	8011dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 8011dce:	4621      	mov	r1, r4
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f000 f8df 	bl	8011f94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8011dd6:	bf00      	nop
	  return false;
 8011dd8:	2300      	movs	r3, #0
	}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bdb0      	pop	{r4, r5, r7, pc}
 8011de2:	bf00      	nop
 8011de4:	08018d54 	.word	0x08018d54

08011de8 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8011de8:	b5b0      	push	{r4, r5, r7, lr}
 8011dea:	b084      	sub	sp, #16
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
 8011df4:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f7ff fd98 	bl	801192c <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	6838      	ldr	r0, [r7, #0]
 8011e00:	f7ff fd9f 	bl	8011942 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011e04:	4605      	mov	r5, r0
 8011e06:	6a38      	ldr	r0, [r7, #32]
 8011e08:	f7ff fda6 	bl	8011958 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	462a      	mov	r2, r5
 8011e10:	4621      	mov	r1, r4
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f000 f8d2 	bl	8011fbc <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
 8011e18:	68fc      	ldr	r4, [r7, #12]
 8011e1a:	68b8      	ldr	r0, [r7, #8]
 8011e1c:	f7ff fd7b 	bl	8011916 <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
 8011e20:	4603      	mov	r3, r0
 8011e22:	4619      	mov	r1, r3
 8011e24:	4620      	mov	r0, r4
 8011e26:	f7ff fe18 	bl	8011a5a <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	3710      	adds	r7, #16
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bdb0      	pop	{r4, r5, r7, pc}

08011e34 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8011e34:	b480      	push	{r7}
 8011e36:	b083      	sub	sp, #12
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	370c      	adds	r7, #12
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr

08011e4a <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 8011e4a:	b480      	push	{r7}
 8011e4c:	b083      	sub	sp, #12
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4618      	mov	r0, r3
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8011e60:	b480      	push	{r7}
 8011e62:	b083      	sub	sp, #12
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	370c      	adds	r7, #12
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e74:	4770      	bx	lr

08011e76 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b082      	sub	sp, #8
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f000 f8b1 	bl	8011fe6 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 8011e84:	4603      	mov	r3, r0
 8011e86:	4618      	mov	r0, r3
 8011e88:	3708      	adds	r7, #8
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}

08011e8e <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011e8e:	b480      	push	{r7}
 8011e90:	b083      	sub	sp, #12
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8011eae:	6838      	ldr	r0, [r7, #0]
 8011eb0:	f000 f8a4 	bl	8011ffc <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 f8ac 	bl	8012014 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f000 f8b2 	bl	801202a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3708      	adds	r7, #8
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 8011eda:	6838      	ldr	r0, [r7, #0]
 8011edc:	f7ff ffd7 	bl	8011e8e <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3708      	adds	r7, #8
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}

08011eea <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b082      	sub	sp, #8
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f7ef fb59 	bl	80015aa <_ZNKSt9_Any_data9_M_accessEv>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	4618      	mov	r0, r3
 8011efc:	3708      	adds	r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011f02:	b480      	push	{r7}
 8011f04:	b083      	sub	sp, #12
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	370c      	adds	r7, #12
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <_ZSt13__invoke_implIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8011f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f1a:	b085      	sub	sp, #20
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	7338      	strb	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	607a      	str	r2, [r7, #4]
 8011f24:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8011f26:	68b8      	ldr	r0, [r7, #8]
 8011f28:	f7ff ffeb 	bl	8011f02 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f7ef fe48 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011f34:	4605      	mov	r5, r0
 8011f36:	6838      	ldr	r0, [r7, #0]
 8011f38:	f7ff fed5 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8011f3c:	4606      	mov	r6, r0
 8011f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f40:	f7ff fedc 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8011f44:	4603      	mov	r3, r0
 8011f46:	4632      	mov	r2, r6
 8011f48:	4629      	mov	r1, r5
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	f000 f87a 	bl	8012044 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
 8011f50:	bf00      	nop
 8011f52:	3714      	adds	r7, #20
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 8011f58:	b5b0      	push	{r4, r5, r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011f64:	68b8      	ldr	r0, [r7, #8]
 8011f66:	f000 f891 	bl	801208c <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
 8011f6a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 8011f6c:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8011f6e:	200c      	movs	r0, #12
 8011f70:	f7ff fa5c 	bl	801142c <_Znwj>
 8011f74:	4603      	mov	r3, r0
 8011f76:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 8011f78:	4623      	mov	r3, r4
 8011f7a:	462a      	mov	r2, r5
 8011f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8011f7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	f7ff fee9 	bl	8011d5a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	601c      	str	r4, [r3, #0]
	}
 8011f8c:	bf00      	nop
 8011f8e:	3710      	adds	r7, #16
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bdb0      	pop	{r4, r5, r7, pc}

08011f94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f7ff fedb 	bl	8011d5a <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d003      	beq.n	8011fb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 8011fac:	210c      	movs	r1, #12
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f003 faa0 	bl	80154f4 <_ZdlPvj>
	}
 8011fb4:	bf00      	nop
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
 8011fc8:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 8011fca:	683a      	ldr	r2, [r7, #0]
 8011fcc:	6879      	ldr	r1, [r7, #4]
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	f000 f868 	bl	80120a4 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
 8011fd4:	68b9      	ldr	r1, [r7, #8]
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f000 f877 	bl	80120ca <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3710      	adds	r7, #16
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}

08011fe6 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8011fe6:	b480      	push	{r7}
 8011fe8:	b083      	sub	sp, #12
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	370c      	adds	r7, #12
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr

08011ffc <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f000 f86c 	bl	80120e2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 801200a:	4603      	mov	r3, r0
 801200c:	4618      	mov	r0, r3
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	4618      	mov	r0, r3
 8012020:	370c      	adds	r7, #12
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr

0801202a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801202a:	b580      	push	{r7, lr}
 801202c:	b082      	sub	sp, #8
 801202e:	af00      	add	r7, sp, #0
 8012030:	6078      	str	r0, [r7, #4]
 8012032:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 8012034:	6838      	ldr	r0, [r7, #0]
 8012036:	f7ff ffed 	bl	8012014 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 8012044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012046:	b089      	sub	sp, #36	; 0x24
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	607a      	str	r2, [r7, #4]
 8012050:	603b      	str	r3, [r7, #0]
	  return this->__call<_Result>(
 8012052:	68b8      	ldr	r0, [r7, #8]
 8012054:	f7ef fdb6 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012058:	4604      	mov	r4, r0
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f7ff fe43 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8012060:	4605      	mov	r5, r0
 8012062:	6838      	ldr	r0, [r7, #0]
 8012064:	f7ff fe4a 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8012068:	4603      	mov	r3, r0
 801206a:	f107 0014 	add.w	r0, r7, #20
 801206e:	462a      	mov	r2, r5
 8012070:	4621      	mov	r1, r4
 8012072:	f000 f841 	bl	80120f8 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
 8012076:	f107 0314 	add.w	r3, r7, #20
 801207a:	4632      	mov	r2, r6
 801207c:	4619      	mov	r1, r3
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f000 f856 	bl	8012130 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	      _Bound_indexes());
 8012084:	bf00      	nop
	}
 8012086:	3724      	adds	r7, #36	; 0x24
 8012088:	46bd      	mov	sp, r7
 801208a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801208c <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ef fa88 	bl	80015aa <_ZNKSt9_Any_data9_M_accessEv>
 801209a:	4603      	mov	r3, r0
 801209c:	4618      	mov	r0, r3
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b084      	sub	sp, #16
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 80120b0:	6879      	ldr	r1, [r7, #4]
 80120b2:	68f8      	ldr	r0, [r7, #12]
 80120b4:	f000 f884 	bl	80121c0 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
 80120b8:	68b9      	ldr	r1, [r7, #8]
 80120ba:	68f8      	ldr	r0, [r7, #12]
 80120bc:	f000 f88e 	bl	80121dc <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	4618      	mov	r0, r3
 80120c4:	3710      	adds	r7, #16
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}

080120ca <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 80120ca:	b480      	push	{r7}
 80120cc:	b083      	sub	sp, #12
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
 80120d2:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	4618      	mov	r0, r3
 80120d8:	370c      	adds	r7, #12
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 80120e2:	b480      	push	{r7}
 80120e4:	b083      	sub	sp, #12
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 80120f8:	b5b0      	push	{r4, r5, r7, lr}
 80120fa:	b084      	sub	sp, #16
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	60f8      	str	r0, [r7, #12]
 8012100:	60b9      	str	r1, [r7, #8]
 8012102:	607a      	str	r2, [r7, #4]
 8012104:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8012106:	68b8      	ldr	r0, [r7, #8]
 8012108:	f7ef fd5c 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801210c:	4604      	mov	r4, r0
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff fde9 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8012114:	4605      	mov	r5, r0
 8012116:	6838      	ldr	r0, [r7, #0]
 8012118:	f7ff fdf0 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801211c:	4603      	mov	r3, r0
 801211e:	462a      	mov	r2, r5
 8012120:	4621      	mov	r1, r4
 8012122:	68f8      	ldr	r0, [r7, #12]
 8012124:	f000 f866 	bl	80121f4 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1ELb1EEEDpOT_>
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	3710      	adds	r7, #16
 801212c:	46bd      	mov	sp, r7
 801212e:	bdb0      	pop	{r4, r5, r7, pc}

08012130 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8012130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012134:	b08a      	sub	sp, #40	; 0x28
 8012136:	af02      	add	r7, sp, #8
 8012138:	60f8      	str	r0, [r7, #12]
 801213a:	60b9      	str	r1, [r7, #8]
 801213c:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 801213e:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	3308      	adds	r3, #8
 8012144:	4618      	mov	r0, r3
 8012146:	f000 f873 	bl	8012230 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801214a:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801214c:	f107 0310 	add.w	r3, r7, #16
 8012150:	68ba      	ldr	r2, [r7, #8]
 8012152:	4618      	mov	r0, r3
 8012154:	f000 f879 	bl	801224a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
 8012158:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	3308      	adds	r3, #8
 801215e:	4618      	mov	r0, r3
 8012160:	f000 f881 	bl	8012266 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8012164:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8012166:	f107 0314 	add.w	r3, r7, #20
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	4618      	mov	r0, r3
 801216e:	f000 f886 	bl	801227e <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
 8012172:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	3308      	adds	r3, #8
 8012178:	4618      	mov	r0, r3
 801217a:	f000 f892 	bl	80122a2 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 801217e:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 8012180:	f107 0318 	add.w	r3, r7, #24
 8012184:	68ba      	ldr	r2, [r7, #8]
 8012186:	4618      	mov	r0, r3
 8012188:	f000 f897 	bl	80122ba <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
 801218c:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	3308      	adds	r3, #8
 8012192:	4618      	mov	r0, r3
 8012194:	f000 f8a3 	bl	80122de <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8012198:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 801219a:	f107 031c 	add.w	r3, r7, #28
 801219e:	68ba      	ldr	r2, [r7, #8]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f000 f8a8 	bl	80122f6 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
 80121a6:	4603      	mov	r3, r0
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	4643      	mov	r3, r8
 80121ac:	4632      	mov	r2, r6
 80121ae:	4629      	mov	r1, r5
 80121b0:	4620      	mov	r0, r4
 80121b2:	f000 f8b2 	bl	801231a <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
 80121b6:	bf00      	nop
	}
 80121b8:	3720      	adds	r7, #32
 80121ba:	46bd      	mov	sp, r7
 80121bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121c0 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80121ca:	6839      	ldr	r1, [r7, #0]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 f8cd 	bl	801236c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	4618      	mov	r0, r3
 80121d6:	3708      	adds	r7, #8
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}

080121dc <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	4618      	mov	r0, r3
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 80121f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	60f8      	str	r0, [r7, #12]
 80121fc:	60b9      	str	r1, [r7, #8]
 80121fe:	607a      	str	r2, [r7, #4]
 8012200:	603b      	str	r3, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8012202:	68fc      	ldr	r4, [r7, #12]
 8012204:	68b8      	ldr	r0, [r7, #8]
 8012206:	f7ef fcdd 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801220a:	4605      	mov	r5, r0
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff fd6a 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8012212:	4606      	mov	r6, r0
 8012214:	6838      	ldr	r0, [r7, #0]
 8012216:	f7ff fd71 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 801221a:	4603      	mov	r3, r0
 801221c:	4632      	mov	r2, r6
 801221e:	4629      	mov	r1, r5
 8012220:	4620      	mov	r0, r4
 8012222:	f000 f8af 	bl	8012384 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	4618      	mov	r0, r3
 801222a:	3714      	adds	r7, #20
 801222c:	46bd      	mov	sp, r7
 801222e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012230 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	4618      	mov	r0, r3
 801223c:	f000 f8f0 	bl	8012420 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8012240:	4603      	mov	r3, r0
 8012242:	4618      	mov	r0, r3
 8012244:	3708      	adds	r7, #8
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}

0801224a <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 801224a:	b580      	push	{r7, lr}
 801224c:	b084      	sub	sp, #16
 801224e:	af00      	add	r7, sp, #0
 8012250:	60f8      	str	r0, [r7, #12]
 8012252:	60b9      	str	r1, [r7, #8]
 8012254:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8012256:	68b8      	ldr	r0, [r7, #8]
 8012258:	f000 f8ee 	bl	8012438 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 801225c:	4603      	mov	r3, r0
 801225e:	4618      	mov	r0, r3
 8012260:	3710      	adds	r7, #16
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8012266:	b580      	push	{r7, lr}
 8012268:	b082      	sub	sp, #8
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 f8ed 	bl	801244e <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012274:	4603      	mov	r3, r0
 8012276:	4618      	mov	r0, r3
 8012278:	3708      	adds	r7, #8
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}

0801227e <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 801227e:	b580      	push	{r7, lr}
 8012280:	b084      	sub	sp, #16
 8012282:	af00      	add	r7, sp, #0
 8012284:	60f8      	str	r0, [r7, #12]
 8012286:	60b9      	str	r1, [r7, #8]
 8012288:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 f8eb 	bl	8012466 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 8012290:	4603      	mov	r3, r0
 8012292:	4618      	mov	r0, r3
 8012294:	f000 f8f2 	bl	801247c <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 8012298:	4603      	mov	r3, r0
	}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b082      	sub	sp, #8
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 f8f6 	bl	801249c <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80122b0:	4603      	mov	r3, r0
 80122b2:	4618      	mov	r0, r3
 80122b4:	3708      	adds	r7, #8
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b084      	sub	sp, #16
 80122be:	af00      	add	r7, sp, #0
 80122c0:	60f8      	str	r0, [r7, #12]
 80122c2:	60b9      	str	r1, [r7, #8]
 80122c4:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f8cd 	bl	8012466 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 80122cc:	4603      	mov	r3, r0
 80122ce:	4618      	mov	r0, r3
 80122d0:	f000 f8f0 	bl	80124b4 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 80122d4:	4603      	mov	r3, r0
	}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3710      	adds	r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80122de:	b580      	push	{r7, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 f8f4 	bl	80124d4 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80122ec:	4603      	mov	r3, r0
 80122ee:	4618      	mov	r0, r3
 80122f0:	3708      	adds	r7, #8
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b084      	sub	sp, #16
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	60f8      	str	r0, [r7, #12]
 80122fe:	60b9      	str	r1, [r7, #8]
 8012300:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 f8af 	bl	8012466 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
 8012308:	4603      	mov	r3, r0
 801230a:	4618      	mov	r0, r3
 801230c:	f000 f8ee 	bl	80124ec <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
 8012310:	4603      	mov	r3, r0
	}
 8012312:	4618      	mov	r0, r3
 8012314:	3710      	adds	r7, #16
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 801231a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801231e:	b087      	sub	sp, #28
 8012320:	af02      	add	r7, sp, #8
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
 8012328:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	f000 f8ee 	bl	801250c <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012330:	4605      	mov	r5, r0
 8012332:	68b8      	ldr	r0, [r7, #8]
 8012334:	f000 f880 	bl	8012438 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 8012338:	4606      	mov	r6, r0
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f7ef fc42 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012340:	4680      	mov	r8, r0
 8012342:	6838      	ldr	r0, [r7, #0]
 8012344:	f7ff fccf 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8012348:	4604      	mov	r4, r0
 801234a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801234c:	f7ff fcd6 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8012350:	4603      	mov	r3, r0
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	9400      	str	r4, [sp, #0]
 8012356:	4643      	mov	r3, r8
 8012358:	4632      	mov	r2, r6
 801235a:	4629      	mov	r1, r5
 801235c:	4648      	mov	r0, r9
 801235e:	f000 f8e0 	bl	8012522 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 8012362:	bf00      	nop
    }
 8012364:	3714      	adds	r7, #20
 8012366:	46bd      	mov	sp, r7
 8012368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801236c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 801236c:	b480      	push	{r7}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4618      	mov	r0, r3
 801237a:	370c      	adds	r7, #12
 801237c:	46bd      	mov	sp, r7
 801237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012382:	4770      	bx	lr

08012384 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012384:	b5b0      	push	{r4, r5, r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	607a      	str	r2, [r7, #4]
 8012390:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 8012392:	68fc      	ldr	r4, [r7, #12]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7ff fca6 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801239a:	4605      	mov	r5, r0
 801239c:	6838      	ldr	r0, [r7, #0]
 801239e:	f7ff fcad 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80123a2:	4603      	mov	r3, r0
 80123a4:	461a      	mov	r2, r3
 80123a6:	4629      	mov	r1, r5
 80123a8:	4620      	mov	r0, r4
 80123aa:	f000 f8f4 	bl	8012596 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f103 0408 	add.w	r4, r3, #8
 80123b4:	68b8      	ldr	r0, [r7, #8]
 80123b6:	f7ef fc05 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80123ba:	4603      	mov	r3, r0
 80123bc:	4619      	mov	r1, r3
 80123be:	4620      	mov	r0, r4
 80123c0:	f000 f81e 	bl	8012400 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	4618      	mov	r0, r3
 80123c8:	3710      	adds	r7, #16
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bdb0      	pop	{r4, r5, r7, pc}

080123ce <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80123ce:	b580      	push	{r7, lr}
 80123d0:	b082      	sub	sp, #8
 80123d2:	af00      	add	r7, sp, #0
 80123d4:	6078      	str	r0, [r7, #4]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3308      	adds	r3, #8
 80123da:	4618      	mov	r0, r3
 80123dc:	f000 f8f9 	bl	80125d2 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 80123e0:	4603      	mov	r3, r0
 80123e2:	4618      	mov	r0, r3
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}

080123ea <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80123ea:	b480      	push	{r7}
 80123ec:	b083      	sub	sp, #12
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	4618      	mov	r0, r3
 80123f6:	370c      	adds	r7, #12
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr

08012400 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801240a:	6838      	ldr	r0, [r7, #0]
 801240c:	f7ef fbda 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012410:	4602      	mov	r2, r0
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	601a      	str	r2, [r3, #0]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	4618      	mov	r0, r3
 801241a:	3708      	adds	r7, #8
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f7ff fae7 	bl	80119fc <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
 801242e:	4603      	mov	r3, r0
 8012430:	4618      	mov	r0, r3
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012438:	b480      	push	{r7}
 801243a:	b083      	sub	sp, #12
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	4618      	mov	r0, r3
 8012444:	370c      	adds	r7, #12
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr

0801244e <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801244e:	b580      	push	{r7, lr}
 8012450:	b082      	sub	sp, #8
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7ff fbd6 	bl	8011c08 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
 801245c:	4603      	mov	r3, r0
 801245e:	4618      	mov	r0, r3
 8012460:	3708      	adds	r7, #8
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8012466:	b480      	push	{r7}
 8012468:	b083      	sub	sp, #12
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4618      	mov	r0, r3
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f000 f8d9 	bl	801263c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801248a:	4603      	mov	r3, r0
 801248c:	4618      	mov	r0, r3
 801248e:	f7ff ffac 	bl	80123ea <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 8012492:	4603      	mov	r3, r0
    }
 8012494:	4618      	mov	r0, r3
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801249c:	b580      	push	{r7, lr}
 801249e:	b082      	sub	sp, #8
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7ff fce6 	bl	8011e76 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
 80124aa:	4603      	mov	r3, r0
 80124ac:	4618      	mov	r0, r3
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f000 f8ca 	bl	8012656 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80124c2:	4603      	mov	r3, r0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f000 f89e 	bl	8012606 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
 80124ca:	4603      	mov	r3, r0
    }
 80124cc:	4618      	mov	r0, r3
 80124ce:	3708      	adds	r7, #8
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7ff fd8d 	bl	8011ffc <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
 80124e2:	4603      	mov	r3, r0
 80124e4:	4618      	mov	r0, r3
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f000 f8bb 	bl	8012670 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80124fa:	4603      	mov	r3, r0
 80124fc:	4618      	mov	r0, r3
 80124fe:	f000 f8c4 	bl	801268a <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 8012502:	4603      	mov	r3, r0
    }
 8012504:	4618      	mov	r0, r3
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	4618      	mov	r0, r3
 8012518:	370c      	adds	r7, #12
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr

08012522 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 8012522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012524:	b087      	sub	sp, #28
 8012526:	af00      	add	r7, sp, #0
 8012528:	7538      	strb	r0, [r7, #20]
 801252a:	6139      	str	r1, [r7, #16]
 801252c:	60fa      	str	r2, [r7, #12]
 801252e:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7ff ff81 	bl	8012438 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
 8012536:	4603      	mov	r3, r0
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	693a      	ldr	r2, [r7, #16]
 801253c:	6852      	ldr	r2, [r2, #4]
 801253e:	1052      	asrs	r2, r2, #1
 8012540:	189d      	adds	r5, r3, r2
 8012542:	693a      	ldr	r2, [r7, #16]
 8012544:	6852      	ldr	r2, [r2, #4]
 8012546:	f002 0201 	and.w	r2, r2, #1
 801254a:	2a00      	cmp	r2, #0
 801254c:	d102      	bne.n	8012554 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	681c      	ldr	r4, [r3, #0]
 8012552:	e008      	b.n	8012566 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
 8012554:	693a      	ldr	r2, [r7, #16]
 8012556:	6852      	ldr	r2, [r2, #4]
 8012558:	1052      	asrs	r2, r2, #1
 801255a:	4413      	add	r3, r2
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	693a      	ldr	r2, [r7, #16]
 8012560:	6812      	ldr	r2, [r2, #0]
 8012562:	4413      	add	r3, r2
 8012564:	681c      	ldr	r4, [r3, #0]
 8012566:	68b8      	ldr	r0, [r7, #8]
 8012568:	f7ef fb2c 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801256c:	4603      	mov	r3, r0
 801256e:	781e      	ldrb	r6, [r3, #0]
 8012570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012572:	f7ff fbb8 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 8012576:	4603      	mov	r3, r0
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	607b      	str	r3, [r7, #4]
 801257c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801257e:	f7ff fbbd 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8012582:	4603      	mov	r3, r0
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	4631      	mov	r1, r6
 801258a:	4628      	mov	r0, r5
 801258c:	47a0      	blx	r4
 801258e:	bf00      	nop
    }
 8012590:	371c      	adds	r7, #28
 8012592:	46bd      	mov	sp, r7
 8012594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012596 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8012596:	b590      	push	{r4, r7, lr}
 8012598:	b085      	sub	sp, #20
 801259a:	af00      	add	r7, sp, #0
 801259c:	60f8      	str	r0, [r7, #12]
 801259e:	60b9      	str	r1, [r7, #8]
 80125a0:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80125a2:	68fc      	ldr	r4, [r7, #12]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff fba9 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80125aa:	4603      	mov	r3, r0
 80125ac:	4619      	mov	r1, r3
 80125ae:	4620      	mov	r0, r4
 80125b0:	f000 f876 	bl	80126a0 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	1d1c      	adds	r4, r3, #4
 80125b8:	68b8      	ldr	r0, [r7, #8]
 80125ba:	f7ff fb94 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 80125be:	4603      	mov	r3, r0
 80125c0:	4619      	mov	r1, r3
 80125c2:	4620      	mov	r0, r4
 80125c4:	f000 f82a 	bl	801261c <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	4618      	mov	r0, r3
 80125cc:	3714      	adds	r7, #20
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd90      	pop	{r4, r7, pc}

080125d2 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80125d2:	b480      	push	{r7}
 80125d4:	b083      	sub	sp, #12
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	4618      	mov	r0, r3
 80125e0:	370c      	adds	r7, #12
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr

080125ea <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80125ea:	b580      	push	{r7, lr}
 80125ec:	b082      	sub	sp, #8
 80125ee:	af00      	add	r7, sp, #0
 80125f0:	6078      	str	r0, [r7, #4]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	3304      	adds	r3, #4
 80125f6:	4618      	mov	r0, r3
 80125f8:	f000 f865 	bl	80126c6 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
 80125fc:	4603      	mov	r3, r0
 80125fe:	4618      	mov	r0, r3
 8012600:	3708      	adds	r7, #8
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012606:	b480      	push	{r7}
 8012608:	b083      	sub	sp, #12
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	4618      	mov	r0, r3
 8012612:	370c      	adds	r7, #12
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr

0801261c <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8012626:	6838      	ldr	r0, [r7, #0]
 8012628:	f7ff fb5d 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801262c:	4602      	mov	r2, r0
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	601a      	str	r2, [r3, #0]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	4618      	mov	r0, r3
 8012648:	f000 f866 	bl	8012718 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801264c:	4603      	mov	r3, r0
 801264e:	4618      	mov	r0, r3
 8012650:	3708      	adds	r7, #8
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}

08012656 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8012656:	b580      	push	{r7, lr}
 8012658:	b082      	sub	sp, #8
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4618      	mov	r0, r3
 8012662:	f000 f865 	bl	8012730 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8012666:	4603      	mov	r3, r0
 8012668:	4618      	mov	r0, r3
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4618      	mov	r0, r3
 801267c:	f000 f864 	bl	8012748 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 8012680:	4603      	mov	r3, r0
 8012682:	4618      	mov	r0, r3
 8012684:	3708      	adds	r7, #8
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801268a:	b480      	push	{r7}
 801268c:	b083      	sub	sp, #12
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	4618      	mov	r0, r3
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80126a0:	b590      	push	{r4, r7, lr}
 80126a2:	b083      	sub	sp, #12
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 80126aa:	687c      	ldr	r4, [r7, #4]
 80126ac:	6838      	ldr	r0, [r7, #0]
 80126ae:	f7ff fb25 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80126b2:	4603      	mov	r3, r0
 80126b4:	4619      	mov	r1, r3
 80126b6:	4620      	mov	r0, r4
 80126b8:	f000 f81e 	bl	80126f8 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	4618      	mov	r0, r3
 80126c0:	370c      	adds	r7, #12
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd90      	pop	{r4, r7, pc}

080126c6 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80126c6:	b480      	push	{r7}
 80126c8:	b083      	sub	sp, #12
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	4618      	mov	r0, r3
 80126d4:	370c      	adds	r7, #12
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr

080126de <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80126de:	b580      	push	{r7, lr}
 80126e0:	b082      	sub	sp, #8
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f000 f839 	bl	8012760 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
 80126ee:	4603      	mov	r3, r0
 80126f0:	4618      	mov	r0, r3
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8012702:	6838      	ldr	r0, [r7, #0]
 8012704:	f7ff fafa 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8012708:	4602      	mov	r2, r0
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	601a      	str	r2, [r3, #0]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	4618      	mov	r0, r3
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}

08012718 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7ff fe54 	bl	80123ce <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
 8012726:	4603      	mov	r3, r0
 8012728:	4618      	mov	r0, r3
 801272a:	3708      	adds	r7, #8
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7ff ff56 	bl	80125ea <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
 801273e:	4603      	mov	r3, r0
 8012740:	4618      	mov	r0, r3
 8012742:	3708      	adds	r7, #8
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f7ff ffc4 	bl	80126de <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
 8012756:	4603      	mov	r3, r0
 8012758:	4618      	mov	r0, r3
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4618      	mov	r0, r3
 801276e:	370c      	adds	r7, #12
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr

08012778 <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	2b2a      	cmp	r3, #42	; 0x2a
 8012788:	d103      	bne.n	8012792 <_ZNKSt9type_info4nameEv+0x1a>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	3301      	adds	r3, #1
 8012790:	e001      	b.n	8012796 <_ZNKSt9type_info4nameEv+0x1e>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	4618      	mov	r0, r3
 8012798:	370c      	adds	r7, #12
 801279a:	46bd      	mov	sp, r7
 801279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a0:	4770      	bx	lr
	...

080127a4 <_ZNKSt9type_info9hash_codeEv>:
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }
#endif

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
 80127a4:	b590      	push	{r4, r7, lr}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7ff ffe3 	bl	8012778 <_ZNKSt9type_info4nameEv>
 80127b2:	4604      	mov	r4, r0
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f7ff ffdf 	bl	8012778 <_ZNKSt9type_info4nameEv>
 80127ba:	4603      	mov	r3, r0
 80127bc:	4618      	mov	r0, r3
 80127be:	f7ed fd99 	bl	80002f4 <strlen>
 80127c2:	4603      	mov	r3, r0
 80127c4:	4a04      	ldr	r2, [pc, #16]	; (80127d8 <_ZNKSt9type_info9hash_codeEv+0x34>)
 80127c6:	4619      	mov	r1, r3
 80127c8:	4620      	mov	r0, r4
 80127ca:	f002 febb 	bl	8015544 <_ZSt11_Hash_bytesPKvjj>
 80127ce:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
 80127d0:	4618      	mov	r0, r3
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd90      	pop	{r4, r7, pc}
 80127d8:	c70f6907 	.word	0xc70f6907

080127dc <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	689b      	ldr	r3, [r3, #8]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	bf0c      	ite	eq
 80127ec:	2301      	moveq	r3, #1
 80127ee:	2300      	movne	r3, #0
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	4618      	mov	r0, r3
 80127f4:	370c      	adds	r7, #12
 80127f6:	46bd      	mov	sp, r7
 80127f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fc:	4770      	bx	lr
	...

08012800 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012800:	b580      	push	{r7, lr}
 8012802:	b086      	sub	sp, #24
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	460b      	mov	r3, r1
 801280a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801280c:	2304      	movs	r3, #4
 801280e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012810:	4829      	ldr	r0, [pc, #164]	; (80128b8 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0xb8>)
 8012812:	f7ff ffc7 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012816:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	b2db      	uxtb	r3, r3
 801281c:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801281e:	78fb      	ldrb	r3, [r7, #3]
 8012820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	00db      	lsls	r3, r3, #3
 8012828:	4413      	add	r3, r2
 801282a:	689b      	ldr	r3, [r3, #8]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d001      	beq.n	8012834 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012830:	2300      	movs	r3, #0
 8012832:	e03c      	b.n	80128ae <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0xae>
	}

	if(struct_size > max_packet_size) {
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	2bff      	cmp	r3, #255	; 0xff
 8012838:	d901      	bls.n	801283e <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x3e>
		return false; // Packet size too large
 801283a:	2300      	movs	r3, #0
 801283c:	e037      	b.n	80128ae <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0xae>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	3380      	adds	r3, #128	; 0x80
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	4413      	add	r3, r2
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d015      	beq.n	801287a <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	3380      	adds	r3, #128	; 0x80
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	4413      	add	r3, r2
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	68fa      	ldr	r2, [r7, #12]
 801285e:	429a      	cmp	r2, r3
 8012860:	d101      	bne.n	8012866 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x66>
			return false; // Packet type already defined
 8012862:	2300      	movs	r3, #0
 8012864:	e023      	b.n	80128ae <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0xae>
		}

		insertion_point++;
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	3301      	adds	r3, #1
 801286a:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012872:	d1e4      	bne.n	801283e <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x3e>
			insertion_point = 0;
 8012874:	2300      	movs	r3, #0
 8012876:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012878:	e7e1      	b.n	801283e <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh+0x3e>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801287a:	78fb      	ldrb	r3, [r7, #3]
 801287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012880:	00db      	lsls	r3, r3, #3
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4413      	add	r3, r2
 8012886:	3304      	adds	r3, #4
 8012888:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	78fa      	ldrb	r2, [r7, #3]
 801288e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	b2da      	uxtb	r2, r3
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	68fa      	ldr	r2, [r7, #12]
 801289c:	605a      	str	r2, [r3, #4]

	definitions_by_type[insertion_point] = def;
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	3380      	adds	r3, #128	; 0x80
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	4413      	add	r3, r2
 80128a8:	68ba      	ldr	r2, [r7, #8]
 80128aa:	605a      	str	r2, [r3, #4]

	return true;
 80128ac:	2301      	movs	r3, #1
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3718      	adds	r7, #24
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	08019210 	.word	0x08019210

080128bc <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80128bc:	b580      	push	{r7, lr}
 80128be:	b086      	sub	sp, #24
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80128c8:	2324      	movs	r3, #36	; 0x24
 80128ca:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80128cc:	4829      	ldr	r0, [pc, #164]	; (8012974 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0xb8>)
 80128ce:	f7ff ff69 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 80128d2:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80128da:	78fb      	ldrb	r3, [r7, #3]
 80128dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	00db      	lsls	r3, r3, #3
 80128e4:	4413      	add	r3, r2
 80128e6:	689b      	ldr	r3, [r3, #8]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d001      	beq.n	80128f0 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x34>
		return false; // Packet ID already in use
 80128ec:	2300      	movs	r3, #0
 80128ee:	e03c      	b.n	801296a <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	2bff      	cmp	r3, #255	; 0xff
 80128f4:	d901      	bls.n	80128fa <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x3e>
		return false; // Packet size too large
 80128f6:	2300      	movs	r3, #0
 80128f8:	e037      	b.n	801296a <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	3380      	adds	r3, #128	; 0x80
 8012900:	009b      	lsls	r3, r3, #2
 8012902:	4413      	add	r3, r2
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d015      	beq.n	8012936 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	3380      	adds	r3, #128	; 0x80
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	4413      	add	r3, r2
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	68fa      	ldr	r2, [r7, #12]
 801291a:	429a      	cmp	r2, r3
 801291c:	d101      	bne.n	8012922 <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x66>
			return false; // Packet type already defined
 801291e:	2300      	movs	r3, #0
 8012920:	e023      	b.n	801296a <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0xae>
		insertion_point++;
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	3301      	adds	r3, #1
 8012926:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801292e:	d1e4      	bne.n	80128fa <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x3e>
			insertion_point = 0;
 8012930:	2300      	movs	r3, #0
 8012932:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012934:	e7e1      	b.n	80128fa <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012936:	78fb      	ldrb	r3, [r7, #3]
 8012938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801293c:	00db      	lsls	r3, r3, #3
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	4413      	add	r3, r2
 8012942:	3304      	adds	r3, #4
 8012944:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	78fa      	ldrb	r2, [r7, #3]
 801294a:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	b2da      	uxtb	r2, r3
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	68fa      	ldr	r2, [r7, #12]
 8012958:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	3380      	adds	r3, #128	; 0x80
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	4413      	add	r3, r2
 8012964:	68ba      	ldr	r2, [r7, #8]
 8012966:	605a      	str	r2, [r3, #4]
	return true;
 8012968:	2301      	movs	r3, #1
}
 801296a:	4618      	mov	r0, r3
 801296c:	3718      	adds	r7, #24
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	080191f0 	.word	0x080191f0

08012978 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EE>:
 *
 * Accepts a function reference as message handler.
 *
 * Warning: this method is not thread-safe.
 */
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
 8012978:	b590      	push	{r4, r7, lr}
 801297a:	b08d      	sub	sp, #52	; 0x34
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
 8012982:	482c      	ldr	r0, [pc, #176]	; (8012a34 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EE+0xbc>)
 8012984:	f7ff ff0e 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012988:	62f8      	str	r0, [r7, #44]	; 0x2c

	PacketDefinition* def = retrieve(hash);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	3314      	adds	r3, #20
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	4798      	blx	r3
 8012998:	62b8      	str	r0, [r7, #40]	; 0x28

	if(def != nullptr) {
 801299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299c:	2b00      	cmp	r3, #0
 801299e:	d043      	beq.n	8012a28 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EE+0xb0>
		uint8_t packetID = def->id;
 80129a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(handlers[packetID] != nullptr) {
 80129a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129ac:	011b      	lsls	r3, r3, #4
 80129ae:	f603 6308 	addw	r3, r3, #3592	; 0xe08
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	4413      	add	r3, r2
 80129b6:	3304      	adds	r3, #4
 80129b8:	2100      	movs	r1, #0
 80129ba:	4618      	mov	r0, r3
 80129bc:	f001 fb1c 	bl	8013ff8 <_ZStneIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d015      	beq.n	80129f2 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EE+0x7a>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 80129c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129ca:	011b      	lsls	r3, r3, #4
 80129cc:	f603 6308 	addw	r3, r3, #3592	; 0xe08
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	4413      	add	r3, r2
 80129d4:	1d1a      	adds	r2, r3, #4
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	60bb      	str	r3, [r7, #8]
 80129da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129de:	733b      	strb	r3, [r7, #12]
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	613b      	str	r3, [r7, #16]
 80129e4:	f107 0308 	add.w	r3, r7, #8
 80129e8:	4619      	mov	r1, r3
 80129ea:	4610      	mov	r0, r2
 80129ec:	f001 fb5d 	bl	80140aa <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIS7_E4typeESt15__invoke_resultIRSG_JhS0_EEEE5valueERS2_E4typeEOS7_>
 80129f0:	e018      	b.n	8012a24 <_ZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EE+0xac>
				handlers[packetID](sender, (T*) packet);
				handler(sender, (T*) packet);
			};
		} else {
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 80129f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129f6:	011b      	lsls	r3, r3, #4
 80129f8:	f603 6308 	addw	r3, r3, #3592	; 0xe08
 80129fc:	687a      	ldr	r2, [r7, #4]
 80129fe:	4413      	add	r3, r2
 8012a00:	1d1c      	adds	r4, r3, #4
 8012a02:	f107 0314 	add.w	r3, r7, #20
 8012a06:	6839      	ldr	r1, [r7, #0]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f001 fb6c 	bl	80140e6 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1ERKS3_>
 8012a0e:	f107 0314 	add.w	r3, r7, #20
 8012a12:	4619      	mov	r1, r3
 8012a14:	4620      	mov	r0, r4
 8012a16:	f001 fb98 	bl	801414a <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E0_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIS7_E4typeESt15__invoke_resultIRSG_JhS0_EEEE5valueERS2_E4typeEOS7_>
 8012a1a:	f107 0314 	add.w	r3, r7, #20
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f001 fadd 	bl	8013fde <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
		}

		return true;
 8012a24:	2301      	movs	r3, #1
 8012a26:	e000      	b.n	8012a2a <_ZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EE+0xb2>
	}

	return false;
 8012a28:	2300      	movs	r3, #0
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3734      	adds	r7, #52	; 0x34
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd90      	pop	{r4, r7, pc}
 8012a32:	bf00      	nop
 8012a34:	080191f0 	.word	0x080191f0

08012a38 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b086      	sub	sp, #24
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	460b      	mov	r3, r1
 8012a42:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8012a44:	2304      	movs	r3, #4
 8012a46:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012a48:	4829      	ldr	r0, [pc, #164]	; (8012af0 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0xb8>)
 8012a4a:	f7ff feab 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012a4e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8012a56:	78fb      	ldrb	r3, [r7, #3]
 8012a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	4413      	add	r3, r2
 8012a62:	689b      	ldr	r3, [r3, #8]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d001      	beq.n	8012a6c <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012a68:	2300      	movs	r3, #0
 8012a6a:	e03c      	b.n	8012ae6 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	2bff      	cmp	r3, #255	; 0xff
 8012a70:	d901      	bls.n	8012a76 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x3e>
		return false; // Packet size too large
 8012a72:	2300      	movs	r3, #0
 8012a74:	e037      	b.n	8012ae6 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	3380      	adds	r3, #128	; 0x80
 8012a7c:	009b      	lsls	r3, r3, #2
 8012a7e:	4413      	add	r3, r2
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d015      	beq.n	8012ab2 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	3380      	adds	r3, #128	; 0x80
 8012a8c:	009b      	lsls	r3, r3, #2
 8012a8e:	4413      	add	r3, r2
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d101      	bne.n	8012a9e <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x66>
			return false; // Packet type already defined
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	e023      	b.n	8012ae6 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0xae>
		insertion_point++;
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012aaa:	d1e4      	bne.n	8012a76 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x3e>
			insertion_point = 0;
 8012aac:	2300      	movs	r3, #0
 8012aae:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012ab0:	e7e1      	b.n	8012a76 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012ab2:	78fb      	ldrb	r3, [r7, #3]
 8012ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ab8:	00db      	lsls	r3, r3, #3
 8012aba:	687a      	ldr	r2, [r7, #4]
 8012abc:	4413      	add	r3, r2
 8012abe:	3304      	adds	r3, #4
 8012ac0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	78fa      	ldrb	r2, [r7, #3]
 8012ac6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	b2da      	uxtb	r2, r3
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	68fa      	ldr	r2, [r7, #12]
 8012ad4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	3380      	adds	r3, #128	; 0x80
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	4413      	add	r3, r2
 8012ae0:	68ba      	ldr	r2, [r7, #8]
 8012ae2:	605a      	str	r2, [r3, #4]
	return true;
 8012ae4:	2301      	movs	r3, #1
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3718      	adds	r7, #24
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
 8012aee:	bf00      	nop
 8012af0:	080191cc 	.word	0x080191cc

08012af4 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b086      	sub	sp, #24
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	460b      	mov	r3, r1
 8012afe:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8012b00:	2304      	movs	r3, #4
 8012b02:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012b04:	4829      	ldr	r0, [pc, #164]	; (8012bac <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0xb8>)
 8012b06:	f7ff fe4d 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012b0a:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8012b12:	78fb      	ldrb	r3, [r7, #3]
 8012b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	00db      	lsls	r3, r3, #3
 8012b1c:	4413      	add	r3, r2
 8012b1e:	689b      	ldr	r3, [r3, #8]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012b24:	2300      	movs	r3, #0
 8012b26:	e03c      	b.n	8012ba2 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	2bff      	cmp	r3, #255	; 0xff
 8012b2c:	d901      	bls.n	8012b32 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x3e>
		return false; // Packet size too large
 8012b2e:	2300      	movs	r3, #0
 8012b30:	e037      	b.n	8012ba2 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	3380      	adds	r3, #128	; 0x80
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	4413      	add	r3, r2
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d015      	beq.n	8012b6e <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	3380      	adds	r3, #128	; 0x80
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	4413      	add	r3, r2
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d101      	bne.n	8012b5a <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x66>
			return false; // Packet type already defined
 8012b56:	2300      	movs	r3, #0
 8012b58:	e023      	b.n	8012ba2 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0xae>
		insertion_point++;
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b66:	d1e4      	bne.n	8012b32 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x3e>
			insertion_point = 0;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012b6c:	e7e1      	b.n	8012b32 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012b6e:	78fb      	ldrb	r3, [r7, #3]
 8012b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	4413      	add	r3, r2
 8012b7a:	3304      	adds	r3, #4
 8012b7c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	78fa      	ldrb	r2, [r7, #3]
 8012b82:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	b2da      	uxtb	r2, r3
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	68fa      	ldr	r2, [r7, #12]
 8012b90:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	3380      	adds	r3, #128	; 0x80
 8012b98:	009b      	lsls	r3, r3, #2
 8012b9a:	4413      	add	r3, r2
 8012b9c:	68ba      	ldr	r2, [r7, #8]
 8012b9e:	605a      	str	r2, [r3, #4]
	return true;
 8012ba0:	2301      	movs	r3, #1
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3718      	adds	r7, #24
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	080191a8 	.word	0x080191a8

08012bb0 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b086      	sub	sp, #24
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8012bbc:	2304      	movs	r3, #4
 8012bbe:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012bc0:	4829      	ldr	r0, [pc, #164]	; (8012c68 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0xb8>)
 8012bc2:	f7ff fdef 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012bc6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8012bce:	78fb      	ldrb	r3, [r7, #3]
 8012bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	4413      	add	r3, r2
 8012bda:	689b      	ldr	r3, [r3, #8]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d001      	beq.n	8012be4 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012be0:	2300      	movs	r3, #0
 8012be2:	e03c      	b.n	8012c5e <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	2bff      	cmp	r3, #255	; 0xff
 8012be8:	d901      	bls.n	8012bee <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x3e>
		return false; // Packet size too large
 8012bea:	2300      	movs	r3, #0
 8012bec:	e037      	b.n	8012c5e <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	3380      	adds	r3, #128	; 0x80
 8012bf4:	009b      	lsls	r3, r3, #2
 8012bf6:	4413      	add	r3, r2
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d015      	beq.n	8012c2a <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8012bfe:	687a      	ldr	r2, [r7, #4]
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	3380      	adds	r3, #128	; 0x80
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4413      	add	r3, r2
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	68fa      	ldr	r2, [r7, #12]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d101      	bne.n	8012c16 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x66>
			return false; // Packet type already defined
 8012c12:	2300      	movs	r3, #0
 8012c14:	e023      	b.n	8012c5e <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0xae>
		insertion_point++;
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	3301      	adds	r3, #1
 8012c1a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c22:	d1e4      	bne.n	8012bee <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x3e>
			insertion_point = 0;
 8012c24:	2300      	movs	r3, #0
 8012c26:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012c28:	e7e1      	b.n	8012bee <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012c2a:	78fb      	ldrb	r3, [r7, #3]
 8012c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c30:	00db      	lsls	r3, r3, #3
 8012c32:	687a      	ldr	r2, [r7, #4]
 8012c34:	4413      	add	r3, r2
 8012c36:	3304      	adds	r3, #4
 8012c38:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	78fa      	ldrb	r2, [r7, #3]
 8012c3e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	b2da      	uxtb	r2, r3
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	68fa      	ldr	r2, [r7, #12]
 8012c4c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	3380      	adds	r3, #128	; 0x80
 8012c54:	009b      	lsls	r3, r3, #2
 8012c56:	4413      	add	r3, r2
 8012c58:	68ba      	ldr	r2, [r7, #8]
 8012c5a:	605a      	str	r2, [r3, #4]
	return true;
 8012c5c:	2301      	movs	r3, #1
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3718      	adds	r7, #24
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	08019180 	.word	0x08019180

08012c6c <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b086      	sub	sp, #24
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	460b      	mov	r3, r1
 8012c76:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8012c78:	2304      	movs	r3, #4
 8012c7a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012c7c:	4829      	ldr	r0, [pc, #164]	; (8012d24 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0xb8>)
 8012c7e:	f7ff fd91 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012c82:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8012c8a:	78fb      	ldrb	r3, [r7, #3]
 8012c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	00db      	lsls	r3, r3, #3
 8012c94:	4413      	add	r3, r2
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d001      	beq.n	8012ca0 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	e03c      	b.n	8012d1a <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	2bff      	cmp	r3, #255	; 0xff
 8012ca4:	d901      	bls.n	8012caa <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x3e>
		return false; // Packet size too large
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	e037      	b.n	8012d1a <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	3380      	adds	r3, #128	; 0x80
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	4413      	add	r3, r2
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d015      	beq.n	8012ce6 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	3380      	adds	r3, #128	; 0x80
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	4413      	add	r3, r2
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d101      	bne.n	8012cd2 <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x66>
			return false; // Packet type already defined
 8012cce:	2300      	movs	r3, #0
 8012cd0:	e023      	b.n	8012d1a <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0xae>
		insertion_point++;
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cde:	d1e4      	bne.n	8012caa <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x3e>
			insertion_point = 0;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012ce4:	e7e1      	b.n	8012caa <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012ce6:	78fb      	ldrb	r3, [r7, #3]
 8012ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012cec:	00db      	lsls	r3, r3, #3
 8012cee:	687a      	ldr	r2, [r7, #4]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	3304      	adds	r3, #4
 8012cf4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	78fa      	ldrb	r2, [r7, #3]
 8012cfa:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	b2da      	uxtb	r2, r3
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8012d0a:	687a      	ldr	r2, [r7, #4]
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	3380      	adds	r3, #128	; 0x80
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	4413      	add	r3, r2
 8012d14:	68ba      	ldr	r2, [r7, #8]
 8012d16:	605a      	str	r2, [r3, #4]
	return true;
 8012d18:	2301      	movs	r3, #1
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3718      	adds	r7, #24
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	0801915c 	.word	0x0801915c

08012d28 <_ZN10MessageBus6defineI17sc_caching_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b086      	sub	sp, #24
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	460b      	mov	r3, r1
 8012d32:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8012d34:	2301      	movs	r3, #1
 8012d36:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012d38:	4829      	ldr	r0, [pc, #164]	; (8012de0 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0xb8>)
 8012d3a:	f7ff fd33 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012d3e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8012d46:	78fb      	ldrb	r3, [r7, #3]
 8012d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	00db      	lsls	r3, r3, #3
 8012d50:	4413      	add	r3, r2
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d001      	beq.n	8012d5c <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012d58:	2300      	movs	r3, #0
 8012d5a:	e03c      	b.n	8012dd6 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	2bff      	cmp	r3, #255	; 0xff
 8012d60:	d901      	bls.n	8012d66 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x3e>
		return false; // Packet size too large
 8012d62:	2300      	movs	r3, #0
 8012d64:	e037      	b.n	8012dd6 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8012d66:	687a      	ldr	r2, [r7, #4]
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	3380      	adds	r3, #128	; 0x80
 8012d6c:	009b      	lsls	r3, r3, #2
 8012d6e:	4413      	add	r3, r2
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d015      	beq.n	8012da2 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	3380      	adds	r3, #128	; 0x80
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	4413      	add	r3, r2
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d101      	bne.n	8012d8e <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x66>
			return false; // Packet type already defined
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	e023      	b.n	8012dd6 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0xae>
		insertion_point++;
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	3301      	adds	r3, #1
 8012d92:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d9a:	d1e4      	bne.n	8012d66 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x3e>
			insertion_point = 0;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012da0:	e7e1      	b.n	8012d66 <_ZN10MessageBus6defineI17sc_caching_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012da2:	78fb      	ldrb	r3, [r7, #3]
 8012da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012da8:	00db      	lsls	r3, r3, #3
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	4413      	add	r3, r2
 8012dae:	3304      	adds	r3, #4
 8012db0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	78fa      	ldrb	r2, [r7, #3]
 8012db6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	b2da      	uxtb	r2, r3
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	68fa      	ldr	r2, [r7, #12]
 8012dc4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8012dc6:	687a      	ldr	r2, [r7, #4]
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	3380      	adds	r3, #128	; 0x80
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	4413      	add	r3, r2
 8012dd0:	68ba      	ldr	r2, [r7, #8]
 8012dd2:	605a      	str	r2, [r3, #4]
	return true;
 8012dd4:	2301      	movs	r3, #1
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3718      	adds	r7, #24
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	08019140 	.word	0x08019140

08012de4 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b086      	sub	sp, #24
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	460b      	mov	r3, r1
 8012dee:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8012df0:	2301      	movs	r3, #1
 8012df2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012df4:	4829      	ldr	r0, [pc, #164]	; (8012e9c <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0xb8>)
 8012df6:	f7ff fcd5 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012dfa:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8012e02:	78fb      	ldrb	r3, [r7, #3]
 8012e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e08:	687a      	ldr	r2, [r7, #4]
 8012e0a:	00db      	lsls	r3, r3, #3
 8012e0c:	4413      	add	r3, r2
 8012e0e:	689b      	ldr	r3, [r3, #8]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d001      	beq.n	8012e18 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012e14:	2300      	movs	r3, #0
 8012e16:	e03c      	b.n	8012e92 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	2bff      	cmp	r3, #255	; 0xff
 8012e1c:	d901      	bls.n	8012e22 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x3e>
		return false; // Packet size too large
 8012e1e:	2300      	movs	r3, #0
 8012e20:	e037      	b.n	8012e92 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	3380      	adds	r3, #128	; 0x80
 8012e28:	009b      	lsls	r3, r3, #2
 8012e2a:	4413      	add	r3, r2
 8012e2c:	685b      	ldr	r3, [r3, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d015      	beq.n	8012e5e <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	3380      	adds	r3, #128	; 0x80
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	4413      	add	r3, r2
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	68fa      	ldr	r2, [r7, #12]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d101      	bne.n	8012e4a <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x66>
			return false; // Packet type already defined
 8012e46:	2300      	movs	r3, #0
 8012e48:	e023      	b.n	8012e92 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0xae>
		insertion_point++;
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e56:	d1e4      	bne.n	8012e22 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x3e>
			insertion_point = 0;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012e5c:	e7e1      	b.n	8012e22 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012e5e:	78fb      	ldrb	r3, [r7, #3]
 8012e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e64:	00db      	lsls	r3, r3, #3
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	4413      	add	r3, r2
 8012e6a:	3304      	adds	r3, #4
 8012e6c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	78fa      	ldrb	r2, [r7, #3]
 8012e72:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	b2da      	uxtb	r2, r3
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	68fa      	ldr	r2, [r7, #12]
 8012e80:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8012e82:	687a      	ldr	r2, [r7, #4]
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	3380      	adds	r3, #128	; 0x80
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	4413      	add	r3, r2
 8012e8c:	68ba      	ldr	r2, [r7, #8]
 8012e8e:	605a      	str	r2, [r3, #4]
	return true;
 8012e90:	2301      	movs	r3, #1
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3718      	adds	r7, #24
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}
 8012e9a:	bf00      	nop
 8012e9c:	0801911c 	.word	0x0801911c

08012ea0 <_ZN10MessageBus6defineI14sc_trap_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b086      	sub	sp, #24
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8012eac:	2301      	movs	r3, #1
 8012eae:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012eb0:	4829      	ldr	r0, [pc, #164]	; (8012f58 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0xb8>)
 8012eb2:	f7ff fc77 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012eb6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8012ebe:	78fb      	ldrb	r3, [r7, #3]
 8012ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ec4:	687a      	ldr	r2, [r7, #4]
 8012ec6:	00db      	lsls	r3, r3, #3
 8012ec8:	4413      	add	r3, r2
 8012eca:	689b      	ldr	r3, [r3, #8]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	e03c      	b.n	8012f4e <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	2bff      	cmp	r3, #255	; 0xff
 8012ed8:	d901      	bls.n	8012ede <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x3e>
		return false; // Packet size too large
 8012eda:	2300      	movs	r3, #0
 8012edc:	e037      	b.n	8012f4e <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	3380      	adds	r3, #128	; 0x80
 8012ee4:	009b      	lsls	r3, r3, #2
 8012ee6:	4413      	add	r3, r2
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d015      	beq.n	8012f1a <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	3380      	adds	r3, #128	; 0x80
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	4413      	add	r3, r2
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	68fa      	ldr	r2, [r7, #12]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d101      	bne.n	8012f06 <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x66>
			return false; // Packet type already defined
 8012f02:	2300      	movs	r3, #0
 8012f04:	e023      	b.n	8012f4e <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0xae>
		insertion_point++;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f12:	d1e4      	bne.n	8012ede <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x3e>
			insertion_point = 0;
 8012f14:	2300      	movs	r3, #0
 8012f16:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012f18:	e7e1      	b.n	8012ede <_ZN10MessageBus6defineI14sc_trap_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012f1a:	78fb      	ldrb	r3, [r7, #3]
 8012f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f20:	00db      	lsls	r3, r3, #3
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	4413      	add	r3, r2
 8012f26:	3304      	adds	r3, #4
 8012f28:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	78fa      	ldrb	r2, [r7, #3]
 8012f2e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	b2da      	uxtb	r2, r3
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	68fa      	ldr	r2, [r7, #12]
 8012f3c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	3380      	adds	r3, #128	; 0x80
 8012f44:	009b      	lsls	r3, r3, #2
 8012f46:	4413      	add	r3, r2
 8012f48:	68ba      	ldr	r2, [r7, #8]
 8012f4a:	605a      	str	r2, [r3, #4]
	return true;
 8012f4c:	2301      	movs	r3, #1
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3718      	adds	r7, #24
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	08019100 	.word	0x08019100

08012f5c <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b086      	sub	sp, #24
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	460b      	mov	r3, r1
 8012f66:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8012f68:	2301      	movs	r3, #1
 8012f6a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8012f6c:	4829      	ldr	r0, [pc, #164]	; (8013014 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0xb8>)
 8012f6e:	f7ff fc19 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8012f72:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8012f7a:	78fb      	ldrb	r3, [r7, #3]
 8012f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f80:	687a      	ldr	r2, [r7, #4]
 8012f82:	00db      	lsls	r3, r3, #3
 8012f84:	4413      	add	r3, r2
 8012f86:	689b      	ldr	r3, [r3, #8]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d001      	beq.n	8012f90 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x34>
		return false; // Packet ID already in use
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	e03c      	b.n	801300a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	2bff      	cmp	r3, #255	; 0xff
 8012f94:	d901      	bls.n	8012f9a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x3e>
		return false; // Packet size too large
 8012f96:	2300      	movs	r3, #0
 8012f98:	e037      	b.n	801300a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	697b      	ldr	r3, [r7, #20]
 8012f9e:	3380      	adds	r3, #128	; 0x80
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	4413      	add	r3, r2
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d015      	beq.n	8012fd6 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	3380      	adds	r3, #128	; 0x80
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	4413      	add	r3, r2
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	68fa      	ldr	r2, [r7, #12]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d101      	bne.n	8012fc2 <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x66>
			return false; // Packet type already defined
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	e023      	b.n	801300a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0xae>
		insertion_point++;
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	3301      	adds	r3, #1
 8012fc6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fce:	d1e4      	bne.n	8012f9a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x3e>
			insertion_point = 0;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8012fd4:	e7e1      	b.n	8012f9a <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8012fd6:	78fb      	ldrb	r3, [r7, #3]
 8012fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012fdc:	00db      	lsls	r3, r3, #3
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	4413      	add	r3, r2
 8012fe2:	3304      	adds	r3, #4
 8012fe4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	78fa      	ldrb	r2, [r7, #3]
 8012fea:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	b2da      	uxtb	r2, r3
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	68fa      	ldr	r2, [r7, #12]
 8012ff8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	3380      	adds	r3, #128	; 0x80
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	68ba      	ldr	r2, [r7, #8]
 8013006:	605a      	str	r2, [r3, #4]
	return true;
 8013008:	2301      	movs	r3, #1
}
 801300a:	4618      	mov	r0, r3
 801300c:	3718      	adds	r7, #24
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	080190dc 	.word	0x080190dc

08013018 <_ZN10MessageBus6defineI13sc_LED_packetEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8013018:	b580      	push	{r7, lr}
 801301a:	b086      	sub	sp, #24
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	460b      	mov	r3, r1
 8013022:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013024:	2301      	movs	r3, #1
 8013026:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8013028:	4829      	ldr	r0, [pc, #164]	; (80130d0 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0xb8>)
 801302a:	f7ff fbbb 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 801302e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	b2db      	uxtb	r3, r3
 8013034:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8013036:	78fb      	ldrb	r3, [r7, #3]
 8013038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	00db      	lsls	r3, r3, #3
 8013040:	4413      	add	r3, r2
 8013042:	689b      	ldr	r3, [r3, #8]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d001      	beq.n	801304c <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x34>
		return false; // Packet ID already in use
 8013048:	2300      	movs	r3, #0
 801304a:	e03c      	b.n	80130c6 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0xae>
	if(struct_size > max_packet_size) {
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	2bff      	cmp	r3, #255	; 0xff
 8013050:	d901      	bls.n	8013056 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x3e>
		return false; // Packet size too large
 8013052:	2300      	movs	r3, #0
 8013054:	e037      	b.n	80130c6 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013056:	687a      	ldr	r2, [r7, #4]
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	3380      	adds	r3, #128	; 0x80
 801305c:	009b      	lsls	r3, r3, #2
 801305e:	4413      	add	r3, r2
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d015      	beq.n	8013092 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013066:	687a      	ldr	r2, [r7, #4]
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	3380      	adds	r3, #128	; 0x80
 801306c:	009b      	lsls	r3, r3, #2
 801306e:	4413      	add	r3, r2
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	68fa      	ldr	r2, [r7, #12]
 8013076:	429a      	cmp	r2, r3
 8013078:	d101      	bne.n	801307e <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x66>
			return false; // Packet type already defined
 801307a:	2300      	movs	r3, #0
 801307c:	e023      	b.n	80130c6 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0xae>
		insertion_point++;
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	3301      	adds	r3, #1
 8013082:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801308a:	d1e4      	bne.n	8013056 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x3e>
			insertion_point = 0;
 801308c:	2300      	movs	r3, #0
 801308e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013090:	e7e1      	b.n	8013056 <_ZN10MessageBus6defineI13sc_LED_packetEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8013092:	78fb      	ldrb	r3, [r7, #3]
 8013094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013098:	00db      	lsls	r3, r3, #3
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	4413      	add	r3, r2
 801309e:	3304      	adds	r3, #4
 80130a0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	78fa      	ldrb	r2, [r7, #3]
 80130a6:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	b2da      	uxtb	r2, r3
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	68fa      	ldr	r2, [r7, #12]
 80130b4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	3380      	adds	r3, #128	; 0x80
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	4413      	add	r3, r2
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	605a      	str	r2, [r3, #4]
	return true;
 80130c4:	2301      	movs	r3, #1
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3718      	adds	r7, #24
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	080190c4 	.word	0x080190c4

080130d4 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b086      	sub	sp, #24
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	460b      	mov	r3, r1
 80130de:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80130e0:	2305      	movs	r3, #5
 80130e2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80130e4:	4829      	ldr	r0, [pc, #164]	; (801318c <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xb8>)
 80130e6:	f7ff fb5d 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 80130ea:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	b2db      	uxtb	r3, r3
 80130f0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80130f2:	78fb      	ldrb	r3, [r7, #3]
 80130f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130f8:	687a      	ldr	r2, [r7, #4]
 80130fa:	00db      	lsls	r3, r3, #3
 80130fc:	4413      	add	r3, r2
 80130fe:	689b      	ldr	r3, [r3, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d001      	beq.n	8013108 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x34>
		return false; // Packet ID already in use
 8013104:	2300      	movs	r3, #0
 8013106:	e03c      	b.n	8013182 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	2bff      	cmp	r3, #255	; 0xff
 801310c:	d901      	bls.n	8013112 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
		return false; // Packet size too large
 801310e:	2300      	movs	r3, #0
 8013110:	e037      	b.n	8013182 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	3380      	adds	r3, #128	; 0x80
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	4413      	add	r3, r2
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d015      	beq.n	801314e <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	3380      	adds	r3, #128	; 0x80
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	4413      	add	r3, r2
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	68fa      	ldr	r2, [r7, #12]
 8013132:	429a      	cmp	r2, r3
 8013134:	d101      	bne.n	801313a <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x66>
			return false; // Packet type already defined
 8013136:	2300      	movs	r3, #0
 8013138:	e023      	b.n	8013182 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0xae>
		insertion_point++;
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	3301      	adds	r3, #1
 801313e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013146:	d1e4      	bne.n	8013112 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
			insertion_point = 0;
 8013148:	2300      	movs	r3, #0
 801314a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801314c:	e7e1      	b.n	8013112 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801314e:	78fb      	ldrb	r3, [r7, #3]
 8013150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013154:	00db      	lsls	r3, r3, #3
 8013156:	687a      	ldr	r2, [r7, #4]
 8013158:	4413      	add	r3, r2
 801315a:	3304      	adds	r3, #4
 801315c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	78fa      	ldrb	r2, [r7, #3]
 8013162:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	b2da      	uxtb	r2, r3
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	68fa      	ldr	r2, [r7, #12]
 8013170:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	3380      	adds	r3, #128	; 0x80
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	4413      	add	r3, r2
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	605a      	str	r2, [r3, #4]
	return true;
 8013180:	2301      	movs	r3, #1
}
 8013182:	4618      	mov	r0, r3
 8013184:	3718      	adds	r7, #24
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	080190a4 	.word	0x080190a4

08013190 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8013190:	b580      	push	{r7, lr}
 8013192:	b086      	sub	sp, #24
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	460b      	mov	r3, r1
 801319a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801319c:	2310      	movs	r3, #16
 801319e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80131a0:	4829      	ldr	r0, [pc, #164]	; (8013248 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xb8>)
 80131a2:	f7ff faff 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 80131a6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80131ae:	78fb      	ldrb	r3, [r7, #3]
 80131b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	00db      	lsls	r3, r3, #3
 80131b8:	4413      	add	r3, r2
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d001      	beq.n	80131c4 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x34>
		return false; // Packet ID already in use
 80131c0:	2300      	movs	r3, #0
 80131c2:	e03c      	b.n	801323e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	2bff      	cmp	r3, #255	; 0xff
 80131c8:	d901      	bls.n	80131ce <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
		return false; // Packet size too large
 80131ca:	2300      	movs	r3, #0
 80131cc:	e037      	b.n	801323e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80131ce:	687a      	ldr	r2, [r7, #4]
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	3380      	adds	r3, #128	; 0x80
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	4413      	add	r3, r2
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d015      	beq.n	801320a <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	3380      	adds	r3, #128	; 0x80
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	4413      	add	r3, r2
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	429a      	cmp	r2, r3
 80131f0:	d101      	bne.n	80131f6 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x66>
			return false; // Packet type already defined
 80131f2:	2300      	movs	r3, #0
 80131f4:	e023      	b.n	801323e <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0xae>
		insertion_point++;
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	3301      	adds	r3, #1
 80131fa:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013202:	d1e4      	bne.n	80131ce <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
			insertion_point = 0;
 8013204:	2300      	movs	r3, #0
 8013206:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013208:	e7e1      	b.n	80131ce <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801320a:	78fb      	ldrb	r3, [r7, #3]
 801320c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013210:	00db      	lsls	r3, r3, #3
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	4413      	add	r3, r2
 8013216:	3304      	adds	r3, #4
 8013218:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	78fa      	ldrb	r2, [r7, #3]
 801321e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	b2da      	uxtb	r2, r3
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	68fa      	ldr	r2, [r7, #12]
 801322c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801322e:	687a      	ldr	r2, [r7, #4]
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	3380      	adds	r3, #128	; 0x80
 8013234:	009b      	lsls	r3, r3, #2
 8013236:	4413      	add	r3, r2
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	605a      	str	r2, [r3, #4]
	return true;
 801323c:	2301      	movs	r3, #1
}
 801323e:	4618      	mov	r0, r3
 8013240:	3718      	adds	r7, #24
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	08019084 	.word	0x08019084

0801324c <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801324c:	b580      	push	{r7, lr}
 801324e:	b086      	sub	sp, #24
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	460b      	mov	r3, r1
 8013256:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013258:	2310      	movs	r3, #16
 801325a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801325c:	4829      	ldr	r0, [pc, #164]	; (8013304 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xb8>)
 801325e:	f7ff faa1 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8013262:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	b2db      	uxtb	r3, r3
 8013268:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801326a:	78fb      	ldrb	r3, [r7, #3]
 801326c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	00db      	lsls	r3, r3, #3
 8013274:	4413      	add	r3, r2
 8013276:	689b      	ldr	r3, [r3, #8]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d001      	beq.n	8013280 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x34>
		return false; // Packet ID already in use
 801327c:	2300      	movs	r3, #0
 801327e:	e03c      	b.n	80132fa <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	2bff      	cmp	r3, #255	; 0xff
 8013284:	d901      	bls.n	801328a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
		return false; // Packet size too large
 8013286:	2300      	movs	r3, #0
 8013288:	e037      	b.n	80132fa <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	3380      	adds	r3, #128	; 0x80
 8013290:	009b      	lsls	r3, r3, #2
 8013292:	4413      	add	r3, r2
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d015      	beq.n	80132c6 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801329a:	687a      	ldr	r2, [r7, #4]
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	3380      	adds	r3, #128	; 0x80
 80132a0:	009b      	lsls	r3, r3, #2
 80132a2:	4413      	add	r3, r2
 80132a4:	685b      	ldr	r3, [r3, #4]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	68fa      	ldr	r2, [r7, #12]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d101      	bne.n	80132b2 <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x66>
			return false; // Packet type already defined
 80132ae:	2300      	movs	r3, #0
 80132b0:	e023      	b.n	80132fa <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0xae>
		insertion_point++;
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	3301      	adds	r3, #1
 80132b6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132be:	d1e4      	bne.n	801328a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
			insertion_point = 0;
 80132c0:	2300      	movs	r3, #0
 80132c2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80132c4:	e7e1      	b.n	801328a <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80132c6:	78fb      	ldrb	r3, [r7, #3]
 80132c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132cc:	00db      	lsls	r3, r3, #3
 80132ce:	687a      	ldr	r2, [r7, #4]
 80132d0:	4413      	add	r3, r2
 80132d2:	3304      	adds	r3, #4
 80132d4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	78fa      	ldrb	r2, [r7, #3]
 80132da:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	b2da      	uxtb	r2, r3
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	68fa      	ldr	r2, [r7, #12]
 80132e8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	3380      	adds	r3, #128	; 0x80
 80132f0:	009b      	lsls	r3, r3, #2
 80132f2:	4413      	add	r3, r2
 80132f4:	68ba      	ldr	r2, [r7, #8]
 80132f6:	605a      	str	r2, [r3, #4]
	return true;
 80132f8:	2301      	movs	r3, #1
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	3718      	adds	r7, #24
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}
 8013302:	bf00      	nop
 8013304:	08019064 	.word	0x08019064

08013308 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8013308:	b580      	push	{r7, lr}
 801330a:	b086      	sub	sp, #24
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	460b      	mov	r3, r1
 8013312:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013314:	2301      	movs	r3, #1
 8013316:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8013318:	4829      	ldr	r0, [pc, #164]	; (80133c0 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0xb8>)
 801331a:	f7ff fa43 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 801331e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	b2db      	uxtb	r3, r3
 8013324:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8013326:	78fb      	ldrb	r3, [r7, #3]
 8013328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	00db      	lsls	r3, r3, #3
 8013330:	4413      	add	r3, r2
 8013332:	689b      	ldr	r3, [r3, #8]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d001      	beq.n	801333c <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x34>
		return false; // Packet ID already in use
 8013338:	2300      	movs	r3, #0
 801333a:	e03c      	b.n	80133b6 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	2bff      	cmp	r3, #255	; 0xff
 8013340:	d901      	bls.n	8013346 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x3e>
		return false; // Packet size too large
 8013342:	2300      	movs	r3, #0
 8013344:	e037      	b.n	80133b6 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	3380      	adds	r3, #128	; 0x80
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	4413      	add	r3, r2
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d015      	beq.n	8013382 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	3380      	adds	r3, #128	; 0x80
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	4413      	add	r3, r2
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	68fa      	ldr	r2, [r7, #12]
 8013366:	429a      	cmp	r2, r3
 8013368:	d101      	bne.n	801336e <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x66>
			return false; // Packet type already defined
 801336a:	2300      	movs	r3, #0
 801336c:	e023      	b.n	80133b6 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0xae>
		insertion_point++;
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	3301      	adds	r3, #1
 8013372:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801337a:	d1e4      	bne.n	8013346 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x3e>
			insertion_point = 0;
 801337c:	2300      	movs	r3, #0
 801337e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013380:	e7e1      	b.n	8013346 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8013382:	78fb      	ldrb	r3, [r7, #3]
 8013384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013388:	00db      	lsls	r3, r3, #3
 801338a:	687a      	ldr	r2, [r7, #4]
 801338c:	4413      	add	r3, r2
 801338e:	3304      	adds	r3, #4
 8013390:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	78fa      	ldrb	r2, [r7, #3]
 8013396:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	b2da      	uxtb	r2, r3
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	68fa      	ldr	r2, [r7, #12]
 80133a4:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	3380      	adds	r3, #128	; 0x80
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	4413      	add	r3, r2
 80133b0:	68ba      	ldr	r2, [r7, #8]
 80133b2:	605a      	str	r2, [r3, #4]
	return true;
 80133b4:	2301      	movs	r3, #1
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3718      	adds	r7, #24
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	08019040 	.word	0x08019040

080133c4 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	460b      	mov	r3, r1
 80133ce:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80133d0:	2301      	movs	r3, #1
 80133d2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80133d4:	4829      	ldr	r0, [pc, #164]	; (801347c <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0xb8>)
 80133d6:	f7ff f9e5 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 80133da:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80133e2:	78fb      	ldrb	r3, [r7, #3]
 80133e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133e8:	687a      	ldr	r2, [r7, #4]
 80133ea:	00db      	lsls	r3, r3, #3
 80133ec:	4413      	add	r3, r2
 80133ee:	689b      	ldr	r3, [r3, #8]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d001      	beq.n	80133f8 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x34>
		return false; // Packet ID already in use
 80133f4:	2300      	movs	r3, #0
 80133f6:	e03c      	b.n	8013472 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	2bff      	cmp	r3, #255	; 0xff
 80133fc:	d901      	bls.n	8013402 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x3e>
		return false; // Packet size too large
 80133fe:	2300      	movs	r3, #0
 8013400:	e037      	b.n	8013472 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013402:	687a      	ldr	r2, [r7, #4]
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	3380      	adds	r3, #128	; 0x80
 8013408:	009b      	lsls	r3, r3, #2
 801340a:	4413      	add	r3, r2
 801340c:	685b      	ldr	r3, [r3, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d015      	beq.n	801343e <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013412:	687a      	ldr	r2, [r7, #4]
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	3380      	adds	r3, #128	; 0x80
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	4413      	add	r3, r2
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	68fa      	ldr	r2, [r7, #12]
 8013422:	429a      	cmp	r2, r3
 8013424:	d101      	bne.n	801342a <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x66>
			return false; // Packet type already defined
 8013426:	2300      	movs	r3, #0
 8013428:	e023      	b.n	8013472 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0xae>
		insertion_point++;
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	3301      	adds	r3, #1
 801342e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013436:	d1e4      	bne.n	8013402 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x3e>
			insertion_point = 0;
 8013438:	2300      	movs	r3, #0
 801343a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801343c:	e7e1      	b.n	8013402 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801343e:	78fb      	ldrb	r3, [r7, #3]
 8013440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013444:	00db      	lsls	r3, r3, #3
 8013446:	687a      	ldr	r2, [r7, #4]
 8013448:	4413      	add	r3, r2
 801344a:	3304      	adds	r3, #4
 801344c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	78fa      	ldrb	r2, [r7, #3]
 8013452:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	b2da      	uxtb	r2, r3
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	68fa      	ldr	r2, [r7, #12]
 8013460:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013462:	687a      	ldr	r2, [r7, #4]
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	3380      	adds	r3, #128	; 0x80
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	4413      	add	r3, r2
 801346c:	68ba      	ldr	r2, [r7, #8]
 801346e:	605a      	str	r2, [r3, #4]
	return true;
 8013470:	2301      	movs	r3, #1
}
 8013472:	4618      	mov	r0, r3
 8013474:	3718      	adds	r7, #24
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	08019020 	.word	0x08019020

08013480 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8013480:	b580      	push	{r7, lr}
 8013482:	b086      	sub	sp, #24
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	460b      	mov	r3, r1
 801348a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801348c:	2301      	movs	r3, #1
 801348e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8013490:	4829      	ldr	r0, [pc, #164]	; (8013538 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0xb8>)
 8013492:	f7ff f987 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8013496:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	b2db      	uxtb	r3, r3
 801349c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801349e:	78fb      	ldrb	r3, [r7, #3]
 80134a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	00db      	lsls	r3, r3, #3
 80134a8:	4413      	add	r3, r2
 80134aa:	689b      	ldr	r3, [r3, #8]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d001      	beq.n	80134b4 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x34>
		return false; // Packet ID already in use
 80134b0:	2300      	movs	r3, #0
 80134b2:	e03c      	b.n	801352e <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	2bff      	cmp	r3, #255	; 0xff
 80134b8:	d901      	bls.n	80134be <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x3e>
		return false; // Packet size too large
 80134ba:	2300      	movs	r3, #0
 80134bc:	e037      	b.n	801352e <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	3380      	adds	r3, #128	; 0x80
 80134c4:	009b      	lsls	r3, r3, #2
 80134c6:	4413      	add	r3, r2
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d015      	beq.n	80134fa <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	3380      	adds	r3, #128	; 0x80
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	4413      	add	r3, r2
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	685b      	ldr	r3, [r3, #4]
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d101      	bne.n	80134e6 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x66>
			return false; // Packet type already defined
 80134e2:	2300      	movs	r3, #0
 80134e4:	e023      	b.n	801352e <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0xae>
		insertion_point++;
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	3301      	adds	r3, #1
 80134ea:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134f2:	d1e4      	bne.n	80134be <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x3e>
			insertion_point = 0;
 80134f4:	2300      	movs	r3, #0
 80134f6:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80134f8:	e7e1      	b.n	80134be <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80134fa:	78fb      	ldrb	r3, [r7, #3]
 80134fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013500:	00db      	lsls	r3, r3, #3
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	4413      	add	r3, r2
 8013506:	3304      	adds	r3, #4
 8013508:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	78fa      	ldrb	r2, [r7, #3]
 801350e:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	b2da      	uxtb	r2, r3
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801351e:	687a      	ldr	r2, [r7, #4]
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	3380      	adds	r3, #128	; 0x80
 8013524:	009b      	lsls	r3, r3, #2
 8013526:	4413      	add	r3, r2
 8013528:	68ba      	ldr	r2, [r7, #8]
 801352a:	605a      	str	r2, [r3, #4]
	return true;
 801352c:	2301      	movs	r3, #1
}
 801352e:	4618      	mov	r0, r3
 8013530:	3718      	adds	r7, #24
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	08019000 	.word	0x08019000

0801353c <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801353c:	b580      	push	{r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013548:	2301      	movs	r3, #1
 801354a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801354c:	4829      	ldr	r0, [pc, #164]	; (80135f4 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0xb8>)
 801354e:	f7ff f929 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8013552:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	b2db      	uxtb	r3, r3
 8013558:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801355a:	78fb      	ldrb	r3, [r7, #3]
 801355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	00db      	lsls	r3, r3, #3
 8013564:	4413      	add	r3, r2
 8013566:	689b      	ldr	r3, [r3, #8]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d001      	beq.n	8013570 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x34>
		return false; // Packet ID already in use
 801356c:	2300      	movs	r3, #0
 801356e:	e03c      	b.n	80135ea <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	2bff      	cmp	r3, #255	; 0xff
 8013574:	d901      	bls.n	801357a <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x3e>
		return false; // Packet size too large
 8013576:	2300      	movs	r3, #0
 8013578:	e037      	b.n	80135ea <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	697b      	ldr	r3, [r7, #20]
 801357e:	3380      	adds	r3, #128	; 0x80
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	4413      	add	r3, r2
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d015      	beq.n	80135b6 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	3380      	adds	r3, #128	; 0x80
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	4413      	add	r3, r2
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	429a      	cmp	r2, r3
 801359c:	d101      	bne.n	80135a2 <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x66>
			return false; // Packet type already defined
 801359e:	2300      	movs	r3, #0
 80135a0:	e023      	b.n	80135ea <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0xae>
		insertion_point++;
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	3301      	adds	r3, #1
 80135a6:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80135ae:	d1e4      	bne.n	801357a <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x3e>
			insertion_point = 0;
 80135b0:	2300      	movs	r3, #0
 80135b2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80135b4:	e7e1      	b.n	801357a <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80135b6:	78fb      	ldrb	r3, [r7, #3]
 80135b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135bc:	00db      	lsls	r3, r3, #3
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	4413      	add	r3, r2
 80135c2:	3304      	adds	r3, #4
 80135c4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	78fa      	ldrb	r2, [r7, #3]
 80135ca:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	b2da      	uxtb	r2, r3
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	68fa      	ldr	r2, [r7, #12]
 80135d8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	3380      	adds	r3, #128	; 0x80
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	4413      	add	r3, r2
 80135e4:	68ba      	ldr	r2, [r7, #8]
 80135e6:	605a      	str	r2, [r3, #4]
	return true;
 80135e8:	2301      	movs	r3, #1
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3718      	adds	r7, #24
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	08018fe0 	.word	0x08018fe0

080135f8 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b086      	sub	sp, #24
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	460b      	mov	r3, r1
 8013602:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013604:	2301      	movs	r3, #1
 8013606:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8013608:	4829      	ldr	r0, [pc, #164]	; (80136b0 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0xb8>)
 801360a:	f7ff f8cb 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 801360e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	b2db      	uxtb	r3, r3
 8013614:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8013616:	78fb      	ldrb	r3, [r7, #3]
 8013618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	00db      	lsls	r3, r3, #3
 8013620:	4413      	add	r3, r2
 8013622:	689b      	ldr	r3, [r3, #8]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d001      	beq.n	801362c <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x34>
		return false; // Packet ID already in use
 8013628:	2300      	movs	r3, #0
 801362a:	e03c      	b.n	80136a6 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	2bff      	cmp	r3, #255	; 0xff
 8013630:	d901      	bls.n	8013636 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x3e>
		return false; // Packet size too large
 8013632:	2300      	movs	r3, #0
 8013634:	e037      	b.n	80136a6 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	3380      	adds	r3, #128	; 0x80
 801363c:	009b      	lsls	r3, r3, #2
 801363e:	4413      	add	r3, r2
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d015      	beq.n	8013672 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013646:	687a      	ldr	r2, [r7, #4]
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	3380      	adds	r3, #128	; 0x80
 801364c:	009b      	lsls	r3, r3, #2
 801364e:	4413      	add	r3, r2
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	68fa      	ldr	r2, [r7, #12]
 8013656:	429a      	cmp	r2, r3
 8013658:	d101      	bne.n	801365e <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x66>
			return false; // Packet type already defined
 801365a:	2300      	movs	r3, #0
 801365c:	e023      	b.n	80136a6 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0xae>
		insertion_point++;
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	3301      	adds	r3, #1
 8013662:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801366a:	d1e4      	bne.n	8013636 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x3e>
			insertion_point = 0;
 801366c:	2300      	movs	r3, #0
 801366e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013670:	e7e1      	b.n	8013636 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8013672:	78fb      	ldrb	r3, [r7, #3]
 8013674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013678:	00db      	lsls	r3, r3, #3
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	4413      	add	r3, r2
 801367e:	3304      	adds	r3, #4
 8013680:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	78fa      	ldrb	r2, [r7, #3]
 8013686:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	b2da      	uxtb	r2, r3
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	68fa      	ldr	r2, [r7, #12]
 8013694:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	3380      	adds	r3, #128	; 0x80
 801369c:	009b      	lsls	r3, r3, #2
 801369e:	4413      	add	r3, r2
 80136a0:	68ba      	ldr	r2, [r7, #8]
 80136a2:	605a      	str	r2, [r3, #4]
	return true;
 80136a4:	2301      	movs	r3, #1
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3718      	adds	r7, #24
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	08018fc0 	.word	0x08018fc0

080136b4 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b086      	sub	sp, #24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	460b      	mov	r3, r1
 80136be:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80136c0:	2301      	movs	r3, #1
 80136c2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80136c4:	4829      	ldr	r0, [pc, #164]	; (801376c <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0xb8>)
 80136c6:	f7ff f86d 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 80136ca:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	b2db      	uxtb	r3, r3
 80136d0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80136d2:	78fb      	ldrb	r3, [r7, #3]
 80136d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	00db      	lsls	r3, r3, #3
 80136dc:	4413      	add	r3, r2
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d001      	beq.n	80136e8 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x34>
		return false; // Packet ID already in use
 80136e4:	2300      	movs	r3, #0
 80136e6:	e03c      	b.n	8013762 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	2bff      	cmp	r3, #255	; 0xff
 80136ec:	d901      	bls.n	80136f2 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x3e>
		return false; // Packet size too large
 80136ee:	2300      	movs	r3, #0
 80136f0:	e037      	b.n	8013762 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80136f2:	687a      	ldr	r2, [r7, #4]
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	3380      	adds	r3, #128	; 0x80
 80136f8:	009b      	lsls	r3, r3, #2
 80136fa:	4413      	add	r3, r2
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d015      	beq.n	801372e <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013702:	687a      	ldr	r2, [r7, #4]
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	3380      	adds	r3, #128	; 0x80
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	4413      	add	r3, r2
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	68fa      	ldr	r2, [r7, #12]
 8013712:	429a      	cmp	r2, r3
 8013714:	d101      	bne.n	801371a <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x66>
			return false; // Packet type already defined
 8013716:	2300      	movs	r3, #0
 8013718:	e023      	b.n	8013762 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0xae>
		insertion_point++;
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	3301      	adds	r3, #1
 801371e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013726:	d1e4      	bne.n	80136f2 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x3e>
			insertion_point = 0;
 8013728:	2300      	movs	r3, #0
 801372a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 801372c:	e7e1      	b.n	80136f2 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 801372e:	78fb      	ldrb	r3, [r7, #3]
 8013730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013734:	00db      	lsls	r3, r3, #3
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	4413      	add	r3, r2
 801373a:	3304      	adds	r3, #4
 801373c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	78fa      	ldrb	r2, [r7, #3]
 8013742:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	b2da      	uxtb	r2, r3
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	3380      	adds	r3, #128	; 0x80
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	4413      	add	r3, r2
 801375c:	68ba      	ldr	r2, [r7, #8]
 801375e:	605a      	str	r2, [r3, #4]
	return true;
 8013760:	2301      	movs	r3, #1
}
 8013762:	4618      	mov	r0, r3
 8013764:	3718      	adds	r7, #24
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	08018fa0 	.word	0x08018fa0

08013770 <_ZN10MessageBus6defineI9FsmPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8013770:	b580      	push	{r7, lr}
 8013772:	b086      	sub	sp, #24
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	460b      	mov	r3, r1
 801377a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 801377c:	2302      	movs	r3, #2
 801377e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8013780:	4829      	ldr	r0, [pc, #164]	; (8013828 <_ZN10MessageBus6defineI9FsmPacketEEbh+0xb8>)
 8013782:	f7ff f80f 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8013786:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	b2db      	uxtb	r3, r3
 801378c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801378e:	78fb      	ldrb	r3, [r7, #3]
 8013790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	00db      	lsls	r3, r3, #3
 8013798:	4413      	add	r3, r2
 801379a:	689b      	ldr	r3, [r3, #8]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d001      	beq.n	80137a4 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x34>
		return false; // Packet ID already in use
 80137a0:	2300      	movs	r3, #0
 80137a2:	e03c      	b.n	801381e <_ZN10MessageBus6defineI9FsmPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80137a4:	693b      	ldr	r3, [r7, #16]
 80137a6:	2bff      	cmp	r3, #255	; 0xff
 80137a8:	d901      	bls.n	80137ae <_ZN10MessageBus6defineI9FsmPacketEEbh+0x3e>
		return false; // Packet size too large
 80137aa:	2300      	movs	r3, #0
 80137ac:	e037      	b.n	801381e <_ZN10MessageBus6defineI9FsmPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	3380      	adds	r3, #128	; 0x80
 80137b4:	009b      	lsls	r3, r3, #2
 80137b6:	4413      	add	r3, r2
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d015      	beq.n	80137ea <_ZN10MessageBus6defineI9FsmPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	3380      	adds	r3, #128	; 0x80
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	4413      	add	r3, r2
 80137c8:	685b      	ldr	r3, [r3, #4]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	68fa      	ldr	r2, [r7, #12]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d101      	bne.n	80137d6 <_ZN10MessageBus6defineI9FsmPacketEEbh+0x66>
			return false; // Packet type already defined
 80137d2:	2300      	movs	r3, #0
 80137d4:	e023      	b.n	801381e <_ZN10MessageBus6defineI9FsmPacketEEbh+0xae>
		insertion_point++;
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	3301      	adds	r3, #1
 80137da:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137e2:	d1e4      	bne.n	80137ae <_ZN10MessageBus6defineI9FsmPacketEEbh+0x3e>
			insertion_point = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80137e8:	e7e1      	b.n	80137ae <_ZN10MessageBus6defineI9FsmPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80137ea:	78fb      	ldrb	r3, [r7, #3]
 80137ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137f0:	00db      	lsls	r3, r3, #3
 80137f2:	687a      	ldr	r2, [r7, #4]
 80137f4:	4413      	add	r3, r2
 80137f6:	3304      	adds	r3, #4
 80137f8:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	78fa      	ldrb	r2, [r7, #3]
 80137fe:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	b2da      	uxtb	r2, r3
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	68fa      	ldr	r2, [r7, #12]
 801380c:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 801380e:	687a      	ldr	r2, [r7, #4]
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	3380      	adds	r3, #128	; 0x80
 8013814:	009b      	lsls	r3, r3, #2
 8013816:	4413      	add	r3, r2
 8013818:	68ba      	ldr	r2, [r7, #8]
 801381a:	605a      	str	r2, [r3, #4]
	return true;
 801381c:	2301      	movs	r3, #1
}
 801381e:	4618      	mov	r0, r3
 8013820:	3718      	adds	r7, #24
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
 8013826:	bf00      	nop
 8013828:	08018f8c 	.word	0x08018f8c

0801382c <_ZN10MessageBus6defineI10DataPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	460b      	mov	r3, r1
 8013836:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013838:	2304      	movs	r3, #4
 801383a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 801383c:	4829      	ldr	r0, [pc, #164]	; (80138e4 <_ZN10MessageBus6defineI10DataPacketEEbh+0xb8>)
 801383e:	f7fe ffb1 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8013842:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	b2db      	uxtb	r3, r3
 8013848:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 801384a:	78fb      	ldrb	r3, [r7, #3]
 801384c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013850:	687a      	ldr	r2, [r7, #4]
 8013852:	00db      	lsls	r3, r3, #3
 8013854:	4413      	add	r3, r2
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d001      	beq.n	8013860 <_ZN10MessageBus6defineI10DataPacketEEbh+0x34>
		return false; // Packet ID already in use
 801385c:	2300      	movs	r3, #0
 801385e:	e03c      	b.n	80138da <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	2bff      	cmp	r3, #255	; 0xff
 8013864:	d901      	bls.n	801386a <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
		return false; // Packet size too large
 8013866:	2300      	movs	r3, #0
 8013868:	e037      	b.n	80138da <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	3380      	adds	r3, #128	; 0x80
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	4413      	add	r3, r2
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d015      	beq.n	80138a6 <_ZN10MessageBus6defineI10DataPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	3380      	adds	r3, #128	; 0x80
 8013880:	009b      	lsls	r3, r3, #2
 8013882:	4413      	add	r3, r2
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	68fa      	ldr	r2, [r7, #12]
 801388a:	429a      	cmp	r2, r3
 801388c:	d101      	bne.n	8013892 <_ZN10MessageBus6defineI10DataPacketEEbh+0x66>
			return false; // Packet type already defined
 801388e:	2300      	movs	r3, #0
 8013890:	e023      	b.n	80138da <_ZN10MessageBus6defineI10DataPacketEEbh+0xae>
		insertion_point++;
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	3301      	adds	r3, #1
 8013896:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801389e:	d1e4      	bne.n	801386a <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
			insertion_point = 0;
 80138a0:	2300      	movs	r3, #0
 80138a2:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 80138a4:	e7e1      	b.n	801386a <_ZN10MessageBus6defineI10DataPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 80138a6:	78fb      	ldrb	r3, [r7, #3]
 80138a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138ac:	00db      	lsls	r3, r3, #3
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	4413      	add	r3, r2
 80138b2:	3304      	adds	r3, #4
 80138b4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	78fa      	ldrb	r2, [r7, #3]
 80138ba:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	b2da      	uxtb	r2, r3
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	68fa      	ldr	r2, [r7, #12]
 80138c8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	3380      	adds	r3, #128	; 0x80
 80138d0:	009b      	lsls	r3, r3, #2
 80138d2:	4413      	add	r3, r2
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	605a      	str	r2, [r3, #4]
	return true;
 80138d8:	2301      	movs	r3, #1
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3718      	adds	r7, #24
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	08018f74 	.word	0x08018f74

080138e8 <_ZN10MessageBus6defineI10PingPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b086      	sub	sp, #24
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	460b      	mov	r3, r1
 80138f2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80138f4:	2308      	movs	r3, #8
 80138f6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80138f8:	4829      	ldr	r0, [pc, #164]	; (80139a0 <_ZN10MessageBus6defineI10PingPacketEEbh+0xb8>)
 80138fa:	f7fe ff53 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 80138fe:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	b2db      	uxtb	r3, r3
 8013904:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8013906:	78fb      	ldrb	r3, [r7, #3]
 8013908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	00db      	lsls	r3, r3, #3
 8013910:	4413      	add	r3, r2
 8013912:	689b      	ldr	r3, [r3, #8]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <_ZN10MessageBus6defineI10PingPacketEEbh+0x34>
		return false; // Packet ID already in use
 8013918:	2300      	movs	r3, #0
 801391a:	e03c      	b.n	8013996 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	2bff      	cmp	r3, #255	; 0xff
 8013920:	d901      	bls.n	8013926 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
		return false; // Packet size too large
 8013922:	2300      	movs	r3, #0
 8013924:	e037      	b.n	8013996 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	3380      	adds	r3, #128	; 0x80
 801392c:	009b      	lsls	r3, r3, #2
 801392e:	4413      	add	r3, r2
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d015      	beq.n	8013962 <_ZN10MessageBus6defineI10PingPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	3380      	adds	r3, #128	; 0x80
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	4413      	add	r3, r2
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	68fa      	ldr	r2, [r7, #12]
 8013946:	429a      	cmp	r2, r3
 8013948:	d101      	bne.n	801394e <_ZN10MessageBus6defineI10PingPacketEEbh+0x66>
			return false; // Packet type already defined
 801394a:	2300      	movs	r3, #0
 801394c:	e023      	b.n	8013996 <_ZN10MessageBus6defineI10PingPacketEEbh+0xae>
		insertion_point++;
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	3301      	adds	r3, #1
 8013952:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801395a:	d1e4      	bne.n	8013926 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
			insertion_point = 0;
 801395c:	2300      	movs	r3, #0
 801395e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013960:	e7e1      	b.n	8013926 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8013962:	78fb      	ldrb	r3, [r7, #3]
 8013964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013968:	00db      	lsls	r3, r3, #3
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	4413      	add	r3, r2
 801396e:	3304      	adds	r3, #4
 8013970:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	78fa      	ldrb	r2, [r7, #3]
 8013976:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	b2da      	uxtb	r2, r3
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	68fa      	ldr	r2, [r7, #12]
 8013984:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	697b      	ldr	r3, [r7, #20]
 801398a:	3380      	adds	r3, #128	; 0x80
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	4413      	add	r3, r2
 8013990:	68ba      	ldr	r2, [r7, #8]
 8013992:	605a      	str	r2, [r3, #4]
	return true;
 8013994:	2301      	movs	r3, #1
}
 8013996:	4618      	mov	r0, r3
 8013998:	3718      	adds	r7, #24
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	08018f5c 	.word	0x08018f5c

080139a4 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b086      	sub	sp, #24
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	460b      	mov	r3, r1
 80139ae:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 80139b0:	2301      	movs	r3, #1
 80139b2:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 80139b4:	4829      	ldr	r0, [pc, #164]	; (8013a5c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xb8>)
 80139b6:	f7fe fef5 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 80139ba:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 80139c2:	78fb      	ldrb	r3, [r7, #3]
 80139c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	00db      	lsls	r3, r3, #3
 80139cc:	4413      	add	r3, r2
 80139ce:	689b      	ldr	r3, [r3, #8]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d001      	beq.n	80139d8 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x34>
		return false; // Packet ID already in use
 80139d4:	2300      	movs	r3, #0
 80139d6:	e03c      	b.n	8013a52 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	2bff      	cmp	r3, #255	; 0xff
 80139dc:	d901      	bls.n	80139e2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
		return false; // Packet size too large
 80139de:	2300      	movs	r3, #0
 80139e0:	e037      	b.n	8013a52 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	3380      	adds	r3, #128	; 0x80
 80139e8:	009b      	lsls	r3, r3, #2
 80139ea:	4413      	add	r3, r2
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d015      	beq.n	8013a1e <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	3380      	adds	r3, #128	; 0x80
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	4413      	add	r3, r2
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	68fa      	ldr	r2, [r7, #12]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d101      	bne.n	8013a0a <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x66>
			return false; // Packet type already defined
 8013a06:	2300      	movs	r3, #0
 8013a08:	e023      	b.n	8013a52 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xae>
		insertion_point++;
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	3301      	adds	r3, #1
 8013a0e:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a16:	d1e4      	bne.n	80139e2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
			insertion_point = 0;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013a1c:	e7e1      	b.n	80139e2 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8013a1e:	78fb      	ldrb	r3, [r7, #3]
 8013a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a24:	00db      	lsls	r3, r3, #3
 8013a26:	687a      	ldr	r2, [r7, #4]
 8013a28:	4413      	add	r3, r2
 8013a2a:	3304      	adds	r3, #4
 8013a2c:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	78fa      	ldrb	r2, [r7, #3]
 8013a32:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	b2da      	uxtb	r2, r3
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	68fa      	ldr	r2, [r7, #12]
 8013a40:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013a42:	687a      	ldr	r2, [r7, #4]
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	3380      	adds	r3, #128	; 0x80
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	4413      	add	r3, r2
 8013a4c:	68ba      	ldr	r2, [r7, #8]
 8013a4e:	605a      	str	r2, [r3, #4]
	return true;
 8013a50:	2301      	movs	r3, #1
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3718      	adds	r7, #24
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	08018f44 	.word	0x08018f44

08013a60 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b086      	sub	sp, #24
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	460b      	mov	r3, r1
 8013a6a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013a6c:	2308      	movs	r3, #8
 8013a6e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8013a70:	4829      	ldr	r0, [pc, #164]	; (8013b18 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xb8>)
 8013a72:	f7fe fe97 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8013a76:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8013a7e:	78fb      	ldrb	r3, [r7, #3]
 8013a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	00db      	lsls	r3, r3, #3
 8013a88:	4413      	add	r3, r2
 8013a8a:	689b      	ldr	r3, [r3, #8]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d001      	beq.n	8013a94 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x34>
		return false; // Packet ID already in use
 8013a90:	2300      	movs	r3, #0
 8013a92:	e03c      	b.n	8013b0e <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	2bff      	cmp	r3, #255	; 0xff
 8013a98:	d901      	bls.n	8013a9e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
		return false; // Packet size too large
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	e037      	b.n	8013b0e <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	3380      	adds	r3, #128	; 0x80
 8013aa4:	009b      	lsls	r3, r3, #2
 8013aa6:	4413      	add	r3, r2
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d015      	beq.n	8013ada <_ZN10MessageBus6defineI13RequestPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013aae:	687a      	ldr	r2, [r7, #4]
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	3380      	adds	r3, #128	; 0x80
 8013ab4:	009b      	lsls	r3, r3, #2
 8013ab6:	4413      	add	r3, r2
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	68fa      	ldr	r2, [r7, #12]
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d101      	bne.n	8013ac6 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x66>
			return false; // Packet type already defined
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	e023      	b.n	8013b0e <_ZN10MessageBus6defineI13RequestPacketEEbh+0xae>
		insertion_point++;
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ad2:	d1e4      	bne.n	8013a9e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
			insertion_point = 0;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013ad8:	e7e1      	b.n	8013a9e <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8013ada:	78fb      	ldrb	r3, [r7, #3]
 8013adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ae0:	00db      	lsls	r3, r3, #3
 8013ae2:	687a      	ldr	r2, [r7, #4]
 8013ae4:	4413      	add	r3, r2
 8013ae6:	3304      	adds	r3, #4
 8013ae8:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	78fa      	ldrb	r2, [r7, #3]
 8013aee:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	b2da      	uxtb	r2, r3
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	68fa      	ldr	r2, [r7, #12]
 8013afc:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	3380      	adds	r3, #128	; 0x80
 8013b04:	009b      	lsls	r3, r3, #2
 8013b06:	4413      	add	r3, r2
 8013b08:	68ba      	ldr	r2, [r7, #8]
 8013b0a:	605a      	str	r2, [r3, #4]
	return true;
 8013b0c:	2301      	movs	r3, #1
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3718      	adds	r7, #24
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop
 8013b18:	08018f2c 	.word	0x08018f2c

08013b1c <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b086      	sub	sp, #24
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	460b      	mov	r3, r1
 8013b26:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013b28:	2308      	movs	r3, #8
 8013b2a:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8013b2c:	4829      	ldr	r0, [pc, #164]	; (8013bd4 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xb8>)
 8013b2e:	f7fe fe39 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8013b32:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	b2db      	uxtb	r3, r3
 8013b38:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8013b3a:	78fb      	ldrb	r3, [r7, #3]
 8013b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b40:	687a      	ldr	r2, [r7, #4]
 8013b42:	00db      	lsls	r3, r3, #3
 8013b44:	4413      	add	r3, r2
 8013b46:	689b      	ldr	r3, [r3, #8]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x34>
		return false; // Packet ID already in use
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	e03c      	b.n	8013bca <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8013b50:	693b      	ldr	r3, [r7, #16]
 8013b52:	2bff      	cmp	r3, #255	; 0xff
 8013b54:	d901      	bls.n	8013b5a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
		return false; // Packet size too large
 8013b56:	2300      	movs	r3, #0
 8013b58:	e037      	b.n	8013bca <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013b5a:	687a      	ldr	r2, [r7, #4]
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	3380      	adds	r3, #128	; 0x80
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	4413      	add	r3, r2
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d015      	beq.n	8013b96 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013b6a:	687a      	ldr	r2, [r7, #4]
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	3380      	adds	r3, #128	; 0x80
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	4413      	add	r3, r2
 8013b74:	685b      	ldr	r3, [r3, #4]
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	68fa      	ldr	r2, [r7, #12]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d101      	bne.n	8013b82 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x66>
			return false; // Packet type already defined
 8013b7e:	2300      	movs	r3, #0
 8013b80:	e023      	b.n	8013bca <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xae>
		insertion_point++;
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	3301      	adds	r3, #1
 8013b86:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b8e:	d1e4      	bne.n	8013b5a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
			insertion_point = 0;
 8013b90:	2300      	movs	r3, #0
 8013b92:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013b94:	e7e1      	b.n	8013b5a <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8013b96:	78fb      	ldrb	r3, [r7, #3]
 8013b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b9c:	00db      	lsls	r3, r3, #3
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	4413      	add	r3, r2
 8013ba2:	3304      	adds	r3, #4
 8013ba4:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	78fa      	ldrb	r2, [r7, #3]
 8013baa:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013bac:	693b      	ldr	r3, [r7, #16]
 8013bae:	b2da      	uxtb	r2, r3
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	68fa      	ldr	r2, [r7, #12]
 8013bb8:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	3380      	adds	r3, #128	; 0x80
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	4413      	add	r3, r2
 8013bc4:	68ba      	ldr	r2, [r7, #8]
 8013bc6:	605a      	str	r2, [r3, #4]
	return true;
 8013bc8:	2301      	movs	r3, #1
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3718      	adds	r7, #24
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	08018f10 	.word	0x08018f10

08013bd8 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b086      	sub	sp, #24
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	460b      	mov	r3, r1
 8013be2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
 8013be4:	2305      	movs	r3, #5
 8013be6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
 8013be8:	4829      	ldr	r0, [pc, #164]	; (8013c90 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xb8>)
 8013bea:	f7fe fddb 	bl	80127a4 <_ZNKSt9type_info9hash_codeEv>
 8013bee:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	b2db      	uxtb	r3, r3
 8013bf4:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
 8013bf6:	78fb      	ldrb	r3, [r7, #3]
 8013bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	00db      	lsls	r3, r3, #3
 8013c00:	4413      	add	r3, r2
 8013c02:	689b      	ldr	r3, [r3, #8]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d001      	beq.n	8013c0c <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x34>
		return false; // Packet ID already in use
 8013c08:	2300      	movs	r3, #0
 8013c0a:	e03c      	b.n	8013c86 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	if(struct_size > max_packet_size) {
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	2bff      	cmp	r3, #255	; 0xff
 8013c10:	d901      	bls.n	8013c16 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
		return false; // Packet size too large
 8013c12:	2300      	movs	r3, #0
 8013c14:	e037      	b.n	8013c86 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
	while(definitions_by_type[insertion_point] != nullptr) {
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	3380      	adds	r3, #128	; 0x80
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	4413      	add	r3, r2
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d015      	beq.n	8013c52 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x7a>
		if(definitions_by_type[insertion_point]->hash == hash) {
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	3380      	adds	r3, #128	; 0x80
 8013c2c:	009b      	lsls	r3, r3, #2
 8013c2e:	4413      	add	r3, r2
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	68fa      	ldr	r2, [r7, #12]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d101      	bne.n	8013c3e <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x66>
			return false; // Packet type already defined
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	e023      	b.n	8013c86 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xae>
		insertion_point++;
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	3301      	adds	r3, #1
 8013c42:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c4a:	d1e4      	bne.n	8013c16 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
			insertion_point = 0;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
 8013c50:	e7e1      	b.n	8013c16 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3e>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
 8013c52:	78fb      	ldrb	r3, [r7, #3]
 8013c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013c58:	00db      	lsls	r3, r3, #3
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	4413      	add	r3, r2
 8013c5e:	3304      	adds	r3, #4
 8013c60:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	78fa      	ldrb	r2, [r7, #3]
 8013c66:	701a      	strb	r2, [r3, #0]
	def->size = (uint8_t) struct_size;
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	b2da      	uxtb	r2, r3
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	705a      	strb	r2, [r3, #1]
	def->hash = hash;
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	68fa      	ldr	r2, [r7, #12]
 8013c74:	605a      	str	r2, [r3, #4]
	definitions_by_type[insertion_point] = def;
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	3380      	adds	r3, #128	; 0x80
 8013c7c:	009b      	lsls	r3, r3, #2
 8013c7e:	4413      	add	r3, r2
 8013c80:	68ba      	ldr	r2, [r7, #8]
 8013c82:	605a      	str	r2, [r3, #4]
	return true;
 8013c84:	2301      	movs	r3, #1
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3718      	adds	r7, #24
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	08018ef4 	.word	0x08018ef4

08013c94 <_ZN10MessageBus4sendEP16PacketDefinitionPh>:
	PacketDefinition* def = retrieve(hash);

	return send(def, (uint8_t*) message);
}

bool MessageBus::send(PacketDefinition* def, uint8_t* data) {
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b086      	sub	sp, #24
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	60b9      	str	r1, [r7, #8]
 8013c9e:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d031      	beq.n	8013d0a <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x76>
		uint32_t data_bytes_written = 0;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	617b      	str	r3, [r7, #20]
//		append(&def->id, 1);
		while(data_bytes_written < def->size) {
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	785b      	ldrb	r3, [r3, #1]
 8013cae:	461a      	mov	r2, r3
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	4293      	cmp	r3, r2
 8013cb4:	d221      	bcs.n	8013cfa <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x66>
			append(&def->id, 1); // Write the packet ID for each transmission frame.
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	3308      	adds	r3, #8
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	68b9      	ldr	r1, [r7, #8]
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	3308      	adds	r3, #8
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	6879      	ldr	r1, [r7, #4]
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	4411      	add	r1, r2
 8013cd4:	68ba      	ldr	r2, [r7, #8]
 8013cd6:	7852      	ldrb	r2, [r2, #1]
 8013cd8:	4610      	mov	r0, r2
 8013cda:	697a      	ldr	r2, [r7, #20]
 8013cdc:	1a82      	subs	r2, r0, r2
 8013cde:	68f8      	ldr	r0, [r7, #12]
 8013ce0:	4798      	blx	r3
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	613b      	str	r3, [r7, #16]

			if(new_bytes == 0) {
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d101      	bne.n	8013cf0 <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x5c>
				return false;
 8013cec:	2300      	movs	r3, #0
 8013cee:	e00d      	b.n	8013d0c <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
			} else {
				data_bytes_written += new_bytes;
 8013cf0:	697a      	ldr	r2, [r7, #20]
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	617b      	str	r3, [r7, #20]
		while(data_bytes_written < def->size) {
 8013cf8:	e7d7      	b.n	8013caa <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x16>
			}
		}

		transmit();
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	330c      	adds	r3, #12
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	68f8      	ldr	r0, [r7, #12]
 8013d04:	4798      	blx	r3

		return true;
 8013d06:	2301      	movs	r3, #1
 8013d08:	e000      	b.n	8013d0c <_ZN10MessageBus4sendEP16PacketDefinitionPh+0x78>
	}

	return false;
 8013d0a:	2300      	movs	r3, #0
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3718      	adds	r7, #24
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <_ZN10MessageBus7receiveEhPhm>:
 * Handles the reception of a message.
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b08a      	sub	sp, #40	; 0x28
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	607a      	str	r2, [r7, #4]
 8013d1e:	603b      	str	r3, [r7, #0]
 8013d20:	460b      	mov	r3, r1
 8013d22:	72fb      	strb	r3, [r7, #11]
	if(length > 0) {
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	f000 80ec 	beq.w	8013f04 <_ZN10MessageBus7receiveEhPhm+0x1f0>
		ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
 8013d2c:	7afb      	ldrb	r3, [r7, #11]
 8013d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013d32:	4613      	mov	r3, r2
 8013d34:	021b      	lsls	r3, r3, #8
 8013d36:	4413      	add	r3, r2
 8013d38:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	4413      	add	r3, r2
 8013d40:	3304      	adds	r3, #4
 8013d42:	61fb      	str	r3, [r7, #28]
		uint8_t packet_id = 0xFF;
 8013d44:	23ff      	movs	r3, #255	; 0xff
 8013d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(indexable_buffer->index == 0) {
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d115      	bne.n	8013d80 <_ZN10MessageBus7receiveEhPhm+0x6c>
			packet_id = *pointer++; // Packet ID is the first element in a frame
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	1c5a      	adds	r2, r3, #1
 8013d58:	607a      	str	r2, [r7, #4]
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			indexable_buffer->current_packet_id = packet_id;
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013d66:	701a      	strb	r2, [r3, #0]
			indexable_buffer->index++;
 8013d68:	69fb      	ldr	r3, [r7, #28]
 8013d6a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8013d6e:	3301      	adds	r3, #1
 8013d70:	b2da      	uxtb	r2, r3
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			length--;
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	3b01      	subs	r3, #1
 8013d7c:	603b      	str	r3, [r7, #0]
 8013d7e:	e003      	b.n	8013d88 <_ZN10MessageBus7receiveEhPhm+0x74>
		} else {
			packet_id = indexable_buffer->current_packet_id;
 8013d80:	69fb      	ldr	r3, [r7, #28]
 8013d82:	781b      	ldrb	r3, [r3, #0]
 8013d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		PacketDefinition* def = &definitions_by_id[packet_id & 0b00111111];
 8013d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d90:	00db      	lsls	r3, r3, #3
 8013d92:	68fa      	ldr	r2, [r7, #12]
 8013d94:	4413      	add	r3, r2
 8013d96:	3304      	adds	r3, #4
 8013d98:	61bb      	str	r3, [r7, #24]

		if(def->id != packet_id || indexable_buffer->index + length > max_packet_size) {
 8013d9a:	69bb      	ldr	r3, [r7, #24]
 8013d9c:	781b      	ldrb	r3, [r3, #0]
 8013d9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d107      	bne.n	8013db6 <_ZN10MessageBus7receiveEhPhm+0xa2>
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8013dac:	461a      	mov	r2, r3
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	4413      	add	r3, r2
 8013db2:	2bff      	cmp	r3, #255	; 0xff
 8013db4:	d90d      	bls.n	8013dd2 <_ZN10MessageBus7receiveEhPhm+0xbe>
			// Invalid packet
			indexable_buffer->index = 0; // Corrupted packet
 8013db6:	69fb      	ldr	r3, [r7, #28]
 8013db8:	2200      	movs	r2, #0
 8013dba:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
			indexable_buffer->current_packet_id = 0;
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	701a      	strb	r2, [r3, #0]


			//console.printf("Corrupted ID: %d\r\n", packet_id);

			receive(sender_id, pointer, length);
 8013dc4:	7af9      	ldrb	r1, [r7, #11]
 8013dc6:	683b      	ldr	r3, [r7, #0]
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	68f8      	ldr	r0, [r7, #12]
 8013dcc:	f7ff ffa2 	bl	8013d14 <_ZN10MessageBus7receiveEhPhm>

			return;
 8013dd0:	e098      	b.n	8013f04 <_ZN10MessageBus7receiveEhPhm+0x1f0>
		}

		for(uint16_t i = 0; i < length; i++) {
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013dd8:	683a      	ldr	r2, [r7, #0]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d913      	bls.n	8013e06 <_ZN10MessageBus7receiveEhPhm+0xf2>
			indexable_buffer->buffer[indexable_buffer->index++] = *pointer++;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	1c5a      	adds	r2, r3, #1
 8013de2:	607a      	str	r2, [r7, #4]
 8013de4:	69fa      	ldr	r2, [r7, #28]
 8013de6:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 8013dea:	1c51      	adds	r1, r2, #1
 8013dec:	b2c8      	uxtb	r0, r1
 8013dee:	69f9      	ldr	r1, [r7, #28]
 8013df0:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
 8013df4:	4611      	mov	r1, r2
 8013df6:	781a      	ldrb	r2, [r3, #0]
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	440b      	add	r3, r1
 8013dfc:	705a      	strb	r2, [r3, #1]
		for(uint16_t i = 0; i < length; i++) {
 8013dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e00:	3301      	adds	r3, #1
 8013e02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013e04:	e7e7      	b.n	8013dd6 <_ZN10MessageBus7receiveEhPhm+0xc2>
		}

		int16_t excess = indexable_buffer->index - (def->size + 1);
 8013e06:	69fb      	ldr	r3, [r7, #28]
 8013e08:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	785b      	ldrb	r3, [r3, #1]
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	1ad3      	subs	r3, r2, r3
 8013e16:	b29b      	uxth	r3, r3
 8013e18:	3b01      	subs	r3, #1
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	82fb      	strh	r3, [r7, #22]

		if(excess >= 0) {
 8013e1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	db6e      	blt.n	8013f04 <_ZN10MessageBus7receiveEhPhm+0x1f0>
			// Packet is complete.
			//console.printf("Correct ID: %d\r\n", packet_id);

			if(handlers[packet_id & 0b00111111] != nullptr) {
 8013e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e2e:	011b      	lsls	r3, r3, #4
 8013e30:	f603 6308 	addw	r3, r3, #3592	; 0xe08
 8013e34:	68fa      	ldr	r2, [r7, #12]
 8013e36:	4413      	add	r3, r2
 8013e38:	3304      	adds	r3, #4
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f000 f8db 	bl	8013ff8 <_ZStneIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>
 8013e42:	4603      	mov	r3, r0
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d010      	beq.n	8013e6a <_ZN10MessageBus7receiveEhPhm+0x156>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer + 1);
 8013e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e50:	011b      	lsls	r3, r3, #4
 8013e52:	f603 6308 	addw	r3, r3, #3592	; 0xe08
 8013e56:	68fa      	ldr	r2, [r7, #12]
 8013e58:	4413      	add	r3, r2
 8013e5a:	1d18      	adds	r0, r3, #4
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	1c5a      	adds	r2, r3, #1
 8013e62:	7afb      	ldrb	r3, [r7, #11]
 8013e64:	4619      	mov	r1, r3
 8013e66:	f000 f8d4 	bl	8014012 <_ZNKSt8functionIFvhPvEEclEhS0_>
			}


			if(forwarders[packet_id & 0b00111111] != nullptr) {
 8013e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e72:	68fa      	ldr	r2, [r7, #12]
 8013e74:	f203 4382 	addw	r3, r3, #1154	; 0x482
 8013e78:	009b      	lsls	r3, r3, #2
 8013e7a:	4413      	add	r3, r2
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d01b      	beq.n	8013eba <_ZN10MessageBus7receiveEhPhm+0x1a6>
				forwarders[packet_id & 0b00111111]->send(def, indexable_buffer->buffer + 1);
 8013e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e8a:	68fa      	ldr	r2, [r7, #12]
 8013e8c:	f203 4382 	addw	r3, r3, #1154	; 0x482
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	4413      	add	r3, r2
 8013e94:	6858      	ldr	r0, [r3, #4]
 8013e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e9e:	68fa      	ldr	r2, [r7, #12]
 8013ea0:	f203 4382 	addw	r3, r3, #1154	; 0x482
 8013ea4:	009b      	lsls	r3, r3, #2
 8013ea6:	4413      	add	r3, r2
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	3310      	adds	r3, #16
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	69fa      	ldr	r2, [r7, #28]
 8013eb2:	3201      	adds	r2, #1
 8013eb4:	3201      	adds	r2, #1
 8013eb6:	69b9      	ldr	r1, [r7, #24]
 8013eb8:	4798      	blx	r3
			}

			if(excess > 0) {
 8013eba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	dd1b      	ble.n	8013efa <_ZN10MessageBus7receiveEhPhm+0x1e6>
				for(uint16_t i = 0; i < excess; i++) {
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	847b      	strh	r3, [r7, #34]	; 0x22
 8013ec6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013ec8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	da10      	bge.n	8013ef2 <_ZN10MessageBus7receiveEhPhm+0x1de>
					indexable_buffer->buffer[i] = indexable_buffer->buffer[i + (def->size + 1)];
 8013ed0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013ed2:	69bb      	ldr	r3, [r7, #24]
 8013ed4:	785b      	ldrb	r3, [r3, #1]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	441a      	add	r2, r3
 8013eda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013edc:	69f9      	ldr	r1, [r7, #28]
 8013ede:	440a      	add	r2, r1
 8013ee0:	7851      	ldrb	r1, [r2, #1]
 8013ee2:	69fa      	ldr	r2, [r7, #28]
 8013ee4:	4413      	add	r3, r2
 8013ee6:	460a      	mov	r2, r1
 8013ee8:	705a      	strb	r2, [r3, #1]
				for(uint16_t i = 0; i < excess; i++) {
 8013eea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013eec:	3301      	adds	r3, #1
 8013eee:	847b      	strh	r3, [r7, #34]	; 0x22
 8013ef0:	e7e9      	b.n	8013ec6 <_ZN10MessageBus7receiveEhPhm+0x1b2>
				}

				indexable_buffer->current_packet_id = indexable_buffer->buffer[0];
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	785a      	ldrb	r2, [r3, #1]
 8013ef6:	69fb      	ldr	r3, [r7, #28]
 8013ef8:	701a      	strb	r2, [r3, #0]
			}

			indexable_buffer->index = excess;
 8013efa:	8afb      	ldrh	r3, [r7, #22]
 8013efc:	b2da      	uxtb	r2, r3
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		}
	}
}
 8013f04:	3728      	adds	r7, #40	; 0x28
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}

08013f0a <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
 8013f0a:	b480      	push	{r7}
 8013f0c:	b085      	sub	sp, #20
 8013f0e:	af00      	add	r7, sp, #0
 8013f10:	6078      	str	r0, [r7, #4]
 8013f12:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	b2db      	uxtb	r3, r3
 8013f18:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	3380      	adds	r3, #128	; 0x80
 8013f24:	009b      	lsls	r3, r3, #2
 8013f26:	4413      	add	r3, r2
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d01f      	beq.n	8013f6e <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	3380      	adds	r3, #128	; 0x80
 8013f34:	009b      	lsls	r3, r3, #2
 8013f36:	4413      	add	r3, r2
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	683a      	ldr	r2, [r7, #0]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d106      	bne.n	8013f50 <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
 8013f42:	687a      	ldr	r2, [r7, #4]
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	3380      	adds	r3, #128	; 0x80
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	4413      	add	r3, r2
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	e00f      	b.n	8013f70 <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	3301      	adds	r3, #1
 8013f54:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f5c:	d101      	bne.n	8013f62 <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
 8013f5e:	2300      	movs	r3, #0
 8013f60:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
 8013f62:	68ba      	ldr	r2, [r7, #8]
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d000      	beq.n	8013f6c <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
 8013f6a:	e7d8      	b.n	8013f1e <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
 8013f6c:	bf00      	nop
		}
	}

	return nullptr;
 8013f6e:	2300      	movs	r3, #0
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3714      	adds	r7, #20
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr

08013f7c <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENKUlhPvE_clEhS7_>:
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	460b      	mov	r3, r1
 8013f86:	607a      	str	r2, [r7, #4]
 8013f88:	72fb      	strb	r3, [r7, #11]
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	791b      	ldrb	r3, [r3, #4]
				handlers[packetID](sender, (T*) packet);
 8013f92:	011b      	lsls	r3, r3, #4
 8013f94:	f603 6308 	addw	r3, r3, #3592	; 0xe08
 8013f98:	4413      	add	r3, r2
 8013f9a:	3304      	adds	r3, #4
 8013f9c:	7af9      	ldrb	r1, [r7, #11]
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f000 f836 	bl	8014012 <_ZNKSt8functionIFvhPvEEclEhS0_>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	689b      	ldr	r3, [r3, #8]
				handler(sender, (T*) packet);
 8013faa:	7af9      	ldrb	r1, [r7, #11]
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f000 f855 	bl	801405e <_ZNKSt8functionIFvhP19avionics_IMU_packetEEclEhS1_>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
 8013fb4:	bf00      	nop
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENKUlhPvE0_clEhS7_>:
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	607a      	str	r2, [r7, #4]
 8013fc8:	72fb      	strb	r3, [r7, #11]
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	7af9      	ldrb	r1, [r7, #11]
 8013fce:	687a      	ldr	r2, [r7, #4]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f000 f844 	bl	801405e <_ZNKSt8functionIFvhP19avionics_IMU_packetEEclEhS1_>
 8013fd6:	bf00      	nop
 8013fd8:	3710      	adds	r7, #16
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}

08013fde <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>:
 8013fde:	b580      	push	{r7, lr}
 8013fe0:	b082      	sub	sp, #8
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7ed fb1b 	bl	8001624 <_ZNSt8functionIFvhP19avionics_IMU_packetEED1Ev>
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3708      	adds	r7, #8
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}

08013ff8 <_ZStneIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 f8cd 	bl	80141a2 <_ZNKSt8functionIFvhPvEEcvbEv>
 8014008:	4603      	mov	r3, r0
 801400a:	4618      	mov	r0, r3
 801400c:	3708      	adds	r7, #8
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <_ZNKSt8functionIFvhPvEEclEhS0_>:
    function<_Res(_ArgTypes...)>::
 8014012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014014:	b085      	sub	sp, #20
 8014016:	af00      	add	r7, sp, #0
 8014018:	60f8      	str	r0, [r7, #12]
 801401a:	460b      	mov	r3, r1
 801401c:	607a      	str	r2, [r7, #4]
 801401e:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	4618      	mov	r0, r3
 8014024:	f7fe fbda 	bl	80127dc <_ZNKSt14_Function_base8_M_emptyEv>
 8014028:	4603      	mov	r3, r0
 801402a:	2b00      	cmp	r3, #0
 801402c:	d001      	beq.n	8014032 <_ZNKSt8functionIFvhPvEEclEhS0_+0x20>
	__throw_bad_function_call();
 801402e:	f001 fdc9 	bl	8015bc4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	68dc      	ldr	r4, [r3, #12]
 8014036:	68fd      	ldr	r5, [r7, #12]
 8014038:	f107 030b 	add.w	r3, r7, #11
 801403c:	4618      	mov	r0, r3
 801403e:	f7ed fdc1 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8014042:	4606      	mov	r6, r0
 8014044:	1d3b      	adds	r3, r7, #4
 8014046:	4618      	mov	r0, r3
 8014048:	f000 f8bb 	bl	80141c2 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 801404c:	4603      	mov	r3, r0
 801404e:	461a      	mov	r2, r3
 8014050:	4631      	mov	r1, r6
 8014052:	4628      	mov	r0, r5
 8014054:	47a0      	blx	r4
 8014056:	bf00      	nop
    }
 8014058:	3714      	adds	r7, #20
 801405a:	46bd      	mov	sp, r7
 801405c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801405e <_ZNKSt8functionIFvhP19avionics_IMU_packetEEclEhS1_>:
    function<_Res(_ArgTypes...)>::
 801405e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014060:	b085      	sub	sp, #20
 8014062:	af00      	add	r7, sp, #0
 8014064:	60f8      	str	r0, [r7, #12]
 8014066:	460b      	mov	r3, r1
 8014068:	607a      	str	r2, [r7, #4]
 801406a:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	4618      	mov	r0, r3
 8014070:	f7fe fbb4 	bl	80127dc <_ZNKSt14_Function_base8_M_emptyEv>
 8014074:	4603      	mov	r3, r0
 8014076:	2b00      	cmp	r3, #0
 8014078:	d001      	beq.n	801407e <_ZNKSt8functionIFvhP19avionics_IMU_packetEEclEhS1_+0x20>
	__throw_bad_function_call();
 801407a:	f001 fda3 	bl	8015bc4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	68dc      	ldr	r4, [r3, #12]
 8014082:	68fd      	ldr	r5, [r7, #12]
 8014084:	f107 030b 	add.w	r3, r7, #11
 8014088:	4618      	mov	r0, r3
 801408a:	f7ed fd9b 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801408e:	4606      	mov	r6, r0
 8014090:	1d3b      	adds	r3, r7, #4
 8014092:	4618      	mov	r0, r3
 8014094:	f7ed fda1 	bl	8001bda <_ZSt7forwardIP19avionics_IMU_packetEOT_RNSt16remove_referenceIS2_E4typeE>
 8014098:	4603      	mov	r3, r0
 801409a:	461a      	mov	r2, r3
 801409c:	4631      	mov	r1, r6
 801409e:	4628      	mov	r0, r5
 80140a0:	47a0      	blx	r4
 80140a2:	bf00      	nop
    }
 80140a4:	3714      	adds	r7, #20
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080140aa <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIS7_E4typeESt15__invoke_resultIRSG_JhS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 80140aa:	b580      	push	{r7, lr}
 80140ac:	b086      	sub	sp, #24
 80140ae:	af00      	add	r7, sp, #0
 80140b0:	6078      	str	r0, [r7, #4]
 80140b2:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80140b4:	6838      	ldr	r0, [r7, #0]
 80140b6:	f000 f8b0 	bl	801421a <_ZSt7forwardIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80140ba:	4603      	mov	r3, r0
 80140bc:	f107 0008 	add.w	r0, r7, #8
 80140c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80140c2:	f000 f8b5 	bl	8014230 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E_vvEES7_>
 80140c6:	f107 0308 	add.w	r3, r7, #8
 80140ca:	6879      	ldr	r1, [r7, #4]
 80140cc:	4618      	mov	r0, r3
 80140ce:	f000 f883 	bl	80141d8 <_ZNSt8functionIFvhPvEE4swapERS2_>
 80140d2:	f107 0308 	add.w	r3, r7, #8
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7fd f9e0 	bl	801149c <_ZNSt8functionIFvhPvEED1Ev>
	  return *this;
 80140dc:	687b      	ldr	r3, [r7, #4]
	}
 80140de:	4618      	mov	r0, r3
 80140e0:	3718      	adds	r7, #24
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}

080140e6 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80140e6:	b580      	push	{r7, lr}
 80140e8:	b082      	sub	sp, #8
 80140ea:	af00      	add	r7, sp, #0
 80140ec:	6078      	str	r0, [r7, #4]
 80140ee:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7ed fa64 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80140f8:	6838      	ldr	r0, [r7, #0]
 80140fa:	f000 f8c5 	bl	8014288 <_ZNKSt8functionIFvhP19avionics_IMU_packetEEcvbEv>
 80140fe:	4603      	mov	r3, r0
 8014100:	2b00      	cmp	r3, #0
 8014102:	d00d      	beq.n	8014120 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	689b      	ldr	r3, [r3, #8]
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	6839      	ldr	r1, [r7, #0]
 801410c:	2202      	movs	r2, #2
 801410e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	68da      	ldr	r2, [r3, #12]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	689a      	ldr	r2, [r3, #8]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	609a      	str	r2, [r3, #8]
    }
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	4618      	mov	r0, r3
 8014124:	3708      	adds	r7, #8
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>:
 801412a:	b580      	push	{r7, lr}
 801412c:	b082      	sub	sp, #8
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
 8014132:	6039      	str	r1, [r7, #0]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	683a      	ldr	r2, [r7, #0]
 8014138:	4611      	mov	r1, r2
 801413a:	4618      	mov	r0, r3
 801413c:	f000 f8bf 	bl	80142be <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1EOS3_>
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	4618      	mov	r0, r3
 8014144:	3708      	adds	r7, #8
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}

0801414a <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E0_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIS7_E4typeESt15__invoke_resultIRSG_JhS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 801414a:	b580      	push	{r7, lr}
 801414c:	b08a      	sub	sp, #40	; 0x28
 801414e:	af00      	add	r7, sp, #0
 8014150:	6078      	str	r0, [r7, #4]
 8014152:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8014154:	6838      	ldr	r0, [r7, #0]
 8014156:	f000 f8a7 	bl	80142a8 <_ZSt7forwardIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 801415a:	4602      	mov	r2, r0
 801415c:	f107 0318 	add.w	r3, r7, #24
 8014160:	4611      	mov	r1, r2
 8014162:	4618      	mov	r0, r3
 8014164:	f7ff ffe1 	bl	801412a <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>
 8014168:	f107 0218 	add.w	r2, r7, #24
 801416c:	f107 0308 	add.w	r3, r7, #8
 8014170:	4611      	mov	r1, r2
 8014172:	4618      	mov	r0, r3
 8014174:	f000 f8b6 	bl	80142e4 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_>
 8014178:	f107 0308 	add.w	r3, r7, #8
 801417c:	6879      	ldr	r1, [r7, #4]
 801417e:	4618      	mov	r0, r3
 8014180:	f000 f82a 	bl	80141d8 <_ZNSt8functionIFvhPvEE4swapERS2_>
 8014184:	f107 0308 	add.w	r3, r7, #8
 8014188:	4618      	mov	r0, r3
 801418a:	f7fd f987 	bl	801149c <_ZNSt8functionIFvhPvEED1Ev>
 801418e:	f107 0318 	add.w	r3, r7, #24
 8014192:	4618      	mov	r0, r3
 8014194:	f7ff ff23 	bl	8013fde <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
	  return *this;
 8014198:	687b      	ldr	r3, [r7, #4]
	}
 801419a:	4618      	mov	r0, r3
 801419c:	3728      	adds	r7, #40	; 0x28
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}

080141a2 <_ZNKSt8functionIFvhPvEEcvbEv>:
      explicit operator bool() const noexcept
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b082      	sub	sp, #8
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7fe fb15 	bl	80127dc <_ZNKSt14_Function_base8_M_emptyEv>
 80141b2:	4603      	mov	r3, r0
 80141b4:	f083 0301 	eor.w	r3, r3, #1
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	4618      	mov	r0, r3
 80141bc:	3708      	adds	r7, #8
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}

080141c2 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80141c2:	b480      	push	{r7}
 80141c4:	b083      	sub	sp, #12
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	4618      	mov	r0, r3
 80141ce:	370c      	adds	r7, #12
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr

080141d8 <_ZNSt8functionIFvhPvEE4swapERS2_>:
      void swap(function& __x) noexcept
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	4611      	mov	r1, r2
 80141e8:	4618      	mov	r0, r3
 80141ea:	f000 f8ae 	bl	801434a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f103 0208 	add.w	r2, r3, #8
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	3308      	adds	r3, #8
 80141f8:	4619      	mov	r1, r3
 80141fa:	4610      	mov	r0, r2
 80141fc:	f000 f8d7 	bl	80143ae <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f103 020c 	add.w	r2, r3, #12
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	330c      	adds	r3, #12
 801420a:	4619      	mov	r1, r3
 801420c:	4610      	mov	r0, r2
 801420e:	f000 f8f8 	bl	8014402 <_ZSt4swapIPFvRKSt9_Any_dataOhOPvEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8014212:	bf00      	nop
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <_ZSt7forwardIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801421a:	b480      	push	{r7}
 801421c:	b083      	sub	sp, #12
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E_vvEES7_>:
      function<_Res(_ArgTypes...)>::
 8014230:	b590      	push	{r4, r7, lr}
 8014232:	b085      	sub	sp, #20
 8014234:	af00      	add	r7, sp, #0
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	4638      	mov	r0, r7
 801423a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      : _Function_base()
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	4618      	mov	r0, r3
 8014242:	f7ed f9bd 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8014246:	463b      	mov	r3, r7
 8014248:	4618      	mov	r0, r3
 801424a:	f000 f8f9 	bl	8014440 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E21_M_not_empty_functionISA_EEbRKS5_>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	d00f      	beq.n	8014274 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E_vvEES7_+0x44>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8014254:	68fc      	ldr	r4, [r7, #12]
 8014256:	463b      	mov	r3, r7
 8014258:	4618      	mov	r0, r3
 801425a:	f000 f8fc 	bl	8014456 <_ZSt4moveIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EONSt16remove_referenceIS4_E4typeEOS4_>
 801425e:	4603      	mov	r3, r0
 8014260:	4619      	mov	r1, r3
 8014262:	4620      	mov	r0, r4
 8014264:	f000 f902 	bl	801446c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorERSt9_Any_dataOSA_>
	    _M_invoker = &_My_handler::_M_invoke;
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	4a05      	ldr	r2, [pc, #20]	; (8014280 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E_vvEES7_+0x50>)
 801426c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	4a04      	ldr	r2, [pc, #16]	; (8014284 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E_vvEES7_+0x54>)
 8014272:	609a      	str	r2, [r3, #8]
      }
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	4618      	mov	r0, r3
 8014278:	3714      	adds	r7, #20
 801427a:	46bd      	mov	sp, r7
 801427c:	bd90      	pop	{r4, r7, pc}
 801427e:	bf00      	nop
 8014280:	08014491 	.word	0x08014491
 8014284:	080144c9 	.word	0x080144c9

08014288 <_ZNKSt8functionIFvhP19avionics_IMU_packetEEcvbEv>:
      explicit operator bool() const noexcept
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	4618      	mov	r0, r3
 8014294:	f7fe faa2 	bl	80127dc <_ZNKSt14_Function_base8_M_emptyEv>
 8014298:	4603      	mov	r3, r0
 801429a:	f083 0301 	eor.w	r3, r3, #1
 801429e:	b2db      	uxtb	r3, r3
 80142a0:	4618      	mov	r0, r3
 80142a2:	3708      	adds	r7, #8
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <_ZSt7forwardIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80142a8:	b480      	push	{r7}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	4618      	mov	r0, r3
 80142b4:	370c      	adds	r7, #12
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1EOS3_>:
      function(function&& __x) noexcept : _Function_base()
 80142be:	b580      	push	{r7, lr}
 80142c0:	b082      	sub	sp, #8
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
 80142c6:	6039      	str	r1, [r7, #0]
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7ed f978 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 80142d0:	6879      	ldr	r1, [r7, #4]
 80142d2:	6838      	ldr	r0, [r7, #0]
 80142d4:	f000 f924 	bl	8014520 <_ZNSt8functionIFvhP19avionics_IMU_packetEE4swapERS3_>
      }
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	4618      	mov	r0, r3
 80142dc:	3708      	adds	r7, #8
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}
	...

080142e4 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_>:
      function<_Res(_ArgTypes...)>::
 80142e4:	b590      	push	{r4, r7, lr}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7ed f965 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80142f6:	6838      	ldr	r0, [r7, #0]
 80142f8:	f000 f933 	bl	8014562 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E21_M_not_empty_functionISA_EEbRKS5_>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d00e      	beq.n	8014320 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_+0x3c>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8014302:	687c      	ldr	r4, [r7, #4]
 8014304:	6838      	ldr	r0, [r7, #0]
 8014306:	f000 f937 	bl	8014578 <_ZSt4moveIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EONSt16remove_referenceIS4_E4typeEOS4_>
 801430a:	4603      	mov	r3, r0
 801430c:	4619      	mov	r1, r3
 801430e:	4620      	mov	r0, r4
 8014310:	f000 f93d 	bl	801458e <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorERSt9_Any_dataOSA_>
	    _M_invoker = &_My_handler::_M_invoke;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	4a05      	ldr	r2, [pc, #20]	; (801432c <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_+0x48>)
 8014318:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	4a04      	ldr	r2, [pc, #16]	; (8014330 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI19avionics_IMU_packetEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_+0x4c>)
 801431e:	609a      	str	r2, [r3, #8]
      }
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	4618      	mov	r0, r3
 8014324:	370c      	adds	r7, #12
 8014326:	46bd      	mov	sp, r7
 8014328:	bd90      	pop	{r4, r7, pc}
 801432a:	bf00      	nop
 801432c:	080145b3 	.word	0x080145b3
 8014330:	080145e9 	.word	0x080145e9

08014334 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	4618      	mov	r0, r3
 8014340:	370c      	adds	r7, #12
 8014342:	46bd      	mov	sp, r7
 8014344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014348:	4770      	bx	lr

0801434a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 801434a:	b580      	push	{r7, lr}
 801434c:	b084      	sub	sp, #16
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7ff ffed 	bl	8014334 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801435a:	4602      	mov	r2, r0
 801435c:	f107 0308 	add.w	r3, r7, #8
 8014360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014364:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8014368:	6838      	ldr	r0, [r7, #0]
 801436a:	f7ff ffe3 	bl	8014334 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801436e:	4602      	mov	r2, r0
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014376:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801437a:	f107 0308 	add.w	r3, r7, #8
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff ffd8 	bl	8014334 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8014384:	4602      	mov	r2, r0
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	e892 0003 	ldmia.w	r2, {r0, r1}
 801438c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014390:	bf00      	nop
 8014392:	3710      	adds	r7, #16
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	4618      	mov	r0, r3
 80143a4:	370c      	adds	r7, #12
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr

080143ae <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80143ae:	b580      	push	{r7, lr}
 80143b0:	b084      	sub	sp, #16
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
 80143b6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f7ff ffed 	bl	8014398 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80143be:	4603      	mov	r3, r0
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80143c4:	6838      	ldr	r0, [r7, #0]
 80143c6:	f7ff ffe7 	bl	8014398 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80143ca:	4603      	mov	r3, r0
 80143cc:	681a      	ldr	r2, [r3, #0]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80143d2:	f107 030c 	add.w	r3, r7, #12
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7ff ffde 	bl	8014398 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80143dc:	4603      	mov	r3, r0
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	601a      	str	r2, [r3, #0]
    }
 80143e4:	bf00      	nop
 80143e6:	3710      	adds	r7, #16
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	4618      	mov	r0, r3
 80143f8:	370c      	adds	r7, #12
 80143fa:	46bd      	mov	sp, r7
 80143fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014400:	4770      	bx	lr

08014402 <_ZSt4swapIPFvRKSt9_Any_dataOhOPvEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8014402:	b580      	push	{r7, lr}
 8014404:	b084      	sub	sp, #16
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
 801440a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7ff ffed 	bl	80143ec <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
 8014412:	4603      	mov	r3, r0
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8014418:	6838      	ldr	r0, [r7, #0]
 801441a:	f7ff ffe7 	bl	80143ec <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
 801441e:	4603      	mov	r3, r0
 8014420:	681a      	ldr	r2, [r3, #0]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8014426:	f107 030c 	add.w	r3, r7, #12
 801442a:	4618      	mov	r0, r3
 801442c:	f7ff ffde 	bl	80143ec <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
 8014430:	4603      	mov	r3, r0
 8014432:	681a      	ldr	r2, [r3, #0]
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	601a      	str	r2, [r3, #0]
    }
 8014438:	bf00      	nop
 801443a:	3710      	adds	r7, #16
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E21_M_not_empty_functionISA_EEbRKS5_>:
	  _M_not_empty_function(const _Tp&)
 8014440:	b480      	push	{r7}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
	  { return true; }
 8014448:	2301      	movs	r3, #1
 801444a:	4618      	mov	r0, r3
 801444c:	370c      	adds	r7, #12
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr

08014456 <_ZSt4moveIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EONSt16remove_referenceIS4_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8014456:	b480      	push	{r7}
 8014458:	b083      	sub	sp, #12
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4618      	mov	r0, r3
 8014462:	370c      	adds	r7, #12
 8014464:	46bd      	mov	sp, r7
 8014466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446a:	4770      	bx	lr

0801446c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorERSt9_Any_dataOSA_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801446c:	b590      	push	{r4, r7, lr}
 801446e:	b083      	sub	sp, #12
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8014476:	6838      	ldr	r0, [r7, #0]
 8014478:	f7ff ffed 	bl	8014456 <_ZSt4moveIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EONSt16remove_referenceIS4_E4typeEOS4_>
 801447c:	4603      	mov	r3, r0
 801447e:	4622      	mov	r2, r4
 8014480:	4619      	mov	r1, r3
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f000 f8dc 	bl	8014640 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorERSt9_Any_dataOSA_St17integral_constantIbLb0EE>
 8014488:	bf00      	nop
 801448a:	370c      	adds	r7, #12
 801448c:	46bd      	mov	sp, r7
 801448e:	bd90      	pop	{r4, r7, pc}

08014490 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8014490:	b5b0      	push	{r4, r5, r7, lr}
 8014492:	b084      	sub	sp, #16
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 801449c:	68f8      	ldr	r0, [r7, #12]
 801449e:	f000 f8ec 	bl	801467a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 80144a2:	4604      	mov	r4, r0
 80144a4:	68b8      	ldr	r0, [r7, #8]
 80144a6:	f7ed fb8d 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80144aa:	4605      	mov	r5, r0
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f7ff fe88 	bl	80141c2 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 80144b2:	4603      	mov	r3, r0
 80144b4:	461a      	mov	r2, r3
 80144b6:	4629      	mov	r1, r5
 80144b8:	4620      	mov	r0, r4
 80144ba:	f000 f8eb 	bl	8014694 <_ZSt10__invoke_rIvRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIS4_ESt14__is_invocableIT0_JDpT1_EEEE5valueES4_E4typeEOSG_DpOSH_>
				     std::forward<_ArgTypes>(__args)...);
 80144be:	bf00      	nop
      }
 80144c0:	3710      	adds	r7, #16
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080144c8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80144c8:	b590      	push	{r4, r7, lr}
 80144ca:	b085      	sub	sp, #20
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	60f8      	str	r0, [r7, #12]
 80144d0:	60b9      	str	r1, [r7, #8]
 80144d2:	4613      	mov	r3, r2
 80144d4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80144d6:	79fb      	ldrb	r3, [r7, #7]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d002      	beq.n	80144e2 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
 80144dc:	2b01      	cmp	r3, #1
 80144de:	d007      	beq.n	80144f0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
 80144e0:	e010      	b.n	8014504 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80144e2:	68f8      	ldr	r0, [r7, #12]
 80144e4:	f7ed fb9f 	bl	8001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 80144e8:	4603      	mov	r3, r0
 80144ea:	4a0c      	ldr	r2, [pc, #48]	; (801451c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>)
 80144ec:	601a      	str	r2, [r3, #0]
	    break;
 80144ee:	e00f      	b.n	8014510 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f000 f8ea 	bl	80146ca <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 80144f6:	4604      	mov	r4, r0
 80144f8:	68b8      	ldr	r0, [r7, #8]
 80144fa:	f000 f8be 	bl	801467a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 80144fe:	4603      	mov	r3, r0
 8014500:	6023      	str	r3, [r4, #0]
	    break;
 8014502:	e005      	b.n	8014510 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8014504:	79fb      	ldrb	r3, [r7, #7]
 8014506:	461a      	mov	r2, r3
 8014508:	68b9      	ldr	r1, [r7, #8]
 801450a:	68f8      	ldr	r0, [r7, #12]
 801450c:	f000 f8ea 	bl	80146e4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>
	return false;
 8014510:	2300      	movs	r3, #0
      }
 8014512:	4618      	mov	r0, r3
 8014514:	3714      	adds	r7, #20
 8014516:	46bd      	mov	sp, r7
 8014518:	bd90      	pop	{r4, r7, pc}
 801451a:	bf00      	nop
 801451c:	08018ea0 	.word	0x08018ea0

08014520 <_ZNSt8functionIFvhP19avionics_IMU_packetEE4swapERS3_>:
      void swap(function& __x) noexcept
 8014520:	b580      	push	{r7, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	683a      	ldr	r2, [r7, #0]
 801452e:	4611      	mov	r1, r2
 8014530:	4618      	mov	r0, r3
 8014532:	f7ff ff0a 	bl	801434a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	f103 0208 	add.w	r2, r3, #8
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	3308      	adds	r3, #8
 8014540:	4619      	mov	r1, r3
 8014542:	4610      	mov	r0, r2
 8014544:	f7ff ff33 	bl	80143ae <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f103 020c 	add.w	r2, r3, #12
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	330c      	adds	r3, #12
 8014552:	4619      	mov	r1, r3
 8014554:	4610      	mov	r0, r2
 8014556:	f000 f90a 	bl	801476e <_ZSt4swapIPFvRKSt9_Any_dataOhOP19avionics_IMU_packetEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 801455a:	bf00      	nop
 801455c:	3708      	adds	r7, #8
 801455e:	46bd      	mov	sp, r7
 8014560:	bd80      	pop	{r7, pc}

08014562 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E21_M_not_empty_functionISA_EEbRKS5_>:
	  _M_not_empty_function(const _Tp&)
 8014562:	b480      	push	{r7}
 8014564:	b083      	sub	sp, #12
 8014566:	af00      	add	r7, sp, #0
 8014568:	6078      	str	r0, [r7, #4]
	  { return true; }
 801456a:	2301      	movs	r3, #1
 801456c:	4618      	mov	r0, r3
 801456e:	370c      	adds	r7, #12
 8014570:	46bd      	mov	sp, r7
 8014572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014576:	4770      	bx	lr

08014578 <_ZSt4moveIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EONSt16remove_referenceIS4_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8014578:	b480      	push	{r7}
 801457a:	b083      	sub	sp, #12
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	4618      	mov	r0, r3
 8014584:	370c      	adds	r7, #12
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr

0801458e <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorERSt9_Any_dataOSA_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801458e:	b590      	push	{r4, r7, lr}
 8014590:	b083      	sub	sp, #12
 8014592:	af00      	add	r7, sp, #0
 8014594:	6078      	str	r0, [r7, #4]
 8014596:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8014598:	6838      	ldr	r0, [r7, #0]
 801459a:	f7ff ffed 	bl	8014578 <_ZSt4moveIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EONSt16remove_referenceIS4_E4typeEOS4_>
 801459e:	4603      	mov	r3, r0
 80145a0:	4622      	mov	r2, r4
 80145a2:	4619      	mov	r1, r3
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 f901 	bl	80147ac <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorERSt9_Any_dataOSA_St17integral_constantIbLb0EE>
 80145aa:	bf00      	nop
 80145ac:	370c      	adds	r7, #12
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd90      	pop	{r4, r7, pc}

080145b2 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80145b2:	b5b0      	push	{r4, r5, r7, lr}
 80145b4:	b084      	sub	sp, #16
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	60f8      	str	r0, [r7, #12]
 80145ba:	60b9      	str	r1, [r7, #8]
 80145bc:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f000 f910 	bl	80147e4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 80145c4:	4604      	mov	r4, r0
 80145c6:	68b8      	ldr	r0, [r7, #8]
 80145c8:	f7ed fafc 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80145cc:	4605      	mov	r5, r0
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f7ff fdf7 	bl	80141c2 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 80145d4:	4603      	mov	r3, r0
 80145d6:	461a      	mov	r2, r3
 80145d8:	4629      	mov	r1, r5
 80145da:	4620      	mov	r0, r4
 80145dc:	f000 f90f 	bl	80147fe <_ZSt10__invoke_rIvRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIS4_ESt14__is_invocableIT0_JDpT1_EEEE5valueES4_E4typeEOSG_DpOSH_>
				     std::forward<_ArgTypes>(__args)...);
 80145e0:	bf00      	nop
      }
 80145e2:	3710      	adds	r7, #16
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bdb0      	pop	{r4, r5, r7, pc}

080145e8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80145e8:	b590      	push	{r4, r7, lr}
 80145ea:	b085      	sub	sp, #20
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	4613      	mov	r3, r2
 80145f4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80145f6:	79fb      	ldrb	r3, [r7, #7]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d002      	beq.n	8014602 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d007      	beq.n	8014610 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
 8014600:	e010      	b.n	8014624 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8014602:	68f8      	ldr	r0, [r7, #12]
 8014604:	f7ed fb0f 	bl	8001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8014608:	4603      	mov	r3, r0
 801460a:	4a0c      	ldr	r2, [pc, #48]	; (801463c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>)
 801460c:	601a      	str	r2, [r3, #0]
	    break;
 801460e:	e00f      	b.n	8014630 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8014610:	68f8      	ldr	r0, [r7, #12]
 8014612:	f000 f90f 	bl	8014834 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 8014616:	4604      	mov	r4, r0
 8014618:	68b8      	ldr	r0, [r7, #8]
 801461a:	f000 f8e3 	bl	80147e4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 801461e:	4603      	mov	r3, r0
 8014620:	6023      	str	r3, [r4, #0]
	    break;
 8014622:	e005      	b.n	8014630 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
 8014624:	79fb      	ldrb	r3, [r7, #7]
 8014626:	461a      	mov	r2, r3
 8014628:	68b9      	ldr	r1, [r7, #8]
 801462a:	68f8      	ldr	r0, [r7, #12]
 801462c:	f000 f90e 	bl	801484c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>
	return false;
 8014630:	2300      	movs	r3, #0
      }
 8014632:	4618      	mov	r0, r3
 8014634:	3714      	adds	r7, #20
 8014636:	46bd      	mov	sp, r7
 8014638:	bd90      	pop	{r4, r7, pc}
 801463a:	bf00      	nop
 801463c:	08018e4c 	.word	0x08018e4c

08014640 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorERSt9_Any_dataOSA_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 8014640:	b5b0      	push	{r4, r5, r7, lr}
 8014642:	b084      	sub	sp, #16
 8014644:	af00      	add	r7, sp, #0
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 801464c:	68b8      	ldr	r0, [r7, #8]
 801464e:	f7ff ff02 	bl	8014456 <_ZSt4moveIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EONSt16remove_referenceIS4_E4typeEOS4_>
 8014652:	4605      	mov	r5, r0
 8014654:	200c      	movs	r0, #12
 8014656:	f7fc fee9 	bl	801142c <_Znwj>
 801465a:	4603      	mov	r3, r0
 801465c:	461c      	mov	r4, r3
 801465e:	4623      	mov	r3, r4
 8014660:	462a      	mov	r2, r5
 8014662:	ca07      	ldmia	r2, {r0, r1, r2}
 8014664:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	f000 f82e 	bl	80146ca <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 801466e:	4603      	mov	r3, r0
 8014670:	601c      	str	r4, [r3, #0]
 8014672:	bf00      	nop
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bdb0      	pop	{r4, r5, r7, pc}

0801467a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 801467a:	b580      	push	{r7, lr}
 801467c:	b082      	sub	sp, #8
 801467e:	af00      	add	r7, sp, #0
 8014680:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 f91c 	bl	80148c0 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>
 8014688:	4603      	mov	r3, r0
 801468a:	681b      	ldr	r3, [r3, #0]
	}
 801468c:	4618      	mov	r0, r3
 801468e:	3708      	adds	r7, #8
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}

08014694 <_ZSt10__invoke_rIvRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIS4_ESt14__is_invocableIT0_JDpT1_EEEE5valueES4_E4typeEOSG_DpOSH_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8014694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014696:	b085      	sub	sp, #20
 8014698:	af00      	add	r7, sp, #0
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	607a      	str	r2, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80146a0:	68f8      	ldr	r0, [r7, #12]
 80146a2:	f000 f919 	bl	80148d8 <_ZSt7forwardIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80146a6:	4604      	mov	r4, r0
 80146a8:	68b8      	ldr	r0, [r7, #8]
 80146aa:	f7ed fa8b 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80146ae:	4605      	mov	r5, r0
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f7ff fd86 	bl	80141c2 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 80146b6:	4603      	mov	r3, r0
 80146b8:	462a      	mov	r2, r5
 80146ba:	4621      	mov	r1, r4
 80146bc:	4630      	mov	r0, r6
 80146be:	f000 f916 	bl	80148ee <_ZSt13__invoke_implIvRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>
    }
 80146c2:	bf00      	nop
 80146c4:	3714      	adds	r7, #20
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146ca <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>:
      _M_access()
 80146ca:	b580      	push	{r7, lr}
 80146cc:	b082      	sub	sp, #8
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f7ec ff5e 	bl	8001594 <_ZNSt9_Any_data9_M_accessEv>
 80146d8:	4603      	mov	r3, r0
 80146da:	4618      	mov	r0, r3
 80146dc:	3708      	adds	r7, #8
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}
	...

080146e4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80146e4:	b5b0      	push	{r4, r5, r7, lr}
 80146e6:	b084      	sub	sp, #16
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	60f8      	str	r0, [r7, #12]
 80146ec:	60b9      	str	r1, [r7, #8]
 80146ee:	4613      	mov	r3, r2
 80146f0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80146f2:	79fb      	ldrb	r3, [r7, #7]
 80146f4:	2b03      	cmp	r3, #3
 80146f6:	d827      	bhi.n	8014748 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
 80146f8:	a201      	add	r2, pc, #4	; (adr r2, 8014700 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>)
 80146fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146fe:	bf00      	nop
 8014700:	08014711 	.word	0x08014711
 8014704:	0801471f 	.word	0x0801471f
 8014708:	08014733 	.word	0x08014733
 801470c:	0801473f 	.word	0x0801473f
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 8014710:	68f8      	ldr	r0, [r7, #12]
 8014712:	f7ed fa88 	bl	8001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8014716:	4603      	mov	r3, r0
 8014718:	4a0e      	ldr	r2, [pc, #56]	; (8014754 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x70>)
 801471a:	601a      	str	r2, [r3, #0]
	      break;
 801471c:	e014      	b.n	8014748 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 801471e:	68f8      	ldr	r0, [r7, #12]
 8014720:	f7ff ffd3 	bl	80146ca <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8014724:	4604      	mov	r4, r0
 8014726:	68b8      	ldr	r0, [r7, #8]
 8014728:	f7ff ffa7 	bl	801467a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
 801472c:	4603      	mov	r3, r0
 801472e:	6023      	str	r3, [r4, #0]
	      break;
 8014730:	e00a      	b.n	8014748 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 8014732:	462a      	mov	r2, r5
 8014734:	68b9      	ldr	r1, [r7, #8]
 8014736:	68f8      	ldr	r0, [r7, #12]
 8014738:	f000 f8f7 	bl	801492a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E8_M_cloneERSt9_Any_dataRKSC_St17integral_constantIbLb0EE>
	      break;
 801473c:	e004      	b.n	8014748 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 801473e:	4621      	mov	r1, r4
 8014740:	68f8      	ldr	r0, [r7, #12]
 8014742:	f000 f910 	bl	8014966 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8014746:	bf00      	nop
	  return false;
 8014748:	2300      	movs	r3, #0
	}
 801474a:	4618      	mov	r0, r3
 801474c:	3710      	adds	r7, #16
 801474e:	46bd      	mov	sp, r7
 8014750:	bdb0      	pop	{r4, r5, r7, pc}
 8014752:	bf00      	nop
 8014754:	08018ea0 	.word	0x08018ea0

08014758 <_ZSt4moveIRPFvRKSt9_Any_dataOhOP19avionics_IMU_packetEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	4618      	mov	r0, r3
 8014764:	370c      	adds	r7, #12
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr

0801476e <_ZSt4swapIPFvRKSt9_Any_dataOhOP19avionics_IMU_packetEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 801476e:	b580      	push	{r7, lr}
 8014770:	b084      	sub	sp, #16
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
 8014776:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f7ff ffed 	bl	8014758 <_ZSt4moveIRPFvRKSt9_Any_dataOhOP19avionics_IMU_packetEEONSt16remove_referenceIT_E4typeEOSB_>
 801477e:	4603      	mov	r3, r0
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8014784:	6838      	ldr	r0, [r7, #0]
 8014786:	f7ff ffe7 	bl	8014758 <_ZSt4moveIRPFvRKSt9_Any_dataOhOP19avionics_IMU_packetEEONSt16remove_referenceIT_E4typeEOSB_>
 801478a:	4603      	mov	r3, r0
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8014792:	f107 030c 	add.w	r3, r7, #12
 8014796:	4618      	mov	r0, r3
 8014798:	f7ff ffde 	bl	8014758 <_ZSt4moveIRPFvRKSt9_Any_dataOhOP19avionics_IMU_packetEEONSt16remove_referenceIT_E4typeEOSB_>
 801479c:	4603      	mov	r3, r0
 801479e:	681a      	ldr	r2, [r3, #0]
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	601a      	str	r2, [r3, #0]
    }
 80147a4:	bf00      	nop
 80147a6:	3710      	adds	r7, #16
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorERSt9_Any_dataOSA_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 80147ac:	b5b0      	push	{r4, r5, r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80147b8:	68b8      	ldr	r0, [r7, #8]
 80147ba:	f7ff fedd 	bl	8014578 <_ZSt4moveIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EONSt16remove_referenceIS4_E4typeEOS4_>
 80147be:	4605      	mov	r5, r0
 80147c0:	2010      	movs	r0, #16
 80147c2:	f7fc fe33 	bl	801142c <_Znwj>
 80147c6:	4603      	mov	r3, r0
 80147c8:	461c      	mov	r4, r3
 80147ca:	4629      	mov	r1, r5
 80147cc:	4620      	mov	r0, r4
 80147ce:	f7ff fcac 	bl	801412a <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>
 80147d2:	68f8      	ldr	r0, [r7, #12]
 80147d4:	f000 f82e 	bl	8014834 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 80147d8:	4603      	mov	r3, r0
 80147da:	601c      	str	r4, [r3, #0]
 80147dc:	bf00      	nop
 80147de:	3710      	adds	r7, #16
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bdb0      	pop	{r4, r5, r7, pc}

080147e4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f000 f8ce 	bl	801498e <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>
 80147f2:	4603      	mov	r3, r0
 80147f4:	681b      	ldr	r3, [r3, #0]
	}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3708      	adds	r7, #8
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}

080147fe <_ZSt10__invoke_rIvRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIS4_ESt14__is_invocableIT0_JDpT1_EEEE5valueES4_E4typeEOSG_DpOSH_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80147fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014800:	b085      	sub	sp, #20
 8014802:	af00      	add	r7, sp, #0
 8014804:	60f8      	str	r0, [r7, #12]
 8014806:	60b9      	str	r1, [r7, #8]
 8014808:	607a      	str	r2, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801480a:	68f8      	ldr	r0, [r7, #12]
 801480c:	f000 f8cb 	bl	80149a6 <_ZSt7forwardIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8014810:	4604      	mov	r4, r0
 8014812:	68b8      	ldr	r0, [r7, #8]
 8014814:	f7ed f9d6 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8014818:	4605      	mov	r5, r0
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7ff fcd1 	bl	80141c2 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8014820:	4603      	mov	r3, r0
 8014822:	462a      	mov	r2, r5
 8014824:	4621      	mov	r1, r4
 8014826:	4630      	mov	r0, r6
 8014828:	f000 f8c8 	bl	80149bc <_ZSt13__invoke_implIvRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>
    }
 801482c:	bf00      	nop
 801482e:	3714      	adds	r7, #20
 8014830:	46bd      	mov	sp, r7
 8014832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014834 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>:
      _M_access()
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7ec fea9 	bl	8001594 <_ZNSt9_Any_data9_M_accessEv>
 8014842:	4603      	mov	r3, r0
 8014844:	4618      	mov	r0, r3
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 801484c:	b5b0      	push	{r4, r5, r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	60f8      	str	r0, [r7, #12]
 8014854:	60b9      	str	r1, [r7, #8]
 8014856:	4613      	mov	r3, r2
 8014858:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801485a:	79fb      	ldrb	r3, [r7, #7]
 801485c:	2b03      	cmp	r3, #3
 801485e:	d827      	bhi.n	80148b0 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
 8014860:	a201      	add	r2, pc, #4	; (adr r2, 8014868 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>)
 8014862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014866:	bf00      	nop
 8014868:	08014879 	.word	0x08014879
 801486c:	08014887 	.word	0x08014887
 8014870:	0801489b 	.word	0x0801489b
 8014874:	080148a7 	.word	0x080148a7
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 8014878:	68f8      	ldr	r0, [r7, #12]
 801487a:	f7ed f9d4 	bl	8001c26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 801487e:	4603      	mov	r3, r0
 8014880:	4a0e      	ldr	r2, [pc, #56]	; (80148bc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x70>)
 8014882:	601a      	str	r2, [r3, #0]
	      break;
 8014884:	e014      	b.n	80148b0 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f7ff ffd4 	bl	8014834 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 801488c:	4604      	mov	r4, r0
 801488e:	68b8      	ldr	r0, [r7, #8]
 8014890:	f7ff ffa8 	bl	80147e4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
 8014894:	4603      	mov	r3, r0
 8014896:	6023      	str	r3, [r4, #0]
	      break;
 8014898:	e00a      	b.n	80148b0 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
 801489a:	462a      	mov	r2, r5
 801489c:	68b9      	ldr	r1, [r7, #8]
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f000 f8ba 	bl	8014a18 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E8_M_cloneERSt9_Any_dataRKSC_St17integral_constantIbLb0EE>
	      break;
 80148a4:	e004      	b.n	80148b0 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
 80148a6:	4621      	mov	r1, r4
 80148a8:	68f8      	ldr	r0, [r7, #12]
 80148aa:	f000 f8d2 	bl	8014a52 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 80148ae:	bf00      	nop
	  return false;
 80148b0:	2300      	movs	r3, #0
	}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3710      	adds	r7, #16
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bdb0      	pop	{r4, r5, r7, pc}
 80148ba:	bf00      	nop
 80148bc:	08018e4c 	.word	0x08018e4c

080148c0 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>:
      _M_access() const
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b082      	sub	sp, #8
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f7ec fe6e 	bl	80015aa <_ZNKSt9_Any_data9_M_accessEv>
 80148ce:	4603      	mov	r3, r0
 80148d0:	4618      	mov	r0, r3
 80148d2:	3708      	adds	r7, #8
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <_ZSt7forwardIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80148d8:	b480      	push	{r7}
 80148da:	b083      	sub	sp, #12
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	4618      	mov	r0, r3
 80148e4:	370c      	adds	r7, #12
 80148e6:	46bd      	mov	sp, r7
 80148e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ec:	4770      	bx	lr

080148ee <_ZSt13__invoke_implIvRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80148ee:	b5b0      	push	{r4, r5, r7, lr}
 80148f0:	b084      	sub	sp, #16
 80148f2:	af00      	add	r7, sp, #0
 80148f4:	7338      	strb	r0, [r7, #12]
 80148f6:	60b9      	str	r1, [r7, #8]
 80148f8:	607a      	str	r2, [r7, #4]
 80148fa:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80148fc:	68b8      	ldr	r0, [r7, #8]
 80148fe:	f7ff ffeb 	bl	80148d8 <_ZSt7forwardIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
 8014902:	4605      	mov	r5, r0
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7ed f95d 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801490a:	4603      	mov	r3, r0
 801490c:	781c      	ldrb	r4, [r3, #0]
 801490e:	6838      	ldr	r0, [r7, #0]
 8014910:	f7ff fc57 	bl	80141c2 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8014914:	4603      	mov	r3, r0
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	461a      	mov	r2, r3
 801491a:	4621      	mov	r1, r4
 801491c:	4628      	mov	r0, r5
 801491e:	f7ff fb2d 	bl	8013f7c <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENKUlhPvE_clEhS7_>
 8014922:	bf00      	nop
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bdb0      	pop	{r4, r5, r7, pc}

0801492a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E8_M_cloneERSt9_Any_dataRKSC_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 801492a:	b5b0      	push	{r4, r5, r7, lr}
 801492c:	b084      	sub	sp, #16
 801492e:	af00      	add	r7, sp, #0
 8014930:	60f8      	str	r0, [r7, #12]
 8014932:	60b9      	str	r1, [r7, #8]
 8014934:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8014936:	68b8      	ldr	r0, [r7, #8]
 8014938:	f000 f8a2 	bl	8014a80 <_ZNKSt9_Any_data9_M_accessIPKZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>
 801493c:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 801493e:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8014940:	200c      	movs	r0, #12
 8014942:	f7fc fd73 	bl	801142c <_Znwj>
 8014946:	4603      	mov	r3, r0
 8014948:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 801494a:	4623      	mov	r3, r4
 801494c:	462a      	mov	r2, r5
 801494e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014950:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014954:	68f8      	ldr	r0, [r7, #12]
 8014956:	f7ff feb8 	bl	80146ca <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 801495a:	4603      	mov	r3, r0
 801495c:	601c      	str	r4, [r3, #0]
	}
 801495e:	bf00      	nop
 8014960:	3710      	adds	r7, #16
 8014962:	46bd      	mov	sp, r7
 8014964:	bdb0      	pop	{r4, r5, r7, pc}

08014966 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8014966:	b580      	push	{r7, lr}
 8014968:	b082      	sub	sp, #8
 801496a:	af00      	add	r7, sp, #0
 801496c:	6078      	str	r0, [r7, #4]
 801496e:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f7ff feaa 	bl	80146ca <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
 8014976:	4603      	mov	r3, r0
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d003      	beq.n	8014986 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 801497e:	210c      	movs	r1, #12
 8014980:	4618      	mov	r0, r3
 8014982:	f000 fdb7 	bl	80154f4 <_ZdlPvj>
	}
 8014986:	bf00      	nop
 8014988:	3708      	adds	r7, #8
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}

0801498e <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>:
      _M_access() const
 801498e:	b580      	push	{r7, lr}
 8014990:	b082      	sub	sp, #8
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f7ec fe07 	bl	80015aa <_ZNKSt9_Any_data9_M_accessEv>
 801499c:	4603      	mov	r3, r0
 801499e:	4618      	mov	r0, r3
 80149a0:	3708      	adds	r7, #8
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}

080149a6 <_ZSt7forwardIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80149a6:	b480      	push	{r7}
 80149a8:	b083      	sub	sp, #12
 80149aa:	af00      	add	r7, sp, #0
 80149ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	4618      	mov	r0, r3
 80149b2:	370c      	adds	r7, #12
 80149b4:	46bd      	mov	sp, r7
 80149b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ba:	4770      	bx	lr

080149bc <_ZSt13__invoke_implIvRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80149bc:	b5b0      	push	{r4, r5, r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	7338      	strb	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]
 80149c8:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80149ca:	68b8      	ldr	r0, [r7, #8]
 80149cc:	f7ff ffeb 	bl	80149a6 <_ZSt7forwardIRZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
 80149d0:	4605      	mov	r5, r0
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f7ed f8f6 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80149d8:	4603      	mov	r3, r0
 80149da:	781c      	ldrb	r4, [r3, #0]
 80149dc:	6838      	ldr	r0, [r7, #0]
 80149de:	f7ff fbf0 	bl	80141c2 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 80149e2:	4603      	mov	r3, r0
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	461a      	mov	r2, r3
 80149e8:	4621      	mov	r1, r4
 80149ea:	4628      	mov	r0, r5
 80149ec:	f7ff fae6 	bl	8013fbc <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENKUlhPvE0_clEhS7_>
 80149f0:	bf00      	nop
 80149f2:	3710      	adds	r7, #16
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bdb0      	pop	{r4, r5, r7, pc}

080149f8 <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_C1ERKS8_>:
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	6039      	str	r1, [r7, #0]
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	683a      	ldr	r2, [r7, #0]
 8014a06:	4611      	mov	r1, r2
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7ff fb6c 	bl	80140e6 <_ZNSt8functionIFvhP19avionics_IMU_packetEEC1ERKS3_>
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	4618      	mov	r0, r3
 8014a12:	3708      	adds	r7, #8
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E8_M_cloneERSt9_Any_dataRKSC_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 8014a18:	b5b0      	push	{r4, r5, r7, lr}
 8014a1a:	b084      	sub	sp, #16
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 8014a24:	68b8      	ldr	r0, [r7, #8]
 8014a26:	f000 f837 	bl	8014a98 <_ZNKSt9_Any_data9_M_accessIPKZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>
 8014a2a:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 8014a2c:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8014a2e:	2010      	movs	r0, #16
 8014a30:	f7fc fcfc 	bl	801142c <_Znwj>
 8014a34:	4603      	mov	r3, r0
 8014a36:	461c      	mov	r4, r3
 8014a38:	4629      	mov	r1, r5
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	f7ff ffdc 	bl	80149f8 <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_C1ERKS8_>
	  __dest._M_access<_Functor*>() =
 8014a40:	68f8      	ldr	r0, [r7, #12]
 8014a42:	f7ff fef7 	bl	8014834 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 8014a46:	4603      	mov	r3, r0
 8014a48:	601c      	str	r4, [r3, #0]
	}
 8014a4a:	bf00      	nop
 8014a4c:	3710      	adds	r7, #16
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bdb0      	pop	{r4, r5, r7, pc}

08014a52 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8014a52:	b590      	push	{r4, r7, lr}
 8014a54:	b083      	sub	sp, #12
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	6078      	str	r0, [r7, #4]
 8014a5a:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f7ff fee9 	bl	8014834 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
 8014a62:	4603      	mov	r3, r0
 8014a64:	681c      	ldr	r4, [r3, #0]
 8014a66:	2c00      	cmp	r4, #0
 8014a68:	d006      	beq.n	8014a78 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x26>
 8014a6a:	4620      	mov	r0, r4
 8014a6c:	f7ff fab7 	bl	8013fde <_ZZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
 8014a70:	2110      	movs	r1, #16
 8014a72:	4620      	mov	r0, r4
 8014a74:	f000 fd3e 	bl	80154f4 <_ZdlPvj>
	}
 8014a78:	bf00      	nop
 8014a7a:	370c      	adds	r7, #12
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd90      	pop	{r4, r7, pc}

08014a80 <_ZNKSt9_Any_data9_M_accessIPKZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>:
      _M_access() const
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	f7ec fd8e 	bl	80015aa <_ZNKSt9_Any_data9_M_accessEv>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	4618      	mov	r0, r3
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <_ZNKSt9_Any_data9_M_accessIPKZN10MessageBus6handleI19avionics_IMU_packetEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>:
      _M_access() const
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f7ec fd82 	bl	80015aa <_ZNKSt9_Any_data9_M_accessEv>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	6039      	str	r1, [r7, #0]
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f241 3219 	movw	r2, #4889	; 0x1319
 8014ac2:	441a      	add	r2, r3
 8014ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014ac8:	6839      	ldr	r1, [r7, #0]
 8014aca:	f7fc fd7b 	bl	80115c4 <_ZN5IOBusC1EP8IODriverPhm>
 8014ace:	4a47      	ldr	r2, [pc, #284]	; (8014bec <_ZN10NetworkBusC1EP8IODriver+0x13c>)
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	601a      	str	r2, [r3, #0]

	//---------Avionics--------------
	define<avionics_ToF_packet>(0);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2100      	movs	r1, #0
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fd fe91 	bl	8012800 <_ZN10MessageBus6defineI19avionics_ToF_packetEEbh>
	define<avionics_IMU_packet>(1);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	2101      	movs	r1, #1
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fd feea 	bl	80128bc <_ZN10MessageBus6defineI19avionics_IMU_packetEEbh>
	define<avionics_potentiometer_packet>(2);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2102      	movs	r1, #2
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7fe f85f 	bl	8012bb0 <_ZN10MessageBus6defineI29avionics_potentiometer_packetEEbh>
	define<avionics_massload_packet>(3);
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2103      	movs	r1, #3
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7fd ff9e 	bl	8012a38 <_ZN10MessageBus6defineI24avionics_massload_packetEEbh>
	define<avionics_moisture_packet>(4);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2104      	movs	r1, #4
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7fd fff7 	bl	8012af4 <_ZN10MessageBus6defineI24avionics_moisture_packetEEbh>
	define<avionics_voltmeter_packet>(5);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2105      	movs	r1, #5
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fe f8ae 	bl	8012c6c <_ZN10MessageBus6defineI25avionics_voltmeter_packetEEbh>
	define<sc_LED_packet>(6);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2106      	movs	r1, #6
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7fe fa7f 	bl	8013018 <_ZN10MessageBus6defineI13sc_LED_packetEEbh>
	define<sc_trap_packet>(7);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	2107      	movs	r1, #7
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fe f9be 	bl	8012ea0 <_ZN10MessageBus6defineI14sc_trap_packetEEbh>
	define<sc_caching_packet>(8);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2108      	movs	r1, #8
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7fe f8fd 	bl	8012d28 <_ZN10MessageBus6defineI17sc_caching_packetEEbh>
	define<sc_trap_success_packet>(9);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2109      	movs	r1, #9
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fe fa12 	bl	8012f5c <_ZN10MessageBus6defineI22sc_trap_success_packetEEbh>
	define<sc_caching_success_packet>(10);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	210a      	movs	r1, #10
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7fe f951 	bl	8012de4 <_ZN10MessageBus6defineI25sc_caching_success_packetEEbh>

	//----------Power supply----------
	define<Power_SystemPacket>(11);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	210b      	movs	r1, #11
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7fe fac4 	bl	80130d4 <_ZN10MessageBus6defineI18Power_SystemPacketEEbh>
	define<Power_VoltagePacket>(12);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	210c      	movs	r1, #12
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7fe fb1d 	bl	8013190 <_ZN10MessageBus6defineI19Power_VoltagePacketEEbh>
	define<Power_CurrentPacket>(13);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	210d      	movs	r1, #13
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7fe fb76 	bl	801324c <_ZN10MessageBus6defineI19Power_CurrentPacketEEbh>
	define<Reset_PowerSupplyPacket>(14);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	210e      	movs	r1, #14
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7fe fbcf 	bl	8013308 <_ZN10MessageBus6defineI23Reset_PowerSupplyPacketEEbh>
	define<Switch_AvionicsPacket>(15);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	210f      	movs	r1, #15
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fe fc28 	bl	80133c4 <_ZN10MessageBus6defineI21Switch_AvionicsPacketEEbh>
	define<Switch_RamanPacket>(16);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2110      	movs	r1, #16
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7fe fc81 	bl	8013480 <_ZN10MessageBus6defineI18Switch_RamanPacketEEbh>
	define<Switch_JetsonPacket>(17);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2111      	movs	r1, #17
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fe fcda 	bl	801353c <_ZN10MessageBus6defineI19Switch_JetsonPacketEEbh>
	define<Switch_LidarPacket>(18);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2112      	movs	r1, #18
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7fe fd33 	bl	80135f8 <_ZN10MessageBus6defineI18Switch_LidarPacketEEbh>
	define<Switch_EthernetPacket>(19);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	2113      	movs	r1, #19
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7fe fd8c 	bl	80136b4 <_ZN10MessageBus6defineI21Switch_EthernetPacketEEbh>

	//---------------FSM---------------
	define<FsmPacket>(20);
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2114      	movs	r1, #20
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7fe fde5 	bl	8013770 <_ZN10MessageBus6defineI9FsmPacketEEbh>

	//----------General packets--------
	define<DataPacket>(21);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2115      	movs	r1, #21
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7fe fe3e 	bl	801382c <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<PingPacket>(22);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2116      	movs	r1, #22
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7fe fe97 	bl	80138e8 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<ErrorPacket>(23);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2117      	movs	r1, #23
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fe fef0 	bl	80139a4 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
	define<RequestPacket>(24);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2118      	movs	r1, #24
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fe ff49 	bl	8013a60 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(25);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2119      	movs	r1, #25
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7fe ffa2 	bl	8013b1c <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(26);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	211a      	movs	r1, #26
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fe fffb 	bl	8013bd8 <_ZN10MessageBus6defineI14ProgressPacketEEbh>

	//-------------Sussy_packets------
//	define<PollosHermanos_packet>(69);
}
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	4618      	mov	r0, r3
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	08019250 	.word	0x08019250

08014bf0 <_ZN10NetworkBusD1Ev>:

NetworkBus::~NetworkBus(){};
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	4a05      	ldr	r2, [pc, #20]	; (8014c10 <_ZN10NetworkBusD1Ev+0x20>)
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	601a      	str	r2, [r3, #0]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7fc fd41 	bl	8011688 <_ZN5IOBusD1Ev>
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3708      	adds	r7, #8
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	08019250 	.word	0x08019250

08014c14 <_ZN10NetworkBusD0Ev>:
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f7ff ffe7 	bl	8014bf0 <_ZN10NetworkBusD1Ev>
 8014c22:	f241 411c 	movw	r1, #5148	; 0x141c
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f000 fc64 	bl	80154f4 <_ZdlPvj>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
	...

08014c38 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
 8014c38:	b480      	push	{r7}
 8014c3a:	b083      	sub	sp, #12
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	4a04      	ldr	r2, [pc, #16]	; (8014c54 <_ZN8IODriverD1Ev+0x1c>)
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	601a      	str	r2, [r3, #0]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	370c      	adds	r7, #12
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr
 8014c54:	080192c4 	.word	0x080192c4

08014c58 <_ZN8IODriverD0Ev>:
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f7ff ffe9 	bl	8014c38 <_ZN8IODriverD1Ev>
 8014c66:	2104      	movs	r1, #4
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f000 fc43 	bl	80154f4 <_ZdlPvj>
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	4618      	mov	r0, r3
 8014c72:	3708      	adds	r7, #8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <_ZN8IODriverC1Ev>:
class IODriver {
 8014c78:	b480      	push	{r7}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	4a04      	ldr	r2, [pc, #16]	; (8014c94 <_ZN8IODriverC1Ev+0x1c>)
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	601a      	str	r2, [r3, #0]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	4618      	mov	r0, r3
 8014c8a:	370c      	adds	r7, #12
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c92:	4770      	bx	lr
 8014c94:	080192c4 	.word	0x080192c4

08014c98 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>:
 * @brief Construct a new STMUARTDriver::STMUARTDriver object
 *
 * @param huart the UART port to initialize
 */

STMUARTDriver::STMUARTDriver(UART_HandleTypeDef* huart): Thread("STMUARTDriver", osPriorityHigh), huart(huart), last_dma_index(0) {
 8014c98:	b5b0      	push	{r4, r5, r7, lr}
 8014c9a:	b082      	sub	sp, #8
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7ff ffe7 	bl	8014c78 <_ZN8IODriverC1Ev>
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	3304      	adds	r3, #4
 8014cae:	2202      	movs	r2, #2
 8014cb0:	491a      	ldr	r1, [pc, #104]	; (8014d1c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x84>)
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f000 fb61 	bl	801537a <_ZN6ThreadC1EPKc10osPriority>
 8014cb8:	4a19      	ldr	r2, [pc, #100]	; (8014d20 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x88>)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	601a      	str	r2, [r3, #0]
 8014cbe:	4a19      	ldr	r2, [pc, #100]	; (8014d24 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x8c>)
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	605a      	str	r2, [r3, #4]
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	683a      	ldr	r2, [r7, #0]
 8014cc8:	615a      	str	r2, [r3, #20]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	2200      	movs	r2, #0
 8014cce:	619a      	str	r2, [r3, #24]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	4a15      	ldr	r2, [pc, #84]	; (8014d28 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x90>)
 8014cd4:	f103 041c 	add.w	r4, r3, #28
 8014cd8:	4615      	mov	r5, r2
 8014cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	3340      	adds	r3, #64	; 0x40
 8014cea:	4618      	mov	r0, r3
 8014cec:	f000 f9f6 	bl	80150dc <_ZNSt8functionIFvhPhmEEC1Ev>
	instance = this;
 8014cf0:	4a0e      	ldr	r2, [pc, #56]	; (8014d2c <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef+0x94>)
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6013      	str	r3, [r2, #0]

	this->buffer = (uint8_t*) pvPortMalloc(UART_BUFFER_SIZE);
 8014cf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014cfa:	f7fc f9ad 	bl	8011058 <pvPortMalloc>
 8014cfe:	4602      	mov	r2, r0
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	63da      	str	r2, [r3, #60]	; 0x3c

    if(buffer == nullptr){
//        console.printf("[RoCo] [STMUARTDriverInit] Unable to allocate DMA buffer for MCU#%" PRIu32 "\r\n", getSenderID(huart));
    }

    this->semaphore = xSemaphoreCreateCounting(16, 0);
 8014d04:	2100      	movs	r1, #0
 8014d06:	2010      	movs	r0, #16
 8014d08:	f7fa fcd1 	bl	800f6ae <xQueueCreateCountingSemaphore>
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	651a      	str	r2, [r3, #80]	; 0x50
    if(semaphore == nullptr) {
//        console.printf("[RoCo] [STMUARTDriverInit] Unable to allocate semaphore for MCU#%" PRIu32 "\r\n", getSenderID(huart));
    }

//    osDelay(5);
}
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	4618      	mov	r0, r3
 8014d16:	3708      	adds	r7, #8
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8014d1c:	08018c4c 	.word	0x08018c4c
 8014d20:	0801928c 	.word	0x0801928c
 8014d24:	080192ac 	.word	0x080192ac
 8014d28:	08018c5c 	.word	0x08018c5c
 8014d2c:	24005f10 	.word	0x24005f10

08014d30 <_ZN13STMUARTDriverD1Ev>:

STMUARTDriver::~STMUARTDriver() {
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	4a0e      	ldr	r2, [pc, #56]	; (8014d74 <_ZN13STMUARTDriverD1Ev+0x44>)
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	601a      	str	r2, [r3, #0]
 8014d3e:	4a0e      	ldr	r2, [pc, #56]	; (8014d78 <_ZN13STMUARTDriverD1Ev+0x48>)
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	605a      	str	r2, [r3, #4]
    vPortFree(buffer);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7fc fa51 	bl	80111f0 <vPortFree>
STMUARTDriver::~STMUARTDriver() {
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	3340      	adds	r3, #64	; 0x40
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7fc fc29 	bl	80115aa <_ZNSt8functionIFvhPhmEED1Ev>
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	3304      	adds	r3, #4
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fc fb7d 	bl	801145c <_ZN6ThreadD1Ev>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7ff ff67 	bl	8014c38 <_ZN8IODriverD1Ev>
}
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3708      	adds	r7, #8
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	0801928c 	.word	0x0801928c
 8014d78:	080192ac 	.word	0x080192ac

08014d7c <_ZThn4_N13STMUARTDriverD1Ev>:
#define NB_UART_PORTS       8                   // CHANGE ONLY IF NEEDED

class STMUARTDriver: public IODriver, public Thread {
    public:
        STMUARTDriver(UART_HandleTypeDef* huart); // Constructor
        virtual ~STMUARTDriver(); // Destructor
 8014d7c:	f1a0 0004 	sub.w	r0, r0, #4
 8014d80:	f7ff bfd6 	b.w	8014d30 <_ZN13STMUARTDriverD1Ev>

08014d84 <_ZN13STMUARTDriverD0Ev>:
STMUARTDriver::~STMUARTDriver() {
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
}
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f7ff ffcf 	bl	8014d30 <_ZN13STMUARTDriverD1Ev>
 8014d92:	2154      	movs	r1, #84	; 0x54
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f000 fbad 	bl	80154f4 <_ZdlPvj>
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3708      	adds	r7, #8
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}

08014da4 <_ZThn4_N13STMUARTDriverD0Ev>:
 8014da4:	f1a0 0004 	sub.w	r0, r0, #4
 8014da8:	f7ff bfec 	b.w	8014d84 <_ZN13STMUARTDriverD0Ev>

08014dac <_ZN13STMUARTDriver4initEv>:

void STMUARTDriver::init() {
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]

	this->last_dma_index = 0;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2200      	movs	r2, #0
 8014db8:	619a      	str	r2, [r3, #24]

	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	695b      	ldr	r3, [r3, #20]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	699a      	ldr	r2, [r3, #24]
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	695b      	ldr	r3, [r3, #20]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	f042 0208 	orr.w	r2, r2, #8
 8014dcc:	619a      	str	r2, [r3, #24]

	HAL_StatusTypeDef temp = HAL_UARTEx_ReceiveToIdle_DMA(huart, buffer, UART_BUFFER_SIZE);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6958      	ldr	r0, [r3, #20]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014dda:	4619      	mov	r1, r3
 8014ddc:	f7fa f9f1 	bl	800f1c2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8014de0:	4603      	mov	r3, r0
 8014de2:	73fb      	strb	r3, [r7, #15]
	if(temp != HAL_OK) {
//        console.printf("[RoCo] [STMUARTDriverInit] Unable to initialize UART in receive mode for MCU#%" PRIu32 "\r\n", getSenderID(huart));
    }
}
 8014de4:	bf00      	nop
 8014de6:	3710      	adds	r7, #16
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <_ZThn4_N13STMUARTDriver4initEv>:
        uint8_t* getBuffer();
        xSemaphoreHandle getSemaphore();
        uint8_t getSenderID(UART_HandleTypeDef* huart);

        void init();
 8014dec:	f1a0 0004 	sub.w	r0, r0, #4
 8014df0:	f7ff bfdc 	b.w	8014dac <_ZN13STMUARTDriver4initEv>

08014df4 <_ZN13STMUARTDriver4loopEv>:

void STMUARTDriver::loop() {
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
	if(xSemaphoreTake(semaphore, portMAX_DELAY)) {
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e00:	f04f 31ff 	mov.w	r1, #4294967295
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7fa fd13 	bl	800f830 <xQueueSemaphoreTake>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	bf14      	ite	ne
 8014e10:	2301      	movne	r3, #1
 8014e12:	2300      	moveq	r3, #0
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	f000 808f 	beq.w	8014f3a <_ZN13STMUARTDriver4loopEv+0x146>
		uint32_t end_dma_index = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);
 8014e1c:	4b49      	ldr	r3, [pc, #292]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	4a49      	ldr	r2, [pc, #292]	; (8014f48 <_ZN13STMUARTDriver4loopEv+0x154>)
 8014e22:	4293      	cmp	r3, r2
 8014e24:	d04a      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e26:	4b47      	ldr	r3, [pc, #284]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	4a48      	ldr	r2, [pc, #288]	; (8014f4c <_ZN13STMUARTDriver4loopEv+0x158>)
 8014e2c:	4293      	cmp	r3, r2
 8014e2e:	d045      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e30:	4b44      	ldr	r3, [pc, #272]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	4a46      	ldr	r2, [pc, #280]	; (8014f50 <_ZN13STMUARTDriver4loopEv+0x15c>)
 8014e36:	4293      	cmp	r3, r2
 8014e38:	d040      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e3a:	4b42      	ldr	r3, [pc, #264]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	4a45      	ldr	r2, [pc, #276]	; (8014f54 <_ZN13STMUARTDriver4loopEv+0x160>)
 8014e40:	4293      	cmp	r3, r2
 8014e42:	d03b      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e44:	4b3f      	ldr	r3, [pc, #252]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	4a43      	ldr	r2, [pc, #268]	; (8014f58 <_ZN13STMUARTDriver4loopEv+0x164>)
 8014e4a:	4293      	cmp	r3, r2
 8014e4c:	d036      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e4e:	4b3d      	ldr	r3, [pc, #244]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	4a42      	ldr	r2, [pc, #264]	; (8014f5c <_ZN13STMUARTDriver4loopEv+0x168>)
 8014e54:	4293      	cmp	r3, r2
 8014e56:	d031      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e58:	4b3a      	ldr	r3, [pc, #232]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	4a40      	ldr	r2, [pc, #256]	; (8014f60 <_ZN13STMUARTDriver4loopEv+0x16c>)
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	d02c      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e62:	4b38      	ldr	r3, [pc, #224]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	4a3f      	ldr	r2, [pc, #252]	; (8014f64 <_ZN13STMUARTDriver4loopEv+0x170>)
 8014e68:	4293      	cmp	r3, r2
 8014e6a:	d027      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e6c:	4b35      	ldr	r3, [pc, #212]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	4a3d      	ldr	r2, [pc, #244]	; (8014f68 <_ZN13STMUARTDriver4loopEv+0x174>)
 8014e72:	4293      	cmp	r3, r2
 8014e74:	d022      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e76:	4b33      	ldr	r3, [pc, #204]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	4a3c      	ldr	r2, [pc, #240]	; (8014f6c <_ZN13STMUARTDriver4loopEv+0x178>)
 8014e7c:	4293      	cmp	r3, r2
 8014e7e:	d01d      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e80:	4b30      	ldr	r3, [pc, #192]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4a3a      	ldr	r2, [pc, #232]	; (8014f70 <_ZN13STMUARTDriver4loopEv+0x17c>)
 8014e86:	4293      	cmp	r3, r2
 8014e88:	d018      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e8a:	4b2e      	ldr	r3, [pc, #184]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	4a39      	ldr	r2, [pc, #228]	; (8014f74 <_ZN13STMUARTDriver4loopEv+0x180>)
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d013      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e94:	4b2b      	ldr	r3, [pc, #172]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	4a37      	ldr	r2, [pc, #220]	; (8014f78 <_ZN13STMUARTDriver4loopEv+0x184>)
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d00e      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014e9e:	4b29      	ldr	r3, [pc, #164]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	4a36      	ldr	r2, [pc, #216]	; (8014f7c <_ZN13STMUARTDriver4loopEv+0x188>)
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d009      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014ea8:	4b26      	ldr	r3, [pc, #152]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4a34      	ldr	r2, [pc, #208]	; (8014f80 <_ZN13STMUARTDriver4loopEv+0x18c>)
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	d004      	beq.n	8014ebc <_ZN13STMUARTDriver4loopEv+0xc8>
 8014eb2:	4b24      	ldr	r3, [pc, #144]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	4a33      	ldr	r2, [pc, #204]	; (8014f84 <_ZN13STMUARTDriver4loopEv+0x190>)
 8014eb8:	4293      	cmp	r3, r2
 8014eba:	d105      	bne.n	8014ec8 <_ZN13STMUARTDriver4loopEv+0xd4>
 8014ebc:	4b21      	ldr	r3, [pc, #132]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	685b      	ldr	r3, [r3, #4]
 8014ec2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014ec6:	e004      	b.n	8014ed2 <_ZN13STMUARTDriver4loopEv+0xde>
 8014ec8:	4b1e      	ldr	r3, [pc, #120]	; (8014f44 <_ZN13STMUARTDriver4loopEv+0x150>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014ed2:	60fb      	str	r3, [r7, #12]

		uint8_t sender = getSenderID(huart);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	695b      	ldr	r3, [r3, #20]
 8014ed8:	4619      	mov	r1, r3
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f000 f8da 	bl	8015094 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	72fb      	strb	r3, [r7, #11]


		if(end_dma_index < last_dma_index) { // Finish buffer
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	699b      	ldr	r3, [r3, #24]
 8014ee8:	68fa      	ldr	r2, [r7, #12]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d20f      	bcs.n	8014f0e <_ZN13STMUARTDriver4loopEv+0x11a>
			receiveUART(sender, buffer + last_dma_index, UART_BUFFER_SIZE - last_dma_index);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	699b      	ldr	r3, [r3, #24]
 8014ef6:	441a      	add	r2, r3
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	699b      	ldr	r3, [r3, #24]
 8014efc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014f00:	7af9      	ldrb	r1, [r7, #11]
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f000 f874 	bl	8014ff0 <_ZN13STMUARTDriver11receiveUARTEhPhm>
			this->last_dma_index = 0;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	619a      	str	r2, [r3, #24]
		}

		if(end_dma_index > last_dma_index) {
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	699b      	ldr	r3, [r3, #24]
 8014f12:	68fa      	ldr	r2, [r7, #12]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d910      	bls.n	8014f3a <_ZN13STMUARTDriver4loopEv+0x146>
			receiveUART(sender, buffer + last_dma_index, end_dma_index - last_dma_index);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	699b      	ldr	r3, [r3, #24]
 8014f20:	18d0      	adds	r0, r2, r3
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	699b      	ldr	r3, [r3, #24]
 8014f26:	68fa      	ldr	r2, [r7, #12]
 8014f28:	1ad3      	subs	r3, r2, r3
 8014f2a:	7af9      	ldrb	r1, [r7, #11]
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 f85e 	bl	8014ff0 <_ZN13STMUARTDriver11receiveUARTEhPhm>
			this->last_dma_index = end_dma_index;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	68fa      	ldr	r2, [r7, #12]
 8014f38:	619a      	str	r2, [r3, #24]
		}
	}
}
 8014f3a:	bf00      	nop
 8014f3c:	3710      	adds	r7, #16
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	24002140 	.word	0x24002140
 8014f48:	40020010 	.word	0x40020010
 8014f4c:	40020028 	.word	0x40020028
 8014f50:	40020040 	.word	0x40020040
 8014f54:	40020058 	.word	0x40020058
 8014f58:	40020070 	.word	0x40020070
 8014f5c:	40020088 	.word	0x40020088
 8014f60:	400200a0 	.word	0x400200a0
 8014f64:	400200b8 	.word	0x400200b8
 8014f68:	40020410 	.word	0x40020410
 8014f6c:	40020428 	.word	0x40020428
 8014f70:	40020440 	.word	0x40020440
 8014f74:	40020458 	.word	0x40020458
 8014f78:	40020470 	.word	0x40020470
 8014f7c:	40020488 	.word	0x40020488
 8014f80:	400204a0 	.word	0x400204a0
 8014f84:	400204b8 	.word	0x400204b8

08014f88 <_ZThn4_N13STMUARTDriver4loopEv>:
        void loop();
 8014f88:	f1a0 0004 	sub.w	r0, r0, #4
 8014f8c:	f7ff bf32 	b.w	8014df4 <_ZN13STMUARTDriver4loopEv>

08014f90 <_ZN13STMUARTDriver7receiveERKSt8functionIFvhPhmEE>:

void STMUARTDriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	6039      	str	r1, [r7, #0]
    this->receiver_func = receiver;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	3340      	adds	r3, #64	; 0x40
 8014f9e:	6839      	ldr	r1, [r7, #0]
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f000 f8a8 	bl	80150f6 <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
 8014fa6:	bf00      	nop
 8014fa8:	3708      	adds	r7, #8
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}

08014fae <_ZN13STMUARTDriver8transmitEPhm>:

void STMUARTDriver::transmit(uint8_t* buffer, uint32_t length) {
 8014fae:	b580      	push	{r7, lr}
 8014fb0:	b084      	sub	sp, #16
 8014fb2:	af00      	add	r7, sp, #0
 8014fb4:	60f8      	str	r0, [r7, #12]
 8014fb6:	60b9      	str	r1, [r7, #8]
 8014fb8:	607a      	str	r2, [r7, #4]
    if(HAL_UART_Transmit(huart, buffer, length, portMAX_DELAY) != HAL_OK){
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	6958      	ldr	r0, [r3, #20]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc6:	68b9      	ldr	r1, [r7, #8]
 8014fc8:	f7f8 fa3a 	bl	800d440 <HAL_UART_Transmit>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	2b00      	cmp	r3, #0
//        console.printf("[RoCo] [STMUARTDriverTransmit] Transmission failed for MCU#%" PRIu32 "\r\n", getSenderID(huart));
    }
}
 8014fd0:	bf00      	nop
 8014fd2:	3710      	adds	r7, #16
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <_ZN13STMUARTDriver12getSemaphoreEv>:
uint8_t* STMUARTDriver::getBuffer() {
	return this->buffer;
}


xSemaphoreHandle STMUARTDriver::getSemaphore() {
 8014fd8:	b480      	push	{r7}
 8014fda:	b083      	sub	sp, #12
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
	return this->semaphore;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	370c      	adds	r7, #12
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fee:	4770      	bx	lr

08014ff0 <_ZN13STMUARTDriver11receiveUARTEhPhm>:
 *
 * @param sender_id the ID of the MCU
 * @param buffer the buffer to provide to the user-defined callback function
 * @param length the size of the data in the buffer to provide
 */
void STMUARTDriver::receiveUART(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b084      	sub	sp, #16
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	60f8      	str	r0, [r7, #12]
 8014ff8:	607a      	str	r2, [r7, #4]
 8014ffa:	603b      	str	r3, [r7, #0]
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	72fb      	strb	r3, [r7, #11]
	this->receiver_func(sender_id, buffer, length);
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8015006:	7af9      	ldrb	r1, [r7, #11]
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	687a      	ldr	r2, [r7, #4]
 801500c:	f000 f88e 	bl	801512c <_ZNKSt8functionIFvhPhmEEclEhS0_m>
}
 8015010:	bf00      	nop
 8015012:	3710      	adds	r7, #16
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}

08015018 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
	while(xSemaphoreTakeFromISR(instance->getSemaphore(), nullptr)); // Clear semaphore
 8015020:	4b10      	ldr	r3, [pc, #64]	; (8015064 <HAL_UART_ErrorCallback+0x4c>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	4618      	mov	r0, r3
 8015026:	f7ff ffd7 	bl	8014fd8 <_ZN13STMUARTDriver12getSemaphoreEv>
 801502a:	4603      	mov	r3, r0
 801502c:	2200      	movs	r2, #0
 801502e:	2100      	movs	r1, #0
 8015030:	4618      	mov	r0, r3
 8015032:	f7fa fd09 	bl	800fa48 <xQueueReceiveFromISR>
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	bf14      	ite	ne
 801503c:	2301      	movne	r3, #1
 801503e:	2300      	moveq	r3, #0
 8015040:	b2db      	uxtb	r3, r3
 8015042:	2b00      	cmp	r3, #0
 8015044:	d000      	beq.n	8015048 <HAL_UART_ErrorCallback+0x30>
 8015046:	e7eb      	b.n	8015020 <HAL_UART_ErrorCallback+0x8>
	instance->init();
 8015048:	4b06      	ldr	r3, [pc, #24]	; (8015064 <HAL_UART_ErrorCallback+0x4c>)
 801504a:	681a      	ldr	r2, [r3, #0]
 801504c:	4b05      	ldr	r3, [pc, #20]	; (8015064 <HAL_UART_ErrorCallback+0x4c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	3310      	adds	r3, #16
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	4610      	mov	r0, r2
 8015058:	4798      	blx	r3
}
 801505a:	bf00      	nop
 801505c:	3708      	adds	r7, #8
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	24005f10 	.word	0x24005f10

08015068 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size) {
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	460b      	mov	r3, r1
 8015072:	807b      	strh	r3, [r7, #2]
	xSemaphoreGiveFromISR(instance->getSemaphore(), nullptr);
 8015074:	4b06      	ldr	r3, [pc, #24]	; (8015090 <HAL_UARTEx_RxEventCallback+0x28>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	4618      	mov	r0, r3
 801507a:	f7ff ffad 	bl	8014fd8 <_ZN13STMUARTDriver12getSemaphoreEv>
 801507e:	4603      	mov	r3, r0
 8015080:	2100      	movs	r1, #0
 8015082:	4618      	mov	r0, r3
 8015084:	f7fa fb46 	bl	800f714 <xQueueGiveFromISR>
}
 8015088:	bf00      	nop
 801508a:	3708      	adds	r7, #8
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	24005f10 	.word	0x24005f10

08015094 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef>:
 * @brief Get the sender id from the USART port ID
 *
 * @param huart the USART port to get
 * @return uint8_t the sender_id
 */
uint8_t STMUARTDriver::getSenderID(UART_HandleTypeDef* huart) {
 8015094:	b480      	push	{r7}
 8015096:	b085      	sub	sp, #20
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < NB_UART_PORTS; ++i){
 801509e:	2300      	movs	r3, #0
 80150a0:	60fb      	str	r3, [r7, #12]
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2b07      	cmp	r3, #7
 80150a6:	dc12      	bgt.n	80150ce <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x3a>
        if(this->mapper[i] == huart->Instance){
 80150a8:	687a      	ldr	r2, [r7, #4]
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	3306      	adds	r3, #6
 80150ae:	009b      	lsls	r3, r3, #2
 80150b0:	4413      	add	r3, r2
 80150b2:	685a      	ldr	r2, [r3, #4]
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d104      	bne.n	80150c6 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x32>
            return i+1;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	3301      	adds	r3, #1
 80150c2:	b2db      	uxtb	r3, r3
 80150c4:	e004      	b.n	80150d0 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0x3c>
    for(int i = 0; i < NB_UART_PORTS; ++i){
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	3301      	adds	r3, #1
 80150ca:	60fb      	str	r3, [r7, #12]
 80150cc:	e7e9      	b.n	80150a2 <_ZN13STMUARTDriver11getSenderIDEP20__UART_HandleTypeDef+0xe>
        }
    }
    return 0;
 80150ce:	2300      	movs	r3, #0
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3714      	adds	r7, #20
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr

080150dc <_ZNSt8functionIFvhPhmEEC1Ev>:
      function() noexcept
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7ec fa6a 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	4618      	mov	r0, r3
 80150f0:	3708      	adds	r7, #8
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <_ZNSt8functionIFvhPhmEEaSERKS2_>:
      operator=(const function& __x)
 80150f6:	b580      	push	{r7, lr}
 80150f8:	b086      	sub	sp, #24
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	6078      	str	r0, [r7, #4]
 80150fe:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8015100:	f107 0308 	add.w	r3, r7, #8
 8015104:	6839      	ldr	r1, [r7, #0]
 8015106:	4618      	mov	r0, r3
 8015108:	f000 f83e 	bl	8015188 <_ZNSt8functionIFvhPhmEEC1ERKS2_>
 801510c:	f107 0308 	add.w	r3, r7, #8
 8015110:	6879      	ldr	r1, [r7, #4]
 8015112:	4618      	mov	r0, r3
 8015114:	f000 f85a 	bl	80151cc <_ZNSt8functionIFvhPhmEE4swapERS2_>
 8015118:	f107 0308 	add.w	r3, r7, #8
 801511c:	4618      	mov	r0, r3
 801511e:	f7fc fa44 	bl	80115aa <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
 8015122:	687b      	ldr	r3, [r7, #4]
      }
 8015124:	4618      	mov	r0, r3
 8015126:	3718      	adds	r7, #24
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <_ZNKSt8functionIFvhPhmEEclEhS0_m>:
    function<_Res(_ArgTypes...)>::
 801512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015130:	b084      	sub	sp, #16
 8015132:	af00      	add	r7, sp, #0
 8015134:	60f8      	str	r0, [r7, #12]
 8015136:	607a      	str	r2, [r7, #4]
 8015138:	603b      	str	r3, [r7, #0]
 801513a:	460b      	mov	r3, r1
 801513c:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	4618      	mov	r0, r3
 8015142:	f7fd fb4b 	bl	80127dc <_ZNKSt14_Function_base8_M_emptyEv>
 8015146:	4603      	mov	r3, r0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d001      	beq.n	8015150 <_ZNKSt8functionIFvhPhmEEclEhS0_m+0x24>
	__throw_bad_function_call();
 801514c:	f000 fd3a 	bl	8015bc4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	68dc      	ldr	r4, [r3, #12]
 8015154:	68fd      	ldr	r5, [r7, #12]
 8015156:	f107 030b 	add.w	r3, r7, #11
 801515a:	4618      	mov	r0, r3
 801515c:	f7ec fd32 	bl	8001bc4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8015160:	4606      	mov	r6, r0
 8015162:	1d3b      	adds	r3, r7, #4
 8015164:	4618      	mov	r0, r3
 8015166:	f7fc fdbe 	bl	8011ce6 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
 801516a:	4680      	mov	r8, r0
 801516c:	463b      	mov	r3, r7
 801516e:	4618      	mov	r0, r3
 8015170:	f7fc fdc4 	bl	8011cfc <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8015174:	4603      	mov	r3, r0
 8015176:	4642      	mov	r2, r8
 8015178:	4631      	mov	r1, r6
 801517a:	4628      	mov	r0, r5
 801517c:	47a0      	blx	r4
 801517e:	bf00      	nop
    }
 8015180:	3710      	adds	r7, #16
 8015182:	46bd      	mov	sp, r7
 8015184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015188 <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	4618      	mov	r0, r3
 8015196:	f7ec fa13 	bl	80015c0 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 801519a:	6838      	ldr	r0, [r7, #0]
 801519c:	f000 f837 	bl	801520e <_ZNKSt8functionIFvhPhmEEcvbEv>
 80151a0:	4603      	mov	r3, r0
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d00d      	beq.n	80151c2 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	689b      	ldr	r3, [r3, #8]
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	2202      	movs	r2, #2
 80151b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	68da      	ldr	r2, [r3, #12]
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	689a      	ldr	r2, [r3, #8]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	609a      	str	r2, [r3, #8]
    }
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	4618      	mov	r0, r3
 80151c6:	3708      	adds	r7, #8
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	683a      	ldr	r2, [r7, #0]
 80151da:	4611      	mov	r1, r2
 80151dc:	4618      	mov	r0, r3
 80151de:	f7ff f8b4 	bl	801434a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f103 0208 	add.w	r2, r3, #8
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	3308      	adds	r3, #8
 80151ec:	4619      	mov	r1, r3
 80151ee:	4610      	mov	r0, r2
 80151f0:	f7ff f8dd 	bl	80143ae <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f103 020c 	add.w	r2, r3, #12
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	330c      	adds	r3, #12
 80151fe:	4619      	mov	r1, r3
 8015200:	4610      	mov	r0, r2
 8015202:	f000 f81f 	bl	8015244 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 8015206:	bf00      	nop
 8015208:	3708      	adds	r7, #8
 801520a:	46bd      	mov	sp, r7
 801520c:	bd80      	pop	{r7, pc}

0801520e <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
 801520e:	b580      	push	{r7, lr}
 8015210:	b082      	sub	sp, #8
 8015212:	af00      	add	r7, sp, #0
 8015214:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	4618      	mov	r0, r3
 801521a:	f7fd fadf 	bl	80127dc <_ZNKSt14_Function_base8_M_emptyEv>
 801521e:	4603      	mov	r3, r0
 8015220:	f083 0301 	eor.w	r3, r3, #1
 8015224:	b2db      	uxtb	r3, r3
 8015226:	4618      	mov	r0, r3
 8015228:	3708      	adds	r7, #8
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 801522e:	b480      	push	{r7}
 8015230:	b083      	sub	sp, #12
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	4618      	mov	r0, r3
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr

08015244 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 8015244:	b580      	push	{r7, lr}
 8015246:	b084      	sub	sp, #16
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f7ff ffed 	bl	801522e <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8015254:	4603      	mov	r3, r0
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801525a:	6838      	ldr	r0, [r7, #0]
 801525c:	f7ff ffe7 	bl	801522e <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8015260:	4603      	mov	r3, r0
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8015268:	f107 030c 	add.w	r3, r7, #12
 801526c:	4618      	mov	r0, r3
 801526e:	f7ff ffde 	bl	801522e <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
 8015272:	4603      	mov	r3, r0
 8015274:	681a      	ldr	r2, [r3, #0]
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	601a      	str	r2, [r3, #0]
    }
 801527a:	bf00      	nop
 801527c:	3710      	adds	r7, #16
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}

08015282 <vApplicationStackOverflowHook>:



extern "C" {

void vApplicationStackOverflowHook() {
 8015282:	b480      	push	{r7}
 8015284:	af00      	add	r7, sp, #0
	while(1);
 8015286:	e7fe      	b.n	8015286 <vApplicationStackOverflowHook+0x4>

08015288 <_Z41__static_initialization_and_destruction_0ii>:

//NetworkBus network(&telemtryDriver);

void setupTelemtry() {
	network.forward<PingPacket>(&network);
}
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	6039      	str	r1, [r7, #0]
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2b01      	cmp	r3, #1
 8015296:	d10c      	bne.n	80152b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801529e:	4293      	cmp	r3, r2
 80152a0:	d107      	bne.n	80152b2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
STMUARTDriver driver(&huart3);
 80152a2:	490d      	ldr	r1, [pc, #52]	; (80152d8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80152a4:	480d      	ldr	r0, [pc, #52]	; (80152dc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80152a6:	f7ff fcf7 	bl	8014c98 <_ZN13STMUARTDriverC1EP20__UART_HandleTypeDef>
NetworkBus network(&driver);
 80152aa:	490c      	ldr	r1, [pc, #48]	; (80152dc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80152ac:	480c      	ldr	r0, [pc, #48]	; (80152e0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80152ae:	f7ff fbff 	bl	8014ab0 <_ZN10NetworkBusC1EP8IODriver>
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d10a      	bne.n	80152ce <_Z41__static_initialization_and_destruction_0ii+0x46>
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152be:	4293      	cmp	r3, r2
 80152c0:	d105      	bne.n	80152ce <_Z41__static_initialization_and_destruction_0ii+0x46>
 80152c2:	4807      	ldr	r0, [pc, #28]	; (80152e0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80152c4:	f7ff fc94 	bl	8014bf0 <_ZN10NetworkBusD1Ev>
STMUARTDriver driver(&huart3);
 80152c8:	4804      	ldr	r0, [pc, #16]	; (80152dc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80152ca:	f7ff fd31 	bl	8014d30 <_ZN13STMUARTDriverD1Ev>
}
 80152ce:	bf00      	nop
 80152d0:	3708      	adds	r7, #8
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	24002020 	.word	0x24002020
 80152dc:	24005f14 	.word	0x24005f14
 80152e0:	24005f68 	.word	0x24005f68

080152e4 <_GLOBAL__sub_I_driver>:
 80152e4:	b580      	push	{r7, lr}
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80152ec:	2001      	movs	r0, #1
 80152ee:	f7ff ffcb 	bl	8015288 <_Z41__static_initialization_and_destruction_0ii>
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <_GLOBAL__sub_D_driver>:
 80152f4:	b580      	push	{r7, lr}
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80152fc:	2000      	movs	r0, #0
 80152fe:	f7ff ffc3 	bl	8015288 <_Z41__static_initialization_and_destruction_0ii>
 8015302:	bd80      	pop	{r7, pc}

08015304 <_ZN6Thread9isRunningEv>:
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
	virtual void init() = 0;
	virtual void loop() = 0;
	osThreadId getHandle();
	bool isRunning() { return running; }
 8015304:	b480      	push	{r7}
 8015306:	b083      	sub	sp, #12
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	7b1b      	ldrb	r3, [r3, #12]
 8015310:	4618      	mov	r0, r3
 8015312:	370c      	adds	r7, #12
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr

0801531c <_Z10__task_runPKv>:

#define DEFAULT_STACK_SIZE (512) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(const void* arg) {
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	60fb      	str	r3, [r7, #12]

	osDelay(100 / portTICK_PERIOD_MS);
 8015328:	2064      	movs	r0, #100	; 0x64
 801532a:	f7fa f83b 	bl	800f3a4 <osDelay>

	thread->init();
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	3308      	adds	r3, #8
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	68f8      	ldr	r0, [r7, #12]
 8015338:	4798      	blx	r3

	while(thread->isRunning()) {
 801533a:	68f8      	ldr	r0, [r7, #12]
 801533c:	f7ff ffe2 	bl	8015304 <_ZN6Thread9isRunningEv>
 8015340:	4603      	mov	r3, r0
 8015342:	2b00      	cmp	r3, #0
 8015344:	d009      	beq.n	801535a <_Z10__task_runPKv+0x3e>
		thread->loop();
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	330c      	adds	r3, #12
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	68f8      	ldr	r0, [r7, #12]
 8015350:	4798      	blx	r3
		osDelay(10 / portTICK_PERIOD_MS);
 8015352:	200a      	movs	r0, #10
 8015354:	f7fa f826 	bl	800f3a4 <osDelay>
	while(thread->isRunning()) {
 8015358:	e7ef      	b.n	801533a <_Z10__task_runPKv+0x1e>
	}

	delete thread;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d004      	beq.n	801536a <_Z10__task_runPKv+0x4e>
 8015360:	681a      	ldr	r2, [r3, #0]
 8015362:	3204      	adds	r2, #4
 8015364:	6812      	ldr	r2, [r2, #0]
 8015366:	4618      	mov	r0, r3
 8015368:	4790      	blx	r2

	vTaskDelete(nullptr);
 801536a:	2000      	movs	r0, #0
 801536c:	f7fa fddc 	bl	800ff28 <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 8015370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015374:	f7fa f816 	bl	800f3a4 <osDelay>
 8015378:	e7fa      	b.n	8015370 <_Z10__task_runPKv+0x54>

0801537a <_ZN6ThreadC1EPKc10osPriority>:

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
	;
}

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
 801537a:	b580      	push	{r7, lr}
 801537c:	b084      	sub	sp, #16
 801537e:	af00      	add	r7, sp, #0
 8015380:	60f8      	str	r0, [r7, #12]
 8015382:	60b9      	str	r1, [r7, #8]
 8015384:	4613      	mov	r3, r2
 8015386:	80fb      	strh	r3, [r7, #6]
 8015388:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801538c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015390:	68b9      	ldr	r1, [r7, #8]
 8015392:	68f8      	ldr	r0, [r7, #12]
 8015394:	f000 f806 	bl	80153a4 <_ZN6ThreadC1EPKc10osPrioritym>
	;
}
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	4618      	mov	r0, r3
 801539c:	3710      	adds	r7, #16
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}
	...

080153a4 <_ZN6ThreadC1EPKc10osPrioritym>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize) {
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b08a      	sub	sp, #40	; 0x28
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	60f8      	str	r0, [r7, #12]
 80153ac:	60b9      	str	r1, [r7, #8]
 80153ae:	603b      	str	r3, [r7, #0]
 80153b0:	4613      	mov	r3, r2
 80153b2:	80fb      	strh	r3, [r7, #6]
 80153b4:	4a13      	ldr	r2, [pc, #76]	; (8015404 <_ZN6ThreadC1EPKc10osPrioritym+0x60>)
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	601a      	str	r2, [r3, #0]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	2201      	movs	r2, #1
 80153be:	731a      	strb	r2, [r3, #12]
	osThreadDef_t thread = { (char*) name, &__task_run, priority, 0, stackSize};
 80153c0:	f107 0314 	add.w	r3, r7, #20
 80153c4:	2200      	movs	r2, #0
 80153c6:	601a      	str	r2, [r3, #0]
 80153c8:	605a      	str	r2, [r3, #4]
 80153ca:	609a      	str	r2, [r3, #8]
 80153cc:	60da      	str	r2, [r3, #12]
 80153ce:	611a      	str	r2, [r3, #16]
 80153d0:	4b0d      	ldr	r3, [pc, #52]	; (8015408 <_ZN6ThreadC1EPKc10osPrioritym+0x64>)
 80153d2:	61bb      	str	r3, [r7, #24]
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	617b      	str	r3, [r7, #20]
 80153d8:	88fb      	ldrh	r3, [r7, #6]
 80153da:	83bb      	strh	r3, [r7, #28]
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	627b      	str	r3, [r7, #36]	; 0x24
	this->handle = osThreadCreate(&thread, this);
 80153e0:	f107 0314 	add.w	r3, r7, #20
 80153e4:	68f9      	ldr	r1, [r7, #12]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7f9 ffb5 	bl	800f356 <osThreadCreate>
 80153ec:	4602      	mov	r2, r0
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	605a      	str	r2, [r3, #4]
	this->name = name;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	68ba      	ldr	r2, [r7, #8]
 80153f6:	609a      	str	r2, [r3, #8]
}
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	4618      	mov	r0, r3
 80153fc:	3728      	adds	r7, #40	; 0x28
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}
 8015402:	bf00      	nop
 8015404:	08018d14 	.word	0x08018d14
 8015408:	0801531d 	.word	0x0801531d

0801540c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801540c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801540e:	2400      	movs	r4, #0
 8015410:	2310      	movs	r3, #16
 8015412:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015416:	6803      	ldr	r3, [r0, #0]
 8015418:	4615      	mov	r5, r2
 801541a:	699e      	ldr	r6, [r3, #24]
 801541c:	6812      	ldr	r2, [r2, #0]
 801541e:	466b      	mov	r3, sp
 8015420:	e9cd 4400 	strd	r4, r4, [sp]
 8015424:	47b0      	blx	r6
 8015426:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801542a:	f003 0306 	and.w	r3, r3, #6
 801542e:	2b06      	cmp	r3, #6
 8015430:	bf03      	ittte	eq
 8015432:	9b00      	ldreq	r3, [sp, #0]
 8015434:	602b      	streq	r3, [r5, #0]
 8015436:	2001      	moveq	r0, #1
 8015438:	4620      	movne	r0, r4
 801543a:	b004      	add	sp, #16
 801543c:	bd70      	pop	{r4, r5, r6, pc}

0801543e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801543e:	9800      	ldr	r0, [sp, #0]
 8015440:	4290      	cmp	r0, r2
 8015442:	bf14      	ite	ne
 8015444:	2001      	movne	r0, #1
 8015446:	2006      	moveq	r0, #6
 8015448:	4770      	bx	lr
	...

0801544c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801544c:	b510      	push	{r4, lr}
 801544e:	4b03      	ldr	r3, [pc, #12]	; (801545c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8015450:	6003      	str	r3, [r0, #0]
 8015452:	4604      	mov	r4, r0
 8015454:	f000 f965 	bl	8015722 <_ZNSt9type_infoD1Ev>
 8015458:	4620      	mov	r0, r4
 801545a:	bd10      	pop	{r4, pc}
 801545c:	08019350 	.word	0x08019350

08015460 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8015460:	b510      	push	{r4, lr}
 8015462:	4604      	mov	r4, r0
 8015464:	f7ff fff2 	bl	801544c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8015468:	4620      	mov	r0, r4
 801546a:	2108      	movs	r1, #8
 801546c:	f000 f842 	bl	80154f4 <_ZdlPvj>
 8015470:	4620      	mov	r0, r4
 8015472:	bd10      	pop	{r4, pc}

08015474 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8015474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015478:	461f      	mov	r7, r3
 801547a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801547e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015482:	4598      	cmp	r8, r3
 8015484:	4606      	mov	r6, r0
 8015486:	4615      	mov	r5, r2
 8015488:	d107      	bne.n	801549a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801548a:	9907      	ldr	r1, [sp, #28]
 801548c:	f000 f94e 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015490:	b118      	cbz	r0, 801549a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8015492:	7165      	strb	r5, [r4, #5]
 8015494:	2000      	movs	r0, #0
 8015496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801549a:	4639      	mov	r1, r7
 801549c:	4630      	mov	r0, r6
 801549e:	f000 f945 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 80154a2:	2800      	cmp	r0, #0
 80154a4:	d0f6      	beq.n	8015494 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80154a6:	2301      	movs	r3, #1
 80154a8:	f8c4 8000 	str.w	r8, [r4]
 80154ac:	7125      	strb	r5, [r4, #4]
 80154ae:	71a3      	strb	r3, [r4, #6]
 80154b0:	e7f0      	b.n	8015494 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080154b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80154b2:	b538      	push	{r3, r4, r5, lr}
 80154b4:	4615      	mov	r5, r2
 80154b6:	461c      	mov	r4, r3
 80154b8:	f000 f938 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 80154bc:	b120      	cbz	r0, 80154c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80154be:	2308      	movs	r3, #8
 80154c0:	60e3      	str	r3, [r4, #12]
 80154c2:	2306      	movs	r3, #6
 80154c4:	6025      	str	r5, [r4, #0]
 80154c6:	7123      	strb	r3, [r4, #4]
 80154c8:	bd38      	pop	{r3, r4, r5, pc}

080154ca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80154ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80154cc:	4605      	mov	r5, r0
 80154ce:	460c      	mov	r4, r1
 80154d0:	9201      	str	r2, [sp, #4]
 80154d2:	461e      	mov	r6, r3
 80154d4:	f000 f92a 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 80154d8:	b950      	cbnz	r0, 80154f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80154da:	2e03      	cmp	r6, #3
 80154dc:	d808      	bhi.n	80154f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80154de:	6823      	ldr	r3, [r4, #0]
 80154e0:	9a01      	ldr	r2, [sp, #4]
 80154e2:	695b      	ldr	r3, [r3, #20]
 80154e4:	4629      	mov	r1, r5
 80154e6:	4620      	mov	r0, r4
 80154e8:	b002      	add	sp, #8
 80154ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154ee:	4718      	bx	r3
 80154f0:	b002      	add	sp, #8
 80154f2:	bd70      	pop	{r4, r5, r6, pc}

080154f4 <_ZdlPvj>:
 80154f4:	f7fb bfa6 	b.w	8011444 <_ZdlPv>

080154f8 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
 80154f8:	2001      	movs	r0, #1
 80154fa:	4770      	bx	lr

080154fc <_ZN10__cxxabiv120__function_type_infoD1Ev>:
 80154fc:	b510      	push	{r4, lr}
 80154fe:	4b03      	ldr	r3, [pc, #12]	; (801550c <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
 8015500:	6003      	str	r3, [r0, #0]
 8015502:	4604      	mov	r4, r0
 8015504:	f000 f90d 	bl	8015722 <_ZNSt9type_infoD1Ev>
 8015508:	4620      	mov	r0, r4
 801550a:	bd10      	pop	{r4, pc}
 801550c:	080193b0 	.word	0x080193b0

08015510 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
 8015510:	b510      	push	{r4, lr}
 8015512:	4604      	mov	r4, r0
 8015514:	f7ff fff2 	bl	80154fc <_ZN10__cxxabiv120__function_type_infoD1Ev>
 8015518:	4620      	mov	r0, r4
 801551a:	2108      	movs	r1, #8
 801551c:	f7ff ffea 	bl	80154f4 <_ZdlPvj>
 8015520:	4620      	mov	r0, r4
 8015522:	bd10      	pop	{r4, pc}

08015524 <__cxa_guard_acquire>:
 8015524:	6803      	ldr	r3, [r0, #0]
 8015526:	07db      	lsls	r3, r3, #31
 8015528:	d406      	bmi.n	8015538 <__cxa_guard_acquire+0x14>
 801552a:	7843      	ldrb	r3, [r0, #1]
 801552c:	b103      	cbz	r3, 8015530 <__cxa_guard_acquire+0xc>
 801552e:	deff      	udf	#255	; 0xff
 8015530:	2301      	movs	r3, #1
 8015532:	7043      	strb	r3, [r0, #1]
 8015534:	4618      	mov	r0, r3
 8015536:	4770      	bx	lr
 8015538:	2000      	movs	r0, #0
 801553a:	4770      	bx	lr

0801553c <__cxa_guard_release>:
 801553c:	2301      	movs	r3, #1
 801553e:	6003      	str	r3, [r0, #0]
 8015540:	4770      	bx	lr
	...

08015544 <_ZSt11_Hash_bytesPKvjj>:
 8015544:	b570      	push	{r4, r5, r6, lr}
 8015546:	4c18      	ldr	r4, [pc, #96]	; (80155a8 <_ZSt11_Hash_bytesPKvjj+0x64>)
 8015548:	404a      	eors	r2, r1
 801554a:	460d      	mov	r5, r1
 801554c:	1846      	adds	r6, r0, r1
 801554e:	2d03      	cmp	r5, #3
 8015550:	eba6 0305 	sub.w	r3, r6, r5
 8015554:	d908      	bls.n	8015568 <_ZSt11_Hash_bytesPKvjj+0x24>
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	4363      	muls	r3, r4
 801555a:	ea83 6313 	eor.w	r3, r3, r3, lsr #24
 801555e:	4362      	muls	r2, r4
 8015560:	4363      	muls	r3, r4
 8015562:	405a      	eors	r2, r3
 8015564:	3d04      	subs	r5, #4
 8015566:	e7f2      	b.n	801554e <_ZSt11_Hash_bytesPKvjj+0xa>
 8015568:	088b      	lsrs	r3, r1, #2
 801556a:	f06f 0503 	mvn.w	r5, #3
 801556e:	fb05 1103 	mla	r1, r5, r3, r1
 8015572:	2902      	cmp	r1, #2
 8015574:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8015578:	d011      	beq.n	801559e <_ZSt11_Hash_bytesPKvjj+0x5a>
 801557a:	2903      	cmp	r1, #3
 801557c:	d00c      	beq.n	8015598 <_ZSt11_Hash_bytesPKvjj+0x54>
 801557e:	2901      	cmp	r1, #1
 8015580:	d103      	bne.n	801558a <_ZSt11_Hash_bytesPKvjj+0x46>
 8015582:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
 8015586:	4042      	eors	r2, r0
 8015588:	4362      	muls	r2, r4
 801558a:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 801558e:	fb04 f002 	mul.w	r0, r4, r2
 8015592:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8015596:	bd70      	pop	{r4, r5, r6, pc}
 8015598:	78a9      	ldrb	r1, [r5, #2]
 801559a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 801559e:	7869      	ldrb	r1, [r5, #1]
 80155a0:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 80155a4:	e7ed      	b.n	8015582 <_ZSt11_Hash_bytesPKvjj+0x3e>
 80155a6:	bf00      	nop
 80155a8:	5bd1e995 	.word	0x5bd1e995

080155ac <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 80155ac:	2001      	movs	r0, #1
 80155ae:	4770      	bx	lr

080155b0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 80155b0:	b510      	push	{r4, lr}
 80155b2:	4b03      	ldr	r3, [pc, #12]	; (80155c0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 80155b4:	6003      	str	r3, [r0, #0]
 80155b6:	4604      	mov	r4, r0
 80155b8:	f000 fb38 	bl	8015c2c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 80155bc:	4620      	mov	r0, r4
 80155be:	bd10      	pop	{r4, pc}
 80155c0:	08019400 	.word	0x08019400

080155c4 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 80155c4:	b510      	push	{r4, lr}
 80155c6:	4604      	mov	r4, r0
 80155c8:	f7ff fff2 	bl	80155b0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 80155cc:	4620      	mov	r0, r4
 80155ce:	2110      	movs	r1, #16
 80155d0:	f7ff ff90 	bl	80154f4 <_ZdlPvj>
 80155d4:	4620      	mov	r0, r4
 80155d6:	bd10      	pop	{r4, pc}

080155d8 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 80155d8:	2b01      	cmp	r3, #1
 80155da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80155dc:	4606      	mov	r6, r0
 80155de:	460c      	mov	r4, r1
 80155e0:	461d      	mov	r5, r3
 80155e2:	d806      	bhi.n	80155f2 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 80155e4:	490c      	ldr	r1, [pc, #48]	; (8015618 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 80155e6:	68c0      	ldr	r0, [r0, #12]
 80155e8:	9201      	str	r2, [sp, #4]
 80155ea:	f000 f89f 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 80155ee:	9a01      	ldr	r2, [sp, #4]
 80155f0:	b948      	cbnz	r0, 8015606 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2e>
 80155f2:	68f0      	ldr	r0, [r6, #12]
 80155f4:	68e1      	ldr	r1, [r4, #12]
 80155f6:	6803      	ldr	r3, [r0, #0]
 80155f8:	691e      	ldr	r6, [r3, #16]
 80155fa:	1cab      	adds	r3, r5, #2
 80155fc:	46b4      	mov	ip, r6
 80155fe:	b002      	add	sp, #8
 8015600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015604:	4760      	bx	ip
 8015606:	68e0      	ldr	r0, [r4, #12]
 8015608:	6803      	ldr	r3, [r0, #0]
 801560a:	68db      	ldr	r3, [r3, #12]
 801560c:	4798      	blx	r3
 801560e:	f080 0001 	eor.w	r0, r0, #1
 8015612:	b2c0      	uxtb	r0, r0
 8015614:	b002      	add	sp, #8
 8015616:	bd70      	pop	{r4, r5, r6, pc}
 8015618:	08019504 	.word	0x08019504

0801561c <__cxa_pure_virtual>:
 801561c:	b508      	push	{r3, lr}
 801561e:	f000 fae1 	bl	8015be4 <_ZSt9terminatev>
	...

08015624 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8015624:	b510      	push	{r4, lr}
 8015626:	4b03      	ldr	r3, [pc, #12]	; (8015634 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8015628:	6003      	str	r3, [r0, #0]
 801562a:	4604      	mov	r4, r0
 801562c:	f7ff ff0e 	bl	801544c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8015630:	4620      	mov	r0, r4
 8015632:	bd10      	pop	{r4, pc}
 8015634:	08019458 	.word	0x08019458

08015638 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8015638:	b510      	push	{r4, lr}
 801563a:	4604      	mov	r4, r0
 801563c:	f7ff fff2 	bl	8015624 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8015640:	4620      	mov	r0, r4
 8015642:	210c      	movs	r1, #12
 8015644:	f7ff ff56 	bl	80154f4 <_ZdlPvj>
 8015648:	4620      	mov	r0, r4
 801564a:	bd10      	pop	{r4, pc}

0801564c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801564c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801564e:	9f08      	ldr	r7, [sp, #32]
 8015650:	4297      	cmp	r7, r2
 8015652:	4605      	mov	r5, r0
 8015654:	460e      	mov	r6, r1
 8015656:	4614      	mov	r4, r2
 8015658:	d00a      	beq.n	8015670 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 801565a:	68a8      	ldr	r0, [r5, #8]
 801565c:	6802      	ldr	r2, [r0, #0]
 801565e:	9708      	str	r7, [sp, #32]
 8015660:	6a15      	ldr	r5, [r2, #32]
 8015662:	4631      	mov	r1, r6
 8015664:	4622      	mov	r2, r4
 8015666:	46ac      	mov	ip, r5
 8015668:	b003      	add	sp, #12
 801566a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801566e:	4760      	bx	ip
 8015670:	4619      	mov	r1, r3
 8015672:	9301      	str	r3, [sp, #4]
 8015674:	f000 f85a 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015678:	9b01      	ldr	r3, [sp, #4]
 801567a:	2800      	cmp	r0, #0
 801567c:	d0ed      	beq.n	801565a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 801567e:	2006      	movs	r0, #6
 8015680:	b003      	add	sp, #12
 8015682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8015684:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015688:	460d      	mov	r5, r1
 801568a:	4619      	mov	r1, r3
 801568c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8015690:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8015694:	4681      	mov	r9, r0
 8015696:	4617      	mov	r7, r2
 8015698:	4698      	mov	r8, r3
 801569a:	f000 f847 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 801569e:	b190      	cbz	r0, 80156c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80156a0:	2d00      	cmp	r5, #0
 80156a2:	6034      	str	r4, [r6, #0]
 80156a4:	7137      	strb	r7, [r6, #4]
 80156a6:	db09      	blt.n	80156bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80156a8:	1961      	adds	r1, r4, r5
 80156aa:	458a      	cmp	sl, r1
 80156ac:	bf0c      	ite	eq
 80156ae:	2106      	moveq	r1, #6
 80156b0:	2101      	movne	r1, #1
 80156b2:	71b1      	strb	r1, [r6, #6]
 80156b4:	2000      	movs	r0, #0
 80156b6:	b001      	add	sp, #4
 80156b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156bc:	3502      	adds	r5, #2
 80156be:	d1f9      	bne.n	80156b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80156c0:	2301      	movs	r3, #1
 80156c2:	71b3      	strb	r3, [r6, #6]
 80156c4:	e7f6      	b.n	80156b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80156c6:	4554      	cmp	r4, sl
 80156c8:	d106      	bne.n	80156d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80156ca:	4659      	mov	r1, fp
 80156cc:	4648      	mov	r0, r9
 80156ce:	f000 f82d 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 80156d2:	b108      	cbz	r0, 80156d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80156d4:	7177      	strb	r7, [r6, #5]
 80156d6:	e7ed      	b.n	80156b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80156d8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80156dc:	6803      	ldr	r3, [r0, #0]
 80156de:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80156e2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80156e6:	69dc      	ldr	r4, [r3, #28]
 80156e8:	463a      	mov	r2, r7
 80156ea:	4643      	mov	r3, r8
 80156ec:	4629      	mov	r1, r5
 80156ee:	46a4      	mov	ip, r4
 80156f0:	b001      	add	sp, #4
 80156f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156f6:	4760      	bx	ip

080156f8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80156f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156fc:	4607      	mov	r7, r0
 80156fe:	460c      	mov	r4, r1
 8015700:	4615      	mov	r5, r2
 8015702:	461e      	mov	r6, r3
 8015704:	f7ff fed5 	bl	80154b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8015708:	b948      	cbnz	r0, 801571e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801570a:	68b8      	ldr	r0, [r7, #8]
 801570c:	6803      	ldr	r3, [r0, #0]
 801570e:	699f      	ldr	r7, [r3, #24]
 8015710:	462a      	mov	r2, r5
 8015712:	4633      	mov	r3, r6
 8015714:	4621      	mov	r1, r4
 8015716:	46bc      	mov	ip, r7
 8015718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801571c:	4760      	bx	ip
 801571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015722 <_ZNSt9type_infoD1Ev>:
 8015722:	4770      	bx	lr

08015724 <_ZNKSt9type_info14__is_pointer_pEv>:
 8015724:	2000      	movs	r0, #0
 8015726:	4770      	bx	lr

08015728 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8015728:	2000      	movs	r0, #0
 801572a:	4770      	bx	lr

0801572c <_ZNKSt9type_infoeqERKS_>:
 801572c:	4281      	cmp	r1, r0
 801572e:	b508      	push	{r3, lr}
 8015730:	d00e      	beq.n	8015750 <_ZNKSt9type_infoeqERKS_+0x24>
 8015732:	6840      	ldr	r0, [r0, #4]
 8015734:	7803      	ldrb	r3, [r0, #0]
 8015736:	2b2a      	cmp	r3, #42	; 0x2a
 8015738:	d00c      	beq.n	8015754 <_ZNKSt9type_infoeqERKS_+0x28>
 801573a:	6849      	ldr	r1, [r1, #4]
 801573c:	780b      	ldrb	r3, [r1, #0]
 801573e:	2b2a      	cmp	r3, #42	; 0x2a
 8015740:	bf08      	it	eq
 8015742:	3101      	addeq	r1, #1
 8015744:	f7ea fdcc 	bl	80002e0 <strcmp>
 8015748:	fab0 f080 	clz	r0, r0
 801574c:	0940      	lsrs	r0, r0, #5
 801574e:	bd08      	pop	{r3, pc}
 8015750:	2001      	movs	r0, #1
 8015752:	e7fc      	b.n	801574e <_ZNKSt9type_infoeqERKS_+0x22>
 8015754:	2000      	movs	r0, #0
 8015756:	e7fa      	b.n	801574e <_ZNKSt9type_infoeqERKS_+0x22>

08015758 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8015758:	f7ff bfe8 	b.w	801572c <_ZNKSt9type_infoeqERKS_>

0801575c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 801575c:	b510      	push	{r4, lr}
 801575e:	4b03      	ldr	r3, [pc, #12]	; (801576c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8015760:	6003      	str	r3, [r0, #0]
 8015762:	4604      	mov	r4, r0
 8015764:	f7ff fe72 	bl	801544c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8015768:	4620      	mov	r0, r4
 801576a:	bd10      	pop	{r4, pc}
 801576c:	080194d0 	.word	0x080194d0

08015770 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8015770:	b510      	push	{r4, lr}
 8015772:	4604      	mov	r4, r0
 8015774:	f7ff fff2 	bl	801575c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8015778:	4620      	mov	r0, r4
 801577a:	2118      	movs	r1, #24
 801577c:	f7ff feba 	bl	80154f4 <_ZdlPvj>
 8015780:	4620      	mov	r0, r4
 8015782:	bd10      	pop	{r4, pc}

08015784 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8015784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015788:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801578c:	454a      	cmp	r2, r9
 801578e:	4604      	mov	r4, r0
 8015790:	460f      	mov	r7, r1
 8015792:	4616      	mov	r6, r2
 8015794:	469a      	mov	sl, r3
 8015796:	d024      	beq.n	80157e2 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8015798:	f8d4 800c 	ldr.w	r8, [r4, #12]
 801579c:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 80157a0:	f1b8 0f00 	cmp.w	r8, #0
 80157a4:	d028      	beq.n	80157f8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 80157a6:	68e5      	ldr	r5, [r4, #12]
 80157a8:	07aa      	lsls	r2, r5, #30
 80157aa:	d521      	bpl.n	80157f0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 80157ac:	122a      	asrs	r2, r5, #8
 80157ae:	f015 0501 	ands.w	r5, r5, #1
 80157b2:	d003      	beq.n	80157bc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 80157b4:	1cfb      	adds	r3, r7, #3
 80157b6:	d01b      	beq.n	80157f0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 80157b8:	6833      	ldr	r3, [r6, #0]
 80157ba:	589a      	ldr	r2, [r3, r2]
 80157bc:	68a0      	ldr	r0, [r4, #8]
 80157be:	6803      	ldr	r3, [r0, #0]
 80157c0:	f8cd 9000 	str.w	r9, [sp]
 80157c4:	f8d3 b020 	ldr.w	fp, [r3, #32]
 80157c8:	4432      	add	r2, r6
 80157ca:	4653      	mov	r3, sl
 80157cc:	4639      	mov	r1, r7
 80157ce:	47d8      	blx	fp
 80157d0:	2803      	cmp	r0, #3
 80157d2:	d90d      	bls.n	80157f0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 80157d4:	b115      	cbz	r5, 80157dc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 80157d6:	f040 0001 	orr.w	r0, r0, #1
 80157da:	b2c0      	uxtb	r0, r0
 80157dc:	b003      	add	sp, #12
 80157de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e2:	4619      	mov	r1, r3
 80157e4:	f7ff ffa2 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 80157e8:	2800      	cmp	r0, #0
 80157ea:	d0d5      	beq.n	8015798 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80157ec:	2006      	movs	r0, #6
 80157ee:	e7f5      	b.n	80157dc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 80157f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80157f4:	3c08      	subs	r4, #8
 80157f6:	e7d3      	b.n	80157a0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 80157f8:	2001      	movs	r0, #1
 80157fa:	e7ef      	b.n	80157dc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

080157fc <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 80157fc:	b4f0      	push	{r4, r5, r6, r7}
 80157fe:	1e0d      	subs	r5, r1, #0
 8015800:	9c04      	ldr	r4, [sp, #16]
 8015802:	db06      	blt.n	8015812 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 8015804:	1950      	adds	r0, r2, r5
 8015806:	4284      	cmp	r4, r0
 8015808:	bf14      	ite	ne
 801580a:	2001      	movne	r0, #1
 801580c:	2006      	moveq	r0, #6
 801580e:	bcf0      	pop	{r4, r5, r6, r7}
 8015810:	4770      	bx	lr
 8015812:	3502      	adds	r5, #2
 8015814:	d005      	beq.n	8015822 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 8015816:	6805      	ldr	r5, [r0, #0]
 8015818:	9404      	str	r4, [sp, #16]
 801581a:	6a2c      	ldr	r4, [r5, #32]
 801581c:	46a4      	mov	ip, r4
 801581e:	bcf0      	pop	{r4, r5, r6, r7}
 8015820:	4760      	bx	ip
 8015822:	2001      	movs	r0, #1
 8015824:	e7f3      	b.n	801580e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

08015826 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8015826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801582a:	b091      	sub	sp, #68	; 0x44
 801582c:	469a      	mov	sl, r3
 801582e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8015830:	9206      	str	r2, [sp, #24]
 8015832:	68a3      	ldr	r3, [r4, #8]
 8015834:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015836:	4688      	mov	r8, r1
 8015838:	06d9      	lsls	r1, r3, #27
 801583a:	bf44      	itt	mi
 801583c:	6883      	ldrmi	r3, [r0, #8]
 801583e:	60a3      	strmi	r3, [r4, #8]
 8015840:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015842:	4293      	cmp	r3, r2
 8015844:	4681      	mov	r9, r0
 8015846:	d107      	bne.n	8015858 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8015848:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801584a:	f7ff ff6f 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 801584e:	b118      	cbz	r0, 8015858 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
 8015850:	9b06      	ldr	r3, [sp, #24]
 8015852:	7163      	strb	r3, [r4, #5]
 8015854:	2700      	movs	r7, #0
 8015856:	e07f      	b.n	8015958 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 8015858:	4651      	mov	r1, sl
 801585a:	4648      	mov	r0, r9
 801585c:	f7ff ff66 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015860:	b1c0      	cbz	r0, 8015894 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8015862:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015864:	6023      	str	r3, [r4, #0]
 8015866:	f1b8 0f00 	cmp.w	r8, #0
 801586a:	9b06      	ldr	r3, [sp, #24]
 801586c:	7123      	strb	r3, [r4, #4]
 801586e:	db0b      	blt.n	8015888 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
 8015870:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015872:	4498      	add	r8, r3
 8015874:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015876:	4543      	cmp	r3, r8
 8015878:	bf0c      	ite	eq
 801587a:	f04f 0806 	moveq.w	r8, #6
 801587e:	f04f 0801 	movne.w	r8, #1
 8015882:	f884 8006 	strb.w	r8, [r4, #6]
 8015886:	e7e5      	b.n	8015854 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8015888:	f118 0f02 	cmn.w	r8, #2
 801588c:	d1e2      	bne.n	8015854 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 801588e:	2301      	movs	r3, #1
 8015890:	71a3      	strb	r3, [r4, #6]
 8015892:	e7df      	b.n	8015854 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
 8015894:	f1b8 0f00 	cmp.w	r8, #0
 8015898:	bfa9      	itett	ge
 801589a:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 801589c:	9007      	strlt	r0, [sp, #28]
 801589e:	eba3 0308 	subge.w	r3, r3, r8
 80158a2:	9307      	strge	r3, [sp, #28]
 80158a4:	2700      	movs	r7, #0
 80158a6:	2302      	movs	r3, #2
 80158a8:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 80158ac:	2301      	movs	r3, #1
 80158ae:	9308      	str	r3, [sp, #32]
 80158b0:	9b06      	ldr	r3, [sp, #24]
 80158b2:	f043 0301 	orr.w	r3, r3, #1
 80158b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80158b8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80158bc:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 80158c0:	9305      	str	r3, [sp, #20]
 80158c2:	f1bb 0f00 	cmp.w	fp, #0
 80158c6:	f000 80d4 	beq.w	8015a72 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 80158ca:	2300      	movs	r3, #0
 80158cc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80158d0:	9b05      	ldr	r3, [sp, #20]
 80158d2:	68a5      	ldr	r5, [r4, #8]
 80158d4:	68db      	ldr	r3, [r3, #12]
 80158d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80158d8:	07da      	lsls	r2, r3, #31
 80158da:	bf43      	ittte	mi
 80158dc:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 80158de:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 80158e0:	6800      	ldrmi	r0, [r0, #0]
 80158e2:	9a06      	ldrpl	r2, [sp, #24]
 80158e4:	ea4f 2123 	mov.w	r1, r3, asr #8
 80158e8:	bf48      	it	mi
 80158ea:	5841      	ldrmi	r1, [r0, r1]
 80158ec:	981a      	ldr	r0, [sp, #104]	; 0x68
 80158ee:	4401      	add	r1, r0
 80158f0:	9807      	ldr	r0, [sp, #28]
 80158f2:	b138      	cbz	r0, 8015904 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xde>
 80158f4:	4288      	cmp	r0, r1
 80158f6:	9e08      	ldr	r6, [sp, #32]
 80158f8:	bf2c      	ite	cs
 80158fa:	2000      	movcs	r0, #0
 80158fc:	2001      	movcc	r0, #1
 80158fe:	42b0      	cmp	r0, r6
 8015900:	f000 80b3 	beq.w	8015a6a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
 8015904:	079b      	lsls	r3, r3, #30
 8015906:	d407      	bmi.n	8015918 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf2>
 8015908:	f118 0f02 	cmn.w	r8, #2
 801590c:	d102      	bne.n	8015914 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xee>
 801590e:	07ae      	lsls	r6, r5, #30
 8015910:	f000 80ad 	beq.w	8015a6e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
 8015914:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8015918:	9b05      	ldr	r3, [sp, #20]
 801591a:	6898      	ldr	r0, [r3, #8]
 801591c:	ad0d      	add	r5, sp, #52	; 0x34
 801591e:	6803      	ldr	r3, [r0, #0]
 8015920:	9503      	str	r5, [sp, #12]
 8015922:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015924:	9502      	str	r5, [sp, #8]
 8015926:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015928:	e9cd 1500 	strd	r1, r5, [sp]
 801592c:	4641      	mov	r1, r8
 801592e:	69dd      	ldr	r5, [r3, #28]
 8015930:	4653      	mov	r3, sl
 8015932:	47a8      	blx	r5
 8015934:	7963      	ldrb	r3, [r4, #5]
 8015936:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 801593a:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 801593e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015940:	4313      	orrs	r3, r2
 8015942:	2d06      	cmp	r5, #6
 8015944:	7163      	strb	r3, [r4, #5]
 8015946:	d001      	beq.n	801594c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x126>
 8015948:	2d02      	cmp	r5, #2
 801594a:	d109      	bne.n	8015960 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
 801594c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8015950:	6021      	str	r1, [r4, #0]
 8015952:	7123      	strb	r3, [r4, #4]
 8015954:	71a5      	strb	r5, [r4, #6]
 8015956:	4607      	mov	r7, r0
 8015958:	4638      	mov	r0, r7
 801595a:	b011      	add	sp, #68	; 0x44
 801595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015960:	6822      	ldr	r2, [r4, #0]
 8015962:	b9a7      	cbnz	r7, 801598e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 8015964:	b9aa      	cbnz	r2, 8015992 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
 8015966:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801596a:	6021      	str	r1, [r4, #0]
 801596c:	7122      	strb	r2, [r4, #4]
 801596e:	b121      	cbz	r1, 801597a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015970:	b11b      	cbz	r3, 801597a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015972:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015976:	07dd      	lsls	r5, r3, #31
 8015978:	d5ed      	bpl.n	8015956 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 801597a:	7963      	ldrb	r3, [r4, #5]
 801597c:	2b04      	cmp	r3, #4
 801597e:	d0ea      	beq.n	8015956 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 8015980:	9b05      	ldr	r3, [sp, #20]
 8015982:	3b08      	subs	r3, #8
 8015984:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015988:	9305      	str	r3, [sp, #20]
 801598a:	4607      	mov	r7, r0
 801598c:	e799      	b.n	80158c2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
 801598e:	2a00      	cmp	r2, #0
 8015990:	d037      	beq.n	8015a02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1dc>
 8015992:	4291      	cmp	r1, r2
 8015994:	d106      	bne.n	80159a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17e>
 8015996:	7923      	ldrb	r3, [r4, #4]
 8015998:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801599c:	4313      	orrs	r3, r2
 801599e:	7123      	strb	r3, [r4, #4]
 80159a0:	4638      	mov	r0, r7
 80159a2:	e7ea      	b.n	801597a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 80159a4:	b909      	cbnz	r1, 80159aa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 80159a6:	2800      	cmp	r0, #0
 80159a8:	d0fa      	beq.n	80159a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 80159aa:	2b03      	cmp	r3, #3
 80159ac:	79a6      	ldrb	r6, [r4, #6]
 80159ae:	d904      	bls.n	80159ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x194>
 80159b0:	07d9      	lsls	r1, r3, #31
 80159b2:	d529      	bpl.n	8015a08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 80159b4:	68a3      	ldr	r3, [r4, #8]
 80159b6:	079b      	lsls	r3, r3, #30
 80159b8:	d526      	bpl.n	8015a08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
 80159ba:	b97e      	cbnz	r6, 80159dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b6>
 80159bc:	2d03      	cmp	r5, #3
 80159be:	d905      	bls.n	80159cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a6>
 80159c0:	07ee      	lsls	r6, r5, #31
 80159c2:	d541      	bpl.n	8015a48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
 80159c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80159c8:	0798      	lsls	r0, r3, #30
 80159ca:	d53d      	bpl.n	8015a48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
 80159cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80159ce:	9300      	str	r3, [sp, #0]
 80159d0:	4641      	mov	r1, r8
 80159d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159d4:	4650      	mov	r0, sl
 80159d6:	f7ff ff11 	bl	80157fc <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 80159da:	4606      	mov	r6, r0
 80159dc:	b9e5      	cbnz	r5, 8015a18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 80159de:	2e03      	cmp	r6, #3
 80159e0:	d905      	bls.n	80159ee <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c8>
 80159e2:	07f1      	lsls	r1, r6, #31
 80159e4:	d532      	bpl.n	8015a4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 80159e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80159ea:	079a      	lsls	r2, r3, #30
 80159ec:	d52e      	bpl.n	8015a4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
 80159ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80159f0:	9300      	str	r3, [sp, #0]
 80159f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80159f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159f6:	4641      	mov	r1, r8
 80159f8:	4650      	mov	r0, sl
 80159fa:	f7ff feff 	bl	80157fc <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 80159fe:	4605      	mov	r5, r0
 8015a00:	e00a      	b.n	8015a18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 8015a02:	2900      	cmp	r1, #0
 8015a04:	d1d1      	bne.n	80159aa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
 8015a06:	e7cb      	b.n	80159a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 8015a08:	2e01      	cmp	r6, #1
 8015a0a:	bf38      	it	cc
 8015a0c:	2601      	movcc	r6, #1
 8015a0e:	2d01      	cmp	r5, #1
 8015a10:	bf38      	it	cc
 8015a12:	2501      	movcc	r5, #1
 8015a14:	b2f6      	uxtb	r6, r6
 8015a16:	b2ed      	uxtb	r5, r5
 8015a18:	ea85 0306 	eor.w	r3, r5, r6
 8015a1c:	b2db      	uxtb	r3, r3
 8015a1e:	2b03      	cmp	r3, #3
 8015a20:	d916      	bls.n	8015a50 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22a>
 8015a22:	2d03      	cmp	r5, #3
 8015a24:	bf81      	itttt	hi
 8015a26:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 8015a28:	6023      	strhi	r3, [r4, #0]
 8015a2a:	462e      	movhi	r6, r5
 8015a2c:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8015a30:	bf86      	itte	hi
 8015a32:	7123      	strbhi	r3, [r4, #4]
 8015a34:	2000      	movhi	r0, #0
 8015a36:	4638      	movls	r0, r7
 8015a38:	07b3      	lsls	r3, r6, #30
 8015a3a:	71a6      	strb	r6, [r4, #6]
 8015a3c:	d402      	bmi.n	8015a44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x21e>
 8015a3e:	f016 0601 	ands.w	r6, r6, #1
 8015a42:	d19a      	bne.n	801597a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015a44:	2000      	movs	r0, #0
 8015a46:	e786      	b.n	8015956 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 8015a48:	2601      	movs	r6, #1
 8015a4a:	e7e5      	b.n	8015a18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 8015a4c:	2501      	movs	r5, #1
 8015a4e:	e7e3      	b.n	8015a18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
 8015a50:	4035      	ands	r5, r6
 8015a52:	b2ed      	uxtb	r5, r5
 8015a54:	2300      	movs	r3, #0
 8015a56:	2d03      	cmp	r5, #3
 8015a58:	6023      	str	r3, [r4, #0]
 8015a5a:	d903      	bls.n	8015a64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
 8015a5c:	2302      	movs	r3, #2
 8015a5e:	71a3      	strb	r3, [r4, #6]
 8015a60:	2001      	movs	r0, #1
 8015a62:	e778      	b.n	8015956 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
 8015a64:	2001      	movs	r0, #1
 8015a66:	71a0      	strb	r0, [r4, #6]
 8015a68:	e787      	b.n	801597a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8015a6e:	4638      	mov	r0, r7
 8015a70:	e786      	b.n	8015980 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
 8015a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	f43f af6f 	beq.w	8015958 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 8015a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a7c:	2b01      	cmp	r3, #1
 8015a7e:	f43f af6b 	beq.w	8015958 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
 8015a82:	2301      	movs	r3, #1
 8015a84:	930a      	str	r3, [sp, #40]	; 0x28
 8015a86:	f8cd b020 	str.w	fp, [sp, #32]
 8015a8a:	e715      	b.n	80158b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>

08015a8c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8015a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a90:	ed2d 8b02 	vpush	{d8}
 8015a94:	b089      	sub	sp, #36	; 0x24
 8015a96:	ee08 1a10 	vmov	s16, r1
 8015a9a:	4606      	mov	r6, r0
 8015a9c:	4617      	mov	r7, r2
 8015a9e:	461c      	mov	r4, r3
 8015aa0:	f7ff fd07 	bl	80154b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8015aa4:	4605      	mov	r5, r0
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	d15f      	bne.n	8015b6a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8015aaa:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8015aae:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8015ab2:	f019 0f10 	tst.w	r9, #16
 8015ab6:	bf18      	it	ne
 8015ab8:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 8015abc:	f009 0301 	and.w	r3, r9, #1
 8015ac0:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8015ac4:	9303      	str	r3, [sp, #12]
 8015ac6:	f10d 0b10 	add.w	fp, sp, #16
 8015aca:	f1ba 0f00 	cmp.w	sl, #0
 8015ace:	d074      	beq.n	8015bba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8015ad6:	9304      	str	r3, [sp, #16]
 8015ad8:	f88d 3014 	strb.w	r3, [sp, #20]
 8015adc:	2300      	movs	r3, #0
 8015ade:	9307      	str	r3, [sp, #28]
 8015ae0:	f002 0301 	and.w	r3, r2, #1
 8015ae4:	9301      	str	r3, [sp, #4]
 8015ae6:	f002 0302 	and.w	r3, r2, #2
 8015aea:	9302      	str	r3, [sp, #8]
 8015aec:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8015af0:	430b      	orrs	r3, r1
 8015af2:	f8cd 9018 	str.w	r9, [sp, #24]
 8015af6:	d104      	bne.n	8015b02 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
 8015af8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015afc:	f1a8 0808 	sub.w	r8, r8, #8
 8015b00:	e7e3      	b.n	8015aca <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
 8015b02:	2f00      	cmp	r7, #0
 8015b04:	d037      	beq.n	8015b76 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
 8015b06:	9b01      	ldr	r3, [sp, #4]
 8015b08:	1212      	asrs	r2, r2, #8
 8015b0a:	b10b      	cbz	r3, 8015b10 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	589a      	ldr	r2, [r3, r2]
 8015b10:	443a      	add	r2, r7
 8015b12:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015b16:	6803      	ldr	r3, [r0, #0]
 8015b18:	ee18 1a10 	vmov	r1, s16
 8015b1c:	699d      	ldr	r5, [r3, #24]
 8015b1e:	465b      	mov	r3, fp
 8015b20:	47a8      	blx	r5
 8015b22:	4605      	mov	r5, r0
 8015b24:	2800      	cmp	r0, #0
 8015b26:	d0e7      	beq.n	8015af8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8015b28:	9b07      	ldr	r3, [sp, #28]
 8015b2a:	2b08      	cmp	r3, #8
 8015b2c:	d104      	bne.n	8015b38 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 8015b2e:	9b01      	ldr	r3, [sp, #4]
 8015b30:	b113      	cbz	r3, 8015b38 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
 8015b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b36:	9307      	str	r3, [sp, #28]
 8015b38:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015b3c:	2b03      	cmp	r3, #3
 8015b3e:	d905      	bls.n	8015b4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 8015b40:	9a02      	ldr	r2, [sp, #8]
 8015b42:	b91a      	cbnz	r2, 8015b4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
 8015b44:	f023 0302 	bic.w	r3, r3, #2
 8015b48:	f88d 3014 	strb.w	r3, [sp, #20]
 8015b4c:	68e1      	ldr	r1, [r4, #12]
 8015b4e:	b9d1      	cbnz	r1, 8015b86 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
 8015b50:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015b58:	7923      	ldrb	r3, [r4, #4]
 8015b5a:	2b03      	cmp	r3, #3
 8015b5c:	d905      	bls.n	8015b6a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8015b5e:	079a      	lsls	r2, r3, #30
 8015b60:	d50b      	bpl.n	8015b7a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
 8015b62:	68b3      	ldr	r3, [r6, #8]
 8015b64:	f013 0f01 	tst.w	r3, #1
 8015b68:	d1c6      	bne.n	8015af8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8015b6a:	4628      	mov	r0, r5
 8015b6c:	b009      	add	sp, #36	; 0x24
 8015b6e:	ecbd 8b02 	vpop	{d8}
 8015b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b76:	463a      	mov	r2, r7
 8015b78:	e7cb      	b.n	8015b12 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
 8015b7a:	07db      	lsls	r3, r3, #31
 8015b7c:	d5f5      	bpl.n	8015b6a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8015b7e:	68b3      	ldr	r3, [r6, #8]
 8015b80:	f013 0f02 	tst.w	r3, #2
 8015b84:	e7f0      	b.n	8015b68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
 8015b86:	6823      	ldr	r3, [r4, #0]
 8015b88:	9a04      	ldr	r2, [sp, #16]
 8015b8a:	4293      	cmp	r3, r2
 8015b8c:	d004      	beq.n	8015b98 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
 8015b8e:	2300      	movs	r3, #0
 8015b90:	6023      	str	r3, [r4, #0]
 8015b92:	2302      	movs	r3, #2
 8015b94:	7123      	strb	r3, [r4, #4]
 8015b96:	e7e8      	b.n	8015b6a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
 8015b98:	b12b      	cbz	r3, 8015ba6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
 8015b9a:	7923      	ldrb	r3, [r4, #4]
 8015b9c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015ba0:	4313      	orrs	r3, r2
 8015ba2:	7123      	strb	r3, [r4, #4]
 8015ba4:	e7a8      	b.n	8015af8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
 8015ba6:	9807      	ldr	r0, [sp, #28]
 8015ba8:	2808      	cmp	r0, #8
 8015baa:	d0f2      	beq.n	8015b92 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8015bac:	2908      	cmp	r1, #8
 8015bae:	d0f0      	beq.n	8015b92 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8015bb0:	f7ff fdbc 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d1f0      	bne.n	8015b9a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
 8015bb8:	e7eb      	b.n	8015b92 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
 8015bba:	7925      	ldrb	r5, [r4, #4]
 8015bbc:	3d00      	subs	r5, #0
 8015bbe:	bf18      	it	ne
 8015bc0:	2501      	movne	r5, #1
 8015bc2:	e7d2      	b.n	8015b6a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>

08015bc4 <_ZSt25__throw_bad_function_callv>:
 8015bc4:	b508      	push	{r3, lr}
 8015bc6:	f000 f8b0 	bl	8015d2a <abort>

08015bca <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015bca:	b508      	push	{r3, lr}
 8015bcc:	4780      	blx	r0
 8015bce:	f000 f8ac 	bl	8015d2a <abort>
	...

08015bd4 <_ZSt13get_terminatev>:
 8015bd4:	4b02      	ldr	r3, [pc, #8]	; (8015be0 <_ZSt13get_terminatev+0xc>)
 8015bd6:	6818      	ldr	r0, [r3, #0]
 8015bd8:	f3bf 8f5b 	dmb	ish
 8015bdc:	4770      	bx	lr
 8015bde:	bf00      	nop
 8015be0:	24000014 	.word	0x24000014

08015be4 <_ZSt9terminatev>:
 8015be4:	b508      	push	{r3, lr}
 8015be6:	f7ff fff5 	bl	8015bd4 <_ZSt13get_terminatev>
 8015bea:	f7ff ffee 	bl	8015bca <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08015bf0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 8015bf0:	b510      	push	{r4, lr}
 8015bf2:	4b03      	ldr	r3, [pc, #12]	; (8015c00 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 8015bf4:	6003      	str	r3, [r0, #0]
 8015bf6:	4604      	mov	r4, r0
 8015bf8:	f7ff fd93 	bl	8015722 <_ZNSt9type_infoD1Ev>
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	bd10      	pop	{r4, pc}
 8015c00:	08019548 	.word	0x08019548

08015c04 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 8015c04:	b510      	push	{r4, lr}
 8015c06:	4604      	mov	r4, r0
 8015c08:	f7ff fff2 	bl	8015bf0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 8015c0c:	4620      	mov	r0, r4
 8015c0e:	2108      	movs	r1, #8
 8015c10:	f7ff fc70 	bl	80154f4 <_ZdlPvj>
 8015c14:	4620      	mov	r0, r4
 8015c16:	bd10      	pop	{r4, pc}

08015c18 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 8015c18:	68c0      	ldr	r0, [r0, #12]
 8015c1a:	68c9      	ldr	r1, [r1, #12]
 8015c1c:	b410      	push	{r4}
 8015c1e:	6804      	ldr	r4, [r0, #0]
 8015c20:	6924      	ldr	r4, [r4, #16]
 8015c22:	3302      	adds	r3, #2
 8015c24:	46a4      	mov	ip, r4
 8015c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c2a:	4760      	bx	ip

08015c2c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 8015c2c:	b510      	push	{r4, lr}
 8015c2e:	4b03      	ldr	r3, [pc, #12]	; (8015c3c <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 8015c30:	6003      	str	r3, [r0, #0]
 8015c32:	4604      	mov	r4, r0
 8015c34:	f7ff fd75 	bl	8015722 <_ZNSt9type_infoD1Ev>
 8015c38:	4620      	mov	r0, r4
 8015c3a:	bd10      	pop	{r4, pc}
 8015c3c:	08019598 	.word	0x08019598

08015c40 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 8015c40:	b510      	push	{r4, lr}
 8015c42:	4604      	mov	r4, r0
 8015c44:	f7ff fff2 	bl	8015c2c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8015c48:	4620      	mov	r0, r4
 8015c4a:	2110      	movs	r1, #16
 8015c4c:	f7ff fc52 	bl	80154f4 <_ZdlPvj>
 8015c50:	4620      	mov	r0, r4
 8015c52:	bd10      	pop	{r4, pc}

08015c54 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 8015c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c58:	4605      	mov	r5, r0
 8015c5a:	460e      	mov	r6, r1
 8015c5c:	4617      	mov	r7, r2
 8015c5e:	4698      	mov	r8, r3
 8015c60:	f7ff fd64 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015c64:	4604      	mov	r4, r0
 8015c66:	b9f0      	cbnz	r0, 8015ca6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015c68:	4929      	ldr	r1, [pc, #164]	; (8015d10 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 8015c6a:	4630      	mov	r0, r6
 8015c6c:	f7ff fd5e 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015c70:	b300      	cbz	r0, 8015cb4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 8015c72:	682b      	ldr	r3, [r5, #0]
 8015c74:	4927      	ldr	r1, [pc, #156]	; (8015d14 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 8015c76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015c7a:	f7ff fd57 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015c7e:	b110      	cbz	r0, 8015c86 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 8015c80:	603c      	str	r4, [r7, #0]
 8015c82:	4604      	mov	r4, r0
 8015c84:	e00f      	b.n	8015ca6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015c86:	682b      	ldr	r3, [r5, #0]
 8015c88:	4923      	ldr	r1, [pc, #140]	; (8015d18 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 8015c8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015c8e:	f7ff fd4d 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015c92:	4681      	mov	r9, r0
 8015c94:	b170      	cbz	r0, 8015cb4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 8015c96:	68e8      	ldr	r0, [r5, #12]
 8015c98:	6803      	ldr	r3, [r0, #0]
 8015c9a:	68db      	ldr	r3, [r3, #12]
 8015c9c:	4798      	blx	r3
 8015c9e:	4604      	mov	r4, r0
 8015ca0:	b120      	cbz	r0, 8015cac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 8015ca2:	4b1e      	ldr	r3, [pc, #120]	; (8015d1c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 8015ca4:	603b      	str	r3, [r7, #0]
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cac:	4b1c      	ldr	r3, [pc, #112]	; (8015d20 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xcc>)
 8015cae:	603b      	str	r3, [r7, #0]
 8015cb0:	464c      	mov	r4, r9
 8015cb2:	e7f8      	b.n	8015ca6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015cb4:	682b      	ldr	r3, [r5, #0]
 8015cb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015cba:	b33e      	cbz	r6, 8015d0c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>
 8015cbc:	6833      	ldr	r3, [r6, #0]
 8015cbe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015cc2:	f7ff fd33 	bl	801572c <_ZNKSt9type_infoeqERKS_>
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	d0db      	beq.n	8015c82 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 8015cca:	f018 0f01 	tst.w	r8, #1
 8015cce:	d0ea      	beq.n	8015ca6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015cd0:	68b3      	ldr	r3, [r6, #8]
 8015cd2:	68a9      	ldr	r1, [r5, #8]
 8015cd4:	f003 0060 	and.w	r0, r3, #96	; 0x60
 8015cd8:	f001 0260 	and.w	r2, r1, #96	; 0x60
 8015cdc:	ea30 0c02 	bics.w	ip, r0, r2
 8015ce0:	bf18      	it	ne
 8015ce2:	4013      	andne	r3, r2
 8015ce4:	ea23 0301 	bic.w	r3, r3, r1
 8015ce8:	ea22 0200 	bic.w	r2, r2, r0
 8015cec:	4313      	orrs	r3, r2
 8015cee:	d1da      	bne.n	8015ca6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 8015cf0:	07cb      	lsls	r3, r1, #31
 8015cf2:	682b      	ldr	r3, [r5, #0]
 8015cf4:	699c      	ldr	r4, [r3, #24]
 8015cf6:	bf58      	it	pl
 8015cf8:	f028 0801 	bicpl.w	r8, r8, #1
 8015cfc:	4643      	mov	r3, r8
 8015cfe:	463a      	mov	r2, r7
 8015d00:	4631      	mov	r1, r6
 8015d02:	4628      	mov	r0, r5
 8015d04:	46a4      	mov	ip, r4
 8015d06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d0a:	4760      	bx	ip
 8015d0c:	f000 f80a 	bl	8015d24 <__cxa_bad_typeid>
 8015d10:	080194fc 	.word	0x080194fc
 8015d14:	080193c8 	.word	0x080193c8
 8015d18:	080195c0 	.word	0x080195c0
 8015d1c:	080195b8 	.word	0x080195b8
 8015d20:	080195b4 	.word	0x080195b4

08015d24 <__cxa_bad_typeid>:
 8015d24:	b508      	push	{r3, lr}
 8015d26:	f000 f800 	bl	8015d2a <abort>

08015d2a <abort>:
 8015d2a:	b508      	push	{r3, lr}
 8015d2c:	2006      	movs	r0, #6
 8015d2e:	f000 febb 	bl	8016aa8 <raise>
 8015d32:	2001      	movs	r0, #1
 8015d34:	f7ec fc48 	bl	80025c8 <_exit>

08015d38 <atexit>:
 8015d38:	2300      	movs	r3, #0
 8015d3a:	4601      	mov	r1, r0
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f001 b80c 	b.w	8016d5c <__register_exitproc>

08015d44 <__errno>:
 8015d44:	4b01      	ldr	r3, [pc, #4]	; (8015d4c <__errno+0x8>)
 8015d46:	6818      	ldr	r0, [r3, #0]
 8015d48:	4770      	bx	lr
 8015d4a:	bf00      	nop
 8015d4c:	24000018 	.word	0x24000018

08015d50 <std>:
 8015d50:	2300      	movs	r3, #0
 8015d52:	b510      	push	{r4, lr}
 8015d54:	4604      	mov	r4, r0
 8015d56:	e9c0 3300 	strd	r3, r3, [r0]
 8015d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015d5e:	6083      	str	r3, [r0, #8]
 8015d60:	8181      	strh	r1, [r0, #12]
 8015d62:	6643      	str	r3, [r0, #100]	; 0x64
 8015d64:	81c2      	strh	r2, [r0, #14]
 8015d66:	6183      	str	r3, [r0, #24]
 8015d68:	4619      	mov	r1, r3
 8015d6a:	2208      	movs	r2, #8
 8015d6c:	305c      	adds	r0, #92	; 0x5c
 8015d6e:	f000 f91b 	bl	8015fa8 <memset>
 8015d72:	4b05      	ldr	r3, [pc, #20]	; (8015d88 <std+0x38>)
 8015d74:	6263      	str	r3, [r4, #36]	; 0x24
 8015d76:	4b05      	ldr	r3, [pc, #20]	; (8015d8c <std+0x3c>)
 8015d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8015d7a:	4b05      	ldr	r3, [pc, #20]	; (8015d90 <std+0x40>)
 8015d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d7e:	4b05      	ldr	r3, [pc, #20]	; (8015d94 <std+0x44>)
 8015d80:	6224      	str	r4, [r4, #32]
 8015d82:	6323      	str	r3, [r4, #48]	; 0x30
 8015d84:	bd10      	pop	{r4, pc}
 8015d86:	bf00      	nop
 8015d88:	08016b21 	.word	0x08016b21
 8015d8c:	08016b43 	.word	0x08016b43
 8015d90:	08016b7b 	.word	0x08016b7b
 8015d94:	08016b9f 	.word	0x08016b9f

08015d98 <_cleanup_r>:
 8015d98:	4901      	ldr	r1, [pc, #4]	; (8015da0 <_cleanup_r+0x8>)
 8015d9a:	f000 b8af 	b.w	8015efc <_fwalk_reent>
 8015d9e:	bf00      	nop
 8015da0:	08017b41 	.word	0x08017b41

08015da4 <__sfmoreglue>:
 8015da4:	b570      	push	{r4, r5, r6, lr}
 8015da6:	2268      	movs	r2, #104	; 0x68
 8015da8:	1e4d      	subs	r5, r1, #1
 8015daa:	4355      	muls	r5, r2
 8015dac:	460e      	mov	r6, r1
 8015dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015db2:	f000 f921 	bl	8015ff8 <_malloc_r>
 8015db6:	4604      	mov	r4, r0
 8015db8:	b140      	cbz	r0, 8015dcc <__sfmoreglue+0x28>
 8015dba:	2100      	movs	r1, #0
 8015dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8015dc0:	300c      	adds	r0, #12
 8015dc2:	60a0      	str	r0, [r4, #8]
 8015dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015dc8:	f000 f8ee 	bl	8015fa8 <memset>
 8015dcc:	4620      	mov	r0, r4
 8015dce:	bd70      	pop	{r4, r5, r6, pc}

08015dd0 <__sfp_lock_acquire>:
 8015dd0:	4801      	ldr	r0, [pc, #4]	; (8015dd8 <__sfp_lock_acquire+0x8>)
 8015dd2:	f000 b8d8 	b.w	8015f86 <__retarget_lock_acquire_recursive>
 8015dd6:	bf00      	nop
 8015dd8:	24007386 	.word	0x24007386

08015ddc <__sfp_lock_release>:
 8015ddc:	4801      	ldr	r0, [pc, #4]	; (8015de4 <__sfp_lock_release+0x8>)
 8015dde:	f000 b8d4 	b.w	8015f8a <__retarget_lock_release_recursive>
 8015de2:	bf00      	nop
 8015de4:	24007386 	.word	0x24007386

08015de8 <__sinit_lock_acquire>:
 8015de8:	4801      	ldr	r0, [pc, #4]	; (8015df0 <__sinit_lock_acquire+0x8>)
 8015dea:	f000 b8cc 	b.w	8015f86 <__retarget_lock_acquire_recursive>
 8015dee:	bf00      	nop
 8015df0:	24007387 	.word	0x24007387

08015df4 <__sinit_lock_release>:
 8015df4:	4801      	ldr	r0, [pc, #4]	; (8015dfc <__sinit_lock_release+0x8>)
 8015df6:	f000 b8c8 	b.w	8015f8a <__retarget_lock_release_recursive>
 8015dfa:	bf00      	nop
 8015dfc:	24007387 	.word	0x24007387

08015e00 <__sinit>:
 8015e00:	b510      	push	{r4, lr}
 8015e02:	4604      	mov	r4, r0
 8015e04:	f7ff fff0 	bl	8015de8 <__sinit_lock_acquire>
 8015e08:	69a3      	ldr	r3, [r4, #24]
 8015e0a:	b11b      	cbz	r3, 8015e14 <__sinit+0x14>
 8015e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e10:	f7ff bff0 	b.w	8015df4 <__sinit_lock_release>
 8015e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015e18:	6523      	str	r3, [r4, #80]	; 0x50
 8015e1a:	4b13      	ldr	r3, [pc, #76]	; (8015e68 <__sinit+0x68>)
 8015e1c:	4a13      	ldr	r2, [pc, #76]	; (8015e6c <__sinit+0x6c>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8015e22:	42a3      	cmp	r3, r4
 8015e24:	bf04      	itt	eq
 8015e26:	2301      	moveq	r3, #1
 8015e28:	61a3      	streq	r3, [r4, #24]
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	f000 f820 	bl	8015e70 <__sfp>
 8015e30:	6060      	str	r0, [r4, #4]
 8015e32:	4620      	mov	r0, r4
 8015e34:	f000 f81c 	bl	8015e70 <__sfp>
 8015e38:	60a0      	str	r0, [r4, #8]
 8015e3a:	4620      	mov	r0, r4
 8015e3c:	f000 f818 	bl	8015e70 <__sfp>
 8015e40:	2200      	movs	r2, #0
 8015e42:	60e0      	str	r0, [r4, #12]
 8015e44:	2104      	movs	r1, #4
 8015e46:	6860      	ldr	r0, [r4, #4]
 8015e48:	f7ff ff82 	bl	8015d50 <std>
 8015e4c:	68a0      	ldr	r0, [r4, #8]
 8015e4e:	2201      	movs	r2, #1
 8015e50:	2109      	movs	r1, #9
 8015e52:	f7ff ff7d 	bl	8015d50 <std>
 8015e56:	68e0      	ldr	r0, [r4, #12]
 8015e58:	2202      	movs	r2, #2
 8015e5a:	2112      	movs	r1, #18
 8015e5c:	f7ff ff78 	bl	8015d50 <std>
 8015e60:	2301      	movs	r3, #1
 8015e62:	61a3      	str	r3, [r4, #24]
 8015e64:	e7d2      	b.n	8015e0c <__sinit+0xc>
 8015e66:	bf00      	nop
 8015e68:	0801965c 	.word	0x0801965c
 8015e6c:	08015d99 	.word	0x08015d99

08015e70 <__sfp>:
 8015e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e72:	4607      	mov	r7, r0
 8015e74:	f7ff ffac 	bl	8015dd0 <__sfp_lock_acquire>
 8015e78:	4b1e      	ldr	r3, [pc, #120]	; (8015ef4 <__sfp+0x84>)
 8015e7a:	681e      	ldr	r6, [r3, #0]
 8015e7c:	69b3      	ldr	r3, [r6, #24]
 8015e7e:	b913      	cbnz	r3, 8015e86 <__sfp+0x16>
 8015e80:	4630      	mov	r0, r6
 8015e82:	f7ff ffbd 	bl	8015e00 <__sinit>
 8015e86:	3648      	adds	r6, #72	; 0x48
 8015e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015e8c:	3b01      	subs	r3, #1
 8015e8e:	d503      	bpl.n	8015e98 <__sfp+0x28>
 8015e90:	6833      	ldr	r3, [r6, #0]
 8015e92:	b30b      	cbz	r3, 8015ed8 <__sfp+0x68>
 8015e94:	6836      	ldr	r6, [r6, #0]
 8015e96:	e7f7      	b.n	8015e88 <__sfp+0x18>
 8015e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015e9c:	b9d5      	cbnz	r5, 8015ed4 <__sfp+0x64>
 8015e9e:	4b16      	ldr	r3, [pc, #88]	; (8015ef8 <__sfp+0x88>)
 8015ea0:	60e3      	str	r3, [r4, #12]
 8015ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8015ea8:	f000 f86c 	bl	8015f84 <__retarget_lock_init_recursive>
 8015eac:	f7ff ff96 	bl	8015ddc <__sfp_lock_release>
 8015eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015eb8:	6025      	str	r5, [r4, #0]
 8015eba:	61a5      	str	r5, [r4, #24]
 8015ebc:	2208      	movs	r2, #8
 8015ebe:	4629      	mov	r1, r5
 8015ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015ec4:	f000 f870 	bl	8015fa8 <memset>
 8015ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ed4:	3468      	adds	r4, #104	; 0x68
 8015ed6:	e7d9      	b.n	8015e8c <__sfp+0x1c>
 8015ed8:	2104      	movs	r1, #4
 8015eda:	4638      	mov	r0, r7
 8015edc:	f7ff ff62 	bl	8015da4 <__sfmoreglue>
 8015ee0:	4604      	mov	r4, r0
 8015ee2:	6030      	str	r0, [r6, #0]
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	d1d5      	bne.n	8015e94 <__sfp+0x24>
 8015ee8:	f7ff ff78 	bl	8015ddc <__sfp_lock_release>
 8015eec:	230c      	movs	r3, #12
 8015eee:	603b      	str	r3, [r7, #0]
 8015ef0:	e7ee      	b.n	8015ed0 <__sfp+0x60>
 8015ef2:	bf00      	nop
 8015ef4:	0801965c 	.word	0x0801965c
 8015ef8:	ffff0001 	.word	0xffff0001

08015efc <_fwalk_reent>:
 8015efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f00:	4606      	mov	r6, r0
 8015f02:	4688      	mov	r8, r1
 8015f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015f08:	2700      	movs	r7, #0
 8015f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8015f12:	d505      	bpl.n	8015f20 <_fwalk_reent+0x24>
 8015f14:	6824      	ldr	r4, [r4, #0]
 8015f16:	2c00      	cmp	r4, #0
 8015f18:	d1f7      	bne.n	8015f0a <_fwalk_reent+0xe>
 8015f1a:	4638      	mov	r0, r7
 8015f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f20:	89ab      	ldrh	r3, [r5, #12]
 8015f22:	2b01      	cmp	r3, #1
 8015f24:	d907      	bls.n	8015f36 <_fwalk_reent+0x3a>
 8015f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015f2a:	3301      	adds	r3, #1
 8015f2c:	d003      	beq.n	8015f36 <_fwalk_reent+0x3a>
 8015f2e:	4629      	mov	r1, r5
 8015f30:	4630      	mov	r0, r6
 8015f32:	47c0      	blx	r8
 8015f34:	4307      	orrs	r7, r0
 8015f36:	3568      	adds	r5, #104	; 0x68
 8015f38:	e7e9      	b.n	8015f0e <_fwalk_reent+0x12>
	...

08015f3c <__libc_init_array>:
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	4d0d      	ldr	r5, [pc, #52]	; (8015f74 <__libc_init_array+0x38>)
 8015f40:	4c0d      	ldr	r4, [pc, #52]	; (8015f78 <__libc_init_array+0x3c>)
 8015f42:	1b64      	subs	r4, r4, r5
 8015f44:	10a4      	asrs	r4, r4, #2
 8015f46:	2600      	movs	r6, #0
 8015f48:	42a6      	cmp	r6, r4
 8015f4a:	d109      	bne.n	8015f60 <__libc_init_array+0x24>
 8015f4c:	4d0b      	ldr	r5, [pc, #44]	; (8015f7c <__libc_init_array+0x40>)
 8015f4e:	4c0c      	ldr	r4, [pc, #48]	; (8015f80 <__libc_init_array+0x44>)
 8015f50:	f002 fe32 	bl	8018bb8 <_init>
 8015f54:	1b64      	subs	r4, r4, r5
 8015f56:	10a4      	asrs	r4, r4, #2
 8015f58:	2600      	movs	r6, #0
 8015f5a:	42a6      	cmp	r6, r4
 8015f5c:	d105      	bne.n	8015f6a <__libc_init_array+0x2e>
 8015f5e:	bd70      	pop	{r4, r5, r6, pc}
 8015f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f64:	4798      	blx	r3
 8015f66:	3601      	adds	r6, #1
 8015f68:	e7ee      	b.n	8015f48 <__libc_init_array+0xc>
 8015f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f6e:	4798      	blx	r3
 8015f70:	3601      	adds	r6, #1
 8015f72:	e7f2      	b.n	8015f5a <__libc_init_array+0x1e>
 8015f74:	080199dc 	.word	0x080199dc
 8015f78:	080199dc 	.word	0x080199dc
 8015f7c:	080199dc 	.word	0x080199dc
 8015f80:	080199e4 	.word	0x080199e4

08015f84 <__retarget_lock_init_recursive>:
 8015f84:	4770      	bx	lr

08015f86 <__retarget_lock_acquire_recursive>:
 8015f86:	4770      	bx	lr

08015f88 <__retarget_lock_release>:
 8015f88:	4770      	bx	lr

08015f8a <__retarget_lock_release_recursive>:
 8015f8a:	4770      	bx	lr

08015f8c <memcpy>:
 8015f8c:	440a      	add	r2, r1
 8015f8e:	4291      	cmp	r1, r2
 8015f90:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f94:	d100      	bne.n	8015f98 <memcpy+0xc>
 8015f96:	4770      	bx	lr
 8015f98:	b510      	push	{r4, lr}
 8015f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015fa2:	4291      	cmp	r1, r2
 8015fa4:	d1f9      	bne.n	8015f9a <memcpy+0xe>
 8015fa6:	bd10      	pop	{r4, pc}

08015fa8 <memset>:
 8015fa8:	4402      	add	r2, r0
 8015faa:	4603      	mov	r3, r0
 8015fac:	4293      	cmp	r3, r2
 8015fae:	d100      	bne.n	8015fb2 <memset+0xa>
 8015fb0:	4770      	bx	lr
 8015fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8015fb6:	e7f9      	b.n	8015fac <memset+0x4>

08015fb8 <sbrk_aligned>:
 8015fb8:	b570      	push	{r4, r5, r6, lr}
 8015fba:	4e0e      	ldr	r6, [pc, #56]	; (8015ff4 <sbrk_aligned+0x3c>)
 8015fbc:	460c      	mov	r4, r1
 8015fbe:	6831      	ldr	r1, [r6, #0]
 8015fc0:	4605      	mov	r5, r0
 8015fc2:	b911      	cbnz	r1, 8015fca <sbrk_aligned+0x12>
 8015fc4:	f000 fd38 	bl	8016a38 <_sbrk_r>
 8015fc8:	6030      	str	r0, [r6, #0]
 8015fca:	4621      	mov	r1, r4
 8015fcc:	4628      	mov	r0, r5
 8015fce:	f000 fd33 	bl	8016a38 <_sbrk_r>
 8015fd2:	1c43      	adds	r3, r0, #1
 8015fd4:	d00a      	beq.n	8015fec <sbrk_aligned+0x34>
 8015fd6:	1cc4      	adds	r4, r0, #3
 8015fd8:	f024 0403 	bic.w	r4, r4, #3
 8015fdc:	42a0      	cmp	r0, r4
 8015fde:	d007      	beq.n	8015ff0 <sbrk_aligned+0x38>
 8015fe0:	1a21      	subs	r1, r4, r0
 8015fe2:	4628      	mov	r0, r5
 8015fe4:	f000 fd28 	bl	8016a38 <_sbrk_r>
 8015fe8:	3001      	adds	r0, #1
 8015fea:	d101      	bne.n	8015ff0 <sbrk_aligned+0x38>
 8015fec:	f04f 34ff 	mov.w	r4, #4294967295
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	bd70      	pop	{r4, r5, r6, pc}
 8015ff4:	2400738c 	.word	0x2400738c

08015ff8 <_malloc_r>:
 8015ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ffc:	1ccd      	adds	r5, r1, #3
 8015ffe:	f025 0503 	bic.w	r5, r5, #3
 8016002:	3508      	adds	r5, #8
 8016004:	2d0c      	cmp	r5, #12
 8016006:	bf38      	it	cc
 8016008:	250c      	movcc	r5, #12
 801600a:	2d00      	cmp	r5, #0
 801600c:	4607      	mov	r7, r0
 801600e:	db01      	blt.n	8016014 <_malloc_r+0x1c>
 8016010:	42a9      	cmp	r1, r5
 8016012:	d905      	bls.n	8016020 <_malloc_r+0x28>
 8016014:	230c      	movs	r3, #12
 8016016:	603b      	str	r3, [r7, #0]
 8016018:	2600      	movs	r6, #0
 801601a:	4630      	mov	r0, r6
 801601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016020:	4e2e      	ldr	r6, [pc, #184]	; (80160dc <_malloc_r+0xe4>)
 8016022:	f001 fe4d 	bl	8017cc0 <__malloc_lock>
 8016026:	6833      	ldr	r3, [r6, #0]
 8016028:	461c      	mov	r4, r3
 801602a:	bb34      	cbnz	r4, 801607a <_malloc_r+0x82>
 801602c:	4629      	mov	r1, r5
 801602e:	4638      	mov	r0, r7
 8016030:	f7ff ffc2 	bl	8015fb8 <sbrk_aligned>
 8016034:	1c43      	adds	r3, r0, #1
 8016036:	4604      	mov	r4, r0
 8016038:	d14d      	bne.n	80160d6 <_malloc_r+0xde>
 801603a:	6834      	ldr	r4, [r6, #0]
 801603c:	4626      	mov	r6, r4
 801603e:	2e00      	cmp	r6, #0
 8016040:	d140      	bne.n	80160c4 <_malloc_r+0xcc>
 8016042:	6823      	ldr	r3, [r4, #0]
 8016044:	4631      	mov	r1, r6
 8016046:	4638      	mov	r0, r7
 8016048:	eb04 0803 	add.w	r8, r4, r3
 801604c:	f000 fcf4 	bl	8016a38 <_sbrk_r>
 8016050:	4580      	cmp	r8, r0
 8016052:	d13a      	bne.n	80160ca <_malloc_r+0xd2>
 8016054:	6821      	ldr	r1, [r4, #0]
 8016056:	3503      	adds	r5, #3
 8016058:	1a6d      	subs	r5, r5, r1
 801605a:	f025 0503 	bic.w	r5, r5, #3
 801605e:	3508      	adds	r5, #8
 8016060:	2d0c      	cmp	r5, #12
 8016062:	bf38      	it	cc
 8016064:	250c      	movcc	r5, #12
 8016066:	4629      	mov	r1, r5
 8016068:	4638      	mov	r0, r7
 801606a:	f7ff ffa5 	bl	8015fb8 <sbrk_aligned>
 801606e:	3001      	adds	r0, #1
 8016070:	d02b      	beq.n	80160ca <_malloc_r+0xd2>
 8016072:	6823      	ldr	r3, [r4, #0]
 8016074:	442b      	add	r3, r5
 8016076:	6023      	str	r3, [r4, #0]
 8016078:	e00e      	b.n	8016098 <_malloc_r+0xa0>
 801607a:	6822      	ldr	r2, [r4, #0]
 801607c:	1b52      	subs	r2, r2, r5
 801607e:	d41e      	bmi.n	80160be <_malloc_r+0xc6>
 8016080:	2a0b      	cmp	r2, #11
 8016082:	d916      	bls.n	80160b2 <_malloc_r+0xba>
 8016084:	1961      	adds	r1, r4, r5
 8016086:	42a3      	cmp	r3, r4
 8016088:	6025      	str	r5, [r4, #0]
 801608a:	bf18      	it	ne
 801608c:	6059      	strne	r1, [r3, #4]
 801608e:	6863      	ldr	r3, [r4, #4]
 8016090:	bf08      	it	eq
 8016092:	6031      	streq	r1, [r6, #0]
 8016094:	5162      	str	r2, [r4, r5]
 8016096:	604b      	str	r3, [r1, #4]
 8016098:	4638      	mov	r0, r7
 801609a:	f104 060b 	add.w	r6, r4, #11
 801609e:	f001 fe15 	bl	8017ccc <__malloc_unlock>
 80160a2:	f026 0607 	bic.w	r6, r6, #7
 80160a6:	1d23      	adds	r3, r4, #4
 80160a8:	1af2      	subs	r2, r6, r3
 80160aa:	d0b6      	beq.n	801601a <_malloc_r+0x22>
 80160ac:	1b9b      	subs	r3, r3, r6
 80160ae:	50a3      	str	r3, [r4, r2]
 80160b0:	e7b3      	b.n	801601a <_malloc_r+0x22>
 80160b2:	6862      	ldr	r2, [r4, #4]
 80160b4:	42a3      	cmp	r3, r4
 80160b6:	bf0c      	ite	eq
 80160b8:	6032      	streq	r2, [r6, #0]
 80160ba:	605a      	strne	r2, [r3, #4]
 80160bc:	e7ec      	b.n	8016098 <_malloc_r+0xa0>
 80160be:	4623      	mov	r3, r4
 80160c0:	6864      	ldr	r4, [r4, #4]
 80160c2:	e7b2      	b.n	801602a <_malloc_r+0x32>
 80160c4:	4634      	mov	r4, r6
 80160c6:	6876      	ldr	r6, [r6, #4]
 80160c8:	e7b9      	b.n	801603e <_malloc_r+0x46>
 80160ca:	230c      	movs	r3, #12
 80160cc:	603b      	str	r3, [r7, #0]
 80160ce:	4638      	mov	r0, r7
 80160d0:	f001 fdfc 	bl	8017ccc <__malloc_unlock>
 80160d4:	e7a1      	b.n	801601a <_malloc_r+0x22>
 80160d6:	6025      	str	r5, [r4, #0]
 80160d8:	e7de      	b.n	8016098 <_malloc_r+0xa0>
 80160da:	bf00      	nop
 80160dc:	24007388 	.word	0x24007388

080160e0 <__cvt>:
 80160e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160e2:	ed2d 8b02 	vpush	{d8}
 80160e6:	eeb0 8b40 	vmov.f64	d8, d0
 80160ea:	b085      	sub	sp, #20
 80160ec:	4617      	mov	r7, r2
 80160ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80160f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80160f2:	ee18 2a90 	vmov	r2, s17
 80160f6:	f025 0520 	bic.w	r5, r5, #32
 80160fa:	2a00      	cmp	r2, #0
 80160fc:	bfb6      	itet	lt
 80160fe:	222d      	movlt	r2, #45	; 0x2d
 8016100:	2200      	movge	r2, #0
 8016102:	eeb1 8b40 	vneglt.f64	d8, d0
 8016106:	2d46      	cmp	r5, #70	; 0x46
 8016108:	460c      	mov	r4, r1
 801610a:	701a      	strb	r2, [r3, #0]
 801610c:	d004      	beq.n	8016118 <__cvt+0x38>
 801610e:	2d45      	cmp	r5, #69	; 0x45
 8016110:	d100      	bne.n	8016114 <__cvt+0x34>
 8016112:	3401      	adds	r4, #1
 8016114:	2102      	movs	r1, #2
 8016116:	e000      	b.n	801611a <__cvt+0x3a>
 8016118:	2103      	movs	r1, #3
 801611a:	ab03      	add	r3, sp, #12
 801611c:	9301      	str	r3, [sp, #4]
 801611e:	ab02      	add	r3, sp, #8
 8016120:	9300      	str	r3, [sp, #0]
 8016122:	4622      	mov	r2, r4
 8016124:	4633      	mov	r3, r6
 8016126:	eeb0 0b48 	vmov.f64	d0, d8
 801612a:	f000 ff15 	bl	8016f58 <_dtoa_r>
 801612e:	2d47      	cmp	r5, #71	; 0x47
 8016130:	d101      	bne.n	8016136 <__cvt+0x56>
 8016132:	07fb      	lsls	r3, r7, #31
 8016134:	d51a      	bpl.n	801616c <__cvt+0x8c>
 8016136:	2d46      	cmp	r5, #70	; 0x46
 8016138:	eb00 0204 	add.w	r2, r0, r4
 801613c:	d10c      	bne.n	8016158 <__cvt+0x78>
 801613e:	7803      	ldrb	r3, [r0, #0]
 8016140:	2b30      	cmp	r3, #48	; 0x30
 8016142:	d107      	bne.n	8016154 <__cvt+0x74>
 8016144:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801614c:	bf1c      	itt	ne
 801614e:	f1c4 0401 	rsbne	r4, r4, #1
 8016152:	6034      	strne	r4, [r6, #0]
 8016154:	6833      	ldr	r3, [r6, #0]
 8016156:	441a      	add	r2, r3
 8016158:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016160:	bf08      	it	eq
 8016162:	9203      	streq	r2, [sp, #12]
 8016164:	2130      	movs	r1, #48	; 0x30
 8016166:	9b03      	ldr	r3, [sp, #12]
 8016168:	4293      	cmp	r3, r2
 801616a:	d307      	bcc.n	801617c <__cvt+0x9c>
 801616c:	9b03      	ldr	r3, [sp, #12]
 801616e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016170:	1a1b      	subs	r3, r3, r0
 8016172:	6013      	str	r3, [r2, #0]
 8016174:	b005      	add	sp, #20
 8016176:	ecbd 8b02 	vpop	{d8}
 801617a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801617c:	1c5c      	adds	r4, r3, #1
 801617e:	9403      	str	r4, [sp, #12]
 8016180:	7019      	strb	r1, [r3, #0]
 8016182:	e7f0      	b.n	8016166 <__cvt+0x86>

08016184 <__exponent>:
 8016184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016186:	4603      	mov	r3, r0
 8016188:	2900      	cmp	r1, #0
 801618a:	bfb8      	it	lt
 801618c:	4249      	neglt	r1, r1
 801618e:	f803 2b02 	strb.w	r2, [r3], #2
 8016192:	bfb4      	ite	lt
 8016194:	222d      	movlt	r2, #45	; 0x2d
 8016196:	222b      	movge	r2, #43	; 0x2b
 8016198:	2909      	cmp	r1, #9
 801619a:	7042      	strb	r2, [r0, #1]
 801619c:	dd2a      	ble.n	80161f4 <__exponent+0x70>
 801619e:	f10d 0407 	add.w	r4, sp, #7
 80161a2:	46a4      	mov	ip, r4
 80161a4:	270a      	movs	r7, #10
 80161a6:	46a6      	mov	lr, r4
 80161a8:	460a      	mov	r2, r1
 80161aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80161ae:	fb07 1516 	mls	r5, r7, r6, r1
 80161b2:	3530      	adds	r5, #48	; 0x30
 80161b4:	2a63      	cmp	r2, #99	; 0x63
 80161b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80161ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80161be:	4631      	mov	r1, r6
 80161c0:	dcf1      	bgt.n	80161a6 <__exponent+0x22>
 80161c2:	3130      	adds	r1, #48	; 0x30
 80161c4:	f1ae 0502 	sub.w	r5, lr, #2
 80161c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80161cc:	1c44      	adds	r4, r0, #1
 80161ce:	4629      	mov	r1, r5
 80161d0:	4561      	cmp	r1, ip
 80161d2:	d30a      	bcc.n	80161ea <__exponent+0x66>
 80161d4:	f10d 0209 	add.w	r2, sp, #9
 80161d8:	eba2 020e 	sub.w	r2, r2, lr
 80161dc:	4565      	cmp	r5, ip
 80161de:	bf88      	it	hi
 80161e0:	2200      	movhi	r2, #0
 80161e2:	4413      	add	r3, r2
 80161e4:	1a18      	subs	r0, r3, r0
 80161e6:	b003      	add	sp, #12
 80161e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80161f2:	e7ed      	b.n	80161d0 <__exponent+0x4c>
 80161f4:	2330      	movs	r3, #48	; 0x30
 80161f6:	3130      	adds	r1, #48	; 0x30
 80161f8:	7083      	strb	r3, [r0, #2]
 80161fa:	70c1      	strb	r1, [r0, #3]
 80161fc:	1d03      	adds	r3, r0, #4
 80161fe:	e7f1      	b.n	80161e4 <__exponent+0x60>

08016200 <_printf_float>:
 8016200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016204:	b08b      	sub	sp, #44	; 0x2c
 8016206:	460c      	mov	r4, r1
 8016208:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801620c:	4616      	mov	r6, r2
 801620e:	461f      	mov	r7, r3
 8016210:	4605      	mov	r5, r0
 8016212:	f001 fcd1 	bl	8017bb8 <_localeconv_r>
 8016216:	f8d0 b000 	ldr.w	fp, [r0]
 801621a:	4658      	mov	r0, fp
 801621c:	f7ea f86a 	bl	80002f4 <strlen>
 8016220:	2300      	movs	r3, #0
 8016222:	9308      	str	r3, [sp, #32]
 8016224:	f8d8 3000 	ldr.w	r3, [r8]
 8016228:	f894 9018 	ldrb.w	r9, [r4, #24]
 801622c:	6822      	ldr	r2, [r4, #0]
 801622e:	3307      	adds	r3, #7
 8016230:	f023 0307 	bic.w	r3, r3, #7
 8016234:	f103 0108 	add.w	r1, r3, #8
 8016238:	f8c8 1000 	str.w	r1, [r8]
 801623c:	4682      	mov	sl, r0
 801623e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016242:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8016246:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80164a8 <_printf_float+0x2a8>
 801624a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801624e:	eeb0 6bc0 	vabs.f64	d6, d0
 8016252:	eeb4 6b47 	vcmp.f64	d6, d7
 8016256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801625a:	dd24      	ble.n	80162a6 <_printf_float+0xa6>
 801625c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016264:	d502      	bpl.n	801626c <_printf_float+0x6c>
 8016266:	232d      	movs	r3, #45	; 0x2d
 8016268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801626c:	4b90      	ldr	r3, [pc, #576]	; (80164b0 <_printf_float+0x2b0>)
 801626e:	4891      	ldr	r0, [pc, #580]	; (80164b4 <_printf_float+0x2b4>)
 8016270:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016274:	bf94      	ite	ls
 8016276:	4698      	movls	r8, r3
 8016278:	4680      	movhi	r8, r0
 801627a:	2303      	movs	r3, #3
 801627c:	6123      	str	r3, [r4, #16]
 801627e:	f022 0204 	bic.w	r2, r2, #4
 8016282:	2300      	movs	r3, #0
 8016284:	6022      	str	r2, [r4, #0]
 8016286:	9304      	str	r3, [sp, #16]
 8016288:	9700      	str	r7, [sp, #0]
 801628a:	4633      	mov	r3, r6
 801628c:	aa09      	add	r2, sp, #36	; 0x24
 801628e:	4621      	mov	r1, r4
 8016290:	4628      	mov	r0, r5
 8016292:	f000 f9d3 	bl	801663c <_printf_common>
 8016296:	3001      	adds	r0, #1
 8016298:	f040 808a 	bne.w	80163b0 <_printf_float+0x1b0>
 801629c:	f04f 30ff 	mov.w	r0, #4294967295
 80162a0:	b00b      	add	sp, #44	; 0x2c
 80162a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a6:	eeb4 0b40 	vcmp.f64	d0, d0
 80162aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ae:	d709      	bvc.n	80162c4 <_printf_float+0xc4>
 80162b0:	ee10 3a90 	vmov	r3, s1
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	bfbc      	itt	lt
 80162b8:	232d      	movlt	r3, #45	; 0x2d
 80162ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80162be:	487e      	ldr	r0, [pc, #504]	; (80164b8 <_printf_float+0x2b8>)
 80162c0:	4b7e      	ldr	r3, [pc, #504]	; (80164bc <_printf_float+0x2bc>)
 80162c2:	e7d5      	b.n	8016270 <_printf_float+0x70>
 80162c4:	6863      	ldr	r3, [r4, #4]
 80162c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80162ca:	9104      	str	r1, [sp, #16]
 80162cc:	1c59      	adds	r1, r3, #1
 80162ce:	d13c      	bne.n	801634a <_printf_float+0x14a>
 80162d0:	2306      	movs	r3, #6
 80162d2:	6063      	str	r3, [r4, #4]
 80162d4:	2300      	movs	r3, #0
 80162d6:	9303      	str	r3, [sp, #12]
 80162d8:	ab08      	add	r3, sp, #32
 80162da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80162de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80162e2:	ab07      	add	r3, sp, #28
 80162e4:	6861      	ldr	r1, [r4, #4]
 80162e6:	9300      	str	r3, [sp, #0]
 80162e8:	6022      	str	r2, [r4, #0]
 80162ea:	f10d 031b 	add.w	r3, sp, #27
 80162ee:	4628      	mov	r0, r5
 80162f0:	f7ff fef6 	bl	80160e0 <__cvt>
 80162f4:	9b04      	ldr	r3, [sp, #16]
 80162f6:	9907      	ldr	r1, [sp, #28]
 80162f8:	2b47      	cmp	r3, #71	; 0x47
 80162fa:	4680      	mov	r8, r0
 80162fc:	d108      	bne.n	8016310 <_printf_float+0x110>
 80162fe:	1cc8      	adds	r0, r1, #3
 8016300:	db02      	blt.n	8016308 <_printf_float+0x108>
 8016302:	6863      	ldr	r3, [r4, #4]
 8016304:	4299      	cmp	r1, r3
 8016306:	dd41      	ble.n	801638c <_printf_float+0x18c>
 8016308:	f1a9 0902 	sub.w	r9, r9, #2
 801630c:	fa5f f989 	uxtb.w	r9, r9
 8016310:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016314:	d820      	bhi.n	8016358 <_printf_float+0x158>
 8016316:	3901      	subs	r1, #1
 8016318:	464a      	mov	r2, r9
 801631a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801631e:	9107      	str	r1, [sp, #28]
 8016320:	f7ff ff30 	bl	8016184 <__exponent>
 8016324:	9a08      	ldr	r2, [sp, #32]
 8016326:	9004      	str	r0, [sp, #16]
 8016328:	1813      	adds	r3, r2, r0
 801632a:	2a01      	cmp	r2, #1
 801632c:	6123      	str	r3, [r4, #16]
 801632e:	dc02      	bgt.n	8016336 <_printf_float+0x136>
 8016330:	6822      	ldr	r2, [r4, #0]
 8016332:	07d2      	lsls	r2, r2, #31
 8016334:	d501      	bpl.n	801633a <_printf_float+0x13a>
 8016336:	3301      	adds	r3, #1
 8016338:	6123      	str	r3, [r4, #16]
 801633a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d0a2      	beq.n	8016288 <_printf_float+0x88>
 8016342:	232d      	movs	r3, #45	; 0x2d
 8016344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016348:	e79e      	b.n	8016288 <_printf_float+0x88>
 801634a:	9904      	ldr	r1, [sp, #16]
 801634c:	2947      	cmp	r1, #71	; 0x47
 801634e:	d1c1      	bne.n	80162d4 <_printf_float+0xd4>
 8016350:	2b00      	cmp	r3, #0
 8016352:	d1bf      	bne.n	80162d4 <_printf_float+0xd4>
 8016354:	2301      	movs	r3, #1
 8016356:	e7bc      	b.n	80162d2 <_printf_float+0xd2>
 8016358:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801635c:	d118      	bne.n	8016390 <_printf_float+0x190>
 801635e:	2900      	cmp	r1, #0
 8016360:	6863      	ldr	r3, [r4, #4]
 8016362:	dd0b      	ble.n	801637c <_printf_float+0x17c>
 8016364:	6121      	str	r1, [r4, #16]
 8016366:	b913      	cbnz	r3, 801636e <_printf_float+0x16e>
 8016368:	6822      	ldr	r2, [r4, #0]
 801636a:	07d0      	lsls	r0, r2, #31
 801636c:	d502      	bpl.n	8016374 <_printf_float+0x174>
 801636e:	3301      	adds	r3, #1
 8016370:	440b      	add	r3, r1
 8016372:	6123      	str	r3, [r4, #16]
 8016374:	2300      	movs	r3, #0
 8016376:	65a1      	str	r1, [r4, #88]	; 0x58
 8016378:	9304      	str	r3, [sp, #16]
 801637a:	e7de      	b.n	801633a <_printf_float+0x13a>
 801637c:	b913      	cbnz	r3, 8016384 <_printf_float+0x184>
 801637e:	6822      	ldr	r2, [r4, #0]
 8016380:	07d2      	lsls	r2, r2, #31
 8016382:	d501      	bpl.n	8016388 <_printf_float+0x188>
 8016384:	3302      	adds	r3, #2
 8016386:	e7f4      	b.n	8016372 <_printf_float+0x172>
 8016388:	2301      	movs	r3, #1
 801638a:	e7f2      	b.n	8016372 <_printf_float+0x172>
 801638c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016390:	9b08      	ldr	r3, [sp, #32]
 8016392:	4299      	cmp	r1, r3
 8016394:	db05      	blt.n	80163a2 <_printf_float+0x1a2>
 8016396:	6823      	ldr	r3, [r4, #0]
 8016398:	6121      	str	r1, [r4, #16]
 801639a:	07d8      	lsls	r0, r3, #31
 801639c:	d5ea      	bpl.n	8016374 <_printf_float+0x174>
 801639e:	1c4b      	adds	r3, r1, #1
 80163a0:	e7e7      	b.n	8016372 <_printf_float+0x172>
 80163a2:	2900      	cmp	r1, #0
 80163a4:	bfd4      	ite	le
 80163a6:	f1c1 0202 	rsble	r2, r1, #2
 80163aa:	2201      	movgt	r2, #1
 80163ac:	4413      	add	r3, r2
 80163ae:	e7e0      	b.n	8016372 <_printf_float+0x172>
 80163b0:	6823      	ldr	r3, [r4, #0]
 80163b2:	055a      	lsls	r2, r3, #21
 80163b4:	d407      	bmi.n	80163c6 <_printf_float+0x1c6>
 80163b6:	6923      	ldr	r3, [r4, #16]
 80163b8:	4642      	mov	r2, r8
 80163ba:	4631      	mov	r1, r6
 80163bc:	4628      	mov	r0, r5
 80163be:	47b8      	blx	r7
 80163c0:	3001      	adds	r0, #1
 80163c2:	d12a      	bne.n	801641a <_printf_float+0x21a>
 80163c4:	e76a      	b.n	801629c <_printf_float+0x9c>
 80163c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80163ca:	f240 80e2 	bls.w	8016592 <_printf_float+0x392>
 80163ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80163d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80163d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163da:	d133      	bne.n	8016444 <_printf_float+0x244>
 80163dc:	4a38      	ldr	r2, [pc, #224]	; (80164c0 <_printf_float+0x2c0>)
 80163de:	2301      	movs	r3, #1
 80163e0:	4631      	mov	r1, r6
 80163e2:	4628      	mov	r0, r5
 80163e4:	47b8      	blx	r7
 80163e6:	3001      	adds	r0, #1
 80163e8:	f43f af58 	beq.w	801629c <_printf_float+0x9c>
 80163ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80163f0:	429a      	cmp	r2, r3
 80163f2:	db02      	blt.n	80163fa <_printf_float+0x1fa>
 80163f4:	6823      	ldr	r3, [r4, #0]
 80163f6:	07d8      	lsls	r0, r3, #31
 80163f8:	d50f      	bpl.n	801641a <_printf_float+0x21a>
 80163fa:	4653      	mov	r3, sl
 80163fc:	465a      	mov	r2, fp
 80163fe:	4631      	mov	r1, r6
 8016400:	4628      	mov	r0, r5
 8016402:	47b8      	blx	r7
 8016404:	3001      	adds	r0, #1
 8016406:	f43f af49 	beq.w	801629c <_printf_float+0x9c>
 801640a:	f04f 0800 	mov.w	r8, #0
 801640e:	f104 091a 	add.w	r9, r4, #26
 8016412:	9b08      	ldr	r3, [sp, #32]
 8016414:	3b01      	subs	r3, #1
 8016416:	4543      	cmp	r3, r8
 8016418:	dc09      	bgt.n	801642e <_printf_float+0x22e>
 801641a:	6823      	ldr	r3, [r4, #0]
 801641c:	079b      	lsls	r3, r3, #30
 801641e:	f100 8108 	bmi.w	8016632 <_printf_float+0x432>
 8016422:	68e0      	ldr	r0, [r4, #12]
 8016424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016426:	4298      	cmp	r0, r3
 8016428:	bfb8      	it	lt
 801642a:	4618      	movlt	r0, r3
 801642c:	e738      	b.n	80162a0 <_printf_float+0xa0>
 801642e:	2301      	movs	r3, #1
 8016430:	464a      	mov	r2, r9
 8016432:	4631      	mov	r1, r6
 8016434:	4628      	mov	r0, r5
 8016436:	47b8      	blx	r7
 8016438:	3001      	adds	r0, #1
 801643a:	f43f af2f 	beq.w	801629c <_printf_float+0x9c>
 801643e:	f108 0801 	add.w	r8, r8, #1
 8016442:	e7e6      	b.n	8016412 <_printf_float+0x212>
 8016444:	9b07      	ldr	r3, [sp, #28]
 8016446:	2b00      	cmp	r3, #0
 8016448:	dc3c      	bgt.n	80164c4 <_printf_float+0x2c4>
 801644a:	4a1d      	ldr	r2, [pc, #116]	; (80164c0 <_printf_float+0x2c0>)
 801644c:	2301      	movs	r3, #1
 801644e:	4631      	mov	r1, r6
 8016450:	4628      	mov	r0, r5
 8016452:	47b8      	blx	r7
 8016454:	3001      	adds	r0, #1
 8016456:	f43f af21 	beq.w	801629c <_printf_float+0x9c>
 801645a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801645e:	4313      	orrs	r3, r2
 8016460:	d102      	bne.n	8016468 <_printf_float+0x268>
 8016462:	6823      	ldr	r3, [r4, #0]
 8016464:	07d9      	lsls	r1, r3, #31
 8016466:	d5d8      	bpl.n	801641a <_printf_float+0x21a>
 8016468:	4653      	mov	r3, sl
 801646a:	465a      	mov	r2, fp
 801646c:	4631      	mov	r1, r6
 801646e:	4628      	mov	r0, r5
 8016470:	47b8      	blx	r7
 8016472:	3001      	adds	r0, #1
 8016474:	f43f af12 	beq.w	801629c <_printf_float+0x9c>
 8016478:	f04f 0900 	mov.w	r9, #0
 801647c:	f104 0a1a 	add.w	sl, r4, #26
 8016480:	9b07      	ldr	r3, [sp, #28]
 8016482:	425b      	negs	r3, r3
 8016484:	454b      	cmp	r3, r9
 8016486:	dc01      	bgt.n	801648c <_printf_float+0x28c>
 8016488:	9b08      	ldr	r3, [sp, #32]
 801648a:	e795      	b.n	80163b8 <_printf_float+0x1b8>
 801648c:	2301      	movs	r3, #1
 801648e:	4652      	mov	r2, sl
 8016490:	4631      	mov	r1, r6
 8016492:	4628      	mov	r0, r5
 8016494:	47b8      	blx	r7
 8016496:	3001      	adds	r0, #1
 8016498:	f43f af00 	beq.w	801629c <_printf_float+0x9c>
 801649c:	f109 0901 	add.w	r9, r9, #1
 80164a0:	e7ee      	b.n	8016480 <_printf_float+0x280>
 80164a2:	bf00      	nop
 80164a4:	f3af 8000 	nop.w
 80164a8:	ffffffff 	.word	0xffffffff
 80164ac:	7fefffff 	.word	0x7fefffff
 80164b0:	08019660 	.word	0x08019660
 80164b4:	08019664 	.word	0x08019664
 80164b8:	0801966c 	.word	0x0801966c
 80164bc:	08019668 	.word	0x08019668
 80164c0:	08019670 	.word	0x08019670
 80164c4:	9a08      	ldr	r2, [sp, #32]
 80164c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80164c8:	429a      	cmp	r2, r3
 80164ca:	bfa8      	it	ge
 80164cc:	461a      	movge	r2, r3
 80164ce:	2a00      	cmp	r2, #0
 80164d0:	4691      	mov	r9, r2
 80164d2:	dc38      	bgt.n	8016546 <_printf_float+0x346>
 80164d4:	2300      	movs	r3, #0
 80164d6:	9305      	str	r3, [sp, #20]
 80164d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164dc:	f104 021a 	add.w	r2, r4, #26
 80164e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80164e2:	9905      	ldr	r1, [sp, #20]
 80164e4:	9304      	str	r3, [sp, #16]
 80164e6:	eba3 0309 	sub.w	r3, r3, r9
 80164ea:	428b      	cmp	r3, r1
 80164ec:	dc33      	bgt.n	8016556 <_printf_float+0x356>
 80164ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	db3c      	blt.n	8016570 <_printf_float+0x370>
 80164f6:	6823      	ldr	r3, [r4, #0]
 80164f8:	07da      	lsls	r2, r3, #31
 80164fa:	d439      	bmi.n	8016570 <_printf_float+0x370>
 80164fc:	9b08      	ldr	r3, [sp, #32]
 80164fe:	9a04      	ldr	r2, [sp, #16]
 8016500:	9907      	ldr	r1, [sp, #28]
 8016502:	1a9a      	subs	r2, r3, r2
 8016504:	eba3 0901 	sub.w	r9, r3, r1
 8016508:	4591      	cmp	r9, r2
 801650a:	bfa8      	it	ge
 801650c:	4691      	movge	r9, r2
 801650e:	f1b9 0f00 	cmp.w	r9, #0
 8016512:	dc35      	bgt.n	8016580 <_printf_float+0x380>
 8016514:	f04f 0800 	mov.w	r8, #0
 8016518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801651c:	f104 0a1a 	add.w	sl, r4, #26
 8016520:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016524:	1a9b      	subs	r3, r3, r2
 8016526:	eba3 0309 	sub.w	r3, r3, r9
 801652a:	4543      	cmp	r3, r8
 801652c:	f77f af75 	ble.w	801641a <_printf_float+0x21a>
 8016530:	2301      	movs	r3, #1
 8016532:	4652      	mov	r2, sl
 8016534:	4631      	mov	r1, r6
 8016536:	4628      	mov	r0, r5
 8016538:	47b8      	blx	r7
 801653a:	3001      	adds	r0, #1
 801653c:	f43f aeae 	beq.w	801629c <_printf_float+0x9c>
 8016540:	f108 0801 	add.w	r8, r8, #1
 8016544:	e7ec      	b.n	8016520 <_printf_float+0x320>
 8016546:	4613      	mov	r3, r2
 8016548:	4631      	mov	r1, r6
 801654a:	4642      	mov	r2, r8
 801654c:	4628      	mov	r0, r5
 801654e:	47b8      	blx	r7
 8016550:	3001      	adds	r0, #1
 8016552:	d1bf      	bne.n	80164d4 <_printf_float+0x2d4>
 8016554:	e6a2      	b.n	801629c <_printf_float+0x9c>
 8016556:	2301      	movs	r3, #1
 8016558:	4631      	mov	r1, r6
 801655a:	4628      	mov	r0, r5
 801655c:	9204      	str	r2, [sp, #16]
 801655e:	47b8      	blx	r7
 8016560:	3001      	adds	r0, #1
 8016562:	f43f ae9b 	beq.w	801629c <_printf_float+0x9c>
 8016566:	9b05      	ldr	r3, [sp, #20]
 8016568:	9a04      	ldr	r2, [sp, #16]
 801656a:	3301      	adds	r3, #1
 801656c:	9305      	str	r3, [sp, #20]
 801656e:	e7b7      	b.n	80164e0 <_printf_float+0x2e0>
 8016570:	4653      	mov	r3, sl
 8016572:	465a      	mov	r2, fp
 8016574:	4631      	mov	r1, r6
 8016576:	4628      	mov	r0, r5
 8016578:	47b8      	blx	r7
 801657a:	3001      	adds	r0, #1
 801657c:	d1be      	bne.n	80164fc <_printf_float+0x2fc>
 801657e:	e68d      	b.n	801629c <_printf_float+0x9c>
 8016580:	9a04      	ldr	r2, [sp, #16]
 8016582:	464b      	mov	r3, r9
 8016584:	4442      	add	r2, r8
 8016586:	4631      	mov	r1, r6
 8016588:	4628      	mov	r0, r5
 801658a:	47b8      	blx	r7
 801658c:	3001      	adds	r0, #1
 801658e:	d1c1      	bne.n	8016514 <_printf_float+0x314>
 8016590:	e684      	b.n	801629c <_printf_float+0x9c>
 8016592:	9a08      	ldr	r2, [sp, #32]
 8016594:	2a01      	cmp	r2, #1
 8016596:	dc01      	bgt.n	801659c <_printf_float+0x39c>
 8016598:	07db      	lsls	r3, r3, #31
 801659a:	d537      	bpl.n	801660c <_printf_float+0x40c>
 801659c:	2301      	movs	r3, #1
 801659e:	4642      	mov	r2, r8
 80165a0:	4631      	mov	r1, r6
 80165a2:	4628      	mov	r0, r5
 80165a4:	47b8      	blx	r7
 80165a6:	3001      	adds	r0, #1
 80165a8:	f43f ae78 	beq.w	801629c <_printf_float+0x9c>
 80165ac:	4653      	mov	r3, sl
 80165ae:	465a      	mov	r2, fp
 80165b0:	4631      	mov	r1, r6
 80165b2:	4628      	mov	r0, r5
 80165b4:	47b8      	blx	r7
 80165b6:	3001      	adds	r0, #1
 80165b8:	f43f ae70 	beq.w	801629c <_printf_float+0x9c>
 80165bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80165c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80165c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c8:	d01b      	beq.n	8016602 <_printf_float+0x402>
 80165ca:	9b08      	ldr	r3, [sp, #32]
 80165cc:	f108 0201 	add.w	r2, r8, #1
 80165d0:	3b01      	subs	r3, #1
 80165d2:	4631      	mov	r1, r6
 80165d4:	4628      	mov	r0, r5
 80165d6:	47b8      	blx	r7
 80165d8:	3001      	adds	r0, #1
 80165da:	d10e      	bne.n	80165fa <_printf_float+0x3fa>
 80165dc:	e65e      	b.n	801629c <_printf_float+0x9c>
 80165de:	2301      	movs	r3, #1
 80165e0:	464a      	mov	r2, r9
 80165e2:	4631      	mov	r1, r6
 80165e4:	4628      	mov	r0, r5
 80165e6:	47b8      	blx	r7
 80165e8:	3001      	adds	r0, #1
 80165ea:	f43f ae57 	beq.w	801629c <_printf_float+0x9c>
 80165ee:	f108 0801 	add.w	r8, r8, #1
 80165f2:	9b08      	ldr	r3, [sp, #32]
 80165f4:	3b01      	subs	r3, #1
 80165f6:	4543      	cmp	r3, r8
 80165f8:	dcf1      	bgt.n	80165de <_printf_float+0x3de>
 80165fa:	9b04      	ldr	r3, [sp, #16]
 80165fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016600:	e6db      	b.n	80163ba <_printf_float+0x1ba>
 8016602:	f04f 0800 	mov.w	r8, #0
 8016606:	f104 091a 	add.w	r9, r4, #26
 801660a:	e7f2      	b.n	80165f2 <_printf_float+0x3f2>
 801660c:	2301      	movs	r3, #1
 801660e:	4642      	mov	r2, r8
 8016610:	e7df      	b.n	80165d2 <_printf_float+0x3d2>
 8016612:	2301      	movs	r3, #1
 8016614:	464a      	mov	r2, r9
 8016616:	4631      	mov	r1, r6
 8016618:	4628      	mov	r0, r5
 801661a:	47b8      	blx	r7
 801661c:	3001      	adds	r0, #1
 801661e:	f43f ae3d 	beq.w	801629c <_printf_float+0x9c>
 8016622:	f108 0801 	add.w	r8, r8, #1
 8016626:	68e3      	ldr	r3, [r4, #12]
 8016628:	9909      	ldr	r1, [sp, #36]	; 0x24
 801662a:	1a5b      	subs	r3, r3, r1
 801662c:	4543      	cmp	r3, r8
 801662e:	dcf0      	bgt.n	8016612 <_printf_float+0x412>
 8016630:	e6f7      	b.n	8016422 <_printf_float+0x222>
 8016632:	f04f 0800 	mov.w	r8, #0
 8016636:	f104 0919 	add.w	r9, r4, #25
 801663a:	e7f4      	b.n	8016626 <_printf_float+0x426>

0801663c <_printf_common>:
 801663c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016640:	4616      	mov	r6, r2
 8016642:	4699      	mov	r9, r3
 8016644:	688a      	ldr	r2, [r1, #8]
 8016646:	690b      	ldr	r3, [r1, #16]
 8016648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801664c:	4293      	cmp	r3, r2
 801664e:	bfb8      	it	lt
 8016650:	4613      	movlt	r3, r2
 8016652:	6033      	str	r3, [r6, #0]
 8016654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016658:	4607      	mov	r7, r0
 801665a:	460c      	mov	r4, r1
 801665c:	b10a      	cbz	r2, 8016662 <_printf_common+0x26>
 801665e:	3301      	adds	r3, #1
 8016660:	6033      	str	r3, [r6, #0]
 8016662:	6823      	ldr	r3, [r4, #0]
 8016664:	0699      	lsls	r1, r3, #26
 8016666:	bf42      	ittt	mi
 8016668:	6833      	ldrmi	r3, [r6, #0]
 801666a:	3302      	addmi	r3, #2
 801666c:	6033      	strmi	r3, [r6, #0]
 801666e:	6825      	ldr	r5, [r4, #0]
 8016670:	f015 0506 	ands.w	r5, r5, #6
 8016674:	d106      	bne.n	8016684 <_printf_common+0x48>
 8016676:	f104 0a19 	add.w	sl, r4, #25
 801667a:	68e3      	ldr	r3, [r4, #12]
 801667c:	6832      	ldr	r2, [r6, #0]
 801667e:	1a9b      	subs	r3, r3, r2
 8016680:	42ab      	cmp	r3, r5
 8016682:	dc26      	bgt.n	80166d2 <_printf_common+0x96>
 8016684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016688:	1e13      	subs	r3, r2, #0
 801668a:	6822      	ldr	r2, [r4, #0]
 801668c:	bf18      	it	ne
 801668e:	2301      	movne	r3, #1
 8016690:	0692      	lsls	r2, r2, #26
 8016692:	d42b      	bmi.n	80166ec <_printf_common+0xb0>
 8016694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016698:	4649      	mov	r1, r9
 801669a:	4638      	mov	r0, r7
 801669c:	47c0      	blx	r8
 801669e:	3001      	adds	r0, #1
 80166a0:	d01e      	beq.n	80166e0 <_printf_common+0xa4>
 80166a2:	6823      	ldr	r3, [r4, #0]
 80166a4:	68e5      	ldr	r5, [r4, #12]
 80166a6:	6832      	ldr	r2, [r6, #0]
 80166a8:	f003 0306 	and.w	r3, r3, #6
 80166ac:	2b04      	cmp	r3, #4
 80166ae:	bf08      	it	eq
 80166b0:	1aad      	subeq	r5, r5, r2
 80166b2:	68a3      	ldr	r3, [r4, #8]
 80166b4:	6922      	ldr	r2, [r4, #16]
 80166b6:	bf0c      	ite	eq
 80166b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80166bc:	2500      	movne	r5, #0
 80166be:	4293      	cmp	r3, r2
 80166c0:	bfc4      	itt	gt
 80166c2:	1a9b      	subgt	r3, r3, r2
 80166c4:	18ed      	addgt	r5, r5, r3
 80166c6:	2600      	movs	r6, #0
 80166c8:	341a      	adds	r4, #26
 80166ca:	42b5      	cmp	r5, r6
 80166cc:	d11a      	bne.n	8016704 <_printf_common+0xc8>
 80166ce:	2000      	movs	r0, #0
 80166d0:	e008      	b.n	80166e4 <_printf_common+0xa8>
 80166d2:	2301      	movs	r3, #1
 80166d4:	4652      	mov	r2, sl
 80166d6:	4649      	mov	r1, r9
 80166d8:	4638      	mov	r0, r7
 80166da:	47c0      	blx	r8
 80166dc:	3001      	adds	r0, #1
 80166de:	d103      	bne.n	80166e8 <_printf_common+0xac>
 80166e0:	f04f 30ff 	mov.w	r0, #4294967295
 80166e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166e8:	3501      	adds	r5, #1
 80166ea:	e7c6      	b.n	801667a <_printf_common+0x3e>
 80166ec:	18e1      	adds	r1, r4, r3
 80166ee:	1c5a      	adds	r2, r3, #1
 80166f0:	2030      	movs	r0, #48	; 0x30
 80166f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80166f6:	4422      	add	r2, r4
 80166f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016700:	3302      	adds	r3, #2
 8016702:	e7c7      	b.n	8016694 <_printf_common+0x58>
 8016704:	2301      	movs	r3, #1
 8016706:	4622      	mov	r2, r4
 8016708:	4649      	mov	r1, r9
 801670a:	4638      	mov	r0, r7
 801670c:	47c0      	blx	r8
 801670e:	3001      	adds	r0, #1
 8016710:	d0e6      	beq.n	80166e0 <_printf_common+0xa4>
 8016712:	3601      	adds	r6, #1
 8016714:	e7d9      	b.n	80166ca <_printf_common+0x8e>
	...

08016718 <_printf_i>:
 8016718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801671c:	7e0f      	ldrb	r7, [r1, #24]
 801671e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016720:	2f78      	cmp	r7, #120	; 0x78
 8016722:	4691      	mov	r9, r2
 8016724:	4680      	mov	r8, r0
 8016726:	460c      	mov	r4, r1
 8016728:	469a      	mov	sl, r3
 801672a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801672e:	d807      	bhi.n	8016740 <_printf_i+0x28>
 8016730:	2f62      	cmp	r7, #98	; 0x62
 8016732:	d80a      	bhi.n	801674a <_printf_i+0x32>
 8016734:	2f00      	cmp	r7, #0
 8016736:	f000 80d8 	beq.w	80168ea <_printf_i+0x1d2>
 801673a:	2f58      	cmp	r7, #88	; 0x58
 801673c:	f000 80a3 	beq.w	8016886 <_printf_i+0x16e>
 8016740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016748:	e03a      	b.n	80167c0 <_printf_i+0xa8>
 801674a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801674e:	2b15      	cmp	r3, #21
 8016750:	d8f6      	bhi.n	8016740 <_printf_i+0x28>
 8016752:	a101      	add	r1, pc, #4	; (adr r1, 8016758 <_printf_i+0x40>)
 8016754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016758:	080167b1 	.word	0x080167b1
 801675c:	080167c5 	.word	0x080167c5
 8016760:	08016741 	.word	0x08016741
 8016764:	08016741 	.word	0x08016741
 8016768:	08016741 	.word	0x08016741
 801676c:	08016741 	.word	0x08016741
 8016770:	080167c5 	.word	0x080167c5
 8016774:	08016741 	.word	0x08016741
 8016778:	08016741 	.word	0x08016741
 801677c:	08016741 	.word	0x08016741
 8016780:	08016741 	.word	0x08016741
 8016784:	080168d1 	.word	0x080168d1
 8016788:	080167f5 	.word	0x080167f5
 801678c:	080168b3 	.word	0x080168b3
 8016790:	08016741 	.word	0x08016741
 8016794:	08016741 	.word	0x08016741
 8016798:	080168f3 	.word	0x080168f3
 801679c:	08016741 	.word	0x08016741
 80167a0:	080167f5 	.word	0x080167f5
 80167a4:	08016741 	.word	0x08016741
 80167a8:	08016741 	.word	0x08016741
 80167ac:	080168bb 	.word	0x080168bb
 80167b0:	682b      	ldr	r3, [r5, #0]
 80167b2:	1d1a      	adds	r2, r3, #4
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	602a      	str	r2, [r5, #0]
 80167b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167c0:	2301      	movs	r3, #1
 80167c2:	e0a3      	b.n	801690c <_printf_i+0x1f4>
 80167c4:	6820      	ldr	r0, [r4, #0]
 80167c6:	6829      	ldr	r1, [r5, #0]
 80167c8:	0606      	lsls	r6, r0, #24
 80167ca:	f101 0304 	add.w	r3, r1, #4
 80167ce:	d50a      	bpl.n	80167e6 <_printf_i+0xce>
 80167d0:	680e      	ldr	r6, [r1, #0]
 80167d2:	602b      	str	r3, [r5, #0]
 80167d4:	2e00      	cmp	r6, #0
 80167d6:	da03      	bge.n	80167e0 <_printf_i+0xc8>
 80167d8:	232d      	movs	r3, #45	; 0x2d
 80167da:	4276      	negs	r6, r6
 80167dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167e0:	485e      	ldr	r0, [pc, #376]	; (801695c <_printf_i+0x244>)
 80167e2:	230a      	movs	r3, #10
 80167e4:	e019      	b.n	801681a <_printf_i+0x102>
 80167e6:	680e      	ldr	r6, [r1, #0]
 80167e8:	602b      	str	r3, [r5, #0]
 80167ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80167ee:	bf18      	it	ne
 80167f0:	b236      	sxthne	r6, r6
 80167f2:	e7ef      	b.n	80167d4 <_printf_i+0xbc>
 80167f4:	682b      	ldr	r3, [r5, #0]
 80167f6:	6820      	ldr	r0, [r4, #0]
 80167f8:	1d19      	adds	r1, r3, #4
 80167fa:	6029      	str	r1, [r5, #0]
 80167fc:	0601      	lsls	r1, r0, #24
 80167fe:	d501      	bpl.n	8016804 <_printf_i+0xec>
 8016800:	681e      	ldr	r6, [r3, #0]
 8016802:	e002      	b.n	801680a <_printf_i+0xf2>
 8016804:	0646      	lsls	r6, r0, #25
 8016806:	d5fb      	bpl.n	8016800 <_printf_i+0xe8>
 8016808:	881e      	ldrh	r6, [r3, #0]
 801680a:	4854      	ldr	r0, [pc, #336]	; (801695c <_printf_i+0x244>)
 801680c:	2f6f      	cmp	r7, #111	; 0x6f
 801680e:	bf0c      	ite	eq
 8016810:	2308      	moveq	r3, #8
 8016812:	230a      	movne	r3, #10
 8016814:	2100      	movs	r1, #0
 8016816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801681a:	6865      	ldr	r5, [r4, #4]
 801681c:	60a5      	str	r5, [r4, #8]
 801681e:	2d00      	cmp	r5, #0
 8016820:	bfa2      	ittt	ge
 8016822:	6821      	ldrge	r1, [r4, #0]
 8016824:	f021 0104 	bicge.w	r1, r1, #4
 8016828:	6021      	strge	r1, [r4, #0]
 801682a:	b90e      	cbnz	r6, 8016830 <_printf_i+0x118>
 801682c:	2d00      	cmp	r5, #0
 801682e:	d04d      	beq.n	80168cc <_printf_i+0x1b4>
 8016830:	4615      	mov	r5, r2
 8016832:	fbb6 f1f3 	udiv	r1, r6, r3
 8016836:	fb03 6711 	mls	r7, r3, r1, r6
 801683a:	5dc7      	ldrb	r7, [r0, r7]
 801683c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016840:	4637      	mov	r7, r6
 8016842:	42bb      	cmp	r3, r7
 8016844:	460e      	mov	r6, r1
 8016846:	d9f4      	bls.n	8016832 <_printf_i+0x11a>
 8016848:	2b08      	cmp	r3, #8
 801684a:	d10b      	bne.n	8016864 <_printf_i+0x14c>
 801684c:	6823      	ldr	r3, [r4, #0]
 801684e:	07de      	lsls	r6, r3, #31
 8016850:	d508      	bpl.n	8016864 <_printf_i+0x14c>
 8016852:	6923      	ldr	r3, [r4, #16]
 8016854:	6861      	ldr	r1, [r4, #4]
 8016856:	4299      	cmp	r1, r3
 8016858:	bfde      	ittt	le
 801685a:	2330      	movle	r3, #48	; 0x30
 801685c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016860:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016864:	1b52      	subs	r2, r2, r5
 8016866:	6122      	str	r2, [r4, #16]
 8016868:	f8cd a000 	str.w	sl, [sp]
 801686c:	464b      	mov	r3, r9
 801686e:	aa03      	add	r2, sp, #12
 8016870:	4621      	mov	r1, r4
 8016872:	4640      	mov	r0, r8
 8016874:	f7ff fee2 	bl	801663c <_printf_common>
 8016878:	3001      	adds	r0, #1
 801687a:	d14c      	bne.n	8016916 <_printf_i+0x1fe>
 801687c:	f04f 30ff 	mov.w	r0, #4294967295
 8016880:	b004      	add	sp, #16
 8016882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016886:	4835      	ldr	r0, [pc, #212]	; (801695c <_printf_i+0x244>)
 8016888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801688c:	6829      	ldr	r1, [r5, #0]
 801688e:	6823      	ldr	r3, [r4, #0]
 8016890:	f851 6b04 	ldr.w	r6, [r1], #4
 8016894:	6029      	str	r1, [r5, #0]
 8016896:	061d      	lsls	r5, r3, #24
 8016898:	d514      	bpl.n	80168c4 <_printf_i+0x1ac>
 801689a:	07df      	lsls	r7, r3, #31
 801689c:	bf44      	itt	mi
 801689e:	f043 0320 	orrmi.w	r3, r3, #32
 80168a2:	6023      	strmi	r3, [r4, #0]
 80168a4:	b91e      	cbnz	r6, 80168ae <_printf_i+0x196>
 80168a6:	6823      	ldr	r3, [r4, #0]
 80168a8:	f023 0320 	bic.w	r3, r3, #32
 80168ac:	6023      	str	r3, [r4, #0]
 80168ae:	2310      	movs	r3, #16
 80168b0:	e7b0      	b.n	8016814 <_printf_i+0xfc>
 80168b2:	6823      	ldr	r3, [r4, #0]
 80168b4:	f043 0320 	orr.w	r3, r3, #32
 80168b8:	6023      	str	r3, [r4, #0]
 80168ba:	2378      	movs	r3, #120	; 0x78
 80168bc:	4828      	ldr	r0, [pc, #160]	; (8016960 <_printf_i+0x248>)
 80168be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80168c2:	e7e3      	b.n	801688c <_printf_i+0x174>
 80168c4:	0659      	lsls	r1, r3, #25
 80168c6:	bf48      	it	mi
 80168c8:	b2b6      	uxthmi	r6, r6
 80168ca:	e7e6      	b.n	801689a <_printf_i+0x182>
 80168cc:	4615      	mov	r5, r2
 80168ce:	e7bb      	b.n	8016848 <_printf_i+0x130>
 80168d0:	682b      	ldr	r3, [r5, #0]
 80168d2:	6826      	ldr	r6, [r4, #0]
 80168d4:	6961      	ldr	r1, [r4, #20]
 80168d6:	1d18      	adds	r0, r3, #4
 80168d8:	6028      	str	r0, [r5, #0]
 80168da:	0635      	lsls	r5, r6, #24
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	d501      	bpl.n	80168e4 <_printf_i+0x1cc>
 80168e0:	6019      	str	r1, [r3, #0]
 80168e2:	e002      	b.n	80168ea <_printf_i+0x1d2>
 80168e4:	0670      	lsls	r0, r6, #25
 80168e6:	d5fb      	bpl.n	80168e0 <_printf_i+0x1c8>
 80168e8:	8019      	strh	r1, [r3, #0]
 80168ea:	2300      	movs	r3, #0
 80168ec:	6123      	str	r3, [r4, #16]
 80168ee:	4615      	mov	r5, r2
 80168f0:	e7ba      	b.n	8016868 <_printf_i+0x150>
 80168f2:	682b      	ldr	r3, [r5, #0]
 80168f4:	1d1a      	adds	r2, r3, #4
 80168f6:	602a      	str	r2, [r5, #0]
 80168f8:	681d      	ldr	r5, [r3, #0]
 80168fa:	6862      	ldr	r2, [r4, #4]
 80168fc:	2100      	movs	r1, #0
 80168fe:	4628      	mov	r0, r5
 8016900:	f7e9 fd06 	bl	8000310 <memchr>
 8016904:	b108      	cbz	r0, 801690a <_printf_i+0x1f2>
 8016906:	1b40      	subs	r0, r0, r5
 8016908:	6060      	str	r0, [r4, #4]
 801690a:	6863      	ldr	r3, [r4, #4]
 801690c:	6123      	str	r3, [r4, #16]
 801690e:	2300      	movs	r3, #0
 8016910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016914:	e7a8      	b.n	8016868 <_printf_i+0x150>
 8016916:	6923      	ldr	r3, [r4, #16]
 8016918:	462a      	mov	r2, r5
 801691a:	4649      	mov	r1, r9
 801691c:	4640      	mov	r0, r8
 801691e:	47d0      	blx	sl
 8016920:	3001      	adds	r0, #1
 8016922:	d0ab      	beq.n	801687c <_printf_i+0x164>
 8016924:	6823      	ldr	r3, [r4, #0]
 8016926:	079b      	lsls	r3, r3, #30
 8016928:	d413      	bmi.n	8016952 <_printf_i+0x23a>
 801692a:	68e0      	ldr	r0, [r4, #12]
 801692c:	9b03      	ldr	r3, [sp, #12]
 801692e:	4298      	cmp	r0, r3
 8016930:	bfb8      	it	lt
 8016932:	4618      	movlt	r0, r3
 8016934:	e7a4      	b.n	8016880 <_printf_i+0x168>
 8016936:	2301      	movs	r3, #1
 8016938:	4632      	mov	r2, r6
 801693a:	4649      	mov	r1, r9
 801693c:	4640      	mov	r0, r8
 801693e:	47d0      	blx	sl
 8016940:	3001      	adds	r0, #1
 8016942:	d09b      	beq.n	801687c <_printf_i+0x164>
 8016944:	3501      	adds	r5, #1
 8016946:	68e3      	ldr	r3, [r4, #12]
 8016948:	9903      	ldr	r1, [sp, #12]
 801694a:	1a5b      	subs	r3, r3, r1
 801694c:	42ab      	cmp	r3, r5
 801694e:	dcf2      	bgt.n	8016936 <_printf_i+0x21e>
 8016950:	e7eb      	b.n	801692a <_printf_i+0x212>
 8016952:	2500      	movs	r5, #0
 8016954:	f104 0619 	add.w	r6, r4, #25
 8016958:	e7f5      	b.n	8016946 <_printf_i+0x22e>
 801695a:	bf00      	nop
 801695c:	08019672 	.word	0x08019672
 8016960:	08019683 	.word	0x08019683

08016964 <cleanup_glue>:
 8016964:	b538      	push	{r3, r4, r5, lr}
 8016966:	460c      	mov	r4, r1
 8016968:	6809      	ldr	r1, [r1, #0]
 801696a:	4605      	mov	r5, r0
 801696c:	b109      	cbz	r1, 8016972 <cleanup_glue+0xe>
 801696e:	f7ff fff9 	bl	8016964 <cleanup_glue>
 8016972:	4621      	mov	r1, r4
 8016974:	4628      	mov	r0, r5
 8016976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801697a:	f001 bd47 	b.w	801840c <_free_r>
	...

08016980 <_reclaim_reent>:
 8016980:	4b2c      	ldr	r3, [pc, #176]	; (8016a34 <_reclaim_reent+0xb4>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	4283      	cmp	r3, r0
 8016986:	b570      	push	{r4, r5, r6, lr}
 8016988:	4604      	mov	r4, r0
 801698a:	d051      	beq.n	8016a30 <_reclaim_reent+0xb0>
 801698c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801698e:	b143      	cbz	r3, 80169a2 <_reclaim_reent+0x22>
 8016990:	68db      	ldr	r3, [r3, #12]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d14a      	bne.n	8016a2c <_reclaim_reent+0xac>
 8016996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016998:	6819      	ldr	r1, [r3, #0]
 801699a:	b111      	cbz	r1, 80169a2 <_reclaim_reent+0x22>
 801699c:	4620      	mov	r0, r4
 801699e:	f001 fd35 	bl	801840c <_free_r>
 80169a2:	6961      	ldr	r1, [r4, #20]
 80169a4:	b111      	cbz	r1, 80169ac <_reclaim_reent+0x2c>
 80169a6:	4620      	mov	r0, r4
 80169a8:	f001 fd30 	bl	801840c <_free_r>
 80169ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80169ae:	b111      	cbz	r1, 80169b6 <_reclaim_reent+0x36>
 80169b0:	4620      	mov	r0, r4
 80169b2:	f001 fd2b 	bl	801840c <_free_r>
 80169b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80169b8:	b111      	cbz	r1, 80169c0 <_reclaim_reent+0x40>
 80169ba:	4620      	mov	r0, r4
 80169bc:	f001 fd26 	bl	801840c <_free_r>
 80169c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80169c2:	b111      	cbz	r1, 80169ca <_reclaim_reent+0x4a>
 80169c4:	4620      	mov	r0, r4
 80169c6:	f001 fd21 	bl	801840c <_free_r>
 80169ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80169cc:	b111      	cbz	r1, 80169d4 <_reclaim_reent+0x54>
 80169ce:	4620      	mov	r0, r4
 80169d0:	f001 fd1c 	bl	801840c <_free_r>
 80169d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80169d6:	b111      	cbz	r1, 80169de <_reclaim_reent+0x5e>
 80169d8:	4620      	mov	r0, r4
 80169da:	f001 fd17 	bl	801840c <_free_r>
 80169de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80169e0:	b111      	cbz	r1, 80169e8 <_reclaim_reent+0x68>
 80169e2:	4620      	mov	r0, r4
 80169e4:	f001 fd12 	bl	801840c <_free_r>
 80169e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80169ea:	b111      	cbz	r1, 80169f2 <_reclaim_reent+0x72>
 80169ec:	4620      	mov	r0, r4
 80169ee:	f001 fd0d 	bl	801840c <_free_r>
 80169f2:	69a3      	ldr	r3, [r4, #24]
 80169f4:	b1e3      	cbz	r3, 8016a30 <_reclaim_reent+0xb0>
 80169f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80169f8:	4620      	mov	r0, r4
 80169fa:	4798      	blx	r3
 80169fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80169fe:	b1b9      	cbz	r1, 8016a30 <_reclaim_reent+0xb0>
 8016a00:	4620      	mov	r0, r4
 8016a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a06:	f7ff bfad 	b.w	8016964 <cleanup_glue>
 8016a0a:	5949      	ldr	r1, [r1, r5]
 8016a0c:	b941      	cbnz	r1, 8016a20 <_reclaim_reent+0xa0>
 8016a0e:	3504      	adds	r5, #4
 8016a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a12:	2d80      	cmp	r5, #128	; 0x80
 8016a14:	68d9      	ldr	r1, [r3, #12]
 8016a16:	d1f8      	bne.n	8016a0a <_reclaim_reent+0x8a>
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f001 fcf7 	bl	801840c <_free_r>
 8016a1e:	e7ba      	b.n	8016996 <_reclaim_reent+0x16>
 8016a20:	680e      	ldr	r6, [r1, #0]
 8016a22:	4620      	mov	r0, r4
 8016a24:	f001 fcf2 	bl	801840c <_free_r>
 8016a28:	4631      	mov	r1, r6
 8016a2a:	e7ef      	b.n	8016a0c <_reclaim_reent+0x8c>
 8016a2c:	2500      	movs	r5, #0
 8016a2e:	e7ef      	b.n	8016a10 <_reclaim_reent+0x90>
 8016a30:	bd70      	pop	{r4, r5, r6, pc}
 8016a32:	bf00      	nop
 8016a34:	24000018 	.word	0x24000018

08016a38 <_sbrk_r>:
 8016a38:	b538      	push	{r3, r4, r5, lr}
 8016a3a:	4d06      	ldr	r5, [pc, #24]	; (8016a54 <_sbrk_r+0x1c>)
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	4604      	mov	r4, r0
 8016a40:	4608      	mov	r0, r1
 8016a42:	602b      	str	r3, [r5, #0]
 8016a44:	f7eb fe38 	bl	80026b8 <_sbrk>
 8016a48:	1c43      	adds	r3, r0, #1
 8016a4a:	d102      	bne.n	8016a52 <_sbrk_r+0x1a>
 8016a4c:	682b      	ldr	r3, [r5, #0]
 8016a4e:	b103      	cbz	r3, 8016a52 <_sbrk_r+0x1a>
 8016a50:	6023      	str	r3, [r4, #0]
 8016a52:	bd38      	pop	{r3, r4, r5, pc}
 8016a54:	24007390 	.word	0x24007390

08016a58 <_raise_r>:
 8016a58:	291f      	cmp	r1, #31
 8016a5a:	b538      	push	{r3, r4, r5, lr}
 8016a5c:	4604      	mov	r4, r0
 8016a5e:	460d      	mov	r5, r1
 8016a60:	d904      	bls.n	8016a6c <_raise_r+0x14>
 8016a62:	2316      	movs	r3, #22
 8016a64:	6003      	str	r3, [r0, #0]
 8016a66:	f04f 30ff 	mov.w	r0, #4294967295
 8016a6a:	bd38      	pop	{r3, r4, r5, pc}
 8016a6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016a6e:	b112      	cbz	r2, 8016a76 <_raise_r+0x1e>
 8016a70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a74:	b94b      	cbnz	r3, 8016a8a <_raise_r+0x32>
 8016a76:	4620      	mov	r0, r4
 8016a78:	f000 f830 	bl	8016adc <_getpid_r>
 8016a7c:	462a      	mov	r2, r5
 8016a7e:	4601      	mov	r1, r0
 8016a80:	4620      	mov	r0, r4
 8016a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a86:	f000 b817 	b.w	8016ab8 <_kill_r>
 8016a8a:	2b01      	cmp	r3, #1
 8016a8c:	d00a      	beq.n	8016aa4 <_raise_r+0x4c>
 8016a8e:	1c59      	adds	r1, r3, #1
 8016a90:	d103      	bne.n	8016a9a <_raise_r+0x42>
 8016a92:	2316      	movs	r3, #22
 8016a94:	6003      	str	r3, [r0, #0]
 8016a96:	2001      	movs	r0, #1
 8016a98:	e7e7      	b.n	8016a6a <_raise_r+0x12>
 8016a9a:	2400      	movs	r4, #0
 8016a9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	4798      	blx	r3
 8016aa4:	2000      	movs	r0, #0
 8016aa6:	e7e0      	b.n	8016a6a <_raise_r+0x12>

08016aa8 <raise>:
 8016aa8:	4b02      	ldr	r3, [pc, #8]	; (8016ab4 <raise+0xc>)
 8016aaa:	4601      	mov	r1, r0
 8016aac:	6818      	ldr	r0, [r3, #0]
 8016aae:	f7ff bfd3 	b.w	8016a58 <_raise_r>
 8016ab2:	bf00      	nop
 8016ab4:	24000018 	.word	0x24000018

08016ab8 <_kill_r>:
 8016ab8:	b538      	push	{r3, r4, r5, lr}
 8016aba:	4d07      	ldr	r5, [pc, #28]	; (8016ad8 <_kill_r+0x20>)
 8016abc:	2300      	movs	r3, #0
 8016abe:	4604      	mov	r4, r0
 8016ac0:	4608      	mov	r0, r1
 8016ac2:	4611      	mov	r1, r2
 8016ac4:	602b      	str	r3, [r5, #0]
 8016ac6:	f7eb fd6f 	bl	80025a8 <_kill>
 8016aca:	1c43      	adds	r3, r0, #1
 8016acc:	d102      	bne.n	8016ad4 <_kill_r+0x1c>
 8016ace:	682b      	ldr	r3, [r5, #0]
 8016ad0:	b103      	cbz	r3, 8016ad4 <_kill_r+0x1c>
 8016ad2:	6023      	str	r3, [r4, #0]
 8016ad4:	bd38      	pop	{r3, r4, r5, pc}
 8016ad6:	bf00      	nop
 8016ad8:	24007390 	.word	0x24007390

08016adc <_getpid_r>:
 8016adc:	f7eb bd5c 	b.w	8002598 <_getpid>

08016ae0 <siprintf>:
 8016ae0:	b40e      	push	{r1, r2, r3}
 8016ae2:	b500      	push	{lr}
 8016ae4:	b09c      	sub	sp, #112	; 0x70
 8016ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8016ae8:	9002      	str	r0, [sp, #8]
 8016aea:	9006      	str	r0, [sp, #24]
 8016aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016af0:	4809      	ldr	r0, [pc, #36]	; (8016b18 <siprintf+0x38>)
 8016af2:	9107      	str	r1, [sp, #28]
 8016af4:	9104      	str	r1, [sp, #16]
 8016af6:	4909      	ldr	r1, [pc, #36]	; (8016b1c <siprintf+0x3c>)
 8016af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016afc:	9105      	str	r1, [sp, #20]
 8016afe:	6800      	ldr	r0, [r0, #0]
 8016b00:	9301      	str	r3, [sp, #4]
 8016b02:	a902      	add	r1, sp, #8
 8016b04:	f001 fd2a 	bl	801855c <_svfiprintf_r>
 8016b08:	9b02      	ldr	r3, [sp, #8]
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	701a      	strb	r2, [r3, #0]
 8016b0e:	b01c      	add	sp, #112	; 0x70
 8016b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b14:	b003      	add	sp, #12
 8016b16:	4770      	bx	lr
 8016b18:	24000018 	.word	0x24000018
 8016b1c:	ffff0208 	.word	0xffff0208

08016b20 <__sread>:
 8016b20:	b510      	push	{r4, lr}
 8016b22:	460c      	mov	r4, r1
 8016b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b28:	f001 ff72 	bl	8018a10 <_read_r>
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	bfab      	itete	ge
 8016b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b32:	89a3      	ldrhlt	r3, [r4, #12]
 8016b34:	181b      	addge	r3, r3, r0
 8016b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b3a:	bfac      	ite	ge
 8016b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b3e:	81a3      	strhlt	r3, [r4, #12]
 8016b40:	bd10      	pop	{r4, pc}

08016b42 <__swrite>:
 8016b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b46:	461f      	mov	r7, r3
 8016b48:	898b      	ldrh	r3, [r1, #12]
 8016b4a:	05db      	lsls	r3, r3, #23
 8016b4c:	4605      	mov	r5, r0
 8016b4e:	460c      	mov	r4, r1
 8016b50:	4616      	mov	r6, r2
 8016b52:	d505      	bpl.n	8016b60 <__swrite+0x1e>
 8016b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b58:	2302      	movs	r3, #2
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	f001 f830 	bl	8017bc0 <_lseek_r>
 8016b60:	89a3      	ldrh	r3, [r4, #12]
 8016b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b6a:	81a3      	strh	r3, [r4, #12]
 8016b6c:	4632      	mov	r2, r6
 8016b6e:	463b      	mov	r3, r7
 8016b70:	4628      	mov	r0, r5
 8016b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b76:	f000 b871 	b.w	8016c5c <_write_r>

08016b7a <__sseek>:
 8016b7a:	b510      	push	{r4, lr}
 8016b7c:	460c      	mov	r4, r1
 8016b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b82:	f001 f81d 	bl	8017bc0 <_lseek_r>
 8016b86:	1c43      	adds	r3, r0, #1
 8016b88:	89a3      	ldrh	r3, [r4, #12]
 8016b8a:	bf15      	itete	ne
 8016b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016b96:	81a3      	strheq	r3, [r4, #12]
 8016b98:	bf18      	it	ne
 8016b9a:	81a3      	strhne	r3, [r4, #12]
 8016b9c:	bd10      	pop	{r4, pc}

08016b9e <__sclose>:
 8016b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ba2:	f000 b93d 	b.w	8016e20 <_close_r>

08016ba6 <strcpy>:
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016bac:	f803 2b01 	strb.w	r2, [r3], #1
 8016bb0:	2a00      	cmp	r2, #0
 8016bb2:	d1f9      	bne.n	8016ba8 <strcpy+0x2>
 8016bb4:	4770      	bx	lr
	...

08016bb8 <__swbuf_r>:
 8016bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bba:	460e      	mov	r6, r1
 8016bbc:	4614      	mov	r4, r2
 8016bbe:	4605      	mov	r5, r0
 8016bc0:	b118      	cbz	r0, 8016bca <__swbuf_r+0x12>
 8016bc2:	6983      	ldr	r3, [r0, #24]
 8016bc4:	b90b      	cbnz	r3, 8016bca <__swbuf_r+0x12>
 8016bc6:	f7ff f91b 	bl	8015e00 <__sinit>
 8016bca:	4b21      	ldr	r3, [pc, #132]	; (8016c50 <__swbuf_r+0x98>)
 8016bcc:	429c      	cmp	r4, r3
 8016bce:	d12b      	bne.n	8016c28 <__swbuf_r+0x70>
 8016bd0:	686c      	ldr	r4, [r5, #4]
 8016bd2:	69a3      	ldr	r3, [r4, #24]
 8016bd4:	60a3      	str	r3, [r4, #8]
 8016bd6:	89a3      	ldrh	r3, [r4, #12]
 8016bd8:	071a      	lsls	r2, r3, #28
 8016bda:	d52f      	bpl.n	8016c3c <__swbuf_r+0x84>
 8016bdc:	6923      	ldr	r3, [r4, #16]
 8016bde:	b36b      	cbz	r3, 8016c3c <__swbuf_r+0x84>
 8016be0:	6923      	ldr	r3, [r4, #16]
 8016be2:	6820      	ldr	r0, [r4, #0]
 8016be4:	1ac0      	subs	r0, r0, r3
 8016be6:	6963      	ldr	r3, [r4, #20]
 8016be8:	b2f6      	uxtb	r6, r6
 8016bea:	4283      	cmp	r3, r0
 8016bec:	4637      	mov	r7, r6
 8016bee:	dc04      	bgt.n	8016bfa <__swbuf_r+0x42>
 8016bf0:	4621      	mov	r1, r4
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	f000 ffa4 	bl	8017b40 <_fflush_r>
 8016bf8:	bb30      	cbnz	r0, 8016c48 <__swbuf_r+0x90>
 8016bfa:	68a3      	ldr	r3, [r4, #8]
 8016bfc:	3b01      	subs	r3, #1
 8016bfe:	60a3      	str	r3, [r4, #8]
 8016c00:	6823      	ldr	r3, [r4, #0]
 8016c02:	1c5a      	adds	r2, r3, #1
 8016c04:	6022      	str	r2, [r4, #0]
 8016c06:	701e      	strb	r6, [r3, #0]
 8016c08:	6963      	ldr	r3, [r4, #20]
 8016c0a:	3001      	adds	r0, #1
 8016c0c:	4283      	cmp	r3, r0
 8016c0e:	d004      	beq.n	8016c1a <__swbuf_r+0x62>
 8016c10:	89a3      	ldrh	r3, [r4, #12]
 8016c12:	07db      	lsls	r3, r3, #31
 8016c14:	d506      	bpl.n	8016c24 <__swbuf_r+0x6c>
 8016c16:	2e0a      	cmp	r6, #10
 8016c18:	d104      	bne.n	8016c24 <__swbuf_r+0x6c>
 8016c1a:	4621      	mov	r1, r4
 8016c1c:	4628      	mov	r0, r5
 8016c1e:	f000 ff8f 	bl	8017b40 <_fflush_r>
 8016c22:	b988      	cbnz	r0, 8016c48 <__swbuf_r+0x90>
 8016c24:	4638      	mov	r0, r7
 8016c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c28:	4b0a      	ldr	r3, [pc, #40]	; (8016c54 <__swbuf_r+0x9c>)
 8016c2a:	429c      	cmp	r4, r3
 8016c2c:	d101      	bne.n	8016c32 <__swbuf_r+0x7a>
 8016c2e:	68ac      	ldr	r4, [r5, #8]
 8016c30:	e7cf      	b.n	8016bd2 <__swbuf_r+0x1a>
 8016c32:	4b09      	ldr	r3, [pc, #36]	; (8016c58 <__swbuf_r+0xa0>)
 8016c34:	429c      	cmp	r4, r3
 8016c36:	bf08      	it	eq
 8016c38:	68ec      	ldreq	r4, [r5, #12]
 8016c3a:	e7ca      	b.n	8016bd2 <__swbuf_r+0x1a>
 8016c3c:	4621      	mov	r1, r4
 8016c3e:	4628      	mov	r0, r5
 8016c40:	f000 f81e 	bl	8016c80 <__swsetup_r>
 8016c44:	2800      	cmp	r0, #0
 8016c46:	d0cb      	beq.n	8016be0 <__swbuf_r+0x28>
 8016c48:	f04f 37ff 	mov.w	r7, #4294967295
 8016c4c:	e7ea      	b.n	8016c24 <__swbuf_r+0x6c>
 8016c4e:	bf00      	nop
 8016c50:	0801961c 	.word	0x0801961c
 8016c54:	0801963c 	.word	0x0801963c
 8016c58:	080195fc 	.word	0x080195fc

08016c5c <_write_r>:
 8016c5c:	b538      	push	{r3, r4, r5, lr}
 8016c5e:	4d07      	ldr	r5, [pc, #28]	; (8016c7c <_write_r+0x20>)
 8016c60:	4604      	mov	r4, r0
 8016c62:	4608      	mov	r0, r1
 8016c64:	4611      	mov	r1, r2
 8016c66:	2200      	movs	r2, #0
 8016c68:	602a      	str	r2, [r5, #0]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	f7eb fcd3 	bl	8002616 <_write>
 8016c70:	1c43      	adds	r3, r0, #1
 8016c72:	d102      	bne.n	8016c7a <_write_r+0x1e>
 8016c74:	682b      	ldr	r3, [r5, #0]
 8016c76:	b103      	cbz	r3, 8016c7a <_write_r+0x1e>
 8016c78:	6023      	str	r3, [r4, #0]
 8016c7a:	bd38      	pop	{r3, r4, r5, pc}
 8016c7c:	24007390 	.word	0x24007390

08016c80 <__swsetup_r>:
 8016c80:	4b32      	ldr	r3, [pc, #200]	; (8016d4c <__swsetup_r+0xcc>)
 8016c82:	b570      	push	{r4, r5, r6, lr}
 8016c84:	681d      	ldr	r5, [r3, #0]
 8016c86:	4606      	mov	r6, r0
 8016c88:	460c      	mov	r4, r1
 8016c8a:	b125      	cbz	r5, 8016c96 <__swsetup_r+0x16>
 8016c8c:	69ab      	ldr	r3, [r5, #24]
 8016c8e:	b913      	cbnz	r3, 8016c96 <__swsetup_r+0x16>
 8016c90:	4628      	mov	r0, r5
 8016c92:	f7ff f8b5 	bl	8015e00 <__sinit>
 8016c96:	4b2e      	ldr	r3, [pc, #184]	; (8016d50 <__swsetup_r+0xd0>)
 8016c98:	429c      	cmp	r4, r3
 8016c9a:	d10f      	bne.n	8016cbc <__swsetup_r+0x3c>
 8016c9c:	686c      	ldr	r4, [r5, #4]
 8016c9e:	89a3      	ldrh	r3, [r4, #12]
 8016ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ca4:	0719      	lsls	r1, r3, #28
 8016ca6:	d42c      	bmi.n	8016d02 <__swsetup_r+0x82>
 8016ca8:	06dd      	lsls	r5, r3, #27
 8016caa:	d411      	bmi.n	8016cd0 <__swsetup_r+0x50>
 8016cac:	2309      	movs	r3, #9
 8016cae:	6033      	str	r3, [r6, #0]
 8016cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016cb4:	81a3      	strh	r3, [r4, #12]
 8016cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8016cba:	e03e      	b.n	8016d3a <__swsetup_r+0xba>
 8016cbc:	4b25      	ldr	r3, [pc, #148]	; (8016d54 <__swsetup_r+0xd4>)
 8016cbe:	429c      	cmp	r4, r3
 8016cc0:	d101      	bne.n	8016cc6 <__swsetup_r+0x46>
 8016cc2:	68ac      	ldr	r4, [r5, #8]
 8016cc4:	e7eb      	b.n	8016c9e <__swsetup_r+0x1e>
 8016cc6:	4b24      	ldr	r3, [pc, #144]	; (8016d58 <__swsetup_r+0xd8>)
 8016cc8:	429c      	cmp	r4, r3
 8016cca:	bf08      	it	eq
 8016ccc:	68ec      	ldreq	r4, [r5, #12]
 8016cce:	e7e6      	b.n	8016c9e <__swsetup_r+0x1e>
 8016cd0:	0758      	lsls	r0, r3, #29
 8016cd2:	d512      	bpl.n	8016cfa <__swsetup_r+0x7a>
 8016cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016cd6:	b141      	cbz	r1, 8016cea <__swsetup_r+0x6a>
 8016cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016cdc:	4299      	cmp	r1, r3
 8016cde:	d002      	beq.n	8016ce6 <__swsetup_r+0x66>
 8016ce0:	4630      	mov	r0, r6
 8016ce2:	f001 fb93 	bl	801840c <_free_r>
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8016cea:	89a3      	ldrh	r3, [r4, #12]
 8016cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016cf0:	81a3      	strh	r3, [r4, #12]
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	6063      	str	r3, [r4, #4]
 8016cf6:	6923      	ldr	r3, [r4, #16]
 8016cf8:	6023      	str	r3, [r4, #0]
 8016cfa:	89a3      	ldrh	r3, [r4, #12]
 8016cfc:	f043 0308 	orr.w	r3, r3, #8
 8016d00:	81a3      	strh	r3, [r4, #12]
 8016d02:	6923      	ldr	r3, [r4, #16]
 8016d04:	b94b      	cbnz	r3, 8016d1a <__swsetup_r+0x9a>
 8016d06:	89a3      	ldrh	r3, [r4, #12]
 8016d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d10:	d003      	beq.n	8016d1a <__swsetup_r+0x9a>
 8016d12:	4621      	mov	r1, r4
 8016d14:	4630      	mov	r0, r6
 8016d16:	f000 ff8b 	bl	8017c30 <__smakebuf_r>
 8016d1a:	89a0      	ldrh	r0, [r4, #12]
 8016d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d20:	f010 0301 	ands.w	r3, r0, #1
 8016d24:	d00a      	beq.n	8016d3c <__swsetup_r+0xbc>
 8016d26:	2300      	movs	r3, #0
 8016d28:	60a3      	str	r3, [r4, #8]
 8016d2a:	6963      	ldr	r3, [r4, #20]
 8016d2c:	425b      	negs	r3, r3
 8016d2e:	61a3      	str	r3, [r4, #24]
 8016d30:	6923      	ldr	r3, [r4, #16]
 8016d32:	b943      	cbnz	r3, 8016d46 <__swsetup_r+0xc6>
 8016d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016d38:	d1ba      	bne.n	8016cb0 <__swsetup_r+0x30>
 8016d3a:	bd70      	pop	{r4, r5, r6, pc}
 8016d3c:	0781      	lsls	r1, r0, #30
 8016d3e:	bf58      	it	pl
 8016d40:	6963      	ldrpl	r3, [r4, #20]
 8016d42:	60a3      	str	r3, [r4, #8]
 8016d44:	e7f4      	b.n	8016d30 <__swsetup_r+0xb0>
 8016d46:	2000      	movs	r0, #0
 8016d48:	e7f7      	b.n	8016d3a <__swsetup_r+0xba>
 8016d4a:	bf00      	nop
 8016d4c:	24000018 	.word	0x24000018
 8016d50:	0801961c 	.word	0x0801961c
 8016d54:	0801963c 	.word	0x0801963c
 8016d58:	080195fc 	.word	0x080195fc

08016d5c <__register_exitproc>:
 8016d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d60:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8016e1c <__register_exitproc+0xc0>
 8016d64:	4606      	mov	r6, r0
 8016d66:	f8d8 0000 	ldr.w	r0, [r8]
 8016d6a:	461f      	mov	r7, r3
 8016d6c:	460d      	mov	r5, r1
 8016d6e:	4691      	mov	r9, r2
 8016d70:	f7ff f909 	bl	8015f86 <__retarget_lock_acquire_recursive>
 8016d74:	4b25      	ldr	r3, [pc, #148]	; (8016e0c <__register_exitproc+0xb0>)
 8016d76:	681c      	ldr	r4, [r3, #0]
 8016d78:	b934      	cbnz	r4, 8016d88 <__register_exitproc+0x2c>
 8016d7a:	4c25      	ldr	r4, [pc, #148]	; (8016e10 <__register_exitproc+0xb4>)
 8016d7c:	601c      	str	r4, [r3, #0]
 8016d7e:	4b25      	ldr	r3, [pc, #148]	; (8016e14 <__register_exitproc+0xb8>)
 8016d80:	b113      	cbz	r3, 8016d88 <__register_exitproc+0x2c>
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8016d88:	6863      	ldr	r3, [r4, #4]
 8016d8a:	2b1f      	cmp	r3, #31
 8016d8c:	dd07      	ble.n	8016d9e <__register_exitproc+0x42>
 8016d8e:	f8d8 0000 	ldr.w	r0, [r8]
 8016d92:	f7ff f8fa 	bl	8015f8a <__retarget_lock_release_recursive>
 8016d96:	f04f 30ff 	mov.w	r0, #4294967295
 8016d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d9e:	b34e      	cbz	r6, 8016df4 <__register_exitproc+0x98>
 8016da0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8016da4:	b988      	cbnz	r0, 8016dca <__register_exitproc+0x6e>
 8016da6:	4b1c      	ldr	r3, [pc, #112]	; (8016e18 <__register_exitproc+0xbc>)
 8016da8:	b923      	cbnz	r3, 8016db4 <__register_exitproc+0x58>
 8016daa:	f8d8 0000 	ldr.w	r0, [r8]
 8016dae:	f7ff f8eb 	bl	8015f88 <__retarget_lock_release>
 8016db2:	e7f0      	b.n	8016d96 <__register_exitproc+0x3a>
 8016db4:	f44f 7084 	mov.w	r0, #264	; 0x108
 8016db8:	f000 ff7a 	bl	8017cb0 <malloc>
 8016dbc:	2800      	cmp	r0, #0
 8016dbe:	d0f4      	beq.n	8016daa <__register_exitproc+0x4e>
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8016dc6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8016dca:	6863      	ldr	r3, [r4, #4]
 8016dcc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8016dd0:	2201      	movs	r2, #1
 8016dd2:	409a      	lsls	r2, r3
 8016dd4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8016dd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8016ddc:	4313      	orrs	r3, r2
 8016dde:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8016de2:	2e02      	cmp	r6, #2
 8016de4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8016de8:	bf02      	ittt	eq
 8016dea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8016dee:	4313      	orreq	r3, r2
 8016df0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8016df4:	6863      	ldr	r3, [r4, #4]
 8016df6:	f8d8 0000 	ldr.w	r0, [r8]
 8016dfa:	1c5a      	adds	r2, r3, #1
 8016dfc:	3302      	adds	r3, #2
 8016dfe:	6062      	str	r2, [r4, #4]
 8016e00:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8016e04:	f7ff f8c1 	bl	8015f8a <__retarget_lock_release_recursive>
 8016e08:	2000      	movs	r0, #0
 8016e0a:	e7c6      	b.n	8016d9a <__register_exitproc+0x3e>
 8016e0c:	24007420 	.word	0x24007420
 8016e10:	24007394 	.word	0x24007394
 8016e14:	00000000 	.word	0x00000000
 8016e18:	08017cb1 	.word	0x08017cb1
 8016e1c:	2400007c 	.word	0x2400007c

08016e20 <_close_r>:
 8016e20:	b538      	push	{r3, r4, r5, lr}
 8016e22:	4d06      	ldr	r5, [pc, #24]	; (8016e3c <_close_r+0x1c>)
 8016e24:	2300      	movs	r3, #0
 8016e26:	4604      	mov	r4, r0
 8016e28:	4608      	mov	r0, r1
 8016e2a:	602b      	str	r3, [r5, #0]
 8016e2c:	f7eb fc0f 	bl	800264e <_close>
 8016e30:	1c43      	adds	r3, r0, #1
 8016e32:	d102      	bne.n	8016e3a <_close_r+0x1a>
 8016e34:	682b      	ldr	r3, [r5, #0]
 8016e36:	b103      	cbz	r3, 8016e3a <_close_r+0x1a>
 8016e38:	6023      	str	r3, [r4, #0]
 8016e3a:	bd38      	pop	{r3, r4, r5, pc}
 8016e3c:	24007390 	.word	0x24007390

08016e40 <quorem>:
 8016e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e44:	6903      	ldr	r3, [r0, #16]
 8016e46:	690c      	ldr	r4, [r1, #16]
 8016e48:	42a3      	cmp	r3, r4
 8016e4a:	4607      	mov	r7, r0
 8016e4c:	f2c0 8081 	blt.w	8016f52 <quorem+0x112>
 8016e50:	3c01      	subs	r4, #1
 8016e52:	f101 0814 	add.w	r8, r1, #20
 8016e56:	f100 0514 	add.w	r5, r0, #20
 8016e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016e5e:	9301      	str	r3, [sp, #4]
 8016e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016e68:	3301      	adds	r3, #1
 8016e6a:	429a      	cmp	r2, r3
 8016e6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016e70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016e74:	fbb2 f6f3 	udiv	r6, r2, r3
 8016e78:	d331      	bcc.n	8016ede <quorem+0x9e>
 8016e7a:	f04f 0e00 	mov.w	lr, #0
 8016e7e:	4640      	mov	r0, r8
 8016e80:	46ac      	mov	ip, r5
 8016e82:	46f2      	mov	sl, lr
 8016e84:	f850 2b04 	ldr.w	r2, [r0], #4
 8016e88:	b293      	uxth	r3, r2
 8016e8a:	fb06 e303 	mla	r3, r6, r3, lr
 8016e8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016e92:	b29b      	uxth	r3, r3
 8016e94:	ebaa 0303 	sub.w	r3, sl, r3
 8016e98:	f8dc a000 	ldr.w	sl, [ip]
 8016e9c:	0c12      	lsrs	r2, r2, #16
 8016e9e:	fa13 f38a 	uxtah	r3, r3, sl
 8016ea2:	fb06 e202 	mla	r2, r6, r2, lr
 8016ea6:	9300      	str	r3, [sp, #0]
 8016ea8:	9b00      	ldr	r3, [sp, #0]
 8016eaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016eae:	b292      	uxth	r2, r2
 8016eb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016eb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8016ebc:	4581      	cmp	r9, r0
 8016ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ec2:	f84c 3b04 	str.w	r3, [ip], #4
 8016ec6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016eca:	d2db      	bcs.n	8016e84 <quorem+0x44>
 8016ecc:	f855 300b 	ldr.w	r3, [r5, fp]
 8016ed0:	b92b      	cbnz	r3, 8016ede <quorem+0x9e>
 8016ed2:	9b01      	ldr	r3, [sp, #4]
 8016ed4:	3b04      	subs	r3, #4
 8016ed6:	429d      	cmp	r5, r3
 8016ed8:	461a      	mov	r2, r3
 8016eda:	d32e      	bcc.n	8016f3a <quorem+0xfa>
 8016edc:	613c      	str	r4, [r7, #16]
 8016ede:	4638      	mov	r0, r7
 8016ee0:	f001 f97c 	bl	80181dc <__mcmp>
 8016ee4:	2800      	cmp	r0, #0
 8016ee6:	db24      	blt.n	8016f32 <quorem+0xf2>
 8016ee8:	3601      	adds	r6, #1
 8016eea:	4628      	mov	r0, r5
 8016eec:	f04f 0c00 	mov.w	ip, #0
 8016ef0:	f858 2b04 	ldr.w	r2, [r8], #4
 8016ef4:	f8d0 e000 	ldr.w	lr, [r0]
 8016ef8:	b293      	uxth	r3, r2
 8016efa:	ebac 0303 	sub.w	r3, ip, r3
 8016efe:	0c12      	lsrs	r2, r2, #16
 8016f00:	fa13 f38e 	uxtah	r3, r3, lr
 8016f04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016f0c:	b29b      	uxth	r3, r3
 8016f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f12:	45c1      	cmp	r9, r8
 8016f14:	f840 3b04 	str.w	r3, [r0], #4
 8016f18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016f1c:	d2e8      	bcs.n	8016ef0 <quorem+0xb0>
 8016f1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016f26:	b922      	cbnz	r2, 8016f32 <quorem+0xf2>
 8016f28:	3b04      	subs	r3, #4
 8016f2a:	429d      	cmp	r5, r3
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	d30a      	bcc.n	8016f46 <quorem+0x106>
 8016f30:	613c      	str	r4, [r7, #16]
 8016f32:	4630      	mov	r0, r6
 8016f34:	b003      	add	sp, #12
 8016f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f3a:	6812      	ldr	r2, [r2, #0]
 8016f3c:	3b04      	subs	r3, #4
 8016f3e:	2a00      	cmp	r2, #0
 8016f40:	d1cc      	bne.n	8016edc <quorem+0x9c>
 8016f42:	3c01      	subs	r4, #1
 8016f44:	e7c7      	b.n	8016ed6 <quorem+0x96>
 8016f46:	6812      	ldr	r2, [r2, #0]
 8016f48:	3b04      	subs	r3, #4
 8016f4a:	2a00      	cmp	r2, #0
 8016f4c:	d1f0      	bne.n	8016f30 <quorem+0xf0>
 8016f4e:	3c01      	subs	r4, #1
 8016f50:	e7eb      	b.n	8016f2a <quorem+0xea>
 8016f52:	2000      	movs	r0, #0
 8016f54:	e7ee      	b.n	8016f34 <quorem+0xf4>
	...

08016f58 <_dtoa_r>:
 8016f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f5c:	ed2d 8b02 	vpush	{d8}
 8016f60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016f62:	b091      	sub	sp, #68	; 0x44
 8016f64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016f68:	ec59 8b10 	vmov	r8, r9, d0
 8016f6c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8016f6e:	9106      	str	r1, [sp, #24]
 8016f70:	4606      	mov	r6, r0
 8016f72:	9208      	str	r2, [sp, #32]
 8016f74:	930c      	str	r3, [sp, #48]	; 0x30
 8016f76:	b975      	cbnz	r5, 8016f96 <_dtoa_r+0x3e>
 8016f78:	2010      	movs	r0, #16
 8016f7a:	f000 fe99 	bl	8017cb0 <malloc>
 8016f7e:	4602      	mov	r2, r0
 8016f80:	6270      	str	r0, [r6, #36]	; 0x24
 8016f82:	b920      	cbnz	r0, 8016f8e <_dtoa_r+0x36>
 8016f84:	4baa      	ldr	r3, [pc, #680]	; (8017230 <_dtoa_r+0x2d8>)
 8016f86:	21ea      	movs	r1, #234	; 0xea
 8016f88:	48aa      	ldr	r0, [pc, #680]	; (8017234 <_dtoa_r+0x2dc>)
 8016f8a:	f001 fd53 	bl	8018a34 <__assert_func>
 8016f8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016f92:	6005      	str	r5, [r0, #0]
 8016f94:	60c5      	str	r5, [r0, #12]
 8016f96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016f98:	6819      	ldr	r1, [r3, #0]
 8016f9a:	b151      	cbz	r1, 8016fb2 <_dtoa_r+0x5a>
 8016f9c:	685a      	ldr	r2, [r3, #4]
 8016f9e:	604a      	str	r2, [r1, #4]
 8016fa0:	2301      	movs	r3, #1
 8016fa2:	4093      	lsls	r3, r2
 8016fa4:	608b      	str	r3, [r1, #8]
 8016fa6:	4630      	mov	r0, r6
 8016fa8:	f000 fed6 	bl	8017d58 <_Bfree>
 8016fac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016fae:	2200      	movs	r2, #0
 8016fb0:	601a      	str	r2, [r3, #0]
 8016fb2:	f1b9 0300 	subs.w	r3, r9, #0
 8016fb6:	bfbb      	ittet	lt
 8016fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016fbc:	9303      	strlt	r3, [sp, #12]
 8016fbe:	2300      	movge	r3, #0
 8016fc0:	2201      	movlt	r2, #1
 8016fc2:	bfac      	ite	ge
 8016fc4:	6023      	strge	r3, [r4, #0]
 8016fc6:	6022      	strlt	r2, [r4, #0]
 8016fc8:	4b9b      	ldr	r3, [pc, #620]	; (8017238 <_dtoa_r+0x2e0>)
 8016fca:	9c03      	ldr	r4, [sp, #12]
 8016fcc:	43a3      	bics	r3, r4
 8016fce:	d11c      	bne.n	801700a <_dtoa_r+0xb2>
 8016fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016fd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8016fd6:	6013      	str	r3, [r2, #0]
 8016fd8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8016fdc:	ea53 0308 	orrs.w	r3, r3, r8
 8016fe0:	f000 84fd 	beq.w	80179de <_dtoa_r+0xa86>
 8016fe4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fe6:	b963      	cbnz	r3, 8017002 <_dtoa_r+0xaa>
 8016fe8:	4b94      	ldr	r3, [pc, #592]	; (801723c <_dtoa_r+0x2e4>)
 8016fea:	e01f      	b.n	801702c <_dtoa_r+0xd4>
 8016fec:	4b94      	ldr	r3, [pc, #592]	; (8017240 <_dtoa_r+0x2e8>)
 8016fee:	9301      	str	r3, [sp, #4]
 8016ff0:	3308      	adds	r3, #8
 8016ff2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016ff4:	6013      	str	r3, [r2, #0]
 8016ff6:	9801      	ldr	r0, [sp, #4]
 8016ff8:	b011      	add	sp, #68	; 0x44
 8016ffa:	ecbd 8b02 	vpop	{d8}
 8016ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017002:	4b8e      	ldr	r3, [pc, #568]	; (801723c <_dtoa_r+0x2e4>)
 8017004:	9301      	str	r3, [sp, #4]
 8017006:	3303      	adds	r3, #3
 8017008:	e7f3      	b.n	8016ff2 <_dtoa_r+0x9a>
 801700a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801700e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017016:	d10b      	bne.n	8017030 <_dtoa_r+0xd8>
 8017018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801701a:	2301      	movs	r3, #1
 801701c:	6013      	str	r3, [r2, #0]
 801701e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017020:	2b00      	cmp	r3, #0
 8017022:	f000 84d9 	beq.w	80179d8 <_dtoa_r+0xa80>
 8017026:	4887      	ldr	r0, [pc, #540]	; (8017244 <_dtoa_r+0x2ec>)
 8017028:	6018      	str	r0, [r3, #0]
 801702a:	1e43      	subs	r3, r0, #1
 801702c:	9301      	str	r3, [sp, #4]
 801702e:	e7e2      	b.n	8016ff6 <_dtoa_r+0x9e>
 8017030:	a90f      	add	r1, sp, #60	; 0x3c
 8017032:	aa0e      	add	r2, sp, #56	; 0x38
 8017034:	4630      	mov	r0, r6
 8017036:	eeb0 0b48 	vmov.f64	d0, d8
 801703a:	f001 f975 	bl	8018328 <__d2b>
 801703e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017042:	4605      	mov	r5, r0
 8017044:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017046:	2900      	cmp	r1, #0
 8017048:	d046      	beq.n	80170d8 <_dtoa_r+0x180>
 801704a:	ee18 4a90 	vmov	r4, s17
 801704e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017052:	ec53 2b18 	vmov	r2, r3, d8
 8017056:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801705a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801705e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017062:	2400      	movs	r4, #0
 8017064:	ec43 2b16 	vmov	d6, r2, r3
 8017068:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801706c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8017218 <_dtoa_r+0x2c0>
 8017070:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017074:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8017220 <_dtoa_r+0x2c8>
 8017078:	eea7 6b05 	vfma.f64	d6, d7, d5
 801707c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8017228 <_dtoa_r+0x2d0>
 8017080:	ee07 1a90 	vmov	s15, r1
 8017084:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8017088:	eeb0 7b46 	vmov.f64	d7, d6
 801708c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8017090:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017094:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801709c:	ee16 ba90 	vmov	fp, s13
 80170a0:	940a      	str	r4, [sp, #40]	; 0x28
 80170a2:	d508      	bpl.n	80170b6 <_dtoa_r+0x15e>
 80170a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80170a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80170ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170b0:	bf18      	it	ne
 80170b2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80170b6:	f1bb 0f16 	cmp.w	fp, #22
 80170ba:	d82f      	bhi.n	801711c <_dtoa_r+0x1c4>
 80170bc:	4b62      	ldr	r3, [pc, #392]	; (8017248 <_dtoa_r+0x2f0>)
 80170be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80170c2:	ed93 7b00 	vldr	d7, [r3]
 80170c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80170ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ce:	d501      	bpl.n	80170d4 <_dtoa_r+0x17c>
 80170d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80170d4:	2300      	movs	r3, #0
 80170d6:	e022      	b.n	801711e <_dtoa_r+0x1c6>
 80170d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80170da:	4401      	add	r1, r0
 80170dc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80170e0:	2b20      	cmp	r3, #32
 80170e2:	bfc1      	itttt	gt
 80170e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80170e8:	fa04 f303 	lslgt.w	r3, r4, r3
 80170ec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80170f0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80170f4:	bfd6      	itet	le
 80170f6:	f1c3 0320 	rsble	r3, r3, #32
 80170fa:	ea43 0808 	orrgt.w	r8, r3, r8
 80170fe:	fa08 f803 	lslle.w	r8, r8, r3
 8017102:	ee07 8a90 	vmov	s15, r8
 8017106:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801710a:	3901      	subs	r1, #1
 801710c:	ee17 4a90 	vmov	r4, s15
 8017110:	ec53 2b17 	vmov	r2, r3, d7
 8017114:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017118:	2401      	movs	r4, #1
 801711a:	e7a3      	b.n	8017064 <_dtoa_r+0x10c>
 801711c:	2301      	movs	r3, #1
 801711e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017120:	1a43      	subs	r3, r0, r1
 8017122:	1e5a      	subs	r2, r3, #1
 8017124:	bf45      	ittet	mi
 8017126:	f1c3 0301 	rsbmi	r3, r3, #1
 801712a:	9304      	strmi	r3, [sp, #16]
 801712c:	2300      	movpl	r3, #0
 801712e:	2300      	movmi	r3, #0
 8017130:	9205      	str	r2, [sp, #20]
 8017132:	bf54      	ite	pl
 8017134:	9304      	strpl	r3, [sp, #16]
 8017136:	9305      	strmi	r3, [sp, #20]
 8017138:	f1bb 0f00 	cmp.w	fp, #0
 801713c:	db18      	blt.n	8017170 <_dtoa_r+0x218>
 801713e:	9b05      	ldr	r3, [sp, #20]
 8017140:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017144:	445b      	add	r3, fp
 8017146:	9305      	str	r3, [sp, #20]
 8017148:	2300      	movs	r3, #0
 801714a:	9a06      	ldr	r2, [sp, #24]
 801714c:	2a09      	cmp	r2, #9
 801714e:	d849      	bhi.n	80171e4 <_dtoa_r+0x28c>
 8017150:	2a05      	cmp	r2, #5
 8017152:	bfc4      	itt	gt
 8017154:	3a04      	subgt	r2, #4
 8017156:	9206      	strgt	r2, [sp, #24]
 8017158:	9a06      	ldr	r2, [sp, #24]
 801715a:	f1a2 0202 	sub.w	r2, r2, #2
 801715e:	bfcc      	ite	gt
 8017160:	2400      	movgt	r4, #0
 8017162:	2401      	movle	r4, #1
 8017164:	2a03      	cmp	r2, #3
 8017166:	d848      	bhi.n	80171fa <_dtoa_r+0x2a2>
 8017168:	e8df f002 	tbb	[pc, r2]
 801716c:	3a2c2e0b 	.word	0x3a2c2e0b
 8017170:	9b04      	ldr	r3, [sp, #16]
 8017172:	2200      	movs	r2, #0
 8017174:	eba3 030b 	sub.w	r3, r3, fp
 8017178:	9304      	str	r3, [sp, #16]
 801717a:	9209      	str	r2, [sp, #36]	; 0x24
 801717c:	f1cb 0300 	rsb	r3, fp, #0
 8017180:	e7e3      	b.n	801714a <_dtoa_r+0x1f2>
 8017182:	2200      	movs	r2, #0
 8017184:	9207      	str	r2, [sp, #28]
 8017186:	9a08      	ldr	r2, [sp, #32]
 8017188:	2a00      	cmp	r2, #0
 801718a:	dc39      	bgt.n	8017200 <_dtoa_r+0x2a8>
 801718c:	f04f 0a01 	mov.w	sl, #1
 8017190:	46d1      	mov	r9, sl
 8017192:	4652      	mov	r2, sl
 8017194:	f8cd a020 	str.w	sl, [sp, #32]
 8017198:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801719a:	2100      	movs	r1, #0
 801719c:	6079      	str	r1, [r7, #4]
 801719e:	2004      	movs	r0, #4
 80171a0:	f100 0c14 	add.w	ip, r0, #20
 80171a4:	4594      	cmp	ip, r2
 80171a6:	6879      	ldr	r1, [r7, #4]
 80171a8:	d92f      	bls.n	801720a <_dtoa_r+0x2b2>
 80171aa:	4630      	mov	r0, r6
 80171ac:	930d      	str	r3, [sp, #52]	; 0x34
 80171ae:	f000 fd93 	bl	8017cd8 <_Balloc>
 80171b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171b4:	9001      	str	r0, [sp, #4]
 80171b6:	4602      	mov	r2, r0
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d149      	bne.n	8017250 <_dtoa_r+0x2f8>
 80171bc:	4b23      	ldr	r3, [pc, #140]	; (801724c <_dtoa_r+0x2f4>)
 80171be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80171c2:	e6e1      	b.n	8016f88 <_dtoa_r+0x30>
 80171c4:	2201      	movs	r2, #1
 80171c6:	e7dd      	b.n	8017184 <_dtoa_r+0x22c>
 80171c8:	2200      	movs	r2, #0
 80171ca:	9207      	str	r2, [sp, #28]
 80171cc:	9a08      	ldr	r2, [sp, #32]
 80171ce:	eb0b 0a02 	add.w	sl, fp, r2
 80171d2:	f10a 0901 	add.w	r9, sl, #1
 80171d6:	464a      	mov	r2, r9
 80171d8:	2a01      	cmp	r2, #1
 80171da:	bfb8      	it	lt
 80171dc:	2201      	movlt	r2, #1
 80171de:	e7db      	b.n	8017198 <_dtoa_r+0x240>
 80171e0:	2201      	movs	r2, #1
 80171e2:	e7f2      	b.n	80171ca <_dtoa_r+0x272>
 80171e4:	2401      	movs	r4, #1
 80171e6:	2200      	movs	r2, #0
 80171e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80171ec:	f04f 3aff 	mov.w	sl, #4294967295
 80171f0:	2100      	movs	r1, #0
 80171f2:	46d1      	mov	r9, sl
 80171f4:	2212      	movs	r2, #18
 80171f6:	9108      	str	r1, [sp, #32]
 80171f8:	e7ce      	b.n	8017198 <_dtoa_r+0x240>
 80171fa:	2201      	movs	r2, #1
 80171fc:	9207      	str	r2, [sp, #28]
 80171fe:	e7f5      	b.n	80171ec <_dtoa_r+0x294>
 8017200:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017204:	46d1      	mov	r9, sl
 8017206:	4652      	mov	r2, sl
 8017208:	e7c6      	b.n	8017198 <_dtoa_r+0x240>
 801720a:	3101      	adds	r1, #1
 801720c:	6079      	str	r1, [r7, #4]
 801720e:	0040      	lsls	r0, r0, #1
 8017210:	e7c6      	b.n	80171a0 <_dtoa_r+0x248>
 8017212:	bf00      	nop
 8017214:	f3af 8000 	nop.w
 8017218:	636f4361 	.word	0x636f4361
 801721c:	3fd287a7 	.word	0x3fd287a7
 8017220:	8b60c8b3 	.word	0x8b60c8b3
 8017224:	3fc68a28 	.word	0x3fc68a28
 8017228:	509f79fb 	.word	0x509f79fb
 801722c:	3fd34413 	.word	0x3fd34413
 8017230:	080196a1 	.word	0x080196a1
 8017234:	080196b8 	.word	0x080196b8
 8017238:	7ff00000 	.word	0x7ff00000
 801723c:	0801969d 	.word	0x0801969d
 8017240:	08019694 	.word	0x08019694
 8017244:	08019671 	.word	0x08019671
 8017248:	080197a8 	.word	0x080197a8
 801724c:	08019713 	.word	0x08019713
 8017250:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017252:	9901      	ldr	r1, [sp, #4]
 8017254:	6011      	str	r1, [r2, #0]
 8017256:	f1b9 0f0e 	cmp.w	r9, #14
 801725a:	d86c      	bhi.n	8017336 <_dtoa_r+0x3de>
 801725c:	2c00      	cmp	r4, #0
 801725e:	d06a      	beq.n	8017336 <_dtoa_r+0x3de>
 8017260:	f1bb 0f00 	cmp.w	fp, #0
 8017264:	f340 80a0 	ble.w	80173a8 <_dtoa_r+0x450>
 8017268:	49c1      	ldr	r1, [pc, #772]	; (8017570 <_dtoa_r+0x618>)
 801726a:	f00b 020f 	and.w	r2, fp, #15
 801726e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8017272:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017276:	ed92 7b00 	vldr	d7, [r2]
 801727a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801727e:	f000 8087 	beq.w	8017390 <_dtoa_r+0x438>
 8017282:	4abc      	ldr	r2, [pc, #752]	; (8017574 <_dtoa_r+0x61c>)
 8017284:	ed92 6b08 	vldr	d6, [r2, #32]
 8017288:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801728c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017290:	f001 010f 	and.w	r1, r1, #15
 8017294:	2203      	movs	r2, #3
 8017296:	48b7      	ldr	r0, [pc, #732]	; (8017574 <_dtoa_r+0x61c>)
 8017298:	2900      	cmp	r1, #0
 801729a:	d17b      	bne.n	8017394 <_dtoa_r+0x43c>
 801729c:	ed9d 6b02 	vldr	d6, [sp, #8]
 80172a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80172a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80172a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80172aa:	2900      	cmp	r1, #0
 80172ac:	f000 80a2 	beq.w	80173f4 <_dtoa_r+0x49c>
 80172b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80172b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80172b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80172bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172c0:	f140 8098 	bpl.w	80173f4 <_dtoa_r+0x49c>
 80172c4:	f1b9 0f00 	cmp.w	r9, #0
 80172c8:	f000 8094 	beq.w	80173f4 <_dtoa_r+0x49c>
 80172cc:	f1ba 0f00 	cmp.w	sl, #0
 80172d0:	dd2f      	ble.n	8017332 <_dtoa_r+0x3da>
 80172d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80172d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80172da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80172de:	f10b 37ff 	add.w	r7, fp, #4294967295
 80172e2:	3201      	adds	r2, #1
 80172e4:	4650      	mov	r0, sl
 80172e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80172ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80172ee:	ee07 2a90 	vmov	s15, r2
 80172f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80172f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80172fa:	ee15 4a90 	vmov	r4, s11
 80172fe:	ec52 1b15 	vmov	r1, r2, d5
 8017302:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8017306:	2800      	cmp	r0, #0
 8017308:	d177      	bne.n	80173fa <_dtoa_r+0x4a2>
 801730a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801730e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017312:	ec42 1b17 	vmov	d7, r1, r2
 8017316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801731e:	f300 8263 	bgt.w	80177e8 <_dtoa_r+0x890>
 8017322:	eeb1 7b47 	vneg.f64	d7, d7
 8017326:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801732e:	f100 8258 	bmi.w	80177e2 <_dtoa_r+0x88a>
 8017332:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017338:	2a00      	cmp	r2, #0
 801733a:	f2c0 811d 	blt.w	8017578 <_dtoa_r+0x620>
 801733e:	f1bb 0f0e 	cmp.w	fp, #14
 8017342:	f300 8119 	bgt.w	8017578 <_dtoa_r+0x620>
 8017346:	4b8a      	ldr	r3, [pc, #552]	; (8017570 <_dtoa_r+0x618>)
 8017348:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801734c:	ed93 6b00 	vldr	d6, [r3]
 8017350:	9b08      	ldr	r3, [sp, #32]
 8017352:	2b00      	cmp	r3, #0
 8017354:	f280 80b7 	bge.w	80174c6 <_dtoa_r+0x56e>
 8017358:	f1b9 0f00 	cmp.w	r9, #0
 801735c:	f300 80b3 	bgt.w	80174c6 <_dtoa_r+0x56e>
 8017360:	f040 823f 	bne.w	80177e2 <_dtoa_r+0x88a>
 8017364:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017368:	ee26 6b07 	vmul.f64	d6, d6, d7
 801736c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017370:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017378:	464c      	mov	r4, r9
 801737a:	464f      	mov	r7, r9
 801737c:	f280 8215 	bge.w	80177aa <_dtoa_r+0x852>
 8017380:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017384:	2331      	movs	r3, #49	; 0x31
 8017386:	f808 3b01 	strb.w	r3, [r8], #1
 801738a:	f10b 0b01 	add.w	fp, fp, #1
 801738e:	e211      	b.n	80177b4 <_dtoa_r+0x85c>
 8017390:	2202      	movs	r2, #2
 8017392:	e780      	b.n	8017296 <_dtoa_r+0x33e>
 8017394:	07cc      	lsls	r4, r1, #31
 8017396:	d504      	bpl.n	80173a2 <_dtoa_r+0x44a>
 8017398:	ed90 6b00 	vldr	d6, [r0]
 801739c:	3201      	adds	r2, #1
 801739e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80173a2:	1049      	asrs	r1, r1, #1
 80173a4:	3008      	adds	r0, #8
 80173a6:	e777      	b.n	8017298 <_dtoa_r+0x340>
 80173a8:	d022      	beq.n	80173f0 <_dtoa_r+0x498>
 80173aa:	f1cb 0100 	rsb	r1, fp, #0
 80173ae:	4a70      	ldr	r2, [pc, #448]	; (8017570 <_dtoa_r+0x618>)
 80173b0:	f001 000f 	and.w	r0, r1, #15
 80173b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80173b8:	ed92 7b00 	vldr	d7, [r2]
 80173bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80173c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80173c4:	486b      	ldr	r0, [pc, #428]	; (8017574 <_dtoa_r+0x61c>)
 80173c6:	1109      	asrs	r1, r1, #4
 80173c8:	2400      	movs	r4, #0
 80173ca:	2202      	movs	r2, #2
 80173cc:	b929      	cbnz	r1, 80173da <_dtoa_r+0x482>
 80173ce:	2c00      	cmp	r4, #0
 80173d0:	f43f af6a 	beq.w	80172a8 <_dtoa_r+0x350>
 80173d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80173d8:	e766      	b.n	80172a8 <_dtoa_r+0x350>
 80173da:	07cf      	lsls	r7, r1, #31
 80173dc:	d505      	bpl.n	80173ea <_dtoa_r+0x492>
 80173de:	ed90 6b00 	vldr	d6, [r0]
 80173e2:	3201      	adds	r2, #1
 80173e4:	2401      	movs	r4, #1
 80173e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80173ea:	1049      	asrs	r1, r1, #1
 80173ec:	3008      	adds	r0, #8
 80173ee:	e7ed      	b.n	80173cc <_dtoa_r+0x474>
 80173f0:	2202      	movs	r2, #2
 80173f2:	e759      	b.n	80172a8 <_dtoa_r+0x350>
 80173f4:	465f      	mov	r7, fp
 80173f6:	4648      	mov	r0, r9
 80173f8:	e775      	b.n	80172e6 <_dtoa_r+0x38e>
 80173fa:	ec42 1b17 	vmov	d7, r1, r2
 80173fe:	4a5c      	ldr	r2, [pc, #368]	; (8017570 <_dtoa_r+0x618>)
 8017400:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017404:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017408:	9a01      	ldr	r2, [sp, #4]
 801740a:	1814      	adds	r4, r2, r0
 801740c:	9a07      	ldr	r2, [sp, #28]
 801740e:	b352      	cbz	r2, 8017466 <_dtoa_r+0x50e>
 8017410:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017414:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017418:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801741c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8017420:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017424:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017428:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801742c:	ee14 2a90 	vmov	r2, s9
 8017430:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017434:	3230      	adds	r2, #48	; 0x30
 8017436:	ee36 6b45 	vsub.f64	d6, d6, d5
 801743a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017442:	f808 2b01 	strb.w	r2, [r8], #1
 8017446:	d439      	bmi.n	80174bc <_dtoa_r+0x564>
 8017448:	ee32 5b46 	vsub.f64	d5, d2, d6
 801744c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8017450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017454:	d472      	bmi.n	801753c <_dtoa_r+0x5e4>
 8017456:	45a0      	cmp	r8, r4
 8017458:	f43f af6b 	beq.w	8017332 <_dtoa_r+0x3da>
 801745c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8017460:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017464:	e7e0      	b.n	8017428 <_dtoa_r+0x4d0>
 8017466:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801746a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801746e:	4621      	mov	r1, r4
 8017470:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017474:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017478:	ee14 2a90 	vmov	r2, s9
 801747c:	3230      	adds	r2, #48	; 0x30
 801747e:	f808 2b01 	strb.w	r2, [r8], #1
 8017482:	45a0      	cmp	r8, r4
 8017484:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017488:	ee36 6b45 	vsub.f64	d6, d6, d5
 801748c:	d118      	bne.n	80174c0 <_dtoa_r+0x568>
 801748e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8017492:	ee37 4b05 	vadd.f64	d4, d7, d5
 8017496:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801749e:	dc4d      	bgt.n	801753c <_dtoa_r+0x5e4>
 80174a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80174a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80174a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ac:	f57f af41 	bpl.w	8017332 <_dtoa_r+0x3da>
 80174b0:	4688      	mov	r8, r1
 80174b2:	3901      	subs	r1, #1
 80174b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80174b8:	2b30      	cmp	r3, #48	; 0x30
 80174ba:	d0f9      	beq.n	80174b0 <_dtoa_r+0x558>
 80174bc:	46bb      	mov	fp, r7
 80174be:	e02a      	b.n	8017516 <_dtoa_r+0x5be>
 80174c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80174c4:	e7d6      	b.n	8017474 <_dtoa_r+0x51c>
 80174c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80174ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80174ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80174d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80174d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80174da:	ee15 3a10 	vmov	r3, s10
 80174de:	3330      	adds	r3, #48	; 0x30
 80174e0:	f808 3b01 	strb.w	r3, [r8], #1
 80174e4:	9b01      	ldr	r3, [sp, #4]
 80174e6:	eba8 0303 	sub.w	r3, r8, r3
 80174ea:	4599      	cmp	r9, r3
 80174ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80174f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80174f4:	d133      	bne.n	801755e <_dtoa_r+0x606>
 80174f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80174fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80174fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017502:	dc1a      	bgt.n	801753a <_dtoa_r+0x5e2>
 8017504:	eeb4 7b46 	vcmp.f64	d7, d6
 8017508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801750c:	d103      	bne.n	8017516 <_dtoa_r+0x5be>
 801750e:	ee15 3a10 	vmov	r3, s10
 8017512:	07d9      	lsls	r1, r3, #31
 8017514:	d411      	bmi.n	801753a <_dtoa_r+0x5e2>
 8017516:	4629      	mov	r1, r5
 8017518:	4630      	mov	r0, r6
 801751a:	f000 fc1d 	bl	8017d58 <_Bfree>
 801751e:	2300      	movs	r3, #0
 8017520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017522:	f888 3000 	strb.w	r3, [r8]
 8017526:	f10b 0301 	add.w	r3, fp, #1
 801752a:	6013      	str	r3, [r2, #0]
 801752c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801752e:	2b00      	cmp	r3, #0
 8017530:	f43f ad61 	beq.w	8016ff6 <_dtoa_r+0x9e>
 8017534:	f8c3 8000 	str.w	r8, [r3]
 8017538:	e55d      	b.n	8016ff6 <_dtoa_r+0x9e>
 801753a:	465f      	mov	r7, fp
 801753c:	4643      	mov	r3, r8
 801753e:	4698      	mov	r8, r3
 8017540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017544:	2a39      	cmp	r2, #57	; 0x39
 8017546:	d106      	bne.n	8017556 <_dtoa_r+0x5fe>
 8017548:	9a01      	ldr	r2, [sp, #4]
 801754a:	429a      	cmp	r2, r3
 801754c:	d1f7      	bne.n	801753e <_dtoa_r+0x5e6>
 801754e:	9901      	ldr	r1, [sp, #4]
 8017550:	2230      	movs	r2, #48	; 0x30
 8017552:	3701      	adds	r7, #1
 8017554:	700a      	strb	r2, [r1, #0]
 8017556:	781a      	ldrb	r2, [r3, #0]
 8017558:	3201      	adds	r2, #1
 801755a:	701a      	strb	r2, [r3, #0]
 801755c:	e7ae      	b.n	80174bc <_dtoa_r+0x564>
 801755e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756a:	d1b2      	bne.n	80174d2 <_dtoa_r+0x57a>
 801756c:	e7d3      	b.n	8017516 <_dtoa_r+0x5be>
 801756e:	bf00      	nop
 8017570:	080197a8 	.word	0x080197a8
 8017574:	08019780 	.word	0x08019780
 8017578:	9907      	ldr	r1, [sp, #28]
 801757a:	2900      	cmp	r1, #0
 801757c:	f000 80d0 	beq.w	8017720 <_dtoa_r+0x7c8>
 8017580:	9906      	ldr	r1, [sp, #24]
 8017582:	2901      	cmp	r1, #1
 8017584:	f300 80b4 	bgt.w	80176f0 <_dtoa_r+0x798>
 8017588:	990a      	ldr	r1, [sp, #40]	; 0x28
 801758a:	2900      	cmp	r1, #0
 801758c:	f000 80ac 	beq.w	80176e8 <_dtoa_r+0x790>
 8017590:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017594:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017598:	461c      	mov	r4, r3
 801759a:	930a      	str	r3, [sp, #40]	; 0x28
 801759c:	9b04      	ldr	r3, [sp, #16]
 801759e:	4413      	add	r3, r2
 80175a0:	9304      	str	r3, [sp, #16]
 80175a2:	9b05      	ldr	r3, [sp, #20]
 80175a4:	2101      	movs	r1, #1
 80175a6:	4413      	add	r3, r2
 80175a8:	4630      	mov	r0, r6
 80175aa:	9305      	str	r3, [sp, #20]
 80175ac:	f000 fc8c 	bl	8017ec8 <__i2b>
 80175b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175b2:	4607      	mov	r7, r0
 80175b4:	f1b8 0f00 	cmp.w	r8, #0
 80175b8:	dd0d      	ble.n	80175d6 <_dtoa_r+0x67e>
 80175ba:	9a05      	ldr	r2, [sp, #20]
 80175bc:	2a00      	cmp	r2, #0
 80175be:	dd0a      	ble.n	80175d6 <_dtoa_r+0x67e>
 80175c0:	4542      	cmp	r2, r8
 80175c2:	9904      	ldr	r1, [sp, #16]
 80175c4:	bfa8      	it	ge
 80175c6:	4642      	movge	r2, r8
 80175c8:	1a89      	subs	r1, r1, r2
 80175ca:	9104      	str	r1, [sp, #16]
 80175cc:	9905      	ldr	r1, [sp, #20]
 80175ce:	eba8 0802 	sub.w	r8, r8, r2
 80175d2:	1a8a      	subs	r2, r1, r2
 80175d4:	9205      	str	r2, [sp, #20]
 80175d6:	b303      	cbz	r3, 801761a <_dtoa_r+0x6c2>
 80175d8:	9a07      	ldr	r2, [sp, #28]
 80175da:	2a00      	cmp	r2, #0
 80175dc:	f000 80a5 	beq.w	801772a <_dtoa_r+0x7d2>
 80175e0:	2c00      	cmp	r4, #0
 80175e2:	dd13      	ble.n	801760c <_dtoa_r+0x6b4>
 80175e4:	4639      	mov	r1, r7
 80175e6:	4622      	mov	r2, r4
 80175e8:	4630      	mov	r0, r6
 80175ea:	930d      	str	r3, [sp, #52]	; 0x34
 80175ec:	f000 fd2c 	bl	8018048 <__pow5mult>
 80175f0:	462a      	mov	r2, r5
 80175f2:	4601      	mov	r1, r0
 80175f4:	4607      	mov	r7, r0
 80175f6:	4630      	mov	r0, r6
 80175f8:	f000 fc7c 	bl	8017ef4 <__multiply>
 80175fc:	4629      	mov	r1, r5
 80175fe:	900a      	str	r0, [sp, #40]	; 0x28
 8017600:	4630      	mov	r0, r6
 8017602:	f000 fba9 	bl	8017d58 <_Bfree>
 8017606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801760a:	4615      	mov	r5, r2
 801760c:	1b1a      	subs	r2, r3, r4
 801760e:	d004      	beq.n	801761a <_dtoa_r+0x6c2>
 8017610:	4629      	mov	r1, r5
 8017612:	4630      	mov	r0, r6
 8017614:	f000 fd18 	bl	8018048 <__pow5mult>
 8017618:	4605      	mov	r5, r0
 801761a:	2101      	movs	r1, #1
 801761c:	4630      	mov	r0, r6
 801761e:	f000 fc53 	bl	8017ec8 <__i2b>
 8017622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017624:	2b00      	cmp	r3, #0
 8017626:	4604      	mov	r4, r0
 8017628:	f340 8081 	ble.w	801772e <_dtoa_r+0x7d6>
 801762c:	461a      	mov	r2, r3
 801762e:	4601      	mov	r1, r0
 8017630:	4630      	mov	r0, r6
 8017632:	f000 fd09 	bl	8018048 <__pow5mult>
 8017636:	9b06      	ldr	r3, [sp, #24]
 8017638:	2b01      	cmp	r3, #1
 801763a:	4604      	mov	r4, r0
 801763c:	dd7a      	ble.n	8017734 <_dtoa_r+0x7dc>
 801763e:	2300      	movs	r3, #0
 8017640:	930a      	str	r3, [sp, #40]	; 0x28
 8017642:	6922      	ldr	r2, [r4, #16]
 8017644:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017648:	6910      	ldr	r0, [r2, #16]
 801764a:	f000 fbed 	bl	8017e28 <__hi0bits>
 801764e:	f1c0 0020 	rsb	r0, r0, #32
 8017652:	9b05      	ldr	r3, [sp, #20]
 8017654:	4418      	add	r0, r3
 8017656:	f010 001f 	ands.w	r0, r0, #31
 801765a:	f000 808c 	beq.w	8017776 <_dtoa_r+0x81e>
 801765e:	f1c0 0220 	rsb	r2, r0, #32
 8017662:	2a04      	cmp	r2, #4
 8017664:	f340 8085 	ble.w	8017772 <_dtoa_r+0x81a>
 8017668:	f1c0 001c 	rsb	r0, r0, #28
 801766c:	9b04      	ldr	r3, [sp, #16]
 801766e:	4403      	add	r3, r0
 8017670:	9304      	str	r3, [sp, #16]
 8017672:	9b05      	ldr	r3, [sp, #20]
 8017674:	4403      	add	r3, r0
 8017676:	4480      	add	r8, r0
 8017678:	9305      	str	r3, [sp, #20]
 801767a:	9b04      	ldr	r3, [sp, #16]
 801767c:	2b00      	cmp	r3, #0
 801767e:	dd05      	ble.n	801768c <_dtoa_r+0x734>
 8017680:	4629      	mov	r1, r5
 8017682:	461a      	mov	r2, r3
 8017684:	4630      	mov	r0, r6
 8017686:	f000 fd39 	bl	80180fc <__lshift>
 801768a:	4605      	mov	r5, r0
 801768c:	9b05      	ldr	r3, [sp, #20]
 801768e:	2b00      	cmp	r3, #0
 8017690:	dd05      	ble.n	801769e <_dtoa_r+0x746>
 8017692:	4621      	mov	r1, r4
 8017694:	461a      	mov	r2, r3
 8017696:	4630      	mov	r0, r6
 8017698:	f000 fd30 	bl	80180fc <__lshift>
 801769c:	4604      	mov	r4, r0
 801769e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d06a      	beq.n	801777a <_dtoa_r+0x822>
 80176a4:	4621      	mov	r1, r4
 80176a6:	4628      	mov	r0, r5
 80176a8:	f000 fd98 	bl	80181dc <__mcmp>
 80176ac:	2800      	cmp	r0, #0
 80176ae:	da64      	bge.n	801777a <_dtoa_r+0x822>
 80176b0:	2300      	movs	r3, #0
 80176b2:	4629      	mov	r1, r5
 80176b4:	220a      	movs	r2, #10
 80176b6:	4630      	mov	r0, r6
 80176b8:	f000 fb70 	bl	8017d9c <__multadd>
 80176bc:	9b07      	ldr	r3, [sp, #28]
 80176be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80176c2:	4605      	mov	r5, r0
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f000 8191 	beq.w	80179ec <_dtoa_r+0xa94>
 80176ca:	4639      	mov	r1, r7
 80176cc:	2300      	movs	r3, #0
 80176ce:	220a      	movs	r2, #10
 80176d0:	4630      	mov	r0, r6
 80176d2:	f000 fb63 	bl	8017d9c <__multadd>
 80176d6:	f1ba 0f00 	cmp.w	sl, #0
 80176da:	4607      	mov	r7, r0
 80176dc:	f300 808d 	bgt.w	80177fa <_dtoa_r+0x8a2>
 80176e0:	9b06      	ldr	r3, [sp, #24]
 80176e2:	2b02      	cmp	r3, #2
 80176e4:	dc50      	bgt.n	8017788 <_dtoa_r+0x830>
 80176e6:	e088      	b.n	80177fa <_dtoa_r+0x8a2>
 80176e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80176ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80176ee:	e751      	b.n	8017594 <_dtoa_r+0x63c>
 80176f0:	f109 34ff 	add.w	r4, r9, #4294967295
 80176f4:	42a3      	cmp	r3, r4
 80176f6:	bfbf      	itttt	lt
 80176f8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80176fa:	1ae3      	sublt	r3, r4, r3
 80176fc:	18d2      	addlt	r2, r2, r3
 80176fe:	9209      	strlt	r2, [sp, #36]	; 0x24
 8017700:	bfb6      	itet	lt
 8017702:	4623      	movlt	r3, r4
 8017704:	1b1c      	subge	r4, r3, r4
 8017706:	2400      	movlt	r4, #0
 8017708:	f1b9 0f00 	cmp.w	r9, #0
 801770c:	bfb5      	itete	lt
 801770e:	9a04      	ldrlt	r2, [sp, #16]
 8017710:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8017714:	eba2 0809 	sublt.w	r8, r2, r9
 8017718:	464a      	movge	r2, r9
 801771a:	bfb8      	it	lt
 801771c:	2200      	movlt	r2, #0
 801771e:	e73c      	b.n	801759a <_dtoa_r+0x642>
 8017720:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017724:	9f07      	ldr	r7, [sp, #28]
 8017726:	461c      	mov	r4, r3
 8017728:	e744      	b.n	80175b4 <_dtoa_r+0x65c>
 801772a:	461a      	mov	r2, r3
 801772c:	e770      	b.n	8017610 <_dtoa_r+0x6b8>
 801772e:	9b06      	ldr	r3, [sp, #24]
 8017730:	2b01      	cmp	r3, #1
 8017732:	dc18      	bgt.n	8017766 <_dtoa_r+0x80e>
 8017734:	9b02      	ldr	r3, [sp, #8]
 8017736:	b9b3      	cbnz	r3, 8017766 <_dtoa_r+0x80e>
 8017738:	9b03      	ldr	r3, [sp, #12]
 801773a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801773e:	b9a2      	cbnz	r2, 801776a <_dtoa_r+0x812>
 8017740:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017744:	0d12      	lsrs	r2, r2, #20
 8017746:	0512      	lsls	r2, r2, #20
 8017748:	b18a      	cbz	r2, 801776e <_dtoa_r+0x816>
 801774a:	9b04      	ldr	r3, [sp, #16]
 801774c:	3301      	adds	r3, #1
 801774e:	9304      	str	r3, [sp, #16]
 8017750:	9b05      	ldr	r3, [sp, #20]
 8017752:	3301      	adds	r3, #1
 8017754:	9305      	str	r3, [sp, #20]
 8017756:	2301      	movs	r3, #1
 8017758:	930a      	str	r3, [sp, #40]	; 0x28
 801775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801775c:	2b00      	cmp	r3, #0
 801775e:	f47f af70 	bne.w	8017642 <_dtoa_r+0x6ea>
 8017762:	2001      	movs	r0, #1
 8017764:	e775      	b.n	8017652 <_dtoa_r+0x6fa>
 8017766:	2300      	movs	r3, #0
 8017768:	e7f6      	b.n	8017758 <_dtoa_r+0x800>
 801776a:	9b02      	ldr	r3, [sp, #8]
 801776c:	e7f4      	b.n	8017758 <_dtoa_r+0x800>
 801776e:	920a      	str	r2, [sp, #40]	; 0x28
 8017770:	e7f3      	b.n	801775a <_dtoa_r+0x802>
 8017772:	d082      	beq.n	801767a <_dtoa_r+0x722>
 8017774:	4610      	mov	r0, r2
 8017776:	301c      	adds	r0, #28
 8017778:	e778      	b.n	801766c <_dtoa_r+0x714>
 801777a:	f1b9 0f00 	cmp.w	r9, #0
 801777e:	dc37      	bgt.n	80177f0 <_dtoa_r+0x898>
 8017780:	9b06      	ldr	r3, [sp, #24]
 8017782:	2b02      	cmp	r3, #2
 8017784:	dd34      	ble.n	80177f0 <_dtoa_r+0x898>
 8017786:	46ca      	mov	sl, r9
 8017788:	f1ba 0f00 	cmp.w	sl, #0
 801778c:	d10d      	bne.n	80177aa <_dtoa_r+0x852>
 801778e:	4621      	mov	r1, r4
 8017790:	4653      	mov	r3, sl
 8017792:	2205      	movs	r2, #5
 8017794:	4630      	mov	r0, r6
 8017796:	f000 fb01 	bl	8017d9c <__multadd>
 801779a:	4601      	mov	r1, r0
 801779c:	4604      	mov	r4, r0
 801779e:	4628      	mov	r0, r5
 80177a0:	f000 fd1c 	bl	80181dc <__mcmp>
 80177a4:	2800      	cmp	r0, #0
 80177a6:	f73f adeb 	bgt.w	8017380 <_dtoa_r+0x428>
 80177aa:	9b08      	ldr	r3, [sp, #32]
 80177ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80177b0:	ea6f 0b03 	mvn.w	fp, r3
 80177b4:	f04f 0900 	mov.w	r9, #0
 80177b8:	4621      	mov	r1, r4
 80177ba:	4630      	mov	r0, r6
 80177bc:	f000 facc 	bl	8017d58 <_Bfree>
 80177c0:	2f00      	cmp	r7, #0
 80177c2:	f43f aea8 	beq.w	8017516 <_dtoa_r+0x5be>
 80177c6:	f1b9 0f00 	cmp.w	r9, #0
 80177ca:	d005      	beq.n	80177d8 <_dtoa_r+0x880>
 80177cc:	45b9      	cmp	r9, r7
 80177ce:	d003      	beq.n	80177d8 <_dtoa_r+0x880>
 80177d0:	4649      	mov	r1, r9
 80177d2:	4630      	mov	r0, r6
 80177d4:	f000 fac0 	bl	8017d58 <_Bfree>
 80177d8:	4639      	mov	r1, r7
 80177da:	4630      	mov	r0, r6
 80177dc:	f000 fabc 	bl	8017d58 <_Bfree>
 80177e0:	e699      	b.n	8017516 <_dtoa_r+0x5be>
 80177e2:	2400      	movs	r4, #0
 80177e4:	4627      	mov	r7, r4
 80177e6:	e7e0      	b.n	80177aa <_dtoa_r+0x852>
 80177e8:	46bb      	mov	fp, r7
 80177ea:	4604      	mov	r4, r0
 80177ec:	4607      	mov	r7, r0
 80177ee:	e5c7      	b.n	8017380 <_dtoa_r+0x428>
 80177f0:	9b07      	ldr	r3, [sp, #28]
 80177f2:	46ca      	mov	sl, r9
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	f000 8100 	beq.w	80179fa <_dtoa_r+0xaa2>
 80177fa:	f1b8 0f00 	cmp.w	r8, #0
 80177fe:	dd05      	ble.n	801780c <_dtoa_r+0x8b4>
 8017800:	4639      	mov	r1, r7
 8017802:	4642      	mov	r2, r8
 8017804:	4630      	mov	r0, r6
 8017806:	f000 fc79 	bl	80180fc <__lshift>
 801780a:	4607      	mov	r7, r0
 801780c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801780e:	2b00      	cmp	r3, #0
 8017810:	d05d      	beq.n	80178ce <_dtoa_r+0x976>
 8017812:	6879      	ldr	r1, [r7, #4]
 8017814:	4630      	mov	r0, r6
 8017816:	f000 fa5f 	bl	8017cd8 <_Balloc>
 801781a:	4680      	mov	r8, r0
 801781c:	b928      	cbnz	r0, 801782a <_dtoa_r+0x8d2>
 801781e:	4b82      	ldr	r3, [pc, #520]	; (8017a28 <_dtoa_r+0xad0>)
 8017820:	4602      	mov	r2, r0
 8017822:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017826:	f7ff bbaf 	b.w	8016f88 <_dtoa_r+0x30>
 801782a:	693a      	ldr	r2, [r7, #16]
 801782c:	3202      	adds	r2, #2
 801782e:	0092      	lsls	r2, r2, #2
 8017830:	f107 010c 	add.w	r1, r7, #12
 8017834:	300c      	adds	r0, #12
 8017836:	f7fe fba9 	bl	8015f8c <memcpy>
 801783a:	2201      	movs	r2, #1
 801783c:	4641      	mov	r1, r8
 801783e:	4630      	mov	r0, r6
 8017840:	f000 fc5c 	bl	80180fc <__lshift>
 8017844:	9b01      	ldr	r3, [sp, #4]
 8017846:	3301      	adds	r3, #1
 8017848:	9304      	str	r3, [sp, #16]
 801784a:	9b01      	ldr	r3, [sp, #4]
 801784c:	4453      	add	r3, sl
 801784e:	9308      	str	r3, [sp, #32]
 8017850:	9b02      	ldr	r3, [sp, #8]
 8017852:	f003 0301 	and.w	r3, r3, #1
 8017856:	46b9      	mov	r9, r7
 8017858:	9307      	str	r3, [sp, #28]
 801785a:	4607      	mov	r7, r0
 801785c:	9b04      	ldr	r3, [sp, #16]
 801785e:	4621      	mov	r1, r4
 8017860:	3b01      	subs	r3, #1
 8017862:	4628      	mov	r0, r5
 8017864:	9302      	str	r3, [sp, #8]
 8017866:	f7ff faeb 	bl	8016e40 <quorem>
 801786a:	4603      	mov	r3, r0
 801786c:	3330      	adds	r3, #48	; 0x30
 801786e:	9005      	str	r0, [sp, #20]
 8017870:	4649      	mov	r1, r9
 8017872:	4628      	mov	r0, r5
 8017874:	9309      	str	r3, [sp, #36]	; 0x24
 8017876:	f000 fcb1 	bl	80181dc <__mcmp>
 801787a:	463a      	mov	r2, r7
 801787c:	4682      	mov	sl, r0
 801787e:	4621      	mov	r1, r4
 8017880:	4630      	mov	r0, r6
 8017882:	f000 fcc7 	bl	8018214 <__mdiff>
 8017886:	68c2      	ldr	r2, [r0, #12]
 8017888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801788a:	4680      	mov	r8, r0
 801788c:	bb0a      	cbnz	r2, 80178d2 <_dtoa_r+0x97a>
 801788e:	4601      	mov	r1, r0
 8017890:	4628      	mov	r0, r5
 8017892:	f000 fca3 	bl	80181dc <__mcmp>
 8017896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017898:	4602      	mov	r2, r0
 801789a:	4641      	mov	r1, r8
 801789c:	4630      	mov	r0, r6
 801789e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80178a2:	f000 fa59 	bl	8017d58 <_Bfree>
 80178a6:	9b06      	ldr	r3, [sp, #24]
 80178a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178aa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80178ae:	ea43 0102 	orr.w	r1, r3, r2
 80178b2:	9b07      	ldr	r3, [sp, #28]
 80178b4:	430b      	orrs	r3, r1
 80178b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178b8:	d10d      	bne.n	80178d6 <_dtoa_r+0x97e>
 80178ba:	2b39      	cmp	r3, #57	; 0x39
 80178bc:	d029      	beq.n	8017912 <_dtoa_r+0x9ba>
 80178be:	f1ba 0f00 	cmp.w	sl, #0
 80178c2:	dd01      	ble.n	80178c8 <_dtoa_r+0x970>
 80178c4:	9b05      	ldr	r3, [sp, #20]
 80178c6:	3331      	adds	r3, #49	; 0x31
 80178c8:	9a02      	ldr	r2, [sp, #8]
 80178ca:	7013      	strb	r3, [r2, #0]
 80178cc:	e774      	b.n	80177b8 <_dtoa_r+0x860>
 80178ce:	4638      	mov	r0, r7
 80178d0:	e7b8      	b.n	8017844 <_dtoa_r+0x8ec>
 80178d2:	2201      	movs	r2, #1
 80178d4:	e7e1      	b.n	801789a <_dtoa_r+0x942>
 80178d6:	f1ba 0f00 	cmp.w	sl, #0
 80178da:	db06      	blt.n	80178ea <_dtoa_r+0x992>
 80178dc:	9906      	ldr	r1, [sp, #24]
 80178de:	ea41 0a0a 	orr.w	sl, r1, sl
 80178e2:	9907      	ldr	r1, [sp, #28]
 80178e4:	ea5a 0101 	orrs.w	r1, sl, r1
 80178e8:	d120      	bne.n	801792c <_dtoa_r+0x9d4>
 80178ea:	2a00      	cmp	r2, #0
 80178ec:	ddec      	ble.n	80178c8 <_dtoa_r+0x970>
 80178ee:	4629      	mov	r1, r5
 80178f0:	2201      	movs	r2, #1
 80178f2:	4630      	mov	r0, r6
 80178f4:	9304      	str	r3, [sp, #16]
 80178f6:	f000 fc01 	bl	80180fc <__lshift>
 80178fa:	4621      	mov	r1, r4
 80178fc:	4605      	mov	r5, r0
 80178fe:	f000 fc6d 	bl	80181dc <__mcmp>
 8017902:	2800      	cmp	r0, #0
 8017904:	9b04      	ldr	r3, [sp, #16]
 8017906:	dc02      	bgt.n	801790e <_dtoa_r+0x9b6>
 8017908:	d1de      	bne.n	80178c8 <_dtoa_r+0x970>
 801790a:	07da      	lsls	r2, r3, #31
 801790c:	d5dc      	bpl.n	80178c8 <_dtoa_r+0x970>
 801790e:	2b39      	cmp	r3, #57	; 0x39
 8017910:	d1d8      	bne.n	80178c4 <_dtoa_r+0x96c>
 8017912:	9a02      	ldr	r2, [sp, #8]
 8017914:	2339      	movs	r3, #57	; 0x39
 8017916:	7013      	strb	r3, [r2, #0]
 8017918:	4643      	mov	r3, r8
 801791a:	4698      	mov	r8, r3
 801791c:	3b01      	subs	r3, #1
 801791e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8017922:	2a39      	cmp	r2, #57	; 0x39
 8017924:	d051      	beq.n	80179ca <_dtoa_r+0xa72>
 8017926:	3201      	adds	r2, #1
 8017928:	701a      	strb	r2, [r3, #0]
 801792a:	e745      	b.n	80177b8 <_dtoa_r+0x860>
 801792c:	2a00      	cmp	r2, #0
 801792e:	dd03      	ble.n	8017938 <_dtoa_r+0x9e0>
 8017930:	2b39      	cmp	r3, #57	; 0x39
 8017932:	d0ee      	beq.n	8017912 <_dtoa_r+0x9ba>
 8017934:	3301      	adds	r3, #1
 8017936:	e7c7      	b.n	80178c8 <_dtoa_r+0x970>
 8017938:	9a04      	ldr	r2, [sp, #16]
 801793a:	9908      	ldr	r1, [sp, #32]
 801793c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017940:	428a      	cmp	r2, r1
 8017942:	d02b      	beq.n	801799c <_dtoa_r+0xa44>
 8017944:	4629      	mov	r1, r5
 8017946:	2300      	movs	r3, #0
 8017948:	220a      	movs	r2, #10
 801794a:	4630      	mov	r0, r6
 801794c:	f000 fa26 	bl	8017d9c <__multadd>
 8017950:	45b9      	cmp	r9, r7
 8017952:	4605      	mov	r5, r0
 8017954:	f04f 0300 	mov.w	r3, #0
 8017958:	f04f 020a 	mov.w	r2, #10
 801795c:	4649      	mov	r1, r9
 801795e:	4630      	mov	r0, r6
 8017960:	d107      	bne.n	8017972 <_dtoa_r+0xa1a>
 8017962:	f000 fa1b 	bl	8017d9c <__multadd>
 8017966:	4681      	mov	r9, r0
 8017968:	4607      	mov	r7, r0
 801796a:	9b04      	ldr	r3, [sp, #16]
 801796c:	3301      	adds	r3, #1
 801796e:	9304      	str	r3, [sp, #16]
 8017970:	e774      	b.n	801785c <_dtoa_r+0x904>
 8017972:	f000 fa13 	bl	8017d9c <__multadd>
 8017976:	4639      	mov	r1, r7
 8017978:	4681      	mov	r9, r0
 801797a:	2300      	movs	r3, #0
 801797c:	220a      	movs	r2, #10
 801797e:	4630      	mov	r0, r6
 8017980:	f000 fa0c 	bl	8017d9c <__multadd>
 8017984:	4607      	mov	r7, r0
 8017986:	e7f0      	b.n	801796a <_dtoa_r+0xa12>
 8017988:	f1ba 0f00 	cmp.w	sl, #0
 801798c:	9a01      	ldr	r2, [sp, #4]
 801798e:	bfcc      	ite	gt
 8017990:	46d0      	movgt	r8, sl
 8017992:	f04f 0801 	movle.w	r8, #1
 8017996:	4490      	add	r8, r2
 8017998:	f04f 0900 	mov.w	r9, #0
 801799c:	4629      	mov	r1, r5
 801799e:	2201      	movs	r2, #1
 80179a0:	4630      	mov	r0, r6
 80179a2:	9302      	str	r3, [sp, #8]
 80179a4:	f000 fbaa 	bl	80180fc <__lshift>
 80179a8:	4621      	mov	r1, r4
 80179aa:	4605      	mov	r5, r0
 80179ac:	f000 fc16 	bl	80181dc <__mcmp>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	dcb1      	bgt.n	8017918 <_dtoa_r+0x9c0>
 80179b4:	d102      	bne.n	80179bc <_dtoa_r+0xa64>
 80179b6:	9b02      	ldr	r3, [sp, #8]
 80179b8:	07db      	lsls	r3, r3, #31
 80179ba:	d4ad      	bmi.n	8017918 <_dtoa_r+0x9c0>
 80179bc:	4643      	mov	r3, r8
 80179be:	4698      	mov	r8, r3
 80179c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179c4:	2a30      	cmp	r2, #48	; 0x30
 80179c6:	d0fa      	beq.n	80179be <_dtoa_r+0xa66>
 80179c8:	e6f6      	b.n	80177b8 <_dtoa_r+0x860>
 80179ca:	9a01      	ldr	r2, [sp, #4]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d1a4      	bne.n	801791a <_dtoa_r+0x9c2>
 80179d0:	f10b 0b01 	add.w	fp, fp, #1
 80179d4:	2331      	movs	r3, #49	; 0x31
 80179d6:	e778      	b.n	80178ca <_dtoa_r+0x972>
 80179d8:	4b14      	ldr	r3, [pc, #80]	; (8017a2c <_dtoa_r+0xad4>)
 80179da:	f7ff bb27 	b.w	801702c <_dtoa_r+0xd4>
 80179de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	f47f ab03 	bne.w	8016fec <_dtoa_r+0x94>
 80179e6:	4b12      	ldr	r3, [pc, #72]	; (8017a30 <_dtoa_r+0xad8>)
 80179e8:	f7ff bb20 	b.w	801702c <_dtoa_r+0xd4>
 80179ec:	f1ba 0f00 	cmp.w	sl, #0
 80179f0:	dc03      	bgt.n	80179fa <_dtoa_r+0xaa2>
 80179f2:	9b06      	ldr	r3, [sp, #24]
 80179f4:	2b02      	cmp	r3, #2
 80179f6:	f73f aec7 	bgt.w	8017788 <_dtoa_r+0x830>
 80179fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80179fe:	4621      	mov	r1, r4
 8017a00:	4628      	mov	r0, r5
 8017a02:	f7ff fa1d 	bl	8016e40 <quorem>
 8017a06:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017a0a:	f808 3b01 	strb.w	r3, [r8], #1
 8017a0e:	9a01      	ldr	r2, [sp, #4]
 8017a10:	eba8 0202 	sub.w	r2, r8, r2
 8017a14:	4592      	cmp	sl, r2
 8017a16:	ddb7      	ble.n	8017988 <_dtoa_r+0xa30>
 8017a18:	4629      	mov	r1, r5
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	220a      	movs	r2, #10
 8017a1e:	4630      	mov	r0, r6
 8017a20:	f000 f9bc 	bl	8017d9c <__multadd>
 8017a24:	4605      	mov	r5, r0
 8017a26:	e7ea      	b.n	80179fe <_dtoa_r+0xaa6>
 8017a28:	08019713 	.word	0x08019713
 8017a2c:	08019670 	.word	0x08019670
 8017a30:	08019694 	.word	0x08019694

08017a34 <__sflush_r>:
 8017a34:	898a      	ldrh	r2, [r1, #12]
 8017a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a3a:	4605      	mov	r5, r0
 8017a3c:	0710      	lsls	r0, r2, #28
 8017a3e:	460c      	mov	r4, r1
 8017a40:	d458      	bmi.n	8017af4 <__sflush_r+0xc0>
 8017a42:	684b      	ldr	r3, [r1, #4]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	dc05      	bgt.n	8017a54 <__sflush_r+0x20>
 8017a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	dc02      	bgt.n	8017a54 <__sflush_r+0x20>
 8017a4e:	2000      	movs	r0, #0
 8017a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a56:	2e00      	cmp	r6, #0
 8017a58:	d0f9      	beq.n	8017a4e <__sflush_r+0x1a>
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a60:	682f      	ldr	r7, [r5, #0]
 8017a62:	602b      	str	r3, [r5, #0]
 8017a64:	d032      	beq.n	8017acc <__sflush_r+0x98>
 8017a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a68:	89a3      	ldrh	r3, [r4, #12]
 8017a6a:	075a      	lsls	r2, r3, #29
 8017a6c:	d505      	bpl.n	8017a7a <__sflush_r+0x46>
 8017a6e:	6863      	ldr	r3, [r4, #4]
 8017a70:	1ac0      	subs	r0, r0, r3
 8017a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a74:	b10b      	cbz	r3, 8017a7a <__sflush_r+0x46>
 8017a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a78:	1ac0      	subs	r0, r0, r3
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	4602      	mov	r2, r0
 8017a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a80:	6a21      	ldr	r1, [r4, #32]
 8017a82:	4628      	mov	r0, r5
 8017a84:	47b0      	blx	r6
 8017a86:	1c43      	adds	r3, r0, #1
 8017a88:	89a3      	ldrh	r3, [r4, #12]
 8017a8a:	d106      	bne.n	8017a9a <__sflush_r+0x66>
 8017a8c:	6829      	ldr	r1, [r5, #0]
 8017a8e:	291d      	cmp	r1, #29
 8017a90:	d82c      	bhi.n	8017aec <__sflush_r+0xb8>
 8017a92:	4a2a      	ldr	r2, [pc, #168]	; (8017b3c <__sflush_r+0x108>)
 8017a94:	40ca      	lsrs	r2, r1
 8017a96:	07d6      	lsls	r6, r2, #31
 8017a98:	d528      	bpl.n	8017aec <__sflush_r+0xb8>
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	6062      	str	r2, [r4, #4]
 8017a9e:	04d9      	lsls	r1, r3, #19
 8017aa0:	6922      	ldr	r2, [r4, #16]
 8017aa2:	6022      	str	r2, [r4, #0]
 8017aa4:	d504      	bpl.n	8017ab0 <__sflush_r+0x7c>
 8017aa6:	1c42      	adds	r2, r0, #1
 8017aa8:	d101      	bne.n	8017aae <__sflush_r+0x7a>
 8017aaa:	682b      	ldr	r3, [r5, #0]
 8017aac:	b903      	cbnz	r3, 8017ab0 <__sflush_r+0x7c>
 8017aae:	6560      	str	r0, [r4, #84]	; 0x54
 8017ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ab2:	602f      	str	r7, [r5, #0]
 8017ab4:	2900      	cmp	r1, #0
 8017ab6:	d0ca      	beq.n	8017a4e <__sflush_r+0x1a>
 8017ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017abc:	4299      	cmp	r1, r3
 8017abe:	d002      	beq.n	8017ac6 <__sflush_r+0x92>
 8017ac0:	4628      	mov	r0, r5
 8017ac2:	f000 fca3 	bl	801840c <_free_r>
 8017ac6:	2000      	movs	r0, #0
 8017ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8017aca:	e7c1      	b.n	8017a50 <__sflush_r+0x1c>
 8017acc:	6a21      	ldr	r1, [r4, #32]
 8017ace:	2301      	movs	r3, #1
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	47b0      	blx	r6
 8017ad4:	1c41      	adds	r1, r0, #1
 8017ad6:	d1c7      	bne.n	8017a68 <__sflush_r+0x34>
 8017ad8:	682b      	ldr	r3, [r5, #0]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d0c4      	beq.n	8017a68 <__sflush_r+0x34>
 8017ade:	2b1d      	cmp	r3, #29
 8017ae0:	d001      	beq.n	8017ae6 <__sflush_r+0xb2>
 8017ae2:	2b16      	cmp	r3, #22
 8017ae4:	d101      	bne.n	8017aea <__sflush_r+0xb6>
 8017ae6:	602f      	str	r7, [r5, #0]
 8017ae8:	e7b1      	b.n	8017a4e <__sflush_r+0x1a>
 8017aea:	89a3      	ldrh	r3, [r4, #12]
 8017aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017af0:	81a3      	strh	r3, [r4, #12]
 8017af2:	e7ad      	b.n	8017a50 <__sflush_r+0x1c>
 8017af4:	690f      	ldr	r7, [r1, #16]
 8017af6:	2f00      	cmp	r7, #0
 8017af8:	d0a9      	beq.n	8017a4e <__sflush_r+0x1a>
 8017afa:	0793      	lsls	r3, r2, #30
 8017afc:	680e      	ldr	r6, [r1, #0]
 8017afe:	bf08      	it	eq
 8017b00:	694b      	ldreq	r3, [r1, #20]
 8017b02:	600f      	str	r7, [r1, #0]
 8017b04:	bf18      	it	ne
 8017b06:	2300      	movne	r3, #0
 8017b08:	eba6 0807 	sub.w	r8, r6, r7
 8017b0c:	608b      	str	r3, [r1, #8]
 8017b0e:	f1b8 0f00 	cmp.w	r8, #0
 8017b12:	dd9c      	ble.n	8017a4e <__sflush_r+0x1a>
 8017b14:	6a21      	ldr	r1, [r4, #32]
 8017b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017b18:	4643      	mov	r3, r8
 8017b1a:	463a      	mov	r2, r7
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	47b0      	blx	r6
 8017b20:	2800      	cmp	r0, #0
 8017b22:	dc06      	bgt.n	8017b32 <__sflush_r+0xfe>
 8017b24:	89a3      	ldrh	r3, [r4, #12]
 8017b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b2a:	81a3      	strh	r3, [r4, #12]
 8017b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b30:	e78e      	b.n	8017a50 <__sflush_r+0x1c>
 8017b32:	4407      	add	r7, r0
 8017b34:	eba8 0800 	sub.w	r8, r8, r0
 8017b38:	e7e9      	b.n	8017b0e <__sflush_r+0xda>
 8017b3a:	bf00      	nop
 8017b3c:	20400001 	.word	0x20400001

08017b40 <_fflush_r>:
 8017b40:	b538      	push	{r3, r4, r5, lr}
 8017b42:	690b      	ldr	r3, [r1, #16]
 8017b44:	4605      	mov	r5, r0
 8017b46:	460c      	mov	r4, r1
 8017b48:	b913      	cbnz	r3, 8017b50 <_fflush_r+0x10>
 8017b4a:	2500      	movs	r5, #0
 8017b4c:	4628      	mov	r0, r5
 8017b4e:	bd38      	pop	{r3, r4, r5, pc}
 8017b50:	b118      	cbz	r0, 8017b5a <_fflush_r+0x1a>
 8017b52:	6983      	ldr	r3, [r0, #24]
 8017b54:	b90b      	cbnz	r3, 8017b5a <_fflush_r+0x1a>
 8017b56:	f7fe f953 	bl	8015e00 <__sinit>
 8017b5a:	4b14      	ldr	r3, [pc, #80]	; (8017bac <_fflush_r+0x6c>)
 8017b5c:	429c      	cmp	r4, r3
 8017b5e:	d11b      	bne.n	8017b98 <_fflush_r+0x58>
 8017b60:	686c      	ldr	r4, [r5, #4]
 8017b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d0ef      	beq.n	8017b4a <_fflush_r+0xa>
 8017b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b6c:	07d0      	lsls	r0, r2, #31
 8017b6e:	d404      	bmi.n	8017b7a <_fflush_r+0x3a>
 8017b70:	0599      	lsls	r1, r3, #22
 8017b72:	d402      	bmi.n	8017b7a <_fflush_r+0x3a>
 8017b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b76:	f7fe fa06 	bl	8015f86 <__retarget_lock_acquire_recursive>
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	4621      	mov	r1, r4
 8017b7e:	f7ff ff59 	bl	8017a34 <__sflush_r>
 8017b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b84:	07da      	lsls	r2, r3, #31
 8017b86:	4605      	mov	r5, r0
 8017b88:	d4e0      	bmi.n	8017b4c <_fflush_r+0xc>
 8017b8a:	89a3      	ldrh	r3, [r4, #12]
 8017b8c:	059b      	lsls	r3, r3, #22
 8017b8e:	d4dd      	bmi.n	8017b4c <_fflush_r+0xc>
 8017b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b92:	f7fe f9fa 	bl	8015f8a <__retarget_lock_release_recursive>
 8017b96:	e7d9      	b.n	8017b4c <_fflush_r+0xc>
 8017b98:	4b05      	ldr	r3, [pc, #20]	; (8017bb0 <_fflush_r+0x70>)
 8017b9a:	429c      	cmp	r4, r3
 8017b9c:	d101      	bne.n	8017ba2 <_fflush_r+0x62>
 8017b9e:	68ac      	ldr	r4, [r5, #8]
 8017ba0:	e7df      	b.n	8017b62 <_fflush_r+0x22>
 8017ba2:	4b04      	ldr	r3, [pc, #16]	; (8017bb4 <_fflush_r+0x74>)
 8017ba4:	429c      	cmp	r4, r3
 8017ba6:	bf08      	it	eq
 8017ba8:	68ec      	ldreq	r4, [r5, #12]
 8017baa:	e7da      	b.n	8017b62 <_fflush_r+0x22>
 8017bac:	0801961c 	.word	0x0801961c
 8017bb0:	0801963c 	.word	0x0801963c
 8017bb4:	080195fc 	.word	0x080195fc

08017bb8 <_localeconv_r>:
 8017bb8:	4800      	ldr	r0, [pc, #0]	; (8017bbc <_localeconv_r+0x4>)
 8017bba:	4770      	bx	lr
 8017bbc:	24000170 	.word	0x24000170

08017bc0 <_lseek_r>:
 8017bc0:	b538      	push	{r3, r4, r5, lr}
 8017bc2:	4d07      	ldr	r5, [pc, #28]	; (8017be0 <_lseek_r+0x20>)
 8017bc4:	4604      	mov	r4, r0
 8017bc6:	4608      	mov	r0, r1
 8017bc8:	4611      	mov	r1, r2
 8017bca:	2200      	movs	r2, #0
 8017bcc:	602a      	str	r2, [r5, #0]
 8017bce:	461a      	mov	r2, r3
 8017bd0:	f7ea fd64 	bl	800269c <_lseek>
 8017bd4:	1c43      	adds	r3, r0, #1
 8017bd6:	d102      	bne.n	8017bde <_lseek_r+0x1e>
 8017bd8:	682b      	ldr	r3, [r5, #0]
 8017bda:	b103      	cbz	r3, 8017bde <_lseek_r+0x1e>
 8017bdc:	6023      	str	r3, [r4, #0]
 8017bde:	bd38      	pop	{r3, r4, r5, pc}
 8017be0:	24007390 	.word	0x24007390

08017be4 <__swhatbuf_r>:
 8017be4:	b570      	push	{r4, r5, r6, lr}
 8017be6:	460e      	mov	r6, r1
 8017be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bec:	2900      	cmp	r1, #0
 8017bee:	b096      	sub	sp, #88	; 0x58
 8017bf0:	4614      	mov	r4, r2
 8017bf2:	461d      	mov	r5, r3
 8017bf4:	da08      	bge.n	8017c08 <__swhatbuf_r+0x24>
 8017bf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	602a      	str	r2, [r5, #0]
 8017bfe:	061a      	lsls	r2, r3, #24
 8017c00:	d410      	bmi.n	8017c24 <__swhatbuf_r+0x40>
 8017c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c06:	e00e      	b.n	8017c26 <__swhatbuf_r+0x42>
 8017c08:	466a      	mov	r2, sp
 8017c0a:	f000 ff43 	bl	8018a94 <_fstat_r>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	dbf1      	blt.n	8017bf6 <__swhatbuf_r+0x12>
 8017c12:	9a01      	ldr	r2, [sp, #4]
 8017c14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017c1c:	425a      	negs	r2, r3
 8017c1e:	415a      	adcs	r2, r3
 8017c20:	602a      	str	r2, [r5, #0]
 8017c22:	e7ee      	b.n	8017c02 <__swhatbuf_r+0x1e>
 8017c24:	2340      	movs	r3, #64	; 0x40
 8017c26:	2000      	movs	r0, #0
 8017c28:	6023      	str	r3, [r4, #0]
 8017c2a:	b016      	add	sp, #88	; 0x58
 8017c2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017c30 <__smakebuf_r>:
 8017c30:	898b      	ldrh	r3, [r1, #12]
 8017c32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c34:	079d      	lsls	r5, r3, #30
 8017c36:	4606      	mov	r6, r0
 8017c38:	460c      	mov	r4, r1
 8017c3a:	d507      	bpl.n	8017c4c <__smakebuf_r+0x1c>
 8017c3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017c40:	6023      	str	r3, [r4, #0]
 8017c42:	6123      	str	r3, [r4, #16]
 8017c44:	2301      	movs	r3, #1
 8017c46:	6163      	str	r3, [r4, #20]
 8017c48:	b002      	add	sp, #8
 8017c4a:	bd70      	pop	{r4, r5, r6, pc}
 8017c4c:	ab01      	add	r3, sp, #4
 8017c4e:	466a      	mov	r2, sp
 8017c50:	f7ff ffc8 	bl	8017be4 <__swhatbuf_r>
 8017c54:	9900      	ldr	r1, [sp, #0]
 8017c56:	4605      	mov	r5, r0
 8017c58:	4630      	mov	r0, r6
 8017c5a:	f7fe f9cd 	bl	8015ff8 <_malloc_r>
 8017c5e:	b948      	cbnz	r0, 8017c74 <__smakebuf_r+0x44>
 8017c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c64:	059a      	lsls	r2, r3, #22
 8017c66:	d4ef      	bmi.n	8017c48 <__smakebuf_r+0x18>
 8017c68:	f023 0303 	bic.w	r3, r3, #3
 8017c6c:	f043 0302 	orr.w	r3, r3, #2
 8017c70:	81a3      	strh	r3, [r4, #12]
 8017c72:	e7e3      	b.n	8017c3c <__smakebuf_r+0xc>
 8017c74:	4b0d      	ldr	r3, [pc, #52]	; (8017cac <__smakebuf_r+0x7c>)
 8017c76:	62b3      	str	r3, [r6, #40]	; 0x28
 8017c78:	89a3      	ldrh	r3, [r4, #12]
 8017c7a:	6020      	str	r0, [r4, #0]
 8017c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c80:	81a3      	strh	r3, [r4, #12]
 8017c82:	9b00      	ldr	r3, [sp, #0]
 8017c84:	6163      	str	r3, [r4, #20]
 8017c86:	9b01      	ldr	r3, [sp, #4]
 8017c88:	6120      	str	r0, [r4, #16]
 8017c8a:	b15b      	cbz	r3, 8017ca4 <__smakebuf_r+0x74>
 8017c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c90:	4630      	mov	r0, r6
 8017c92:	f000 ff11 	bl	8018ab8 <_isatty_r>
 8017c96:	b128      	cbz	r0, 8017ca4 <__smakebuf_r+0x74>
 8017c98:	89a3      	ldrh	r3, [r4, #12]
 8017c9a:	f023 0303 	bic.w	r3, r3, #3
 8017c9e:	f043 0301 	orr.w	r3, r3, #1
 8017ca2:	81a3      	strh	r3, [r4, #12]
 8017ca4:	89a0      	ldrh	r0, [r4, #12]
 8017ca6:	4305      	orrs	r5, r0
 8017ca8:	81a5      	strh	r5, [r4, #12]
 8017caa:	e7cd      	b.n	8017c48 <__smakebuf_r+0x18>
 8017cac:	08015d99 	.word	0x08015d99

08017cb0 <malloc>:
 8017cb0:	4b02      	ldr	r3, [pc, #8]	; (8017cbc <malloc+0xc>)
 8017cb2:	4601      	mov	r1, r0
 8017cb4:	6818      	ldr	r0, [r3, #0]
 8017cb6:	f7fe b99f 	b.w	8015ff8 <_malloc_r>
 8017cba:	bf00      	nop
 8017cbc:	24000018 	.word	0x24000018

08017cc0 <__malloc_lock>:
 8017cc0:	4801      	ldr	r0, [pc, #4]	; (8017cc8 <__malloc_lock+0x8>)
 8017cc2:	f7fe b960 	b.w	8015f86 <__retarget_lock_acquire_recursive>
 8017cc6:	bf00      	nop
 8017cc8:	24007385 	.word	0x24007385

08017ccc <__malloc_unlock>:
 8017ccc:	4801      	ldr	r0, [pc, #4]	; (8017cd4 <__malloc_unlock+0x8>)
 8017cce:	f7fe b95c 	b.w	8015f8a <__retarget_lock_release_recursive>
 8017cd2:	bf00      	nop
 8017cd4:	24007385 	.word	0x24007385

08017cd8 <_Balloc>:
 8017cd8:	b570      	push	{r4, r5, r6, lr}
 8017cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017cdc:	4604      	mov	r4, r0
 8017cde:	460d      	mov	r5, r1
 8017ce0:	b976      	cbnz	r6, 8017d00 <_Balloc+0x28>
 8017ce2:	2010      	movs	r0, #16
 8017ce4:	f7ff ffe4 	bl	8017cb0 <malloc>
 8017ce8:	4602      	mov	r2, r0
 8017cea:	6260      	str	r0, [r4, #36]	; 0x24
 8017cec:	b920      	cbnz	r0, 8017cf8 <_Balloc+0x20>
 8017cee:	4b18      	ldr	r3, [pc, #96]	; (8017d50 <_Balloc+0x78>)
 8017cf0:	4818      	ldr	r0, [pc, #96]	; (8017d54 <_Balloc+0x7c>)
 8017cf2:	2166      	movs	r1, #102	; 0x66
 8017cf4:	f000 fe9e 	bl	8018a34 <__assert_func>
 8017cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017cfc:	6006      	str	r6, [r0, #0]
 8017cfe:	60c6      	str	r6, [r0, #12]
 8017d00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017d02:	68f3      	ldr	r3, [r6, #12]
 8017d04:	b183      	cbz	r3, 8017d28 <_Balloc+0x50>
 8017d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d08:	68db      	ldr	r3, [r3, #12]
 8017d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017d0e:	b9b8      	cbnz	r0, 8017d40 <_Balloc+0x68>
 8017d10:	2101      	movs	r1, #1
 8017d12:	fa01 f605 	lsl.w	r6, r1, r5
 8017d16:	1d72      	adds	r2, r6, #5
 8017d18:	0092      	lsls	r2, r2, #2
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	f000 fb60 	bl	80183e0 <_calloc_r>
 8017d20:	b160      	cbz	r0, 8017d3c <_Balloc+0x64>
 8017d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017d26:	e00e      	b.n	8017d46 <_Balloc+0x6e>
 8017d28:	2221      	movs	r2, #33	; 0x21
 8017d2a:	2104      	movs	r1, #4
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	f000 fb57 	bl	80183e0 <_calloc_r>
 8017d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d34:	60f0      	str	r0, [r6, #12]
 8017d36:	68db      	ldr	r3, [r3, #12]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d1e4      	bne.n	8017d06 <_Balloc+0x2e>
 8017d3c:	2000      	movs	r0, #0
 8017d3e:	bd70      	pop	{r4, r5, r6, pc}
 8017d40:	6802      	ldr	r2, [r0, #0]
 8017d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d46:	2300      	movs	r3, #0
 8017d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017d4c:	e7f7      	b.n	8017d3e <_Balloc+0x66>
 8017d4e:	bf00      	nop
 8017d50:	080196a1 	.word	0x080196a1
 8017d54:	08019724 	.word	0x08019724

08017d58 <_Bfree>:
 8017d58:	b570      	push	{r4, r5, r6, lr}
 8017d5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017d5c:	4605      	mov	r5, r0
 8017d5e:	460c      	mov	r4, r1
 8017d60:	b976      	cbnz	r6, 8017d80 <_Bfree+0x28>
 8017d62:	2010      	movs	r0, #16
 8017d64:	f7ff ffa4 	bl	8017cb0 <malloc>
 8017d68:	4602      	mov	r2, r0
 8017d6a:	6268      	str	r0, [r5, #36]	; 0x24
 8017d6c:	b920      	cbnz	r0, 8017d78 <_Bfree+0x20>
 8017d6e:	4b09      	ldr	r3, [pc, #36]	; (8017d94 <_Bfree+0x3c>)
 8017d70:	4809      	ldr	r0, [pc, #36]	; (8017d98 <_Bfree+0x40>)
 8017d72:	218a      	movs	r1, #138	; 0x8a
 8017d74:	f000 fe5e 	bl	8018a34 <__assert_func>
 8017d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017d7c:	6006      	str	r6, [r0, #0]
 8017d7e:	60c6      	str	r6, [r0, #12]
 8017d80:	b13c      	cbz	r4, 8017d92 <_Bfree+0x3a>
 8017d82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017d84:	6862      	ldr	r2, [r4, #4]
 8017d86:	68db      	ldr	r3, [r3, #12]
 8017d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017d8c:	6021      	str	r1, [r4, #0]
 8017d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017d92:	bd70      	pop	{r4, r5, r6, pc}
 8017d94:	080196a1 	.word	0x080196a1
 8017d98:	08019724 	.word	0x08019724

08017d9c <__multadd>:
 8017d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017da0:	690d      	ldr	r5, [r1, #16]
 8017da2:	4607      	mov	r7, r0
 8017da4:	460c      	mov	r4, r1
 8017da6:	461e      	mov	r6, r3
 8017da8:	f101 0c14 	add.w	ip, r1, #20
 8017dac:	2000      	movs	r0, #0
 8017dae:	f8dc 3000 	ldr.w	r3, [ip]
 8017db2:	b299      	uxth	r1, r3
 8017db4:	fb02 6101 	mla	r1, r2, r1, r6
 8017db8:	0c1e      	lsrs	r6, r3, #16
 8017dba:	0c0b      	lsrs	r3, r1, #16
 8017dbc:	fb02 3306 	mla	r3, r2, r6, r3
 8017dc0:	b289      	uxth	r1, r1
 8017dc2:	3001      	adds	r0, #1
 8017dc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017dc8:	4285      	cmp	r5, r0
 8017dca:	f84c 1b04 	str.w	r1, [ip], #4
 8017dce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017dd2:	dcec      	bgt.n	8017dae <__multadd+0x12>
 8017dd4:	b30e      	cbz	r6, 8017e1a <__multadd+0x7e>
 8017dd6:	68a3      	ldr	r3, [r4, #8]
 8017dd8:	42ab      	cmp	r3, r5
 8017dda:	dc19      	bgt.n	8017e10 <__multadd+0x74>
 8017ddc:	6861      	ldr	r1, [r4, #4]
 8017dde:	4638      	mov	r0, r7
 8017de0:	3101      	adds	r1, #1
 8017de2:	f7ff ff79 	bl	8017cd8 <_Balloc>
 8017de6:	4680      	mov	r8, r0
 8017de8:	b928      	cbnz	r0, 8017df6 <__multadd+0x5a>
 8017dea:	4602      	mov	r2, r0
 8017dec:	4b0c      	ldr	r3, [pc, #48]	; (8017e20 <__multadd+0x84>)
 8017dee:	480d      	ldr	r0, [pc, #52]	; (8017e24 <__multadd+0x88>)
 8017df0:	21b5      	movs	r1, #181	; 0xb5
 8017df2:	f000 fe1f 	bl	8018a34 <__assert_func>
 8017df6:	6922      	ldr	r2, [r4, #16]
 8017df8:	3202      	adds	r2, #2
 8017dfa:	f104 010c 	add.w	r1, r4, #12
 8017dfe:	0092      	lsls	r2, r2, #2
 8017e00:	300c      	adds	r0, #12
 8017e02:	f7fe f8c3 	bl	8015f8c <memcpy>
 8017e06:	4621      	mov	r1, r4
 8017e08:	4638      	mov	r0, r7
 8017e0a:	f7ff ffa5 	bl	8017d58 <_Bfree>
 8017e0e:	4644      	mov	r4, r8
 8017e10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017e14:	3501      	adds	r5, #1
 8017e16:	615e      	str	r6, [r3, #20]
 8017e18:	6125      	str	r5, [r4, #16]
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e20:	08019713 	.word	0x08019713
 8017e24:	08019724 	.word	0x08019724

08017e28 <__hi0bits>:
 8017e28:	0c03      	lsrs	r3, r0, #16
 8017e2a:	041b      	lsls	r3, r3, #16
 8017e2c:	b9d3      	cbnz	r3, 8017e64 <__hi0bits+0x3c>
 8017e2e:	0400      	lsls	r0, r0, #16
 8017e30:	2310      	movs	r3, #16
 8017e32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017e36:	bf04      	itt	eq
 8017e38:	0200      	lsleq	r0, r0, #8
 8017e3a:	3308      	addeq	r3, #8
 8017e3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017e40:	bf04      	itt	eq
 8017e42:	0100      	lsleq	r0, r0, #4
 8017e44:	3304      	addeq	r3, #4
 8017e46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017e4a:	bf04      	itt	eq
 8017e4c:	0080      	lsleq	r0, r0, #2
 8017e4e:	3302      	addeq	r3, #2
 8017e50:	2800      	cmp	r0, #0
 8017e52:	db05      	blt.n	8017e60 <__hi0bits+0x38>
 8017e54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017e58:	f103 0301 	add.w	r3, r3, #1
 8017e5c:	bf08      	it	eq
 8017e5e:	2320      	moveq	r3, #32
 8017e60:	4618      	mov	r0, r3
 8017e62:	4770      	bx	lr
 8017e64:	2300      	movs	r3, #0
 8017e66:	e7e4      	b.n	8017e32 <__hi0bits+0xa>

08017e68 <__lo0bits>:
 8017e68:	6803      	ldr	r3, [r0, #0]
 8017e6a:	f013 0207 	ands.w	r2, r3, #7
 8017e6e:	4601      	mov	r1, r0
 8017e70:	d00b      	beq.n	8017e8a <__lo0bits+0x22>
 8017e72:	07da      	lsls	r2, r3, #31
 8017e74:	d423      	bmi.n	8017ebe <__lo0bits+0x56>
 8017e76:	0798      	lsls	r0, r3, #30
 8017e78:	bf49      	itett	mi
 8017e7a:	085b      	lsrmi	r3, r3, #1
 8017e7c:	089b      	lsrpl	r3, r3, #2
 8017e7e:	2001      	movmi	r0, #1
 8017e80:	600b      	strmi	r3, [r1, #0]
 8017e82:	bf5c      	itt	pl
 8017e84:	600b      	strpl	r3, [r1, #0]
 8017e86:	2002      	movpl	r0, #2
 8017e88:	4770      	bx	lr
 8017e8a:	b298      	uxth	r0, r3
 8017e8c:	b9a8      	cbnz	r0, 8017eba <__lo0bits+0x52>
 8017e8e:	0c1b      	lsrs	r3, r3, #16
 8017e90:	2010      	movs	r0, #16
 8017e92:	b2da      	uxtb	r2, r3
 8017e94:	b90a      	cbnz	r2, 8017e9a <__lo0bits+0x32>
 8017e96:	3008      	adds	r0, #8
 8017e98:	0a1b      	lsrs	r3, r3, #8
 8017e9a:	071a      	lsls	r2, r3, #28
 8017e9c:	bf04      	itt	eq
 8017e9e:	091b      	lsreq	r3, r3, #4
 8017ea0:	3004      	addeq	r0, #4
 8017ea2:	079a      	lsls	r2, r3, #30
 8017ea4:	bf04      	itt	eq
 8017ea6:	089b      	lsreq	r3, r3, #2
 8017ea8:	3002      	addeq	r0, #2
 8017eaa:	07da      	lsls	r2, r3, #31
 8017eac:	d403      	bmi.n	8017eb6 <__lo0bits+0x4e>
 8017eae:	085b      	lsrs	r3, r3, #1
 8017eb0:	f100 0001 	add.w	r0, r0, #1
 8017eb4:	d005      	beq.n	8017ec2 <__lo0bits+0x5a>
 8017eb6:	600b      	str	r3, [r1, #0]
 8017eb8:	4770      	bx	lr
 8017eba:	4610      	mov	r0, r2
 8017ebc:	e7e9      	b.n	8017e92 <__lo0bits+0x2a>
 8017ebe:	2000      	movs	r0, #0
 8017ec0:	4770      	bx	lr
 8017ec2:	2020      	movs	r0, #32
 8017ec4:	4770      	bx	lr
	...

08017ec8 <__i2b>:
 8017ec8:	b510      	push	{r4, lr}
 8017eca:	460c      	mov	r4, r1
 8017ecc:	2101      	movs	r1, #1
 8017ece:	f7ff ff03 	bl	8017cd8 <_Balloc>
 8017ed2:	4602      	mov	r2, r0
 8017ed4:	b928      	cbnz	r0, 8017ee2 <__i2b+0x1a>
 8017ed6:	4b05      	ldr	r3, [pc, #20]	; (8017eec <__i2b+0x24>)
 8017ed8:	4805      	ldr	r0, [pc, #20]	; (8017ef0 <__i2b+0x28>)
 8017eda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017ede:	f000 fda9 	bl	8018a34 <__assert_func>
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	6144      	str	r4, [r0, #20]
 8017ee6:	6103      	str	r3, [r0, #16]
 8017ee8:	bd10      	pop	{r4, pc}
 8017eea:	bf00      	nop
 8017eec:	08019713 	.word	0x08019713
 8017ef0:	08019724 	.word	0x08019724

08017ef4 <__multiply>:
 8017ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef8:	4691      	mov	r9, r2
 8017efa:	690a      	ldr	r2, [r1, #16]
 8017efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017f00:	429a      	cmp	r2, r3
 8017f02:	bfb8      	it	lt
 8017f04:	460b      	movlt	r3, r1
 8017f06:	460c      	mov	r4, r1
 8017f08:	bfbc      	itt	lt
 8017f0a:	464c      	movlt	r4, r9
 8017f0c:	4699      	movlt	r9, r3
 8017f0e:	6927      	ldr	r7, [r4, #16]
 8017f10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017f14:	68a3      	ldr	r3, [r4, #8]
 8017f16:	6861      	ldr	r1, [r4, #4]
 8017f18:	eb07 060a 	add.w	r6, r7, sl
 8017f1c:	42b3      	cmp	r3, r6
 8017f1e:	b085      	sub	sp, #20
 8017f20:	bfb8      	it	lt
 8017f22:	3101      	addlt	r1, #1
 8017f24:	f7ff fed8 	bl	8017cd8 <_Balloc>
 8017f28:	b930      	cbnz	r0, 8017f38 <__multiply+0x44>
 8017f2a:	4602      	mov	r2, r0
 8017f2c:	4b44      	ldr	r3, [pc, #272]	; (8018040 <__multiply+0x14c>)
 8017f2e:	4845      	ldr	r0, [pc, #276]	; (8018044 <__multiply+0x150>)
 8017f30:	f240 115d 	movw	r1, #349	; 0x15d
 8017f34:	f000 fd7e 	bl	8018a34 <__assert_func>
 8017f38:	f100 0514 	add.w	r5, r0, #20
 8017f3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017f40:	462b      	mov	r3, r5
 8017f42:	2200      	movs	r2, #0
 8017f44:	4543      	cmp	r3, r8
 8017f46:	d321      	bcc.n	8017f8c <__multiply+0x98>
 8017f48:	f104 0314 	add.w	r3, r4, #20
 8017f4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017f50:	f109 0314 	add.w	r3, r9, #20
 8017f54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017f58:	9202      	str	r2, [sp, #8]
 8017f5a:	1b3a      	subs	r2, r7, r4
 8017f5c:	3a15      	subs	r2, #21
 8017f5e:	f022 0203 	bic.w	r2, r2, #3
 8017f62:	3204      	adds	r2, #4
 8017f64:	f104 0115 	add.w	r1, r4, #21
 8017f68:	428f      	cmp	r7, r1
 8017f6a:	bf38      	it	cc
 8017f6c:	2204      	movcc	r2, #4
 8017f6e:	9201      	str	r2, [sp, #4]
 8017f70:	9a02      	ldr	r2, [sp, #8]
 8017f72:	9303      	str	r3, [sp, #12]
 8017f74:	429a      	cmp	r2, r3
 8017f76:	d80c      	bhi.n	8017f92 <__multiply+0x9e>
 8017f78:	2e00      	cmp	r6, #0
 8017f7a:	dd03      	ble.n	8017f84 <__multiply+0x90>
 8017f7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d05a      	beq.n	801803a <__multiply+0x146>
 8017f84:	6106      	str	r6, [r0, #16]
 8017f86:	b005      	add	sp, #20
 8017f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f8c:	f843 2b04 	str.w	r2, [r3], #4
 8017f90:	e7d8      	b.n	8017f44 <__multiply+0x50>
 8017f92:	f8b3 a000 	ldrh.w	sl, [r3]
 8017f96:	f1ba 0f00 	cmp.w	sl, #0
 8017f9a:	d024      	beq.n	8017fe6 <__multiply+0xf2>
 8017f9c:	f104 0e14 	add.w	lr, r4, #20
 8017fa0:	46a9      	mov	r9, r5
 8017fa2:	f04f 0c00 	mov.w	ip, #0
 8017fa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017faa:	f8d9 1000 	ldr.w	r1, [r9]
 8017fae:	fa1f fb82 	uxth.w	fp, r2
 8017fb2:	b289      	uxth	r1, r1
 8017fb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8017fb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8017fc0:	4461      	add	r1, ip
 8017fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017fc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8017fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017fce:	b289      	uxth	r1, r1
 8017fd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017fd4:	4577      	cmp	r7, lr
 8017fd6:	f849 1b04 	str.w	r1, [r9], #4
 8017fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017fde:	d8e2      	bhi.n	8017fa6 <__multiply+0xb2>
 8017fe0:	9a01      	ldr	r2, [sp, #4]
 8017fe2:	f845 c002 	str.w	ip, [r5, r2]
 8017fe6:	9a03      	ldr	r2, [sp, #12]
 8017fe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017fec:	3304      	adds	r3, #4
 8017fee:	f1b9 0f00 	cmp.w	r9, #0
 8017ff2:	d020      	beq.n	8018036 <__multiply+0x142>
 8017ff4:	6829      	ldr	r1, [r5, #0]
 8017ff6:	f104 0c14 	add.w	ip, r4, #20
 8017ffa:	46ae      	mov	lr, r5
 8017ffc:	f04f 0a00 	mov.w	sl, #0
 8018000:	f8bc b000 	ldrh.w	fp, [ip]
 8018004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018008:	fb09 220b 	mla	r2, r9, fp, r2
 801800c:	4492      	add	sl, r2
 801800e:	b289      	uxth	r1, r1
 8018010:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018014:	f84e 1b04 	str.w	r1, [lr], #4
 8018018:	f85c 2b04 	ldr.w	r2, [ip], #4
 801801c:	f8be 1000 	ldrh.w	r1, [lr]
 8018020:	0c12      	lsrs	r2, r2, #16
 8018022:	fb09 1102 	mla	r1, r9, r2, r1
 8018026:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801802a:	4567      	cmp	r7, ip
 801802c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018030:	d8e6      	bhi.n	8018000 <__multiply+0x10c>
 8018032:	9a01      	ldr	r2, [sp, #4]
 8018034:	50a9      	str	r1, [r5, r2]
 8018036:	3504      	adds	r5, #4
 8018038:	e79a      	b.n	8017f70 <__multiply+0x7c>
 801803a:	3e01      	subs	r6, #1
 801803c:	e79c      	b.n	8017f78 <__multiply+0x84>
 801803e:	bf00      	nop
 8018040:	08019713 	.word	0x08019713
 8018044:	08019724 	.word	0x08019724

08018048 <__pow5mult>:
 8018048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801804c:	4615      	mov	r5, r2
 801804e:	f012 0203 	ands.w	r2, r2, #3
 8018052:	4606      	mov	r6, r0
 8018054:	460f      	mov	r7, r1
 8018056:	d007      	beq.n	8018068 <__pow5mult+0x20>
 8018058:	4c25      	ldr	r4, [pc, #148]	; (80180f0 <__pow5mult+0xa8>)
 801805a:	3a01      	subs	r2, #1
 801805c:	2300      	movs	r3, #0
 801805e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018062:	f7ff fe9b 	bl	8017d9c <__multadd>
 8018066:	4607      	mov	r7, r0
 8018068:	10ad      	asrs	r5, r5, #2
 801806a:	d03d      	beq.n	80180e8 <__pow5mult+0xa0>
 801806c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801806e:	b97c      	cbnz	r4, 8018090 <__pow5mult+0x48>
 8018070:	2010      	movs	r0, #16
 8018072:	f7ff fe1d 	bl	8017cb0 <malloc>
 8018076:	4602      	mov	r2, r0
 8018078:	6270      	str	r0, [r6, #36]	; 0x24
 801807a:	b928      	cbnz	r0, 8018088 <__pow5mult+0x40>
 801807c:	4b1d      	ldr	r3, [pc, #116]	; (80180f4 <__pow5mult+0xac>)
 801807e:	481e      	ldr	r0, [pc, #120]	; (80180f8 <__pow5mult+0xb0>)
 8018080:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018084:	f000 fcd6 	bl	8018a34 <__assert_func>
 8018088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801808c:	6004      	str	r4, [r0, #0]
 801808e:	60c4      	str	r4, [r0, #12]
 8018090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018098:	b94c      	cbnz	r4, 80180ae <__pow5mult+0x66>
 801809a:	f240 2171 	movw	r1, #625	; 0x271
 801809e:	4630      	mov	r0, r6
 80180a0:	f7ff ff12 	bl	8017ec8 <__i2b>
 80180a4:	2300      	movs	r3, #0
 80180a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80180aa:	4604      	mov	r4, r0
 80180ac:	6003      	str	r3, [r0, #0]
 80180ae:	f04f 0900 	mov.w	r9, #0
 80180b2:	07eb      	lsls	r3, r5, #31
 80180b4:	d50a      	bpl.n	80180cc <__pow5mult+0x84>
 80180b6:	4639      	mov	r1, r7
 80180b8:	4622      	mov	r2, r4
 80180ba:	4630      	mov	r0, r6
 80180bc:	f7ff ff1a 	bl	8017ef4 <__multiply>
 80180c0:	4639      	mov	r1, r7
 80180c2:	4680      	mov	r8, r0
 80180c4:	4630      	mov	r0, r6
 80180c6:	f7ff fe47 	bl	8017d58 <_Bfree>
 80180ca:	4647      	mov	r7, r8
 80180cc:	106d      	asrs	r5, r5, #1
 80180ce:	d00b      	beq.n	80180e8 <__pow5mult+0xa0>
 80180d0:	6820      	ldr	r0, [r4, #0]
 80180d2:	b938      	cbnz	r0, 80180e4 <__pow5mult+0x9c>
 80180d4:	4622      	mov	r2, r4
 80180d6:	4621      	mov	r1, r4
 80180d8:	4630      	mov	r0, r6
 80180da:	f7ff ff0b 	bl	8017ef4 <__multiply>
 80180de:	6020      	str	r0, [r4, #0]
 80180e0:	f8c0 9000 	str.w	r9, [r0]
 80180e4:	4604      	mov	r4, r0
 80180e6:	e7e4      	b.n	80180b2 <__pow5mult+0x6a>
 80180e8:	4638      	mov	r0, r7
 80180ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180ee:	bf00      	nop
 80180f0:	08019870 	.word	0x08019870
 80180f4:	080196a1 	.word	0x080196a1
 80180f8:	08019724 	.word	0x08019724

080180fc <__lshift>:
 80180fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018100:	460c      	mov	r4, r1
 8018102:	6849      	ldr	r1, [r1, #4]
 8018104:	6923      	ldr	r3, [r4, #16]
 8018106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801810a:	68a3      	ldr	r3, [r4, #8]
 801810c:	4607      	mov	r7, r0
 801810e:	4691      	mov	r9, r2
 8018110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018114:	f108 0601 	add.w	r6, r8, #1
 8018118:	42b3      	cmp	r3, r6
 801811a:	db0b      	blt.n	8018134 <__lshift+0x38>
 801811c:	4638      	mov	r0, r7
 801811e:	f7ff fddb 	bl	8017cd8 <_Balloc>
 8018122:	4605      	mov	r5, r0
 8018124:	b948      	cbnz	r0, 801813a <__lshift+0x3e>
 8018126:	4602      	mov	r2, r0
 8018128:	4b2a      	ldr	r3, [pc, #168]	; (80181d4 <__lshift+0xd8>)
 801812a:	482b      	ldr	r0, [pc, #172]	; (80181d8 <__lshift+0xdc>)
 801812c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018130:	f000 fc80 	bl	8018a34 <__assert_func>
 8018134:	3101      	adds	r1, #1
 8018136:	005b      	lsls	r3, r3, #1
 8018138:	e7ee      	b.n	8018118 <__lshift+0x1c>
 801813a:	2300      	movs	r3, #0
 801813c:	f100 0114 	add.w	r1, r0, #20
 8018140:	f100 0210 	add.w	r2, r0, #16
 8018144:	4618      	mov	r0, r3
 8018146:	4553      	cmp	r3, sl
 8018148:	db37      	blt.n	80181ba <__lshift+0xbe>
 801814a:	6920      	ldr	r0, [r4, #16]
 801814c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018150:	f104 0314 	add.w	r3, r4, #20
 8018154:	f019 091f 	ands.w	r9, r9, #31
 8018158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801815c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018160:	d02f      	beq.n	80181c2 <__lshift+0xc6>
 8018162:	f1c9 0e20 	rsb	lr, r9, #32
 8018166:	468a      	mov	sl, r1
 8018168:	f04f 0c00 	mov.w	ip, #0
 801816c:	681a      	ldr	r2, [r3, #0]
 801816e:	fa02 f209 	lsl.w	r2, r2, r9
 8018172:	ea42 020c 	orr.w	r2, r2, ip
 8018176:	f84a 2b04 	str.w	r2, [sl], #4
 801817a:	f853 2b04 	ldr.w	r2, [r3], #4
 801817e:	4298      	cmp	r0, r3
 8018180:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018184:	d8f2      	bhi.n	801816c <__lshift+0x70>
 8018186:	1b03      	subs	r3, r0, r4
 8018188:	3b15      	subs	r3, #21
 801818a:	f023 0303 	bic.w	r3, r3, #3
 801818e:	3304      	adds	r3, #4
 8018190:	f104 0215 	add.w	r2, r4, #21
 8018194:	4290      	cmp	r0, r2
 8018196:	bf38      	it	cc
 8018198:	2304      	movcc	r3, #4
 801819a:	f841 c003 	str.w	ip, [r1, r3]
 801819e:	f1bc 0f00 	cmp.w	ip, #0
 80181a2:	d001      	beq.n	80181a8 <__lshift+0xac>
 80181a4:	f108 0602 	add.w	r6, r8, #2
 80181a8:	3e01      	subs	r6, #1
 80181aa:	4638      	mov	r0, r7
 80181ac:	612e      	str	r6, [r5, #16]
 80181ae:	4621      	mov	r1, r4
 80181b0:	f7ff fdd2 	bl	8017d58 <_Bfree>
 80181b4:	4628      	mov	r0, r5
 80181b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80181be:	3301      	adds	r3, #1
 80181c0:	e7c1      	b.n	8018146 <__lshift+0x4a>
 80181c2:	3904      	subs	r1, #4
 80181c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80181c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80181cc:	4298      	cmp	r0, r3
 80181ce:	d8f9      	bhi.n	80181c4 <__lshift+0xc8>
 80181d0:	e7ea      	b.n	80181a8 <__lshift+0xac>
 80181d2:	bf00      	nop
 80181d4:	08019713 	.word	0x08019713
 80181d8:	08019724 	.word	0x08019724

080181dc <__mcmp>:
 80181dc:	b530      	push	{r4, r5, lr}
 80181de:	6902      	ldr	r2, [r0, #16]
 80181e0:	690c      	ldr	r4, [r1, #16]
 80181e2:	1b12      	subs	r2, r2, r4
 80181e4:	d10e      	bne.n	8018204 <__mcmp+0x28>
 80181e6:	f100 0314 	add.w	r3, r0, #20
 80181ea:	3114      	adds	r1, #20
 80181ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80181f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80181f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80181f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80181fc:	42a5      	cmp	r5, r4
 80181fe:	d003      	beq.n	8018208 <__mcmp+0x2c>
 8018200:	d305      	bcc.n	801820e <__mcmp+0x32>
 8018202:	2201      	movs	r2, #1
 8018204:	4610      	mov	r0, r2
 8018206:	bd30      	pop	{r4, r5, pc}
 8018208:	4283      	cmp	r3, r0
 801820a:	d3f3      	bcc.n	80181f4 <__mcmp+0x18>
 801820c:	e7fa      	b.n	8018204 <__mcmp+0x28>
 801820e:	f04f 32ff 	mov.w	r2, #4294967295
 8018212:	e7f7      	b.n	8018204 <__mcmp+0x28>

08018214 <__mdiff>:
 8018214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018218:	460c      	mov	r4, r1
 801821a:	4606      	mov	r6, r0
 801821c:	4611      	mov	r1, r2
 801821e:	4620      	mov	r0, r4
 8018220:	4690      	mov	r8, r2
 8018222:	f7ff ffdb 	bl	80181dc <__mcmp>
 8018226:	1e05      	subs	r5, r0, #0
 8018228:	d110      	bne.n	801824c <__mdiff+0x38>
 801822a:	4629      	mov	r1, r5
 801822c:	4630      	mov	r0, r6
 801822e:	f7ff fd53 	bl	8017cd8 <_Balloc>
 8018232:	b930      	cbnz	r0, 8018242 <__mdiff+0x2e>
 8018234:	4b3a      	ldr	r3, [pc, #232]	; (8018320 <__mdiff+0x10c>)
 8018236:	4602      	mov	r2, r0
 8018238:	f240 2132 	movw	r1, #562	; 0x232
 801823c:	4839      	ldr	r0, [pc, #228]	; (8018324 <__mdiff+0x110>)
 801823e:	f000 fbf9 	bl	8018a34 <__assert_func>
 8018242:	2301      	movs	r3, #1
 8018244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801824c:	bfa4      	itt	ge
 801824e:	4643      	movge	r3, r8
 8018250:	46a0      	movge	r8, r4
 8018252:	4630      	mov	r0, r6
 8018254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018258:	bfa6      	itte	ge
 801825a:	461c      	movge	r4, r3
 801825c:	2500      	movge	r5, #0
 801825e:	2501      	movlt	r5, #1
 8018260:	f7ff fd3a 	bl	8017cd8 <_Balloc>
 8018264:	b920      	cbnz	r0, 8018270 <__mdiff+0x5c>
 8018266:	4b2e      	ldr	r3, [pc, #184]	; (8018320 <__mdiff+0x10c>)
 8018268:	4602      	mov	r2, r0
 801826a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801826e:	e7e5      	b.n	801823c <__mdiff+0x28>
 8018270:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018274:	6926      	ldr	r6, [r4, #16]
 8018276:	60c5      	str	r5, [r0, #12]
 8018278:	f104 0914 	add.w	r9, r4, #20
 801827c:	f108 0514 	add.w	r5, r8, #20
 8018280:	f100 0e14 	add.w	lr, r0, #20
 8018284:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801828c:	f108 0210 	add.w	r2, r8, #16
 8018290:	46f2      	mov	sl, lr
 8018292:	2100      	movs	r1, #0
 8018294:	f859 3b04 	ldr.w	r3, [r9], #4
 8018298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801829c:	fa1f f883 	uxth.w	r8, r3
 80182a0:	fa11 f18b 	uxtah	r1, r1, fp
 80182a4:	0c1b      	lsrs	r3, r3, #16
 80182a6:	eba1 0808 	sub.w	r8, r1, r8
 80182aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80182ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80182b2:	fa1f f888 	uxth.w	r8, r8
 80182b6:	1419      	asrs	r1, r3, #16
 80182b8:	454e      	cmp	r6, r9
 80182ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80182be:	f84a 3b04 	str.w	r3, [sl], #4
 80182c2:	d8e7      	bhi.n	8018294 <__mdiff+0x80>
 80182c4:	1b33      	subs	r3, r6, r4
 80182c6:	3b15      	subs	r3, #21
 80182c8:	f023 0303 	bic.w	r3, r3, #3
 80182cc:	3304      	adds	r3, #4
 80182ce:	3415      	adds	r4, #21
 80182d0:	42a6      	cmp	r6, r4
 80182d2:	bf38      	it	cc
 80182d4:	2304      	movcc	r3, #4
 80182d6:	441d      	add	r5, r3
 80182d8:	4473      	add	r3, lr
 80182da:	469e      	mov	lr, r3
 80182dc:	462e      	mov	r6, r5
 80182de:	4566      	cmp	r6, ip
 80182e0:	d30e      	bcc.n	8018300 <__mdiff+0xec>
 80182e2:	f10c 0203 	add.w	r2, ip, #3
 80182e6:	1b52      	subs	r2, r2, r5
 80182e8:	f022 0203 	bic.w	r2, r2, #3
 80182ec:	3d03      	subs	r5, #3
 80182ee:	45ac      	cmp	ip, r5
 80182f0:	bf38      	it	cc
 80182f2:	2200      	movcc	r2, #0
 80182f4:	441a      	add	r2, r3
 80182f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80182fa:	b17b      	cbz	r3, 801831c <__mdiff+0x108>
 80182fc:	6107      	str	r7, [r0, #16]
 80182fe:	e7a3      	b.n	8018248 <__mdiff+0x34>
 8018300:	f856 8b04 	ldr.w	r8, [r6], #4
 8018304:	fa11 f288 	uxtah	r2, r1, r8
 8018308:	1414      	asrs	r4, r2, #16
 801830a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801830e:	b292      	uxth	r2, r2
 8018310:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018314:	f84e 2b04 	str.w	r2, [lr], #4
 8018318:	1421      	asrs	r1, r4, #16
 801831a:	e7e0      	b.n	80182de <__mdiff+0xca>
 801831c:	3f01      	subs	r7, #1
 801831e:	e7ea      	b.n	80182f6 <__mdiff+0xe2>
 8018320:	08019713 	.word	0x08019713
 8018324:	08019724 	.word	0x08019724

08018328 <__d2b>:
 8018328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801832c:	4689      	mov	r9, r1
 801832e:	2101      	movs	r1, #1
 8018330:	ec57 6b10 	vmov	r6, r7, d0
 8018334:	4690      	mov	r8, r2
 8018336:	f7ff fccf 	bl	8017cd8 <_Balloc>
 801833a:	4604      	mov	r4, r0
 801833c:	b930      	cbnz	r0, 801834c <__d2b+0x24>
 801833e:	4602      	mov	r2, r0
 8018340:	4b25      	ldr	r3, [pc, #148]	; (80183d8 <__d2b+0xb0>)
 8018342:	4826      	ldr	r0, [pc, #152]	; (80183dc <__d2b+0xb4>)
 8018344:	f240 310a 	movw	r1, #778	; 0x30a
 8018348:	f000 fb74 	bl	8018a34 <__assert_func>
 801834c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018354:	bb35      	cbnz	r5, 80183a4 <__d2b+0x7c>
 8018356:	2e00      	cmp	r6, #0
 8018358:	9301      	str	r3, [sp, #4]
 801835a:	d028      	beq.n	80183ae <__d2b+0x86>
 801835c:	4668      	mov	r0, sp
 801835e:	9600      	str	r6, [sp, #0]
 8018360:	f7ff fd82 	bl	8017e68 <__lo0bits>
 8018364:	9900      	ldr	r1, [sp, #0]
 8018366:	b300      	cbz	r0, 80183aa <__d2b+0x82>
 8018368:	9a01      	ldr	r2, [sp, #4]
 801836a:	f1c0 0320 	rsb	r3, r0, #32
 801836e:	fa02 f303 	lsl.w	r3, r2, r3
 8018372:	430b      	orrs	r3, r1
 8018374:	40c2      	lsrs	r2, r0
 8018376:	6163      	str	r3, [r4, #20]
 8018378:	9201      	str	r2, [sp, #4]
 801837a:	9b01      	ldr	r3, [sp, #4]
 801837c:	61a3      	str	r3, [r4, #24]
 801837e:	2b00      	cmp	r3, #0
 8018380:	bf14      	ite	ne
 8018382:	2202      	movne	r2, #2
 8018384:	2201      	moveq	r2, #1
 8018386:	6122      	str	r2, [r4, #16]
 8018388:	b1d5      	cbz	r5, 80183c0 <__d2b+0x98>
 801838a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801838e:	4405      	add	r5, r0
 8018390:	f8c9 5000 	str.w	r5, [r9]
 8018394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018398:	f8c8 0000 	str.w	r0, [r8]
 801839c:	4620      	mov	r0, r4
 801839e:	b003      	add	sp, #12
 80183a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80183a8:	e7d5      	b.n	8018356 <__d2b+0x2e>
 80183aa:	6161      	str	r1, [r4, #20]
 80183ac:	e7e5      	b.n	801837a <__d2b+0x52>
 80183ae:	a801      	add	r0, sp, #4
 80183b0:	f7ff fd5a 	bl	8017e68 <__lo0bits>
 80183b4:	9b01      	ldr	r3, [sp, #4]
 80183b6:	6163      	str	r3, [r4, #20]
 80183b8:	2201      	movs	r2, #1
 80183ba:	6122      	str	r2, [r4, #16]
 80183bc:	3020      	adds	r0, #32
 80183be:	e7e3      	b.n	8018388 <__d2b+0x60>
 80183c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80183c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80183c8:	f8c9 0000 	str.w	r0, [r9]
 80183cc:	6918      	ldr	r0, [r3, #16]
 80183ce:	f7ff fd2b 	bl	8017e28 <__hi0bits>
 80183d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80183d6:	e7df      	b.n	8018398 <__d2b+0x70>
 80183d8:	08019713 	.word	0x08019713
 80183dc:	08019724 	.word	0x08019724

080183e0 <_calloc_r>:
 80183e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80183e2:	fba1 2402 	umull	r2, r4, r1, r2
 80183e6:	b94c      	cbnz	r4, 80183fc <_calloc_r+0x1c>
 80183e8:	4611      	mov	r1, r2
 80183ea:	9201      	str	r2, [sp, #4]
 80183ec:	f7fd fe04 	bl	8015ff8 <_malloc_r>
 80183f0:	9a01      	ldr	r2, [sp, #4]
 80183f2:	4605      	mov	r5, r0
 80183f4:	b930      	cbnz	r0, 8018404 <_calloc_r+0x24>
 80183f6:	4628      	mov	r0, r5
 80183f8:	b003      	add	sp, #12
 80183fa:	bd30      	pop	{r4, r5, pc}
 80183fc:	220c      	movs	r2, #12
 80183fe:	6002      	str	r2, [r0, #0]
 8018400:	2500      	movs	r5, #0
 8018402:	e7f8      	b.n	80183f6 <_calloc_r+0x16>
 8018404:	4621      	mov	r1, r4
 8018406:	f7fd fdcf 	bl	8015fa8 <memset>
 801840a:	e7f4      	b.n	80183f6 <_calloc_r+0x16>

0801840c <_free_r>:
 801840c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801840e:	2900      	cmp	r1, #0
 8018410:	d044      	beq.n	801849c <_free_r+0x90>
 8018412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018416:	9001      	str	r0, [sp, #4]
 8018418:	2b00      	cmp	r3, #0
 801841a:	f1a1 0404 	sub.w	r4, r1, #4
 801841e:	bfb8      	it	lt
 8018420:	18e4      	addlt	r4, r4, r3
 8018422:	f7ff fc4d 	bl	8017cc0 <__malloc_lock>
 8018426:	4a1e      	ldr	r2, [pc, #120]	; (80184a0 <_free_r+0x94>)
 8018428:	9801      	ldr	r0, [sp, #4]
 801842a:	6813      	ldr	r3, [r2, #0]
 801842c:	b933      	cbnz	r3, 801843c <_free_r+0x30>
 801842e:	6063      	str	r3, [r4, #4]
 8018430:	6014      	str	r4, [r2, #0]
 8018432:	b003      	add	sp, #12
 8018434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018438:	f7ff bc48 	b.w	8017ccc <__malloc_unlock>
 801843c:	42a3      	cmp	r3, r4
 801843e:	d908      	bls.n	8018452 <_free_r+0x46>
 8018440:	6825      	ldr	r5, [r4, #0]
 8018442:	1961      	adds	r1, r4, r5
 8018444:	428b      	cmp	r3, r1
 8018446:	bf01      	itttt	eq
 8018448:	6819      	ldreq	r1, [r3, #0]
 801844a:	685b      	ldreq	r3, [r3, #4]
 801844c:	1949      	addeq	r1, r1, r5
 801844e:	6021      	streq	r1, [r4, #0]
 8018450:	e7ed      	b.n	801842e <_free_r+0x22>
 8018452:	461a      	mov	r2, r3
 8018454:	685b      	ldr	r3, [r3, #4]
 8018456:	b10b      	cbz	r3, 801845c <_free_r+0x50>
 8018458:	42a3      	cmp	r3, r4
 801845a:	d9fa      	bls.n	8018452 <_free_r+0x46>
 801845c:	6811      	ldr	r1, [r2, #0]
 801845e:	1855      	adds	r5, r2, r1
 8018460:	42a5      	cmp	r5, r4
 8018462:	d10b      	bne.n	801847c <_free_r+0x70>
 8018464:	6824      	ldr	r4, [r4, #0]
 8018466:	4421      	add	r1, r4
 8018468:	1854      	adds	r4, r2, r1
 801846a:	42a3      	cmp	r3, r4
 801846c:	6011      	str	r1, [r2, #0]
 801846e:	d1e0      	bne.n	8018432 <_free_r+0x26>
 8018470:	681c      	ldr	r4, [r3, #0]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	6053      	str	r3, [r2, #4]
 8018476:	4421      	add	r1, r4
 8018478:	6011      	str	r1, [r2, #0]
 801847a:	e7da      	b.n	8018432 <_free_r+0x26>
 801847c:	d902      	bls.n	8018484 <_free_r+0x78>
 801847e:	230c      	movs	r3, #12
 8018480:	6003      	str	r3, [r0, #0]
 8018482:	e7d6      	b.n	8018432 <_free_r+0x26>
 8018484:	6825      	ldr	r5, [r4, #0]
 8018486:	1961      	adds	r1, r4, r5
 8018488:	428b      	cmp	r3, r1
 801848a:	bf04      	itt	eq
 801848c:	6819      	ldreq	r1, [r3, #0]
 801848e:	685b      	ldreq	r3, [r3, #4]
 8018490:	6063      	str	r3, [r4, #4]
 8018492:	bf04      	itt	eq
 8018494:	1949      	addeq	r1, r1, r5
 8018496:	6021      	streq	r1, [r4, #0]
 8018498:	6054      	str	r4, [r2, #4]
 801849a:	e7ca      	b.n	8018432 <_free_r+0x26>
 801849c:	b003      	add	sp, #12
 801849e:	bd30      	pop	{r4, r5, pc}
 80184a0:	24007388 	.word	0x24007388

080184a4 <__ssputs_r>:
 80184a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184a8:	688e      	ldr	r6, [r1, #8]
 80184aa:	429e      	cmp	r6, r3
 80184ac:	4682      	mov	sl, r0
 80184ae:	460c      	mov	r4, r1
 80184b0:	4690      	mov	r8, r2
 80184b2:	461f      	mov	r7, r3
 80184b4:	d838      	bhi.n	8018528 <__ssputs_r+0x84>
 80184b6:	898a      	ldrh	r2, [r1, #12]
 80184b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80184bc:	d032      	beq.n	8018524 <__ssputs_r+0x80>
 80184be:	6825      	ldr	r5, [r4, #0]
 80184c0:	6909      	ldr	r1, [r1, #16]
 80184c2:	eba5 0901 	sub.w	r9, r5, r1
 80184c6:	6965      	ldr	r5, [r4, #20]
 80184c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80184cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80184d0:	3301      	adds	r3, #1
 80184d2:	444b      	add	r3, r9
 80184d4:	106d      	asrs	r5, r5, #1
 80184d6:	429d      	cmp	r5, r3
 80184d8:	bf38      	it	cc
 80184da:	461d      	movcc	r5, r3
 80184dc:	0553      	lsls	r3, r2, #21
 80184de:	d531      	bpl.n	8018544 <__ssputs_r+0xa0>
 80184e0:	4629      	mov	r1, r5
 80184e2:	f7fd fd89 	bl	8015ff8 <_malloc_r>
 80184e6:	4606      	mov	r6, r0
 80184e8:	b950      	cbnz	r0, 8018500 <__ssputs_r+0x5c>
 80184ea:	230c      	movs	r3, #12
 80184ec:	f8ca 3000 	str.w	r3, [sl]
 80184f0:	89a3      	ldrh	r3, [r4, #12]
 80184f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184f6:	81a3      	strh	r3, [r4, #12]
 80184f8:	f04f 30ff 	mov.w	r0, #4294967295
 80184fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018500:	6921      	ldr	r1, [r4, #16]
 8018502:	464a      	mov	r2, r9
 8018504:	f7fd fd42 	bl	8015f8c <memcpy>
 8018508:	89a3      	ldrh	r3, [r4, #12]
 801850a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801850e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018512:	81a3      	strh	r3, [r4, #12]
 8018514:	6126      	str	r6, [r4, #16]
 8018516:	6165      	str	r5, [r4, #20]
 8018518:	444e      	add	r6, r9
 801851a:	eba5 0509 	sub.w	r5, r5, r9
 801851e:	6026      	str	r6, [r4, #0]
 8018520:	60a5      	str	r5, [r4, #8]
 8018522:	463e      	mov	r6, r7
 8018524:	42be      	cmp	r6, r7
 8018526:	d900      	bls.n	801852a <__ssputs_r+0x86>
 8018528:	463e      	mov	r6, r7
 801852a:	6820      	ldr	r0, [r4, #0]
 801852c:	4632      	mov	r2, r6
 801852e:	4641      	mov	r1, r8
 8018530:	f000 fae4 	bl	8018afc <memmove>
 8018534:	68a3      	ldr	r3, [r4, #8]
 8018536:	1b9b      	subs	r3, r3, r6
 8018538:	60a3      	str	r3, [r4, #8]
 801853a:	6823      	ldr	r3, [r4, #0]
 801853c:	4433      	add	r3, r6
 801853e:	6023      	str	r3, [r4, #0]
 8018540:	2000      	movs	r0, #0
 8018542:	e7db      	b.n	80184fc <__ssputs_r+0x58>
 8018544:	462a      	mov	r2, r5
 8018546:	f000 faf3 	bl	8018b30 <_realloc_r>
 801854a:	4606      	mov	r6, r0
 801854c:	2800      	cmp	r0, #0
 801854e:	d1e1      	bne.n	8018514 <__ssputs_r+0x70>
 8018550:	6921      	ldr	r1, [r4, #16]
 8018552:	4650      	mov	r0, sl
 8018554:	f7ff ff5a 	bl	801840c <_free_r>
 8018558:	e7c7      	b.n	80184ea <__ssputs_r+0x46>
	...

0801855c <_svfiprintf_r>:
 801855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018560:	4698      	mov	r8, r3
 8018562:	898b      	ldrh	r3, [r1, #12]
 8018564:	061b      	lsls	r3, r3, #24
 8018566:	b09d      	sub	sp, #116	; 0x74
 8018568:	4607      	mov	r7, r0
 801856a:	460d      	mov	r5, r1
 801856c:	4614      	mov	r4, r2
 801856e:	d50e      	bpl.n	801858e <_svfiprintf_r+0x32>
 8018570:	690b      	ldr	r3, [r1, #16]
 8018572:	b963      	cbnz	r3, 801858e <_svfiprintf_r+0x32>
 8018574:	2140      	movs	r1, #64	; 0x40
 8018576:	f7fd fd3f 	bl	8015ff8 <_malloc_r>
 801857a:	6028      	str	r0, [r5, #0]
 801857c:	6128      	str	r0, [r5, #16]
 801857e:	b920      	cbnz	r0, 801858a <_svfiprintf_r+0x2e>
 8018580:	230c      	movs	r3, #12
 8018582:	603b      	str	r3, [r7, #0]
 8018584:	f04f 30ff 	mov.w	r0, #4294967295
 8018588:	e0d1      	b.n	801872e <_svfiprintf_r+0x1d2>
 801858a:	2340      	movs	r3, #64	; 0x40
 801858c:	616b      	str	r3, [r5, #20]
 801858e:	2300      	movs	r3, #0
 8018590:	9309      	str	r3, [sp, #36]	; 0x24
 8018592:	2320      	movs	r3, #32
 8018594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018598:	f8cd 800c 	str.w	r8, [sp, #12]
 801859c:	2330      	movs	r3, #48	; 0x30
 801859e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018748 <_svfiprintf_r+0x1ec>
 80185a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80185a6:	f04f 0901 	mov.w	r9, #1
 80185aa:	4623      	mov	r3, r4
 80185ac:	469a      	mov	sl, r3
 80185ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185b2:	b10a      	cbz	r2, 80185b8 <_svfiprintf_r+0x5c>
 80185b4:	2a25      	cmp	r2, #37	; 0x25
 80185b6:	d1f9      	bne.n	80185ac <_svfiprintf_r+0x50>
 80185b8:	ebba 0b04 	subs.w	fp, sl, r4
 80185bc:	d00b      	beq.n	80185d6 <_svfiprintf_r+0x7a>
 80185be:	465b      	mov	r3, fp
 80185c0:	4622      	mov	r2, r4
 80185c2:	4629      	mov	r1, r5
 80185c4:	4638      	mov	r0, r7
 80185c6:	f7ff ff6d 	bl	80184a4 <__ssputs_r>
 80185ca:	3001      	adds	r0, #1
 80185cc:	f000 80aa 	beq.w	8018724 <_svfiprintf_r+0x1c8>
 80185d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80185d2:	445a      	add	r2, fp
 80185d4:	9209      	str	r2, [sp, #36]	; 0x24
 80185d6:	f89a 3000 	ldrb.w	r3, [sl]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	f000 80a2 	beq.w	8018724 <_svfiprintf_r+0x1c8>
 80185e0:	2300      	movs	r3, #0
 80185e2:	f04f 32ff 	mov.w	r2, #4294967295
 80185e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80185ea:	f10a 0a01 	add.w	sl, sl, #1
 80185ee:	9304      	str	r3, [sp, #16]
 80185f0:	9307      	str	r3, [sp, #28]
 80185f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80185f6:	931a      	str	r3, [sp, #104]	; 0x68
 80185f8:	4654      	mov	r4, sl
 80185fa:	2205      	movs	r2, #5
 80185fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018600:	4851      	ldr	r0, [pc, #324]	; (8018748 <_svfiprintf_r+0x1ec>)
 8018602:	f7e7 fe85 	bl	8000310 <memchr>
 8018606:	9a04      	ldr	r2, [sp, #16]
 8018608:	b9d8      	cbnz	r0, 8018642 <_svfiprintf_r+0xe6>
 801860a:	06d0      	lsls	r0, r2, #27
 801860c:	bf44      	itt	mi
 801860e:	2320      	movmi	r3, #32
 8018610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018614:	0711      	lsls	r1, r2, #28
 8018616:	bf44      	itt	mi
 8018618:	232b      	movmi	r3, #43	; 0x2b
 801861a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801861e:	f89a 3000 	ldrb.w	r3, [sl]
 8018622:	2b2a      	cmp	r3, #42	; 0x2a
 8018624:	d015      	beq.n	8018652 <_svfiprintf_r+0xf6>
 8018626:	9a07      	ldr	r2, [sp, #28]
 8018628:	4654      	mov	r4, sl
 801862a:	2000      	movs	r0, #0
 801862c:	f04f 0c0a 	mov.w	ip, #10
 8018630:	4621      	mov	r1, r4
 8018632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018636:	3b30      	subs	r3, #48	; 0x30
 8018638:	2b09      	cmp	r3, #9
 801863a:	d94e      	bls.n	80186da <_svfiprintf_r+0x17e>
 801863c:	b1b0      	cbz	r0, 801866c <_svfiprintf_r+0x110>
 801863e:	9207      	str	r2, [sp, #28]
 8018640:	e014      	b.n	801866c <_svfiprintf_r+0x110>
 8018642:	eba0 0308 	sub.w	r3, r0, r8
 8018646:	fa09 f303 	lsl.w	r3, r9, r3
 801864a:	4313      	orrs	r3, r2
 801864c:	9304      	str	r3, [sp, #16]
 801864e:	46a2      	mov	sl, r4
 8018650:	e7d2      	b.n	80185f8 <_svfiprintf_r+0x9c>
 8018652:	9b03      	ldr	r3, [sp, #12]
 8018654:	1d19      	adds	r1, r3, #4
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	9103      	str	r1, [sp, #12]
 801865a:	2b00      	cmp	r3, #0
 801865c:	bfbb      	ittet	lt
 801865e:	425b      	neglt	r3, r3
 8018660:	f042 0202 	orrlt.w	r2, r2, #2
 8018664:	9307      	strge	r3, [sp, #28]
 8018666:	9307      	strlt	r3, [sp, #28]
 8018668:	bfb8      	it	lt
 801866a:	9204      	strlt	r2, [sp, #16]
 801866c:	7823      	ldrb	r3, [r4, #0]
 801866e:	2b2e      	cmp	r3, #46	; 0x2e
 8018670:	d10c      	bne.n	801868c <_svfiprintf_r+0x130>
 8018672:	7863      	ldrb	r3, [r4, #1]
 8018674:	2b2a      	cmp	r3, #42	; 0x2a
 8018676:	d135      	bne.n	80186e4 <_svfiprintf_r+0x188>
 8018678:	9b03      	ldr	r3, [sp, #12]
 801867a:	1d1a      	adds	r2, r3, #4
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	9203      	str	r2, [sp, #12]
 8018680:	2b00      	cmp	r3, #0
 8018682:	bfb8      	it	lt
 8018684:	f04f 33ff 	movlt.w	r3, #4294967295
 8018688:	3402      	adds	r4, #2
 801868a:	9305      	str	r3, [sp, #20]
 801868c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018758 <_svfiprintf_r+0x1fc>
 8018690:	7821      	ldrb	r1, [r4, #0]
 8018692:	2203      	movs	r2, #3
 8018694:	4650      	mov	r0, sl
 8018696:	f7e7 fe3b 	bl	8000310 <memchr>
 801869a:	b140      	cbz	r0, 80186ae <_svfiprintf_r+0x152>
 801869c:	2340      	movs	r3, #64	; 0x40
 801869e:	eba0 000a 	sub.w	r0, r0, sl
 80186a2:	fa03 f000 	lsl.w	r0, r3, r0
 80186a6:	9b04      	ldr	r3, [sp, #16]
 80186a8:	4303      	orrs	r3, r0
 80186aa:	3401      	adds	r4, #1
 80186ac:	9304      	str	r3, [sp, #16]
 80186ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186b2:	4826      	ldr	r0, [pc, #152]	; (801874c <_svfiprintf_r+0x1f0>)
 80186b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80186b8:	2206      	movs	r2, #6
 80186ba:	f7e7 fe29 	bl	8000310 <memchr>
 80186be:	2800      	cmp	r0, #0
 80186c0:	d038      	beq.n	8018734 <_svfiprintf_r+0x1d8>
 80186c2:	4b23      	ldr	r3, [pc, #140]	; (8018750 <_svfiprintf_r+0x1f4>)
 80186c4:	bb1b      	cbnz	r3, 801870e <_svfiprintf_r+0x1b2>
 80186c6:	9b03      	ldr	r3, [sp, #12]
 80186c8:	3307      	adds	r3, #7
 80186ca:	f023 0307 	bic.w	r3, r3, #7
 80186ce:	3308      	adds	r3, #8
 80186d0:	9303      	str	r3, [sp, #12]
 80186d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186d4:	4433      	add	r3, r6
 80186d6:	9309      	str	r3, [sp, #36]	; 0x24
 80186d8:	e767      	b.n	80185aa <_svfiprintf_r+0x4e>
 80186da:	fb0c 3202 	mla	r2, ip, r2, r3
 80186de:	460c      	mov	r4, r1
 80186e0:	2001      	movs	r0, #1
 80186e2:	e7a5      	b.n	8018630 <_svfiprintf_r+0xd4>
 80186e4:	2300      	movs	r3, #0
 80186e6:	3401      	adds	r4, #1
 80186e8:	9305      	str	r3, [sp, #20]
 80186ea:	4619      	mov	r1, r3
 80186ec:	f04f 0c0a 	mov.w	ip, #10
 80186f0:	4620      	mov	r0, r4
 80186f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186f6:	3a30      	subs	r2, #48	; 0x30
 80186f8:	2a09      	cmp	r2, #9
 80186fa:	d903      	bls.n	8018704 <_svfiprintf_r+0x1a8>
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d0c5      	beq.n	801868c <_svfiprintf_r+0x130>
 8018700:	9105      	str	r1, [sp, #20]
 8018702:	e7c3      	b.n	801868c <_svfiprintf_r+0x130>
 8018704:	fb0c 2101 	mla	r1, ip, r1, r2
 8018708:	4604      	mov	r4, r0
 801870a:	2301      	movs	r3, #1
 801870c:	e7f0      	b.n	80186f0 <_svfiprintf_r+0x194>
 801870e:	ab03      	add	r3, sp, #12
 8018710:	9300      	str	r3, [sp, #0]
 8018712:	462a      	mov	r2, r5
 8018714:	4b0f      	ldr	r3, [pc, #60]	; (8018754 <_svfiprintf_r+0x1f8>)
 8018716:	a904      	add	r1, sp, #16
 8018718:	4638      	mov	r0, r7
 801871a:	f7fd fd71 	bl	8016200 <_printf_float>
 801871e:	1c42      	adds	r2, r0, #1
 8018720:	4606      	mov	r6, r0
 8018722:	d1d6      	bne.n	80186d2 <_svfiprintf_r+0x176>
 8018724:	89ab      	ldrh	r3, [r5, #12]
 8018726:	065b      	lsls	r3, r3, #25
 8018728:	f53f af2c 	bmi.w	8018584 <_svfiprintf_r+0x28>
 801872c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801872e:	b01d      	add	sp, #116	; 0x74
 8018730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018734:	ab03      	add	r3, sp, #12
 8018736:	9300      	str	r3, [sp, #0]
 8018738:	462a      	mov	r2, r5
 801873a:	4b06      	ldr	r3, [pc, #24]	; (8018754 <_svfiprintf_r+0x1f8>)
 801873c:	a904      	add	r1, sp, #16
 801873e:	4638      	mov	r0, r7
 8018740:	f7fd ffea 	bl	8016718 <_printf_i>
 8018744:	e7eb      	b.n	801871e <_svfiprintf_r+0x1c2>
 8018746:	bf00      	nop
 8018748:	0801987c 	.word	0x0801987c
 801874c:	08019886 	.word	0x08019886
 8018750:	08016201 	.word	0x08016201
 8018754:	080184a5 	.word	0x080184a5
 8018758:	08019882 	.word	0x08019882

0801875c <__sfputc_r>:
 801875c:	6893      	ldr	r3, [r2, #8]
 801875e:	3b01      	subs	r3, #1
 8018760:	2b00      	cmp	r3, #0
 8018762:	b410      	push	{r4}
 8018764:	6093      	str	r3, [r2, #8]
 8018766:	da08      	bge.n	801877a <__sfputc_r+0x1e>
 8018768:	6994      	ldr	r4, [r2, #24]
 801876a:	42a3      	cmp	r3, r4
 801876c:	db01      	blt.n	8018772 <__sfputc_r+0x16>
 801876e:	290a      	cmp	r1, #10
 8018770:	d103      	bne.n	801877a <__sfputc_r+0x1e>
 8018772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018776:	f7fe ba1f 	b.w	8016bb8 <__swbuf_r>
 801877a:	6813      	ldr	r3, [r2, #0]
 801877c:	1c58      	adds	r0, r3, #1
 801877e:	6010      	str	r0, [r2, #0]
 8018780:	7019      	strb	r1, [r3, #0]
 8018782:	4608      	mov	r0, r1
 8018784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018788:	4770      	bx	lr

0801878a <__sfputs_r>:
 801878a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801878c:	4606      	mov	r6, r0
 801878e:	460f      	mov	r7, r1
 8018790:	4614      	mov	r4, r2
 8018792:	18d5      	adds	r5, r2, r3
 8018794:	42ac      	cmp	r4, r5
 8018796:	d101      	bne.n	801879c <__sfputs_r+0x12>
 8018798:	2000      	movs	r0, #0
 801879a:	e007      	b.n	80187ac <__sfputs_r+0x22>
 801879c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187a0:	463a      	mov	r2, r7
 80187a2:	4630      	mov	r0, r6
 80187a4:	f7ff ffda 	bl	801875c <__sfputc_r>
 80187a8:	1c43      	adds	r3, r0, #1
 80187aa:	d1f3      	bne.n	8018794 <__sfputs_r+0xa>
 80187ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080187b0 <_vfiprintf_r>:
 80187b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b4:	460d      	mov	r5, r1
 80187b6:	b09d      	sub	sp, #116	; 0x74
 80187b8:	4614      	mov	r4, r2
 80187ba:	4698      	mov	r8, r3
 80187bc:	4606      	mov	r6, r0
 80187be:	b118      	cbz	r0, 80187c8 <_vfiprintf_r+0x18>
 80187c0:	6983      	ldr	r3, [r0, #24]
 80187c2:	b90b      	cbnz	r3, 80187c8 <_vfiprintf_r+0x18>
 80187c4:	f7fd fb1c 	bl	8015e00 <__sinit>
 80187c8:	4b89      	ldr	r3, [pc, #548]	; (80189f0 <_vfiprintf_r+0x240>)
 80187ca:	429d      	cmp	r5, r3
 80187cc:	d11b      	bne.n	8018806 <_vfiprintf_r+0x56>
 80187ce:	6875      	ldr	r5, [r6, #4]
 80187d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187d2:	07d9      	lsls	r1, r3, #31
 80187d4:	d405      	bmi.n	80187e2 <_vfiprintf_r+0x32>
 80187d6:	89ab      	ldrh	r3, [r5, #12]
 80187d8:	059a      	lsls	r2, r3, #22
 80187da:	d402      	bmi.n	80187e2 <_vfiprintf_r+0x32>
 80187dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187de:	f7fd fbd2 	bl	8015f86 <__retarget_lock_acquire_recursive>
 80187e2:	89ab      	ldrh	r3, [r5, #12]
 80187e4:	071b      	lsls	r3, r3, #28
 80187e6:	d501      	bpl.n	80187ec <_vfiprintf_r+0x3c>
 80187e8:	692b      	ldr	r3, [r5, #16]
 80187ea:	b9eb      	cbnz	r3, 8018828 <_vfiprintf_r+0x78>
 80187ec:	4629      	mov	r1, r5
 80187ee:	4630      	mov	r0, r6
 80187f0:	f7fe fa46 	bl	8016c80 <__swsetup_r>
 80187f4:	b1c0      	cbz	r0, 8018828 <_vfiprintf_r+0x78>
 80187f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187f8:	07dc      	lsls	r4, r3, #31
 80187fa:	d50e      	bpl.n	801881a <_vfiprintf_r+0x6a>
 80187fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018800:	b01d      	add	sp, #116	; 0x74
 8018802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018806:	4b7b      	ldr	r3, [pc, #492]	; (80189f4 <_vfiprintf_r+0x244>)
 8018808:	429d      	cmp	r5, r3
 801880a:	d101      	bne.n	8018810 <_vfiprintf_r+0x60>
 801880c:	68b5      	ldr	r5, [r6, #8]
 801880e:	e7df      	b.n	80187d0 <_vfiprintf_r+0x20>
 8018810:	4b79      	ldr	r3, [pc, #484]	; (80189f8 <_vfiprintf_r+0x248>)
 8018812:	429d      	cmp	r5, r3
 8018814:	bf08      	it	eq
 8018816:	68f5      	ldreq	r5, [r6, #12]
 8018818:	e7da      	b.n	80187d0 <_vfiprintf_r+0x20>
 801881a:	89ab      	ldrh	r3, [r5, #12]
 801881c:	0598      	lsls	r0, r3, #22
 801881e:	d4ed      	bmi.n	80187fc <_vfiprintf_r+0x4c>
 8018820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018822:	f7fd fbb2 	bl	8015f8a <__retarget_lock_release_recursive>
 8018826:	e7e9      	b.n	80187fc <_vfiprintf_r+0x4c>
 8018828:	2300      	movs	r3, #0
 801882a:	9309      	str	r3, [sp, #36]	; 0x24
 801882c:	2320      	movs	r3, #32
 801882e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018832:	f8cd 800c 	str.w	r8, [sp, #12]
 8018836:	2330      	movs	r3, #48	; 0x30
 8018838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80189fc <_vfiprintf_r+0x24c>
 801883c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018840:	f04f 0901 	mov.w	r9, #1
 8018844:	4623      	mov	r3, r4
 8018846:	469a      	mov	sl, r3
 8018848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801884c:	b10a      	cbz	r2, 8018852 <_vfiprintf_r+0xa2>
 801884e:	2a25      	cmp	r2, #37	; 0x25
 8018850:	d1f9      	bne.n	8018846 <_vfiprintf_r+0x96>
 8018852:	ebba 0b04 	subs.w	fp, sl, r4
 8018856:	d00b      	beq.n	8018870 <_vfiprintf_r+0xc0>
 8018858:	465b      	mov	r3, fp
 801885a:	4622      	mov	r2, r4
 801885c:	4629      	mov	r1, r5
 801885e:	4630      	mov	r0, r6
 8018860:	f7ff ff93 	bl	801878a <__sfputs_r>
 8018864:	3001      	adds	r0, #1
 8018866:	f000 80aa 	beq.w	80189be <_vfiprintf_r+0x20e>
 801886a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801886c:	445a      	add	r2, fp
 801886e:	9209      	str	r2, [sp, #36]	; 0x24
 8018870:	f89a 3000 	ldrb.w	r3, [sl]
 8018874:	2b00      	cmp	r3, #0
 8018876:	f000 80a2 	beq.w	80189be <_vfiprintf_r+0x20e>
 801887a:	2300      	movs	r3, #0
 801887c:	f04f 32ff 	mov.w	r2, #4294967295
 8018880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018884:	f10a 0a01 	add.w	sl, sl, #1
 8018888:	9304      	str	r3, [sp, #16]
 801888a:	9307      	str	r3, [sp, #28]
 801888c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018890:	931a      	str	r3, [sp, #104]	; 0x68
 8018892:	4654      	mov	r4, sl
 8018894:	2205      	movs	r2, #5
 8018896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801889a:	4858      	ldr	r0, [pc, #352]	; (80189fc <_vfiprintf_r+0x24c>)
 801889c:	f7e7 fd38 	bl	8000310 <memchr>
 80188a0:	9a04      	ldr	r2, [sp, #16]
 80188a2:	b9d8      	cbnz	r0, 80188dc <_vfiprintf_r+0x12c>
 80188a4:	06d1      	lsls	r1, r2, #27
 80188a6:	bf44      	itt	mi
 80188a8:	2320      	movmi	r3, #32
 80188aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188ae:	0713      	lsls	r3, r2, #28
 80188b0:	bf44      	itt	mi
 80188b2:	232b      	movmi	r3, #43	; 0x2b
 80188b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188b8:	f89a 3000 	ldrb.w	r3, [sl]
 80188bc:	2b2a      	cmp	r3, #42	; 0x2a
 80188be:	d015      	beq.n	80188ec <_vfiprintf_r+0x13c>
 80188c0:	9a07      	ldr	r2, [sp, #28]
 80188c2:	4654      	mov	r4, sl
 80188c4:	2000      	movs	r0, #0
 80188c6:	f04f 0c0a 	mov.w	ip, #10
 80188ca:	4621      	mov	r1, r4
 80188cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188d0:	3b30      	subs	r3, #48	; 0x30
 80188d2:	2b09      	cmp	r3, #9
 80188d4:	d94e      	bls.n	8018974 <_vfiprintf_r+0x1c4>
 80188d6:	b1b0      	cbz	r0, 8018906 <_vfiprintf_r+0x156>
 80188d8:	9207      	str	r2, [sp, #28]
 80188da:	e014      	b.n	8018906 <_vfiprintf_r+0x156>
 80188dc:	eba0 0308 	sub.w	r3, r0, r8
 80188e0:	fa09 f303 	lsl.w	r3, r9, r3
 80188e4:	4313      	orrs	r3, r2
 80188e6:	9304      	str	r3, [sp, #16]
 80188e8:	46a2      	mov	sl, r4
 80188ea:	e7d2      	b.n	8018892 <_vfiprintf_r+0xe2>
 80188ec:	9b03      	ldr	r3, [sp, #12]
 80188ee:	1d19      	adds	r1, r3, #4
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	9103      	str	r1, [sp, #12]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	bfbb      	ittet	lt
 80188f8:	425b      	neglt	r3, r3
 80188fa:	f042 0202 	orrlt.w	r2, r2, #2
 80188fe:	9307      	strge	r3, [sp, #28]
 8018900:	9307      	strlt	r3, [sp, #28]
 8018902:	bfb8      	it	lt
 8018904:	9204      	strlt	r2, [sp, #16]
 8018906:	7823      	ldrb	r3, [r4, #0]
 8018908:	2b2e      	cmp	r3, #46	; 0x2e
 801890a:	d10c      	bne.n	8018926 <_vfiprintf_r+0x176>
 801890c:	7863      	ldrb	r3, [r4, #1]
 801890e:	2b2a      	cmp	r3, #42	; 0x2a
 8018910:	d135      	bne.n	801897e <_vfiprintf_r+0x1ce>
 8018912:	9b03      	ldr	r3, [sp, #12]
 8018914:	1d1a      	adds	r2, r3, #4
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	9203      	str	r2, [sp, #12]
 801891a:	2b00      	cmp	r3, #0
 801891c:	bfb8      	it	lt
 801891e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018922:	3402      	adds	r4, #2
 8018924:	9305      	str	r3, [sp, #20]
 8018926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018a0c <_vfiprintf_r+0x25c>
 801892a:	7821      	ldrb	r1, [r4, #0]
 801892c:	2203      	movs	r2, #3
 801892e:	4650      	mov	r0, sl
 8018930:	f7e7 fcee 	bl	8000310 <memchr>
 8018934:	b140      	cbz	r0, 8018948 <_vfiprintf_r+0x198>
 8018936:	2340      	movs	r3, #64	; 0x40
 8018938:	eba0 000a 	sub.w	r0, r0, sl
 801893c:	fa03 f000 	lsl.w	r0, r3, r0
 8018940:	9b04      	ldr	r3, [sp, #16]
 8018942:	4303      	orrs	r3, r0
 8018944:	3401      	adds	r4, #1
 8018946:	9304      	str	r3, [sp, #16]
 8018948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801894c:	482c      	ldr	r0, [pc, #176]	; (8018a00 <_vfiprintf_r+0x250>)
 801894e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018952:	2206      	movs	r2, #6
 8018954:	f7e7 fcdc 	bl	8000310 <memchr>
 8018958:	2800      	cmp	r0, #0
 801895a:	d03f      	beq.n	80189dc <_vfiprintf_r+0x22c>
 801895c:	4b29      	ldr	r3, [pc, #164]	; (8018a04 <_vfiprintf_r+0x254>)
 801895e:	bb1b      	cbnz	r3, 80189a8 <_vfiprintf_r+0x1f8>
 8018960:	9b03      	ldr	r3, [sp, #12]
 8018962:	3307      	adds	r3, #7
 8018964:	f023 0307 	bic.w	r3, r3, #7
 8018968:	3308      	adds	r3, #8
 801896a:	9303      	str	r3, [sp, #12]
 801896c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801896e:	443b      	add	r3, r7
 8018970:	9309      	str	r3, [sp, #36]	; 0x24
 8018972:	e767      	b.n	8018844 <_vfiprintf_r+0x94>
 8018974:	fb0c 3202 	mla	r2, ip, r2, r3
 8018978:	460c      	mov	r4, r1
 801897a:	2001      	movs	r0, #1
 801897c:	e7a5      	b.n	80188ca <_vfiprintf_r+0x11a>
 801897e:	2300      	movs	r3, #0
 8018980:	3401      	adds	r4, #1
 8018982:	9305      	str	r3, [sp, #20]
 8018984:	4619      	mov	r1, r3
 8018986:	f04f 0c0a 	mov.w	ip, #10
 801898a:	4620      	mov	r0, r4
 801898c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018990:	3a30      	subs	r2, #48	; 0x30
 8018992:	2a09      	cmp	r2, #9
 8018994:	d903      	bls.n	801899e <_vfiprintf_r+0x1ee>
 8018996:	2b00      	cmp	r3, #0
 8018998:	d0c5      	beq.n	8018926 <_vfiprintf_r+0x176>
 801899a:	9105      	str	r1, [sp, #20]
 801899c:	e7c3      	b.n	8018926 <_vfiprintf_r+0x176>
 801899e:	fb0c 2101 	mla	r1, ip, r1, r2
 80189a2:	4604      	mov	r4, r0
 80189a4:	2301      	movs	r3, #1
 80189a6:	e7f0      	b.n	801898a <_vfiprintf_r+0x1da>
 80189a8:	ab03      	add	r3, sp, #12
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	462a      	mov	r2, r5
 80189ae:	4b16      	ldr	r3, [pc, #88]	; (8018a08 <_vfiprintf_r+0x258>)
 80189b0:	a904      	add	r1, sp, #16
 80189b2:	4630      	mov	r0, r6
 80189b4:	f7fd fc24 	bl	8016200 <_printf_float>
 80189b8:	4607      	mov	r7, r0
 80189ba:	1c78      	adds	r0, r7, #1
 80189bc:	d1d6      	bne.n	801896c <_vfiprintf_r+0x1bc>
 80189be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80189c0:	07d9      	lsls	r1, r3, #31
 80189c2:	d405      	bmi.n	80189d0 <_vfiprintf_r+0x220>
 80189c4:	89ab      	ldrh	r3, [r5, #12]
 80189c6:	059a      	lsls	r2, r3, #22
 80189c8:	d402      	bmi.n	80189d0 <_vfiprintf_r+0x220>
 80189ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80189cc:	f7fd fadd 	bl	8015f8a <__retarget_lock_release_recursive>
 80189d0:	89ab      	ldrh	r3, [r5, #12]
 80189d2:	065b      	lsls	r3, r3, #25
 80189d4:	f53f af12 	bmi.w	80187fc <_vfiprintf_r+0x4c>
 80189d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189da:	e711      	b.n	8018800 <_vfiprintf_r+0x50>
 80189dc:	ab03      	add	r3, sp, #12
 80189de:	9300      	str	r3, [sp, #0]
 80189e0:	462a      	mov	r2, r5
 80189e2:	4b09      	ldr	r3, [pc, #36]	; (8018a08 <_vfiprintf_r+0x258>)
 80189e4:	a904      	add	r1, sp, #16
 80189e6:	4630      	mov	r0, r6
 80189e8:	f7fd fe96 	bl	8016718 <_printf_i>
 80189ec:	e7e4      	b.n	80189b8 <_vfiprintf_r+0x208>
 80189ee:	bf00      	nop
 80189f0:	0801961c 	.word	0x0801961c
 80189f4:	0801963c 	.word	0x0801963c
 80189f8:	080195fc 	.word	0x080195fc
 80189fc:	0801987c 	.word	0x0801987c
 8018a00:	08019886 	.word	0x08019886
 8018a04:	08016201 	.word	0x08016201
 8018a08:	0801878b 	.word	0x0801878b
 8018a0c:	08019882 	.word	0x08019882

08018a10 <_read_r>:
 8018a10:	b538      	push	{r3, r4, r5, lr}
 8018a12:	4d07      	ldr	r5, [pc, #28]	; (8018a30 <_read_r+0x20>)
 8018a14:	4604      	mov	r4, r0
 8018a16:	4608      	mov	r0, r1
 8018a18:	4611      	mov	r1, r2
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	602a      	str	r2, [r5, #0]
 8018a1e:	461a      	mov	r2, r3
 8018a20:	f7e9 fddc 	bl	80025dc <_read>
 8018a24:	1c43      	adds	r3, r0, #1
 8018a26:	d102      	bne.n	8018a2e <_read_r+0x1e>
 8018a28:	682b      	ldr	r3, [r5, #0]
 8018a2a:	b103      	cbz	r3, 8018a2e <_read_r+0x1e>
 8018a2c:	6023      	str	r3, [r4, #0]
 8018a2e:	bd38      	pop	{r3, r4, r5, pc}
 8018a30:	24007390 	.word	0x24007390

08018a34 <__assert_func>:
 8018a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a36:	4614      	mov	r4, r2
 8018a38:	461a      	mov	r2, r3
 8018a3a:	4b09      	ldr	r3, [pc, #36]	; (8018a60 <__assert_func+0x2c>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	4605      	mov	r5, r0
 8018a40:	68d8      	ldr	r0, [r3, #12]
 8018a42:	b14c      	cbz	r4, 8018a58 <__assert_func+0x24>
 8018a44:	4b07      	ldr	r3, [pc, #28]	; (8018a64 <__assert_func+0x30>)
 8018a46:	9100      	str	r1, [sp, #0]
 8018a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018a4c:	4906      	ldr	r1, [pc, #24]	; (8018a68 <__assert_func+0x34>)
 8018a4e:	462b      	mov	r3, r5
 8018a50:	f000 f80e 	bl	8018a70 <fiprintf>
 8018a54:	f7fd f969 	bl	8015d2a <abort>
 8018a58:	4b04      	ldr	r3, [pc, #16]	; (8018a6c <__assert_func+0x38>)
 8018a5a:	461c      	mov	r4, r3
 8018a5c:	e7f3      	b.n	8018a46 <__assert_func+0x12>
 8018a5e:	bf00      	nop
 8018a60:	24000018 	.word	0x24000018
 8018a64:	0801988d 	.word	0x0801988d
 8018a68:	0801989a 	.word	0x0801989a
 8018a6c:	080198c8 	.word	0x080198c8

08018a70 <fiprintf>:
 8018a70:	b40e      	push	{r1, r2, r3}
 8018a72:	b503      	push	{r0, r1, lr}
 8018a74:	4601      	mov	r1, r0
 8018a76:	ab03      	add	r3, sp, #12
 8018a78:	4805      	ldr	r0, [pc, #20]	; (8018a90 <fiprintf+0x20>)
 8018a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a7e:	6800      	ldr	r0, [r0, #0]
 8018a80:	9301      	str	r3, [sp, #4]
 8018a82:	f7ff fe95 	bl	80187b0 <_vfiprintf_r>
 8018a86:	b002      	add	sp, #8
 8018a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a8c:	b003      	add	sp, #12
 8018a8e:	4770      	bx	lr
 8018a90:	24000018 	.word	0x24000018

08018a94 <_fstat_r>:
 8018a94:	b538      	push	{r3, r4, r5, lr}
 8018a96:	4d07      	ldr	r5, [pc, #28]	; (8018ab4 <_fstat_r+0x20>)
 8018a98:	2300      	movs	r3, #0
 8018a9a:	4604      	mov	r4, r0
 8018a9c:	4608      	mov	r0, r1
 8018a9e:	4611      	mov	r1, r2
 8018aa0:	602b      	str	r3, [r5, #0]
 8018aa2:	f7e9 fde0 	bl	8002666 <_fstat>
 8018aa6:	1c43      	adds	r3, r0, #1
 8018aa8:	d102      	bne.n	8018ab0 <_fstat_r+0x1c>
 8018aaa:	682b      	ldr	r3, [r5, #0]
 8018aac:	b103      	cbz	r3, 8018ab0 <_fstat_r+0x1c>
 8018aae:	6023      	str	r3, [r4, #0]
 8018ab0:	bd38      	pop	{r3, r4, r5, pc}
 8018ab2:	bf00      	nop
 8018ab4:	24007390 	.word	0x24007390

08018ab8 <_isatty_r>:
 8018ab8:	b538      	push	{r3, r4, r5, lr}
 8018aba:	4d06      	ldr	r5, [pc, #24]	; (8018ad4 <_isatty_r+0x1c>)
 8018abc:	2300      	movs	r3, #0
 8018abe:	4604      	mov	r4, r0
 8018ac0:	4608      	mov	r0, r1
 8018ac2:	602b      	str	r3, [r5, #0]
 8018ac4:	f7e9 fddf 	bl	8002686 <_isatty>
 8018ac8:	1c43      	adds	r3, r0, #1
 8018aca:	d102      	bne.n	8018ad2 <_isatty_r+0x1a>
 8018acc:	682b      	ldr	r3, [r5, #0]
 8018ace:	b103      	cbz	r3, 8018ad2 <_isatty_r+0x1a>
 8018ad0:	6023      	str	r3, [r4, #0]
 8018ad2:	bd38      	pop	{r3, r4, r5, pc}
 8018ad4:	24007390 	.word	0x24007390

08018ad8 <__ascii_mbtowc>:
 8018ad8:	b082      	sub	sp, #8
 8018ada:	b901      	cbnz	r1, 8018ade <__ascii_mbtowc+0x6>
 8018adc:	a901      	add	r1, sp, #4
 8018ade:	b142      	cbz	r2, 8018af2 <__ascii_mbtowc+0x1a>
 8018ae0:	b14b      	cbz	r3, 8018af6 <__ascii_mbtowc+0x1e>
 8018ae2:	7813      	ldrb	r3, [r2, #0]
 8018ae4:	600b      	str	r3, [r1, #0]
 8018ae6:	7812      	ldrb	r2, [r2, #0]
 8018ae8:	1e10      	subs	r0, r2, #0
 8018aea:	bf18      	it	ne
 8018aec:	2001      	movne	r0, #1
 8018aee:	b002      	add	sp, #8
 8018af0:	4770      	bx	lr
 8018af2:	4610      	mov	r0, r2
 8018af4:	e7fb      	b.n	8018aee <__ascii_mbtowc+0x16>
 8018af6:	f06f 0001 	mvn.w	r0, #1
 8018afa:	e7f8      	b.n	8018aee <__ascii_mbtowc+0x16>

08018afc <memmove>:
 8018afc:	4288      	cmp	r0, r1
 8018afe:	b510      	push	{r4, lr}
 8018b00:	eb01 0402 	add.w	r4, r1, r2
 8018b04:	d902      	bls.n	8018b0c <memmove+0x10>
 8018b06:	4284      	cmp	r4, r0
 8018b08:	4623      	mov	r3, r4
 8018b0a:	d807      	bhi.n	8018b1c <memmove+0x20>
 8018b0c:	1e43      	subs	r3, r0, #1
 8018b0e:	42a1      	cmp	r1, r4
 8018b10:	d008      	beq.n	8018b24 <memmove+0x28>
 8018b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018b1a:	e7f8      	b.n	8018b0e <memmove+0x12>
 8018b1c:	4402      	add	r2, r0
 8018b1e:	4601      	mov	r1, r0
 8018b20:	428a      	cmp	r2, r1
 8018b22:	d100      	bne.n	8018b26 <memmove+0x2a>
 8018b24:	bd10      	pop	{r4, pc}
 8018b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018b2e:	e7f7      	b.n	8018b20 <memmove+0x24>

08018b30 <_realloc_r>:
 8018b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b34:	4680      	mov	r8, r0
 8018b36:	4614      	mov	r4, r2
 8018b38:	460e      	mov	r6, r1
 8018b3a:	b921      	cbnz	r1, 8018b46 <_realloc_r+0x16>
 8018b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b40:	4611      	mov	r1, r2
 8018b42:	f7fd ba59 	b.w	8015ff8 <_malloc_r>
 8018b46:	b92a      	cbnz	r2, 8018b54 <_realloc_r+0x24>
 8018b48:	f7ff fc60 	bl	801840c <_free_r>
 8018b4c:	4625      	mov	r5, r4
 8018b4e:	4628      	mov	r0, r5
 8018b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b54:	f000 f828 	bl	8018ba8 <_malloc_usable_size_r>
 8018b58:	4284      	cmp	r4, r0
 8018b5a:	4607      	mov	r7, r0
 8018b5c:	d802      	bhi.n	8018b64 <_realloc_r+0x34>
 8018b5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018b62:	d812      	bhi.n	8018b8a <_realloc_r+0x5a>
 8018b64:	4621      	mov	r1, r4
 8018b66:	4640      	mov	r0, r8
 8018b68:	f7fd fa46 	bl	8015ff8 <_malloc_r>
 8018b6c:	4605      	mov	r5, r0
 8018b6e:	2800      	cmp	r0, #0
 8018b70:	d0ed      	beq.n	8018b4e <_realloc_r+0x1e>
 8018b72:	42bc      	cmp	r4, r7
 8018b74:	4622      	mov	r2, r4
 8018b76:	4631      	mov	r1, r6
 8018b78:	bf28      	it	cs
 8018b7a:	463a      	movcs	r2, r7
 8018b7c:	f7fd fa06 	bl	8015f8c <memcpy>
 8018b80:	4631      	mov	r1, r6
 8018b82:	4640      	mov	r0, r8
 8018b84:	f7ff fc42 	bl	801840c <_free_r>
 8018b88:	e7e1      	b.n	8018b4e <_realloc_r+0x1e>
 8018b8a:	4635      	mov	r5, r6
 8018b8c:	e7df      	b.n	8018b4e <_realloc_r+0x1e>

08018b8e <__ascii_wctomb>:
 8018b8e:	b149      	cbz	r1, 8018ba4 <__ascii_wctomb+0x16>
 8018b90:	2aff      	cmp	r2, #255	; 0xff
 8018b92:	bf85      	ittet	hi
 8018b94:	238a      	movhi	r3, #138	; 0x8a
 8018b96:	6003      	strhi	r3, [r0, #0]
 8018b98:	700a      	strbls	r2, [r1, #0]
 8018b9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8018b9e:	bf98      	it	ls
 8018ba0:	2001      	movls	r0, #1
 8018ba2:	4770      	bx	lr
 8018ba4:	4608      	mov	r0, r1
 8018ba6:	4770      	bx	lr

08018ba8 <_malloc_usable_size_r>:
 8018ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018bac:	1f18      	subs	r0, r3, #4
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	bfbc      	itt	lt
 8018bb2:	580b      	ldrlt	r3, [r1, r0]
 8018bb4:	18c0      	addlt	r0, r0, r3
 8018bb6:	4770      	bx	lr

08018bb8 <_init>:
 8018bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bba:	bf00      	nop
 8018bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bbe:	bc08      	pop	{r3}
 8018bc0:	469e      	mov	lr, r3
 8018bc2:	4770      	bx	lr

08018bc4 <_fini>:
 8018bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bc6:	bf00      	nop
 8018bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018bca:	bc08      	pop	{r3}
 8018bcc:	469e      	mov	lr, r3
 8018bce:	4770      	bx	lr
