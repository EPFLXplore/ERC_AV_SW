
Orion_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08004968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  24000010  08004978  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000080  08004978  00020080  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cfc4  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d68  00000000  00000000  0002d002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000990  00000000  00000000  0002ed70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008a8  00000000  00000000  0002f700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035960  00000000  00000000  0002ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c8a4  00000000  00000000  00065908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00152f76  00000000  00000000  000721ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c5122  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002590  00000000  00000000  001c5174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004938 	.word	0x08004938

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004938 	.word	0x08004938

080002d8 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002de:	4b21      	ldr	r3, [pc, #132]	; (8000364 <MX_GPIO_Init+0x8c>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a1f      	ldr	r2, [pc, #124]	; (8000364 <MX_GPIO_Init+0x8c>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002ee:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_GPIO_Init+0x8c>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b19      	ldr	r3, [pc, #100]	; (8000364 <MX_GPIO_Init+0x8c>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	4a18      	ldr	r2, [pc, #96]	; (8000364 <MX_GPIO_Init+0x8c>)
 8000304:	f043 0302 	orr.w	r3, r3, #2
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_GPIO_Init+0x8c>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800031a:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_GPIO_Init+0x8c>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000320:	4a10      	ldr	r2, [pc, #64]	; (8000364 <MX_GPIO_Init+0x8c>)
 8000322:	f043 0310 	orr.w	r3, r3, #16
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_GPIO_Init+0x8c>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	f003 0310 	and.w	r3, r3, #16
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <MX_GPIO_Init+0x8c>)
 800033a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033e:	4a09      	ldr	r2, [pc, #36]	; (8000364 <MX_GPIO_Init+0x8c>)
 8000340:	f043 0304 	orr.w	r3, r3, #4
 8000344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_GPIO_Init+0x8c>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]

}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	58024400 	.word	0x58024400

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800036e:	4b6f      	ldr	r3, [pc, #444]	; (800052c <main+0x1c4>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000376:	2b00      	cmp	r3, #0
 8000378:	d11b      	bne.n	80003b2 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800037a:	f3bf 8f4f 	dsb	sy
}
 800037e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000380:	f3bf 8f6f 	isb	sy
}
 8000384:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000386:	4b69      	ldr	r3, [pc, #420]	; (800052c <main+0x1c4>)
 8000388:	2200      	movs	r2, #0
 800038a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800038e:	f3bf 8f4f 	dsb	sy
}
 8000392:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000394:	f3bf 8f6f 	isb	sy
}
 8000398:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800039a:	4b64      	ldr	r3, [pc, #400]	; (800052c <main+0x1c4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a63      	ldr	r2, [pc, #396]	; (800052c <main+0x1c4>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003a6:	f3bf 8f4f 	dsb	sy
}
 80003aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ac:	f3bf 8f6f 	isb	sy
}
 80003b0:	e000      	b.n	80003b4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003b2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003b4:	4b5d      	ldr	r3, [pc, #372]	; (800052c <main+0x1c4>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d138      	bne.n	8000432 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003c0:	4b5a      	ldr	r3, [pc, #360]	; (800052c <main+0x1c4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003c8:	f3bf 8f4f 	dsb	sy
}
 80003cc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ce:	4b57      	ldr	r3, [pc, #348]	; (800052c <main+0x1c4>)
 80003d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003d4:	61fb      	str	r3, [r7, #28]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003d6:	69fb      	ldr	r3, [r7, #28]
 80003d8:	0b5b      	lsrs	r3, r3, #13
 80003da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003de:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	08db      	lsrs	r3, r3, #3
 80003e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80003e8:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003ea:	69bb      	ldr	r3, [r7, #24]
 80003ec:	015a      	lsls	r2, r3, #5
 80003ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80003f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003f8:	494c      	ldr	r1, [pc, #304]	; (800052c <main+0x1c4>)
 80003fa:	4313      	orrs	r3, r2
 80003fc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	617a      	str	r2, [r7, #20]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1ef      	bne.n	80003ea <main+0x82>
    } while(sets-- != 0U);
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	1e5a      	subs	r2, r3, #1
 800040e:	61ba      	str	r2, [r7, #24]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1e5      	bne.n	80003e0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800041a:	4b44      	ldr	r3, [pc, #272]	; (800052c <main+0x1c4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a43      	ldr	r2, [pc, #268]	; (800052c <main+0x1c4>)
 8000420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000424:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000426:	f3bf 8f4f 	dsb	sy
}
 800042a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800042c:	f3bf 8f6f 	isb	sy
}
 8000430:	e000      	b.n	8000434 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000432:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000434:	f000 fe2a 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000438:	f000 f880 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043c:	f7ff ff4c 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000440:	f000 f930 	bl	80006a4 <MX_QUADSPI_Init>

  /* USER CODE BEGIN 2 */
  if (CSP_QUADSPI_Init() != HAL_OK) {
 8000444:	f000 fa46 	bl	80008d4 <CSP_QUADSPI_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <main+0xea>
    Error_Handler();
 800044e:	f000 f923 	bl	8000698 <Error_Handler>
  }

  if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000452:	f000 fbe5 	bl	8000c20 <CSP_QSPI_EnableMemoryMappedMode>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <main+0xf8>
    Error_Handler();
 800045c:	f000 f91c 	bl	8000698 <Error_Handler>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000460:	4b32      	ldr	r3, [pc, #200]	; (800052c <main+0x1c4>)
 8000462:	2200      	movs	r2, #0
 8000464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000468:	f3bf 8f4f 	dsb	sy
}
 800046c:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 800046e:	4b2f      	ldr	r3, [pc, #188]	; (800052c <main+0x1c4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a2e      	ldr	r2, [pc, #184]	; (800052c <main+0x1c4>)
 8000474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800047a:	f3bf 8f4f 	dsb	sy
}
 800047e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000480:	4b2a      	ldr	r3, [pc, #168]	; (800052c <main+0x1c4>)
 8000482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000486:	60fb      	str	r3, [r7, #12]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	0b5b      	lsrs	r3, r3, #13
 800048c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000490:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800049a:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	015a      	lsls	r2, r3, #5
 80004a0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004a4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80004aa:	4920      	ldr	r1, [pc, #128]	; (800052c <main+0x1c4>)
 80004ac:	4313      	orrs	r3, r2
 80004ae:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	1e5a      	subs	r2, r3, #1
 80004b6:	607a      	str	r2, [r7, #4]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1ef      	bne.n	800049c <main+0x134>
    } while(sets-- != 0U);
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1e5a      	subs	r2, r3, #1
 80004c0:	60ba      	str	r2, [r7, #8]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d1e5      	bne.n	8000492 <main+0x12a>
  __ASM volatile ("dsb 0xF":::"memory");
 80004c6:	f3bf 8f4f 	dsb	sy
}
 80004ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004cc:	f3bf 8f6f 	isb	sy
}
 80004d0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80004d2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004da:	f3bf 8f6f 	isb	sy
}
 80004de:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <main+0x1c4>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a11      	ldr	r2, [pc, #68]	; (800052c <main+0x1c4>)
 80004e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80004ea:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <main+0x1c4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004f4:	f3bf 8f4f 	dsb	sy
}
 80004f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004fa:	f3bf 8f6f 	isb	sy
}
 80004fe:	bf00      	nop
}
 8000500:	bf00      	nop
  }

  SCB_DisableDCache();
  SCB_DisableICache();
  SysTick->CTRL = 0;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <main+0x1c8>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]

  JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x1cc>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <main+0x1d0>)
 8000510:	601a      	str	r2, [r3, #0]
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000512:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	f383 8808 	msr	MSP, r3
}
 8000520:	bf00      	nop
  JumpToApplication();
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <main+0x1d0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x1c0>
 800052a:	bf00      	nop
 800052c:	e000ed00 	.word	0xe000ed00
 8000530:	e000e010 	.word	0xe000e010
 8000534:	90000004 	.word	0x90000004
 8000538:	2400002c 	.word	0x2400002c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09e      	sub	sp, #120	; 0x78
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000546:	224c      	movs	r2, #76	; 0x4c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 f9ec 	bl	8004928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2220      	movs	r2, #32
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f004 f9e5 	bl	8004928 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800055e:	2002      	movs	r0, #2
 8000560:	f001 fa7a 	bl	8001a58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b48      	ldr	r3, [pc, #288]	; (800068c <SystemClock_Config+0x150>)
 800056a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056c:	4a47      	ldr	r2, [pc, #284]	; (800068c <SystemClock_Config+0x150>)
 800056e:	f023 0301 	bic.w	r3, r3, #1
 8000572:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000574:	4b45      	ldr	r3, [pc, #276]	; (800068c <SystemClock_Config+0x150>)
 8000576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	4b44      	ldr	r3, [pc, #272]	; (8000690 <SystemClock_Config+0x154>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a43      	ldr	r2, [pc, #268]	; (8000690 <SystemClock_Config+0x154>)
 8000584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <SystemClock_Config+0x154>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000596:	bf00      	nop
 8000598:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <SystemClock_Config+0x154>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a4:	d1f8      	bne.n	8000598 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b3b      	ldr	r3, [pc, #236]	; (8000694 <SystemClock_Config+0x158>)
 80005a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005ac:	4a39      	ldr	r2, [pc, #228]	; (8000694 <SystemClock_Config+0x158>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005b6:	4b37      	ldr	r3, [pc, #220]	; (8000694 <SystemClock_Config+0x158>)
 80005b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005c4:	2300      	movs	r3, #0
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	4b31      	ldr	r3, [pc, #196]	; (8000690 <SystemClock_Config+0x154>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a30      	ldr	r2, [pc, #192]	; (8000690 <SystemClock_Config+0x154>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <SystemClock_Config+0x154>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <SystemClock_Config+0x150>)
 80005e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e2:	4a2a      	ldr	r2, [pc, #168]	; (800068c <SystemClock_Config+0x150>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0x150>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f6:	bf00      	nop
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0x154>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000604:	d1f8      	bne.n	80005f8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	2302      	movs	r3, #2
 8000616:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800061c:	233c      	movs	r3, #60	; 0x3c
 800061e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800062c:	230c      	movs	r3, #12
 800062e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000630:	2300      	movs	r3, #0
 8000632:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f947 	bl	80028d0 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000648:	f000 f826 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	233f      	movs	r3, #63	; 0x3f
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000658:	2308      	movs	r3, #8
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800065c:	2340      	movs	r3, #64	; 0x40
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000660:	2340      	movs	r3, #64	; 0x40
 8000662:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800066a:	2340      	movs	r3, #64	; 0x40
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2104      	movs	r1, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fd59 	bl	800312c <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000680:	f000 f80a 	bl	8000698 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3778      	adds	r7, #120	; 0x78
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	58000400 	.word	0x58000400
 8000690:	58024800 	.word	0x58024800
 8000694:	58024400 	.word	0x58024400

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_QUADSPI_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006bc:	2210      	movs	r2, #16
 80006be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006c2:	2217      	movs	r2, #23
 80006c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_QUADSPI_Init+0x50>)
 80006e0:	f001 f9f4 	bl	8001acc <HAL_QSPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80006ea:	f7ff ffd5 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	24000030 	.word	0x24000030
 80006f8:	52005000 	.word	0x52005000

080006fc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b0ba      	sub	sp, #232	; 0xe8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	22bc      	movs	r2, #188	; 0xbc
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f004 f903 	bl	8004928 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a4e      	ldr	r2, [pc, #312]	; (8000860 <HAL_QSPI_MspInit+0x164>)
 8000728:	4293      	cmp	r3, r2
 800072a:	f040 8094 	bne.w	8000856 <HAL_QSPI_MspInit+0x15a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800072e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000732:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000734:	2300      	movs	r3, #0
 8000736:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000738:	f107 0318 	add.w	r3, r7, #24
 800073c:	4618      	mov	r0, r3
 800073e:	f003 f825 	bl	800378c <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000748:	f7ff ffa6 	bl	8000698 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800074c:	4b45      	ldr	r3, [pc, #276]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 800074e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000752:	4a44      	ldr	r2, [pc, #272]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 800075e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	4a3c      	ldr	r2, [pc, #240]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000788:	4b36      	ldr	r3, [pc, #216]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	4a35      	ldr	r2, [pc, #212]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000798:	4b32      	ldr	r3, [pc, #200]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <HAL_QSPI_MspInit+0x168>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c4:	2304      	movs	r3, #4
 80007c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007dc:	2309      	movs	r3, #9
 80007de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007e6:	4619      	mov	r1, r3
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <HAL_QSPI_MspInit+0x16c>)
 80007ea:	f000 fe53 	bl	8001494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80007ee:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80007f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000808:	230a      	movs	r3, #10
 800080a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000812:	4619      	mov	r1, r3
 8000814:	4815      	ldr	r0, [pc, #84]	; (800086c <HAL_QSPI_MspInit+0x170>)
 8000816:	f000 fe3d 	bl	8001494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800081a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800081e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000834:	2309      	movs	r3, #9
 8000836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800083e:	4619      	mov	r1, r3
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <HAL_QSPI_MspInit+0x174>)
 8000842:	f000 fe27 	bl	8001494 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	205c      	movs	r0, #92	; 0x5c
 800084c:	f000 fddf 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000850:	205c      	movs	r0, #92	; 0x5c
 8000852:	f000 fdf6 	bl	8001442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000856:	bf00      	nop
 8000858:	37e8      	adds	r7, #232	; 0xe8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	52005000 	.word	0x52005000
 8000864:	58024400 	.word	0x58024400
 8000868:	58020400 	.word	0x58020400
 800086c:	58021000 	.word	0x58021000
 8000870:	58020800 	.word	0x58020800

08000874 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_QSPI_MspDeInit+0x4c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d118      	bne.n	80008b8 <HAL_QSPI_MspDeInit+0x44>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_QSPI_MspDeInit+0x50>)
 8000888:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_QSPI_MspDeInit+0x50>)
 800088e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000892:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8000896:	2104      	movs	r1, #4
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <HAL_QSPI_MspDeInit+0x54>)
 800089a:	f000 ffab 	bl	80017f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10);
 800089e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <HAL_QSPI_MspDeInit+0x58>)
 80008a4:	f000 ffa6 	bl	80017f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80008a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ac:	4808      	ldr	r0, [pc, #32]	; (80008d0 <HAL_QSPI_MspDeInit+0x5c>)
 80008ae:	f000 ffa1 	bl	80017f4 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80008b2:	205c      	movs	r0, #92	; 0x5c
 80008b4:	f000 fdd3 	bl	800145e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	52005000 	.word	0x52005000
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58020400 	.word	0x58020400
 80008cc:	58021000 	.word	0x58021000
 80008d0:	58020800 	.word	0x58020800

080008d4 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80008d8:	4819      	ldr	r0, [pc, #100]	; (8000940 <CSP_QUADSPI_Init+0x6c>)
 80008da:	f001 f96b 	bl	8001bb4 <HAL_QSPI_DeInit>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <CSP_QUADSPI_Init+0x14>
		return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e028      	b.n	800093a <CSP_QUADSPI_Init+0x66>
	}

	MX_QUADSPI_Init();
 80008e8:	f7ff fedc 	bl	80006a4 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 80008ec:	f000 f9cc 	bl	8000c88 <QSPI_ResetChip>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <CSP_QUADSPI_Init+0x26>
		return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e01f      	b.n	800093a <CSP_QUADSPI_Init+0x66>
	}

	HAL_Delay(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 fc58 	bl	80011b0 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000900:	f000 f820 	bl	8000944 <QSPI_AutoPollingMemReady>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <CSP_QUADSPI_Init+0x3a>
		return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e015      	b.n	800093a <CSP_QUADSPI_Init+0x66>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 800090e:	f000 f851 	bl	80009b4 <QSPI_WriteEnable>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <CSP_QUADSPI_Init+0x48>

		return HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	e00e      	b.n	800093a <CSP_QUADSPI_Init+0x66>
	}

	if (QSPI_Configuration() != HAL_OK) {
 800091c:	f000 f896 	bl	8000a4c <QSPI_Configuration>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <CSP_QUADSPI_Init+0x56>
		return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e007      	b.n	800093a <CSP_QUADSPI_Init+0x66>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 800092a:	f000 f80b 	bl	8000944 <QSPI_AutoPollingMemReady>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <CSP_QUADSPI_Init+0x64>
		return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	e000      	b.n	800093a <CSP_QUADSPI_Init+0x66>
	}
	return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	24000030 	.word	0x24000030

08000944 <QSPI_AutoPollingMemReady>:
			}

	return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_FLAG_STATUS_REG_CMD;
 8000950:	2305      	movs	r3, #5
 8000952:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000958:	2300      	movs	r3, #0
 800095a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800095c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800096a:	2300      	movs	r3, #0
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800096e:	2300      	movs	r3, #0
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
 8000976:	2301      	movs	r3, #1
 8000978:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000982:	2310      	movs	r3, #16
 8000984:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098a:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800098c:	463a      	mov	r2, r7
 800098e:	f107 0118 	add.w	r1, r7, #24
 8000992:	f241 3388 	movw	r3, #5000	; 0x1388
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <QSPI_AutoPollingMemReady+0x6c>)
 8000998:	f001 fc73 	bl	8002282 <HAL_QSPI_AutoPolling>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3750      	adds	r7, #80	; 0x50
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000030 	.word	0x24000030

080009b4 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	; 0x50
 80009b8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	QSPI_AutoPollingMemReady();
 80009ba:	f7ff ffc3 	bl	8000944 <QSPI_AutoPollingMemReady>

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80009be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80009c4:	2306      	movs	r3, #6
 80009c6:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009dc:	2300      	movs	r3, #0
 80009de:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009e0:	2300      	movs	r3, #0
 80009e2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ec:	4619      	mov	r1, r3
 80009ee:	4816      	ldr	r0, [pc, #88]	; (8000a48 <QSPI_WriteEnable+0x94>)
 80009f0:	f001 faba 	bl	8001f68 <HAL_QSPI_Command>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <QSPI_WriteEnable+0x4a>
			!= HAL_OK) {
		return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e01f      	b.n	8000a3e <QSPI_WriteEnable+0x8a>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 80009fe:	2302      	movs	r3, #2
 8000a00:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8000a02:	2302      	movs	r3, #2
 8000a04:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000a0e:	2310      	movs	r3, #16
 8000a10:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a16:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000a22:	463a      	mov	r2, r7
 8000a24:	f107 0118 	add.w	r1, r7, #24
 8000a28:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <QSPI_WriteEnable+0x94>)
 8000a2e:	f001 fc28 	bl	8002282 <HAL_QSPI_AutoPolling>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <QSPI_WriteEnable+0x88>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <QSPI_WriteEnable+0x8a>
	}

	return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3750      	adds	r7, #80	; 0x50
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24000030 	.word	0x24000030

08000a4c <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	; 0x40
 8000a50:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4863      	ldr	r0, [pc, #396]	; (8000c1c <QSPI_Configuration+0x1d0>)
 8000a8e:	f001 fa6b 	bl	8001f68 <HAL_QSPI_Command>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <QSPI_Configuration+0x50>
			!= HAL_OK) {
		return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e0ba      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	485d      	ldr	r0, [pc, #372]	; (8000c1c <QSPI_Configuration+0x1d0>)
 8000aa6:	f001 fb4f 	bl	8002148 <HAL_QSPI_Receive>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <QSPI_Configuration+0x68>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e0ae      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab8:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
 8000aba:	2361      	movs	r3, #97	; 0x61
 8000abc:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae8:	4619      	mov	r1, r3
 8000aea:	484c      	ldr	r0, [pc, #304]	; (8000c1c <QSPI_Configuration+0x1d0>)
 8000aec:	f001 fa3c 	bl	8001f68 <HAL_QSPI_Command>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <QSPI_Configuration+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e08b      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	3301      	adds	r3, #1
 8000afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b02:	4619      	mov	r1, r3
 8000b04:	4845      	ldr	r0, [pc, #276]	; (8000c1c <QSPI_Configuration+0x1d0>)
 8000b06:	f001 fb1f 	bl	8002148 <HAL_QSPI_Receive>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <QSPI_Configuration+0xc8>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e07e      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
 8000b14:	793b      	ldrb	r3, [r7, #4]
 8000b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] = 0x40;
 8000b1e:	2340      	movs	r3, #64	; 0x40
 8000b20:	717b      	strb	r3, [r7, #5]

	if (QSPI_WriteEnable() != HAL_OK) {
 8000b22:	f7ff ff47 	bl	80009b4 <QSPI_WriteEnable>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <QSPI_Configuration+0xe4>
		return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e070      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b34:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	482b      	ldr	r0, [pc, #172]	; (8000c1c <QSPI_Configuration+0x1d0>)
 8000b6e:	f001 f9fb 	bl	8001f68 <HAL_QSPI_Command>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <QSPI_Configuration+0x130>
			!= HAL_OK) {
		return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e04a      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b82:	4619      	mov	r1, r3
 8000b84:	4825      	ldr	r0, [pc, #148]	; (8000c1c <QSPI_Configuration+0x1d0>)
 8000b86:	f001 fa4d 	bl	8002024 <HAL_QSPI_Transmit>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <QSPI_Configuration+0x14c>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000b90:	f7ff fd82 	bl	8000698 <Error_Handler>
		return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e03c      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8000b98:	f7ff ff0c 	bl	80009b4 <QSPI_WriteEnable>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <QSPI_Configuration+0x15a>
		return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e035      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000baa:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_CONFIGURATION_REG_CMD;
 8000bc2:	2365      	movs	r3, #101	; 0x65
 8000bc4:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000be0:	4619      	mov	r1, r3
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <QSPI_Configuration+0x1d0>)
 8000be4:	f001 f9c0 	bl	8001f68 <HAL_QSPI_Command>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <QSPI_Configuration+0x1a6>
			!= HAL_OK) {
		return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}

	if (HAL_QSPI_Transmit(&hqspi, &(test_buffer[1]),
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <QSPI_Configuration+0x1d0>)
 8000bfe:	f001 fa11 	bl	8002024 <HAL_QSPI_Transmit>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <QSPI_Configuration+0x1c4>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000c08:	f7ff fd46 	bl	8000698 <Error_Handler>
		return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <QSPI_Configuration+0x1c6>
	}
	return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3740      	adds	r7, #64	; 0x40
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	24000030 	.word	0x24000030

08000c20 <CSP_QSPI_EnableMemoryMappedMode>:
	return HAL_OK;

}


uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b090      	sub	sp, #64	; 0x40
 8000c24:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2a:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c30:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8000c48:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.NbData = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
	sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8000c56:	236b      	movs	r3, #107	; 0x6b
 8000c58:	60bb      	str	r3, [r7, #8]
	sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 8000c62:	463a      	mov	r2, r7
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 8000c6c:	f001 fb80 	bl	8002370 <HAL_QSPI_MemoryMapped>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <CSP_QSPI_EnableMemoryMappedMode+0x5a>
		return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <CSP_QSPI_EnableMemoryMappedMode+0x5c>
	}
	return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3740      	adds	r7, #64	; 0x40
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000030 	.word	0x24000030

08000c88 <QSPI_ResetChip>:

/*Send reset in 1,2 and 4 lines*/
uint8_t QSPI_ResetChip() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c96:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
 8000cae:	2366      	movs	r3, #102	; 0x66
 8000cb0:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc8:	4619      	mov	r1, r3
 8000cca:	486f      	ldr	r0, [pc, #444]	; (8000e88 <QSPI_ResetChip+0x200>)
 8000ccc:	f001 f94c 	bl	8001f68 <HAL_QSPI_Command>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e0d2      	b.n	8000e80 <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cde:	e003      	b.n	8000ce8 <QSPI_ResetChip+0x60>
		__NOP();
 8000ce0:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8000ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cea:	2b2e      	cmp	r3, #46	; 0x2e
 8000cec:	d9f8      	bls.n	8000ce0 <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8000d0a:	2399      	movs	r3, #153	; 0x99
 8000d0c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d24:	4619      	mov	r1, r3
 8000d26:	4858      	ldr	r0, [pc, #352]	; (8000e88 <QSPI_ResetChip+0x200>)
 8000d28:	f001 f91e 	bl	8001f68 <HAL_QSPI_Command>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e0a4      	b.n	8000e80 <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
		sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8000d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d3a:	61fb      	str	r3, [r7, #28]
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d40:	613b      	str	r3, [r7, #16]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.Instruction = RESET_ENABLE_CMD;
 8000d52:	2366      	movs	r3, #102	; 0x66
 8000d54:	607b      	str	r3, [r7, #4]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
		sCommand.Address = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
		sCommand.DataMode = QSPI_DATA_NONE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DummyCycles = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4846      	ldr	r0, [pc, #280]	; (8000e88 <QSPI_ResetChip+0x200>)
 8000d70:	f001 f8fa 	bl	8001f68 <HAL_QSPI_Command>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <QSPI_ResetChip+0xf6>
				!= HAL_OK) {
			return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e080      	b.n	8000e80 <QSPI_ResetChip+0x1f8>
		}
		for (temp = 0; temp < 0x2f; temp++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d82:	e003      	b.n	8000d8c <QSPI_ResetChip+0x104>
			__NOP();
 8000d84:	bf00      	nop
		for (temp = 0; temp < 0x2f; temp++) {
 8000d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d88:	3301      	adds	r3, #1
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8000d90:	d9f8      	bls.n	8000d84 <QSPI_ResetChip+0xfc>
		}

		sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 8000d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d96:	61fb      	str	r3, [r7, #28]
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9c:	613b      	str	r3, [r7, #16]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000daa:	2300      	movs	r3, #0
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.Instruction = RESET_EXECUTE_CMD;
 8000dae:	2399      	movs	r3, #153	; 0x99
 8000db0:	607b      	str	r3, [r7, #4]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
		sCommand.Address = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
		sCommand.DataMode = QSPI_DATA_NONE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DummyCycles = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc8:	4619      	mov	r1, r3
 8000dca:	482f      	ldr	r0, [pc, #188]	; (8000e88 <QSPI_ResetChip+0x200>)
 8000dcc:	f001 f8cc 	bl	8001f68 <HAL_QSPI_Command>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <QSPI_ResetChip+0x152>
				!= HAL_OK) {
			return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e052      	b.n	8000e80 <QSPI_ResetChip+0x1f8>
		}


		/* Erasing Sequence -------------------------------------------------- */
			sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dde:	61fb      	str	r3, [r7, #28]
			sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	613b      	str	r3, [r7, #16]
			sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
			sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
			sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
			sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
			sCommand.Instruction = RESET_ENABLE_CMD;
 8000df6:	2366      	movs	r3, #102	; 0x66
 8000df8:	607b      	str	r3, [r7, #4]
			sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
			sCommand.Address = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
			sCommand.DataMode = QSPI_DATA_NONE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
			sCommand.DummyCycles = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]

			if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e10:	4619      	mov	r1, r3
 8000e12:	481d      	ldr	r0, [pc, #116]	; (8000e88 <QSPI_ResetChip+0x200>)
 8000e14:	f001 f8a8 	bl	8001f68 <HAL_QSPI_Command>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <QSPI_ResetChip+0x19a>
					!= HAL_OK) {
				return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e02e      	b.n	8000e80 <QSPI_ResetChip+0x1f8>
			}
			for (temp = 0; temp < 0x2f; temp++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e26:	e003      	b.n	8000e30 <QSPI_ResetChip+0x1a8>
				__NOP();
 8000e28:	bf00      	nop
			for (temp = 0; temp < 0x2f; temp++) {
 8000e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e32:	2b2e      	cmp	r3, #46	; 0x2e
 8000e34:	d9f8      	bls.n	8000e28 <QSPI_ResetChip+0x1a0>
			}

			sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	61fb      	str	r3, [r7, #28]
			sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e40:	613b      	str	r3, [r7, #16]
			sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
			sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
			sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
			sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
			sCommand.Instruction = RESET_EXECUTE_CMD;
 8000e52:	2399      	movs	r3, #153	; 0x99
 8000e54:	607b      	str	r3, [r7, #4]
			sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
			sCommand.Address = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
			sCommand.DataMode = QSPI_DATA_NONE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
			sCommand.DummyCycles = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]

			if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <QSPI_ResetChip+0x200>)
 8000e70:	f001 f87a 	bl	8001f68 <HAL_QSPI_Command>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <QSPI_ResetChip+0x1f6>
					!= HAL_OK) {
				return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <QSPI_ResetChip+0x1f8>
			}


	return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3740      	adds	r7, #64	; 0x40
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24000030 	.word	0x24000030

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_MspInit+0x30>)
 8000e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e98:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x30>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x30>)
 8000ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	58024400 	.word	0x58024400

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f930 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <QUADSPI_IRQHandler+0x10>)
 8000f1a:	f000 fe6b 	bl	8001bf4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	24000030 	.word	0x24000030

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <SystemInit+0xe4>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a36      	ldr	r2, [pc, #216]	; (800100c <SystemInit+0xe4>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <SystemInit+0xe8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	2b06      	cmp	r3, #6
 8000f46:	d807      	bhi.n	8000f58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <SystemInit+0xe8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f023 030f 	bic.w	r3, r3, #15
 8000f50:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <SystemInit+0xe8>)
 8000f52:	f043 0307 	orr.w	r3, r3, #7
 8000f56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <SystemInit+0xec>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <SystemInit+0xec>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <SystemInit+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <SystemInit+0xec>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4929      	ldr	r1, [pc, #164]	; (8001014 <SystemInit+0xec>)
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <SystemInit+0xf0>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <SystemInit+0xe8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <SystemInit+0xe8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 030f 	bic.w	r3, r3, #15
 8000f8a:	4a21      	ldr	r2, [pc, #132]	; (8001010 <SystemInit+0xe8>)
 8000f8c:	f043 0307 	orr.w	r3, r3, #7
 8000f90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <SystemInit+0xec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <SystemInit+0xec>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <SystemInit+0xec>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <SystemInit+0xec>)
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	; (800101c <SystemInit+0xf4>)
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <SystemInit+0xec>)
 8000fac:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <SystemInit+0xf8>)
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <SystemInit+0xec>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <SystemInit+0xfc>)
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <SystemInit+0xec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <SystemInit+0xec>)
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <SystemInit+0xfc>)
 8000fc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <SystemInit+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <SystemInit+0xec>)
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <SystemInit+0xfc>)
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <SystemInit+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <SystemInit+0xec>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <SystemInit+0xec>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <SystemInit+0xec>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <SystemInit+0x100>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <SystemInit+0x104>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ff2:	d202      	bcs.n	8000ffa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <SystemInit+0x108>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <SystemInit+0x10c>)
 8000ffc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001000:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	52002000 	.word	0x52002000
 8001014:	58024400 	.word	0x58024400
 8001018:	eaf6ed7f 	.word	0xeaf6ed7f
 800101c:	02020200 	.word	0x02020200
 8001020:	01ff0000 	.word	0x01ff0000
 8001024:	01010280 	.word	0x01010280
 8001028:	5c001000 	.word	0x5c001000
 800102c:	ffff0000 	.word	0xffff0000
 8001030:	51008108 	.word	0x51008108
 8001034:	52004000 	.word	0x52004000

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800103c:	f7ff ff74 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001066:	f003 fc3b 	bl	80048e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff f97d 	bl	8000368 <main>
  bx  lr
 800106e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001074:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001078:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800107c:	08004968 	.word	0x08004968
  ldr r2, =_sbss
 8001080:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001084:	24000080 	.word	0x24000080

08001088 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC3_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 f9b0 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001098:	f002 f9fe 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 800109c:	4602      	mov	r2, r0
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_Init+0x68>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	4913      	ldr	r1, [pc, #76]	; (80010f8 <HAL_Init+0x6c>)
 80010aa:	5ccb      	ldrb	r3, [r1, r3]
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	fa22 f303 	lsr.w	r3, r2, r3
 80010b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_Init+0x68>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_Init+0x6c>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_Init+0x70>)
 80010ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_Init+0x74>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f814 	bl	8001104 <HAL_InitTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e002      	b.n	80010ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010e6:	f7ff fed1 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	58024400 	.word	0x58024400
 80010f8:	08004950 	.word	0x08004950
 80010fc:	24000004 	.word	0x24000004
 8001100:	24000000 	.word	0x24000000

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e021      	b.n	800115c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_InitTick+0x64>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_InitTick+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f9a3 	bl	800147a <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f95f 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x68>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2400000c 	.word	0x2400000c
 8001168:	24000000 	.word	0x24000000
 800116c:	24000008 	.word	0x24000008

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2400000c 	.word	0x2400000c
 8001194:	2400007c 	.word	0x2400007c

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2400007c 	.word	0x2400007c

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2400000c 	.word	0x2400000c

080011f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetREVID+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0c1b      	lsrs	r3, r3, #16
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	5c001000 	.word	0x5c001000

08001210 <__NVIC_SetPriorityGrouping>:
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <__NVIC_SetPriorityGrouping+0x40>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	4313      	orrs	r3, r2
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x40>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	05fa0000 	.word	0x05fa0000

08001258 <__NVIC_GetPriorityGrouping>:
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_DisableIRQ>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db12      	blt.n	80012e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	490a      	ldr	r1, [pc, #40]	; (80012f4 <__NVIC_DisableIRQ+0x44>)
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	3320      	adds	r3, #32
 80012d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80012dc:	f3bf 8f4f 	dsb	sy
}
 80012e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e2:	f3bf 8f6f 	isb	sy
}
 80012e6:	bf00      	nop
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff05 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800141c:	f7ff ff1c 	bl	8001258 <__NVIC_GetPriorityGrouping>
 8001420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff ff90 	bl	800134c <NVIC_EncodePriority>
 800142c:	4602      	mov	r2, r0
 800142e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff5f 	bl	80012f8 <__NVIC_SetPriority>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff0f 	bl	8001274 <__NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff1f 	bl	80012b0 <__NVIC_DisableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff96 	bl	80013b4 <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014a2:	4b89      	ldr	r3, [pc, #548]	; (80016c8 <HAL_GPIO_Init+0x234>)
 80014a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014a6:	e194      	b.n	80017d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8186 	beq.w	80017cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d005      	beq.n	80014d8 <HAL_GPIO_Init+0x44>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d130      	bne.n	800153a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800150e:	2201      	movs	r2, #1
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 0201 	and.w	r2, r3, #1
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b03      	cmp	r3, #3
 8001544:	d017      	beq.n	8001576 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d123      	bne.n	80015ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0203 	and.w	r2, r3, #3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80e0 	beq.w	80017cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160c:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <HAL_GPIO_Init+0x238>)
 800160e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001612:	4a2e      	ldr	r2, [pc, #184]	; (80016cc <HAL_GPIO_Init+0x238>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_GPIO_Init+0x238>)
 800161e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <HAL_GPIO_Init+0x23c>)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <HAL_GPIO_Init+0x240>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d052      	beq.n	80016fc <HAL_GPIO_Init+0x268>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_GPIO_Init+0x244>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d031      	beq.n	80016c2 <HAL_GPIO_Init+0x22e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_GPIO_Init+0x248>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d02b      	beq.n	80016be <HAL_GPIO_Init+0x22a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <HAL_GPIO_Init+0x24c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d025      	beq.n	80016ba <HAL_GPIO_Init+0x226>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_GPIO_Init+0x250>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d01f      	beq.n	80016b6 <HAL_GPIO_Init+0x222>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_GPIO_Init+0x254>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x21e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x258>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x21a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_GPIO_Init+0x25c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x216>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_GPIO_Init+0x260>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x212>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_GPIO_Init+0x264>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x20e>
 800169e:	2309      	movs	r3, #9
 80016a0:	e02d      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016a2:	230a      	movs	r3, #10
 80016a4:	e02b      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016a6:	2308      	movs	r3, #8
 80016a8:	e029      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016aa:	2307      	movs	r3, #7
 80016ac:	e027      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016ae:	2306      	movs	r3, #6
 80016b0:	e025      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016b2:	2305      	movs	r3, #5
 80016b4:	e023      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e021      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016ba:	2303      	movs	r3, #3
 80016bc:	e01f      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016be:	2302      	movs	r3, #2
 80016c0:	e01d      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e01b      	b.n	80016fe <HAL_GPIO_Init+0x26a>
 80016c6:	bf00      	nop
 80016c8:	58000080 	.word	0x58000080
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58000400 	.word	0x58000400
 80016d4:	58020000 	.word	0x58020000
 80016d8:	58020400 	.word	0x58020400
 80016dc:	58020800 	.word	0x58020800
 80016e0:	58020c00 	.word	0x58020c00
 80016e4:	58021000 	.word	0x58021000
 80016e8:	58021400 	.word	0x58021400
 80016ec:	58021800 	.word	0x58021800
 80016f0:	58021c00 	.word	0x58021c00
 80016f4:	58022000 	.word	0x58022000
 80016f8:	58022400 	.word	0x58022400
 80016fc:	2300      	movs	r3, #0
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	f002 0203 	and.w	r2, r2, #3
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	4093      	lsls	r3, r2
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170e:	4938      	ldr	r1, [pc, #224]	; (80017f0 <HAL_GPIO_Init+0x35c>)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	3301      	adds	r3, #1
 80017d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f47f ae63 	bne.w	80014a8 <HAL_GPIO_Init+0x14>
  }
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	3724      	adds	r7, #36	; 0x24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	58000400 	.word	0x58000400

080017f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001802:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <HAL_GPIO_DeInit+0x1e4>)
 8001804:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001806:	e0d9      	b.n	80019bc <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001808:	2201      	movs	r2, #1
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4013      	ands	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80cc 	beq.w	80019b6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800181e:	4a6f      	ldr	r2, [pc, #444]	; (80019dc <HAL_GPIO_DeInit+0x1e8>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a67      	ldr	r2, [pc, #412]	; (80019e0 <HAL_GPIO_DeInit+0x1ec>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d037      	beq.n	80018b8 <HAL_GPIO_DeInit+0xc4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_GPIO_DeInit+0x1f0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d031      	beq.n	80018b4 <HAL_GPIO_DeInit+0xc0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a65      	ldr	r2, [pc, #404]	; (80019e8 <HAL_GPIO_DeInit+0x1f4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d02b      	beq.n	80018b0 <HAL_GPIO_DeInit+0xbc>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <HAL_GPIO_DeInit+0x1f8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d025      	beq.n	80018ac <HAL_GPIO_DeInit+0xb8>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_GPIO_DeInit+0x1fc>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d01f      	beq.n	80018a8 <HAL_GPIO_DeInit+0xb4>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a62      	ldr	r2, [pc, #392]	; (80019f4 <HAL_GPIO_DeInit+0x200>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d019      	beq.n	80018a4 <HAL_GPIO_DeInit+0xb0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a61      	ldr	r2, [pc, #388]	; (80019f8 <HAL_GPIO_DeInit+0x204>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d013      	beq.n	80018a0 <HAL_GPIO_DeInit+0xac>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a60      	ldr	r2, [pc, #384]	; (80019fc <HAL_GPIO_DeInit+0x208>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00d      	beq.n	800189c <HAL_GPIO_DeInit+0xa8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a5f      	ldr	r2, [pc, #380]	; (8001a00 <HAL_GPIO_DeInit+0x20c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d007      	beq.n	8001898 <HAL_GPIO_DeInit+0xa4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <HAL_GPIO_DeInit+0x210>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_GPIO_DeInit+0xa0>
 8001890:	2309      	movs	r3, #9
 8001892:	e012      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 8001894:	230a      	movs	r3, #10
 8001896:	e010      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 8001898:	2308      	movs	r3, #8
 800189a:	e00e      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 800189c:	2307      	movs	r3, #7
 800189e:	e00c      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 80018a0:	2306      	movs	r3, #6
 80018a2:	e00a      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 80018a4:	2305      	movs	r3, #5
 80018a6:	e008      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_DeInit+0xc6>
 80018b8:	2300      	movs	r3, #0
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d136      	bne.n	8001938 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f4:	4013      	ands	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800191a:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_GPIO_DeInit+0x1e8>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	43da      	mvns	r2, r3
 800192a:	482c      	ldr	r0, [pc, #176]	; (80019dc <HAL_GPIO_DeInit+0x1e8>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	400a      	ands	r2, r1
 8001932:	3302      	adds	r3, #2
 8001934:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2103      	movs	r1, #3
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3208      	adds	r2, #8
 8001954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	08d2      	lsrs	r2, r2, #3
 800196c:	4019      	ands	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2103      	movs	r1, #3
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	2101      	movs	r1, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2103      	movs	r1, #3
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	401a      	ands	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f47f af1f 	bne.w	8001808 <HAL_GPIO_DeInit+0x14>
  }
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	58000080 	.word	0x58000080
 80019dc:	58000400 	.word	0x58000400
 80019e0:	58020000 	.word	0x58020000
 80019e4:	58020400 	.word	0x58020400
 80019e8:	58020800 	.word	0x58020800
 80019ec:	58020c00 	.word	0x58020c00
 80019f0:	58021000 	.word	0x58021000
 80019f4:	58021400 	.word	0x58021400
 80019f8:	58021800 	.word	0x58021800
 80019fc:	58021c00 	.word	0x58021c00
 8001a00:	58022000 	.word	0x58022000
 8001a04:	58022400 	.word	0x58022400

08001a08 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e017      	b.n	8001a4a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d004      	beq.n	8001a30 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e00c      	b.n	8001a4a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2204      	movs	r2, #4
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d00a      	beq.n	8001a82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e01f      	b.n	8001abe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e01d      	b.n	8001abe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	490f      	ldr	r1, [pc, #60]	; (8001ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a92:	f7ff fb81 	bl	8001198 <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a98:	e009      	b.n	8001aae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a9a:	f7ff fb7d 	bl	8001198 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa8:	d901      	bls.n	8001aae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e007      	b.n	8001abe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	d1ee      	bne.n	8001a9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	58024800 	.word	0x58024800

08001acc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff fb60 	bl	8001198 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e05f      	b.n	8001ba4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7fe fe03 	bl	80006fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001af6:	f241 3188 	movw	r1, #5000	; 0x1388
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fcea 	bl	80024d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	021a      	lsls	r2, r3, #8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	2120      	movs	r1, #32
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fd15 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d135      	bne.n	8001ba2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_QSPI_Init+0xe0>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6852      	ldr	r2, [r2, #4]
 8001b44:	0611      	lsls	r1, r2, #24
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68d2      	ldr	r2, [r2, #12]
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	69d2      	ldr	r2, [r2, #28]
 8001b50:	4311      	orrs	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6a12      	ldr	r2, [r2, #32]
 8001b56:	4311      	orrs	r1, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_QSPI_Init+0xe4>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6912      	ldr	r2, [r2, #16]
 8001b6e:	0411      	lsls	r1, r2, #16
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6952      	ldr	r2, [r2, #20]
 8001b74:	4311      	orrs	r1, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6992      	ldr	r2, [r2, #24]
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	00ffff2f 	.word	0x00ffff2f
 8001bb0:	ffe0f8fe 	.word	0xffe0f8fe

08001bb4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e012      	b.n	8001bec <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fe4c 	bl	8000874 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d064      	beq.n	8001ce0 <HAL_QSPI_IRQHandler+0xec>
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d05f      	beq.n	8001ce0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3320      	adds	r3, #32
 8001c26:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b12      	cmp	r3, #18
 8001c32:	d125      	bne.n	8001c80 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001c34:	e01c      	b.n	8001c70 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00f      	beq.n	8001c5e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	1e5a      	subs	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c5c:	e008      	b.n	8001c70 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c6c:	601a      	str	r2, [r3, #0]
          break;
 8001c6e:	e033      	b.n	8001cd8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1db      	bne.n	8001c36 <HAL_QSPI_IRQHandler+0x42>
 8001c7e:	e02b      	b.n	8001cd8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b22      	cmp	r3, #34	; 0x22
 8001c8a:	d125      	bne.n	8001cd8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001c8c:	e01d      	b.n	8001cca <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8001cb6:	e008      	b.n	8001cca <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cc6:	601a      	str	r2, [r3, #0]
          break;
 8001cc8:	e006      	b.n	8001cd8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1da      	bne.n	8001c8e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fbdd 	bl	8002498 <HAL_QSPI_FifoThresholdCallback>
 8001cde:	e13c      	b.n	8001f5a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80b0 	beq.w	8001e4c <HAL_QSPI_IRQHandler+0x258>
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80aa 	beq.w	8001e4c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b12      	cmp	r3, #18
 8001d1a:	d120      	bne.n	8001d5e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d011      	beq.n	8001d4e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0204 	bic.w	r2, r2, #4
 8001d38:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fb94 	bl	8002484 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001d5c:	e0fa      	b.n	8001f54 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b22      	cmp	r3, #34	; 0x22
 8001d68:	d143      	bne.n	8001df2 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d012      	beq.n	8001d9e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	e021      	b.n	8001de2 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3320      	adds	r3, #32
 8001da4:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8001da6:	e013      	b.n	8001dd0 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	7812      	ldrb	r2, [r2, #0]
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1e4      	bne.n	8001da8 <HAL_QSPI_IRQHandler+0x1b4>
 8001dde:	e000      	b.n	8001de2 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8001de0:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fb40 	bl	8002470 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001df0:	e0b0      	b.n	8001f54 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fb28 	bl	800245c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001e0c:	e0a2      	b.n	8001f54 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	f040 809c 	bne.w	8001f54 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001e2a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d103      	bne.n	8001e44 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fb03 	bl	8002448 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001e42:	e087      	b.n	8001f54 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 faf5 	bl	8002434 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001e4a:	e083      	b.n	8001f54 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01f      	beq.n	8001e96 <HAL_QSPI_IRQHandler+0x2a2>
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01a      	beq.n	8001e96 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2208      	movs	r2, #8
 8001e66:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001e84:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fb0c 	bl	80024ac <HAL_QSPI_StatusMatchCallback>
 8001e94:	e061      	b.n	8001f5a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d047      	beq.n	8001f30 <HAL_QSPI_IRQHandler+0x33c>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d042      	beq.n	8001f30 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001ec0:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d021      	beq.n	8001f20 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0204 	bic.w	r2, r2, #4
 8001eea:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_QSPI_IRQHandler+0x370>)
 8001ef2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fd85 	bl	8001a08 <HAL_MDMA_Abort_IT>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d029      	beq.n	8001f58 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fa8b 	bl	8002434 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001f1e:	e01b      	b.n	8001f58 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fa83 	bl	8002434 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001f2e:	e013      	b.n	8001f58 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00f      	beq.n	8001f5a <HAL_QSPI_IRQHandler+0x366>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2210      	movs	r2, #16
 8001f4a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fab7 	bl	80024c0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8001f52:	e002      	b.n	8001f5a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001f54:	bf00      	nop
 8001f56:	e000      	b.n	8001f5a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8001f58:	bf00      	nop
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	080024f1 	.word	0x080024f1

08001f68 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff f910 	bl	8001198 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_QSPI_Command+0x22>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e048      	b.n	800201c <HAL_QSPI_Command+0xb4>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d137      	bne.n	800200e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 facd 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d125      	bne.n	8002012 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fafa 	bl	80025c4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d115      	bne.n	8002004 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 fab7 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10f      	bne.n	8002012 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002002:	e006      	b.n	8002012 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800200c:	e001      	b.n	8002012 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800201a:	7dfb      	ldrb	r3, [r7, #23]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff f8b0 	bl	8001198 <HAL_GetTick>
 8002038:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3320      	adds	r3, #32
 8002040:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_QSPI_Transmit+0x2e>
 800204e:	2302      	movs	r3, #2
 8002050:	e076      	b.n	8002140 <HAL_QSPI_Transmit+0x11c>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d165      	bne.n	8002132 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d056      	beq.n	8002120 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2212      	movs	r2, #18
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80020a6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80020a8:	e01b      	b.n	80020e2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2201      	movs	r2, #1
 80020b2:	2104      	movs	r1, #4
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fa4e 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d113      	bne.n	80020ec <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1df      	bne.n	80020aa <HAL_QSPI_Transmit+0x86>
 80020ea:	e000      	b.n	80020ee <HAL_QSPI_Transmit+0xca>
          break;
 80020ec:	bf00      	nop
      }

      if (status == HAL_OK)
 80020ee:	7ffb      	ldrb	r3, [r7, #31]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d110      	bne.n	8002116 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2201      	movs	r2, #1
 80020fc:	2102      	movs	r1, #2
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fa29 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002108:	7ffb      	ldrb	r3, [r7, #31]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2202      	movs	r2, #2
 8002114:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800211e:	e00a      	b.n	8002136 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f043 0208 	orr.w	r2, r3, #8
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	77fb      	strb	r3, [r7, #31]
 8002130:	e001      	b.n	8002136 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002132:	2302      	movs	r3, #2
 8002134:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800213e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff f81e 	bl	8001198 <HAL_GetTick>
 800215c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3320      	adds	r3, #32
 800216c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_QSPI_Receive+0x36>
 800217a:	2302      	movs	r3, #2
 800217c:	e07d      	b.n	800227a <HAL_QSPI_Receive+0x132>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d16c      	bne.n	800226c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d05d      	beq.n	800225a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2222      	movs	r2, #34	; 0x22
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021d6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80021e0:	e01c      	b.n	800221c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2201      	movs	r2, #1
 80021ea:	2106      	movs	r1, #6
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f9b2 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d114      	bne.n	8002226 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	7812      	ldrb	r2, [r2, #0]
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1de      	bne.n	80021e2 <HAL_QSPI_Receive+0x9a>
 8002224:	e000      	b.n	8002228 <HAL_QSPI_Receive+0xe0>
          break;
 8002226:	bf00      	nop
      }

      if (status == HAL_OK)
 8002228:	7ffb      	ldrb	r3, [r7, #31]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d110      	bne.n	8002250 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2201      	movs	r2, #1
 8002236:	2102      	movs	r1, #2
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f98c 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002242:	7ffb      	ldrb	r3, [r7, #31]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2202      	movs	r2, #2
 800224e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002258:	e00a      	b.n	8002270 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f043 0208 	orr.w	r2, r3, #8
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	77fb      	strb	r3, [r7, #31]
 800226a:	e001      	b.n	8002270 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800226c:	2302      	movs	r3, #2
 800226e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002278:	7ffb      	ldrb	r3, [r7, #31]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b088      	sub	sp, #32
 8002286:	af02      	add	r7, sp, #8
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7fe ff82 	bl	8001198 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_QSPI_AutoPolling+0x24>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e060      	b.n	8002368 <HAL_QSPI_AutoPolling+0xe6>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d14f      	bne.n	800235a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2242      	movs	r2, #66	; 0x42
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2200      	movs	r2, #0
 80022d0:	2120      	movs	r1, #32
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f93f 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d13d      	bne.n	800235e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6852      	ldr	r2, [r2, #4]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6892      	ldr	r2, [r2, #8]
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	431a      	orrs	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002318:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f94b 	bl	80025c4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2201      	movs	r2, #1
 8002336:	2108      	movs	r1, #8
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f90c 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2208      	movs	r2, #8
 800234e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002358:	e001      	b.n	800235e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800235a:	2302      	movs	r3, #2
 800235c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7fe ff0c 	bl	8001198 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_QSPI_MemoryMapped+0x22>
 800238e:	2302      	movs	r3, #2
 8002390:	e04c      	b.n	800242c <HAL_QSPI_MemoryMapped+0xbc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d13b      	bne.n	800241e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2282      	movs	r2, #130	; 0x82
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2200      	movs	r2, #0
 80023be:	2120      	movs	r1, #32
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f8c8 	bl	8002556 <QSPI_WaitFlagStateUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d128      	bne.n	8002422 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 0108 	bic.w	r1, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d110      	bne.n	8002410 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2210      	movs	r2, #16
 80023fe:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800240e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8002410:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f8d4 	bl	80025c4 <QSPI_Config>
 800241c:	e001      	b.n	8002422 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800241e:	2302      	movs	r3, #2
 8002420:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b08      	cmp	r3, #8
 8002514:	d114      	bne.n	8002540 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2202      	movs	r2, #2
 800251c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800252c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0202 	orr.w	r2, r2, #2
 800253c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800253e:	e006      	b.n	800254e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff ff73 	bl	8002434 <HAL_QSPI_ErrorCallback>
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4613      	mov	r3, r2
 8002564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002566:	e01a      	b.n	800259e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d016      	beq.n	800259e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002570:	f7fe fe12 	bl	8001198 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	429a      	cmp	r2, r3
 800257e:	d302      	bcc.n	8002586 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10b      	bne.n	800259e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2204      	movs	r2, #4
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00e      	b.n	80025bc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d1d6      	bne.n	8002568 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <QSPI_Config+0x28>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80025de:	d005      	beq.n	80025ec <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3a01      	subs	r2, #1
 80025ea:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80b9 	beq.w	8002768 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d05f      	beq.n	80026be <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	6892      	ldr	r2, [r2, #8]
 8002606:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d031      	beq.n	8002674 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	431a      	orrs	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	431a      	orrs	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	431a      	orrs	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	049b      	lsls	r3, r3, #18
 800262c:	431a      	orrs	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	431a      	orrs	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	431a      	orrs	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	431a      	orrs	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	431a      	orrs	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	431a      	orrs	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	ea42 0103 	orr.w	r1, r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	430a      	orrs	r2, r1
 800265c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002664:	f000 812e 	beq.w	80028c4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	6852      	ldr	r2, [r2, #4]
 8002670:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002672:	e127      	b.n	80028c4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	431a      	orrs	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	431a      	orrs	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	431a      	orrs	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	049b      	lsls	r3, r3, #18
 8002690:	431a      	orrs	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	431a      	orrs	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	431a      	orrs	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	ea42 0103 	orr.w	r1, r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	615a      	str	r2, [r3, #20]
}
 80026bc:	e102      	b.n	80028c4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02e      	beq.n	8002724 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	431a      	orrs	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	431a      	orrs	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	049b      	lsls	r3, r3, #18
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	ea42 0103 	orr.w	r1, r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	430a      	orrs	r2, r1
 800270c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002714:	f000 80d6 	beq.w	80028c4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	6852      	ldr	r2, [r2, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	e0cf      	b.n	80028c4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	431a      	orrs	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	431a      	orrs	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	431a      	orrs	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	049b      	lsls	r3, r3, #18
 8002740:	431a      	orrs	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	431a      	orrs	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	431a      	orrs	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	431a      	orrs	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	ea42 0103 	orr.w	r1, r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	430a      	orrs	r2, r1
 8002764:	615a      	str	r2, [r3, #20]
}
 8002766:	e0ad      	b.n	80028c4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d058      	beq.n	8002822 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02d      	beq.n	80027de <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	431a      	orrs	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	431a      	orrs	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	431a      	orrs	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	049b      	lsls	r3, r3, #18
 800279e:	431a      	orrs	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	ea42 0103 	orr.w	r1, r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80027d0:	d078      	beq.n	80028c4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	6852      	ldr	r2, [r2, #4]
 80027da:	619a      	str	r2, [r3, #24]
}
 80027dc:	e072      	b.n	80028c4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	431a      	orrs	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	049b      	lsls	r3, r3, #18
 80027fa:	431a      	orrs	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	431a      	orrs	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	431a      	orrs	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	ea42 0103 	orr.w	r1, r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	430a      	orrs	r2, r1
 800281e:	615a      	str	r2, [r3, #20]
}
 8002820:	e050      	b.n	80028c4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d02a      	beq.n	8002880 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	431a      	orrs	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	431a      	orrs	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	431a      	orrs	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	049b      	lsls	r3, r3, #18
 8002846:	431a      	orrs	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	431a      	orrs	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	431a      	orrs	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	431a      	orrs	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	ea42 0103 	orr.w	r1, r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	430a      	orrs	r2, r1
 800286a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002872:	d027      	beq.n	80028c4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	6852      	ldr	r2, [r2, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	e021      	b.n	80028c4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01d      	beq.n	80028c4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	431a      	orrs	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	431a      	orrs	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	431a      	orrs	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	049b      	lsls	r3, r3, #18
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	ea42 0103 	orr.w	r1, r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	615a      	str	r2, [r3, #20]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08c      	sub	sp, #48	; 0x30
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	f000 bc1d 	b.w	800311e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8087 	beq.w	8002a00 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f2:	4b99      	ldr	r3, [pc, #612]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028fc:	4b96      	ldr	r3, [pc, #600]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	2b10      	cmp	r3, #16
 8002906:	d007      	beq.n	8002918 <HAL_RCC_OscConfig+0x48>
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	2b18      	cmp	r3, #24
 800290c:	d110      	bne.n	8002930 <HAL_RCC_OscConfig+0x60>
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d10b      	bne.n	8002930 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	4b8f      	ldr	r3, [pc, #572]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d06c      	beq.n	80029fe <HAL_RCC_OscConfig+0x12e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d168      	bne.n	80029fe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e3f6      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x78>
 800293a:	4b87      	ldr	r3, [pc, #540]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a86      	ldr	r2, [pc, #536]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e02e      	b.n	80029a6 <HAL_RCC_OscConfig+0xd6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x9a>
 8002950:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a80      	ldr	r2, [pc, #512]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b7e      	ldr	r3, [pc, #504]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a7d      	ldr	r2, [pc, #500]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	e01d      	b.n	80029a6 <HAL_RCC_OscConfig+0xd6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002972:	d10c      	bne.n	800298e <HAL_RCC_OscConfig+0xbe>
 8002974:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a77      	ldr	r2, [pc, #476]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 800297a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a74      	ldr	r2, [pc, #464]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	e00b      	b.n	80029a6 <HAL_RCC_OscConfig+0xd6>
 800298e:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a71      	ldr	r2, [pc, #452]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b6f      	ldr	r3, [pc, #444]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6e      	ldr	r2, [pc, #440]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 80029a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d013      	beq.n	80029d6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fbf3 	bl	8001198 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b6:	f7fe fbef 	bl	8001198 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	; 0x64
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e3aa      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029c8:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0xe6>
 80029d4:	e014      	b.n	8002a00 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fbdf 	bl	8001198 <HAL_GetTick>
 80029da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029de:	f7fe fbdb 	bl	8001198 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b64      	cmp	r3, #100	; 0x64
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e396      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x10e>
 80029fc:	e000      	b.n	8002a00 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80cb 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0e:	4b52      	ldr	r3, [pc, #328]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a16:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a18:	4b4f      	ldr	r3, [pc, #316]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_RCC_OscConfig+0x164>
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2b18      	cmp	r3, #24
 8002a28:	d156      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x208>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d151      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x17c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e368      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 0219 	bic.w	r2, r3, #25
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	493f      	ldr	r1, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a5e:	f7fe fb9b 	bl	8001198 <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe fb97 	bl	8001198 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e352      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a78:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	f7fe fbb8 	bl	80011f8 <HAL_GetREVID>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d817      	bhi.n	8002ac2 <HAL_RCC_OscConfig+0x1f2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d108      	bne.n	8002aac <HAL_RCC_OscConfig+0x1dc>
 8002a9a:	4b2f      	ldr	r3, [pc, #188]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002aa2:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aaa:	e07b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	4927      	ldr	r1, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac0:	e070      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	061b      	lsls	r3, r3, #24
 8002ad0:	4921      	ldr	r1, [pc, #132]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad6:	e065      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d048      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 0219 	bic.w	r2, r3, #25
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	491a      	ldr	r1, [pc, #104]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fb51 	bl	8001198 <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afa:	f7fe fb4d 	bl	8001198 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e308      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	f7fe fb6e 	bl	80011f8 <HAL_GetREVID>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d81a      	bhi.n	8002b5c <HAL_RCC_OscConfig+0x28c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d108      	bne.n	8002b40 <HAL_RCC_OscConfig+0x270>
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	6053      	str	r3, [r2, #4]
 8002b3e:	e031      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2d4>
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	031b      	lsls	r3, r3, #12
 8002b4e:	4902      	ldr	r1, [pc, #8]	; (8002b58 <HAL_RCC_OscConfig+0x288>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
 8002b54:	e026      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2d4>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	4b9a      	ldr	r3, [pc, #616]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	4997      	ldr	r1, [pc, #604]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
 8002b70:	e018      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b72:	4b95      	ldr	r3, [pc, #596]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a94      	ldr	r2, [pc, #592]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fb0b 	bl	8001198 <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b86:	f7fe fb07 	bl	8001198 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e2c2      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b98:	4b8b      	ldr	r3, [pc, #556]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a9 	beq.w	8002d04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb2:	4b85      	ldr	r3, [pc, #532]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bbc:	4b82      	ldr	r3, [pc, #520]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d007      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x308>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b18      	cmp	r3, #24
 8002bcc:	d13a      	bne.n	8002c44 <HAL_RCC_OscConfig+0x374>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d135      	bne.n	8002c44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bd8:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x320>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e296      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bf0:	f7fe fb02 	bl	80011f8 <HAL_GetREVID>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d817      	bhi.n	8002c2e <HAL_RCC_OscConfig+0x35e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d108      	bne.n	8002c18 <HAL_RCC_OscConfig+0x348>
 8002c06:	4b70      	ldr	r3, [pc, #448]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c0e:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c16:	e075      	b.n	8002d04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	069b      	lsls	r3, r3, #26
 8002c26:	4968      	ldr	r1, [pc, #416]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c2c:	e06a      	b.n	8002d04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c2e:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	061b      	lsls	r3, r3, #24
 8002c3c:	4962      	ldr	r1, [pc, #392]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c42:	e05f      	b.n	8002d04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d042      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c4c:	4b5e      	ldr	r3, [pc, #376]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a5d      	ldr	r2, [pc, #372]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fa9e 	bl	8001198 <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c60:	f7fe fa9a 	bl	8001198 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e255      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c72:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c7e:	f7fe fabb 	bl	80011f8 <HAL_GetREVID>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d817      	bhi.n	8002cbc <HAL_RCC_OscConfig+0x3ec>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d108      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3d6>
 8002c94:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c9c:	4a4a      	ldr	r2, [pc, #296]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ca2:	6053      	str	r3, [r2, #4]
 8002ca4:	e02e      	b.n	8002d04 <HAL_RCC_OscConfig+0x434>
 8002ca6:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	069b      	lsls	r3, r3, #26
 8002cb4:	4944      	ldr	r1, [pc, #272]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
 8002cba:	e023      	b.n	8002d04 <HAL_RCC_OscConfig+0x434>
 8002cbc:	4b42      	ldr	r3, [pc, #264]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	493f      	ldr	r1, [pc, #252]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60cb      	str	r3, [r1, #12]
 8002cd0:	e018      	b.n	8002d04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a3c      	ldr	r2, [pc, #240]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fa5b 	bl	8001198 <HAL_GetTick>
 8002ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fa57 	bl	8001198 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e212      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cf8:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d036      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d019      	beq.n	8002d4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1c:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fa38 	bl	8001198 <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fa34 	bl	8001198 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1ef      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x45c>
 8002d4a:	e018      	b.n	8002d7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d50:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fa1e 	bl	8001198 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fe fa1a 	bl	8001198 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1d5      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d039      	beq.n	8002dfe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe f9fb 	bl	8001198 <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002da6:	f7fe f9f7 	bl	8001198 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1b2      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_OscConfig+0x4f8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x4d6>
 8002dc4:	e01b      	b.n	8002dfe <HAL_RCC_OscConfig+0x52e>
 8002dc6:	bf00      	nop
 8002dc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dcc:	4b9b      	ldr	r3, [pc, #620]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a9a      	ldr	r2, [pc, #616]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe f9de 	bl	8001198 <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002de0:	f7fe f9da 	bl	8001198 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e195      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002df2:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8081 	beq.w	8002f0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e0c:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <HAL_RCC_OscConfig+0x770>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a8b      	ldr	r2, [pc, #556]	; (8003040 <HAL_RCC_OscConfig+0x770>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e18:	f7fe f9be 	bl	8001198 <HAL_GetTick>
 8002e1c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e20:	f7fe f9ba 	bl	8001198 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e175      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e32:	4b83      	ldr	r3, [pc, #524]	; (8003040 <HAL_RCC_OscConfig+0x770>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d106      	bne.n	8002e54 <HAL_RCC_OscConfig+0x584>
 8002e46:	4b7d      	ldr	r3, [pc, #500]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a7c      	ldr	r2, [pc, #496]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	e02d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x5e0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x5a6>
 8002e5c:	4b77      	ldr	r3, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a76      	ldr	r2, [pc, #472]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	4b74      	ldr	r3, [pc, #464]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a73      	ldr	r2, [pc, #460]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e6e:	f023 0304 	bic.w	r3, r3, #4
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
 8002e74:	e01c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x5e0>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c8>
 8002e7e:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a6b      	ldr	r2, [pc, #428]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0x5e0>
 8002e98:	4b68      	ldr	r3, [pc, #416]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a67      	ldr	r2, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea4:	4b65      	ldr	r3, [pc, #404]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a64      	ldr	r2, [pc, #400]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002eaa:	f023 0304 	bic.w	r3, r3, #4
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d015      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe f96e 	bl	8001198 <HAL_GetTick>
 8002ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7fe f96a 	bl	8001198 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e123      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ed6:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ee      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x5f0>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f958 	bl	8001198 <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fe f954 	bl	8001198 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e10d      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f02:	4b4e      	ldr	r3, [pc, #312]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ee      	bne.n	8002eec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8102 	beq.w	800311c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f18:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f20:	2b18      	cmp	r3, #24
 8002f22:	f000 80bd 	beq.w	80030a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	f040 809e 	bne.w	800306c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a41      	ldr	r2, [pc, #260]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe f92c 	bl	8001198 <HAL_GetTick>
 8002f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe f928 	bl	8001198 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0e3      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f62:	4b36      	ldr	r3, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f66:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_RCC_OscConfig+0x774>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	430a      	orrs	r2, r1
 8002f76:	4931      	ldr	r1, [pc, #196]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	628b      	str	r3, [r1, #40]	; 0x28
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	3b01      	subs	r3, #1
 8002f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	025b      	lsls	r3, r3, #9
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	3b01      	subs	r3, #1
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	061b      	lsls	r3, r3, #24
 8002fa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fac:	4923      	ldr	r1, [pc, #140]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	4a21      	ldr	r2, [pc, #132]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <HAL_RCC_OscConfig+0x778>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fca:	00d2      	lsls	r2, r2, #3
 8002fcc:	491b      	ldr	r1, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	f023 020c 	bic.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4917      	ldr	r1, [pc, #92]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f023 0202 	bic.w	r2, r3, #2
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	4912      	ldr	r1, [pc, #72]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	4a10      	ldr	r2, [pc, #64]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003000:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8003008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a04      	ldr	r2, [pc, #16]	; (800303c <HAL_RCC_OscConfig+0x76c>)
 800302c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe f8b1 	bl	8001198 <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003038:	e011      	b.n	800305e <HAL_RCC_OscConfig+0x78e>
 800303a:	bf00      	nop
 800303c:	58024400 	.word	0x58024400
 8003040:	58024800 	.word	0x58024800
 8003044:	fffffc0c 	.word	0xfffffc0c
 8003048:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe f8a4 	bl	8001198 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e05f      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800305e:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_RCC_OscConfig+0x858>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x77c>
 800306a:	e057      	b.n	800311c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306c:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <HAL_RCC_OscConfig+0x858>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2d      	ldr	r2, [pc, #180]	; (8003128 <HAL_RCC_OscConfig+0x858>)
 8003072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe f88e 	bl	8001198 <HAL_GetTick>
 800307c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe f88a 	bl	8001198 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e045      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003092:	4b25      	ldr	r3, [pc, #148]	; (8003128 <HAL_RCC_OscConfig+0x858>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x7b0>
 800309e:	e03d      	b.n	800311c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_RCC_OscConfig+0x858>)
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_OscConfig+0x858>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d031      	beq.n	8003118 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0203 	and.w	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d12a      	bne.n	8003118 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d122      	bne.n	8003118 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d11a      	bne.n	8003118 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0a5b      	lsrs	r3, r3, #9
 80030e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d111      	bne.n	8003118 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d108      	bne.n	8003118 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0e1b      	lsrs	r3, r3, #24
 800310a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3730      	adds	r7, #48	; 0x30
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	58024400 	.word	0x58024400

0800312c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e19c      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b8a      	ldr	r3, [pc, #552]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d910      	bls.n	8003170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b87      	ldr	r3, [pc, #540]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 020f 	bic.w	r2, r3, #15
 8003156:	4985      	ldr	r1, [pc, #532]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b83      	ldr	r3, [pc, #524]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e184      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	4b7b      	ldr	r3, [pc, #492]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003188:	429a      	cmp	r2, r3
 800318a:	d908      	bls.n	800319e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800318c:	4b78      	ldr	r3, [pc, #480]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4975      	ldr	r1, [pc, #468]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800319a:	4313      	orrs	r3, r2
 800319c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	4b70      	ldr	r3, [pc, #448]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d908      	bls.n	80031cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ba:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	496a      	ldr	r1, [pc, #424]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	4b64      	ldr	r3, [pc, #400]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d908      	bls.n	80031fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031e8:	4b61      	ldr	r3, [pc, #388]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	495e      	ldr	r1, [pc, #376]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003212:	429a      	cmp	r2, r3
 8003214:	d908      	bls.n	8003228 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003216:	4b56      	ldr	r3, [pc, #344]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4953      	ldr	r1, [pc, #332]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003224:	4313      	orrs	r3, r2
 8003226:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	429a      	cmp	r2, r3
 8003242:	d908      	bls.n	8003256 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f023 020f 	bic.w	r2, r3, #15
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4947      	ldr	r1, [pc, #284]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003252:	4313      	orrs	r3, r2
 8003254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d055      	beq.n	800330e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003262:	4b43      	ldr	r3, [pc, #268]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	4940      	ldr	r1, [pc, #256]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003270:	4313      	orrs	r3, r2
 8003272:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d107      	bne.n	800328c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800327c:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d121      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0f6      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003294:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d115      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0ea      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0de      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0d6      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032cc:	4b28      	ldr	r3, [pc, #160]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4925      	ldr	r1, [pc, #148]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fd ff5b 	bl	8001198 <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e6:	f7fd ff57 	bl	8001198 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0be      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	429a      	cmp	r2, r3
 800330c:	d1eb      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	429a      	cmp	r2, r3
 8003328:	d208      	bcs.n	800333c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f023 020f 	bic.w	r2, r3, #15
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003338:	4313      	orrs	r3, r2
 800333a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d214      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	4906      	ldr	r1, [pc, #24]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e086      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
 800336c:	52002000 	.word	0x52002000
 8003370:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800338c:	429a      	cmp	r2, r3
 800338e:	d208      	bcs.n	80033a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	4939      	ldr	r1, [pc, #228]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	4b34      	ldr	r3, [pc, #208]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d208      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	492e      	ldr	r1, [pc, #184]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d208      	bcs.n	80033fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4922      	ldr	r1, [pc, #136]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003416:	429a      	cmp	r2, r3
 8003418:	d208      	bcs.n	800342c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4917      	ldr	r1, [pc, #92]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003428:	4313      	orrs	r3, r2
 800342a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800342c:	f000 f834 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	4912      	ldr	r1, [pc, #72]	; (8003488 <HAL_RCC_ClockConfig+0x35c>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <HAL_RCC_ClockConfig+0x35c>)
 8003454:	5cd3      	ldrb	r3, [r2, r3]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_RCC_ClockConfig+0x360>)
 8003462:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x364>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x368>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fe48 	bl	8001104 <HAL_InitTick>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	58024400 	.word	0x58024400
 8003488:	08004950 	.word	0x08004950
 800348c:	24000004 	.word	0x24000004
 8003490:	24000000 	.word	0x24000000
 8003494:	24000008 	.word	0x24000008

08003498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349e:	4bb3      	ldr	r3, [pc, #716]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a6:	2b18      	cmp	r3, #24
 80034a8:	f200 8155 	bhi.w	8003756 <HAL_RCC_GetSysClockFreq+0x2be>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	08003519 	.word	0x08003519
 80034b8:	08003757 	.word	0x08003757
 80034bc:	08003757 	.word	0x08003757
 80034c0:	08003757 	.word	0x08003757
 80034c4:	08003757 	.word	0x08003757
 80034c8:	08003757 	.word	0x08003757
 80034cc:	08003757 	.word	0x08003757
 80034d0:	08003757 	.word	0x08003757
 80034d4:	0800353f 	.word	0x0800353f
 80034d8:	08003757 	.word	0x08003757
 80034dc:	08003757 	.word	0x08003757
 80034e0:	08003757 	.word	0x08003757
 80034e4:	08003757 	.word	0x08003757
 80034e8:	08003757 	.word	0x08003757
 80034ec:	08003757 	.word	0x08003757
 80034f0:	08003757 	.word	0x08003757
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003757 	.word	0x08003757
 80034fc:	08003757 	.word	0x08003757
 8003500:	08003757 	.word	0x08003757
 8003504:	08003757 	.word	0x08003757
 8003508:	08003757 	.word	0x08003757
 800350c:	08003757 	.word	0x08003757
 8003510:	08003757 	.word	0x08003757
 8003514:	0800354b 	.word	0x0800354b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003518:	4b94      	ldr	r3, [pc, #592]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003524:	4b91      	ldr	r3, [pc, #580]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	4a90      	ldr	r2, [pc, #576]	; (8003770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003536:	e111      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003538:	4b8d      	ldr	r3, [pc, #564]	; (8003770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800353a:	61bb      	str	r3, [r7, #24]
    break;
 800353c:	e10e      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800353e:	4b8d      	ldr	r3, [pc, #564]	; (8003774 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003540:	61bb      	str	r3, [r7, #24]
    break;
 8003542:	e10b      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003544:	4b8c      	ldr	r3, [pc, #560]	; (8003778 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003546:	61bb      	str	r3, [r7, #24]
    break;
 8003548:	e108      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800354a:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003554:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003560:	4b82      	ldr	r3, [pc, #520]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800356a:	4b80      	ldr	r3, [pc, #512]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80e1 	beq.w	8003750 <HAL_RCC_GetSysClockFreq+0x2b8>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b02      	cmp	r3, #2
 8003592:	f000 8083 	beq.w	800369c <HAL_RCC_GetSysClockFreq+0x204>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b02      	cmp	r3, #2
 800359a:	f200 80a1 	bhi.w	80036e0 <HAL_RCC_GetSysClockFreq+0x248>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x114>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d056      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035aa:	e099      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ac:	4b6f      	ldr	r3, [pc, #444]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d02d      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035b8:	4b6c      	ldr	r3, [pc, #432]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	08db      	lsrs	r3, r3, #3
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	4a6b      	ldr	r2, [pc, #428]	; (8003770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
 80035c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e2:	4b62      	ldr	r3, [pc, #392]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800377c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003612:	e087      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003780 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003626:	4b51      	ldr	r3, [pc, #324]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003636:	ed97 6a02 	vldr	s12, [r7, #8]
 800363a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800377c <HAL_RCC_GetSysClockFreq+0x2e4>
 800363e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800364a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003656:	e065      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003784 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366a:	4b40      	ldr	r3, [pc, #256]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367a:	ed97 6a02 	vldr	s12, [r7, #8]
 800367e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800377c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800368e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800369a:	e043      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003788 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ae:	4b2f      	ldr	r3, [pc, #188]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036be:	ed97 6a02 	vldr	s12, [r7, #8]
 80036c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800377c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036de:	e021      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003784 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003702:	ed97 6a02 	vldr	s12, [r7, #8]
 8003706:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800377c <HAL_RCC_GetSysClockFreq+0x2e4>
 800370a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003722:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	0a5b      	lsrs	r3, r3, #9
 800372a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372e:	3301      	adds	r3, #1
 8003730:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800373c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003748:	ee17 3a90 	vmov	r3, s15
 800374c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800374e:	e005      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
    break;
 8003754:	e002      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003758:	61bb      	str	r3, [r7, #24]
    break;
 800375a:	bf00      	nop
  }

  return sysclockfreq;
 800375c:	69bb      	ldr	r3, [r7, #24]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3724      	adds	r7, #36	; 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400
 8003770:	03d09000 	.word	0x03d09000
 8003774:	003d0900 	.word	0x003d0900
 8003778:	02dc6c00 	.word	0x02dc6c00
 800377c:	46000000 	.word	0x46000000
 8003780:	4c742400 	.word	0x4c742400
 8003784:	4a742400 	.word	0x4a742400
 8003788:	4c371b00 	.word	0x4c371b00

0800378c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003794:	2300      	movs	r3, #0
 8003796:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003798:	2300      	movs	r3, #0
 800379a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d03f      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037b0:	d02a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037b6:	d824      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037bc:	d018      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c2:	d81e      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037cc:	d007      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037ce:	e018      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d0:	4ba3      	ldr	r3, [pc, #652]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	4aa2      	ldr	r2, [pc, #648]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037dc:	e015      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2102      	movs	r1, #2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 ff17 	bl	8004618 <RCCEx_PLL2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037ee:	e00c      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3324      	adds	r3, #36	; 0x24
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 ffc0 	bl	800477c <RCCEx_PLL3_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003800:	e003      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
      break;
 8003806:	e000      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003810:	4b93      	ldr	r3, [pc, #588]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800381c:	4990      	ldr	r1, [pc, #576]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	650b      	str	r3, [r1, #80]	; 0x50
 8003822:	e001      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d03d      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	2b04      	cmp	r3, #4
 800383a:	d826      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003859 	.word	0x08003859
 8003848:	08003867 	.word	0x08003867
 800384c:	08003879 	.word	0x08003879
 8003850:	08003891 	.word	0x08003891
 8003854:	08003891 	.word	0x08003891
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003858:	4b81      	ldr	r3, [pc, #516]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a80      	ldr	r2, [pc, #512]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800385e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003864:	e015      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fed3 	bl	8004618 <RCCEx_PLL2_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003876:	e00c      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3324      	adds	r3, #36	; 0x24
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f000 ff7c 	bl	800477c <RCCEx_PLL3_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
      break;
 800388e:	e000      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003898:	4b71      	ldr	r3, [pc, #452]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800389a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389c:	f023 0207 	bic.w	r2, r3, #7
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	496e      	ldr	r1, [pc, #440]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	650b      	str	r3, [r1, #80]	; 0x50
 80038aa:	e001      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d042      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c4:	d02b      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d825      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038cc:	2bc0      	cmp	r3, #192	; 0xc0
 80038ce:	d028      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038d0:	2bc0      	cmp	r3, #192	; 0xc0
 80038d2:	d821      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d016      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d81d      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d007      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80038e4:	e018      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e6:	4b5e      	ldr	r3, [pc, #376]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	4a5d      	ldr	r2, [pc, #372]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038f2:	e017      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fe8c 	bl	8004618 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003904:	e00e      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3324      	adds	r3, #36	; 0x24
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f000 ff35 	bl	800477c <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003916:	e005      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	75fb      	strb	r3, [r7, #23]
      break;
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800392a:	4b4d      	ldr	r3, [pc, #308]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	494a      	ldr	r1, [pc, #296]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	650b      	str	r3, [r1, #80]	; 0x50
 800393c:	e001      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d049      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003954:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003958:	d030      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800395a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800395e:	d82a      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003960:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003964:	d02c      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003966:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800396a:	d824      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800396c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003970:	d018      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003976:	d81e      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800397c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003980:	d007      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003982:	e018      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	4a35      	ldr	r2, [pc, #212]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003990:	e017      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fe3d 	bl	8004618 <RCCEx_PLL2_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039a2:	e00e      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3324      	adds	r3, #36	; 0x24
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fee6 	bl	800477c <RCCEx_PLL3_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039b4:	e005      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ba:	e002      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039d6:	4922      	ldr	r1, [pc, #136]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	658b      	str	r3, [r1, #88]	; 0x58
 80039dc:	e001      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04b      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f8:	d030      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80039fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039fe:	d82a      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a04:	d02e      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003a06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a0a:	d824      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a10:	d018      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a16:	d81e      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a20:	d007      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a22:	e018      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a30:	e019      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fded 	bl	8004618 <RCCEx_PLL2_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a42:	e010      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3324      	adds	r3, #36	; 0x24
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fe96 	bl	800477c <RCCEx_PLL3_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a54:	e007      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
      break;
 8003a5a:	e004      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003a5c:	bf00      	nop
 8003a5e:	e002      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003a60:	58024400 	.word	0x58024400
      break;
 8003a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a6c:	4b99      	ldr	r3, [pc, #612]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a7a:	4996      	ldr	r1, [pc, #600]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	658b      	str	r3, [r1, #88]	; 0x58
 8003a80:	e001      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d032      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a96:	2b30      	cmp	r3, #48	; 0x30
 8003a98:	d01c      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003a9a:	2b30      	cmp	r3, #48	; 0x30
 8003a9c:	d817      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d00c      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d813      	bhi.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d016      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d10f      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aae:	4b89      	ldr	r3, [pc, #548]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	4a88      	ldr	r2, [pc, #544]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003aba:	e00e      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fda8 	bl	8004618 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003acc:	e005      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ae0:	4b7c      	ldr	r3, [pc, #496]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aec:	4979      	ldr	r1, [pc, #484]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003af2:	e001      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d047      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b0c:	d030      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b12:	d82a      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b18:	d02c      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b1e:	d824      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	d018      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2a:	d81e      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b34:	d007      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003b36:	e018      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b38:	4b66      	ldr	r3, [pc, #408]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4a65      	ldr	r2, [pc, #404]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b44:	e017      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fd63 	bl	8004618 <RCCEx_PLL2_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b56:	e00e      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3324      	adds	r3, #36	; 0x24
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fe0c 	bl	800477c <RCCEx_PLL3_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b68:	e005      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6e:	e002      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003b70:	bf00      	nop
 8003b72:	e000      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b7c:	4b55      	ldr	r3, [pc, #340]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	4952      	ldr	r1, [pc, #328]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8003b8e:	e001      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d049      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba8:	d02e      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003baa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bae:	d828      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003bb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bb4:	d02a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003bb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bba:	d822      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003bbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc0:	d026      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003bc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc6:	d81c      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bcc:	d010      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd2:	d816      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01d      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d111      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2101      	movs	r1, #1
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fd17 	bl	8004618 <RCCEx_PLL2_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bee:	e012      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3324      	adds	r3, #36	; 0x24
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fdc0 	bl	800477c <RCCEx_PLL3_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c00:	e009      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
      break;
 8003c06:	e006      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c08:	bf00      	nop
 8003c0a:	e004      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c0c:	bf00      	nop
 8003c0e:	e002      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c1c:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	492a      	ldr	r1, [pc, #168]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8003c2e:	e001      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d04d      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c4a:	d02e      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c50:	d828      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d02a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d822      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c62:	d026      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003c64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c68:	d81c      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c74:	d816      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01d      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c7e:	d111      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	2101      	movs	r1, #1
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fcc6 	bl	8004618 <RCCEx_PLL2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c90:	e012      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3324      	adds	r3, #36	; 0x24
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fd6f 	bl	800477c <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ca2:	e009      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca8:	e006      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003caa:	bf00      	nop
 8003cac:	e004      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ccc:	4901      	ldr	r1, [pc, #4]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8003cd2:	e003      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf0:	d00e      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf6:	d814      	bhi.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d015      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003cfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d00:	d10f      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d02:	4baf      	ldr	r3, [pc, #700]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	4aae      	ldr	r2, [pc, #696]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d0e:	e00c      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fc7e 	bl	8004618 <RCCEx_PLL2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d20:	e003      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
      break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d30:	4ba3      	ldr	r3, [pc, #652]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d3c:	49a0      	ldr	r1, [pc, #640]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	650b      	str	r3, [r1, #80]	; 0x50
 8003d42:	e001      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d032      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d81b      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d9b 	.word	0x08003d9b
 8003d68:	08003d75 	.word	0x08003d75
 8003d6c:	08003d83 	.word	0x08003d83
 8003d70:	08003d9b 	.word	0x08003d9b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d74:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a91      	ldr	r2, [pc, #580]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d80:	e00c      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3304      	adds	r3, #4
 8003d86:	2102      	movs	r1, #2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fc45 	bl	8004618 <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
      break;
 8003d98:	e000      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003da2:	4b87      	ldr	r3, [pc, #540]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	f023 0203 	bic.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	4984      	ldr	r1, [pc, #528]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003db4:	e001      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8086 	beq.w	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc8:	4b7e      	ldr	r3, [pc, #504]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd4:	f7fd f9e0 	bl	8001198 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dda:	e009      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ddc:	f7fd f9dc 	bl	8001198 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d902      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	75fb      	strb	r3, [r7, #23]
        break;
 8003dee:	e005      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df0:	4b74      	ldr	r3, [pc, #464]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ef      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d166      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e02:	4b6f      	ldr	r3, [pc, #444]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e0c:	4053      	eors	r3, r2
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d013      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e16:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e20:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a66      	ldr	r2, [pc, #408]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e2c:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a63      	ldr	r2, [pc, #396]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e38:	4a61      	ldr	r2, [pc, #388]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e48:	d115      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd f9a5 	bl	8001198 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e50:	e00b      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fd f9a1 	bl	8001198 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d902      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	75fb      	strb	r3, [r7, #23]
            break;
 8003e68:	e005      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6a:	4b55      	ldr	r3, [pc, #340]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ed      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d126      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e8a:	d10d      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e9a:	0919      	lsrs	r1, r3, #4
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003e9e:	400b      	ands	r3, r1
 8003ea0:	4947      	ldr	r1, [pc, #284]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	610b      	str	r3, [r1, #16]
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003ea8:	4b45      	ldr	r3, [pc, #276]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4a44      	ldr	r2, [pc, #272]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eb2:	6113      	str	r3, [r2, #16]
 8003eb4:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec2:	493f      	ldr	r1, [pc, #252]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	670b      	str	r3, [r1, #112]	; 0x70
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	75bb      	strb	r3, [r7, #22]
 8003ece:	e001      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8085 	beq.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee6:	2b28      	cmp	r3, #40	; 0x28
 8003ee8:	d866      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003fcd 	.word	0x08003fcd
 8003ef4:	08003fb9 	.word	0x08003fb9
 8003ef8:	08003fb9 	.word	0x08003fb9
 8003efc:	08003fb9 	.word	0x08003fb9
 8003f00:	08003fb9 	.word	0x08003fb9
 8003f04:	08003fb9 	.word	0x08003fb9
 8003f08:	08003fb9 	.word	0x08003fb9
 8003f0c:	08003fb9 	.word	0x08003fb9
 8003f10:	08003f95 	.word	0x08003f95
 8003f14:	08003fb9 	.word	0x08003fb9
 8003f18:	08003fb9 	.word	0x08003fb9
 8003f1c:	08003fb9 	.word	0x08003fb9
 8003f20:	08003fb9 	.word	0x08003fb9
 8003f24:	08003fb9 	.word	0x08003fb9
 8003f28:	08003fb9 	.word	0x08003fb9
 8003f2c:	08003fb9 	.word	0x08003fb9
 8003f30:	08003fa7 	.word	0x08003fa7
 8003f34:	08003fb9 	.word	0x08003fb9
 8003f38:	08003fb9 	.word	0x08003fb9
 8003f3c:	08003fb9 	.word	0x08003fb9
 8003f40:	08003fb9 	.word	0x08003fb9
 8003f44:	08003fb9 	.word	0x08003fb9
 8003f48:	08003fb9 	.word	0x08003fb9
 8003f4c:	08003fb9 	.word	0x08003fb9
 8003f50:	08003fcd 	.word	0x08003fcd
 8003f54:	08003fb9 	.word	0x08003fb9
 8003f58:	08003fb9 	.word	0x08003fb9
 8003f5c:	08003fb9 	.word	0x08003fb9
 8003f60:	08003fb9 	.word	0x08003fb9
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	08003fb9 	.word	0x08003fb9
 8003f6c:	08003fb9 	.word	0x08003fb9
 8003f70:	08003fcd 	.word	0x08003fcd
 8003f74:	08003fb9 	.word	0x08003fb9
 8003f78:	08003fb9 	.word	0x08003fb9
 8003f7c:	08003fb9 	.word	0x08003fb9
 8003f80:	08003fb9 	.word	0x08003fb9
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08003fb9 	.word	0x08003fb9
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003fcd 	.word	0x08003fcd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb3c 	bl	8004618 <RCCEx_PLL2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fa4:	e013      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3324      	adds	r3, #36	; 0x24
 8003faa:	2101      	movs	r1, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fbe5 	bl	800477c <RCCEx_PLL3_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00a      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	75fb      	strb	r3, [r7, #23]
      break;
 8003fbc:	e007      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003fbe:	bf00      	nop
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	58024800 	.word	0x58024800
 8003fc8:	00ffffcf 	.word	0x00ffffcf
      break;
 8003fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d109      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fd4:	4b96      	ldr	r3, [pc, #600]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe0:	4993      	ldr	r1, [pc, #588]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	654b      	str	r3, [r1, #84]	; 0x54
 8003fe6:	e001      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d038      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d821      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800404b 	.word	0x0800404b
 800400c:	08004021 	.word	0x08004021
 8004010:	08004033 	.word	0x08004033
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800404b 	.word	0x0800404b
 800401c:	0800404b 	.word	0x0800404b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 faf6 	bl	8004618 <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004030:	e00c      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3324      	adds	r3, #36	; 0x24
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fb9f 	bl	800477c <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004042:	e003      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
      break;
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800404a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004052:	4b77      	ldr	r3, [pc, #476]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f023 0207 	bic.w	r2, r3, #7
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405e:	4974      	ldr	r1, [pc, #464]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	654b      	str	r3, [r1, #84]	; 0x54
 8004064:	e001      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	2b05      	cmp	r3, #5
 800407e:	d821      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	080040cb 	.word	0x080040cb
 800408c:	080040a1 	.word	0x080040a1
 8004090:	080040b3 	.word	0x080040b3
 8004094:	080040cb 	.word	0x080040cb
 8004098:	080040cb 	.word	0x080040cb
 800409c:	080040cb 	.word	0x080040cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fab6 	bl	8004618 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040b0:	e00c      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3324      	adds	r3, #36	; 0x24
 80040b6:	2101      	movs	r1, #1
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fb5f 	bl	800477c <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040c2:	e003      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
      break;
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80040ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040d2:	4b57      	ldr	r3, [pc, #348]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	4953      	ldr	r1, [pc, #332]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	658b      	str	r3, [r1, #88]	; 0x58
 80040e6:	e001      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d04b      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004102:	d02e      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004108:	d828      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d02a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004114:	d822      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800411a:	d026      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800411c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004120:	d81c      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004126:	d010      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800412c:	d816      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01d      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004136:	d111      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fa6a 	bl	8004618 <RCCEx_PLL2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004148:	e012      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fb13 	bl	800477c <RCCEx_PLL3_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800415a:	e009      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75fb      	strb	r3, [r7, #23]
      break;
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004162:	bf00      	nop
 8004164:	e004      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800416e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004176:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004184:	492a      	ldr	r1, [pc, #168]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	654b      	str	r3, [r1, #84]	; 0x54
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d04d      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041a6:	d02e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80041a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041ac:	d828      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b2:	d02a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b8:	d822      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041be:	d026      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80041c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c4:	d81c      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ca:	d010      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80041cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d0:	d816      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01d      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d111      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fa18 	bl	8004618 <RCCEx_PLL2_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041ec:	e012      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fac1 	bl	800477c <RCCEx_PLL3_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041fe:	e009      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
      break;
 8004204:	e006      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004206:	bf00      	nop
 8004208:	e004      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800420a:	bf00      	nop
 800420c:	e002      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004228:	4901      	ldr	r1, [pc, #4]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	658b      	str	r3, [r1, #88]	; 0x58
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d04b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800424e:	d02e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004250:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004254:	d828      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d02a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004260:	d822      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004262:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004266:	d026      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004268:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800426c:	d81c      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800426e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004272:	d010      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004278:	d816      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01d      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	d111      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f9c4 	bl	8004618 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004294:	e012      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3324      	adds	r3, #36	; 0x24
 800429a:	2102      	movs	r1, #2
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fa6d 	bl	800477c <RCCEx_PLL3_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042a6:	e009      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
      break;
 80042ac:	e006      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042ae:	bf00      	nop
 80042b0:	e004      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042c2:	4b9d      	ldr	r3, [pc, #628]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d0:	4999      	ldr	r1, [pc, #612]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	658b      	str	r3, [r1, #88]	; 0x58
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	d10a      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3324      	adds	r3, #36	; 0x24
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fa3e 	bl	800477c <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800430a:	4b8b      	ldr	r3, [pc, #556]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004318:	4987      	ldr	r1, [pc, #540]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800431a:	4313      	orrs	r3, r2
 800431c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004334:	d10a      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fa1d 	bl	800477c <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800434c:	4b7a      	ldr	r3, [pc, #488]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435a:	4977      	ldr	r1, [pc, #476]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800435c:	4313      	orrs	r3, r2
 800435e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d034      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004376:	d01d      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800437c:	d817      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004386:	d009      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004388:	e011      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f941 	bl	8004618 <RCCEx_PLL2_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800439a:	e00c      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3324      	adds	r3, #36	; 0x24
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f9ea 	bl	800477c <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043ac:	e003      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
      break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80043b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043bc:	4b5e      	ldr	r3, [pc, #376]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043ca:	495b      	ldr	r1, [pc, #364]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	658b      	str	r3, [r1, #88]	; 0x58
 80043d0:	e001      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d033      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ec:	d01c      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80043ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f2:	d816      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f8:	d003      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80043fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043fe:	d007      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004402:	4b4d      	ldr	r3, [pc, #308]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a4c      	ldr	r2, [pc, #304]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800440e:	e00c      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f9b0 	bl	800477c <RCCEx_PLL3_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	493e      	ldr	r1, [pc, #248]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004440:	4313      	orrs	r3, r2
 8004442:	654b      	str	r3, [r1, #84]	; 0x54
 8004444:	e001      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
 8004448:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d029      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800445e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004462:	d007      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004464:	e00f      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	4a33      	ldr	r2, [pc, #204]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004472:	e00b      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	2102      	movs	r1, #2
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f8cc 	bl	8004618 <RCCEx_PLL2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004484:	e002      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	75fb      	strb	r3, [r7, #23]
      break;
 800448a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004492:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	4926      	ldr	r1, [pc, #152]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044a4:	e001      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
 80044a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3324      	adds	r3, #36	; 0x24
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f95d 	bl	800477c <RCCEx_PLL3_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d033      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e0:	d017      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e6:	d811      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80044e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ec:	d013      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80044ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f2:	d80b      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d010      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80044f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fc:	d106      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	4a0d      	ldr	r2, [pc, #52]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800450a:	e007      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]
      break;
 8004510:	e004      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800451a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452e:	4902      	ldr	r1, [pc, #8]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004530:	4313      	orrs	r3, r2
 8004532:	654b      	str	r3, [r1, #84]	; 0x54
 8004534:	e004      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800454c:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	492e      	ldr	r1, [pc, #184]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800455a:	4313      	orrs	r3, r2
 800455c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004578:	4926      	ldr	r1, [pc, #152]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800457a:	4313      	orrs	r3, r2
 800457c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800458a:	4b22      	ldr	r3, [pc, #136]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800458c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004596:	491f      	ldr	r1, [pc, #124]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004598:	4313      	orrs	r3, r2
 800459a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045b2:	6113      	str	r3, [r2, #16]
 80045b4:	4b17      	ldr	r3, [pc, #92]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045be:	4915      	ldr	r1, [pc, #84]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da08      	bge.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	490e      	ldr	r1, [pc, #56]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	4906      	ldr	r1, [pc, #24]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80045fe:	7dbb      	ldrb	r3, [r7, #22]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	58024400 	.word	0x58024400

08004618 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004626:	4b53      	ldr	r3, [pc, #332]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b03      	cmp	r3, #3
 8004630:	d101      	bne.n	8004636 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e099      	b.n	800476a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004636:	4b4f      	ldr	r3, [pc, #316]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a4e      	ldr	r2, [pc, #312]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800463c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004642:	f7fc fda9 	bl	8001198 <HAL_GetTick>
 8004646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004648:	e008      	b.n	800465c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800464a:	f7fc fda5 	bl	8001198 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e086      	b.n	800476a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800465c:	4b45      	ldr	r3, [pc, #276]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	031b      	lsls	r3, r3, #12
 8004676:	493f      	ldr	r1, [pc, #252]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	628b      	str	r3, [r1, #40]	; 0x28
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	3b01      	subs	r3, #1
 8004682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	3b01      	subs	r3, #1
 800468c:	025b      	lsls	r3, r3, #9
 800468e:	b29b      	uxth	r3, r3
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	3b01      	subs	r3, #1
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	061b      	lsls	r3, r3, #24
 80046a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046ac:	4931      	ldr	r1, [pc, #196]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046b2:	4b30      	ldr	r3, [pc, #192]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	492d      	ldr	r1, [pc, #180]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	f023 0220 	bic.w	r2, r3, #32
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4928      	ldr	r1, [pc, #160]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046d6:	4b27      	ldr	r3, [pc, #156]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	4a26      	ldr	r2, [pc, #152]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046dc:	f023 0310 	bic.w	r3, r3, #16
 80046e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e6:	4b24      	ldr	r3, [pc, #144]	; (8004778 <RCCEx_PLL2_Config+0x160>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	69d2      	ldr	r2, [r2, #28]
 80046ee:	00d2      	lsls	r2, r2, #3
 80046f0:	4920      	ldr	r1, [pc, #128]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046f6:	4b1f      	ldr	r3, [pc, #124]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 80046fc:	f043 0310 	orr.w	r3, r3, #16
 8004700:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004708:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	4a19      	ldr	r2, [pc, #100]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800470e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004712:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004714:	e00f      	b.n	8004736 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d106      	bne.n	800472a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800471c:	4b15      	ldr	r3, [pc, #84]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4a14      	ldr	r2, [pc, #80]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004728:	e005      	b.n	8004736 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	4a11      	ldr	r2, [pc, #68]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 8004730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004734:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004736:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800473c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004742:	f7fc fd29 	bl	8001198 <HAL_GetTick>
 8004746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004748:	e008      	b.n	800475c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800474a:	f7fc fd25 	bl	8001198 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e006      	b.n	800476a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <RCCEx_PLL2_Config+0x15c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	58024400 	.word	0x58024400
 8004778:	ffff0007 	.word	0xffff0007

0800477c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800478a:	4b53      	ldr	r3, [pc, #332]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b03      	cmp	r3, #3
 8004794:	d101      	bne.n	800479a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e099      	b.n	80048ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800479a:	4b4f      	ldr	r3, [pc, #316]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a4e      	ldr	r2, [pc, #312]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 80047a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a6:	f7fc fcf7 	bl	8001198 <HAL_GetTick>
 80047aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047ac:	e008      	b.n	80047c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047ae:	f7fc fcf3 	bl	8001198 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e086      	b.n	80048ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047c0:	4b45      	ldr	r3, [pc, #276]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f0      	bne.n	80047ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047cc:	4b42      	ldr	r3, [pc, #264]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	051b      	lsls	r3, r3, #20
 80047da:	493f      	ldr	r1, [pc, #252]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	628b      	str	r3, [r1, #40]	; 0x28
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	025b      	lsls	r3, r3, #9
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	3b01      	subs	r3, #1
 800480a:	061b      	lsls	r3, r3, #24
 800480c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004810:	4931      	ldr	r1, [pc, #196]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004812:	4313      	orrs	r3, r2
 8004814:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004816:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	492d      	ldr	r1, [pc, #180]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004828:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	4928      	ldr	r1, [pc, #160]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004836:	4313      	orrs	r3, r2
 8004838:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800483a:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	4a26      	ldr	r2, [pc, #152]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004844:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <RCCEx_PLL3_Config+0x160>)
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	69d2      	ldr	r2, [r2, #28]
 8004852:	00d2      	lsls	r2, r2, #3
 8004854:	4920      	ldr	r1, [pc, #128]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800485a:	4b1f      	ldr	r3, [pc, #124]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004864:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004876:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004878:	e00f      	b.n	800489a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d106      	bne.n	800488e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004880:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004886:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800488a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800488c:	e005      	b.n	800489a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	4a11      	ldr	r2, [pc, #68]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 8004894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004898:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800489a:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a6:	f7fc fc77 	bl	8001198 <HAL_GetTick>
 80048aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048ac:	e008      	b.n	80048c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048ae:	f7fc fc73 	bl	8001198 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e006      	b.n	80048ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <RCCEx_PLL3_Config+0x15c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	58024400 	.word	0x58024400
 80048dc:	ffff0007 	.word	0xffff0007

080048e0 <__libc_init_array>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	4d0d      	ldr	r5, [pc, #52]	; (8004918 <__libc_init_array+0x38>)
 80048e4:	4c0d      	ldr	r4, [pc, #52]	; (800491c <__libc_init_array+0x3c>)
 80048e6:	1b64      	subs	r4, r4, r5
 80048e8:	10a4      	asrs	r4, r4, #2
 80048ea:	2600      	movs	r6, #0
 80048ec:	42a6      	cmp	r6, r4
 80048ee:	d109      	bne.n	8004904 <__libc_init_array+0x24>
 80048f0:	4d0b      	ldr	r5, [pc, #44]	; (8004920 <__libc_init_array+0x40>)
 80048f2:	4c0c      	ldr	r4, [pc, #48]	; (8004924 <__libc_init_array+0x44>)
 80048f4:	f000 f820 	bl	8004938 <_init>
 80048f8:	1b64      	subs	r4, r4, r5
 80048fa:	10a4      	asrs	r4, r4, #2
 80048fc:	2600      	movs	r6, #0
 80048fe:	42a6      	cmp	r6, r4
 8004900:	d105      	bne.n	800490e <__libc_init_array+0x2e>
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	f855 3b04 	ldr.w	r3, [r5], #4
 8004908:	4798      	blx	r3
 800490a:	3601      	adds	r6, #1
 800490c:	e7ee      	b.n	80048ec <__libc_init_array+0xc>
 800490e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004912:	4798      	blx	r3
 8004914:	3601      	adds	r6, #1
 8004916:	e7f2      	b.n	80048fe <__libc_init_array+0x1e>
 8004918:	08004960 	.word	0x08004960
 800491c:	08004960 	.word	0x08004960
 8004920:	08004960 	.word	0x08004960
 8004924:	08004964 	.word	0x08004964

08004928 <memset>:
 8004928:	4402      	add	r2, r0
 800492a:	4603      	mov	r3, r0
 800492c:	4293      	cmp	r3, r2
 800492e:	d100      	bne.n	8004932 <memset+0xa>
 8004930:	4770      	bx	lr
 8004932:	f803 1b01 	strb.w	r1, [r3], #1
 8004936:	e7f9      	b.n	800492c <memset+0x4>

08004938 <_init>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr

08004944 <_fini>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr
