
Orion_External_Loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000494  24000004  24000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  24000498  24000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  240004a0  240004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  240004a4  240004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  240004a8  240004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000090  24000524  24000524  00010524  2**2
                  ALLOC
  6 .text         00016930  240005b4  240005b4  000105b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  24016ee4  24016ee4  00036ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       00000064  24016fac  24016fac  00026fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000600  24017010  24017010  00027010  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00036fac  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015c4d  00000000  00000000  00036fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000034a8  00000000  00000000  0004cc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000011a0  00000000  00000000  000500d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e24  00000000  00000000  00051270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ad98  00000000  00000000  0008a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001583fd  00000000  00000000  000a4e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fd229  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000fb0  00000000  00000000  001fd280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00004668  00000000  00000000  001fe230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

240005b4 <__do_global_dtors_aux>:
240005b4:	b510      	push	{r4, lr}
240005b6:	4c05      	ldr	r4, [pc, #20]	; (240005cc <__do_global_dtors_aux+0x18>)
240005b8:	7823      	ldrb	r3, [r4, #0]
240005ba:	b933      	cbnz	r3, 240005ca <__do_global_dtors_aux+0x16>
240005bc:	4b04      	ldr	r3, [pc, #16]	; (240005d0 <__do_global_dtors_aux+0x1c>)
240005be:	b113      	cbz	r3, 240005c6 <__do_global_dtors_aux+0x12>
240005c0:	4804      	ldr	r0, [pc, #16]	; (240005d4 <__do_global_dtors_aux+0x20>)
240005c2:	f3af 8000 	nop.w
240005c6:	2301      	movs	r3, #1
240005c8:	7023      	strb	r3, [r4, #0]
240005ca:	bd10      	pop	{r4, pc}
240005cc:	24000524 	.word	0x24000524
240005d0:	00000000 	.word	0x00000000
240005d4:	24016ec8 	.word	0x24016ec8

240005d8 <frame_dummy>:
240005d8:	b508      	push	{r3, lr}
240005da:	4b03      	ldr	r3, [pc, #12]	; (240005e8 <frame_dummy+0x10>)
240005dc:	b11b      	cbz	r3, 240005e6 <frame_dummy+0xe>
240005de:	4903      	ldr	r1, [pc, #12]	; (240005ec <frame_dummy+0x14>)
240005e0:	4803      	ldr	r0, [pc, #12]	; (240005f0 <frame_dummy+0x18>)
240005e2:	f3af 8000 	nop.w
240005e6:	bd08      	pop	{r3, pc}
240005e8:	00000000 	.word	0x00000000
240005ec:	24000528 	.word	0x24000528
240005f0:	24016ec8 	.word	0x24016ec8

240005f4 <_stack_init>:
240005f4:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
240005f8:	4770      	bx	lr
240005fa:	bf00      	nop

240005fc <_mainCRTStartup>:
240005fc:	4b17      	ldr	r3, [pc, #92]	; (2400065c <_mainCRTStartup+0x60>)
240005fe:	2b00      	cmp	r3, #0
24000600:	bf08      	it	eq
24000602:	4b13      	ldreq	r3, [pc, #76]	; (24000650 <_mainCRTStartup+0x54>)
24000604:	469d      	mov	sp, r3
24000606:	f7ff fff5 	bl	240005f4 <_stack_init>
2400060a:	2100      	movs	r1, #0
2400060c:	468b      	mov	fp, r1
2400060e:	460f      	mov	r7, r1
24000610:	4813      	ldr	r0, [pc, #76]	; (24000660 <_mainCRTStartup+0x64>)
24000612:	4a14      	ldr	r2, [pc, #80]	; (24000664 <_mainCRTStartup+0x68>)
24000614:	1a12      	subs	r2, r2, r0
24000616:	f016 fc4f 	bl	24016eb8 <memset>
2400061a:	4b0e      	ldr	r3, [pc, #56]	; (24000654 <_mainCRTStartup+0x58>)
2400061c:	2b00      	cmp	r3, #0
2400061e:	d000      	beq.n	24000622 <_mainCRTStartup+0x26>
24000620:	4798      	blx	r3
24000622:	4b0d      	ldr	r3, [pc, #52]	; (24000658 <_mainCRTStartup+0x5c>)
24000624:	2b00      	cmp	r3, #0
24000626:	d000      	beq.n	2400062a <_mainCRTStartup+0x2e>
24000628:	4798      	blx	r3
2400062a:	2000      	movs	r0, #0
2400062c:	2100      	movs	r1, #0
2400062e:	0004      	movs	r4, r0
24000630:	000d      	movs	r5, r1
24000632:	480d      	ldr	r0, [pc, #52]	; (24000668 <_mainCRTStartup+0x6c>)
24000634:	2800      	cmp	r0, #0
24000636:	d002      	beq.n	2400063e <_mainCRTStartup+0x42>
24000638:	480c      	ldr	r0, [pc, #48]	; (2400066c <_mainCRTStartup+0x70>)
2400063a:	f3af 8000 	nop.w
2400063e:	f016 fc07 	bl	24016e50 <__libc_init_array>
24000642:	0020      	movs	r0, r4
24000644:	0029      	movs	r1, r5
24000646:	f000 fabf 	bl	24000bc8 <main>
2400064a:	f016 fbed 	bl	24016e28 <exit>
2400064e:	bf00      	nop
24000650:	00080000 	.word	0x00080000
	...
24000660:	24000524 	.word	0x24000524
24000664:	240005b4 	.word	0x240005b4
	...
24000670:	240004a8 	.word	0x240004a8
24000674:	240004a8 	.word	0x240004a8
24000678:	24000524 	.word	0x24000524
2400067c:	24000524 	.word	0x24000524
24000680:	240005b4 	.word	0x240005b4

24000684 <Init>:
 * @brief  System initialization.
 * @param  None
 * @retval  LOADER_OK = 1	: Operation succeeded
 * @retval  LOADER_FAIL = 0	: Operation failed
 */
int Init(void) {
24000684:	b580      	push	{r7, lr}
24000686:	b086      	sub	sp, #24
24000688:	af00      	add	r7, sp, #0

	*(uint32_t*)0xE000EDF0=0xA05F0000; //enable interrupts in debug
2400068a:	4b26      	ldr	r3, [pc, #152]	; (24000724 <Init+0xa0>)
2400068c:	4a26      	ldr	r2, [pc, #152]	; (24000728 <Init+0xa4>)
2400068e:	601a      	str	r2, [r3, #0]
	                

	SystemInit();
24000690:	f001 fa96 	bl	24001bc0 <SystemInit>
 * change VTOR setting for other devices
 * SCB->VTOR = 0x20000000 | 0x200;
 *
 * */

	SCB->VTOR = 0x24000000 | 0x200;
24000694:	4b25      	ldr	r3, [pc, #148]	; (2400072c <Init+0xa8>)
24000696:	4a26      	ldr	r2, [pc, #152]	; (24000730 <Init+0xac>)
24000698:	609a      	str	r2, [r3, #8]
2400069a:	2300      	movs	r3, #0
2400069c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400069e:	693b      	ldr	r3, [r7, #16]
240006a0:	f383 8810 	msr	PRIMASK, r3
}
240006a4:	bf00      	nop
	
	__set_PRIMASK(0); //enable interrupts
	
	HAL_Init();
240006a6:	f001 fcb7 	bl	24002018 <HAL_Init>

    SystemClock_Config();
240006aa:	f000 fb39 	bl	24000d20 <SystemClock_Config>

    MX_GPIO_Init();
240006ae:	f000 fa43 	bl	24000b38 <MX_GPIO_Init>
	
	__HAL_RCC_QSPI_FORCE_RESET();  //completely reset peripheral
240006b2:	4b20      	ldr	r3, [pc, #128]	; (24000734 <Init+0xb0>)
240006b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
240006b6:	4a1f      	ldr	r2, [pc, #124]	; (24000734 <Init+0xb0>)
240006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
240006bc:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_QSPI_RELEASE_RESET();
240006be:	4b1d      	ldr	r3, [pc, #116]	; (24000734 <Init+0xb0>)
240006c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
240006c2:	4a1c      	ldr	r2, [pc, #112]	; (24000734 <Init+0xb0>)
240006c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240006c8:	67d3      	str	r3, [r2, #124]	; 0x7c

	if (CSP_QUADSPI_Init() != HAL_OK)
240006ca:	f000 fcf5 	bl	240010b8 <CSP_QUADSPI_Init>
240006ce:	4603      	mov	r3, r0
240006d0:	2b00      	cmp	r3, #0
240006d2:	d007      	beq.n	240006e4 <Init+0x60>
240006d4:	2301      	movs	r3, #1
240006d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240006d8:	68fb      	ldr	r3, [r7, #12]
240006da:	f383 8810 	msr	PRIMASK, r3
}
240006de:	bf00      	nop
	{
		__set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
240006e0:	2300      	movs	r3, #0
240006e2:	e01a      	b.n	2400071a <Init+0x96>
	}


	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
240006e4:	f000 ffa8 	bl	24001638 <CSP_QSPI_EnableMemoryMappedMode>
240006e8:	4603      	mov	r3, r0
240006ea:	2b00      	cmp	r3, #0
240006ec:	d007      	beq.n	240006fe <Init+0x7a>
240006ee:	2301      	movs	r3, #1
240006f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240006f2:	68bb      	ldr	r3, [r7, #8]
240006f4:	f383 8810 	msr	PRIMASK, r3
}
240006f8:	bf00      	nop
	{
		__set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
240006fa:	2300      	movs	r3, #0
240006fc:	e00d      	b.n	2400071a <Init+0x96>
	}
	
	/*Trigger read access before HAL_QSPI_Abort() otherwise abort functionality gets stuck*/
	uint32_t a = *(uint32_t*) 0x90000000;
240006fe:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
24000702:	681b      	ldr	r3, [r3, #0]
24000704:	617b      	str	r3, [r7, #20]
	a++;
24000706:	697b      	ldr	r3, [r7, #20]
24000708:	3301      	adds	r3, #1
2400070a:	617b      	str	r3, [r7, #20]
2400070c:	2301      	movs	r3, #1
2400070e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000710:	687b      	ldr	r3, [r7, #4]
24000712:	f383 8810 	msr	PRIMASK, r3
}
24000716:	bf00      	nop

		__set_PRIMASK(1); //disable interrupts
		return LOADER_OK;
24000718:	2301      	movs	r3, #1
}
2400071a:	4618      	mov	r0, r3
2400071c:	3718      	adds	r7, #24
2400071e:	46bd      	mov	sp, r7
24000720:	bd80      	pop	{r7, pc}
24000722:	bf00      	nop
24000724:	e000edf0 	.word	0xe000edf0
24000728:	a05f0000 	.word	0xa05f0000
2400072c:	e000ed00 	.word	0xe000ed00
24000730:	24000200 	.word	0x24000200
24000734:	58024400 	.word	0x58024400

24000738 <Write>:
 * @param   Size   : size of data
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1		: Operation succeeded
 * @retval  LOADER_FAIL = 0	: Operation failed
 */
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer) {
24000738:	b580      	push	{r7, lr}
2400073a:	b088      	sub	sp, #32
2400073c:	af00      	add	r7, sp, #0
2400073e:	60f8      	str	r0, [r7, #12]
24000740:	60b9      	str	r1, [r7, #8]
24000742:	607a      	str	r2, [r7, #4]
24000744:	2300      	movs	r3, #0
24000746:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000748:	69fb      	ldr	r3, [r7, #28]
2400074a:	f383 8810 	msr	PRIMASK, r3
}
2400074e:	bf00      	nop

	__set_PRIMASK(0); //enable interrupts

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
24000750:	4815      	ldr	r0, [pc, #84]	; (240007a8 <Write+0x70>)
24000752:	f011 ff8e 	bl	24012672 <HAL_QSPI_Abort>
24000756:	4603      	mov	r3, r0
24000758:	2b00      	cmp	r3, #0
2400075a:	d007      	beq.n	2400076c <Write+0x34>
2400075c:	2301      	movs	r3, #1
2400075e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000760:	69bb      	ldr	r3, [r7, #24]
24000762:	f383 8810 	msr	PRIMASK, r3
}
24000766:	bf00      	nop
	{
		__set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
24000768:	2300      	movs	r3, #0
2400076a:	e019      	b.n	240007a0 <Write+0x68>
	}


	if (CSP_QSPI_WriteMemory((uint8_t*) buffer, (Address & (0x0fffffff)),Size) != HAL_OK)
2400076c:	68fb      	ldr	r3, [r7, #12]
2400076e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
24000772:	68ba      	ldr	r2, [r7, #8]
24000774:	4619      	mov	r1, r3
24000776:	6878      	ldr	r0, [r7, #4]
24000778:	f000 fed2 	bl	24001520 <CSP_QSPI_WriteMemory>
2400077c:	4603      	mov	r3, r0
2400077e:	2b00      	cmp	r3, #0
24000780:	d007      	beq.n	24000792 <Write+0x5a>
24000782:	2301      	movs	r3, #1
24000784:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000786:	697b      	ldr	r3, [r7, #20]
24000788:	f383 8810 	msr	PRIMASK, r3
}
2400078c:	bf00      	nop
	{
		__set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
2400078e:	2300      	movs	r3, #0
24000790:	e006      	b.n	240007a0 <Write+0x68>
24000792:	2301      	movs	r3, #1
24000794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000796:	693b      	ldr	r3, [r7, #16]
24000798:	f383 8810 	msr	PRIMASK, r3
}
2400079c:	bf00      	nop
	}

	__set_PRIMASK(1); //disable interrupts
	return LOADER_OK;
2400079e:	2301      	movs	r3, #1
}
240007a0:	4618      	mov	r0, r3
240007a2:	3720      	adds	r7, #32
240007a4:	46bd      	mov	sp, r7
240007a6:	bd80      	pop	{r7, pc}
240007a8:	24000540 	.word	0x24000540

240007ac <SectorErase>:
 * @param   EraseStartAddress :  erase start address
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1		: Operation succeeded
 * @retval  LOADER_FAIL = 0	: Operation failed
 */
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
240007ac:	b580      	push	{r7, lr}
240007ae:	b086      	sub	sp, #24
240007b0:	af00      	add	r7, sp, #0
240007b2:	6078      	str	r0, [r7, #4]
240007b4:	6039      	str	r1, [r7, #0]
240007b6:	2300      	movs	r3, #0
240007b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240007ba:	697b      	ldr	r3, [r7, #20]
240007bc:	f383 8810 	msr	PRIMASK, r3
}
240007c0:	bf00      	nop

	__set_PRIMASK(0); //enable interrupts

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
240007c2:	4814      	ldr	r0, [pc, #80]	; (24000814 <SectorErase+0x68>)
240007c4:	f011 ff55 	bl	24012672 <HAL_QSPI_Abort>
240007c8:	4603      	mov	r3, r0
240007ca:	2b00      	cmp	r3, #0
240007cc:	d007      	beq.n	240007de <SectorErase+0x32>
240007ce:	2301      	movs	r3, #1
240007d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240007d2:	693b      	ldr	r3, [r7, #16]
240007d4:	f383 8810 	msr	PRIMASK, r3
}
240007d8:	bf00      	nop
	{
		__set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
240007da:	2300      	movs	r3, #0
240007dc:	e015      	b.n	2400080a <SectorErase+0x5e>
	}


	if (CSP_QSPI_EraseSector(EraseStartAddress, EraseEndAddress) != HAL_OK)
240007de:	6839      	ldr	r1, [r7, #0]
240007e0:	6878      	ldr	r0, [r7, #4]
240007e2:	f000 fe4b 	bl	2400147c <CSP_QSPI_EraseSector>
240007e6:	4603      	mov	r3, r0
240007e8:	2b00      	cmp	r3, #0
240007ea:	d007      	beq.n	240007fc <SectorErase+0x50>
240007ec:	2301      	movs	r3, #1
240007ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
240007f0:	68fb      	ldr	r3, [r7, #12]
240007f2:	f383 8810 	msr	PRIMASK, r3
}
240007f6:	bf00      	nop
	{
		__set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
240007f8:	2300      	movs	r3, #0
240007fa:	e006      	b.n	2400080a <SectorErase+0x5e>
240007fc:	2301      	movs	r3, #1
240007fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000800:	68bb      	ldr	r3, [r7, #8]
24000802:	f383 8810 	msr	PRIMASK, r3
}
24000806:	bf00      	nop
	}

	__set_PRIMASK(1); //disable interrupts
	return LOADER_OK;
24000808:	2301      	movs	r3, #1
}
2400080a:	4618      	mov	r0, r3
2400080c:	3718      	adds	r7, #24
2400080e:	46bd      	mov	sp, r7
24000810:	bd80      	pop	{r7, pc}
24000812:	bf00      	nop
24000814:	24000540 	.word	0x24000540

24000818 <MassErase>:
 *      none
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(void) {
24000818:	b580      	push	{r7, lr}
2400081a:	b084      	sub	sp, #16
2400081c:	af00      	add	r7, sp, #0
2400081e:	2300      	movs	r3, #0
24000820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000822:	68fb      	ldr	r3, [r7, #12]
24000824:	f383 8810 	msr	PRIMASK, r3
}
24000828:	bf00      	nop

	__set_PRIMASK(0); //enable interrupts

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
2400082a:	4813      	ldr	r0, [pc, #76]	; (24000878 <MassErase+0x60>)
2400082c:	f011 ff21 	bl	24012672 <HAL_QSPI_Abort>
24000830:	4603      	mov	r3, r0
24000832:	2b00      	cmp	r3, #0
24000834:	d007      	beq.n	24000846 <MassErase+0x2e>
24000836:	2301      	movs	r3, #1
24000838:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2400083a:	68bb      	ldr	r3, [r7, #8]
2400083c:	f383 8810 	msr	PRIMASK, r3
}
24000840:	bf00      	nop
	{
		__set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
24000842:	2300      	movs	r3, #0
24000844:	e013      	b.n	2400086e <MassErase+0x56>
	}


	if (CSP_QSPI_Erase_Chip() != HAL_OK)
24000846:	f000 fc6f 	bl	24001128 <CSP_QSPI_Erase_Chip>
2400084a:	4603      	mov	r3, r0
2400084c:	2b00      	cmp	r3, #0
2400084e:	d007      	beq.n	24000860 <MassErase+0x48>
24000850:	2301      	movs	r3, #1
24000852:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000854:	687b      	ldr	r3, [r7, #4]
24000856:	f383 8810 	msr	PRIMASK, r3
}
2400085a:	bf00      	nop
	{
		 __set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
2400085c:	2300      	movs	r3, #0
2400085e:	e006      	b.n	2400086e <MassErase+0x56>
24000860:	2301      	movs	r3, #1
24000862:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000864:	683b      	ldr	r3, [r7, #0]
24000866:	f383 8810 	msr	PRIMASK, r3
}
2400086a:	bf00      	nop
	}

	__set_PRIMASK(1); //disable interrupts
	return LOADER_OK;
2400086c:	2301      	movs	r3, #1
}
2400086e:	4618      	mov	r0, r3
24000870:	3710      	adds	r7, #16
24000872:	46bd      	mov	sp, r7
24000874:	bd80      	pop	{r7, pc}
24000876:	bf00      	nop
24000878:	24000540 	.word	0x24000540

2400087c <CheckSum>:
 *      InitVal       : Initial CRC value
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
2400087c:	b480      	push	{r7}
2400087e:	b089      	sub	sp, #36	; 0x24
24000880:	af00      	add	r7, sp, #0
24000882:	60f8      	str	r0, [r7, #12]
24000884:	60b9      	str	r1, [r7, #8]
24000886:	607a      	str	r2, [r7, #4]
	uint8_t missalignementAddress = StartAddress % 4;
24000888:	68fb      	ldr	r3, [r7, #12]
2400088a:	b2db      	uxtb	r3, r3
2400088c:	f003 0303 	and.w	r3, r3, #3
24000890:	77fb      	strb	r3, [r7, #31]
	uint8_t missalignementSize = Size;
24000892:	68bb      	ldr	r3, [r7, #8]
24000894:	77bb      	strb	r3, [r7, #30]
	int cnt;
	uint32_t Val;

	StartAddress -= StartAddress % 4;
24000896:	68fb      	ldr	r3, [r7, #12]
24000898:	f023 0303 	bic.w	r3, r3, #3
2400089c:	60fb      	str	r3, [r7, #12]
	Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
2400089e:	68bb      	ldr	r3, [r7, #8]
240008a0:	f003 0303 	and.w	r3, r3, #3
240008a4:	2b00      	cmp	r3, #0
240008a6:	d005      	beq.n	240008b4 <CheckSum+0x38>
240008a8:	68bb      	ldr	r3, [r7, #8]
240008aa:	f003 0303 	and.w	r3, r3, #3
240008ae:	f1c3 0304 	rsb	r3, r3, #4
240008b2:	e000      	b.n	240008b6 <CheckSum+0x3a>
240008b4:	2300      	movs	r3, #0
240008b6:	68ba      	ldr	r2, [r7, #8]
240008b8:	4413      	add	r3, r2
240008ba:	60bb      	str	r3, [r7, #8]

	for (cnt = 0; cnt < Size; cnt += 4) {
240008bc:	2300      	movs	r3, #0
240008be:	61bb      	str	r3, [r7, #24]
240008c0:	e0b3      	b.n	24000a2a <CheckSum+0x1ae>
		Val = *(uint32_t*) StartAddress;
240008c2:	68fb      	ldr	r3, [r7, #12]
240008c4:	681b      	ldr	r3, [r3, #0]
240008c6:	617b      	str	r3, [r7, #20]
		if (missalignementAddress) {
240008c8:	7ffb      	ldrb	r3, [r7, #31]
240008ca:	2b00      	cmp	r3, #0
240008cc:	d040      	beq.n	24000950 <CheckSum+0xd4>
			switch (missalignementAddress) {
240008ce:	7ffb      	ldrb	r3, [r7, #31]
240008d0:	2b03      	cmp	r3, #3
240008d2:	d032      	beq.n	2400093a <CheckSum+0xbe>
240008d4:	2b03      	cmp	r3, #3
240008d6:	f300 80a2 	bgt.w	24000a1e <CheckSum+0x1a2>
240008da:	2b01      	cmp	r3, #1
240008dc:	d002      	beq.n	240008e4 <CheckSum+0x68>
240008de:	2b02      	cmp	r3, #2
240008e0:	d019      	beq.n	24000916 <CheckSum+0x9a>
240008e2:	e09c      	b.n	24000a1e <CheckSum+0x1a2>
			case 1:
				InitVal += (uint8_t) (Val >> 8 & 0xff);
240008e4:	697b      	ldr	r3, [r7, #20]
240008e6:	0a1b      	lsrs	r3, r3, #8
240008e8:	b2db      	uxtb	r3, r3
240008ea:	461a      	mov	r2, r3
240008ec:	687b      	ldr	r3, [r7, #4]
240008ee:	4413      	add	r3, r2
240008f0:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 16 & 0xff);
240008f2:	697b      	ldr	r3, [r7, #20]
240008f4:	0c1b      	lsrs	r3, r3, #16
240008f6:	b2db      	uxtb	r3, r3
240008f8:	461a      	mov	r2, r3
240008fa:	687b      	ldr	r3, [r7, #4]
240008fc:	4413      	add	r3, r2
240008fe:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 24 & 0xff);
24000900:	697b      	ldr	r3, [r7, #20]
24000902:	0e1b      	lsrs	r3, r3, #24
24000904:	b2db      	uxtb	r3, r3
24000906:	461a      	mov	r2, r3
24000908:	687b      	ldr	r3, [r7, #4]
2400090a:	4413      	add	r3, r2
2400090c:	607b      	str	r3, [r7, #4]
				missalignementAddress -= 1;
2400090e:	7ffb      	ldrb	r3, [r7, #31]
24000910:	3b01      	subs	r3, #1
24000912:	77fb      	strb	r3, [r7, #31]
				break;
24000914:	e083      	b.n	24000a1e <CheckSum+0x1a2>
			case 2:
				InitVal += (uint8_t) (Val >> 16 & 0xff);
24000916:	697b      	ldr	r3, [r7, #20]
24000918:	0c1b      	lsrs	r3, r3, #16
2400091a:	b2db      	uxtb	r3, r3
2400091c:	461a      	mov	r2, r3
2400091e:	687b      	ldr	r3, [r7, #4]
24000920:	4413      	add	r3, r2
24000922:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 24 & 0xff);
24000924:	697b      	ldr	r3, [r7, #20]
24000926:	0e1b      	lsrs	r3, r3, #24
24000928:	b2db      	uxtb	r3, r3
2400092a:	461a      	mov	r2, r3
2400092c:	687b      	ldr	r3, [r7, #4]
2400092e:	4413      	add	r3, r2
24000930:	607b      	str	r3, [r7, #4]
				missalignementAddress -= 2;
24000932:	7ffb      	ldrb	r3, [r7, #31]
24000934:	3b02      	subs	r3, #2
24000936:	77fb      	strb	r3, [r7, #31]
				break;
24000938:	e071      	b.n	24000a1e <CheckSum+0x1a2>
			case 3:
				InitVal += (uint8_t) (Val >> 24 & 0xff);
2400093a:	697b      	ldr	r3, [r7, #20]
2400093c:	0e1b      	lsrs	r3, r3, #24
2400093e:	b2db      	uxtb	r3, r3
24000940:	461a      	mov	r2, r3
24000942:	687b      	ldr	r3, [r7, #4]
24000944:	4413      	add	r3, r2
24000946:	607b      	str	r3, [r7, #4]
				missalignementAddress -= 3;
24000948:	7ffb      	ldrb	r3, [r7, #31]
2400094a:	3b03      	subs	r3, #3
2400094c:	77fb      	strb	r3, [r7, #31]
				break;
2400094e:	e066      	b.n	24000a1e <CheckSum+0x1a2>
			}
		} else if ((Size - missalignementSize) % 4 && (Size - cnt) <= 4) {
24000950:	7fbb      	ldrb	r3, [r7, #30]
24000952:	68ba      	ldr	r2, [r7, #8]
24000954:	1ad3      	subs	r3, r2, r3
24000956:	f003 0303 	and.w	r3, r3, #3
2400095a:	2b00      	cmp	r3, #0
2400095c:	d044      	beq.n	240009e8 <CheckSum+0x16c>
2400095e:	69bb      	ldr	r3, [r7, #24]
24000960:	68ba      	ldr	r2, [r7, #8]
24000962:	1ad3      	subs	r3, r2, r3
24000964:	2b04      	cmp	r3, #4
24000966:	d83f      	bhi.n	240009e8 <CheckSum+0x16c>
			switch (Size - missalignementSize) {
24000968:	7fbb      	ldrb	r3, [r7, #30]
2400096a:	68ba      	ldr	r2, [r7, #8]
2400096c:	1ad3      	subs	r3, r2, r3
2400096e:	2b03      	cmp	r3, #3
24000970:	d02f      	beq.n	240009d2 <CheckSum+0x156>
24000972:	2b03      	cmp	r3, #3
24000974:	d853      	bhi.n	24000a1e <CheckSum+0x1a2>
24000976:	2b01      	cmp	r3, #1
24000978:	d002      	beq.n	24000980 <CheckSum+0x104>
2400097a:	2b02      	cmp	r3, #2
2400097c:	d018      	beq.n	240009b0 <CheckSum+0x134>
2400097e:	e04e      	b.n	24000a1e <CheckSum+0x1a2>
			case 1:
				InitVal += (uint8_t) Val;
24000980:	697b      	ldr	r3, [r7, #20]
24000982:	b2db      	uxtb	r3, r3
24000984:	461a      	mov	r2, r3
24000986:	687b      	ldr	r3, [r7, #4]
24000988:	4413      	add	r3, r2
2400098a:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 8 & 0xff);
2400098c:	697b      	ldr	r3, [r7, #20]
2400098e:	0a1b      	lsrs	r3, r3, #8
24000990:	b2db      	uxtb	r3, r3
24000992:	461a      	mov	r2, r3
24000994:	687b      	ldr	r3, [r7, #4]
24000996:	4413      	add	r3, r2
24000998:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 16 & 0xff);
2400099a:	697b      	ldr	r3, [r7, #20]
2400099c:	0c1b      	lsrs	r3, r3, #16
2400099e:	b2db      	uxtb	r3, r3
240009a0:	461a      	mov	r2, r3
240009a2:	687b      	ldr	r3, [r7, #4]
240009a4:	4413      	add	r3, r2
240009a6:	607b      	str	r3, [r7, #4]
				missalignementSize -= 1;
240009a8:	7fbb      	ldrb	r3, [r7, #30]
240009aa:	3b01      	subs	r3, #1
240009ac:	77bb      	strb	r3, [r7, #30]
				break;
240009ae:	e01a      	b.n	240009e6 <CheckSum+0x16a>
			case 2:
				InitVal += (uint8_t) Val;
240009b0:	697b      	ldr	r3, [r7, #20]
240009b2:	b2db      	uxtb	r3, r3
240009b4:	461a      	mov	r2, r3
240009b6:	687b      	ldr	r3, [r7, #4]
240009b8:	4413      	add	r3, r2
240009ba:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 8 & 0xff);
240009bc:	697b      	ldr	r3, [r7, #20]
240009be:	0a1b      	lsrs	r3, r3, #8
240009c0:	b2db      	uxtb	r3, r3
240009c2:	461a      	mov	r2, r3
240009c4:	687b      	ldr	r3, [r7, #4]
240009c6:	4413      	add	r3, r2
240009c8:	607b      	str	r3, [r7, #4]
				missalignementSize -= 2;
240009ca:	7fbb      	ldrb	r3, [r7, #30]
240009cc:	3b02      	subs	r3, #2
240009ce:	77bb      	strb	r3, [r7, #30]
				break;
240009d0:	e009      	b.n	240009e6 <CheckSum+0x16a>
			case 3:
				InitVal += (uint8_t) Val;
240009d2:	697b      	ldr	r3, [r7, #20]
240009d4:	b2db      	uxtb	r3, r3
240009d6:	461a      	mov	r2, r3
240009d8:	687b      	ldr	r3, [r7, #4]
240009da:	4413      	add	r3, r2
240009dc:	607b      	str	r3, [r7, #4]
				missalignementSize -= 3;
240009de:	7fbb      	ldrb	r3, [r7, #30]
240009e0:	3b03      	subs	r3, #3
240009e2:	77bb      	strb	r3, [r7, #30]
				break;
240009e4:	bf00      	nop
			switch (Size - missalignementSize) {
240009e6:	e01a      	b.n	24000a1e <CheckSum+0x1a2>
			}
		} else {
			InitVal += (uint8_t) Val;
240009e8:	697b      	ldr	r3, [r7, #20]
240009ea:	b2db      	uxtb	r3, r3
240009ec:	461a      	mov	r2, r3
240009ee:	687b      	ldr	r3, [r7, #4]
240009f0:	4413      	add	r3, r2
240009f2:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val >> 8 & 0xff);
240009f4:	697b      	ldr	r3, [r7, #20]
240009f6:	0a1b      	lsrs	r3, r3, #8
240009f8:	b2db      	uxtb	r3, r3
240009fa:	461a      	mov	r2, r3
240009fc:	687b      	ldr	r3, [r7, #4]
240009fe:	4413      	add	r3, r2
24000a00:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val >> 16 & 0xff);
24000a02:	697b      	ldr	r3, [r7, #20]
24000a04:	0c1b      	lsrs	r3, r3, #16
24000a06:	b2db      	uxtb	r3, r3
24000a08:	461a      	mov	r2, r3
24000a0a:	687b      	ldr	r3, [r7, #4]
24000a0c:	4413      	add	r3, r2
24000a0e:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val >> 24 & 0xff);
24000a10:	697b      	ldr	r3, [r7, #20]
24000a12:	0e1b      	lsrs	r3, r3, #24
24000a14:	b2db      	uxtb	r3, r3
24000a16:	461a      	mov	r2, r3
24000a18:	687b      	ldr	r3, [r7, #4]
24000a1a:	4413      	add	r3, r2
24000a1c:	607b      	str	r3, [r7, #4]
		}
		StartAddress += 4;
24000a1e:	68fb      	ldr	r3, [r7, #12]
24000a20:	3304      	adds	r3, #4
24000a22:	60fb      	str	r3, [r7, #12]
	for (cnt = 0; cnt < Size; cnt += 4) {
24000a24:	69bb      	ldr	r3, [r7, #24]
24000a26:	3304      	adds	r3, #4
24000a28:	61bb      	str	r3, [r7, #24]
24000a2a:	69bb      	ldr	r3, [r7, #24]
24000a2c:	68ba      	ldr	r2, [r7, #8]
24000a2e:	429a      	cmp	r2, r3
24000a30:	f63f af47 	bhi.w	240008c2 <CheckSum+0x46>
	}

	return (InitVal);
24000a34:	687b      	ldr	r3, [r7, #4]
}
24000a36:	4618      	mov	r0, r3
24000a38:	3724      	adds	r7, #36	; 0x24
24000a3a:	46bd      	mov	sp, r7
24000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a40:	4770      	bx	lr

24000a42 <Verify>:
 * outputs   :
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size,uint32_t missalignement){
24000a42:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
24000a46:	b08c      	sub	sp, #48	; 0x30
24000a48:	af00      	add	r7, sp, #0
24000a4a:	60f8      	str	r0, [r7, #12]
24000a4c:	60b9      	str	r1, [r7, #8]
24000a4e:	607a      	str	r2, [r7, #4]
24000a50:	603b      	str	r3, [r7, #0]
24000a52:	2300      	movs	r3, #0
24000a54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000a56:	69fb      	ldr	r3, [r7, #28]
24000a58:	f383 8810 	msr	PRIMASK, r3
}
24000a5c:	bf00      	nop

	__set_PRIMASK(0); //enable interrupts
	uint32_t VerifiedData = 0, InitVal = 0;
24000a5e:	2300      	movs	r3, #0
24000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
24000a62:	2300      	movs	r3, #0
24000a64:	62bb      	str	r3, [r7, #40]	; 0x28
	uint64_t checksum;
	Size *= 4;
24000a66:	687b      	ldr	r3, [r7, #4]
24000a68:	009b      	lsls	r3, r3, #2
24000a6a:	607b      	str	r3, [r7, #4]

	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
24000a6c:	f000 fde4 	bl	24001638 <CSP_QSPI_EnableMemoryMappedMode>
24000a70:	4603      	mov	r3, r0
24000a72:	2b00      	cmp	r3, #0
24000a74:	d00a      	beq.n	24000a8c <Verify+0x4a>
24000a76:	2301      	movs	r3, #1
24000a78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000a7a:	69bb      	ldr	r3, [r7, #24]
24000a7c:	f383 8810 	msr	PRIMASK, r3
}
24000a80:	bf00      	nop
	{
		__set_PRIMASK(1); //disable interrupts
		return LOADER_FAIL;
24000a82:	f04f 0400 	mov.w	r4, #0
24000a86:	f04f 0500 	mov.w	r5, #0
24000a8a:	e04d      	b.n	24000b28 <Verify+0xe6>
	}

	checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24000a8c:	683b      	ldr	r3, [r7, #0]
24000a8e:	f003 020f 	and.w	r2, r3, #15
24000a92:	68fb      	ldr	r3, [r7, #12]
24000a94:	18d0      	adds	r0, r2, r3
			Size - ((missalignement >> 16) & 0xF), InitVal);
24000a96:	683b      	ldr	r3, [r7, #0]
24000a98:	0c1b      	lsrs	r3, r3, #16
24000a9a:	f003 030f 	and.w	r3, r3, #15
	checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24000a9e:	687a      	ldr	r2, [r7, #4]
24000aa0:	1ad3      	subs	r3, r2, r3
24000aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
24000aa4:	4619      	mov	r1, r3
24000aa6:	f7ff fee9 	bl	2400087c <CheckSum>
24000aaa:	4603      	mov	r3, r0
24000aac:	2200      	movs	r2, #0
24000aae:	469a      	mov	sl, r3
24000ab0:	4693      	mov	fp, r2
24000ab2:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	while (Size > VerifiedData) {
24000ab6:	e025      	b.n	24000b04 <Verify+0xc2>
		if (*(uint8_t*) MemoryAddr++
24000ab8:	68fb      	ldr	r3, [r7, #12]
24000aba:	1c5a      	adds	r2, r3, #1
24000abc:	60fa      	str	r2, [r7, #12]
24000abe:	781a      	ldrb	r2, [r3, #0]
				!= *((uint8_t*) RAMBufferAddr + VerifiedData)){
24000ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
24000ac2:	68bb      	ldr	r3, [r7, #8]
24000ac4:	440b      	add	r3, r1
24000ac6:	781b      	ldrb	r3, [r3, #0]
		if (*(uint8_t*) MemoryAddr++
24000ac8:	429a      	cmp	r2, r3
24000aca:	d018      	beq.n	24000afe <Verify+0xbc>
24000acc:	2301      	movs	r3, #1
24000ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000ad0:	697b      	ldr	r3, [r7, #20]
24000ad2:	f383 8810 	msr	PRIMASK, r3
}
24000ad6:	bf00      	nop
			__set_PRIMASK(1); //disable interrupts
			return ((checksum << 32) + (MemoryAddr + VerifiedData));
24000ad8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
24000adc:	f04f 0200 	mov.w	r2, #0
24000ae0:	f04f 0300 	mov.w	r3, #0
24000ae4:	0003      	movs	r3, r0
24000ae6:	2200      	movs	r2, #0
24000ae8:	68f8      	ldr	r0, [r7, #12]
24000aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
24000aec:	4401      	add	r1, r0
24000aee:	2000      	movs	r0, #0
24000af0:	4688      	mov	r8, r1
24000af2:	4681      	mov	r9, r0
24000af4:	eb12 0408 	adds.w	r4, r2, r8
24000af8:	eb43 0509 	adc.w	r5, r3, r9
24000afc:	e014      	b.n	24000b28 <Verify+0xe6>
		}
		VerifiedData++;
24000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24000b00:	3301      	adds	r3, #1
24000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (Size > VerifiedData) {
24000b04:	687a      	ldr	r2, [r7, #4]
24000b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24000b08:	429a      	cmp	r2, r3
24000b0a:	d8d5      	bhi.n	24000ab8 <Verify+0x76>
24000b0c:	2301      	movs	r3, #1
24000b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
24000b10:	693b      	ldr	r3, [r7, #16]
24000b12:	f383 8810 	msr	PRIMASK, r3
}
24000b16:	bf00      	nop
	}

	__set_PRIMASK(1); //disable interrupts
	return (checksum << 32);
24000b18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
24000b1c:	f04f 0400 	mov.w	r4, #0
24000b20:	f04f 0500 	mov.w	r5, #0
24000b24:	0015      	movs	r5, r2
24000b26:	2400      	movs	r4, #0
}
24000b28:	4622      	mov	r2, r4
24000b2a:	462b      	mov	r3, r5
24000b2c:	4610      	mov	r0, r2
24000b2e:	4619      	mov	r1, r3
24000b30:	3730      	adds	r7, #48	; 0x30
24000b32:	46bd      	mov	sp, r7
24000b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

24000b38 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24000b38:	b480      	push	{r7}
24000b3a:	b085      	sub	sp, #20
24000b3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
24000b3e:	4b21      	ldr	r3, [pc, #132]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000b44:	4a1f      	ldr	r2, [pc, #124]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000b4e:	4b1d      	ldr	r3, [pc, #116]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
24000b58:	60fb      	str	r3, [r7, #12]
24000b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24000b5c:	4b19      	ldr	r3, [pc, #100]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000b62:	4a18      	ldr	r2, [pc, #96]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b64:	f043 0302 	orr.w	r3, r3, #2
24000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000b6c:	4b15      	ldr	r3, [pc, #84]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000b72:	f003 0302 	and.w	r3, r3, #2
24000b76:	60bb      	str	r3, [r7, #8]
24000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000b7a:	4b12      	ldr	r3, [pc, #72]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000b80:	4a10      	ldr	r2, [pc, #64]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b82:	f043 0310 	orr.w	r3, r3, #16
24000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000b8a:	4b0e      	ldr	r3, [pc, #56]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000b90:	f003 0310 	and.w	r3, r3, #16
24000b94:	607b      	str	r3, [r7, #4]
24000b96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24000b98:	4b0a      	ldr	r3, [pc, #40]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000b9e:	4a09      	ldr	r2, [pc, #36]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000ba0:	f043 0304 	orr.w	r3, r3, #4
24000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000ba8:	4b06      	ldr	r3, [pc, #24]	; (24000bc4 <MX_GPIO_Init+0x8c>)
24000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000bae:	f003 0304 	and.w	r3, r3, #4
24000bb2:	603b      	str	r3, [r7, #0]
24000bb4:	683b      	ldr	r3, [r7, #0]

}
24000bb6:	bf00      	nop
24000bb8:	3714      	adds	r7, #20
24000bba:	46bd      	mov	sp, r7
24000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
24000bc0:	4770      	bx	lr
24000bc2:	bf00      	nop
24000bc4:	58024400 	.word	0x58024400

24000bc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
24000bc8:	b580      	push	{r7, lr}
24000bca:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
24000bce:	b082      	sub	sp, #8
24000bd0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
24000bd2:	f001 fa21 	bl	24002018 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
24000bd6:	f000 f8a3 	bl	24000d20 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
24000bda:	f7ff ffad 	bl	24000b38 <MX_GPIO_Init>
	MX_QUADSPI_Init();
24000bde:	f000 f953 	bl	24000e88 <MX_QUADSPI_Init>
	/* USER CODE BEGIN 2 */
	uint8_t buffer_test[MEMORY_SECTOR_SIZE];
	uint32_t var = 0;
24000be2:	2300      	movs	r3, #0
24000be4:	f241 0204 	movw	r2, #4100	; 0x1004
24000be8:	443a      	add	r2, r7
24000bea:	6013      	str	r3, [r2, #0]

	CSP_QUADSPI_Init();
24000bec:	f000 fa64 	bl	240010b8 <CSP_QUADSPI_Init>

	for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
24000bf0:	2300      	movs	r3, #0
24000bf2:	f241 0204 	movw	r2, #4100	; 0x1004
24000bf6:	443a      	add	r2, r7
24000bf8:	6013      	str	r3, [r2, #0]
24000bfa:	e017      	b.n	24000c2c <main+0x64>
		buffer_test[var] = (var & 0xff);
24000bfc:	f241 0304 	movw	r3, #4100	; 0x1004
24000c00:	443b      	add	r3, r7
24000c02:	681b      	ldr	r3, [r3, #0]
24000c04:	b2da      	uxtb	r2, r3
24000c06:	f107 0308 	add.w	r3, r7, #8
24000c0a:	4619      	mov	r1, r3
24000c0c:	f241 0304 	movw	r3, #4100	; 0x1004
24000c10:	443b      	add	r3, r7
24000c12:	681b      	ldr	r3, [r3, #0]
24000c14:	440b      	add	r3, r1
24000c16:	3b04      	subs	r3, #4
24000c18:	701a      	strb	r2, [r3, #0]
	for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
24000c1a:	f241 0304 	movw	r3, #4100	; 0x1004
24000c1e:	443b      	add	r3, r7
24000c20:	681b      	ldr	r3, [r3, #0]
24000c22:	3301      	adds	r3, #1
24000c24:	f241 0204 	movw	r2, #4100	; 0x1004
24000c28:	443a      	add	r2, r7
24000c2a:	6013      	str	r3, [r2, #0]
24000c2c:	f241 0304 	movw	r3, #4100	; 0x1004
24000c30:	443b      	add	r3, r7
24000c32:	681b      	ldr	r3, [r3, #0]
24000c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24000c38:	d3e0      	bcc.n	24000bfc <main+0x34>
	}

	for (var = 0; var < SECTORS_COUNT; var++) {
24000c3a:	2300      	movs	r3, #0
24000c3c:	f241 0204 	movw	r2, #4100	; 0x1004
24000c40:	443a      	add	r2, r7
24000c42:	6013      	str	r3, [r2, #0]
24000c44:	e030      	b.n	24000ca8 <main+0xe0>

		if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
24000c46:	f241 0304 	movw	r3, #4100	; 0x1004
24000c4a:	443b      	add	r3, r7
24000c4c:	681b      	ldr	r3, [r3, #0]
24000c4e:	031a      	lsls	r2, r3, #12
				(var + 1) * MEMORY_SECTOR_SIZE - 1) != HAL_OK) {
24000c50:	f241 0304 	movw	r3, #4100	; 0x1004
24000c54:	443b      	add	r3, r7
24000c56:	681b      	ldr	r3, [r3, #0]
24000c58:	3301      	adds	r3, #1
24000c5a:	031b      	lsls	r3, r3, #12
		if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
24000c5c:	3b01      	subs	r3, #1
24000c5e:	4619      	mov	r1, r3
24000c60:	4610      	mov	r0, r2
24000c62:	f000 fc0b 	bl	2400147c <CSP_QSPI_EraseSector>
24000c66:	4603      	mov	r3, r0
24000c68:	2b00      	cmp	r3, #0
24000c6a:	d000      	beq.n	24000c6e <main+0xa6>

			while (1)
24000c6c:	e7fe      	b.n	24000c6c <main+0xa4>
				;  //breakpoint - error detected
		}

		if (CSP_QSPI_WriteMemory(buffer_test, var * MEMORY_SECTOR_SIZE,
24000c6e:	f241 0304 	movw	r3, #4100	; 0x1004
24000c72:	443b      	add	r3, r7
24000c74:	681b      	ldr	r3, [r3, #0]
24000c76:	0319      	lsls	r1, r3, #12
24000c78:	4b28      	ldr	r3, [pc, #160]	; (24000d1c <main+0x154>)
24000c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24000c7e:	f103 0308 	add.w	r3, r3, #8
24000c82:	443b      	add	r3, r7
24000c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000c88:	4618      	mov	r0, r3
24000c8a:	f000 fc49 	bl	24001520 <CSP_QSPI_WriteMemory>
24000c8e:	4603      	mov	r3, r0
24000c90:	2b00      	cmp	r3, #0
24000c92:	d000      	beq.n	24000c96 <main+0xce>
				sizeof(buffer_test)) != HAL_OK) {

			while (1)
24000c94:	e7fe      	b.n	24000c94 <main+0xcc>
	for (var = 0; var < SECTORS_COUNT; var++) {
24000c96:	f241 0304 	movw	r3, #4100	; 0x1004
24000c9a:	443b      	add	r3, r7
24000c9c:	681b      	ldr	r3, [r3, #0]
24000c9e:	3301      	adds	r3, #1
24000ca0:	f241 0204 	movw	r2, #4100	; 0x1004
24000ca4:	443a      	add	r2, r7
24000ca6:	6013      	str	r3, [r2, #0]
24000ca8:	f241 0304 	movw	r3, #4100	; 0x1004
24000cac:	443b      	add	r3, r7
24000cae:	681b      	ldr	r3, [r3, #0]
24000cb0:	2b63      	cmp	r3, #99	; 0x63
24000cb2:	d9c8      	bls.n	24000c46 <main+0x7e>
				;  //breakpoint - error detected
		}

	}

	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
24000cb4:	f000 fcc0 	bl	24001638 <CSP_QSPI_EnableMemoryMappedMode>
24000cb8:	4603      	mov	r3, r0
24000cba:	2b00      	cmp	r3, #0
24000cbc:	d000      	beq.n	24000cc0 <main+0xf8>

		while (1)
24000cbe:	e7fe      	b.n	24000cbe <main+0xf6>
			; //breakpoint - error detected
	}

	for (var = 0; var < SECTORS_COUNT; var++) {
24000cc0:	2300      	movs	r3, #0
24000cc2:	f241 0204 	movw	r2, #4100	; 0x1004
24000cc6:	443a      	add	r2, r7
24000cc8:	6013      	str	r3, [r2, #0]
24000cca:	e01f      	b.n	24000d0c <main+0x144>
		if (memcmp(buffer_test,
				(uint8_t*) (0x90000000 + var * MEMORY_SECTOR_SIZE),
24000ccc:	f241 0304 	movw	r3, #4100	; 0x1004
24000cd0:	443b      	add	r3, r7
24000cd2:	681b      	ldr	r3, [r3, #0]
24000cd4:	f503 2310 	add.w	r3, r3, #589824	; 0x90000
24000cd8:	031b      	lsls	r3, r3, #12
		if (memcmp(buffer_test,
24000cda:	4619      	mov	r1, r3
24000cdc:	4b0f      	ldr	r3, [pc, #60]	; (24000d1c <main+0x154>)
24000cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24000ce2:	f103 0308 	add.w	r3, r3, #8
24000ce6:	443b      	add	r3, r7
24000ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000cec:	4618      	mov	r0, r3
24000cee:	f016 f8d3 	bl	24016e98 <memcmp>
24000cf2:	4603      	mov	r3, r0
24000cf4:	2b00      	cmp	r3, #0
24000cf6:	d000      	beq.n	24000cfa <main+0x132>
				MEMORY_SECTOR_SIZE) != HAL_OK) {
			while (1)
24000cf8:	e7fe      	b.n	24000cf8 <main+0x130>
	for (var = 0; var < SECTORS_COUNT; var++) {
24000cfa:	f241 0304 	movw	r3, #4100	; 0x1004
24000cfe:	443b      	add	r3, r7
24000d00:	681b      	ldr	r3, [r3, #0]
24000d02:	3301      	adds	r3, #1
24000d04:	f241 0204 	movw	r2, #4100	; 0x1004
24000d08:	443a      	add	r2, r7
24000d0a:	6013      	str	r3, [r2, #0]
24000d0c:	f241 0304 	movw	r3, #4100	; 0x1004
24000d10:	443b      	add	r3, r7
24000d12:	681b      	ldr	r3, [r3, #0]
24000d14:	2b63      	cmp	r3, #99	; 0x63
24000d16:	d9d9      	bls.n	24000ccc <main+0x104>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
24000d18:	e7fe      	b.n	24000d18 <main+0x150>
24000d1a:	bf00      	nop
24000d1c:	ffffeffc 	.word	0xffffeffc

24000d20 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
24000d20:	b580      	push	{r7, lr}
24000d22:	b09e      	sub	sp, #120	; 0x78
24000d24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
24000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
24000d2a:	224c      	movs	r2, #76	; 0x4c
24000d2c:	2100      	movs	r1, #0
24000d2e:	4618      	mov	r0, r3
24000d30:	f016 f8c2 	bl	24016eb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
24000d34:	f107 030c 	add.w	r3, r7, #12
24000d38:	2220      	movs	r2, #32
24000d3a:	2100      	movs	r1, #0
24000d3c:	4618      	mov	r0, r3
24000d3e:	f016 f8bb 	bl	24016eb8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24000d42:	2002      	movs	r0, #2
24000d44:	f00f fe98 	bl	24010a78 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24000d48:	2300      	movs	r3, #0
24000d4a:	60bb      	str	r3, [r7, #8]
24000d4c:	4b48      	ldr	r3, [pc, #288]	; (24000e70 <SystemClock_Config+0x150>)
24000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000d50:	4a47      	ldr	r2, [pc, #284]	; (24000e70 <SystemClock_Config+0x150>)
24000d52:	f023 0301 	bic.w	r3, r3, #1
24000d56:	62d3      	str	r3, [r2, #44]	; 0x2c
24000d58:	4b45      	ldr	r3, [pc, #276]	; (24000e70 <SystemClock_Config+0x150>)
24000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000d5c:	f003 0301 	and.w	r3, r3, #1
24000d60:	60bb      	str	r3, [r7, #8]
24000d62:	4b44      	ldr	r3, [pc, #272]	; (24000e74 <SystemClock_Config+0x154>)
24000d64:	699b      	ldr	r3, [r3, #24]
24000d66:	4a43      	ldr	r2, [pc, #268]	; (24000e74 <SystemClock_Config+0x154>)
24000d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24000d6c:	6193      	str	r3, [r2, #24]
24000d6e:	4b41      	ldr	r3, [pc, #260]	; (24000e74 <SystemClock_Config+0x154>)
24000d70:	699b      	ldr	r3, [r3, #24]
24000d72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24000d76:	60bb      	str	r3, [r7, #8]
24000d78:	68bb      	ldr	r3, [r7, #8]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
24000d7a:	bf00      	nop
24000d7c:	4b3d      	ldr	r3, [pc, #244]	; (24000e74 <SystemClock_Config+0x154>)
24000d7e:	699b      	ldr	r3, [r3, #24]
24000d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24000d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24000d88:	d1f8      	bne.n	24000d7c <SystemClock_Config+0x5c>
	}

	__HAL_RCC_SYSCFG_CLK_ENABLE();
24000d8a:	4b3b      	ldr	r3, [pc, #236]	; (24000e78 <SystemClock_Config+0x158>)
24000d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24000d90:	4a39      	ldr	r2, [pc, #228]	; (24000e78 <SystemClock_Config+0x158>)
24000d92:	f043 0302 	orr.w	r3, r3, #2
24000d96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24000d9a:	4b37      	ldr	r3, [pc, #220]	; (24000e78 <SystemClock_Config+0x158>)
24000d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24000da0:	f003 0302 	and.w	r3, r3, #2
24000da4:	607b      	str	r3, [r7, #4]
24000da6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24000da8:	2300      	movs	r3, #0
24000daa:	603b      	str	r3, [r7, #0]
24000dac:	4b31      	ldr	r3, [pc, #196]	; (24000e74 <SystemClock_Config+0x154>)
24000dae:	699b      	ldr	r3, [r3, #24]
24000db0:	4a30      	ldr	r2, [pc, #192]	; (24000e74 <SystemClock_Config+0x154>)
24000db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24000db6:	6193      	str	r3, [r2, #24]
24000db8:	4b2e      	ldr	r3, [pc, #184]	; (24000e74 <SystemClock_Config+0x154>)
24000dba:	699b      	ldr	r3, [r3, #24]
24000dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24000dc0:	603b      	str	r3, [r7, #0]
24000dc2:	4b2b      	ldr	r3, [pc, #172]	; (24000e70 <SystemClock_Config+0x150>)
24000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000dc6:	4a2a      	ldr	r2, [pc, #168]	; (24000e70 <SystemClock_Config+0x150>)
24000dc8:	f043 0301 	orr.w	r3, r3, #1
24000dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
24000dce:	4b28      	ldr	r3, [pc, #160]	; (24000e70 <SystemClock_Config+0x150>)
24000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000dd2:	f003 0301 	and.w	r3, r3, #1
24000dd6:	603b      	str	r3, [r7, #0]
24000dd8:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
24000dda:	bf00      	nop
24000ddc:	4b25      	ldr	r3, [pc, #148]	; (24000e74 <SystemClock_Config+0x154>)
24000dde:	699b      	ldr	r3, [r3, #24]
24000de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24000de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24000de8:	d1f8      	bne.n	24000ddc <SystemClock_Config+0xbc>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
24000dea:	2301      	movs	r3, #1
24000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
24000dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24000df2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24000df4:	2302      	movs	r3, #2
24000df6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
24000df8:	2302      	movs	r3, #2
24000dfa:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 3;
24000dfc:	2303      	movs	r3, #3
24000dfe:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 60;
24000e00:	233c      	movs	r3, #60	; 0x3c
24000e02:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
24000e04:	2302      	movs	r3, #2
24000e06:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 2;
24000e08:	2302      	movs	r3, #2
24000e0a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLR = 2;
24000e0c:	2302      	movs	r3, #2
24000e0e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24000e10:	230c      	movs	r3, #12
24000e12:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24000e14:	2300      	movs	r3, #0
24000e16:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
24000e18:	2300      	movs	r3, #0
24000e1a:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
24000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
24000e20:	4618      	mov	r0, r3
24000e22:	f012 f8fd 	bl	24013020 <HAL_RCC_OscConfig>
24000e26:	4603      	mov	r3, r0
24000e28:	2b00      	cmp	r3, #0
24000e2a:	d001      	beq.n	24000e30 <SystemClock_Config+0x110>
		Error_Handler();
24000e2c:	f000 f826 	bl	24000e7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
24000e30:	233f      	movs	r3, #63	; 0x3f
24000e32:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24000e34:	2303      	movs	r3, #3
24000e36:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24000e38:	2300      	movs	r3, #0
24000e3a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24000e3c:	2308      	movs	r3, #8
24000e3e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24000e40:	2340      	movs	r3, #64	; 0x40
24000e42:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24000e44:	2340      	movs	r3, #64	; 0x40
24000e46:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24000e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
24000e4c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24000e4e:	2340      	movs	r3, #64	; 0x40
24000e50:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
24000e52:	f107 030c 	add.w	r3, r7, #12
24000e56:	2104      	movs	r1, #4
24000e58:	4618      	mov	r0, r3
24000e5a:	f012 fd0f 	bl	2401387c <HAL_RCC_ClockConfig>
24000e5e:	4603      	mov	r3, r0
24000e60:	2b00      	cmp	r3, #0
24000e62:	d001      	beq.n	24000e68 <SystemClock_Config+0x148>
		Error_Handler();
24000e64:	f000 f80a 	bl	24000e7c <Error_Handler>
	}
}
24000e68:	bf00      	nop
24000e6a:	3778      	adds	r7, #120	; 0x78
24000e6c:	46bd      	mov	sp, r7
24000e6e:	bd80      	pop	{r7, pc}
24000e70:	58000400 	.word	0x58000400
24000e74:	58024800 	.word	0x58024800
24000e78:	58024400 	.word	0x58024400

24000e7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
24000e7c:	b480      	push	{r7}
24000e7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
24000e80:	b672      	cpsid	i
}
24000e82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
24000e84:	e7fe      	b.n	24000e84 <Error_Handler+0x8>
	...

24000e88 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
24000e88:	b580      	push	{r7, lr}
24000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
24000e8c:	4b12      	ldr	r3, [pc, #72]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000e8e:	4a13      	ldr	r2, [pc, #76]	; (24000edc <MX_QUADSPI_Init+0x54>)
24000e90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
24000e92:	4b11      	ldr	r3, [pc, #68]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000e94:	2201      	movs	r2, #1
24000e96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
24000e98:	4b0f      	ldr	r3, [pc, #60]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000e9a:	2204      	movs	r2, #4
24000e9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
24000e9e:	4b0e      	ldr	r3, [pc, #56]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000ea0:	2210      	movs	r2, #16
24000ea2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
24000ea4:	4b0c      	ldr	r3, [pc, #48]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000ea6:	2217      	movs	r2, #23
24000ea8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
24000eaa:	4b0b      	ldr	r3, [pc, #44]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000eac:	2200      	movs	r2, #0
24000eae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
24000eb0:	4b09      	ldr	r3, [pc, #36]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000eb2:	2201      	movs	r2, #1
24000eb4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
24000eb6:	4b08      	ldr	r3, [pc, #32]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000eb8:	2280      	movs	r2, #128	; 0x80
24000eba:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
24000ebc:	4b06      	ldr	r3, [pc, #24]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000ebe:	2200      	movs	r2, #0
24000ec0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
24000ec2:	4805      	ldr	r0, [pc, #20]	; (24000ed8 <MX_QUADSPI_Init+0x50>)
24000ec4:	f010 fb0e 	bl	240114e4 <HAL_QSPI_Init>
24000ec8:	4603      	mov	r3, r0
24000eca:	2b00      	cmp	r3, #0
24000ecc:	d001      	beq.n	24000ed2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
24000ece:	f7ff ffd5 	bl	24000e7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
24000ed2:	bf00      	nop
24000ed4:	bd80      	pop	{r7, pc}
24000ed6:	bf00      	nop
24000ed8:	24000540 	.word	0x24000540
24000edc:	52005000 	.word	0x52005000

24000ee0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
24000ee0:	b580      	push	{r7, lr}
24000ee2:	b0ba      	sub	sp, #232	; 0xe8
24000ee4:	af00      	add	r7, sp, #0
24000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000ee8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
24000eec:	2200      	movs	r2, #0
24000eee:	601a      	str	r2, [r3, #0]
24000ef0:	605a      	str	r2, [r3, #4]
24000ef2:	609a      	str	r2, [r3, #8]
24000ef4:	60da      	str	r2, [r3, #12]
24000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000ef8:	f107 0318 	add.w	r3, r7, #24
24000efc:	22bc      	movs	r2, #188	; 0xbc
24000efe:	2100      	movs	r1, #0
24000f00:	4618      	mov	r0, r3
24000f02:	f015 ffd9 	bl	24016eb8 <memset>
  if(qspiHandle->Instance==QUADSPI)
24000f06:	687b      	ldr	r3, [r7, #4]
24000f08:	681b      	ldr	r3, [r3, #0]
24000f0a:	4a4e      	ldr	r2, [pc, #312]	; (24001044 <HAL_QSPI_MspInit+0x164>)
24000f0c:	4293      	cmp	r3, r2
24000f0e:	f040 8094 	bne.w	2400103a <HAL_QSPI_MspInit+0x15a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24000f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24000f16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
24000f18:	2300      	movs	r3, #0
24000f1a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000f1c:	f107 0318 	add.w	r3, r7, #24
24000f20:	4618      	mov	r0, r3
24000f22:	f013 fa0d 	bl	24014340 <HAL_RCCEx_PeriphCLKConfig>
24000f26:	4603      	mov	r3, r0
24000f28:	2b00      	cmp	r3, #0
24000f2a:	d001      	beq.n	24000f30 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
24000f2c:	f7ff ffa6 	bl	24000e7c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
24000f30:	4b45      	ldr	r3, [pc, #276]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24000f36:	4a44      	ldr	r2, [pc, #272]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24000f3c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24000f40:	4b41      	ldr	r3, [pc, #260]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24000f4a:	617b      	str	r3, [r7, #20]
24000f4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
24000f4e:	4b3e      	ldr	r3, [pc, #248]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f54:	4a3c      	ldr	r2, [pc, #240]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f56:	f043 0302 	orr.w	r3, r3, #2
24000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000f5e:	4b3a      	ldr	r3, [pc, #232]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f64:	f003 0302 	and.w	r3, r3, #2
24000f68:	613b      	str	r3, [r7, #16]
24000f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
24000f6c:	4b36      	ldr	r3, [pc, #216]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f72:	4a35      	ldr	r2, [pc, #212]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f74:	f043 0310 	orr.w	r3, r3, #16
24000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000f7c:	4b32      	ldr	r3, [pc, #200]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f82:	f003 0310 	and.w	r3, r3, #16
24000f86:	60fb      	str	r3, [r7, #12]
24000f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
24000f8a:	4b2f      	ldr	r3, [pc, #188]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000f90:	4a2d      	ldr	r2, [pc, #180]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f92:	f043 0304 	orr.w	r3, r3, #4
24000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000f9a:	4b2b      	ldr	r3, [pc, #172]	; (24001048 <HAL_QSPI_MspInit+0x168>)
24000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000fa0:	f003 0304 	and.w	r3, r3, #4
24000fa4:	60bb      	str	r3, [r7, #8]
24000fa6:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24000fa8:	2304      	movs	r3, #4
24000faa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000fae:	2302      	movs	r3, #2
24000fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000fb4:	2300      	movs	r3, #0
24000fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000fba:	2303      	movs	r3, #3
24000fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24000fc0:	2309      	movs	r3, #9
24000fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000fc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
24000fca:	4619      	mov	r1, r3
24000fcc:	481f      	ldr	r0, [pc, #124]	; (2400104c <HAL_QSPI_MspInit+0x16c>)
24000fce:	f008 fb1b 	bl	24009608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
24000fd2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
24000fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000fda:	2302      	movs	r3, #2
24000fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000fe0:	2300      	movs	r3, #0
24000fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000fe6:	2303      	movs	r3, #3
24000fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24000fec:	230a      	movs	r3, #10
24000fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24000ff2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
24000ff6:	4619      	mov	r1, r3
24000ff8:	4815      	ldr	r0, [pc, #84]	; (24001050 <HAL_QSPI_MspInit+0x170>)
24000ffa:	f008 fb05 	bl	24009608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
24000ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
24001002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001006:	2302      	movs	r3, #2
24001008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400100c:	2300      	movs	r3, #0
2400100e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001012:	2303      	movs	r3, #3
24001014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24001018:	2309      	movs	r3, #9
2400101a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400101e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
24001022:	4619      	mov	r1, r3
24001024:	480b      	ldr	r0, [pc, #44]	; (24001054 <HAL_QSPI_MspInit+0x174>)
24001026:	f008 faef 	bl	24009608 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
2400102a:	2200      	movs	r2, #0
2400102c:	2100      	movs	r1, #0
2400102e:	205c      	movs	r0, #92	; 0x5c
24001030:	f001 feff 	bl	24002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
24001034:	205c      	movs	r0, #92	; 0x5c
24001036:	f001 ff16 	bl	24002e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
2400103a:	bf00      	nop
2400103c:	37e8      	adds	r7, #232	; 0xe8
2400103e:	46bd      	mov	sp, r7
24001040:	bd80      	pop	{r7, pc}
24001042:	bf00      	nop
24001044:	52005000 	.word	0x52005000
24001048:	58024400 	.word	0x58024400
2400104c:	58020400 	.word	0x58020400
24001050:	58021000 	.word	0x58021000
24001054:	58020800 	.word	0x58020800

24001058 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
24001058:	b580      	push	{r7, lr}
2400105a:	b082      	sub	sp, #8
2400105c:	af00      	add	r7, sp, #0
2400105e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
24001060:	687b      	ldr	r3, [r7, #4]
24001062:	681b      	ldr	r3, [r3, #0]
24001064:	4a0f      	ldr	r2, [pc, #60]	; (240010a4 <HAL_QSPI_MspDeInit+0x4c>)
24001066:	4293      	cmp	r3, r2
24001068:	d118      	bne.n	2400109c <HAL_QSPI_MspDeInit+0x44>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
2400106a:	4b0f      	ldr	r3, [pc, #60]	; (240010a8 <HAL_QSPI_MspDeInit+0x50>)
2400106c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24001070:	4a0d      	ldr	r2, [pc, #52]	; (240010a8 <HAL_QSPI_MspDeInit+0x50>)
24001072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24001076:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
2400107a:	2104      	movs	r1, #4
2400107c:	480b      	ldr	r0, [pc, #44]	; (240010ac <HAL_QSPI_MspDeInit+0x54>)
2400107e:	f008 fc73 	bl	24009968 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10);
24001082:	f44f 61f0 	mov.w	r1, #1920	; 0x780
24001086:	480a      	ldr	r0, [pc, #40]	; (240010b0 <HAL_QSPI_MspDeInit+0x58>)
24001088:	f008 fc6e 	bl	24009968 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
2400108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
24001090:	4808      	ldr	r0, [pc, #32]	; (240010b4 <HAL_QSPI_MspDeInit+0x5c>)
24001092:	f008 fc69 	bl	24009968 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
24001096:	205c      	movs	r0, #92	; 0x5c
24001098:	f001 fef3 	bl	24002e82 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
2400109c:	bf00      	nop
2400109e:	3708      	adds	r7, #8
240010a0:	46bd      	mov	sp, r7
240010a2:	bd80      	pop	{r7, pc}
240010a4:	52005000 	.word	0x52005000
240010a8:	58024400 	.word	0x58024400
240010ac:	58020400 	.word	0x58020400
240010b0:	58021000 	.word	0x58021000
240010b4:	58020800 	.word	0x58020800

240010b8 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
240010b8:	b580      	push	{r7, lr}
240010ba:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
240010bc:	4819      	ldr	r0, [pc, #100]	; (24001124 <CSP_QUADSPI_Init+0x6c>)
240010be:	f010 fa85 	bl	240115cc <HAL_QSPI_DeInit>
240010c2:	4603      	mov	r3, r0
240010c4:	2b00      	cmp	r3, #0
240010c6:	d001      	beq.n	240010cc <CSP_QUADSPI_Init+0x14>
		return HAL_ERROR;
240010c8:	2301      	movs	r3, #1
240010ca:	e028      	b.n	2400111e <CSP_QUADSPI_Init+0x66>
	}

	MX_QUADSPI_Init();
240010cc:	f7ff fedc 	bl	24000e88 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
240010d0:	f000 fae6 	bl	240016a0 <QSPI_ResetChip>
240010d4:	4603      	mov	r3, r0
240010d6:	2b00      	cmp	r3, #0
240010d8:	d001      	beq.n	240010de <CSP_QUADSPI_Init+0x26>
		return HAL_ERROR;
240010da:	2301      	movs	r3, #1
240010dc:	e01f      	b.n	2400111e <CSP_QUADSPI_Init+0x66>
	}

	HAL_Delay(1);
240010de:	2001      	movs	r0, #1
240010e0:	f001 f8d8 	bl	24002294 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
240010e4:	f000 f85c 	bl	240011a0 <QSPI_AutoPollingMemReady>
240010e8:	4603      	mov	r3, r0
240010ea:	2b00      	cmp	r3, #0
240010ec:	d001      	beq.n	240010f2 <CSP_QUADSPI_Init+0x3a>
		return HAL_ERROR;
240010ee:	2301      	movs	r3, #1
240010f0:	e015      	b.n	2400111e <CSP_QUADSPI_Init+0x66>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
240010f2:	f000 f88d 	bl	24001210 <QSPI_WriteEnable>
240010f6:	4603      	mov	r3, r0
240010f8:	2b00      	cmp	r3, #0
240010fa:	d001      	beq.n	24001100 <CSP_QUADSPI_Init+0x48>

		return HAL_ERROR;
240010fc:	2301      	movs	r3, #1
240010fe:	e00e      	b.n	2400111e <CSP_QUADSPI_Init+0x66>
	}

	if (QSPI_Configuration() != HAL_OK) {
24001100:	f000 f8d2 	bl	240012a8 <QSPI_Configuration>
24001104:	4603      	mov	r3, r0
24001106:	2b00      	cmp	r3, #0
24001108:	d001      	beq.n	2400110e <CSP_QUADSPI_Init+0x56>
		return HAL_ERROR;
2400110a:	2301      	movs	r3, #1
2400110c:	e007      	b.n	2400111e <CSP_QUADSPI_Init+0x66>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
2400110e:	f000 f847 	bl	240011a0 <QSPI_AutoPollingMemReady>
24001112:	4603      	mov	r3, r0
24001114:	2b00      	cmp	r3, #0
24001116:	d001      	beq.n	2400111c <CSP_QUADSPI_Init+0x64>
		return HAL_ERROR;
24001118:	2301      	movs	r3, #1
2400111a:	e000      	b.n	2400111e <CSP_QUADSPI_Init+0x66>
	}
	return HAL_OK;
2400111c:	2300      	movs	r3, #0
}
2400111e:	4618      	mov	r0, r3
24001120:	bd80      	pop	{r7, pc}
24001122:	bf00      	nop
24001124:	24000540 	.word	0x24000540

24001128 <CSP_QSPI_Erase_Chip>:


uint8_t CSP_QSPI_Erase_Chip(void) {
24001128:	b580      	push	{r7, lr}
2400112a:	b08e      	sub	sp, #56	; 0x38
2400112c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;


	if (QSPI_WriteEnable() != HAL_OK) {
2400112e:	f000 f86f 	bl	24001210 <QSPI_WriteEnable>
24001132:	4603      	mov	r3, r0
24001134:	2b00      	cmp	r3, #0
24001136:	d001      	beq.n	2400113c <CSP_QSPI_Erase_Chip+0x14>
		return HAL_ERROR;
24001138:	2301      	movs	r3, #1
2400113a:	e02b      	b.n	24001194 <CSP_QSPI_Erase_Chip+0x6c>
	}


	/* Erasing Sequence --------------------------------- */
	sCommand.Instruction = CHIP_ERASE_CMD;
2400113c:	23c7      	movs	r3, #199	; 0xc7
2400113e:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001140:	f44f 7380 	mov.w	r3, #256	; 0x100
24001144:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400114a:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400114c:	2300      	movs	r3, #0
2400114e:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001150:	2300      	movs	r3, #0
24001152:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001154:	2300      	movs	r3, #0
24001156:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001158:	2300      	movs	r3, #0
2400115a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400115c:	2300      	movs	r3, #0
2400115e:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
24001160:	2300      	movs	r3, #0
24001162:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
24001164:	2300      	movs	r3, #0
24001166:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
24001168:	2300      	movs	r3, #0
2400116a:	617b      	str	r3, [r7, #20]


	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400116c:	463b      	mov	r3, r7
2400116e:	f241 3288 	movw	r2, #5000	; 0x1388
24001172:	4619      	mov	r1, r3
24001174:	4809      	ldr	r0, [pc, #36]	; (2400119c <CSP_QSPI_Erase_Chip+0x74>)
24001176:	f010 fc17 	bl	240119a8 <HAL_QSPI_Command>
2400117a:	4603      	mov	r3, r0
2400117c:	2b00      	cmp	r3, #0
2400117e:	d001      	beq.n	24001184 <CSP_QSPI_Erase_Chip+0x5c>
			!= HAL_OK) {
		return HAL_ERROR;
24001180:	2301      	movs	r3, #1
24001182:	e007      	b.n	24001194 <CSP_QSPI_Erase_Chip+0x6c>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
24001184:	f000 f80c 	bl	240011a0 <QSPI_AutoPollingMemReady>
24001188:	4603      	mov	r3, r0
2400118a:	2b00      	cmp	r3, #0
2400118c:	d001      	beq.n	24001192 <CSP_QSPI_Erase_Chip+0x6a>
				return HAL_ERROR;
2400118e:	2301      	movs	r3, #1
24001190:	e000      	b.n	24001194 <CSP_QSPI_Erase_Chip+0x6c>
			}

	return HAL_OK;
24001192:	2300      	movs	r3, #0
}
24001194:	4618      	mov	r0, r3
24001196:	3738      	adds	r7, #56	; 0x38
24001198:	46bd      	mov	sp, r7
2400119a:	bd80      	pop	{r7, pc}
2400119c:	24000540 	.word	0x24000540

240011a0 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void) {
240011a0:	b580      	push	{r7, lr}
240011a2:	b094      	sub	sp, #80	; 0x50
240011a4:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	 QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240011a6:	f44f 7380 	mov.w	r3, #256	; 0x100
240011aa:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = READ_FLAG_STATUS_REG_CMD;
240011ac:	2305      	movs	r3, #5
240011ae:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
240011b0:	2300      	movs	r3, #0
240011b2:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240011b4:	2300      	movs	r3, #0
240011b6:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
240011b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240011bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
240011be:	2300      	movs	r3, #0
240011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240011c2:	2300      	movs	r3, #0
240011c4:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240011c6:	2300      	movs	r3, #0
240011c8:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240011ca:	2300      	movs	r3, #0
240011cc:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
240011ce:	2300      	movs	r3, #0
240011d0:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x01;
240011d2:	2301      	movs	r3, #1
240011d4:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
240011d6:	2300      	movs	r3, #0
240011d8:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
240011da:	2301      	movs	r3, #1
240011dc:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
240011de:	2310      	movs	r3, #16
240011e0:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
240011e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
240011e6:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
240011e8:	463a      	mov	r2, r7
240011ea:	f107 0118 	add.w	r1, r7, #24
240011ee:	f241 3388 	movw	r3, #5000	; 0x1388
240011f2:	4806      	ldr	r0, [pc, #24]	; (2400120c <QSPI_AutoPollingMemReady+0x6c>)
240011f4:	f011 f882 	bl	240122fc <HAL_QSPI_AutoPolling>
240011f8:	4603      	mov	r3, r0
240011fa:	2b00      	cmp	r3, #0
240011fc:	d001      	beq.n	24001202 <QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
240011fe:	2301      	movs	r3, #1
24001200:	e000      	b.n	24001204 <QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
24001202:	2300      	movs	r3, #0
}
24001204:	4618      	mov	r0, r3
24001206:	3750      	adds	r7, #80	; 0x50
24001208:	46bd      	mov	sp, r7
2400120a:	bd80      	pop	{r7, pc}
2400120c:	24000540 	.word	0x24000540

24001210 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
24001210:	b580      	push	{r7, lr}
24001212:	b094      	sub	sp, #80	; 0x50
24001214:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	QSPI_AutoPollingMemReady();
24001216:	f7ff ffc3 	bl	240011a0 <QSPI_AutoPollingMemReady>

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400121a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400121e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = WRITE_ENABLE_CMD;
24001220:	2306      	movs	r3, #6
24001222:	61bb      	str	r3, [r7, #24]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001224:	2300      	movs	r3, #0
24001226:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001228:	2300      	movs	r3, #0
2400122a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
2400122c:	2300      	movs	r3, #0
2400122e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
24001230:	2300      	movs	r3, #0
24001232:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001234:	2300      	movs	r3, #0
24001236:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001238:	2300      	movs	r3, #0
2400123a:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400123c:	2300      	movs	r3, #0
2400123e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001240:	f107 0318 	add.w	r3, r7, #24
24001244:	f241 3288 	movw	r2, #5000	; 0x1388
24001248:	4619      	mov	r1, r3
2400124a:	4816      	ldr	r0, [pc, #88]	; (240012a4 <QSPI_WriteEnable+0x94>)
2400124c:	f010 fbac 	bl	240119a8 <HAL_QSPI_Command>
24001250:	4603      	mov	r3, r0
24001252:	2b00      	cmp	r3, #0
24001254:	d001      	beq.n	2400125a <QSPI_WriteEnable+0x4a>
			!= HAL_OK) {
		return HAL_ERROR;
24001256:	2301      	movs	r3, #1
24001258:	e01f      	b.n	2400129a <QSPI_WriteEnable+0x8a>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
2400125a:	2302      	movs	r3, #2
2400125c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
2400125e:	2302      	movs	r3, #2
24001260:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
24001262:	2300      	movs	r3, #0
24001264:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
24001266:	2301      	movs	r3, #1
24001268:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
2400126a:	2310      	movs	r3, #16
2400126c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
2400126e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24001272:	617b      	str	r3, [r7, #20]

	sCommand.Instruction = READ_STATUS_REG_CMD;
24001274:	2305      	movs	r3, #5
24001276:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
24001278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400127c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
2400127e:	463a      	mov	r2, r7
24001280:	f107 0118 	add.w	r1, r7, #24
24001284:	f241 3388 	movw	r3, #5000	; 0x1388
24001288:	4806      	ldr	r0, [pc, #24]	; (240012a4 <QSPI_WriteEnable+0x94>)
2400128a:	f011 f837 	bl	240122fc <HAL_QSPI_AutoPolling>
2400128e:	4603      	mov	r3, r0
24001290:	2b00      	cmp	r3, #0
24001292:	d001      	beq.n	24001298 <QSPI_WriteEnable+0x88>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
24001294:	2301      	movs	r3, #1
24001296:	e000      	b.n	2400129a <QSPI_WriteEnable+0x8a>
	}

	return HAL_OK;
24001298:	2300      	movs	r3, #0
}
2400129a:	4618      	mov	r0, r3
2400129c:	3750      	adds	r7, #80	; 0x50
2400129e:	46bd      	mov	sp, r7
240012a0:	bd80      	pop	{r7, pc}
240012a2:	bf00      	nop
240012a4:	24000540 	.word	0x24000540

240012a8 <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void) {
240012a8:	b580      	push	{r7, lr}
240012aa:	b090      	sub	sp, #64	; 0x40
240012ac:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t test_buffer[4] = { 0 };
240012ae:	2300      	movs	r3, #0
240012b0:	607b      	str	r3, [r7, #4]
	/*read status register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240012b2:	f44f 7380 	mov.w	r3, #256	; 0x100
240012b6:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_STATUS_REG_CMD;
240012b8:	2305      	movs	r3, #5
240012ba:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
240012bc:	2300      	movs	r3, #0
240012be:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240012c0:	2300      	movs	r3, #0
240012c2:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
240012c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
240012ca:	2300      	movs	r3, #0
240012cc:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240012ce:	2300      	movs	r3, #0
240012d0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240012d2:	2300      	movs	r3, #0
240012d4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240012d6:	2300      	movs	r3, #0
240012d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
240012da:	2301      	movs	r3, #1
240012dc:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240012de:	f107 0308 	add.w	r3, r7, #8
240012e2:	f241 3288 	movw	r2, #5000	; 0x1388
240012e6:	4619      	mov	r1, r3
240012e8:	4863      	ldr	r0, [pc, #396]	; (24001478 <QSPI_Configuration+0x1d0>)
240012ea:	f010 fb5d 	bl	240119a8 <HAL_QSPI_Command>
240012ee:	4603      	mov	r3, r0
240012f0:	2b00      	cmp	r3, #0
240012f2:	d001      	beq.n	240012f8 <QSPI_Configuration+0x50>
			!= HAL_OK) {
		return HAL_ERROR;
240012f4:	2301      	movs	r3, #1
240012f6:	e0ba      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}
	if (HAL_QSPI_Receive(&hqspi, test_buffer,
240012f8:	1d3b      	adds	r3, r7, #4
240012fa:	f241 3288 	movw	r2, #5000	; 0x1388
240012fe:	4619      	mov	r1, r3
24001300:	485d      	ldr	r0, [pc, #372]	; (24001478 <QSPI_Configuration+0x1d0>)
24001302:	f010 fca7 	bl	24011c54 <HAL_QSPI_Receive>
24001306:	4603      	mov	r3, r0
24001308:	2b00      	cmp	r3, #0
2400130a:	d001      	beq.n	24001310 <QSPI_Configuration+0x68>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
2400130c:	2301      	movs	r3, #1
2400130e:	e0ae      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}
	/*read configuration register*/
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001310:	f44f 7380 	mov.w	r3, #256	; 0x100
24001314:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = READ_CONFIGURATION_REG_CMD;
24001316:	2361      	movs	r3, #97	; 0x61
24001318:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400131a:	2300      	movs	r3, #0
2400131c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400131e:	2300      	movs	r3, #0
24001320:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
24001322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001326:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
24001328:	2300      	movs	r3, #0
2400132a:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400132c:	2300      	movs	r3, #0
2400132e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001330:	2300      	movs	r3, #0
24001332:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001334:	2300      	movs	r3, #0
24001336:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
24001338:	2301      	movs	r3, #1
2400133a:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400133c:	f107 0308 	add.w	r3, r7, #8
24001340:	f241 3288 	movw	r2, #5000	; 0x1388
24001344:	4619      	mov	r1, r3
24001346:	484c      	ldr	r0, [pc, #304]	; (24001478 <QSPI_Configuration+0x1d0>)
24001348:	f010 fb2e 	bl	240119a8 <HAL_QSPI_Command>
2400134c:	4603      	mov	r3, r0
2400134e:	2b00      	cmp	r3, #0
24001350:	d001      	beq.n	24001356 <QSPI_Configuration+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
24001352:	2301      	movs	r3, #1
24001354:	e08b      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}
	if (HAL_QSPI_Receive(&hqspi, &(test_buffer[1]),
24001356:	1d3b      	adds	r3, r7, #4
24001358:	3301      	adds	r3, #1
2400135a:	f241 3288 	movw	r2, #5000	; 0x1388
2400135e:	4619      	mov	r1, r3
24001360:	4845      	ldr	r0, [pc, #276]	; (24001478 <QSPI_Configuration+0x1d0>)
24001362:	f010 fc77 	bl	24011c54 <HAL_QSPI_Receive>
24001366:	4603      	mov	r3, r0
24001368:	2b00      	cmp	r3, #0
2400136a:	d001      	beq.n	24001370 <QSPI_Configuration+0xc8>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
2400136c:	2301      	movs	r3, #1
2400136e:	e07e      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}
	/*modify buffer to enable quad mode*/
	test_buffer[0] |= 0x40;
24001370:	793b      	ldrb	r3, [r7, #4]
24001372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24001376:	b2db      	uxtb	r3, r3
24001378:	713b      	strb	r3, [r7, #4]

	/*set dummy cycles*/
	test_buffer[1] = 0x40;
2400137a:	2340      	movs	r3, #64	; 0x40
2400137c:	717b      	strb	r3, [r7, #5]

	if (QSPI_WriteEnable() != HAL_OK) {
2400137e:	f7ff ff47 	bl	24001210 <QSPI_WriteEnable>
24001382:	4603      	mov	r3, r0
24001384:	2b00      	cmp	r3, #0
24001386:	d001      	beq.n	2400138c <QSPI_Configuration+0xe4>
		return HAL_ERROR;
24001388:	2301      	movs	r3, #1
2400138a:	e070      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400138c:	f44f 7380 	mov.w	r3, #256	; 0x100
24001390:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001396:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001398:	2300      	movs	r3, #0
2400139a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400139c:	2300      	movs	r3, #0
2400139e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240013a0:	2300      	movs	r3, #0
240013a2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240013a4:	2300      	movs	r3, #0
240013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_STATUS_REG_CMD;
240013a8:	2301      	movs	r3, #1
240013aa:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
240013ac:	2300      	movs	r3, #0
240013ae:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
240013b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
240013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
240013b6:	2300      	movs	r3, #0
240013b8:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
240013ba:	2301      	movs	r3, #1
240013bc:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240013be:	f107 0308 	add.w	r3, r7, #8
240013c2:	f241 3288 	movw	r2, #5000	; 0x1388
240013c6:	4619      	mov	r1, r3
240013c8:	482b      	ldr	r0, [pc, #172]	; (24001478 <QSPI_Configuration+0x1d0>)
240013ca:	f010 faed 	bl	240119a8 <HAL_QSPI_Command>
240013ce:	4603      	mov	r3, r0
240013d0:	2b00      	cmp	r3, #0
240013d2:	d001      	beq.n	240013d8 <QSPI_Configuration+0x130>
			!= HAL_OK) {
		return HAL_ERROR;
240013d4:	2301      	movs	r3, #1
240013d6:	e04a      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}

	if (HAL_QSPI_Transmit(&hqspi, test_buffer,
240013d8:	1d3b      	adds	r3, r7, #4
240013da:	f241 3288 	movw	r2, #5000	; 0x1388
240013de:	4619      	mov	r1, r3
240013e0:	4825      	ldr	r0, [pc, #148]	; (24001478 <QSPI_Configuration+0x1d0>)
240013e2:	f010 fba5 	bl	24011b30 <HAL_QSPI_Transmit>
240013e6:	4603      	mov	r3, r0
240013e8:	2b00      	cmp	r3, #0
240013ea:	d003      	beq.n	240013f4 <QSPI_Configuration+0x14c>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
240013ec:	f7ff fd46 	bl	24000e7c <Error_Handler>
		return HAL_ERROR;
240013f0:	2301      	movs	r3, #1
240013f2:	e03c      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
240013f4:	f7ff ff0c 	bl	24001210 <QSPI_WriteEnable>
240013f8:	4603      	mov	r3, r0
240013fa:	2b00      	cmp	r3, #0
240013fc:	d001      	beq.n	24001402 <QSPI_Configuration+0x15a>
		return HAL_ERROR;
240013fe:	2301      	movs	r3, #1
24001400:	e035      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001402:	f44f 7380 	mov.w	r3, #256	; 0x100
24001406:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400140c:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400140e:	2300      	movs	r3, #0
24001410:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001412:	2300      	movs	r3, #0
24001414:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001416:	2300      	movs	r3, #0
24001418:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400141a:	2300      	movs	r3, #0
2400141c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = WRITE_CONFIGURATION_REG_CMD;
2400141e:	2365      	movs	r3, #101	; 0x65
24001420:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001422:	2300      	movs	r3, #0
24001424:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
24001426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400142a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
2400142c:	2300      	movs	r3, #0
2400142e:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
24001430:	2301      	movs	r3, #1
24001432:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001434:	f107 0308 	add.w	r3, r7, #8
24001438:	f241 3288 	movw	r2, #5000	; 0x1388
2400143c:	4619      	mov	r1, r3
2400143e:	480e      	ldr	r0, [pc, #56]	; (24001478 <QSPI_Configuration+0x1d0>)
24001440:	f010 fab2 	bl	240119a8 <HAL_QSPI_Command>
24001444:	4603      	mov	r3, r0
24001446:	2b00      	cmp	r3, #0
24001448:	d001      	beq.n	2400144e <QSPI_Configuration+0x1a6>
			!= HAL_OK) {
		return HAL_ERROR;
2400144a:	2301      	movs	r3, #1
2400144c:	e00f      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}

	if (HAL_QSPI_Transmit(&hqspi, &(test_buffer[1]),
2400144e:	1d3b      	adds	r3, r7, #4
24001450:	3301      	adds	r3, #1
24001452:	f241 3288 	movw	r2, #5000	; 0x1388
24001456:	4619      	mov	r1, r3
24001458:	4807      	ldr	r0, [pc, #28]	; (24001478 <QSPI_Configuration+0x1d0>)
2400145a:	f010 fb69 	bl	24011b30 <HAL_QSPI_Transmit>
2400145e:	4603      	mov	r3, r0
24001460:	2b00      	cmp	r3, #0
24001462:	d003      	beq.n	2400146c <QSPI_Configuration+0x1c4>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
24001464:	f7ff fd0a 	bl	24000e7c <Error_Handler>
		return HAL_ERROR;
24001468:	2301      	movs	r3, #1
2400146a:	e000      	b.n	2400146e <QSPI_Configuration+0x1c6>
	}
	return HAL_OK;
2400146c:	2300      	movs	r3, #0
}
2400146e:	4618      	mov	r0, r3
24001470:	3740      	adds	r7, #64	; 0x40
24001472:	46bd      	mov	sp, r7
24001474:	bd80      	pop	{r7, pc}
24001476:	bf00      	nop
24001478:	24000540 	.word	0x24000540

2400147c <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
2400147c:	b580      	push	{r7, lr}
2400147e:	b090      	sub	sp, #64	; 0x40
24001480:	af00      	add	r7, sp, #0
24001482:	6078      	str	r0, [r7, #4]
24001484:	6039      	str	r1, [r7, #0]

	QSPI_CommandTypeDef sCommand;

	EraseStartAddress = EraseStartAddress
24001486:	687a      	ldr	r2, [r7, #4]
24001488:	4b23      	ldr	r3, [pc, #140]	; (24001518 <CSP_QSPI_EraseSector+0x9c>)
2400148a:	4013      	ands	r3, r2
2400148c:	607b      	str	r3, [r7, #4]
			- EraseStartAddress % MEMORY_SECTOR_SIZE;

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400148e:	f44f 7380 	mov.w	r3, #256	; 0x100
24001492:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001498:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400149a:	2300      	movs	r3, #0
2400149c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400149e:	2300      	movs	r3, #0
240014a0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240014a2:	2300      	movs	r3, #0
240014a4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240014a6:	2300      	movs	r3, #0
240014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Instruction = SECTOR_ERASE_CMD;
240014aa:	2320      	movs	r3, #32
240014ac:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
240014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
240014b2:	627b      	str	r3, [r7, #36]	; 0x24

	sCommand.DataMode = QSPI_DATA_NONE;
240014b4:	2300      	movs	r3, #0
240014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
240014b8:	2300      	movs	r3, #0
240014ba:	61fb      	str	r3, [r7, #28]

	while (EraseEndAddress >= EraseStartAddress) {
240014bc:	e022      	b.n	24001504 <CSP_QSPI_EraseSector+0x88>
		sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
240014be:	687b      	ldr	r3, [r7, #4]
240014c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
240014c4:	60fb      	str	r3, [r7, #12]

		if (QSPI_WriteEnable() != HAL_OK) {
240014c6:	f7ff fea3 	bl	24001210 <QSPI_WriteEnable>
240014ca:	4603      	mov	r3, r0
240014cc:	2b00      	cmp	r3, #0
240014ce:	d001      	beq.n	240014d4 <CSP_QSPI_EraseSector+0x58>
			return HAL_ERROR;
240014d0:	2301      	movs	r3, #1
240014d2:	e01c      	b.n	2400150e <CSP_QSPI_EraseSector+0x92>
		}

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240014d4:	f107 0308 	add.w	r3, r7, #8
240014d8:	f241 3288 	movw	r2, #5000	; 0x1388
240014dc:	4619      	mov	r1, r3
240014de:	480f      	ldr	r0, [pc, #60]	; (2400151c <CSP_QSPI_EraseSector+0xa0>)
240014e0:	f010 fa62 	bl	240119a8 <HAL_QSPI_Command>
240014e4:	4603      	mov	r3, r0
240014e6:	2b00      	cmp	r3, #0
240014e8:	d001      	beq.n	240014ee <CSP_QSPI_EraseSector+0x72>
				!= HAL_OK) {
			return HAL_ERROR;
240014ea:	2301      	movs	r3, #1
240014ec:	e00f      	b.n	2400150e <CSP_QSPI_EraseSector+0x92>
		}
		EraseStartAddress += MEMORY_SECTOR_SIZE;
240014ee:	687b      	ldr	r3, [r7, #4]
240014f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240014f4:	607b      	str	r3, [r7, #4]

		if (QSPI_AutoPollingMemReady() != HAL_OK) {
240014f6:	f7ff fe53 	bl	240011a0 <QSPI_AutoPollingMemReady>
240014fa:	4603      	mov	r3, r0
240014fc:	2b00      	cmp	r3, #0
240014fe:	d001      	beq.n	24001504 <CSP_QSPI_EraseSector+0x88>
			return HAL_ERROR;
24001500:	2301      	movs	r3, #1
24001502:	e004      	b.n	2400150e <CSP_QSPI_EraseSector+0x92>
	while (EraseEndAddress >= EraseStartAddress) {
24001504:	683a      	ldr	r2, [r7, #0]
24001506:	687b      	ldr	r3, [r7, #4]
24001508:	429a      	cmp	r2, r3
2400150a:	d2d8      	bcs.n	240014be <CSP_QSPI_EraseSector+0x42>
		}
	}

	return HAL_OK;
2400150c:	2300      	movs	r3, #0
}
2400150e:	4618      	mov	r0, r3
24001510:	3740      	adds	r7, #64	; 0x40
24001512:	46bd      	mov	sp, r7
24001514:	bd80      	pop	{r7, pc}
24001516:	bf00      	nop
24001518:	fffff000 	.word	0xfffff000
2400151c:	24000540 	.word	0x24000540

24001520 <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address,uint32_t buffer_size) {
24001520:	b580      	push	{r7, lr}
24001522:	b096      	sub	sp, #88	; 0x58
24001524:	af00      	add	r7, sp, #0
24001526:	60f8      	str	r0, [r7, #12]
24001528:	60b9      	str	r1, [r7, #8]
2400152a:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
2400152c:	2300      	movs	r3, #0
2400152e:	653b      	str	r3, [r7, #80]	; 0x50


	//
	while (current_addr <= address) {
24001530:	e003      	b.n	2400153a <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
24001532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24001534:	f503 7380 	add.w	r3, r3, #256	; 0x100
24001538:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
2400153a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
2400153c:	68bb      	ldr	r3, [r7, #8]
2400153e:	429a      	cmp	r2, r3
24001540:	d9f7      	bls.n	24001532 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
24001542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
24001544:	68bb      	ldr	r3, [r7, #8]
24001546:	1ad3      	subs	r3, r2, r3
24001548:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
2400154a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
2400154c:	687b      	ldr	r3, [r7, #4]
2400154e:	429a      	cmp	r2, r3
24001550:	d901      	bls.n	24001556 <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
24001552:	687b      	ldr	r3, [r7, #4]
24001554:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
24001556:	68bb      	ldr	r3, [r7, #8]
24001558:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
2400155a:	68ba      	ldr	r2, [r7, #8]
2400155c:	687b      	ldr	r3, [r7, #4]
2400155e:	4413      	add	r3, r2
24001560:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001562:	f44f 7380 	mov.w	r3, #256	; 0x100
24001566:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400156c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400156e:	2300      	movs	r3, #0
24001570:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001572:	2300      	movs	r3, #0
24001574:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001576:	2300      	movs	r3, #0
24001578:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400157a:	2300      	movs	r3, #0
2400157c:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
2400157e:	2338      	movs	r3, #56	; 0x38
24001580:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
24001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
24001586:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DataMode = QSPI_DATA_4_LINES;
24001588:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
2400158c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
2400158e:	687b      	ldr	r3, [r7, #4]
24001590:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
24001592:	68bb      	ldr	r3, [r7, #8]
24001594:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
24001596:	2300      	movs	r3, #0
24001598:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
2400159a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
2400159c:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
2400159e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240015a0:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
240015a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240015a4:	2b00      	cmp	r3, #0
240015a6:	d101      	bne.n	240015ac <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
240015a8:	2300      	movs	r3, #0
240015aa:	e03f      	b.n	2400162c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
240015ac:	f7ff fe30 	bl	24001210 <QSPI_WriteEnable>
240015b0:	4603      	mov	r3, r0
240015b2:	2b00      	cmp	r3, #0
240015b4:	d001      	beq.n	240015ba <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
240015b6:	2301      	movs	r3, #1
240015b8:	e038      	b.n	2400162c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240015ba:	f107 0314 	add.w	r3, r7, #20
240015be:	f241 3288 	movw	r2, #5000	; 0x1388
240015c2:	4619      	mov	r1, r3
240015c4:	481b      	ldr	r0, [pc, #108]	; (24001634 <CSP_QSPI_WriteMemory+0x114>)
240015c6:	f010 f9ef 	bl	240119a8 <HAL_QSPI_Command>
240015ca:	4603      	mov	r3, r0
240015cc:	2b00      	cmp	r3, #0
240015ce:	d001      	beq.n	240015d4 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
240015d0:	2301      	movs	r3, #1
240015d2:	e02b      	b.n	2400162c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
240015d4:	f241 3288 	movw	r2, #5000	; 0x1388
240015d8:	68f9      	ldr	r1, [r7, #12]
240015da:	4816      	ldr	r0, [pc, #88]	; (24001634 <CSP_QSPI_WriteMemory+0x114>)
240015dc:	f010 faa8 	bl	24011b30 <HAL_QSPI_Transmit>
240015e0:	4603      	mov	r3, r0
240015e2:	2b00      	cmp	r3, #0
240015e4:	d001      	beq.n	240015ea <CSP_QSPI_WriteMemory+0xca>

			return HAL_ERROR;
240015e6:	2301      	movs	r3, #1
240015e8:	e020      	b.n	2400162c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
240015ea:	f7ff fdd9 	bl	240011a0 <QSPI_AutoPollingMemReady>
240015ee:	4603      	mov	r3, r0
240015f0:	2b00      	cmp	r3, #0
240015f2:	d001      	beq.n	240015f8 <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
240015f4:	2301      	movs	r3, #1
240015f6:	e019      	b.n	2400162c <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
240015f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
240015fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240015fc:	4413      	add	r3, r2
240015fe:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
24001600:	68fa      	ldr	r2, [r7, #12]
24001602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24001604:	4413      	add	r3, r2
24001606:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
24001608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
2400160a:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
2400160e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
24001610:	429a      	cmp	r2, r3
24001612:	d203      	bcs.n	2400161c <CSP_QSPI_WriteMemory+0xfc>
24001614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
24001616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24001618:	1ad3      	subs	r3, r2, r3
2400161a:	e001      	b.n	24001620 <CSP_QSPI_WriteMemory+0x100>
2400161c:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
24001620:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
24001622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
24001624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
24001626:	429a      	cmp	r2, r3
24001628:	d9b7      	bls.n	2400159a <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
2400162a:	2300      	movs	r3, #0

}
2400162c:	4618      	mov	r0, r3
2400162e:	3758      	adds	r7, #88	; 0x58
24001630:	46bd      	mov	sp, r7
24001632:	bd80      	pop	{r7, pc}
24001634:	24000540 	.word	0x24000540

24001638 <CSP_QSPI_EnableMemoryMappedMode>:


uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
24001638:	b580      	push	{r7, lr}
2400163a:	b090      	sub	sp, #64	; 0x40
2400163c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2400163e:	f44f 7380 	mov.w	r3, #256	; 0x100
24001642:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001648:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400164a:	2300      	movs	r3, #0
2400164c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400164e:	2300      	movs	r3, #0
24001650:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001652:	2300      	movs	r3, #0
24001654:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001656:	2300      	movs	r3, #0
24001658:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
2400165a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400165e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_4_LINES;
24001660:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24001664:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.NbData = 0;
24001666:	2300      	movs	r3, #0
24001668:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Address = 0;
2400166a:	2300      	movs	r3, #0
2400166c:	60fb      	str	r3, [r7, #12]
	sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
2400166e:	236b      	movs	r3, #107	; 0x6b
24001670:	60bb      	str	r3, [r7, #8]
	sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
24001672:	2308      	movs	r3, #8
24001674:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
24001676:	2300      	movs	r3, #0
24001678:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
2400167a:	463a      	mov	r2, r7
2400167c:	f107 0308 	add.w	r3, r7, #8
24001680:	4619      	mov	r1, r3
24001682:	4806      	ldr	r0, [pc, #24]	; (2400169c <CSP_QSPI_EnableMemoryMappedMode+0x64>)
24001684:	f010 ff29 	bl	240124da <HAL_QSPI_MemoryMapped>
24001688:	4603      	mov	r3, r0
2400168a:	2b00      	cmp	r3, #0
2400168c:	d001      	beq.n	24001692 <CSP_QSPI_EnableMemoryMappedMode+0x5a>
		return HAL_ERROR;
2400168e:	2301      	movs	r3, #1
24001690:	e000      	b.n	24001694 <CSP_QSPI_EnableMemoryMappedMode+0x5c>
	}
	return HAL_OK;
24001692:	2300      	movs	r3, #0
}
24001694:	4618      	mov	r0, r3
24001696:	3740      	adds	r7, #64	; 0x40
24001698:	46bd      	mov	sp, r7
2400169a:	bd80      	pop	{r7, pc}
2400169c:	24000540 	.word	0x24000540

240016a0 <QSPI_ResetChip>:

/*Send reset in 1,2 and 4 lines*/
uint8_t QSPI_ResetChip() {
240016a0:	b580      	push	{r7, lr}
240016a2:	b090      	sub	sp, #64	; 0x40
240016a4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
240016a6:	2300      	movs	r3, #0
240016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
240016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
240016ae:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
240016b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240016b4:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240016b6:	2300      	movs	r3, #0
240016b8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240016ba:	2300      	movs	r3, #0
240016bc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240016be:	2300      	movs	r3, #0
240016c0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240016c2:	2300      	movs	r3, #0
240016c4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_ENABLE_CMD;
240016c6:	2366      	movs	r3, #102	; 0x66
240016c8:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
240016ca:	2300      	movs	r3, #0
240016cc:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
240016ce:	2300      	movs	r3, #0
240016d0:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
240016d2:	2300      	movs	r3, #0
240016d4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
240016d6:	2300      	movs	r3, #0
240016d8:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240016da:	1d3b      	adds	r3, r7, #4
240016dc:	f241 3288 	movw	r2, #5000	; 0x1388
240016e0:	4619      	mov	r1, r3
240016e2:	486f      	ldr	r0, [pc, #444]	; (240018a0 <QSPI_ResetChip+0x200>)
240016e4:	f010 f960 	bl	240119a8 <HAL_QSPI_Command>
240016e8:	4603      	mov	r3, r0
240016ea:	2b00      	cmp	r3, #0
240016ec:	d001      	beq.n	240016f2 <QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
240016ee:	2301      	movs	r3, #1
240016f0:	e0d2      	b.n	24001898 <QSPI_ResetChip+0x1f8>
	}
	for (temp = 0; temp < 0x2f; temp++) {
240016f2:	2300      	movs	r3, #0
240016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
240016f6:	e003      	b.n	24001700 <QSPI_ResetChip+0x60>
		__NOP();
240016f8:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
240016fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
240016fc:	3301      	adds	r3, #1
240016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
24001700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24001702:	2b2e      	cmp	r3, #46	; 0x2e
24001704:	d9f8      	bls.n	240016f8 <QSPI_ResetChip+0x58>
	}

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001706:	f44f 7380 	mov.w	r3, #256	; 0x100
2400170a:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
2400170c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001710:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001712:	2300      	movs	r3, #0
24001714:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001716:	2300      	movs	r3, #0
24001718:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2400171a:	2300      	movs	r3, #0
2400171c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400171e:	2300      	movs	r3, #0
24001720:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.Instruction = RESET_EXECUTE_CMD;
24001722:	2399      	movs	r3, #153	; 0x99
24001724:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001726:	2300      	movs	r3, #0
24001728:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
2400172a:	2300      	movs	r3, #0
2400172c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
2400172e:	2300      	movs	r3, #0
24001730:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
24001732:	2300      	movs	r3, #0
24001734:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001736:	1d3b      	adds	r3, r7, #4
24001738:	f241 3288 	movw	r2, #5000	; 0x1388
2400173c:	4619      	mov	r1, r3
2400173e:	4858      	ldr	r0, [pc, #352]	; (240018a0 <QSPI_ResetChip+0x200>)
24001740:	f010 f932 	bl	240119a8 <HAL_QSPI_Command>
24001744:	4603      	mov	r3, r0
24001746:	2b00      	cmp	r3, #0
24001748:	d001      	beq.n	2400174e <QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
2400174a:	2301      	movs	r3, #1
2400174c:	e0a4      	b.n	24001898 <QSPI_ResetChip+0x1f8>
	}

	/* Erasing Sequence -------------------------------------------------- */
		sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
2400174e:	f44f 7300 	mov.w	r3, #512	; 0x200
24001752:	61fb      	str	r3, [r7, #28]
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001758:	613b      	str	r3, [r7, #16]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400175a:	2300      	movs	r3, #0
2400175c:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400175e:	2300      	movs	r3, #0
24001760:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001762:	2300      	movs	r3, #0
24001764:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001766:	2300      	movs	r3, #0
24001768:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.Instruction = RESET_ENABLE_CMD;
2400176a:	2366      	movs	r3, #102	; 0x66
2400176c:	607b      	str	r3, [r7, #4]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400176e:	2300      	movs	r3, #0
24001770:	623b      	str	r3, [r7, #32]
		sCommand.Address = 0;
24001772:	2300      	movs	r3, #0
24001774:	60bb      	str	r3, [r7, #8]
		sCommand.DataMode = QSPI_DATA_NONE;
24001776:	2300      	movs	r3, #0
24001778:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DummyCycles = 0;
2400177a:	2300      	movs	r3, #0
2400177c:	61bb      	str	r3, [r7, #24]

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400177e:	1d3b      	adds	r3, r7, #4
24001780:	f241 3288 	movw	r2, #5000	; 0x1388
24001784:	4619      	mov	r1, r3
24001786:	4846      	ldr	r0, [pc, #280]	; (240018a0 <QSPI_ResetChip+0x200>)
24001788:	f010 f90e 	bl	240119a8 <HAL_QSPI_Command>
2400178c:	4603      	mov	r3, r0
2400178e:	2b00      	cmp	r3, #0
24001790:	d001      	beq.n	24001796 <QSPI_ResetChip+0xf6>
				!= HAL_OK) {
			return HAL_ERROR;
24001792:	2301      	movs	r3, #1
24001794:	e080      	b.n	24001898 <QSPI_ResetChip+0x1f8>
		}
		for (temp = 0; temp < 0x2f; temp++) {
24001796:	2300      	movs	r3, #0
24001798:	63fb      	str	r3, [r7, #60]	; 0x3c
2400179a:	e003      	b.n	240017a4 <QSPI_ResetChip+0x104>
			__NOP();
2400179c:	bf00      	nop
		for (temp = 0; temp < 0x2f; temp++) {
2400179e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
240017a0:	3301      	adds	r3, #1
240017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
240017a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
240017a6:	2b2e      	cmp	r3, #46	; 0x2e
240017a8:	d9f8      	bls.n	2400179c <QSPI_ResetChip+0xfc>
		}

		sCommand.InstructionMode = QSPI_INSTRUCTION_2_LINES;
240017aa:	f44f 7300 	mov.w	r3, #512	; 0x200
240017ae:	61fb      	str	r3, [r7, #28]
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
240017b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240017b4:	613b      	str	r3, [r7, #16]
		sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240017b6:	2300      	movs	r3, #0
240017b8:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
240017ba:	2300      	movs	r3, #0
240017bc:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
240017be:	2300      	movs	r3, #0
240017c0:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
240017c2:	2300      	movs	r3, #0
240017c4:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.Instruction = RESET_EXECUTE_CMD;
240017c6:	2399      	movs	r3, #153	; 0x99
240017c8:	607b      	str	r3, [r7, #4]
		sCommand.AddressMode = QSPI_ADDRESS_NONE;
240017ca:	2300      	movs	r3, #0
240017cc:	623b      	str	r3, [r7, #32]
		sCommand.Address = 0;
240017ce:	2300      	movs	r3, #0
240017d0:	60bb      	str	r3, [r7, #8]
		sCommand.DataMode = QSPI_DATA_NONE;
240017d2:	2300      	movs	r3, #0
240017d4:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DummyCycles = 0;
240017d6:	2300      	movs	r3, #0
240017d8:	61bb      	str	r3, [r7, #24]

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
240017da:	1d3b      	adds	r3, r7, #4
240017dc:	f241 3288 	movw	r2, #5000	; 0x1388
240017e0:	4619      	mov	r1, r3
240017e2:	482f      	ldr	r0, [pc, #188]	; (240018a0 <QSPI_ResetChip+0x200>)
240017e4:	f010 f8e0 	bl	240119a8 <HAL_QSPI_Command>
240017e8:	4603      	mov	r3, r0
240017ea:	2b00      	cmp	r3, #0
240017ec:	d001      	beq.n	240017f2 <QSPI_ResetChip+0x152>
				!= HAL_OK) {
			return HAL_ERROR;
240017ee:	2301      	movs	r3, #1
240017f0:	e052      	b.n	24001898 <QSPI_ResetChip+0x1f8>
		}


		/* Erasing Sequence -------------------------------------------------- */
			sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
240017f2:	f44f 7340 	mov.w	r3, #768	; 0x300
240017f6:	61fb      	str	r3, [r7, #28]
			sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
240017f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240017fc:	613b      	str	r3, [r7, #16]
			sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240017fe:	2300      	movs	r3, #0
24001800:	627b      	str	r3, [r7, #36]	; 0x24
			sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
24001802:	2300      	movs	r3, #0
24001804:	633b      	str	r3, [r7, #48]	; 0x30
			sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001806:	2300      	movs	r3, #0
24001808:	637b      	str	r3, [r7, #52]	; 0x34
			sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2400180a:	2300      	movs	r3, #0
2400180c:	63bb      	str	r3, [r7, #56]	; 0x38
			sCommand.Instruction = RESET_ENABLE_CMD;
2400180e:	2366      	movs	r3, #102	; 0x66
24001810:	607b      	str	r3, [r7, #4]
			sCommand.AddressMode = QSPI_ADDRESS_NONE;
24001812:	2300      	movs	r3, #0
24001814:	623b      	str	r3, [r7, #32]
			sCommand.Address = 0;
24001816:	2300      	movs	r3, #0
24001818:	60bb      	str	r3, [r7, #8]
			sCommand.DataMode = QSPI_DATA_NONE;
2400181a:	2300      	movs	r3, #0
2400181c:	62bb      	str	r3, [r7, #40]	; 0x28
			sCommand.DummyCycles = 0;
2400181e:	2300      	movs	r3, #0
24001820:	61bb      	str	r3, [r7, #24]

			if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001822:	1d3b      	adds	r3, r7, #4
24001824:	f241 3288 	movw	r2, #5000	; 0x1388
24001828:	4619      	mov	r1, r3
2400182a:	481d      	ldr	r0, [pc, #116]	; (240018a0 <QSPI_ResetChip+0x200>)
2400182c:	f010 f8bc 	bl	240119a8 <HAL_QSPI_Command>
24001830:	4603      	mov	r3, r0
24001832:	2b00      	cmp	r3, #0
24001834:	d001      	beq.n	2400183a <QSPI_ResetChip+0x19a>
					!= HAL_OK) {
				return HAL_ERROR;
24001836:	2301      	movs	r3, #1
24001838:	e02e      	b.n	24001898 <QSPI_ResetChip+0x1f8>
			}
			for (temp = 0; temp < 0x2f; temp++) {
2400183a:	2300      	movs	r3, #0
2400183c:	63fb      	str	r3, [r7, #60]	; 0x3c
2400183e:	e003      	b.n	24001848 <QSPI_ResetChip+0x1a8>
				__NOP();
24001840:	bf00      	nop
			for (temp = 0; temp < 0x2f; temp++) {
24001842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24001844:	3301      	adds	r3, #1
24001846:	63fb      	str	r3, [r7, #60]	; 0x3c
24001848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2400184a:	2b2e      	cmp	r3, #46	; 0x2e
2400184c:	d9f8      	bls.n	24001840 <QSPI_ResetChip+0x1a0>
			}

			sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
2400184e:	f44f 7340 	mov.w	r3, #768	; 0x300
24001852:	61fb      	str	r3, [r7, #28]
			sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
24001854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001858:	613b      	str	r3, [r7, #16]
			sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400185a:	2300      	movs	r3, #0
2400185c:	627b      	str	r3, [r7, #36]	; 0x24
			sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
2400185e:	2300      	movs	r3, #0
24001860:	633b      	str	r3, [r7, #48]	; 0x30
			sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
24001862:	2300      	movs	r3, #0
24001864:	637b      	str	r3, [r7, #52]	; 0x34
			sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
24001866:	2300      	movs	r3, #0
24001868:	63bb      	str	r3, [r7, #56]	; 0x38
			sCommand.Instruction = RESET_EXECUTE_CMD;
2400186a:	2399      	movs	r3, #153	; 0x99
2400186c:	607b      	str	r3, [r7, #4]
			sCommand.AddressMode = QSPI_ADDRESS_NONE;
2400186e:	2300      	movs	r3, #0
24001870:	623b      	str	r3, [r7, #32]
			sCommand.Address = 0;
24001872:	2300      	movs	r3, #0
24001874:	60bb      	str	r3, [r7, #8]
			sCommand.DataMode = QSPI_DATA_NONE;
24001876:	2300      	movs	r3, #0
24001878:	62bb      	str	r3, [r7, #40]	; 0x28
			sCommand.DummyCycles = 0;
2400187a:	2300      	movs	r3, #0
2400187c:	61bb      	str	r3, [r7, #24]

			if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2400187e:	1d3b      	adds	r3, r7, #4
24001880:	f241 3288 	movw	r2, #5000	; 0x1388
24001884:	4619      	mov	r1, r3
24001886:	4806      	ldr	r0, [pc, #24]	; (240018a0 <QSPI_ResetChip+0x200>)
24001888:	f010 f88e 	bl	240119a8 <HAL_QSPI_Command>
2400188c:	4603      	mov	r3, r0
2400188e:	2b00      	cmp	r3, #0
24001890:	d001      	beq.n	24001896 <QSPI_ResetChip+0x1f6>
					!= HAL_OK) {
				return HAL_ERROR;
24001892:	2301      	movs	r3, #1
24001894:	e000      	b.n	24001898 <QSPI_ResetChip+0x1f8>
			}


	return HAL_OK;
24001896:	2300      	movs	r3, #0
}
24001898:	4618      	mov	r0, r3
2400189a:	3740      	adds	r7, #64	; 0x40
2400189c:	46bd      	mov	sp, r7
2400189e:	bd80      	pop	{r7, pc}
240018a0:	24000540 	.word	0x24000540

240018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
240018a4:	b480      	push	{r7}
240018a6:	b083      	sub	sp, #12
240018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240018aa:	4b0a      	ldr	r3, [pc, #40]	; (240018d4 <HAL_MspInit+0x30>)
240018ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240018b0:	4a08      	ldr	r2, [pc, #32]	; (240018d4 <HAL_MspInit+0x30>)
240018b2:	f043 0302 	orr.w	r3, r3, #2
240018b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
240018ba:	4b06      	ldr	r3, [pc, #24]	; (240018d4 <HAL_MspInit+0x30>)
240018bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240018c0:	f003 0302 	and.w	r3, r3, #2
240018c4:	607b      	str	r3, [r7, #4]
240018c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
240018c8:	bf00      	nop
240018ca:	370c      	adds	r7, #12
240018cc:	46bd      	mov	sp, r7
240018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
240018d2:	4770      	bx	lr
240018d4:	58024400 	.word	0x58024400

240018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
240018d8:	b480      	push	{r7}
240018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
240018dc:	e7fe      	b.n	240018dc <NMI_Handler+0x4>

240018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
240018de:	b480      	push	{r7}
240018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
240018e2:	e7fe      	b.n	240018e2 <HardFault_Handler+0x4>

240018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
240018e4:	b480      	push	{r7}
240018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
240018e8:	e7fe      	b.n	240018e8 <MemManage_Handler+0x4>

240018ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
240018ea:	b480      	push	{r7}
240018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
240018ee:	e7fe      	b.n	240018ee <BusFault_Handler+0x4>

240018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
240018f0:	b480      	push	{r7}
240018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
240018f4:	e7fe      	b.n	240018f4 <UsageFault_Handler+0x4>

240018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
240018f6:	b480      	push	{r7}
240018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
240018fa:	bf00      	nop
240018fc:	46bd      	mov	sp, r7
240018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24001902:	4770      	bx	lr

24001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
24001904:	b480      	push	{r7}
24001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
24001908:	bf00      	nop
2400190a:	46bd      	mov	sp, r7
2400190c:	f85d 7b04 	ldr.w	r7, [sp], #4
24001910:	4770      	bx	lr

24001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
24001912:	b480      	push	{r7}
24001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
24001916:	bf00      	nop
24001918:	46bd      	mov	sp, r7
2400191a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400191e:	4770      	bx	lr

24001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
24001920:	b580      	push	{r7, lr}
24001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24001924:	f000 fc56 	bl	240021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
24001928:	bf00      	nop
2400192a:	bd80      	pop	{r7, pc}

2400192c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
2400192c:	b580      	push	{r7, lr}
2400192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
24001930:	4802      	ldr	r0, [pc, #8]	; (2400193c <QUADSPI_IRQHandler+0x10>)
24001932:	f00f fe7f 	bl	24011634 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
24001936:	bf00      	nop
24001938:	bd80      	pop	{r7, pc}
2400193a:	bf00      	nop
2400193c:	24000540 	.word	0x24000540

24001940 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
24001940:	b480      	push	{r7}
24001942:	af00      	add	r7, sp, #0
}
24001944:	bf00      	nop
24001946:	46bd      	mov	sp, r7
24001948:	f85d 7b04 	ldr.w	r7, [sp], #4
2400194c:	4770      	bx	lr

2400194e <_getpid>:

int _getpid(void)
{
2400194e:	b480      	push	{r7}
24001950:	af00      	add	r7, sp, #0
	return 1;
24001952:	2301      	movs	r3, #1
}
24001954:	4618      	mov	r0, r3
24001956:	46bd      	mov	sp, r7
24001958:	f85d 7b04 	ldr.w	r7, [sp], #4
2400195c:	4770      	bx	lr

2400195e <_kill>:

int _kill(int pid, int sig)
{
2400195e:	b580      	push	{r7, lr}
24001960:	b082      	sub	sp, #8
24001962:	af00      	add	r7, sp, #0
24001964:	6078      	str	r0, [r7, #4]
24001966:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
24001968:	f015 fa58 	bl	24016e1c <__errno>
2400196c:	4603      	mov	r3, r0
2400196e:	2216      	movs	r2, #22
24001970:	601a      	str	r2, [r3, #0]
	return -1;
24001972:	f04f 33ff 	mov.w	r3, #4294967295
}
24001976:	4618      	mov	r0, r3
24001978:	3708      	adds	r7, #8
2400197a:	46bd      	mov	sp, r7
2400197c:	bd80      	pop	{r7, pc}

2400197e <_exit>:

void _exit (int status)
{
2400197e:	b580      	push	{r7, lr}
24001980:	b082      	sub	sp, #8
24001982:	af00      	add	r7, sp, #0
24001984:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
24001986:	f04f 31ff 	mov.w	r1, #4294967295
2400198a:	6878      	ldr	r0, [r7, #4]
2400198c:	f7ff ffe7 	bl	2400195e <_kill>
	while (1) {}		/* Make sure we hang here */
24001990:	e7fe      	b.n	24001990 <_exit+0x12>

24001992 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
24001992:	b580      	push	{r7, lr}
24001994:	b086      	sub	sp, #24
24001996:	af00      	add	r7, sp, #0
24001998:	60f8      	str	r0, [r7, #12]
2400199a:	60b9      	str	r1, [r7, #8]
2400199c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
2400199e:	2300      	movs	r3, #0
240019a0:	617b      	str	r3, [r7, #20]
240019a2:	e00a      	b.n	240019ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
240019a4:	f3af 8000 	nop.w
240019a8:	4601      	mov	r1, r0
240019aa:	68bb      	ldr	r3, [r7, #8]
240019ac:	1c5a      	adds	r2, r3, #1
240019ae:	60ba      	str	r2, [r7, #8]
240019b0:	b2ca      	uxtb	r2, r1
240019b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
240019b4:	697b      	ldr	r3, [r7, #20]
240019b6:	3301      	adds	r3, #1
240019b8:	617b      	str	r3, [r7, #20]
240019ba:	697a      	ldr	r2, [r7, #20]
240019bc:	687b      	ldr	r3, [r7, #4]
240019be:	429a      	cmp	r2, r3
240019c0:	dbf0      	blt.n	240019a4 <_read+0x12>
	}

return len;
240019c2:	687b      	ldr	r3, [r7, #4]
}
240019c4:	4618      	mov	r0, r3
240019c6:	3718      	adds	r7, #24
240019c8:	46bd      	mov	sp, r7
240019ca:	bd80      	pop	{r7, pc}

240019cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
240019cc:	b580      	push	{r7, lr}
240019ce:	b086      	sub	sp, #24
240019d0:	af00      	add	r7, sp, #0
240019d2:	60f8      	str	r0, [r7, #12]
240019d4:	60b9      	str	r1, [r7, #8]
240019d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
240019d8:	2300      	movs	r3, #0
240019da:	617b      	str	r3, [r7, #20]
240019dc:	e009      	b.n	240019f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
240019de:	68bb      	ldr	r3, [r7, #8]
240019e0:	1c5a      	adds	r2, r3, #1
240019e2:	60ba      	str	r2, [r7, #8]
240019e4:	781b      	ldrb	r3, [r3, #0]
240019e6:	4618      	mov	r0, r3
240019e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
240019ec:	697b      	ldr	r3, [r7, #20]
240019ee:	3301      	adds	r3, #1
240019f0:	617b      	str	r3, [r7, #20]
240019f2:	697a      	ldr	r2, [r7, #20]
240019f4:	687b      	ldr	r3, [r7, #4]
240019f6:	429a      	cmp	r2, r3
240019f8:	dbf1      	blt.n	240019de <_write+0x12>
	}
	return len;
240019fa:	687b      	ldr	r3, [r7, #4]
}
240019fc:	4618      	mov	r0, r3
240019fe:	3718      	adds	r7, #24
24001a00:	46bd      	mov	sp, r7
24001a02:	bd80      	pop	{r7, pc}

24001a04 <_close>:

int _close(int file)
{
24001a04:	b480      	push	{r7}
24001a06:	b083      	sub	sp, #12
24001a08:	af00      	add	r7, sp, #0
24001a0a:	6078      	str	r0, [r7, #4]
	return -1;
24001a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a10:	4618      	mov	r0, r3
24001a12:	370c      	adds	r7, #12
24001a14:	46bd      	mov	sp, r7
24001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a1a:	4770      	bx	lr

24001a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
24001a1c:	b480      	push	{r7}
24001a1e:	b083      	sub	sp, #12
24001a20:	af00      	add	r7, sp, #0
24001a22:	6078      	str	r0, [r7, #4]
24001a24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24001a26:	683b      	ldr	r3, [r7, #0]
24001a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24001a2c:	605a      	str	r2, [r3, #4]
	return 0;
24001a2e:	2300      	movs	r3, #0
}
24001a30:	4618      	mov	r0, r3
24001a32:	370c      	adds	r7, #12
24001a34:	46bd      	mov	sp, r7
24001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a3a:	4770      	bx	lr

24001a3c <_isatty>:

int _isatty(int file)
{
24001a3c:	b480      	push	{r7}
24001a3e:	b083      	sub	sp, #12
24001a40:	af00      	add	r7, sp, #0
24001a42:	6078      	str	r0, [r7, #4]
	return 1;
24001a44:	2301      	movs	r3, #1
}
24001a46:	4618      	mov	r0, r3
24001a48:	370c      	adds	r7, #12
24001a4a:	46bd      	mov	sp, r7
24001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a50:	4770      	bx	lr

24001a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
24001a52:	b480      	push	{r7}
24001a54:	b085      	sub	sp, #20
24001a56:	af00      	add	r7, sp, #0
24001a58:	60f8      	str	r0, [r7, #12]
24001a5a:	60b9      	str	r1, [r7, #8]
24001a5c:	607a      	str	r2, [r7, #4]
	return 0;
24001a5e:	2300      	movs	r3, #0
}
24001a60:	4618      	mov	r0, r3
24001a62:	3714      	adds	r7, #20
24001a64:	46bd      	mov	sp, r7
24001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a6a:	4770      	bx	lr

24001a6c <_open>:

int _open(char *path, int flags, ...)
{
24001a6c:	b40e      	push	{r1, r2, r3}
24001a6e:	b480      	push	{r7}
24001a70:	b082      	sub	sp, #8
24001a72:	af00      	add	r7, sp, #0
24001a74:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
24001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a7a:	4618      	mov	r0, r3
24001a7c:	3708      	adds	r7, #8
24001a7e:	46bd      	mov	sp, r7
24001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a84:	b003      	add	sp, #12
24001a86:	4770      	bx	lr

24001a88 <_wait>:

int _wait(int *status)
{
24001a88:	b580      	push	{r7, lr}
24001a8a:	b082      	sub	sp, #8
24001a8c:	af00      	add	r7, sp, #0
24001a8e:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
24001a90:	f015 f9c4 	bl	24016e1c <__errno>
24001a94:	4603      	mov	r3, r0
24001a96:	220a      	movs	r2, #10
24001a98:	601a      	str	r2, [r3, #0]
	return -1;
24001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
24001a9e:	4618      	mov	r0, r3
24001aa0:	3708      	adds	r7, #8
24001aa2:	46bd      	mov	sp, r7
24001aa4:	bd80      	pop	{r7, pc}

24001aa6 <_unlink>:

int _unlink(char *name)
{
24001aa6:	b580      	push	{r7, lr}
24001aa8:	b082      	sub	sp, #8
24001aaa:	af00      	add	r7, sp, #0
24001aac:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
24001aae:	f015 f9b5 	bl	24016e1c <__errno>
24001ab2:	4603      	mov	r3, r0
24001ab4:	2202      	movs	r2, #2
24001ab6:	601a      	str	r2, [r3, #0]
	return -1;
24001ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
24001abc:	4618      	mov	r0, r3
24001abe:	3708      	adds	r7, #8
24001ac0:	46bd      	mov	sp, r7
24001ac2:	bd80      	pop	{r7, pc}

24001ac4 <_times>:

int _times(struct tms *buf)
{
24001ac4:	b480      	push	{r7}
24001ac6:	b083      	sub	sp, #12
24001ac8:	af00      	add	r7, sp, #0
24001aca:	6078      	str	r0, [r7, #4]
	return -1;
24001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
24001ad0:	4618      	mov	r0, r3
24001ad2:	370c      	adds	r7, #12
24001ad4:	46bd      	mov	sp, r7
24001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
24001ada:	4770      	bx	lr

24001adc <_stat>:

int _stat(char *file, struct stat *st)
{
24001adc:	b480      	push	{r7}
24001ade:	b083      	sub	sp, #12
24001ae0:	af00      	add	r7, sp, #0
24001ae2:	6078      	str	r0, [r7, #4]
24001ae4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24001ae6:	683b      	ldr	r3, [r7, #0]
24001ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24001aec:	605a      	str	r2, [r3, #4]
	return 0;
24001aee:	2300      	movs	r3, #0
}
24001af0:	4618      	mov	r0, r3
24001af2:	370c      	adds	r7, #12
24001af4:	46bd      	mov	sp, r7
24001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
24001afa:	4770      	bx	lr

24001afc <_link>:

int _link(char *old, char *new)
{
24001afc:	b580      	push	{r7, lr}
24001afe:	b082      	sub	sp, #8
24001b00:	af00      	add	r7, sp, #0
24001b02:	6078      	str	r0, [r7, #4]
24001b04:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
24001b06:	f015 f989 	bl	24016e1c <__errno>
24001b0a:	4603      	mov	r3, r0
24001b0c:	221f      	movs	r2, #31
24001b0e:	601a      	str	r2, [r3, #0]
	return -1;
24001b10:	f04f 33ff 	mov.w	r3, #4294967295
}
24001b14:	4618      	mov	r0, r3
24001b16:	3708      	adds	r7, #8
24001b18:	46bd      	mov	sp, r7
24001b1a:	bd80      	pop	{r7, pc}

24001b1c <_fork>:

int _fork(void)
{
24001b1c:	b580      	push	{r7, lr}
24001b1e:	af00      	add	r7, sp, #0
	errno = EAGAIN;
24001b20:	f015 f97c 	bl	24016e1c <__errno>
24001b24:	4603      	mov	r3, r0
24001b26:	220b      	movs	r2, #11
24001b28:	601a      	str	r2, [r3, #0]
	return -1;
24001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
24001b2e:	4618      	mov	r0, r3
24001b30:	bd80      	pop	{r7, pc}

24001b32 <_execve>:

int _execve(char *name, char **argv, char **env)
{
24001b32:	b580      	push	{r7, lr}
24001b34:	b084      	sub	sp, #16
24001b36:	af00      	add	r7, sp, #0
24001b38:	60f8      	str	r0, [r7, #12]
24001b3a:	60b9      	str	r1, [r7, #8]
24001b3c:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
24001b3e:	f015 f96d 	bl	24016e1c <__errno>
24001b42:	4603      	mov	r3, r0
24001b44:	220c      	movs	r2, #12
24001b46:	601a      	str	r2, [r3, #0]
	return -1;
24001b48:	f04f 33ff 	mov.w	r3, #4294967295
}
24001b4c:	4618      	mov	r0, r3
24001b4e:	3710      	adds	r7, #16
24001b50:	46bd      	mov	sp, r7
24001b52:	bd80      	pop	{r7, pc}

24001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
24001b54:	b580      	push	{r7, lr}
24001b56:	b086      	sub	sp, #24
24001b58:	af00      	add	r7, sp, #0
24001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
24001b5c:	4a14      	ldr	r2, [pc, #80]	; (24001bb0 <_sbrk+0x5c>)
24001b5e:	4b15      	ldr	r3, [pc, #84]	; (24001bb4 <_sbrk+0x60>)
24001b60:	1ad3      	subs	r3, r2, r3
24001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
24001b64:	697b      	ldr	r3, [r7, #20]
24001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24001b68:	4b13      	ldr	r3, [pc, #76]	; (24001bb8 <_sbrk+0x64>)
24001b6a:	681b      	ldr	r3, [r3, #0]
24001b6c:	2b00      	cmp	r3, #0
24001b6e:	d102      	bne.n	24001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
24001b70:	4b11      	ldr	r3, [pc, #68]	; (24001bb8 <_sbrk+0x64>)
24001b72:	4a12      	ldr	r2, [pc, #72]	; (24001bbc <_sbrk+0x68>)
24001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24001b76:	4b10      	ldr	r3, [pc, #64]	; (24001bb8 <_sbrk+0x64>)
24001b78:	681a      	ldr	r2, [r3, #0]
24001b7a:	687b      	ldr	r3, [r7, #4]
24001b7c:	4413      	add	r3, r2
24001b7e:	693a      	ldr	r2, [r7, #16]
24001b80:	429a      	cmp	r2, r3
24001b82:	d207      	bcs.n	24001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
24001b84:	f015 f94a 	bl	24016e1c <__errno>
24001b88:	4603      	mov	r3, r0
24001b8a:	220c      	movs	r2, #12
24001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
24001b8e:	f04f 33ff 	mov.w	r3, #4294967295
24001b92:	e009      	b.n	24001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
24001b94:	4b08      	ldr	r3, [pc, #32]	; (24001bb8 <_sbrk+0x64>)
24001b96:	681b      	ldr	r3, [r3, #0]
24001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24001b9a:	4b07      	ldr	r3, [pc, #28]	; (24001bb8 <_sbrk+0x64>)
24001b9c:	681a      	ldr	r2, [r3, #0]
24001b9e:	687b      	ldr	r3, [r7, #4]
24001ba0:	4413      	add	r3, r2
24001ba2:	4a05      	ldr	r2, [pc, #20]	; (24001bb8 <_sbrk+0x64>)
24001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
24001ba6:	68fb      	ldr	r3, [r7, #12]
}
24001ba8:	4618      	mov	r0, r3
24001baa:	3718      	adds	r7, #24
24001bac:	46bd      	mov	sp, r7
24001bae:	bd80      	pop	{r7, pc}
24001bb0:	24080004 	.word	0x24080004
24001bb4:	00000400 	.word	0x00000400
24001bb8:	24000590 	.word	0x24000590
24001bbc:	24017010 	.word	0x24017010

24001bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24001bc0:	b480      	push	{r7}
24001bc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24001bc4:	4b37      	ldr	r3, [pc, #220]	; (24001ca4 <SystemInit+0xe4>)
24001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24001bca:	4a36      	ldr	r2, [pc, #216]	; (24001ca4 <SystemInit+0xe4>)
24001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24001bd4:	4b34      	ldr	r3, [pc, #208]	; (24001ca8 <SystemInit+0xe8>)
24001bd6:	681b      	ldr	r3, [r3, #0]
24001bd8:	f003 030f 	and.w	r3, r3, #15
24001bdc:	2b06      	cmp	r3, #6
24001bde:	d807      	bhi.n	24001bf0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24001be0:	4b31      	ldr	r3, [pc, #196]	; (24001ca8 <SystemInit+0xe8>)
24001be2:	681b      	ldr	r3, [r3, #0]
24001be4:	f023 030f 	bic.w	r3, r3, #15
24001be8:	4a2f      	ldr	r2, [pc, #188]	; (24001ca8 <SystemInit+0xe8>)
24001bea:	f043 0307 	orr.w	r3, r3, #7
24001bee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24001bf0:	4b2e      	ldr	r3, [pc, #184]	; (24001cac <SystemInit+0xec>)
24001bf2:	681b      	ldr	r3, [r3, #0]
24001bf4:	4a2d      	ldr	r2, [pc, #180]	; (24001cac <SystemInit+0xec>)
24001bf6:	f043 0301 	orr.w	r3, r3, #1
24001bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24001bfc:	4b2b      	ldr	r3, [pc, #172]	; (24001cac <SystemInit+0xec>)
24001bfe:	2200      	movs	r2, #0
24001c00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24001c02:	4b2a      	ldr	r3, [pc, #168]	; (24001cac <SystemInit+0xec>)
24001c04:	681a      	ldr	r2, [r3, #0]
24001c06:	4929      	ldr	r1, [pc, #164]	; (24001cac <SystemInit+0xec>)
24001c08:	4b29      	ldr	r3, [pc, #164]	; (24001cb0 <SystemInit+0xf0>)
24001c0a:	4013      	ands	r3, r2
24001c0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24001c0e:	4b26      	ldr	r3, [pc, #152]	; (24001ca8 <SystemInit+0xe8>)
24001c10:	681b      	ldr	r3, [r3, #0]
24001c12:	f003 0308 	and.w	r3, r3, #8
24001c16:	2b00      	cmp	r3, #0
24001c18:	d007      	beq.n	24001c2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24001c1a:	4b23      	ldr	r3, [pc, #140]	; (24001ca8 <SystemInit+0xe8>)
24001c1c:	681b      	ldr	r3, [r3, #0]
24001c1e:	f023 030f 	bic.w	r3, r3, #15
24001c22:	4a21      	ldr	r2, [pc, #132]	; (24001ca8 <SystemInit+0xe8>)
24001c24:	f043 0307 	orr.w	r3, r3, #7
24001c28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24001c2a:	4b20      	ldr	r3, [pc, #128]	; (24001cac <SystemInit+0xec>)
24001c2c:	2200      	movs	r2, #0
24001c2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
24001c30:	4b1e      	ldr	r3, [pc, #120]	; (24001cac <SystemInit+0xec>)
24001c32:	2200      	movs	r2, #0
24001c34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
24001c36:	4b1d      	ldr	r3, [pc, #116]	; (24001cac <SystemInit+0xec>)
24001c38:	2200      	movs	r2, #0
24001c3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24001c3c:	4b1b      	ldr	r3, [pc, #108]	; (24001cac <SystemInit+0xec>)
24001c3e:	4a1d      	ldr	r2, [pc, #116]	; (24001cb4 <SystemInit+0xf4>)
24001c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24001c42:	4b1a      	ldr	r3, [pc, #104]	; (24001cac <SystemInit+0xec>)
24001c44:	4a1c      	ldr	r2, [pc, #112]	; (24001cb8 <SystemInit+0xf8>)
24001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24001c48:	4b18      	ldr	r3, [pc, #96]	; (24001cac <SystemInit+0xec>)
24001c4a:	4a1c      	ldr	r2, [pc, #112]	; (24001cbc <SystemInit+0xfc>)
24001c4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24001c4e:	4b17      	ldr	r3, [pc, #92]	; (24001cac <SystemInit+0xec>)
24001c50:	2200      	movs	r2, #0
24001c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24001c54:	4b15      	ldr	r3, [pc, #84]	; (24001cac <SystemInit+0xec>)
24001c56:	4a19      	ldr	r2, [pc, #100]	; (24001cbc <SystemInit+0xfc>)
24001c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24001c5a:	4b14      	ldr	r3, [pc, #80]	; (24001cac <SystemInit+0xec>)
24001c5c:	2200      	movs	r2, #0
24001c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24001c60:	4b12      	ldr	r3, [pc, #72]	; (24001cac <SystemInit+0xec>)
24001c62:	4a16      	ldr	r2, [pc, #88]	; (24001cbc <SystemInit+0xfc>)
24001c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24001c66:	4b11      	ldr	r3, [pc, #68]	; (24001cac <SystemInit+0xec>)
24001c68:	2200      	movs	r2, #0
24001c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24001c6c:	4b0f      	ldr	r3, [pc, #60]	; (24001cac <SystemInit+0xec>)
24001c6e:	681b      	ldr	r3, [r3, #0]
24001c70:	4a0e      	ldr	r2, [pc, #56]	; (24001cac <SystemInit+0xec>)
24001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24001c76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24001c78:	4b0c      	ldr	r3, [pc, #48]	; (24001cac <SystemInit+0xec>)
24001c7a:	2200      	movs	r2, #0
24001c7c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24001c7e:	4b10      	ldr	r3, [pc, #64]	; (24001cc0 <SystemInit+0x100>)
24001c80:	681a      	ldr	r2, [r3, #0]
24001c82:	4b10      	ldr	r3, [pc, #64]	; (24001cc4 <SystemInit+0x104>)
24001c84:	4013      	ands	r3, r2
24001c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24001c8a:	d202      	bcs.n	24001c92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24001c8c:	4b0e      	ldr	r3, [pc, #56]	; (24001cc8 <SystemInit+0x108>)
24001c8e:	2201      	movs	r2, #1
24001c90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24001c92:	4b0e      	ldr	r3, [pc, #56]	; (24001ccc <SystemInit+0x10c>)
24001c94:	f243 02d2 	movw	r2, #12498	; 0x30d2
24001c98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24001c9a:	bf00      	nop
24001c9c:	46bd      	mov	sp, r7
24001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
24001ca2:	4770      	bx	lr
24001ca4:	e000ed00 	.word	0xe000ed00
24001ca8:	52002000 	.word	0x52002000
24001cac:	58024400 	.word	0x58024400
24001cb0:	eaf6ed7f 	.word	0xeaf6ed7f
24001cb4:	02020200 	.word	0x02020200
24001cb8:	01ff0000 	.word	0x01ff0000
24001cbc:	01010280 	.word	0x01010280
24001cc0:	5c001000 	.word	0x5c001000
24001cc4:	ffff0000 	.word	0xffff0000
24001cc8:	51008108 	.word	0x51008108
24001ccc:	52004000 	.word	0x52004000

24001cd0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
24001cd0:	b480      	push	{r7}
24001cd2:	b08b      	sub	sp, #44	; 0x2c
24001cd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24001cd6:	4bb1      	ldr	r3, [pc, #708]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001cd8:	691b      	ldr	r3, [r3, #16]
24001cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
24001cde:	2b18      	cmp	r3, #24
24001ce0:	f200 812e 	bhi.w	24001f40 <SystemCoreClockUpdate+0x270>
24001ce4:	a201      	add	r2, pc, #4	; (adr r2, 24001cec <SystemCoreClockUpdate+0x1c>)
24001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24001cea:	bf00      	nop
24001cec:	24001d51 	.word	0x24001d51
24001cf0:	24001f41 	.word	0x24001f41
24001cf4:	24001f41 	.word	0x24001f41
24001cf8:	24001f41 	.word	0x24001f41
24001cfc:	24001f41 	.word	0x24001f41
24001d00:	24001f41 	.word	0x24001f41
24001d04:	24001f41 	.word	0x24001f41
24001d08:	24001f41 	.word	0x24001f41
24001d0c:	24001d65 	.word	0x24001d65
24001d10:	24001f41 	.word	0x24001f41
24001d14:	24001f41 	.word	0x24001f41
24001d18:	24001f41 	.word	0x24001f41
24001d1c:	24001f41 	.word	0x24001f41
24001d20:	24001f41 	.word	0x24001f41
24001d24:	24001f41 	.word	0x24001f41
24001d28:	24001f41 	.word	0x24001f41
24001d2c:	24001d6b 	.word	0x24001d6b
24001d30:	24001f41 	.word	0x24001f41
24001d34:	24001f41 	.word	0x24001f41
24001d38:	24001f41 	.word	0x24001f41
24001d3c:	24001f41 	.word	0x24001f41
24001d40:	24001f41 	.word	0x24001f41
24001d44:	24001f41 	.word	0x24001f41
24001d48:	24001f41 	.word	0x24001f41
24001d4c:	24001d71 	.word	0x24001d71
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24001d50:	4b92      	ldr	r3, [pc, #584]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001d52:	681b      	ldr	r3, [r3, #0]
24001d54:	08db      	lsrs	r3, r3, #3
24001d56:	f003 0303 	and.w	r3, r3, #3
24001d5a:	4a91      	ldr	r2, [pc, #580]	; (24001fa0 <SystemCoreClockUpdate+0x2d0>)
24001d5c:	fa22 f303 	lsr.w	r3, r2, r3
24001d60:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001d62:	e0f7      	b.n	24001f54 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
24001d64:	4b8f      	ldr	r3, [pc, #572]	; (24001fa4 <SystemCoreClockUpdate+0x2d4>)
24001d66:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001d68:	e0f4      	b.n	24001f54 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
24001d6a:	4b8f      	ldr	r3, [pc, #572]	; (24001fa8 <SystemCoreClockUpdate+0x2d8>)
24001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001d6e:	e0f1      	b.n	24001f54 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24001d70:	4b8a      	ldr	r3, [pc, #552]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001d74:	f003 0303 	and.w	r3, r3, #3
24001d78:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24001d7a:	4b88      	ldr	r3, [pc, #544]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001d7e:	091b      	lsrs	r3, r3, #4
24001d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24001d84:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
24001d86:	4b85      	ldr	r3, [pc, #532]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001d8a:	f003 0301 	and.w	r3, r3, #1
24001d8e:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24001d90:	4b82      	ldr	r3, [pc, #520]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001d94:	08db      	lsrs	r3, r3, #3
24001d96:	f3c3 030c 	ubfx	r3, r3, #0, #13
24001d9a:	697a      	ldr	r2, [r7, #20]
24001d9c:	fb02 f303 	mul.w	r3, r2, r3
24001da0:	ee07 3a90 	vmov	s15, r3
24001da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001da8:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
24001dac:	69bb      	ldr	r3, [r7, #24]
24001dae:	2b00      	cmp	r3, #0
24001db0:	f000 80c3 	beq.w	24001f3a <SystemCoreClockUpdate+0x26a>
24001db4:	69fb      	ldr	r3, [r7, #28]
24001db6:	2b02      	cmp	r3, #2
24001db8:	d059      	beq.n	24001e6e <SystemCoreClockUpdate+0x19e>
24001dba:	69fb      	ldr	r3, [r7, #28]
24001dbc:	2b02      	cmp	r3, #2
24001dbe:	d878      	bhi.n	24001eb2 <SystemCoreClockUpdate+0x1e2>
24001dc0:	69fb      	ldr	r3, [r7, #28]
24001dc2:	2b00      	cmp	r3, #0
24001dc4:	d003      	beq.n	24001dce <SystemCoreClockUpdate+0xfe>
24001dc6:	69fb      	ldr	r3, [r7, #28]
24001dc8:	2b01      	cmp	r3, #1
24001dca:	d02e      	beq.n	24001e2a <SystemCoreClockUpdate+0x15a>
24001dcc:	e071      	b.n	24001eb2 <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24001dce:	4b73      	ldr	r3, [pc, #460]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001dd0:	681b      	ldr	r3, [r3, #0]
24001dd2:	08db      	lsrs	r3, r3, #3
24001dd4:	f003 0303 	and.w	r3, r3, #3
24001dd8:	4a71      	ldr	r2, [pc, #452]	; (24001fa0 <SystemCoreClockUpdate+0x2d0>)
24001dda:	fa22 f303 	lsr.w	r3, r2, r3
24001dde:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001de0:	68fb      	ldr	r3, [r7, #12]
24001de2:	ee07 3a90 	vmov	s15, r3
24001de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001dea:	69bb      	ldr	r3, [r7, #24]
24001dec:	ee07 3a90 	vmov	s15, r3
24001df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001df8:	4b68      	ldr	r3, [pc, #416]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001e00:	ee07 3a90 	vmov	s15, r3
24001e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e08:	ed97 6a04 	vldr	s12, [r7, #16]
24001e0c:	eddf 5a67 	vldr	s11, [pc, #412]	; 24001fac <SystemCoreClockUpdate+0x2dc>
24001e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
24001e24:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
24001e28:	e071      	b.n	24001f0e <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001e2a:	69bb      	ldr	r3, [r7, #24]
24001e2c:	ee07 3a90 	vmov	s15, r3
24001e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001e34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24001fb0 <SystemCoreClockUpdate+0x2e0>
24001e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001e3c:	4b57      	ldr	r3, [pc, #348]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001e44:	ee07 3a90 	vmov	s15, r3
24001e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e4c:	ed97 6a04 	vldr	s12, [r7, #16]
24001e50:	eddf 5a56 	vldr	s11, [pc, #344]	; 24001fac <SystemCoreClockUpdate+0x2dc>
24001e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001e64:	ee67 7a27 	vmul.f32	s15, s14, s15
24001e68:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001e6c:	e04f      	b.n	24001f0e <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001e6e:	69bb      	ldr	r3, [r7, #24]
24001e70:	ee07 3a90 	vmov	s15, r3
24001e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001e78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 24001fb4 <SystemCoreClockUpdate+0x2e4>
24001e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001e80:	4b46      	ldr	r3, [pc, #280]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001e88:	ee07 3a90 	vmov	s15, r3
24001e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e90:	ed97 6a04 	vldr	s12, [r7, #16]
24001e94:	eddf 5a45 	vldr	s11, [pc, #276]	; 24001fac <SystemCoreClockUpdate+0x2dc>
24001e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
24001eac:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001eb0:	e02d      	b.n	24001f0e <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24001eb2:	4b3a      	ldr	r3, [pc, #232]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001eb4:	681b      	ldr	r3, [r3, #0]
24001eb6:	08db      	lsrs	r3, r3, #3
24001eb8:	f003 0303 	and.w	r3, r3, #3
24001ebc:	4a38      	ldr	r2, [pc, #224]	; (24001fa0 <SystemCoreClockUpdate+0x2d0>)
24001ebe:	fa22 f303 	lsr.w	r3, r2, r3
24001ec2:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001ec4:	68fb      	ldr	r3, [r7, #12]
24001ec6:	ee07 3a90 	vmov	s15, r3
24001eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001ece:	69bb      	ldr	r3, [r7, #24]
24001ed0:	ee07 3a90 	vmov	s15, r3
24001ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001edc:	4b2f      	ldr	r3, [pc, #188]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001ee4:	ee07 3a90 	vmov	s15, r3
24001ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001eec:	ed97 6a04 	vldr	s12, [r7, #16]
24001ef0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24001fac <SystemCoreClockUpdate+0x2dc>
24001ef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001efc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001f04:	ee67 7a27 	vmul.f32	s15, s14, s15
24001f08:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001f0c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24001f0e:	4b23      	ldr	r3, [pc, #140]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001f12:	0a5b      	lsrs	r3, r3, #9
24001f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24001f18:	3301      	adds	r3, #1
24001f1a:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24001f1c:	68bb      	ldr	r3, [r7, #8]
24001f1e:	ee07 3a90 	vmov	s15, r3
24001f22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24001f26:	edd7 6a08 	vldr	s13, [r7, #32]
24001f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
24001f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24001f32:	ee17 3a90 	vmov	r3, s15
24001f36:	627b      	str	r3, [r7, #36]	; 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
24001f38:	e00c      	b.n	24001f54 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
24001f3a:	2300      	movs	r3, #0
24001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001f3e:	e009      	b.n	24001f54 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24001f40:	4b16      	ldr	r3, [pc, #88]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001f42:	681b      	ldr	r3, [r3, #0]
24001f44:	08db      	lsrs	r3, r3, #3
24001f46:	f003 0303 	and.w	r3, r3, #3
24001f4a:	4a15      	ldr	r2, [pc, #84]	; (24001fa0 <SystemCoreClockUpdate+0x2d0>)
24001f4c:	fa22 f303 	lsr.w	r3, r2, r3
24001f50:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001f52:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
24001f54:	4b11      	ldr	r3, [pc, #68]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001f56:	699b      	ldr	r3, [r3, #24]
24001f58:	0a1b      	lsrs	r3, r3, #8
24001f5a:	f003 030f 	and.w	r3, r3, #15
24001f5e:	4a16      	ldr	r2, [pc, #88]	; (24001fb8 <SystemCoreClockUpdate+0x2e8>)
24001f60:	5cd3      	ldrb	r3, [r2, r3]
24001f62:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
24001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24001f66:	687b      	ldr	r3, [r7, #4]
24001f68:	fa22 f303 	lsr.w	r3, r2, r3
24001f6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24001f6e:	4b0b      	ldr	r3, [pc, #44]	; (24001f9c <SystemCoreClockUpdate+0x2cc>)
24001f70:	699b      	ldr	r3, [r3, #24]
24001f72:	f003 030f 	and.w	r3, r3, #15
24001f76:	4a10      	ldr	r2, [pc, #64]	; (24001fb8 <SystemCoreClockUpdate+0x2e8>)
24001f78:	5cd3      	ldrb	r3, [r2, r3]
24001f7a:	f003 031f 	and.w	r3, r3, #31
24001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24001f80:	fa22 f303 	lsr.w	r3, r2, r3
24001f84:	4a0d      	ldr	r2, [pc, #52]	; (24001fbc <SystemCoreClockUpdate+0x2ec>)
24001f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24001f88:	4a0d      	ldr	r2, [pc, #52]	; (24001fc0 <SystemCoreClockUpdate+0x2f0>)
24001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
24001f8e:	bf00      	nop
24001f90:	372c      	adds	r7, #44	; 0x2c
24001f92:	46bd      	mov	sp, r7
24001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
24001f98:	4770      	bx	lr
24001f9a:	bf00      	nop
24001f9c:	58024400 	.word	0x58024400
24001fa0:	03d09000 	.word	0x03d09000
24001fa4:	003d0900 	.word	0x003d0900
24001fa8:	02dc6c00 	.word	0x02dc6c00
24001fac:	46000000 	.word	0x46000000
24001fb0:	4a742400 	.word	0x4a742400
24001fb4:	4c371b00 	.word	0x4c371b00
24001fb8:	24016ff4 	.word	0x24016ff4
24001fbc:	240004b4 	.word	0x240004b4
24001fc0:	240004b0 	.word	0x240004b0

24001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
24001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 24001ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
24001fc8:	f7ff fdfa 	bl	24001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
24001fcc:	480c      	ldr	r0, [pc, #48]	; (24002000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24001fce:	490d      	ldr	r1, [pc, #52]	; (24002004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24001fd0:	4a0d      	ldr	r2, [pc, #52]	; (24002008 <LoopFillZerobss+0x1a>)
  movs r3, #0
24001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
24001fd4:	e002      	b.n	24001fdc <LoopCopyDataInit>

24001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24001fda:	3304      	adds	r3, #4

24001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
24001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
24001fe0:	d3f9      	bcc.n	24001fd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
24001fe2:	4a0a      	ldr	r2, [pc, #40]	; (2400200c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24001fe4:	4c0a      	ldr	r4, [pc, #40]	; (24002010 <LoopFillZerobss+0x22>)
  movs r3, #0
24001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
24001fe8:	e001      	b.n	24001fee <LoopFillZerobss>

24001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24001fec:	3204      	adds	r2, #4

24001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
24001ff0:	d3fb      	bcc.n	24001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
24001ff2:	f014 ff2d 	bl	24016e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24001ff6:	f7fe fde7 	bl	24000bc8 <main>
  bx  lr
24001ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24001ffc:	24080004 	.word	0x24080004
  ldr r0, =_sdata
24002000:	240004a8 	.word	0x240004a8
  ldr r1, =_edata
24002004:	24000524 	.word	0x24000524
  ldr r2, =_sidata
24002008:	240004a8 	.word	0x240004a8
  ldr r2, =_sbss
2400200c:	24000524 	.word	0x24000524
  ldr r4, =_ebss
24002010:	240005b4 	.word	0x240005b4

24002014 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24002014:	e7fe      	b.n	24002014 <ADC3_IRQHandler>
	...

24002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24002018:	b580      	push	{r7, lr}
2400201a:	b082      	sub	sp, #8
2400201c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400201e:	2003      	movs	r0, #3
24002020:	f000 fefc 	bl	24002e1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24002024:	f011 fe6a 	bl	24013cfc <HAL_RCC_GetSysClockFreq>
24002028:	4602      	mov	r2, r0
2400202a:	4b15      	ldr	r3, [pc, #84]	; (24002080 <HAL_Init+0x68>)
2400202c:	699b      	ldr	r3, [r3, #24]
2400202e:	0a1b      	lsrs	r3, r3, #8
24002030:	f003 030f 	and.w	r3, r3, #15
24002034:	4913      	ldr	r1, [pc, #76]	; (24002084 <HAL_Init+0x6c>)
24002036:	5ccb      	ldrb	r3, [r1, r3]
24002038:	f003 031f 	and.w	r3, r3, #31
2400203c:	fa22 f303 	lsr.w	r3, r2, r3
24002040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002042:	4b0f      	ldr	r3, [pc, #60]	; (24002080 <HAL_Init+0x68>)
24002044:	699b      	ldr	r3, [r3, #24]
24002046:	f003 030f 	and.w	r3, r3, #15
2400204a:	4a0e      	ldr	r2, [pc, #56]	; (24002084 <HAL_Init+0x6c>)
2400204c:	5cd3      	ldrb	r3, [r2, r3]
2400204e:	f003 031f 	and.w	r3, r3, #31
24002052:	687a      	ldr	r2, [r7, #4]
24002054:	fa22 f303 	lsr.w	r3, r2, r3
24002058:	4a0b      	ldr	r2, [pc, #44]	; (24002088 <HAL_Init+0x70>)
2400205a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2400205c:	4a0b      	ldr	r2, [pc, #44]	; (2400208c <HAL_Init+0x74>)
2400205e:	687b      	ldr	r3, [r7, #4]
24002060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24002062:	200f      	movs	r0, #15
24002064:	f000 f880 	bl	24002168 <HAL_InitTick>
24002068:	4603      	mov	r3, r0
2400206a:	2b00      	cmp	r3, #0
2400206c:	d001      	beq.n	24002072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
2400206e:	2301      	movs	r3, #1
24002070:	e002      	b.n	24002078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24002072:	f7ff fc17 	bl	240018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24002076:	2300      	movs	r3, #0
}
24002078:	4618      	mov	r0, r3
2400207a:	3708      	adds	r7, #8
2400207c:	46bd      	mov	sp, r7
2400207e:	bd80      	pop	{r7, pc}
24002080:	58024400 	.word	0x58024400
24002084:	24016ff4 	.word	0x24016ff4
24002088:	240004b4 	.word	0x240004b4
2400208c:	240004b0 	.word	0x240004b0

24002090 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
24002090:	b580      	push	{r7, lr}
24002092:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
24002094:	4b26      	ldr	r3, [pc, #152]	; (24002130 <HAL_DeInit+0xa0>)
24002096:	4a27      	ldr	r2, [pc, #156]	; (24002134 <HAL_DeInit+0xa4>)
24002098:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
2400209a:	4b25      	ldr	r3, [pc, #148]	; (24002130 <HAL_DeInit+0xa0>)
2400209c:	2200      	movs	r2, #0
2400209e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
240020a0:	4b23      	ldr	r3, [pc, #140]	; (24002130 <HAL_DeInit+0xa0>)
240020a2:	4a25      	ldr	r2, [pc, #148]	; (24002138 <HAL_DeInit+0xa8>)
240020a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
240020a8:	4b21      	ldr	r3, [pc, #132]	; (24002130 <HAL_DeInit+0xa0>)
240020aa:	2200      	movs	r2, #0
240020ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
240020b0:	4b1f      	ldr	r3, [pc, #124]	; (24002130 <HAL_DeInit+0xa0>)
240020b2:	f240 2271 	movw	r2, #625	; 0x271
240020b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
240020ba:	4b1d      	ldr	r3, [pc, #116]	; (24002130 <HAL_DeInit+0xa0>)
240020bc:	2200      	movs	r2, #0
240020be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
240020c2:	4b1b      	ldr	r3, [pc, #108]	; (24002130 <HAL_DeInit+0xa0>)
240020c4:	4a1d      	ldr	r2, [pc, #116]	; (2400213c <HAL_DeInit+0xac>)
240020c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
240020ca:	4b19      	ldr	r3, [pc, #100]	; (24002130 <HAL_DeInit+0xa0>)
240020cc:	2200      	movs	r2, #0
240020ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_RCC_APB3_FORCE_RESET();
240020d2:	4b17      	ldr	r3, [pc, #92]	; (24002130 <HAL_DeInit+0xa0>)
240020d4:	2218      	movs	r2, #24
240020d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
240020da:	4b15      	ldr	r3, [pc, #84]	; (24002130 <HAL_DeInit+0xa0>)
240020dc:	2200      	movs	r2, #0
240020de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
240020e2:	4b13      	ldr	r3, [pc, #76]	; (24002130 <HAL_DeInit+0xa0>)
240020e4:	4a16      	ldr	r2, [pc, #88]	; (24002140 <HAL_DeInit+0xb0>)
240020e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
240020ea:	4b11      	ldr	r3, [pc, #68]	; (24002130 <HAL_DeInit+0xa0>)
240020ec:	2200      	movs	r2, #0
240020ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
240020f2:	4b0f      	ldr	r3, [pc, #60]	; (24002130 <HAL_DeInit+0xa0>)
240020f4:	f44f 729b 	mov.w	r2, #310	; 0x136
240020f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
240020fc:	4b0c      	ldr	r3, [pc, #48]	; (24002130 <HAL_DeInit+0xa0>)
240020fe:	2200      	movs	r2, #0
24002100:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   __HAL_RCC_APB2_FORCE_RESET();
24002104:	4b0a      	ldr	r3, [pc, #40]	; (24002130 <HAL_DeInit+0xa0>)
24002106:	4a0f      	ldr	r2, [pc, #60]	; (24002144 <HAL_DeInit+0xb4>)
24002108:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
2400210c:	4b08      	ldr	r3, [pc, #32]	; (24002130 <HAL_DeInit+0xa0>)
2400210e:	2200      	movs	r2, #0
24002110:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  __HAL_RCC_APB4_FORCE_RESET();
24002114:	4b06      	ldr	r3, [pc, #24]	; (24002130 <HAL_DeInit+0xa0>)
24002116:	4a0c      	ldr	r2, [pc, #48]	; (24002148 <HAL_DeInit+0xb8>)
24002118:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
2400211c:	4b04      	ldr	r3, [pc, #16]	; (24002130 <HAL_DeInit+0xa0>)
2400211e:	2200      	movs	r2, #0
24002120:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
24002124:	f000 f819 	bl	2400215a <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
24002128:	2300      	movs	r3, #0
}
2400212a:	4618      	mov	r0, r3
2400212c:	bd80      	pop	{r7, pc}
2400212e:	bf00      	nop
24002130:	58024400 	.word	0x58024400
24002134:	00015031 	.word	0x00015031
24002138:	0a00c023 	.word	0x0a00c023
2400213c:	032807ff 	.word	0x032807ff
24002140:	e8ffc3ff 	.word	0xe8ffc3ff
24002144:	31d73033 	.word	0x31d73033
24002148:	0020deaa 	.word	0x0020deaa
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
2400214c:	b480      	push	{r7}
2400214e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
24002150:	bf00      	nop
24002152:	46bd      	mov	sp, r7
24002154:	f85d 7b04 	ldr.w	r7, [sp], #4
24002158:	4770      	bx	lr

2400215a <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
2400215a:	b480      	push	{r7}
2400215c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
2400215e:	bf00      	nop
24002160:	46bd      	mov	sp, r7
24002162:	f85d 7b04 	ldr.w	r7, [sp], #4
24002166:	4770      	bx	lr

24002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24002168:	b580      	push	{r7, lr}
2400216a:	b082      	sub	sp, #8
2400216c:	af00      	add	r7, sp, #0
2400216e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24002170:	4b15      	ldr	r3, [pc, #84]	; (240021c8 <HAL_InitTick+0x60>)
24002172:	781b      	ldrb	r3, [r3, #0]
24002174:	2b00      	cmp	r3, #0
24002176:	d101      	bne.n	2400217c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24002178:	2301      	movs	r3, #1
2400217a:	e021      	b.n	240021c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
2400217c:	4b13      	ldr	r3, [pc, #76]	; (240021cc <HAL_InitTick+0x64>)
2400217e:	681a      	ldr	r2, [r3, #0]
24002180:	4b11      	ldr	r3, [pc, #68]	; (240021c8 <HAL_InitTick+0x60>)
24002182:	781b      	ldrb	r3, [r3, #0]
24002184:	4619      	mov	r1, r3
24002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2400218a:	fbb3 f3f1 	udiv	r3, r3, r1
2400218e:	fbb2 f3f3 	udiv	r3, r2, r3
24002192:	4618      	mov	r0, r3
24002194:	f000 fe87 	bl	24002ea6 <HAL_SYSTICK_Config>
24002198:	4603      	mov	r3, r0
2400219a:	2b00      	cmp	r3, #0
2400219c:	d001      	beq.n	240021a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
2400219e:	2301      	movs	r3, #1
240021a0:	e00e      	b.n	240021c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
240021a2:	687b      	ldr	r3, [r7, #4]
240021a4:	2b0f      	cmp	r3, #15
240021a6:	d80a      	bhi.n	240021be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
240021a8:	2200      	movs	r2, #0
240021aa:	6879      	ldr	r1, [r7, #4]
240021ac:	f04f 30ff 	mov.w	r0, #4294967295
240021b0:	f000 fe3f 	bl	24002e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
240021b4:	4a06      	ldr	r2, [pc, #24]	; (240021d0 <HAL_InitTick+0x68>)
240021b6:	687b      	ldr	r3, [r7, #4]
240021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
240021ba:	2300      	movs	r3, #0
240021bc:	e000      	b.n	240021c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
240021be:	2301      	movs	r3, #1
}
240021c0:	4618      	mov	r0, r3
240021c2:	3708      	adds	r7, #8
240021c4:	46bd      	mov	sp, r7
240021c6:	bd80      	pop	{r7, pc}
240021c8:	240004bc 	.word	0x240004bc
240021cc:	240004b0 	.word	0x240004b0
240021d0:	240004b8 	.word	0x240004b8

240021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
240021d4:	b480      	push	{r7}
240021d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
240021d8:	4b06      	ldr	r3, [pc, #24]	; (240021f4 <HAL_IncTick+0x20>)
240021da:	781b      	ldrb	r3, [r3, #0]
240021dc:	461a      	mov	r2, r3
240021de:	4b06      	ldr	r3, [pc, #24]	; (240021f8 <HAL_IncTick+0x24>)
240021e0:	681b      	ldr	r3, [r3, #0]
240021e2:	4413      	add	r3, r2
240021e4:	4a04      	ldr	r2, [pc, #16]	; (240021f8 <HAL_IncTick+0x24>)
240021e6:	6013      	str	r3, [r2, #0]
}
240021e8:	bf00      	nop
240021ea:	46bd      	mov	sp, r7
240021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
240021f0:	4770      	bx	lr
240021f2:	bf00      	nop
240021f4:	240004bc 	.word	0x240004bc
240021f8:	24000594 	.word	0x24000594

240021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
240021fc:	b480      	push	{r7}
240021fe:	af00      	add	r7, sp, #0
  return uwTick;
24002200:	4b03      	ldr	r3, [pc, #12]	; (24002210 <HAL_GetTick+0x14>)
24002202:	681b      	ldr	r3, [r3, #0]
}
24002204:	4618      	mov	r0, r3
24002206:	46bd      	mov	sp, r7
24002208:	f85d 7b04 	ldr.w	r7, [sp], #4
2400220c:	4770      	bx	lr
2400220e:	bf00      	nop
24002210:	24000594 	.word	0x24000594

24002214 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
24002214:	b480      	push	{r7}
24002216:	af00      	add	r7, sp, #0
  return uwTickPrio;
24002218:	4b03      	ldr	r3, [pc, #12]	; (24002228 <HAL_GetTickPrio+0x14>)
2400221a:	681b      	ldr	r3, [r3, #0]
}
2400221c:	4618      	mov	r0, r3
2400221e:	46bd      	mov	sp, r7
24002220:	f85d 7b04 	ldr.w	r7, [sp], #4
24002224:	4770      	bx	lr
24002226:	bf00      	nop
24002228:	240004b8 	.word	0x240004b8

2400222c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
2400222c:	b580      	push	{r7, lr}
2400222e:	b084      	sub	sp, #16
24002230:	af00      	add	r7, sp, #0
24002232:	4603      	mov	r3, r0
24002234:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
24002236:	2300      	movs	r3, #0
24002238:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
2400223a:	4b0e      	ldr	r3, [pc, #56]	; (24002274 <HAL_SetTickFreq+0x48>)
2400223c:	781b      	ldrb	r3, [r3, #0]
2400223e:	79fa      	ldrb	r2, [r7, #7]
24002240:	429a      	cmp	r2, r3
24002242:	d012      	beq.n	2400226a <HAL_SetTickFreq+0x3e>
  {

    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
24002244:	4b0b      	ldr	r3, [pc, #44]	; (24002274 <HAL_SetTickFreq+0x48>)
24002246:	781b      	ldrb	r3, [r3, #0]
24002248:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
2400224a:	4a0a      	ldr	r2, [pc, #40]	; (24002274 <HAL_SetTickFreq+0x48>)
2400224c:	79fb      	ldrb	r3, [r7, #7]
2400224e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
24002250:	4b09      	ldr	r3, [pc, #36]	; (24002278 <HAL_SetTickFreq+0x4c>)
24002252:	681b      	ldr	r3, [r3, #0]
24002254:	4618      	mov	r0, r3
24002256:	f7ff ff87 	bl	24002168 <HAL_InitTick>
2400225a:	4603      	mov	r3, r0
2400225c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
2400225e:	7bfb      	ldrb	r3, [r7, #15]
24002260:	2b00      	cmp	r3, #0
24002262:	d002      	beq.n	2400226a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
24002264:	4a03      	ldr	r2, [pc, #12]	; (24002274 <HAL_SetTickFreq+0x48>)
24002266:	7bbb      	ldrb	r3, [r7, #14]
24002268:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
2400226a:	7bfb      	ldrb	r3, [r7, #15]
}
2400226c:	4618      	mov	r0, r3
2400226e:	3710      	adds	r7, #16
24002270:	46bd      	mov	sp, r7
24002272:	bd80      	pop	{r7, pc}
24002274:	240004bc 	.word	0x240004bc
24002278:	240004b8 	.word	0x240004b8

2400227c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
2400227c:	b480      	push	{r7}
2400227e:	af00      	add	r7, sp, #0
  return uwTickFreq;
24002280:	4b03      	ldr	r3, [pc, #12]	; (24002290 <HAL_GetTickFreq+0x14>)
24002282:	781b      	ldrb	r3, [r3, #0]
}
24002284:	4618      	mov	r0, r3
24002286:	46bd      	mov	sp, r7
24002288:	f85d 7b04 	ldr.w	r7, [sp], #4
2400228c:	4770      	bx	lr
2400228e:	bf00      	nop
24002290:	240004bc 	.word	0x240004bc

24002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24002294:	b580      	push	{r7, lr}
24002296:	b084      	sub	sp, #16
24002298:	af00      	add	r7, sp, #0
2400229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2400229c:	f7ff ffae 	bl	240021fc <HAL_GetTick>
240022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
240022a2:	687b      	ldr	r3, [r7, #4]
240022a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240022a6:	68fb      	ldr	r3, [r7, #12]
240022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
240022ac:	d005      	beq.n	240022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
240022ae:	4b0a      	ldr	r3, [pc, #40]	; (240022d8 <HAL_Delay+0x44>)
240022b0:	781b      	ldrb	r3, [r3, #0]
240022b2:	461a      	mov	r2, r3
240022b4:	68fb      	ldr	r3, [r7, #12]
240022b6:	4413      	add	r3, r2
240022b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
240022ba:	bf00      	nop
240022bc:	f7ff ff9e 	bl	240021fc <HAL_GetTick>
240022c0:	4602      	mov	r2, r0
240022c2:	68bb      	ldr	r3, [r7, #8]
240022c4:	1ad3      	subs	r3, r2, r3
240022c6:	68fa      	ldr	r2, [r7, #12]
240022c8:	429a      	cmp	r2, r3
240022ca:	d8f7      	bhi.n	240022bc <HAL_Delay+0x28>
  {
  }
}
240022cc:	bf00      	nop
240022ce:	bf00      	nop
240022d0:	3710      	adds	r7, #16
240022d2:	46bd      	mov	sp, r7
240022d4:	bd80      	pop	{r7, pc}
240022d6:	bf00      	nop
240022d8:	240004bc 	.word	0x240004bc

240022dc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
240022dc:	b480      	push	{r7}
240022de:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
240022e0:	4b05      	ldr	r3, [pc, #20]	; (240022f8 <HAL_SuspendTick+0x1c>)
240022e2:	681b      	ldr	r3, [r3, #0]
240022e4:	4a04      	ldr	r2, [pc, #16]	; (240022f8 <HAL_SuspendTick+0x1c>)
240022e6:	f023 0302 	bic.w	r3, r3, #2
240022ea:	6013      	str	r3, [r2, #0]
}
240022ec:	bf00      	nop
240022ee:	46bd      	mov	sp, r7
240022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240022f4:	4770      	bx	lr
240022f6:	bf00      	nop
240022f8:	e000e010 	.word	0xe000e010

240022fc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
240022fc:	b480      	push	{r7}
240022fe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
24002300:	4b05      	ldr	r3, [pc, #20]	; (24002318 <HAL_ResumeTick+0x1c>)
24002302:	681b      	ldr	r3, [r3, #0]
24002304:	4a04      	ldr	r2, [pc, #16]	; (24002318 <HAL_ResumeTick+0x1c>)
24002306:	f043 0302 	orr.w	r3, r3, #2
2400230a:	6013      	str	r3, [r2, #0]
}
2400230c:	bf00      	nop
2400230e:	46bd      	mov	sp, r7
24002310:	f85d 7b04 	ldr.w	r7, [sp], #4
24002314:	4770      	bx	lr
24002316:	bf00      	nop
24002318:	e000e010 	.word	0xe000e010

2400231c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
2400231c:	b480      	push	{r7}
2400231e:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
24002320:	4b02      	ldr	r3, [pc, #8]	; (2400232c <HAL_GetHalVersion+0x10>)
}
24002322:	4618      	mov	r0, r3
24002324:	46bd      	mov	sp, r7
24002326:	f85d 7b04 	ldr.w	r7, [sp], #4
2400232a:	4770      	bx	lr
2400232c:	010b0000 	.word	0x010b0000

24002330 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
24002330:	b480      	push	{r7}
24002332:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
24002334:	4b03      	ldr	r3, [pc, #12]	; (24002344 <HAL_GetREVID+0x14>)
24002336:	681b      	ldr	r3, [r3, #0]
24002338:	0c1b      	lsrs	r3, r3, #16
}
2400233a:	4618      	mov	r0, r3
2400233c:	46bd      	mov	sp, r7
2400233e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002342:	4770      	bx	lr
24002344:	5c001000 	.word	0x5c001000

24002348 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
24002348:	b480      	push	{r7}
2400234a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
2400234c:	4b04      	ldr	r3, [pc, #16]	; (24002360 <HAL_GetDEVID+0x18>)
2400234e:	681b      	ldr	r3, [r3, #0]
24002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
24002354:	4618      	mov	r0, r3
24002356:	46bd      	mov	sp, r7
24002358:	f85d 7b04 	ldr.w	r7, [sp], #4
2400235c:	4770      	bx	lr
2400235e:	bf00      	nop
24002360:	5c001000 	.word	0x5c001000

24002364 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
24002364:	b480      	push	{r7}
24002366:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
24002368:	4b03      	ldr	r3, [pc, #12]	; (24002378 <HAL_GetUIDw0+0x14>)
2400236a:	681b      	ldr	r3, [r3, #0]
}
2400236c:	4618      	mov	r0, r3
2400236e:	46bd      	mov	sp, r7
24002370:	f85d 7b04 	ldr.w	r7, [sp], #4
24002374:	4770      	bx	lr
24002376:	bf00      	nop
24002378:	1ff1e800 	.word	0x1ff1e800

2400237c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
2400237c:	b480      	push	{r7}
2400237e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
24002380:	4b03      	ldr	r3, [pc, #12]	; (24002390 <HAL_GetUIDw1+0x14>)
24002382:	681b      	ldr	r3, [r3, #0]
}
24002384:	4618      	mov	r0, r3
24002386:	46bd      	mov	sp, r7
24002388:	f85d 7b04 	ldr.w	r7, [sp], #4
2400238c:	4770      	bx	lr
2400238e:	bf00      	nop
24002390:	1ff1e804 	.word	0x1ff1e804

24002394 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
24002394:	b480      	push	{r7}
24002396:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
24002398:	4b03      	ldr	r3, [pc, #12]	; (240023a8 <HAL_GetUIDw2+0x14>)
2400239a:	681b      	ldr	r3, [r3, #0]
}
2400239c:	4618      	mov	r0, r3
2400239e:	46bd      	mov	sp, r7
240023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
240023a4:	4770      	bx	lr
240023a6:	bf00      	nop
240023a8:	1ff1e808 	.word	0x1ff1e808

240023ac <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
240023ac:	b480      	push	{r7}
240023ae:	b083      	sub	sp, #12
240023b0:	af00      	add	r7, sp, #0
240023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
240023b4:	4b06      	ldr	r3, [pc, #24]	; (240023d0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
240023b6:	681b      	ldr	r3, [r3, #0]
240023b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240023bc:	4904      	ldr	r1, [pc, #16]	; (240023d0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
240023be:	687b      	ldr	r3, [r7, #4]
240023c0:	4313      	orrs	r3, r2
240023c2:	600b      	str	r3, [r1, #0]
}
240023c4:	bf00      	nop
240023c6:	370c      	adds	r7, #12
240023c8:	46bd      	mov	sp, r7
240023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
240023ce:	4770      	bx	lr
240023d0:	58003c00 	.word	0x58003c00

240023d4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
240023d4:	b480      	push	{r7}
240023d6:	b083      	sub	sp, #12
240023d8:	af00      	add	r7, sp, #0
240023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
240023dc:	4b06      	ldr	r3, [pc, #24]	; (240023f8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
240023de:	681b      	ldr	r3, [r3, #0]
240023e0:	f023 0202 	bic.w	r2, r3, #2
240023e4:	4904      	ldr	r1, [pc, #16]	; (240023f8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
240023e6:	687b      	ldr	r3, [r7, #4]
240023e8:	4313      	orrs	r3, r2
240023ea:	600b      	str	r3, [r1, #0]
}
240023ec:	bf00      	nop
240023ee:	370c      	adds	r7, #12
240023f0:	46bd      	mov	sp, r7
240023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240023f6:	4770      	bx	lr
240023f8:	58003c00 	.word	0x58003c00

240023fc <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
240023fc:	b480      	push	{r7}
240023fe:	b083      	sub	sp, #12
24002400:	af00      	add	r7, sp, #0
24002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
24002404:	4b06      	ldr	r3, [pc, #24]	; (24002420 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
24002406:	685b      	ldr	r3, [r3, #4]
24002408:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
2400240c:	4904      	ldr	r1, [pc, #16]	; (24002420 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
2400240e:	687b      	ldr	r3, [r7, #4]
24002410:	4313      	orrs	r3, r2
24002412:	604b      	str	r3, [r1, #4]
}
24002414:	bf00      	nop
24002416:	370c      	adds	r7, #12
24002418:	46bd      	mov	sp, r7
2400241a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400241e:	4770      	bx	lr
24002420:	58003c00 	.word	0x58003c00

24002424 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
24002424:	b580      	push	{r7, lr}
24002426:	b082      	sub	sp, #8
24002428:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
2400242a:	4b0f      	ldr	r3, [pc, #60]	; (24002468 <HAL_SYSCFG_EnableVREFBUF+0x44>)
2400242c:	681b      	ldr	r3, [r3, #0]
2400242e:	4a0e      	ldr	r2, [pc, #56]	; (24002468 <HAL_SYSCFG_EnableVREFBUF+0x44>)
24002430:	f043 0301 	orr.w	r3, r3, #1
24002434:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
24002436:	f7ff fee1 	bl	240021fc <HAL_GetTick>
2400243a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
2400243c:	e008      	b.n	24002450 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
2400243e:	f7ff fedd 	bl	240021fc <HAL_GetTick>
24002442:	4602      	mov	r2, r0
24002444:	687b      	ldr	r3, [r7, #4]
24002446:	1ad3      	subs	r3, r2, r3
24002448:	2b0a      	cmp	r3, #10
2400244a:	d901      	bls.n	24002450 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
2400244c:	2303      	movs	r3, #3
2400244e:	e006      	b.n	2400245e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
24002450:	4b05      	ldr	r3, [pc, #20]	; (24002468 <HAL_SYSCFG_EnableVREFBUF+0x44>)
24002452:	681b      	ldr	r3, [r3, #0]
24002454:	f003 0308 	and.w	r3, r3, #8
24002458:	2b00      	cmp	r3, #0
2400245a:	d0f0      	beq.n	2400243e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
2400245c:	2300      	movs	r3, #0
}
2400245e:	4618      	mov	r0, r3
24002460:	3708      	adds	r7, #8
24002462:	46bd      	mov	sp, r7
24002464:	bd80      	pop	{r7, pc}
24002466:	bf00      	nop
24002468:	58003c00 	.word	0x58003c00

2400246c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
2400246c:	b480      	push	{r7}
2400246e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
24002470:	4b05      	ldr	r3, [pc, #20]	; (24002488 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
24002472:	681b      	ldr	r3, [r3, #0]
24002474:	4a04      	ldr	r2, [pc, #16]	; (24002488 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
24002476:	f023 0301 	bic.w	r3, r3, #1
2400247a:	6013      	str	r3, [r2, #0]
}
2400247c:	bf00      	nop
2400247e:	46bd      	mov	sp, r7
24002480:	f85d 7b04 	ldr.w	r7, [sp], #4
24002484:	4770      	bx	lr
24002486:	bf00      	nop
24002488:	58003c00 	.word	0x58003c00

2400248c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
2400248c:	b480      	push	{r7}
2400248e:	b083      	sub	sp, #12
24002490:	af00      	add	r7, sp, #0
24002492:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
24002494:	4b06      	ldr	r3, [pc, #24]	; (240024b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
24002496:	685b      	ldr	r3, [r3, #4]
24002498:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
2400249c:	4904      	ldr	r1, [pc, #16]	; (240024b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
2400249e:	687b      	ldr	r3, [r7, #4]
240024a0:	4313      	orrs	r3, r2
240024a2:	604b      	str	r3, [r1, #4]
}
240024a4:	bf00      	nop
240024a6:	370c      	adds	r7, #12
240024a8:	46bd      	mov	sp, r7
240024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
240024ae:	4770      	bx	lr
240024b0:	58000400 	.word	0x58000400

240024b4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
240024b4:	b480      	push	{r7}
240024b6:	b083      	sub	sp, #12
240024b8:	af00      	add	r7, sp, #0
240024ba:	6078      	str	r0, [r7, #4]
240024bc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
240024be:	4b07      	ldr	r3, [pc, #28]	; (240024dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
240024c0:	685a      	ldr	r2, [r3, #4]
240024c2:	687b      	ldr	r3, [r7, #4]
240024c4:	43db      	mvns	r3, r3
240024c6:	401a      	ands	r2, r3
240024c8:	4904      	ldr	r1, [pc, #16]	; (240024dc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
240024ca:	683b      	ldr	r3, [r7, #0]
240024cc:	4313      	orrs	r3, r2
240024ce:	604b      	str	r3, [r1, #4]
}
240024d0:	bf00      	nop
240024d2:	370c      	adds	r7, #12
240024d4:	46bd      	mov	sp, r7
240024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
240024da:	4770      	bx	lr
240024dc:	58000400 	.word	0x58000400

240024e0 <HAL_SYSCFG_EnableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_EnableBOOST(void)
{
240024e0:	b480      	push	{r7}
240024e2:	af00      	add	r7, sp, #0
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
240024e4:	4b05      	ldr	r3, [pc, #20]	; (240024fc <HAL_SYSCFG_EnableBOOST+0x1c>)
240024e6:	685b      	ldr	r3, [r3, #4]
240024e8:	4a04      	ldr	r2, [pc, #16]	; (240024fc <HAL_SYSCFG_EnableBOOST+0x1c>)
240024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240024ee:	6053      	str	r3, [r2, #4]
}
240024f0:	bf00      	nop
240024f2:	46bd      	mov	sp, r7
240024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
240024f8:	4770      	bx	lr
240024fa:	bf00      	nop
240024fc:	58000400 	.word	0x58000400

24002500 <HAL_SYSCFG_DisableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_DisableBOOST(void)
{
24002500:	b480      	push	{r7}
24002502:	af00      	add	r7, sp, #0
 CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
24002504:	4b05      	ldr	r3, [pc, #20]	; (2400251c <HAL_SYSCFG_DisableBOOST+0x1c>)
24002506:	685b      	ldr	r3, [r3, #4]
24002508:	4a04      	ldr	r2, [pc, #16]	; (2400251c <HAL_SYSCFG_DisableBOOST+0x1c>)
2400250a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400250e:	6053      	str	r3, [r2, #4]
}
24002510:	bf00      	nop
24002512:	46bd      	mov	sp, r7
24002514:	f85d 7b04 	ldr.w	r7, [sp], #4
24002518:	4770      	bx	lr
2400251a:	bf00      	nop
2400251c:	58000400 	.word	0x58000400

24002520 <HAL_SYSCFG_CM7BootAddConfig>:
  *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
  * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
  * @retval None
  */
void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
{
24002520:	b480      	push	{r7}
24002522:	b083      	sub	sp, #12
24002524:	af00      	add	r7, sp, #0
24002526:	6078      	str	r0, [r7, #4]
24002528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
2400252a:	687b      	ldr	r3, [r7, #4]
2400252c:	2b00      	cmp	r3, #0
2400252e:	d10b      	bne.n	24002548 <HAL_SYSCFG_CM7BootAddConfig+0x28>
  {
    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BCM7_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BCM7_ADD0_Pos));
#else
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BOOT_ADD0_Pos));
24002530:	4b0e      	ldr	r3, [pc, #56]	; (2400256c <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002532:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
24002536:	b29a      	uxth	r2, r3
24002538:	683b      	ldr	r3, [r7, #0]
2400253a:	0c1b      	lsrs	r3, r3, #16
2400253c:	041b      	lsls	r3, r3, #16
2400253e:	490b      	ldr	r1, [pc, #44]	; (2400256c <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002540:	4313      	orrs	r3, r2
24002542:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM7_ADD1, (BootAddress >> 16));
#else
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
#endif /*DUAL_CORE*/
  }
}
24002546:	e00a      	b.n	2400255e <HAL_SYSCFG_CM7BootAddConfig+0x3e>
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
24002548:	4b08      	ldr	r3, [pc, #32]	; (2400256c <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
2400254a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
2400254e:	4b08      	ldr	r3, [pc, #32]	; (24002570 <HAL_SYSCFG_CM7BootAddConfig+0x50>)
24002550:	4013      	ands	r3, r2
24002552:	683a      	ldr	r2, [r7, #0]
24002554:	0c12      	lsrs	r2, r2, #16
24002556:	4905      	ldr	r1, [pc, #20]	; (2400256c <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002558:	4313      	orrs	r3, r2
2400255a:	f8c1 330c 	str.w	r3, [r1, #780]	; 0x30c
}
2400255e:	bf00      	nop
24002560:	370c      	adds	r7, #12
24002562:	46bd      	mov	sp, r7
24002564:	f85d 7b04 	ldr.w	r7, [sp], #4
24002568:	4770      	bx	lr
2400256a:	bf00      	nop
2400256c:	58000400 	.word	0x58000400
24002570:	ffff0000 	.word	0xffff0000

24002574 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
24002574:	b480      	push	{r7}
24002576:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
24002578:	4b05      	ldr	r3, [pc, #20]	; (24002590 <HAL_EnableCompensationCell+0x1c>)
2400257a:	6a1b      	ldr	r3, [r3, #32]
2400257c:	4a04      	ldr	r2, [pc, #16]	; (24002590 <HAL_EnableCompensationCell+0x1c>)
2400257e:	f043 0301 	orr.w	r3, r3, #1
24002582:	6213      	str	r3, [r2, #32]
}
24002584:	bf00      	nop
24002586:	46bd      	mov	sp, r7
24002588:	f85d 7b04 	ldr.w	r7, [sp], #4
2400258c:	4770      	bx	lr
2400258e:	bf00      	nop
24002590:	58000400 	.word	0x58000400

24002594 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
24002594:	b480      	push	{r7}
24002596:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN);
24002598:	4b05      	ldr	r3, [pc, #20]	; (240025b0 <HAL_DisableCompensationCell+0x1c>)
2400259a:	6a1b      	ldr	r3, [r3, #32]
2400259c:	4a04      	ldr	r2, [pc, #16]	; (240025b0 <HAL_DisableCompensationCell+0x1c>)
2400259e:	f023 0301 	bic.w	r3, r3, #1
240025a2:	6213      	str	r3, [r2, #32]
}
240025a4:	bf00      	nop
240025a6:	46bd      	mov	sp, r7
240025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240025ac:	4770      	bx	lr
240025ae:	bf00      	nop
240025b0:	58000400 	.word	0x58000400

240025b4 <HAL_SYSCFG_EnableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_EnableIOSpeedOptimize(void)
{
240025b4:	b480      	push	{r7}
240025b6:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
240025b8:	4b05      	ldr	r3, [pc, #20]	; (240025d0 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
240025ba:	6a1b      	ldr	r3, [r3, #32]
240025bc:	4a04      	ldr	r2, [pc, #16]	; (240025d0 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
240025be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240025c2:	6213      	str	r3, [r2, #32]
#else
  SET_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
240025c4:	bf00      	nop
240025c6:	46bd      	mov	sp, r7
240025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240025cc:	4770      	bx	lr
240025ce:	bf00      	nop
240025d0:	58000400 	.word	0x58000400

240025d4 <HAL_SYSCFG_DisableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_DisableIOSpeedOptimize(void)
{
240025d4:	b480      	push	{r7}
240025d6:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
240025d8:	4b05      	ldr	r3, [pc, #20]	; (240025f0 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
240025da:	6a1b      	ldr	r3, [r3, #32]
240025dc:	4a04      	ldr	r2, [pc, #16]	; (240025f0 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
240025de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240025e2:	6213      	str	r3, [r2, #32]
#else
  CLEAR_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
240025e4:	bf00      	nop
240025e6:	46bd      	mov	sp, r7
240025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
240025ec:	4770      	bx	lr
240025ee:	bf00      	nop
240025f0:	58000400 	.word	0x58000400

240025f4 <HAL_SYSCFG_CompensationCodeSelect>:
  *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
  *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCFG_CCCR)
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
{
240025f4:	b480      	push	{r7}
240025f6:	b083      	sub	sp, #12
240025f8:	af00      	add	r7, sp, #0
240025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
  MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));
240025fc:	4b06      	ldr	r3, [pc, #24]	; (24002618 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
240025fe:	6a1b      	ldr	r3, [r3, #32]
24002600:	f023 0202 	bic.w	r2, r3, #2
24002604:	4904      	ldr	r1, [pc, #16]	; (24002618 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
24002606:	687b      	ldr	r3, [r7, #4]
24002608:	4313      	orrs	r3, r2
2400260a:	620b      	str	r3, [r1, #32]
}
2400260c:	bf00      	nop
2400260e:	370c      	adds	r7, #12
24002610:	46bd      	mov	sp, r7
24002612:	f85d 7b04 	ldr.w	r7, [sp], #4
24002616:	4770      	bx	lr
24002618:	58000400 	.word	0x58000400

2400261c <HAL_SYSCFG_CompensationCodeConfig>:
  *         This code is applied to the I/O compensation cell when the CS bit of the
  *          SYSCFG_CMPCR is set
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
{
2400261c:	b480      	push	{r7}
2400261e:	b083      	sub	sp, #12
24002620:	af00      	add	r7, sp, #0
24002622:	6078      	str	r0, [r7, #4]
24002624:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
  MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uint32_t)(SYSCFG_NMOSCode)) );
24002626:	4b08      	ldr	r3, [pc, #32]	; (24002648 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
24002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400262a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
2400262e:	687b      	ldr	r3, [r7, #4]
24002630:	0119      	lsls	r1, r3, #4
24002632:	683b      	ldr	r3, [r7, #0]
24002634:	430b      	orrs	r3, r1
24002636:	4904      	ldr	r1, [pc, #16]	; (24002648 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
24002638:	4313      	orrs	r3, r2
2400263a:	628b      	str	r3, [r1, #40]	; 0x28
}
2400263c:	bf00      	nop
2400263e:	370c      	adds	r7, #12
24002640:	46bd      	mov	sp, r7
24002642:	f85d 7b04 	ldr.w	r7, [sp], #4
24002646:	4770      	bx	lr
24002648:	58000400 	.word	0x58000400

2400264c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
2400264c:	b480      	push	{r7}
2400264e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
24002650:	4b05      	ldr	r3, [pc, #20]	; (24002668 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
24002652:	685b      	ldr	r3, [r3, #4]
24002654:	4a04      	ldr	r2, [pc, #16]	; (24002668 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
24002656:	f043 0301 	orr.w	r3, r3, #1
2400265a:	6053      	str	r3, [r2, #4]
}
2400265c:	bf00      	nop
2400265e:	46bd      	mov	sp, r7
24002660:	f85d 7b04 	ldr.w	r7, [sp], #4
24002664:	4770      	bx	lr
24002666:	bf00      	nop
24002668:	5c001000 	.word	0x5c001000

2400266c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
2400266c:	b480      	push	{r7}
2400266e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
24002670:	4b05      	ldr	r3, [pc, #20]	; (24002688 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
24002672:	685b      	ldr	r3, [r3, #4]
24002674:	4a04      	ldr	r2, [pc, #16]	; (24002688 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
24002676:	f023 0301 	bic.w	r3, r3, #1
2400267a:	6053      	str	r3, [r2, #4]
}
2400267c:	bf00      	nop
2400267e:	46bd      	mov	sp, r7
24002680:	f85d 7b04 	ldr.w	r7, [sp], #4
24002684:	4770      	bx	lr
24002686:	bf00      	nop
24002688:	5c001000 	.word	0x5c001000

2400268c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
2400268c:	b480      	push	{r7}
2400268e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
24002690:	4b05      	ldr	r3, [pc, #20]	; (240026a8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
24002692:	685b      	ldr	r3, [r3, #4]
24002694:	4a04      	ldr	r2, [pc, #16]	; (240026a8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
24002696:	f043 0302 	orr.w	r3, r3, #2
2400269a:	6053      	str	r3, [r2, #4]
}
2400269c:	bf00      	nop
2400269e:	46bd      	mov	sp, r7
240026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
240026a4:	4770      	bx	lr
240026a6:	bf00      	nop
240026a8:	5c001000 	.word	0x5c001000

240026ac <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
240026ac:	b480      	push	{r7}
240026ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
240026b0:	4b05      	ldr	r3, [pc, #20]	; (240026c8 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
240026b2:	685b      	ldr	r3, [r3, #4]
240026b4:	4a04      	ldr	r2, [pc, #16]	; (240026c8 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
240026b6:	f023 0302 	bic.w	r3, r3, #2
240026ba:	6053      	str	r3, [r2, #4]
}
240026bc:	bf00      	nop
240026be:	46bd      	mov	sp, r7
240026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240026c4:	4770      	bx	lr
240026c6:	bf00      	nop
240026c8:	5c001000 	.word	0x5c001000

240026cc <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
240026cc:	b480      	push	{r7}
240026ce:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
240026d0:	4b05      	ldr	r3, [pc, #20]	; (240026e8 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
240026d2:	685b      	ldr	r3, [r3, #4]
240026d4:	4a04      	ldr	r2, [pc, #16]	; (240026e8 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
240026d6:	f043 0304 	orr.w	r3, r3, #4
240026da:	6053      	str	r3, [r2, #4]
}
240026dc:	bf00      	nop
240026de:	46bd      	mov	sp, r7
240026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
240026e4:	4770      	bx	lr
240026e6:	bf00      	nop
240026e8:	5c001000 	.word	0x5c001000

240026ec <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
240026ec:	b480      	push	{r7}
240026ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
240026f0:	4b05      	ldr	r3, [pc, #20]	; (24002708 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
240026f2:	685b      	ldr	r3, [r3, #4]
240026f4:	4a04      	ldr	r2, [pc, #16]	; (24002708 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
240026f6:	f023 0304 	bic.w	r3, r3, #4
240026fa:	6053      	str	r3, [r2, #4]
}
240026fc:	bf00      	nop
240026fe:	46bd      	mov	sp, r7
24002700:	f85d 7b04 	ldr.w	r7, [sp], #4
24002704:	4770      	bx	lr
24002706:	bf00      	nop
24002708:	5c001000 	.word	0x5c001000

2400270c <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
2400270c:	b480      	push	{r7}
2400270e:	b083      	sub	sp, #12
24002710:	af00      	add	r7, sp, #0
24002712:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
24002714:	4b06      	ldr	r3, [pc, #24]	; (24002730 <HAL_SetFMCMemorySwappingConfig+0x24>)
24002716:	681b      	ldr	r3, [r3, #0]
24002718:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
2400271c:	4904      	ldr	r1, [pc, #16]	; (24002730 <HAL_SetFMCMemorySwappingConfig+0x24>)
2400271e:	687b      	ldr	r3, [r7, #4]
24002720:	4313      	orrs	r3, r2
24002722:	600b      	str	r3, [r1, #0]
}
24002724:	bf00      	nop
24002726:	370c      	adds	r7, #12
24002728:	46bd      	mov	sp, r7
2400272a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400272e:	4770      	bx	lr
24002730:	52004000 	.word	0x52004000

24002734 <HAL_GetFMCMemorySwappingConfig>:
  * @brief  Get FMC Bank mapping mode.
  * @retval The FMC Bank mapping mode. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
*/
uint32_t HAL_GetFMCMemorySwappingConfig(void)
{
24002734:	b480      	push	{r7}
24002736:	af00      	add	r7, sp, #0
  return READ_BIT(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP);
24002738:	4b04      	ldr	r3, [pc, #16]	; (2400274c <HAL_GetFMCMemorySwappingConfig+0x18>)
2400273a:	681b      	ldr	r3, [r3, #0]
2400273c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
}
24002740:	4618      	mov	r0, r3
24002742:	46bd      	mov	sp, r7
24002744:	f85d 7b04 	ldr.w	r7, [sp], #4
24002748:	4770      	bx	lr
2400274a:	bf00      	nop
2400274c:	52004000 	.word	0x52004000

24002750 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
24002750:	b480      	push	{r7}
24002752:	b083      	sub	sp, #12
24002754:	af00      	add	r7, sp, #0
24002756:	6078      	str	r0, [r7, #4]
24002758:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400275a:	687b      	ldr	r3, [r7, #4]
2400275c:	095b      	lsrs	r3, r3, #5
2400275e:	015a      	lsls	r2, r3, #5
24002760:	4b2e      	ldr	r3, [pc, #184]	; (2400281c <HAL_EXTI_EdgeConfig+0xcc>)
24002762:	4413      	add	r3, r2
24002764:	6819      	ldr	r1, [r3, #0]
24002766:	687b      	ldr	r3, [r7, #4]
24002768:	f003 031f 	and.w	r3, r3, #31
2400276c:	2201      	movs	r2, #1
2400276e:	fa02 f303 	lsl.w	r3, r2, r3
24002772:	43da      	mvns	r2, r3
24002774:	687b      	ldr	r3, [r7, #4]
24002776:	095b      	lsrs	r3, r3, #5
24002778:	0158      	lsls	r0, r3, #5
2400277a:	4b28      	ldr	r3, [pc, #160]	; (2400281c <HAL_EXTI_EdgeConfig+0xcc>)
2400277c:	4403      	add	r3, r0
2400277e:	4618      	mov	r0, r3
24002780:	ea01 0302 	and.w	r3, r1, r2
24002784:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002786:	687b      	ldr	r3, [r7, #4]
24002788:	095b      	lsrs	r3, r3, #5
2400278a:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
2400278e:	015b      	lsls	r3, r3, #5
24002790:	681a      	ldr	r2, [r3, #0]
24002792:	687b      	ldr	r3, [r7, #4]
24002794:	f003 031f 	and.w	r3, r3, #31
24002798:	2101      	movs	r1, #1
2400279a:	fa01 f303 	lsl.w	r3, r1, r3
2400279e:	43db      	mvns	r3, r3
240027a0:	6879      	ldr	r1, [r7, #4]
240027a2:	0949      	lsrs	r1, r1, #5
240027a4:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
240027a8:	0149      	lsls	r1, r1, #5
240027aa:	4013      	ands	r3, r2
240027ac:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
240027ae:	683b      	ldr	r3, [r7, #0]
240027b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240027b4:	2b00      	cmp	r3, #0
240027b6:	d012      	beq.n	240027de <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240027b8:	687b      	ldr	r3, [r7, #4]
240027ba:	095b      	lsrs	r3, r3, #5
240027bc:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
240027c0:	015b      	lsls	r3, r3, #5
240027c2:	681a      	ldr	r2, [r3, #0]
240027c4:	687b      	ldr	r3, [r7, #4]
240027c6:	f003 031f 	and.w	r3, r3, #31
240027ca:	2101      	movs	r1, #1
240027cc:	fa01 f303 	lsl.w	r3, r1, r3
240027d0:	6879      	ldr	r1, [r7, #4]
240027d2:	0949      	lsrs	r1, r1, #5
240027d4:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
240027d8:	0149      	lsls	r1, r1, #5
240027da:	4313      	orrs	r3, r2
240027dc:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
240027de:	683b      	ldr	r3, [r7, #0]
240027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240027e4:	2b00      	cmp	r3, #0
240027e6:	d013      	beq.n	24002810 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240027e8:	687b      	ldr	r3, [r7, #4]
240027ea:	095b      	lsrs	r3, r3, #5
240027ec:	015a      	lsls	r2, r3, #5
240027ee:	4b0b      	ldr	r3, [pc, #44]	; (2400281c <HAL_EXTI_EdgeConfig+0xcc>)
240027f0:	4413      	add	r3, r2
240027f2:	6819      	ldr	r1, [r3, #0]
240027f4:	687b      	ldr	r3, [r7, #4]
240027f6:	f003 031f 	and.w	r3, r3, #31
240027fa:	2201      	movs	r2, #1
240027fc:	409a      	lsls	r2, r3
240027fe:	687b      	ldr	r3, [r7, #4]
24002800:	095b      	lsrs	r3, r3, #5
24002802:	0158      	lsls	r0, r3, #5
24002804:	4b05      	ldr	r3, [pc, #20]	; (2400281c <HAL_EXTI_EdgeConfig+0xcc>)
24002806:	4403      	add	r3, r0
24002808:	4618      	mov	r0, r3
2400280a:	ea41 0302 	orr.w	r3, r1, r2
2400280e:	6003      	str	r3, [r0, #0]
  }
}
24002810:	bf00      	nop
24002812:	370c      	adds	r7, #12
24002814:	46bd      	mov	sp, r7
24002816:	f85d 7b04 	ldr.w	r7, [sp], #4
2400281a:	4770      	bx	lr
2400281c:	58000004 	.word	0x58000004

24002820 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
24002820:	b480      	push	{r7}
24002822:	b083      	sub	sp, #12
24002824:	af00      	add	r7, sp, #0
24002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002828:	687b      	ldr	r3, [r7, #4]
2400282a:	095b      	lsrs	r3, r3, #5
2400282c:	015a      	lsls	r2, r3, #5
2400282e:	4b0b      	ldr	r3, [pc, #44]	; (2400285c <HAL_EXTI_GenerateSWInterrupt+0x3c>)
24002830:	4413      	add	r3, r2
24002832:	6819      	ldr	r1, [r3, #0]
24002834:	687b      	ldr	r3, [r7, #4]
24002836:	f003 031f 	and.w	r3, r3, #31
2400283a:	2201      	movs	r2, #1
2400283c:	409a      	lsls	r2, r3
2400283e:	687b      	ldr	r3, [r7, #4]
24002840:	095b      	lsrs	r3, r3, #5
24002842:	0158      	lsls	r0, r3, #5
24002844:	4b05      	ldr	r3, [pc, #20]	; (2400285c <HAL_EXTI_GenerateSWInterrupt+0x3c>)
24002846:	4403      	add	r3, r0
24002848:	4618      	mov	r0, r3
2400284a:	ea41 0302 	orr.w	r3, r1, r2
2400284e:	6003      	str	r3, [r0, #0]
}
24002850:	bf00      	nop
24002852:	370c      	adds	r7, #12
24002854:	46bd      	mov	sp, r7
24002856:	f85d 7b04 	ldr.w	r7, [sp], #4
2400285a:	4770      	bx	lr
2400285c:	58000008 	.word	0x58000008

24002860 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
24002860:	b480      	push	{r7}
24002862:	b083      	sub	sp, #12
24002864:	af00      	add	r7, sp, #0
24002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002868:	687b      	ldr	r3, [r7, #4]
2400286a:	f003 021f 	and.w	r2, r3, #31
2400286e:	687b      	ldr	r3, [r7, #4]
24002870:	095b      	lsrs	r3, r3, #5
24002872:	0119      	lsls	r1, r3, #4
24002874:	4b05      	ldr	r3, [pc, #20]	; (2400288c <HAL_EXTI_D1_ClearFlag+0x2c>)
24002876:	440b      	add	r3, r1
24002878:	4619      	mov	r1, r3
2400287a:	2301      	movs	r3, #1
2400287c:	4093      	lsls	r3, r2
2400287e:	600b      	str	r3, [r1, #0]

}
24002880:	bf00      	nop
24002882:	370c      	adds	r7, #12
24002884:	46bd      	mov	sp, r7
24002886:	f85d 7b04 	ldr.w	r7, [sp], #4
2400288a:	4770      	bx	lr
2400288c:	58000088 	.word	0x58000088

24002890 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
24002890:	b480      	push	{r7}
24002892:	b085      	sub	sp, #20
24002894:	af00      	add	r7, sp, #0
24002896:	60f8      	str	r0, [r7, #12]
24002898:	60b9      	str	r1, [r7, #8]
2400289a:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
2400289c:	68bb      	ldr	r3, [r7, #8]
2400289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240028a2:	2b00      	cmp	r3, #0
240028a4:	d02d      	beq.n	24002902 <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
240028a6:	687b      	ldr	r3, [r7, #4]
240028a8:	2b00      	cmp	r3, #0
240028aa:	d116      	bne.n	240028da <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
240028ac:	68fb      	ldr	r3, [r7, #12]
240028ae:	095a      	lsrs	r2, r3, #5
240028b0:	4b30      	ldr	r3, [pc, #192]	; (24002974 <HAL_EXTI_D1_EventInputConfig+0xe4>)
240028b2:	4413      	add	r3, r2
240028b4:	011b      	lsls	r3, r3, #4
240028b6:	6819      	ldr	r1, [r3, #0]
240028b8:	68fb      	ldr	r3, [r7, #12]
240028ba:	f003 031f 	and.w	r3, r3, #31
240028be:	2201      	movs	r2, #1
240028c0:	fa02 f303 	lsl.w	r3, r2, r3
240028c4:	43da      	mvns	r2, r3
240028c6:	68fb      	ldr	r3, [r7, #12]
240028c8:	0958      	lsrs	r0, r3, #5
240028ca:	4b2a      	ldr	r3, [pc, #168]	; (24002974 <HAL_EXTI_D1_EventInputConfig+0xe4>)
240028cc:	4403      	add	r3, r0
240028ce:	011b      	lsls	r3, r3, #4
240028d0:	4618      	mov	r0, r3
240028d2:	ea01 0302 	and.w	r3, r1, r2
240028d6:	6003      	str	r3, [r0, #0]
240028d8:	e013      	b.n	24002902 <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240028da:	68fb      	ldr	r3, [r7, #12]
240028dc:	095a      	lsrs	r2, r3, #5
240028de:	4b25      	ldr	r3, [pc, #148]	; (24002974 <HAL_EXTI_D1_EventInputConfig+0xe4>)
240028e0:	4413      	add	r3, r2
240028e2:	011b      	lsls	r3, r3, #4
240028e4:	6819      	ldr	r1, [r3, #0]
240028e6:	68fb      	ldr	r3, [r7, #12]
240028e8:	f003 031f 	and.w	r3, r3, #31
240028ec:	2201      	movs	r2, #1
240028ee:	409a      	lsls	r2, r3
240028f0:	68fb      	ldr	r3, [r7, #12]
240028f2:	0958      	lsrs	r0, r3, #5
240028f4:	4b1f      	ldr	r3, [pc, #124]	; (24002974 <HAL_EXTI_D1_EventInputConfig+0xe4>)
240028f6:	4403      	add	r3, r0
240028f8:	011b      	lsls	r3, r3, #4
240028fa:	4618      	mov	r0, r3
240028fc:	ea41 0302 	orr.w	r3, r1, r2
24002900:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
24002902:	68bb      	ldr	r3, [r7, #8]
24002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24002908:	2b00      	cmp	r3, #0
2400290a:	d02d      	beq.n	24002968 <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
2400290c:	687b      	ldr	r3, [r7, #4]
2400290e:	2b00      	cmp	r3, #0
24002910:	d116      	bne.n	24002940 <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002912:	68fb      	ldr	r3, [r7, #12]
24002914:	095b      	lsrs	r3, r3, #5
24002916:	011a      	lsls	r2, r3, #4
24002918:	4b17      	ldr	r3, [pc, #92]	; (24002978 <HAL_EXTI_D1_EventInputConfig+0xe8>)
2400291a:	4413      	add	r3, r2
2400291c:	6819      	ldr	r1, [r3, #0]
2400291e:	68fb      	ldr	r3, [r7, #12]
24002920:	f003 031f 	and.w	r3, r3, #31
24002924:	2201      	movs	r2, #1
24002926:	fa02 f303 	lsl.w	r3, r2, r3
2400292a:	43da      	mvns	r2, r3
2400292c:	68fb      	ldr	r3, [r7, #12]
2400292e:	095b      	lsrs	r3, r3, #5
24002930:	0118      	lsls	r0, r3, #4
24002932:	4b11      	ldr	r3, [pc, #68]	; (24002978 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002934:	4403      	add	r3, r0
24002936:	4618      	mov	r0, r3
24002938:	ea01 0302 	and.w	r3, r1, r2
2400293c:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
2400293e:	e013      	b.n	24002968 <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002940:	68fb      	ldr	r3, [r7, #12]
24002942:	095b      	lsrs	r3, r3, #5
24002944:	011a      	lsls	r2, r3, #4
24002946:	4b0c      	ldr	r3, [pc, #48]	; (24002978 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002948:	4413      	add	r3, r2
2400294a:	6819      	ldr	r1, [r3, #0]
2400294c:	68fb      	ldr	r3, [r7, #12]
2400294e:	f003 031f 	and.w	r3, r3, #31
24002952:	2201      	movs	r2, #1
24002954:	409a      	lsls	r2, r3
24002956:	68fb      	ldr	r3, [r7, #12]
24002958:	095b      	lsrs	r3, r3, #5
2400295a:	0118      	lsls	r0, r3, #4
2400295c:	4b06      	ldr	r3, [pc, #24]	; (24002978 <HAL_EXTI_D1_EventInputConfig+0xe8>)
2400295e:	4403      	add	r3, r0
24002960:	4618      	mov	r0, r3
24002962:	ea41 0302 	orr.w	r3, r1, r2
24002966:	6003      	str	r3, [r0, #0]
}
24002968:	bf00      	nop
2400296a:	3714      	adds	r7, #20
2400296c:	46bd      	mov	sp, r7
2400296e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002972:	4770      	bx	lr
24002974:	05800008 	.word	0x05800008
24002978:	58000084 	.word	0x58000084

2400297c <HAL_EXTI_D3_EventInputConfig>:
  *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
  *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
  * @retval None
  */
void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc  )
{
2400297c:	b480      	push	{r7}
2400297e:	b087      	sub	sp, #28
24002980:	af00      	add	r7, sp, #0
24002982:	60f8      	str	r0, [r7, #12]
24002984:	60b9      	str	r1, [r7, #8]
24002986:	607a      	str	r2, [r7, #4]

  /* Check the parameter */
  assert_param(IS_EXTI_D3_LINE(EXTI_Line));
  assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));

  if( EXTI_LineCmd == 0UL)
24002988:	68bb      	ldr	r3, [r7, #8]
2400298a:	2b00      	cmp	r3, #0
2400298c:	d116      	bne.n	240029bc <HAL_EXTI_D3_EventInputConfig+0x40>
  {
    /* Clear EXTI line configuration */
    CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
2400298e:	68fb      	ldr	r3, [r7, #12]
24002990:	095b      	lsrs	r3, r3, #5
24002992:	015a      	lsls	r2, r3, #5
24002994:	4b2a      	ldr	r3, [pc, #168]	; (24002a40 <HAL_EXTI_D3_EventInputConfig+0xc4>)
24002996:	4413      	add	r3, r2
24002998:	6819      	ldr	r1, [r3, #0]
2400299a:	68fb      	ldr	r3, [r7, #12]
2400299c:	f003 031f 	and.w	r3, r3, #31
240029a0:	2201      	movs	r2, #1
240029a2:	fa02 f303 	lsl.w	r3, r2, r3
240029a6:	43da      	mvns	r2, r3
240029a8:	68fb      	ldr	r3, [r7, #12]
240029aa:	095b      	lsrs	r3, r3, #5
240029ac:	0158      	lsls	r0, r3, #5
240029ae:	4b24      	ldr	r3, [pc, #144]	; (24002a40 <HAL_EXTI_D3_EventInputConfig+0xc4>)
240029b0:	4403      	add	r3, r0
240029b2:	4618      	mov	r0, r3
240029b4:	ea01 0302 	and.w	r3, r1, r2
240029b8:	6003      	str	r3, [r0, #0]
240029ba:	e013      	b.n	240029e4 <HAL_EXTI_D3_EventInputConfig+0x68>
  }
  else
  {
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240029bc:	68fb      	ldr	r3, [r7, #12]
240029be:	095b      	lsrs	r3, r3, #5
240029c0:	015a      	lsls	r2, r3, #5
240029c2:	4b1f      	ldr	r3, [pc, #124]	; (24002a40 <HAL_EXTI_D3_EventInputConfig+0xc4>)
240029c4:	4413      	add	r3, r2
240029c6:	6819      	ldr	r1, [r3, #0]
240029c8:	68fb      	ldr	r3, [r7, #12]
240029ca:	f003 031f 	and.w	r3, r3, #31
240029ce:	2201      	movs	r2, #1
240029d0:	409a      	lsls	r2, r3
240029d2:	68fb      	ldr	r3, [r7, #12]
240029d4:	095b      	lsrs	r3, r3, #5
240029d6:	0158      	lsls	r0, r3, #5
240029d8:	4b19      	ldr	r3, [pc, #100]	; (24002a40 <HAL_EXTI_D3_EventInputConfig+0xc4>)
240029da:	4403      	add	r3, r0
240029dc:	4618      	mov	r0, r3
240029de:	ea41 0302 	orr.w	r3, r1, r2
240029e2:	6003      	str	r3, [r0, #0]
  }

  if(((EXTI_Line>>4)%2UL) == 0UL)
240029e4:	68fb      	ldr	r3, [r7, #12]
240029e6:	091b      	lsrs	r3, r3, #4
240029e8:	f003 0301 	and.w	r3, r3, #1
240029ec:	2b00      	cmp	r3, #0
240029ee:	d106      	bne.n	240029fe <HAL_EXTI_D3_EventInputConfig+0x82>
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20UL));
240029f0:	68fb      	ldr	r3, [r7, #12]
240029f2:	095b      	lsrs	r3, r3, #5
240029f4:	015a      	lsls	r2, r3, #5
240029f6:	4b13      	ldr	r3, [pc, #76]	; (24002a44 <HAL_EXTI_D3_EventInputConfig+0xc8>)
240029f8:	4413      	add	r3, r2
240029fa:	617b      	str	r3, [r7, #20]
240029fc:	e005      	b.n	24002a0a <HAL_EXTI_D3_EventInputConfig+0x8e>
  }
  else
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
240029fe:	68fb      	ldr	r3, [r7, #12]
24002a00:	095b      	lsrs	r3, r3, #5
24002a02:	015a      	lsls	r2, r3, #5
24002a04:	4b10      	ldr	r3, [pc, #64]	; (24002a48 <HAL_EXTI_D3_EventInputConfig+0xcc>)
24002a06:	4413      	add	r3, r2
24002a08:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(*pRegv, (uint32_t)(3UL << ((EXTI_Line*2UL) & 0x1FUL)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2UL) & 0x1FUL)));
24002a0a:	697b      	ldr	r3, [r7, #20]
24002a0c:	681a      	ldr	r2, [r3, #0]
24002a0e:	68fb      	ldr	r3, [r7, #12]
24002a10:	005b      	lsls	r3, r3, #1
24002a12:	f003 031e 	and.w	r3, r3, #30
24002a16:	2103      	movs	r1, #3
24002a18:	fa01 f303 	lsl.w	r3, r1, r3
24002a1c:	43db      	mvns	r3, r3
24002a1e:	401a      	ands	r2, r3
24002a20:	68fb      	ldr	r3, [r7, #12]
24002a22:	005b      	lsls	r3, r3, #1
24002a24:	f003 031e 	and.w	r3, r3, #30
24002a28:	6879      	ldr	r1, [r7, #4]
24002a2a:	fa01 f303 	lsl.w	r3, r1, r3
24002a2e:	431a      	orrs	r2, r3
24002a30:	697b      	ldr	r3, [r7, #20]
24002a32:	601a      	str	r2, [r3, #0]

}
24002a34:	bf00      	nop
24002a36:	371c      	adds	r7, #28
24002a38:	46bd      	mov	sp, r7
24002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
24002a3e:	4770      	bx	lr
24002a40:	5800000c 	.word	0x5800000c
24002a44:	58000010 	.word	0x58000010
24002a48:	58000014 	.word	0x58000014

24002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24002a4c:	b480      	push	{r7}
24002a4e:	b085      	sub	sp, #20
24002a50:	af00      	add	r7, sp, #0
24002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24002a54:	687b      	ldr	r3, [r7, #4]
24002a56:	f003 0307 	and.w	r3, r3, #7
24002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24002a5c:	4b0b      	ldr	r3, [pc, #44]	; (24002a8c <__NVIC_SetPriorityGrouping+0x40>)
24002a5e:	68db      	ldr	r3, [r3, #12]
24002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24002a62:	68ba      	ldr	r2, [r7, #8]
24002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24002a68:	4013      	ands	r3, r2
24002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24002a6c:	68fb      	ldr	r3, [r7, #12]
24002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24002a70:	68bb      	ldr	r3, [r7, #8]
24002a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24002a74:	4b06      	ldr	r3, [pc, #24]	; (24002a90 <__NVIC_SetPriorityGrouping+0x44>)
24002a76:	4313      	orrs	r3, r2
24002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24002a7a:	4a04      	ldr	r2, [pc, #16]	; (24002a8c <__NVIC_SetPriorityGrouping+0x40>)
24002a7c:	68bb      	ldr	r3, [r7, #8]
24002a7e:	60d3      	str	r3, [r2, #12]
}
24002a80:	bf00      	nop
24002a82:	3714      	adds	r7, #20
24002a84:	46bd      	mov	sp, r7
24002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
24002a8a:	4770      	bx	lr
24002a8c:	e000ed00 	.word	0xe000ed00
24002a90:	05fa0000 	.word	0x05fa0000

24002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24002a94:	b480      	push	{r7}
24002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24002a98:	4b04      	ldr	r3, [pc, #16]	; (24002aac <__NVIC_GetPriorityGrouping+0x18>)
24002a9a:	68db      	ldr	r3, [r3, #12]
24002a9c:	0a1b      	lsrs	r3, r3, #8
24002a9e:	f003 0307 	and.w	r3, r3, #7
}
24002aa2:	4618      	mov	r0, r3
24002aa4:	46bd      	mov	sp, r7
24002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
24002aaa:	4770      	bx	lr
24002aac:	e000ed00 	.word	0xe000ed00

24002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
24002ab0:	b480      	push	{r7}
24002ab2:	b083      	sub	sp, #12
24002ab4:	af00      	add	r7, sp, #0
24002ab6:	4603      	mov	r3, r0
24002ab8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002abe:	2b00      	cmp	r3, #0
24002ac0:	db0b      	blt.n	24002ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002ac2:	88fb      	ldrh	r3, [r7, #6]
24002ac4:	f003 021f 	and.w	r2, r3, #31
24002ac8:	4907      	ldr	r1, [pc, #28]	; (24002ae8 <__NVIC_EnableIRQ+0x38>)
24002aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002ace:	095b      	lsrs	r3, r3, #5
24002ad0:	2001      	movs	r0, #1
24002ad2:	fa00 f202 	lsl.w	r2, r0, r2
24002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
24002ada:	bf00      	nop
24002adc:	370c      	adds	r7, #12
24002ade:	46bd      	mov	sp, r7
24002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ae4:	4770      	bx	lr
24002ae6:	bf00      	nop
24002ae8:	e000e100 	.word	0xe000e100

24002aec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
24002aec:	b480      	push	{r7}
24002aee:	b083      	sub	sp, #12
24002af0:	af00      	add	r7, sp, #0
24002af2:	4603      	mov	r3, r0
24002af4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002afa:	2b00      	cmp	r3, #0
24002afc:	db12      	blt.n	24002b24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002afe:	88fb      	ldrh	r3, [r7, #6]
24002b00:	f003 021f 	and.w	r2, r3, #31
24002b04:	490a      	ldr	r1, [pc, #40]	; (24002b30 <__NVIC_DisableIRQ+0x44>)
24002b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b0a:	095b      	lsrs	r3, r3, #5
24002b0c:	2001      	movs	r0, #1
24002b0e:	fa00 f202 	lsl.w	r2, r0, r2
24002b12:	3320      	adds	r3, #32
24002b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24002b18:	f3bf 8f4f 	dsb	sy
}
24002b1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24002b1e:	f3bf 8f6f 	isb	sy
}
24002b22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
24002b24:	bf00      	nop
24002b26:	370c      	adds	r7, #12
24002b28:	46bd      	mov	sp, r7
24002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b2e:	4770      	bx	lr
24002b30:	e000e100 	.word	0xe000e100

24002b34 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
24002b34:	b480      	push	{r7}
24002b36:	b083      	sub	sp, #12
24002b38:	af00      	add	r7, sp, #0
24002b3a:	4603      	mov	r3, r0
24002b3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b42:	2b00      	cmp	r3, #0
24002b44:	db0e      	blt.n	24002b64 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24002b46:	4a0b      	ldr	r2, [pc, #44]	; (24002b74 <__NVIC_GetPendingIRQ+0x40>)
24002b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b4c:	095b      	lsrs	r3, r3, #5
24002b4e:	3340      	adds	r3, #64	; 0x40
24002b50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002b54:	88fb      	ldrh	r3, [r7, #6]
24002b56:	f003 031f 	and.w	r3, r3, #31
24002b5a:	fa22 f303 	lsr.w	r3, r2, r3
24002b5e:	f003 0301 	and.w	r3, r3, #1
24002b62:	e000      	b.n	24002b66 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
24002b64:	2300      	movs	r3, #0
  }
}
24002b66:	4618      	mov	r0, r3
24002b68:	370c      	adds	r7, #12
24002b6a:	46bd      	mov	sp, r7
24002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b70:	4770      	bx	lr
24002b72:	bf00      	nop
24002b74:	e000e100 	.word	0xe000e100

24002b78 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
24002b78:	b480      	push	{r7}
24002b7a:	b083      	sub	sp, #12
24002b7c:	af00      	add	r7, sp, #0
24002b7e:	4603      	mov	r3, r0
24002b80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b86:	2b00      	cmp	r3, #0
24002b88:	db0c      	blt.n	24002ba4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002b8a:	88fb      	ldrh	r3, [r7, #6]
24002b8c:	f003 021f 	and.w	r2, r3, #31
24002b90:	4907      	ldr	r1, [pc, #28]	; (24002bb0 <__NVIC_SetPendingIRQ+0x38>)
24002b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b96:	095b      	lsrs	r3, r3, #5
24002b98:	2001      	movs	r0, #1
24002b9a:	fa00 f202 	lsl.w	r2, r0, r2
24002b9e:	3340      	adds	r3, #64	; 0x40
24002ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
24002ba4:	bf00      	nop
24002ba6:	370c      	adds	r7, #12
24002ba8:	46bd      	mov	sp, r7
24002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
24002bae:	4770      	bx	lr
24002bb0:	e000e100 	.word	0xe000e100

24002bb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24002bb4:	b480      	push	{r7}
24002bb6:	b083      	sub	sp, #12
24002bb8:	af00      	add	r7, sp, #0
24002bba:	4603      	mov	r3, r0
24002bbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bc2:	2b00      	cmp	r3, #0
24002bc4:	db0c      	blt.n	24002be0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002bc6:	88fb      	ldrh	r3, [r7, #6]
24002bc8:	f003 021f 	and.w	r2, r3, #31
24002bcc:	4907      	ldr	r1, [pc, #28]	; (24002bec <__NVIC_ClearPendingIRQ+0x38>)
24002bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bd2:	095b      	lsrs	r3, r3, #5
24002bd4:	2001      	movs	r0, #1
24002bd6:	fa00 f202 	lsl.w	r2, r0, r2
24002bda:	3360      	adds	r3, #96	; 0x60
24002bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
24002be0:	bf00      	nop
24002be2:	370c      	adds	r7, #12
24002be4:	46bd      	mov	sp, r7
24002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
24002bea:	4770      	bx	lr
24002bec:	e000e100 	.word	0xe000e100

24002bf0 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
24002bf0:	b480      	push	{r7}
24002bf2:	b083      	sub	sp, #12
24002bf4:	af00      	add	r7, sp, #0
24002bf6:	4603      	mov	r3, r0
24002bf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bfe:	2b00      	cmp	r3, #0
24002c00:	db0e      	blt.n	24002c20 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24002c02:	4a0b      	ldr	r2, [pc, #44]	; (24002c30 <__NVIC_GetActive+0x40>)
24002c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c08:	095b      	lsrs	r3, r3, #5
24002c0a:	3380      	adds	r3, #128	; 0x80
24002c0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002c10:	88fb      	ldrh	r3, [r7, #6]
24002c12:	f003 031f 	and.w	r3, r3, #31
24002c16:	fa22 f303 	lsr.w	r3, r2, r3
24002c1a:	f003 0301 	and.w	r3, r3, #1
24002c1e:	e000      	b.n	24002c22 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
24002c20:	2300      	movs	r3, #0
  }
}
24002c22:	4618      	mov	r0, r3
24002c24:	370c      	adds	r7, #12
24002c26:	46bd      	mov	sp, r7
24002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c2c:	4770      	bx	lr
24002c2e:	bf00      	nop
24002c30:	e000e100 	.word	0xe000e100

24002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
24002c34:	b480      	push	{r7}
24002c36:	b083      	sub	sp, #12
24002c38:	af00      	add	r7, sp, #0
24002c3a:	4603      	mov	r3, r0
24002c3c:	6039      	str	r1, [r7, #0]
24002c3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c44:	2b00      	cmp	r3, #0
24002c46:	db0a      	blt.n	24002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002c48:	683b      	ldr	r3, [r7, #0]
24002c4a:	b2da      	uxtb	r2, r3
24002c4c:	490c      	ldr	r1, [pc, #48]	; (24002c80 <__NVIC_SetPriority+0x4c>)
24002c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c52:	0112      	lsls	r2, r2, #4
24002c54:	b2d2      	uxtb	r2, r2
24002c56:	440b      	add	r3, r1
24002c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
24002c5c:	e00a      	b.n	24002c74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002c5e:	683b      	ldr	r3, [r7, #0]
24002c60:	b2da      	uxtb	r2, r3
24002c62:	4908      	ldr	r1, [pc, #32]	; (24002c84 <__NVIC_SetPriority+0x50>)
24002c64:	88fb      	ldrh	r3, [r7, #6]
24002c66:	f003 030f 	and.w	r3, r3, #15
24002c6a:	3b04      	subs	r3, #4
24002c6c:	0112      	lsls	r2, r2, #4
24002c6e:	b2d2      	uxtb	r2, r2
24002c70:	440b      	add	r3, r1
24002c72:	761a      	strb	r2, [r3, #24]
}
24002c74:	bf00      	nop
24002c76:	370c      	adds	r7, #12
24002c78:	46bd      	mov	sp, r7
24002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c7e:	4770      	bx	lr
24002c80:	e000e100 	.word	0xe000e100
24002c84:	e000ed00 	.word	0xe000ed00

24002c88 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
24002c88:	b480      	push	{r7}
24002c8a:	b083      	sub	sp, #12
24002c8c:	af00      	add	r7, sp, #0
24002c8e:	4603      	mov	r3, r0
24002c90:	80fb      	strh	r3, [r7, #6]

  if ((int32_t)(IRQn) >= 0)
24002c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c96:	2b00      	cmp	r3, #0
24002c98:	db09      	blt.n	24002cae <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
24002c9a:	4a0d      	ldr	r2, [pc, #52]	; (24002cd0 <__NVIC_GetPriority+0x48>)
24002c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002ca0:	4413      	add	r3, r2
24002ca2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
24002ca6:	b2db      	uxtb	r3, r3
24002ca8:	091b      	lsrs	r3, r3, #4
24002caa:	b2db      	uxtb	r3, r3
24002cac:	e009      	b.n	24002cc2 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
24002cae:	4a09      	ldr	r2, [pc, #36]	; (24002cd4 <__NVIC_GetPriority+0x4c>)
24002cb0:	88fb      	ldrh	r3, [r7, #6]
24002cb2:	f003 030f 	and.w	r3, r3, #15
24002cb6:	3b04      	subs	r3, #4
24002cb8:	4413      	add	r3, r2
24002cba:	7e1b      	ldrb	r3, [r3, #24]
24002cbc:	b2db      	uxtb	r3, r3
24002cbe:	091b      	lsrs	r3, r3, #4
24002cc0:	b2db      	uxtb	r3, r3
  }
}
24002cc2:	4618      	mov	r0, r3
24002cc4:	370c      	adds	r7, #12
24002cc6:	46bd      	mov	sp, r7
24002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ccc:	4770      	bx	lr
24002cce:	bf00      	nop
24002cd0:	e000e100 	.word	0xe000e100
24002cd4:	e000ed00 	.word	0xe000ed00

24002cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24002cd8:	b480      	push	{r7}
24002cda:	b089      	sub	sp, #36	; 0x24
24002cdc:	af00      	add	r7, sp, #0
24002cde:	60f8      	str	r0, [r7, #12]
24002ce0:	60b9      	str	r1, [r7, #8]
24002ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24002ce4:	68fb      	ldr	r3, [r7, #12]
24002ce6:	f003 0307 	and.w	r3, r3, #7
24002cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002cec:	69fb      	ldr	r3, [r7, #28]
24002cee:	f1c3 0307 	rsb	r3, r3, #7
24002cf2:	2b04      	cmp	r3, #4
24002cf4:	bf28      	it	cs
24002cf6:	2304      	movcs	r3, #4
24002cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002cfa:	69fb      	ldr	r3, [r7, #28]
24002cfc:	3304      	adds	r3, #4
24002cfe:	2b06      	cmp	r3, #6
24002d00:	d902      	bls.n	24002d08 <NVIC_EncodePriority+0x30>
24002d02:	69fb      	ldr	r3, [r7, #28]
24002d04:	3b03      	subs	r3, #3
24002d06:	e000      	b.n	24002d0a <NVIC_EncodePriority+0x32>
24002d08:	2300      	movs	r3, #0
24002d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002d0c:	f04f 32ff 	mov.w	r2, #4294967295
24002d10:	69bb      	ldr	r3, [r7, #24]
24002d12:	fa02 f303 	lsl.w	r3, r2, r3
24002d16:	43da      	mvns	r2, r3
24002d18:	68bb      	ldr	r3, [r7, #8]
24002d1a:	401a      	ands	r2, r3
24002d1c:	697b      	ldr	r3, [r7, #20]
24002d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24002d20:	f04f 31ff 	mov.w	r1, #4294967295
24002d24:	697b      	ldr	r3, [r7, #20]
24002d26:	fa01 f303 	lsl.w	r3, r1, r3
24002d2a:	43d9      	mvns	r1, r3
24002d2c:	687b      	ldr	r3, [r7, #4]
24002d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002d30:	4313      	orrs	r3, r2
         );
}
24002d32:	4618      	mov	r0, r3
24002d34:	3724      	adds	r7, #36	; 0x24
24002d36:	46bd      	mov	sp, r7
24002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
24002d3c:	4770      	bx	lr

24002d3e <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
24002d3e:	b480      	push	{r7}
24002d40:	b089      	sub	sp, #36	; 0x24
24002d42:	af00      	add	r7, sp, #0
24002d44:	60f8      	str	r0, [r7, #12]
24002d46:	60b9      	str	r1, [r7, #8]
24002d48:	607a      	str	r2, [r7, #4]
24002d4a:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24002d4c:	68bb      	ldr	r3, [r7, #8]
24002d4e:	f003 0307 	and.w	r3, r3, #7
24002d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002d54:	69fb      	ldr	r3, [r7, #28]
24002d56:	f1c3 0307 	rsb	r3, r3, #7
24002d5a:	2b04      	cmp	r3, #4
24002d5c:	bf28      	it	cs
24002d5e:	2304      	movcs	r3, #4
24002d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002d62:	69fb      	ldr	r3, [r7, #28]
24002d64:	3304      	adds	r3, #4
24002d66:	2b06      	cmp	r3, #6
24002d68:	d902      	bls.n	24002d70 <NVIC_DecodePriority+0x32>
24002d6a:	69fb      	ldr	r3, [r7, #28]
24002d6c:	3b03      	subs	r3, #3
24002d6e:	e000      	b.n	24002d72 <NVIC_DecodePriority+0x34>
24002d70:	2300      	movs	r3, #0
24002d72:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
24002d74:	68fa      	ldr	r2, [r7, #12]
24002d76:	697b      	ldr	r3, [r7, #20]
24002d78:	40da      	lsrs	r2, r3
24002d7a:	f04f 31ff 	mov.w	r1, #4294967295
24002d7e:	69bb      	ldr	r3, [r7, #24]
24002d80:	fa01 f303 	lsl.w	r3, r1, r3
24002d84:	43db      	mvns	r3, r3
24002d86:	401a      	ands	r2, r3
24002d88:	687b      	ldr	r3, [r7, #4]
24002d8a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
24002d8c:	f04f 32ff 	mov.w	r2, #4294967295
24002d90:	697b      	ldr	r3, [r7, #20]
24002d92:	fa02 f303 	lsl.w	r3, r2, r3
24002d96:	43da      	mvns	r2, r3
24002d98:	68fb      	ldr	r3, [r7, #12]
24002d9a:	401a      	ands	r2, r3
24002d9c:	683b      	ldr	r3, [r7, #0]
24002d9e:	601a      	str	r2, [r3, #0]
}
24002da0:	bf00      	nop
24002da2:	3724      	adds	r7, #36	; 0x24
24002da4:	46bd      	mov	sp, r7
24002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
24002daa:	4770      	bx	lr

24002dac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24002dac:	b480      	push	{r7}
24002dae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24002db0:	f3bf 8f4f 	dsb	sy
}
24002db4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24002db6:	4b06      	ldr	r3, [pc, #24]	; (24002dd0 <__NVIC_SystemReset+0x24>)
24002db8:	68db      	ldr	r3, [r3, #12]
24002dba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24002dbe:	4904      	ldr	r1, [pc, #16]	; (24002dd0 <__NVIC_SystemReset+0x24>)
24002dc0:	4b04      	ldr	r3, [pc, #16]	; (24002dd4 <__NVIC_SystemReset+0x28>)
24002dc2:	4313      	orrs	r3, r2
24002dc4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
24002dc6:	f3bf 8f4f 	dsb	sy
}
24002dca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24002dcc:	bf00      	nop
24002dce:	e7fd      	b.n	24002dcc <__NVIC_SystemReset+0x20>
24002dd0:	e000ed00 	.word	0xe000ed00
24002dd4:	05fa0004 	.word	0x05fa0004

24002dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24002dd8:	b580      	push	{r7, lr}
24002dda:	b082      	sub	sp, #8
24002ddc:	af00      	add	r7, sp, #0
24002dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24002de0:	687b      	ldr	r3, [r7, #4]
24002de2:	3b01      	subs	r3, #1
24002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24002de8:	d301      	bcc.n	24002dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24002dea:	2301      	movs	r3, #1
24002dec:	e00f      	b.n	24002e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24002dee:	4a0a      	ldr	r2, [pc, #40]	; (24002e18 <SysTick_Config+0x40>)
24002df0:	687b      	ldr	r3, [r7, #4]
24002df2:	3b01      	subs	r3, #1
24002df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24002df6:	210f      	movs	r1, #15
24002df8:	f04f 30ff 	mov.w	r0, #4294967295
24002dfc:	f7ff ff1a 	bl	24002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24002e00:	4b05      	ldr	r3, [pc, #20]	; (24002e18 <SysTick_Config+0x40>)
24002e02:	2200      	movs	r2, #0
24002e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24002e06:	4b04      	ldr	r3, [pc, #16]	; (24002e18 <SysTick_Config+0x40>)
24002e08:	2207      	movs	r2, #7
24002e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24002e0c:	2300      	movs	r3, #0
}
24002e0e:	4618      	mov	r0, r3
24002e10:	3708      	adds	r7, #8
24002e12:	46bd      	mov	sp, r7
24002e14:	bd80      	pop	{r7, pc}
24002e16:	bf00      	nop
24002e18:	e000e010 	.word	0xe000e010

24002e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24002e1c:	b580      	push	{r7, lr}
24002e1e:	b082      	sub	sp, #8
24002e20:	af00      	add	r7, sp, #0
24002e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24002e24:	6878      	ldr	r0, [r7, #4]
24002e26:	f7ff fe11 	bl	24002a4c <__NVIC_SetPriorityGrouping>
}
24002e2a:	bf00      	nop
24002e2c:	3708      	adds	r7, #8
24002e2e:	46bd      	mov	sp, r7
24002e30:	bd80      	pop	{r7, pc}

24002e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24002e32:	b580      	push	{r7, lr}
24002e34:	b086      	sub	sp, #24
24002e36:	af00      	add	r7, sp, #0
24002e38:	4603      	mov	r3, r0
24002e3a:	60b9      	str	r1, [r7, #8]
24002e3c:	607a      	str	r2, [r7, #4]
24002e3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24002e40:	f7ff fe28 	bl	24002a94 <__NVIC_GetPriorityGrouping>
24002e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24002e46:	687a      	ldr	r2, [r7, #4]
24002e48:	68b9      	ldr	r1, [r7, #8]
24002e4a:	6978      	ldr	r0, [r7, #20]
24002e4c:	f7ff ff44 	bl	24002cd8 <NVIC_EncodePriority>
24002e50:	4602      	mov	r2, r0
24002e52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24002e56:	4611      	mov	r1, r2
24002e58:	4618      	mov	r0, r3
24002e5a:	f7ff feeb 	bl	24002c34 <__NVIC_SetPriority>
}
24002e5e:	bf00      	nop
24002e60:	3718      	adds	r7, #24
24002e62:	46bd      	mov	sp, r7
24002e64:	bd80      	pop	{r7, pc}

24002e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24002e66:	b580      	push	{r7, lr}
24002e68:	b082      	sub	sp, #8
24002e6a:	af00      	add	r7, sp, #0
24002e6c:	4603      	mov	r3, r0
24002e6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24002e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002e74:	4618      	mov	r0, r3
24002e76:	f7ff fe1b 	bl	24002ab0 <__NVIC_EnableIRQ>
}
24002e7a:	bf00      	nop
24002e7c:	3708      	adds	r7, #8
24002e7e:	46bd      	mov	sp, r7
24002e80:	bd80      	pop	{r7, pc}

24002e82 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
24002e82:	b580      	push	{r7, lr}
24002e84:	b082      	sub	sp, #8
24002e86:	af00      	add	r7, sp, #0
24002e88:	4603      	mov	r3, r0
24002e8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
24002e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002e90:	4618      	mov	r0, r3
24002e92:	f7ff fe2b 	bl	24002aec <__NVIC_DisableIRQ>
}
24002e96:	bf00      	nop
24002e98:	3708      	adds	r7, #8
24002e9a:	46bd      	mov	sp, r7
24002e9c:	bd80      	pop	{r7, pc}

24002e9e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24002e9e:	b580      	push	{r7, lr}
24002ea0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24002ea2:	f7ff ff83 	bl	24002dac <__NVIC_SystemReset>

24002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24002ea6:	b580      	push	{r7, lr}
24002ea8:	b082      	sub	sp, #8
24002eaa:	af00      	add	r7, sp, #0
24002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24002eae:	6878      	ldr	r0, [r7, #4]
24002eb0:	f7ff ff92 	bl	24002dd8 <SysTick_Config>
24002eb4:	4603      	mov	r3, r0
}
24002eb6:	4618      	mov	r0, r3
24002eb8:	3708      	adds	r7, #8
24002eba:	46bd      	mov	sp, r7
24002ebc:	bd80      	pop	{r7, pc}
	...

24002ec0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
24002ec0:	b480      	push	{r7}
24002ec2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24002ec4:	f3bf 8f5f 	dmb	sy
}
24002ec8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24002eca:	4b07      	ldr	r3, [pc, #28]	; (24002ee8 <HAL_MPU_Disable+0x28>)
24002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002ece:	4a06      	ldr	r2, [pc, #24]	; (24002ee8 <HAL_MPU_Disable+0x28>)
24002ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24002ed4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24002ed6:	4b05      	ldr	r3, [pc, #20]	; (24002eec <HAL_MPU_Disable+0x2c>)
24002ed8:	2200      	movs	r2, #0
24002eda:	605a      	str	r2, [r3, #4]
}
24002edc:	bf00      	nop
24002ede:	46bd      	mov	sp, r7
24002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ee4:	4770      	bx	lr
24002ee6:	bf00      	nop
24002ee8:	e000ed00 	.word	0xe000ed00
24002eec:	e000ed90 	.word	0xe000ed90

24002ef0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
24002ef0:	b480      	push	{r7}
24002ef2:	b083      	sub	sp, #12
24002ef4:	af00      	add	r7, sp, #0
24002ef6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24002ef8:	4a0b      	ldr	r2, [pc, #44]	; (24002f28 <HAL_MPU_Enable+0x38>)
24002efa:	687b      	ldr	r3, [r7, #4]
24002efc:	f043 0301 	orr.w	r3, r3, #1
24002f00:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24002f02:	4b0a      	ldr	r3, [pc, #40]	; (24002f2c <HAL_MPU_Enable+0x3c>)
24002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002f06:	4a09      	ldr	r2, [pc, #36]	; (24002f2c <HAL_MPU_Enable+0x3c>)
24002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002f0c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24002f0e:	f3bf 8f4f 	dsb	sy
}
24002f12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24002f14:	f3bf 8f6f 	isb	sy
}
24002f18:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24002f1a:	bf00      	nop
24002f1c:	370c      	adds	r7, #12
24002f1e:	46bd      	mov	sp, r7
24002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
24002f24:	4770      	bx	lr
24002f26:	bf00      	nop
24002f28:	e000ed90 	.word	0xe000ed90
24002f2c:	e000ed00 	.word	0xe000ed00

24002f30 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
24002f30:	b480      	push	{r7}
24002f32:	b083      	sub	sp, #12
24002f34:	af00      	add	r7, sp, #0
24002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24002f38:	687b      	ldr	r3, [r7, #4]
24002f3a:	785a      	ldrb	r2, [r3, #1]
24002f3c:	4b1d      	ldr	r3, [pc, #116]	; (24002fb4 <HAL_MPU_ConfigRegion+0x84>)
24002f3e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
24002f40:	687b      	ldr	r3, [r7, #4]
24002f42:	781b      	ldrb	r3, [r3, #0]
24002f44:	2b00      	cmp	r3, #0
24002f46:	d029      	beq.n	24002f9c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24002f48:	4a1a      	ldr	r2, [pc, #104]	; (24002fb4 <HAL_MPU_ConfigRegion+0x84>)
24002f4a:	687b      	ldr	r3, [r7, #4]
24002f4c:	685b      	ldr	r3, [r3, #4]
24002f4e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002f50:	687b      	ldr	r3, [r7, #4]
24002f52:	7b1b      	ldrb	r3, [r3, #12]
24002f54:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002f56:	687b      	ldr	r3, [r7, #4]
24002f58:	7adb      	ldrb	r3, [r3, #11]
24002f5a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002f5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002f5e:	687b      	ldr	r3, [r7, #4]
24002f60:	7a9b      	ldrb	r3, [r3, #10]
24002f62:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002f64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002f66:	687b      	ldr	r3, [r7, #4]
24002f68:	7b5b      	ldrb	r3, [r3, #13]
24002f6a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002f6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002f6e:	687b      	ldr	r3, [r7, #4]
24002f70:	7b9b      	ldrb	r3, [r3, #14]
24002f72:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002f74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002f76:	687b      	ldr	r3, [r7, #4]
24002f78:	7bdb      	ldrb	r3, [r3, #15]
24002f7a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002f7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002f7e:	687b      	ldr	r3, [r7, #4]
24002f80:	7a5b      	ldrb	r3, [r3, #9]
24002f82:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002f84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002f86:	687b      	ldr	r3, [r7, #4]
24002f88:	7a1b      	ldrb	r3, [r3, #8]
24002f8a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002f8c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24002f8e:	687a      	ldr	r2, [r7, #4]
24002f90:	7812      	ldrb	r2, [r2, #0]
24002f92:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002f94:	4a07      	ldr	r2, [pc, #28]	; (24002fb4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002f96:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002f98:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
24002f9a:	e005      	b.n	24002fa8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
24002f9c:	4b05      	ldr	r3, [pc, #20]	; (24002fb4 <HAL_MPU_ConfigRegion+0x84>)
24002f9e:	2200      	movs	r2, #0
24002fa0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
24002fa2:	4b04      	ldr	r3, [pc, #16]	; (24002fb4 <HAL_MPU_ConfigRegion+0x84>)
24002fa4:	2200      	movs	r2, #0
24002fa6:	611a      	str	r2, [r3, #16]
}
24002fa8:	bf00      	nop
24002faa:	370c      	adds	r7, #12
24002fac:	46bd      	mov	sp, r7
24002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
24002fb2:	4770      	bx	lr
24002fb4:	e000ed90 	.word	0xe000ed90

24002fb8 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
24002fb8:	b580      	push	{r7, lr}
24002fba:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
24002fbc:	f7ff fd6a 	bl	24002a94 <__NVIC_GetPriorityGrouping>
24002fc0:	4603      	mov	r3, r0
}
24002fc2:	4618      	mov	r0, r3
24002fc4:	bd80      	pop	{r7, pc}

24002fc6 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
24002fc6:	b580      	push	{r7, lr}
24002fc8:	b084      	sub	sp, #16
24002fca:	af00      	add	r7, sp, #0
24002fcc:	60b9      	str	r1, [r7, #8]
24002fce:	607a      	str	r2, [r7, #4]
24002fd0:	603b      	str	r3, [r7, #0]
24002fd2:	4603      	mov	r3, r0
24002fd4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
24002fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24002fda:	4618      	mov	r0, r3
24002fdc:	f7ff fe54 	bl	24002c88 <__NVIC_GetPriority>
24002fe0:	683b      	ldr	r3, [r7, #0]
24002fe2:	687a      	ldr	r2, [r7, #4]
24002fe4:	68b9      	ldr	r1, [r7, #8]
24002fe6:	f7ff feaa 	bl	24002d3e <NVIC_DecodePriority>
}
24002fea:	bf00      	nop
24002fec:	3710      	adds	r7, #16
24002fee:	46bd      	mov	sp, r7
24002ff0:	bd80      	pop	{r7, pc}

24002ff2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
24002ff2:	b580      	push	{r7, lr}
24002ff4:	b082      	sub	sp, #8
24002ff6:	af00      	add	r7, sp, #0
24002ff8:	4603      	mov	r3, r0
24002ffa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
24002ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003000:	4618      	mov	r0, r3
24003002:	f7ff fdb9 	bl	24002b78 <__NVIC_SetPendingIRQ>
}
24003006:	bf00      	nop
24003008:	3708      	adds	r7, #8
2400300a:	46bd      	mov	sp, r7
2400300c:	bd80      	pop	{r7, pc}

2400300e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
2400300e:	b580      	push	{r7, lr}
24003010:	b082      	sub	sp, #8
24003012:	af00      	add	r7, sp, #0
24003014:	4603      	mov	r3, r0
24003016:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
24003018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2400301c:	4618      	mov	r0, r3
2400301e:	f7ff fd89 	bl	24002b34 <__NVIC_GetPendingIRQ>
24003022:	4603      	mov	r3, r0
}
24003024:	4618      	mov	r0, r3
24003026:	3708      	adds	r7, #8
24003028:	46bd      	mov	sp, r7
2400302a:	bd80      	pop	{r7, pc}

2400302c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2400302c:	b580      	push	{r7, lr}
2400302e:	b082      	sub	sp, #8
24003030:	af00      	add	r7, sp, #0
24003032:	4603      	mov	r3, r0
24003034:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
24003036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2400303a:	4618      	mov	r0, r3
2400303c:	f7ff fdba 	bl	24002bb4 <__NVIC_ClearPendingIRQ>
}
24003040:	bf00      	nop
24003042:	3708      	adds	r7, #8
24003044:	46bd      	mov	sp, r7
24003046:	bd80      	pop	{r7, pc}

24003048 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
24003048:	b580      	push	{r7, lr}
2400304a:	b082      	sub	sp, #8
2400304c:	af00      	add	r7, sp, #0
2400304e:	4603      	mov	r3, r0
24003050:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
24003052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003056:	4618      	mov	r0, r3
24003058:	f7ff fdca 	bl	24002bf0 <__NVIC_GetActive>
2400305c:	4603      	mov	r3, r0
}
2400305e:	4618      	mov	r0, r3
24003060:	3708      	adds	r7, #8
24003062:	46bd      	mov	sp, r7
24003064:	bd80      	pop	{r7, pc}
	...

24003068 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
24003068:	b480      	push	{r7}
2400306a:	b083      	sub	sp, #12
2400306c:	af00      	add	r7, sp, #0
2400306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
24003070:	687b      	ldr	r3, [r7, #4]
24003072:	2b04      	cmp	r3, #4
24003074:	d106      	bne.n	24003084 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
24003076:	4b09      	ldr	r3, [pc, #36]	; (2400309c <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003078:	681b      	ldr	r3, [r3, #0]
2400307a:	4a08      	ldr	r2, [pc, #32]	; (2400309c <HAL_SYSTICK_CLKSourceConfig+0x34>)
2400307c:	f043 0304 	orr.w	r3, r3, #4
24003080:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
24003082:	e005      	b.n	24003090 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
24003084:	4b05      	ldr	r3, [pc, #20]	; (2400309c <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003086:	681b      	ldr	r3, [r3, #0]
24003088:	4a04      	ldr	r2, [pc, #16]	; (2400309c <HAL_SYSTICK_CLKSourceConfig+0x34>)
2400308a:	f023 0304 	bic.w	r3, r3, #4
2400308e:	6013      	str	r3, [r2, #0]
}
24003090:	bf00      	nop
24003092:	370c      	adds	r7, #12
24003094:	46bd      	mov	sp, r7
24003096:	f85d 7b04 	ldr.w	r7, [sp], #4
2400309a:	4770      	bx	lr
2400309c:	e000e010 	.word	0xe000e010

240030a0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
240030a0:	b580      	push	{r7, lr}
240030a2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
240030a4:	f000 f802 	bl	240030ac <HAL_SYSTICK_Callback>
}
240030a8:	bf00      	nop
240030aa:	bd80      	pop	{r7, pc}

240030ac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
240030ac:	b480      	push	{r7}
240030ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
240030b0:	bf00      	nop
240030b2:	46bd      	mov	sp, r7
240030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240030b8:	4770      	bx	lr

240030ba <HAL_GetCurrentCPUID>:
/**
* @brief  Returns the current CPU ID.
* @retval CPU identifier
*/
uint32_t HAL_GetCurrentCPUID(void)
{
240030ba:	b480      	push	{r7}
240030bc:	af00      	add	r7, sp, #0
  return  CM7_CPUID;
240030be:	2303      	movs	r3, #3
}
240030c0:	4618      	mov	r0, r3
240030c2:	46bd      	mov	sp, r7
240030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240030c8:	4770      	bx	lr
	...

240030cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
240030cc:	b580      	push	{r7, lr}
240030ce:	b086      	sub	sp, #24
240030d0:	af00      	add	r7, sp, #0
240030d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
240030d4:	f7ff f892 	bl	240021fc <HAL_GetTick>
240030d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240030da:	687b      	ldr	r3, [r7, #4]
240030dc:	2b00      	cmp	r3, #0
240030de:	d101      	bne.n	240030e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
240030e0:	2301      	movs	r3, #1
240030e2:	e316      	b.n	24003712 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240030e4:	687b      	ldr	r3, [r7, #4]
240030e6:	681b      	ldr	r3, [r3, #0]
240030e8:	4a66      	ldr	r2, [pc, #408]	; (24003284 <HAL_DMA_Init+0x1b8>)
240030ea:	4293      	cmp	r3, r2
240030ec:	d04a      	beq.n	24003184 <HAL_DMA_Init+0xb8>
240030ee:	687b      	ldr	r3, [r7, #4]
240030f0:	681b      	ldr	r3, [r3, #0]
240030f2:	4a65      	ldr	r2, [pc, #404]	; (24003288 <HAL_DMA_Init+0x1bc>)
240030f4:	4293      	cmp	r3, r2
240030f6:	d045      	beq.n	24003184 <HAL_DMA_Init+0xb8>
240030f8:	687b      	ldr	r3, [r7, #4]
240030fa:	681b      	ldr	r3, [r3, #0]
240030fc:	4a63      	ldr	r2, [pc, #396]	; (2400328c <HAL_DMA_Init+0x1c0>)
240030fe:	4293      	cmp	r3, r2
24003100:	d040      	beq.n	24003184 <HAL_DMA_Init+0xb8>
24003102:	687b      	ldr	r3, [r7, #4]
24003104:	681b      	ldr	r3, [r3, #0]
24003106:	4a62      	ldr	r2, [pc, #392]	; (24003290 <HAL_DMA_Init+0x1c4>)
24003108:	4293      	cmp	r3, r2
2400310a:	d03b      	beq.n	24003184 <HAL_DMA_Init+0xb8>
2400310c:	687b      	ldr	r3, [r7, #4]
2400310e:	681b      	ldr	r3, [r3, #0]
24003110:	4a60      	ldr	r2, [pc, #384]	; (24003294 <HAL_DMA_Init+0x1c8>)
24003112:	4293      	cmp	r3, r2
24003114:	d036      	beq.n	24003184 <HAL_DMA_Init+0xb8>
24003116:	687b      	ldr	r3, [r7, #4]
24003118:	681b      	ldr	r3, [r3, #0]
2400311a:	4a5f      	ldr	r2, [pc, #380]	; (24003298 <HAL_DMA_Init+0x1cc>)
2400311c:	4293      	cmp	r3, r2
2400311e:	d031      	beq.n	24003184 <HAL_DMA_Init+0xb8>
24003120:	687b      	ldr	r3, [r7, #4]
24003122:	681b      	ldr	r3, [r3, #0]
24003124:	4a5d      	ldr	r2, [pc, #372]	; (2400329c <HAL_DMA_Init+0x1d0>)
24003126:	4293      	cmp	r3, r2
24003128:	d02c      	beq.n	24003184 <HAL_DMA_Init+0xb8>
2400312a:	687b      	ldr	r3, [r7, #4]
2400312c:	681b      	ldr	r3, [r3, #0]
2400312e:	4a5c      	ldr	r2, [pc, #368]	; (240032a0 <HAL_DMA_Init+0x1d4>)
24003130:	4293      	cmp	r3, r2
24003132:	d027      	beq.n	24003184 <HAL_DMA_Init+0xb8>
24003134:	687b      	ldr	r3, [r7, #4]
24003136:	681b      	ldr	r3, [r3, #0]
24003138:	4a5a      	ldr	r2, [pc, #360]	; (240032a4 <HAL_DMA_Init+0x1d8>)
2400313a:	4293      	cmp	r3, r2
2400313c:	d022      	beq.n	24003184 <HAL_DMA_Init+0xb8>
2400313e:	687b      	ldr	r3, [r7, #4]
24003140:	681b      	ldr	r3, [r3, #0]
24003142:	4a59      	ldr	r2, [pc, #356]	; (240032a8 <HAL_DMA_Init+0x1dc>)
24003144:	4293      	cmp	r3, r2
24003146:	d01d      	beq.n	24003184 <HAL_DMA_Init+0xb8>
24003148:	687b      	ldr	r3, [r7, #4]
2400314a:	681b      	ldr	r3, [r3, #0]
2400314c:	4a57      	ldr	r2, [pc, #348]	; (240032ac <HAL_DMA_Init+0x1e0>)
2400314e:	4293      	cmp	r3, r2
24003150:	d018      	beq.n	24003184 <HAL_DMA_Init+0xb8>
24003152:	687b      	ldr	r3, [r7, #4]
24003154:	681b      	ldr	r3, [r3, #0]
24003156:	4a56      	ldr	r2, [pc, #344]	; (240032b0 <HAL_DMA_Init+0x1e4>)
24003158:	4293      	cmp	r3, r2
2400315a:	d013      	beq.n	24003184 <HAL_DMA_Init+0xb8>
2400315c:	687b      	ldr	r3, [r7, #4]
2400315e:	681b      	ldr	r3, [r3, #0]
24003160:	4a54      	ldr	r2, [pc, #336]	; (240032b4 <HAL_DMA_Init+0x1e8>)
24003162:	4293      	cmp	r3, r2
24003164:	d00e      	beq.n	24003184 <HAL_DMA_Init+0xb8>
24003166:	687b      	ldr	r3, [r7, #4]
24003168:	681b      	ldr	r3, [r3, #0]
2400316a:	4a53      	ldr	r2, [pc, #332]	; (240032b8 <HAL_DMA_Init+0x1ec>)
2400316c:	4293      	cmp	r3, r2
2400316e:	d009      	beq.n	24003184 <HAL_DMA_Init+0xb8>
24003170:	687b      	ldr	r3, [r7, #4]
24003172:	681b      	ldr	r3, [r3, #0]
24003174:	4a51      	ldr	r2, [pc, #324]	; (240032bc <HAL_DMA_Init+0x1f0>)
24003176:	4293      	cmp	r3, r2
24003178:	d004      	beq.n	24003184 <HAL_DMA_Init+0xb8>
2400317a:	687b      	ldr	r3, [r7, #4]
2400317c:	681b      	ldr	r3, [r3, #0]
2400317e:	4a50      	ldr	r2, [pc, #320]	; (240032c0 <HAL_DMA_Init+0x1f4>)
24003180:	4293      	cmp	r3, r2
24003182:	d101      	bne.n	24003188 <HAL_DMA_Init+0xbc>
24003184:	2301      	movs	r3, #1
24003186:	e000      	b.n	2400318a <HAL_DMA_Init+0xbe>
24003188:	2300      	movs	r3, #0
2400318a:	2b00      	cmp	r3, #0
2400318c:	f000 813b 	beq.w	24003406 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003190:	687b      	ldr	r3, [r7, #4]
24003192:	2202      	movs	r2, #2
24003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24003198:	687b      	ldr	r3, [r7, #4]
2400319a:	2200      	movs	r2, #0
2400319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
240031a0:	687b      	ldr	r3, [r7, #4]
240031a2:	681b      	ldr	r3, [r3, #0]
240031a4:	4a37      	ldr	r2, [pc, #220]	; (24003284 <HAL_DMA_Init+0x1b8>)
240031a6:	4293      	cmp	r3, r2
240031a8:	d04a      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031aa:	687b      	ldr	r3, [r7, #4]
240031ac:	681b      	ldr	r3, [r3, #0]
240031ae:	4a36      	ldr	r2, [pc, #216]	; (24003288 <HAL_DMA_Init+0x1bc>)
240031b0:	4293      	cmp	r3, r2
240031b2:	d045      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031b4:	687b      	ldr	r3, [r7, #4]
240031b6:	681b      	ldr	r3, [r3, #0]
240031b8:	4a34      	ldr	r2, [pc, #208]	; (2400328c <HAL_DMA_Init+0x1c0>)
240031ba:	4293      	cmp	r3, r2
240031bc:	d040      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031be:	687b      	ldr	r3, [r7, #4]
240031c0:	681b      	ldr	r3, [r3, #0]
240031c2:	4a33      	ldr	r2, [pc, #204]	; (24003290 <HAL_DMA_Init+0x1c4>)
240031c4:	4293      	cmp	r3, r2
240031c6:	d03b      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031c8:	687b      	ldr	r3, [r7, #4]
240031ca:	681b      	ldr	r3, [r3, #0]
240031cc:	4a31      	ldr	r2, [pc, #196]	; (24003294 <HAL_DMA_Init+0x1c8>)
240031ce:	4293      	cmp	r3, r2
240031d0:	d036      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031d2:	687b      	ldr	r3, [r7, #4]
240031d4:	681b      	ldr	r3, [r3, #0]
240031d6:	4a30      	ldr	r2, [pc, #192]	; (24003298 <HAL_DMA_Init+0x1cc>)
240031d8:	4293      	cmp	r3, r2
240031da:	d031      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031dc:	687b      	ldr	r3, [r7, #4]
240031de:	681b      	ldr	r3, [r3, #0]
240031e0:	4a2e      	ldr	r2, [pc, #184]	; (2400329c <HAL_DMA_Init+0x1d0>)
240031e2:	4293      	cmp	r3, r2
240031e4:	d02c      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031e6:	687b      	ldr	r3, [r7, #4]
240031e8:	681b      	ldr	r3, [r3, #0]
240031ea:	4a2d      	ldr	r2, [pc, #180]	; (240032a0 <HAL_DMA_Init+0x1d4>)
240031ec:	4293      	cmp	r3, r2
240031ee:	d027      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031f0:	687b      	ldr	r3, [r7, #4]
240031f2:	681b      	ldr	r3, [r3, #0]
240031f4:	4a2b      	ldr	r2, [pc, #172]	; (240032a4 <HAL_DMA_Init+0x1d8>)
240031f6:	4293      	cmp	r3, r2
240031f8:	d022      	beq.n	24003240 <HAL_DMA_Init+0x174>
240031fa:	687b      	ldr	r3, [r7, #4]
240031fc:	681b      	ldr	r3, [r3, #0]
240031fe:	4a2a      	ldr	r2, [pc, #168]	; (240032a8 <HAL_DMA_Init+0x1dc>)
24003200:	4293      	cmp	r3, r2
24003202:	d01d      	beq.n	24003240 <HAL_DMA_Init+0x174>
24003204:	687b      	ldr	r3, [r7, #4]
24003206:	681b      	ldr	r3, [r3, #0]
24003208:	4a28      	ldr	r2, [pc, #160]	; (240032ac <HAL_DMA_Init+0x1e0>)
2400320a:	4293      	cmp	r3, r2
2400320c:	d018      	beq.n	24003240 <HAL_DMA_Init+0x174>
2400320e:	687b      	ldr	r3, [r7, #4]
24003210:	681b      	ldr	r3, [r3, #0]
24003212:	4a27      	ldr	r2, [pc, #156]	; (240032b0 <HAL_DMA_Init+0x1e4>)
24003214:	4293      	cmp	r3, r2
24003216:	d013      	beq.n	24003240 <HAL_DMA_Init+0x174>
24003218:	687b      	ldr	r3, [r7, #4]
2400321a:	681b      	ldr	r3, [r3, #0]
2400321c:	4a25      	ldr	r2, [pc, #148]	; (240032b4 <HAL_DMA_Init+0x1e8>)
2400321e:	4293      	cmp	r3, r2
24003220:	d00e      	beq.n	24003240 <HAL_DMA_Init+0x174>
24003222:	687b      	ldr	r3, [r7, #4]
24003224:	681b      	ldr	r3, [r3, #0]
24003226:	4a24      	ldr	r2, [pc, #144]	; (240032b8 <HAL_DMA_Init+0x1ec>)
24003228:	4293      	cmp	r3, r2
2400322a:	d009      	beq.n	24003240 <HAL_DMA_Init+0x174>
2400322c:	687b      	ldr	r3, [r7, #4]
2400322e:	681b      	ldr	r3, [r3, #0]
24003230:	4a22      	ldr	r2, [pc, #136]	; (240032bc <HAL_DMA_Init+0x1f0>)
24003232:	4293      	cmp	r3, r2
24003234:	d004      	beq.n	24003240 <HAL_DMA_Init+0x174>
24003236:	687b      	ldr	r3, [r7, #4]
24003238:	681b      	ldr	r3, [r3, #0]
2400323a:	4a21      	ldr	r2, [pc, #132]	; (240032c0 <HAL_DMA_Init+0x1f4>)
2400323c:	4293      	cmp	r3, r2
2400323e:	d108      	bne.n	24003252 <HAL_DMA_Init+0x186>
24003240:	687b      	ldr	r3, [r7, #4]
24003242:	681b      	ldr	r3, [r3, #0]
24003244:	681a      	ldr	r2, [r3, #0]
24003246:	687b      	ldr	r3, [r7, #4]
24003248:	681b      	ldr	r3, [r3, #0]
2400324a:	f022 0201 	bic.w	r2, r2, #1
2400324e:	601a      	str	r2, [r3, #0]
24003250:	e007      	b.n	24003262 <HAL_DMA_Init+0x196>
24003252:	687b      	ldr	r3, [r7, #4]
24003254:	681b      	ldr	r3, [r3, #0]
24003256:	681a      	ldr	r2, [r3, #0]
24003258:	687b      	ldr	r3, [r7, #4]
2400325a:	681b      	ldr	r3, [r3, #0]
2400325c:	f022 0201 	bic.w	r2, r2, #1
24003260:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24003262:	e02f      	b.n	240032c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24003264:	f7fe ffca 	bl	240021fc <HAL_GetTick>
24003268:	4602      	mov	r2, r0
2400326a:	693b      	ldr	r3, [r7, #16]
2400326c:	1ad3      	subs	r3, r2, r3
2400326e:	2b05      	cmp	r3, #5
24003270:	d928      	bls.n	240032c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24003272:	687b      	ldr	r3, [r7, #4]
24003274:	2220      	movs	r2, #32
24003276:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24003278:	687b      	ldr	r3, [r7, #4]
2400327a:	2203      	movs	r2, #3
2400327c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
24003280:	2301      	movs	r3, #1
24003282:	e246      	b.n	24003712 <HAL_DMA_Init+0x646>
24003284:	40020010 	.word	0x40020010
24003288:	40020028 	.word	0x40020028
2400328c:	40020040 	.word	0x40020040
24003290:	40020058 	.word	0x40020058
24003294:	40020070 	.word	0x40020070
24003298:	40020088 	.word	0x40020088
2400329c:	400200a0 	.word	0x400200a0
240032a0:	400200b8 	.word	0x400200b8
240032a4:	40020410 	.word	0x40020410
240032a8:	40020428 	.word	0x40020428
240032ac:	40020440 	.word	0x40020440
240032b0:	40020458 	.word	0x40020458
240032b4:	40020470 	.word	0x40020470
240032b8:	40020488 	.word	0x40020488
240032bc:	400204a0 	.word	0x400204a0
240032c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240032c4:	687b      	ldr	r3, [r7, #4]
240032c6:	681b      	ldr	r3, [r3, #0]
240032c8:	681b      	ldr	r3, [r3, #0]
240032ca:	f003 0301 	and.w	r3, r3, #1
240032ce:	2b00      	cmp	r3, #0
240032d0:	d1c8      	bne.n	24003264 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
240032d2:	687b      	ldr	r3, [r7, #4]
240032d4:	681b      	ldr	r3, [r3, #0]
240032d6:	681b      	ldr	r3, [r3, #0]
240032d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
240032da:	697a      	ldr	r2, [r7, #20]
240032dc:	4b83      	ldr	r3, [pc, #524]	; (240034ec <HAL_DMA_Init+0x420>)
240032de:	4013      	ands	r3, r2
240032e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
240032e2:	687b      	ldr	r3, [r7, #4]
240032e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240032e6:	687b      	ldr	r3, [r7, #4]
240032e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
240032ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240032ec:	687b      	ldr	r3, [r7, #4]
240032ee:	691b      	ldr	r3, [r3, #16]
240032f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
240032f2:	687b      	ldr	r3, [r7, #4]
240032f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
240032f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
240032f8:	687b      	ldr	r3, [r7, #4]
240032fa:	699b      	ldr	r3, [r3, #24]
240032fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
240032fe:	687b      	ldr	r3, [r7, #4]
24003300:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24003302:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24003304:	687b      	ldr	r3, [r7, #4]
24003306:	6a1b      	ldr	r3, [r3, #32]
24003308:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
2400330a:	697a      	ldr	r2, [r7, #20]
2400330c:	4313      	orrs	r3, r2
2400330e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24003310:	687b      	ldr	r3, [r7, #4]
24003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24003314:	2b04      	cmp	r3, #4
24003316:	d107      	bne.n	24003328 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24003318:	687b      	ldr	r3, [r7, #4]
2400331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400331c:	687b      	ldr	r3, [r7, #4]
2400331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24003320:	4313      	orrs	r3, r2
24003322:	697a      	ldr	r2, [r7, #20]
24003324:	4313      	orrs	r3, r2
24003326:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24003328:	4b71      	ldr	r3, [pc, #452]	; (240034f0 <HAL_DMA_Init+0x424>)
2400332a:	681a      	ldr	r2, [r3, #0]
2400332c:	4b71      	ldr	r3, [pc, #452]	; (240034f4 <HAL_DMA_Init+0x428>)
2400332e:	4013      	ands	r3, r2
24003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003334:	d328      	bcc.n	24003388 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24003336:	687b      	ldr	r3, [r7, #4]
24003338:	685b      	ldr	r3, [r3, #4]
2400333a:	2b28      	cmp	r3, #40	; 0x28
2400333c:	d903      	bls.n	24003346 <HAL_DMA_Init+0x27a>
2400333e:	687b      	ldr	r3, [r7, #4]
24003340:	685b      	ldr	r3, [r3, #4]
24003342:	2b2e      	cmp	r3, #46	; 0x2e
24003344:	d917      	bls.n	24003376 <HAL_DMA_Init+0x2aa>
24003346:	687b      	ldr	r3, [r7, #4]
24003348:	685b      	ldr	r3, [r3, #4]
2400334a:	2b3e      	cmp	r3, #62	; 0x3e
2400334c:	d903      	bls.n	24003356 <HAL_DMA_Init+0x28a>
2400334e:	687b      	ldr	r3, [r7, #4]
24003350:	685b      	ldr	r3, [r3, #4]
24003352:	2b42      	cmp	r3, #66	; 0x42
24003354:	d90f      	bls.n	24003376 <HAL_DMA_Init+0x2aa>
24003356:	687b      	ldr	r3, [r7, #4]
24003358:	685b      	ldr	r3, [r3, #4]
2400335a:	2b46      	cmp	r3, #70	; 0x46
2400335c:	d903      	bls.n	24003366 <HAL_DMA_Init+0x29a>
2400335e:	687b      	ldr	r3, [r7, #4]
24003360:	685b      	ldr	r3, [r3, #4]
24003362:	2b48      	cmp	r3, #72	; 0x48
24003364:	d907      	bls.n	24003376 <HAL_DMA_Init+0x2aa>
24003366:	687b      	ldr	r3, [r7, #4]
24003368:	685b      	ldr	r3, [r3, #4]
2400336a:	2b4e      	cmp	r3, #78	; 0x4e
2400336c:	d905      	bls.n	2400337a <HAL_DMA_Init+0x2ae>
2400336e:	687b      	ldr	r3, [r7, #4]
24003370:	685b      	ldr	r3, [r3, #4]
24003372:	2b52      	cmp	r3, #82	; 0x52
24003374:	d801      	bhi.n	2400337a <HAL_DMA_Init+0x2ae>
24003376:	2301      	movs	r3, #1
24003378:	e000      	b.n	2400337c <HAL_DMA_Init+0x2b0>
2400337a:	2300      	movs	r3, #0
2400337c:	2b00      	cmp	r3, #0
2400337e:	d003      	beq.n	24003388 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
24003380:	697b      	ldr	r3, [r7, #20]
24003382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24003386:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24003388:	687b      	ldr	r3, [r7, #4]
2400338a:	681b      	ldr	r3, [r3, #0]
2400338c:	697a      	ldr	r2, [r7, #20]
2400338e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24003390:	687b      	ldr	r3, [r7, #4]
24003392:	681b      	ldr	r3, [r3, #0]
24003394:	695b      	ldr	r3, [r3, #20]
24003396:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24003398:	697b      	ldr	r3, [r7, #20]
2400339a:	f023 0307 	bic.w	r3, r3, #7
2400339e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
240033a0:	687b      	ldr	r3, [r7, #4]
240033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240033a4:	697a      	ldr	r2, [r7, #20]
240033a6:	4313      	orrs	r3, r2
240033a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240033aa:	687b      	ldr	r3, [r7, #4]
240033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240033ae:	2b04      	cmp	r3, #4
240033b0:	d117      	bne.n	240033e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
240033b2:	687b      	ldr	r3, [r7, #4]
240033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240033b6:	697a      	ldr	r2, [r7, #20]
240033b8:	4313      	orrs	r3, r2
240033ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
240033bc:	687b      	ldr	r3, [r7, #4]
240033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240033c0:	2b00      	cmp	r3, #0
240033c2:	d00e      	beq.n	240033e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
240033c4:	6878      	ldr	r0, [r7, #4]
240033c6:	f003 fa95 	bl	240068f4 <DMA_CheckFifoParam>
240033ca:	4603      	mov	r3, r0
240033cc:	2b00      	cmp	r3, #0
240033ce:	d008      	beq.n	240033e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240033d0:	687b      	ldr	r3, [r7, #4]
240033d2:	2240      	movs	r2, #64	; 0x40
240033d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
240033d6:	687b      	ldr	r3, [r7, #4]
240033d8:	2201      	movs	r2, #1
240033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
240033de:	2301      	movs	r3, #1
240033e0:	e197      	b.n	24003712 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
240033e2:	687b      	ldr	r3, [r7, #4]
240033e4:	681b      	ldr	r3, [r3, #0]
240033e6:	697a      	ldr	r2, [r7, #20]
240033e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240033ea:	6878      	ldr	r0, [r7, #4]
240033ec:	f003 f9d0 	bl	24006790 <DMA_CalcBaseAndBitshift>
240033f0:	4603      	mov	r3, r0
240033f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240033f4:	687b      	ldr	r3, [r7, #4]
240033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240033f8:	f003 031f 	and.w	r3, r3, #31
240033fc:	223f      	movs	r2, #63	; 0x3f
240033fe:	409a      	lsls	r2, r3
24003400:	68bb      	ldr	r3, [r7, #8]
24003402:	609a      	str	r2, [r3, #8]
24003404:	e0cd      	b.n	240035a2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24003406:	687b      	ldr	r3, [r7, #4]
24003408:	681b      	ldr	r3, [r3, #0]
2400340a:	4a3b      	ldr	r2, [pc, #236]	; (240034f8 <HAL_DMA_Init+0x42c>)
2400340c:	4293      	cmp	r3, r2
2400340e:	d022      	beq.n	24003456 <HAL_DMA_Init+0x38a>
24003410:	687b      	ldr	r3, [r7, #4]
24003412:	681b      	ldr	r3, [r3, #0]
24003414:	4a39      	ldr	r2, [pc, #228]	; (240034fc <HAL_DMA_Init+0x430>)
24003416:	4293      	cmp	r3, r2
24003418:	d01d      	beq.n	24003456 <HAL_DMA_Init+0x38a>
2400341a:	687b      	ldr	r3, [r7, #4]
2400341c:	681b      	ldr	r3, [r3, #0]
2400341e:	4a38      	ldr	r2, [pc, #224]	; (24003500 <HAL_DMA_Init+0x434>)
24003420:	4293      	cmp	r3, r2
24003422:	d018      	beq.n	24003456 <HAL_DMA_Init+0x38a>
24003424:	687b      	ldr	r3, [r7, #4]
24003426:	681b      	ldr	r3, [r3, #0]
24003428:	4a36      	ldr	r2, [pc, #216]	; (24003504 <HAL_DMA_Init+0x438>)
2400342a:	4293      	cmp	r3, r2
2400342c:	d013      	beq.n	24003456 <HAL_DMA_Init+0x38a>
2400342e:	687b      	ldr	r3, [r7, #4]
24003430:	681b      	ldr	r3, [r3, #0]
24003432:	4a35      	ldr	r2, [pc, #212]	; (24003508 <HAL_DMA_Init+0x43c>)
24003434:	4293      	cmp	r3, r2
24003436:	d00e      	beq.n	24003456 <HAL_DMA_Init+0x38a>
24003438:	687b      	ldr	r3, [r7, #4]
2400343a:	681b      	ldr	r3, [r3, #0]
2400343c:	4a33      	ldr	r2, [pc, #204]	; (2400350c <HAL_DMA_Init+0x440>)
2400343e:	4293      	cmp	r3, r2
24003440:	d009      	beq.n	24003456 <HAL_DMA_Init+0x38a>
24003442:	687b      	ldr	r3, [r7, #4]
24003444:	681b      	ldr	r3, [r3, #0]
24003446:	4a32      	ldr	r2, [pc, #200]	; (24003510 <HAL_DMA_Init+0x444>)
24003448:	4293      	cmp	r3, r2
2400344a:	d004      	beq.n	24003456 <HAL_DMA_Init+0x38a>
2400344c:	687b      	ldr	r3, [r7, #4]
2400344e:	681b      	ldr	r3, [r3, #0]
24003450:	4a30      	ldr	r2, [pc, #192]	; (24003514 <HAL_DMA_Init+0x448>)
24003452:	4293      	cmp	r3, r2
24003454:	d101      	bne.n	2400345a <HAL_DMA_Init+0x38e>
24003456:	2301      	movs	r3, #1
24003458:	e000      	b.n	2400345c <HAL_DMA_Init+0x390>
2400345a:	2300      	movs	r3, #0
2400345c:	2b00      	cmp	r3, #0
2400345e:	f000 8097 	beq.w	24003590 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24003462:	687b      	ldr	r3, [r7, #4]
24003464:	681b      	ldr	r3, [r3, #0]
24003466:	4a24      	ldr	r2, [pc, #144]	; (240034f8 <HAL_DMA_Init+0x42c>)
24003468:	4293      	cmp	r3, r2
2400346a:	d021      	beq.n	240034b0 <HAL_DMA_Init+0x3e4>
2400346c:	687b      	ldr	r3, [r7, #4]
2400346e:	681b      	ldr	r3, [r3, #0]
24003470:	4a22      	ldr	r2, [pc, #136]	; (240034fc <HAL_DMA_Init+0x430>)
24003472:	4293      	cmp	r3, r2
24003474:	d01c      	beq.n	240034b0 <HAL_DMA_Init+0x3e4>
24003476:	687b      	ldr	r3, [r7, #4]
24003478:	681b      	ldr	r3, [r3, #0]
2400347a:	4a21      	ldr	r2, [pc, #132]	; (24003500 <HAL_DMA_Init+0x434>)
2400347c:	4293      	cmp	r3, r2
2400347e:	d017      	beq.n	240034b0 <HAL_DMA_Init+0x3e4>
24003480:	687b      	ldr	r3, [r7, #4]
24003482:	681b      	ldr	r3, [r3, #0]
24003484:	4a1f      	ldr	r2, [pc, #124]	; (24003504 <HAL_DMA_Init+0x438>)
24003486:	4293      	cmp	r3, r2
24003488:	d012      	beq.n	240034b0 <HAL_DMA_Init+0x3e4>
2400348a:	687b      	ldr	r3, [r7, #4]
2400348c:	681b      	ldr	r3, [r3, #0]
2400348e:	4a1e      	ldr	r2, [pc, #120]	; (24003508 <HAL_DMA_Init+0x43c>)
24003490:	4293      	cmp	r3, r2
24003492:	d00d      	beq.n	240034b0 <HAL_DMA_Init+0x3e4>
24003494:	687b      	ldr	r3, [r7, #4]
24003496:	681b      	ldr	r3, [r3, #0]
24003498:	4a1c      	ldr	r2, [pc, #112]	; (2400350c <HAL_DMA_Init+0x440>)
2400349a:	4293      	cmp	r3, r2
2400349c:	d008      	beq.n	240034b0 <HAL_DMA_Init+0x3e4>
2400349e:	687b      	ldr	r3, [r7, #4]
240034a0:	681b      	ldr	r3, [r3, #0]
240034a2:	4a1b      	ldr	r2, [pc, #108]	; (24003510 <HAL_DMA_Init+0x444>)
240034a4:	4293      	cmp	r3, r2
240034a6:	d003      	beq.n	240034b0 <HAL_DMA_Init+0x3e4>
240034a8:	687b      	ldr	r3, [r7, #4]
240034aa:	681b      	ldr	r3, [r3, #0]
240034ac:	4a19      	ldr	r2, [pc, #100]	; (24003514 <HAL_DMA_Init+0x448>)
240034ae:	4293      	cmp	r3, r2
240034b0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240034b2:	687b      	ldr	r3, [r7, #4]
240034b4:	2202      	movs	r2, #2
240034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
240034ba:	687b      	ldr	r3, [r7, #4]
240034bc:	2200      	movs	r2, #0
240034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
240034c2:	687b      	ldr	r3, [r7, #4]
240034c4:	681b      	ldr	r3, [r3, #0]
240034c6:	681b      	ldr	r3, [r3, #0]
240034c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
240034ca:	697a      	ldr	r2, [r7, #20]
240034cc:	4b12      	ldr	r3, [pc, #72]	; (24003518 <HAL_DMA_Init+0x44c>)
240034ce:	4013      	ands	r3, r2
240034d0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240034d2:	687b      	ldr	r3, [r7, #4]
240034d4:	689b      	ldr	r3, [r3, #8]
240034d6:	2b40      	cmp	r3, #64	; 0x40
240034d8:	d020      	beq.n	2400351c <HAL_DMA_Init+0x450>
240034da:	687b      	ldr	r3, [r7, #4]
240034dc:	689b      	ldr	r3, [r3, #8]
240034de:	2b80      	cmp	r3, #128	; 0x80
240034e0:	d102      	bne.n	240034e8 <HAL_DMA_Init+0x41c>
240034e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240034e6:	e01a      	b.n	2400351e <HAL_DMA_Init+0x452>
240034e8:	2300      	movs	r3, #0
240034ea:	e018      	b.n	2400351e <HAL_DMA_Init+0x452>
240034ec:	fe10803f 	.word	0xfe10803f
240034f0:	5c001000 	.word	0x5c001000
240034f4:	ffff0000 	.word	0xffff0000
240034f8:	58025408 	.word	0x58025408
240034fc:	5802541c 	.word	0x5802541c
24003500:	58025430 	.word	0x58025430
24003504:	58025444 	.word	0x58025444
24003508:	58025458 	.word	0x58025458
2400350c:	5802546c 	.word	0x5802546c
24003510:	58025480 	.word	0x58025480
24003514:	58025494 	.word	0x58025494
24003518:	fffe000f 	.word	0xfffe000f
2400351c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
2400351e:	687a      	ldr	r2, [r7, #4]
24003520:	68d2      	ldr	r2, [r2, #12]
24003522:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24003524:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24003526:	687b      	ldr	r3, [r7, #4]
24003528:	691b      	ldr	r3, [r3, #16]
2400352a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
2400352c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
2400352e:	687b      	ldr	r3, [r7, #4]
24003530:	695b      	ldr	r3, [r3, #20]
24003532:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24003534:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24003536:	687b      	ldr	r3, [r7, #4]
24003538:	699b      	ldr	r3, [r3, #24]
2400353a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
2400353c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
2400353e:	687b      	ldr	r3, [r7, #4]
24003540:	69db      	ldr	r3, [r3, #28]
24003542:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24003544:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24003546:	687b      	ldr	r3, [r7, #4]
24003548:	6a1b      	ldr	r3, [r3, #32]
2400354a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
2400354c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400354e:	697a      	ldr	r2, [r7, #20]
24003550:	4313      	orrs	r3, r2
24003552:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24003554:	687b      	ldr	r3, [r7, #4]
24003556:	681b      	ldr	r3, [r3, #0]
24003558:	697a      	ldr	r2, [r7, #20]
2400355a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
2400355c:	687b      	ldr	r3, [r7, #4]
2400355e:	681b      	ldr	r3, [r3, #0]
24003560:	461a      	mov	r2, r3
24003562:	4b6e      	ldr	r3, [pc, #440]	; (2400371c <HAL_DMA_Init+0x650>)
24003564:	4413      	add	r3, r2
24003566:	4a6e      	ldr	r2, [pc, #440]	; (24003720 <HAL_DMA_Init+0x654>)
24003568:	fba2 2303 	umull	r2, r3, r2, r3
2400356c:	091b      	lsrs	r3, r3, #4
2400356e:	009a      	lsls	r2, r3, #2
24003570:	687b      	ldr	r3, [r7, #4]
24003572:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24003574:	6878      	ldr	r0, [r7, #4]
24003576:	f003 f90b 	bl	24006790 <DMA_CalcBaseAndBitshift>
2400357a:	4603      	mov	r3, r0
2400357c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400357e:	687b      	ldr	r3, [r7, #4]
24003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003582:	f003 031f 	and.w	r3, r3, #31
24003586:	2201      	movs	r2, #1
24003588:	409a      	lsls	r2, r3
2400358a:	68fb      	ldr	r3, [r7, #12]
2400358c:	605a      	str	r2, [r3, #4]
2400358e:	e008      	b.n	240035a2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24003590:	687b      	ldr	r3, [r7, #4]
24003592:	2240      	movs	r2, #64	; 0x40
24003594:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24003596:	687b      	ldr	r3, [r7, #4]
24003598:	2203      	movs	r2, #3
2400359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
2400359e:	2301      	movs	r3, #1
240035a0:	e0b7      	b.n	24003712 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240035a2:	687b      	ldr	r3, [r7, #4]
240035a4:	681b      	ldr	r3, [r3, #0]
240035a6:	4a5f      	ldr	r2, [pc, #380]	; (24003724 <HAL_DMA_Init+0x658>)
240035a8:	4293      	cmp	r3, r2
240035aa:	d072      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035ac:	687b      	ldr	r3, [r7, #4]
240035ae:	681b      	ldr	r3, [r3, #0]
240035b0:	4a5d      	ldr	r2, [pc, #372]	; (24003728 <HAL_DMA_Init+0x65c>)
240035b2:	4293      	cmp	r3, r2
240035b4:	d06d      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035b6:	687b      	ldr	r3, [r7, #4]
240035b8:	681b      	ldr	r3, [r3, #0]
240035ba:	4a5c      	ldr	r2, [pc, #368]	; (2400372c <HAL_DMA_Init+0x660>)
240035bc:	4293      	cmp	r3, r2
240035be:	d068      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035c0:	687b      	ldr	r3, [r7, #4]
240035c2:	681b      	ldr	r3, [r3, #0]
240035c4:	4a5a      	ldr	r2, [pc, #360]	; (24003730 <HAL_DMA_Init+0x664>)
240035c6:	4293      	cmp	r3, r2
240035c8:	d063      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035ca:	687b      	ldr	r3, [r7, #4]
240035cc:	681b      	ldr	r3, [r3, #0]
240035ce:	4a59      	ldr	r2, [pc, #356]	; (24003734 <HAL_DMA_Init+0x668>)
240035d0:	4293      	cmp	r3, r2
240035d2:	d05e      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035d4:	687b      	ldr	r3, [r7, #4]
240035d6:	681b      	ldr	r3, [r3, #0]
240035d8:	4a57      	ldr	r2, [pc, #348]	; (24003738 <HAL_DMA_Init+0x66c>)
240035da:	4293      	cmp	r3, r2
240035dc:	d059      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035de:	687b      	ldr	r3, [r7, #4]
240035e0:	681b      	ldr	r3, [r3, #0]
240035e2:	4a56      	ldr	r2, [pc, #344]	; (2400373c <HAL_DMA_Init+0x670>)
240035e4:	4293      	cmp	r3, r2
240035e6:	d054      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035e8:	687b      	ldr	r3, [r7, #4]
240035ea:	681b      	ldr	r3, [r3, #0]
240035ec:	4a54      	ldr	r2, [pc, #336]	; (24003740 <HAL_DMA_Init+0x674>)
240035ee:	4293      	cmp	r3, r2
240035f0:	d04f      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035f2:	687b      	ldr	r3, [r7, #4]
240035f4:	681b      	ldr	r3, [r3, #0]
240035f6:	4a53      	ldr	r2, [pc, #332]	; (24003744 <HAL_DMA_Init+0x678>)
240035f8:	4293      	cmp	r3, r2
240035fa:	d04a      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
240035fc:	687b      	ldr	r3, [r7, #4]
240035fe:	681b      	ldr	r3, [r3, #0]
24003600:	4a51      	ldr	r2, [pc, #324]	; (24003748 <HAL_DMA_Init+0x67c>)
24003602:	4293      	cmp	r3, r2
24003604:	d045      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003606:	687b      	ldr	r3, [r7, #4]
24003608:	681b      	ldr	r3, [r3, #0]
2400360a:	4a50      	ldr	r2, [pc, #320]	; (2400374c <HAL_DMA_Init+0x680>)
2400360c:	4293      	cmp	r3, r2
2400360e:	d040      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003610:	687b      	ldr	r3, [r7, #4]
24003612:	681b      	ldr	r3, [r3, #0]
24003614:	4a4e      	ldr	r2, [pc, #312]	; (24003750 <HAL_DMA_Init+0x684>)
24003616:	4293      	cmp	r3, r2
24003618:	d03b      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
2400361a:	687b      	ldr	r3, [r7, #4]
2400361c:	681b      	ldr	r3, [r3, #0]
2400361e:	4a4d      	ldr	r2, [pc, #308]	; (24003754 <HAL_DMA_Init+0x688>)
24003620:	4293      	cmp	r3, r2
24003622:	d036      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003624:	687b      	ldr	r3, [r7, #4]
24003626:	681b      	ldr	r3, [r3, #0]
24003628:	4a4b      	ldr	r2, [pc, #300]	; (24003758 <HAL_DMA_Init+0x68c>)
2400362a:	4293      	cmp	r3, r2
2400362c:	d031      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
2400362e:	687b      	ldr	r3, [r7, #4]
24003630:	681b      	ldr	r3, [r3, #0]
24003632:	4a4a      	ldr	r2, [pc, #296]	; (2400375c <HAL_DMA_Init+0x690>)
24003634:	4293      	cmp	r3, r2
24003636:	d02c      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003638:	687b      	ldr	r3, [r7, #4]
2400363a:	681b      	ldr	r3, [r3, #0]
2400363c:	4a48      	ldr	r2, [pc, #288]	; (24003760 <HAL_DMA_Init+0x694>)
2400363e:	4293      	cmp	r3, r2
24003640:	d027      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003642:	687b      	ldr	r3, [r7, #4]
24003644:	681b      	ldr	r3, [r3, #0]
24003646:	4a47      	ldr	r2, [pc, #284]	; (24003764 <HAL_DMA_Init+0x698>)
24003648:	4293      	cmp	r3, r2
2400364a:	d022      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
2400364c:	687b      	ldr	r3, [r7, #4]
2400364e:	681b      	ldr	r3, [r3, #0]
24003650:	4a45      	ldr	r2, [pc, #276]	; (24003768 <HAL_DMA_Init+0x69c>)
24003652:	4293      	cmp	r3, r2
24003654:	d01d      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003656:	687b      	ldr	r3, [r7, #4]
24003658:	681b      	ldr	r3, [r3, #0]
2400365a:	4a44      	ldr	r2, [pc, #272]	; (2400376c <HAL_DMA_Init+0x6a0>)
2400365c:	4293      	cmp	r3, r2
2400365e:	d018      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003660:	687b      	ldr	r3, [r7, #4]
24003662:	681b      	ldr	r3, [r3, #0]
24003664:	4a42      	ldr	r2, [pc, #264]	; (24003770 <HAL_DMA_Init+0x6a4>)
24003666:	4293      	cmp	r3, r2
24003668:	d013      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
2400366a:	687b      	ldr	r3, [r7, #4]
2400366c:	681b      	ldr	r3, [r3, #0]
2400366e:	4a41      	ldr	r2, [pc, #260]	; (24003774 <HAL_DMA_Init+0x6a8>)
24003670:	4293      	cmp	r3, r2
24003672:	d00e      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003674:	687b      	ldr	r3, [r7, #4]
24003676:	681b      	ldr	r3, [r3, #0]
24003678:	4a3f      	ldr	r2, [pc, #252]	; (24003778 <HAL_DMA_Init+0x6ac>)
2400367a:	4293      	cmp	r3, r2
2400367c:	d009      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
2400367e:	687b      	ldr	r3, [r7, #4]
24003680:	681b      	ldr	r3, [r3, #0]
24003682:	4a3e      	ldr	r2, [pc, #248]	; (2400377c <HAL_DMA_Init+0x6b0>)
24003684:	4293      	cmp	r3, r2
24003686:	d004      	beq.n	24003692 <HAL_DMA_Init+0x5c6>
24003688:	687b      	ldr	r3, [r7, #4]
2400368a:	681b      	ldr	r3, [r3, #0]
2400368c:	4a3c      	ldr	r2, [pc, #240]	; (24003780 <HAL_DMA_Init+0x6b4>)
2400368e:	4293      	cmp	r3, r2
24003690:	d101      	bne.n	24003696 <HAL_DMA_Init+0x5ca>
24003692:	2301      	movs	r3, #1
24003694:	e000      	b.n	24003698 <HAL_DMA_Init+0x5cc>
24003696:	2300      	movs	r3, #0
24003698:	2b00      	cmp	r3, #0
2400369a:	d032      	beq.n	24003702 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
2400369c:	6878      	ldr	r0, [r7, #4]
2400369e:	f003 f9a5 	bl	240069ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
240036a2:	687b      	ldr	r3, [r7, #4]
240036a4:	689b      	ldr	r3, [r3, #8]
240036a6:	2b80      	cmp	r3, #128	; 0x80
240036a8:	d102      	bne.n	240036b0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240036aa:	687b      	ldr	r3, [r7, #4]
240036ac:	2200      	movs	r2, #0
240036ae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
240036b0:	687b      	ldr	r3, [r7, #4]
240036b2:	685a      	ldr	r2, [r3, #4]
240036b4:	687b      	ldr	r3, [r7, #4]
240036b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240036b8:	b2d2      	uxtb	r2, r2
240036ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240036bc:	687b      	ldr	r3, [r7, #4]
240036be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240036c0:	687a      	ldr	r2, [r7, #4]
240036c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
240036c4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
240036c6:	687b      	ldr	r3, [r7, #4]
240036c8:	685b      	ldr	r3, [r3, #4]
240036ca:	2b00      	cmp	r3, #0
240036cc:	d010      	beq.n	240036f0 <HAL_DMA_Init+0x624>
240036ce:	687b      	ldr	r3, [r7, #4]
240036d0:	685b      	ldr	r3, [r3, #4]
240036d2:	2b08      	cmp	r3, #8
240036d4:	d80c      	bhi.n	240036f0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
240036d6:	6878      	ldr	r0, [r7, #4]
240036d8:	f003 fa22 	bl	24006b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
240036dc:	687b      	ldr	r3, [r7, #4]
240036de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240036e0:	2200      	movs	r2, #0
240036e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240036e4:	687b      	ldr	r3, [r7, #4]
240036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240036e8:	687a      	ldr	r2, [r7, #4]
240036ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
240036ec:	605a      	str	r2, [r3, #4]
240036ee:	e008      	b.n	24003702 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
240036f0:	687b      	ldr	r3, [r7, #4]
240036f2:	2200      	movs	r2, #0
240036f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
240036f6:	687b      	ldr	r3, [r7, #4]
240036f8:	2200      	movs	r2, #0
240036fa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
240036fc:	687b      	ldr	r3, [r7, #4]
240036fe:	2200      	movs	r2, #0
24003700:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003702:	687b      	ldr	r3, [r7, #4]
24003704:	2200      	movs	r2, #0
24003706:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
24003708:	687b      	ldr	r3, [r7, #4]
2400370a:	2201      	movs	r2, #1
2400370c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
24003710:	2300      	movs	r3, #0
}
24003712:	4618      	mov	r0, r3
24003714:	3718      	adds	r7, #24
24003716:	46bd      	mov	sp, r7
24003718:	bd80      	pop	{r7, pc}
2400371a:	bf00      	nop
2400371c:	a7fdabf8 	.word	0xa7fdabf8
24003720:	cccccccd 	.word	0xcccccccd
24003724:	40020010 	.word	0x40020010
24003728:	40020028 	.word	0x40020028
2400372c:	40020040 	.word	0x40020040
24003730:	40020058 	.word	0x40020058
24003734:	40020070 	.word	0x40020070
24003738:	40020088 	.word	0x40020088
2400373c:	400200a0 	.word	0x400200a0
24003740:	400200b8 	.word	0x400200b8
24003744:	40020410 	.word	0x40020410
24003748:	40020428 	.word	0x40020428
2400374c:	40020440 	.word	0x40020440
24003750:	40020458 	.word	0x40020458
24003754:	40020470 	.word	0x40020470
24003758:	40020488 	.word	0x40020488
2400375c:	400204a0 	.word	0x400204a0
24003760:	400204b8 	.word	0x400204b8
24003764:	58025408 	.word	0x58025408
24003768:	5802541c 	.word	0x5802541c
2400376c:	58025430 	.word	0x58025430
24003770:	58025444 	.word	0x58025444
24003774:	58025458 	.word	0x58025458
24003778:	5802546c 	.word	0x5802546c
2400377c:	58025480 	.word	0x58025480
24003780:	58025494 	.word	0x58025494

24003784 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
24003784:	b580      	push	{r7, lr}
24003786:	b084      	sub	sp, #16
24003788:	af00      	add	r7, sp, #0
2400378a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2400378c:	687b      	ldr	r3, [r7, #4]
2400378e:	2b00      	cmp	r3, #0
24003790:	d101      	bne.n	24003796 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
24003792:	2301      	movs	r3, #1
24003794:	e1a8      	b.n	24003ae8 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
24003796:	687b      	ldr	r3, [r7, #4]
24003798:	681b      	ldr	r3, [r3, #0]
2400379a:	4a82      	ldr	r2, [pc, #520]	; (240039a4 <HAL_DMA_DeInit+0x220>)
2400379c:	4293      	cmp	r3, r2
2400379e:	d04a      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037a0:	687b      	ldr	r3, [r7, #4]
240037a2:	681b      	ldr	r3, [r3, #0]
240037a4:	4a80      	ldr	r2, [pc, #512]	; (240039a8 <HAL_DMA_DeInit+0x224>)
240037a6:	4293      	cmp	r3, r2
240037a8:	d045      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037aa:	687b      	ldr	r3, [r7, #4]
240037ac:	681b      	ldr	r3, [r3, #0]
240037ae:	4a7f      	ldr	r2, [pc, #508]	; (240039ac <HAL_DMA_DeInit+0x228>)
240037b0:	4293      	cmp	r3, r2
240037b2:	d040      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037b4:	687b      	ldr	r3, [r7, #4]
240037b6:	681b      	ldr	r3, [r3, #0]
240037b8:	4a7d      	ldr	r2, [pc, #500]	; (240039b0 <HAL_DMA_DeInit+0x22c>)
240037ba:	4293      	cmp	r3, r2
240037bc:	d03b      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037be:	687b      	ldr	r3, [r7, #4]
240037c0:	681b      	ldr	r3, [r3, #0]
240037c2:	4a7c      	ldr	r2, [pc, #496]	; (240039b4 <HAL_DMA_DeInit+0x230>)
240037c4:	4293      	cmp	r3, r2
240037c6:	d036      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037c8:	687b      	ldr	r3, [r7, #4]
240037ca:	681b      	ldr	r3, [r3, #0]
240037cc:	4a7a      	ldr	r2, [pc, #488]	; (240039b8 <HAL_DMA_DeInit+0x234>)
240037ce:	4293      	cmp	r3, r2
240037d0:	d031      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037d2:	687b      	ldr	r3, [r7, #4]
240037d4:	681b      	ldr	r3, [r3, #0]
240037d6:	4a79      	ldr	r2, [pc, #484]	; (240039bc <HAL_DMA_DeInit+0x238>)
240037d8:	4293      	cmp	r3, r2
240037da:	d02c      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037dc:	687b      	ldr	r3, [r7, #4]
240037de:	681b      	ldr	r3, [r3, #0]
240037e0:	4a77      	ldr	r2, [pc, #476]	; (240039c0 <HAL_DMA_DeInit+0x23c>)
240037e2:	4293      	cmp	r3, r2
240037e4:	d027      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037e6:	687b      	ldr	r3, [r7, #4]
240037e8:	681b      	ldr	r3, [r3, #0]
240037ea:	4a76      	ldr	r2, [pc, #472]	; (240039c4 <HAL_DMA_DeInit+0x240>)
240037ec:	4293      	cmp	r3, r2
240037ee:	d022      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037f0:	687b      	ldr	r3, [r7, #4]
240037f2:	681b      	ldr	r3, [r3, #0]
240037f4:	4a74      	ldr	r2, [pc, #464]	; (240039c8 <HAL_DMA_DeInit+0x244>)
240037f6:	4293      	cmp	r3, r2
240037f8:	d01d      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
240037fa:	687b      	ldr	r3, [r7, #4]
240037fc:	681b      	ldr	r3, [r3, #0]
240037fe:	4a73      	ldr	r2, [pc, #460]	; (240039cc <HAL_DMA_DeInit+0x248>)
24003800:	4293      	cmp	r3, r2
24003802:	d018      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
24003804:	687b      	ldr	r3, [r7, #4]
24003806:	681b      	ldr	r3, [r3, #0]
24003808:	4a71      	ldr	r2, [pc, #452]	; (240039d0 <HAL_DMA_DeInit+0x24c>)
2400380a:	4293      	cmp	r3, r2
2400380c:	d013      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
2400380e:	687b      	ldr	r3, [r7, #4]
24003810:	681b      	ldr	r3, [r3, #0]
24003812:	4a70      	ldr	r2, [pc, #448]	; (240039d4 <HAL_DMA_DeInit+0x250>)
24003814:	4293      	cmp	r3, r2
24003816:	d00e      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
24003818:	687b      	ldr	r3, [r7, #4]
2400381a:	681b      	ldr	r3, [r3, #0]
2400381c:	4a6e      	ldr	r2, [pc, #440]	; (240039d8 <HAL_DMA_DeInit+0x254>)
2400381e:	4293      	cmp	r3, r2
24003820:	d009      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
24003822:	687b      	ldr	r3, [r7, #4]
24003824:	681b      	ldr	r3, [r3, #0]
24003826:	4a6d      	ldr	r2, [pc, #436]	; (240039dc <HAL_DMA_DeInit+0x258>)
24003828:	4293      	cmp	r3, r2
2400382a:	d004      	beq.n	24003836 <HAL_DMA_DeInit+0xb2>
2400382c:	687b      	ldr	r3, [r7, #4]
2400382e:	681b      	ldr	r3, [r3, #0]
24003830:	4a6b      	ldr	r2, [pc, #428]	; (240039e0 <HAL_DMA_DeInit+0x25c>)
24003832:	4293      	cmp	r3, r2
24003834:	d108      	bne.n	24003848 <HAL_DMA_DeInit+0xc4>
24003836:	687b      	ldr	r3, [r7, #4]
24003838:	681b      	ldr	r3, [r3, #0]
2400383a:	681a      	ldr	r2, [r3, #0]
2400383c:	687b      	ldr	r3, [r7, #4]
2400383e:	681b      	ldr	r3, [r3, #0]
24003840:	f022 0201 	bic.w	r2, r2, #1
24003844:	601a      	str	r2, [r3, #0]
24003846:	e007      	b.n	24003858 <HAL_DMA_DeInit+0xd4>
24003848:	687b      	ldr	r3, [r7, #4]
2400384a:	681b      	ldr	r3, [r3, #0]
2400384c:	681a      	ldr	r2, [r3, #0]
2400384e:	687b      	ldr	r3, [r7, #4]
24003850:	681b      	ldr	r3, [r3, #0]
24003852:	f022 0201 	bic.w	r2, r2, #1
24003856:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003858:	687b      	ldr	r3, [r7, #4]
2400385a:	681b      	ldr	r3, [r3, #0]
2400385c:	4a51      	ldr	r2, [pc, #324]	; (240039a4 <HAL_DMA_DeInit+0x220>)
2400385e:	4293      	cmp	r3, r2
24003860:	d04a      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
24003862:	687b      	ldr	r3, [r7, #4]
24003864:	681b      	ldr	r3, [r3, #0]
24003866:	4a50      	ldr	r2, [pc, #320]	; (240039a8 <HAL_DMA_DeInit+0x224>)
24003868:	4293      	cmp	r3, r2
2400386a:	d045      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
2400386c:	687b      	ldr	r3, [r7, #4]
2400386e:	681b      	ldr	r3, [r3, #0]
24003870:	4a4e      	ldr	r2, [pc, #312]	; (240039ac <HAL_DMA_DeInit+0x228>)
24003872:	4293      	cmp	r3, r2
24003874:	d040      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
24003876:	687b      	ldr	r3, [r7, #4]
24003878:	681b      	ldr	r3, [r3, #0]
2400387a:	4a4d      	ldr	r2, [pc, #308]	; (240039b0 <HAL_DMA_DeInit+0x22c>)
2400387c:	4293      	cmp	r3, r2
2400387e:	d03b      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
24003880:	687b      	ldr	r3, [r7, #4]
24003882:	681b      	ldr	r3, [r3, #0]
24003884:	4a4b      	ldr	r2, [pc, #300]	; (240039b4 <HAL_DMA_DeInit+0x230>)
24003886:	4293      	cmp	r3, r2
24003888:	d036      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
2400388a:	687b      	ldr	r3, [r7, #4]
2400388c:	681b      	ldr	r3, [r3, #0]
2400388e:	4a4a      	ldr	r2, [pc, #296]	; (240039b8 <HAL_DMA_DeInit+0x234>)
24003890:	4293      	cmp	r3, r2
24003892:	d031      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
24003894:	687b      	ldr	r3, [r7, #4]
24003896:	681b      	ldr	r3, [r3, #0]
24003898:	4a48      	ldr	r2, [pc, #288]	; (240039bc <HAL_DMA_DeInit+0x238>)
2400389a:	4293      	cmp	r3, r2
2400389c:	d02c      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
2400389e:	687b      	ldr	r3, [r7, #4]
240038a0:	681b      	ldr	r3, [r3, #0]
240038a2:	4a47      	ldr	r2, [pc, #284]	; (240039c0 <HAL_DMA_DeInit+0x23c>)
240038a4:	4293      	cmp	r3, r2
240038a6:	d027      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
240038a8:	687b      	ldr	r3, [r7, #4]
240038aa:	681b      	ldr	r3, [r3, #0]
240038ac:	4a45      	ldr	r2, [pc, #276]	; (240039c4 <HAL_DMA_DeInit+0x240>)
240038ae:	4293      	cmp	r3, r2
240038b0:	d022      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
240038b2:	687b      	ldr	r3, [r7, #4]
240038b4:	681b      	ldr	r3, [r3, #0]
240038b6:	4a44      	ldr	r2, [pc, #272]	; (240039c8 <HAL_DMA_DeInit+0x244>)
240038b8:	4293      	cmp	r3, r2
240038ba:	d01d      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
240038bc:	687b      	ldr	r3, [r7, #4]
240038be:	681b      	ldr	r3, [r3, #0]
240038c0:	4a42      	ldr	r2, [pc, #264]	; (240039cc <HAL_DMA_DeInit+0x248>)
240038c2:	4293      	cmp	r3, r2
240038c4:	d018      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
240038c6:	687b      	ldr	r3, [r7, #4]
240038c8:	681b      	ldr	r3, [r3, #0]
240038ca:	4a41      	ldr	r2, [pc, #260]	; (240039d0 <HAL_DMA_DeInit+0x24c>)
240038cc:	4293      	cmp	r3, r2
240038ce:	d013      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
240038d0:	687b      	ldr	r3, [r7, #4]
240038d2:	681b      	ldr	r3, [r3, #0]
240038d4:	4a3f      	ldr	r2, [pc, #252]	; (240039d4 <HAL_DMA_DeInit+0x250>)
240038d6:	4293      	cmp	r3, r2
240038d8:	d00e      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
240038da:	687b      	ldr	r3, [r7, #4]
240038dc:	681b      	ldr	r3, [r3, #0]
240038de:	4a3e      	ldr	r2, [pc, #248]	; (240039d8 <HAL_DMA_DeInit+0x254>)
240038e0:	4293      	cmp	r3, r2
240038e2:	d009      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
240038e4:	687b      	ldr	r3, [r7, #4]
240038e6:	681b      	ldr	r3, [r3, #0]
240038e8:	4a3c      	ldr	r2, [pc, #240]	; (240039dc <HAL_DMA_DeInit+0x258>)
240038ea:	4293      	cmp	r3, r2
240038ec:	d004      	beq.n	240038f8 <HAL_DMA_DeInit+0x174>
240038ee:	687b      	ldr	r3, [r7, #4]
240038f0:	681b      	ldr	r3, [r3, #0]
240038f2:	4a3b      	ldr	r2, [pc, #236]	; (240039e0 <HAL_DMA_DeInit+0x25c>)
240038f4:	4293      	cmp	r3, r2
240038f6:	d101      	bne.n	240038fc <HAL_DMA_DeInit+0x178>
240038f8:	2301      	movs	r3, #1
240038fa:	e000      	b.n	240038fe <HAL_DMA_DeInit+0x17a>
240038fc:	2300      	movs	r3, #0
240038fe:	2b00      	cmp	r3, #0
24003900:	d025      	beq.n	2400394e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
24003902:	687b      	ldr	r3, [r7, #4]
24003904:	681b      	ldr	r3, [r3, #0]
24003906:	2200      	movs	r2, #0
24003908:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
2400390a:	687b      	ldr	r3, [r7, #4]
2400390c:	681b      	ldr	r3, [r3, #0]
2400390e:	2200      	movs	r2, #0
24003910:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
24003912:	687b      	ldr	r3, [r7, #4]
24003914:	681b      	ldr	r3, [r3, #0]
24003916:	2200      	movs	r2, #0
24003918:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
2400391a:	687b      	ldr	r3, [r7, #4]
2400391c:	681b      	ldr	r3, [r3, #0]
2400391e:	2200      	movs	r2, #0
24003920:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
24003922:	687b      	ldr	r3, [r7, #4]
24003924:	681b      	ldr	r3, [r3, #0]
24003926:	2200      	movs	r2, #0
24003928:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
2400392a:	687b      	ldr	r3, [r7, #4]
2400392c:	681b      	ldr	r3, [r3, #0]
2400392e:	2221      	movs	r2, #33	; 0x21
24003930:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24003932:	6878      	ldr	r0, [r7, #4]
24003934:	f002 ff2c 	bl	24006790 <DMA_CalcBaseAndBitshift>
24003938:	4603      	mov	r3, r0
2400393a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400393c:	687b      	ldr	r3, [r7, #4]
2400393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003940:	f003 031f 	and.w	r3, r3, #31
24003944:	223f      	movs	r2, #63	; 0x3f
24003946:	409a      	lsls	r2, r3
24003948:	68bb      	ldr	r3, [r7, #8]
2400394a:	609a      	str	r2, [r3, #8]
2400394c:	e081      	b.n	24003a52 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400394e:	687b      	ldr	r3, [r7, #4]
24003950:	681b      	ldr	r3, [r3, #0]
24003952:	4a24      	ldr	r2, [pc, #144]	; (240039e4 <HAL_DMA_DeInit+0x260>)
24003954:	4293      	cmp	r3, r2
24003956:	d022      	beq.n	2400399e <HAL_DMA_DeInit+0x21a>
24003958:	687b      	ldr	r3, [r7, #4]
2400395a:	681b      	ldr	r3, [r3, #0]
2400395c:	4a22      	ldr	r2, [pc, #136]	; (240039e8 <HAL_DMA_DeInit+0x264>)
2400395e:	4293      	cmp	r3, r2
24003960:	d01d      	beq.n	2400399e <HAL_DMA_DeInit+0x21a>
24003962:	687b      	ldr	r3, [r7, #4]
24003964:	681b      	ldr	r3, [r3, #0]
24003966:	4a21      	ldr	r2, [pc, #132]	; (240039ec <HAL_DMA_DeInit+0x268>)
24003968:	4293      	cmp	r3, r2
2400396a:	d018      	beq.n	2400399e <HAL_DMA_DeInit+0x21a>
2400396c:	687b      	ldr	r3, [r7, #4]
2400396e:	681b      	ldr	r3, [r3, #0]
24003970:	4a1f      	ldr	r2, [pc, #124]	; (240039f0 <HAL_DMA_DeInit+0x26c>)
24003972:	4293      	cmp	r3, r2
24003974:	d013      	beq.n	2400399e <HAL_DMA_DeInit+0x21a>
24003976:	687b      	ldr	r3, [r7, #4]
24003978:	681b      	ldr	r3, [r3, #0]
2400397a:	4a1e      	ldr	r2, [pc, #120]	; (240039f4 <HAL_DMA_DeInit+0x270>)
2400397c:	4293      	cmp	r3, r2
2400397e:	d00e      	beq.n	2400399e <HAL_DMA_DeInit+0x21a>
24003980:	687b      	ldr	r3, [r7, #4]
24003982:	681b      	ldr	r3, [r3, #0]
24003984:	4a1c      	ldr	r2, [pc, #112]	; (240039f8 <HAL_DMA_DeInit+0x274>)
24003986:	4293      	cmp	r3, r2
24003988:	d009      	beq.n	2400399e <HAL_DMA_DeInit+0x21a>
2400398a:	687b      	ldr	r3, [r7, #4]
2400398c:	681b      	ldr	r3, [r3, #0]
2400398e:	4a1b      	ldr	r2, [pc, #108]	; (240039fc <HAL_DMA_DeInit+0x278>)
24003990:	4293      	cmp	r3, r2
24003992:	d004      	beq.n	2400399e <HAL_DMA_DeInit+0x21a>
24003994:	687b      	ldr	r3, [r7, #4]
24003996:	681b      	ldr	r3, [r3, #0]
24003998:	4a19      	ldr	r2, [pc, #100]	; (24003a00 <HAL_DMA_DeInit+0x27c>)
2400399a:	4293      	cmp	r3, r2
2400399c:	d132      	bne.n	24003a04 <HAL_DMA_DeInit+0x280>
2400399e:	2301      	movs	r3, #1
240039a0:	e031      	b.n	24003a06 <HAL_DMA_DeInit+0x282>
240039a2:	bf00      	nop
240039a4:	40020010 	.word	0x40020010
240039a8:	40020028 	.word	0x40020028
240039ac:	40020040 	.word	0x40020040
240039b0:	40020058 	.word	0x40020058
240039b4:	40020070 	.word	0x40020070
240039b8:	40020088 	.word	0x40020088
240039bc:	400200a0 	.word	0x400200a0
240039c0:	400200b8 	.word	0x400200b8
240039c4:	40020410 	.word	0x40020410
240039c8:	40020428 	.word	0x40020428
240039cc:	40020440 	.word	0x40020440
240039d0:	40020458 	.word	0x40020458
240039d4:	40020470 	.word	0x40020470
240039d8:	40020488 	.word	0x40020488
240039dc:	400204a0 	.word	0x400204a0
240039e0:	400204b8 	.word	0x400204b8
240039e4:	58025408 	.word	0x58025408
240039e8:	5802541c 	.word	0x5802541c
240039ec:	58025430 	.word	0x58025430
240039f0:	58025444 	.word	0x58025444
240039f4:	58025458 	.word	0x58025458
240039f8:	5802546c 	.word	0x5802546c
240039fc:	58025480 	.word	0x58025480
24003a00:	58025494 	.word	0x58025494
24003a04:	2300      	movs	r3, #0
24003a06:	2b00      	cmp	r3, #0
24003a08:	d021      	beq.n	24003a4e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
24003a0a:	687b      	ldr	r3, [r7, #4]
24003a0c:	681b      	ldr	r3, [r3, #0]
24003a0e:	2200      	movs	r2, #0
24003a10:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
24003a12:	687b      	ldr	r3, [r7, #4]
24003a14:	681b      	ldr	r3, [r3, #0]
24003a16:	2200      	movs	r2, #0
24003a18:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
24003a1a:	687b      	ldr	r3, [r7, #4]
24003a1c:	681b      	ldr	r3, [r3, #0]
24003a1e:	2200      	movs	r2, #0
24003a20:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
24003a22:	687b      	ldr	r3, [r7, #4]
24003a24:	681b      	ldr	r3, [r3, #0]
24003a26:	2200      	movs	r2, #0
24003a28:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
24003a2a:	687b      	ldr	r3, [r7, #4]
24003a2c:	681b      	ldr	r3, [r3, #0]
24003a2e:	2200      	movs	r2, #0
24003a30:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24003a32:	6878      	ldr	r0, [r7, #4]
24003a34:	f002 feac 	bl	24006790 <DMA_CalcBaseAndBitshift>
24003a38:	4603      	mov	r3, r0
24003a3a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24003a3c:	687b      	ldr	r3, [r7, #4]
24003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003a40:	f003 031f 	and.w	r3, r3, #31
24003a44:	2201      	movs	r2, #1
24003a46:	409a      	lsls	r2, r3
24003a48:	68fb      	ldr	r3, [r7, #12]
24003a4a:	605a      	str	r2, [r3, #4]
24003a4c:	e001      	b.n	24003a52 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
24003a4e:	2301      	movs	r3, #1
24003a50:	e04a      	b.n	24003ae8 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24003a52:	6878      	ldr	r0, [r7, #4]
24003a54:	f002 ffca 	bl	240069ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
24003a58:	687b      	ldr	r3, [r7, #4]
24003a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003a5c:	2b00      	cmp	r3, #0
24003a5e:	d008      	beq.n	24003a72 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
24003a60:	687b      	ldr	r3, [r7, #4]
24003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003a64:	2200      	movs	r2, #0
24003a66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24003a68:	687b      	ldr	r3, [r7, #4]
24003a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003a6c:	687a      	ldr	r2, [r7, #4]
24003a6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
24003a70:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24003a72:	687b      	ldr	r3, [r7, #4]
24003a74:	685b      	ldr	r3, [r3, #4]
24003a76:	2b00      	cmp	r3, #0
24003a78:	d00f      	beq.n	24003a9a <HAL_DMA_DeInit+0x316>
24003a7a:	687b      	ldr	r3, [r7, #4]
24003a7c:	685b      	ldr	r3, [r3, #4]
24003a7e:	2b08      	cmp	r3, #8
24003a80:	d80b      	bhi.n	24003a9a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
24003a82:	6878      	ldr	r0, [r7, #4]
24003a84:	f003 f84c 	bl	24006b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
24003a88:	687b      	ldr	r3, [r7, #4]
24003a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24003a8c:	2200      	movs	r2, #0
24003a8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24003a90:	687b      	ldr	r3, [r7, #4]
24003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24003a94:	687a      	ldr	r2, [r7, #4]
24003a96:	6f52      	ldr	r2, [r2, #116]	; 0x74
24003a98:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
24003a9a:	687b      	ldr	r3, [r7, #4]
24003a9c:	2200      	movs	r2, #0
24003a9e:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
24003aa0:	687b      	ldr	r3, [r7, #4]
24003aa2:	2200      	movs	r2, #0
24003aa4:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
24003aa6:	687b      	ldr	r3, [r7, #4]
24003aa8:	2200      	movs	r2, #0
24003aaa:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
24003aac:	687b      	ldr	r3, [r7, #4]
24003aae:	2200      	movs	r2, #0
24003ab0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
24003ab2:	687b      	ldr	r3, [r7, #4]
24003ab4:	2200      	movs	r2, #0
24003ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
24003ab8:	687b      	ldr	r3, [r7, #4]
24003aba:	2200      	movs	r2, #0
24003abc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
24003abe:	687b      	ldr	r3, [r7, #4]
24003ac0:	2200      	movs	r2, #0
24003ac2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
24003ac4:	687b      	ldr	r3, [r7, #4]
24003ac6:	2200      	movs	r2, #0
24003ac8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
24003aca:	687b      	ldr	r3, [r7, #4]
24003acc:	2200      	movs	r2, #0
24003ace:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003ad0:	687b      	ldr	r3, [r7, #4]
24003ad2:	2200      	movs	r2, #0
24003ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
24003ad6:	687b      	ldr	r3, [r7, #4]
24003ad8:	2200      	movs	r2, #0
24003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24003ade:	687b      	ldr	r3, [r7, #4]
24003ae0:	2200      	movs	r2, #0
24003ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
24003ae6:	2300      	movs	r3, #0
}
24003ae8:	4618      	mov	r0, r3
24003aea:	3710      	adds	r7, #16
24003aec:	46bd      	mov	sp, r7
24003aee:	bd80      	pop	{r7, pc}

24003af0 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24003af0:	b580      	push	{r7, lr}
24003af2:	b086      	sub	sp, #24
24003af4:	af00      	add	r7, sp, #0
24003af6:	60f8      	str	r0, [r7, #12]
24003af8:	60b9      	str	r1, [r7, #8]
24003afa:	607a      	str	r2, [r7, #4]
24003afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24003afe:	2300      	movs	r3, #0
24003b00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003b02:	68fb      	ldr	r3, [r7, #12]
24003b04:	2b00      	cmp	r3, #0
24003b06:	d101      	bne.n	24003b0c <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
24003b08:	2301      	movs	r3, #1
24003b0a:	e0ec      	b.n	24003ce6 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24003b0c:	68fb      	ldr	r3, [r7, #12]
24003b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24003b12:	2b01      	cmp	r3, #1
24003b14:	d101      	bne.n	24003b1a <HAL_DMA_Start+0x2a>
24003b16:	2302      	movs	r3, #2
24003b18:	e0e5      	b.n	24003ce6 <HAL_DMA_Start+0x1f6>
24003b1a:	68fb      	ldr	r3, [r7, #12]
24003b1c:	2201      	movs	r2, #1
24003b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24003b22:	68fb      	ldr	r3, [r7, #12]
24003b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24003b28:	b2db      	uxtb	r3, r3
24003b2a:	2b01      	cmp	r3, #1
24003b2c:	f040 80d0 	bne.w	24003cd0 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003b30:	68fb      	ldr	r3, [r7, #12]
24003b32:	2202      	movs	r2, #2
24003b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003b38:	68fb      	ldr	r3, [r7, #12]
24003b3a:	2200      	movs	r2, #0
24003b3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24003b3e:	68fb      	ldr	r3, [r7, #12]
24003b40:	681b      	ldr	r3, [r3, #0]
24003b42:	4a6b      	ldr	r2, [pc, #428]	; (24003cf0 <HAL_DMA_Start+0x200>)
24003b44:	4293      	cmp	r3, r2
24003b46:	d04a      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b48:	68fb      	ldr	r3, [r7, #12]
24003b4a:	681b      	ldr	r3, [r3, #0]
24003b4c:	4a69      	ldr	r2, [pc, #420]	; (24003cf4 <HAL_DMA_Start+0x204>)
24003b4e:	4293      	cmp	r3, r2
24003b50:	d045      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b52:	68fb      	ldr	r3, [r7, #12]
24003b54:	681b      	ldr	r3, [r3, #0]
24003b56:	4a68      	ldr	r2, [pc, #416]	; (24003cf8 <HAL_DMA_Start+0x208>)
24003b58:	4293      	cmp	r3, r2
24003b5a:	d040      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b5c:	68fb      	ldr	r3, [r7, #12]
24003b5e:	681b      	ldr	r3, [r3, #0]
24003b60:	4a66      	ldr	r2, [pc, #408]	; (24003cfc <HAL_DMA_Start+0x20c>)
24003b62:	4293      	cmp	r3, r2
24003b64:	d03b      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b66:	68fb      	ldr	r3, [r7, #12]
24003b68:	681b      	ldr	r3, [r3, #0]
24003b6a:	4a65      	ldr	r2, [pc, #404]	; (24003d00 <HAL_DMA_Start+0x210>)
24003b6c:	4293      	cmp	r3, r2
24003b6e:	d036      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b70:	68fb      	ldr	r3, [r7, #12]
24003b72:	681b      	ldr	r3, [r3, #0]
24003b74:	4a63      	ldr	r2, [pc, #396]	; (24003d04 <HAL_DMA_Start+0x214>)
24003b76:	4293      	cmp	r3, r2
24003b78:	d031      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b7a:	68fb      	ldr	r3, [r7, #12]
24003b7c:	681b      	ldr	r3, [r3, #0]
24003b7e:	4a62      	ldr	r2, [pc, #392]	; (24003d08 <HAL_DMA_Start+0x218>)
24003b80:	4293      	cmp	r3, r2
24003b82:	d02c      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b84:	68fb      	ldr	r3, [r7, #12]
24003b86:	681b      	ldr	r3, [r3, #0]
24003b88:	4a60      	ldr	r2, [pc, #384]	; (24003d0c <HAL_DMA_Start+0x21c>)
24003b8a:	4293      	cmp	r3, r2
24003b8c:	d027      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b8e:	68fb      	ldr	r3, [r7, #12]
24003b90:	681b      	ldr	r3, [r3, #0]
24003b92:	4a5f      	ldr	r2, [pc, #380]	; (24003d10 <HAL_DMA_Start+0x220>)
24003b94:	4293      	cmp	r3, r2
24003b96:	d022      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003b98:	68fb      	ldr	r3, [r7, #12]
24003b9a:	681b      	ldr	r3, [r3, #0]
24003b9c:	4a5d      	ldr	r2, [pc, #372]	; (24003d14 <HAL_DMA_Start+0x224>)
24003b9e:	4293      	cmp	r3, r2
24003ba0:	d01d      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003ba2:	68fb      	ldr	r3, [r7, #12]
24003ba4:	681b      	ldr	r3, [r3, #0]
24003ba6:	4a5c      	ldr	r2, [pc, #368]	; (24003d18 <HAL_DMA_Start+0x228>)
24003ba8:	4293      	cmp	r3, r2
24003baa:	d018      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003bac:	68fb      	ldr	r3, [r7, #12]
24003bae:	681b      	ldr	r3, [r3, #0]
24003bb0:	4a5a      	ldr	r2, [pc, #360]	; (24003d1c <HAL_DMA_Start+0x22c>)
24003bb2:	4293      	cmp	r3, r2
24003bb4:	d013      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003bb6:	68fb      	ldr	r3, [r7, #12]
24003bb8:	681b      	ldr	r3, [r3, #0]
24003bba:	4a59      	ldr	r2, [pc, #356]	; (24003d20 <HAL_DMA_Start+0x230>)
24003bbc:	4293      	cmp	r3, r2
24003bbe:	d00e      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003bc0:	68fb      	ldr	r3, [r7, #12]
24003bc2:	681b      	ldr	r3, [r3, #0]
24003bc4:	4a57      	ldr	r2, [pc, #348]	; (24003d24 <HAL_DMA_Start+0x234>)
24003bc6:	4293      	cmp	r3, r2
24003bc8:	d009      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003bca:	68fb      	ldr	r3, [r7, #12]
24003bcc:	681b      	ldr	r3, [r3, #0]
24003bce:	4a56      	ldr	r2, [pc, #344]	; (24003d28 <HAL_DMA_Start+0x238>)
24003bd0:	4293      	cmp	r3, r2
24003bd2:	d004      	beq.n	24003bde <HAL_DMA_Start+0xee>
24003bd4:	68fb      	ldr	r3, [r7, #12]
24003bd6:	681b      	ldr	r3, [r3, #0]
24003bd8:	4a54      	ldr	r2, [pc, #336]	; (24003d2c <HAL_DMA_Start+0x23c>)
24003bda:	4293      	cmp	r3, r2
24003bdc:	d108      	bne.n	24003bf0 <HAL_DMA_Start+0x100>
24003bde:	68fb      	ldr	r3, [r7, #12]
24003be0:	681b      	ldr	r3, [r3, #0]
24003be2:	681a      	ldr	r2, [r3, #0]
24003be4:	68fb      	ldr	r3, [r7, #12]
24003be6:	681b      	ldr	r3, [r3, #0]
24003be8:	f022 0201 	bic.w	r2, r2, #1
24003bec:	601a      	str	r2, [r3, #0]
24003bee:	e007      	b.n	24003c00 <HAL_DMA_Start+0x110>
24003bf0:	68fb      	ldr	r3, [r7, #12]
24003bf2:	681b      	ldr	r3, [r3, #0]
24003bf4:	681a      	ldr	r2, [r3, #0]
24003bf6:	68fb      	ldr	r3, [r7, #12]
24003bf8:	681b      	ldr	r3, [r3, #0]
24003bfa:	f022 0201 	bic.w	r2, r2, #1
24003bfe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24003c00:	683b      	ldr	r3, [r7, #0]
24003c02:	687a      	ldr	r2, [r7, #4]
24003c04:	68b9      	ldr	r1, [r7, #8]
24003c06:	68f8      	ldr	r0, [r7, #12]
24003c08:	f002 fc16 	bl	24006438 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24003c0c:	68fb      	ldr	r3, [r7, #12]
24003c0e:	681b      	ldr	r3, [r3, #0]
24003c10:	4a37      	ldr	r2, [pc, #220]	; (24003cf0 <HAL_DMA_Start+0x200>)
24003c12:	4293      	cmp	r3, r2
24003c14:	d04a      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c16:	68fb      	ldr	r3, [r7, #12]
24003c18:	681b      	ldr	r3, [r3, #0]
24003c1a:	4a36      	ldr	r2, [pc, #216]	; (24003cf4 <HAL_DMA_Start+0x204>)
24003c1c:	4293      	cmp	r3, r2
24003c1e:	d045      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c20:	68fb      	ldr	r3, [r7, #12]
24003c22:	681b      	ldr	r3, [r3, #0]
24003c24:	4a34      	ldr	r2, [pc, #208]	; (24003cf8 <HAL_DMA_Start+0x208>)
24003c26:	4293      	cmp	r3, r2
24003c28:	d040      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c2a:	68fb      	ldr	r3, [r7, #12]
24003c2c:	681b      	ldr	r3, [r3, #0]
24003c2e:	4a33      	ldr	r2, [pc, #204]	; (24003cfc <HAL_DMA_Start+0x20c>)
24003c30:	4293      	cmp	r3, r2
24003c32:	d03b      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c34:	68fb      	ldr	r3, [r7, #12]
24003c36:	681b      	ldr	r3, [r3, #0]
24003c38:	4a31      	ldr	r2, [pc, #196]	; (24003d00 <HAL_DMA_Start+0x210>)
24003c3a:	4293      	cmp	r3, r2
24003c3c:	d036      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c3e:	68fb      	ldr	r3, [r7, #12]
24003c40:	681b      	ldr	r3, [r3, #0]
24003c42:	4a30      	ldr	r2, [pc, #192]	; (24003d04 <HAL_DMA_Start+0x214>)
24003c44:	4293      	cmp	r3, r2
24003c46:	d031      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c48:	68fb      	ldr	r3, [r7, #12]
24003c4a:	681b      	ldr	r3, [r3, #0]
24003c4c:	4a2e      	ldr	r2, [pc, #184]	; (24003d08 <HAL_DMA_Start+0x218>)
24003c4e:	4293      	cmp	r3, r2
24003c50:	d02c      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c52:	68fb      	ldr	r3, [r7, #12]
24003c54:	681b      	ldr	r3, [r3, #0]
24003c56:	4a2d      	ldr	r2, [pc, #180]	; (24003d0c <HAL_DMA_Start+0x21c>)
24003c58:	4293      	cmp	r3, r2
24003c5a:	d027      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c5c:	68fb      	ldr	r3, [r7, #12]
24003c5e:	681b      	ldr	r3, [r3, #0]
24003c60:	4a2b      	ldr	r2, [pc, #172]	; (24003d10 <HAL_DMA_Start+0x220>)
24003c62:	4293      	cmp	r3, r2
24003c64:	d022      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c66:	68fb      	ldr	r3, [r7, #12]
24003c68:	681b      	ldr	r3, [r3, #0]
24003c6a:	4a2a      	ldr	r2, [pc, #168]	; (24003d14 <HAL_DMA_Start+0x224>)
24003c6c:	4293      	cmp	r3, r2
24003c6e:	d01d      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c70:	68fb      	ldr	r3, [r7, #12]
24003c72:	681b      	ldr	r3, [r3, #0]
24003c74:	4a28      	ldr	r2, [pc, #160]	; (24003d18 <HAL_DMA_Start+0x228>)
24003c76:	4293      	cmp	r3, r2
24003c78:	d018      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c7a:	68fb      	ldr	r3, [r7, #12]
24003c7c:	681b      	ldr	r3, [r3, #0]
24003c7e:	4a27      	ldr	r2, [pc, #156]	; (24003d1c <HAL_DMA_Start+0x22c>)
24003c80:	4293      	cmp	r3, r2
24003c82:	d013      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c84:	68fb      	ldr	r3, [r7, #12]
24003c86:	681b      	ldr	r3, [r3, #0]
24003c88:	4a25      	ldr	r2, [pc, #148]	; (24003d20 <HAL_DMA_Start+0x230>)
24003c8a:	4293      	cmp	r3, r2
24003c8c:	d00e      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c8e:	68fb      	ldr	r3, [r7, #12]
24003c90:	681b      	ldr	r3, [r3, #0]
24003c92:	4a24      	ldr	r2, [pc, #144]	; (24003d24 <HAL_DMA_Start+0x234>)
24003c94:	4293      	cmp	r3, r2
24003c96:	d009      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003c98:	68fb      	ldr	r3, [r7, #12]
24003c9a:	681b      	ldr	r3, [r3, #0]
24003c9c:	4a22      	ldr	r2, [pc, #136]	; (24003d28 <HAL_DMA_Start+0x238>)
24003c9e:	4293      	cmp	r3, r2
24003ca0:	d004      	beq.n	24003cac <HAL_DMA_Start+0x1bc>
24003ca2:	68fb      	ldr	r3, [r7, #12]
24003ca4:	681b      	ldr	r3, [r3, #0]
24003ca6:	4a21      	ldr	r2, [pc, #132]	; (24003d2c <HAL_DMA_Start+0x23c>)
24003ca8:	4293      	cmp	r3, r2
24003caa:	d108      	bne.n	24003cbe <HAL_DMA_Start+0x1ce>
24003cac:	68fb      	ldr	r3, [r7, #12]
24003cae:	681b      	ldr	r3, [r3, #0]
24003cb0:	681a      	ldr	r2, [r3, #0]
24003cb2:	68fb      	ldr	r3, [r7, #12]
24003cb4:	681b      	ldr	r3, [r3, #0]
24003cb6:	f042 0201 	orr.w	r2, r2, #1
24003cba:	601a      	str	r2, [r3, #0]
24003cbc:	e012      	b.n	24003ce4 <HAL_DMA_Start+0x1f4>
24003cbe:	68fb      	ldr	r3, [r7, #12]
24003cc0:	681b      	ldr	r3, [r3, #0]
24003cc2:	681a      	ldr	r2, [r3, #0]
24003cc4:	68fb      	ldr	r3, [r7, #12]
24003cc6:	681b      	ldr	r3, [r3, #0]
24003cc8:	f042 0201 	orr.w	r2, r2, #1
24003ccc:	601a      	str	r2, [r3, #0]
24003cce:	e009      	b.n	24003ce4 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24003cd0:	68fb      	ldr	r3, [r7, #12]
24003cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
24003cd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24003cd8:	68fb      	ldr	r3, [r7, #12]
24003cda:	2200      	movs	r2, #0
24003cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
24003ce0:	2301      	movs	r3, #1
24003ce2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
24003ce4:	7dfb      	ldrb	r3, [r7, #23]
}
24003ce6:	4618      	mov	r0, r3
24003ce8:	3718      	adds	r7, #24
24003cea:	46bd      	mov	sp, r7
24003cec:	bd80      	pop	{r7, pc}
24003cee:	bf00      	nop
24003cf0:	40020010 	.word	0x40020010
24003cf4:	40020028 	.word	0x40020028
24003cf8:	40020040 	.word	0x40020040
24003cfc:	40020058 	.word	0x40020058
24003d00:	40020070 	.word	0x40020070
24003d04:	40020088 	.word	0x40020088
24003d08:	400200a0 	.word	0x400200a0
24003d0c:	400200b8 	.word	0x400200b8
24003d10:	40020410 	.word	0x40020410
24003d14:	40020428 	.word	0x40020428
24003d18:	40020440 	.word	0x40020440
24003d1c:	40020458 	.word	0x40020458
24003d20:	40020470 	.word	0x40020470
24003d24:	40020488 	.word	0x40020488
24003d28:	400204a0 	.word	0x400204a0
24003d2c:	400204b8 	.word	0x400204b8

24003d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24003d30:	b580      	push	{r7, lr}
24003d32:	b086      	sub	sp, #24
24003d34:	af00      	add	r7, sp, #0
24003d36:	60f8      	str	r0, [r7, #12]
24003d38:	60b9      	str	r1, [r7, #8]
24003d3a:	607a      	str	r2, [r7, #4]
24003d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24003d3e:	2300      	movs	r3, #0
24003d40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003d42:	68fb      	ldr	r3, [r7, #12]
24003d44:	2b00      	cmp	r3, #0
24003d46:	d101      	bne.n	24003d4c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24003d48:	2301      	movs	r3, #1
24003d4a:	e226      	b.n	2400419a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24003d4c:	68fb      	ldr	r3, [r7, #12]
24003d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24003d52:	2b01      	cmp	r3, #1
24003d54:	d101      	bne.n	24003d5a <HAL_DMA_Start_IT+0x2a>
24003d56:	2302      	movs	r3, #2
24003d58:	e21f      	b.n	2400419a <HAL_DMA_Start_IT+0x46a>
24003d5a:	68fb      	ldr	r3, [r7, #12]
24003d5c:	2201      	movs	r2, #1
24003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24003d62:	68fb      	ldr	r3, [r7, #12]
24003d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24003d68:	b2db      	uxtb	r3, r3
24003d6a:	2b01      	cmp	r3, #1
24003d6c:	f040 820a 	bne.w	24004184 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003d70:	68fb      	ldr	r3, [r7, #12]
24003d72:	2202      	movs	r2, #2
24003d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003d78:	68fb      	ldr	r3, [r7, #12]
24003d7a:	2200      	movs	r2, #0
24003d7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24003d7e:	68fb      	ldr	r3, [r7, #12]
24003d80:	681b      	ldr	r3, [r3, #0]
24003d82:	4a68      	ldr	r2, [pc, #416]	; (24003f24 <HAL_DMA_Start_IT+0x1f4>)
24003d84:	4293      	cmp	r3, r2
24003d86:	d04a      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003d88:	68fb      	ldr	r3, [r7, #12]
24003d8a:	681b      	ldr	r3, [r3, #0]
24003d8c:	4a66      	ldr	r2, [pc, #408]	; (24003f28 <HAL_DMA_Start_IT+0x1f8>)
24003d8e:	4293      	cmp	r3, r2
24003d90:	d045      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003d92:	68fb      	ldr	r3, [r7, #12]
24003d94:	681b      	ldr	r3, [r3, #0]
24003d96:	4a65      	ldr	r2, [pc, #404]	; (24003f2c <HAL_DMA_Start_IT+0x1fc>)
24003d98:	4293      	cmp	r3, r2
24003d9a:	d040      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003d9c:	68fb      	ldr	r3, [r7, #12]
24003d9e:	681b      	ldr	r3, [r3, #0]
24003da0:	4a63      	ldr	r2, [pc, #396]	; (24003f30 <HAL_DMA_Start_IT+0x200>)
24003da2:	4293      	cmp	r3, r2
24003da4:	d03b      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003da6:	68fb      	ldr	r3, [r7, #12]
24003da8:	681b      	ldr	r3, [r3, #0]
24003daa:	4a62      	ldr	r2, [pc, #392]	; (24003f34 <HAL_DMA_Start_IT+0x204>)
24003dac:	4293      	cmp	r3, r2
24003dae:	d036      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003db0:	68fb      	ldr	r3, [r7, #12]
24003db2:	681b      	ldr	r3, [r3, #0]
24003db4:	4a60      	ldr	r2, [pc, #384]	; (24003f38 <HAL_DMA_Start_IT+0x208>)
24003db6:	4293      	cmp	r3, r2
24003db8:	d031      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003dba:	68fb      	ldr	r3, [r7, #12]
24003dbc:	681b      	ldr	r3, [r3, #0]
24003dbe:	4a5f      	ldr	r2, [pc, #380]	; (24003f3c <HAL_DMA_Start_IT+0x20c>)
24003dc0:	4293      	cmp	r3, r2
24003dc2:	d02c      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003dc4:	68fb      	ldr	r3, [r7, #12]
24003dc6:	681b      	ldr	r3, [r3, #0]
24003dc8:	4a5d      	ldr	r2, [pc, #372]	; (24003f40 <HAL_DMA_Start_IT+0x210>)
24003dca:	4293      	cmp	r3, r2
24003dcc:	d027      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003dce:	68fb      	ldr	r3, [r7, #12]
24003dd0:	681b      	ldr	r3, [r3, #0]
24003dd2:	4a5c      	ldr	r2, [pc, #368]	; (24003f44 <HAL_DMA_Start_IT+0x214>)
24003dd4:	4293      	cmp	r3, r2
24003dd6:	d022      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003dd8:	68fb      	ldr	r3, [r7, #12]
24003dda:	681b      	ldr	r3, [r3, #0]
24003ddc:	4a5a      	ldr	r2, [pc, #360]	; (24003f48 <HAL_DMA_Start_IT+0x218>)
24003dde:	4293      	cmp	r3, r2
24003de0:	d01d      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003de2:	68fb      	ldr	r3, [r7, #12]
24003de4:	681b      	ldr	r3, [r3, #0]
24003de6:	4a59      	ldr	r2, [pc, #356]	; (24003f4c <HAL_DMA_Start_IT+0x21c>)
24003de8:	4293      	cmp	r3, r2
24003dea:	d018      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003dec:	68fb      	ldr	r3, [r7, #12]
24003dee:	681b      	ldr	r3, [r3, #0]
24003df0:	4a57      	ldr	r2, [pc, #348]	; (24003f50 <HAL_DMA_Start_IT+0x220>)
24003df2:	4293      	cmp	r3, r2
24003df4:	d013      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003df6:	68fb      	ldr	r3, [r7, #12]
24003df8:	681b      	ldr	r3, [r3, #0]
24003dfa:	4a56      	ldr	r2, [pc, #344]	; (24003f54 <HAL_DMA_Start_IT+0x224>)
24003dfc:	4293      	cmp	r3, r2
24003dfe:	d00e      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003e00:	68fb      	ldr	r3, [r7, #12]
24003e02:	681b      	ldr	r3, [r3, #0]
24003e04:	4a54      	ldr	r2, [pc, #336]	; (24003f58 <HAL_DMA_Start_IT+0x228>)
24003e06:	4293      	cmp	r3, r2
24003e08:	d009      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003e0a:	68fb      	ldr	r3, [r7, #12]
24003e0c:	681b      	ldr	r3, [r3, #0]
24003e0e:	4a53      	ldr	r2, [pc, #332]	; (24003f5c <HAL_DMA_Start_IT+0x22c>)
24003e10:	4293      	cmp	r3, r2
24003e12:	d004      	beq.n	24003e1e <HAL_DMA_Start_IT+0xee>
24003e14:	68fb      	ldr	r3, [r7, #12]
24003e16:	681b      	ldr	r3, [r3, #0]
24003e18:	4a51      	ldr	r2, [pc, #324]	; (24003f60 <HAL_DMA_Start_IT+0x230>)
24003e1a:	4293      	cmp	r3, r2
24003e1c:	d108      	bne.n	24003e30 <HAL_DMA_Start_IT+0x100>
24003e1e:	68fb      	ldr	r3, [r7, #12]
24003e20:	681b      	ldr	r3, [r3, #0]
24003e22:	681a      	ldr	r2, [r3, #0]
24003e24:	68fb      	ldr	r3, [r7, #12]
24003e26:	681b      	ldr	r3, [r3, #0]
24003e28:	f022 0201 	bic.w	r2, r2, #1
24003e2c:	601a      	str	r2, [r3, #0]
24003e2e:	e007      	b.n	24003e40 <HAL_DMA_Start_IT+0x110>
24003e30:	68fb      	ldr	r3, [r7, #12]
24003e32:	681b      	ldr	r3, [r3, #0]
24003e34:	681a      	ldr	r2, [r3, #0]
24003e36:	68fb      	ldr	r3, [r7, #12]
24003e38:	681b      	ldr	r3, [r3, #0]
24003e3a:	f022 0201 	bic.w	r2, r2, #1
24003e3e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24003e40:	683b      	ldr	r3, [r7, #0]
24003e42:	687a      	ldr	r2, [r7, #4]
24003e44:	68b9      	ldr	r1, [r7, #8]
24003e46:	68f8      	ldr	r0, [r7, #12]
24003e48:	f002 faf6 	bl	24006438 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003e4c:	68fb      	ldr	r3, [r7, #12]
24003e4e:	681b      	ldr	r3, [r3, #0]
24003e50:	4a34      	ldr	r2, [pc, #208]	; (24003f24 <HAL_DMA_Start_IT+0x1f4>)
24003e52:	4293      	cmp	r3, r2
24003e54:	d04a      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003e56:	68fb      	ldr	r3, [r7, #12]
24003e58:	681b      	ldr	r3, [r3, #0]
24003e5a:	4a33      	ldr	r2, [pc, #204]	; (24003f28 <HAL_DMA_Start_IT+0x1f8>)
24003e5c:	4293      	cmp	r3, r2
24003e5e:	d045      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003e60:	68fb      	ldr	r3, [r7, #12]
24003e62:	681b      	ldr	r3, [r3, #0]
24003e64:	4a31      	ldr	r2, [pc, #196]	; (24003f2c <HAL_DMA_Start_IT+0x1fc>)
24003e66:	4293      	cmp	r3, r2
24003e68:	d040      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003e6a:	68fb      	ldr	r3, [r7, #12]
24003e6c:	681b      	ldr	r3, [r3, #0]
24003e6e:	4a30      	ldr	r2, [pc, #192]	; (24003f30 <HAL_DMA_Start_IT+0x200>)
24003e70:	4293      	cmp	r3, r2
24003e72:	d03b      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003e74:	68fb      	ldr	r3, [r7, #12]
24003e76:	681b      	ldr	r3, [r3, #0]
24003e78:	4a2e      	ldr	r2, [pc, #184]	; (24003f34 <HAL_DMA_Start_IT+0x204>)
24003e7a:	4293      	cmp	r3, r2
24003e7c:	d036      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003e7e:	68fb      	ldr	r3, [r7, #12]
24003e80:	681b      	ldr	r3, [r3, #0]
24003e82:	4a2d      	ldr	r2, [pc, #180]	; (24003f38 <HAL_DMA_Start_IT+0x208>)
24003e84:	4293      	cmp	r3, r2
24003e86:	d031      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003e88:	68fb      	ldr	r3, [r7, #12]
24003e8a:	681b      	ldr	r3, [r3, #0]
24003e8c:	4a2b      	ldr	r2, [pc, #172]	; (24003f3c <HAL_DMA_Start_IT+0x20c>)
24003e8e:	4293      	cmp	r3, r2
24003e90:	d02c      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003e92:	68fb      	ldr	r3, [r7, #12]
24003e94:	681b      	ldr	r3, [r3, #0]
24003e96:	4a2a      	ldr	r2, [pc, #168]	; (24003f40 <HAL_DMA_Start_IT+0x210>)
24003e98:	4293      	cmp	r3, r2
24003e9a:	d027      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003e9c:	68fb      	ldr	r3, [r7, #12]
24003e9e:	681b      	ldr	r3, [r3, #0]
24003ea0:	4a28      	ldr	r2, [pc, #160]	; (24003f44 <HAL_DMA_Start_IT+0x214>)
24003ea2:	4293      	cmp	r3, r2
24003ea4:	d022      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003ea6:	68fb      	ldr	r3, [r7, #12]
24003ea8:	681b      	ldr	r3, [r3, #0]
24003eaa:	4a27      	ldr	r2, [pc, #156]	; (24003f48 <HAL_DMA_Start_IT+0x218>)
24003eac:	4293      	cmp	r3, r2
24003eae:	d01d      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003eb0:	68fb      	ldr	r3, [r7, #12]
24003eb2:	681b      	ldr	r3, [r3, #0]
24003eb4:	4a25      	ldr	r2, [pc, #148]	; (24003f4c <HAL_DMA_Start_IT+0x21c>)
24003eb6:	4293      	cmp	r3, r2
24003eb8:	d018      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003eba:	68fb      	ldr	r3, [r7, #12]
24003ebc:	681b      	ldr	r3, [r3, #0]
24003ebe:	4a24      	ldr	r2, [pc, #144]	; (24003f50 <HAL_DMA_Start_IT+0x220>)
24003ec0:	4293      	cmp	r3, r2
24003ec2:	d013      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003ec4:	68fb      	ldr	r3, [r7, #12]
24003ec6:	681b      	ldr	r3, [r3, #0]
24003ec8:	4a22      	ldr	r2, [pc, #136]	; (24003f54 <HAL_DMA_Start_IT+0x224>)
24003eca:	4293      	cmp	r3, r2
24003ecc:	d00e      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003ece:	68fb      	ldr	r3, [r7, #12]
24003ed0:	681b      	ldr	r3, [r3, #0]
24003ed2:	4a21      	ldr	r2, [pc, #132]	; (24003f58 <HAL_DMA_Start_IT+0x228>)
24003ed4:	4293      	cmp	r3, r2
24003ed6:	d009      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003ed8:	68fb      	ldr	r3, [r7, #12]
24003eda:	681b      	ldr	r3, [r3, #0]
24003edc:	4a1f      	ldr	r2, [pc, #124]	; (24003f5c <HAL_DMA_Start_IT+0x22c>)
24003ede:	4293      	cmp	r3, r2
24003ee0:	d004      	beq.n	24003eec <HAL_DMA_Start_IT+0x1bc>
24003ee2:	68fb      	ldr	r3, [r7, #12]
24003ee4:	681b      	ldr	r3, [r3, #0]
24003ee6:	4a1e      	ldr	r2, [pc, #120]	; (24003f60 <HAL_DMA_Start_IT+0x230>)
24003ee8:	4293      	cmp	r3, r2
24003eea:	d101      	bne.n	24003ef0 <HAL_DMA_Start_IT+0x1c0>
24003eec:	2301      	movs	r3, #1
24003eee:	e000      	b.n	24003ef2 <HAL_DMA_Start_IT+0x1c2>
24003ef0:	2300      	movs	r3, #0
24003ef2:	2b00      	cmp	r3, #0
24003ef4:	d036      	beq.n	24003f64 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24003ef6:	68fb      	ldr	r3, [r7, #12]
24003ef8:	681b      	ldr	r3, [r3, #0]
24003efa:	681b      	ldr	r3, [r3, #0]
24003efc:	f023 021e 	bic.w	r2, r3, #30
24003f00:	68fb      	ldr	r3, [r7, #12]
24003f02:	681b      	ldr	r3, [r3, #0]
24003f04:	f042 0216 	orr.w	r2, r2, #22
24003f08:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24003f0a:	68fb      	ldr	r3, [r7, #12]
24003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24003f0e:	2b00      	cmp	r3, #0
24003f10:	d03e      	beq.n	24003f90 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24003f12:	68fb      	ldr	r3, [r7, #12]
24003f14:	681b      	ldr	r3, [r3, #0]
24003f16:	681a      	ldr	r2, [r3, #0]
24003f18:	68fb      	ldr	r3, [r7, #12]
24003f1a:	681b      	ldr	r3, [r3, #0]
24003f1c:	f042 0208 	orr.w	r2, r2, #8
24003f20:	601a      	str	r2, [r3, #0]
24003f22:	e035      	b.n	24003f90 <HAL_DMA_Start_IT+0x260>
24003f24:	40020010 	.word	0x40020010
24003f28:	40020028 	.word	0x40020028
24003f2c:	40020040 	.word	0x40020040
24003f30:	40020058 	.word	0x40020058
24003f34:	40020070 	.word	0x40020070
24003f38:	40020088 	.word	0x40020088
24003f3c:	400200a0 	.word	0x400200a0
24003f40:	400200b8 	.word	0x400200b8
24003f44:	40020410 	.word	0x40020410
24003f48:	40020428 	.word	0x40020428
24003f4c:	40020440 	.word	0x40020440
24003f50:	40020458 	.word	0x40020458
24003f54:	40020470 	.word	0x40020470
24003f58:	40020488 	.word	0x40020488
24003f5c:	400204a0 	.word	0x400204a0
24003f60:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24003f64:	68fb      	ldr	r3, [r7, #12]
24003f66:	681b      	ldr	r3, [r3, #0]
24003f68:	681b      	ldr	r3, [r3, #0]
24003f6a:	f023 020e 	bic.w	r2, r3, #14
24003f6e:	68fb      	ldr	r3, [r7, #12]
24003f70:	681b      	ldr	r3, [r3, #0]
24003f72:	f042 020a 	orr.w	r2, r2, #10
24003f76:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24003f78:	68fb      	ldr	r3, [r7, #12]
24003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24003f7c:	2b00      	cmp	r3, #0
24003f7e:	d007      	beq.n	24003f90 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24003f80:	68fb      	ldr	r3, [r7, #12]
24003f82:	681b      	ldr	r3, [r3, #0]
24003f84:	681a      	ldr	r2, [r3, #0]
24003f86:	68fb      	ldr	r3, [r7, #12]
24003f88:	681b      	ldr	r3, [r3, #0]
24003f8a:	f042 0204 	orr.w	r2, r2, #4
24003f8e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003f90:	68fb      	ldr	r3, [r7, #12]
24003f92:	681b      	ldr	r3, [r3, #0]
24003f94:	4a83      	ldr	r2, [pc, #524]	; (240041a4 <HAL_DMA_Start_IT+0x474>)
24003f96:	4293      	cmp	r3, r2
24003f98:	d072      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003f9a:	68fb      	ldr	r3, [r7, #12]
24003f9c:	681b      	ldr	r3, [r3, #0]
24003f9e:	4a82      	ldr	r2, [pc, #520]	; (240041a8 <HAL_DMA_Start_IT+0x478>)
24003fa0:	4293      	cmp	r3, r2
24003fa2:	d06d      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003fa4:	68fb      	ldr	r3, [r7, #12]
24003fa6:	681b      	ldr	r3, [r3, #0]
24003fa8:	4a80      	ldr	r2, [pc, #512]	; (240041ac <HAL_DMA_Start_IT+0x47c>)
24003faa:	4293      	cmp	r3, r2
24003fac:	d068      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003fae:	68fb      	ldr	r3, [r7, #12]
24003fb0:	681b      	ldr	r3, [r3, #0]
24003fb2:	4a7f      	ldr	r2, [pc, #508]	; (240041b0 <HAL_DMA_Start_IT+0x480>)
24003fb4:	4293      	cmp	r3, r2
24003fb6:	d063      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003fb8:	68fb      	ldr	r3, [r7, #12]
24003fba:	681b      	ldr	r3, [r3, #0]
24003fbc:	4a7d      	ldr	r2, [pc, #500]	; (240041b4 <HAL_DMA_Start_IT+0x484>)
24003fbe:	4293      	cmp	r3, r2
24003fc0:	d05e      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003fc2:	68fb      	ldr	r3, [r7, #12]
24003fc4:	681b      	ldr	r3, [r3, #0]
24003fc6:	4a7c      	ldr	r2, [pc, #496]	; (240041b8 <HAL_DMA_Start_IT+0x488>)
24003fc8:	4293      	cmp	r3, r2
24003fca:	d059      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003fcc:	68fb      	ldr	r3, [r7, #12]
24003fce:	681b      	ldr	r3, [r3, #0]
24003fd0:	4a7a      	ldr	r2, [pc, #488]	; (240041bc <HAL_DMA_Start_IT+0x48c>)
24003fd2:	4293      	cmp	r3, r2
24003fd4:	d054      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003fd6:	68fb      	ldr	r3, [r7, #12]
24003fd8:	681b      	ldr	r3, [r3, #0]
24003fda:	4a79      	ldr	r2, [pc, #484]	; (240041c0 <HAL_DMA_Start_IT+0x490>)
24003fdc:	4293      	cmp	r3, r2
24003fde:	d04f      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003fe0:	68fb      	ldr	r3, [r7, #12]
24003fe2:	681b      	ldr	r3, [r3, #0]
24003fe4:	4a77      	ldr	r2, [pc, #476]	; (240041c4 <HAL_DMA_Start_IT+0x494>)
24003fe6:	4293      	cmp	r3, r2
24003fe8:	d04a      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003fea:	68fb      	ldr	r3, [r7, #12]
24003fec:	681b      	ldr	r3, [r3, #0]
24003fee:	4a76      	ldr	r2, [pc, #472]	; (240041c8 <HAL_DMA_Start_IT+0x498>)
24003ff0:	4293      	cmp	r3, r2
24003ff2:	d045      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003ff4:	68fb      	ldr	r3, [r7, #12]
24003ff6:	681b      	ldr	r3, [r3, #0]
24003ff8:	4a74      	ldr	r2, [pc, #464]	; (240041cc <HAL_DMA_Start_IT+0x49c>)
24003ffa:	4293      	cmp	r3, r2
24003ffc:	d040      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24003ffe:	68fb      	ldr	r3, [r7, #12]
24004000:	681b      	ldr	r3, [r3, #0]
24004002:	4a73      	ldr	r2, [pc, #460]	; (240041d0 <HAL_DMA_Start_IT+0x4a0>)
24004004:	4293      	cmp	r3, r2
24004006:	d03b      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24004008:	68fb      	ldr	r3, [r7, #12]
2400400a:	681b      	ldr	r3, [r3, #0]
2400400c:	4a71      	ldr	r2, [pc, #452]	; (240041d4 <HAL_DMA_Start_IT+0x4a4>)
2400400e:	4293      	cmp	r3, r2
24004010:	d036      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24004012:	68fb      	ldr	r3, [r7, #12]
24004014:	681b      	ldr	r3, [r3, #0]
24004016:	4a70      	ldr	r2, [pc, #448]	; (240041d8 <HAL_DMA_Start_IT+0x4a8>)
24004018:	4293      	cmp	r3, r2
2400401a:	d031      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
2400401c:	68fb      	ldr	r3, [r7, #12]
2400401e:	681b      	ldr	r3, [r3, #0]
24004020:	4a6e      	ldr	r2, [pc, #440]	; (240041dc <HAL_DMA_Start_IT+0x4ac>)
24004022:	4293      	cmp	r3, r2
24004024:	d02c      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24004026:	68fb      	ldr	r3, [r7, #12]
24004028:	681b      	ldr	r3, [r3, #0]
2400402a:	4a6d      	ldr	r2, [pc, #436]	; (240041e0 <HAL_DMA_Start_IT+0x4b0>)
2400402c:	4293      	cmp	r3, r2
2400402e:	d027      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24004030:	68fb      	ldr	r3, [r7, #12]
24004032:	681b      	ldr	r3, [r3, #0]
24004034:	4a6b      	ldr	r2, [pc, #428]	; (240041e4 <HAL_DMA_Start_IT+0x4b4>)
24004036:	4293      	cmp	r3, r2
24004038:	d022      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
2400403a:	68fb      	ldr	r3, [r7, #12]
2400403c:	681b      	ldr	r3, [r3, #0]
2400403e:	4a6a      	ldr	r2, [pc, #424]	; (240041e8 <HAL_DMA_Start_IT+0x4b8>)
24004040:	4293      	cmp	r3, r2
24004042:	d01d      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24004044:	68fb      	ldr	r3, [r7, #12]
24004046:	681b      	ldr	r3, [r3, #0]
24004048:	4a68      	ldr	r2, [pc, #416]	; (240041ec <HAL_DMA_Start_IT+0x4bc>)
2400404a:	4293      	cmp	r3, r2
2400404c:	d018      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
2400404e:	68fb      	ldr	r3, [r7, #12]
24004050:	681b      	ldr	r3, [r3, #0]
24004052:	4a67      	ldr	r2, [pc, #412]	; (240041f0 <HAL_DMA_Start_IT+0x4c0>)
24004054:	4293      	cmp	r3, r2
24004056:	d013      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24004058:	68fb      	ldr	r3, [r7, #12]
2400405a:	681b      	ldr	r3, [r3, #0]
2400405c:	4a65      	ldr	r2, [pc, #404]	; (240041f4 <HAL_DMA_Start_IT+0x4c4>)
2400405e:	4293      	cmp	r3, r2
24004060:	d00e      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24004062:	68fb      	ldr	r3, [r7, #12]
24004064:	681b      	ldr	r3, [r3, #0]
24004066:	4a64      	ldr	r2, [pc, #400]	; (240041f8 <HAL_DMA_Start_IT+0x4c8>)
24004068:	4293      	cmp	r3, r2
2400406a:	d009      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
2400406c:	68fb      	ldr	r3, [r7, #12]
2400406e:	681b      	ldr	r3, [r3, #0]
24004070:	4a62      	ldr	r2, [pc, #392]	; (240041fc <HAL_DMA_Start_IT+0x4cc>)
24004072:	4293      	cmp	r3, r2
24004074:	d004      	beq.n	24004080 <HAL_DMA_Start_IT+0x350>
24004076:	68fb      	ldr	r3, [r7, #12]
24004078:	681b      	ldr	r3, [r3, #0]
2400407a:	4a61      	ldr	r2, [pc, #388]	; (24004200 <HAL_DMA_Start_IT+0x4d0>)
2400407c:	4293      	cmp	r3, r2
2400407e:	d101      	bne.n	24004084 <HAL_DMA_Start_IT+0x354>
24004080:	2301      	movs	r3, #1
24004082:	e000      	b.n	24004086 <HAL_DMA_Start_IT+0x356>
24004084:	2300      	movs	r3, #0
24004086:	2b00      	cmp	r3, #0
24004088:	d01a      	beq.n	240040c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
2400408a:	68fb      	ldr	r3, [r7, #12]
2400408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400408e:	681b      	ldr	r3, [r3, #0]
24004090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24004094:	2b00      	cmp	r3, #0
24004096:	d007      	beq.n	240040a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24004098:	68fb      	ldr	r3, [r7, #12]
2400409a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400409c:	681a      	ldr	r2, [r3, #0]
2400409e:	68fb      	ldr	r3, [r7, #12]
240040a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240040a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240040a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
240040a8:	68fb      	ldr	r3, [r7, #12]
240040aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240040ac:	2b00      	cmp	r3, #0
240040ae:	d007      	beq.n	240040c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240040b0:	68fb      	ldr	r3, [r7, #12]
240040b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240040b4:	681a      	ldr	r2, [r3, #0]
240040b6:	68fb      	ldr	r3, [r7, #12]
240040b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240040ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240040be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
240040c0:	68fb      	ldr	r3, [r7, #12]
240040c2:	681b      	ldr	r3, [r3, #0]
240040c4:	4a37      	ldr	r2, [pc, #220]	; (240041a4 <HAL_DMA_Start_IT+0x474>)
240040c6:	4293      	cmp	r3, r2
240040c8:	d04a      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
240040ca:	68fb      	ldr	r3, [r7, #12]
240040cc:	681b      	ldr	r3, [r3, #0]
240040ce:	4a36      	ldr	r2, [pc, #216]	; (240041a8 <HAL_DMA_Start_IT+0x478>)
240040d0:	4293      	cmp	r3, r2
240040d2:	d045      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
240040d4:	68fb      	ldr	r3, [r7, #12]
240040d6:	681b      	ldr	r3, [r3, #0]
240040d8:	4a34      	ldr	r2, [pc, #208]	; (240041ac <HAL_DMA_Start_IT+0x47c>)
240040da:	4293      	cmp	r3, r2
240040dc:	d040      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
240040de:	68fb      	ldr	r3, [r7, #12]
240040e0:	681b      	ldr	r3, [r3, #0]
240040e2:	4a33      	ldr	r2, [pc, #204]	; (240041b0 <HAL_DMA_Start_IT+0x480>)
240040e4:	4293      	cmp	r3, r2
240040e6:	d03b      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
240040e8:	68fb      	ldr	r3, [r7, #12]
240040ea:	681b      	ldr	r3, [r3, #0]
240040ec:	4a31      	ldr	r2, [pc, #196]	; (240041b4 <HAL_DMA_Start_IT+0x484>)
240040ee:	4293      	cmp	r3, r2
240040f0:	d036      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
240040f2:	68fb      	ldr	r3, [r7, #12]
240040f4:	681b      	ldr	r3, [r3, #0]
240040f6:	4a30      	ldr	r2, [pc, #192]	; (240041b8 <HAL_DMA_Start_IT+0x488>)
240040f8:	4293      	cmp	r3, r2
240040fa:	d031      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
240040fc:	68fb      	ldr	r3, [r7, #12]
240040fe:	681b      	ldr	r3, [r3, #0]
24004100:	4a2e      	ldr	r2, [pc, #184]	; (240041bc <HAL_DMA_Start_IT+0x48c>)
24004102:	4293      	cmp	r3, r2
24004104:	d02c      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
24004106:	68fb      	ldr	r3, [r7, #12]
24004108:	681b      	ldr	r3, [r3, #0]
2400410a:	4a2d      	ldr	r2, [pc, #180]	; (240041c0 <HAL_DMA_Start_IT+0x490>)
2400410c:	4293      	cmp	r3, r2
2400410e:	d027      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
24004110:	68fb      	ldr	r3, [r7, #12]
24004112:	681b      	ldr	r3, [r3, #0]
24004114:	4a2b      	ldr	r2, [pc, #172]	; (240041c4 <HAL_DMA_Start_IT+0x494>)
24004116:	4293      	cmp	r3, r2
24004118:	d022      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
2400411a:	68fb      	ldr	r3, [r7, #12]
2400411c:	681b      	ldr	r3, [r3, #0]
2400411e:	4a2a      	ldr	r2, [pc, #168]	; (240041c8 <HAL_DMA_Start_IT+0x498>)
24004120:	4293      	cmp	r3, r2
24004122:	d01d      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
24004124:	68fb      	ldr	r3, [r7, #12]
24004126:	681b      	ldr	r3, [r3, #0]
24004128:	4a28      	ldr	r2, [pc, #160]	; (240041cc <HAL_DMA_Start_IT+0x49c>)
2400412a:	4293      	cmp	r3, r2
2400412c:	d018      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
2400412e:	68fb      	ldr	r3, [r7, #12]
24004130:	681b      	ldr	r3, [r3, #0]
24004132:	4a27      	ldr	r2, [pc, #156]	; (240041d0 <HAL_DMA_Start_IT+0x4a0>)
24004134:	4293      	cmp	r3, r2
24004136:	d013      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
24004138:	68fb      	ldr	r3, [r7, #12]
2400413a:	681b      	ldr	r3, [r3, #0]
2400413c:	4a25      	ldr	r2, [pc, #148]	; (240041d4 <HAL_DMA_Start_IT+0x4a4>)
2400413e:	4293      	cmp	r3, r2
24004140:	d00e      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
24004142:	68fb      	ldr	r3, [r7, #12]
24004144:	681b      	ldr	r3, [r3, #0]
24004146:	4a24      	ldr	r2, [pc, #144]	; (240041d8 <HAL_DMA_Start_IT+0x4a8>)
24004148:	4293      	cmp	r3, r2
2400414a:	d009      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
2400414c:	68fb      	ldr	r3, [r7, #12]
2400414e:	681b      	ldr	r3, [r3, #0]
24004150:	4a22      	ldr	r2, [pc, #136]	; (240041dc <HAL_DMA_Start_IT+0x4ac>)
24004152:	4293      	cmp	r3, r2
24004154:	d004      	beq.n	24004160 <HAL_DMA_Start_IT+0x430>
24004156:	68fb      	ldr	r3, [r7, #12]
24004158:	681b      	ldr	r3, [r3, #0]
2400415a:	4a21      	ldr	r2, [pc, #132]	; (240041e0 <HAL_DMA_Start_IT+0x4b0>)
2400415c:	4293      	cmp	r3, r2
2400415e:	d108      	bne.n	24004172 <HAL_DMA_Start_IT+0x442>
24004160:	68fb      	ldr	r3, [r7, #12]
24004162:	681b      	ldr	r3, [r3, #0]
24004164:	681a      	ldr	r2, [r3, #0]
24004166:	68fb      	ldr	r3, [r7, #12]
24004168:	681b      	ldr	r3, [r3, #0]
2400416a:	f042 0201 	orr.w	r2, r2, #1
2400416e:	601a      	str	r2, [r3, #0]
24004170:	e012      	b.n	24004198 <HAL_DMA_Start_IT+0x468>
24004172:	68fb      	ldr	r3, [r7, #12]
24004174:	681b      	ldr	r3, [r3, #0]
24004176:	681a      	ldr	r2, [r3, #0]
24004178:	68fb      	ldr	r3, [r7, #12]
2400417a:	681b      	ldr	r3, [r3, #0]
2400417c:	f042 0201 	orr.w	r2, r2, #1
24004180:	601a      	str	r2, [r3, #0]
24004182:	e009      	b.n	24004198 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004184:	68fb      	ldr	r3, [r7, #12]
24004186:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400418a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
2400418c:	68fb      	ldr	r3, [r7, #12]
2400418e:	2200      	movs	r2, #0
24004190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
24004194:	2301      	movs	r3, #1
24004196:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24004198:	7dfb      	ldrb	r3, [r7, #23]
}
2400419a:	4618      	mov	r0, r3
2400419c:	3718      	adds	r7, #24
2400419e:	46bd      	mov	sp, r7
240041a0:	bd80      	pop	{r7, pc}
240041a2:	bf00      	nop
240041a4:	40020010 	.word	0x40020010
240041a8:	40020028 	.word	0x40020028
240041ac:	40020040 	.word	0x40020040
240041b0:	40020058 	.word	0x40020058
240041b4:	40020070 	.word	0x40020070
240041b8:	40020088 	.word	0x40020088
240041bc:	400200a0 	.word	0x400200a0
240041c0:	400200b8 	.word	0x400200b8
240041c4:	40020410 	.word	0x40020410
240041c8:	40020428 	.word	0x40020428
240041cc:	40020440 	.word	0x40020440
240041d0:	40020458 	.word	0x40020458
240041d4:	40020470 	.word	0x40020470
240041d8:	40020488 	.word	0x40020488
240041dc:	400204a0 	.word	0x400204a0
240041e0:	400204b8 	.word	0x400204b8
240041e4:	58025408 	.word	0x58025408
240041e8:	5802541c 	.word	0x5802541c
240041ec:	58025430 	.word	0x58025430
240041f0:	58025444 	.word	0x58025444
240041f4:	58025458 	.word	0x58025458
240041f8:	5802546c 	.word	0x5802546c
240041fc:	58025480 	.word	0x58025480
24004200:	58025494 	.word	0x58025494

24004204 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
24004204:	b580      	push	{r7, lr}
24004206:	b086      	sub	sp, #24
24004208:	af00      	add	r7, sp, #0
2400420a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
2400420c:	f7fd fff6 	bl	240021fc <HAL_GetTick>
24004210:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004212:	687b      	ldr	r3, [r7, #4]
24004214:	2b00      	cmp	r3, #0
24004216:	d101      	bne.n	2400421c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24004218:	2301      	movs	r3, #1
2400421a:	e2dc      	b.n	240047d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
2400421c:	687b      	ldr	r3, [r7, #4]
2400421e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24004222:	b2db      	uxtb	r3, r3
24004224:	2b02      	cmp	r3, #2
24004226:	d008      	beq.n	2400423a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24004228:	687b      	ldr	r3, [r7, #4]
2400422a:	2280      	movs	r2, #128	; 0x80
2400422c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
2400422e:	687b      	ldr	r3, [r7, #4]
24004230:	2200      	movs	r2, #0
24004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24004236:	2301      	movs	r3, #1
24004238:	e2cd      	b.n	240047d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400423a:	687b      	ldr	r3, [r7, #4]
2400423c:	681b      	ldr	r3, [r3, #0]
2400423e:	4a76      	ldr	r2, [pc, #472]	; (24004418 <HAL_DMA_Abort+0x214>)
24004240:	4293      	cmp	r3, r2
24004242:	d04a      	beq.n	240042da <HAL_DMA_Abort+0xd6>
24004244:	687b      	ldr	r3, [r7, #4]
24004246:	681b      	ldr	r3, [r3, #0]
24004248:	4a74      	ldr	r2, [pc, #464]	; (2400441c <HAL_DMA_Abort+0x218>)
2400424a:	4293      	cmp	r3, r2
2400424c:	d045      	beq.n	240042da <HAL_DMA_Abort+0xd6>
2400424e:	687b      	ldr	r3, [r7, #4]
24004250:	681b      	ldr	r3, [r3, #0]
24004252:	4a73      	ldr	r2, [pc, #460]	; (24004420 <HAL_DMA_Abort+0x21c>)
24004254:	4293      	cmp	r3, r2
24004256:	d040      	beq.n	240042da <HAL_DMA_Abort+0xd6>
24004258:	687b      	ldr	r3, [r7, #4]
2400425a:	681b      	ldr	r3, [r3, #0]
2400425c:	4a71      	ldr	r2, [pc, #452]	; (24004424 <HAL_DMA_Abort+0x220>)
2400425e:	4293      	cmp	r3, r2
24004260:	d03b      	beq.n	240042da <HAL_DMA_Abort+0xd6>
24004262:	687b      	ldr	r3, [r7, #4]
24004264:	681b      	ldr	r3, [r3, #0]
24004266:	4a70      	ldr	r2, [pc, #448]	; (24004428 <HAL_DMA_Abort+0x224>)
24004268:	4293      	cmp	r3, r2
2400426a:	d036      	beq.n	240042da <HAL_DMA_Abort+0xd6>
2400426c:	687b      	ldr	r3, [r7, #4]
2400426e:	681b      	ldr	r3, [r3, #0]
24004270:	4a6e      	ldr	r2, [pc, #440]	; (2400442c <HAL_DMA_Abort+0x228>)
24004272:	4293      	cmp	r3, r2
24004274:	d031      	beq.n	240042da <HAL_DMA_Abort+0xd6>
24004276:	687b      	ldr	r3, [r7, #4]
24004278:	681b      	ldr	r3, [r3, #0]
2400427a:	4a6d      	ldr	r2, [pc, #436]	; (24004430 <HAL_DMA_Abort+0x22c>)
2400427c:	4293      	cmp	r3, r2
2400427e:	d02c      	beq.n	240042da <HAL_DMA_Abort+0xd6>
24004280:	687b      	ldr	r3, [r7, #4]
24004282:	681b      	ldr	r3, [r3, #0]
24004284:	4a6b      	ldr	r2, [pc, #428]	; (24004434 <HAL_DMA_Abort+0x230>)
24004286:	4293      	cmp	r3, r2
24004288:	d027      	beq.n	240042da <HAL_DMA_Abort+0xd6>
2400428a:	687b      	ldr	r3, [r7, #4]
2400428c:	681b      	ldr	r3, [r3, #0]
2400428e:	4a6a      	ldr	r2, [pc, #424]	; (24004438 <HAL_DMA_Abort+0x234>)
24004290:	4293      	cmp	r3, r2
24004292:	d022      	beq.n	240042da <HAL_DMA_Abort+0xd6>
24004294:	687b      	ldr	r3, [r7, #4]
24004296:	681b      	ldr	r3, [r3, #0]
24004298:	4a68      	ldr	r2, [pc, #416]	; (2400443c <HAL_DMA_Abort+0x238>)
2400429a:	4293      	cmp	r3, r2
2400429c:	d01d      	beq.n	240042da <HAL_DMA_Abort+0xd6>
2400429e:	687b      	ldr	r3, [r7, #4]
240042a0:	681b      	ldr	r3, [r3, #0]
240042a2:	4a67      	ldr	r2, [pc, #412]	; (24004440 <HAL_DMA_Abort+0x23c>)
240042a4:	4293      	cmp	r3, r2
240042a6:	d018      	beq.n	240042da <HAL_DMA_Abort+0xd6>
240042a8:	687b      	ldr	r3, [r7, #4]
240042aa:	681b      	ldr	r3, [r3, #0]
240042ac:	4a65      	ldr	r2, [pc, #404]	; (24004444 <HAL_DMA_Abort+0x240>)
240042ae:	4293      	cmp	r3, r2
240042b0:	d013      	beq.n	240042da <HAL_DMA_Abort+0xd6>
240042b2:	687b      	ldr	r3, [r7, #4]
240042b4:	681b      	ldr	r3, [r3, #0]
240042b6:	4a64      	ldr	r2, [pc, #400]	; (24004448 <HAL_DMA_Abort+0x244>)
240042b8:	4293      	cmp	r3, r2
240042ba:	d00e      	beq.n	240042da <HAL_DMA_Abort+0xd6>
240042bc:	687b      	ldr	r3, [r7, #4]
240042be:	681b      	ldr	r3, [r3, #0]
240042c0:	4a62      	ldr	r2, [pc, #392]	; (2400444c <HAL_DMA_Abort+0x248>)
240042c2:	4293      	cmp	r3, r2
240042c4:	d009      	beq.n	240042da <HAL_DMA_Abort+0xd6>
240042c6:	687b      	ldr	r3, [r7, #4]
240042c8:	681b      	ldr	r3, [r3, #0]
240042ca:	4a61      	ldr	r2, [pc, #388]	; (24004450 <HAL_DMA_Abort+0x24c>)
240042cc:	4293      	cmp	r3, r2
240042ce:	d004      	beq.n	240042da <HAL_DMA_Abort+0xd6>
240042d0:	687b      	ldr	r3, [r7, #4]
240042d2:	681b      	ldr	r3, [r3, #0]
240042d4:	4a5f      	ldr	r2, [pc, #380]	; (24004454 <HAL_DMA_Abort+0x250>)
240042d6:	4293      	cmp	r3, r2
240042d8:	d101      	bne.n	240042de <HAL_DMA_Abort+0xda>
240042da:	2301      	movs	r3, #1
240042dc:	e000      	b.n	240042e0 <HAL_DMA_Abort+0xdc>
240042de:	2300      	movs	r3, #0
240042e0:	2b00      	cmp	r3, #0
240042e2:	d013      	beq.n	2400430c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
240042e4:	687b      	ldr	r3, [r7, #4]
240042e6:	681b      	ldr	r3, [r3, #0]
240042e8:	681a      	ldr	r2, [r3, #0]
240042ea:	687b      	ldr	r3, [r7, #4]
240042ec:	681b      	ldr	r3, [r3, #0]
240042ee:	f022 021e 	bic.w	r2, r2, #30
240042f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240042f4:	687b      	ldr	r3, [r7, #4]
240042f6:	681b      	ldr	r3, [r3, #0]
240042f8:	695a      	ldr	r2, [r3, #20]
240042fa:	687b      	ldr	r3, [r7, #4]
240042fc:	681b      	ldr	r3, [r3, #0]
240042fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24004302:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24004304:	687b      	ldr	r3, [r7, #4]
24004306:	681b      	ldr	r3, [r3, #0]
24004308:	617b      	str	r3, [r7, #20]
2400430a:	e00a      	b.n	24004322 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400430c:	687b      	ldr	r3, [r7, #4]
2400430e:	681b      	ldr	r3, [r3, #0]
24004310:	681a      	ldr	r2, [r3, #0]
24004312:	687b      	ldr	r3, [r7, #4]
24004314:	681b      	ldr	r3, [r3, #0]
24004316:	f022 020e 	bic.w	r2, r2, #14
2400431a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
2400431c:	687b      	ldr	r3, [r7, #4]
2400431e:	681b      	ldr	r3, [r3, #0]
24004320:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004322:	687b      	ldr	r3, [r7, #4]
24004324:	681b      	ldr	r3, [r3, #0]
24004326:	4a3c      	ldr	r2, [pc, #240]	; (24004418 <HAL_DMA_Abort+0x214>)
24004328:	4293      	cmp	r3, r2
2400432a:	d072      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
2400432c:	687b      	ldr	r3, [r7, #4]
2400432e:	681b      	ldr	r3, [r3, #0]
24004330:	4a3a      	ldr	r2, [pc, #232]	; (2400441c <HAL_DMA_Abort+0x218>)
24004332:	4293      	cmp	r3, r2
24004334:	d06d      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
24004336:	687b      	ldr	r3, [r7, #4]
24004338:	681b      	ldr	r3, [r3, #0]
2400433a:	4a39      	ldr	r2, [pc, #228]	; (24004420 <HAL_DMA_Abort+0x21c>)
2400433c:	4293      	cmp	r3, r2
2400433e:	d068      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
24004340:	687b      	ldr	r3, [r7, #4]
24004342:	681b      	ldr	r3, [r3, #0]
24004344:	4a37      	ldr	r2, [pc, #220]	; (24004424 <HAL_DMA_Abort+0x220>)
24004346:	4293      	cmp	r3, r2
24004348:	d063      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
2400434a:	687b      	ldr	r3, [r7, #4]
2400434c:	681b      	ldr	r3, [r3, #0]
2400434e:	4a36      	ldr	r2, [pc, #216]	; (24004428 <HAL_DMA_Abort+0x224>)
24004350:	4293      	cmp	r3, r2
24004352:	d05e      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
24004354:	687b      	ldr	r3, [r7, #4]
24004356:	681b      	ldr	r3, [r3, #0]
24004358:	4a34      	ldr	r2, [pc, #208]	; (2400442c <HAL_DMA_Abort+0x228>)
2400435a:	4293      	cmp	r3, r2
2400435c:	d059      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
2400435e:	687b      	ldr	r3, [r7, #4]
24004360:	681b      	ldr	r3, [r3, #0]
24004362:	4a33      	ldr	r2, [pc, #204]	; (24004430 <HAL_DMA_Abort+0x22c>)
24004364:	4293      	cmp	r3, r2
24004366:	d054      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
24004368:	687b      	ldr	r3, [r7, #4]
2400436a:	681b      	ldr	r3, [r3, #0]
2400436c:	4a31      	ldr	r2, [pc, #196]	; (24004434 <HAL_DMA_Abort+0x230>)
2400436e:	4293      	cmp	r3, r2
24004370:	d04f      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
24004372:	687b      	ldr	r3, [r7, #4]
24004374:	681b      	ldr	r3, [r3, #0]
24004376:	4a30      	ldr	r2, [pc, #192]	; (24004438 <HAL_DMA_Abort+0x234>)
24004378:	4293      	cmp	r3, r2
2400437a:	d04a      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
2400437c:	687b      	ldr	r3, [r7, #4]
2400437e:	681b      	ldr	r3, [r3, #0]
24004380:	4a2e      	ldr	r2, [pc, #184]	; (2400443c <HAL_DMA_Abort+0x238>)
24004382:	4293      	cmp	r3, r2
24004384:	d045      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
24004386:	687b      	ldr	r3, [r7, #4]
24004388:	681b      	ldr	r3, [r3, #0]
2400438a:	4a2d      	ldr	r2, [pc, #180]	; (24004440 <HAL_DMA_Abort+0x23c>)
2400438c:	4293      	cmp	r3, r2
2400438e:	d040      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
24004390:	687b      	ldr	r3, [r7, #4]
24004392:	681b      	ldr	r3, [r3, #0]
24004394:	4a2b      	ldr	r2, [pc, #172]	; (24004444 <HAL_DMA_Abort+0x240>)
24004396:	4293      	cmp	r3, r2
24004398:	d03b      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
2400439a:	687b      	ldr	r3, [r7, #4]
2400439c:	681b      	ldr	r3, [r3, #0]
2400439e:	4a2a      	ldr	r2, [pc, #168]	; (24004448 <HAL_DMA_Abort+0x244>)
240043a0:	4293      	cmp	r3, r2
240043a2:	d036      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043a4:	687b      	ldr	r3, [r7, #4]
240043a6:	681b      	ldr	r3, [r3, #0]
240043a8:	4a28      	ldr	r2, [pc, #160]	; (2400444c <HAL_DMA_Abort+0x248>)
240043aa:	4293      	cmp	r3, r2
240043ac:	d031      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043ae:	687b      	ldr	r3, [r7, #4]
240043b0:	681b      	ldr	r3, [r3, #0]
240043b2:	4a27      	ldr	r2, [pc, #156]	; (24004450 <HAL_DMA_Abort+0x24c>)
240043b4:	4293      	cmp	r3, r2
240043b6:	d02c      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043b8:	687b      	ldr	r3, [r7, #4]
240043ba:	681b      	ldr	r3, [r3, #0]
240043bc:	4a25      	ldr	r2, [pc, #148]	; (24004454 <HAL_DMA_Abort+0x250>)
240043be:	4293      	cmp	r3, r2
240043c0:	d027      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043c2:	687b      	ldr	r3, [r7, #4]
240043c4:	681b      	ldr	r3, [r3, #0]
240043c6:	4a24      	ldr	r2, [pc, #144]	; (24004458 <HAL_DMA_Abort+0x254>)
240043c8:	4293      	cmp	r3, r2
240043ca:	d022      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043cc:	687b      	ldr	r3, [r7, #4]
240043ce:	681b      	ldr	r3, [r3, #0]
240043d0:	4a22      	ldr	r2, [pc, #136]	; (2400445c <HAL_DMA_Abort+0x258>)
240043d2:	4293      	cmp	r3, r2
240043d4:	d01d      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043d6:	687b      	ldr	r3, [r7, #4]
240043d8:	681b      	ldr	r3, [r3, #0]
240043da:	4a21      	ldr	r2, [pc, #132]	; (24004460 <HAL_DMA_Abort+0x25c>)
240043dc:	4293      	cmp	r3, r2
240043de:	d018      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043e0:	687b      	ldr	r3, [r7, #4]
240043e2:	681b      	ldr	r3, [r3, #0]
240043e4:	4a1f      	ldr	r2, [pc, #124]	; (24004464 <HAL_DMA_Abort+0x260>)
240043e6:	4293      	cmp	r3, r2
240043e8:	d013      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043ea:	687b      	ldr	r3, [r7, #4]
240043ec:	681b      	ldr	r3, [r3, #0]
240043ee:	4a1e      	ldr	r2, [pc, #120]	; (24004468 <HAL_DMA_Abort+0x264>)
240043f0:	4293      	cmp	r3, r2
240043f2:	d00e      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043f4:	687b      	ldr	r3, [r7, #4]
240043f6:	681b      	ldr	r3, [r3, #0]
240043f8:	4a1c      	ldr	r2, [pc, #112]	; (2400446c <HAL_DMA_Abort+0x268>)
240043fa:	4293      	cmp	r3, r2
240043fc:	d009      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
240043fe:	687b      	ldr	r3, [r7, #4]
24004400:	681b      	ldr	r3, [r3, #0]
24004402:	4a1b      	ldr	r2, [pc, #108]	; (24004470 <HAL_DMA_Abort+0x26c>)
24004404:	4293      	cmp	r3, r2
24004406:	d004      	beq.n	24004412 <HAL_DMA_Abort+0x20e>
24004408:	687b      	ldr	r3, [r7, #4]
2400440a:	681b      	ldr	r3, [r3, #0]
2400440c:	4a19      	ldr	r2, [pc, #100]	; (24004474 <HAL_DMA_Abort+0x270>)
2400440e:	4293      	cmp	r3, r2
24004410:	d132      	bne.n	24004478 <HAL_DMA_Abort+0x274>
24004412:	2301      	movs	r3, #1
24004414:	e031      	b.n	2400447a <HAL_DMA_Abort+0x276>
24004416:	bf00      	nop
24004418:	40020010 	.word	0x40020010
2400441c:	40020028 	.word	0x40020028
24004420:	40020040 	.word	0x40020040
24004424:	40020058 	.word	0x40020058
24004428:	40020070 	.word	0x40020070
2400442c:	40020088 	.word	0x40020088
24004430:	400200a0 	.word	0x400200a0
24004434:	400200b8 	.word	0x400200b8
24004438:	40020410 	.word	0x40020410
2400443c:	40020428 	.word	0x40020428
24004440:	40020440 	.word	0x40020440
24004444:	40020458 	.word	0x40020458
24004448:	40020470 	.word	0x40020470
2400444c:	40020488 	.word	0x40020488
24004450:	400204a0 	.word	0x400204a0
24004454:	400204b8 	.word	0x400204b8
24004458:	58025408 	.word	0x58025408
2400445c:	5802541c 	.word	0x5802541c
24004460:	58025430 	.word	0x58025430
24004464:	58025444 	.word	0x58025444
24004468:	58025458 	.word	0x58025458
2400446c:	5802546c 	.word	0x5802546c
24004470:	58025480 	.word	0x58025480
24004474:	58025494 	.word	0x58025494
24004478:	2300      	movs	r3, #0
2400447a:	2b00      	cmp	r3, #0
2400447c:	d007      	beq.n	2400448e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400447e:	687b      	ldr	r3, [r7, #4]
24004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004482:	681a      	ldr	r2, [r3, #0]
24004484:	687b      	ldr	r3, [r7, #4]
24004486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2400448c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
2400448e:	687b      	ldr	r3, [r7, #4]
24004490:	681b      	ldr	r3, [r3, #0]
24004492:	4a6d      	ldr	r2, [pc, #436]	; (24004648 <HAL_DMA_Abort+0x444>)
24004494:	4293      	cmp	r3, r2
24004496:	d04a      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
24004498:	687b      	ldr	r3, [r7, #4]
2400449a:	681b      	ldr	r3, [r3, #0]
2400449c:	4a6b      	ldr	r2, [pc, #428]	; (2400464c <HAL_DMA_Abort+0x448>)
2400449e:	4293      	cmp	r3, r2
240044a0:	d045      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044a2:	687b      	ldr	r3, [r7, #4]
240044a4:	681b      	ldr	r3, [r3, #0]
240044a6:	4a6a      	ldr	r2, [pc, #424]	; (24004650 <HAL_DMA_Abort+0x44c>)
240044a8:	4293      	cmp	r3, r2
240044aa:	d040      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044ac:	687b      	ldr	r3, [r7, #4]
240044ae:	681b      	ldr	r3, [r3, #0]
240044b0:	4a68      	ldr	r2, [pc, #416]	; (24004654 <HAL_DMA_Abort+0x450>)
240044b2:	4293      	cmp	r3, r2
240044b4:	d03b      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044b6:	687b      	ldr	r3, [r7, #4]
240044b8:	681b      	ldr	r3, [r3, #0]
240044ba:	4a67      	ldr	r2, [pc, #412]	; (24004658 <HAL_DMA_Abort+0x454>)
240044bc:	4293      	cmp	r3, r2
240044be:	d036      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044c0:	687b      	ldr	r3, [r7, #4]
240044c2:	681b      	ldr	r3, [r3, #0]
240044c4:	4a65      	ldr	r2, [pc, #404]	; (2400465c <HAL_DMA_Abort+0x458>)
240044c6:	4293      	cmp	r3, r2
240044c8:	d031      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044ca:	687b      	ldr	r3, [r7, #4]
240044cc:	681b      	ldr	r3, [r3, #0]
240044ce:	4a64      	ldr	r2, [pc, #400]	; (24004660 <HAL_DMA_Abort+0x45c>)
240044d0:	4293      	cmp	r3, r2
240044d2:	d02c      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044d4:	687b      	ldr	r3, [r7, #4]
240044d6:	681b      	ldr	r3, [r3, #0]
240044d8:	4a62      	ldr	r2, [pc, #392]	; (24004664 <HAL_DMA_Abort+0x460>)
240044da:	4293      	cmp	r3, r2
240044dc:	d027      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044de:	687b      	ldr	r3, [r7, #4]
240044e0:	681b      	ldr	r3, [r3, #0]
240044e2:	4a61      	ldr	r2, [pc, #388]	; (24004668 <HAL_DMA_Abort+0x464>)
240044e4:	4293      	cmp	r3, r2
240044e6:	d022      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044e8:	687b      	ldr	r3, [r7, #4]
240044ea:	681b      	ldr	r3, [r3, #0]
240044ec:	4a5f      	ldr	r2, [pc, #380]	; (2400466c <HAL_DMA_Abort+0x468>)
240044ee:	4293      	cmp	r3, r2
240044f0:	d01d      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044f2:	687b      	ldr	r3, [r7, #4]
240044f4:	681b      	ldr	r3, [r3, #0]
240044f6:	4a5e      	ldr	r2, [pc, #376]	; (24004670 <HAL_DMA_Abort+0x46c>)
240044f8:	4293      	cmp	r3, r2
240044fa:	d018      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
240044fc:	687b      	ldr	r3, [r7, #4]
240044fe:	681b      	ldr	r3, [r3, #0]
24004500:	4a5c      	ldr	r2, [pc, #368]	; (24004674 <HAL_DMA_Abort+0x470>)
24004502:	4293      	cmp	r3, r2
24004504:	d013      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
24004506:	687b      	ldr	r3, [r7, #4]
24004508:	681b      	ldr	r3, [r3, #0]
2400450a:	4a5b      	ldr	r2, [pc, #364]	; (24004678 <HAL_DMA_Abort+0x474>)
2400450c:	4293      	cmp	r3, r2
2400450e:	d00e      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
24004510:	687b      	ldr	r3, [r7, #4]
24004512:	681b      	ldr	r3, [r3, #0]
24004514:	4a59      	ldr	r2, [pc, #356]	; (2400467c <HAL_DMA_Abort+0x478>)
24004516:	4293      	cmp	r3, r2
24004518:	d009      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
2400451a:	687b      	ldr	r3, [r7, #4]
2400451c:	681b      	ldr	r3, [r3, #0]
2400451e:	4a58      	ldr	r2, [pc, #352]	; (24004680 <HAL_DMA_Abort+0x47c>)
24004520:	4293      	cmp	r3, r2
24004522:	d004      	beq.n	2400452e <HAL_DMA_Abort+0x32a>
24004524:	687b      	ldr	r3, [r7, #4]
24004526:	681b      	ldr	r3, [r3, #0]
24004528:	4a56      	ldr	r2, [pc, #344]	; (24004684 <HAL_DMA_Abort+0x480>)
2400452a:	4293      	cmp	r3, r2
2400452c:	d108      	bne.n	24004540 <HAL_DMA_Abort+0x33c>
2400452e:	687b      	ldr	r3, [r7, #4]
24004530:	681b      	ldr	r3, [r3, #0]
24004532:	681a      	ldr	r2, [r3, #0]
24004534:	687b      	ldr	r3, [r7, #4]
24004536:	681b      	ldr	r3, [r3, #0]
24004538:	f022 0201 	bic.w	r2, r2, #1
2400453c:	601a      	str	r2, [r3, #0]
2400453e:	e007      	b.n	24004550 <HAL_DMA_Abort+0x34c>
24004540:	687b      	ldr	r3, [r7, #4]
24004542:	681b      	ldr	r3, [r3, #0]
24004544:	681a      	ldr	r2, [r3, #0]
24004546:	687b      	ldr	r3, [r7, #4]
24004548:	681b      	ldr	r3, [r3, #0]
2400454a:	f022 0201 	bic.w	r2, r2, #1
2400454e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24004550:	e013      	b.n	2400457a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24004552:	f7fd fe53 	bl	240021fc <HAL_GetTick>
24004556:	4602      	mov	r2, r0
24004558:	693b      	ldr	r3, [r7, #16]
2400455a:	1ad3      	subs	r3, r2, r3
2400455c:	2b05      	cmp	r3, #5
2400455e:	d90c      	bls.n	2400457a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004560:	687b      	ldr	r3, [r7, #4]
24004562:	2220      	movs	r2, #32
24004564:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24004566:	687b      	ldr	r3, [r7, #4]
24004568:	2203      	movs	r2, #3
2400456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
2400456e:	687b      	ldr	r3, [r7, #4]
24004570:	2200      	movs	r2, #0
24004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24004576:	2301      	movs	r3, #1
24004578:	e12d      	b.n	240047d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
2400457a:	697b      	ldr	r3, [r7, #20]
2400457c:	681b      	ldr	r3, [r3, #0]
2400457e:	f003 0301 	and.w	r3, r3, #1
24004582:	2b00      	cmp	r3, #0
24004584:	d1e5      	bne.n	24004552 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004586:	687b      	ldr	r3, [r7, #4]
24004588:	681b      	ldr	r3, [r3, #0]
2400458a:	4a2f      	ldr	r2, [pc, #188]	; (24004648 <HAL_DMA_Abort+0x444>)
2400458c:	4293      	cmp	r3, r2
2400458e:	d04a      	beq.n	24004626 <HAL_DMA_Abort+0x422>
24004590:	687b      	ldr	r3, [r7, #4]
24004592:	681b      	ldr	r3, [r3, #0]
24004594:	4a2d      	ldr	r2, [pc, #180]	; (2400464c <HAL_DMA_Abort+0x448>)
24004596:	4293      	cmp	r3, r2
24004598:	d045      	beq.n	24004626 <HAL_DMA_Abort+0x422>
2400459a:	687b      	ldr	r3, [r7, #4]
2400459c:	681b      	ldr	r3, [r3, #0]
2400459e:	4a2c      	ldr	r2, [pc, #176]	; (24004650 <HAL_DMA_Abort+0x44c>)
240045a0:	4293      	cmp	r3, r2
240045a2:	d040      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045a4:	687b      	ldr	r3, [r7, #4]
240045a6:	681b      	ldr	r3, [r3, #0]
240045a8:	4a2a      	ldr	r2, [pc, #168]	; (24004654 <HAL_DMA_Abort+0x450>)
240045aa:	4293      	cmp	r3, r2
240045ac:	d03b      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045ae:	687b      	ldr	r3, [r7, #4]
240045b0:	681b      	ldr	r3, [r3, #0]
240045b2:	4a29      	ldr	r2, [pc, #164]	; (24004658 <HAL_DMA_Abort+0x454>)
240045b4:	4293      	cmp	r3, r2
240045b6:	d036      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045b8:	687b      	ldr	r3, [r7, #4]
240045ba:	681b      	ldr	r3, [r3, #0]
240045bc:	4a27      	ldr	r2, [pc, #156]	; (2400465c <HAL_DMA_Abort+0x458>)
240045be:	4293      	cmp	r3, r2
240045c0:	d031      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045c2:	687b      	ldr	r3, [r7, #4]
240045c4:	681b      	ldr	r3, [r3, #0]
240045c6:	4a26      	ldr	r2, [pc, #152]	; (24004660 <HAL_DMA_Abort+0x45c>)
240045c8:	4293      	cmp	r3, r2
240045ca:	d02c      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045cc:	687b      	ldr	r3, [r7, #4]
240045ce:	681b      	ldr	r3, [r3, #0]
240045d0:	4a24      	ldr	r2, [pc, #144]	; (24004664 <HAL_DMA_Abort+0x460>)
240045d2:	4293      	cmp	r3, r2
240045d4:	d027      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045d6:	687b      	ldr	r3, [r7, #4]
240045d8:	681b      	ldr	r3, [r3, #0]
240045da:	4a23      	ldr	r2, [pc, #140]	; (24004668 <HAL_DMA_Abort+0x464>)
240045dc:	4293      	cmp	r3, r2
240045de:	d022      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045e0:	687b      	ldr	r3, [r7, #4]
240045e2:	681b      	ldr	r3, [r3, #0]
240045e4:	4a21      	ldr	r2, [pc, #132]	; (2400466c <HAL_DMA_Abort+0x468>)
240045e6:	4293      	cmp	r3, r2
240045e8:	d01d      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045ea:	687b      	ldr	r3, [r7, #4]
240045ec:	681b      	ldr	r3, [r3, #0]
240045ee:	4a20      	ldr	r2, [pc, #128]	; (24004670 <HAL_DMA_Abort+0x46c>)
240045f0:	4293      	cmp	r3, r2
240045f2:	d018      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045f4:	687b      	ldr	r3, [r7, #4]
240045f6:	681b      	ldr	r3, [r3, #0]
240045f8:	4a1e      	ldr	r2, [pc, #120]	; (24004674 <HAL_DMA_Abort+0x470>)
240045fa:	4293      	cmp	r3, r2
240045fc:	d013      	beq.n	24004626 <HAL_DMA_Abort+0x422>
240045fe:	687b      	ldr	r3, [r7, #4]
24004600:	681b      	ldr	r3, [r3, #0]
24004602:	4a1d      	ldr	r2, [pc, #116]	; (24004678 <HAL_DMA_Abort+0x474>)
24004604:	4293      	cmp	r3, r2
24004606:	d00e      	beq.n	24004626 <HAL_DMA_Abort+0x422>
24004608:	687b      	ldr	r3, [r7, #4]
2400460a:	681b      	ldr	r3, [r3, #0]
2400460c:	4a1b      	ldr	r2, [pc, #108]	; (2400467c <HAL_DMA_Abort+0x478>)
2400460e:	4293      	cmp	r3, r2
24004610:	d009      	beq.n	24004626 <HAL_DMA_Abort+0x422>
24004612:	687b      	ldr	r3, [r7, #4]
24004614:	681b      	ldr	r3, [r3, #0]
24004616:	4a1a      	ldr	r2, [pc, #104]	; (24004680 <HAL_DMA_Abort+0x47c>)
24004618:	4293      	cmp	r3, r2
2400461a:	d004      	beq.n	24004626 <HAL_DMA_Abort+0x422>
2400461c:	687b      	ldr	r3, [r7, #4]
2400461e:	681b      	ldr	r3, [r3, #0]
24004620:	4a18      	ldr	r2, [pc, #96]	; (24004684 <HAL_DMA_Abort+0x480>)
24004622:	4293      	cmp	r3, r2
24004624:	d101      	bne.n	2400462a <HAL_DMA_Abort+0x426>
24004626:	2301      	movs	r3, #1
24004628:	e000      	b.n	2400462c <HAL_DMA_Abort+0x428>
2400462a:	2300      	movs	r3, #0
2400462c:	2b00      	cmp	r3, #0
2400462e:	d02b      	beq.n	24004688 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24004630:	687b      	ldr	r3, [r7, #4]
24004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004634:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004636:	687b      	ldr	r3, [r7, #4]
24004638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400463a:	f003 031f 	and.w	r3, r3, #31
2400463e:	223f      	movs	r2, #63	; 0x3f
24004640:	409a      	lsls	r2, r3
24004642:	68bb      	ldr	r3, [r7, #8]
24004644:	609a      	str	r2, [r3, #8]
24004646:	e02a      	b.n	2400469e <HAL_DMA_Abort+0x49a>
24004648:	40020010 	.word	0x40020010
2400464c:	40020028 	.word	0x40020028
24004650:	40020040 	.word	0x40020040
24004654:	40020058 	.word	0x40020058
24004658:	40020070 	.word	0x40020070
2400465c:	40020088 	.word	0x40020088
24004660:	400200a0 	.word	0x400200a0
24004664:	400200b8 	.word	0x400200b8
24004668:	40020410 	.word	0x40020410
2400466c:	40020428 	.word	0x40020428
24004670:	40020440 	.word	0x40020440
24004674:	40020458 	.word	0x40020458
24004678:	40020470 	.word	0x40020470
2400467c:	40020488 	.word	0x40020488
24004680:	400204a0 	.word	0x400204a0
24004684:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24004688:	687b      	ldr	r3, [r7, #4]
2400468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400468c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400468e:	687b      	ldr	r3, [r7, #4]
24004690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004692:	f003 031f 	and.w	r3, r3, #31
24004696:	2201      	movs	r2, #1
24004698:	409a      	lsls	r2, r3
2400469a:	68fb      	ldr	r3, [r7, #12]
2400469c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400469e:	687b      	ldr	r3, [r7, #4]
240046a0:	681b      	ldr	r3, [r3, #0]
240046a2:	4a4f      	ldr	r2, [pc, #316]	; (240047e0 <HAL_DMA_Abort+0x5dc>)
240046a4:	4293      	cmp	r3, r2
240046a6:	d072      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046a8:	687b      	ldr	r3, [r7, #4]
240046aa:	681b      	ldr	r3, [r3, #0]
240046ac:	4a4d      	ldr	r2, [pc, #308]	; (240047e4 <HAL_DMA_Abort+0x5e0>)
240046ae:	4293      	cmp	r3, r2
240046b0:	d06d      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046b2:	687b      	ldr	r3, [r7, #4]
240046b4:	681b      	ldr	r3, [r3, #0]
240046b6:	4a4c      	ldr	r2, [pc, #304]	; (240047e8 <HAL_DMA_Abort+0x5e4>)
240046b8:	4293      	cmp	r3, r2
240046ba:	d068      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046bc:	687b      	ldr	r3, [r7, #4]
240046be:	681b      	ldr	r3, [r3, #0]
240046c0:	4a4a      	ldr	r2, [pc, #296]	; (240047ec <HAL_DMA_Abort+0x5e8>)
240046c2:	4293      	cmp	r3, r2
240046c4:	d063      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046c6:	687b      	ldr	r3, [r7, #4]
240046c8:	681b      	ldr	r3, [r3, #0]
240046ca:	4a49      	ldr	r2, [pc, #292]	; (240047f0 <HAL_DMA_Abort+0x5ec>)
240046cc:	4293      	cmp	r3, r2
240046ce:	d05e      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046d0:	687b      	ldr	r3, [r7, #4]
240046d2:	681b      	ldr	r3, [r3, #0]
240046d4:	4a47      	ldr	r2, [pc, #284]	; (240047f4 <HAL_DMA_Abort+0x5f0>)
240046d6:	4293      	cmp	r3, r2
240046d8:	d059      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046da:	687b      	ldr	r3, [r7, #4]
240046dc:	681b      	ldr	r3, [r3, #0]
240046de:	4a46      	ldr	r2, [pc, #280]	; (240047f8 <HAL_DMA_Abort+0x5f4>)
240046e0:	4293      	cmp	r3, r2
240046e2:	d054      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046e4:	687b      	ldr	r3, [r7, #4]
240046e6:	681b      	ldr	r3, [r3, #0]
240046e8:	4a44      	ldr	r2, [pc, #272]	; (240047fc <HAL_DMA_Abort+0x5f8>)
240046ea:	4293      	cmp	r3, r2
240046ec:	d04f      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046ee:	687b      	ldr	r3, [r7, #4]
240046f0:	681b      	ldr	r3, [r3, #0]
240046f2:	4a43      	ldr	r2, [pc, #268]	; (24004800 <HAL_DMA_Abort+0x5fc>)
240046f4:	4293      	cmp	r3, r2
240046f6:	d04a      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
240046f8:	687b      	ldr	r3, [r7, #4]
240046fa:	681b      	ldr	r3, [r3, #0]
240046fc:	4a41      	ldr	r2, [pc, #260]	; (24004804 <HAL_DMA_Abort+0x600>)
240046fe:	4293      	cmp	r3, r2
24004700:	d045      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004702:	687b      	ldr	r3, [r7, #4]
24004704:	681b      	ldr	r3, [r3, #0]
24004706:	4a40      	ldr	r2, [pc, #256]	; (24004808 <HAL_DMA_Abort+0x604>)
24004708:	4293      	cmp	r3, r2
2400470a:	d040      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
2400470c:	687b      	ldr	r3, [r7, #4]
2400470e:	681b      	ldr	r3, [r3, #0]
24004710:	4a3e      	ldr	r2, [pc, #248]	; (2400480c <HAL_DMA_Abort+0x608>)
24004712:	4293      	cmp	r3, r2
24004714:	d03b      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004716:	687b      	ldr	r3, [r7, #4]
24004718:	681b      	ldr	r3, [r3, #0]
2400471a:	4a3d      	ldr	r2, [pc, #244]	; (24004810 <HAL_DMA_Abort+0x60c>)
2400471c:	4293      	cmp	r3, r2
2400471e:	d036      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004720:	687b      	ldr	r3, [r7, #4]
24004722:	681b      	ldr	r3, [r3, #0]
24004724:	4a3b      	ldr	r2, [pc, #236]	; (24004814 <HAL_DMA_Abort+0x610>)
24004726:	4293      	cmp	r3, r2
24004728:	d031      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
2400472a:	687b      	ldr	r3, [r7, #4]
2400472c:	681b      	ldr	r3, [r3, #0]
2400472e:	4a3a      	ldr	r2, [pc, #232]	; (24004818 <HAL_DMA_Abort+0x614>)
24004730:	4293      	cmp	r3, r2
24004732:	d02c      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004734:	687b      	ldr	r3, [r7, #4]
24004736:	681b      	ldr	r3, [r3, #0]
24004738:	4a38      	ldr	r2, [pc, #224]	; (2400481c <HAL_DMA_Abort+0x618>)
2400473a:	4293      	cmp	r3, r2
2400473c:	d027      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
2400473e:	687b      	ldr	r3, [r7, #4]
24004740:	681b      	ldr	r3, [r3, #0]
24004742:	4a37      	ldr	r2, [pc, #220]	; (24004820 <HAL_DMA_Abort+0x61c>)
24004744:	4293      	cmp	r3, r2
24004746:	d022      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004748:	687b      	ldr	r3, [r7, #4]
2400474a:	681b      	ldr	r3, [r3, #0]
2400474c:	4a35      	ldr	r2, [pc, #212]	; (24004824 <HAL_DMA_Abort+0x620>)
2400474e:	4293      	cmp	r3, r2
24004750:	d01d      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004752:	687b      	ldr	r3, [r7, #4]
24004754:	681b      	ldr	r3, [r3, #0]
24004756:	4a34      	ldr	r2, [pc, #208]	; (24004828 <HAL_DMA_Abort+0x624>)
24004758:	4293      	cmp	r3, r2
2400475a:	d018      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
2400475c:	687b      	ldr	r3, [r7, #4]
2400475e:	681b      	ldr	r3, [r3, #0]
24004760:	4a32      	ldr	r2, [pc, #200]	; (2400482c <HAL_DMA_Abort+0x628>)
24004762:	4293      	cmp	r3, r2
24004764:	d013      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004766:	687b      	ldr	r3, [r7, #4]
24004768:	681b      	ldr	r3, [r3, #0]
2400476a:	4a31      	ldr	r2, [pc, #196]	; (24004830 <HAL_DMA_Abort+0x62c>)
2400476c:	4293      	cmp	r3, r2
2400476e:	d00e      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004770:	687b      	ldr	r3, [r7, #4]
24004772:	681b      	ldr	r3, [r3, #0]
24004774:	4a2f      	ldr	r2, [pc, #188]	; (24004834 <HAL_DMA_Abort+0x630>)
24004776:	4293      	cmp	r3, r2
24004778:	d009      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
2400477a:	687b      	ldr	r3, [r7, #4]
2400477c:	681b      	ldr	r3, [r3, #0]
2400477e:	4a2e      	ldr	r2, [pc, #184]	; (24004838 <HAL_DMA_Abort+0x634>)
24004780:	4293      	cmp	r3, r2
24004782:	d004      	beq.n	2400478e <HAL_DMA_Abort+0x58a>
24004784:	687b      	ldr	r3, [r7, #4]
24004786:	681b      	ldr	r3, [r3, #0]
24004788:	4a2c      	ldr	r2, [pc, #176]	; (2400483c <HAL_DMA_Abort+0x638>)
2400478a:	4293      	cmp	r3, r2
2400478c:	d101      	bne.n	24004792 <HAL_DMA_Abort+0x58e>
2400478e:	2301      	movs	r3, #1
24004790:	e000      	b.n	24004794 <HAL_DMA_Abort+0x590>
24004792:	2300      	movs	r3, #0
24004794:	2b00      	cmp	r3, #0
24004796:	d015      	beq.n	240047c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004798:	687b      	ldr	r3, [r7, #4]
2400479a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400479c:	687a      	ldr	r2, [r7, #4]
2400479e:	6e92      	ldr	r2, [r2, #104]	; 0x68
240047a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
240047a2:	687b      	ldr	r3, [r7, #4]
240047a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240047a6:	2b00      	cmp	r3, #0
240047a8:	d00c      	beq.n	240047c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240047aa:	687b      	ldr	r3, [r7, #4]
240047ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240047ae:	681a      	ldr	r2, [r3, #0]
240047b0:	687b      	ldr	r3, [r7, #4]
240047b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240047b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240047b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240047ba:	687b      	ldr	r3, [r7, #4]
240047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240047be:	687a      	ldr	r2, [r7, #4]
240047c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
240047c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
240047c4:	687b      	ldr	r3, [r7, #4]
240047c6:	2201      	movs	r2, #1
240047c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
240047cc:	687b      	ldr	r3, [r7, #4]
240047ce:	2200      	movs	r2, #0
240047d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
240047d4:	2300      	movs	r3, #0
}
240047d6:	4618      	mov	r0, r3
240047d8:	3718      	adds	r7, #24
240047da:	46bd      	mov	sp, r7
240047dc:	bd80      	pop	{r7, pc}
240047de:	bf00      	nop
240047e0:	40020010 	.word	0x40020010
240047e4:	40020028 	.word	0x40020028
240047e8:	40020040 	.word	0x40020040
240047ec:	40020058 	.word	0x40020058
240047f0:	40020070 	.word	0x40020070
240047f4:	40020088 	.word	0x40020088
240047f8:	400200a0 	.word	0x400200a0
240047fc:	400200b8 	.word	0x400200b8
24004800:	40020410 	.word	0x40020410
24004804:	40020428 	.word	0x40020428
24004808:	40020440 	.word	0x40020440
2400480c:	40020458 	.word	0x40020458
24004810:	40020470 	.word	0x40020470
24004814:	40020488 	.word	0x40020488
24004818:	400204a0 	.word	0x400204a0
2400481c:	400204b8 	.word	0x400204b8
24004820:	58025408 	.word	0x58025408
24004824:	5802541c 	.word	0x5802541c
24004828:	58025430 	.word	0x58025430
2400482c:	58025444 	.word	0x58025444
24004830:	58025458 	.word	0x58025458
24004834:	5802546c 	.word	0x5802546c
24004838:	58025480 	.word	0x58025480
2400483c:	58025494 	.word	0x58025494

24004840 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
24004840:	b580      	push	{r7, lr}
24004842:	b084      	sub	sp, #16
24004844:	af00      	add	r7, sp, #0
24004846:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004848:	687b      	ldr	r3, [r7, #4]
2400484a:	2b00      	cmp	r3, #0
2400484c:	d101      	bne.n	24004852 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2400484e:	2301      	movs	r3, #1
24004850:	e237      	b.n	24004cc2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
24004852:	687b      	ldr	r3, [r7, #4]
24004854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24004858:	b2db      	uxtb	r3, r3
2400485a:	2b02      	cmp	r3, #2
2400485c:	d004      	beq.n	24004868 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2400485e:	687b      	ldr	r3, [r7, #4]
24004860:	2280      	movs	r2, #128	; 0x80
24004862:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
24004864:	2301      	movs	r3, #1
24004866:	e22c      	b.n	24004cc2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004868:	687b      	ldr	r3, [r7, #4]
2400486a:	681b      	ldr	r3, [r3, #0]
2400486c:	4a5c      	ldr	r2, [pc, #368]	; (240049e0 <HAL_DMA_Abort_IT+0x1a0>)
2400486e:	4293      	cmp	r3, r2
24004870:	d04a      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
24004872:	687b      	ldr	r3, [r7, #4]
24004874:	681b      	ldr	r3, [r3, #0]
24004876:	4a5b      	ldr	r2, [pc, #364]	; (240049e4 <HAL_DMA_Abort_IT+0x1a4>)
24004878:	4293      	cmp	r3, r2
2400487a:	d045      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
2400487c:	687b      	ldr	r3, [r7, #4]
2400487e:	681b      	ldr	r3, [r3, #0]
24004880:	4a59      	ldr	r2, [pc, #356]	; (240049e8 <HAL_DMA_Abort_IT+0x1a8>)
24004882:	4293      	cmp	r3, r2
24004884:	d040      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
24004886:	687b      	ldr	r3, [r7, #4]
24004888:	681b      	ldr	r3, [r3, #0]
2400488a:	4a58      	ldr	r2, [pc, #352]	; (240049ec <HAL_DMA_Abort_IT+0x1ac>)
2400488c:	4293      	cmp	r3, r2
2400488e:	d03b      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
24004890:	687b      	ldr	r3, [r7, #4]
24004892:	681b      	ldr	r3, [r3, #0]
24004894:	4a56      	ldr	r2, [pc, #344]	; (240049f0 <HAL_DMA_Abort_IT+0x1b0>)
24004896:	4293      	cmp	r3, r2
24004898:	d036      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
2400489a:	687b      	ldr	r3, [r7, #4]
2400489c:	681b      	ldr	r3, [r3, #0]
2400489e:	4a55      	ldr	r2, [pc, #340]	; (240049f4 <HAL_DMA_Abort_IT+0x1b4>)
240048a0:	4293      	cmp	r3, r2
240048a2:	d031      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048a4:	687b      	ldr	r3, [r7, #4]
240048a6:	681b      	ldr	r3, [r3, #0]
240048a8:	4a53      	ldr	r2, [pc, #332]	; (240049f8 <HAL_DMA_Abort_IT+0x1b8>)
240048aa:	4293      	cmp	r3, r2
240048ac:	d02c      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048ae:	687b      	ldr	r3, [r7, #4]
240048b0:	681b      	ldr	r3, [r3, #0]
240048b2:	4a52      	ldr	r2, [pc, #328]	; (240049fc <HAL_DMA_Abort_IT+0x1bc>)
240048b4:	4293      	cmp	r3, r2
240048b6:	d027      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048b8:	687b      	ldr	r3, [r7, #4]
240048ba:	681b      	ldr	r3, [r3, #0]
240048bc:	4a50      	ldr	r2, [pc, #320]	; (24004a00 <HAL_DMA_Abort_IT+0x1c0>)
240048be:	4293      	cmp	r3, r2
240048c0:	d022      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048c2:	687b      	ldr	r3, [r7, #4]
240048c4:	681b      	ldr	r3, [r3, #0]
240048c6:	4a4f      	ldr	r2, [pc, #316]	; (24004a04 <HAL_DMA_Abort_IT+0x1c4>)
240048c8:	4293      	cmp	r3, r2
240048ca:	d01d      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048cc:	687b      	ldr	r3, [r7, #4]
240048ce:	681b      	ldr	r3, [r3, #0]
240048d0:	4a4d      	ldr	r2, [pc, #308]	; (24004a08 <HAL_DMA_Abort_IT+0x1c8>)
240048d2:	4293      	cmp	r3, r2
240048d4:	d018      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048d6:	687b      	ldr	r3, [r7, #4]
240048d8:	681b      	ldr	r3, [r3, #0]
240048da:	4a4c      	ldr	r2, [pc, #304]	; (24004a0c <HAL_DMA_Abort_IT+0x1cc>)
240048dc:	4293      	cmp	r3, r2
240048de:	d013      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048e0:	687b      	ldr	r3, [r7, #4]
240048e2:	681b      	ldr	r3, [r3, #0]
240048e4:	4a4a      	ldr	r2, [pc, #296]	; (24004a10 <HAL_DMA_Abort_IT+0x1d0>)
240048e6:	4293      	cmp	r3, r2
240048e8:	d00e      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048ea:	687b      	ldr	r3, [r7, #4]
240048ec:	681b      	ldr	r3, [r3, #0]
240048ee:	4a49      	ldr	r2, [pc, #292]	; (24004a14 <HAL_DMA_Abort_IT+0x1d4>)
240048f0:	4293      	cmp	r3, r2
240048f2:	d009      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048f4:	687b      	ldr	r3, [r7, #4]
240048f6:	681b      	ldr	r3, [r3, #0]
240048f8:	4a47      	ldr	r2, [pc, #284]	; (24004a18 <HAL_DMA_Abort_IT+0x1d8>)
240048fa:	4293      	cmp	r3, r2
240048fc:	d004      	beq.n	24004908 <HAL_DMA_Abort_IT+0xc8>
240048fe:	687b      	ldr	r3, [r7, #4]
24004900:	681b      	ldr	r3, [r3, #0]
24004902:	4a46      	ldr	r2, [pc, #280]	; (24004a1c <HAL_DMA_Abort_IT+0x1dc>)
24004904:	4293      	cmp	r3, r2
24004906:	d101      	bne.n	2400490c <HAL_DMA_Abort_IT+0xcc>
24004908:	2301      	movs	r3, #1
2400490a:	e000      	b.n	2400490e <HAL_DMA_Abort_IT+0xce>
2400490c:	2300      	movs	r3, #0
2400490e:	2b00      	cmp	r3, #0
24004910:	f000 8086 	beq.w	24004a20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
24004914:	687b      	ldr	r3, [r7, #4]
24004916:	2204      	movs	r2, #4
24004918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
2400491c:	687b      	ldr	r3, [r7, #4]
2400491e:	681b      	ldr	r3, [r3, #0]
24004920:	4a2f      	ldr	r2, [pc, #188]	; (240049e0 <HAL_DMA_Abort_IT+0x1a0>)
24004922:	4293      	cmp	r3, r2
24004924:	d04a      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
24004926:	687b      	ldr	r3, [r7, #4]
24004928:	681b      	ldr	r3, [r3, #0]
2400492a:	4a2e      	ldr	r2, [pc, #184]	; (240049e4 <HAL_DMA_Abort_IT+0x1a4>)
2400492c:	4293      	cmp	r3, r2
2400492e:	d045      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
24004930:	687b      	ldr	r3, [r7, #4]
24004932:	681b      	ldr	r3, [r3, #0]
24004934:	4a2c      	ldr	r2, [pc, #176]	; (240049e8 <HAL_DMA_Abort_IT+0x1a8>)
24004936:	4293      	cmp	r3, r2
24004938:	d040      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
2400493a:	687b      	ldr	r3, [r7, #4]
2400493c:	681b      	ldr	r3, [r3, #0]
2400493e:	4a2b      	ldr	r2, [pc, #172]	; (240049ec <HAL_DMA_Abort_IT+0x1ac>)
24004940:	4293      	cmp	r3, r2
24004942:	d03b      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
24004944:	687b      	ldr	r3, [r7, #4]
24004946:	681b      	ldr	r3, [r3, #0]
24004948:	4a29      	ldr	r2, [pc, #164]	; (240049f0 <HAL_DMA_Abort_IT+0x1b0>)
2400494a:	4293      	cmp	r3, r2
2400494c:	d036      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
2400494e:	687b      	ldr	r3, [r7, #4]
24004950:	681b      	ldr	r3, [r3, #0]
24004952:	4a28      	ldr	r2, [pc, #160]	; (240049f4 <HAL_DMA_Abort_IT+0x1b4>)
24004954:	4293      	cmp	r3, r2
24004956:	d031      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
24004958:	687b      	ldr	r3, [r7, #4]
2400495a:	681b      	ldr	r3, [r3, #0]
2400495c:	4a26      	ldr	r2, [pc, #152]	; (240049f8 <HAL_DMA_Abort_IT+0x1b8>)
2400495e:	4293      	cmp	r3, r2
24004960:	d02c      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
24004962:	687b      	ldr	r3, [r7, #4]
24004964:	681b      	ldr	r3, [r3, #0]
24004966:	4a25      	ldr	r2, [pc, #148]	; (240049fc <HAL_DMA_Abort_IT+0x1bc>)
24004968:	4293      	cmp	r3, r2
2400496a:	d027      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
2400496c:	687b      	ldr	r3, [r7, #4]
2400496e:	681b      	ldr	r3, [r3, #0]
24004970:	4a23      	ldr	r2, [pc, #140]	; (24004a00 <HAL_DMA_Abort_IT+0x1c0>)
24004972:	4293      	cmp	r3, r2
24004974:	d022      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
24004976:	687b      	ldr	r3, [r7, #4]
24004978:	681b      	ldr	r3, [r3, #0]
2400497a:	4a22      	ldr	r2, [pc, #136]	; (24004a04 <HAL_DMA_Abort_IT+0x1c4>)
2400497c:	4293      	cmp	r3, r2
2400497e:	d01d      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
24004980:	687b      	ldr	r3, [r7, #4]
24004982:	681b      	ldr	r3, [r3, #0]
24004984:	4a20      	ldr	r2, [pc, #128]	; (24004a08 <HAL_DMA_Abort_IT+0x1c8>)
24004986:	4293      	cmp	r3, r2
24004988:	d018      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
2400498a:	687b      	ldr	r3, [r7, #4]
2400498c:	681b      	ldr	r3, [r3, #0]
2400498e:	4a1f      	ldr	r2, [pc, #124]	; (24004a0c <HAL_DMA_Abort_IT+0x1cc>)
24004990:	4293      	cmp	r3, r2
24004992:	d013      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
24004994:	687b      	ldr	r3, [r7, #4]
24004996:	681b      	ldr	r3, [r3, #0]
24004998:	4a1d      	ldr	r2, [pc, #116]	; (24004a10 <HAL_DMA_Abort_IT+0x1d0>)
2400499a:	4293      	cmp	r3, r2
2400499c:	d00e      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
2400499e:	687b      	ldr	r3, [r7, #4]
240049a0:	681b      	ldr	r3, [r3, #0]
240049a2:	4a1c      	ldr	r2, [pc, #112]	; (24004a14 <HAL_DMA_Abort_IT+0x1d4>)
240049a4:	4293      	cmp	r3, r2
240049a6:	d009      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
240049a8:	687b      	ldr	r3, [r7, #4]
240049aa:	681b      	ldr	r3, [r3, #0]
240049ac:	4a1a      	ldr	r2, [pc, #104]	; (24004a18 <HAL_DMA_Abort_IT+0x1d8>)
240049ae:	4293      	cmp	r3, r2
240049b0:	d004      	beq.n	240049bc <HAL_DMA_Abort_IT+0x17c>
240049b2:	687b      	ldr	r3, [r7, #4]
240049b4:	681b      	ldr	r3, [r3, #0]
240049b6:	4a19      	ldr	r2, [pc, #100]	; (24004a1c <HAL_DMA_Abort_IT+0x1dc>)
240049b8:	4293      	cmp	r3, r2
240049ba:	d108      	bne.n	240049ce <HAL_DMA_Abort_IT+0x18e>
240049bc:	687b      	ldr	r3, [r7, #4]
240049be:	681b      	ldr	r3, [r3, #0]
240049c0:	681a      	ldr	r2, [r3, #0]
240049c2:	687b      	ldr	r3, [r7, #4]
240049c4:	681b      	ldr	r3, [r3, #0]
240049c6:	f022 0201 	bic.w	r2, r2, #1
240049ca:	601a      	str	r2, [r3, #0]
240049cc:	e178      	b.n	24004cc0 <HAL_DMA_Abort_IT+0x480>
240049ce:	687b      	ldr	r3, [r7, #4]
240049d0:	681b      	ldr	r3, [r3, #0]
240049d2:	681a      	ldr	r2, [r3, #0]
240049d4:	687b      	ldr	r3, [r7, #4]
240049d6:	681b      	ldr	r3, [r3, #0]
240049d8:	f022 0201 	bic.w	r2, r2, #1
240049dc:	601a      	str	r2, [r3, #0]
240049de:	e16f      	b.n	24004cc0 <HAL_DMA_Abort_IT+0x480>
240049e0:	40020010 	.word	0x40020010
240049e4:	40020028 	.word	0x40020028
240049e8:	40020040 	.word	0x40020040
240049ec:	40020058 	.word	0x40020058
240049f0:	40020070 	.word	0x40020070
240049f4:	40020088 	.word	0x40020088
240049f8:	400200a0 	.word	0x400200a0
240049fc:	400200b8 	.word	0x400200b8
24004a00:	40020410 	.word	0x40020410
24004a04:	40020428 	.word	0x40020428
24004a08:	40020440 	.word	0x40020440
24004a0c:	40020458 	.word	0x40020458
24004a10:	40020470 	.word	0x40020470
24004a14:	40020488 	.word	0x40020488
24004a18:	400204a0 	.word	0x400204a0
24004a1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24004a20:	687b      	ldr	r3, [r7, #4]
24004a22:	681b      	ldr	r3, [r3, #0]
24004a24:	681a      	ldr	r2, [r3, #0]
24004a26:	687b      	ldr	r3, [r7, #4]
24004a28:	681b      	ldr	r3, [r3, #0]
24004a2a:	f022 020e 	bic.w	r2, r2, #14
24004a2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
24004a30:	687b      	ldr	r3, [r7, #4]
24004a32:	681b      	ldr	r3, [r3, #0]
24004a34:	4a6c      	ldr	r2, [pc, #432]	; (24004be8 <HAL_DMA_Abort_IT+0x3a8>)
24004a36:	4293      	cmp	r3, r2
24004a38:	d04a      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a3a:	687b      	ldr	r3, [r7, #4]
24004a3c:	681b      	ldr	r3, [r3, #0]
24004a3e:	4a6b      	ldr	r2, [pc, #428]	; (24004bec <HAL_DMA_Abort_IT+0x3ac>)
24004a40:	4293      	cmp	r3, r2
24004a42:	d045      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a44:	687b      	ldr	r3, [r7, #4]
24004a46:	681b      	ldr	r3, [r3, #0]
24004a48:	4a69      	ldr	r2, [pc, #420]	; (24004bf0 <HAL_DMA_Abort_IT+0x3b0>)
24004a4a:	4293      	cmp	r3, r2
24004a4c:	d040      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a4e:	687b      	ldr	r3, [r7, #4]
24004a50:	681b      	ldr	r3, [r3, #0]
24004a52:	4a68      	ldr	r2, [pc, #416]	; (24004bf4 <HAL_DMA_Abort_IT+0x3b4>)
24004a54:	4293      	cmp	r3, r2
24004a56:	d03b      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a58:	687b      	ldr	r3, [r7, #4]
24004a5a:	681b      	ldr	r3, [r3, #0]
24004a5c:	4a66      	ldr	r2, [pc, #408]	; (24004bf8 <HAL_DMA_Abort_IT+0x3b8>)
24004a5e:	4293      	cmp	r3, r2
24004a60:	d036      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a62:	687b      	ldr	r3, [r7, #4]
24004a64:	681b      	ldr	r3, [r3, #0]
24004a66:	4a65      	ldr	r2, [pc, #404]	; (24004bfc <HAL_DMA_Abort_IT+0x3bc>)
24004a68:	4293      	cmp	r3, r2
24004a6a:	d031      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a6c:	687b      	ldr	r3, [r7, #4]
24004a6e:	681b      	ldr	r3, [r3, #0]
24004a70:	4a63      	ldr	r2, [pc, #396]	; (24004c00 <HAL_DMA_Abort_IT+0x3c0>)
24004a72:	4293      	cmp	r3, r2
24004a74:	d02c      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a76:	687b      	ldr	r3, [r7, #4]
24004a78:	681b      	ldr	r3, [r3, #0]
24004a7a:	4a62      	ldr	r2, [pc, #392]	; (24004c04 <HAL_DMA_Abort_IT+0x3c4>)
24004a7c:	4293      	cmp	r3, r2
24004a7e:	d027      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a80:	687b      	ldr	r3, [r7, #4]
24004a82:	681b      	ldr	r3, [r3, #0]
24004a84:	4a60      	ldr	r2, [pc, #384]	; (24004c08 <HAL_DMA_Abort_IT+0x3c8>)
24004a86:	4293      	cmp	r3, r2
24004a88:	d022      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a8a:	687b      	ldr	r3, [r7, #4]
24004a8c:	681b      	ldr	r3, [r3, #0]
24004a8e:	4a5f      	ldr	r2, [pc, #380]	; (24004c0c <HAL_DMA_Abort_IT+0x3cc>)
24004a90:	4293      	cmp	r3, r2
24004a92:	d01d      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a94:	687b      	ldr	r3, [r7, #4]
24004a96:	681b      	ldr	r3, [r3, #0]
24004a98:	4a5d      	ldr	r2, [pc, #372]	; (24004c10 <HAL_DMA_Abort_IT+0x3d0>)
24004a9a:	4293      	cmp	r3, r2
24004a9c:	d018      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004a9e:	687b      	ldr	r3, [r7, #4]
24004aa0:	681b      	ldr	r3, [r3, #0]
24004aa2:	4a5c      	ldr	r2, [pc, #368]	; (24004c14 <HAL_DMA_Abort_IT+0x3d4>)
24004aa4:	4293      	cmp	r3, r2
24004aa6:	d013      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004aa8:	687b      	ldr	r3, [r7, #4]
24004aaa:	681b      	ldr	r3, [r3, #0]
24004aac:	4a5a      	ldr	r2, [pc, #360]	; (24004c18 <HAL_DMA_Abort_IT+0x3d8>)
24004aae:	4293      	cmp	r3, r2
24004ab0:	d00e      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004ab2:	687b      	ldr	r3, [r7, #4]
24004ab4:	681b      	ldr	r3, [r3, #0]
24004ab6:	4a59      	ldr	r2, [pc, #356]	; (24004c1c <HAL_DMA_Abort_IT+0x3dc>)
24004ab8:	4293      	cmp	r3, r2
24004aba:	d009      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004abc:	687b      	ldr	r3, [r7, #4]
24004abe:	681b      	ldr	r3, [r3, #0]
24004ac0:	4a57      	ldr	r2, [pc, #348]	; (24004c20 <HAL_DMA_Abort_IT+0x3e0>)
24004ac2:	4293      	cmp	r3, r2
24004ac4:	d004      	beq.n	24004ad0 <HAL_DMA_Abort_IT+0x290>
24004ac6:	687b      	ldr	r3, [r7, #4]
24004ac8:	681b      	ldr	r3, [r3, #0]
24004aca:	4a56      	ldr	r2, [pc, #344]	; (24004c24 <HAL_DMA_Abort_IT+0x3e4>)
24004acc:	4293      	cmp	r3, r2
24004ace:	d108      	bne.n	24004ae2 <HAL_DMA_Abort_IT+0x2a2>
24004ad0:	687b      	ldr	r3, [r7, #4]
24004ad2:	681b      	ldr	r3, [r3, #0]
24004ad4:	681a      	ldr	r2, [r3, #0]
24004ad6:	687b      	ldr	r3, [r7, #4]
24004ad8:	681b      	ldr	r3, [r3, #0]
24004ada:	f022 0201 	bic.w	r2, r2, #1
24004ade:	601a      	str	r2, [r3, #0]
24004ae0:	e007      	b.n	24004af2 <HAL_DMA_Abort_IT+0x2b2>
24004ae2:	687b      	ldr	r3, [r7, #4]
24004ae4:	681b      	ldr	r3, [r3, #0]
24004ae6:	681a      	ldr	r2, [r3, #0]
24004ae8:	687b      	ldr	r3, [r7, #4]
24004aea:	681b      	ldr	r3, [r3, #0]
24004aec:	f022 0201 	bic.w	r2, r2, #1
24004af0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004af2:	687b      	ldr	r3, [r7, #4]
24004af4:	681b      	ldr	r3, [r3, #0]
24004af6:	4a3c      	ldr	r2, [pc, #240]	; (24004be8 <HAL_DMA_Abort_IT+0x3a8>)
24004af8:	4293      	cmp	r3, r2
24004afa:	d072      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004afc:	687b      	ldr	r3, [r7, #4]
24004afe:	681b      	ldr	r3, [r3, #0]
24004b00:	4a3a      	ldr	r2, [pc, #232]	; (24004bec <HAL_DMA_Abort_IT+0x3ac>)
24004b02:	4293      	cmp	r3, r2
24004b04:	d06d      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b06:	687b      	ldr	r3, [r7, #4]
24004b08:	681b      	ldr	r3, [r3, #0]
24004b0a:	4a39      	ldr	r2, [pc, #228]	; (24004bf0 <HAL_DMA_Abort_IT+0x3b0>)
24004b0c:	4293      	cmp	r3, r2
24004b0e:	d068      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b10:	687b      	ldr	r3, [r7, #4]
24004b12:	681b      	ldr	r3, [r3, #0]
24004b14:	4a37      	ldr	r2, [pc, #220]	; (24004bf4 <HAL_DMA_Abort_IT+0x3b4>)
24004b16:	4293      	cmp	r3, r2
24004b18:	d063      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b1a:	687b      	ldr	r3, [r7, #4]
24004b1c:	681b      	ldr	r3, [r3, #0]
24004b1e:	4a36      	ldr	r2, [pc, #216]	; (24004bf8 <HAL_DMA_Abort_IT+0x3b8>)
24004b20:	4293      	cmp	r3, r2
24004b22:	d05e      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b24:	687b      	ldr	r3, [r7, #4]
24004b26:	681b      	ldr	r3, [r3, #0]
24004b28:	4a34      	ldr	r2, [pc, #208]	; (24004bfc <HAL_DMA_Abort_IT+0x3bc>)
24004b2a:	4293      	cmp	r3, r2
24004b2c:	d059      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b2e:	687b      	ldr	r3, [r7, #4]
24004b30:	681b      	ldr	r3, [r3, #0]
24004b32:	4a33      	ldr	r2, [pc, #204]	; (24004c00 <HAL_DMA_Abort_IT+0x3c0>)
24004b34:	4293      	cmp	r3, r2
24004b36:	d054      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b38:	687b      	ldr	r3, [r7, #4]
24004b3a:	681b      	ldr	r3, [r3, #0]
24004b3c:	4a31      	ldr	r2, [pc, #196]	; (24004c04 <HAL_DMA_Abort_IT+0x3c4>)
24004b3e:	4293      	cmp	r3, r2
24004b40:	d04f      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b42:	687b      	ldr	r3, [r7, #4]
24004b44:	681b      	ldr	r3, [r3, #0]
24004b46:	4a30      	ldr	r2, [pc, #192]	; (24004c08 <HAL_DMA_Abort_IT+0x3c8>)
24004b48:	4293      	cmp	r3, r2
24004b4a:	d04a      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b4c:	687b      	ldr	r3, [r7, #4]
24004b4e:	681b      	ldr	r3, [r3, #0]
24004b50:	4a2e      	ldr	r2, [pc, #184]	; (24004c0c <HAL_DMA_Abort_IT+0x3cc>)
24004b52:	4293      	cmp	r3, r2
24004b54:	d045      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b56:	687b      	ldr	r3, [r7, #4]
24004b58:	681b      	ldr	r3, [r3, #0]
24004b5a:	4a2d      	ldr	r2, [pc, #180]	; (24004c10 <HAL_DMA_Abort_IT+0x3d0>)
24004b5c:	4293      	cmp	r3, r2
24004b5e:	d040      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b60:	687b      	ldr	r3, [r7, #4]
24004b62:	681b      	ldr	r3, [r3, #0]
24004b64:	4a2b      	ldr	r2, [pc, #172]	; (24004c14 <HAL_DMA_Abort_IT+0x3d4>)
24004b66:	4293      	cmp	r3, r2
24004b68:	d03b      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b6a:	687b      	ldr	r3, [r7, #4]
24004b6c:	681b      	ldr	r3, [r3, #0]
24004b6e:	4a2a      	ldr	r2, [pc, #168]	; (24004c18 <HAL_DMA_Abort_IT+0x3d8>)
24004b70:	4293      	cmp	r3, r2
24004b72:	d036      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b74:	687b      	ldr	r3, [r7, #4]
24004b76:	681b      	ldr	r3, [r3, #0]
24004b78:	4a28      	ldr	r2, [pc, #160]	; (24004c1c <HAL_DMA_Abort_IT+0x3dc>)
24004b7a:	4293      	cmp	r3, r2
24004b7c:	d031      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b7e:	687b      	ldr	r3, [r7, #4]
24004b80:	681b      	ldr	r3, [r3, #0]
24004b82:	4a27      	ldr	r2, [pc, #156]	; (24004c20 <HAL_DMA_Abort_IT+0x3e0>)
24004b84:	4293      	cmp	r3, r2
24004b86:	d02c      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b88:	687b      	ldr	r3, [r7, #4]
24004b8a:	681b      	ldr	r3, [r3, #0]
24004b8c:	4a25      	ldr	r2, [pc, #148]	; (24004c24 <HAL_DMA_Abort_IT+0x3e4>)
24004b8e:	4293      	cmp	r3, r2
24004b90:	d027      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b92:	687b      	ldr	r3, [r7, #4]
24004b94:	681b      	ldr	r3, [r3, #0]
24004b96:	4a24      	ldr	r2, [pc, #144]	; (24004c28 <HAL_DMA_Abort_IT+0x3e8>)
24004b98:	4293      	cmp	r3, r2
24004b9a:	d022      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004b9c:	687b      	ldr	r3, [r7, #4]
24004b9e:	681b      	ldr	r3, [r3, #0]
24004ba0:	4a22      	ldr	r2, [pc, #136]	; (24004c2c <HAL_DMA_Abort_IT+0x3ec>)
24004ba2:	4293      	cmp	r3, r2
24004ba4:	d01d      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004ba6:	687b      	ldr	r3, [r7, #4]
24004ba8:	681b      	ldr	r3, [r3, #0]
24004baa:	4a21      	ldr	r2, [pc, #132]	; (24004c30 <HAL_DMA_Abort_IT+0x3f0>)
24004bac:	4293      	cmp	r3, r2
24004bae:	d018      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004bb0:	687b      	ldr	r3, [r7, #4]
24004bb2:	681b      	ldr	r3, [r3, #0]
24004bb4:	4a1f      	ldr	r2, [pc, #124]	; (24004c34 <HAL_DMA_Abort_IT+0x3f4>)
24004bb6:	4293      	cmp	r3, r2
24004bb8:	d013      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004bba:	687b      	ldr	r3, [r7, #4]
24004bbc:	681b      	ldr	r3, [r3, #0]
24004bbe:	4a1e      	ldr	r2, [pc, #120]	; (24004c38 <HAL_DMA_Abort_IT+0x3f8>)
24004bc0:	4293      	cmp	r3, r2
24004bc2:	d00e      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004bc4:	687b      	ldr	r3, [r7, #4]
24004bc6:	681b      	ldr	r3, [r3, #0]
24004bc8:	4a1c      	ldr	r2, [pc, #112]	; (24004c3c <HAL_DMA_Abort_IT+0x3fc>)
24004bca:	4293      	cmp	r3, r2
24004bcc:	d009      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004bce:	687b      	ldr	r3, [r7, #4]
24004bd0:	681b      	ldr	r3, [r3, #0]
24004bd2:	4a1b      	ldr	r2, [pc, #108]	; (24004c40 <HAL_DMA_Abort_IT+0x400>)
24004bd4:	4293      	cmp	r3, r2
24004bd6:	d004      	beq.n	24004be2 <HAL_DMA_Abort_IT+0x3a2>
24004bd8:	687b      	ldr	r3, [r7, #4]
24004bda:	681b      	ldr	r3, [r3, #0]
24004bdc:	4a19      	ldr	r2, [pc, #100]	; (24004c44 <HAL_DMA_Abort_IT+0x404>)
24004bde:	4293      	cmp	r3, r2
24004be0:	d132      	bne.n	24004c48 <HAL_DMA_Abort_IT+0x408>
24004be2:	2301      	movs	r3, #1
24004be4:	e031      	b.n	24004c4a <HAL_DMA_Abort_IT+0x40a>
24004be6:	bf00      	nop
24004be8:	40020010 	.word	0x40020010
24004bec:	40020028 	.word	0x40020028
24004bf0:	40020040 	.word	0x40020040
24004bf4:	40020058 	.word	0x40020058
24004bf8:	40020070 	.word	0x40020070
24004bfc:	40020088 	.word	0x40020088
24004c00:	400200a0 	.word	0x400200a0
24004c04:	400200b8 	.word	0x400200b8
24004c08:	40020410 	.word	0x40020410
24004c0c:	40020428 	.word	0x40020428
24004c10:	40020440 	.word	0x40020440
24004c14:	40020458 	.word	0x40020458
24004c18:	40020470 	.word	0x40020470
24004c1c:	40020488 	.word	0x40020488
24004c20:	400204a0 	.word	0x400204a0
24004c24:	400204b8 	.word	0x400204b8
24004c28:	58025408 	.word	0x58025408
24004c2c:	5802541c 	.word	0x5802541c
24004c30:	58025430 	.word	0x58025430
24004c34:	58025444 	.word	0x58025444
24004c38:	58025458 	.word	0x58025458
24004c3c:	5802546c 	.word	0x5802546c
24004c40:	58025480 	.word	0x58025480
24004c44:	58025494 	.word	0x58025494
24004c48:	2300      	movs	r3, #0
24004c4a:	2b00      	cmp	r3, #0
24004c4c:	d028      	beq.n	24004ca0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24004c4e:	687b      	ldr	r3, [r7, #4]
24004c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004c52:	681a      	ldr	r2, [r3, #0]
24004c54:	687b      	ldr	r3, [r7, #4]
24004c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24004c5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24004c5e:	687b      	ldr	r3, [r7, #4]
24004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004c62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24004c64:	687b      	ldr	r3, [r7, #4]
24004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004c68:	f003 031f 	and.w	r3, r3, #31
24004c6c:	2201      	movs	r2, #1
24004c6e:	409a      	lsls	r2, r3
24004c70:	68fb      	ldr	r3, [r7, #12]
24004c72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004c74:	687b      	ldr	r3, [r7, #4]
24004c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24004c78:	687a      	ldr	r2, [r7, #4]
24004c7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
24004c7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24004c7e:	687b      	ldr	r3, [r7, #4]
24004c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004c82:	2b00      	cmp	r3, #0
24004c84:	d00c      	beq.n	24004ca0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24004c86:	687b      	ldr	r3, [r7, #4]
24004c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004c8a:	681a      	ldr	r2, [r3, #0]
24004c8c:	687b      	ldr	r3, [r7, #4]
24004c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24004c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24004c94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004c96:	687b      	ldr	r3, [r7, #4]
24004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24004c9a:	687a      	ldr	r2, [r7, #4]
24004c9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
24004c9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24004ca0:	687b      	ldr	r3, [r7, #4]
24004ca2:	2201      	movs	r2, #1
24004ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
24004ca8:	687b      	ldr	r3, [r7, #4]
24004caa:	2200      	movs	r2, #0
24004cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
24004cb0:	687b      	ldr	r3, [r7, #4]
24004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24004cb4:	2b00      	cmp	r3, #0
24004cb6:	d003      	beq.n	24004cc0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
24004cb8:	687b      	ldr	r3, [r7, #4]
24004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24004cbc:	6878      	ldr	r0, [r7, #4]
24004cbe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
24004cc0:	2300      	movs	r3, #0
}
24004cc2:	4618      	mov	r0, r3
24004cc4:	3710      	adds	r7, #16
24004cc6:	46bd      	mov	sp, r7
24004cc8:	bd80      	pop	{r7, pc}
24004cca:	bf00      	nop

24004ccc <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
24004ccc:	b580      	push	{r7, lr}
24004cce:	b08a      	sub	sp, #40	; 0x28
24004cd0:	af00      	add	r7, sp, #0
24004cd2:	60f8      	str	r0, [r7, #12]
24004cd4:	460b      	mov	r3, r1
24004cd6:	607a      	str	r2, [r7, #4]
24004cd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
24004cda:	2300      	movs	r3, #0
24004cdc:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
24004cde:	f7fd fa8d 	bl	240021fc <HAL_GetTick>
24004ce2:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004ce4:	68fb      	ldr	r3, [r7, #12]
24004ce6:	2b00      	cmp	r3, #0
24004ce8:	d101      	bne.n	24004cee <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
24004cea:	2301      	movs	r3, #1
24004cec:	e374      	b.n	240053d8 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
24004cee:	68fb      	ldr	r3, [r7, #12]
24004cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24004cf4:	b2db      	uxtb	r3, r3
24004cf6:	2b02      	cmp	r3, #2
24004cf8:	d008      	beq.n	24004d0c <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24004cfa:	68fb      	ldr	r3, [r7, #12]
24004cfc:	2280      	movs	r2, #128	; 0x80
24004cfe:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24004d00:	68fb      	ldr	r3, [r7, #12]
24004d02:	2200      	movs	r2, #0
24004d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24004d08:	2301      	movs	r3, #1
24004d0a:	e365      	b.n	240053d8 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004d0c:	68fb      	ldr	r3, [r7, #12]
24004d0e:	681b      	ldr	r3, [r3, #0]
24004d10:	4a7b      	ldr	r2, [pc, #492]	; (24004f00 <HAL_DMA_PollForTransfer+0x234>)
24004d12:	4293      	cmp	r3, r2
24004d14:	d04a      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d16:	68fb      	ldr	r3, [r7, #12]
24004d18:	681b      	ldr	r3, [r3, #0]
24004d1a:	4a7a      	ldr	r2, [pc, #488]	; (24004f04 <HAL_DMA_PollForTransfer+0x238>)
24004d1c:	4293      	cmp	r3, r2
24004d1e:	d045      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d20:	68fb      	ldr	r3, [r7, #12]
24004d22:	681b      	ldr	r3, [r3, #0]
24004d24:	4a78      	ldr	r2, [pc, #480]	; (24004f08 <HAL_DMA_PollForTransfer+0x23c>)
24004d26:	4293      	cmp	r3, r2
24004d28:	d040      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d2a:	68fb      	ldr	r3, [r7, #12]
24004d2c:	681b      	ldr	r3, [r3, #0]
24004d2e:	4a77      	ldr	r2, [pc, #476]	; (24004f0c <HAL_DMA_PollForTransfer+0x240>)
24004d30:	4293      	cmp	r3, r2
24004d32:	d03b      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d34:	68fb      	ldr	r3, [r7, #12]
24004d36:	681b      	ldr	r3, [r3, #0]
24004d38:	4a75      	ldr	r2, [pc, #468]	; (24004f10 <HAL_DMA_PollForTransfer+0x244>)
24004d3a:	4293      	cmp	r3, r2
24004d3c:	d036      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d3e:	68fb      	ldr	r3, [r7, #12]
24004d40:	681b      	ldr	r3, [r3, #0]
24004d42:	4a74      	ldr	r2, [pc, #464]	; (24004f14 <HAL_DMA_PollForTransfer+0x248>)
24004d44:	4293      	cmp	r3, r2
24004d46:	d031      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d48:	68fb      	ldr	r3, [r7, #12]
24004d4a:	681b      	ldr	r3, [r3, #0]
24004d4c:	4a72      	ldr	r2, [pc, #456]	; (24004f18 <HAL_DMA_PollForTransfer+0x24c>)
24004d4e:	4293      	cmp	r3, r2
24004d50:	d02c      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d52:	68fb      	ldr	r3, [r7, #12]
24004d54:	681b      	ldr	r3, [r3, #0]
24004d56:	4a71      	ldr	r2, [pc, #452]	; (24004f1c <HAL_DMA_PollForTransfer+0x250>)
24004d58:	4293      	cmp	r3, r2
24004d5a:	d027      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d5c:	68fb      	ldr	r3, [r7, #12]
24004d5e:	681b      	ldr	r3, [r3, #0]
24004d60:	4a6f      	ldr	r2, [pc, #444]	; (24004f20 <HAL_DMA_PollForTransfer+0x254>)
24004d62:	4293      	cmp	r3, r2
24004d64:	d022      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d66:	68fb      	ldr	r3, [r7, #12]
24004d68:	681b      	ldr	r3, [r3, #0]
24004d6a:	4a6e      	ldr	r2, [pc, #440]	; (24004f24 <HAL_DMA_PollForTransfer+0x258>)
24004d6c:	4293      	cmp	r3, r2
24004d6e:	d01d      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d70:	68fb      	ldr	r3, [r7, #12]
24004d72:	681b      	ldr	r3, [r3, #0]
24004d74:	4a6c      	ldr	r2, [pc, #432]	; (24004f28 <HAL_DMA_PollForTransfer+0x25c>)
24004d76:	4293      	cmp	r3, r2
24004d78:	d018      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d7a:	68fb      	ldr	r3, [r7, #12]
24004d7c:	681b      	ldr	r3, [r3, #0]
24004d7e:	4a6b      	ldr	r2, [pc, #428]	; (24004f2c <HAL_DMA_PollForTransfer+0x260>)
24004d80:	4293      	cmp	r3, r2
24004d82:	d013      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d84:	68fb      	ldr	r3, [r7, #12]
24004d86:	681b      	ldr	r3, [r3, #0]
24004d88:	4a69      	ldr	r2, [pc, #420]	; (24004f30 <HAL_DMA_PollForTransfer+0x264>)
24004d8a:	4293      	cmp	r3, r2
24004d8c:	d00e      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d8e:	68fb      	ldr	r3, [r7, #12]
24004d90:	681b      	ldr	r3, [r3, #0]
24004d92:	4a68      	ldr	r2, [pc, #416]	; (24004f34 <HAL_DMA_PollForTransfer+0x268>)
24004d94:	4293      	cmp	r3, r2
24004d96:	d009      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004d98:	68fb      	ldr	r3, [r7, #12]
24004d9a:	681b      	ldr	r3, [r3, #0]
24004d9c:	4a66      	ldr	r2, [pc, #408]	; (24004f38 <HAL_DMA_PollForTransfer+0x26c>)
24004d9e:	4293      	cmp	r3, r2
24004da0:	d004      	beq.n	24004dac <HAL_DMA_PollForTransfer+0xe0>
24004da2:	68fb      	ldr	r3, [r7, #12]
24004da4:	681b      	ldr	r3, [r3, #0]
24004da6:	4a65      	ldr	r2, [pc, #404]	; (24004f3c <HAL_DMA_PollForTransfer+0x270>)
24004da8:	4293      	cmp	r3, r2
24004daa:	d101      	bne.n	24004db0 <HAL_DMA_PollForTransfer+0xe4>
24004dac:	2301      	movs	r3, #1
24004dae:	e000      	b.n	24004db2 <HAL_DMA_PollForTransfer+0xe6>
24004db0:	2300      	movs	r3, #0
24004db2:	2b00      	cmp	r3, #0
24004db4:	d028      	beq.n	24004e08 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
24004db6:	68fb      	ldr	r3, [r7, #12]
24004db8:	681b      	ldr	r3, [r3, #0]
24004dba:	681b      	ldr	r3, [r3, #0]
24004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
24004dc0:	2b00      	cmp	r3, #0
24004dc2:	d005      	beq.n	24004dd0 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24004dc4:	68fb      	ldr	r3, [r7, #12]
24004dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
24004dca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
24004dcc:	2301      	movs	r3, #1
24004dce:	e303      	b.n	240053d8 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24004dd0:	7afb      	ldrb	r3, [r7, #11]
24004dd2:	2b00      	cmp	r3, #0
24004dd4:	d108      	bne.n	24004de8 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24004dd6:	68fb      	ldr	r3, [r7, #12]
24004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004dda:	f003 031f 	and.w	r3, r3, #31
24004dde:	2220      	movs	r2, #32
24004de0:	fa02 f303 	lsl.w	r3, r2, r3
24004de4:	627b      	str	r3, [r7, #36]	; 0x24
24004de6:	e007      	b.n	24004df8 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24004de8:	68fb      	ldr	r3, [r7, #12]
24004dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004dec:	f003 031f 	and.w	r3, r3, #31
24004df0:	2210      	movs	r2, #16
24004df2:	fa02 f303 	lsl.w	r3, r2, r3
24004df6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24004df8:	68fb      	ldr	r3, [r7, #12]
24004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004dfc:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24004dfe:	68fb      	ldr	r3, [r7, #12]
24004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004e02:	3308      	adds	r3, #8
24004e04:	61fb      	str	r3, [r7, #28]
24004e06:	e1d5      	b.n	240051b4 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
24004e08:	68fb      	ldr	r3, [r7, #12]
24004e0a:	681b      	ldr	r3, [r3, #0]
24004e0c:	681b      	ldr	r3, [r3, #0]
24004e0e:	f003 0320 	and.w	r3, r3, #32
24004e12:	2b00      	cmp	r3, #0
24004e14:	d005      	beq.n	24004e22 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24004e16:	68fb      	ldr	r3, [r7, #12]
24004e18:	f44f 7280 	mov.w	r2, #256	; 0x100
24004e1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
24004e1e:	2301      	movs	r3, #1
24004e20:	e2da      	b.n	240053d8 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24004e22:	7afb      	ldrb	r3, [r7, #11]
24004e24:	2b00      	cmp	r3, #0
24004e26:	d108      	bne.n	24004e3a <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
24004e28:	68fb      	ldr	r3, [r7, #12]
24004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004e2c:	f003 031f 	and.w	r3, r3, #31
24004e30:	2202      	movs	r2, #2
24004e32:	fa02 f303 	lsl.w	r3, r2, r3
24004e36:	627b      	str	r3, [r7, #36]	; 0x24
24004e38:	e007      	b.n	24004e4a <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
24004e3a:	68fb      	ldr	r3, [r7, #12]
24004e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004e3e:	f003 031f 	and.w	r3, r3, #31
24004e42:	2204      	movs	r2, #4
24004e44:	fa02 f303 	lsl.w	r3, r2, r3
24004e48:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24004e4a:	68fb      	ldr	r3, [r7, #12]
24004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004e4e:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24004e50:	68fb      	ldr	r3, [r7, #12]
24004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004e54:	3304      	adds	r3, #4
24004e56:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
24004e58:	e1ac      	b.n	240051b4 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004e5a:	68fb      	ldr	r3, [r7, #12]
24004e5c:	681b      	ldr	r3, [r3, #0]
24004e5e:	4a28      	ldr	r2, [pc, #160]	; (24004f00 <HAL_DMA_PollForTransfer+0x234>)
24004e60:	4293      	cmp	r3, r2
24004e62:	d04a      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004e64:	68fb      	ldr	r3, [r7, #12]
24004e66:	681b      	ldr	r3, [r3, #0]
24004e68:	4a26      	ldr	r2, [pc, #152]	; (24004f04 <HAL_DMA_PollForTransfer+0x238>)
24004e6a:	4293      	cmp	r3, r2
24004e6c:	d045      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004e6e:	68fb      	ldr	r3, [r7, #12]
24004e70:	681b      	ldr	r3, [r3, #0]
24004e72:	4a25      	ldr	r2, [pc, #148]	; (24004f08 <HAL_DMA_PollForTransfer+0x23c>)
24004e74:	4293      	cmp	r3, r2
24004e76:	d040      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004e78:	68fb      	ldr	r3, [r7, #12]
24004e7a:	681b      	ldr	r3, [r3, #0]
24004e7c:	4a23      	ldr	r2, [pc, #140]	; (24004f0c <HAL_DMA_PollForTransfer+0x240>)
24004e7e:	4293      	cmp	r3, r2
24004e80:	d03b      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004e82:	68fb      	ldr	r3, [r7, #12]
24004e84:	681b      	ldr	r3, [r3, #0]
24004e86:	4a22      	ldr	r2, [pc, #136]	; (24004f10 <HAL_DMA_PollForTransfer+0x244>)
24004e88:	4293      	cmp	r3, r2
24004e8a:	d036      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004e8c:	68fb      	ldr	r3, [r7, #12]
24004e8e:	681b      	ldr	r3, [r3, #0]
24004e90:	4a20      	ldr	r2, [pc, #128]	; (24004f14 <HAL_DMA_PollForTransfer+0x248>)
24004e92:	4293      	cmp	r3, r2
24004e94:	d031      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004e96:	68fb      	ldr	r3, [r7, #12]
24004e98:	681b      	ldr	r3, [r3, #0]
24004e9a:	4a1f      	ldr	r2, [pc, #124]	; (24004f18 <HAL_DMA_PollForTransfer+0x24c>)
24004e9c:	4293      	cmp	r3, r2
24004e9e:	d02c      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004ea0:	68fb      	ldr	r3, [r7, #12]
24004ea2:	681b      	ldr	r3, [r3, #0]
24004ea4:	4a1d      	ldr	r2, [pc, #116]	; (24004f1c <HAL_DMA_PollForTransfer+0x250>)
24004ea6:	4293      	cmp	r3, r2
24004ea8:	d027      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004eaa:	68fb      	ldr	r3, [r7, #12]
24004eac:	681b      	ldr	r3, [r3, #0]
24004eae:	4a1c      	ldr	r2, [pc, #112]	; (24004f20 <HAL_DMA_PollForTransfer+0x254>)
24004eb0:	4293      	cmp	r3, r2
24004eb2:	d022      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004eb4:	68fb      	ldr	r3, [r7, #12]
24004eb6:	681b      	ldr	r3, [r3, #0]
24004eb8:	4a1a      	ldr	r2, [pc, #104]	; (24004f24 <HAL_DMA_PollForTransfer+0x258>)
24004eba:	4293      	cmp	r3, r2
24004ebc:	d01d      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004ebe:	68fb      	ldr	r3, [r7, #12]
24004ec0:	681b      	ldr	r3, [r3, #0]
24004ec2:	4a19      	ldr	r2, [pc, #100]	; (24004f28 <HAL_DMA_PollForTransfer+0x25c>)
24004ec4:	4293      	cmp	r3, r2
24004ec6:	d018      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004ec8:	68fb      	ldr	r3, [r7, #12]
24004eca:	681b      	ldr	r3, [r3, #0]
24004ecc:	4a17      	ldr	r2, [pc, #92]	; (24004f2c <HAL_DMA_PollForTransfer+0x260>)
24004ece:	4293      	cmp	r3, r2
24004ed0:	d013      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004ed2:	68fb      	ldr	r3, [r7, #12]
24004ed4:	681b      	ldr	r3, [r3, #0]
24004ed6:	4a16      	ldr	r2, [pc, #88]	; (24004f30 <HAL_DMA_PollForTransfer+0x264>)
24004ed8:	4293      	cmp	r3, r2
24004eda:	d00e      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004edc:	68fb      	ldr	r3, [r7, #12]
24004ede:	681b      	ldr	r3, [r3, #0]
24004ee0:	4a14      	ldr	r2, [pc, #80]	; (24004f34 <HAL_DMA_PollForTransfer+0x268>)
24004ee2:	4293      	cmp	r3, r2
24004ee4:	d009      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004ee6:	68fb      	ldr	r3, [r7, #12]
24004ee8:	681b      	ldr	r3, [r3, #0]
24004eea:	4a13      	ldr	r2, [pc, #76]	; (24004f38 <HAL_DMA_PollForTransfer+0x26c>)
24004eec:	4293      	cmp	r3, r2
24004eee:	d004      	beq.n	24004efa <HAL_DMA_PollForTransfer+0x22e>
24004ef0:	68fb      	ldr	r3, [r7, #12]
24004ef2:	681b      	ldr	r3, [r3, #0]
24004ef4:	4a11      	ldr	r2, [pc, #68]	; (24004f3c <HAL_DMA_PollForTransfer+0x270>)
24004ef6:	4293      	cmp	r3, r2
24004ef8:	d122      	bne.n	24004f40 <HAL_DMA_PollForTransfer+0x274>
24004efa:	2301      	movs	r3, #1
24004efc:	e021      	b.n	24004f42 <HAL_DMA_PollForTransfer+0x276>
24004efe:	bf00      	nop
24004f00:	40020010 	.word	0x40020010
24004f04:	40020028 	.word	0x40020028
24004f08:	40020040 	.word	0x40020040
24004f0c:	40020058 	.word	0x40020058
24004f10:	40020070 	.word	0x40020070
24004f14:	40020088 	.word	0x40020088
24004f18:	400200a0 	.word	0x400200a0
24004f1c:	400200b8 	.word	0x400200b8
24004f20:	40020410 	.word	0x40020410
24004f24:	40020428 	.word	0x40020428
24004f28:	40020440 	.word	0x40020440
24004f2c:	40020458 	.word	0x40020458
24004f30:	40020470 	.word	0x40020470
24004f34:	40020488 	.word	0x40020488
24004f38:	400204a0 	.word	0x400204a0
24004f3c:	400204b8 	.word	0x400204b8
24004f40:	2300      	movs	r3, #0
24004f42:	2b00      	cmp	r3, #0
24004f44:	d057      	beq.n	24004ff6 <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004f46:	6a3b      	ldr	r3, [r7, #32]
24004f48:	681a      	ldr	r2, [r3, #0]
24004f4a:	68fb      	ldr	r3, [r7, #12]
24004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f4e:	f003 031f 	and.w	r3, r3, #31
24004f52:	fa22 f303 	lsr.w	r3, r2, r3
24004f56:	f003 0301 	and.w	r3, r3, #1
24004f5a:	2b00      	cmp	r3, #0
24004f5c:	d00d      	beq.n	24004f7a <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24004f5e:	68fb      	ldr	r3, [r7, #12]
24004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004f62:	f043 0202 	orr.w	r2, r3, #2
24004f66:	68fb      	ldr	r3, [r7, #12]
24004f68:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004f6a:	68fb      	ldr	r3, [r7, #12]
24004f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f6e:	f003 031f 	and.w	r3, r3, #31
24004f72:	2201      	movs	r2, #1
24004f74:	409a      	lsls	r2, r3
24004f76:	69fb      	ldr	r3, [r7, #28]
24004f78:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004f7a:	6a3b      	ldr	r3, [r7, #32]
24004f7c:	681a      	ldr	r2, [r3, #0]
24004f7e:	68fb      	ldr	r3, [r7, #12]
24004f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004f82:	f003 031f 	and.w	r3, r3, #31
24004f86:	2104      	movs	r1, #4
24004f88:	fa01 f303 	lsl.w	r3, r1, r3
24004f8c:	4013      	ands	r3, r2
24004f8e:	2b00      	cmp	r3, #0
24004f90:	d00d      	beq.n	24004fae <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24004f92:	68fb      	ldr	r3, [r7, #12]
24004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004f96:	f043 0204 	orr.w	r2, r3, #4
24004f9a:	68fb      	ldr	r3, [r7, #12]
24004f9c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004f9e:	68fb      	ldr	r3, [r7, #12]
24004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004fa2:	f003 031f 	and.w	r3, r3, #31
24004fa6:	2204      	movs	r2, #4
24004fa8:	409a      	lsls	r2, r3
24004faa:	69fb      	ldr	r3, [r7, #28]
24004fac:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004fae:	6a3b      	ldr	r3, [r7, #32]
24004fb0:	681a      	ldr	r2, [r3, #0]
24004fb2:	68fb      	ldr	r3, [r7, #12]
24004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004fb6:	f003 031f 	and.w	r3, r3, #31
24004fba:	2108      	movs	r1, #8
24004fbc:	fa01 f303 	lsl.w	r3, r1, r3
24004fc0:	4013      	ands	r3, r2
24004fc2:	2b00      	cmp	r3, #0
24004fc4:	d038      	beq.n	24005038 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24004fc6:	68fb      	ldr	r3, [r7, #12]
24004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004fca:	f043 0201 	orr.w	r2, r3, #1
24004fce:	68fb      	ldr	r3, [r7, #12]
24004fd0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24004fd2:	68fb      	ldr	r3, [r7, #12]
24004fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004fd6:	f003 031f 	and.w	r3, r3, #31
24004fda:	2208      	movs	r2, #8
24004fdc:	409a      	lsls	r2, r3
24004fde:	69fb      	ldr	r3, [r7, #28]
24004fe0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
24004fe2:	68fb      	ldr	r3, [r7, #12]
24004fe4:	2201      	movs	r2, #1
24004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24004fea:	68fb      	ldr	r3, [r7, #12]
24004fec:	2200      	movs	r2, #0
24004fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24004ff2:	2301      	movs	r3, #1
24004ff4:	e1f0      	b.n	240053d8 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004ff6:	6a3b      	ldr	r3, [r7, #32]
24004ff8:	681a      	ldr	r2, [r3, #0]
24004ffa:	68fb      	ldr	r3, [r7, #12]
24004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004ffe:	f003 031f 	and.w	r3, r3, #31
24005002:	2108      	movs	r1, #8
24005004:	fa01 f303 	lsl.w	r3, r1, r3
24005008:	4013      	ands	r3, r2
2400500a:	2b00      	cmp	r3, #0
2400500c:	d014      	beq.n	24005038 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
2400500e:	68fb      	ldr	r3, [r7, #12]
24005010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005012:	f003 031f 	and.w	r3, r3, #31
24005016:	2201      	movs	r2, #1
24005018:	409a      	lsls	r2, r3
2400501a:	6a3b      	ldr	r3, [r7, #32]
2400501c:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
2400501e:	68fb      	ldr	r3, [r7, #12]
24005020:	2201      	movs	r2, #1
24005022:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
24005024:	68fb      	ldr	r3, [r7, #12]
24005026:	2201      	movs	r2, #1
24005028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
2400502c:	68fb      	ldr	r3, [r7, #12]
2400502e:	2200      	movs	r2, #0
24005030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24005034:	2301      	movs	r3, #1
24005036:	e1cf      	b.n	240053d8 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
24005038:	687b      	ldr	r3, [r7, #4]
2400503a:	f1b3 3fff 	cmp.w	r3, #4294967295
2400503e:	d012      	beq.n	24005066 <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
24005040:	f7fd f8dc 	bl	240021fc <HAL_GetTick>
24005044:	4602      	mov	r2, r0
24005046:	697b      	ldr	r3, [r7, #20]
24005048:	1ad3      	subs	r3, r2, r3
2400504a:	687a      	ldr	r2, [r7, #4]
2400504c:	429a      	cmp	r2, r3
2400504e:	d302      	bcc.n	24005056 <HAL_DMA_PollForTransfer+0x38a>
24005050:	687b      	ldr	r3, [r7, #4]
24005052:	2b00      	cmp	r3, #0
24005054:	d107      	bne.n	24005066 <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005056:	68fb      	ldr	r3, [r7, #12]
24005058:	2220      	movs	r2, #32
2400505a:	655a      	str	r2, [r3, #84]	; 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
2400505c:	68f8      	ldr	r0, [r7, #12]
2400505e:	f7ff f8d1 	bl	24004204 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
24005062:	2301      	movs	r3, #1
24005064:	e1b8      	b.n	240053d8 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005066:	68fb      	ldr	r3, [r7, #12]
24005068:	681b      	ldr	r3, [r3, #0]
2400506a:	4a81      	ldr	r2, [pc, #516]	; (24005270 <HAL_DMA_PollForTransfer+0x5a4>)
2400506c:	4293      	cmp	r3, r2
2400506e:	d072      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
24005070:	68fb      	ldr	r3, [r7, #12]
24005072:	681b      	ldr	r3, [r3, #0]
24005074:	4a7f      	ldr	r2, [pc, #508]	; (24005274 <HAL_DMA_PollForTransfer+0x5a8>)
24005076:	4293      	cmp	r3, r2
24005078:	d06d      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
2400507a:	68fb      	ldr	r3, [r7, #12]
2400507c:	681b      	ldr	r3, [r3, #0]
2400507e:	4a7e      	ldr	r2, [pc, #504]	; (24005278 <HAL_DMA_PollForTransfer+0x5ac>)
24005080:	4293      	cmp	r3, r2
24005082:	d068      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
24005084:	68fb      	ldr	r3, [r7, #12]
24005086:	681b      	ldr	r3, [r3, #0]
24005088:	4a7c      	ldr	r2, [pc, #496]	; (2400527c <HAL_DMA_PollForTransfer+0x5b0>)
2400508a:	4293      	cmp	r3, r2
2400508c:	d063      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
2400508e:	68fb      	ldr	r3, [r7, #12]
24005090:	681b      	ldr	r3, [r3, #0]
24005092:	4a7b      	ldr	r2, [pc, #492]	; (24005280 <HAL_DMA_PollForTransfer+0x5b4>)
24005094:	4293      	cmp	r3, r2
24005096:	d05e      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
24005098:	68fb      	ldr	r3, [r7, #12]
2400509a:	681b      	ldr	r3, [r3, #0]
2400509c:	4a79      	ldr	r2, [pc, #484]	; (24005284 <HAL_DMA_PollForTransfer+0x5b8>)
2400509e:	4293      	cmp	r3, r2
240050a0:	d059      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050a2:	68fb      	ldr	r3, [r7, #12]
240050a4:	681b      	ldr	r3, [r3, #0]
240050a6:	4a78      	ldr	r2, [pc, #480]	; (24005288 <HAL_DMA_PollForTransfer+0x5bc>)
240050a8:	4293      	cmp	r3, r2
240050aa:	d054      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050ac:	68fb      	ldr	r3, [r7, #12]
240050ae:	681b      	ldr	r3, [r3, #0]
240050b0:	4a76      	ldr	r2, [pc, #472]	; (2400528c <HAL_DMA_PollForTransfer+0x5c0>)
240050b2:	4293      	cmp	r3, r2
240050b4:	d04f      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050b6:	68fb      	ldr	r3, [r7, #12]
240050b8:	681b      	ldr	r3, [r3, #0]
240050ba:	4a75      	ldr	r2, [pc, #468]	; (24005290 <HAL_DMA_PollForTransfer+0x5c4>)
240050bc:	4293      	cmp	r3, r2
240050be:	d04a      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050c0:	68fb      	ldr	r3, [r7, #12]
240050c2:	681b      	ldr	r3, [r3, #0]
240050c4:	4a73      	ldr	r2, [pc, #460]	; (24005294 <HAL_DMA_PollForTransfer+0x5c8>)
240050c6:	4293      	cmp	r3, r2
240050c8:	d045      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050ca:	68fb      	ldr	r3, [r7, #12]
240050cc:	681b      	ldr	r3, [r3, #0]
240050ce:	4a72      	ldr	r2, [pc, #456]	; (24005298 <HAL_DMA_PollForTransfer+0x5cc>)
240050d0:	4293      	cmp	r3, r2
240050d2:	d040      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050d4:	68fb      	ldr	r3, [r7, #12]
240050d6:	681b      	ldr	r3, [r3, #0]
240050d8:	4a70      	ldr	r2, [pc, #448]	; (2400529c <HAL_DMA_PollForTransfer+0x5d0>)
240050da:	4293      	cmp	r3, r2
240050dc:	d03b      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050de:	68fb      	ldr	r3, [r7, #12]
240050e0:	681b      	ldr	r3, [r3, #0]
240050e2:	4a6f      	ldr	r2, [pc, #444]	; (240052a0 <HAL_DMA_PollForTransfer+0x5d4>)
240050e4:	4293      	cmp	r3, r2
240050e6:	d036      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050e8:	68fb      	ldr	r3, [r7, #12]
240050ea:	681b      	ldr	r3, [r3, #0]
240050ec:	4a6d      	ldr	r2, [pc, #436]	; (240052a4 <HAL_DMA_PollForTransfer+0x5d8>)
240050ee:	4293      	cmp	r3, r2
240050f0:	d031      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050f2:	68fb      	ldr	r3, [r7, #12]
240050f4:	681b      	ldr	r3, [r3, #0]
240050f6:	4a6c      	ldr	r2, [pc, #432]	; (240052a8 <HAL_DMA_PollForTransfer+0x5dc>)
240050f8:	4293      	cmp	r3, r2
240050fa:	d02c      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
240050fc:	68fb      	ldr	r3, [r7, #12]
240050fe:	681b      	ldr	r3, [r3, #0]
24005100:	4a6a      	ldr	r2, [pc, #424]	; (240052ac <HAL_DMA_PollForTransfer+0x5e0>)
24005102:	4293      	cmp	r3, r2
24005104:	d027      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
24005106:	68fb      	ldr	r3, [r7, #12]
24005108:	681b      	ldr	r3, [r3, #0]
2400510a:	4a69      	ldr	r2, [pc, #420]	; (240052b0 <HAL_DMA_PollForTransfer+0x5e4>)
2400510c:	4293      	cmp	r3, r2
2400510e:	d022      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
24005110:	68fb      	ldr	r3, [r7, #12]
24005112:	681b      	ldr	r3, [r3, #0]
24005114:	4a67      	ldr	r2, [pc, #412]	; (240052b4 <HAL_DMA_PollForTransfer+0x5e8>)
24005116:	4293      	cmp	r3, r2
24005118:	d01d      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
2400511a:	68fb      	ldr	r3, [r7, #12]
2400511c:	681b      	ldr	r3, [r3, #0]
2400511e:	4a66      	ldr	r2, [pc, #408]	; (240052b8 <HAL_DMA_PollForTransfer+0x5ec>)
24005120:	4293      	cmp	r3, r2
24005122:	d018      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
24005124:	68fb      	ldr	r3, [r7, #12]
24005126:	681b      	ldr	r3, [r3, #0]
24005128:	4a64      	ldr	r2, [pc, #400]	; (240052bc <HAL_DMA_PollForTransfer+0x5f0>)
2400512a:	4293      	cmp	r3, r2
2400512c:	d013      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
2400512e:	68fb      	ldr	r3, [r7, #12]
24005130:	681b      	ldr	r3, [r3, #0]
24005132:	4a63      	ldr	r2, [pc, #396]	; (240052c0 <HAL_DMA_PollForTransfer+0x5f4>)
24005134:	4293      	cmp	r3, r2
24005136:	d00e      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
24005138:	68fb      	ldr	r3, [r7, #12]
2400513a:	681b      	ldr	r3, [r3, #0]
2400513c:	4a61      	ldr	r2, [pc, #388]	; (240052c4 <HAL_DMA_PollForTransfer+0x5f8>)
2400513e:	4293      	cmp	r3, r2
24005140:	d009      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
24005142:	68fb      	ldr	r3, [r7, #12]
24005144:	681b      	ldr	r3, [r3, #0]
24005146:	4a60      	ldr	r2, [pc, #384]	; (240052c8 <HAL_DMA_PollForTransfer+0x5fc>)
24005148:	4293      	cmp	r3, r2
2400514a:	d004      	beq.n	24005156 <HAL_DMA_PollForTransfer+0x48a>
2400514c:	68fb      	ldr	r3, [r7, #12]
2400514e:	681b      	ldr	r3, [r3, #0]
24005150:	4a5e      	ldr	r2, [pc, #376]	; (240052cc <HAL_DMA_PollForTransfer+0x600>)
24005152:	4293      	cmp	r3, r2
24005154:	d101      	bne.n	2400515a <HAL_DMA_PollForTransfer+0x48e>
24005156:	2301      	movs	r3, #1
24005158:	e000      	b.n	2400515c <HAL_DMA_PollForTransfer+0x490>
2400515a:	2300      	movs	r3, #0
2400515c:	2b00      	cmp	r3, #0
2400515e:	d029      	beq.n	240051b4 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
24005160:	68fb      	ldr	r3, [r7, #12]
24005162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24005164:	2b00      	cmp	r3, #0
24005166:	d012      	beq.n	2400518e <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24005168:	68fb      	ldr	r3, [r7, #12]
2400516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400516c:	681a      	ldr	r2, [r3, #0]
2400516e:	68fb      	ldr	r3, [r7, #12]
24005170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24005172:	4013      	ands	r3, r2
24005174:	2b00      	cmp	r3, #0
24005176:	d00a      	beq.n	2400518e <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005178:	68fb      	ldr	r3, [r7, #12]
2400517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400517c:	68fa      	ldr	r2, [r7, #12]
2400517e:	6f52      	ldr	r2, [r2, #116]	; 0x74
24005180:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24005182:	68fb      	ldr	r3, [r7, #12]
24005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005186:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
2400518a:	68fb      	ldr	r3, [r7, #12]
2400518c:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
2400518e:	68fb      	ldr	r3, [r7, #12]
24005190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24005192:	681a      	ldr	r2, [r3, #0]
24005194:	68fb      	ldr	r3, [r7, #12]
24005196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24005198:	4013      	ands	r3, r2
2400519a:	2b00      	cmp	r3, #0
2400519c:	d00a      	beq.n	240051b4 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400519e:	68fb      	ldr	r3, [r7, #12]
240051a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240051a2:	68fa      	ldr	r2, [r7, #12]
240051a4:	6e92      	ldr	r2, [r2, #104]	; 0x68
240051a6:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240051a8:	68fb      	ldr	r3, [r7, #12]
240051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240051ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
240051b0:	68fb      	ldr	r3, [r7, #12]
240051b2:	655a      	str	r2, [r3, #84]	; 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
240051b4:	6a3b      	ldr	r3, [r7, #32]
240051b6:	681a      	ldr	r2, [r3, #0]
240051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240051ba:	4013      	ands	r3, r2
240051bc:	2b00      	cmp	r3, #0
240051be:	f43f ae4c 	beq.w	24004e5a <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
240051c2:	7afb      	ldrb	r3, [r7, #11]
240051c4:	2b00      	cmp	r3, #0
240051c6:	f040 80a0 	bne.w	2400530a <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240051ca:	68fb      	ldr	r3, [r7, #12]
240051cc:	681b      	ldr	r3, [r3, #0]
240051ce:	4a28      	ldr	r2, [pc, #160]	; (24005270 <HAL_DMA_PollForTransfer+0x5a4>)
240051d0:	4293      	cmp	r3, r2
240051d2:	d04a      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
240051d4:	68fb      	ldr	r3, [r7, #12]
240051d6:	681b      	ldr	r3, [r3, #0]
240051d8:	4a26      	ldr	r2, [pc, #152]	; (24005274 <HAL_DMA_PollForTransfer+0x5a8>)
240051da:	4293      	cmp	r3, r2
240051dc:	d045      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
240051de:	68fb      	ldr	r3, [r7, #12]
240051e0:	681b      	ldr	r3, [r3, #0]
240051e2:	4a25      	ldr	r2, [pc, #148]	; (24005278 <HAL_DMA_PollForTransfer+0x5ac>)
240051e4:	4293      	cmp	r3, r2
240051e6:	d040      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
240051e8:	68fb      	ldr	r3, [r7, #12]
240051ea:	681b      	ldr	r3, [r3, #0]
240051ec:	4a23      	ldr	r2, [pc, #140]	; (2400527c <HAL_DMA_PollForTransfer+0x5b0>)
240051ee:	4293      	cmp	r3, r2
240051f0:	d03b      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
240051f2:	68fb      	ldr	r3, [r7, #12]
240051f4:	681b      	ldr	r3, [r3, #0]
240051f6:	4a22      	ldr	r2, [pc, #136]	; (24005280 <HAL_DMA_PollForTransfer+0x5b4>)
240051f8:	4293      	cmp	r3, r2
240051fa:	d036      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
240051fc:	68fb      	ldr	r3, [r7, #12]
240051fe:	681b      	ldr	r3, [r3, #0]
24005200:	4a20      	ldr	r2, [pc, #128]	; (24005284 <HAL_DMA_PollForTransfer+0x5b8>)
24005202:	4293      	cmp	r3, r2
24005204:	d031      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
24005206:	68fb      	ldr	r3, [r7, #12]
24005208:	681b      	ldr	r3, [r3, #0]
2400520a:	4a1f      	ldr	r2, [pc, #124]	; (24005288 <HAL_DMA_PollForTransfer+0x5bc>)
2400520c:	4293      	cmp	r3, r2
2400520e:	d02c      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
24005210:	68fb      	ldr	r3, [r7, #12]
24005212:	681b      	ldr	r3, [r3, #0]
24005214:	4a1d      	ldr	r2, [pc, #116]	; (2400528c <HAL_DMA_PollForTransfer+0x5c0>)
24005216:	4293      	cmp	r3, r2
24005218:	d027      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
2400521a:	68fb      	ldr	r3, [r7, #12]
2400521c:	681b      	ldr	r3, [r3, #0]
2400521e:	4a1c      	ldr	r2, [pc, #112]	; (24005290 <HAL_DMA_PollForTransfer+0x5c4>)
24005220:	4293      	cmp	r3, r2
24005222:	d022      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
24005224:	68fb      	ldr	r3, [r7, #12]
24005226:	681b      	ldr	r3, [r3, #0]
24005228:	4a1a      	ldr	r2, [pc, #104]	; (24005294 <HAL_DMA_PollForTransfer+0x5c8>)
2400522a:	4293      	cmp	r3, r2
2400522c:	d01d      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
2400522e:	68fb      	ldr	r3, [r7, #12]
24005230:	681b      	ldr	r3, [r3, #0]
24005232:	4a19      	ldr	r2, [pc, #100]	; (24005298 <HAL_DMA_PollForTransfer+0x5cc>)
24005234:	4293      	cmp	r3, r2
24005236:	d018      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
24005238:	68fb      	ldr	r3, [r7, #12]
2400523a:	681b      	ldr	r3, [r3, #0]
2400523c:	4a17      	ldr	r2, [pc, #92]	; (2400529c <HAL_DMA_PollForTransfer+0x5d0>)
2400523e:	4293      	cmp	r3, r2
24005240:	d013      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
24005242:	68fb      	ldr	r3, [r7, #12]
24005244:	681b      	ldr	r3, [r3, #0]
24005246:	4a16      	ldr	r2, [pc, #88]	; (240052a0 <HAL_DMA_PollForTransfer+0x5d4>)
24005248:	4293      	cmp	r3, r2
2400524a:	d00e      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
2400524c:	68fb      	ldr	r3, [r7, #12]
2400524e:	681b      	ldr	r3, [r3, #0]
24005250:	4a14      	ldr	r2, [pc, #80]	; (240052a4 <HAL_DMA_PollForTransfer+0x5d8>)
24005252:	4293      	cmp	r3, r2
24005254:	d009      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
24005256:	68fb      	ldr	r3, [r7, #12]
24005258:	681b      	ldr	r3, [r3, #0]
2400525a:	4a13      	ldr	r2, [pc, #76]	; (240052a8 <HAL_DMA_PollForTransfer+0x5dc>)
2400525c:	4293      	cmp	r3, r2
2400525e:	d004      	beq.n	2400526a <HAL_DMA_PollForTransfer+0x59e>
24005260:	68fb      	ldr	r3, [r7, #12]
24005262:	681b      	ldr	r3, [r3, #0]
24005264:	4a11      	ldr	r2, [pc, #68]	; (240052ac <HAL_DMA_PollForTransfer+0x5e0>)
24005266:	4293      	cmp	r3, r2
24005268:	d132      	bne.n	240052d0 <HAL_DMA_PollForTransfer+0x604>
2400526a:	2301      	movs	r3, #1
2400526c:	e031      	b.n	240052d2 <HAL_DMA_PollForTransfer+0x606>
2400526e:	bf00      	nop
24005270:	40020010 	.word	0x40020010
24005274:	40020028 	.word	0x40020028
24005278:	40020040 	.word	0x40020040
2400527c:	40020058 	.word	0x40020058
24005280:	40020070 	.word	0x40020070
24005284:	40020088 	.word	0x40020088
24005288:	400200a0 	.word	0x400200a0
2400528c:	400200b8 	.word	0x400200b8
24005290:	40020410 	.word	0x40020410
24005294:	40020428 	.word	0x40020428
24005298:	40020440 	.word	0x40020440
2400529c:	40020458 	.word	0x40020458
240052a0:	40020470 	.word	0x40020470
240052a4:	40020488 	.word	0x40020488
240052a8:	400204a0 	.word	0x400204a0
240052ac:	400204b8 	.word	0x400204b8
240052b0:	58025408 	.word	0x58025408
240052b4:	5802541c 	.word	0x5802541c
240052b8:	58025430 	.word	0x58025430
240052bc:	58025444 	.word	0x58025444
240052c0:	58025458 	.word	0x58025458
240052c4:	5802546c 	.word	0x5802546c
240052c8:	58025480 	.word	0x58025480
240052cc:	58025494 	.word	0x58025494
240052d0:	2300      	movs	r3, #0
240052d2:	2b00      	cmp	r3, #0
240052d4:	d008      	beq.n	240052e8 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
240052d6:	68fb      	ldr	r3, [r7, #12]
240052d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240052da:	f003 031f 	and.w	r3, r3, #31
240052de:	2230      	movs	r2, #48	; 0x30
240052e0:	409a      	lsls	r2, r3
240052e2:	69fb      	ldr	r3, [r7, #28]
240052e4:	601a      	str	r2, [r3, #0]
240052e6:	e007      	b.n	240052f8 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
240052e8:	68fb      	ldr	r3, [r7, #12]
240052ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240052ec:	f003 031f 	and.w	r3, r3, #31
240052f0:	2202      	movs	r2, #2
240052f2:	409a      	lsls	r2, r3
240052f4:	69fb      	ldr	r3, [r7, #28]
240052f6:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
240052f8:	68fb      	ldr	r3, [r7, #12]
240052fa:	2201      	movs	r2, #1
240052fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24005300:	68fb      	ldr	r3, [r7, #12]
24005302:	2200      	movs	r2, #0
24005304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
24005308:	e065      	b.n	240053d6 <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400530a:	68fb      	ldr	r3, [r7, #12]
2400530c:	681b      	ldr	r3, [r3, #0]
2400530e:	4a34      	ldr	r2, [pc, #208]	; (240053e0 <HAL_DMA_PollForTransfer+0x714>)
24005310:	4293      	cmp	r3, r2
24005312:	d04a      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005314:	68fb      	ldr	r3, [r7, #12]
24005316:	681b      	ldr	r3, [r3, #0]
24005318:	4a32      	ldr	r2, [pc, #200]	; (240053e4 <HAL_DMA_PollForTransfer+0x718>)
2400531a:	4293      	cmp	r3, r2
2400531c:	d045      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
2400531e:	68fb      	ldr	r3, [r7, #12]
24005320:	681b      	ldr	r3, [r3, #0]
24005322:	4a31      	ldr	r2, [pc, #196]	; (240053e8 <HAL_DMA_PollForTransfer+0x71c>)
24005324:	4293      	cmp	r3, r2
24005326:	d040      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005328:	68fb      	ldr	r3, [r7, #12]
2400532a:	681b      	ldr	r3, [r3, #0]
2400532c:	4a2f      	ldr	r2, [pc, #188]	; (240053ec <HAL_DMA_PollForTransfer+0x720>)
2400532e:	4293      	cmp	r3, r2
24005330:	d03b      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005332:	68fb      	ldr	r3, [r7, #12]
24005334:	681b      	ldr	r3, [r3, #0]
24005336:	4a2e      	ldr	r2, [pc, #184]	; (240053f0 <HAL_DMA_PollForTransfer+0x724>)
24005338:	4293      	cmp	r3, r2
2400533a:	d036      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
2400533c:	68fb      	ldr	r3, [r7, #12]
2400533e:	681b      	ldr	r3, [r3, #0]
24005340:	4a2c      	ldr	r2, [pc, #176]	; (240053f4 <HAL_DMA_PollForTransfer+0x728>)
24005342:	4293      	cmp	r3, r2
24005344:	d031      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005346:	68fb      	ldr	r3, [r7, #12]
24005348:	681b      	ldr	r3, [r3, #0]
2400534a:	4a2b      	ldr	r2, [pc, #172]	; (240053f8 <HAL_DMA_PollForTransfer+0x72c>)
2400534c:	4293      	cmp	r3, r2
2400534e:	d02c      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005350:	68fb      	ldr	r3, [r7, #12]
24005352:	681b      	ldr	r3, [r3, #0]
24005354:	4a29      	ldr	r2, [pc, #164]	; (240053fc <HAL_DMA_PollForTransfer+0x730>)
24005356:	4293      	cmp	r3, r2
24005358:	d027      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
2400535a:	68fb      	ldr	r3, [r7, #12]
2400535c:	681b      	ldr	r3, [r3, #0]
2400535e:	4a28      	ldr	r2, [pc, #160]	; (24005400 <HAL_DMA_PollForTransfer+0x734>)
24005360:	4293      	cmp	r3, r2
24005362:	d022      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005364:	68fb      	ldr	r3, [r7, #12]
24005366:	681b      	ldr	r3, [r3, #0]
24005368:	4a26      	ldr	r2, [pc, #152]	; (24005404 <HAL_DMA_PollForTransfer+0x738>)
2400536a:	4293      	cmp	r3, r2
2400536c:	d01d      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
2400536e:	68fb      	ldr	r3, [r7, #12]
24005370:	681b      	ldr	r3, [r3, #0]
24005372:	4a25      	ldr	r2, [pc, #148]	; (24005408 <HAL_DMA_PollForTransfer+0x73c>)
24005374:	4293      	cmp	r3, r2
24005376:	d018      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005378:	68fb      	ldr	r3, [r7, #12]
2400537a:	681b      	ldr	r3, [r3, #0]
2400537c:	4a23      	ldr	r2, [pc, #140]	; (2400540c <HAL_DMA_PollForTransfer+0x740>)
2400537e:	4293      	cmp	r3, r2
24005380:	d013      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005382:	68fb      	ldr	r3, [r7, #12]
24005384:	681b      	ldr	r3, [r3, #0]
24005386:	4a22      	ldr	r2, [pc, #136]	; (24005410 <HAL_DMA_PollForTransfer+0x744>)
24005388:	4293      	cmp	r3, r2
2400538a:	d00e      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
2400538c:	68fb      	ldr	r3, [r7, #12]
2400538e:	681b      	ldr	r3, [r3, #0]
24005390:	4a20      	ldr	r2, [pc, #128]	; (24005414 <HAL_DMA_PollForTransfer+0x748>)
24005392:	4293      	cmp	r3, r2
24005394:	d009      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
24005396:	68fb      	ldr	r3, [r7, #12]
24005398:	681b      	ldr	r3, [r3, #0]
2400539a:	4a1f      	ldr	r2, [pc, #124]	; (24005418 <HAL_DMA_PollForTransfer+0x74c>)
2400539c:	4293      	cmp	r3, r2
2400539e:	d004      	beq.n	240053aa <HAL_DMA_PollForTransfer+0x6de>
240053a0:	68fb      	ldr	r3, [r7, #12]
240053a2:	681b      	ldr	r3, [r3, #0]
240053a4:	4a1d      	ldr	r2, [pc, #116]	; (2400541c <HAL_DMA_PollForTransfer+0x750>)
240053a6:	4293      	cmp	r3, r2
240053a8:	d101      	bne.n	240053ae <HAL_DMA_PollForTransfer+0x6e2>
240053aa:	2301      	movs	r3, #1
240053ac:	e000      	b.n	240053b0 <HAL_DMA_PollForTransfer+0x6e4>
240053ae:	2300      	movs	r3, #0
240053b0:	2b00      	cmp	r3, #0
240053b2:	d008      	beq.n	240053c6 <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
240053b4:	68fb      	ldr	r3, [r7, #12]
240053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240053b8:	f003 031f 	and.w	r3, r3, #31
240053bc:	2210      	movs	r2, #16
240053be:	409a      	lsls	r2, r3
240053c0:	69fb      	ldr	r3, [r7, #28]
240053c2:	601a      	str	r2, [r3, #0]
240053c4:	e007      	b.n	240053d6 <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
240053c6:	68fb      	ldr	r3, [r7, #12]
240053c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240053ca:	f003 031f 	and.w	r3, r3, #31
240053ce:	2204      	movs	r2, #4
240053d0:	409a      	lsls	r2, r3
240053d2:	69fb      	ldr	r3, [r7, #28]
240053d4:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
240053d6:	7efb      	ldrb	r3, [r7, #27]
}
240053d8:	4618      	mov	r0, r3
240053da:	3728      	adds	r7, #40	; 0x28
240053dc:	46bd      	mov	sp, r7
240053de:	bd80      	pop	{r7, pc}
240053e0:	40020010 	.word	0x40020010
240053e4:	40020028 	.word	0x40020028
240053e8:	40020040 	.word	0x40020040
240053ec:	40020058 	.word	0x40020058
240053f0:	40020070 	.word	0x40020070
240053f4:	40020088 	.word	0x40020088
240053f8:	400200a0 	.word	0x400200a0
240053fc:	400200b8 	.word	0x400200b8
24005400:	40020410 	.word	0x40020410
24005404:	40020428 	.word	0x40020428
24005408:	40020440 	.word	0x40020440
2400540c:	40020458 	.word	0x40020458
24005410:	40020470 	.word	0x40020470
24005414:	40020488 	.word	0x40020488
24005418:	400204a0 	.word	0x400204a0
2400541c:	400204b8 	.word	0x400204b8

24005420 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
24005420:	b580      	push	{r7, lr}
24005422:	b08a      	sub	sp, #40	; 0x28
24005424:	af00      	add	r7, sp, #0
24005426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
24005428:	2300      	movs	r3, #0
2400542a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
2400542c:	4b67      	ldr	r3, [pc, #412]	; (240055cc <HAL_DMA_IRQHandler+0x1ac>)
2400542e:	681b      	ldr	r3, [r3, #0]
24005430:	4a67      	ldr	r2, [pc, #412]	; (240055d0 <HAL_DMA_IRQHandler+0x1b0>)
24005432:	fba2 2303 	umull	r2, r3, r2, r3
24005436:	0a9b      	lsrs	r3, r3, #10
24005438:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400543a:	687b      	ldr	r3, [r7, #4]
2400543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400543e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005440:	687b      	ldr	r3, [r7, #4]
24005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24005444:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
24005446:	6a3b      	ldr	r3, [r7, #32]
24005448:	681b      	ldr	r3, [r3, #0]
2400544a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
2400544c:	69fb      	ldr	r3, [r7, #28]
2400544e:	681b      	ldr	r3, [r3, #0]
24005450:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005452:	687b      	ldr	r3, [r7, #4]
24005454:	681b      	ldr	r3, [r3, #0]
24005456:	4a5f      	ldr	r2, [pc, #380]	; (240055d4 <HAL_DMA_IRQHandler+0x1b4>)
24005458:	4293      	cmp	r3, r2
2400545a:	d04a      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
2400545c:	687b      	ldr	r3, [r7, #4]
2400545e:	681b      	ldr	r3, [r3, #0]
24005460:	4a5d      	ldr	r2, [pc, #372]	; (240055d8 <HAL_DMA_IRQHandler+0x1b8>)
24005462:	4293      	cmp	r3, r2
24005464:	d045      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
24005466:	687b      	ldr	r3, [r7, #4]
24005468:	681b      	ldr	r3, [r3, #0]
2400546a:	4a5c      	ldr	r2, [pc, #368]	; (240055dc <HAL_DMA_IRQHandler+0x1bc>)
2400546c:	4293      	cmp	r3, r2
2400546e:	d040      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
24005470:	687b      	ldr	r3, [r7, #4]
24005472:	681b      	ldr	r3, [r3, #0]
24005474:	4a5a      	ldr	r2, [pc, #360]	; (240055e0 <HAL_DMA_IRQHandler+0x1c0>)
24005476:	4293      	cmp	r3, r2
24005478:	d03b      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
2400547a:	687b      	ldr	r3, [r7, #4]
2400547c:	681b      	ldr	r3, [r3, #0]
2400547e:	4a59      	ldr	r2, [pc, #356]	; (240055e4 <HAL_DMA_IRQHandler+0x1c4>)
24005480:	4293      	cmp	r3, r2
24005482:	d036      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
24005484:	687b      	ldr	r3, [r7, #4]
24005486:	681b      	ldr	r3, [r3, #0]
24005488:	4a57      	ldr	r2, [pc, #348]	; (240055e8 <HAL_DMA_IRQHandler+0x1c8>)
2400548a:	4293      	cmp	r3, r2
2400548c:	d031      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
2400548e:	687b      	ldr	r3, [r7, #4]
24005490:	681b      	ldr	r3, [r3, #0]
24005492:	4a56      	ldr	r2, [pc, #344]	; (240055ec <HAL_DMA_IRQHandler+0x1cc>)
24005494:	4293      	cmp	r3, r2
24005496:	d02c      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
24005498:	687b      	ldr	r3, [r7, #4]
2400549a:	681b      	ldr	r3, [r3, #0]
2400549c:	4a54      	ldr	r2, [pc, #336]	; (240055f0 <HAL_DMA_IRQHandler+0x1d0>)
2400549e:	4293      	cmp	r3, r2
240054a0:	d027      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
240054a2:	687b      	ldr	r3, [r7, #4]
240054a4:	681b      	ldr	r3, [r3, #0]
240054a6:	4a53      	ldr	r2, [pc, #332]	; (240055f4 <HAL_DMA_IRQHandler+0x1d4>)
240054a8:	4293      	cmp	r3, r2
240054aa:	d022      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
240054ac:	687b      	ldr	r3, [r7, #4]
240054ae:	681b      	ldr	r3, [r3, #0]
240054b0:	4a51      	ldr	r2, [pc, #324]	; (240055f8 <HAL_DMA_IRQHandler+0x1d8>)
240054b2:	4293      	cmp	r3, r2
240054b4:	d01d      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
240054b6:	687b      	ldr	r3, [r7, #4]
240054b8:	681b      	ldr	r3, [r3, #0]
240054ba:	4a50      	ldr	r2, [pc, #320]	; (240055fc <HAL_DMA_IRQHandler+0x1dc>)
240054bc:	4293      	cmp	r3, r2
240054be:	d018      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
240054c0:	687b      	ldr	r3, [r7, #4]
240054c2:	681b      	ldr	r3, [r3, #0]
240054c4:	4a4e      	ldr	r2, [pc, #312]	; (24005600 <HAL_DMA_IRQHandler+0x1e0>)
240054c6:	4293      	cmp	r3, r2
240054c8:	d013      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
240054ca:	687b      	ldr	r3, [r7, #4]
240054cc:	681b      	ldr	r3, [r3, #0]
240054ce:	4a4d      	ldr	r2, [pc, #308]	; (24005604 <HAL_DMA_IRQHandler+0x1e4>)
240054d0:	4293      	cmp	r3, r2
240054d2:	d00e      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
240054d4:	687b      	ldr	r3, [r7, #4]
240054d6:	681b      	ldr	r3, [r3, #0]
240054d8:	4a4b      	ldr	r2, [pc, #300]	; (24005608 <HAL_DMA_IRQHandler+0x1e8>)
240054da:	4293      	cmp	r3, r2
240054dc:	d009      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
240054de:	687b      	ldr	r3, [r7, #4]
240054e0:	681b      	ldr	r3, [r3, #0]
240054e2:	4a4a      	ldr	r2, [pc, #296]	; (2400560c <HAL_DMA_IRQHandler+0x1ec>)
240054e4:	4293      	cmp	r3, r2
240054e6:	d004      	beq.n	240054f2 <HAL_DMA_IRQHandler+0xd2>
240054e8:	687b      	ldr	r3, [r7, #4]
240054ea:	681b      	ldr	r3, [r3, #0]
240054ec:	4a48      	ldr	r2, [pc, #288]	; (24005610 <HAL_DMA_IRQHandler+0x1f0>)
240054ee:	4293      	cmp	r3, r2
240054f0:	d101      	bne.n	240054f6 <HAL_DMA_IRQHandler+0xd6>
240054f2:	2301      	movs	r3, #1
240054f4:	e000      	b.n	240054f8 <HAL_DMA_IRQHandler+0xd8>
240054f6:	2300      	movs	r3, #0
240054f8:	2b00      	cmp	r3, #0
240054fa:	f000 842b 	beq.w	24005d54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240054fe:	687b      	ldr	r3, [r7, #4]
24005500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005502:	f003 031f 	and.w	r3, r3, #31
24005506:	2208      	movs	r2, #8
24005508:	409a      	lsls	r2, r3
2400550a:	69bb      	ldr	r3, [r7, #24]
2400550c:	4013      	ands	r3, r2
2400550e:	2b00      	cmp	r3, #0
24005510:	f000 80a2 	beq.w	24005658 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24005514:	687b      	ldr	r3, [r7, #4]
24005516:	681b      	ldr	r3, [r3, #0]
24005518:	4a2e      	ldr	r2, [pc, #184]	; (240055d4 <HAL_DMA_IRQHandler+0x1b4>)
2400551a:	4293      	cmp	r3, r2
2400551c:	d04a      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
2400551e:	687b      	ldr	r3, [r7, #4]
24005520:	681b      	ldr	r3, [r3, #0]
24005522:	4a2d      	ldr	r2, [pc, #180]	; (240055d8 <HAL_DMA_IRQHandler+0x1b8>)
24005524:	4293      	cmp	r3, r2
24005526:	d045      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
24005528:	687b      	ldr	r3, [r7, #4]
2400552a:	681b      	ldr	r3, [r3, #0]
2400552c:	4a2b      	ldr	r2, [pc, #172]	; (240055dc <HAL_DMA_IRQHandler+0x1bc>)
2400552e:	4293      	cmp	r3, r2
24005530:	d040      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
24005532:	687b      	ldr	r3, [r7, #4]
24005534:	681b      	ldr	r3, [r3, #0]
24005536:	4a2a      	ldr	r2, [pc, #168]	; (240055e0 <HAL_DMA_IRQHandler+0x1c0>)
24005538:	4293      	cmp	r3, r2
2400553a:	d03b      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
2400553c:	687b      	ldr	r3, [r7, #4]
2400553e:	681b      	ldr	r3, [r3, #0]
24005540:	4a28      	ldr	r2, [pc, #160]	; (240055e4 <HAL_DMA_IRQHandler+0x1c4>)
24005542:	4293      	cmp	r3, r2
24005544:	d036      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
24005546:	687b      	ldr	r3, [r7, #4]
24005548:	681b      	ldr	r3, [r3, #0]
2400554a:	4a27      	ldr	r2, [pc, #156]	; (240055e8 <HAL_DMA_IRQHandler+0x1c8>)
2400554c:	4293      	cmp	r3, r2
2400554e:	d031      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
24005550:	687b      	ldr	r3, [r7, #4]
24005552:	681b      	ldr	r3, [r3, #0]
24005554:	4a25      	ldr	r2, [pc, #148]	; (240055ec <HAL_DMA_IRQHandler+0x1cc>)
24005556:	4293      	cmp	r3, r2
24005558:	d02c      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
2400555a:	687b      	ldr	r3, [r7, #4]
2400555c:	681b      	ldr	r3, [r3, #0]
2400555e:	4a24      	ldr	r2, [pc, #144]	; (240055f0 <HAL_DMA_IRQHandler+0x1d0>)
24005560:	4293      	cmp	r3, r2
24005562:	d027      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
24005564:	687b      	ldr	r3, [r7, #4]
24005566:	681b      	ldr	r3, [r3, #0]
24005568:	4a22      	ldr	r2, [pc, #136]	; (240055f4 <HAL_DMA_IRQHandler+0x1d4>)
2400556a:	4293      	cmp	r3, r2
2400556c:	d022      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
2400556e:	687b      	ldr	r3, [r7, #4]
24005570:	681b      	ldr	r3, [r3, #0]
24005572:	4a21      	ldr	r2, [pc, #132]	; (240055f8 <HAL_DMA_IRQHandler+0x1d8>)
24005574:	4293      	cmp	r3, r2
24005576:	d01d      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
24005578:	687b      	ldr	r3, [r7, #4]
2400557a:	681b      	ldr	r3, [r3, #0]
2400557c:	4a1f      	ldr	r2, [pc, #124]	; (240055fc <HAL_DMA_IRQHandler+0x1dc>)
2400557e:	4293      	cmp	r3, r2
24005580:	d018      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
24005582:	687b      	ldr	r3, [r7, #4]
24005584:	681b      	ldr	r3, [r3, #0]
24005586:	4a1e      	ldr	r2, [pc, #120]	; (24005600 <HAL_DMA_IRQHandler+0x1e0>)
24005588:	4293      	cmp	r3, r2
2400558a:	d013      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
2400558c:	687b      	ldr	r3, [r7, #4]
2400558e:	681b      	ldr	r3, [r3, #0]
24005590:	4a1c      	ldr	r2, [pc, #112]	; (24005604 <HAL_DMA_IRQHandler+0x1e4>)
24005592:	4293      	cmp	r3, r2
24005594:	d00e      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
24005596:	687b      	ldr	r3, [r7, #4]
24005598:	681b      	ldr	r3, [r3, #0]
2400559a:	4a1b      	ldr	r2, [pc, #108]	; (24005608 <HAL_DMA_IRQHandler+0x1e8>)
2400559c:	4293      	cmp	r3, r2
2400559e:	d009      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
240055a0:	687b      	ldr	r3, [r7, #4]
240055a2:	681b      	ldr	r3, [r3, #0]
240055a4:	4a19      	ldr	r2, [pc, #100]	; (2400560c <HAL_DMA_IRQHandler+0x1ec>)
240055a6:	4293      	cmp	r3, r2
240055a8:	d004      	beq.n	240055b4 <HAL_DMA_IRQHandler+0x194>
240055aa:	687b      	ldr	r3, [r7, #4]
240055ac:	681b      	ldr	r3, [r3, #0]
240055ae:	4a18      	ldr	r2, [pc, #96]	; (24005610 <HAL_DMA_IRQHandler+0x1f0>)
240055b0:	4293      	cmp	r3, r2
240055b2:	d12f      	bne.n	24005614 <HAL_DMA_IRQHandler+0x1f4>
240055b4:	687b      	ldr	r3, [r7, #4]
240055b6:	681b      	ldr	r3, [r3, #0]
240055b8:	681b      	ldr	r3, [r3, #0]
240055ba:	f003 0304 	and.w	r3, r3, #4
240055be:	2b00      	cmp	r3, #0
240055c0:	bf14      	ite	ne
240055c2:	2301      	movne	r3, #1
240055c4:	2300      	moveq	r3, #0
240055c6:	b2db      	uxtb	r3, r3
240055c8:	e02e      	b.n	24005628 <HAL_DMA_IRQHandler+0x208>
240055ca:	bf00      	nop
240055cc:	240004b0 	.word	0x240004b0
240055d0:	1b4e81b5 	.word	0x1b4e81b5
240055d4:	40020010 	.word	0x40020010
240055d8:	40020028 	.word	0x40020028
240055dc:	40020040 	.word	0x40020040
240055e0:	40020058 	.word	0x40020058
240055e4:	40020070 	.word	0x40020070
240055e8:	40020088 	.word	0x40020088
240055ec:	400200a0 	.word	0x400200a0
240055f0:	400200b8 	.word	0x400200b8
240055f4:	40020410 	.word	0x40020410
240055f8:	40020428 	.word	0x40020428
240055fc:	40020440 	.word	0x40020440
24005600:	40020458 	.word	0x40020458
24005604:	40020470 	.word	0x40020470
24005608:	40020488 	.word	0x40020488
2400560c:	400204a0 	.word	0x400204a0
24005610:	400204b8 	.word	0x400204b8
24005614:	687b      	ldr	r3, [r7, #4]
24005616:	681b      	ldr	r3, [r3, #0]
24005618:	681b      	ldr	r3, [r3, #0]
2400561a:	f003 0308 	and.w	r3, r3, #8
2400561e:	2b00      	cmp	r3, #0
24005620:	bf14      	ite	ne
24005622:	2301      	movne	r3, #1
24005624:	2300      	moveq	r3, #0
24005626:	b2db      	uxtb	r3, r3
24005628:	2b00      	cmp	r3, #0
2400562a:	d015      	beq.n	24005658 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
2400562c:	687b      	ldr	r3, [r7, #4]
2400562e:	681b      	ldr	r3, [r3, #0]
24005630:	681a      	ldr	r2, [r3, #0]
24005632:	687b      	ldr	r3, [r7, #4]
24005634:	681b      	ldr	r3, [r3, #0]
24005636:	f022 0204 	bic.w	r2, r2, #4
2400563a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400563c:	687b      	ldr	r3, [r7, #4]
2400563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005640:	f003 031f 	and.w	r3, r3, #31
24005644:	2208      	movs	r2, #8
24005646:	409a      	lsls	r2, r3
24005648:	6a3b      	ldr	r3, [r7, #32]
2400564a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2400564c:	687b      	ldr	r3, [r7, #4]
2400564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005650:	f043 0201 	orr.w	r2, r3, #1
24005654:	687b      	ldr	r3, [r7, #4]
24005656:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005658:	687b      	ldr	r3, [r7, #4]
2400565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400565c:	f003 031f 	and.w	r3, r3, #31
24005660:	69ba      	ldr	r2, [r7, #24]
24005662:	fa22 f303 	lsr.w	r3, r2, r3
24005666:	f003 0301 	and.w	r3, r3, #1
2400566a:	2b00      	cmp	r3, #0
2400566c:	d06e      	beq.n	2400574c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
2400566e:	687b      	ldr	r3, [r7, #4]
24005670:	681b      	ldr	r3, [r3, #0]
24005672:	4a69      	ldr	r2, [pc, #420]	; (24005818 <HAL_DMA_IRQHandler+0x3f8>)
24005674:	4293      	cmp	r3, r2
24005676:	d04a      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
24005678:	687b      	ldr	r3, [r7, #4]
2400567a:	681b      	ldr	r3, [r3, #0]
2400567c:	4a67      	ldr	r2, [pc, #412]	; (2400581c <HAL_DMA_IRQHandler+0x3fc>)
2400567e:	4293      	cmp	r3, r2
24005680:	d045      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
24005682:	687b      	ldr	r3, [r7, #4]
24005684:	681b      	ldr	r3, [r3, #0]
24005686:	4a66      	ldr	r2, [pc, #408]	; (24005820 <HAL_DMA_IRQHandler+0x400>)
24005688:	4293      	cmp	r3, r2
2400568a:	d040      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
2400568c:	687b      	ldr	r3, [r7, #4]
2400568e:	681b      	ldr	r3, [r3, #0]
24005690:	4a64      	ldr	r2, [pc, #400]	; (24005824 <HAL_DMA_IRQHandler+0x404>)
24005692:	4293      	cmp	r3, r2
24005694:	d03b      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
24005696:	687b      	ldr	r3, [r7, #4]
24005698:	681b      	ldr	r3, [r3, #0]
2400569a:	4a63      	ldr	r2, [pc, #396]	; (24005828 <HAL_DMA_IRQHandler+0x408>)
2400569c:	4293      	cmp	r3, r2
2400569e:	d036      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056a0:	687b      	ldr	r3, [r7, #4]
240056a2:	681b      	ldr	r3, [r3, #0]
240056a4:	4a61      	ldr	r2, [pc, #388]	; (2400582c <HAL_DMA_IRQHandler+0x40c>)
240056a6:	4293      	cmp	r3, r2
240056a8:	d031      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056aa:	687b      	ldr	r3, [r7, #4]
240056ac:	681b      	ldr	r3, [r3, #0]
240056ae:	4a60      	ldr	r2, [pc, #384]	; (24005830 <HAL_DMA_IRQHandler+0x410>)
240056b0:	4293      	cmp	r3, r2
240056b2:	d02c      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056b4:	687b      	ldr	r3, [r7, #4]
240056b6:	681b      	ldr	r3, [r3, #0]
240056b8:	4a5e      	ldr	r2, [pc, #376]	; (24005834 <HAL_DMA_IRQHandler+0x414>)
240056ba:	4293      	cmp	r3, r2
240056bc:	d027      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056be:	687b      	ldr	r3, [r7, #4]
240056c0:	681b      	ldr	r3, [r3, #0]
240056c2:	4a5d      	ldr	r2, [pc, #372]	; (24005838 <HAL_DMA_IRQHandler+0x418>)
240056c4:	4293      	cmp	r3, r2
240056c6:	d022      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056c8:	687b      	ldr	r3, [r7, #4]
240056ca:	681b      	ldr	r3, [r3, #0]
240056cc:	4a5b      	ldr	r2, [pc, #364]	; (2400583c <HAL_DMA_IRQHandler+0x41c>)
240056ce:	4293      	cmp	r3, r2
240056d0:	d01d      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056d2:	687b      	ldr	r3, [r7, #4]
240056d4:	681b      	ldr	r3, [r3, #0]
240056d6:	4a5a      	ldr	r2, [pc, #360]	; (24005840 <HAL_DMA_IRQHandler+0x420>)
240056d8:	4293      	cmp	r3, r2
240056da:	d018      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056dc:	687b      	ldr	r3, [r7, #4]
240056de:	681b      	ldr	r3, [r3, #0]
240056e0:	4a58      	ldr	r2, [pc, #352]	; (24005844 <HAL_DMA_IRQHandler+0x424>)
240056e2:	4293      	cmp	r3, r2
240056e4:	d013      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056e6:	687b      	ldr	r3, [r7, #4]
240056e8:	681b      	ldr	r3, [r3, #0]
240056ea:	4a57      	ldr	r2, [pc, #348]	; (24005848 <HAL_DMA_IRQHandler+0x428>)
240056ec:	4293      	cmp	r3, r2
240056ee:	d00e      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056f0:	687b      	ldr	r3, [r7, #4]
240056f2:	681b      	ldr	r3, [r3, #0]
240056f4:	4a55      	ldr	r2, [pc, #340]	; (2400584c <HAL_DMA_IRQHandler+0x42c>)
240056f6:	4293      	cmp	r3, r2
240056f8:	d009      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
240056fa:	687b      	ldr	r3, [r7, #4]
240056fc:	681b      	ldr	r3, [r3, #0]
240056fe:	4a54      	ldr	r2, [pc, #336]	; (24005850 <HAL_DMA_IRQHandler+0x430>)
24005700:	4293      	cmp	r3, r2
24005702:	d004      	beq.n	2400570e <HAL_DMA_IRQHandler+0x2ee>
24005704:	687b      	ldr	r3, [r7, #4]
24005706:	681b      	ldr	r3, [r3, #0]
24005708:	4a52      	ldr	r2, [pc, #328]	; (24005854 <HAL_DMA_IRQHandler+0x434>)
2400570a:	4293      	cmp	r3, r2
2400570c:	d10a      	bne.n	24005724 <HAL_DMA_IRQHandler+0x304>
2400570e:	687b      	ldr	r3, [r7, #4]
24005710:	681b      	ldr	r3, [r3, #0]
24005712:	695b      	ldr	r3, [r3, #20]
24005714:	f003 0380 	and.w	r3, r3, #128	; 0x80
24005718:	2b00      	cmp	r3, #0
2400571a:	bf14      	ite	ne
2400571c:	2301      	movne	r3, #1
2400571e:	2300      	moveq	r3, #0
24005720:	b2db      	uxtb	r3, r3
24005722:	e003      	b.n	2400572c <HAL_DMA_IRQHandler+0x30c>
24005724:	687b      	ldr	r3, [r7, #4]
24005726:	681b      	ldr	r3, [r3, #0]
24005728:	681b      	ldr	r3, [r3, #0]
2400572a:	2300      	movs	r3, #0
2400572c:	2b00      	cmp	r3, #0
2400572e:	d00d      	beq.n	2400574c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005730:	687b      	ldr	r3, [r7, #4]
24005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005734:	f003 031f 	and.w	r3, r3, #31
24005738:	2201      	movs	r2, #1
2400573a:	409a      	lsls	r2, r3
2400573c:	6a3b      	ldr	r3, [r7, #32]
2400573e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005740:	687b      	ldr	r3, [r7, #4]
24005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005744:	f043 0202 	orr.w	r2, r3, #2
24005748:	687b      	ldr	r3, [r7, #4]
2400574a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400574c:	687b      	ldr	r3, [r7, #4]
2400574e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005750:	f003 031f 	and.w	r3, r3, #31
24005754:	2204      	movs	r2, #4
24005756:	409a      	lsls	r2, r3
24005758:	69bb      	ldr	r3, [r7, #24]
2400575a:	4013      	ands	r3, r2
2400575c:	2b00      	cmp	r3, #0
2400575e:	f000 808f 	beq.w	24005880 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005762:	687b      	ldr	r3, [r7, #4]
24005764:	681b      	ldr	r3, [r3, #0]
24005766:	4a2c      	ldr	r2, [pc, #176]	; (24005818 <HAL_DMA_IRQHandler+0x3f8>)
24005768:	4293      	cmp	r3, r2
2400576a:	d04a      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
2400576c:	687b      	ldr	r3, [r7, #4]
2400576e:	681b      	ldr	r3, [r3, #0]
24005770:	4a2a      	ldr	r2, [pc, #168]	; (2400581c <HAL_DMA_IRQHandler+0x3fc>)
24005772:	4293      	cmp	r3, r2
24005774:	d045      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
24005776:	687b      	ldr	r3, [r7, #4]
24005778:	681b      	ldr	r3, [r3, #0]
2400577a:	4a29      	ldr	r2, [pc, #164]	; (24005820 <HAL_DMA_IRQHandler+0x400>)
2400577c:	4293      	cmp	r3, r2
2400577e:	d040      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
24005780:	687b      	ldr	r3, [r7, #4]
24005782:	681b      	ldr	r3, [r3, #0]
24005784:	4a27      	ldr	r2, [pc, #156]	; (24005824 <HAL_DMA_IRQHandler+0x404>)
24005786:	4293      	cmp	r3, r2
24005788:	d03b      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
2400578a:	687b      	ldr	r3, [r7, #4]
2400578c:	681b      	ldr	r3, [r3, #0]
2400578e:	4a26      	ldr	r2, [pc, #152]	; (24005828 <HAL_DMA_IRQHandler+0x408>)
24005790:	4293      	cmp	r3, r2
24005792:	d036      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
24005794:	687b      	ldr	r3, [r7, #4]
24005796:	681b      	ldr	r3, [r3, #0]
24005798:	4a24      	ldr	r2, [pc, #144]	; (2400582c <HAL_DMA_IRQHandler+0x40c>)
2400579a:	4293      	cmp	r3, r2
2400579c:	d031      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
2400579e:	687b      	ldr	r3, [r7, #4]
240057a0:	681b      	ldr	r3, [r3, #0]
240057a2:	4a23      	ldr	r2, [pc, #140]	; (24005830 <HAL_DMA_IRQHandler+0x410>)
240057a4:	4293      	cmp	r3, r2
240057a6:	d02c      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057a8:	687b      	ldr	r3, [r7, #4]
240057aa:	681b      	ldr	r3, [r3, #0]
240057ac:	4a21      	ldr	r2, [pc, #132]	; (24005834 <HAL_DMA_IRQHandler+0x414>)
240057ae:	4293      	cmp	r3, r2
240057b0:	d027      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057b2:	687b      	ldr	r3, [r7, #4]
240057b4:	681b      	ldr	r3, [r3, #0]
240057b6:	4a20      	ldr	r2, [pc, #128]	; (24005838 <HAL_DMA_IRQHandler+0x418>)
240057b8:	4293      	cmp	r3, r2
240057ba:	d022      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057bc:	687b      	ldr	r3, [r7, #4]
240057be:	681b      	ldr	r3, [r3, #0]
240057c0:	4a1e      	ldr	r2, [pc, #120]	; (2400583c <HAL_DMA_IRQHandler+0x41c>)
240057c2:	4293      	cmp	r3, r2
240057c4:	d01d      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057c6:	687b      	ldr	r3, [r7, #4]
240057c8:	681b      	ldr	r3, [r3, #0]
240057ca:	4a1d      	ldr	r2, [pc, #116]	; (24005840 <HAL_DMA_IRQHandler+0x420>)
240057cc:	4293      	cmp	r3, r2
240057ce:	d018      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057d0:	687b      	ldr	r3, [r7, #4]
240057d2:	681b      	ldr	r3, [r3, #0]
240057d4:	4a1b      	ldr	r2, [pc, #108]	; (24005844 <HAL_DMA_IRQHandler+0x424>)
240057d6:	4293      	cmp	r3, r2
240057d8:	d013      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057da:	687b      	ldr	r3, [r7, #4]
240057dc:	681b      	ldr	r3, [r3, #0]
240057de:	4a1a      	ldr	r2, [pc, #104]	; (24005848 <HAL_DMA_IRQHandler+0x428>)
240057e0:	4293      	cmp	r3, r2
240057e2:	d00e      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057e4:	687b      	ldr	r3, [r7, #4]
240057e6:	681b      	ldr	r3, [r3, #0]
240057e8:	4a18      	ldr	r2, [pc, #96]	; (2400584c <HAL_DMA_IRQHandler+0x42c>)
240057ea:	4293      	cmp	r3, r2
240057ec:	d009      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057ee:	687b      	ldr	r3, [r7, #4]
240057f0:	681b      	ldr	r3, [r3, #0]
240057f2:	4a17      	ldr	r2, [pc, #92]	; (24005850 <HAL_DMA_IRQHandler+0x430>)
240057f4:	4293      	cmp	r3, r2
240057f6:	d004      	beq.n	24005802 <HAL_DMA_IRQHandler+0x3e2>
240057f8:	687b      	ldr	r3, [r7, #4]
240057fa:	681b      	ldr	r3, [r3, #0]
240057fc:	4a15      	ldr	r2, [pc, #84]	; (24005854 <HAL_DMA_IRQHandler+0x434>)
240057fe:	4293      	cmp	r3, r2
24005800:	d12a      	bne.n	24005858 <HAL_DMA_IRQHandler+0x438>
24005802:	687b      	ldr	r3, [r7, #4]
24005804:	681b      	ldr	r3, [r3, #0]
24005806:	681b      	ldr	r3, [r3, #0]
24005808:	f003 0302 	and.w	r3, r3, #2
2400580c:	2b00      	cmp	r3, #0
2400580e:	bf14      	ite	ne
24005810:	2301      	movne	r3, #1
24005812:	2300      	moveq	r3, #0
24005814:	b2db      	uxtb	r3, r3
24005816:	e023      	b.n	24005860 <HAL_DMA_IRQHandler+0x440>
24005818:	40020010 	.word	0x40020010
2400581c:	40020028 	.word	0x40020028
24005820:	40020040 	.word	0x40020040
24005824:	40020058 	.word	0x40020058
24005828:	40020070 	.word	0x40020070
2400582c:	40020088 	.word	0x40020088
24005830:	400200a0 	.word	0x400200a0
24005834:	400200b8 	.word	0x400200b8
24005838:	40020410 	.word	0x40020410
2400583c:	40020428 	.word	0x40020428
24005840:	40020440 	.word	0x40020440
24005844:	40020458 	.word	0x40020458
24005848:	40020470 	.word	0x40020470
2400584c:	40020488 	.word	0x40020488
24005850:	400204a0 	.word	0x400204a0
24005854:	400204b8 	.word	0x400204b8
24005858:	687b      	ldr	r3, [r7, #4]
2400585a:	681b      	ldr	r3, [r3, #0]
2400585c:	681b      	ldr	r3, [r3, #0]
2400585e:	2300      	movs	r3, #0
24005860:	2b00      	cmp	r3, #0
24005862:	d00d      	beq.n	24005880 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005864:	687b      	ldr	r3, [r7, #4]
24005866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005868:	f003 031f 	and.w	r3, r3, #31
2400586c:	2204      	movs	r2, #4
2400586e:	409a      	lsls	r2, r3
24005870:	6a3b      	ldr	r3, [r7, #32]
24005872:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005874:	687b      	ldr	r3, [r7, #4]
24005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005878:	f043 0204 	orr.w	r2, r3, #4
2400587c:	687b      	ldr	r3, [r7, #4]
2400587e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005880:	687b      	ldr	r3, [r7, #4]
24005882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005884:	f003 031f 	and.w	r3, r3, #31
24005888:	2210      	movs	r2, #16
2400588a:	409a      	lsls	r2, r3
2400588c:	69bb      	ldr	r3, [r7, #24]
2400588e:	4013      	ands	r3, r2
24005890:	2b00      	cmp	r3, #0
24005892:	f000 80a6 	beq.w	240059e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24005896:	687b      	ldr	r3, [r7, #4]
24005898:	681b      	ldr	r3, [r3, #0]
2400589a:	4a85      	ldr	r2, [pc, #532]	; (24005ab0 <HAL_DMA_IRQHandler+0x690>)
2400589c:	4293      	cmp	r3, r2
2400589e:	d04a      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058a0:	687b      	ldr	r3, [r7, #4]
240058a2:	681b      	ldr	r3, [r3, #0]
240058a4:	4a83      	ldr	r2, [pc, #524]	; (24005ab4 <HAL_DMA_IRQHandler+0x694>)
240058a6:	4293      	cmp	r3, r2
240058a8:	d045      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058aa:	687b      	ldr	r3, [r7, #4]
240058ac:	681b      	ldr	r3, [r3, #0]
240058ae:	4a82      	ldr	r2, [pc, #520]	; (24005ab8 <HAL_DMA_IRQHandler+0x698>)
240058b0:	4293      	cmp	r3, r2
240058b2:	d040      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058b4:	687b      	ldr	r3, [r7, #4]
240058b6:	681b      	ldr	r3, [r3, #0]
240058b8:	4a80      	ldr	r2, [pc, #512]	; (24005abc <HAL_DMA_IRQHandler+0x69c>)
240058ba:	4293      	cmp	r3, r2
240058bc:	d03b      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058be:	687b      	ldr	r3, [r7, #4]
240058c0:	681b      	ldr	r3, [r3, #0]
240058c2:	4a7f      	ldr	r2, [pc, #508]	; (24005ac0 <HAL_DMA_IRQHandler+0x6a0>)
240058c4:	4293      	cmp	r3, r2
240058c6:	d036      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058c8:	687b      	ldr	r3, [r7, #4]
240058ca:	681b      	ldr	r3, [r3, #0]
240058cc:	4a7d      	ldr	r2, [pc, #500]	; (24005ac4 <HAL_DMA_IRQHandler+0x6a4>)
240058ce:	4293      	cmp	r3, r2
240058d0:	d031      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058d2:	687b      	ldr	r3, [r7, #4]
240058d4:	681b      	ldr	r3, [r3, #0]
240058d6:	4a7c      	ldr	r2, [pc, #496]	; (24005ac8 <HAL_DMA_IRQHandler+0x6a8>)
240058d8:	4293      	cmp	r3, r2
240058da:	d02c      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058dc:	687b      	ldr	r3, [r7, #4]
240058de:	681b      	ldr	r3, [r3, #0]
240058e0:	4a7a      	ldr	r2, [pc, #488]	; (24005acc <HAL_DMA_IRQHandler+0x6ac>)
240058e2:	4293      	cmp	r3, r2
240058e4:	d027      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058e6:	687b      	ldr	r3, [r7, #4]
240058e8:	681b      	ldr	r3, [r3, #0]
240058ea:	4a79      	ldr	r2, [pc, #484]	; (24005ad0 <HAL_DMA_IRQHandler+0x6b0>)
240058ec:	4293      	cmp	r3, r2
240058ee:	d022      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058f0:	687b      	ldr	r3, [r7, #4]
240058f2:	681b      	ldr	r3, [r3, #0]
240058f4:	4a77      	ldr	r2, [pc, #476]	; (24005ad4 <HAL_DMA_IRQHandler+0x6b4>)
240058f6:	4293      	cmp	r3, r2
240058f8:	d01d      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
240058fa:	687b      	ldr	r3, [r7, #4]
240058fc:	681b      	ldr	r3, [r3, #0]
240058fe:	4a76      	ldr	r2, [pc, #472]	; (24005ad8 <HAL_DMA_IRQHandler+0x6b8>)
24005900:	4293      	cmp	r3, r2
24005902:	d018      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
24005904:	687b      	ldr	r3, [r7, #4]
24005906:	681b      	ldr	r3, [r3, #0]
24005908:	4a74      	ldr	r2, [pc, #464]	; (24005adc <HAL_DMA_IRQHandler+0x6bc>)
2400590a:	4293      	cmp	r3, r2
2400590c:	d013      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
2400590e:	687b      	ldr	r3, [r7, #4]
24005910:	681b      	ldr	r3, [r3, #0]
24005912:	4a73      	ldr	r2, [pc, #460]	; (24005ae0 <HAL_DMA_IRQHandler+0x6c0>)
24005914:	4293      	cmp	r3, r2
24005916:	d00e      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
24005918:	687b      	ldr	r3, [r7, #4]
2400591a:	681b      	ldr	r3, [r3, #0]
2400591c:	4a71      	ldr	r2, [pc, #452]	; (24005ae4 <HAL_DMA_IRQHandler+0x6c4>)
2400591e:	4293      	cmp	r3, r2
24005920:	d009      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
24005922:	687b      	ldr	r3, [r7, #4]
24005924:	681b      	ldr	r3, [r3, #0]
24005926:	4a70      	ldr	r2, [pc, #448]	; (24005ae8 <HAL_DMA_IRQHandler+0x6c8>)
24005928:	4293      	cmp	r3, r2
2400592a:	d004      	beq.n	24005936 <HAL_DMA_IRQHandler+0x516>
2400592c:	687b      	ldr	r3, [r7, #4]
2400592e:	681b      	ldr	r3, [r3, #0]
24005930:	4a6e      	ldr	r2, [pc, #440]	; (24005aec <HAL_DMA_IRQHandler+0x6cc>)
24005932:	4293      	cmp	r3, r2
24005934:	d10a      	bne.n	2400594c <HAL_DMA_IRQHandler+0x52c>
24005936:	687b      	ldr	r3, [r7, #4]
24005938:	681b      	ldr	r3, [r3, #0]
2400593a:	681b      	ldr	r3, [r3, #0]
2400593c:	f003 0308 	and.w	r3, r3, #8
24005940:	2b00      	cmp	r3, #0
24005942:	bf14      	ite	ne
24005944:	2301      	movne	r3, #1
24005946:	2300      	moveq	r3, #0
24005948:	b2db      	uxtb	r3, r3
2400594a:	e009      	b.n	24005960 <HAL_DMA_IRQHandler+0x540>
2400594c:	687b      	ldr	r3, [r7, #4]
2400594e:	681b      	ldr	r3, [r3, #0]
24005950:	681b      	ldr	r3, [r3, #0]
24005952:	f003 0304 	and.w	r3, r3, #4
24005956:	2b00      	cmp	r3, #0
24005958:	bf14      	ite	ne
2400595a:	2301      	movne	r3, #1
2400595c:	2300      	moveq	r3, #0
2400595e:	b2db      	uxtb	r3, r3
24005960:	2b00      	cmp	r3, #0
24005962:	d03e      	beq.n	240059e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24005964:	687b      	ldr	r3, [r7, #4]
24005966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005968:	f003 031f 	and.w	r3, r3, #31
2400596c:	2210      	movs	r2, #16
2400596e:	409a      	lsls	r2, r3
24005970:	6a3b      	ldr	r3, [r7, #32]
24005972:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005974:	687b      	ldr	r3, [r7, #4]
24005976:	681b      	ldr	r3, [r3, #0]
24005978:	681b      	ldr	r3, [r3, #0]
2400597a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2400597e:	2b00      	cmp	r3, #0
24005980:	d018      	beq.n	240059b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005982:	687b      	ldr	r3, [r7, #4]
24005984:	681b      	ldr	r3, [r3, #0]
24005986:	681b      	ldr	r3, [r3, #0]
24005988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2400598c:	2b00      	cmp	r3, #0
2400598e:	d108      	bne.n	240059a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
24005990:	687b      	ldr	r3, [r7, #4]
24005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005994:	2b00      	cmp	r3, #0
24005996:	d024      	beq.n	240059e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
24005998:	687b      	ldr	r3, [r7, #4]
2400599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400599c:	6878      	ldr	r0, [r7, #4]
2400599e:	4798      	blx	r3
240059a0:	e01f      	b.n	240059e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
240059a2:	687b      	ldr	r3, [r7, #4]
240059a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240059a6:	2b00      	cmp	r3, #0
240059a8:	d01b      	beq.n	240059e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
240059aa:	687b      	ldr	r3, [r7, #4]
240059ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240059ae:	6878      	ldr	r0, [r7, #4]
240059b0:	4798      	blx	r3
240059b2:	e016      	b.n	240059e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
240059b4:	687b      	ldr	r3, [r7, #4]
240059b6:	681b      	ldr	r3, [r3, #0]
240059b8:	681b      	ldr	r3, [r3, #0]
240059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
240059be:	2b00      	cmp	r3, #0
240059c0:	d107      	bne.n	240059d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240059c2:	687b      	ldr	r3, [r7, #4]
240059c4:	681b      	ldr	r3, [r3, #0]
240059c6:	681a      	ldr	r2, [r3, #0]
240059c8:	687b      	ldr	r3, [r7, #4]
240059ca:	681b      	ldr	r3, [r3, #0]
240059cc:	f022 0208 	bic.w	r2, r2, #8
240059d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
240059d2:	687b      	ldr	r3, [r7, #4]
240059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240059d6:	2b00      	cmp	r3, #0
240059d8:	d003      	beq.n	240059e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
240059da:	687b      	ldr	r3, [r7, #4]
240059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240059de:	6878      	ldr	r0, [r7, #4]
240059e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240059e2:	687b      	ldr	r3, [r7, #4]
240059e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240059e6:	f003 031f 	and.w	r3, r3, #31
240059ea:	2220      	movs	r2, #32
240059ec:	409a      	lsls	r2, r3
240059ee:	69bb      	ldr	r3, [r7, #24]
240059f0:	4013      	ands	r3, r2
240059f2:	2b00      	cmp	r3, #0
240059f4:	f000 8110 	beq.w	24005c18 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240059f8:	687b      	ldr	r3, [r7, #4]
240059fa:	681b      	ldr	r3, [r3, #0]
240059fc:	4a2c      	ldr	r2, [pc, #176]	; (24005ab0 <HAL_DMA_IRQHandler+0x690>)
240059fe:	4293      	cmp	r3, r2
24005a00:	d04a      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a02:	687b      	ldr	r3, [r7, #4]
24005a04:	681b      	ldr	r3, [r3, #0]
24005a06:	4a2b      	ldr	r2, [pc, #172]	; (24005ab4 <HAL_DMA_IRQHandler+0x694>)
24005a08:	4293      	cmp	r3, r2
24005a0a:	d045      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a0c:	687b      	ldr	r3, [r7, #4]
24005a0e:	681b      	ldr	r3, [r3, #0]
24005a10:	4a29      	ldr	r2, [pc, #164]	; (24005ab8 <HAL_DMA_IRQHandler+0x698>)
24005a12:	4293      	cmp	r3, r2
24005a14:	d040      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a16:	687b      	ldr	r3, [r7, #4]
24005a18:	681b      	ldr	r3, [r3, #0]
24005a1a:	4a28      	ldr	r2, [pc, #160]	; (24005abc <HAL_DMA_IRQHandler+0x69c>)
24005a1c:	4293      	cmp	r3, r2
24005a1e:	d03b      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a20:	687b      	ldr	r3, [r7, #4]
24005a22:	681b      	ldr	r3, [r3, #0]
24005a24:	4a26      	ldr	r2, [pc, #152]	; (24005ac0 <HAL_DMA_IRQHandler+0x6a0>)
24005a26:	4293      	cmp	r3, r2
24005a28:	d036      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a2a:	687b      	ldr	r3, [r7, #4]
24005a2c:	681b      	ldr	r3, [r3, #0]
24005a2e:	4a25      	ldr	r2, [pc, #148]	; (24005ac4 <HAL_DMA_IRQHandler+0x6a4>)
24005a30:	4293      	cmp	r3, r2
24005a32:	d031      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a34:	687b      	ldr	r3, [r7, #4]
24005a36:	681b      	ldr	r3, [r3, #0]
24005a38:	4a23      	ldr	r2, [pc, #140]	; (24005ac8 <HAL_DMA_IRQHandler+0x6a8>)
24005a3a:	4293      	cmp	r3, r2
24005a3c:	d02c      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a3e:	687b      	ldr	r3, [r7, #4]
24005a40:	681b      	ldr	r3, [r3, #0]
24005a42:	4a22      	ldr	r2, [pc, #136]	; (24005acc <HAL_DMA_IRQHandler+0x6ac>)
24005a44:	4293      	cmp	r3, r2
24005a46:	d027      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a48:	687b      	ldr	r3, [r7, #4]
24005a4a:	681b      	ldr	r3, [r3, #0]
24005a4c:	4a20      	ldr	r2, [pc, #128]	; (24005ad0 <HAL_DMA_IRQHandler+0x6b0>)
24005a4e:	4293      	cmp	r3, r2
24005a50:	d022      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a52:	687b      	ldr	r3, [r7, #4]
24005a54:	681b      	ldr	r3, [r3, #0]
24005a56:	4a1f      	ldr	r2, [pc, #124]	; (24005ad4 <HAL_DMA_IRQHandler+0x6b4>)
24005a58:	4293      	cmp	r3, r2
24005a5a:	d01d      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a5c:	687b      	ldr	r3, [r7, #4]
24005a5e:	681b      	ldr	r3, [r3, #0]
24005a60:	4a1d      	ldr	r2, [pc, #116]	; (24005ad8 <HAL_DMA_IRQHandler+0x6b8>)
24005a62:	4293      	cmp	r3, r2
24005a64:	d018      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a66:	687b      	ldr	r3, [r7, #4]
24005a68:	681b      	ldr	r3, [r3, #0]
24005a6a:	4a1c      	ldr	r2, [pc, #112]	; (24005adc <HAL_DMA_IRQHandler+0x6bc>)
24005a6c:	4293      	cmp	r3, r2
24005a6e:	d013      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a70:	687b      	ldr	r3, [r7, #4]
24005a72:	681b      	ldr	r3, [r3, #0]
24005a74:	4a1a      	ldr	r2, [pc, #104]	; (24005ae0 <HAL_DMA_IRQHandler+0x6c0>)
24005a76:	4293      	cmp	r3, r2
24005a78:	d00e      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a7a:	687b      	ldr	r3, [r7, #4]
24005a7c:	681b      	ldr	r3, [r3, #0]
24005a7e:	4a19      	ldr	r2, [pc, #100]	; (24005ae4 <HAL_DMA_IRQHandler+0x6c4>)
24005a80:	4293      	cmp	r3, r2
24005a82:	d009      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a84:	687b      	ldr	r3, [r7, #4]
24005a86:	681b      	ldr	r3, [r3, #0]
24005a88:	4a17      	ldr	r2, [pc, #92]	; (24005ae8 <HAL_DMA_IRQHandler+0x6c8>)
24005a8a:	4293      	cmp	r3, r2
24005a8c:	d004      	beq.n	24005a98 <HAL_DMA_IRQHandler+0x678>
24005a8e:	687b      	ldr	r3, [r7, #4]
24005a90:	681b      	ldr	r3, [r3, #0]
24005a92:	4a16      	ldr	r2, [pc, #88]	; (24005aec <HAL_DMA_IRQHandler+0x6cc>)
24005a94:	4293      	cmp	r3, r2
24005a96:	d12b      	bne.n	24005af0 <HAL_DMA_IRQHandler+0x6d0>
24005a98:	687b      	ldr	r3, [r7, #4]
24005a9a:	681b      	ldr	r3, [r3, #0]
24005a9c:	681b      	ldr	r3, [r3, #0]
24005a9e:	f003 0310 	and.w	r3, r3, #16
24005aa2:	2b00      	cmp	r3, #0
24005aa4:	bf14      	ite	ne
24005aa6:	2301      	movne	r3, #1
24005aa8:	2300      	moveq	r3, #0
24005aaa:	b2db      	uxtb	r3, r3
24005aac:	e02a      	b.n	24005b04 <HAL_DMA_IRQHandler+0x6e4>
24005aae:	bf00      	nop
24005ab0:	40020010 	.word	0x40020010
24005ab4:	40020028 	.word	0x40020028
24005ab8:	40020040 	.word	0x40020040
24005abc:	40020058 	.word	0x40020058
24005ac0:	40020070 	.word	0x40020070
24005ac4:	40020088 	.word	0x40020088
24005ac8:	400200a0 	.word	0x400200a0
24005acc:	400200b8 	.word	0x400200b8
24005ad0:	40020410 	.word	0x40020410
24005ad4:	40020428 	.word	0x40020428
24005ad8:	40020440 	.word	0x40020440
24005adc:	40020458 	.word	0x40020458
24005ae0:	40020470 	.word	0x40020470
24005ae4:	40020488 	.word	0x40020488
24005ae8:	400204a0 	.word	0x400204a0
24005aec:	400204b8 	.word	0x400204b8
24005af0:	687b      	ldr	r3, [r7, #4]
24005af2:	681b      	ldr	r3, [r3, #0]
24005af4:	681b      	ldr	r3, [r3, #0]
24005af6:	f003 0302 	and.w	r3, r3, #2
24005afa:	2b00      	cmp	r3, #0
24005afc:	bf14      	ite	ne
24005afe:	2301      	movne	r3, #1
24005b00:	2300      	moveq	r3, #0
24005b02:	b2db      	uxtb	r3, r3
24005b04:	2b00      	cmp	r3, #0
24005b06:	f000 8087 	beq.w	24005c18 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24005b0a:	687b      	ldr	r3, [r7, #4]
24005b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005b0e:	f003 031f 	and.w	r3, r3, #31
24005b12:	2220      	movs	r2, #32
24005b14:	409a      	lsls	r2, r3
24005b16:	6a3b      	ldr	r3, [r7, #32]
24005b18:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
24005b1a:	687b      	ldr	r3, [r7, #4]
24005b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24005b20:	b2db      	uxtb	r3, r3
24005b22:	2b04      	cmp	r3, #4
24005b24:	d139      	bne.n	24005b9a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24005b26:	687b      	ldr	r3, [r7, #4]
24005b28:	681b      	ldr	r3, [r3, #0]
24005b2a:	681a      	ldr	r2, [r3, #0]
24005b2c:	687b      	ldr	r3, [r7, #4]
24005b2e:	681b      	ldr	r3, [r3, #0]
24005b30:	f022 0216 	bic.w	r2, r2, #22
24005b34:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24005b36:	687b      	ldr	r3, [r7, #4]
24005b38:	681b      	ldr	r3, [r3, #0]
24005b3a:	695a      	ldr	r2, [r3, #20]
24005b3c:	687b      	ldr	r3, [r7, #4]
24005b3e:	681b      	ldr	r3, [r3, #0]
24005b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24005b44:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005b46:	687b      	ldr	r3, [r7, #4]
24005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005b4a:	2b00      	cmp	r3, #0
24005b4c:	d103      	bne.n	24005b56 <HAL_DMA_IRQHandler+0x736>
24005b4e:	687b      	ldr	r3, [r7, #4]
24005b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005b52:	2b00      	cmp	r3, #0
24005b54:	d007      	beq.n	24005b66 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005b56:	687b      	ldr	r3, [r7, #4]
24005b58:	681b      	ldr	r3, [r3, #0]
24005b5a:	681a      	ldr	r2, [r3, #0]
24005b5c:	687b      	ldr	r3, [r7, #4]
24005b5e:	681b      	ldr	r3, [r3, #0]
24005b60:	f022 0208 	bic.w	r2, r2, #8
24005b64:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005b66:	687b      	ldr	r3, [r7, #4]
24005b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005b6a:	f003 031f 	and.w	r3, r3, #31
24005b6e:	223f      	movs	r2, #63	; 0x3f
24005b70:	409a      	lsls	r2, r3
24005b72:	6a3b      	ldr	r3, [r7, #32]
24005b74:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24005b76:	687b      	ldr	r3, [r7, #4]
24005b78:	2201      	movs	r2, #1
24005b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24005b7e:	687b      	ldr	r3, [r7, #4]
24005b80:	2200      	movs	r2, #0
24005b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
24005b86:	687b      	ldr	r3, [r7, #4]
24005b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24005b8a:	2b00      	cmp	r3, #0
24005b8c:	f000 834a 	beq.w	24006224 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
24005b90:	687b      	ldr	r3, [r7, #4]
24005b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24005b94:	6878      	ldr	r0, [r7, #4]
24005b96:	4798      	blx	r3
          }
          return;
24005b98:	e344      	b.n	24006224 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005b9a:	687b      	ldr	r3, [r7, #4]
24005b9c:	681b      	ldr	r3, [r3, #0]
24005b9e:	681b      	ldr	r3, [r3, #0]
24005ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24005ba4:	2b00      	cmp	r3, #0
24005ba6:	d018      	beq.n	24005bda <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005ba8:	687b      	ldr	r3, [r7, #4]
24005baa:	681b      	ldr	r3, [r3, #0]
24005bac:	681b      	ldr	r3, [r3, #0]
24005bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24005bb2:	2b00      	cmp	r3, #0
24005bb4:	d108      	bne.n	24005bc8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
24005bb6:	687b      	ldr	r3, [r7, #4]
24005bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005bba:	2b00      	cmp	r3, #0
24005bbc:	d02c      	beq.n	24005c18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
24005bbe:	687b      	ldr	r3, [r7, #4]
24005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005bc2:	6878      	ldr	r0, [r7, #4]
24005bc4:	4798      	blx	r3
24005bc6:	e027      	b.n	24005c18 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
24005bc8:	687b      	ldr	r3, [r7, #4]
24005bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005bcc:	2b00      	cmp	r3, #0
24005bce:	d023      	beq.n	24005c18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
24005bd0:	687b      	ldr	r3, [r7, #4]
24005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005bd4:	6878      	ldr	r0, [r7, #4]
24005bd6:	4798      	blx	r3
24005bd8:	e01e      	b.n	24005c18 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005bda:	687b      	ldr	r3, [r7, #4]
24005bdc:	681b      	ldr	r3, [r3, #0]
24005bde:	681b      	ldr	r3, [r3, #0]
24005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
24005be4:	2b00      	cmp	r3, #0
24005be6:	d10f      	bne.n	24005c08 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24005be8:	687b      	ldr	r3, [r7, #4]
24005bea:	681b      	ldr	r3, [r3, #0]
24005bec:	681a      	ldr	r2, [r3, #0]
24005bee:	687b      	ldr	r3, [r7, #4]
24005bf0:	681b      	ldr	r3, [r3, #0]
24005bf2:	f022 0210 	bic.w	r2, r2, #16
24005bf6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
24005bf8:	687b      	ldr	r3, [r7, #4]
24005bfa:	2201      	movs	r2, #1
24005bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
24005c00:	687b      	ldr	r3, [r7, #4]
24005c02:	2200      	movs	r2, #0
24005c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
24005c08:	687b      	ldr	r3, [r7, #4]
24005c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005c0c:	2b00      	cmp	r3, #0
24005c0e:	d003      	beq.n	24005c18 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
24005c10:	687b      	ldr	r3, [r7, #4]
24005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005c14:	6878      	ldr	r0, [r7, #4]
24005c16:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24005c18:	687b      	ldr	r3, [r7, #4]
24005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005c1c:	2b00      	cmp	r3, #0
24005c1e:	f000 8306 	beq.w	2400622e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24005c22:	687b      	ldr	r3, [r7, #4]
24005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24005c26:	f003 0301 	and.w	r3, r3, #1
24005c2a:	2b00      	cmp	r3, #0
24005c2c:	f000 8088 	beq.w	24005d40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
24005c30:	687b      	ldr	r3, [r7, #4]
24005c32:	2204      	movs	r2, #4
24005c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
24005c38:	687b      	ldr	r3, [r7, #4]
24005c3a:	681b      	ldr	r3, [r3, #0]
24005c3c:	4a7a      	ldr	r2, [pc, #488]	; (24005e28 <HAL_DMA_IRQHandler+0xa08>)
24005c3e:	4293      	cmp	r3, r2
24005c40:	d04a      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c42:	687b      	ldr	r3, [r7, #4]
24005c44:	681b      	ldr	r3, [r3, #0]
24005c46:	4a79      	ldr	r2, [pc, #484]	; (24005e2c <HAL_DMA_IRQHandler+0xa0c>)
24005c48:	4293      	cmp	r3, r2
24005c4a:	d045      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c4c:	687b      	ldr	r3, [r7, #4]
24005c4e:	681b      	ldr	r3, [r3, #0]
24005c50:	4a77      	ldr	r2, [pc, #476]	; (24005e30 <HAL_DMA_IRQHandler+0xa10>)
24005c52:	4293      	cmp	r3, r2
24005c54:	d040      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c56:	687b      	ldr	r3, [r7, #4]
24005c58:	681b      	ldr	r3, [r3, #0]
24005c5a:	4a76      	ldr	r2, [pc, #472]	; (24005e34 <HAL_DMA_IRQHandler+0xa14>)
24005c5c:	4293      	cmp	r3, r2
24005c5e:	d03b      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c60:	687b      	ldr	r3, [r7, #4]
24005c62:	681b      	ldr	r3, [r3, #0]
24005c64:	4a74      	ldr	r2, [pc, #464]	; (24005e38 <HAL_DMA_IRQHandler+0xa18>)
24005c66:	4293      	cmp	r3, r2
24005c68:	d036      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c6a:	687b      	ldr	r3, [r7, #4]
24005c6c:	681b      	ldr	r3, [r3, #0]
24005c6e:	4a73      	ldr	r2, [pc, #460]	; (24005e3c <HAL_DMA_IRQHandler+0xa1c>)
24005c70:	4293      	cmp	r3, r2
24005c72:	d031      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c74:	687b      	ldr	r3, [r7, #4]
24005c76:	681b      	ldr	r3, [r3, #0]
24005c78:	4a71      	ldr	r2, [pc, #452]	; (24005e40 <HAL_DMA_IRQHandler+0xa20>)
24005c7a:	4293      	cmp	r3, r2
24005c7c:	d02c      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c7e:	687b      	ldr	r3, [r7, #4]
24005c80:	681b      	ldr	r3, [r3, #0]
24005c82:	4a70      	ldr	r2, [pc, #448]	; (24005e44 <HAL_DMA_IRQHandler+0xa24>)
24005c84:	4293      	cmp	r3, r2
24005c86:	d027      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c88:	687b      	ldr	r3, [r7, #4]
24005c8a:	681b      	ldr	r3, [r3, #0]
24005c8c:	4a6e      	ldr	r2, [pc, #440]	; (24005e48 <HAL_DMA_IRQHandler+0xa28>)
24005c8e:	4293      	cmp	r3, r2
24005c90:	d022      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c92:	687b      	ldr	r3, [r7, #4]
24005c94:	681b      	ldr	r3, [r3, #0]
24005c96:	4a6d      	ldr	r2, [pc, #436]	; (24005e4c <HAL_DMA_IRQHandler+0xa2c>)
24005c98:	4293      	cmp	r3, r2
24005c9a:	d01d      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005c9c:	687b      	ldr	r3, [r7, #4]
24005c9e:	681b      	ldr	r3, [r3, #0]
24005ca0:	4a6b      	ldr	r2, [pc, #428]	; (24005e50 <HAL_DMA_IRQHandler+0xa30>)
24005ca2:	4293      	cmp	r3, r2
24005ca4:	d018      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005ca6:	687b      	ldr	r3, [r7, #4]
24005ca8:	681b      	ldr	r3, [r3, #0]
24005caa:	4a6a      	ldr	r2, [pc, #424]	; (24005e54 <HAL_DMA_IRQHandler+0xa34>)
24005cac:	4293      	cmp	r3, r2
24005cae:	d013      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005cb0:	687b      	ldr	r3, [r7, #4]
24005cb2:	681b      	ldr	r3, [r3, #0]
24005cb4:	4a68      	ldr	r2, [pc, #416]	; (24005e58 <HAL_DMA_IRQHandler+0xa38>)
24005cb6:	4293      	cmp	r3, r2
24005cb8:	d00e      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005cba:	687b      	ldr	r3, [r7, #4]
24005cbc:	681b      	ldr	r3, [r3, #0]
24005cbe:	4a67      	ldr	r2, [pc, #412]	; (24005e5c <HAL_DMA_IRQHandler+0xa3c>)
24005cc0:	4293      	cmp	r3, r2
24005cc2:	d009      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005cc4:	687b      	ldr	r3, [r7, #4]
24005cc6:	681b      	ldr	r3, [r3, #0]
24005cc8:	4a65      	ldr	r2, [pc, #404]	; (24005e60 <HAL_DMA_IRQHandler+0xa40>)
24005cca:	4293      	cmp	r3, r2
24005ccc:	d004      	beq.n	24005cd8 <HAL_DMA_IRQHandler+0x8b8>
24005cce:	687b      	ldr	r3, [r7, #4]
24005cd0:	681b      	ldr	r3, [r3, #0]
24005cd2:	4a64      	ldr	r2, [pc, #400]	; (24005e64 <HAL_DMA_IRQHandler+0xa44>)
24005cd4:	4293      	cmp	r3, r2
24005cd6:	d108      	bne.n	24005cea <HAL_DMA_IRQHandler+0x8ca>
24005cd8:	687b      	ldr	r3, [r7, #4]
24005cda:	681b      	ldr	r3, [r3, #0]
24005cdc:	681a      	ldr	r2, [r3, #0]
24005cde:	687b      	ldr	r3, [r7, #4]
24005ce0:	681b      	ldr	r3, [r3, #0]
24005ce2:	f022 0201 	bic.w	r2, r2, #1
24005ce6:	601a      	str	r2, [r3, #0]
24005ce8:	e007      	b.n	24005cfa <HAL_DMA_IRQHandler+0x8da>
24005cea:	687b      	ldr	r3, [r7, #4]
24005cec:	681b      	ldr	r3, [r3, #0]
24005cee:	681a      	ldr	r2, [r3, #0]
24005cf0:	687b      	ldr	r3, [r7, #4]
24005cf2:	681b      	ldr	r3, [r3, #0]
24005cf4:	f022 0201 	bic.w	r2, r2, #1
24005cf8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
24005cfa:	68fb      	ldr	r3, [r7, #12]
24005cfc:	3301      	adds	r3, #1
24005cfe:	60fb      	str	r3, [r7, #12]
24005d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24005d02:	429a      	cmp	r2, r3
24005d04:	d307      	bcc.n	24005d16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005d06:	687b      	ldr	r3, [r7, #4]
24005d08:	681b      	ldr	r3, [r3, #0]
24005d0a:	681b      	ldr	r3, [r3, #0]
24005d0c:	f003 0301 	and.w	r3, r3, #1
24005d10:	2b00      	cmp	r3, #0
24005d12:	d1f2      	bne.n	24005cfa <HAL_DMA_IRQHandler+0x8da>
24005d14:	e000      	b.n	24005d18 <HAL_DMA_IRQHandler+0x8f8>
            break;
24005d16:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24005d18:	687b      	ldr	r3, [r7, #4]
24005d1a:	681b      	ldr	r3, [r3, #0]
24005d1c:	681b      	ldr	r3, [r3, #0]
24005d1e:	f003 0301 	and.w	r3, r3, #1
24005d22:	2b00      	cmp	r3, #0
24005d24:	d004      	beq.n	24005d30 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
24005d26:	687b      	ldr	r3, [r7, #4]
24005d28:	2203      	movs	r2, #3
24005d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24005d2e:	e003      	b.n	24005d38 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
24005d30:	687b      	ldr	r3, [r7, #4]
24005d32:	2201      	movs	r2, #1
24005d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005d38:	687b      	ldr	r3, [r7, #4]
24005d3a:	2200      	movs	r2, #0
24005d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
24005d40:	687b      	ldr	r3, [r7, #4]
24005d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24005d44:	2b00      	cmp	r3, #0
24005d46:	f000 8272 	beq.w	2400622e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24005d4a:	687b      	ldr	r3, [r7, #4]
24005d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24005d4e:	6878      	ldr	r0, [r7, #4]
24005d50:	4798      	blx	r3
24005d52:	e26c      	b.n	2400622e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24005d54:	687b      	ldr	r3, [r7, #4]
24005d56:	681b      	ldr	r3, [r3, #0]
24005d58:	4a43      	ldr	r2, [pc, #268]	; (24005e68 <HAL_DMA_IRQHandler+0xa48>)
24005d5a:	4293      	cmp	r3, r2
24005d5c:	d022      	beq.n	24005da4 <HAL_DMA_IRQHandler+0x984>
24005d5e:	687b      	ldr	r3, [r7, #4]
24005d60:	681b      	ldr	r3, [r3, #0]
24005d62:	4a42      	ldr	r2, [pc, #264]	; (24005e6c <HAL_DMA_IRQHandler+0xa4c>)
24005d64:	4293      	cmp	r3, r2
24005d66:	d01d      	beq.n	24005da4 <HAL_DMA_IRQHandler+0x984>
24005d68:	687b      	ldr	r3, [r7, #4]
24005d6a:	681b      	ldr	r3, [r3, #0]
24005d6c:	4a40      	ldr	r2, [pc, #256]	; (24005e70 <HAL_DMA_IRQHandler+0xa50>)
24005d6e:	4293      	cmp	r3, r2
24005d70:	d018      	beq.n	24005da4 <HAL_DMA_IRQHandler+0x984>
24005d72:	687b      	ldr	r3, [r7, #4]
24005d74:	681b      	ldr	r3, [r3, #0]
24005d76:	4a3f      	ldr	r2, [pc, #252]	; (24005e74 <HAL_DMA_IRQHandler+0xa54>)
24005d78:	4293      	cmp	r3, r2
24005d7a:	d013      	beq.n	24005da4 <HAL_DMA_IRQHandler+0x984>
24005d7c:	687b      	ldr	r3, [r7, #4]
24005d7e:	681b      	ldr	r3, [r3, #0]
24005d80:	4a3d      	ldr	r2, [pc, #244]	; (24005e78 <HAL_DMA_IRQHandler+0xa58>)
24005d82:	4293      	cmp	r3, r2
24005d84:	d00e      	beq.n	24005da4 <HAL_DMA_IRQHandler+0x984>
24005d86:	687b      	ldr	r3, [r7, #4]
24005d88:	681b      	ldr	r3, [r3, #0]
24005d8a:	4a3c      	ldr	r2, [pc, #240]	; (24005e7c <HAL_DMA_IRQHandler+0xa5c>)
24005d8c:	4293      	cmp	r3, r2
24005d8e:	d009      	beq.n	24005da4 <HAL_DMA_IRQHandler+0x984>
24005d90:	687b      	ldr	r3, [r7, #4]
24005d92:	681b      	ldr	r3, [r3, #0]
24005d94:	4a3a      	ldr	r2, [pc, #232]	; (24005e80 <HAL_DMA_IRQHandler+0xa60>)
24005d96:	4293      	cmp	r3, r2
24005d98:	d004      	beq.n	24005da4 <HAL_DMA_IRQHandler+0x984>
24005d9a:	687b      	ldr	r3, [r7, #4]
24005d9c:	681b      	ldr	r3, [r3, #0]
24005d9e:	4a39      	ldr	r2, [pc, #228]	; (24005e84 <HAL_DMA_IRQHandler+0xa64>)
24005da0:	4293      	cmp	r3, r2
24005da2:	d101      	bne.n	24005da8 <HAL_DMA_IRQHandler+0x988>
24005da4:	2301      	movs	r3, #1
24005da6:	e000      	b.n	24005daa <HAL_DMA_IRQHandler+0x98a>
24005da8:	2300      	movs	r3, #0
24005daa:	2b00      	cmp	r3, #0
24005dac:	f000 823f 	beq.w	2400622e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24005db0:	687b      	ldr	r3, [r7, #4]
24005db2:	681b      	ldr	r3, [r3, #0]
24005db4:	681b      	ldr	r3, [r3, #0]
24005db6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005db8:	687b      	ldr	r3, [r7, #4]
24005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005dbc:	f003 031f 	and.w	r3, r3, #31
24005dc0:	2204      	movs	r2, #4
24005dc2:	409a      	lsls	r2, r3
24005dc4:	697b      	ldr	r3, [r7, #20]
24005dc6:	4013      	ands	r3, r2
24005dc8:	2b00      	cmp	r3, #0
24005dca:	f000 80cd 	beq.w	24005f68 <HAL_DMA_IRQHandler+0xb48>
24005dce:	693b      	ldr	r3, [r7, #16]
24005dd0:	f003 0304 	and.w	r3, r3, #4
24005dd4:	2b00      	cmp	r3, #0
24005dd6:	f000 80c7 	beq.w	24005f68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24005dda:	687b      	ldr	r3, [r7, #4]
24005ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005dde:	f003 031f 	and.w	r3, r3, #31
24005de2:	2204      	movs	r2, #4
24005de4:	409a      	lsls	r2, r3
24005de6:	69fb      	ldr	r3, [r7, #28]
24005de8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005dea:	693b      	ldr	r3, [r7, #16]
24005dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24005df0:	2b00      	cmp	r3, #0
24005df2:	d049      	beq.n	24005e88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005df4:	693b      	ldr	r3, [r7, #16]
24005df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005dfa:	2b00      	cmp	r3, #0
24005dfc:	d109      	bne.n	24005e12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
24005dfe:	687b      	ldr	r3, [r7, #4]
24005e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005e02:	2b00      	cmp	r3, #0
24005e04:	f000 8210 	beq.w	24006228 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
24005e08:	687b      	ldr	r3, [r7, #4]
24005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005e0c:	6878      	ldr	r0, [r7, #4]
24005e0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e10:	e20a      	b.n	24006228 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
24005e12:	687b      	ldr	r3, [r7, #4]
24005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005e16:	2b00      	cmp	r3, #0
24005e18:	f000 8206 	beq.w	24006228 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
24005e1c:	687b      	ldr	r3, [r7, #4]
24005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005e20:	6878      	ldr	r0, [r7, #4]
24005e22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e24:	e200      	b.n	24006228 <HAL_DMA_IRQHandler+0xe08>
24005e26:	bf00      	nop
24005e28:	40020010 	.word	0x40020010
24005e2c:	40020028 	.word	0x40020028
24005e30:	40020040 	.word	0x40020040
24005e34:	40020058 	.word	0x40020058
24005e38:	40020070 	.word	0x40020070
24005e3c:	40020088 	.word	0x40020088
24005e40:	400200a0 	.word	0x400200a0
24005e44:	400200b8 	.word	0x400200b8
24005e48:	40020410 	.word	0x40020410
24005e4c:	40020428 	.word	0x40020428
24005e50:	40020440 	.word	0x40020440
24005e54:	40020458 	.word	0x40020458
24005e58:	40020470 	.word	0x40020470
24005e5c:	40020488 	.word	0x40020488
24005e60:	400204a0 	.word	0x400204a0
24005e64:	400204b8 	.word	0x400204b8
24005e68:	58025408 	.word	0x58025408
24005e6c:	5802541c 	.word	0x5802541c
24005e70:	58025430 	.word	0x58025430
24005e74:	58025444 	.word	0x58025444
24005e78:	58025458 	.word	0x58025458
24005e7c:	5802546c 	.word	0x5802546c
24005e80:	58025480 	.word	0x58025480
24005e84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005e88:	693b      	ldr	r3, [r7, #16]
24005e8a:	f003 0320 	and.w	r3, r3, #32
24005e8e:	2b00      	cmp	r3, #0
24005e90:	d160      	bne.n	24005f54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24005e92:	687b      	ldr	r3, [r7, #4]
24005e94:	681b      	ldr	r3, [r3, #0]
24005e96:	4a7f      	ldr	r2, [pc, #508]	; (24006094 <HAL_DMA_IRQHandler+0xc74>)
24005e98:	4293      	cmp	r3, r2
24005e9a:	d04a      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005e9c:	687b      	ldr	r3, [r7, #4]
24005e9e:	681b      	ldr	r3, [r3, #0]
24005ea0:	4a7d      	ldr	r2, [pc, #500]	; (24006098 <HAL_DMA_IRQHandler+0xc78>)
24005ea2:	4293      	cmp	r3, r2
24005ea4:	d045      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005ea6:	687b      	ldr	r3, [r7, #4]
24005ea8:	681b      	ldr	r3, [r3, #0]
24005eaa:	4a7c      	ldr	r2, [pc, #496]	; (2400609c <HAL_DMA_IRQHandler+0xc7c>)
24005eac:	4293      	cmp	r3, r2
24005eae:	d040      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005eb0:	687b      	ldr	r3, [r7, #4]
24005eb2:	681b      	ldr	r3, [r3, #0]
24005eb4:	4a7a      	ldr	r2, [pc, #488]	; (240060a0 <HAL_DMA_IRQHandler+0xc80>)
24005eb6:	4293      	cmp	r3, r2
24005eb8:	d03b      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005eba:	687b      	ldr	r3, [r7, #4]
24005ebc:	681b      	ldr	r3, [r3, #0]
24005ebe:	4a79      	ldr	r2, [pc, #484]	; (240060a4 <HAL_DMA_IRQHandler+0xc84>)
24005ec0:	4293      	cmp	r3, r2
24005ec2:	d036      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005ec4:	687b      	ldr	r3, [r7, #4]
24005ec6:	681b      	ldr	r3, [r3, #0]
24005ec8:	4a77      	ldr	r2, [pc, #476]	; (240060a8 <HAL_DMA_IRQHandler+0xc88>)
24005eca:	4293      	cmp	r3, r2
24005ecc:	d031      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005ece:	687b      	ldr	r3, [r7, #4]
24005ed0:	681b      	ldr	r3, [r3, #0]
24005ed2:	4a76      	ldr	r2, [pc, #472]	; (240060ac <HAL_DMA_IRQHandler+0xc8c>)
24005ed4:	4293      	cmp	r3, r2
24005ed6:	d02c      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005ed8:	687b      	ldr	r3, [r7, #4]
24005eda:	681b      	ldr	r3, [r3, #0]
24005edc:	4a74      	ldr	r2, [pc, #464]	; (240060b0 <HAL_DMA_IRQHandler+0xc90>)
24005ede:	4293      	cmp	r3, r2
24005ee0:	d027      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005ee2:	687b      	ldr	r3, [r7, #4]
24005ee4:	681b      	ldr	r3, [r3, #0]
24005ee6:	4a73      	ldr	r2, [pc, #460]	; (240060b4 <HAL_DMA_IRQHandler+0xc94>)
24005ee8:	4293      	cmp	r3, r2
24005eea:	d022      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005eec:	687b      	ldr	r3, [r7, #4]
24005eee:	681b      	ldr	r3, [r3, #0]
24005ef0:	4a71      	ldr	r2, [pc, #452]	; (240060b8 <HAL_DMA_IRQHandler+0xc98>)
24005ef2:	4293      	cmp	r3, r2
24005ef4:	d01d      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005ef6:	687b      	ldr	r3, [r7, #4]
24005ef8:	681b      	ldr	r3, [r3, #0]
24005efa:	4a70      	ldr	r2, [pc, #448]	; (240060bc <HAL_DMA_IRQHandler+0xc9c>)
24005efc:	4293      	cmp	r3, r2
24005efe:	d018      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005f00:	687b      	ldr	r3, [r7, #4]
24005f02:	681b      	ldr	r3, [r3, #0]
24005f04:	4a6e      	ldr	r2, [pc, #440]	; (240060c0 <HAL_DMA_IRQHandler+0xca0>)
24005f06:	4293      	cmp	r3, r2
24005f08:	d013      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005f0a:	687b      	ldr	r3, [r7, #4]
24005f0c:	681b      	ldr	r3, [r3, #0]
24005f0e:	4a6d      	ldr	r2, [pc, #436]	; (240060c4 <HAL_DMA_IRQHandler+0xca4>)
24005f10:	4293      	cmp	r3, r2
24005f12:	d00e      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005f14:	687b      	ldr	r3, [r7, #4]
24005f16:	681b      	ldr	r3, [r3, #0]
24005f18:	4a6b      	ldr	r2, [pc, #428]	; (240060c8 <HAL_DMA_IRQHandler+0xca8>)
24005f1a:	4293      	cmp	r3, r2
24005f1c:	d009      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005f1e:	687b      	ldr	r3, [r7, #4]
24005f20:	681b      	ldr	r3, [r3, #0]
24005f22:	4a6a      	ldr	r2, [pc, #424]	; (240060cc <HAL_DMA_IRQHandler+0xcac>)
24005f24:	4293      	cmp	r3, r2
24005f26:	d004      	beq.n	24005f32 <HAL_DMA_IRQHandler+0xb12>
24005f28:	687b      	ldr	r3, [r7, #4]
24005f2a:	681b      	ldr	r3, [r3, #0]
24005f2c:	4a68      	ldr	r2, [pc, #416]	; (240060d0 <HAL_DMA_IRQHandler+0xcb0>)
24005f2e:	4293      	cmp	r3, r2
24005f30:	d108      	bne.n	24005f44 <HAL_DMA_IRQHandler+0xb24>
24005f32:	687b      	ldr	r3, [r7, #4]
24005f34:	681b      	ldr	r3, [r3, #0]
24005f36:	681a      	ldr	r2, [r3, #0]
24005f38:	687b      	ldr	r3, [r7, #4]
24005f3a:	681b      	ldr	r3, [r3, #0]
24005f3c:	f022 0208 	bic.w	r2, r2, #8
24005f40:	601a      	str	r2, [r3, #0]
24005f42:	e007      	b.n	24005f54 <HAL_DMA_IRQHandler+0xb34>
24005f44:	687b      	ldr	r3, [r7, #4]
24005f46:	681b      	ldr	r3, [r3, #0]
24005f48:	681a      	ldr	r2, [r3, #0]
24005f4a:	687b      	ldr	r3, [r7, #4]
24005f4c:	681b      	ldr	r3, [r3, #0]
24005f4e:	f022 0204 	bic.w	r2, r2, #4
24005f52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
24005f54:	687b      	ldr	r3, [r7, #4]
24005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005f58:	2b00      	cmp	r3, #0
24005f5a:	f000 8165 	beq.w	24006228 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
24005f5e:	687b      	ldr	r3, [r7, #4]
24005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24005f62:	6878      	ldr	r0, [r7, #4]
24005f64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005f66:	e15f      	b.n	24006228 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24005f68:	687b      	ldr	r3, [r7, #4]
24005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005f6c:	f003 031f 	and.w	r3, r3, #31
24005f70:	2202      	movs	r2, #2
24005f72:	409a      	lsls	r2, r3
24005f74:	697b      	ldr	r3, [r7, #20]
24005f76:	4013      	ands	r3, r2
24005f78:	2b00      	cmp	r3, #0
24005f7a:	f000 80c5 	beq.w	24006108 <HAL_DMA_IRQHandler+0xce8>
24005f7e:	693b      	ldr	r3, [r7, #16]
24005f80:	f003 0302 	and.w	r3, r3, #2
24005f84:	2b00      	cmp	r3, #0
24005f86:	f000 80bf 	beq.w	24006108 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24005f8a:	687b      	ldr	r3, [r7, #4]
24005f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24005f8e:	f003 031f 	and.w	r3, r3, #31
24005f92:	2202      	movs	r2, #2
24005f94:	409a      	lsls	r2, r3
24005f96:	69fb      	ldr	r3, [r7, #28]
24005f98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005f9a:	693b      	ldr	r3, [r7, #16]
24005f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24005fa0:	2b00      	cmp	r3, #0
24005fa2:	d018      	beq.n	24005fd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005fa4:	693b      	ldr	r3, [r7, #16]
24005fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005faa:	2b00      	cmp	r3, #0
24005fac:	d109      	bne.n	24005fc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
24005fae:	687b      	ldr	r3, [r7, #4]
24005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005fb2:	2b00      	cmp	r3, #0
24005fb4:	f000 813a 	beq.w	2400622c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
24005fb8:	687b      	ldr	r3, [r7, #4]
24005fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005fbc:	6878      	ldr	r0, [r7, #4]
24005fbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005fc0:	e134      	b.n	2400622c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
24005fc2:	687b      	ldr	r3, [r7, #4]
24005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005fc6:	2b00      	cmp	r3, #0
24005fc8:	f000 8130 	beq.w	2400622c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
24005fcc:	687b      	ldr	r3, [r7, #4]
24005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005fd0:	6878      	ldr	r0, [r7, #4]
24005fd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005fd4:	e12a      	b.n	2400622c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005fd6:	693b      	ldr	r3, [r7, #16]
24005fd8:	f003 0320 	and.w	r3, r3, #32
24005fdc:	2b00      	cmp	r3, #0
24005fde:	f040 8089 	bne.w	240060f4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24005fe2:	687b      	ldr	r3, [r7, #4]
24005fe4:	681b      	ldr	r3, [r3, #0]
24005fe6:	4a2b      	ldr	r2, [pc, #172]	; (24006094 <HAL_DMA_IRQHandler+0xc74>)
24005fe8:	4293      	cmp	r3, r2
24005fea:	d04a      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24005fec:	687b      	ldr	r3, [r7, #4]
24005fee:	681b      	ldr	r3, [r3, #0]
24005ff0:	4a29      	ldr	r2, [pc, #164]	; (24006098 <HAL_DMA_IRQHandler+0xc78>)
24005ff2:	4293      	cmp	r3, r2
24005ff4:	d045      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24005ff6:	687b      	ldr	r3, [r7, #4]
24005ff8:	681b      	ldr	r3, [r3, #0]
24005ffa:	4a28      	ldr	r2, [pc, #160]	; (2400609c <HAL_DMA_IRQHandler+0xc7c>)
24005ffc:	4293      	cmp	r3, r2
24005ffe:	d040      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24006000:	687b      	ldr	r3, [r7, #4]
24006002:	681b      	ldr	r3, [r3, #0]
24006004:	4a26      	ldr	r2, [pc, #152]	; (240060a0 <HAL_DMA_IRQHandler+0xc80>)
24006006:	4293      	cmp	r3, r2
24006008:	d03b      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
2400600a:	687b      	ldr	r3, [r7, #4]
2400600c:	681b      	ldr	r3, [r3, #0]
2400600e:	4a25      	ldr	r2, [pc, #148]	; (240060a4 <HAL_DMA_IRQHandler+0xc84>)
24006010:	4293      	cmp	r3, r2
24006012:	d036      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24006014:	687b      	ldr	r3, [r7, #4]
24006016:	681b      	ldr	r3, [r3, #0]
24006018:	4a23      	ldr	r2, [pc, #140]	; (240060a8 <HAL_DMA_IRQHandler+0xc88>)
2400601a:	4293      	cmp	r3, r2
2400601c:	d031      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
2400601e:	687b      	ldr	r3, [r7, #4]
24006020:	681b      	ldr	r3, [r3, #0]
24006022:	4a22      	ldr	r2, [pc, #136]	; (240060ac <HAL_DMA_IRQHandler+0xc8c>)
24006024:	4293      	cmp	r3, r2
24006026:	d02c      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24006028:	687b      	ldr	r3, [r7, #4]
2400602a:	681b      	ldr	r3, [r3, #0]
2400602c:	4a20      	ldr	r2, [pc, #128]	; (240060b0 <HAL_DMA_IRQHandler+0xc90>)
2400602e:	4293      	cmp	r3, r2
24006030:	d027      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24006032:	687b      	ldr	r3, [r7, #4]
24006034:	681b      	ldr	r3, [r3, #0]
24006036:	4a1f      	ldr	r2, [pc, #124]	; (240060b4 <HAL_DMA_IRQHandler+0xc94>)
24006038:	4293      	cmp	r3, r2
2400603a:	d022      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
2400603c:	687b      	ldr	r3, [r7, #4]
2400603e:	681b      	ldr	r3, [r3, #0]
24006040:	4a1d      	ldr	r2, [pc, #116]	; (240060b8 <HAL_DMA_IRQHandler+0xc98>)
24006042:	4293      	cmp	r3, r2
24006044:	d01d      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24006046:	687b      	ldr	r3, [r7, #4]
24006048:	681b      	ldr	r3, [r3, #0]
2400604a:	4a1c      	ldr	r2, [pc, #112]	; (240060bc <HAL_DMA_IRQHandler+0xc9c>)
2400604c:	4293      	cmp	r3, r2
2400604e:	d018      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24006050:	687b      	ldr	r3, [r7, #4]
24006052:	681b      	ldr	r3, [r3, #0]
24006054:	4a1a      	ldr	r2, [pc, #104]	; (240060c0 <HAL_DMA_IRQHandler+0xca0>)
24006056:	4293      	cmp	r3, r2
24006058:	d013      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
2400605a:	687b      	ldr	r3, [r7, #4]
2400605c:	681b      	ldr	r3, [r3, #0]
2400605e:	4a19      	ldr	r2, [pc, #100]	; (240060c4 <HAL_DMA_IRQHandler+0xca4>)
24006060:	4293      	cmp	r3, r2
24006062:	d00e      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24006064:	687b      	ldr	r3, [r7, #4]
24006066:	681b      	ldr	r3, [r3, #0]
24006068:	4a17      	ldr	r2, [pc, #92]	; (240060c8 <HAL_DMA_IRQHandler+0xca8>)
2400606a:	4293      	cmp	r3, r2
2400606c:	d009      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
2400606e:	687b      	ldr	r3, [r7, #4]
24006070:	681b      	ldr	r3, [r3, #0]
24006072:	4a16      	ldr	r2, [pc, #88]	; (240060cc <HAL_DMA_IRQHandler+0xcac>)
24006074:	4293      	cmp	r3, r2
24006076:	d004      	beq.n	24006082 <HAL_DMA_IRQHandler+0xc62>
24006078:	687b      	ldr	r3, [r7, #4]
2400607a:	681b      	ldr	r3, [r3, #0]
2400607c:	4a14      	ldr	r2, [pc, #80]	; (240060d0 <HAL_DMA_IRQHandler+0xcb0>)
2400607e:	4293      	cmp	r3, r2
24006080:	d128      	bne.n	240060d4 <HAL_DMA_IRQHandler+0xcb4>
24006082:	687b      	ldr	r3, [r7, #4]
24006084:	681b      	ldr	r3, [r3, #0]
24006086:	681a      	ldr	r2, [r3, #0]
24006088:	687b      	ldr	r3, [r7, #4]
2400608a:	681b      	ldr	r3, [r3, #0]
2400608c:	f022 0214 	bic.w	r2, r2, #20
24006090:	601a      	str	r2, [r3, #0]
24006092:	e027      	b.n	240060e4 <HAL_DMA_IRQHandler+0xcc4>
24006094:	40020010 	.word	0x40020010
24006098:	40020028 	.word	0x40020028
2400609c:	40020040 	.word	0x40020040
240060a0:	40020058 	.word	0x40020058
240060a4:	40020070 	.word	0x40020070
240060a8:	40020088 	.word	0x40020088
240060ac:	400200a0 	.word	0x400200a0
240060b0:	400200b8 	.word	0x400200b8
240060b4:	40020410 	.word	0x40020410
240060b8:	40020428 	.word	0x40020428
240060bc:	40020440 	.word	0x40020440
240060c0:	40020458 	.word	0x40020458
240060c4:	40020470 	.word	0x40020470
240060c8:	40020488 	.word	0x40020488
240060cc:	400204a0 	.word	0x400204a0
240060d0:	400204b8 	.word	0x400204b8
240060d4:	687b      	ldr	r3, [r7, #4]
240060d6:	681b      	ldr	r3, [r3, #0]
240060d8:	681a      	ldr	r2, [r3, #0]
240060da:	687b      	ldr	r3, [r7, #4]
240060dc:	681b      	ldr	r3, [r3, #0]
240060de:	f022 020a 	bic.w	r2, r2, #10
240060e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
240060e4:	687b      	ldr	r3, [r7, #4]
240060e6:	2201      	movs	r2, #1
240060e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
240060ec:	687b      	ldr	r3, [r7, #4]
240060ee:	2200      	movs	r2, #0
240060f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
240060f4:	687b      	ldr	r3, [r7, #4]
240060f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240060f8:	2b00      	cmp	r3, #0
240060fa:	f000 8097 	beq.w	2400622c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
240060fe:	687b      	ldr	r3, [r7, #4]
24006100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006102:	6878      	ldr	r0, [r7, #4]
24006104:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006106:	e091      	b.n	2400622c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24006108:	687b      	ldr	r3, [r7, #4]
2400610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400610c:	f003 031f 	and.w	r3, r3, #31
24006110:	2208      	movs	r2, #8
24006112:	409a      	lsls	r2, r3
24006114:	697b      	ldr	r3, [r7, #20]
24006116:	4013      	ands	r3, r2
24006118:	2b00      	cmp	r3, #0
2400611a:	f000 8088 	beq.w	2400622e <HAL_DMA_IRQHandler+0xe0e>
2400611e:	693b      	ldr	r3, [r7, #16]
24006120:	f003 0308 	and.w	r3, r3, #8
24006124:	2b00      	cmp	r3, #0
24006126:	f000 8082 	beq.w	2400622e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2400612a:	687b      	ldr	r3, [r7, #4]
2400612c:	681b      	ldr	r3, [r3, #0]
2400612e:	4a41      	ldr	r2, [pc, #260]	; (24006234 <HAL_DMA_IRQHandler+0xe14>)
24006130:	4293      	cmp	r3, r2
24006132:	d04a      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
24006134:	687b      	ldr	r3, [r7, #4]
24006136:	681b      	ldr	r3, [r3, #0]
24006138:	4a3f      	ldr	r2, [pc, #252]	; (24006238 <HAL_DMA_IRQHandler+0xe18>)
2400613a:	4293      	cmp	r3, r2
2400613c:	d045      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
2400613e:	687b      	ldr	r3, [r7, #4]
24006140:	681b      	ldr	r3, [r3, #0]
24006142:	4a3e      	ldr	r2, [pc, #248]	; (2400623c <HAL_DMA_IRQHandler+0xe1c>)
24006144:	4293      	cmp	r3, r2
24006146:	d040      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
24006148:	687b      	ldr	r3, [r7, #4]
2400614a:	681b      	ldr	r3, [r3, #0]
2400614c:	4a3c      	ldr	r2, [pc, #240]	; (24006240 <HAL_DMA_IRQHandler+0xe20>)
2400614e:	4293      	cmp	r3, r2
24006150:	d03b      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
24006152:	687b      	ldr	r3, [r7, #4]
24006154:	681b      	ldr	r3, [r3, #0]
24006156:	4a3b      	ldr	r2, [pc, #236]	; (24006244 <HAL_DMA_IRQHandler+0xe24>)
24006158:	4293      	cmp	r3, r2
2400615a:	d036      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
2400615c:	687b      	ldr	r3, [r7, #4]
2400615e:	681b      	ldr	r3, [r3, #0]
24006160:	4a39      	ldr	r2, [pc, #228]	; (24006248 <HAL_DMA_IRQHandler+0xe28>)
24006162:	4293      	cmp	r3, r2
24006164:	d031      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
24006166:	687b      	ldr	r3, [r7, #4]
24006168:	681b      	ldr	r3, [r3, #0]
2400616a:	4a38      	ldr	r2, [pc, #224]	; (2400624c <HAL_DMA_IRQHandler+0xe2c>)
2400616c:	4293      	cmp	r3, r2
2400616e:	d02c      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
24006170:	687b      	ldr	r3, [r7, #4]
24006172:	681b      	ldr	r3, [r3, #0]
24006174:	4a36      	ldr	r2, [pc, #216]	; (24006250 <HAL_DMA_IRQHandler+0xe30>)
24006176:	4293      	cmp	r3, r2
24006178:	d027      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
2400617a:	687b      	ldr	r3, [r7, #4]
2400617c:	681b      	ldr	r3, [r3, #0]
2400617e:	4a35      	ldr	r2, [pc, #212]	; (24006254 <HAL_DMA_IRQHandler+0xe34>)
24006180:	4293      	cmp	r3, r2
24006182:	d022      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
24006184:	687b      	ldr	r3, [r7, #4]
24006186:	681b      	ldr	r3, [r3, #0]
24006188:	4a33      	ldr	r2, [pc, #204]	; (24006258 <HAL_DMA_IRQHandler+0xe38>)
2400618a:	4293      	cmp	r3, r2
2400618c:	d01d      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
2400618e:	687b      	ldr	r3, [r7, #4]
24006190:	681b      	ldr	r3, [r3, #0]
24006192:	4a32      	ldr	r2, [pc, #200]	; (2400625c <HAL_DMA_IRQHandler+0xe3c>)
24006194:	4293      	cmp	r3, r2
24006196:	d018      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
24006198:	687b      	ldr	r3, [r7, #4]
2400619a:	681b      	ldr	r3, [r3, #0]
2400619c:	4a30      	ldr	r2, [pc, #192]	; (24006260 <HAL_DMA_IRQHandler+0xe40>)
2400619e:	4293      	cmp	r3, r2
240061a0:	d013      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
240061a2:	687b      	ldr	r3, [r7, #4]
240061a4:	681b      	ldr	r3, [r3, #0]
240061a6:	4a2f      	ldr	r2, [pc, #188]	; (24006264 <HAL_DMA_IRQHandler+0xe44>)
240061a8:	4293      	cmp	r3, r2
240061aa:	d00e      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
240061ac:	687b      	ldr	r3, [r7, #4]
240061ae:	681b      	ldr	r3, [r3, #0]
240061b0:	4a2d      	ldr	r2, [pc, #180]	; (24006268 <HAL_DMA_IRQHandler+0xe48>)
240061b2:	4293      	cmp	r3, r2
240061b4:	d009      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
240061b6:	687b      	ldr	r3, [r7, #4]
240061b8:	681b      	ldr	r3, [r3, #0]
240061ba:	4a2c      	ldr	r2, [pc, #176]	; (2400626c <HAL_DMA_IRQHandler+0xe4c>)
240061bc:	4293      	cmp	r3, r2
240061be:	d004      	beq.n	240061ca <HAL_DMA_IRQHandler+0xdaa>
240061c0:	687b      	ldr	r3, [r7, #4]
240061c2:	681b      	ldr	r3, [r3, #0]
240061c4:	4a2a      	ldr	r2, [pc, #168]	; (24006270 <HAL_DMA_IRQHandler+0xe50>)
240061c6:	4293      	cmp	r3, r2
240061c8:	d108      	bne.n	240061dc <HAL_DMA_IRQHandler+0xdbc>
240061ca:	687b      	ldr	r3, [r7, #4]
240061cc:	681b      	ldr	r3, [r3, #0]
240061ce:	681a      	ldr	r2, [r3, #0]
240061d0:	687b      	ldr	r3, [r7, #4]
240061d2:	681b      	ldr	r3, [r3, #0]
240061d4:	f022 021c 	bic.w	r2, r2, #28
240061d8:	601a      	str	r2, [r3, #0]
240061da:	e007      	b.n	240061ec <HAL_DMA_IRQHandler+0xdcc>
240061dc:	687b      	ldr	r3, [r7, #4]
240061de:	681b      	ldr	r3, [r3, #0]
240061e0:	681a      	ldr	r2, [r3, #0]
240061e2:	687b      	ldr	r3, [r7, #4]
240061e4:	681b      	ldr	r3, [r3, #0]
240061e6:	f022 020e 	bic.w	r2, r2, #14
240061ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240061ec:	687b      	ldr	r3, [r7, #4]
240061ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240061f0:	f003 031f 	and.w	r3, r3, #31
240061f4:	2201      	movs	r2, #1
240061f6:	409a      	lsls	r2, r3
240061f8:	69fb      	ldr	r3, [r7, #28]
240061fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
240061fc:	687b      	ldr	r3, [r7, #4]
240061fe:	2201      	movs	r2, #1
24006200:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24006202:	687b      	ldr	r3, [r7, #4]
24006204:	2201      	movs	r2, #1
24006206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2400620a:	687b      	ldr	r3, [r7, #4]
2400620c:	2200      	movs	r2, #0
2400620e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
24006212:	687b      	ldr	r3, [r7, #4]
24006214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24006216:	2b00      	cmp	r3, #0
24006218:	d009      	beq.n	2400622e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2400621a:	687b      	ldr	r3, [r7, #4]
2400621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400621e:	6878      	ldr	r0, [r7, #4]
24006220:	4798      	blx	r3
24006222:	e004      	b.n	2400622e <HAL_DMA_IRQHandler+0xe0e>
          return;
24006224:	bf00      	nop
24006226:	e002      	b.n	2400622e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006228:	bf00      	nop
2400622a:	e000      	b.n	2400622e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2400622c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
2400622e:	3728      	adds	r7, #40	; 0x28
24006230:	46bd      	mov	sp, r7
24006232:	bd80      	pop	{r7, pc}
24006234:	40020010 	.word	0x40020010
24006238:	40020028 	.word	0x40020028
2400623c:	40020040 	.word	0x40020040
24006240:	40020058 	.word	0x40020058
24006244:	40020070 	.word	0x40020070
24006248:	40020088 	.word	0x40020088
2400624c:	400200a0 	.word	0x400200a0
24006250:	400200b8 	.word	0x400200b8
24006254:	40020410 	.word	0x40020410
24006258:	40020428 	.word	0x40020428
2400625c:	40020440 	.word	0x40020440
24006260:	40020458 	.word	0x40020458
24006264:	40020470 	.word	0x40020470
24006268:	40020488 	.word	0x40020488
2400626c:	400204a0 	.word	0x400204a0
24006270:	400204b8 	.word	0x400204b8

24006274 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
24006274:	b480      	push	{r7}
24006276:	b087      	sub	sp, #28
24006278:	af00      	add	r7, sp, #0
2400627a:	60f8      	str	r0, [r7, #12]
2400627c:	460b      	mov	r3, r1
2400627e:	607a      	str	r2, [r7, #4]
24006280:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
24006282:	2300      	movs	r3, #0
24006284:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24006286:	68fb      	ldr	r3, [r7, #12]
24006288:	2b00      	cmp	r3, #0
2400628a:	d101      	bne.n	24006290 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
2400628c:	2301      	movs	r3, #1
2400628e:	e045      	b.n	2400631c <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24006290:	68fb      	ldr	r3, [r7, #12]
24006292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24006296:	2b01      	cmp	r3, #1
24006298:	d101      	bne.n	2400629e <HAL_DMA_RegisterCallback+0x2a>
2400629a:	2302      	movs	r3, #2
2400629c:	e03e      	b.n	2400631c <HAL_DMA_RegisterCallback+0xa8>
2400629e:	68fb      	ldr	r3, [r7, #12]
240062a0:	2201      	movs	r2, #1
240062a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
240062a6:	68fb      	ldr	r3, [r7, #12]
240062a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240062ac:	b2db      	uxtb	r3, r3
240062ae:	2b01      	cmp	r3, #1
240062b0:	d12d      	bne.n	2400630e <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
240062b2:	7afb      	ldrb	r3, [r7, #11]
240062b4:	2b05      	cmp	r3, #5
240062b6:	d827      	bhi.n	24006308 <HAL_DMA_RegisterCallback+0x94>
240062b8:	a201      	add	r2, pc, #4	; (adr r2, 240062c0 <HAL_DMA_RegisterCallback+0x4c>)
240062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240062be:	bf00      	nop
240062c0:	240062d9 	.word	0x240062d9
240062c4:	240062e1 	.word	0x240062e1
240062c8:	240062e9 	.word	0x240062e9
240062cc:	240062f1 	.word	0x240062f1
240062d0:	240062f9 	.word	0x240062f9
240062d4:	24006301 	.word	0x24006301
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
240062d8:	68fb      	ldr	r3, [r7, #12]
240062da:	687a      	ldr	r2, [r7, #4]
240062dc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
240062de:	e018      	b.n	24006312 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
240062e0:	68fb      	ldr	r3, [r7, #12]
240062e2:	687a      	ldr	r2, [r7, #4]
240062e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
240062e6:	e014      	b.n	24006312 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
240062e8:	68fb      	ldr	r3, [r7, #12]
240062ea:	687a      	ldr	r2, [r7, #4]
240062ec:	645a      	str	r2, [r3, #68]	; 0x44
      break;
240062ee:	e010      	b.n	24006312 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
240062f0:	68fb      	ldr	r3, [r7, #12]
240062f2:	687a      	ldr	r2, [r7, #4]
240062f4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
240062f6:	e00c      	b.n	24006312 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
240062f8:	68fb      	ldr	r3, [r7, #12]
240062fa:	687a      	ldr	r2, [r7, #4]
240062fc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
240062fe:	e008      	b.n	24006312 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
24006300:	68fb      	ldr	r3, [r7, #12]
24006302:	687a      	ldr	r2, [r7, #4]
24006304:	651a      	str	r2, [r3, #80]	; 0x50
      break;
24006306:	e004      	b.n	24006312 <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
24006308:	2301      	movs	r3, #1
2400630a:	75fb      	strb	r3, [r7, #23]
      break;
2400630c:	e001      	b.n	24006312 <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2400630e:	2301      	movs	r3, #1
24006310:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24006312:	68fb      	ldr	r3, [r7, #12]
24006314:	2200      	movs	r2, #0
24006316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
2400631a:	7dfb      	ldrb	r3, [r7, #23]
}
2400631c:	4618      	mov	r0, r3
2400631e:	371c      	adds	r7, #28
24006320:	46bd      	mov	sp, r7
24006322:	f85d 7b04 	ldr.w	r7, [sp], #4
24006326:	4770      	bx	lr

24006328 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
24006328:	b480      	push	{r7}
2400632a:	b085      	sub	sp, #20
2400632c:	af00      	add	r7, sp, #0
2400632e:	6078      	str	r0, [r7, #4]
24006330:	460b      	mov	r3, r1
24006332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
24006334:	2300      	movs	r3, #0
24006336:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24006338:	687b      	ldr	r3, [r7, #4]
2400633a:	2b00      	cmp	r3, #0
2400633c:	d101      	bne.n	24006342 <HAL_DMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
2400633e:	2301      	movs	r3, #1
24006340:	e059      	b.n	240063f6 <HAL_DMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24006342:	687b      	ldr	r3, [r7, #4]
24006344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24006348:	2b01      	cmp	r3, #1
2400634a:	d101      	bne.n	24006350 <HAL_DMA_UnRegisterCallback+0x28>
2400634c:	2302      	movs	r3, #2
2400634e:	e052      	b.n	240063f6 <HAL_DMA_UnRegisterCallback+0xce>
24006350:	687b      	ldr	r3, [r7, #4]
24006352:	2201      	movs	r2, #1
24006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24006358:	687b      	ldr	r3, [r7, #4]
2400635a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2400635e:	b2db      	uxtb	r3, r3
24006360:	2b01      	cmp	r3, #1
24006362:	d141      	bne.n	240063e8 <HAL_DMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
24006364:	78fb      	ldrb	r3, [r7, #3]
24006366:	2b06      	cmp	r3, #6
24006368:	d83b      	bhi.n	240063e2 <HAL_DMA_UnRegisterCallback+0xba>
2400636a:	a201      	add	r2, pc, #4	; (adr r2, 24006370 <HAL_DMA_UnRegisterCallback+0x48>)
2400636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24006370:	2400638d 	.word	0x2400638d
24006374:	24006395 	.word	0x24006395
24006378:	2400639d 	.word	0x2400639d
2400637c:	240063a5 	.word	0x240063a5
24006380:	240063ad 	.word	0x240063ad
24006384:	240063b5 	.word	0x240063b5
24006388:	240063bd 	.word	0x240063bd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
2400638c:	687b      	ldr	r3, [r7, #4]
2400638e:	2200      	movs	r2, #0
24006390:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
24006392:	e02b      	b.n	240063ec <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
24006394:	687b      	ldr	r3, [r7, #4]
24006396:	2200      	movs	r2, #0
24006398:	641a      	str	r2, [r3, #64]	; 0x40
      break;
2400639a:	e027      	b.n	240063ec <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
2400639c:	687b      	ldr	r3, [r7, #4]
2400639e:	2200      	movs	r2, #0
240063a0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
240063a2:	e023      	b.n	240063ec <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
240063a4:	687b      	ldr	r3, [r7, #4]
240063a6:	2200      	movs	r2, #0
240063a8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
240063aa:	e01f      	b.n	240063ec <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
240063ac:	687b      	ldr	r3, [r7, #4]
240063ae:	2200      	movs	r2, #0
240063b0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
240063b2:	e01b      	b.n	240063ec <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
240063b4:	687b      	ldr	r3, [r7, #4]
240063b6:	2200      	movs	r2, #0
240063b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
240063ba:	e017      	b.n	240063ec <HAL_DMA_UnRegisterCallback+0xc4>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
240063bc:	687b      	ldr	r3, [r7, #4]
240063be:	2200      	movs	r2, #0
240063c0:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
240063c2:	687b      	ldr	r3, [r7, #4]
240063c4:	2200      	movs	r2, #0
240063c6:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
240063c8:	687b      	ldr	r3, [r7, #4]
240063ca:	2200      	movs	r2, #0
240063cc:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
240063ce:	687b      	ldr	r3, [r7, #4]
240063d0:	2200      	movs	r2, #0
240063d2:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
240063d4:	687b      	ldr	r3, [r7, #4]
240063d6:	2200      	movs	r2, #0
240063d8:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
240063da:	687b      	ldr	r3, [r7, #4]
240063dc:	2200      	movs	r2, #0
240063de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
240063e0:	e004      	b.n	240063ec <HAL_DMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
240063e2:	2301      	movs	r3, #1
240063e4:	73fb      	strb	r3, [r7, #15]
      break;
240063e6:	e001      	b.n	240063ec <HAL_DMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
240063e8:	2301      	movs	r3, #1
240063ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
240063ec:	687b      	ldr	r3, [r7, #4]
240063ee:	2200      	movs	r2, #0
240063f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
240063f4:	7bfb      	ldrb	r3, [r7, #15]
}
240063f6:	4618      	mov	r0, r3
240063f8:	3714      	adds	r7, #20
240063fa:	46bd      	mov	sp, r7
240063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24006400:	4770      	bx	lr
24006402:	bf00      	nop

24006404 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
24006404:	b480      	push	{r7}
24006406:	b083      	sub	sp, #12
24006408:	af00      	add	r7, sp, #0
2400640a:	6078      	str	r0, [r7, #4]
  return hdma->State;
2400640c:	687b      	ldr	r3, [r7, #4]
2400640e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24006412:	b2db      	uxtb	r3, r3
}
24006414:	4618      	mov	r0, r3
24006416:	370c      	adds	r7, #12
24006418:	46bd      	mov	sp, r7
2400641a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400641e:	4770      	bx	lr

24006420 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
24006420:	b480      	push	{r7}
24006422:	b083      	sub	sp, #12
24006424:	af00      	add	r7, sp, #0
24006426:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
24006428:	687b      	ldr	r3, [r7, #4]
2400642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
2400642c:	4618      	mov	r0, r3
2400642e:	370c      	adds	r7, #12
24006430:	46bd      	mov	sp, r7
24006432:	f85d 7b04 	ldr.w	r7, [sp], #4
24006436:	4770      	bx	lr

24006438 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24006438:	b480      	push	{r7}
2400643a:	b087      	sub	sp, #28
2400643c:	af00      	add	r7, sp, #0
2400643e:	60f8      	str	r0, [r7, #12]
24006440:	60b9      	str	r1, [r7, #8]
24006442:	607a      	str	r2, [r7, #4]
24006444:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006446:	68fb      	ldr	r3, [r7, #12]
24006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400644a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2400644c:	68fb      	ldr	r3, [r7, #12]
2400644e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006450:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006452:	68fb      	ldr	r3, [r7, #12]
24006454:	681b      	ldr	r3, [r3, #0]
24006456:	4a7f      	ldr	r2, [pc, #508]	; (24006654 <DMA_SetConfig+0x21c>)
24006458:	4293      	cmp	r3, r2
2400645a:	d072      	beq.n	24006542 <DMA_SetConfig+0x10a>
2400645c:	68fb      	ldr	r3, [r7, #12]
2400645e:	681b      	ldr	r3, [r3, #0]
24006460:	4a7d      	ldr	r2, [pc, #500]	; (24006658 <DMA_SetConfig+0x220>)
24006462:	4293      	cmp	r3, r2
24006464:	d06d      	beq.n	24006542 <DMA_SetConfig+0x10a>
24006466:	68fb      	ldr	r3, [r7, #12]
24006468:	681b      	ldr	r3, [r3, #0]
2400646a:	4a7c      	ldr	r2, [pc, #496]	; (2400665c <DMA_SetConfig+0x224>)
2400646c:	4293      	cmp	r3, r2
2400646e:	d068      	beq.n	24006542 <DMA_SetConfig+0x10a>
24006470:	68fb      	ldr	r3, [r7, #12]
24006472:	681b      	ldr	r3, [r3, #0]
24006474:	4a7a      	ldr	r2, [pc, #488]	; (24006660 <DMA_SetConfig+0x228>)
24006476:	4293      	cmp	r3, r2
24006478:	d063      	beq.n	24006542 <DMA_SetConfig+0x10a>
2400647a:	68fb      	ldr	r3, [r7, #12]
2400647c:	681b      	ldr	r3, [r3, #0]
2400647e:	4a79      	ldr	r2, [pc, #484]	; (24006664 <DMA_SetConfig+0x22c>)
24006480:	4293      	cmp	r3, r2
24006482:	d05e      	beq.n	24006542 <DMA_SetConfig+0x10a>
24006484:	68fb      	ldr	r3, [r7, #12]
24006486:	681b      	ldr	r3, [r3, #0]
24006488:	4a77      	ldr	r2, [pc, #476]	; (24006668 <DMA_SetConfig+0x230>)
2400648a:	4293      	cmp	r3, r2
2400648c:	d059      	beq.n	24006542 <DMA_SetConfig+0x10a>
2400648e:	68fb      	ldr	r3, [r7, #12]
24006490:	681b      	ldr	r3, [r3, #0]
24006492:	4a76      	ldr	r2, [pc, #472]	; (2400666c <DMA_SetConfig+0x234>)
24006494:	4293      	cmp	r3, r2
24006496:	d054      	beq.n	24006542 <DMA_SetConfig+0x10a>
24006498:	68fb      	ldr	r3, [r7, #12]
2400649a:	681b      	ldr	r3, [r3, #0]
2400649c:	4a74      	ldr	r2, [pc, #464]	; (24006670 <DMA_SetConfig+0x238>)
2400649e:	4293      	cmp	r3, r2
240064a0:	d04f      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064a2:	68fb      	ldr	r3, [r7, #12]
240064a4:	681b      	ldr	r3, [r3, #0]
240064a6:	4a73      	ldr	r2, [pc, #460]	; (24006674 <DMA_SetConfig+0x23c>)
240064a8:	4293      	cmp	r3, r2
240064aa:	d04a      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064ac:	68fb      	ldr	r3, [r7, #12]
240064ae:	681b      	ldr	r3, [r3, #0]
240064b0:	4a71      	ldr	r2, [pc, #452]	; (24006678 <DMA_SetConfig+0x240>)
240064b2:	4293      	cmp	r3, r2
240064b4:	d045      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064b6:	68fb      	ldr	r3, [r7, #12]
240064b8:	681b      	ldr	r3, [r3, #0]
240064ba:	4a70      	ldr	r2, [pc, #448]	; (2400667c <DMA_SetConfig+0x244>)
240064bc:	4293      	cmp	r3, r2
240064be:	d040      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064c0:	68fb      	ldr	r3, [r7, #12]
240064c2:	681b      	ldr	r3, [r3, #0]
240064c4:	4a6e      	ldr	r2, [pc, #440]	; (24006680 <DMA_SetConfig+0x248>)
240064c6:	4293      	cmp	r3, r2
240064c8:	d03b      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064ca:	68fb      	ldr	r3, [r7, #12]
240064cc:	681b      	ldr	r3, [r3, #0]
240064ce:	4a6d      	ldr	r2, [pc, #436]	; (24006684 <DMA_SetConfig+0x24c>)
240064d0:	4293      	cmp	r3, r2
240064d2:	d036      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064d4:	68fb      	ldr	r3, [r7, #12]
240064d6:	681b      	ldr	r3, [r3, #0]
240064d8:	4a6b      	ldr	r2, [pc, #428]	; (24006688 <DMA_SetConfig+0x250>)
240064da:	4293      	cmp	r3, r2
240064dc:	d031      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064de:	68fb      	ldr	r3, [r7, #12]
240064e0:	681b      	ldr	r3, [r3, #0]
240064e2:	4a6a      	ldr	r2, [pc, #424]	; (2400668c <DMA_SetConfig+0x254>)
240064e4:	4293      	cmp	r3, r2
240064e6:	d02c      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064e8:	68fb      	ldr	r3, [r7, #12]
240064ea:	681b      	ldr	r3, [r3, #0]
240064ec:	4a68      	ldr	r2, [pc, #416]	; (24006690 <DMA_SetConfig+0x258>)
240064ee:	4293      	cmp	r3, r2
240064f0:	d027      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064f2:	68fb      	ldr	r3, [r7, #12]
240064f4:	681b      	ldr	r3, [r3, #0]
240064f6:	4a67      	ldr	r2, [pc, #412]	; (24006694 <DMA_SetConfig+0x25c>)
240064f8:	4293      	cmp	r3, r2
240064fa:	d022      	beq.n	24006542 <DMA_SetConfig+0x10a>
240064fc:	68fb      	ldr	r3, [r7, #12]
240064fe:	681b      	ldr	r3, [r3, #0]
24006500:	4a65      	ldr	r2, [pc, #404]	; (24006698 <DMA_SetConfig+0x260>)
24006502:	4293      	cmp	r3, r2
24006504:	d01d      	beq.n	24006542 <DMA_SetConfig+0x10a>
24006506:	68fb      	ldr	r3, [r7, #12]
24006508:	681b      	ldr	r3, [r3, #0]
2400650a:	4a64      	ldr	r2, [pc, #400]	; (2400669c <DMA_SetConfig+0x264>)
2400650c:	4293      	cmp	r3, r2
2400650e:	d018      	beq.n	24006542 <DMA_SetConfig+0x10a>
24006510:	68fb      	ldr	r3, [r7, #12]
24006512:	681b      	ldr	r3, [r3, #0]
24006514:	4a62      	ldr	r2, [pc, #392]	; (240066a0 <DMA_SetConfig+0x268>)
24006516:	4293      	cmp	r3, r2
24006518:	d013      	beq.n	24006542 <DMA_SetConfig+0x10a>
2400651a:	68fb      	ldr	r3, [r7, #12]
2400651c:	681b      	ldr	r3, [r3, #0]
2400651e:	4a61      	ldr	r2, [pc, #388]	; (240066a4 <DMA_SetConfig+0x26c>)
24006520:	4293      	cmp	r3, r2
24006522:	d00e      	beq.n	24006542 <DMA_SetConfig+0x10a>
24006524:	68fb      	ldr	r3, [r7, #12]
24006526:	681b      	ldr	r3, [r3, #0]
24006528:	4a5f      	ldr	r2, [pc, #380]	; (240066a8 <DMA_SetConfig+0x270>)
2400652a:	4293      	cmp	r3, r2
2400652c:	d009      	beq.n	24006542 <DMA_SetConfig+0x10a>
2400652e:	68fb      	ldr	r3, [r7, #12]
24006530:	681b      	ldr	r3, [r3, #0]
24006532:	4a5e      	ldr	r2, [pc, #376]	; (240066ac <DMA_SetConfig+0x274>)
24006534:	4293      	cmp	r3, r2
24006536:	d004      	beq.n	24006542 <DMA_SetConfig+0x10a>
24006538:	68fb      	ldr	r3, [r7, #12]
2400653a:	681b      	ldr	r3, [r3, #0]
2400653c:	4a5c      	ldr	r2, [pc, #368]	; (240066b0 <DMA_SetConfig+0x278>)
2400653e:	4293      	cmp	r3, r2
24006540:	d101      	bne.n	24006546 <DMA_SetConfig+0x10e>
24006542:	2301      	movs	r3, #1
24006544:	e000      	b.n	24006548 <DMA_SetConfig+0x110>
24006546:	2300      	movs	r3, #0
24006548:	2b00      	cmp	r3, #0
2400654a:	d00d      	beq.n	24006568 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400654c:	68fb      	ldr	r3, [r7, #12]
2400654e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24006550:	68fa      	ldr	r2, [r7, #12]
24006552:	6e92      	ldr	r2, [r2, #104]	; 0x68
24006554:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
24006556:	68fb      	ldr	r3, [r7, #12]
24006558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2400655a:	2b00      	cmp	r3, #0
2400655c:	d004      	beq.n	24006568 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400655e:	68fb      	ldr	r3, [r7, #12]
24006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24006562:	68fa      	ldr	r2, [r7, #12]
24006564:	6f52      	ldr	r2, [r2, #116]	; 0x74
24006566:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006568:	68fb      	ldr	r3, [r7, #12]
2400656a:	681b      	ldr	r3, [r3, #0]
2400656c:	4a39      	ldr	r2, [pc, #228]	; (24006654 <DMA_SetConfig+0x21c>)
2400656e:	4293      	cmp	r3, r2
24006570:	d04a      	beq.n	24006608 <DMA_SetConfig+0x1d0>
24006572:	68fb      	ldr	r3, [r7, #12]
24006574:	681b      	ldr	r3, [r3, #0]
24006576:	4a38      	ldr	r2, [pc, #224]	; (24006658 <DMA_SetConfig+0x220>)
24006578:	4293      	cmp	r3, r2
2400657a:	d045      	beq.n	24006608 <DMA_SetConfig+0x1d0>
2400657c:	68fb      	ldr	r3, [r7, #12]
2400657e:	681b      	ldr	r3, [r3, #0]
24006580:	4a36      	ldr	r2, [pc, #216]	; (2400665c <DMA_SetConfig+0x224>)
24006582:	4293      	cmp	r3, r2
24006584:	d040      	beq.n	24006608 <DMA_SetConfig+0x1d0>
24006586:	68fb      	ldr	r3, [r7, #12]
24006588:	681b      	ldr	r3, [r3, #0]
2400658a:	4a35      	ldr	r2, [pc, #212]	; (24006660 <DMA_SetConfig+0x228>)
2400658c:	4293      	cmp	r3, r2
2400658e:	d03b      	beq.n	24006608 <DMA_SetConfig+0x1d0>
24006590:	68fb      	ldr	r3, [r7, #12]
24006592:	681b      	ldr	r3, [r3, #0]
24006594:	4a33      	ldr	r2, [pc, #204]	; (24006664 <DMA_SetConfig+0x22c>)
24006596:	4293      	cmp	r3, r2
24006598:	d036      	beq.n	24006608 <DMA_SetConfig+0x1d0>
2400659a:	68fb      	ldr	r3, [r7, #12]
2400659c:	681b      	ldr	r3, [r3, #0]
2400659e:	4a32      	ldr	r2, [pc, #200]	; (24006668 <DMA_SetConfig+0x230>)
240065a0:	4293      	cmp	r3, r2
240065a2:	d031      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065a4:	68fb      	ldr	r3, [r7, #12]
240065a6:	681b      	ldr	r3, [r3, #0]
240065a8:	4a30      	ldr	r2, [pc, #192]	; (2400666c <DMA_SetConfig+0x234>)
240065aa:	4293      	cmp	r3, r2
240065ac:	d02c      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065ae:	68fb      	ldr	r3, [r7, #12]
240065b0:	681b      	ldr	r3, [r3, #0]
240065b2:	4a2f      	ldr	r2, [pc, #188]	; (24006670 <DMA_SetConfig+0x238>)
240065b4:	4293      	cmp	r3, r2
240065b6:	d027      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065b8:	68fb      	ldr	r3, [r7, #12]
240065ba:	681b      	ldr	r3, [r3, #0]
240065bc:	4a2d      	ldr	r2, [pc, #180]	; (24006674 <DMA_SetConfig+0x23c>)
240065be:	4293      	cmp	r3, r2
240065c0:	d022      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065c2:	68fb      	ldr	r3, [r7, #12]
240065c4:	681b      	ldr	r3, [r3, #0]
240065c6:	4a2c      	ldr	r2, [pc, #176]	; (24006678 <DMA_SetConfig+0x240>)
240065c8:	4293      	cmp	r3, r2
240065ca:	d01d      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065cc:	68fb      	ldr	r3, [r7, #12]
240065ce:	681b      	ldr	r3, [r3, #0]
240065d0:	4a2a      	ldr	r2, [pc, #168]	; (2400667c <DMA_SetConfig+0x244>)
240065d2:	4293      	cmp	r3, r2
240065d4:	d018      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065d6:	68fb      	ldr	r3, [r7, #12]
240065d8:	681b      	ldr	r3, [r3, #0]
240065da:	4a29      	ldr	r2, [pc, #164]	; (24006680 <DMA_SetConfig+0x248>)
240065dc:	4293      	cmp	r3, r2
240065de:	d013      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065e0:	68fb      	ldr	r3, [r7, #12]
240065e2:	681b      	ldr	r3, [r3, #0]
240065e4:	4a27      	ldr	r2, [pc, #156]	; (24006684 <DMA_SetConfig+0x24c>)
240065e6:	4293      	cmp	r3, r2
240065e8:	d00e      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065ea:	68fb      	ldr	r3, [r7, #12]
240065ec:	681b      	ldr	r3, [r3, #0]
240065ee:	4a26      	ldr	r2, [pc, #152]	; (24006688 <DMA_SetConfig+0x250>)
240065f0:	4293      	cmp	r3, r2
240065f2:	d009      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065f4:	68fb      	ldr	r3, [r7, #12]
240065f6:	681b      	ldr	r3, [r3, #0]
240065f8:	4a24      	ldr	r2, [pc, #144]	; (2400668c <DMA_SetConfig+0x254>)
240065fa:	4293      	cmp	r3, r2
240065fc:	d004      	beq.n	24006608 <DMA_SetConfig+0x1d0>
240065fe:	68fb      	ldr	r3, [r7, #12]
24006600:	681b      	ldr	r3, [r3, #0]
24006602:	4a23      	ldr	r2, [pc, #140]	; (24006690 <DMA_SetConfig+0x258>)
24006604:	4293      	cmp	r3, r2
24006606:	d101      	bne.n	2400660c <DMA_SetConfig+0x1d4>
24006608:	2301      	movs	r3, #1
2400660a:	e000      	b.n	2400660e <DMA_SetConfig+0x1d6>
2400660c:	2300      	movs	r3, #0
2400660e:	2b00      	cmp	r3, #0
24006610:	d059      	beq.n	240066c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006612:	68fb      	ldr	r3, [r7, #12]
24006614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006616:	f003 031f 	and.w	r3, r3, #31
2400661a:	223f      	movs	r2, #63	; 0x3f
2400661c:	409a      	lsls	r2, r3
2400661e:	697b      	ldr	r3, [r7, #20]
24006620:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24006622:	68fb      	ldr	r3, [r7, #12]
24006624:	681b      	ldr	r3, [r3, #0]
24006626:	681a      	ldr	r2, [r3, #0]
24006628:	68fb      	ldr	r3, [r7, #12]
2400662a:	681b      	ldr	r3, [r3, #0]
2400662c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24006630:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
24006632:	68fb      	ldr	r3, [r7, #12]
24006634:	681b      	ldr	r3, [r3, #0]
24006636:	683a      	ldr	r2, [r7, #0]
24006638:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400663a:	68fb      	ldr	r3, [r7, #12]
2400663c:	689b      	ldr	r3, [r3, #8]
2400663e:	2b40      	cmp	r3, #64	; 0x40
24006640:	d138      	bne.n	240066b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
24006642:	68fb      	ldr	r3, [r7, #12]
24006644:	681b      	ldr	r3, [r3, #0]
24006646:	687a      	ldr	r2, [r7, #4]
24006648:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
2400664a:	68fb      	ldr	r3, [r7, #12]
2400664c:	681b      	ldr	r3, [r3, #0]
2400664e:	68ba      	ldr	r2, [r7, #8]
24006650:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
24006652:	e086      	b.n	24006762 <DMA_SetConfig+0x32a>
24006654:	40020010 	.word	0x40020010
24006658:	40020028 	.word	0x40020028
2400665c:	40020040 	.word	0x40020040
24006660:	40020058 	.word	0x40020058
24006664:	40020070 	.word	0x40020070
24006668:	40020088 	.word	0x40020088
2400666c:	400200a0 	.word	0x400200a0
24006670:	400200b8 	.word	0x400200b8
24006674:	40020410 	.word	0x40020410
24006678:	40020428 	.word	0x40020428
2400667c:	40020440 	.word	0x40020440
24006680:	40020458 	.word	0x40020458
24006684:	40020470 	.word	0x40020470
24006688:	40020488 	.word	0x40020488
2400668c:	400204a0 	.word	0x400204a0
24006690:	400204b8 	.word	0x400204b8
24006694:	58025408 	.word	0x58025408
24006698:	5802541c 	.word	0x5802541c
2400669c:	58025430 	.word	0x58025430
240066a0:	58025444 	.word	0x58025444
240066a4:	58025458 	.word	0x58025458
240066a8:	5802546c 	.word	0x5802546c
240066ac:	58025480 	.word	0x58025480
240066b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
240066b4:	68fb      	ldr	r3, [r7, #12]
240066b6:	681b      	ldr	r3, [r3, #0]
240066b8:	68ba      	ldr	r2, [r7, #8]
240066ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
240066bc:	68fb      	ldr	r3, [r7, #12]
240066be:	681b      	ldr	r3, [r3, #0]
240066c0:	687a      	ldr	r2, [r7, #4]
240066c2:	60da      	str	r2, [r3, #12]
}
240066c4:	e04d      	b.n	24006762 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240066c6:	68fb      	ldr	r3, [r7, #12]
240066c8:	681b      	ldr	r3, [r3, #0]
240066ca:	4a29      	ldr	r2, [pc, #164]	; (24006770 <DMA_SetConfig+0x338>)
240066cc:	4293      	cmp	r3, r2
240066ce:	d022      	beq.n	24006716 <DMA_SetConfig+0x2de>
240066d0:	68fb      	ldr	r3, [r7, #12]
240066d2:	681b      	ldr	r3, [r3, #0]
240066d4:	4a27      	ldr	r2, [pc, #156]	; (24006774 <DMA_SetConfig+0x33c>)
240066d6:	4293      	cmp	r3, r2
240066d8:	d01d      	beq.n	24006716 <DMA_SetConfig+0x2de>
240066da:	68fb      	ldr	r3, [r7, #12]
240066dc:	681b      	ldr	r3, [r3, #0]
240066de:	4a26      	ldr	r2, [pc, #152]	; (24006778 <DMA_SetConfig+0x340>)
240066e0:	4293      	cmp	r3, r2
240066e2:	d018      	beq.n	24006716 <DMA_SetConfig+0x2de>
240066e4:	68fb      	ldr	r3, [r7, #12]
240066e6:	681b      	ldr	r3, [r3, #0]
240066e8:	4a24      	ldr	r2, [pc, #144]	; (2400677c <DMA_SetConfig+0x344>)
240066ea:	4293      	cmp	r3, r2
240066ec:	d013      	beq.n	24006716 <DMA_SetConfig+0x2de>
240066ee:	68fb      	ldr	r3, [r7, #12]
240066f0:	681b      	ldr	r3, [r3, #0]
240066f2:	4a23      	ldr	r2, [pc, #140]	; (24006780 <DMA_SetConfig+0x348>)
240066f4:	4293      	cmp	r3, r2
240066f6:	d00e      	beq.n	24006716 <DMA_SetConfig+0x2de>
240066f8:	68fb      	ldr	r3, [r7, #12]
240066fa:	681b      	ldr	r3, [r3, #0]
240066fc:	4a21      	ldr	r2, [pc, #132]	; (24006784 <DMA_SetConfig+0x34c>)
240066fe:	4293      	cmp	r3, r2
24006700:	d009      	beq.n	24006716 <DMA_SetConfig+0x2de>
24006702:	68fb      	ldr	r3, [r7, #12]
24006704:	681b      	ldr	r3, [r3, #0]
24006706:	4a20      	ldr	r2, [pc, #128]	; (24006788 <DMA_SetConfig+0x350>)
24006708:	4293      	cmp	r3, r2
2400670a:	d004      	beq.n	24006716 <DMA_SetConfig+0x2de>
2400670c:	68fb      	ldr	r3, [r7, #12]
2400670e:	681b      	ldr	r3, [r3, #0]
24006710:	4a1e      	ldr	r2, [pc, #120]	; (2400678c <DMA_SetConfig+0x354>)
24006712:	4293      	cmp	r3, r2
24006714:	d101      	bne.n	2400671a <DMA_SetConfig+0x2e2>
24006716:	2301      	movs	r3, #1
24006718:	e000      	b.n	2400671c <DMA_SetConfig+0x2e4>
2400671a:	2300      	movs	r3, #0
2400671c:	2b00      	cmp	r3, #0
2400671e:	d020      	beq.n	24006762 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006720:	68fb      	ldr	r3, [r7, #12]
24006722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006724:	f003 031f 	and.w	r3, r3, #31
24006728:	2201      	movs	r2, #1
2400672a:	409a      	lsls	r2, r3
2400672c:	693b      	ldr	r3, [r7, #16]
2400672e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24006730:	68fb      	ldr	r3, [r7, #12]
24006732:	681b      	ldr	r3, [r3, #0]
24006734:	683a      	ldr	r2, [r7, #0]
24006736:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24006738:	68fb      	ldr	r3, [r7, #12]
2400673a:	689b      	ldr	r3, [r3, #8]
2400673c:	2b40      	cmp	r3, #64	; 0x40
2400673e:	d108      	bne.n	24006752 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24006740:	68fb      	ldr	r3, [r7, #12]
24006742:	681b      	ldr	r3, [r3, #0]
24006744:	687a      	ldr	r2, [r7, #4]
24006746:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24006748:	68fb      	ldr	r3, [r7, #12]
2400674a:	681b      	ldr	r3, [r3, #0]
2400674c:	68ba      	ldr	r2, [r7, #8]
2400674e:	60da      	str	r2, [r3, #12]
}
24006750:	e007      	b.n	24006762 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24006752:	68fb      	ldr	r3, [r7, #12]
24006754:	681b      	ldr	r3, [r3, #0]
24006756:	68ba      	ldr	r2, [r7, #8]
24006758:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
2400675a:	68fb      	ldr	r3, [r7, #12]
2400675c:	681b      	ldr	r3, [r3, #0]
2400675e:	687a      	ldr	r2, [r7, #4]
24006760:	60da      	str	r2, [r3, #12]
}
24006762:	bf00      	nop
24006764:	371c      	adds	r7, #28
24006766:	46bd      	mov	sp, r7
24006768:	f85d 7b04 	ldr.w	r7, [sp], #4
2400676c:	4770      	bx	lr
2400676e:	bf00      	nop
24006770:	58025408 	.word	0x58025408
24006774:	5802541c 	.word	0x5802541c
24006778:	58025430 	.word	0x58025430
2400677c:	58025444 	.word	0x58025444
24006780:	58025458 	.word	0x58025458
24006784:	5802546c 	.word	0x5802546c
24006788:	58025480 	.word	0x58025480
2400678c:	58025494 	.word	0x58025494

24006790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
24006790:	b480      	push	{r7}
24006792:	b085      	sub	sp, #20
24006794:	af00      	add	r7, sp, #0
24006796:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006798:	687b      	ldr	r3, [r7, #4]
2400679a:	681b      	ldr	r3, [r3, #0]
2400679c:	4a42      	ldr	r2, [pc, #264]	; (240068a8 <DMA_CalcBaseAndBitshift+0x118>)
2400679e:	4293      	cmp	r3, r2
240067a0:	d04a      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067a2:	687b      	ldr	r3, [r7, #4]
240067a4:	681b      	ldr	r3, [r3, #0]
240067a6:	4a41      	ldr	r2, [pc, #260]	; (240068ac <DMA_CalcBaseAndBitshift+0x11c>)
240067a8:	4293      	cmp	r3, r2
240067aa:	d045      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067ac:	687b      	ldr	r3, [r7, #4]
240067ae:	681b      	ldr	r3, [r3, #0]
240067b0:	4a3f      	ldr	r2, [pc, #252]	; (240068b0 <DMA_CalcBaseAndBitshift+0x120>)
240067b2:	4293      	cmp	r3, r2
240067b4:	d040      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067b6:	687b      	ldr	r3, [r7, #4]
240067b8:	681b      	ldr	r3, [r3, #0]
240067ba:	4a3e      	ldr	r2, [pc, #248]	; (240068b4 <DMA_CalcBaseAndBitshift+0x124>)
240067bc:	4293      	cmp	r3, r2
240067be:	d03b      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067c0:	687b      	ldr	r3, [r7, #4]
240067c2:	681b      	ldr	r3, [r3, #0]
240067c4:	4a3c      	ldr	r2, [pc, #240]	; (240068b8 <DMA_CalcBaseAndBitshift+0x128>)
240067c6:	4293      	cmp	r3, r2
240067c8:	d036      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067ca:	687b      	ldr	r3, [r7, #4]
240067cc:	681b      	ldr	r3, [r3, #0]
240067ce:	4a3b      	ldr	r2, [pc, #236]	; (240068bc <DMA_CalcBaseAndBitshift+0x12c>)
240067d0:	4293      	cmp	r3, r2
240067d2:	d031      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067d4:	687b      	ldr	r3, [r7, #4]
240067d6:	681b      	ldr	r3, [r3, #0]
240067d8:	4a39      	ldr	r2, [pc, #228]	; (240068c0 <DMA_CalcBaseAndBitshift+0x130>)
240067da:	4293      	cmp	r3, r2
240067dc:	d02c      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067de:	687b      	ldr	r3, [r7, #4]
240067e0:	681b      	ldr	r3, [r3, #0]
240067e2:	4a38      	ldr	r2, [pc, #224]	; (240068c4 <DMA_CalcBaseAndBitshift+0x134>)
240067e4:	4293      	cmp	r3, r2
240067e6:	d027      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067e8:	687b      	ldr	r3, [r7, #4]
240067ea:	681b      	ldr	r3, [r3, #0]
240067ec:	4a36      	ldr	r2, [pc, #216]	; (240068c8 <DMA_CalcBaseAndBitshift+0x138>)
240067ee:	4293      	cmp	r3, r2
240067f0:	d022      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067f2:	687b      	ldr	r3, [r7, #4]
240067f4:	681b      	ldr	r3, [r3, #0]
240067f6:	4a35      	ldr	r2, [pc, #212]	; (240068cc <DMA_CalcBaseAndBitshift+0x13c>)
240067f8:	4293      	cmp	r3, r2
240067fa:	d01d      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
240067fc:	687b      	ldr	r3, [r7, #4]
240067fe:	681b      	ldr	r3, [r3, #0]
24006800:	4a33      	ldr	r2, [pc, #204]	; (240068d0 <DMA_CalcBaseAndBitshift+0x140>)
24006802:	4293      	cmp	r3, r2
24006804:	d018      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
24006806:	687b      	ldr	r3, [r7, #4]
24006808:	681b      	ldr	r3, [r3, #0]
2400680a:	4a32      	ldr	r2, [pc, #200]	; (240068d4 <DMA_CalcBaseAndBitshift+0x144>)
2400680c:	4293      	cmp	r3, r2
2400680e:	d013      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
24006810:	687b      	ldr	r3, [r7, #4]
24006812:	681b      	ldr	r3, [r3, #0]
24006814:	4a30      	ldr	r2, [pc, #192]	; (240068d8 <DMA_CalcBaseAndBitshift+0x148>)
24006816:	4293      	cmp	r3, r2
24006818:	d00e      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
2400681a:	687b      	ldr	r3, [r7, #4]
2400681c:	681b      	ldr	r3, [r3, #0]
2400681e:	4a2f      	ldr	r2, [pc, #188]	; (240068dc <DMA_CalcBaseAndBitshift+0x14c>)
24006820:	4293      	cmp	r3, r2
24006822:	d009      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
24006824:	687b      	ldr	r3, [r7, #4]
24006826:	681b      	ldr	r3, [r3, #0]
24006828:	4a2d      	ldr	r2, [pc, #180]	; (240068e0 <DMA_CalcBaseAndBitshift+0x150>)
2400682a:	4293      	cmp	r3, r2
2400682c:	d004      	beq.n	24006838 <DMA_CalcBaseAndBitshift+0xa8>
2400682e:	687b      	ldr	r3, [r7, #4]
24006830:	681b      	ldr	r3, [r3, #0]
24006832:	4a2c      	ldr	r2, [pc, #176]	; (240068e4 <DMA_CalcBaseAndBitshift+0x154>)
24006834:	4293      	cmp	r3, r2
24006836:	d101      	bne.n	2400683c <DMA_CalcBaseAndBitshift+0xac>
24006838:	2301      	movs	r3, #1
2400683a:	e000      	b.n	2400683e <DMA_CalcBaseAndBitshift+0xae>
2400683c:	2300      	movs	r3, #0
2400683e:	2b00      	cmp	r3, #0
24006840:	d024      	beq.n	2400688c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24006842:	687b      	ldr	r3, [r7, #4]
24006844:	681b      	ldr	r3, [r3, #0]
24006846:	b2db      	uxtb	r3, r3
24006848:	3b10      	subs	r3, #16
2400684a:	4a27      	ldr	r2, [pc, #156]	; (240068e8 <DMA_CalcBaseAndBitshift+0x158>)
2400684c:	fba2 2303 	umull	r2, r3, r2, r3
24006850:	091b      	lsrs	r3, r3, #4
24006852:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24006854:	68fb      	ldr	r3, [r7, #12]
24006856:	f003 0307 	and.w	r3, r3, #7
2400685a:	4a24      	ldr	r2, [pc, #144]	; (240068ec <DMA_CalcBaseAndBitshift+0x15c>)
2400685c:	5cd3      	ldrb	r3, [r2, r3]
2400685e:	461a      	mov	r2, r3
24006860:	687b      	ldr	r3, [r7, #4]
24006862:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
24006864:	68fb      	ldr	r3, [r7, #12]
24006866:	2b03      	cmp	r3, #3
24006868:	d908      	bls.n	2400687c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
2400686a:	687b      	ldr	r3, [r7, #4]
2400686c:	681b      	ldr	r3, [r3, #0]
2400686e:	461a      	mov	r2, r3
24006870:	4b1f      	ldr	r3, [pc, #124]	; (240068f0 <DMA_CalcBaseAndBitshift+0x160>)
24006872:	4013      	ands	r3, r2
24006874:	1d1a      	adds	r2, r3, #4
24006876:	687b      	ldr	r3, [r7, #4]
24006878:	659a      	str	r2, [r3, #88]	; 0x58
2400687a:	e00d      	b.n	24006898 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
2400687c:	687b      	ldr	r3, [r7, #4]
2400687e:	681b      	ldr	r3, [r3, #0]
24006880:	461a      	mov	r2, r3
24006882:	4b1b      	ldr	r3, [pc, #108]	; (240068f0 <DMA_CalcBaseAndBitshift+0x160>)
24006884:	4013      	ands	r3, r2
24006886:	687a      	ldr	r2, [r7, #4]
24006888:	6593      	str	r3, [r2, #88]	; 0x58
2400688a:	e005      	b.n	24006898 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
2400688c:	687b      	ldr	r3, [r7, #4]
2400688e:	681b      	ldr	r3, [r3, #0]
24006890:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
24006894:	687b      	ldr	r3, [r7, #4]
24006896:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
24006898:	687b      	ldr	r3, [r7, #4]
2400689a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
2400689c:	4618      	mov	r0, r3
2400689e:	3714      	adds	r7, #20
240068a0:	46bd      	mov	sp, r7
240068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
240068a6:	4770      	bx	lr
240068a8:	40020010 	.word	0x40020010
240068ac:	40020028 	.word	0x40020028
240068b0:	40020040 	.word	0x40020040
240068b4:	40020058 	.word	0x40020058
240068b8:	40020070 	.word	0x40020070
240068bc:	40020088 	.word	0x40020088
240068c0:	400200a0 	.word	0x400200a0
240068c4:	400200b8 	.word	0x400200b8
240068c8:	40020410 	.word	0x40020410
240068cc:	40020428 	.word	0x40020428
240068d0:	40020440 	.word	0x40020440
240068d4:	40020458 	.word	0x40020458
240068d8:	40020470 	.word	0x40020470
240068dc:	40020488 	.word	0x40020488
240068e0:	400204a0 	.word	0x400204a0
240068e4:	400204b8 	.word	0x400204b8
240068e8:	aaaaaaab 	.word	0xaaaaaaab
240068ec:	24017004 	.word	0x24017004
240068f0:	fffffc00 	.word	0xfffffc00

240068f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
240068f4:	b480      	push	{r7}
240068f6:	b085      	sub	sp, #20
240068f8:	af00      	add	r7, sp, #0
240068fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240068fc:	2300      	movs	r3, #0
240068fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24006900:	687b      	ldr	r3, [r7, #4]
24006902:	699b      	ldr	r3, [r3, #24]
24006904:	2b00      	cmp	r3, #0
24006906:	d120      	bne.n	2400694a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
24006908:	687b      	ldr	r3, [r7, #4]
2400690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400690c:	2b03      	cmp	r3, #3
2400690e:	d858      	bhi.n	240069c2 <DMA_CheckFifoParam+0xce>
24006910:	a201      	add	r2, pc, #4	; (adr r2, 24006918 <DMA_CheckFifoParam+0x24>)
24006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24006916:	bf00      	nop
24006918:	24006929 	.word	0x24006929
2400691c:	2400693b 	.word	0x2400693b
24006920:	24006929 	.word	0x24006929
24006924:	240069c3 	.word	0x240069c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24006928:	687b      	ldr	r3, [r7, #4]
2400692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400692c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24006930:	2b00      	cmp	r3, #0
24006932:	d048      	beq.n	240069c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
24006934:	2301      	movs	r3, #1
24006936:	73fb      	strb	r3, [r7, #15]
        }
        break;
24006938:	e045      	b.n	240069c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2400693a:	687b      	ldr	r3, [r7, #4]
2400693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400693e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24006942:	d142      	bne.n	240069ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
24006944:	2301      	movs	r3, #1
24006946:	73fb      	strb	r3, [r7, #15]
        }
        break;
24006948:	e03f      	b.n	240069ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400694a:	687b      	ldr	r3, [r7, #4]
2400694c:	699b      	ldr	r3, [r3, #24]
2400694e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24006952:	d123      	bne.n	2400699c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
24006954:	687b      	ldr	r3, [r7, #4]
24006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24006958:	2b03      	cmp	r3, #3
2400695a:	d838      	bhi.n	240069ce <DMA_CheckFifoParam+0xda>
2400695c:	a201      	add	r2, pc, #4	; (adr r2, 24006964 <DMA_CheckFifoParam+0x70>)
2400695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24006962:	bf00      	nop
24006964:	24006975 	.word	0x24006975
24006968:	2400697b 	.word	0x2400697b
2400696c:	24006975 	.word	0x24006975
24006970:	2400698d 	.word	0x2400698d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
24006974:	2301      	movs	r3, #1
24006976:	73fb      	strb	r3, [r7, #15]
        break;
24006978:	e030      	b.n	240069dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2400697a:	687b      	ldr	r3, [r7, #4]
2400697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400697e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24006982:	2b00      	cmp	r3, #0
24006984:	d025      	beq.n	240069d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
24006986:	2301      	movs	r3, #1
24006988:	73fb      	strb	r3, [r7, #15]
        }
        break;
2400698a:	e022      	b.n	240069d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2400698c:	687b      	ldr	r3, [r7, #4]
2400698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24006990:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24006994:	d11f      	bne.n	240069d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
24006996:	2301      	movs	r3, #1
24006998:	73fb      	strb	r3, [r7, #15]
        }
        break;
2400699a:	e01c      	b.n	240069d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
2400699c:	687b      	ldr	r3, [r7, #4]
2400699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240069a0:	2b02      	cmp	r3, #2
240069a2:	d902      	bls.n	240069aa <DMA_CheckFifoParam+0xb6>
240069a4:	2b03      	cmp	r3, #3
240069a6:	d003      	beq.n	240069b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
240069a8:	e018      	b.n	240069dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
240069aa:	2301      	movs	r3, #1
240069ac:	73fb      	strb	r3, [r7, #15]
        break;
240069ae:	e015      	b.n	240069dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240069b0:	687b      	ldr	r3, [r7, #4]
240069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240069b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240069b8:	2b00      	cmp	r3, #0
240069ba:	d00e      	beq.n	240069da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
240069bc:	2301      	movs	r3, #1
240069be:	73fb      	strb	r3, [r7, #15]
    break;
240069c0:	e00b      	b.n	240069da <DMA_CheckFifoParam+0xe6>
        break;
240069c2:	bf00      	nop
240069c4:	e00a      	b.n	240069dc <DMA_CheckFifoParam+0xe8>
        break;
240069c6:	bf00      	nop
240069c8:	e008      	b.n	240069dc <DMA_CheckFifoParam+0xe8>
        break;
240069ca:	bf00      	nop
240069cc:	e006      	b.n	240069dc <DMA_CheckFifoParam+0xe8>
        break;
240069ce:	bf00      	nop
240069d0:	e004      	b.n	240069dc <DMA_CheckFifoParam+0xe8>
        break;
240069d2:	bf00      	nop
240069d4:	e002      	b.n	240069dc <DMA_CheckFifoParam+0xe8>
        break;
240069d6:	bf00      	nop
240069d8:	e000      	b.n	240069dc <DMA_CheckFifoParam+0xe8>
    break;
240069da:	bf00      	nop
    }
  }

  return status;
240069dc:	7bfb      	ldrb	r3, [r7, #15]
}
240069de:	4618      	mov	r0, r3
240069e0:	3714      	adds	r7, #20
240069e2:	46bd      	mov	sp, r7
240069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240069e8:	4770      	bx	lr
240069ea:	bf00      	nop

240069ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
240069ec:	b480      	push	{r7}
240069ee:	b085      	sub	sp, #20
240069f0:	af00      	add	r7, sp, #0
240069f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
240069f4:	687b      	ldr	r3, [r7, #4]
240069f6:	681b      	ldr	r3, [r3, #0]
240069f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240069fa:	687b      	ldr	r3, [r7, #4]
240069fc:	681b      	ldr	r3, [r3, #0]
240069fe:	4a38      	ldr	r2, [pc, #224]	; (24006ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
24006a00:	4293      	cmp	r3, r2
24006a02:	d022      	beq.n	24006a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a04:	687b      	ldr	r3, [r7, #4]
24006a06:	681b      	ldr	r3, [r3, #0]
24006a08:	4a36      	ldr	r2, [pc, #216]	; (24006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
24006a0a:	4293      	cmp	r3, r2
24006a0c:	d01d      	beq.n	24006a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a0e:	687b      	ldr	r3, [r7, #4]
24006a10:	681b      	ldr	r3, [r3, #0]
24006a12:	4a35      	ldr	r2, [pc, #212]	; (24006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
24006a14:	4293      	cmp	r3, r2
24006a16:	d018      	beq.n	24006a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a18:	687b      	ldr	r3, [r7, #4]
24006a1a:	681b      	ldr	r3, [r3, #0]
24006a1c:	4a33      	ldr	r2, [pc, #204]	; (24006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
24006a1e:	4293      	cmp	r3, r2
24006a20:	d013      	beq.n	24006a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a22:	687b      	ldr	r3, [r7, #4]
24006a24:	681b      	ldr	r3, [r3, #0]
24006a26:	4a32      	ldr	r2, [pc, #200]	; (24006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
24006a28:	4293      	cmp	r3, r2
24006a2a:	d00e      	beq.n	24006a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a2c:	687b      	ldr	r3, [r7, #4]
24006a2e:	681b      	ldr	r3, [r3, #0]
24006a30:	4a30      	ldr	r2, [pc, #192]	; (24006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
24006a32:	4293      	cmp	r3, r2
24006a34:	d009      	beq.n	24006a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a36:	687b      	ldr	r3, [r7, #4]
24006a38:	681b      	ldr	r3, [r3, #0]
24006a3a:	4a2f      	ldr	r2, [pc, #188]	; (24006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
24006a3c:	4293      	cmp	r3, r2
24006a3e:	d004      	beq.n	24006a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24006a40:	687b      	ldr	r3, [r7, #4]
24006a42:	681b      	ldr	r3, [r3, #0]
24006a44:	4a2d      	ldr	r2, [pc, #180]	; (24006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
24006a46:	4293      	cmp	r3, r2
24006a48:	d101      	bne.n	24006a4e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
24006a4a:	2301      	movs	r3, #1
24006a4c:	e000      	b.n	24006a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
24006a4e:	2300      	movs	r3, #0
24006a50:	2b00      	cmp	r3, #0
24006a52:	d01a      	beq.n	24006a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24006a54:	687b      	ldr	r3, [r7, #4]
24006a56:	681b      	ldr	r3, [r3, #0]
24006a58:	b2db      	uxtb	r3, r3
24006a5a:	3b08      	subs	r3, #8
24006a5c:	4a28      	ldr	r2, [pc, #160]	; (24006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
24006a5e:	fba2 2303 	umull	r2, r3, r2, r3
24006a62:	091b      	lsrs	r3, r3, #4
24006a64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24006a66:	68fa      	ldr	r2, [r7, #12]
24006a68:	4b26      	ldr	r3, [pc, #152]	; (24006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
24006a6a:	4413      	add	r3, r2
24006a6c:	009b      	lsls	r3, r3, #2
24006a6e:	461a      	mov	r2, r3
24006a70:	687b      	ldr	r3, [r7, #4]
24006a72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24006a74:	687b      	ldr	r3, [r7, #4]
24006a76:	4a24      	ldr	r2, [pc, #144]	; (24006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
24006a78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006a7a:	68fb      	ldr	r3, [r7, #12]
24006a7c:	f003 031f 	and.w	r3, r3, #31
24006a80:	2201      	movs	r2, #1
24006a82:	409a      	lsls	r2, r3
24006a84:	687b      	ldr	r3, [r7, #4]
24006a86:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24006a88:	e024      	b.n	24006ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24006a8a:	687b      	ldr	r3, [r7, #4]
24006a8c:	681b      	ldr	r3, [r3, #0]
24006a8e:	b2db      	uxtb	r3, r3
24006a90:	3b10      	subs	r3, #16
24006a92:	4a1e      	ldr	r2, [pc, #120]	; (24006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
24006a94:	fba2 2303 	umull	r2, r3, r2, r3
24006a98:	091b      	lsrs	r3, r3, #4
24006a9a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24006a9c:	68bb      	ldr	r3, [r7, #8]
24006a9e:	4a1c      	ldr	r2, [pc, #112]	; (24006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
24006aa0:	4293      	cmp	r3, r2
24006aa2:	d806      	bhi.n	24006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
24006aa4:	68bb      	ldr	r3, [r7, #8]
24006aa6:	4a1b      	ldr	r2, [pc, #108]	; (24006b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
24006aa8:	4293      	cmp	r3, r2
24006aaa:	d902      	bls.n	24006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
24006aac:	68fb      	ldr	r3, [r7, #12]
24006aae:	3308      	adds	r3, #8
24006ab0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24006ab2:	68fa      	ldr	r2, [r7, #12]
24006ab4:	4b18      	ldr	r3, [pc, #96]	; (24006b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
24006ab6:	4413      	add	r3, r2
24006ab8:	009b      	lsls	r3, r3, #2
24006aba:	461a      	mov	r2, r3
24006abc:	687b      	ldr	r3, [r7, #4]
24006abe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24006ac0:	687b      	ldr	r3, [r7, #4]
24006ac2:	4a16      	ldr	r2, [pc, #88]	; (24006b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
24006ac4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24006ac6:	68fb      	ldr	r3, [r7, #12]
24006ac8:	f003 031f 	and.w	r3, r3, #31
24006acc:	2201      	movs	r2, #1
24006ace:	409a      	lsls	r2, r3
24006ad0:	687b      	ldr	r3, [r7, #4]
24006ad2:	669a      	str	r2, [r3, #104]	; 0x68
}
24006ad4:	bf00      	nop
24006ad6:	3714      	adds	r7, #20
24006ad8:	46bd      	mov	sp, r7
24006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
24006ade:	4770      	bx	lr
24006ae0:	58025408 	.word	0x58025408
24006ae4:	5802541c 	.word	0x5802541c
24006ae8:	58025430 	.word	0x58025430
24006aec:	58025444 	.word	0x58025444
24006af0:	58025458 	.word	0x58025458
24006af4:	5802546c 	.word	0x5802546c
24006af8:	58025480 	.word	0x58025480
24006afc:	58025494 	.word	0x58025494
24006b00:	cccccccd 	.word	0xcccccccd
24006b04:	16009600 	.word	0x16009600
24006b08:	58025880 	.word	0x58025880
24006b0c:	aaaaaaab 	.word	0xaaaaaaab
24006b10:	400204b8 	.word	0x400204b8
24006b14:	4002040f 	.word	0x4002040f
24006b18:	10008200 	.word	0x10008200
24006b1c:	40020880 	.word	0x40020880

24006b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
24006b20:	b480      	push	{r7}
24006b22:	b085      	sub	sp, #20
24006b24:	af00      	add	r7, sp, #0
24006b26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
24006b28:	687b      	ldr	r3, [r7, #4]
24006b2a:	685b      	ldr	r3, [r3, #4]
24006b2c:	b2db      	uxtb	r3, r3
24006b2e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
24006b30:	68fb      	ldr	r3, [r7, #12]
24006b32:	2b00      	cmp	r3, #0
24006b34:	d04a      	beq.n	24006bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
24006b36:	68fb      	ldr	r3, [r7, #12]
24006b38:	2b08      	cmp	r3, #8
24006b3a:	d847      	bhi.n	24006bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24006b3c:	687b      	ldr	r3, [r7, #4]
24006b3e:	681b      	ldr	r3, [r3, #0]
24006b40:	4a25      	ldr	r2, [pc, #148]	; (24006bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
24006b42:	4293      	cmp	r3, r2
24006b44:	d022      	beq.n	24006b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b46:	687b      	ldr	r3, [r7, #4]
24006b48:	681b      	ldr	r3, [r3, #0]
24006b4a:	4a24      	ldr	r2, [pc, #144]	; (24006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
24006b4c:	4293      	cmp	r3, r2
24006b4e:	d01d      	beq.n	24006b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b50:	687b      	ldr	r3, [r7, #4]
24006b52:	681b      	ldr	r3, [r3, #0]
24006b54:	4a22      	ldr	r2, [pc, #136]	; (24006be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
24006b56:	4293      	cmp	r3, r2
24006b58:	d018      	beq.n	24006b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b5a:	687b      	ldr	r3, [r7, #4]
24006b5c:	681b      	ldr	r3, [r3, #0]
24006b5e:	4a21      	ldr	r2, [pc, #132]	; (24006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
24006b60:	4293      	cmp	r3, r2
24006b62:	d013      	beq.n	24006b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b64:	687b      	ldr	r3, [r7, #4]
24006b66:	681b      	ldr	r3, [r3, #0]
24006b68:	4a1f      	ldr	r2, [pc, #124]	; (24006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
24006b6a:	4293      	cmp	r3, r2
24006b6c:	d00e      	beq.n	24006b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b6e:	687b      	ldr	r3, [r7, #4]
24006b70:	681b      	ldr	r3, [r3, #0]
24006b72:	4a1e      	ldr	r2, [pc, #120]	; (24006bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
24006b74:	4293      	cmp	r3, r2
24006b76:	d009      	beq.n	24006b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b78:	687b      	ldr	r3, [r7, #4]
24006b7a:	681b      	ldr	r3, [r3, #0]
24006b7c:	4a1c      	ldr	r2, [pc, #112]	; (24006bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
24006b7e:	4293      	cmp	r3, r2
24006b80:	d004      	beq.n	24006b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24006b82:	687b      	ldr	r3, [r7, #4]
24006b84:	681b      	ldr	r3, [r3, #0]
24006b86:	4a1b      	ldr	r2, [pc, #108]	; (24006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24006b88:	4293      	cmp	r3, r2
24006b8a:	d101      	bne.n	24006b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
24006b8c:	2301      	movs	r3, #1
24006b8e:	e000      	b.n	24006b92 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
24006b90:	2300      	movs	r3, #0
24006b92:	2b00      	cmp	r3, #0
24006b94:	d00a      	beq.n	24006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24006b96:	68fa      	ldr	r2, [r7, #12]
24006b98:	4b17      	ldr	r3, [pc, #92]	; (24006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
24006b9a:	4413      	add	r3, r2
24006b9c:	009b      	lsls	r3, r3, #2
24006b9e:	461a      	mov	r2, r3
24006ba0:	687b      	ldr	r3, [r7, #4]
24006ba2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24006ba4:	687b      	ldr	r3, [r7, #4]
24006ba6:	4a15      	ldr	r2, [pc, #84]	; (24006bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
24006ba8:	671a      	str	r2, [r3, #112]	; 0x70
24006baa:	e009      	b.n	24006bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24006bac:	68fa      	ldr	r2, [r7, #12]
24006bae:	4b14      	ldr	r3, [pc, #80]	; (24006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
24006bb0:	4413      	add	r3, r2
24006bb2:	009b      	lsls	r3, r3, #2
24006bb4:	461a      	mov	r2, r3
24006bb6:	687b      	ldr	r3, [r7, #4]
24006bb8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24006bba:	687b      	ldr	r3, [r7, #4]
24006bbc:	4a11      	ldr	r2, [pc, #68]	; (24006c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
24006bbe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24006bc0:	68fb      	ldr	r3, [r7, #12]
24006bc2:	3b01      	subs	r3, #1
24006bc4:	2201      	movs	r2, #1
24006bc6:	409a      	lsls	r2, r3
24006bc8:	687b      	ldr	r3, [r7, #4]
24006bca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
24006bcc:	bf00      	nop
24006bce:	3714      	adds	r7, #20
24006bd0:	46bd      	mov	sp, r7
24006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
24006bd6:	4770      	bx	lr
24006bd8:	58025408 	.word	0x58025408
24006bdc:	5802541c 	.word	0x5802541c
24006be0:	58025430 	.word	0x58025430
24006be4:	58025444 	.word	0x58025444
24006be8:	58025458 	.word	0x58025458
24006bec:	5802546c 	.word	0x5802546c
24006bf0:	58025480 	.word	0x58025480
24006bf4:	58025494 	.word	0x58025494
24006bf8:	1600963f 	.word	0x1600963f
24006bfc:	58025940 	.word	0x58025940
24006c00:	1000823f 	.word	0x1000823f
24006c04:	40020940 	.word	0x40020940

24006c08 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24006c08:	b580      	push	{r7, lr}
24006c0a:	b086      	sub	sp, #24
24006c0c:	af00      	add	r7, sp, #0
24006c0e:	60f8      	str	r0, [r7, #12]
24006c10:	60b9      	str	r1, [r7, #8]
24006c12:	607a      	str	r2, [r7, #4]
24006c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006c16:	2300      	movs	r3, #0
24006c18:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24006c1a:	68fb      	ldr	r3, [r7, #12]
24006c1c:	689b      	ldr	r3, [r3, #8]
24006c1e:	2b80      	cmp	r3, #128	; 0x80
24006c20:	d106      	bne.n	24006c30 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24006c22:	68fb      	ldr	r3, [r7, #12]
24006c24:	f44f 7280 	mov.w	r2, #256	; 0x100
24006c28:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
24006c2a:	2301      	movs	r3, #1
24006c2c:	75fb      	strb	r3, [r7, #23]
24006c2e:	e1c8      	b.n	24006fc2 <HAL_DMAEx_MultiBufferStart+0x3ba>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24006c30:	68fb      	ldr	r3, [r7, #12]
24006c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24006c36:	2b01      	cmp	r3, #1
24006c38:	d101      	bne.n	24006c3e <HAL_DMAEx_MultiBufferStart+0x36>
24006c3a:	2302      	movs	r3, #2
24006c3c:	e1c2      	b.n	24006fc4 <HAL_DMAEx_MultiBufferStart+0x3bc>
24006c3e:	68fb      	ldr	r3, [r7, #12]
24006c40:	2201      	movs	r2, #1
24006c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if(HAL_DMA_STATE_READY == hdma->State)
24006c46:	68fb      	ldr	r3, [r7, #12]
24006c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24006c4c:	b2db      	uxtb	r3, r3
24006c4e:	2b01      	cmp	r3, #1
24006c50:	f040 81b1 	bne.w	24006fb6 <HAL_DMAEx_MultiBufferStart+0x3ae>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY;
24006c54:	68fb      	ldr	r3, [r7, #12]
24006c56:	2202      	movs	r2, #2
24006c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Initialize the error code */
      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24006c5c:	68fb      	ldr	r3, [r7, #12]
24006c5e:	2200      	movs	r2, #0
24006c60:	655a      	str	r2, [r3, #84]	; 0x54

      if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24006c62:	68fb      	ldr	r3, [r7, #12]
24006c64:	681b      	ldr	r3, [r3, #0]
24006c66:	4a7f      	ldr	r2, [pc, #508]	; (24006e64 <HAL_DMAEx_MultiBufferStart+0x25c>)
24006c68:	4293      	cmp	r3, r2
24006c6a:	d04a      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c6c:	68fb      	ldr	r3, [r7, #12]
24006c6e:	681b      	ldr	r3, [r3, #0]
24006c70:	4a7d      	ldr	r2, [pc, #500]	; (24006e68 <HAL_DMAEx_MultiBufferStart+0x260>)
24006c72:	4293      	cmp	r3, r2
24006c74:	d045      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c76:	68fb      	ldr	r3, [r7, #12]
24006c78:	681b      	ldr	r3, [r3, #0]
24006c7a:	4a7c      	ldr	r2, [pc, #496]	; (24006e6c <HAL_DMAEx_MultiBufferStart+0x264>)
24006c7c:	4293      	cmp	r3, r2
24006c7e:	d040      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c80:	68fb      	ldr	r3, [r7, #12]
24006c82:	681b      	ldr	r3, [r3, #0]
24006c84:	4a7a      	ldr	r2, [pc, #488]	; (24006e70 <HAL_DMAEx_MultiBufferStart+0x268>)
24006c86:	4293      	cmp	r3, r2
24006c88:	d03b      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c8a:	68fb      	ldr	r3, [r7, #12]
24006c8c:	681b      	ldr	r3, [r3, #0]
24006c8e:	4a79      	ldr	r2, [pc, #484]	; (24006e74 <HAL_DMAEx_MultiBufferStart+0x26c>)
24006c90:	4293      	cmp	r3, r2
24006c92:	d036      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c94:	68fb      	ldr	r3, [r7, #12]
24006c96:	681b      	ldr	r3, [r3, #0]
24006c98:	4a77      	ldr	r2, [pc, #476]	; (24006e78 <HAL_DMAEx_MultiBufferStart+0x270>)
24006c9a:	4293      	cmp	r3, r2
24006c9c:	d031      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006c9e:	68fb      	ldr	r3, [r7, #12]
24006ca0:	681b      	ldr	r3, [r3, #0]
24006ca2:	4a76      	ldr	r2, [pc, #472]	; (24006e7c <HAL_DMAEx_MultiBufferStart+0x274>)
24006ca4:	4293      	cmp	r3, r2
24006ca6:	d02c      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006ca8:	68fb      	ldr	r3, [r7, #12]
24006caa:	681b      	ldr	r3, [r3, #0]
24006cac:	4a74      	ldr	r2, [pc, #464]	; (24006e80 <HAL_DMAEx_MultiBufferStart+0x278>)
24006cae:	4293      	cmp	r3, r2
24006cb0:	d027      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006cb2:	68fb      	ldr	r3, [r7, #12]
24006cb4:	681b      	ldr	r3, [r3, #0]
24006cb6:	4a73      	ldr	r2, [pc, #460]	; (24006e84 <HAL_DMAEx_MultiBufferStart+0x27c>)
24006cb8:	4293      	cmp	r3, r2
24006cba:	d022      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006cbc:	68fb      	ldr	r3, [r7, #12]
24006cbe:	681b      	ldr	r3, [r3, #0]
24006cc0:	4a71      	ldr	r2, [pc, #452]	; (24006e88 <HAL_DMAEx_MultiBufferStart+0x280>)
24006cc2:	4293      	cmp	r3, r2
24006cc4:	d01d      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006cc6:	68fb      	ldr	r3, [r7, #12]
24006cc8:	681b      	ldr	r3, [r3, #0]
24006cca:	4a70      	ldr	r2, [pc, #448]	; (24006e8c <HAL_DMAEx_MultiBufferStart+0x284>)
24006ccc:	4293      	cmp	r3, r2
24006cce:	d018      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006cd0:	68fb      	ldr	r3, [r7, #12]
24006cd2:	681b      	ldr	r3, [r3, #0]
24006cd4:	4a6e      	ldr	r2, [pc, #440]	; (24006e90 <HAL_DMAEx_MultiBufferStart+0x288>)
24006cd6:	4293      	cmp	r3, r2
24006cd8:	d013      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006cda:	68fb      	ldr	r3, [r7, #12]
24006cdc:	681b      	ldr	r3, [r3, #0]
24006cde:	4a6d      	ldr	r2, [pc, #436]	; (24006e94 <HAL_DMAEx_MultiBufferStart+0x28c>)
24006ce0:	4293      	cmp	r3, r2
24006ce2:	d00e      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006ce4:	68fb      	ldr	r3, [r7, #12]
24006ce6:	681b      	ldr	r3, [r3, #0]
24006ce8:	4a6b      	ldr	r2, [pc, #428]	; (24006e98 <HAL_DMAEx_MultiBufferStart+0x290>)
24006cea:	4293      	cmp	r3, r2
24006cec:	d009      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006cee:	68fb      	ldr	r3, [r7, #12]
24006cf0:	681b      	ldr	r3, [r3, #0]
24006cf2:	4a6a      	ldr	r2, [pc, #424]	; (24006e9c <HAL_DMAEx_MultiBufferStart+0x294>)
24006cf4:	4293      	cmp	r3, r2
24006cf6:	d004      	beq.n	24006d02 <HAL_DMAEx_MultiBufferStart+0xfa>
24006cf8:	68fb      	ldr	r3, [r7, #12]
24006cfa:	681b      	ldr	r3, [r3, #0]
24006cfc:	4a68      	ldr	r2, [pc, #416]	; (24006ea0 <HAL_DMAEx_MultiBufferStart+0x298>)
24006cfe:	4293      	cmp	r3, r2
24006d00:	d101      	bne.n	24006d06 <HAL_DMAEx_MultiBufferStart+0xfe>
24006d02:	2301      	movs	r3, #1
24006d04:	e000      	b.n	24006d08 <HAL_DMAEx_MultiBufferStart+0x100>
24006d06:	2300      	movs	r3, #0
24006d08:	2b00      	cmp	r3, #0
24006d0a:	d018      	beq.n	24006d3e <HAL_DMAEx_MultiBufferStart+0x136>
      {
        /* Enable the Double buffer mode */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
24006d0c:	68fb      	ldr	r3, [r7, #12]
24006d0e:	681b      	ldr	r3, [r3, #0]
24006d10:	681a      	ldr	r2, [r3, #0]
24006d12:	68fb      	ldr	r3, [r7, #12]
24006d14:	681b      	ldr	r3, [r3, #0]
24006d16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24006d1a:	601a      	str	r2, [r3, #0]

        /* Configure DMA Stream destination address */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
24006d1c:	68fb      	ldr	r3, [r7, #12]
24006d1e:	681b      	ldr	r3, [r3, #0]
24006d20:	683a      	ldr	r2, [r7, #0]
24006d22:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24006d24:	68fb      	ldr	r3, [r7, #12]
24006d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006d28:	3308      	adds	r3, #8
24006d2a:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006d2c:	68fb      	ldr	r3, [r7, #12]
24006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006d30:	f003 031f 	and.w	r3, r3, #31
24006d34:	223f      	movs	r2, #63	; 0x3f
24006d36:	409a      	lsls	r2, r3
24006d38:	693b      	ldr	r3, [r7, #16]
24006d3a:	601a      	str	r2, [r3, #0]
24006d3c:	e018      	b.n	24006d70 <HAL_DMAEx_MultiBufferStart+0x168>
      }
      else /* BDMA instance(s) */
      {
        /* Enable the Double buffer mode */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24006d3e:	68fb      	ldr	r3, [r7, #12]
24006d40:	681b      	ldr	r3, [r3, #0]
24006d42:	6819      	ldr	r1, [r3, #0]
24006d44:	68fb      	ldr	r3, [r7, #12]
24006d46:	681a      	ldr	r2, [r3, #0]
24006d48:	f248 0320 	movw	r3, #32800	; 0x8020
24006d4c:	430b      	orrs	r3, r1
24006d4e:	6013      	str	r3, [r2, #0]

        /* Configure DMA Stream destination address */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
24006d50:	68fb      	ldr	r3, [r7, #12]
24006d52:	681b      	ldr	r3, [r3, #0]
24006d54:	683a      	ldr	r2, [r7, #0]
24006d56:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
24006d58:	68fb      	ldr	r3, [r7, #12]
24006d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006d5c:	3304      	adds	r3, #4
24006d5e:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006d60:	68fb      	ldr	r3, [r7, #12]
24006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24006d64:	f003 031f 	and.w	r3, r3, #31
24006d68:	2201      	movs	r2, #1
24006d6a:	409a      	lsls	r2, r3
24006d6c:	693b      	ldr	r3, [r7, #16]
24006d6e:	601a      	str	r2, [r3, #0]
      }

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24006d70:	68fb      	ldr	r3, [r7, #12]
24006d72:	681b      	ldr	r3, [r3, #0]
24006d74:	4a3b      	ldr	r2, [pc, #236]	; (24006e64 <HAL_DMAEx_MultiBufferStart+0x25c>)
24006d76:	4293      	cmp	r3, r2
24006d78:	d072      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006d7a:	68fb      	ldr	r3, [r7, #12]
24006d7c:	681b      	ldr	r3, [r3, #0]
24006d7e:	4a3a      	ldr	r2, [pc, #232]	; (24006e68 <HAL_DMAEx_MultiBufferStart+0x260>)
24006d80:	4293      	cmp	r3, r2
24006d82:	d06d      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006d84:	68fb      	ldr	r3, [r7, #12]
24006d86:	681b      	ldr	r3, [r3, #0]
24006d88:	4a38      	ldr	r2, [pc, #224]	; (24006e6c <HAL_DMAEx_MultiBufferStart+0x264>)
24006d8a:	4293      	cmp	r3, r2
24006d8c:	d068      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006d8e:	68fb      	ldr	r3, [r7, #12]
24006d90:	681b      	ldr	r3, [r3, #0]
24006d92:	4a37      	ldr	r2, [pc, #220]	; (24006e70 <HAL_DMAEx_MultiBufferStart+0x268>)
24006d94:	4293      	cmp	r3, r2
24006d96:	d063      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006d98:	68fb      	ldr	r3, [r7, #12]
24006d9a:	681b      	ldr	r3, [r3, #0]
24006d9c:	4a35      	ldr	r2, [pc, #212]	; (24006e74 <HAL_DMAEx_MultiBufferStart+0x26c>)
24006d9e:	4293      	cmp	r3, r2
24006da0:	d05e      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006da2:	68fb      	ldr	r3, [r7, #12]
24006da4:	681b      	ldr	r3, [r3, #0]
24006da6:	4a34      	ldr	r2, [pc, #208]	; (24006e78 <HAL_DMAEx_MultiBufferStart+0x270>)
24006da8:	4293      	cmp	r3, r2
24006daa:	d059      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006dac:	68fb      	ldr	r3, [r7, #12]
24006dae:	681b      	ldr	r3, [r3, #0]
24006db0:	4a32      	ldr	r2, [pc, #200]	; (24006e7c <HAL_DMAEx_MultiBufferStart+0x274>)
24006db2:	4293      	cmp	r3, r2
24006db4:	d054      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006db6:	68fb      	ldr	r3, [r7, #12]
24006db8:	681b      	ldr	r3, [r3, #0]
24006dba:	4a31      	ldr	r2, [pc, #196]	; (24006e80 <HAL_DMAEx_MultiBufferStart+0x278>)
24006dbc:	4293      	cmp	r3, r2
24006dbe:	d04f      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006dc0:	68fb      	ldr	r3, [r7, #12]
24006dc2:	681b      	ldr	r3, [r3, #0]
24006dc4:	4a2f      	ldr	r2, [pc, #188]	; (24006e84 <HAL_DMAEx_MultiBufferStart+0x27c>)
24006dc6:	4293      	cmp	r3, r2
24006dc8:	d04a      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006dca:	68fb      	ldr	r3, [r7, #12]
24006dcc:	681b      	ldr	r3, [r3, #0]
24006dce:	4a2e      	ldr	r2, [pc, #184]	; (24006e88 <HAL_DMAEx_MultiBufferStart+0x280>)
24006dd0:	4293      	cmp	r3, r2
24006dd2:	d045      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006dd4:	68fb      	ldr	r3, [r7, #12]
24006dd6:	681b      	ldr	r3, [r3, #0]
24006dd8:	4a2c      	ldr	r2, [pc, #176]	; (24006e8c <HAL_DMAEx_MultiBufferStart+0x284>)
24006dda:	4293      	cmp	r3, r2
24006ddc:	d040      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006dde:	68fb      	ldr	r3, [r7, #12]
24006de0:	681b      	ldr	r3, [r3, #0]
24006de2:	4a2b      	ldr	r2, [pc, #172]	; (24006e90 <HAL_DMAEx_MultiBufferStart+0x288>)
24006de4:	4293      	cmp	r3, r2
24006de6:	d03b      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006de8:	68fb      	ldr	r3, [r7, #12]
24006dea:	681b      	ldr	r3, [r3, #0]
24006dec:	4a29      	ldr	r2, [pc, #164]	; (24006e94 <HAL_DMAEx_MultiBufferStart+0x28c>)
24006dee:	4293      	cmp	r3, r2
24006df0:	d036      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006df2:	68fb      	ldr	r3, [r7, #12]
24006df4:	681b      	ldr	r3, [r3, #0]
24006df6:	4a28      	ldr	r2, [pc, #160]	; (24006e98 <HAL_DMAEx_MultiBufferStart+0x290>)
24006df8:	4293      	cmp	r3, r2
24006dfa:	d031      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006dfc:	68fb      	ldr	r3, [r7, #12]
24006dfe:	681b      	ldr	r3, [r3, #0]
24006e00:	4a26      	ldr	r2, [pc, #152]	; (24006e9c <HAL_DMAEx_MultiBufferStart+0x294>)
24006e02:	4293      	cmp	r3, r2
24006e04:	d02c      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e06:	68fb      	ldr	r3, [r7, #12]
24006e08:	681b      	ldr	r3, [r3, #0]
24006e0a:	4a25      	ldr	r2, [pc, #148]	; (24006ea0 <HAL_DMAEx_MultiBufferStart+0x298>)
24006e0c:	4293      	cmp	r3, r2
24006e0e:	d027      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e10:	68fb      	ldr	r3, [r7, #12]
24006e12:	681b      	ldr	r3, [r3, #0]
24006e14:	4a23      	ldr	r2, [pc, #140]	; (24006ea4 <HAL_DMAEx_MultiBufferStart+0x29c>)
24006e16:	4293      	cmp	r3, r2
24006e18:	d022      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e1a:	68fb      	ldr	r3, [r7, #12]
24006e1c:	681b      	ldr	r3, [r3, #0]
24006e1e:	4a22      	ldr	r2, [pc, #136]	; (24006ea8 <HAL_DMAEx_MultiBufferStart+0x2a0>)
24006e20:	4293      	cmp	r3, r2
24006e22:	d01d      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e24:	68fb      	ldr	r3, [r7, #12]
24006e26:	681b      	ldr	r3, [r3, #0]
24006e28:	4a20      	ldr	r2, [pc, #128]	; (24006eac <HAL_DMAEx_MultiBufferStart+0x2a4>)
24006e2a:	4293      	cmp	r3, r2
24006e2c:	d018      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e2e:	68fb      	ldr	r3, [r7, #12]
24006e30:	681b      	ldr	r3, [r3, #0]
24006e32:	4a1f      	ldr	r2, [pc, #124]	; (24006eb0 <HAL_DMAEx_MultiBufferStart+0x2a8>)
24006e34:	4293      	cmp	r3, r2
24006e36:	d013      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e38:	68fb      	ldr	r3, [r7, #12]
24006e3a:	681b      	ldr	r3, [r3, #0]
24006e3c:	4a1d      	ldr	r2, [pc, #116]	; (24006eb4 <HAL_DMAEx_MultiBufferStart+0x2ac>)
24006e3e:	4293      	cmp	r3, r2
24006e40:	d00e      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e42:	68fb      	ldr	r3, [r7, #12]
24006e44:	681b      	ldr	r3, [r3, #0]
24006e46:	4a1c      	ldr	r2, [pc, #112]	; (24006eb8 <HAL_DMAEx_MultiBufferStart+0x2b0>)
24006e48:	4293      	cmp	r3, r2
24006e4a:	d009      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e4c:	68fb      	ldr	r3, [r7, #12]
24006e4e:	681b      	ldr	r3, [r3, #0]
24006e50:	4a1a      	ldr	r2, [pc, #104]	; (24006ebc <HAL_DMAEx_MultiBufferStart+0x2b4>)
24006e52:	4293      	cmp	r3, r2
24006e54:	d004      	beq.n	24006e60 <HAL_DMAEx_MultiBufferStart+0x258>
24006e56:	68fb      	ldr	r3, [r7, #12]
24006e58:	681b      	ldr	r3, [r3, #0]
24006e5a:	4a19      	ldr	r2, [pc, #100]	; (24006ec0 <HAL_DMAEx_MultiBufferStart+0x2b8>)
24006e5c:	4293      	cmp	r3, r2
24006e5e:	d131      	bne.n	24006ec4 <HAL_DMAEx_MultiBufferStart+0x2bc>
24006e60:	2301      	movs	r3, #1
24006e62:	e030      	b.n	24006ec6 <HAL_DMAEx_MultiBufferStart+0x2be>
24006e64:	40020010 	.word	0x40020010
24006e68:	40020028 	.word	0x40020028
24006e6c:	40020040 	.word	0x40020040
24006e70:	40020058 	.word	0x40020058
24006e74:	40020070 	.word	0x40020070
24006e78:	40020088 	.word	0x40020088
24006e7c:	400200a0 	.word	0x400200a0
24006e80:	400200b8 	.word	0x400200b8
24006e84:	40020410 	.word	0x40020410
24006e88:	40020428 	.word	0x40020428
24006e8c:	40020440 	.word	0x40020440
24006e90:	40020458 	.word	0x40020458
24006e94:	40020470 	.word	0x40020470
24006e98:	40020488 	.word	0x40020488
24006e9c:	400204a0 	.word	0x400204a0
24006ea0:	400204b8 	.word	0x400204b8
24006ea4:	58025408 	.word	0x58025408
24006ea8:	5802541c 	.word	0x5802541c
24006eac:	58025430 	.word	0x58025430
24006eb0:	58025444 	.word	0x58025444
24006eb4:	58025458 	.word	0x58025458
24006eb8:	5802546c 	.word	0x5802546c
24006ebc:	58025480 	.word	0x58025480
24006ec0:	58025494 	.word	0x58025494
24006ec4:	2300      	movs	r3, #0
24006ec6:	2b00      	cmp	r3, #0
24006ec8:	d013      	beq.n	24006ef2 <HAL_DMAEx_MultiBufferStart+0x2ea>
      {
        /* Configure the source, destination address and the data length */
        DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
24006eca:	6a3b      	ldr	r3, [r7, #32]
24006ecc:	687a      	ldr	r2, [r7, #4]
24006ece:	68b9      	ldr	r1, [r7, #8]
24006ed0:	68f8      	ldr	r0, [r7, #12]
24006ed2:	f000 fea5 	bl	24007c20 <DMA_MultiBufferSetConfig>

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006ed6:	68fb      	ldr	r3, [r7, #12]
24006ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24006eda:	68fa      	ldr	r2, [r7, #12]
24006edc:	6e92      	ldr	r2, [r2, #104]	; 0x68
24006ede:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24006ee0:	68fb      	ldr	r3, [r7, #12]
24006ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24006ee4:	2b00      	cmp	r3, #0
24006ee6:	d004      	beq.n	24006ef2 <HAL_DMAEx_MultiBufferStart+0x2ea>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006ee8:	68fb      	ldr	r3, [r7, #12]
24006eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24006eec:	68fa      	ldr	r2, [r7, #12]
24006eee:	6f52      	ldr	r2, [r2, #116]	; 0x74
24006ef0:	605a      	str	r2, [r3, #4]
        }
      }

      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
24006ef2:	68fb      	ldr	r3, [r7, #12]
24006ef4:	681b      	ldr	r3, [r3, #0]
24006ef6:	4a35      	ldr	r2, [pc, #212]	; (24006fcc <HAL_DMAEx_MultiBufferStart+0x3c4>)
24006ef8:	4293      	cmp	r3, r2
24006efa:	d04a      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006efc:	68fb      	ldr	r3, [r7, #12]
24006efe:	681b      	ldr	r3, [r3, #0]
24006f00:	4a33      	ldr	r2, [pc, #204]	; (24006fd0 <HAL_DMAEx_MultiBufferStart+0x3c8>)
24006f02:	4293      	cmp	r3, r2
24006f04:	d045      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f06:	68fb      	ldr	r3, [r7, #12]
24006f08:	681b      	ldr	r3, [r3, #0]
24006f0a:	4a32      	ldr	r2, [pc, #200]	; (24006fd4 <HAL_DMAEx_MultiBufferStart+0x3cc>)
24006f0c:	4293      	cmp	r3, r2
24006f0e:	d040      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f10:	68fb      	ldr	r3, [r7, #12]
24006f12:	681b      	ldr	r3, [r3, #0]
24006f14:	4a30      	ldr	r2, [pc, #192]	; (24006fd8 <HAL_DMAEx_MultiBufferStart+0x3d0>)
24006f16:	4293      	cmp	r3, r2
24006f18:	d03b      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f1a:	68fb      	ldr	r3, [r7, #12]
24006f1c:	681b      	ldr	r3, [r3, #0]
24006f1e:	4a2f      	ldr	r2, [pc, #188]	; (24006fdc <HAL_DMAEx_MultiBufferStart+0x3d4>)
24006f20:	4293      	cmp	r3, r2
24006f22:	d036      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f24:	68fb      	ldr	r3, [r7, #12]
24006f26:	681b      	ldr	r3, [r3, #0]
24006f28:	4a2d      	ldr	r2, [pc, #180]	; (24006fe0 <HAL_DMAEx_MultiBufferStart+0x3d8>)
24006f2a:	4293      	cmp	r3, r2
24006f2c:	d031      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f2e:	68fb      	ldr	r3, [r7, #12]
24006f30:	681b      	ldr	r3, [r3, #0]
24006f32:	4a2c      	ldr	r2, [pc, #176]	; (24006fe4 <HAL_DMAEx_MultiBufferStart+0x3dc>)
24006f34:	4293      	cmp	r3, r2
24006f36:	d02c      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f38:	68fb      	ldr	r3, [r7, #12]
24006f3a:	681b      	ldr	r3, [r3, #0]
24006f3c:	4a2a      	ldr	r2, [pc, #168]	; (24006fe8 <HAL_DMAEx_MultiBufferStart+0x3e0>)
24006f3e:	4293      	cmp	r3, r2
24006f40:	d027      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f42:	68fb      	ldr	r3, [r7, #12]
24006f44:	681b      	ldr	r3, [r3, #0]
24006f46:	4a29      	ldr	r2, [pc, #164]	; (24006fec <HAL_DMAEx_MultiBufferStart+0x3e4>)
24006f48:	4293      	cmp	r3, r2
24006f4a:	d022      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f4c:	68fb      	ldr	r3, [r7, #12]
24006f4e:	681b      	ldr	r3, [r3, #0]
24006f50:	4a27      	ldr	r2, [pc, #156]	; (24006ff0 <HAL_DMAEx_MultiBufferStart+0x3e8>)
24006f52:	4293      	cmp	r3, r2
24006f54:	d01d      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f56:	68fb      	ldr	r3, [r7, #12]
24006f58:	681b      	ldr	r3, [r3, #0]
24006f5a:	4a26      	ldr	r2, [pc, #152]	; (24006ff4 <HAL_DMAEx_MultiBufferStart+0x3ec>)
24006f5c:	4293      	cmp	r3, r2
24006f5e:	d018      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f60:	68fb      	ldr	r3, [r7, #12]
24006f62:	681b      	ldr	r3, [r3, #0]
24006f64:	4a24      	ldr	r2, [pc, #144]	; (24006ff8 <HAL_DMAEx_MultiBufferStart+0x3f0>)
24006f66:	4293      	cmp	r3, r2
24006f68:	d013      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f6a:	68fb      	ldr	r3, [r7, #12]
24006f6c:	681b      	ldr	r3, [r3, #0]
24006f6e:	4a23      	ldr	r2, [pc, #140]	; (24006ffc <HAL_DMAEx_MultiBufferStart+0x3f4>)
24006f70:	4293      	cmp	r3, r2
24006f72:	d00e      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f74:	68fb      	ldr	r3, [r7, #12]
24006f76:	681b      	ldr	r3, [r3, #0]
24006f78:	4a21      	ldr	r2, [pc, #132]	; (24007000 <HAL_DMAEx_MultiBufferStart+0x3f8>)
24006f7a:	4293      	cmp	r3, r2
24006f7c:	d009      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f7e:	68fb      	ldr	r3, [r7, #12]
24006f80:	681b      	ldr	r3, [r3, #0]
24006f82:	4a20      	ldr	r2, [pc, #128]	; (24007004 <HAL_DMAEx_MultiBufferStart+0x3fc>)
24006f84:	4293      	cmp	r3, r2
24006f86:	d004      	beq.n	24006f92 <HAL_DMAEx_MultiBufferStart+0x38a>
24006f88:	68fb      	ldr	r3, [r7, #12]
24006f8a:	681b      	ldr	r3, [r3, #0]
24006f8c:	4a1e      	ldr	r2, [pc, #120]	; (24007008 <HAL_DMAEx_MultiBufferStart+0x400>)
24006f8e:	4293      	cmp	r3, r2
24006f90:	d108      	bne.n	24006fa4 <HAL_DMAEx_MultiBufferStart+0x39c>
24006f92:	68fb      	ldr	r3, [r7, #12]
24006f94:	681b      	ldr	r3, [r3, #0]
24006f96:	681a      	ldr	r2, [r3, #0]
24006f98:	68fb      	ldr	r3, [r7, #12]
24006f9a:	681b      	ldr	r3, [r3, #0]
24006f9c:	f042 0201 	orr.w	r2, r2, #1
24006fa0:	601a      	str	r2, [r3, #0]
24006fa2:	e00e      	b.n	24006fc2 <HAL_DMAEx_MultiBufferStart+0x3ba>
24006fa4:	68fb      	ldr	r3, [r7, #12]
24006fa6:	681b      	ldr	r3, [r3, #0]
24006fa8:	681a      	ldr	r2, [r3, #0]
24006faa:	68fb      	ldr	r3, [r7, #12]
24006fac:	681b      	ldr	r3, [r3, #0]
24006fae:	f042 0201 	orr.w	r2, r2, #1
24006fb2:	601a      	str	r2, [r3, #0]
24006fb4:	e005      	b.n	24006fc2 <HAL_DMAEx_MultiBufferStart+0x3ba>
    }
    else
    {
      /* Set the error code to busy */
      hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006fb6:	68fb      	ldr	r3, [r7, #12]
24006fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
24006fbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Return error status */
      status = HAL_ERROR;
24006fbe:	2301      	movs	r3, #1
24006fc0:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
24006fc2:	7dfb      	ldrb	r3, [r7, #23]
}
24006fc4:	4618      	mov	r0, r3
24006fc6:	3718      	adds	r7, #24
24006fc8:	46bd      	mov	sp, r7
24006fca:	bd80      	pop	{r7, pc}
24006fcc:	40020010 	.word	0x40020010
24006fd0:	40020028 	.word	0x40020028
24006fd4:	40020040 	.word	0x40020040
24006fd8:	40020058 	.word	0x40020058
24006fdc:	40020070 	.word	0x40020070
24006fe0:	40020088 	.word	0x40020088
24006fe4:	400200a0 	.word	0x400200a0
24006fe8:	400200b8 	.word	0x400200b8
24006fec:	40020410 	.word	0x40020410
24006ff0:	40020428 	.word	0x40020428
24006ff4:	40020440 	.word	0x40020440
24006ff8:	40020458 	.word	0x40020458
24006ffc:	40020470 	.word	0x40020470
24007000:	40020488 	.word	0x40020488
24007004:	400204a0 	.word	0x400204a0
24007008:	400204b8 	.word	0x400204b8

2400700c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
2400700c:	b580      	push	{r7, lr}
2400700e:	b086      	sub	sp, #24
24007010:	af00      	add	r7, sp, #0
24007012:	60f8      	str	r0, [r7, #12]
24007014:	60b9      	str	r1, [r7, #8]
24007016:	607a      	str	r2, [r7, #4]
24007018:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2400701a:	2300      	movs	r3, #0
2400701c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2400701e:	68fb      	ldr	r3, [r7, #12]
24007020:	689b      	ldr	r3, [r3, #8]
24007022:	2b80      	cmp	r3, #128	; 0x80
24007024:	d105      	bne.n	24007032 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24007026:	68fb      	ldr	r3, [r7, #12]
24007028:	f44f 7280 	mov.w	r2, #256	; 0x100
2400702c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
2400702e:	2301      	movs	r3, #1
24007030:	e315      	b.n	2400765e <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24007032:	68fb      	ldr	r3, [r7, #12]
24007034:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24007038:	2b01      	cmp	r3, #1
2400703a:	d101      	bne.n	24007040 <HAL_DMAEx_MultiBufferStart_IT+0x34>
2400703c:	2302      	movs	r3, #2
2400703e:	e30e      	b.n	2400765e <HAL_DMAEx_MultiBufferStart_IT+0x652>
24007040:	68fb      	ldr	r3, [r7, #12]
24007042:	2201      	movs	r2, #1
24007044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24007048:	68fb      	ldr	r3, [r7, #12]
2400704a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2400704e:	b2db      	uxtb	r3, r3
24007050:	2b01      	cmp	r3, #1
24007052:	f040 82fd 	bne.w	24007650 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24007056:	68fb      	ldr	r3, [r7, #12]
24007058:	2202      	movs	r2, #2
2400705a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400705e:	68fb      	ldr	r3, [r7, #12]
24007060:	2200      	movs	r2, #0
24007062:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007064:	68fb      	ldr	r3, [r7, #12]
24007066:	681b      	ldr	r3, [r3, #0]
24007068:	4a82      	ldr	r2, [pc, #520]	; (24007274 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
2400706a:	4293      	cmp	r3, r2
2400706c:	d04a      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
2400706e:	68fb      	ldr	r3, [r7, #12]
24007070:	681b      	ldr	r3, [r3, #0]
24007072:	4a81      	ldr	r2, [pc, #516]	; (24007278 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
24007074:	4293      	cmp	r3, r2
24007076:	d045      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007078:	68fb      	ldr	r3, [r7, #12]
2400707a:	681b      	ldr	r3, [r3, #0]
2400707c:	4a7f      	ldr	r2, [pc, #508]	; (2400727c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
2400707e:	4293      	cmp	r3, r2
24007080:	d040      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007082:	68fb      	ldr	r3, [r7, #12]
24007084:	681b      	ldr	r3, [r3, #0]
24007086:	4a7e      	ldr	r2, [pc, #504]	; (24007280 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
24007088:	4293      	cmp	r3, r2
2400708a:	d03b      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
2400708c:	68fb      	ldr	r3, [r7, #12]
2400708e:	681b      	ldr	r3, [r3, #0]
24007090:	4a7c      	ldr	r2, [pc, #496]	; (24007284 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
24007092:	4293      	cmp	r3, r2
24007094:	d036      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007096:	68fb      	ldr	r3, [r7, #12]
24007098:	681b      	ldr	r3, [r3, #0]
2400709a:	4a7b      	ldr	r2, [pc, #492]	; (24007288 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
2400709c:	4293      	cmp	r3, r2
2400709e:	d031      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070a0:	68fb      	ldr	r3, [r7, #12]
240070a2:	681b      	ldr	r3, [r3, #0]
240070a4:	4a79      	ldr	r2, [pc, #484]	; (2400728c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
240070a6:	4293      	cmp	r3, r2
240070a8:	d02c      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070aa:	68fb      	ldr	r3, [r7, #12]
240070ac:	681b      	ldr	r3, [r3, #0]
240070ae:	4a78      	ldr	r2, [pc, #480]	; (24007290 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
240070b0:	4293      	cmp	r3, r2
240070b2:	d027      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070b4:	68fb      	ldr	r3, [r7, #12]
240070b6:	681b      	ldr	r3, [r3, #0]
240070b8:	4a76      	ldr	r2, [pc, #472]	; (24007294 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
240070ba:	4293      	cmp	r3, r2
240070bc:	d022      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070be:	68fb      	ldr	r3, [r7, #12]
240070c0:	681b      	ldr	r3, [r3, #0]
240070c2:	4a75      	ldr	r2, [pc, #468]	; (24007298 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
240070c4:	4293      	cmp	r3, r2
240070c6:	d01d      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070c8:	68fb      	ldr	r3, [r7, #12]
240070ca:	681b      	ldr	r3, [r3, #0]
240070cc:	4a73      	ldr	r2, [pc, #460]	; (2400729c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
240070ce:	4293      	cmp	r3, r2
240070d0:	d018      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070d2:	68fb      	ldr	r3, [r7, #12]
240070d4:	681b      	ldr	r3, [r3, #0]
240070d6:	4a72      	ldr	r2, [pc, #456]	; (240072a0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
240070d8:	4293      	cmp	r3, r2
240070da:	d013      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070dc:	68fb      	ldr	r3, [r7, #12]
240070de:	681b      	ldr	r3, [r3, #0]
240070e0:	4a70      	ldr	r2, [pc, #448]	; (240072a4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
240070e2:	4293      	cmp	r3, r2
240070e4:	d00e      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070e6:	68fb      	ldr	r3, [r7, #12]
240070e8:	681b      	ldr	r3, [r3, #0]
240070ea:	4a6f      	ldr	r2, [pc, #444]	; (240072a8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
240070ec:	4293      	cmp	r3, r2
240070ee:	d009      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070f0:	68fb      	ldr	r3, [r7, #12]
240070f2:	681b      	ldr	r3, [r3, #0]
240070f4:	4a6d      	ldr	r2, [pc, #436]	; (240072ac <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
240070f6:	4293      	cmp	r3, r2
240070f8:	d004      	beq.n	24007104 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
240070fa:	68fb      	ldr	r3, [r7, #12]
240070fc:	681b      	ldr	r3, [r3, #0]
240070fe:	4a6c      	ldr	r2, [pc, #432]	; (240072b0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
24007100:	4293      	cmp	r3, r2
24007102:	d101      	bne.n	24007108 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
24007104:	2301      	movs	r3, #1
24007106:	e000      	b.n	2400710a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
24007108:	2300      	movs	r3, #0
2400710a:	2b00      	cmp	r3, #0
2400710c:	d018      	beq.n	24007140 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
2400710e:	68fb      	ldr	r3, [r7, #12]
24007110:	681b      	ldr	r3, [r3, #0]
24007112:	681a      	ldr	r2, [r3, #0]
24007114:	68fb      	ldr	r3, [r7, #12]
24007116:	681b      	ldr	r3, [r3, #0]
24007118:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400711c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
2400711e:	68fb      	ldr	r3, [r7, #12]
24007120:	681b      	ldr	r3, [r3, #0]
24007122:	683a      	ldr	r2, [r7, #0]
24007124:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24007126:	68fb      	ldr	r3, [r7, #12]
24007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400712a:	3308      	adds	r3, #8
2400712c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400712e:	68fb      	ldr	r3, [r7, #12]
24007130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24007132:	f003 031f 	and.w	r3, r3, #31
24007136:	223f      	movs	r2, #63	; 0x3f
24007138:	409a      	lsls	r2, r3
2400713a:	693b      	ldr	r3, [r7, #16]
2400713c:	601a      	str	r2, [r3, #0]
2400713e:	e018      	b.n	24007172 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24007140:	68fb      	ldr	r3, [r7, #12]
24007142:	681b      	ldr	r3, [r3, #0]
24007144:	6819      	ldr	r1, [r3, #0]
24007146:	68fb      	ldr	r3, [r7, #12]
24007148:	681a      	ldr	r2, [r3, #0]
2400714a:	f248 0320 	movw	r3, #32800	; 0x8020
2400714e:	430b      	orrs	r3, r1
24007150:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
24007152:	68fb      	ldr	r3, [r7, #12]
24007154:	681b      	ldr	r3, [r3, #0]
24007156:	683a      	ldr	r2, [r7, #0]
24007158:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
2400715a:	68fb      	ldr	r3, [r7, #12]
2400715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400715e:	3304      	adds	r3, #4
24007160:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24007162:	68fb      	ldr	r3, [r7, #12]
24007164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24007166:	f003 031f 	and.w	r3, r3, #31
2400716a:	2201      	movs	r2, #1
2400716c:	409a      	lsls	r2, r3
2400716e:	693b      	ldr	r3, [r7, #16]
24007170:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
24007172:	6a3b      	ldr	r3, [r7, #32]
24007174:	687a      	ldr	r2, [r7, #4]
24007176:	68b9      	ldr	r1, [r7, #8]
24007178:	68f8      	ldr	r0, [r7, #12]
2400717a:	f000 fd51 	bl	24007c20 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400717e:	68fb      	ldr	r3, [r7, #12]
24007180:	681b      	ldr	r3, [r3, #0]
24007182:	4a3c      	ldr	r2, [pc, #240]	; (24007274 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
24007184:	4293      	cmp	r3, r2
24007186:	d072      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007188:	68fb      	ldr	r3, [r7, #12]
2400718a:	681b      	ldr	r3, [r3, #0]
2400718c:	4a3a      	ldr	r2, [pc, #232]	; (24007278 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
2400718e:	4293      	cmp	r3, r2
24007190:	d06d      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007192:	68fb      	ldr	r3, [r7, #12]
24007194:	681b      	ldr	r3, [r3, #0]
24007196:	4a39      	ldr	r2, [pc, #228]	; (2400727c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
24007198:	4293      	cmp	r3, r2
2400719a:	d068      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400719c:	68fb      	ldr	r3, [r7, #12]
2400719e:	681b      	ldr	r3, [r3, #0]
240071a0:	4a37      	ldr	r2, [pc, #220]	; (24007280 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
240071a2:	4293      	cmp	r3, r2
240071a4:	d063      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071a6:	68fb      	ldr	r3, [r7, #12]
240071a8:	681b      	ldr	r3, [r3, #0]
240071aa:	4a36      	ldr	r2, [pc, #216]	; (24007284 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
240071ac:	4293      	cmp	r3, r2
240071ae:	d05e      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071b0:	68fb      	ldr	r3, [r7, #12]
240071b2:	681b      	ldr	r3, [r3, #0]
240071b4:	4a34      	ldr	r2, [pc, #208]	; (24007288 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
240071b6:	4293      	cmp	r3, r2
240071b8:	d059      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071ba:	68fb      	ldr	r3, [r7, #12]
240071bc:	681b      	ldr	r3, [r3, #0]
240071be:	4a33      	ldr	r2, [pc, #204]	; (2400728c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
240071c0:	4293      	cmp	r3, r2
240071c2:	d054      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071c4:	68fb      	ldr	r3, [r7, #12]
240071c6:	681b      	ldr	r3, [r3, #0]
240071c8:	4a31      	ldr	r2, [pc, #196]	; (24007290 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
240071ca:	4293      	cmp	r3, r2
240071cc:	d04f      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071ce:	68fb      	ldr	r3, [r7, #12]
240071d0:	681b      	ldr	r3, [r3, #0]
240071d2:	4a30      	ldr	r2, [pc, #192]	; (24007294 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
240071d4:	4293      	cmp	r3, r2
240071d6:	d04a      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071d8:	68fb      	ldr	r3, [r7, #12]
240071da:	681b      	ldr	r3, [r3, #0]
240071dc:	4a2e      	ldr	r2, [pc, #184]	; (24007298 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
240071de:	4293      	cmp	r3, r2
240071e0:	d045      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071e2:	68fb      	ldr	r3, [r7, #12]
240071e4:	681b      	ldr	r3, [r3, #0]
240071e6:	4a2d      	ldr	r2, [pc, #180]	; (2400729c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
240071e8:	4293      	cmp	r3, r2
240071ea:	d040      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071ec:	68fb      	ldr	r3, [r7, #12]
240071ee:	681b      	ldr	r3, [r3, #0]
240071f0:	4a2b      	ldr	r2, [pc, #172]	; (240072a0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
240071f2:	4293      	cmp	r3, r2
240071f4:	d03b      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
240071f6:	68fb      	ldr	r3, [r7, #12]
240071f8:	681b      	ldr	r3, [r3, #0]
240071fa:	4a2a      	ldr	r2, [pc, #168]	; (240072a4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
240071fc:	4293      	cmp	r3, r2
240071fe:	d036      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007200:	68fb      	ldr	r3, [r7, #12]
24007202:	681b      	ldr	r3, [r3, #0]
24007204:	4a28      	ldr	r2, [pc, #160]	; (240072a8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
24007206:	4293      	cmp	r3, r2
24007208:	d031      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400720a:	68fb      	ldr	r3, [r7, #12]
2400720c:	681b      	ldr	r3, [r3, #0]
2400720e:	4a27      	ldr	r2, [pc, #156]	; (240072ac <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
24007210:	4293      	cmp	r3, r2
24007212:	d02c      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007214:	68fb      	ldr	r3, [r7, #12]
24007216:	681b      	ldr	r3, [r3, #0]
24007218:	4a25      	ldr	r2, [pc, #148]	; (240072b0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
2400721a:	4293      	cmp	r3, r2
2400721c:	d027      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400721e:	68fb      	ldr	r3, [r7, #12]
24007220:	681b      	ldr	r3, [r3, #0]
24007222:	4a24      	ldr	r2, [pc, #144]	; (240072b4 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
24007224:	4293      	cmp	r3, r2
24007226:	d022      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007228:	68fb      	ldr	r3, [r7, #12]
2400722a:	681b      	ldr	r3, [r3, #0]
2400722c:	4a22      	ldr	r2, [pc, #136]	; (240072b8 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
2400722e:	4293      	cmp	r3, r2
24007230:	d01d      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007232:	68fb      	ldr	r3, [r7, #12]
24007234:	681b      	ldr	r3, [r3, #0]
24007236:	4a21      	ldr	r2, [pc, #132]	; (240072bc <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
24007238:	4293      	cmp	r3, r2
2400723a:	d018      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400723c:	68fb      	ldr	r3, [r7, #12]
2400723e:	681b      	ldr	r3, [r3, #0]
24007240:	4a1f      	ldr	r2, [pc, #124]	; (240072c0 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
24007242:	4293      	cmp	r3, r2
24007244:	d013      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007246:	68fb      	ldr	r3, [r7, #12]
24007248:	681b      	ldr	r3, [r3, #0]
2400724a:	4a1e      	ldr	r2, [pc, #120]	; (240072c4 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
2400724c:	4293      	cmp	r3, r2
2400724e:	d00e      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007250:	68fb      	ldr	r3, [r7, #12]
24007252:	681b      	ldr	r3, [r3, #0]
24007254:	4a1c      	ldr	r2, [pc, #112]	; (240072c8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
24007256:	4293      	cmp	r3, r2
24007258:	d009      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
2400725a:	68fb      	ldr	r3, [r7, #12]
2400725c:	681b      	ldr	r3, [r3, #0]
2400725e:	4a1b      	ldr	r2, [pc, #108]	; (240072cc <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
24007260:	4293      	cmp	r3, r2
24007262:	d004      	beq.n	2400726e <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007264:	68fb      	ldr	r3, [r7, #12]
24007266:	681b      	ldr	r3, [r3, #0]
24007268:	4a19      	ldr	r2, [pc, #100]	; (240072d0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
2400726a:	4293      	cmp	r3, r2
2400726c:	d132      	bne.n	240072d4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
2400726e:	2301      	movs	r3, #1
24007270:	e031      	b.n	240072d6 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
24007272:	bf00      	nop
24007274:	40020010 	.word	0x40020010
24007278:	40020028 	.word	0x40020028
2400727c:	40020040 	.word	0x40020040
24007280:	40020058 	.word	0x40020058
24007284:	40020070 	.word	0x40020070
24007288:	40020088 	.word	0x40020088
2400728c:	400200a0 	.word	0x400200a0
24007290:	400200b8 	.word	0x400200b8
24007294:	40020410 	.word	0x40020410
24007298:	40020428 	.word	0x40020428
2400729c:	40020440 	.word	0x40020440
240072a0:	40020458 	.word	0x40020458
240072a4:	40020470 	.word	0x40020470
240072a8:	40020488 	.word	0x40020488
240072ac:	400204a0 	.word	0x400204a0
240072b0:	400204b8 	.word	0x400204b8
240072b4:	58025408 	.word	0x58025408
240072b8:	5802541c 	.word	0x5802541c
240072bc:	58025430 	.word	0x58025430
240072c0:	58025444 	.word	0x58025444
240072c4:	58025458 	.word	0x58025458
240072c8:	5802546c 	.word	0x5802546c
240072cc:	58025480 	.word	0x58025480
240072d0:	58025494 	.word	0x58025494
240072d4:	2300      	movs	r3, #0
240072d6:	2b00      	cmp	r3, #0
240072d8:	d00d      	beq.n	240072f6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240072da:	68fb      	ldr	r3, [r7, #12]
240072dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240072de:	68fa      	ldr	r2, [r7, #12]
240072e0:	6e92      	ldr	r2, [r2, #104]	; 0x68
240072e2:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
240072e4:	68fb      	ldr	r3, [r7, #12]
240072e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240072e8:	2b00      	cmp	r3, #0
240072ea:	d004      	beq.n	240072f6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240072ec:	68fb      	ldr	r3, [r7, #12]
240072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240072f0:	68fa      	ldr	r2, [r7, #12]
240072f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
240072f4:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240072f6:	68fb      	ldr	r3, [r7, #12]
240072f8:	681b      	ldr	r3, [r3, #0]
240072fa:	4a3b      	ldr	r2, [pc, #236]	; (240073e8 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
240072fc:	4293      	cmp	r3, r2
240072fe:	d04a      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007300:	68fb      	ldr	r3, [r7, #12]
24007302:	681b      	ldr	r3, [r3, #0]
24007304:	4a39      	ldr	r2, [pc, #228]	; (240073ec <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
24007306:	4293      	cmp	r3, r2
24007308:	d045      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400730a:	68fb      	ldr	r3, [r7, #12]
2400730c:	681b      	ldr	r3, [r3, #0]
2400730e:	4a38      	ldr	r2, [pc, #224]	; (240073f0 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
24007310:	4293      	cmp	r3, r2
24007312:	d040      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007314:	68fb      	ldr	r3, [r7, #12]
24007316:	681b      	ldr	r3, [r3, #0]
24007318:	4a36      	ldr	r2, [pc, #216]	; (240073f4 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
2400731a:	4293      	cmp	r3, r2
2400731c:	d03b      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400731e:	68fb      	ldr	r3, [r7, #12]
24007320:	681b      	ldr	r3, [r3, #0]
24007322:	4a35      	ldr	r2, [pc, #212]	; (240073f8 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
24007324:	4293      	cmp	r3, r2
24007326:	d036      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007328:	68fb      	ldr	r3, [r7, #12]
2400732a:	681b      	ldr	r3, [r3, #0]
2400732c:	4a33      	ldr	r2, [pc, #204]	; (240073fc <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
2400732e:	4293      	cmp	r3, r2
24007330:	d031      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007332:	68fb      	ldr	r3, [r7, #12]
24007334:	681b      	ldr	r3, [r3, #0]
24007336:	4a32      	ldr	r2, [pc, #200]	; (24007400 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
24007338:	4293      	cmp	r3, r2
2400733a:	d02c      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400733c:	68fb      	ldr	r3, [r7, #12]
2400733e:	681b      	ldr	r3, [r3, #0]
24007340:	4a30      	ldr	r2, [pc, #192]	; (24007404 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
24007342:	4293      	cmp	r3, r2
24007344:	d027      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007346:	68fb      	ldr	r3, [r7, #12]
24007348:	681b      	ldr	r3, [r3, #0]
2400734a:	4a2f      	ldr	r2, [pc, #188]	; (24007408 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
2400734c:	4293      	cmp	r3, r2
2400734e:	d022      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007350:	68fb      	ldr	r3, [r7, #12]
24007352:	681b      	ldr	r3, [r3, #0]
24007354:	4a2d      	ldr	r2, [pc, #180]	; (2400740c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
24007356:	4293      	cmp	r3, r2
24007358:	d01d      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400735a:	68fb      	ldr	r3, [r7, #12]
2400735c:	681b      	ldr	r3, [r3, #0]
2400735e:	4a2c      	ldr	r2, [pc, #176]	; (24007410 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
24007360:	4293      	cmp	r3, r2
24007362:	d018      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007364:	68fb      	ldr	r3, [r7, #12]
24007366:	681b      	ldr	r3, [r3, #0]
24007368:	4a2a      	ldr	r2, [pc, #168]	; (24007414 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
2400736a:	4293      	cmp	r3, r2
2400736c:	d013      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400736e:	68fb      	ldr	r3, [r7, #12]
24007370:	681b      	ldr	r3, [r3, #0]
24007372:	4a29      	ldr	r2, [pc, #164]	; (24007418 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
24007374:	4293      	cmp	r3, r2
24007376:	d00e      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007378:	68fb      	ldr	r3, [r7, #12]
2400737a:	681b      	ldr	r3, [r3, #0]
2400737c:	4a27      	ldr	r2, [pc, #156]	; (2400741c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
2400737e:	4293      	cmp	r3, r2
24007380:	d009      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007382:	68fb      	ldr	r3, [r7, #12]
24007384:	681b      	ldr	r3, [r3, #0]
24007386:	4a26      	ldr	r2, [pc, #152]	; (24007420 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
24007388:	4293      	cmp	r3, r2
2400738a:	d004      	beq.n	24007396 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
2400738c:	68fb      	ldr	r3, [r7, #12]
2400738e:	681b      	ldr	r3, [r3, #0]
24007390:	4a24      	ldr	r2, [pc, #144]	; (24007424 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
24007392:	4293      	cmp	r3, r2
24007394:	d101      	bne.n	2400739a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
24007396:	2301      	movs	r3, #1
24007398:	e000      	b.n	2400739c <HAL_DMAEx_MultiBufferStart_IT+0x390>
2400739a:	2300      	movs	r3, #0
2400739c:	2b00      	cmp	r3, #0
2400739e:	d043      	beq.n	24007428 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
240073a0:	68fb      	ldr	r3, [r7, #12]
240073a2:	681b      	ldr	r3, [r3, #0]
240073a4:	681b      	ldr	r3, [r3, #0]
240073a6:	f023 021e 	bic.w	r2, r3, #30
240073aa:	68fb      	ldr	r3, [r7, #12]
240073ac:	681b      	ldr	r3, [r3, #0]
240073ae:	f042 0216 	orr.w	r2, r2, #22
240073b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
240073b4:	68fb      	ldr	r3, [r7, #12]
240073b6:	681b      	ldr	r3, [r3, #0]
240073b8:	695a      	ldr	r2, [r3, #20]
240073ba:	68fb      	ldr	r3, [r7, #12]
240073bc:	681b      	ldr	r3, [r3, #0]
240073be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
240073c2:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240073c4:	68fb      	ldr	r3, [r7, #12]
240073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240073c8:	2b00      	cmp	r3, #0
240073ca:	d103      	bne.n	240073d4 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
240073cc:	68fb      	ldr	r3, [r7, #12]
240073ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240073d0:	2b00      	cmp	r3, #0
240073d2:	d043      	beq.n	2400745c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
240073d4:	68fb      	ldr	r3, [r7, #12]
240073d6:	681b      	ldr	r3, [r3, #0]
240073d8:	681a      	ldr	r2, [r3, #0]
240073da:	68fb      	ldr	r3, [r7, #12]
240073dc:	681b      	ldr	r3, [r3, #0]
240073de:	f042 0208 	orr.w	r2, r2, #8
240073e2:	601a      	str	r2, [r3, #0]
240073e4:	e03a      	b.n	2400745c <HAL_DMAEx_MultiBufferStart_IT+0x450>
240073e6:	bf00      	nop
240073e8:	40020010 	.word	0x40020010
240073ec:	40020028 	.word	0x40020028
240073f0:	40020040 	.word	0x40020040
240073f4:	40020058 	.word	0x40020058
240073f8:	40020070 	.word	0x40020070
240073fc:	40020088 	.word	0x40020088
24007400:	400200a0 	.word	0x400200a0
24007404:	400200b8 	.word	0x400200b8
24007408:	40020410 	.word	0x40020410
2400740c:	40020428 	.word	0x40020428
24007410:	40020440 	.word	0x40020440
24007414:	40020458 	.word	0x40020458
24007418:	40020470 	.word	0x40020470
2400741c:	40020488 	.word	0x40020488
24007420:	400204a0 	.word	0x400204a0
24007424:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24007428:	68fb      	ldr	r3, [r7, #12]
2400742a:	681b      	ldr	r3, [r3, #0]
2400742c:	681b      	ldr	r3, [r3, #0]
2400742e:	f023 020e 	bic.w	r2, r3, #14
24007432:	68fb      	ldr	r3, [r7, #12]
24007434:	681b      	ldr	r3, [r3, #0]
24007436:	f042 020a 	orr.w	r2, r2, #10
2400743a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2400743c:	68fb      	ldr	r3, [r7, #12]
2400743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24007440:	2b00      	cmp	r3, #0
24007442:	d103      	bne.n	2400744c <HAL_DMAEx_MultiBufferStart_IT+0x440>
24007444:	68fb      	ldr	r3, [r7, #12]
24007446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24007448:	2b00      	cmp	r3, #0
2400744a:	d007      	beq.n	2400745c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
2400744c:	68fb      	ldr	r3, [r7, #12]
2400744e:	681b      	ldr	r3, [r3, #0]
24007450:	681a      	ldr	r2, [r3, #0]
24007452:	68fb      	ldr	r3, [r7, #12]
24007454:	681b      	ldr	r3, [r3, #0]
24007456:	f042 0204 	orr.w	r2, r2, #4
2400745a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400745c:	68fb      	ldr	r3, [r7, #12]
2400745e:	681b      	ldr	r3, [r3, #0]
24007460:	4a81      	ldr	r2, [pc, #516]	; (24007668 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
24007462:	4293      	cmp	r3, r2
24007464:	d072      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007466:	68fb      	ldr	r3, [r7, #12]
24007468:	681b      	ldr	r3, [r3, #0]
2400746a:	4a80      	ldr	r2, [pc, #512]	; (2400766c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
2400746c:	4293      	cmp	r3, r2
2400746e:	d06d      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007470:	68fb      	ldr	r3, [r7, #12]
24007472:	681b      	ldr	r3, [r3, #0]
24007474:	4a7e      	ldr	r2, [pc, #504]	; (24007670 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
24007476:	4293      	cmp	r3, r2
24007478:	d068      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400747a:	68fb      	ldr	r3, [r7, #12]
2400747c:	681b      	ldr	r3, [r3, #0]
2400747e:	4a7d      	ldr	r2, [pc, #500]	; (24007674 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
24007480:	4293      	cmp	r3, r2
24007482:	d063      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007484:	68fb      	ldr	r3, [r7, #12]
24007486:	681b      	ldr	r3, [r3, #0]
24007488:	4a7b      	ldr	r2, [pc, #492]	; (24007678 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
2400748a:	4293      	cmp	r3, r2
2400748c:	d05e      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400748e:	68fb      	ldr	r3, [r7, #12]
24007490:	681b      	ldr	r3, [r3, #0]
24007492:	4a7a      	ldr	r2, [pc, #488]	; (2400767c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
24007494:	4293      	cmp	r3, r2
24007496:	d059      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007498:	68fb      	ldr	r3, [r7, #12]
2400749a:	681b      	ldr	r3, [r3, #0]
2400749c:	4a78      	ldr	r2, [pc, #480]	; (24007680 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
2400749e:	4293      	cmp	r3, r2
240074a0:	d054      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074a2:	68fb      	ldr	r3, [r7, #12]
240074a4:	681b      	ldr	r3, [r3, #0]
240074a6:	4a77      	ldr	r2, [pc, #476]	; (24007684 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
240074a8:	4293      	cmp	r3, r2
240074aa:	d04f      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074ac:	68fb      	ldr	r3, [r7, #12]
240074ae:	681b      	ldr	r3, [r3, #0]
240074b0:	4a75      	ldr	r2, [pc, #468]	; (24007688 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
240074b2:	4293      	cmp	r3, r2
240074b4:	d04a      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074b6:	68fb      	ldr	r3, [r7, #12]
240074b8:	681b      	ldr	r3, [r3, #0]
240074ba:	4a74      	ldr	r2, [pc, #464]	; (2400768c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
240074bc:	4293      	cmp	r3, r2
240074be:	d045      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074c0:	68fb      	ldr	r3, [r7, #12]
240074c2:	681b      	ldr	r3, [r3, #0]
240074c4:	4a72      	ldr	r2, [pc, #456]	; (24007690 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
240074c6:	4293      	cmp	r3, r2
240074c8:	d040      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074ca:	68fb      	ldr	r3, [r7, #12]
240074cc:	681b      	ldr	r3, [r3, #0]
240074ce:	4a71      	ldr	r2, [pc, #452]	; (24007694 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
240074d0:	4293      	cmp	r3, r2
240074d2:	d03b      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074d4:	68fb      	ldr	r3, [r7, #12]
240074d6:	681b      	ldr	r3, [r3, #0]
240074d8:	4a6f      	ldr	r2, [pc, #444]	; (24007698 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
240074da:	4293      	cmp	r3, r2
240074dc:	d036      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074de:	68fb      	ldr	r3, [r7, #12]
240074e0:	681b      	ldr	r3, [r3, #0]
240074e2:	4a6e      	ldr	r2, [pc, #440]	; (2400769c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
240074e4:	4293      	cmp	r3, r2
240074e6:	d031      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074e8:	68fb      	ldr	r3, [r7, #12]
240074ea:	681b      	ldr	r3, [r3, #0]
240074ec:	4a6c      	ldr	r2, [pc, #432]	; (240076a0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
240074ee:	4293      	cmp	r3, r2
240074f0:	d02c      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074f2:	68fb      	ldr	r3, [r7, #12]
240074f4:	681b      	ldr	r3, [r3, #0]
240074f6:	4a6b      	ldr	r2, [pc, #428]	; (240076a4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
240074f8:	4293      	cmp	r3, r2
240074fa:	d027      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
240074fc:	68fb      	ldr	r3, [r7, #12]
240074fe:	681b      	ldr	r3, [r3, #0]
24007500:	4a69      	ldr	r2, [pc, #420]	; (240076a8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
24007502:	4293      	cmp	r3, r2
24007504:	d022      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007506:	68fb      	ldr	r3, [r7, #12]
24007508:	681b      	ldr	r3, [r3, #0]
2400750a:	4a68      	ldr	r2, [pc, #416]	; (240076ac <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
2400750c:	4293      	cmp	r3, r2
2400750e:	d01d      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007510:	68fb      	ldr	r3, [r7, #12]
24007512:	681b      	ldr	r3, [r3, #0]
24007514:	4a66      	ldr	r2, [pc, #408]	; (240076b0 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
24007516:	4293      	cmp	r3, r2
24007518:	d018      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400751a:	68fb      	ldr	r3, [r7, #12]
2400751c:	681b      	ldr	r3, [r3, #0]
2400751e:	4a65      	ldr	r2, [pc, #404]	; (240076b4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
24007520:	4293      	cmp	r3, r2
24007522:	d013      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007524:	68fb      	ldr	r3, [r7, #12]
24007526:	681b      	ldr	r3, [r3, #0]
24007528:	4a63      	ldr	r2, [pc, #396]	; (240076b8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
2400752a:	4293      	cmp	r3, r2
2400752c:	d00e      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400752e:	68fb      	ldr	r3, [r7, #12]
24007530:	681b      	ldr	r3, [r3, #0]
24007532:	4a62      	ldr	r2, [pc, #392]	; (240076bc <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
24007534:	4293      	cmp	r3, r2
24007536:	d009      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007538:	68fb      	ldr	r3, [r7, #12]
2400753a:	681b      	ldr	r3, [r3, #0]
2400753c:	4a60      	ldr	r2, [pc, #384]	; (240076c0 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
2400753e:	4293      	cmp	r3, r2
24007540:	d004      	beq.n	2400754c <HAL_DMAEx_MultiBufferStart_IT+0x540>
24007542:	68fb      	ldr	r3, [r7, #12]
24007544:	681b      	ldr	r3, [r3, #0]
24007546:	4a5f      	ldr	r2, [pc, #380]	; (240076c4 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
24007548:	4293      	cmp	r3, r2
2400754a:	d101      	bne.n	24007550 <HAL_DMAEx_MultiBufferStart_IT+0x544>
2400754c:	2301      	movs	r3, #1
2400754e:	e000      	b.n	24007552 <HAL_DMAEx_MultiBufferStart_IT+0x546>
24007550:	2300      	movs	r3, #0
24007552:	2b00      	cmp	r3, #0
24007554:	d01a      	beq.n	2400758c <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24007556:	68fb      	ldr	r3, [r7, #12]
24007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400755a:	681b      	ldr	r3, [r3, #0]
2400755c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24007560:	2b00      	cmp	r3, #0
24007562:	d007      	beq.n	24007574 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24007564:	68fb      	ldr	r3, [r7, #12]
24007566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007568:	681a      	ldr	r2, [r3, #0]
2400756a:	68fb      	ldr	r3, [r7, #12]
2400756c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400756e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24007572:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
24007574:	68fb      	ldr	r3, [r7, #12]
24007576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007578:	2b00      	cmp	r3, #0
2400757a:	d007      	beq.n	2400758c <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
2400757c:	68fb      	ldr	r3, [r7, #12]
2400757e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007580:	681a      	ldr	r2, [r3, #0]
24007582:	68fb      	ldr	r3, [r7, #12]
24007584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400758a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
2400758c:	68fb      	ldr	r3, [r7, #12]
2400758e:	681b      	ldr	r3, [r3, #0]
24007590:	4a35      	ldr	r2, [pc, #212]	; (24007668 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
24007592:	4293      	cmp	r3, r2
24007594:	d04a      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007596:	68fb      	ldr	r3, [r7, #12]
24007598:	681b      	ldr	r3, [r3, #0]
2400759a:	4a34      	ldr	r2, [pc, #208]	; (2400766c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
2400759c:	4293      	cmp	r3, r2
2400759e:	d045      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075a0:	68fb      	ldr	r3, [r7, #12]
240075a2:	681b      	ldr	r3, [r3, #0]
240075a4:	4a32      	ldr	r2, [pc, #200]	; (24007670 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
240075a6:	4293      	cmp	r3, r2
240075a8:	d040      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075aa:	68fb      	ldr	r3, [r7, #12]
240075ac:	681b      	ldr	r3, [r3, #0]
240075ae:	4a31      	ldr	r2, [pc, #196]	; (24007674 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
240075b0:	4293      	cmp	r3, r2
240075b2:	d03b      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075b4:	68fb      	ldr	r3, [r7, #12]
240075b6:	681b      	ldr	r3, [r3, #0]
240075b8:	4a2f      	ldr	r2, [pc, #188]	; (24007678 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
240075ba:	4293      	cmp	r3, r2
240075bc:	d036      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075be:	68fb      	ldr	r3, [r7, #12]
240075c0:	681b      	ldr	r3, [r3, #0]
240075c2:	4a2e      	ldr	r2, [pc, #184]	; (2400767c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
240075c4:	4293      	cmp	r3, r2
240075c6:	d031      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075c8:	68fb      	ldr	r3, [r7, #12]
240075ca:	681b      	ldr	r3, [r3, #0]
240075cc:	4a2c      	ldr	r2, [pc, #176]	; (24007680 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
240075ce:	4293      	cmp	r3, r2
240075d0:	d02c      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075d2:	68fb      	ldr	r3, [r7, #12]
240075d4:	681b      	ldr	r3, [r3, #0]
240075d6:	4a2b      	ldr	r2, [pc, #172]	; (24007684 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
240075d8:	4293      	cmp	r3, r2
240075da:	d027      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075dc:	68fb      	ldr	r3, [r7, #12]
240075de:	681b      	ldr	r3, [r3, #0]
240075e0:	4a29      	ldr	r2, [pc, #164]	; (24007688 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
240075e2:	4293      	cmp	r3, r2
240075e4:	d022      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075e6:	68fb      	ldr	r3, [r7, #12]
240075e8:	681b      	ldr	r3, [r3, #0]
240075ea:	4a28      	ldr	r2, [pc, #160]	; (2400768c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
240075ec:	4293      	cmp	r3, r2
240075ee:	d01d      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075f0:	68fb      	ldr	r3, [r7, #12]
240075f2:	681b      	ldr	r3, [r3, #0]
240075f4:	4a26      	ldr	r2, [pc, #152]	; (24007690 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
240075f6:	4293      	cmp	r3, r2
240075f8:	d018      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
240075fa:	68fb      	ldr	r3, [r7, #12]
240075fc:	681b      	ldr	r3, [r3, #0]
240075fe:	4a25      	ldr	r2, [pc, #148]	; (24007694 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
24007600:	4293      	cmp	r3, r2
24007602:	d013      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007604:	68fb      	ldr	r3, [r7, #12]
24007606:	681b      	ldr	r3, [r3, #0]
24007608:	4a23      	ldr	r2, [pc, #140]	; (24007698 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
2400760a:	4293      	cmp	r3, r2
2400760c:	d00e      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400760e:	68fb      	ldr	r3, [r7, #12]
24007610:	681b      	ldr	r3, [r3, #0]
24007612:	4a22      	ldr	r2, [pc, #136]	; (2400769c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
24007614:	4293      	cmp	r3, r2
24007616:	d009      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007618:	68fb      	ldr	r3, [r7, #12]
2400761a:	681b      	ldr	r3, [r3, #0]
2400761c:	4a20      	ldr	r2, [pc, #128]	; (240076a0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
2400761e:	4293      	cmp	r3, r2
24007620:	d004      	beq.n	2400762c <HAL_DMAEx_MultiBufferStart_IT+0x620>
24007622:	68fb      	ldr	r3, [r7, #12]
24007624:	681b      	ldr	r3, [r3, #0]
24007626:	4a1f      	ldr	r2, [pc, #124]	; (240076a4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
24007628:	4293      	cmp	r3, r2
2400762a:	d108      	bne.n	2400763e <HAL_DMAEx_MultiBufferStart_IT+0x632>
2400762c:	68fb      	ldr	r3, [r7, #12]
2400762e:	681b      	ldr	r3, [r3, #0]
24007630:	681a      	ldr	r2, [r3, #0]
24007632:	68fb      	ldr	r3, [r7, #12]
24007634:	681b      	ldr	r3, [r3, #0]
24007636:	f042 0201 	orr.w	r2, r2, #1
2400763a:	601a      	str	r2, [r3, #0]
2400763c:	e00e      	b.n	2400765c <HAL_DMAEx_MultiBufferStart_IT+0x650>
2400763e:	68fb      	ldr	r3, [r7, #12]
24007640:	681b      	ldr	r3, [r3, #0]
24007642:	681a      	ldr	r2, [r3, #0]
24007644:	68fb      	ldr	r3, [r7, #12]
24007646:	681b      	ldr	r3, [r3, #0]
24007648:	f042 0201 	orr.w	r2, r2, #1
2400764c:	601a      	str	r2, [r3, #0]
2400764e:	e005      	b.n	2400765c <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007650:	68fb      	ldr	r3, [r7, #12]
24007652:	f44f 6200 	mov.w	r2, #2048	; 0x800
24007656:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
24007658:	2301      	movs	r3, #1
2400765a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
2400765c:	7dfb      	ldrb	r3, [r7, #23]
}
2400765e:	4618      	mov	r0, r3
24007660:	3718      	adds	r7, #24
24007662:	46bd      	mov	sp, r7
24007664:	bd80      	pop	{r7, pc}
24007666:	bf00      	nop
24007668:	40020010 	.word	0x40020010
2400766c:	40020028 	.word	0x40020028
24007670:	40020040 	.word	0x40020040
24007674:	40020058 	.word	0x40020058
24007678:	40020070 	.word	0x40020070
2400767c:	40020088 	.word	0x40020088
24007680:	400200a0 	.word	0x400200a0
24007684:	400200b8 	.word	0x400200b8
24007688:	40020410 	.word	0x40020410
2400768c:	40020428 	.word	0x40020428
24007690:	40020440 	.word	0x40020440
24007694:	40020458 	.word	0x40020458
24007698:	40020470 	.word	0x40020470
2400769c:	40020488 	.word	0x40020488
240076a0:	400204a0 	.word	0x400204a0
240076a4:	400204b8 	.word	0x400204b8
240076a8:	58025408 	.word	0x58025408
240076ac:	5802541c 	.word	0x5802541c
240076b0:	58025430 	.word	0x58025430
240076b4:	58025444 	.word	0x58025444
240076b8:	58025458 	.word	0x58025458
240076bc:	5802546c 	.word	0x5802546c
240076c0:	58025480 	.word	0x58025480
240076c4:	58025494 	.word	0x58025494

240076c8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
240076c8:	b480      	push	{r7}
240076ca:	b085      	sub	sp, #20
240076cc:	af00      	add	r7, sp, #0
240076ce:	60f8      	str	r0, [r7, #12]
240076d0:	60b9      	str	r1, [r7, #8]
240076d2:	4613      	mov	r3, r2
240076d4:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240076d6:	68fb      	ldr	r3, [r7, #12]
240076d8:	681b      	ldr	r3, [r3, #0]
240076da:	4a39      	ldr	r2, [pc, #228]	; (240077c0 <HAL_DMAEx_ChangeMemory+0xf8>)
240076dc:	4293      	cmp	r3, r2
240076de:	d04a      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
240076e0:	68fb      	ldr	r3, [r7, #12]
240076e2:	681b      	ldr	r3, [r3, #0]
240076e4:	4a37      	ldr	r2, [pc, #220]	; (240077c4 <HAL_DMAEx_ChangeMemory+0xfc>)
240076e6:	4293      	cmp	r3, r2
240076e8:	d045      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
240076ea:	68fb      	ldr	r3, [r7, #12]
240076ec:	681b      	ldr	r3, [r3, #0]
240076ee:	4a36      	ldr	r2, [pc, #216]	; (240077c8 <HAL_DMAEx_ChangeMemory+0x100>)
240076f0:	4293      	cmp	r3, r2
240076f2:	d040      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
240076f4:	68fb      	ldr	r3, [r7, #12]
240076f6:	681b      	ldr	r3, [r3, #0]
240076f8:	4a34      	ldr	r2, [pc, #208]	; (240077cc <HAL_DMAEx_ChangeMemory+0x104>)
240076fa:	4293      	cmp	r3, r2
240076fc:	d03b      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
240076fe:	68fb      	ldr	r3, [r7, #12]
24007700:	681b      	ldr	r3, [r3, #0]
24007702:	4a33      	ldr	r2, [pc, #204]	; (240077d0 <HAL_DMAEx_ChangeMemory+0x108>)
24007704:	4293      	cmp	r3, r2
24007706:	d036      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
24007708:	68fb      	ldr	r3, [r7, #12]
2400770a:	681b      	ldr	r3, [r3, #0]
2400770c:	4a31      	ldr	r2, [pc, #196]	; (240077d4 <HAL_DMAEx_ChangeMemory+0x10c>)
2400770e:	4293      	cmp	r3, r2
24007710:	d031      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
24007712:	68fb      	ldr	r3, [r7, #12]
24007714:	681b      	ldr	r3, [r3, #0]
24007716:	4a30      	ldr	r2, [pc, #192]	; (240077d8 <HAL_DMAEx_ChangeMemory+0x110>)
24007718:	4293      	cmp	r3, r2
2400771a:	d02c      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
2400771c:	68fb      	ldr	r3, [r7, #12]
2400771e:	681b      	ldr	r3, [r3, #0]
24007720:	4a2e      	ldr	r2, [pc, #184]	; (240077dc <HAL_DMAEx_ChangeMemory+0x114>)
24007722:	4293      	cmp	r3, r2
24007724:	d027      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
24007726:	68fb      	ldr	r3, [r7, #12]
24007728:	681b      	ldr	r3, [r3, #0]
2400772a:	4a2d      	ldr	r2, [pc, #180]	; (240077e0 <HAL_DMAEx_ChangeMemory+0x118>)
2400772c:	4293      	cmp	r3, r2
2400772e:	d022      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
24007730:	68fb      	ldr	r3, [r7, #12]
24007732:	681b      	ldr	r3, [r3, #0]
24007734:	4a2b      	ldr	r2, [pc, #172]	; (240077e4 <HAL_DMAEx_ChangeMemory+0x11c>)
24007736:	4293      	cmp	r3, r2
24007738:	d01d      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
2400773a:	68fb      	ldr	r3, [r7, #12]
2400773c:	681b      	ldr	r3, [r3, #0]
2400773e:	4a2a      	ldr	r2, [pc, #168]	; (240077e8 <HAL_DMAEx_ChangeMemory+0x120>)
24007740:	4293      	cmp	r3, r2
24007742:	d018      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
24007744:	68fb      	ldr	r3, [r7, #12]
24007746:	681b      	ldr	r3, [r3, #0]
24007748:	4a28      	ldr	r2, [pc, #160]	; (240077ec <HAL_DMAEx_ChangeMemory+0x124>)
2400774a:	4293      	cmp	r3, r2
2400774c:	d013      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
2400774e:	68fb      	ldr	r3, [r7, #12]
24007750:	681b      	ldr	r3, [r3, #0]
24007752:	4a27      	ldr	r2, [pc, #156]	; (240077f0 <HAL_DMAEx_ChangeMemory+0x128>)
24007754:	4293      	cmp	r3, r2
24007756:	d00e      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
24007758:	68fb      	ldr	r3, [r7, #12]
2400775a:	681b      	ldr	r3, [r3, #0]
2400775c:	4a25      	ldr	r2, [pc, #148]	; (240077f4 <HAL_DMAEx_ChangeMemory+0x12c>)
2400775e:	4293      	cmp	r3, r2
24007760:	d009      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
24007762:	68fb      	ldr	r3, [r7, #12]
24007764:	681b      	ldr	r3, [r3, #0]
24007766:	4a24      	ldr	r2, [pc, #144]	; (240077f8 <HAL_DMAEx_ChangeMemory+0x130>)
24007768:	4293      	cmp	r3, r2
2400776a:	d004      	beq.n	24007776 <HAL_DMAEx_ChangeMemory+0xae>
2400776c:	68fb      	ldr	r3, [r7, #12]
2400776e:	681b      	ldr	r3, [r3, #0]
24007770:	4a22      	ldr	r2, [pc, #136]	; (240077fc <HAL_DMAEx_ChangeMemory+0x134>)
24007772:	4293      	cmp	r3, r2
24007774:	d101      	bne.n	2400777a <HAL_DMAEx_ChangeMemory+0xb2>
24007776:	2301      	movs	r3, #1
24007778:	e000      	b.n	2400777c <HAL_DMAEx_ChangeMemory+0xb4>
2400777a:	2300      	movs	r3, #0
2400777c:	2b00      	cmp	r3, #0
2400777e:	d00c      	beq.n	2400779a <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
24007780:	79fb      	ldrb	r3, [r7, #7]
24007782:	2b00      	cmp	r3, #0
24007784:	d104      	bne.n	24007790 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
24007786:	68fb      	ldr	r3, [r7, #12]
24007788:	681b      	ldr	r3, [r3, #0]
2400778a:	68ba      	ldr	r2, [r7, #8]
2400778c:	60da      	str	r2, [r3, #12]
2400778e:	e010      	b.n	240077b2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
24007790:	68fb      	ldr	r3, [r7, #12]
24007792:	681b      	ldr	r3, [r3, #0]
24007794:	68ba      	ldr	r2, [r7, #8]
24007796:	611a      	str	r2, [r3, #16]
24007798:	e00b      	b.n	240077b2 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
2400779a:	79fb      	ldrb	r3, [r7, #7]
2400779c:	2b00      	cmp	r3, #0
2400779e:	d104      	bne.n	240077aa <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
240077a0:	68fb      	ldr	r3, [r7, #12]
240077a2:	681b      	ldr	r3, [r3, #0]
240077a4:	68ba      	ldr	r2, [r7, #8]
240077a6:	60da      	str	r2, [r3, #12]
240077a8:	e003      	b.n	240077b2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
240077aa:	68fb      	ldr	r3, [r7, #12]
240077ac:	681b      	ldr	r3, [r3, #0]
240077ae:	68ba      	ldr	r2, [r7, #8]
240077b0:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
240077b2:	2300      	movs	r3, #0
}
240077b4:	4618      	mov	r0, r3
240077b6:	3714      	adds	r7, #20
240077b8:	46bd      	mov	sp, r7
240077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
240077be:	4770      	bx	lr
240077c0:	40020010 	.word	0x40020010
240077c4:	40020028 	.word	0x40020028
240077c8:	40020040 	.word	0x40020040
240077cc:	40020058 	.word	0x40020058
240077d0:	40020070 	.word	0x40020070
240077d4:	40020088 	.word	0x40020088
240077d8:	400200a0 	.word	0x400200a0
240077dc:	400200b8 	.word	0x400200b8
240077e0:	40020410 	.word	0x40020410
240077e4:	40020428 	.word	0x40020428
240077e8:	40020440 	.word	0x40020440
240077ec:	40020458 	.word	0x40020458
240077f0:	40020470 	.word	0x40020470
240077f4:	40020488 	.word	0x40020488
240077f8:	400204a0 	.word	0x400204a0
240077fc:	400204b8 	.word	0x400204b8

24007800 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24007800:	b480      	push	{r7}
24007802:	b085      	sub	sp, #20
24007804:	af00      	add	r7, sp, #0
24007806:	6078      	str	r0, [r7, #4]
24007808:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
2400780a:	2300      	movs	r3, #0
2400780c:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
2400780e:	2300      	movs	r3, #0
24007810:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24007812:	683b      	ldr	r3, [r7, #0]
24007814:	7a1b      	ldrb	r3, [r3, #8]
24007816:	2b01      	cmp	r3, #1
24007818:	d155      	bne.n	240078c6 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400781a:	687b      	ldr	r3, [r7, #4]
2400781c:	681b      	ldr	r3, [r3, #0]
2400781e:	4a4b      	ldr	r2, [pc, #300]	; (2400794c <HAL_DMAEx_ConfigMuxSync+0x14c>)
24007820:	4293      	cmp	r3, r2
24007822:	d049      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007824:	687b      	ldr	r3, [r7, #4]
24007826:	681b      	ldr	r3, [r3, #0]
24007828:	4a49      	ldr	r2, [pc, #292]	; (24007950 <HAL_DMAEx_ConfigMuxSync+0x150>)
2400782a:	4293      	cmp	r3, r2
2400782c:	d044      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400782e:	687b      	ldr	r3, [r7, #4]
24007830:	681b      	ldr	r3, [r3, #0]
24007832:	4a48      	ldr	r2, [pc, #288]	; (24007954 <HAL_DMAEx_ConfigMuxSync+0x154>)
24007834:	4293      	cmp	r3, r2
24007836:	d03f      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007838:	687b      	ldr	r3, [r7, #4]
2400783a:	681b      	ldr	r3, [r3, #0]
2400783c:	4a46      	ldr	r2, [pc, #280]	; (24007958 <HAL_DMAEx_ConfigMuxSync+0x158>)
2400783e:	4293      	cmp	r3, r2
24007840:	d03a      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007842:	687b      	ldr	r3, [r7, #4]
24007844:	681b      	ldr	r3, [r3, #0]
24007846:	4a45      	ldr	r2, [pc, #276]	; (2400795c <HAL_DMAEx_ConfigMuxSync+0x15c>)
24007848:	4293      	cmp	r3, r2
2400784a:	d035      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400784c:	687b      	ldr	r3, [r7, #4]
2400784e:	681b      	ldr	r3, [r3, #0]
24007850:	4a43      	ldr	r2, [pc, #268]	; (24007960 <HAL_DMAEx_ConfigMuxSync+0x160>)
24007852:	4293      	cmp	r3, r2
24007854:	d030      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007856:	687b      	ldr	r3, [r7, #4]
24007858:	681b      	ldr	r3, [r3, #0]
2400785a:	4a42      	ldr	r2, [pc, #264]	; (24007964 <HAL_DMAEx_ConfigMuxSync+0x164>)
2400785c:	4293      	cmp	r3, r2
2400785e:	d02b      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007860:	687b      	ldr	r3, [r7, #4]
24007862:	681b      	ldr	r3, [r3, #0]
24007864:	4a40      	ldr	r2, [pc, #256]	; (24007968 <HAL_DMAEx_ConfigMuxSync+0x168>)
24007866:	4293      	cmp	r3, r2
24007868:	d026      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400786a:	687b      	ldr	r3, [r7, #4]
2400786c:	681b      	ldr	r3, [r3, #0]
2400786e:	4a3f      	ldr	r2, [pc, #252]	; (2400796c <HAL_DMAEx_ConfigMuxSync+0x16c>)
24007870:	4293      	cmp	r3, r2
24007872:	d021      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007874:	687b      	ldr	r3, [r7, #4]
24007876:	681b      	ldr	r3, [r3, #0]
24007878:	4a3d      	ldr	r2, [pc, #244]	; (24007970 <HAL_DMAEx_ConfigMuxSync+0x170>)
2400787a:	4293      	cmp	r3, r2
2400787c:	d01c      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400787e:	687b      	ldr	r3, [r7, #4]
24007880:	681b      	ldr	r3, [r3, #0]
24007882:	4a3c      	ldr	r2, [pc, #240]	; (24007974 <HAL_DMAEx_ConfigMuxSync+0x174>)
24007884:	4293      	cmp	r3, r2
24007886:	d017      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007888:	687b      	ldr	r3, [r7, #4]
2400788a:	681b      	ldr	r3, [r3, #0]
2400788c:	4a3a      	ldr	r2, [pc, #232]	; (24007978 <HAL_DMAEx_ConfigMuxSync+0x178>)
2400788e:	4293      	cmp	r3, r2
24007890:	d012      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
24007892:	687b      	ldr	r3, [r7, #4]
24007894:	681b      	ldr	r3, [r3, #0]
24007896:	4a39      	ldr	r2, [pc, #228]	; (2400797c <HAL_DMAEx_ConfigMuxSync+0x17c>)
24007898:	4293      	cmp	r3, r2
2400789a:	d00d      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400789c:	687b      	ldr	r3, [r7, #4]
2400789e:	681b      	ldr	r3, [r3, #0]
240078a0:	4a37      	ldr	r2, [pc, #220]	; (24007980 <HAL_DMAEx_ConfigMuxSync+0x180>)
240078a2:	4293      	cmp	r3, r2
240078a4:	d008      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
240078a6:	687b      	ldr	r3, [r7, #4]
240078a8:	681b      	ldr	r3, [r3, #0]
240078aa:	4a36      	ldr	r2, [pc, #216]	; (24007984 <HAL_DMAEx_ConfigMuxSync+0x184>)
240078ac:	4293      	cmp	r3, r2
240078ae:	d003      	beq.n	240078b8 <HAL_DMAEx_ConfigMuxSync+0xb8>
240078b0:	687b      	ldr	r3, [r7, #4]
240078b2:	681b      	ldr	r3, [r3, #0]
240078b4:	4a34      	ldr	r2, [pc, #208]	; (24007988 <HAL_DMAEx_ConfigMuxSync+0x188>)
240078b6:	4293      	cmp	r3, r2
240078b8:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
240078ba:	683b      	ldr	r3, [r7, #0]
240078bc:	681b      	ldr	r3, [r3, #0]
240078be:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
240078c0:	683b      	ldr	r3, [r7, #0]
240078c2:	685b      	ldr	r3, [r3, #4]
240078c4:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
240078c6:	687b      	ldr	r3, [r7, #4]
240078c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240078cc:	b2db      	uxtb	r3, r3
240078ce:	2b01      	cmp	r3, #1
240078d0:	d131      	bne.n	24007936 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
240078d2:	687b      	ldr	r3, [r7, #4]
240078d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
240078d8:	2b01      	cmp	r3, #1
240078da:	d101      	bne.n	240078e0 <HAL_DMAEx_ConfigMuxSync+0xe0>
240078dc:	2302      	movs	r3, #2
240078de:	e02f      	b.n	24007940 <HAL_DMAEx_ConfigMuxSync+0x140>
240078e0:	687b      	ldr	r3, [r7, #4]
240078e2:	2201      	movs	r2, #1
240078e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
240078e8:	687b      	ldr	r3, [r7, #4]
240078ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240078ec:	681a      	ldr	r2, [r3, #0]
240078ee:	687b      	ldr	r3, [r7, #4]
240078f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240078f2:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
240078f6:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
240078f8:	687b      	ldr	r3, [r7, #4]
240078fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240078fc:	681b      	ldr	r3, [r3, #0]
240078fe:	b2d9      	uxtb	r1, r3
24007900:	68fb      	ldr	r3, [r7, #12]
24007902:	061a      	lsls	r2, r3, #24
24007904:	683b      	ldr	r3, [r7, #0]
24007906:	68db      	ldr	r3, [r3, #12]
24007908:	3b01      	subs	r3, #1
2400790a:	04db      	lsls	r3, r3, #19
2400790c:	431a      	orrs	r2, r3
2400790e:	68bb      	ldr	r3, [r7, #8]
24007910:	431a      	orrs	r2, r3
24007912:	683b      	ldr	r3, [r7, #0]
24007914:	7a1b      	ldrb	r3, [r3, #8]
24007916:	041b      	lsls	r3, r3, #16
24007918:	431a      	orrs	r2, r3
2400791a:	683b      	ldr	r3, [r7, #0]
2400791c:	7a5b      	ldrb	r3, [r3, #9]
2400791e:	025b      	lsls	r3, r3, #9
24007920:	431a      	orrs	r2, r3
24007922:	687b      	ldr	r3, [r7, #4]
24007924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007926:	430a      	orrs	r2, r1
24007928:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
2400792a:	687b      	ldr	r3, [r7, #4]
2400792c:	2200      	movs	r2, #0
2400792e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
24007932:	2300      	movs	r3, #0
24007934:	e004      	b.n	24007940 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007936:	687b      	ldr	r3, [r7, #4]
24007938:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400793c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
2400793e:	2301      	movs	r3, #1
  }
}
24007940:	4618      	mov	r0, r3
24007942:	3714      	adds	r7, #20
24007944:	46bd      	mov	sp, r7
24007946:	f85d 7b04 	ldr.w	r7, [sp], #4
2400794a:	4770      	bx	lr
2400794c:	40020010 	.word	0x40020010
24007950:	40020028 	.word	0x40020028
24007954:	40020040 	.word	0x40020040
24007958:	40020058 	.word	0x40020058
2400795c:	40020070 	.word	0x40020070
24007960:	40020088 	.word	0x40020088
24007964:	400200a0 	.word	0x400200a0
24007968:	400200b8 	.word	0x400200b8
2400796c:	40020410 	.word	0x40020410
24007970:	40020428 	.word	0x40020428
24007974:	40020440 	.word	0x40020440
24007978:	40020458 	.word	0x40020458
2400797c:	40020470 	.word	0x40020470
24007980:	40020488 	.word	0x40020488
24007984:	400204a0 	.word	0x400204a0
24007988:	400204b8 	.word	0x400204b8

2400798c <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *         contains the request generator parameters.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
2400798c:	b480      	push	{r7}
2400798e:	b085      	sub	sp, #20
24007990:	af00      	add	r7, sp, #0
24007992:	6078      	str	r0, [r7, #4]
24007994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
24007996:	687b      	ldr	r3, [r7, #4]
24007998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2400799c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400799e:	687b      	ldr	r3, [r7, #4]
240079a0:	681b      	ldr	r3, [r3, #0]
240079a2:	4a47      	ldr	r2, [pc, #284]	; (24007ac0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x134>)
240079a4:	4293      	cmp	r3, r2
240079a6:	d049      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079a8:	687b      	ldr	r3, [r7, #4]
240079aa:	681b      	ldr	r3, [r3, #0]
240079ac:	4a45      	ldr	r2, [pc, #276]	; (24007ac4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x138>)
240079ae:	4293      	cmp	r3, r2
240079b0:	d044      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079b2:	687b      	ldr	r3, [r7, #4]
240079b4:	681b      	ldr	r3, [r3, #0]
240079b6:	4a44      	ldr	r2, [pc, #272]	; (24007ac8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x13c>)
240079b8:	4293      	cmp	r3, r2
240079ba:	d03f      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079bc:	687b      	ldr	r3, [r7, #4]
240079be:	681b      	ldr	r3, [r3, #0]
240079c0:	4a42      	ldr	r2, [pc, #264]	; (24007acc <HAL_DMAEx_ConfigMuxRequestGenerator+0x140>)
240079c2:	4293      	cmp	r3, r2
240079c4:	d03a      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079c6:	687b      	ldr	r3, [r7, #4]
240079c8:	681b      	ldr	r3, [r3, #0]
240079ca:	4a41      	ldr	r2, [pc, #260]	; (24007ad0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x144>)
240079cc:	4293      	cmp	r3, r2
240079ce:	d035      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079d0:	687b      	ldr	r3, [r7, #4]
240079d2:	681b      	ldr	r3, [r3, #0]
240079d4:	4a3f      	ldr	r2, [pc, #252]	; (24007ad4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x148>)
240079d6:	4293      	cmp	r3, r2
240079d8:	d030      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079da:	687b      	ldr	r3, [r7, #4]
240079dc:	681b      	ldr	r3, [r3, #0]
240079de:	4a3e      	ldr	r2, [pc, #248]	; (24007ad8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x14c>)
240079e0:	4293      	cmp	r3, r2
240079e2:	d02b      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079e4:	687b      	ldr	r3, [r7, #4]
240079e6:	681b      	ldr	r3, [r3, #0]
240079e8:	4a3c      	ldr	r2, [pc, #240]	; (24007adc <HAL_DMAEx_ConfigMuxRequestGenerator+0x150>)
240079ea:	4293      	cmp	r3, r2
240079ec:	d026      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079ee:	687b      	ldr	r3, [r7, #4]
240079f0:	681b      	ldr	r3, [r3, #0]
240079f2:	4a3b      	ldr	r2, [pc, #236]	; (24007ae0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x154>)
240079f4:	4293      	cmp	r3, r2
240079f6:	d021      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240079f8:	687b      	ldr	r3, [r7, #4]
240079fa:	681b      	ldr	r3, [r3, #0]
240079fc:	4a39      	ldr	r2, [pc, #228]	; (24007ae4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x158>)
240079fe:	4293      	cmp	r3, r2
24007a00:	d01c      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a02:	687b      	ldr	r3, [r7, #4]
24007a04:	681b      	ldr	r3, [r3, #0]
24007a06:	4a38      	ldr	r2, [pc, #224]	; (24007ae8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x15c>)
24007a08:	4293      	cmp	r3, r2
24007a0a:	d017      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a0c:	687b      	ldr	r3, [r7, #4]
24007a0e:	681b      	ldr	r3, [r3, #0]
24007a10:	4a36      	ldr	r2, [pc, #216]	; (24007aec <HAL_DMAEx_ConfigMuxRequestGenerator+0x160>)
24007a12:	4293      	cmp	r3, r2
24007a14:	d012      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a16:	687b      	ldr	r3, [r7, #4]
24007a18:	681b      	ldr	r3, [r3, #0]
24007a1a:	4a35      	ldr	r2, [pc, #212]	; (24007af0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x164>)
24007a1c:	4293      	cmp	r3, r2
24007a1e:	d00d      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a20:	687b      	ldr	r3, [r7, #4]
24007a22:	681b      	ldr	r3, [r3, #0]
24007a24:	4a33      	ldr	r2, [pc, #204]	; (24007af4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x168>)
24007a26:	4293      	cmp	r3, r2
24007a28:	d008      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a2a:	687b      	ldr	r3, [r7, #4]
24007a2c:	681b      	ldr	r3, [r3, #0]
24007a2e:	4a32      	ldr	r2, [pc, #200]	; (24007af8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x16c>)
24007a30:	4293      	cmp	r3, r2
24007a32:	d003      	beq.n	24007a3c <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24007a34:	687b      	ldr	r3, [r7, #4]
24007a36:	681b      	ldr	r3, [r3, #0]
24007a38:	4a30      	ldr	r2, [pc, #192]	; (24007afc <HAL_DMAEx_ConfigMuxRequestGenerator+0x170>)
24007a3a:	4293      	cmp	r3, r2
24007a3c:	bf00      	nop
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if(hdma->DMAmuxRequestGen == 0U)
24007a3e:	687b      	ldr	r3, [r7, #4]
24007a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007a42:	2b00      	cmp	r3, #0
24007a44:	d105      	bne.n	24007a52 <HAL_DMAEx_ConfigMuxRequestGenerator+0xc6>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24007a46:	687b      	ldr	r3, [r7, #4]
24007a48:	2240      	movs	r2, #64	; 0x40
24007a4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
24007a4c:	2301      	movs	r3, #1
24007a4e:	73fb      	strb	r3, [r7, #15]
24007a50:	e02e      	b.n	24007ab0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
  }
  else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
24007a52:	687b      	ldr	r3, [r7, #4]
24007a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007a56:	681b      	ldr	r3, [r3, #0]
24007a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24007a5c:	2b00      	cmp	r3, #0
24007a5e:	d121      	bne.n	24007aa4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
24007a60:	7bbb      	ldrb	r3, [r7, #14]
24007a62:	2b01      	cmp	r3, #1
24007a64:	d11e      	bne.n	24007aa4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x118>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
24007a66:	687b      	ldr	r3, [r7, #4]
24007a68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
24007a6c:	2b01      	cmp	r3, #1
24007a6e:	d101      	bne.n	24007a74 <HAL_DMAEx_ConfigMuxRequestGenerator+0xe8>
24007a70:	2302      	movs	r3, #2
24007a72:	e01e      	b.n	24007ab2 <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
24007a74:	687b      	ldr	r3, [r7, #4]
24007a76:	2201      	movs	r2, #1
24007a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24007a7c:	683b      	ldr	r3, [r7, #0]
24007a7e:	681a      	ldr	r2, [r3, #0]
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
24007a80:	683b      	ldr	r3, [r7, #0]
24007a82:	689b      	ldr	r3, [r3, #8]
24007a84:	3b01      	subs	r3, #1
24007a86:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24007a88:	ea42 0103 	orr.w	r1, r2, r3
                                  pRequestGeneratorConfig->Polarity;
24007a8c:	683b      	ldr	r3, [r7, #0]
24007a8e:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24007a90:	687b      	ldr	r3, [r7, #4]
24007a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
24007a94:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24007a96:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_UNLOCK(hdma);
24007a98:	687b      	ldr	r3, [r7, #4]
24007a9a:	2200      	movs	r2, #0
24007a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
24007aa0:	2300      	movs	r3, #0
24007aa2:	e006      	b.n	24007ab2 <HAL_DMAEx_ConfigMuxRequestGenerator+0x126>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007aa4:	687b      	ldr	r3, [r7, #4]
24007aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
24007aaa:	655a      	str	r2, [r3, #84]	; 0x54

    /* error status */
    status = HAL_ERROR;
24007aac:	2301      	movs	r3, #1
24007aae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
24007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
24007ab2:	4618      	mov	r0, r3
24007ab4:	3714      	adds	r7, #20
24007ab6:	46bd      	mov	sp, r7
24007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
24007abc:	4770      	bx	lr
24007abe:	bf00      	nop
24007ac0:	40020010 	.word	0x40020010
24007ac4:	40020028 	.word	0x40020028
24007ac8:	40020040 	.word	0x40020040
24007acc:	40020058 	.word	0x40020058
24007ad0:	40020070 	.word	0x40020070
24007ad4:	40020088 	.word	0x40020088
24007ad8:	400200a0 	.word	0x400200a0
24007adc:	400200b8 	.word	0x400200b8
24007ae0:	40020410 	.word	0x40020410
24007ae4:	40020428 	.word	0x40020428
24007ae8:	40020440 	.word	0x40020440
24007aec:	40020458 	.word	0x40020458
24007af0:	40020470 	.word	0x40020470
24007af4:	40020488 	.word	0x40020488
24007af8:	400204a0 	.word	0x400204a0
24007afc:	400204b8 	.word	0x400204b8

24007b00 <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
24007b00:	b480      	push	{r7}
24007b02:	b083      	sub	sp, #12
24007b04:	af00      	add	r7, sp, #0
24007b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
24007b08:	687b      	ldr	r3, [r7, #4]
24007b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007b0e:	b2db      	uxtb	r3, r3
24007b10:	2b00      	cmp	r3, #0
24007b12:	d00d      	beq.n	24007b30 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
24007b14:	687b      	ldr	r3, [r7, #4]
24007b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b18:	2b00      	cmp	r3, #0
24007b1a:	d009      	beq.n	24007b30 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
24007b1c:	687b      	ldr	r3, [r7, #4]
24007b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b20:	681a      	ldr	r2, [r3, #0]
24007b22:	687b      	ldr	r3, [r7, #4]
24007b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24007b2a:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24007b2c:	2300      	movs	r3, #0
24007b2e:	e000      	b.n	24007b32 <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24007b30:	2301      	movs	r3, #1
 }
}
24007b32:	4618      	mov	r0, r3
24007b34:	370c      	adds	r7, #12
24007b36:	46bd      	mov	sp, r7
24007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
24007b3c:	4770      	bx	lr

24007b3e <HAL_DMAEx_DisableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
24007b3e:	b480      	push	{r7}
24007b40:	b083      	sub	sp, #12
24007b42:	af00      	add	r7, sp, #0
24007b44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
24007b46:	687b      	ldr	r3, [r7, #4]
24007b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24007b4c:	b2db      	uxtb	r3, r3
24007b4e:	2b00      	cmp	r3, #0
24007b50:	d00d      	beq.n	24007b6e <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
24007b52:	687b      	ldr	r3, [r7, #4]
24007b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b56:	2b00      	cmp	r3, #0
24007b58:	d009      	beq.n	24007b6e <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
  {
    /* Disable the request generator*/
    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_GE;
24007b5a:	687b      	ldr	r3, [r7, #4]
24007b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b5e:	681a      	ldr	r2, [r3, #0]
24007b60:	687b      	ldr	r3, [r7, #4]
24007b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007b64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24007b68:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24007b6a:	2300      	movs	r3, #0
24007b6c:	e000      	b.n	24007b70 <HAL_DMAEx_DisableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24007b6e:	2301      	movs	r3, #1
 }
}
24007b70:	4618      	mov	r0, r3
24007b72:	370c      	adds	r7, #12
24007b74:	46bd      	mov	sp, r7
24007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
24007b7a:	4770      	bx	lr

24007b7c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24007b7c:	b580      	push	{r7, lr}
24007b7e:	b082      	sub	sp, #8
24007b80:	af00      	add	r7, sp, #0
24007b82:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24007b84:	687b      	ldr	r3, [r7, #4]
24007b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24007b88:	681a      	ldr	r2, [r3, #0]
24007b8a:	687b      	ldr	r3, [r7, #4]
24007b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24007b8e:	4013      	ands	r3, r2
24007b90:	2b00      	cmp	r3, #0
24007b92:	d01a      	beq.n	24007bca <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24007b94:	687b      	ldr	r3, [r7, #4]
24007b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007b98:	681a      	ldr	r2, [r3, #0]
24007b9a:	687b      	ldr	r3, [r7, #4]
24007b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24007b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007ba2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007ba4:	687b      	ldr	r3, [r7, #4]
24007ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24007ba8:	687a      	ldr	r2, [r7, #4]
24007baa:	6e92      	ldr	r2, [r2, #104]	; 0x68
24007bac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24007bae:	687b      	ldr	r3, [r7, #4]
24007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24007bb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24007bb6:	687b      	ldr	r3, [r7, #4]
24007bb8:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24007bba:	687b      	ldr	r3, [r7, #4]
24007bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007bbe:	2b00      	cmp	r3, #0
24007bc0:	d003      	beq.n	24007bca <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
24007bc2:	687b      	ldr	r3, [r7, #4]
24007bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007bc6:	6878      	ldr	r0, [r7, #4]
24007bc8:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24007bca:	687b      	ldr	r3, [r7, #4]
24007bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007bce:	2b00      	cmp	r3, #0
24007bd0:	d022      	beq.n	24007c18 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24007bd2:	687b      	ldr	r3, [r7, #4]
24007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007bd6:	681a      	ldr	r2, [r3, #0]
24007bd8:	687b      	ldr	r3, [r7, #4]
24007bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24007bdc:	4013      	ands	r3, r2
24007bde:	2b00      	cmp	r3, #0
24007be0:	d01a      	beq.n	24007c18 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24007be2:	687b      	ldr	r3, [r7, #4]
24007be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007be6:	681a      	ldr	r2, [r3, #0]
24007be8:	687b      	ldr	r3, [r7, #4]
24007bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24007bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007bf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007bf2:	687b      	ldr	r3, [r7, #4]
24007bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007bf6:	687a      	ldr	r2, [r7, #4]
24007bf8:	6f52      	ldr	r2, [r2, #116]	; 0x74
24007bfa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24007bfc:	687b      	ldr	r3, [r7, #4]
24007bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24007c00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24007c04:	687b      	ldr	r3, [r7, #4]
24007c06:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24007c08:	687b      	ldr	r3, [r7, #4]
24007c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007c0c:	2b00      	cmp	r3, #0
24007c0e:	d003      	beq.n	24007c18 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24007c10:	687b      	ldr	r3, [r7, #4]
24007c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24007c14:	6878      	ldr	r0, [r7, #4]
24007c16:	4798      	blx	r3
      }
    }
  }
}
24007c18:	bf00      	nop
24007c1a:	3708      	adds	r7, #8
24007c1c:	46bd      	mov	sp, r7
24007c1e:	bd80      	pop	{r7, pc}

24007c20 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24007c20:	b480      	push	{r7}
24007c22:	b085      	sub	sp, #20
24007c24:	af00      	add	r7, sp, #0
24007c26:	60f8      	str	r0, [r7, #12]
24007c28:	60b9      	str	r1, [r7, #8]
24007c2a:	607a      	str	r2, [r7, #4]
24007c2c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007c2e:	68fb      	ldr	r3, [r7, #12]
24007c30:	681b      	ldr	r3, [r3, #0]
24007c32:	4a46      	ldr	r2, [pc, #280]	; (24007d4c <DMA_MultiBufferSetConfig+0x12c>)
24007c34:	4293      	cmp	r3, r2
24007c36:	d04a      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c38:	68fb      	ldr	r3, [r7, #12]
24007c3a:	681b      	ldr	r3, [r3, #0]
24007c3c:	4a44      	ldr	r2, [pc, #272]	; (24007d50 <DMA_MultiBufferSetConfig+0x130>)
24007c3e:	4293      	cmp	r3, r2
24007c40:	d045      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c42:	68fb      	ldr	r3, [r7, #12]
24007c44:	681b      	ldr	r3, [r3, #0]
24007c46:	4a43      	ldr	r2, [pc, #268]	; (24007d54 <DMA_MultiBufferSetConfig+0x134>)
24007c48:	4293      	cmp	r3, r2
24007c4a:	d040      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c4c:	68fb      	ldr	r3, [r7, #12]
24007c4e:	681b      	ldr	r3, [r3, #0]
24007c50:	4a41      	ldr	r2, [pc, #260]	; (24007d58 <DMA_MultiBufferSetConfig+0x138>)
24007c52:	4293      	cmp	r3, r2
24007c54:	d03b      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c56:	68fb      	ldr	r3, [r7, #12]
24007c58:	681b      	ldr	r3, [r3, #0]
24007c5a:	4a40      	ldr	r2, [pc, #256]	; (24007d5c <DMA_MultiBufferSetConfig+0x13c>)
24007c5c:	4293      	cmp	r3, r2
24007c5e:	d036      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c60:	68fb      	ldr	r3, [r7, #12]
24007c62:	681b      	ldr	r3, [r3, #0]
24007c64:	4a3e      	ldr	r2, [pc, #248]	; (24007d60 <DMA_MultiBufferSetConfig+0x140>)
24007c66:	4293      	cmp	r3, r2
24007c68:	d031      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c6a:	68fb      	ldr	r3, [r7, #12]
24007c6c:	681b      	ldr	r3, [r3, #0]
24007c6e:	4a3d      	ldr	r2, [pc, #244]	; (24007d64 <DMA_MultiBufferSetConfig+0x144>)
24007c70:	4293      	cmp	r3, r2
24007c72:	d02c      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c74:	68fb      	ldr	r3, [r7, #12]
24007c76:	681b      	ldr	r3, [r3, #0]
24007c78:	4a3b      	ldr	r2, [pc, #236]	; (24007d68 <DMA_MultiBufferSetConfig+0x148>)
24007c7a:	4293      	cmp	r3, r2
24007c7c:	d027      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c7e:	68fb      	ldr	r3, [r7, #12]
24007c80:	681b      	ldr	r3, [r3, #0]
24007c82:	4a3a      	ldr	r2, [pc, #232]	; (24007d6c <DMA_MultiBufferSetConfig+0x14c>)
24007c84:	4293      	cmp	r3, r2
24007c86:	d022      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c88:	68fb      	ldr	r3, [r7, #12]
24007c8a:	681b      	ldr	r3, [r3, #0]
24007c8c:	4a38      	ldr	r2, [pc, #224]	; (24007d70 <DMA_MultiBufferSetConfig+0x150>)
24007c8e:	4293      	cmp	r3, r2
24007c90:	d01d      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c92:	68fb      	ldr	r3, [r7, #12]
24007c94:	681b      	ldr	r3, [r3, #0]
24007c96:	4a37      	ldr	r2, [pc, #220]	; (24007d74 <DMA_MultiBufferSetConfig+0x154>)
24007c98:	4293      	cmp	r3, r2
24007c9a:	d018      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007c9c:	68fb      	ldr	r3, [r7, #12]
24007c9e:	681b      	ldr	r3, [r3, #0]
24007ca0:	4a35      	ldr	r2, [pc, #212]	; (24007d78 <DMA_MultiBufferSetConfig+0x158>)
24007ca2:	4293      	cmp	r3, r2
24007ca4:	d013      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007ca6:	68fb      	ldr	r3, [r7, #12]
24007ca8:	681b      	ldr	r3, [r3, #0]
24007caa:	4a34      	ldr	r2, [pc, #208]	; (24007d7c <DMA_MultiBufferSetConfig+0x15c>)
24007cac:	4293      	cmp	r3, r2
24007cae:	d00e      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007cb0:	68fb      	ldr	r3, [r7, #12]
24007cb2:	681b      	ldr	r3, [r3, #0]
24007cb4:	4a32      	ldr	r2, [pc, #200]	; (24007d80 <DMA_MultiBufferSetConfig+0x160>)
24007cb6:	4293      	cmp	r3, r2
24007cb8:	d009      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007cba:	68fb      	ldr	r3, [r7, #12]
24007cbc:	681b      	ldr	r3, [r3, #0]
24007cbe:	4a31      	ldr	r2, [pc, #196]	; (24007d84 <DMA_MultiBufferSetConfig+0x164>)
24007cc0:	4293      	cmp	r3, r2
24007cc2:	d004      	beq.n	24007cce <DMA_MultiBufferSetConfig+0xae>
24007cc4:	68fb      	ldr	r3, [r7, #12]
24007cc6:	681b      	ldr	r3, [r3, #0]
24007cc8:	4a2f      	ldr	r2, [pc, #188]	; (24007d88 <DMA_MultiBufferSetConfig+0x168>)
24007cca:	4293      	cmp	r3, r2
24007ccc:	d101      	bne.n	24007cd2 <DMA_MultiBufferSetConfig+0xb2>
24007cce:	2301      	movs	r3, #1
24007cd0:	e000      	b.n	24007cd4 <DMA_MultiBufferSetConfig+0xb4>
24007cd2:	2300      	movs	r3, #0
24007cd4:	2b00      	cmp	r3, #0
24007cd6:	d019      	beq.n	24007d0c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
24007cd8:	68fb      	ldr	r3, [r7, #12]
24007cda:	681b      	ldr	r3, [r3, #0]
24007cdc:	683a      	ldr	r2, [r7, #0]
24007cde:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24007ce0:	68fb      	ldr	r3, [r7, #12]
24007ce2:	689b      	ldr	r3, [r3, #8]
24007ce4:	2b40      	cmp	r3, #64	; 0x40
24007ce6:	d108      	bne.n	24007cfa <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
24007ce8:	68fb      	ldr	r3, [r7, #12]
24007cea:	681b      	ldr	r3, [r3, #0]
24007cec:	687a      	ldr	r2, [r7, #4]
24007cee:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
24007cf0:	68fb      	ldr	r3, [r7, #12]
24007cf2:	681b      	ldr	r3, [r3, #0]
24007cf4:	68ba      	ldr	r2, [r7, #8]
24007cf6:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
24007cf8:	e021      	b.n	24007d3e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
24007cfa:	68fb      	ldr	r3, [r7, #12]
24007cfc:	681b      	ldr	r3, [r3, #0]
24007cfe:	68ba      	ldr	r2, [r7, #8]
24007d00:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
24007d02:	68fb      	ldr	r3, [r7, #12]
24007d04:	681b      	ldr	r3, [r3, #0]
24007d06:	687a      	ldr	r2, [r7, #4]
24007d08:	60da      	str	r2, [r3, #12]
}
24007d0a:	e018      	b.n	24007d3e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
24007d0c:	68fb      	ldr	r3, [r7, #12]
24007d0e:	681b      	ldr	r3, [r3, #0]
24007d10:	683a      	ldr	r2, [r7, #0]
24007d12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24007d14:	68fb      	ldr	r3, [r7, #12]
24007d16:	689b      	ldr	r3, [r3, #8]
24007d18:	2b40      	cmp	r3, #64	; 0x40
24007d1a:	d108      	bne.n	24007d2e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
24007d1c:	68fb      	ldr	r3, [r7, #12]
24007d1e:	681b      	ldr	r3, [r3, #0]
24007d20:	687a      	ldr	r2, [r7, #4]
24007d22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
24007d24:	68fb      	ldr	r3, [r7, #12]
24007d26:	681b      	ldr	r3, [r3, #0]
24007d28:	68ba      	ldr	r2, [r7, #8]
24007d2a:	60da      	str	r2, [r3, #12]
}
24007d2c:	e007      	b.n	24007d3e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
24007d2e:	68fb      	ldr	r3, [r7, #12]
24007d30:	681b      	ldr	r3, [r3, #0]
24007d32:	68ba      	ldr	r2, [r7, #8]
24007d34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
24007d36:	68fb      	ldr	r3, [r7, #12]
24007d38:	681b      	ldr	r3, [r3, #0]
24007d3a:	687a      	ldr	r2, [r7, #4]
24007d3c:	60da      	str	r2, [r3, #12]
}
24007d3e:	bf00      	nop
24007d40:	3714      	adds	r7, #20
24007d42:	46bd      	mov	sp, r7
24007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
24007d48:	4770      	bx	lr
24007d4a:	bf00      	nop
24007d4c:	40020010 	.word	0x40020010
24007d50:	40020028 	.word	0x40020028
24007d54:	40020040 	.word	0x40020040
24007d58:	40020058 	.word	0x40020058
24007d5c:	40020070 	.word	0x40020070
24007d60:	40020088 	.word	0x40020088
24007d64:	400200a0 	.word	0x400200a0
24007d68:	400200b8 	.word	0x400200b8
24007d6c:	40020410 	.word	0x40020410
24007d70:	40020428 	.word	0x40020428
24007d74:	40020440 	.word	0x40020440
24007d78:	40020458 	.word	0x40020458
24007d7c:	40020470 	.word	0x40020470
24007d80:	40020488 	.word	0x40020488
24007d84:	400204a0 	.word	0x400204a0
24007d88:	400204b8 	.word	0x400204b8

24007d8c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24007d8c:	b480      	push	{r7}
24007d8e:	b089      	sub	sp, #36	; 0x24
24007d90:	af00      	add	r7, sp, #0
24007d92:	6078      	str	r0, [r7, #4]
24007d94:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24007d96:	687b      	ldr	r3, [r7, #4]
24007d98:	2b00      	cmp	r3, #0
24007d9a:	d002      	beq.n	24007da2 <HAL_EXTI_SetConfigLine+0x16>
24007d9c:	683b      	ldr	r3, [r7, #0]
24007d9e:	2b00      	cmp	r3, #0
24007da0:	d101      	bne.n	24007da6 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
24007da2:	2301      	movs	r3, #1
24007da4:	e109      	b.n	24007fba <HAL_EXTI_SetConfigLine+0x22e>
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
24007da6:	683b      	ldr	r3, [r7, #0]
24007da8:	681a      	ldr	r2, [r3, #0]
24007daa:	687b      	ldr	r3, [r7, #4]
24007dac:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24007dae:	683b      	ldr	r3, [r7, #0]
24007db0:	681b      	ldr	r3, [r3, #0]
24007db2:	0c1b      	lsrs	r3, r3, #16
24007db4:	f003 0303 	and.w	r3, r3, #3
24007db8:	613b      	str	r3, [r7, #16]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
24007dba:	683b      	ldr	r3, [r7, #0]
24007dbc:	681b      	ldr	r3, [r3, #0]
24007dbe:	f003 031f 	and.w	r3, r3, #31
24007dc2:	60fb      	str	r3, [r7, #12]
  maskline = (1UL << linepos);
24007dc4:	2201      	movs	r2, #1
24007dc6:	68fb      	ldr	r3, [r7, #12]
24007dc8:	fa02 f303 	lsl.w	r3, r2, r3
24007dcc:	60bb      	str	r3, [r7, #8]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
24007dce:	683b      	ldr	r3, [r7, #0]
24007dd0:	681b      	ldr	r3, [r3, #0]
24007dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24007dd6:	2b00      	cmp	r3, #0
24007dd8:	d064      	beq.n	24007ea4 <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24007dda:	693b      	ldr	r3, [r7, #16]
24007ddc:	015b      	lsls	r3, r3, #5
24007dde:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
24007de2:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007de4:	69fb      	ldr	r3, [r7, #28]
24007de6:	681b      	ldr	r3, [r3, #0]
24007de8:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00U)
24007dea:	683b      	ldr	r3, [r7, #0]
24007dec:	689b      	ldr	r3, [r3, #8]
24007dee:	f003 0301 	and.w	r3, r3, #1
24007df2:	2b00      	cmp	r3, #0
24007df4:	d004      	beq.n	24007e00 <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
24007df6:	69ba      	ldr	r2, [r7, #24]
24007df8:	68bb      	ldr	r3, [r7, #8]
24007dfa:	4313      	orrs	r3, r2
24007dfc:	61bb      	str	r3, [r7, #24]
24007dfe:	e004      	b.n	24007e0a <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
24007e00:	68bb      	ldr	r3, [r7, #8]
24007e02:	43db      	mvns	r3, r3
24007e04:	69ba      	ldr	r2, [r7, #24]
24007e06:	4013      	ands	r3, r2
24007e08:	61bb      	str	r3, [r7, #24]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
24007e0a:	69fb      	ldr	r3, [r7, #28]
24007e0c:	69ba      	ldr	r2, [r7, #24]
24007e0e:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24007e10:	693b      	ldr	r3, [r7, #16]
24007e12:	015a      	lsls	r2, r3, #5
24007e14:	4b6c      	ldr	r3, [pc, #432]	; (24007fc8 <HAL_EXTI_SetConfigLine+0x23c>)
24007e16:	4413      	add	r3, r2
24007e18:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007e1a:	69fb      	ldr	r3, [r7, #28]
24007e1c:	681b      	ldr	r3, [r3, #0]
24007e1e:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00U)
24007e20:	683b      	ldr	r3, [r7, #0]
24007e22:	689b      	ldr	r3, [r3, #8]
24007e24:	f003 0302 	and.w	r3, r3, #2
24007e28:	2b00      	cmp	r3, #0
24007e2a:	d004      	beq.n	24007e36 <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
24007e2c:	69ba      	ldr	r2, [r7, #24]
24007e2e:	68bb      	ldr	r3, [r7, #8]
24007e30:	4313      	orrs	r3, r2
24007e32:	61bb      	str	r3, [r7, #24]
24007e34:	e004      	b.n	24007e40 <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
24007e36:	68bb      	ldr	r3, [r7, #8]
24007e38:	43db      	mvns	r3, r3
24007e3a:	69ba      	ldr	r2, [r7, #24]
24007e3c:	4013      	ands	r3, r2
24007e3e:	61bb      	str	r3, [r7, #24]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
24007e40:	69fb      	ldr	r3, [r7, #28]
24007e42:	69ba      	ldr	r2, [r7, #24]
24007e44:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
24007e46:	683b      	ldr	r3, [r7, #0]
24007e48:	681b      	ldr	r3, [r3, #0]
24007e4a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
24007e4e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
24007e52:	d127      	bne.n	24007ea4 <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24007e54:	4a5d      	ldr	r2, [pc, #372]	; (24007fcc <HAL_EXTI_SetConfigLine+0x240>)
24007e56:	68fb      	ldr	r3, [r7, #12]
24007e58:	089b      	lsrs	r3, r3, #2
24007e5a:	f003 0303 	and.w	r3, r3, #3
24007e5e:	3302      	adds	r3, #2
24007e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24007e64:	61bb      	str	r3, [r7, #24]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24007e66:	68fb      	ldr	r3, [r7, #12]
24007e68:	f003 0303 	and.w	r3, r3, #3
24007e6c:	009b      	lsls	r3, r3, #2
24007e6e:	220f      	movs	r2, #15
24007e70:	fa02 f303 	lsl.w	r3, r2, r3
24007e74:	43db      	mvns	r3, r3
24007e76:	69ba      	ldr	r2, [r7, #24]
24007e78:	4013      	ands	r3, r2
24007e7a:	61bb      	str	r3, [r7, #24]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24007e7c:	683b      	ldr	r3, [r7, #0]
24007e7e:	68da      	ldr	r2, [r3, #12]
24007e80:	68fb      	ldr	r3, [r7, #12]
24007e82:	f003 0303 	and.w	r3, r3, #3
24007e86:	009b      	lsls	r3, r3, #2
24007e88:	fa02 f303 	lsl.w	r3, r2, r3
24007e8c:	69ba      	ldr	r2, [r7, #24]
24007e8e:	4313      	orrs	r3, r2
24007e90:	61bb      	str	r3, [r7, #24]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
24007e92:	494e      	ldr	r1, [pc, #312]	; (24007fcc <HAL_EXTI_SetConfigLine+0x240>)
24007e94:	68fb      	ldr	r3, [r7, #12]
24007e96:	089b      	lsrs	r3, r3, #2
24007e98:	f003 0303 	and.w	r3, r3, #3
24007e9c:	3302      	adds	r3, #2
24007e9e:	69ba      	ldr	r2, [r7, #24]
24007ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24007ea4:	693b      	ldr	r3, [r7, #16]
24007ea6:	011a      	lsls	r2, r3, #4
24007ea8:	4b49      	ldr	r3, [pc, #292]	; (24007fd0 <HAL_EXTI_SetConfigLine+0x244>)
24007eaa:	4413      	add	r3, r2
24007eac:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24007eae:	69fb      	ldr	r3, [r7, #28]
24007eb0:	681b      	ldr	r3, [r3, #0]
24007eb2:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00U)
24007eb4:	683b      	ldr	r3, [r7, #0]
24007eb6:	685b      	ldr	r3, [r3, #4]
24007eb8:	f003 0301 	and.w	r3, r3, #1
24007ebc:	2b00      	cmp	r3, #0
24007ebe:	d004      	beq.n	24007eca <HAL_EXTI_SetConfigLine+0x13e>
  {
    regval |= maskline;
24007ec0:	69ba      	ldr	r2, [r7, #24]
24007ec2:	68bb      	ldr	r3, [r7, #8]
24007ec4:	4313      	orrs	r3, r2
24007ec6:	61bb      	str	r3, [r7, #24]
24007ec8:	e004      	b.n	24007ed4 <HAL_EXTI_SetConfigLine+0x148>
  }
  else
  {
    regval &= ~maskline;
24007eca:	68bb      	ldr	r3, [r7, #8]
24007ecc:	43db      	mvns	r3, r3
24007ece:	69ba      	ldr	r2, [r7, #24]
24007ed0:	4013      	ands	r3, r2
24007ed2:	61bb      	str	r3, [r7, #24]
  }

  /* Store interrupt mode */
  *regaddr = regval;
24007ed4:	69fb      	ldr	r3, [r7, #28]
24007ed6:	69ba      	ldr	r2, [r7, #24]
24007ed8:	601a      	str	r2, [r3, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24007eda:	693b      	ldr	r3, [r7, #16]
24007edc:	011a      	lsls	r2, r3, #4
24007ede:	4b3d      	ldr	r3, [pc, #244]	; (24007fd4 <HAL_EXTI_SetConfigLine+0x248>)
24007ee0:	4413      	add	r3, r2
24007ee2:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24007ee4:	69fb      	ldr	r3, [r7, #28]
24007ee6:	681b      	ldr	r3, [r3, #0]
24007ee8:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00U)
24007eea:	683b      	ldr	r3, [r7, #0]
24007eec:	685b      	ldr	r3, [r3, #4]
24007eee:	f003 0302 	and.w	r3, r3, #2
24007ef2:	2b00      	cmp	r3, #0
24007ef4:	d004      	beq.n	24007f00 <HAL_EXTI_SetConfigLine+0x174>
  {
    regval |= maskline;
24007ef6:	69ba      	ldr	r2, [r7, #24]
24007ef8:	68bb      	ldr	r3, [r7, #8]
24007efa:	4313      	orrs	r3, r2
24007efc:	61bb      	str	r3, [r7, #24]
24007efe:	e004      	b.n	24007f0a <HAL_EXTI_SetConfigLine+0x17e>
  }
  else
  {
    regval &= ~maskline;
24007f00:	68bb      	ldr	r3, [r7, #8]
24007f02:	43db      	mvns	r3, r3
24007f04:	69ba      	ldr	r2, [r7, #24]
24007f06:	4013      	ands	r3, r2
24007f08:	61bb      	str	r3, [r7, #24]
  }

  /* Store event mode */
  *regaddr = regval;
24007f0a:	69fb      	ldr	r3, [r7, #28]
24007f0c:	69ba      	ldr	r2, [r7, #24]
24007f0e:	601a      	str	r2, [r3, #0]
  /* Store event mode */
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* Configure the D3 PendClear source in case of Wakeup target is Any */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24007f10:	683b      	ldr	r3, [r7, #0]
24007f12:	681b      	ldr	r3, [r3, #0]
24007f14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24007f18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24007f1c:	d14c      	bne.n	24007fb8 <HAL_EXTI_SetConfigLine+0x22c>
  {
    assert_param(IS_EXTI_D3_PENDCLR_SRC(pExtiConfig->PendClearSource));

    /*Calc the PMR register address for the given line */
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24007f1e:	693b      	ldr	r3, [r7, #16]
24007f20:	015a      	lsls	r2, r3, #5
24007f22:	4b2d      	ldr	r3, [pc, #180]	; (24007fd8 <HAL_EXTI_SetConfigLine+0x24c>)
24007f24:	4413      	add	r3, r2
24007f26:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24007f28:	69fb      	ldr	r3, [r7, #28]
24007f2a:	681b      	ldr	r3, [r3, #0]
24007f2c:	61bb      	str	r3, [r7, #24]

    if(pExtiConfig->PendClearSource == EXTI_D3_PENDCLR_SRC_NONE)
24007f2e:	683b      	ldr	r3, [r7, #0]
24007f30:	691b      	ldr	r3, [r3, #16]
24007f32:	2b00      	cmp	r3, #0
24007f34:	d108      	bne.n	24007f48 <HAL_EXTI_SetConfigLine+0x1bc>
    {
      /* Clear D3PMRx register for the given line */
      regval &= ~maskline;
24007f36:	68bb      	ldr	r3, [r7, #8]
24007f38:	43db      	mvns	r3, r3
24007f3a:	69ba      	ldr	r2, [r7, #24]
24007f3c:	4013      	ands	r3, r2
24007f3e:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24007f40:	69fb      	ldr	r3, [r7, #28]
24007f42:	69ba      	ldr	r2, [r7, #24]
24007f44:	601a      	str	r2, [r3, #0]
24007f46:	e037      	b.n	24007fb8 <HAL_EXTI_SetConfigLine+0x22c>
    }
    else
    {
      /* Set D3PMRx register to 1 for the given line */
      regval |= maskline;
24007f48:	69ba      	ldr	r2, [r7, #24]
24007f4a:	68bb      	ldr	r3, [r7, #8]
24007f4c:	4313      	orrs	r3, r2
24007f4e:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24007f50:	69fb      	ldr	r3, [r7, #28]
24007f52:	69ba      	ldr	r2, [r7, #24]
24007f54:	601a      	str	r2, [r3, #0]

      if(linepos < 16UL)
24007f56:	68fb      	ldr	r3, [r7, #12]
24007f58:	2b0f      	cmp	r3, #15
24007f5a:	d80a      	bhi.n	24007f72 <HAL_EXTI_SetConfigLine+0x1e6>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24007f5c:	693b      	ldr	r3, [r7, #16]
24007f5e:	015a      	lsls	r2, r3, #5
24007f60:	4b1e      	ldr	r3, [pc, #120]	; (24007fdc <HAL_EXTI_SetConfigLine+0x250>)
24007f62:	4413      	add	r3, r2
24007f64:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24007f66:	2201      	movs	r2, #1
24007f68:	68fb      	ldr	r3, [r7, #12]
24007f6a:	fa02 f303 	lsl.w	r3, r2, r3
24007f6e:	617b      	str	r3, [r7, #20]
24007f70:	e00a      	b.n	24007f88 <HAL_EXTI_SetConfigLine+0x1fc>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24007f72:	693b      	ldr	r3, [r7, #16]
24007f74:	015a      	lsls	r2, r3, #5
24007f76:	4b1a      	ldr	r3, [pc, #104]	; (24007fe0 <HAL_EXTI_SetConfigLine+0x254>)
24007f78:	4413      	add	r3, r2
24007f7a:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
24007f7c:	68fb      	ldr	r3, [r7, #12]
24007f7e:	3b10      	subs	r3, #16
24007f80:	2201      	movs	r2, #1
24007f82:	fa02 f303 	lsl.w	r3, r2, r3
24007f86:	617b      	str	r3, [r7, #20]
      }

      regval = (*regaddr & (~(pcrlinepos * pcrlinepos * 3UL))) | (pcrlinepos * pcrlinepos * (pExtiConfig->PendClearSource - 1UL));
24007f88:	69fb      	ldr	r3, [r7, #28]
24007f8a:	6819      	ldr	r1, [r3, #0]
24007f8c:	697b      	ldr	r3, [r7, #20]
24007f8e:	fb03 f203 	mul.w	r2, r3, r3
24007f92:	4613      	mov	r3, r2
24007f94:	005b      	lsls	r3, r3, #1
24007f96:	4413      	add	r3, r2
24007f98:	43db      	mvns	r3, r3
24007f9a:	ea01 0203 	and.w	r2, r1, r3
24007f9e:	697b      	ldr	r3, [r7, #20]
24007fa0:	fb03 f303 	mul.w	r3, r3, r3
24007fa4:	6839      	ldr	r1, [r7, #0]
24007fa6:	6909      	ldr	r1, [r1, #16]
24007fa8:	3901      	subs	r1, #1
24007faa:	fb01 f303 	mul.w	r3, r1, r3
24007fae:	4313      	orrs	r3, r2
24007fb0:	61bb      	str	r3, [r7, #24]
      *regaddr = regval;
24007fb2:	69fb      	ldr	r3, [r7, #28]
24007fb4:	69ba      	ldr	r2, [r7, #24]
24007fb6:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
24007fb8:	2300      	movs	r3, #0
}
24007fba:	4618      	mov	r0, r3
24007fbc:	3724      	adds	r7, #36	; 0x24
24007fbe:	46bd      	mov	sp, r7
24007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
24007fc4:	4770      	bx	lr
24007fc6:	bf00      	nop
24007fc8:	58000004 	.word	0x58000004
24007fcc:	58000400 	.word	0x58000400
24007fd0:	58000080 	.word	0x58000080
24007fd4:	58000084 	.word	0x58000084
24007fd8:	5800000c 	.word	0x5800000c
24007fdc:	58000010 	.word	0x58000010
24007fe0:	58000014 	.word	0x58000014

24007fe4 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24007fe4:	b480      	push	{r7}
24007fe6:	b089      	sub	sp, #36	; 0x24
24007fe8:	af00      	add	r7, sp, #0
24007fea:	6078      	str	r0, [r7, #4]
24007fec:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24007fee:	687b      	ldr	r3, [r7, #4]
24007ff0:	2b00      	cmp	r3, #0
24007ff2:	d002      	beq.n	24007ffa <HAL_EXTI_GetConfigLine+0x16>
24007ff4:	683b      	ldr	r3, [r7, #0]
24007ff6:	2b00      	cmp	r3, #0
24007ff8:	d101      	bne.n	24007ffe <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
24007ffa:	2301      	movs	r3, #1
24007ffc:	e0c4      	b.n	24008188 <HAL_EXTI_GetConfigLine+0x1a4>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
24007ffe:	687b      	ldr	r3, [r7, #4]
24008000:	681a      	ldr	r2, [r3, #0]
24008002:	683b      	ldr	r3, [r7, #0]
24008004:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008006:	683b      	ldr	r3, [r7, #0]
24008008:	681b      	ldr	r3, [r3, #0]
2400800a:	0c1b      	lsrs	r3, r3, #16
2400800c:	f003 0303 	and.w	r3, r3, #3
24008010:	617b      	str	r3, [r7, #20]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
24008012:	683b      	ldr	r3, [r7, #0]
24008014:	681b      	ldr	r3, [r3, #0]
24008016:	f003 031f 	and.w	r3, r3, #31
2400801a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
2400801c:	2201      	movs	r2, #1
2400801e:	693b      	ldr	r3, [r7, #16]
24008020:	fa02 f303 	lsl.w	r3, r2, r3
24008024:	60fb      	str	r3, [r7, #12]

  /* 1] Get core mode : interrupt */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24008026:	697b      	ldr	r3, [r7, #20]
24008028:	011a      	lsls	r2, r3, #4
2400802a:	4b5a      	ldr	r3, [pc, #360]	; (24008194 <HAL_EXTI_GetConfigLine+0x1b0>)
2400802c:	4413      	add	r3, r2
2400802e:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008030:	69fb      	ldr	r3, [r7, #28]
24008032:	681b      	ldr	r3, [r3, #0]
24008034:	60bb      	str	r3, [r7, #8]

  pExtiConfig->Mode = EXTI_MODE_NONE;
24008036:	683b      	ldr	r3, [r7, #0]
24008038:	2200      	movs	r2, #0
2400803a:	605a      	str	r2, [r3, #4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
2400803c:	68ba      	ldr	r2, [r7, #8]
2400803e:	68fb      	ldr	r3, [r7, #12]
24008040:	4013      	ands	r3, r2
24008042:	2b00      	cmp	r3, #0
24008044:	d002      	beq.n	2400804c <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
24008046:	683b      	ldr	r3, [r7, #0]
24008048:	2201      	movs	r2, #1
2400804a:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
2400804c:	697b      	ldr	r3, [r7, #20]
2400804e:	011a      	lsls	r2, r3, #4
24008050:	4b51      	ldr	r3, [pc, #324]	; (24008198 <HAL_EXTI_GetConfigLine+0x1b4>)
24008052:	4413      	add	r3, r2
24008054:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008056:	69fb      	ldr	r3, [r7, #28]
24008058:	681b      	ldr	r3, [r3, #0]
2400805a:	60bb      	str	r3, [r7, #8]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
2400805c:	68ba      	ldr	r2, [r7, #8]
2400805e:	68fb      	ldr	r3, [r7, #12]
24008060:	4013      	ands	r3, r2
24008062:	2b00      	cmp	r3, #0
24008064:	d005      	beq.n	24008072 <HAL_EXTI_GetConfigLine+0x8e>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
24008066:	683b      	ldr	r3, [r7, #0]
24008068:	685b      	ldr	r3, [r3, #4]
2400806a:	f043 0202 	orr.w	r2, r3, #2
2400806e:	683b      	ldr	r3, [r7, #0]
24008070:	605a      	str	r2, [r3, #4]
    pExtiConfig->Mode |= EXTI_MODE_CORE2_EVENT;
  }
#endif /*DUAL_CORE*/

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
24008072:	683b      	ldr	r3, [r7, #0]
24008074:	2200      	movs	r2, #0
24008076:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00U;
24008078:	683b      	ldr	r3, [r7, #0]
2400807a:	2200      	movs	r2, #0
2400807c:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
2400807e:	683b      	ldr	r3, [r7, #0]
24008080:	681b      	ldr	r3, [r3, #0]
24008082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24008086:	2b00      	cmp	r3, #0
24008088:	d03d      	beq.n	24008106 <HAL_EXTI_GetConfigLine+0x122>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
2400808a:	697b      	ldr	r3, [r7, #20]
2400808c:	015b      	lsls	r3, r3, #5
2400808e:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
24008092:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008094:	69fb      	ldr	r3, [r7, #28]
24008096:	681b      	ldr	r3, [r3, #0]
24008098:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
2400809a:	68ba      	ldr	r2, [r7, #8]
2400809c:	68fb      	ldr	r3, [r7, #12]
2400809e:	4013      	ands	r3, r2
240080a0:	2b00      	cmp	r3, #0
240080a2:	d002      	beq.n	240080aa <HAL_EXTI_GetConfigLine+0xc6>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
240080a4:	683b      	ldr	r3, [r7, #0]
240080a6:	2201      	movs	r2, #1
240080a8:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
240080aa:	697b      	ldr	r3, [r7, #20]
240080ac:	015a      	lsls	r2, r3, #5
240080ae:	4b3b      	ldr	r3, [pc, #236]	; (2400819c <HAL_EXTI_GetConfigLine+0x1b8>)
240080b0:	4413      	add	r3, r2
240080b2:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
240080b4:	69fb      	ldr	r3, [r7, #28]
240080b6:	681b      	ldr	r3, [r3, #0]
240080b8:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
240080ba:	68ba      	ldr	r2, [r7, #8]
240080bc:	68fb      	ldr	r3, [r7, #12]
240080be:	4013      	ands	r3, r2
240080c0:	2b00      	cmp	r3, #0
240080c2:	d005      	beq.n	240080d0 <HAL_EXTI_GetConfigLine+0xec>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
240080c4:	683b      	ldr	r3, [r7, #0]
240080c6:	689b      	ldr	r3, [r3, #8]
240080c8:	f043 0202 	orr.w	r2, r3, #2
240080cc:	683b      	ldr	r3, [r7, #0]
240080ce:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
240080d0:	683b      	ldr	r3, [r7, #0]
240080d2:	681b      	ldr	r3, [r3, #0]
240080d4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
240080d8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
240080dc:	d113      	bne.n	24008106 <HAL_EXTI_GetConfigLine+0x122>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
240080de:	4a30      	ldr	r2, [pc, #192]	; (240081a0 <HAL_EXTI_GetConfigLine+0x1bc>)
240080e0:	693b      	ldr	r3, [r7, #16]
240080e2:	089b      	lsrs	r3, r3, #2
240080e4:	f003 0303 	and.w	r3, r3, #3
240080e8:	3302      	adds	r3, #2
240080ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
240080ee:	60bb      	str	r3, [r7, #8]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3UL - (linepos & 0x03UL)))) >> 24U);
240080f0:	693b      	ldr	r3, [r7, #16]
240080f2:	43db      	mvns	r3, r3
240080f4:	f003 0303 	and.w	r3, r3, #3
240080f8:	009b      	lsls	r3, r3, #2
240080fa:	68ba      	ldr	r2, [r7, #8]
240080fc:	fa02 f303 	lsl.w	r3, r2, r3
24008100:	0e1a      	lsrs	r2, r3, #24
24008102:	683b      	ldr	r3, [r7, #0]
24008104:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get default Pend Clear Source */
  pExtiConfig->PendClearSource = EXTI_D3_PENDCLR_SRC_NONE;
24008106:	683b      	ldr	r3, [r7, #0]
24008108:	2200      	movs	r2, #0
2400810a:	611a      	str	r2, [r3, #16]

  /* 3] Get D3 Pend Clear source */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
2400810c:	683b      	ldr	r3, [r7, #0]
2400810e:	681b      	ldr	r3, [r3, #0]
24008110:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
24008114:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24008118:	d135      	bne.n	24008186 <HAL_EXTI_GetConfigLine+0x1a2>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
2400811a:	697b      	ldr	r3, [r7, #20]
2400811c:	015a      	lsls	r2, r3, #5
2400811e:	4b21      	ldr	r3, [pc, #132]	; (240081a4 <HAL_EXTI_GetConfigLine+0x1c0>)
24008120:	4413      	add	r3, r2
24008122:	61fb      	str	r3, [r7, #28]
    if(((*regaddr) & linepos) != 0UL)
24008124:	69fb      	ldr	r3, [r7, #28]
24008126:	681a      	ldr	r2, [r3, #0]
24008128:	693b      	ldr	r3, [r7, #16]
2400812a:	4013      	ands	r3, r2
2400812c:	2b00      	cmp	r3, #0
2400812e:	d02a      	beq.n	24008186 <HAL_EXTI_GetConfigLine+0x1a2>
    {
      /* if wakeup target is any and PMR set, the read pend clear source from  D3PCRxL/H */
      if(linepos < 16UL)
24008130:	693b      	ldr	r3, [r7, #16]
24008132:	2b0f      	cmp	r3, #15
24008134:	d80a      	bhi.n	2400814c <HAL_EXTI_GetConfigLine+0x168>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24008136:	697b      	ldr	r3, [r7, #20]
24008138:	015a      	lsls	r2, r3, #5
2400813a:	4b1b      	ldr	r3, [pc, #108]	; (240081a8 <HAL_EXTI_GetConfigLine+0x1c4>)
2400813c:	4413      	add	r3, r2
2400813e:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24008140:	2201      	movs	r2, #1
24008142:	693b      	ldr	r3, [r7, #16]
24008144:	fa02 f303 	lsl.w	r3, r2, r3
24008148:	61bb      	str	r3, [r7, #24]
2400814a:	e00a      	b.n	24008162 <HAL_EXTI_GetConfigLine+0x17e>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
2400814c:	697b      	ldr	r3, [r7, #20]
2400814e:	015a      	lsls	r2, r3, #5
24008150:	4b16      	ldr	r3, [pc, #88]	; (240081ac <HAL_EXTI_GetConfigLine+0x1c8>)
24008152:	4413      	add	r3, r2
24008154:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
24008156:	693b      	ldr	r3, [r7, #16]
24008158:	3b10      	subs	r3, #16
2400815a:	2201      	movs	r2, #1
2400815c:	fa02 f303 	lsl.w	r3, r2, r3
24008160:	61bb      	str	r3, [r7, #24]
      }

      pExtiConfig->PendClearSource = 1UL + ((*regaddr & (pcrlinepos * pcrlinepos * 3UL)) / (pcrlinepos * pcrlinepos));
24008162:	69fb      	ldr	r3, [r7, #28]
24008164:	6819      	ldr	r1, [r3, #0]
24008166:	69bb      	ldr	r3, [r7, #24]
24008168:	fb03 f203 	mul.w	r2, r3, r3
2400816c:	4613      	mov	r3, r2
2400816e:	005b      	lsls	r3, r3, #1
24008170:	4413      	add	r3, r2
24008172:	ea01 0203 	and.w	r2, r1, r3
24008176:	69bb      	ldr	r3, [r7, #24]
24008178:	fb03 f303 	mul.w	r3, r3, r3
2400817c:	fbb2 f3f3 	udiv	r3, r2, r3
24008180:	1c5a      	adds	r2, r3, #1
24008182:	683b      	ldr	r3, [r7, #0]
24008184:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
24008186:	2300      	movs	r3, #0
}
24008188:	4618      	mov	r0, r3
2400818a:	3724      	adds	r7, #36	; 0x24
2400818c:	46bd      	mov	sp, r7
2400818e:	f85d 7b04 	ldr.w	r7, [sp], #4
24008192:	4770      	bx	lr
24008194:	58000080 	.word	0x58000080
24008198:	58000084 	.word	0x58000084
2400819c:	58000004 	.word	0x58000004
240081a0:	58000400 	.word	0x58000400
240081a4:	5800000c 	.word	0x5800000c
240081a8:	58000010 	.word	0x58000010
240081ac:	58000014 	.word	0x58000014

240081b0 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
240081b0:	b480      	push	{r7}
240081b2:	b089      	sub	sp, #36	; 0x24
240081b4:	af00      	add	r7, sp, #0
240081b6:	6078      	str	r0, [r7, #4]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if (hexti == NULL)
240081b8:	687b      	ldr	r3, [r7, #4]
240081ba:	2b00      	cmp	r3, #0
240081bc:	d101      	bne.n	240081c2 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
240081be:	2301      	movs	r3, #1
240081c0:	e0ab      	b.n	2400831a <HAL_EXTI_ClearConfigLine+0x16a>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240081c2:	687b      	ldr	r3, [r7, #4]
240081c4:	681b      	ldr	r3, [r3, #0]
240081c6:	0c1b      	lsrs	r3, r3, #16
240081c8:	f003 0303 	and.w	r3, r3, #3
240081cc:	617b      	str	r3, [r7, #20]
  linepos = (hexti->Line & EXTI_PIN_MASK);
240081ce:	687b      	ldr	r3, [r7, #4]
240081d0:	681b      	ldr	r3, [r3, #0]
240081d2:	f003 031f 	and.w	r3, r3, #31
240081d6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
240081d8:	2201      	movs	r2, #1
240081da:	693b      	ldr	r3, [r7, #16]
240081dc:	fa02 f303 	lsl.w	r3, r2, r3
240081e0:	60fb      	str	r3, [r7, #12]

  /* 1] Clear interrupt mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
240081e2:	697b      	ldr	r3, [r7, #20]
240081e4:	011a      	lsls	r2, r3, #4
240081e6:	4b50      	ldr	r3, [pc, #320]	; (24008328 <HAL_EXTI_ClearConfigLine+0x178>)
240081e8:	4413      	add	r3, r2
240081ea:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
240081ec:	69fb      	ldr	r3, [r7, #28]
240081ee:	681a      	ldr	r2, [r3, #0]
240081f0:	68fb      	ldr	r3, [r7, #12]
240081f2:	43db      	mvns	r3, r3
240081f4:	4013      	ands	r3, r2
240081f6:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
240081f8:	69fb      	ldr	r3, [r7, #28]
240081fa:	68ba      	ldr	r2, [r7, #8]
240081fc:	601a      	str	r2, [r3, #0]

  /* 2] Clear event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
240081fe:	697b      	ldr	r3, [r7, #20]
24008200:	011a      	lsls	r2, r3, #4
24008202:	4b4a      	ldr	r3, [pc, #296]	; (2400832c <HAL_EXTI_ClearConfigLine+0x17c>)
24008204:	4413      	add	r3, r2
24008206:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
24008208:	69fb      	ldr	r3, [r7, #28]
2400820a:	681a      	ldr	r2, [r3, #0]
2400820c:	68fb      	ldr	r3, [r7, #12]
2400820e:	43db      	mvns	r3, r3
24008210:	4013      	ands	r3, r2
24008212:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
24008214:	69fb      	ldr	r3, [r7, #28]
24008216:	68ba      	ldr	r2, [r7, #8]
24008218:	601a      	str	r2, [r3, #0]
  regval = (*regaddr & ~maskline);
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00U)
2400821a:	687b      	ldr	r3, [r7, #4]
2400821c:	681b      	ldr	r3, [r3, #0]
2400821e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24008222:	2b00      	cmp	r3, #0
24008224:	d03f      	beq.n	240082a6 <HAL_EXTI_ClearConfigLine+0xf6>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008226:	697b      	ldr	r3, [r7, #20]
24008228:	015b      	lsls	r3, r3, #5
2400822a:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
2400822e:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
24008230:	69fb      	ldr	r3, [r7, #28]
24008232:	681a      	ldr	r2, [r3, #0]
24008234:	68fb      	ldr	r3, [r7, #12]
24008236:	43db      	mvns	r3, r3
24008238:	4013      	ands	r3, r2
2400823a:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
2400823c:	69fb      	ldr	r3, [r7, #28]
2400823e:	68ba      	ldr	r2, [r7, #8]
24008240:	601a      	str	r2, [r3, #0]

    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008242:	697b      	ldr	r3, [r7, #20]
24008244:	015a      	lsls	r2, r3, #5
24008246:	4b3a      	ldr	r3, [pc, #232]	; (24008330 <HAL_EXTI_ClearConfigLine+0x180>)
24008248:	4413      	add	r3, r2
2400824a:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
2400824c:	69fb      	ldr	r3, [r7, #28]
2400824e:	681a      	ldr	r2, [r3, #0]
24008250:	68fb      	ldr	r3, [r7, #12]
24008252:	43db      	mvns	r3, r3
24008254:	4013      	ands	r3, r2
24008256:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
24008258:	69fb      	ldr	r3, [r7, #28]
2400825a:	68ba      	ldr	r2, [r7, #8]
2400825c:	601a      	str	r2, [r3, #0]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
2400825e:	687b      	ldr	r3, [r7, #4]
24008260:	681b      	ldr	r3, [r3, #0]
24008262:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
24008266:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2400826a:	d11c      	bne.n	240082a6 <HAL_EXTI_ClearConfigLine+0xf6>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
2400826c:	4a31      	ldr	r2, [pc, #196]	; (24008334 <HAL_EXTI_ClearConfigLine+0x184>)
2400826e:	693b      	ldr	r3, [r7, #16]
24008270:	089b      	lsrs	r3, r3, #2
24008272:	f003 0303 	and.w	r3, r3, #3
24008276:	3302      	adds	r3, #2
24008278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400827c:	60bb      	str	r3, [r7, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03UL)));
2400827e:	693b      	ldr	r3, [r7, #16]
24008280:	f003 0303 	and.w	r3, r3, #3
24008284:	009b      	lsls	r3, r3, #2
24008286:	220f      	movs	r2, #15
24008288:	fa02 f303 	lsl.w	r3, r2, r3
2400828c:	43db      	mvns	r3, r3
2400828e:	68ba      	ldr	r2, [r7, #8]
24008290:	4013      	ands	r3, r2
24008292:	60bb      	str	r3, [r7, #8]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
24008294:	4927      	ldr	r1, [pc, #156]	; (24008334 <HAL_EXTI_ClearConfigLine+0x184>)
24008296:	693b      	ldr	r3, [r7, #16]
24008298:	089b      	lsrs	r3, r3, #2
2400829a:	f003 0303 	and.w	r3, r3, #3
2400829e:	3302      	adds	r3, #2
240082a0:	68ba      	ldr	r2, [r7, #8]
240082a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* 4] Clear D3 Config lines */
  if ((hexti->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
240082a6:	687b      	ldr	r3, [r7, #4]
240082a8:	681b      	ldr	r3, [r3, #0]
240082aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
240082ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
240082b2:	d131      	bne.n	24008318 <HAL_EXTI_ClearConfigLine+0x168>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
240082b4:	697b      	ldr	r3, [r7, #20]
240082b6:	015a      	lsls	r2, r3, #5
240082b8:	4b1f      	ldr	r3, [pc, #124]	; (24008338 <HAL_EXTI_ClearConfigLine+0x188>)
240082ba:	4413      	add	r3, r2
240082bc:	61fb      	str	r3, [r7, #28]
    *regaddr = (*regaddr & ~maskline);
240082be:	69fb      	ldr	r3, [r7, #28]
240082c0:	681a      	ldr	r2, [r3, #0]
240082c2:	68fb      	ldr	r3, [r7, #12]
240082c4:	43db      	mvns	r3, r3
240082c6:	401a      	ands	r2, r3
240082c8:	69fb      	ldr	r3, [r7, #28]
240082ca:	601a      	str	r2, [r3, #0]

    if(linepos < 16UL)
240082cc:	693b      	ldr	r3, [r7, #16]
240082ce:	2b0f      	cmp	r3, #15
240082d0:	d80a      	bhi.n	240082e8 <HAL_EXTI_ClearConfigLine+0x138>
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
240082d2:	697b      	ldr	r3, [r7, #20]
240082d4:	015a      	lsls	r2, r3, #5
240082d6:	4b19      	ldr	r3, [pc, #100]	; (2400833c <HAL_EXTI_ClearConfigLine+0x18c>)
240082d8:	4413      	add	r3, r2
240082da:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << linepos;
240082dc:	2201      	movs	r2, #1
240082de:	693b      	ldr	r3, [r7, #16]
240082e0:	fa02 f303 	lsl.w	r3, r2, r3
240082e4:	61bb      	str	r3, [r7, #24]
240082e6:	e00a      	b.n	240082fe <HAL_EXTI_ClearConfigLine+0x14e>
    }
    else
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
240082e8:	697b      	ldr	r3, [r7, #20]
240082ea:	015a      	lsls	r2, r3, #5
240082ec:	4b14      	ldr	r3, [pc, #80]	; (24008340 <HAL_EXTI_ClearConfigLine+0x190>)
240082ee:	4413      	add	r3, r2
240082f0:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << (linepos - 16UL);
240082f2:	693b      	ldr	r3, [r7, #16]
240082f4:	3b10      	subs	r3, #16
240082f6:	2201      	movs	r2, #1
240082f8:	fa02 f303 	lsl.w	r3, r2, r3
240082fc:	61bb      	str	r3, [r7, #24]
    }

    /*Clear D3 PendClear source */
    *regaddr &= (~(pcrlinepos * pcrlinepos * 3UL));
240082fe:	69fb      	ldr	r3, [r7, #28]
24008300:	6819      	ldr	r1, [r3, #0]
24008302:	69bb      	ldr	r3, [r7, #24]
24008304:	fb03 f203 	mul.w	r2, r3, r3
24008308:	4613      	mov	r3, r2
2400830a:	005b      	lsls	r3, r3, #1
2400830c:	4413      	add	r3, r2
2400830e:	43db      	mvns	r3, r3
24008310:	ea01 0203 	and.w	r2, r1, r3
24008314:	69fb      	ldr	r3, [r7, #28]
24008316:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
24008318:	2300      	movs	r3, #0
}
2400831a:	4618      	mov	r0, r3
2400831c:	3724      	adds	r7, #36	; 0x24
2400831e:	46bd      	mov	sp, r7
24008320:	f85d 7b04 	ldr.w	r7, [sp], #4
24008324:	4770      	bx	lr
24008326:	bf00      	nop
24008328:	58000080 	.word	0x58000080
2400832c:	58000084 	.word	0x58000084
24008330:	58000004 	.word	0x58000004
24008334:	58000400 	.word	0x58000400
24008338:	5800000c 	.word	0x5800000c
2400833c:	58000010 	.word	0x58000010
24008340:	58000014 	.word	0x58000014

24008344 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
24008344:	b480      	push	{r7}
24008346:	b087      	sub	sp, #28
24008348:	af00      	add	r7, sp, #0
2400834a:	60f8      	str	r0, [r7, #12]
2400834c:	460b      	mov	r3, r1
2400834e:	607a      	str	r2, [r7, #4]
24008350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
24008352:	2300      	movs	r3, #0
24008354:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
24008356:	68fb      	ldr	r3, [r7, #12]
24008358:	2b00      	cmp	r3, #0
2400835a:	d101      	bne.n	24008360 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
2400835c:	2301      	movs	r3, #1
2400835e:	e00a      	b.n	24008376 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
24008360:	7afb      	ldrb	r3, [r7, #11]
24008362:	2b00      	cmp	r3, #0
24008364:	d103      	bne.n	2400836e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
24008366:	68fb      	ldr	r3, [r7, #12]
24008368:	687a      	ldr	r2, [r7, #4]
2400836a:	605a      	str	r2, [r3, #4]
      break;
2400836c:	e002      	b.n	24008374 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
2400836e:	2301      	movs	r3, #1
24008370:	75fb      	strb	r3, [r7, #23]
      break;
24008372:	bf00      	nop
  }

  return status;
24008374:	7dfb      	ldrb	r3, [r7, #23]
}
24008376:	4618      	mov	r0, r3
24008378:	371c      	adds	r7, #28
2400837a:	46bd      	mov	sp, r7
2400837c:	f85d 7b04 	ldr.w	r7, [sp], #4
24008380:	4770      	bx	lr

24008382 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
24008382:	b480      	push	{r7}
24008384:	b083      	sub	sp, #12
24008386:	af00      	add	r7, sp, #0
24008388:	6078      	str	r0, [r7, #4]
2400838a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
2400838c:	687b      	ldr	r3, [r7, #4]
2400838e:	2b00      	cmp	r3, #0
24008390:	d101      	bne.n	24008396 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
24008392:	2301      	movs	r3, #1
24008394:	e003      	b.n	2400839e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
24008396:	687b      	ldr	r3, [r7, #4]
24008398:	683a      	ldr	r2, [r7, #0]
2400839a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
2400839c:	2300      	movs	r3, #0
  }
}
2400839e:	4618      	mov	r0, r3
240083a0:	370c      	adds	r7, #12
240083a2:	46bd      	mov	sp, r7
240083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240083a8:	4770      	bx	lr
	...

240083ac <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
240083ac:	b580      	push	{r7, lr}
240083ae:	b086      	sub	sp, #24
240083b0:	af00      	add	r7, sp, #0
240083b2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240083b4:	687b      	ldr	r3, [r7, #4]
240083b6:	681b      	ldr	r3, [r3, #0]
240083b8:	0c1b      	lsrs	r3, r3, #16
240083ba:	f003 0303 	and.w	r3, r3, #3
240083be:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
240083c0:	687b      	ldr	r3, [r7, #4]
240083c2:	681b      	ldr	r3, [r3, #0]
240083c4:	f003 031f 	and.w	r3, r3, #31
240083c8:	2201      	movs	r2, #1
240083ca:	fa02 f303 	lsl.w	r3, r2, r3
240083ce:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
240083d0:	697b      	ldr	r3, [r7, #20]
240083d2:	011a      	lsls	r2, r3, #4
240083d4:	4b0c      	ldr	r3, [pc, #48]	; (24008408 <HAL_EXTI_IRQHandler+0x5c>)
240083d6:	4413      	add	r3, r2
240083d8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
240083da:	68fb      	ldr	r3, [r7, #12]
240083dc:	681b      	ldr	r3, [r3, #0]
240083de:	693a      	ldr	r2, [r7, #16]
240083e0:	4013      	ands	r3, r2
240083e2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
240083e4:	68bb      	ldr	r3, [r7, #8]
240083e6:	2b00      	cmp	r3, #0
240083e8:	d009      	beq.n	240083fe <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
240083ea:	68fb      	ldr	r3, [r7, #12]
240083ec:	693a      	ldr	r2, [r7, #16]
240083ee:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
240083f0:	687b      	ldr	r3, [r7, #4]
240083f2:	685b      	ldr	r3, [r3, #4]
240083f4:	2b00      	cmp	r3, #0
240083f6:	d002      	beq.n	240083fe <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
240083f8:	687b      	ldr	r3, [r7, #4]
240083fa:	685b      	ldr	r3, [r3, #4]
240083fc:	4798      	blx	r3
    }
  }
}
240083fe:	bf00      	nop
24008400:	3718      	adds	r7, #24
24008402:	46bd      	mov	sp, r7
24008404:	bd80      	pop	{r7, pc}
24008406:	bf00      	nop
24008408:	58000088 	.word	0x58000088

2400840c <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
2400840c:	b480      	push	{r7}
2400840e:	b089      	sub	sp, #36	; 0x24
24008410:	af00      	add	r7, sp, #0
24008412:	6078      	str	r0, [r7, #4]
24008414:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008416:	687b      	ldr	r3, [r7, #4]
24008418:	681b      	ldr	r3, [r3, #0]
2400841a:	0c1b      	lsrs	r3, r3, #16
2400841c:	f003 0303 	and.w	r3, r3, #3
24008420:	61fb      	str	r3, [r7, #28]
  linepos = (hexti->Line & EXTI_PIN_MASK);
24008422:	687b      	ldr	r3, [r7, #4]
24008424:	681b      	ldr	r3, [r3, #0]
24008426:	f003 031f 	and.w	r3, r3, #31
2400842a:	61bb      	str	r3, [r7, #24]
  maskline = (1UL << linepos);
2400842c:	2201      	movs	r2, #1
2400842e:	69bb      	ldr	r3, [r7, #24]
24008430:	fa02 f303 	lsl.w	r3, r2, r3
24008434:	617b      	str	r3, [r7, #20]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
24008436:	69fb      	ldr	r3, [r7, #28]
24008438:	011a      	lsls	r2, r3, #4
2400843a:	4b09      	ldr	r3, [pc, #36]	; (24008460 <HAL_EXTI_GetPending+0x54>)
2400843c:	4413      	add	r3, r2
2400843e:	613b      	str	r3, [r7, #16]
#endif /* DUAL_CORE */

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
24008440:	693b      	ldr	r3, [r7, #16]
24008442:	681a      	ldr	r2, [r3, #0]
24008444:	697b      	ldr	r3, [r7, #20]
24008446:	401a      	ands	r2, r3
24008448:	69bb      	ldr	r3, [r7, #24]
2400844a:	fa22 f303 	lsr.w	r3, r2, r3
2400844e:	60fb      	str	r3, [r7, #12]
  return regval;
24008450:	68fb      	ldr	r3, [r7, #12]
}
24008452:	4618      	mov	r0, r3
24008454:	3724      	adds	r7, #36	; 0x24
24008456:	46bd      	mov	sp, r7
24008458:	f85d 7b04 	ldr.w	r7, [sp], #4
2400845c:	4770      	bx	lr
2400845e:	bf00      	nop
24008460:	58000088 	.word	0x58000088

24008464 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
24008464:	b480      	push	{r7}
24008466:	b087      	sub	sp, #28
24008468:	af00      	add	r7, sp, #0
2400846a:	6078      	str	r0, [r7, #4]
2400846c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
2400846e:	687b      	ldr	r3, [r7, #4]
24008470:	681b      	ldr	r3, [r3, #0]
24008472:	0c1b      	lsrs	r3, r3, #16
24008474:	f003 0303 	and.w	r3, r3, #3
24008478:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
2400847a:	687b      	ldr	r3, [r7, #4]
2400847c:	681b      	ldr	r3, [r3, #0]
2400847e:	f003 031f 	and.w	r3, r3, #31
24008482:	2201      	movs	r2, #1
24008484:	fa02 f303 	lsl.w	r3, r2, r3
24008488:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
2400848a:	697b      	ldr	r3, [r7, #20]
2400848c:	011a      	lsls	r2, r3, #4
2400848e:	4b06      	ldr	r3, [pc, #24]	; (240084a8 <HAL_EXTI_ClearPending+0x44>)
24008490:	4413      	add	r3, r2
24008492:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Clear Pending bit */
  *regaddr =  maskline;
24008494:	68fb      	ldr	r3, [r7, #12]
24008496:	693a      	ldr	r2, [r7, #16]
24008498:	601a      	str	r2, [r3, #0]
}
2400849a:	bf00      	nop
2400849c:	371c      	adds	r7, #28
2400849e:	46bd      	mov	sp, r7
240084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
240084a4:	4770      	bx	lr
240084a6:	bf00      	nop
240084a8:	58000088 	.word	0x58000088

240084ac <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
240084ac:	b480      	push	{r7}
240084ae:	b087      	sub	sp, #28
240084b0:	af00      	add	r7, sp, #0
240084b2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240084b4:	687b      	ldr	r3, [r7, #4]
240084b6:	681b      	ldr	r3, [r3, #0]
240084b8:	0c1b      	lsrs	r3, r3, #16
240084ba:	f003 0303 	and.w	r3, r3, #3
240084be:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
240084c0:	687b      	ldr	r3, [r7, #4]
240084c2:	681b      	ldr	r3, [r3, #0]
240084c4:	f003 031f 	and.w	r3, r3, #31
240084c8:	2201      	movs	r2, #1
240084ca:	fa02 f303 	lsl.w	r3, r2, r3
240084ce:	613b      	str	r3, [r7, #16]

  regaddr = (__IO uint32_t *)(&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
240084d0:	697b      	ldr	r3, [r7, #20]
240084d2:	015a      	lsls	r2, r3, #5
240084d4:	4b05      	ldr	r3, [pc, #20]	; (240084ec <HAL_EXTI_GenerateSWI+0x40>)
240084d6:	4413      	add	r3, r2
240084d8:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
240084da:	68fb      	ldr	r3, [r7, #12]
240084dc:	693a      	ldr	r2, [r7, #16]
240084de:	601a      	str	r2, [r3, #0]
}
240084e0:	bf00      	nop
240084e2:	371c      	adds	r7, #28
240084e4:	46bd      	mov	sp, r7
240084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
240084ea:	4770      	bx	lr
240084ec:	58000008 	.word	0x58000008

240084f0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
240084f0:	b580      	push	{r7, lr}
240084f2:	b08a      	sub	sp, #40	; 0x28
240084f4:	af00      	add	r7, sp, #0
240084f6:	60f8      	str	r0, [r7, #12]
240084f8:	60b9      	str	r1, [r7, #8]
240084fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
240084fc:	68bb      	ldr	r3, [r7, #8]
240084fe:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
24008500:	687b      	ldr	r3, [r7, #4]
24008502:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
24008504:	2308      	movs	r3, #8
24008506:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008508:	4b2e      	ldr	r3, [pc, #184]	; (240085c4 <HAL_FLASH_Program+0xd4>)
2400850a:	7d1b      	ldrb	r3, [r3, #20]
2400850c:	2b01      	cmp	r3, #1
2400850e:	d101      	bne.n	24008514 <HAL_FLASH_Program+0x24>
24008510:	2302      	movs	r3, #2
24008512:	e053      	b.n	240085bc <HAL_FLASH_Program+0xcc>
24008514:	4b2b      	ldr	r3, [pc, #172]	; (240085c4 <HAL_FLASH_Program+0xd4>)
24008516:	2201      	movs	r2, #1
24008518:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
2400851a:	68bb      	ldr	r3, [r7, #8]
2400851c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24008520:	d315      	bcc.n	2400854e <HAL_FLASH_Program+0x5e>
24008522:	68bb      	ldr	r3, [r7, #8]
24008524:	4a28      	ldr	r2, [pc, #160]	; (240085c8 <HAL_FLASH_Program+0xd8>)
24008526:	4293      	cmp	r3, r2
24008528:	d811      	bhi.n	2400854e <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
2400852a:	2301      	movs	r3, #1
2400852c:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2400852e:	4b25      	ldr	r3, [pc, #148]	; (240085c4 <HAL_FLASH_Program+0xd4>)
24008530:	2200      	movs	r2, #0
24008532:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24008534:	6979      	ldr	r1, [r7, #20]
24008536:	f24c 3050 	movw	r0, #50000	; 0xc350
2400853a:	f000 fa1d 	bl	24008978 <FLASH_WaitForLastOperation>
2400853e:	4603      	mov	r3, r0
24008540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
24008544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
24008548:	2b00      	cmp	r3, #0
2400854a:	d002      	beq.n	24008552 <HAL_FLASH_Program+0x62>
2400854c:	e031      	b.n	240085b2 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
2400854e:	2301      	movs	r3, #1
24008550:	e034      	b.n	240085bc <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
24008552:	4b1e      	ldr	r3, [pc, #120]	; (240085cc <HAL_FLASH_Program+0xdc>)
24008554:	68db      	ldr	r3, [r3, #12]
24008556:	4a1d      	ldr	r2, [pc, #116]	; (240085cc <HAL_FLASH_Program+0xdc>)
24008558:	f043 0302 	orr.w	r3, r3, #2
2400855c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
2400855e:	f3bf 8f6f 	isb	sy
}
24008562:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
24008564:	f3bf 8f4f 	dsb	sy
}
24008568:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
2400856a:	69fb      	ldr	r3, [r7, #28]
2400856c:	681a      	ldr	r2, [r3, #0]
2400856e:	6a3b      	ldr	r3, [r7, #32]
24008570:	601a      	str	r2, [r3, #0]
        dest_addr++;
24008572:	6a3b      	ldr	r3, [r7, #32]
24008574:	3304      	adds	r3, #4
24008576:	623b      	str	r3, [r7, #32]
        src_addr++;
24008578:	69fb      	ldr	r3, [r7, #28]
2400857a:	3304      	adds	r3, #4
2400857c:	61fb      	str	r3, [r7, #28]
        row_index--;
2400857e:	7efb      	ldrb	r3, [r7, #27]
24008580:	3b01      	subs	r3, #1
24008582:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
24008584:	7efb      	ldrb	r3, [r7, #27]
24008586:	2b00      	cmp	r3, #0
24008588:	d1ef      	bne.n	2400856a <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
2400858a:	f3bf 8f6f 	isb	sy
}
2400858e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
24008590:	f3bf 8f4f 	dsb	sy
}
24008594:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24008596:	6979      	ldr	r1, [r7, #20]
24008598:	f24c 3050 	movw	r0, #50000	; 0xc350
2400859c:	f000 f9ec 	bl	24008978 <FLASH_WaitForLastOperation>
240085a0:	4603      	mov	r3, r0
240085a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
240085a6:	4b09      	ldr	r3, [pc, #36]	; (240085cc <HAL_FLASH_Program+0xdc>)
240085a8:	68db      	ldr	r3, [r3, #12]
240085aa:	4a08      	ldr	r2, [pc, #32]	; (240085cc <HAL_FLASH_Program+0xdc>)
240085ac:	f023 0302 	bic.w	r3, r3, #2
240085b0:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
240085b2:	4b04      	ldr	r3, [pc, #16]	; (240085c4 <HAL_FLASH_Program+0xd4>)
240085b4:	2200      	movs	r2, #0
240085b6:	751a      	strb	r2, [r3, #20]

  return status;
240085b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
240085bc:	4618      	mov	r0, r3
240085be:	3728      	adds	r7, #40	; 0x28
240085c0:	46bd      	mov	sp, r7
240085c2:	bd80      	pop	{r7, pc}
240085c4:	24000598 	.word	0x24000598
240085c8:	0801ffff 	.word	0x0801ffff
240085cc:	52002000 	.word	0x52002000

240085d0 <HAL_FLASH_Program_IT>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
240085d0:	b580      	push	{r7, lr}
240085d2:	b08a      	sub	sp, #40	; 0x28
240085d4:	af00      	add	r7, sp, #0
240085d6:	60f8      	str	r0, [r7, #12]
240085d8:	60b9      	str	r1, [r7, #8]
240085da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t*)FlashAddress;
240085dc:	68bb      	ldr	r3, [r7, #8]
240085de:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
240085e0:	687b      	ldr	r3, [r7, #4]
240085e2:	623b      	str	r3, [r7, #32]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
240085e4:	2308      	movs	r3, #8
240085e6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
240085e8:	4b2c      	ldr	r3, [pc, #176]	; (2400869c <HAL_FLASH_Program_IT+0xcc>)
240085ea:	7d1b      	ldrb	r3, [r3, #20]
240085ec:	2b01      	cmp	r3, #1
240085ee:	d101      	bne.n	240085f4 <HAL_FLASH_Program_IT+0x24>
240085f0:	2302      	movs	r3, #2
240085f2:	e04f      	b.n	24008694 <HAL_FLASH_Program_IT+0xc4>
240085f4:	4b29      	ldr	r3, [pc, #164]	; (2400869c <HAL_FLASH_Program_IT+0xcc>)
240085f6:	2201      	movs	r2, #1
240085f8:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
240085fa:	4b28      	ldr	r3, [pc, #160]	; (2400869c <HAL_FLASH_Program_IT+0xcc>)
240085fc:	2200      	movs	r2, #0
240085fe:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
24008600:	68bb      	ldr	r3, [r7, #8]
24008602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24008606:	d310      	bcc.n	2400862a <HAL_FLASH_Program_IT+0x5a>
24008608:	68bb      	ldr	r3, [r7, #8]
2400860a:	4a25      	ldr	r2, [pc, #148]	; (240086a0 <HAL_FLASH_Program_IT+0xd0>)
2400860c:	4293      	cmp	r3, r2
2400860e:	d80c      	bhi.n	2400862a <HAL_FLASH_Program_IT+0x5a>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
24008610:	2301      	movs	r3, #1
24008612:	61bb      	str	r3, [r7, #24]
  {
    return HAL_ERROR;
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24008614:	69b9      	ldr	r1, [r7, #24]
24008616:	f24c 3050 	movw	r0, #50000	; 0xc350
2400861a:	f000 f9ad 	bl	24008978 <FLASH_WaitForLastOperation>
2400861e:	4603      	mov	r3, r0
24008620:	75fb      	strb	r3, [r7, #23]

  if (status != HAL_OK)
24008622:	7dfb      	ldrb	r3, [r7, #23]
24008624:	2b00      	cmp	r3, #0
24008626:	d102      	bne.n	2400862e <HAL_FLASH_Program_IT+0x5e>
24008628:	e005      	b.n	24008636 <HAL_FLASH_Program_IT+0x66>
    return HAL_ERROR;
2400862a:	2301      	movs	r3, #1
2400862c:	e032      	b.n	24008694 <HAL_FLASH_Program_IT+0xc4>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
2400862e:	4b1b      	ldr	r3, [pc, #108]	; (2400869c <HAL_FLASH_Program_IT+0xcc>)
24008630:	2200      	movs	r2, #0
24008632:	751a      	strb	r2, [r3, #20]
24008634:	e02d      	b.n	24008692 <HAL_FLASH_Program_IT+0xc2>
  }
  else
  {
    pFlash.Address = FlashAddress;
24008636:	4a19      	ldr	r2, [pc, #100]	; (2400869c <HAL_FLASH_Program_IT+0xcc>)
24008638:	68bb      	ldr	r3, [r7, #8]
2400863a:	6113      	str	r3, [r2, #16]
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#else /* Single Bank */
    /* Set internal variables used by the IRQ handler */
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK1;
2400863c:	4b17      	ldr	r3, [pc, #92]	; (2400869c <HAL_FLASH_Program_IT+0xcc>)
2400863e:	2203      	movs	r2, #3
24008640:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR1, FLASH_CR_PG);
24008642:	4b18      	ldr	r3, [pc, #96]	; (240086a4 <HAL_FLASH_Program_IT+0xd4>)
24008644:	68db      	ldr	r3, [r3, #12]
24008646:	4a17      	ldr	r2, [pc, #92]	; (240086a4 <HAL_FLASH_Program_IT+0xd4>)
24008648:	f043 0302 	orr.w	r3, r3, #2
2400864c:	60d3      	str	r3, [r2, #12]
    }

      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
2400864e:	4b15      	ldr	r3, [pc, #84]	; (240086a4 <HAL_FLASH_Program_IT+0xd4>)
24008650:	68db      	ldr	r3, [r3, #12]
24008652:	4a14      	ldr	r2, [pc, #80]	; (240086a4 <HAL_FLASH_Program_IT+0xd4>)
24008654:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
24008658:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
2400865a:	f3bf 8f6f 	isb	sy
}
2400865e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
24008660:	f3bf 8f4f 	dsb	sy
}
24008664:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
24008666:	6a3b      	ldr	r3, [r7, #32]
24008668:	681a      	ldr	r2, [r3, #0]
2400866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400866c:	601a      	str	r2, [r3, #0]
        dest_addr++;
2400866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24008670:	3304      	adds	r3, #4
24008672:	627b      	str	r3, [r7, #36]	; 0x24
        src_addr++;
24008674:	6a3b      	ldr	r3, [r7, #32]
24008676:	3304      	adds	r3, #4
24008678:	623b      	str	r3, [r7, #32]
        row_index--;
2400867a:	7ffb      	ldrb	r3, [r7, #31]
2400867c:	3b01      	subs	r3, #1
2400867e:	77fb      	strb	r3, [r7, #31]
      } while (row_index != 0U);
24008680:	7ffb      	ldrb	r3, [r7, #31]
24008682:	2b00      	cmp	r3, #0
24008684:	d1ef      	bne.n	24008666 <HAL_FLASH_Program_IT+0x96>
  __ASM volatile ("isb 0xF":::"memory");
24008686:	f3bf 8f6f 	isb	sy
}
2400868a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
2400868c:	f3bf 8f4f 	dsb	sy
}
24008690:	bf00      	nop

    __ISB();
    __DSB();
  }

  return status;
24008692:	7dfb      	ldrb	r3, [r7, #23]
}
24008694:	4618      	mov	r0, r3
24008696:	3728      	adds	r7, #40	; 0x28
24008698:	46bd      	mov	sp, r7
2400869a:	bd80      	pop	{r7, pc}
2400869c:	24000598 	.word	0x24000598
240086a0:	0801ffff 	.word	0x0801ffff
240086a4:	52002000 	.word	0x52002000

240086a8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
240086a8:	b580      	push	{r7, lr}
240086aa:	b084      	sub	sp, #16
240086ac:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
240086ae:	4b53      	ldr	r3, [pc, #332]	; (240087fc <HAL_FLASH_IRQHandler+0x154>)
240086b0:	691b      	ldr	r3, [r3, #16]
240086b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240086b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240086ba:	d15c      	bne.n	24008776 <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
240086bc:	4b50      	ldr	r3, [pc, #320]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086be:	781b      	ldrb	r3, [r3, #0]
240086c0:	b2db      	uxtb	r3, r3
240086c2:	2b01      	cmp	r3, #1
240086c4:	d132      	bne.n	2400872c <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
240086c6:	4b4e      	ldr	r3, [pc, #312]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086c8:	685b      	ldr	r3, [r3, #4]
240086ca:	3b01      	subs	r3, #1
240086cc:	4a4c      	ldr	r2, [pc, #304]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086ce:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
240086d0:	4b4b      	ldr	r3, [pc, #300]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086d2:	685b      	ldr	r3, [r3, #4]
240086d4:	2b00      	cmp	r3, #0
240086d6:	d018      	beq.n	2400870a <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
240086d8:	4b49      	ldr	r3, [pc, #292]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086da:	68db      	ldr	r3, [r3, #12]
240086dc:	4618      	mov	r0, r3
240086de:	f000 f891 	bl	24008804 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
240086e2:	4b46      	ldr	r3, [pc, #280]	; (240087fc <HAL_FLASH_IRQHandler+0x154>)
240086e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
240086e8:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
240086ea:	4b45      	ldr	r3, [pc, #276]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086ec:	68db      	ldr	r3, [r3, #12]
240086ee:	3301      	adds	r3, #1
240086f0:	4a43      	ldr	r2, [pc, #268]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086f2:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
240086f4:	4b42      	ldr	r3, [pc, #264]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086f6:	68db      	ldr	r3, [r3, #12]
240086f8:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
240086fa:	4b41      	ldr	r3, [pc, #260]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240086fc:	689b      	ldr	r3, [r3, #8]
240086fe:	461a      	mov	r2, r3
24008700:	2101      	movs	r1, #1
24008702:	68f8      	ldr	r0, [r7, #12]
24008704:	f000 fcd6 	bl	240090b4 <FLASH_Erase_Sector>
24008708:	e035      	b.n	24008776 <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
2400870a:	4b3d      	ldr	r3, [pc, #244]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
2400870c:	f04f 32ff 	mov.w	r2, #4294967295
24008710:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24008712:	4b3b      	ldr	r3, [pc, #236]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
24008714:	2200      	movs	r2, #0
24008716:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
24008718:	4b39      	ldr	r3, [pc, #228]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
2400871a:	68db      	ldr	r3, [r3, #12]
2400871c:	4618      	mov	r0, r3
2400871e:	f000 f871 	bl	24008804 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24008722:	4b36      	ldr	r3, [pc, #216]	; (240087fc <HAL_FLASH_IRQHandler+0x154>)
24008724:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008728:	615a      	str	r2, [r3, #20]
2400872a:	e024      	b.n	24008776 <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
2400872c:	4b34      	ldr	r3, [pc, #208]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
2400872e:	781b      	ldrb	r3, [r3, #0]
24008730:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
24008732:	7afb      	ldrb	r3, [r7, #11]
24008734:	2b02      	cmp	r3, #2
24008736:	d002      	beq.n	2400873e <HAL_FLASH_IRQHandler+0x96>
24008738:	7afb      	ldrb	r3, [r7, #11]
2400873a:	2b07      	cmp	r3, #7
2400873c:	d103      	bne.n	24008746 <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
2400873e:	2001      	movs	r0, #1
24008740:	f000 f860 	bl	24008804 <HAL_FLASH_EndOfOperationCallback>
24008744:	e007      	b.n	24008756 <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
24008746:	7afb      	ldrb	r3, [r7, #11]
24008748:	2b03      	cmp	r3, #3
2400874a:	d104      	bne.n	24008756 <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
2400874c:	4b2c      	ldr	r3, [pc, #176]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
2400874e:	691b      	ldr	r3, [r3, #16]
24008750:	4618      	mov	r0, r3
24008752:	f000 f857 	bl	24008804 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
24008756:	7afb      	ldrb	r3, [r7, #11]
24008758:	2b04      	cmp	r3, #4
2400875a:	d00c      	beq.n	24008776 <HAL_FLASH_IRQHandler+0xce>
2400875c:	7afb      	ldrb	r3, [r7, #11]
2400875e:	2b05      	cmp	r3, #5
24008760:	d009      	beq.n	24008776 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
24008762:	7afb      	ldrb	r3, [r7, #11]
24008764:	2b06      	cmp	r3, #6
24008766:	d006      	beq.n	24008776 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24008768:	4b25      	ldr	r3, [pc, #148]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
2400876a:	2200      	movs	r2, #0
2400876c:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
2400876e:	4b23      	ldr	r3, [pc, #140]	; (240087fc <HAL_FLASH_IRQHandler+0x154>)
24008770:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008774:	615a      	str	r2, [r3, #20]
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
24008776:	4b21      	ldr	r3, [pc, #132]	; (240087fc <HAL_FLASH_IRQHandler+0x154>)
24008778:	691b      	ldr	r3, [r3, #16]
2400877a:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
2400877e:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
24008780:	687b      	ldr	r3, [r7, #4]
24008782:	2b00      	cmp	r3, #0
24008784:	d028      	beq.n	240087d8 <HAL_FLASH_IRQHandler+0x130>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
24008786:	4b1e      	ldr	r3, [pc, #120]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
24008788:	699a      	ldr	r2, [r3, #24]
2400878a:	687b      	ldr	r3, [r7, #4]
2400878c:	4313      	orrs	r3, r2
2400878e:	4a1c      	ldr	r2, [pc, #112]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
24008790:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
24008792:	4a1a      	ldr	r2, [pc, #104]	; (240087fc <HAL_FLASH_IRQHandler+0x154>)
24008794:	687b      	ldr	r3, [r7, #4]
24008796:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
24008798:	4b19      	ldr	r3, [pc, #100]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
2400879a:	781b      	ldrb	r3, [r3, #0]
2400879c:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
2400879e:	7afb      	ldrb	r3, [r7, #11]
240087a0:	2b01      	cmp	r3, #1
240087a2:	d107      	bne.n	240087b4 <HAL_FLASH_IRQHandler+0x10c>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
240087a4:	4b16      	ldr	r3, [pc, #88]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240087a6:	68db      	ldr	r3, [r3, #12]
240087a8:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
240087aa:	4b15      	ldr	r3, [pc, #84]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240087ac:	f04f 32ff 	mov.w	r2, #4294967295
240087b0:	60da      	str	r2, [r3, #12]
240087b2:	e00b      	b.n	240087cc <HAL_FLASH_IRQHandler+0x124>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
240087b4:	7afb      	ldrb	r3, [r7, #11]
240087b6:	2b02      	cmp	r3, #2
240087b8:	d002      	beq.n	240087c0 <HAL_FLASH_IRQHandler+0x118>
240087ba:	7afb      	ldrb	r3, [r7, #11]
240087bc:	2b07      	cmp	r3, #7
240087be:	d102      	bne.n	240087c6 <HAL_FLASH_IRQHandler+0x11e>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
240087c0:	2301      	movs	r3, #1
240087c2:	60fb      	str	r3, [r7, #12]
240087c4:	e002      	b.n	240087cc <HAL_FLASH_IRQHandler+0x124>
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
240087c6:	4b0e      	ldr	r3, [pc, #56]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240087c8:	691b      	ldr	r3, [r3, #16]
240087ca:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
240087cc:	4b0c      	ldr	r3, [pc, #48]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240087ce:	2200      	movs	r2, #0
240087d0:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
240087d2:	68f8      	ldr	r0, [r7, #12]
240087d4:	f000 f820 	bl	24008818 <HAL_FLASH_OperationErrorCallback>
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
  }
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
240087d8:	4b09      	ldr	r3, [pc, #36]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240087da:	781b      	ldrb	r3, [r3, #0]
240087dc:	b2db      	uxtb	r3, r3
240087de:	2b00      	cmp	r3, #0
240087e0:	d108      	bne.n	240087f4 <HAL_FLASH_IRQHandler+0x14c>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
240087e2:	4b06      	ldr	r3, [pc, #24]	; (240087fc <HAL_FLASH_IRQHandler+0x154>)
240087e4:	68db      	ldr	r3, [r3, #12]
240087e6:	4a05      	ldr	r2, [pc, #20]	; (240087fc <HAL_FLASH_IRQHandler+0x154>)
240087e8:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
240087ec:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
240087ee:	4b04      	ldr	r3, [pc, #16]	; (24008800 <HAL_FLASH_IRQHandler+0x158>)
240087f0:	2200      	movs	r2, #0
240087f2:	751a      	strb	r2, [r3, #20]
  }
}
240087f4:	bf00      	nop
240087f6:	3710      	adds	r7, #16
240087f8:	46bd      	mov	sp, r7
240087fa:	bd80      	pop	{r7, pc}
240087fc:	52002000 	.word	0x52002000
24008800:	24000598 	.word	0x24000598

24008804 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
24008804:	b480      	push	{r7}
24008806:	b083      	sub	sp, #12
24008808:	af00      	add	r7, sp, #0
2400880a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
2400880c:	bf00      	nop
2400880e:	370c      	adds	r7, #12
24008810:	46bd      	mov	sp, r7
24008812:	f85d 7b04 	ldr.w	r7, [sp], #4
24008816:	4770      	bx	lr

24008818 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
24008818:	b480      	push	{r7}
2400881a:	b083      	sub	sp, #12
2400881c:	af00      	add	r7, sp, #0
2400881e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
24008820:	bf00      	nop
24008822:	370c      	adds	r7, #12
24008824:	46bd      	mov	sp, r7
24008826:	f85d 7b04 	ldr.w	r7, [sp], #4
2400882a:	4770      	bx	lr

2400882c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
2400882c:	b480      	push	{r7}
2400882e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008830:	4b0c      	ldr	r3, [pc, #48]	; (24008864 <HAL_FLASH_Unlock+0x38>)
24008832:	68db      	ldr	r3, [r3, #12]
24008834:	f003 0301 	and.w	r3, r3, #1
24008838:	2b00      	cmp	r3, #0
2400883a:	d00d      	beq.n	24008858 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
2400883c:	4b09      	ldr	r3, [pc, #36]	; (24008864 <HAL_FLASH_Unlock+0x38>)
2400883e:	4a0a      	ldr	r2, [pc, #40]	; (24008868 <HAL_FLASH_Unlock+0x3c>)
24008840:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
24008842:	4b08      	ldr	r3, [pc, #32]	; (24008864 <HAL_FLASH_Unlock+0x38>)
24008844:	4a09      	ldr	r2, [pc, #36]	; (2400886c <HAL_FLASH_Unlock+0x40>)
24008846:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008848:	4b06      	ldr	r3, [pc, #24]	; (24008864 <HAL_FLASH_Unlock+0x38>)
2400884a:	68db      	ldr	r3, [r3, #12]
2400884c:	f003 0301 	and.w	r3, r3, #1
24008850:	2b00      	cmp	r3, #0
24008852:	d001      	beq.n	24008858 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
24008854:	2301      	movs	r3, #1
24008856:	e000      	b.n	2400885a <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24008858:	2300      	movs	r3, #0
}
2400885a:	4618      	mov	r0, r3
2400885c:	46bd      	mov	sp, r7
2400885e:	f85d 7b04 	ldr.w	r7, [sp], #4
24008862:	4770      	bx	lr
24008864:	52002000 	.word	0x52002000
24008868:	45670123 	.word	0x45670123
2400886c:	cdef89ab 	.word	0xcdef89ab

24008870 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
24008870:	b480      	push	{r7}
24008872:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
24008874:	4b09      	ldr	r3, [pc, #36]	; (2400889c <HAL_FLASH_Lock+0x2c>)
24008876:	68db      	ldr	r3, [r3, #12]
24008878:	4a08      	ldr	r2, [pc, #32]	; (2400889c <HAL_FLASH_Lock+0x2c>)
2400887a:	f043 0301 	orr.w	r3, r3, #1
2400887e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
24008880:	4b06      	ldr	r3, [pc, #24]	; (2400889c <HAL_FLASH_Lock+0x2c>)
24008882:	68db      	ldr	r3, [r3, #12]
24008884:	f003 0301 	and.w	r3, r3, #1
24008888:	2b00      	cmp	r3, #0
2400888a:	d101      	bne.n	24008890 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
2400888c:	2301      	movs	r3, #1
2400888e:	e000      	b.n	24008892 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24008890:	2300      	movs	r3, #0
}
24008892:	4618      	mov	r0, r3
24008894:	46bd      	mov	sp, r7
24008896:	f85d 7b04 	ldr.w	r7, [sp], #4
2400889a:	4770      	bx	lr
2400889c:	52002000 	.word	0x52002000

240088a0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
240088a0:	b480      	push	{r7}
240088a2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
240088a4:	4b0c      	ldr	r3, [pc, #48]	; (240088d8 <HAL_FLASH_OB_Unlock+0x38>)
240088a6:	699b      	ldr	r3, [r3, #24]
240088a8:	f003 0301 	and.w	r3, r3, #1
240088ac:	2b00      	cmp	r3, #0
240088ae:	d00d      	beq.n	240088cc <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
240088b0:	4b09      	ldr	r3, [pc, #36]	; (240088d8 <HAL_FLASH_OB_Unlock+0x38>)
240088b2:	4a0a      	ldr	r2, [pc, #40]	; (240088dc <HAL_FLASH_OB_Unlock+0x3c>)
240088b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
240088b6:	4b08      	ldr	r3, [pc, #32]	; (240088d8 <HAL_FLASH_OB_Unlock+0x38>)
240088b8:	4a09      	ldr	r2, [pc, #36]	; (240088e0 <HAL_FLASH_OB_Unlock+0x40>)
240088ba:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
240088bc:	4b06      	ldr	r3, [pc, #24]	; (240088d8 <HAL_FLASH_OB_Unlock+0x38>)
240088be:	699b      	ldr	r3, [r3, #24]
240088c0:	f003 0301 	and.w	r3, r3, #1
240088c4:	2b00      	cmp	r3, #0
240088c6:	d001      	beq.n	240088cc <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
240088c8:	2301      	movs	r3, #1
240088ca:	e000      	b.n	240088ce <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
240088cc:	2300      	movs	r3, #0
}
240088ce:	4618      	mov	r0, r3
240088d0:	46bd      	mov	sp, r7
240088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
240088d6:	4770      	bx	lr
240088d8:	52002000 	.word	0x52002000
240088dc:	08192a3b 	.word	0x08192a3b
240088e0:	4c5d6e7f 	.word	0x4c5d6e7f

240088e4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
240088e4:	b480      	push	{r7}
240088e6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
240088e8:	4b09      	ldr	r3, [pc, #36]	; (24008910 <HAL_FLASH_OB_Lock+0x2c>)
240088ea:	699b      	ldr	r3, [r3, #24]
240088ec:	4a08      	ldr	r2, [pc, #32]	; (24008910 <HAL_FLASH_OB_Lock+0x2c>)
240088ee:	f043 0301 	orr.w	r3, r3, #1
240088f2:	6193      	str	r3, [r2, #24]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) == 0U)
240088f4:	4b06      	ldr	r3, [pc, #24]	; (24008910 <HAL_FLASH_OB_Lock+0x2c>)
240088f6:	699b      	ldr	r3, [r3, #24]
240088f8:	f003 0301 	and.w	r3, r3, #1
240088fc:	2b00      	cmp	r3, #0
240088fe:	d101      	bne.n	24008904 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_ERROR;
24008900:	2301      	movs	r3, #1
24008902:	e000      	b.n	24008906 <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_OK;
24008904:	2300      	movs	r3, #0
}
24008906:	4618      	mov	r0, r3
24008908:	46bd      	mov	sp, r7
2400890a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400890e:	4770      	bx	lr
24008910:	52002000 	.word	0x52002000

24008914 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
24008914:	b580      	push	{r7, lr}
24008916:	b082      	sub	sp, #8
24008918:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
2400891a:	2101      	movs	r1, #1
2400891c:	f24c 3050 	movw	r0, #50000	; 0xc350
24008920:	f000 f8bc 	bl	24008a9c <FLASH_CRC_WaitForLastOperation>
24008924:	4603      	mov	r3, r0
24008926:	2b00      	cmp	r3, #0
24008928:	d002      	beq.n	24008930 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
2400892a:	2301      	movs	r3, #1
2400892c:	71fb      	strb	r3, [r7, #7]
2400892e:	e001      	b.n	24008934 <HAL_FLASH_OB_Launch+0x20>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
24008930:	2300      	movs	r3, #0
24008932:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
24008934:	79fb      	ldrb	r3, [r7, #7]
24008936:	2b00      	cmp	r3, #0
24008938:	d10b      	bne.n	24008952 <HAL_FLASH_OB_Launch+0x3e>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
2400893a:	4b08      	ldr	r3, [pc, #32]	; (2400895c <HAL_FLASH_OB_Launch+0x48>)
2400893c:	699b      	ldr	r3, [r3, #24]
2400893e:	4a07      	ldr	r2, [pc, #28]	; (2400895c <HAL_FLASH_OB_Launch+0x48>)
24008940:	f043 0302 	orr.w	r3, r3, #2
24008944:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24008946:	f24c 3050 	movw	r0, #50000	; 0xc350
2400894a:	f000 f86b 	bl	24008a24 <FLASH_OB_WaitForLastOperation>
2400894e:	4603      	mov	r3, r0
24008950:	71fb      	strb	r3, [r7, #7]
  }

  return status;
24008952:	79fb      	ldrb	r3, [r7, #7]
}
24008954:	4618      	mov	r0, r3
24008956:	3708      	adds	r7, #8
24008958:	46bd      	mov	sp, r7
2400895a:	bd80      	pop	{r7, pc}
2400895c:	52002000 	.word	0x52002000

24008960 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
24008960:	b480      	push	{r7}
24008962:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
24008964:	4b03      	ldr	r3, [pc, #12]	; (24008974 <HAL_FLASH_GetError+0x14>)
24008966:	699b      	ldr	r3, [r3, #24]
}
24008968:	4618      	mov	r0, r3
2400896a:	46bd      	mov	sp, r7
2400896c:	f85d 7b04 	ldr.w	r7, [sp], #4
24008970:	4770      	bx	lr
24008972:	bf00      	nop
24008974:	24000598 	.word	0x24000598

24008978 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
24008978:	b580      	push	{r7, lr}
2400897a:	b086      	sub	sp, #24
2400897c:	af00      	add	r7, sp, #0
2400897e:	6078      	str	r0, [r7, #4]
24008980:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
24008982:	2304      	movs	r3, #4
24008984:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
24008986:	2300      	movs	r3, #0
24008988:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
2400898a:	f7f9 fc37 	bl	240021fc <HAL_GetTick>
2400898e:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008990:	e010      	b.n	240089b4 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
24008992:	687b      	ldr	r3, [r7, #4]
24008994:	f1b3 3fff 	cmp.w	r3, #4294967295
24008998:	d00c      	beq.n	240089b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400899a:	f7f9 fc2f 	bl	240021fc <HAL_GetTick>
2400899e:	4602      	mov	r2, r0
240089a0:	68fb      	ldr	r3, [r7, #12]
240089a2:	1ad3      	subs	r3, r2, r3
240089a4:	687a      	ldr	r2, [r7, #4]
240089a6:	429a      	cmp	r2, r3
240089a8:	d302      	bcc.n	240089b0 <FLASH_WaitForLastOperation+0x38>
240089aa:	687b      	ldr	r3, [r7, #4]
240089ac:	2b00      	cmp	r3, #0
240089ae:	d101      	bne.n	240089b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
240089b0:	2303      	movs	r3, #3
240089b2:	e02d      	b.n	24008a10 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
240089b4:	4b18      	ldr	r3, [pc, #96]	; (24008a18 <FLASH_WaitForLastOperation+0xa0>)
240089b6:	691a      	ldr	r2, [r3, #16]
240089b8:	693b      	ldr	r3, [r7, #16]
240089ba:	4013      	ands	r3, r2
240089bc:	693a      	ldr	r2, [r7, #16]
240089be:	429a      	cmp	r2, r3
240089c0:	d0e7      	beq.n	24008992 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
240089c2:	683b      	ldr	r3, [r7, #0]
240089c4:	2b01      	cmp	r3, #1
240089c6:	d104      	bne.n	240089d2 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
240089c8:	4b13      	ldr	r3, [pc, #76]	; (24008a18 <FLASH_WaitForLastOperation+0xa0>)
240089ca:	691a      	ldr	r2, [r3, #16]
240089cc:	4b13      	ldr	r3, [pc, #76]	; (24008a1c <FLASH_WaitForLastOperation+0xa4>)
240089ce:	4013      	ands	r3, r2
240089d0:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
240089d2:	697b      	ldr	r3, [r7, #20]
240089d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240089d8:	2b00      	cmp	r3, #0
240089da:	d00a      	beq.n	240089f2 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
240089dc:	4b10      	ldr	r3, [pc, #64]	; (24008a20 <FLASH_WaitForLastOperation+0xa8>)
240089de:	699a      	ldr	r2, [r3, #24]
240089e0:	697b      	ldr	r3, [r7, #20]
240089e2:	4313      	orrs	r3, r2
240089e4:	4a0e      	ldr	r2, [pc, #56]	; (24008a20 <FLASH_WaitForLastOperation+0xa8>)
240089e6:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
240089e8:	4a0b      	ldr	r2, [pc, #44]	; (24008a18 <FLASH_WaitForLastOperation+0xa0>)
240089ea:	697b      	ldr	r3, [r7, #20]
240089ec:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
240089ee:	2301      	movs	r3, #1
240089f0:	e00e      	b.n	24008a10 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
240089f2:	683b      	ldr	r3, [r7, #0]
240089f4:	2b01      	cmp	r3, #1
240089f6:	d10a      	bne.n	24008a0e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
240089f8:	4b07      	ldr	r3, [pc, #28]	; (24008a18 <FLASH_WaitForLastOperation+0xa0>)
240089fa:	691b      	ldr	r3, [r3, #16]
240089fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24008a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008a04:	d103      	bne.n	24008a0e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24008a06:	4b04      	ldr	r3, [pc, #16]	; (24008a18 <FLASH_WaitForLastOperation+0xa0>)
24008a08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24008a0c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24008a0e:	2300      	movs	r3, #0
}
24008a10:	4618      	mov	r0, r3
24008a12:	3718      	adds	r7, #24
24008a14:	46bd      	mov	sp, r7
24008a16:	bd80      	pop	{r7, pc}
24008a18:	52002000 	.word	0x52002000
24008a1c:	17ee0000 	.word	0x17ee0000
24008a20:	24000598 	.word	0x24000598

24008a24 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
24008a24:	b580      	push	{r7, lr}
24008a26:	b084      	sub	sp, #16
24008a28:	af00      	add	r7, sp, #0
24008a2a:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
24008a2c:	f7f9 fbe6 	bl	240021fc <HAL_GetTick>
24008a30:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24008a32:	e010      	b.n	24008a56 <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
24008a34:	687b      	ldr	r3, [r7, #4]
24008a36:	f1b3 3fff 	cmp.w	r3, #4294967295
24008a3a:	d00c      	beq.n	24008a56 <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008a3c:	f7f9 fbde 	bl	240021fc <HAL_GetTick>
24008a40:	4602      	mov	r2, r0
24008a42:	68fb      	ldr	r3, [r7, #12]
24008a44:	1ad3      	subs	r3, r2, r3
24008a46:	687a      	ldr	r2, [r7, #4]
24008a48:	429a      	cmp	r2, r3
24008a4a:	d302      	bcc.n	24008a52 <FLASH_OB_WaitForLastOperation+0x2e>
24008a4c:	687b      	ldr	r3, [r7, #4]
24008a4e:	2b00      	cmp	r3, #0
24008a50:	d101      	bne.n	24008a56 <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
24008a52:	2303      	movs	r3, #3
24008a54:	e01a      	b.n	24008a8c <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24008a56:	4b0f      	ldr	r3, [pc, #60]	; (24008a94 <FLASH_OB_WaitForLastOperation+0x70>)
24008a58:	69db      	ldr	r3, [r3, #28]
24008a5a:	f003 0301 	and.w	r3, r3, #1
24008a5e:	2b00      	cmp	r3, #0
24008a60:	d1e8      	bne.n	24008a34 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
24008a62:	4b0c      	ldr	r3, [pc, #48]	; (24008a94 <FLASH_OB_WaitForLastOperation+0x70>)
24008a64:	69db      	ldr	r3, [r3, #28]
24008a66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
24008a6a:	2b00      	cmp	r3, #0
24008a6c:	d00d      	beq.n	24008a8a <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
24008a6e:	4b0a      	ldr	r3, [pc, #40]	; (24008a98 <FLASH_OB_WaitForLastOperation+0x74>)
24008a70:	699b      	ldr	r3, [r3, #24]
24008a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24008a76:	4a08      	ldr	r2, [pc, #32]	; (24008a98 <FLASH_OB_WaitForLastOperation+0x74>)
24008a78:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
24008a7a:	4b06      	ldr	r3, [pc, #24]	; (24008a94 <FLASH_OB_WaitForLastOperation+0x70>)
24008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24008a7e:	4a05      	ldr	r2, [pc, #20]	; (24008a94 <FLASH_OB_WaitForLastOperation+0x70>)
24008a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24008a84:	6253      	str	r3, [r2, #36]	; 0x24

    return HAL_ERROR;
24008a86:	2301      	movs	r3, #1
24008a88:	e000      	b.n	24008a8c <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
24008a8a:	2300      	movs	r3, #0
}
24008a8c:	4618      	mov	r0, r3
24008a8e:	3710      	adds	r7, #16
24008a90:	46bd      	mov	sp, r7
24008a92:	bd80      	pop	{r7, pc}
24008a94:	52002000 	.word	0x52002000
24008a98:	24000598 	.word	0x24000598

24008a9c <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
24008a9c:	b580      	push	{r7, lr}
24008a9e:	b084      	sub	sp, #16
24008aa0:	af00      	add	r7, sp, #0
24008aa2:	6078      	str	r0, [r7, #4]
24008aa4:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
24008aa6:	f7f9 fba9 	bl	240021fc <HAL_GetTick>
24008aaa:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
24008aac:	683b      	ldr	r3, [r7, #0]
24008aae:	2b01      	cmp	r3, #1
24008ab0:	d102      	bne.n	24008ab8 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
24008ab2:	2308      	movs	r3, #8
24008ab4:	60fb      	str	r3, [r7, #12]
24008ab6:	e013      	b.n	24008ae0 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
24008ab8:	4b1a      	ldr	r3, [pc, #104]	; (24008b24 <FLASH_CRC_WaitForLastOperation+0x88>)
24008aba:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008abc:	e010      	b.n	24008ae0 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
24008abe:	687b      	ldr	r3, [r7, #4]
24008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
24008ac4:	d00c      	beq.n	24008ae0 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24008ac6:	f7f9 fb99 	bl	240021fc <HAL_GetTick>
24008aca:	4602      	mov	r2, r0
24008acc:	68bb      	ldr	r3, [r7, #8]
24008ace:	1ad3      	subs	r3, r2, r3
24008ad0:	687a      	ldr	r2, [r7, #4]
24008ad2:	429a      	cmp	r2, r3
24008ad4:	d302      	bcc.n	24008adc <FLASH_CRC_WaitForLastOperation+0x40>
24008ad6:	687b      	ldr	r3, [r7, #4]
24008ad8:	2b00      	cmp	r3, #0
24008ada:	d101      	bne.n	24008ae0 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
24008adc:	2303      	movs	r3, #3
24008ade:	e01d      	b.n	24008b1c <FLASH_CRC_WaitForLastOperation+0x80>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
24008ae0:	4b11      	ldr	r3, [pc, #68]	; (24008b28 <FLASH_CRC_WaitForLastOperation+0x8c>)
24008ae2:	691a      	ldr	r2, [r3, #16]
24008ae4:	68fb      	ldr	r3, [r7, #12]
24008ae6:	4013      	ands	r3, r2
24008ae8:	68fa      	ldr	r2, [r7, #12]
24008aea:	429a      	cmp	r2, r3
24008aec:	d0e7      	beq.n	24008abe <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
24008aee:	683b      	ldr	r3, [r7, #0]
24008af0:	2b01      	cmp	r3, #1
24008af2:	d112      	bne.n	24008b1a <FLASH_CRC_WaitForLastOperation+0x7e>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
24008af4:	4b0c      	ldr	r3, [pc, #48]	; (24008b28 <FLASH_CRC_WaitForLastOperation+0x8c>)
24008af6:	691b      	ldr	r3, [r3, #16]
24008af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24008afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008b00:	d10b      	bne.n	24008b1a <FLASH_CRC_WaitForLastOperation+0x7e>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
24008b02:	4b0a      	ldr	r3, [pc, #40]	; (24008b2c <FLASH_CRC_WaitForLastOperation+0x90>)
24008b04:	699b      	ldr	r3, [r3, #24]
24008b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24008b0a:	4a08      	ldr	r2, [pc, #32]	; (24008b2c <FLASH_CRC_WaitForLastOperation+0x90>)
24008b0c:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
24008b0e:	4b06      	ldr	r3, [pc, #24]	; (24008b28 <FLASH_CRC_WaitForLastOperation+0x8c>)
24008b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
24008b14:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
24008b16:	2301      	movs	r3, #1
24008b18:	e000      	b.n	24008b1c <FLASH_CRC_WaitForLastOperation+0x80>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
24008b1a:	2300      	movs	r3, #0
}
24008b1c:	4618      	mov	r0, r3
24008b1e:	3710      	adds	r7, #16
24008b20:	46bd      	mov	sp, r7
24008b22:	bd80      	pop	{r7, pc}
24008b24:	80000008 	.word	0x80000008
24008b28:	52002000 	.word	0x52002000
24008b2c:	24000598 	.word	0x24000598

24008b30 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
24008b30:	b580      	push	{r7, lr}
24008b32:	b084      	sub	sp, #16
24008b34:	af00      	add	r7, sp, #0
24008b36:	6078      	str	r0, [r7, #4]
24008b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24008b3a:	2300      	movs	r3, #0
24008b3c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008b3e:	4b3f      	ldr	r3, [pc, #252]	; (24008c3c <HAL_FLASHEx_Erase+0x10c>)
24008b40:	7d1b      	ldrb	r3, [r3, #20]
24008b42:	2b01      	cmp	r3, #1
24008b44:	d101      	bne.n	24008b4a <HAL_FLASHEx_Erase+0x1a>
24008b46:	2302      	movs	r3, #2
24008b48:	e074      	b.n	24008c34 <HAL_FLASHEx_Erase+0x104>
24008b4a:	4b3c      	ldr	r3, [pc, #240]	; (24008c3c <HAL_FLASHEx_Erase+0x10c>)
24008b4c:	2201      	movs	r2, #1
24008b4e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008b50:	4b3a      	ldr	r3, [pc, #232]	; (24008c3c <HAL_FLASHEx_Erase+0x10c>)
24008b52:	2200      	movs	r2, #0
24008b54:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008b56:	687b      	ldr	r3, [r7, #4]
24008b58:	685b      	ldr	r3, [r3, #4]
24008b5a:	f003 0301 	and.w	r3, r3, #1
24008b5e:	2b00      	cmp	r3, #0
24008b60:	d009      	beq.n	24008b76 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008b62:	2101      	movs	r1, #1
24008b64:	f24c 3050 	movw	r0, #50000	; 0xc350
24008b68:	f7ff ff06 	bl	24008978 <FLASH_WaitForLastOperation>
24008b6c:	4603      	mov	r3, r0
24008b6e:	2b00      	cmp	r3, #0
24008b70:	d001      	beq.n	24008b76 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
24008b72:	2301      	movs	r3, #1
24008b74:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
24008b76:	7bfb      	ldrb	r3, [r7, #15]
24008b78:	2b00      	cmp	r3, #0
24008b7a:	d157      	bne.n	24008c2c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
24008b7c:	687b      	ldr	r3, [r7, #4]
24008b7e:	681b      	ldr	r3, [r3, #0]
24008b80:	2b01      	cmp	r3, #1
24008b82:	d11e      	bne.n	24008bc2 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
24008b84:	687b      	ldr	r3, [r7, #4]
24008b86:	691a      	ldr	r2, [r3, #16]
24008b88:	687b      	ldr	r3, [r7, #4]
24008b8a:	685b      	ldr	r3, [r3, #4]
24008b8c:	4619      	mov	r1, r3
24008b8e:	4610      	mov	r0, r2
24008b90:	f000 fa6c 	bl	2400906c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008b94:	687b      	ldr	r3, [r7, #4]
24008b96:	685b      	ldr	r3, [r3, #4]
24008b98:	f003 0301 	and.w	r3, r3, #1
24008b9c:	2b00      	cmp	r3, #0
24008b9e:	d045      	beq.n	24008c2c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008ba0:	2101      	movs	r1, #1
24008ba2:	f24c 3050 	movw	r0, #50000	; 0xc350
24008ba6:	f7ff fee7 	bl	24008978 <FLASH_WaitForLastOperation>
24008baa:	4603      	mov	r3, r0
24008bac:	2b00      	cmp	r3, #0
24008bae:	d001      	beq.n	24008bb4 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
24008bb0:	2301      	movs	r3, #1
24008bb2:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
24008bb4:	4b22      	ldr	r3, [pc, #136]	; (24008c40 <HAL_FLASHEx_Erase+0x110>)
24008bb6:	68db      	ldr	r3, [r3, #12]
24008bb8:	4a21      	ldr	r2, [pc, #132]	; (24008c40 <HAL_FLASHEx_Erase+0x110>)
24008bba:	f023 0308 	bic.w	r3, r3, #8
24008bbe:	60d3      	str	r3, [r2, #12]
24008bc0:	e034      	b.n	24008c2c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
24008bc2:	683b      	ldr	r3, [r7, #0]
24008bc4:	f04f 32ff 	mov.w	r2, #4294967295
24008bc8:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24008bca:	687b      	ldr	r3, [r7, #4]
24008bcc:	689b      	ldr	r3, [r3, #8]
24008bce:	60bb      	str	r3, [r7, #8]
24008bd0:	e024      	b.n	24008c1c <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
24008bd2:	687b      	ldr	r3, [r7, #4]
24008bd4:	6859      	ldr	r1, [r3, #4]
24008bd6:	687b      	ldr	r3, [r7, #4]
24008bd8:	691b      	ldr	r3, [r3, #16]
24008bda:	461a      	mov	r2, r3
24008bdc:	68b8      	ldr	r0, [r7, #8]
24008bde:	f000 fa69 	bl	240090b4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008be2:	687b      	ldr	r3, [r7, #4]
24008be4:	685b      	ldr	r3, [r3, #4]
24008be6:	f003 0301 	and.w	r3, r3, #1
24008bea:	2b00      	cmp	r3, #0
24008bec:	d00c      	beq.n	24008c08 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
24008bee:	2101      	movs	r1, #1
24008bf0:	f24c 3050 	movw	r0, #50000	; 0xc350
24008bf4:	f7ff fec0 	bl	24008978 <FLASH_WaitForLastOperation>
24008bf8:	4603      	mov	r3, r0
24008bfa:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
24008bfc:	4b10      	ldr	r3, [pc, #64]	; (24008c40 <HAL_FLASHEx_Erase+0x110>)
24008bfe:	68da      	ldr	r2, [r3, #12]
24008c00:	490f      	ldr	r1, [pc, #60]	; (24008c40 <HAL_FLASHEx_Erase+0x110>)
24008c02:	4b10      	ldr	r3, [pc, #64]	; (24008c44 <HAL_FLASHEx_Erase+0x114>)
24008c04:	4013      	ands	r3, r2
24008c06:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
24008c08:	7bfb      	ldrb	r3, [r7, #15]
24008c0a:	2b00      	cmp	r3, #0
24008c0c:	d003      	beq.n	24008c16 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
24008c0e:	683b      	ldr	r3, [r7, #0]
24008c10:	68ba      	ldr	r2, [r7, #8]
24008c12:	601a      	str	r2, [r3, #0]
          break;
24008c14:	e00a      	b.n	24008c2c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24008c16:	68bb      	ldr	r3, [r7, #8]
24008c18:	3301      	adds	r3, #1
24008c1a:	60bb      	str	r3, [r7, #8]
24008c1c:	687b      	ldr	r3, [r7, #4]
24008c1e:	68da      	ldr	r2, [r3, #12]
24008c20:	687b      	ldr	r3, [r7, #4]
24008c22:	689b      	ldr	r3, [r3, #8]
24008c24:	4413      	add	r3, r2
24008c26:	68ba      	ldr	r2, [r7, #8]
24008c28:	429a      	cmp	r2, r3
24008c2a:	d3d2      	bcc.n	24008bd2 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24008c2c:	4b03      	ldr	r3, [pc, #12]	; (24008c3c <HAL_FLASHEx_Erase+0x10c>)
24008c2e:	2200      	movs	r2, #0
24008c30:	751a      	strb	r2, [r3, #20]

  return status;
24008c32:	7bfb      	ldrb	r3, [r7, #15]
}
24008c34:	4618      	mov	r0, r3
24008c36:	3710      	adds	r7, #16
24008c38:	46bd      	mov	sp, r7
24008c3a:	bd80      	pop	{r7, pc}
24008c3c:	24000598 	.word	0x24000598
24008c40:	52002000 	.word	0x52002000
24008c44:	fffff8fb 	.word	0xfffff8fb

24008c48 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
24008c48:	b580      	push	{r7, lr}
24008c4a:	b084      	sub	sp, #16
24008c4c:	af00      	add	r7, sp, #0
24008c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24008c50:	2300      	movs	r3, #0
24008c52:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008c54:	4b31      	ldr	r3, [pc, #196]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c56:	7d1b      	ldrb	r3, [r3, #20]
24008c58:	2b01      	cmp	r3, #1
24008c5a:	d101      	bne.n	24008c60 <HAL_FLASHEx_Erase_IT+0x18>
24008c5c:	2302      	movs	r3, #2
24008c5e:	e059      	b.n	24008d14 <HAL_FLASHEx_Erase_IT+0xcc>
24008c60:	4b2e      	ldr	r3, [pc, #184]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c62:	2201      	movs	r2, #1
24008c64:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008c66:	4b2d      	ldr	r3, [pc, #180]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c68:	2200      	movs	r2, #0
24008c6a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank 1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008c6c:	687b      	ldr	r3, [r7, #4]
24008c6e:	685b      	ldr	r3, [r3, #4]
24008c70:	f003 0301 	and.w	r3, r3, #1
24008c74:	2b00      	cmp	r3, #0
24008c76:	d009      	beq.n	24008c8c <HAL_FLASHEx_Erase_IT+0x44>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008c78:	2101      	movs	r1, #1
24008c7a:	f24c 3050 	movw	r0, #50000	; 0xc350
24008c7e:	f7ff fe7b 	bl	24008978 <FLASH_WaitForLastOperation>
24008c82:	4603      	mov	r3, r0
24008c84:	2b00      	cmp	r3, #0
24008c86:	d001      	beq.n	24008c8c <HAL_FLASHEx_Erase_IT+0x44>
    {
      status = HAL_ERROR;
24008c88:	2301      	movs	r3, #1
24008c8a:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if (status != HAL_OK)
24008c8c:	7bfb      	ldrb	r3, [r7, #15]
24008c8e:	2b00      	cmp	r3, #0
24008c90:	d003      	beq.n	24008c9a <HAL_FLASHEx_Erase_IT+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
24008c92:	4b22      	ldr	r3, [pc, #136]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008c94:	2200      	movs	r2, #0
24008c96:	751a      	strb	r2, [r3, #20]
24008c98:	e03b      	b.n	24008d12 <HAL_FLASHEx_Erase_IT+0xca>
  }
  else
  {
    if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24008c9a:	687b      	ldr	r3, [r7, #4]
24008c9c:	685b      	ldr	r3, [r3, #4]
24008c9e:	f003 0301 	and.w	r3, r3, #1
24008ca2:	2b00      	cmp	r3, #0
24008ca4:	d005      	beq.n	24008cb2 <HAL_FLASHEx_Erase_IT+0x6a>
    {
      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
24008ca6:	4b1e      	ldr	r3, [pc, #120]	; (24008d20 <HAL_FLASHEx_Erase_IT+0xd8>)
24008ca8:	68db      	ldr	r3, [r3, #12]
24008caa:	4a1d      	ldr	r2, [pc, #116]	; (24008d20 <HAL_FLASHEx_Erase_IT+0xd8>)
24008cac:	f443 03de 	orr.w	r3, r3, #7274496	; 0x6f0000
24008cb0:	60d3      	str	r3, [r2, #12]
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#endif /* DUAL_BANK */

    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
24008cb2:	687b      	ldr	r3, [r7, #4]
24008cb4:	681b      	ldr	r3, [r3, #0]
24008cb6:	2b01      	cmp	r3, #1
24008cb8:	d113      	bne.n	24008ce2 <HAL_FLASHEx_Erase_IT+0x9a>
    {
      /*Mass erase to be done*/
      if(pEraseInit->Banks == FLASH_BANK_1)
24008cba:	687b      	ldr	r3, [r7, #4]
24008cbc:	685b      	ldr	r3, [r3, #4]
24008cbe:	2b01      	cmp	r3, #1
24008cc0:	d103      	bne.n	24008cca <HAL_FLASHEx_Erase_IT+0x82>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK1;
24008cc2:	4b16      	ldr	r3, [pc, #88]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008cc4:	2202      	movs	r2, #2
24008cc6:	701a      	strb	r2, [r3, #0]
24008cc8:	e002      	b.n	24008cd0 <HAL_FLASHEx_Erase_IT+0x88>
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK2;
      }
#endif /* DUAL_BANK */
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_ALLBANK_MASSERASE;
24008cca:	4b14      	ldr	r3, [pc, #80]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008ccc:	2207      	movs	r2, #7
24008cce:	701a      	strb	r2, [r3, #0]
      }

      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
24008cd0:	687b      	ldr	r3, [r7, #4]
24008cd2:	691a      	ldr	r2, [r3, #16]
24008cd4:	687b      	ldr	r3, [r7, #4]
24008cd6:	685b      	ldr	r3, [r3, #4]
24008cd8:	4619      	mov	r1, r3
24008cda:	4610      	mov	r0, r2
24008cdc:	f000 f9c6 	bl	2400906c <FLASH_MassErase>
24008ce0:	e017      	b.n	24008d12 <HAL_FLASHEx_Erase_IT+0xca>
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK2;
      }
#else
      pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK1;
24008ce2:	4b0e      	ldr	r3, [pc, #56]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008ce4:	2201      	movs	r2, #1
24008ce6:	701a      	strb	r2, [r3, #0]
#endif /* DUAL_BANK */

      pFlash.NbSectorsToErase = pEraseInit->NbSectors;
24008ce8:	687b      	ldr	r3, [r7, #4]
24008cea:	68db      	ldr	r3, [r3, #12]
24008cec:	4a0b      	ldr	r2, [pc, #44]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008cee:	6053      	str	r3, [r2, #4]
      pFlash.Sector = pEraseInit->Sector;
24008cf0:	687b      	ldr	r3, [r7, #4]
24008cf2:	689b      	ldr	r3, [r3, #8]
24008cf4:	4a09      	ldr	r2, [pc, #36]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008cf6:	60d3      	str	r3, [r2, #12]
      pFlash.VoltageForErase = pEraseInit->VoltageRange;
24008cf8:	687b      	ldr	r3, [r7, #4]
24008cfa:	691b      	ldr	r3, [r3, #16]
24008cfc:	4a07      	ldr	r2, [pc, #28]	; (24008d1c <HAL_FLASHEx_Erase_IT+0xd4>)
24008cfe:	6093      	str	r3, [r2, #8]

      /* Erase first sector and wait for IT */
      FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->Banks, pEraseInit->VoltageRange);
24008d00:	687b      	ldr	r3, [r7, #4]
24008d02:	6898      	ldr	r0, [r3, #8]
24008d04:	687b      	ldr	r3, [r7, #4]
24008d06:	6859      	ldr	r1, [r3, #4]
24008d08:	687b      	ldr	r3, [r7, #4]
24008d0a:	691b      	ldr	r3, [r3, #16]
24008d0c:	461a      	mov	r2, r3
24008d0e:	f000 f9d1 	bl	240090b4 <FLASH_Erase_Sector>
    }
  }

  return status;
24008d12:	7bfb      	ldrb	r3, [r7, #15]
}
24008d14:	4618      	mov	r0, r3
24008d16:	3710      	adds	r7, #16
24008d18:	46bd      	mov	sp, r7
24008d1a:	bd80      	pop	{r7, pc}
24008d1c:	24000598 	.word	0x24000598
24008d20:	52002000 	.word	0x52002000

24008d24 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
24008d24:	b580      	push	{r7, lr}
24008d26:	b084      	sub	sp, #16
24008d28:	af00      	add	r7, sp, #0
24008d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24008d2c:	4b48      	ldr	r3, [pc, #288]	; (24008e50 <HAL_FLASHEx_OBProgram+0x12c>)
24008d2e:	7d1b      	ldrb	r3, [r3, #20]
24008d30:	2b01      	cmp	r3, #1
24008d32:	d101      	bne.n	24008d38 <HAL_FLASHEx_OBProgram+0x14>
24008d34:	2302      	movs	r3, #2
24008d36:	e087      	b.n	24008e48 <HAL_FLASHEx_OBProgram+0x124>
24008d38:	4b45      	ldr	r3, [pc, #276]	; (24008e50 <HAL_FLASHEx_OBProgram+0x12c>)
24008d3a:	2201      	movs	r2, #1
24008d3c:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24008d3e:	4b44      	ldr	r3, [pc, #272]	; (24008e50 <HAL_FLASHEx_OBProgram+0x12c>)
24008d40:	2200      	movs	r2, #0
24008d42:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24008d44:	2101      	movs	r1, #1
24008d46:	f24c 3050 	movw	r0, #50000	; 0xc350
24008d4a:	f7ff fe15 	bl	24008978 <FLASH_WaitForLastOperation>
24008d4e:	4603      	mov	r3, r0
24008d50:	2b00      	cmp	r3, #0
24008d52:	d002      	beq.n	24008d5a <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
24008d54:	2301      	movs	r3, #1
24008d56:	73fb      	strb	r3, [r7, #15]
24008d58:	e001      	b.n	24008d5e <HAL_FLASHEx_OBProgram+0x3a>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
24008d5a:	2300      	movs	r3, #0
24008d5c:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
24008d5e:	7bfb      	ldrb	r3, [r7, #15]
24008d60:	2b00      	cmp	r3, #0
24008d62:	d16d      	bne.n	24008e40 <HAL_FLASHEx_OBProgram+0x11c>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
24008d64:	687b      	ldr	r3, [r7, #4]
24008d66:	681b      	ldr	r3, [r3, #0]
24008d68:	f003 0301 	and.w	r3, r3, #1
24008d6c:	2b00      	cmp	r3, #0
24008d6e:	d014      	beq.n	24008d9a <HAL_FLASHEx_OBProgram+0x76>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
24008d70:	687b      	ldr	r3, [r7, #4]
24008d72:	685b      	ldr	r3, [r3, #4]
24008d74:	2b01      	cmp	r3, #1
24008d76:	d108      	bne.n	24008d8a <HAL_FLASHEx_OBProgram+0x66>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
24008d78:	687b      	ldr	r3, [r7, #4]
24008d7a:	689a      	ldr	r2, [r3, #8]
24008d7c:	687b      	ldr	r3, [r7, #4]
24008d7e:	69db      	ldr	r3, [r3, #28]
24008d80:	4619      	mov	r1, r3
24008d82:	4610      	mov	r0, r2
24008d84:	f000 f9ba 	bl	240090fc <FLASH_OB_EnableWRP>
24008d88:	e007      	b.n	24008d9a <HAL_FLASHEx_OBProgram+0x76>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
24008d8a:	687b      	ldr	r3, [r7, #4]
24008d8c:	689a      	ldr	r2, [r3, #8]
24008d8e:	687b      	ldr	r3, [r7, #4]
24008d90:	69db      	ldr	r3, [r3, #28]
24008d92:	4619      	mov	r1, r3
24008d94:	4610      	mov	r0, r2
24008d96:	f000 f9cb 	bl	24009130 <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
24008d9a:	687b      	ldr	r3, [r7, #4]
24008d9c:	681b      	ldr	r3, [r3, #0]
24008d9e:	f003 0302 	and.w	r3, r3, #2
24008da2:	2b00      	cmp	r3, #0
24008da4:	d004      	beq.n	24008db0 <HAL_FLASHEx_OBProgram+0x8c>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
24008da6:	687b      	ldr	r3, [r7, #4]
24008da8:	68db      	ldr	r3, [r3, #12]
24008daa:	4618      	mov	r0, r3
24008dac:	f000 fa00 	bl	240091b0 <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
24008db0:	687b      	ldr	r3, [r7, #4]
24008db2:	681b      	ldr	r3, [r3, #0]
24008db4:	f003 0304 	and.w	r3, r3, #4
24008db8:	2b00      	cmp	r3, #0
24008dba:	d007      	beq.n	24008dcc <HAL_FLASHEx_OBProgram+0xa8>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
24008dbc:	687b      	ldr	r3, [r7, #4]
24008dbe:	695a      	ldr	r2, [r3, #20]
24008dc0:	687b      	ldr	r3, [r7, #4]
24008dc2:	699b      	ldr	r3, [r3, #24]
24008dc4:	4619      	mov	r1, r3
24008dc6:	4610      	mov	r0, r2
24008dc8:	f000 fa22 	bl	24009210 <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
24008dcc:	687b      	ldr	r3, [r7, #4]
24008dce:	681b      	ldr	r3, [r3, #0]
24008dd0:	f003 0308 	and.w	r3, r3, #8
24008dd4:	2b00      	cmp	r3, #0
24008dd6:	d009      	beq.n	24008dec <HAL_FLASHEx_OBProgram+0xc8>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
24008dd8:	687b      	ldr	r3, [r7, #4]
24008dda:	6a18      	ldr	r0, [r3, #32]
24008ddc:	687b      	ldr	r3, [r7, #4]
24008dde:	6a59      	ldr	r1, [r3, #36]	; 0x24
24008de0:	687b      	ldr	r3, [r7, #4]
24008de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24008de4:	687b      	ldr	r3, [r7, #4]
24008de6:	69db      	ldr	r3, [r3, #28]
24008de8:	f000 faba 	bl	24009360 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
24008dec:	687b      	ldr	r3, [r7, #4]
24008dee:	681b      	ldr	r3, [r3, #0]
24008df0:	f003 0310 	and.w	r3, r3, #16
24008df4:	2b00      	cmp	r3, #0
24008df6:	d004      	beq.n	24008e02 <HAL_FLASHEx_OBProgram+0xde>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
24008df8:	687b      	ldr	r3, [r7, #4]
24008dfa:	691b      	ldr	r3, [r3, #16]
24008dfc:	4618      	mov	r0, r3
24008dfe:	f000 fb09 	bl	24009414 <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
24008e02:	687b      	ldr	r3, [r7, #4]
24008e04:	681b      	ldr	r3, [r3, #0]
24008e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
24008e0a:	2b00      	cmp	r3, #0
24008e0c:	d008      	beq.n	24008e20 <HAL_FLASHEx_OBProgram+0xfc>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
24008e0e:	687b      	ldr	r3, [r7, #4]
24008e10:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
24008e12:	687b      	ldr	r3, [r7, #4]
24008e14:	6b19      	ldr	r1, [r3, #48]	; 0x30
24008e16:	687b      	ldr	r3, [r7, #4]
24008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24008e1a:	461a      	mov	r2, r3
24008e1c:	f000 fb1c 	bl	24009458 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
24008e20:	687b      	ldr	r3, [r7, #4]
24008e22:	681b      	ldr	r3, [r3, #0]
24008e24:	f003 0320 	and.w	r3, r3, #32
24008e28:	2b00      	cmp	r3, #0
24008e2a:	d009      	beq.n	24008e40 <HAL_FLASHEx_OBProgram+0x11c>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
24008e2c:	687b      	ldr	r3, [r7, #4]
24008e2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
24008e30:	687b      	ldr	r3, [r7, #4]
24008e32:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
24008e34:	687b      	ldr	r3, [r7, #4]
24008e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
24008e38:	687b      	ldr	r3, [r7, #4]
24008e3a:	69db      	ldr	r3, [r3, #28]
24008e3c:	f000 fb52 	bl	240094e4 <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24008e40:	4b03      	ldr	r3, [pc, #12]	; (24008e50 <HAL_FLASHEx_OBProgram+0x12c>)
24008e42:	2200      	movs	r2, #0
24008e44:	751a      	strb	r2, [r3, #20]

  return status;
24008e46:	7bfb      	ldrb	r3, [r7, #15]
}
24008e48:	4618      	mov	r0, r3
24008e4a:	3710      	adds	r7, #16
24008e4c:	46bd      	mov	sp, r7
24008e4e:	bd80      	pop	{r7, pc}
24008e50:	24000598 	.word	0x24000598

24008e54 <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
24008e54:	b580      	push	{r7, lr}
24008e56:	b082      	sub	sp, #8
24008e58:	af00      	add	r7, sp, #0
24008e5a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
24008e5c:	687b      	ldr	r3, [r7, #4]
24008e5e:	2216      	movs	r2, #22
24008e60:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
24008e62:	f000 f9b9 	bl	240091d8 <FLASH_OB_GetRDP>
24008e66:	4602      	mov	r2, r0
24008e68:	687b      	ldr	r3, [r7, #4]
24008e6a:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
24008e6c:	f000 fa62 	bl	24009334 <FLASH_OB_GetUser>
24008e70:	4602      	mov	r2, r0
24008e72:	687b      	ldr	r3, [r7, #4]
24008e74:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
24008e76:	f000 fae1 	bl	2400943c <FLASH_OB_GetBOR>
24008e7a:	4602      	mov	r2, r0
24008e7c:	687b      	ldr	r3, [r7, #4]
24008e7e:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
#else
  if (pOBInit->Banks == FLASH_BANK_1)
24008e80:	687b      	ldr	r3, [r7, #4]
24008e82:	69db      	ldr	r3, [r3, #28]
24008e84:	2b01      	cmp	r3, #1
24008e86:	d129      	bne.n	24008edc <HAL_FLASHEx_OBGetConfig+0x88>
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
24008e88:	687b      	ldr	r3, [r7, #4]
24008e8a:	681b      	ldr	r3, [r3, #0]
24008e8c:	f043 0229 	orr.w	r2, r3, #41	; 0x29
24008e90:	687b      	ldr	r3, [r7, #4]
24008e92:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
24008e94:	687b      	ldr	r3, [r7, #4]
24008e96:	1d18      	adds	r0, r3, #4
24008e98:	687b      	ldr	r3, [r7, #4]
24008e9a:	f103 0108 	add.w	r1, r3, #8
24008e9e:	687b      	ldr	r3, [r7, #4]
24008ea0:	69db      	ldr	r3, [r3, #28]
24008ea2:	461a      	mov	r2, r3
24008ea4:	f000 f95e 	bl	24009164 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
24008ea8:	687b      	ldr	r3, [r7, #4]
24008eaa:	f103 0020 	add.w	r0, r3, #32
24008eae:	687b      	ldr	r3, [r7, #4]
24008eb0:	f103 0124 	add.w	r1, r3, #36	; 0x24
24008eb4:	687b      	ldr	r3, [r7, #4]
24008eb6:	f103 0228 	add.w	r2, r3, #40	; 0x28
24008eba:	687b      	ldr	r3, [r7, #4]
24008ebc:	69db      	ldr	r3, [r3, #28]
24008ebe:	f000 fa71 	bl	240093a4 <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
24008ec2:	687b      	ldr	r3, [r7, #4]
24008ec4:	f103 0038 	add.w	r0, r3, #56	; 0x38
24008ec8:	687b      	ldr	r3, [r7, #4]
24008eca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
24008ece:	687b      	ldr	r3, [r7, #4]
24008ed0:	f103 0240 	add.w	r2, r3, #64	; 0x40
24008ed4:	687b      	ldr	r3, [r7, #4]
24008ed6:	69db      	ldr	r3, [r3, #28]
24008ed8:	f000 fb28 	bl	2400952c <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
24008edc:	687b      	ldr	r3, [r7, #4]
24008ede:	f103 0230 	add.w	r2, r3, #48	; 0x30
24008ee2:	687b      	ldr	r3, [r7, #4]
24008ee4:	3334      	adds	r3, #52	; 0x34
24008ee6:	4619      	mov	r1, r3
24008ee8:	4610      	mov	r0, r2
24008eea:	f000 fadf 	bl	240094ac <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
24008eee:	687b      	ldr	r3, [r7, #4]
24008ef0:	681b      	ldr	r3, [r3, #0]
24008ef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
24008ef6:	687b      	ldr	r3, [r7, #4]
24008ef8:	601a      	str	r2, [r3, #0]
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
24008efa:	bf00      	nop
24008efc:	3708      	adds	r7, #8
24008efe:	46bd      	mov	sp, r7
24008f00:	bd80      	pop	{r7, pc}
	...

24008f04 <HAL_FLASHEx_Unlock_Bank1>:
/**
  * @brief  Unlock the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void)
{
24008f04:	b480      	push	{r7}
24008f06:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008f08:	4b0c      	ldr	r3, [pc, #48]	; (24008f3c <HAL_FLASHEx_Unlock_Bank1+0x38>)
24008f0a:	68db      	ldr	r3, [r3, #12]
24008f0c:	f003 0301 	and.w	r3, r3, #1
24008f10:	2b00      	cmp	r3, #0
24008f12:	d00d      	beq.n	24008f30 <HAL_FLASHEx_Unlock_Bank1+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
24008f14:	4b09      	ldr	r3, [pc, #36]	; (24008f3c <HAL_FLASHEx_Unlock_Bank1+0x38>)
24008f16:	4a0a      	ldr	r2, [pc, #40]	; (24008f40 <HAL_FLASHEx_Unlock_Bank1+0x3c>)
24008f18:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
24008f1a:	4b08      	ldr	r3, [pc, #32]	; (24008f3c <HAL_FLASHEx_Unlock_Bank1+0x38>)
24008f1c:	4a09      	ldr	r2, [pc, #36]	; (24008f44 <HAL_FLASHEx_Unlock_Bank1+0x40>)
24008f1e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24008f20:	4b06      	ldr	r3, [pc, #24]	; (24008f3c <HAL_FLASHEx_Unlock_Bank1+0x38>)
24008f22:	68db      	ldr	r3, [r3, #12]
24008f24:	f003 0301 	and.w	r3, r3, #1
24008f28:	2b00      	cmp	r3, #0
24008f2a:	d001      	beq.n	24008f30 <HAL_FLASHEx_Unlock_Bank1+0x2c>
    {
      return HAL_ERROR;
24008f2c:	2301      	movs	r3, #1
24008f2e:	e000      	b.n	24008f32 <HAL_FLASHEx_Unlock_Bank1+0x2e>
    }
  }

  return HAL_OK;
24008f30:	2300      	movs	r3, #0
}
24008f32:	4618      	mov	r0, r3
24008f34:	46bd      	mov	sp, r7
24008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
24008f3a:	4770      	bx	lr
24008f3c:	52002000 	.word	0x52002000
24008f40:	45670123 	.word	0x45670123
24008f44:	cdef89ab 	.word	0xcdef89ab

24008f48 <HAL_FLASHEx_Lock_Bank1>:
/**
  * @brief  Locks the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void)
{
24008f48:	b480      	push	{r7}
24008f4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Registers access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
24008f4c:	4b05      	ldr	r3, [pc, #20]	; (24008f64 <HAL_FLASHEx_Lock_Bank1+0x1c>)
24008f4e:	68db      	ldr	r3, [r3, #12]
24008f50:	4a04      	ldr	r2, [pc, #16]	; (24008f64 <HAL_FLASHEx_Lock_Bank1+0x1c>)
24008f52:	f043 0301 	orr.w	r3, r3, #1
24008f56:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
24008f58:	2300      	movs	r3, #0
}
24008f5a:	4618      	mov	r0, r3
24008f5c:	46bd      	mov	sp, r7
24008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
24008f62:	4770      	bx	lr
24008f64:	52002000 	.word	0x52002000

24008f68 <HAL_FLASHEx_ComputeCRC>:
  *         A special error flag (CRC read error: CRCRDERR) can be used to
  *         detect such a case.
  * @retval HAL Status
*/
HAL_StatusTypeDef HAL_FLASHEx_ComputeCRC(FLASH_CRCInitTypeDef *pCRCInit, uint32_t *CRC_Result)
{
24008f68:	b580      	push	{r7, lr}
24008f6a:	b084      	sub	sp, #16
24008f6c:	af00      	add	r7, sp, #0
24008f6e:	6078      	str	r0, [r7, #4]
24008f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(pCRCInit->Bank));
  assert_param(IS_FLASH_TYPECRC(pCRCInit->TypeCRC));

  /* Wait for OB change operation to be completed */
  status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24008f72:	f24c 3050 	movw	r0, #50000	; 0xc350
24008f76:	f7ff fd55 	bl	24008a24 <FLASH_OB_WaitForLastOperation>
24008f7a:	4603      	mov	r3, r0
24008f7c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
24008f7e:	7bfb      	ldrb	r3, [r7, #15]
24008f80:	2b00      	cmp	r3, #0
24008f82:	d169      	bne.n	24009058 <HAL_FLASHEx_ComputeCRC+0xf0>
  {
    if (pCRCInit->Bank == FLASH_BANK_1)
24008f84:	687b      	ldr	r3, [r7, #4]
24008f86:	689b      	ldr	r3, [r3, #8]
24008f88:	2b01      	cmp	r3, #1
24008f8a:	d165      	bne.n	24009058 <HAL_FLASHEx_ComputeCRC+0xf0>
    {
      /* Enable CRC feature */
      FLASH->CR1 |= FLASH_CR_CRC_EN;
24008f8c:	4b35      	ldr	r3, [pc, #212]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f8e:	68db      	ldr	r3, [r3, #12]
24008f90:	4a34      	ldr	r2, [pc, #208]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24008f96:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags in Status Register: CRC end of calculation and CRC read error */
      FLASH->CCR1 |= (FLASH_CCR_CLR_CRCEND | FLASH_CCR_CLR_CRCRDERR);
24008f98:	4b32      	ldr	r3, [pc, #200]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f9a:	695b      	ldr	r3, [r3, #20]
24008f9c:	4a31      	ldr	r2, [pc, #196]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008f9e:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
24008fa2:	6153      	str	r3, [r2, #20]

      /* Clear current CRC result, program burst size and define memory area on which CRC has to be computed */
      FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_CRC | pCRCInit->BurstSize | pCRCInit->TypeCRC;
24008fa4:	4b2f      	ldr	r3, [pc, #188]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
24008fa8:	687b      	ldr	r3, [r7, #4]
24008faa:	6859      	ldr	r1, [r3, #4]
24008fac:	687b      	ldr	r3, [r7, #4]
24008fae:	681b      	ldr	r3, [r3, #0]
24008fb0:	430b      	orrs	r3, r1
24008fb2:	4313      	orrs	r3, r2
24008fb4:	4a2b      	ldr	r2, [pc, #172]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008fba:	6513      	str	r3, [r2, #80]	; 0x50

      if (pCRCInit->TypeCRC == FLASH_CRC_SECTORS)
24008fbc:	687b      	ldr	r3, [r7, #4]
24008fbe:	681b      	ldr	r3, [r3, #0]
24008fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24008fc4:	d119      	bne.n	24008ffa <HAL_FLASHEx_ComputeCRC+0x92>
      {
        /* Clear sectors list */
        FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_SECT;
24008fc6:	4b27      	ldr	r3, [pc, #156]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008fca:	4a26      	ldr	r2, [pc, #152]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24008fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24008fd0:	6513      	str	r3, [r2, #80]	; 0x50

        /* Select CRC sectors */
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24008fd2:	687b      	ldr	r3, [r7, #4]
24008fd4:	68db      	ldr	r3, [r3, #12]
24008fd6:	60bb      	str	r3, [r7, #8]
24008fd8:	e006      	b.n	24008fe8 <HAL_FLASHEx_ComputeCRC+0x80>
        {
          FLASH_CRC_AddSector(sector_index, FLASH_BANK_1);
24008fda:	2101      	movs	r1, #1
24008fdc:	68b8      	ldr	r0, [r7, #8]
24008fde:	f000 fadd 	bl	2400959c <FLASH_CRC_AddSector>
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24008fe2:	68bb      	ldr	r3, [r7, #8]
24008fe4:	3301      	adds	r3, #1
24008fe6:	60bb      	str	r3, [r7, #8]
24008fe8:	687b      	ldr	r3, [r7, #4]
24008fea:	691a      	ldr	r2, [r3, #16]
24008fec:	687b      	ldr	r3, [r7, #4]
24008fee:	68db      	ldr	r3, [r3, #12]
24008ff0:	4413      	add	r3, r2
24008ff2:	68ba      	ldr	r2, [r7, #8]
24008ff4:	429a      	cmp	r2, r3
24008ff6:	d3f0      	bcc.n	24008fda <HAL_FLASHEx_ComputeCRC+0x72>
24008ff8:	e013      	b.n	24009022 <HAL_FLASHEx_ComputeCRC+0xba>
        }
      }
      else if (pCRCInit->TypeCRC == FLASH_CRC_BANK)
24008ffa:	687b      	ldr	r3, [r7, #4]
24008ffc:	681b      	ldr	r3, [r3, #0]
24008ffe:	4a1a      	ldr	r2, [pc, #104]	; (24009068 <HAL_FLASHEx_ComputeCRC+0x100>)
24009000:	4293      	cmp	r3, r2
24009002:	d106      	bne.n	24009012 <HAL_FLASHEx_ComputeCRC+0xaa>
      {
        /* Enable Bank 1 CRC select bit */
        FLASH->CRCCR1 |= FLASH_CRCCR_ALL_BANK;
24009004:	4b17      	ldr	r3, [pc, #92]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009008:	4a16      	ldr	r2, [pc, #88]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
2400900a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2400900e:	6513      	str	r3, [r2, #80]	; 0x50
24009010:	e007      	b.n	24009022 <HAL_FLASHEx_ComputeCRC+0xba>
      }
      else
      {
        /* Select CRC start and end addresses */
        FLASH_CRC_SelectAddress(pCRCInit->CRCStartAddr, pCRCInit->CRCEndAddr, FLASH_BANK_1);
24009012:	687b      	ldr	r3, [r7, #4]
24009014:	6958      	ldr	r0, [r3, #20]
24009016:	687b      	ldr	r3, [r7, #4]
24009018:	699b      	ldr	r3, [r3, #24]
2400901a:	2201      	movs	r2, #1
2400901c:	4619      	mov	r1, r3
2400901e:	f000 fadb 	bl	240095d8 <FLASH_CRC_SelectAddress>
      }

      /* Start the CRC calculation */
      FLASH->CRCCR1 |= FLASH_CRCCR_START_CRC;
24009022:	4b10      	ldr	r3, [pc, #64]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009026:	4a0f      	ldr	r2, [pc, #60]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400902c:	6513      	str	r3, [r2, #80]	; 0x50

      /* Wait on CRC busy flag */
      status = FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
2400902e:	2101      	movs	r1, #1
24009030:	f24c 3050 	movw	r0, #50000	; 0xc350
24009034:	f7ff fd32 	bl	24008a9c <FLASH_CRC_WaitForLastOperation>
24009038:	4603      	mov	r3, r0
2400903a:	73fb      	strb	r3, [r7, #15]

      /* Return CRC result */
      (*CRC_Result) = FLASH->CRCDATA;
2400903c:	4b09      	ldr	r3, [pc, #36]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
2400903e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24009040:	683b      	ldr	r3, [r7, #0]
24009042:	601a      	str	r2, [r3, #0]

      /* Disable CRC feature */
      FLASH->CR1 &= (~FLASH_CR_CRC_EN);
24009044:	4b07      	ldr	r3, [pc, #28]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009046:	68db      	ldr	r3, [r3, #12]
24009048:	4a06      	ldr	r2, [pc, #24]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
2400904a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2400904e:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCEND_BANK1 | FLASH_FLAG_CRCRDERR_BANK1);
24009050:	4b04      	ldr	r3, [pc, #16]	; (24009064 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009052:	f04f 52c0 	mov.w	r2, #402653184	; 0x18000000
24009056:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCEND_BANK2 | FLASH_FLAG_CRCRDERR_BANK2);
    }
#endif /* DUAL_BANK */
  }

  return status;
24009058:	7bfb      	ldrb	r3, [r7, #15]
}
2400905a:	4618      	mov	r0, r3
2400905c:	3710      	adds	r7, #16
2400905e:	46bd      	mov	sp, r7
24009060:	bd80      	pop	{r7, pc}
24009062:	bf00      	nop
24009064:	52002000 	.word	0x52002000
24009068:	00400100 	.word	0x00400100

2400906c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
2400906c:	b480      	push	{r7}
2400906e:	b083      	sub	sp, #12
24009070:	af00      	add	r7, sp, #0
24009072:	6078      	str	r0, [r7, #4]
24009074:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009076:	683b      	ldr	r3, [r7, #0]
24009078:	f003 0301 	and.w	r3, r3, #1
2400907c:	2b00      	cmp	r3, #0
2400907e:	d011      	beq.n	240090a4 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
24009080:	4b0b      	ldr	r3, [pc, #44]	; (240090b0 <FLASH_MassErase+0x44>)
24009082:	68db      	ldr	r3, [r3, #12]
24009084:	4a0a      	ldr	r2, [pc, #40]	; (240090b0 <FLASH_MassErase+0x44>)
24009086:	f023 0330 	bic.w	r3, r3, #48	; 0x30
2400908a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
2400908c:	4b08      	ldr	r3, [pc, #32]	; (240090b0 <FLASH_MassErase+0x44>)
2400908e:	68da      	ldr	r2, [r3, #12]
24009090:	4907      	ldr	r1, [pc, #28]	; (240090b0 <FLASH_MassErase+0x44>)
24009092:	687b      	ldr	r3, [r7, #4]
24009094:	4313      	orrs	r3, r2
24009096:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
24009098:	4b05      	ldr	r3, [pc, #20]	; (240090b0 <FLASH_MassErase+0x44>)
2400909a:	68db      	ldr	r3, [r3, #12]
2400909c:	4a04      	ldr	r2, [pc, #16]	; (240090b0 <FLASH_MassErase+0x44>)
2400909e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
240090a2:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
240090a4:	bf00      	nop
240090a6:	370c      	adds	r7, #12
240090a8:	46bd      	mov	sp, r7
240090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
240090ae:	4770      	bx	lr
240090b0:	52002000 	.word	0x52002000

240090b4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
240090b4:	b480      	push	{r7}
240090b6:	b085      	sub	sp, #20
240090b8:	af00      	add	r7, sp, #0
240090ba:	60f8      	str	r0, [r7, #12]
240090bc:	60b9      	str	r1, [r7, #8]
240090be:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
240090c0:	68bb      	ldr	r3, [r7, #8]
240090c2:	f003 0301 	and.w	r3, r3, #1
240090c6:	2b00      	cmp	r3, #0
240090c8:	d010      	beq.n	240090ec <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
240090ca:	4b0b      	ldr	r3, [pc, #44]	; (240090f8 <FLASH_Erase_Sector+0x44>)
240090cc:	68db      	ldr	r3, [r3, #12]
240090ce:	4a0a      	ldr	r2, [pc, #40]	; (240090f8 <FLASH_Erase_Sector+0x44>)
240090d0:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
240090d4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
240090d6:	4b08      	ldr	r3, [pc, #32]	; (240090f8 <FLASH_Erase_Sector+0x44>)
240090d8:	68da      	ldr	r2, [r3, #12]
240090da:	68fb      	ldr	r3, [r7, #12]
240090dc:	0219      	lsls	r1, r3, #8
240090de:	687b      	ldr	r3, [r7, #4]
240090e0:	430b      	orrs	r3, r1
240090e2:	4313      	orrs	r3, r2
240090e4:	4a04      	ldr	r2, [pc, #16]	; (240090f8 <FLASH_Erase_Sector+0x44>)
240090e6:	f043 0384 	orr.w	r3, r3, #132	; 0x84
240090ea:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
240090ec:	bf00      	nop
240090ee:	3714      	adds	r7, #20
240090f0:	46bd      	mov	sp, r7
240090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240090f6:	4770      	bx	lr
240090f8:	52002000 	.word	0x52002000

240090fc <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
240090fc:	b480      	push	{r7}
240090fe:	b083      	sub	sp, #12
24009100:	af00      	add	r7, sp, #0
24009102:	6078      	str	r0, [r7, #4]
24009104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009106:	683b      	ldr	r3, [r7, #0]
24009108:	f003 0301 	and.w	r3, r3, #1
2400910c:	2b00      	cmp	r3, #0
2400910e:	d007      	beq.n	24009120 <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
24009110:	4b06      	ldr	r3, [pc, #24]	; (2400912c <FLASH_OB_EnableWRP+0x30>)
24009112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24009114:	687b      	ldr	r3, [r7, #4]
24009116:	b2db      	uxtb	r3, r3
24009118:	43db      	mvns	r3, r3
2400911a:	4904      	ldr	r1, [pc, #16]	; (2400912c <FLASH_OB_EnableWRP+0x30>)
2400911c:	4013      	ands	r3, r2
2400911e:	63cb      	str	r3, [r1, #60]	; 0x3c
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
  }
#endif /* DUAL_BANK */
}
24009120:	bf00      	nop
24009122:	370c      	adds	r7, #12
24009124:	46bd      	mov	sp, r7
24009126:	f85d 7b04 	ldr.w	r7, [sp], #4
2400912a:	4770      	bx	lr
2400912c:	52002000 	.word	0x52002000

24009130 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
24009130:	b480      	push	{r7}
24009132:	b083      	sub	sp, #12
24009134:	af00      	add	r7, sp, #0
24009136:	6078      	str	r0, [r7, #4]
24009138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400913a:	683b      	ldr	r3, [r7, #0]
2400913c:	f003 0301 	and.w	r3, r3, #1
24009140:	2b00      	cmp	r3, #0
24009142:	d006      	beq.n	24009152 <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
24009144:	4b06      	ldr	r3, [pc, #24]	; (24009160 <FLASH_OB_DisableWRP+0x30>)
24009146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24009148:	687b      	ldr	r3, [r7, #4]
2400914a:	b2db      	uxtb	r3, r3
2400914c:	4904      	ldr	r1, [pc, #16]	; (24009160 <FLASH_OB_DisableWRP+0x30>)
2400914e:	4313      	orrs	r3, r2
24009150:	63cb      	str	r3, [r1, #60]	; 0x3c
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
  }
#endif /* DUAL_BANK */
}
24009152:	bf00      	nop
24009154:	370c      	adds	r7, #12
24009156:	46bd      	mov	sp, r7
24009158:	f85d 7b04 	ldr.w	r7, [sp], #4
2400915c:	4770      	bx	lr
2400915e:	bf00      	nop
24009160:	52002000 	.word	0x52002000

24009164 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
24009164:	b480      	push	{r7}
24009166:	b087      	sub	sp, #28
24009168:	af00      	add	r7, sp, #0
2400916a:	60f8      	str	r0, [r7, #12]
2400916c:	60b9      	str	r1, [r7, #8]
2400916e:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
24009170:	2300      	movs	r3, #0
24009172:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
24009174:	687b      	ldr	r3, [r7, #4]
24009176:	2b01      	cmp	r3, #1
24009178:	d102      	bne.n	24009180 <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
2400917a:	4b0c      	ldr	r3, [pc, #48]	; (240091ac <FLASH_OB_GetWRP+0x48>)
2400917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400917e:	617b      	str	r3, [r7, #20]
  {
    regvalue = FLASH->WPSN_CUR2;
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
24009180:	697b      	ldr	r3, [r7, #20]
24009182:	43db      	mvns	r3, r3
24009184:	b2da      	uxtb	r2, r3
24009186:	68bb      	ldr	r3, [r7, #8]
24009188:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
2400918a:	68bb      	ldr	r3, [r7, #8]
2400918c:	681b      	ldr	r3, [r3, #0]
2400918e:	2b00      	cmp	r3, #0
24009190:	d103      	bne.n	2400919a <FLASH_OB_GetWRP+0x36>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
24009192:	68fb      	ldr	r3, [r7, #12]
24009194:	2200      	movs	r2, #0
24009196:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
24009198:	e002      	b.n	240091a0 <FLASH_OB_GetWRP+0x3c>
    (*WRPState) = OB_WRPSTATE_ENABLE;
2400919a:	68fb      	ldr	r3, [r7, #12]
2400919c:	2201      	movs	r2, #1
2400919e:	601a      	str	r2, [r3, #0]
}
240091a0:	bf00      	nop
240091a2:	371c      	adds	r7, #28
240091a4:	46bd      	mov	sp, r7
240091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240091aa:	4770      	bx	lr
240091ac:	52002000 	.word	0x52002000

240091b0 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
240091b0:	b480      	push	{r7}
240091b2:	b083      	sub	sp, #12
240091b4:	af00      	add	r7, sp, #0
240091b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
240091b8:	4b06      	ldr	r3, [pc, #24]	; (240091d4 <FLASH_OB_RDPConfig+0x24>)
240091ba:	6a1b      	ldr	r3, [r3, #32]
240091bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
240091c0:	4904      	ldr	r1, [pc, #16]	; (240091d4 <FLASH_OB_RDPConfig+0x24>)
240091c2:	687b      	ldr	r3, [r7, #4]
240091c4:	4313      	orrs	r3, r2
240091c6:	620b      	str	r3, [r1, #32]
}
240091c8:	bf00      	nop
240091ca:	370c      	adds	r7, #12
240091cc:	46bd      	mov	sp, r7
240091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
240091d2:	4770      	bx	lr
240091d4:	52002000 	.word	0x52002000

240091d8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
240091d8:	b480      	push	{r7}
240091da:	b083      	sub	sp, #12
240091dc:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
240091de:	4b0b      	ldr	r3, [pc, #44]	; (2400920c <FLASH_OB_GetRDP+0x34>)
240091e0:	69db      	ldr	r3, [r3, #28]
240091e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
240091e6:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
240091e8:	687b      	ldr	r3, [r7, #4]
240091ea:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
240091ee:	d006      	beq.n	240091fe <FLASH_OB_GetRDP+0x26>
240091f0:	687b      	ldr	r3, [r7, #4]
240091f2:	f5b3 4f4c 	cmp.w	r3, #52224	; 0xcc00
240091f6:	d002      	beq.n	240091fe <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
240091f8:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
240091fc:	e000      	b.n	24009200 <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
240091fe:	687b      	ldr	r3, [r7, #4]
  }
}
24009200:	4618      	mov	r0, r3
24009202:	370c      	adds	r7, #12
24009204:	46bd      	mov	sp, r7
24009206:	f85d 7b04 	ldr.w	r7, [sp], #4
2400920a:	4770      	bx	lr
2400920c:	52002000 	.word	0x52002000

24009210 <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
24009210:	b480      	push	{r7}
24009212:	b085      	sub	sp, #20
24009214:	af00      	add	r7, sp, #0
24009216:	6078      	str	r0, [r7, #4]
24009218:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
2400921a:	2300      	movs	r3, #0
2400921c:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
2400921e:	2300      	movs	r3, #0
24009220:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
24009222:	687b      	ldr	r3, [r7, #4]
24009224:	f003 0301 	and.w	r3, r3, #1
24009228:	2b00      	cmp	r3, #0
2400922a:	d009      	beq.n	24009240 <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
2400922c:	683b      	ldr	r3, [r7, #0]
2400922e:	f003 0310 	and.w	r3, r3, #16
24009232:	68fa      	ldr	r2, [r7, #12]
24009234:	4313      	orrs	r3, r2
24009236:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
24009238:	68bb      	ldr	r3, [r7, #8]
2400923a:	f043 0310 	orr.w	r3, r3, #16
2400923e:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
24009240:	687b      	ldr	r3, [r7, #4]
24009242:	f003 0302 	and.w	r3, r3, #2
24009246:	2b00      	cmp	r3, #0
24009248:	d009      	beq.n	2400925e <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
2400924a:	683b      	ldr	r3, [r7, #0]
2400924c:	f003 0340 	and.w	r3, r3, #64	; 0x40
24009250:	68fa      	ldr	r2, [r7, #12]
24009252:	4313      	orrs	r3, r2
24009254:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
24009256:	68bb      	ldr	r3, [r7, #8]
24009258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400925c:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
2400925e:	687b      	ldr	r3, [r7, #4]
24009260:	f003 0304 	and.w	r3, r3, #4
24009264:	2b00      	cmp	r3, #0
24009266:	d009      	beq.n	2400927c <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
24009268:	683b      	ldr	r3, [r7, #0]
2400926a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400926e:	68fa      	ldr	r2, [r7, #12]
24009270:	4313      	orrs	r3, r2
24009272:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
24009274:	68bb      	ldr	r3, [r7, #8]
24009276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400927a:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
2400927c:	687b      	ldr	r3, [r7, #4]
2400927e:	f003 0308 	and.w	r3, r3, #8
24009282:	2b00      	cmp	r3, #0
24009284:	d009      	beq.n	2400929a <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
24009286:	683b      	ldr	r3, [r7, #0]
24009288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2400928c:	68fa      	ldr	r2, [r7, #12]
2400928e:	4313      	orrs	r3, r2
24009290:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
24009292:	68bb      	ldr	r3, [r7, #8]
24009294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009298:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
2400929a:	687b      	ldr	r3, [r7, #4]
2400929c:	f003 0310 	and.w	r3, r3, #16
240092a0:	2b00      	cmp	r3, #0
240092a2:	d009      	beq.n	240092b8 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
240092a4:	683b      	ldr	r3, [r7, #0]
240092a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240092aa:	68fa      	ldr	r2, [r7, #12]
240092ac:	4313      	orrs	r3, r2
240092ae:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
240092b0:	68bb      	ldr	r3, [r7, #8]
240092b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240092b6:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
240092b8:	687b      	ldr	r3, [r7, #4]
240092ba:	f003 0320 	and.w	r3, r3, #32
240092be:	2b00      	cmp	r3, #0
240092c0:	d009      	beq.n	240092d6 <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
240092c2:	683b      	ldr	r3, [r7, #0]
240092c4:	f403 13c0 	and.w	r3, r3, #1572864	; 0x180000
240092c8:	68fa      	ldr	r2, [r7, #12]
240092ca:	4313      	orrs	r3, r2
240092cc:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
240092ce:	68bb      	ldr	r3, [r7, #8]
240092d0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
240092d4:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
240092d6:	687b      	ldr	r3, [r7, #4]
240092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
240092dc:	2b00      	cmp	r3, #0
240092de:	d009      	beq.n	240092f4 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
240092e0:	683b      	ldr	r3, [r7, #0]
240092e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240092e6:	68fa      	ldr	r2, [r7, #12]
240092e8:	4313      	orrs	r3, r2
240092ea:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
240092ec:	68bb      	ldr	r3, [r7, #8]
240092ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
240092f2:	60bb      	str	r3, [r7, #8]
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
240092f4:	687b      	ldr	r3, [r7, #4]
240092f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
240092fa:	2b00      	cmp	r3, #0
240092fc:	d009      	beq.n	24009312 <FLASH_OB_UserConfig+0x102>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
240092fe:	683b      	ldr	r3, [r7, #0]
24009300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24009304:	68fa      	ldr	r2, [r7, #12]
24009306:	4313      	orrs	r3, r2
24009308:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
2400930a:	68bb      	ldr	r3, [r7, #8]
2400930c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24009310:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
24009312:	4b07      	ldr	r3, [pc, #28]	; (24009330 <FLASH_OB_UserConfig+0x120>)
24009314:	6a1a      	ldr	r2, [r3, #32]
24009316:	68bb      	ldr	r3, [r7, #8]
24009318:	43db      	mvns	r3, r3
2400931a:	401a      	ands	r2, r3
2400931c:	4904      	ldr	r1, [pc, #16]	; (24009330 <FLASH_OB_UserConfig+0x120>)
2400931e:	68fb      	ldr	r3, [r7, #12]
24009320:	4313      	orrs	r3, r2
24009322:	620b      	str	r3, [r1, #32]
}
24009324:	bf00      	nop
24009326:	3714      	adds	r7, #20
24009328:	46bd      	mov	sp, r7
2400932a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400932e:	4770      	bx	lr
24009330:	52002000 	.word	0x52002000

24009334 <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
24009334:	b480      	push	{r7}
24009336:	b083      	sub	sp, #12
24009338:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
2400933a:	4b07      	ldr	r3, [pc, #28]	; (24009358 <FLASH_OB_GetUser+0x24>)
2400933c:	69db      	ldr	r3, [r3, #28]
2400933e:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
24009340:	687a      	ldr	r2, [r7, #4]
24009342:	4b06      	ldr	r3, [pc, #24]	; (2400935c <FLASH_OB_GetUser+0x28>)
24009344:	4013      	ands	r3, r2
24009346:	607b      	str	r3, [r7, #4]

  return userConfig;
24009348:	687b      	ldr	r3, [r7, #4]
}
2400934a:	4618      	mov	r0, r3
2400934c:	370c      	adds	r7, #12
2400934e:	46bd      	mov	sp, r7
24009350:	f85d 7b04 	ldr.w	r7, [sp], #4
24009354:	4770      	bx	lr
24009356:	bf00      	nop
24009358:	52002000 	.word	0x52002000
2400935c:	ffff00f3 	.word	0xffff00f3

24009360 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
24009360:	b480      	push	{r7}
24009362:	b085      	sub	sp, #20
24009364:	af00      	add	r7, sp, #0
24009366:	60f8      	str	r0, [r7, #12]
24009368:	60b9      	str	r1, [r7, #8]
2400936a:	607a      	str	r2, [r7, #4]
2400936c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400936e:	683b      	ldr	r3, [r7, #0]
24009370:	f003 0301 	and.w	r3, r3, #1
24009374:	2b00      	cmp	r3, #0
24009376:	d00d      	beq.n	24009394 <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
24009378:	68bb      	ldr	r3, [r7, #8]
2400937a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2400937e:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
24009380:	687b      	ldr	r3, [r7, #4]
24009382:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
24009386:	0a1b      	lsrs	r3, r3, #8
24009388:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
2400938a:	431a      	orrs	r2, r3
2400938c:	4904      	ldr	r1, [pc, #16]	; (240093a0 <FLASH_OB_PCROPConfig+0x40>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
2400938e:	68fb      	ldr	r3, [r7, #12]
24009390:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
24009392:	62cb      	str	r3, [r1, #44]	; 0x2c
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
24009394:	bf00      	nop
24009396:	3714      	adds	r7, #20
24009398:	46bd      	mov	sp, r7
2400939a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400939e:	4770      	bx	lr
240093a0:	52002000 	.word	0x52002000

240093a4 <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
240093a4:	b480      	push	{r7}
240093a6:	b087      	sub	sp, #28
240093a8:	af00      	add	r7, sp, #0
240093aa:	60f8      	str	r0, [r7, #12]
240093ac:	60b9      	str	r1, [r7, #8]
240093ae:	607a      	str	r2, [r7, #4]
240093b0:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
240093b2:	2300      	movs	r3, #0
240093b4:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
240093b6:	2300      	movs	r3, #0
240093b8:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
240093ba:	683b      	ldr	r3, [r7, #0]
240093bc:	2b01      	cmp	r3, #1
240093be:	d105      	bne.n	240093cc <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
240093c0:	4b12      	ldr	r3, [pc, #72]	; (2400940c <FLASH_OB_GetPCROP+0x68>)
240093c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240093c4:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
240093c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
240093ca:	613b      	str	r3, [r7, #16]
    regvalue = FLASH->PRAR_CUR2;
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
240093cc:	697b      	ldr	r3, [r7, #20]
240093ce:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
240093d2:	68fb      	ldr	r3, [r7, #12]
240093d4:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
240093d6:	697b      	ldr	r3, [r7, #20]
240093d8:	021a      	lsls	r2, r3, #8
240093da:	4b0d      	ldr	r3, [pc, #52]	; (24009410 <FLASH_OB_GetPCROP+0x6c>)
240093dc:	4013      	ands	r3, r2
240093de:	693a      	ldr	r2, [r7, #16]
240093e0:	441a      	add	r2, r3
240093e2:	68bb      	ldr	r3, [r7, #8]
240093e4:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
240093e6:	697b      	ldr	r3, [r7, #20]
240093e8:	0c1b      	lsrs	r3, r3, #16
240093ea:	f3c3 020b 	ubfx	r2, r3, #0, #12
240093ee:	687b      	ldr	r3, [r7, #4]
240093f0:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
240093f2:	687b      	ldr	r3, [r7, #4]
240093f4:	681b      	ldr	r3, [r3, #0]
240093f6:	021a      	lsls	r2, r3, #8
240093f8:	693b      	ldr	r3, [r7, #16]
240093fa:	441a      	add	r2, r3
240093fc:	687b      	ldr	r3, [r7, #4]
240093fe:	601a      	str	r2, [r3, #0]
}
24009400:	bf00      	nop
24009402:	371c      	adds	r7, #28
24009404:	46bd      	mov	sp, r7
24009406:	f85d 7b04 	ldr.w	r7, [sp], #4
2400940a:	4770      	bx	lr
2400940c:	52002000 	.word	0x52002000
24009410:	000fff00 	.word	0x000fff00

24009414 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
24009414:	b480      	push	{r7}
24009416:	b083      	sub	sp, #12
24009418:	af00      	add	r7, sp, #0
2400941a:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
2400941c:	4b06      	ldr	r3, [pc, #24]	; (24009438 <FLASH_OB_BOR_LevelConfig+0x24>)
2400941e:	6a1b      	ldr	r3, [r3, #32]
24009420:	f023 020c 	bic.w	r2, r3, #12
24009424:	4904      	ldr	r1, [pc, #16]	; (24009438 <FLASH_OB_BOR_LevelConfig+0x24>)
24009426:	687b      	ldr	r3, [r7, #4]
24009428:	4313      	orrs	r3, r2
2400942a:	620b      	str	r3, [r1, #32]
}
2400942c:	bf00      	nop
2400942e:	370c      	adds	r7, #12
24009430:	46bd      	mov	sp, r7
24009432:	f85d 7b04 	ldr.w	r7, [sp], #4
24009436:	4770      	bx	lr
24009438:	52002000 	.word	0x52002000

2400943c <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
2400943c:	b480      	push	{r7}
2400943e:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
24009440:	4b04      	ldr	r3, [pc, #16]	; (24009454 <FLASH_OB_GetBOR+0x18>)
24009442:	69db      	ldr	r3, [r3, #28]
24009444:	f003 030c 	and.w	r3, r3, #12
}
24009448:	4618      	mov	r0, r3
2400944a:	46bd      	mov	sp, r7
2400944c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009450:	4770      	bx	lr
24009452:	bf00      	nop
24009454:	52002000 	.word	0x52002000

24009458 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
24009458:	b480      	push	{r7}
2400945a:	b085      	sub	sp, #20
2400945c:	af00      	add	r7, sp, #0
2400945e:	60f8      	str	r0, [r7, #12]
24009460:	60b9      	str	r1, [r7, #8]
24009462:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
24009464:	68fb      	ldr	r3, [r7, #12]
24009466:	f003 0301 	and.w	r3, r3, #1
2400946a:	2b00      	cmp	r3, #0
2400946c:	d008      	beq.n	24009480 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
2400946e:	4b0d      	ldr	r3, [pc, #52]	; (240094a4 <FLASH_OB_BootAddConfig+0x4c>)
24009470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
24009472:	4b0d      	ldr	r3, [pc, #52]	; (240094a8 <FLASH_OB_BootAddConfig+0x50>)
24009474:	4013      	ands	r3, r2
24009476:	68ba      	ldr	r2, [r7, #8]
24009478:	0c12      	lsrs	r2, r2, #16
2400947a:	490a      	ldr	r1, [pc, #40]	; (240094a4 <FLASH_OB_BootAddConfig+0x4c>)
2400947c:	4313      	orrs	r3, r2
2400947e:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
24009480:	68fb      	ldr	r3, [r7, #12]
24009482:	f003 0302 	and.w	r3, r3, #2
24009486:	2b00      	cmp	r3, #0
24009488:	d006      	beq.n	24009498 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
2400948a:	4b06      	ldr	r3, [pc, #24]	; (240094a4 <FLASH_OB_BootAddConfig+0x4c>)
2400948c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400948e:	b29a      	uxth	r2, r3
24009490:	4904      	ldr	r1, [pc, #16]	; (240094a4 <FLASH_OB_BootAddConfig+0x4c>)
24009492:	687b      	ldr	r3, [r7, #4]
24009494:	4313      	orrs	r3, r2
24009496:	644b      	str	r3, [r1, #68]	; 0x44
#endif /* DUAL_CORE */
  }
}
24009498:	bf00      	nop
2400949a:	3714      	adds	r7, #20
2400949c:	46bd      	mov	sp, r7
2400949e:	f85d 7b04 	ldr.w	r7, [sp], #4
240094a2:	4770      	bx	lr
240094a4:	52002000 	.word	0x52002000
240094a8:	ffff0000 	.word	0xffff0000

240094ac <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
240094ac:	b480      	push	{r7}
240094ae:	b085      	sub	sp, #20
240094b0:	af00      	add	r7, sp, #0
240094b2:	6078      	str	r0, [r7, #4]
240094b4:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
240094b6:	4b09      	ldr	r3, [pc, #36]	; (240094dc <FLASH_OB_GetBootAdd+0x30>)
240094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240094ba:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
240094bc:	68fb      	ldr	r3, [r7, #12]
240094be:	041a      	lsls	r2, r3, #16
240094c0:	687b      	ldr	r3, [r7, #4]
240094c2:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
240094c4:	68fa      	ldr	r2, [r7, #12]
240094c6:	4b06      	ldr	r3, [pc, #24]	; (240094e0 <FLASH_OB_GetBootAdd+0x34>)
240094c8:	4013      	ands	r3, r2
240094ca:	683a      	ldr	r2, [r7, #0]
240094cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
240094ce:	bf00      	nop
240094d0:	3714      	adds	r7, #20
240094d2:	46bd      	mov	sp, r7
240094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
240094d8:	4770      	bx	lr
240094da:	bf00      	nop
240094dc:	52002000 	.word	0x52002000
240094e0:	ffff0000 	.word	0xffff0000

240094e4 <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
240094e4:	b480      	push	{r7}
240094e6:	b085      	sub	sp, #20
240094e8:	af00      	add	r7, sp, #0
240094ea:	60f8      	str	r0, [r7, #12]
240094ec:	60b9      	str	r1, [r7, #8]
240094ee:	607a      	str	r2, [r7, #4]
240094f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
240094f2:	683b      	ldr	r3, [r7, #0]
240094f4:	f003 0301 	and.w	r3, r3, #1
240094f8:	2b00      	cmp	r3, #0
240094fa:	d00f      	beq.n	2400951c <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
240094fc:	68bb      	ldr	r3, [r7, #8]
240094fe:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
24009502:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
24009504:	687b      	ldr	r3, [r7, #4]
24009506:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2400950a:	0a1b      	lsrs	r3, r3, #8
2400950c:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400950e:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
24009510:	68fb      	ldr	r3, [r7, #12]
24009512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
24009516:	4904      	ldr	r1, [pc, #16]	; (24009528 <FLASH_OB_SecureAreaConfig+0x44>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
24009518:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400951a:	634b      	str	r3, [r1, #52]	; 0x34
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
                       (SecureAreaConfig & FLASH_SCAR_DMES);
  }
#endif /* DUAL_BANK */
}
2400951c:	bf00      	nop
2400951e:	3714      	adds	r7, #20
24009520:	46bd      	mov	sp, r7
24009522:	f85d 7b04 	ldr.w	r7, [sp], #4
24009526:	4770      	bx	lr
24009528:	52002000 	.word	0x52002000

2400952c <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
2400952c:	b480      	push	{r7}
2400952e:	b087      	sub	sp, #28
24009530:	af00      	add	r7, sp, #0
24009532:	60f8      	str	r0, [r7, #12]
24009534:	60b9      	str	r1, [r7, #8]
24009536:	607a      	str	r2, [r7, #4]
24009538:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
2400953a:	2300      	movs	r3, #0
2400953c:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
2400953e:	2300      	movs	r3, #0
24009540:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
24009542:	683b      	ldr	r3, [r7, #0]
24009544:	2b01      	cmp	r3, #1
24009546:	d105      	bne.n	24009554 <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
24009548:	4b12      	ldr	r3, [pc, #72]	; (24009594 <FLASH_OB_GetSecureArea+0x68>)
2400954a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400954c:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
2400954e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
24009552:	613b      	str	r3, [r7, #16]
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
24009554:	697b      	ldr	r3, [r7, #20]
24009556:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
2400955a:	68fb      	ldr	r3, [r7, #12]
2400955c:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
2400955e:	697b      	ldr	r3, [r7, #20]
24009560:	021a      	lsls	r2, r3, #8
24009562:	4b0d      	ldr	r3, [pc, #52]	; (24009598 <FLASH_OB_GetSecureArea+0x6c>)
24009564:	4013      	ands	r3, r2
24009566:	693a      	ldr	r2, [r7, #16]
24009568:	441a      	add	r2, r3
2400956a:	68bb      	ldr	r3, [r7, #8]
2400956c:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
2400956e:	697b      	ldr	r3, [r7, #20]
24009570:	0c1b      	lsrs	r3, r3, #16
24009572:	f3c3 020b 	ubfx	r2, r3, #0, #12
24009576:	687b      	ldr	r3, [r7, #4]
24009578:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
2400957a:	687b      	ldr	r3, [r7, #4]
2400957c:	681b      	ldr	r3, [r3, #0]
2400957e:	021a      	lsls	r2, r3, #8
24009580:	693b      	ldr	r3, [r7, #16]
24009582:	441a      	add	r2, r3
24009584:	687b      	ldr	r3, [r7, #4]
24009586:	601a      	str	r2, [r3, #0]
}
24009588:	bf00      	nop
2400958a:	371c      	adds	r7, #28
2400958c:	46bd      	mov	sp, r7
2400958e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009592:	4770      	bx	lr
24009594:	52002000 	.word	0x52002000
24009598:	000fff00 	.word	0x000fff00

2400959c <FLASH_CRC_AddSector>:
  * @param  Sector Specifies the CRC sector number
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_AddSector(uint32_t Sector, uint32_t Bank)
{
2400959c:	b480      	push	{r7}
2400959e:	b083      	sub	sp, #12
240095a0:	af00      	add	r7, sp, #0
240095a2:	6078      	str	r0, [r7, #4]
240095a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));

  if (Bank == FLASH_BANK_1)
240095a6:	683b      	ldr	r3, [r7, #0]
240095a8:	2b01      	cmp	r3, #1
240095aa:	d10d      	bne.n	240095c8 <FLASH_CRC_AddSector+0x2c>
  {
    /* Clear CRC sector */
    FLASH->CRCCR1 &= (~FLASH_CRCCR_CRC_SECT);
240095ac:	4b09      	ldr	r3, [pc, #36]	; (240095d4 <FLASH_CRC_AddSector+0x38>)
240095ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240095b0:	4a08      	ldr	r2, [pc, #32]	; (240095d4 <FLASH_CRC_AddSector+0x38>)
240095b2:	f023 0307 	bic.w	r3, r3, #7
240095b6:	6513      	str	r3, [r2, #80]	; 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR1 |= Sector | FLASH_CRCCR_ADD_SECT;
240095b8:	4b06      	ldr	r3, [pc, #24]	; (240095d4 <FLASH_CRC_AddSector+0x38>)
240095ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
240095bc:	687b      	ldr	r3, [r7, #4]
240095be:	4313      	orrs	r3, r2
240095c0:	4a04      	ldr	r2, [pc, #16]	; (240095d4 <FLASH_CRC_AddSector+0x38>)
240095c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
240095c6:	6513      	str	r3, [r2, #80]	; 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR2 |= Sector | FLASH_CRCCR_ADD_SECT;
  }
#endif /* DUAL_BANK */
}
240095c8:	bf00      	nop
240095ca:	370c      	adds	r7, #12
240095cc:	46bd      	mov	sp, r7
240095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
240095d2:	4770      	bx	lr
240095d4:	52002000 	.word	0x52002000

240095d8 <FLASH_CRC_SelectAddress>:
  * @param  CRCEndAddr Specifies the CRC end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_SelectAddress(uint32_t CRCStartAddr, uint32_t CRCEndAddr, uint32_t Bank)
{
240095d8:	b480      	push	{r7}
240095da:	b085      	sub	sp, #20
240095dc:	af00      	add	r7, sp, #0
240095de:	60f8      	str	r0, [r7, #12]
240095e0:	60b9      	str	r1, [r7, #8]
240095e2:	607a      	str	r2, [r7, #4]
  if (Bank == FLASH_BANK_1)
240095e4:	687b      	ldr	r3, [r7, #4]
240095e6:	2b01      	cmp	r3, #1
240095e8:	d105      	bne.n	240095f6 <FLASH_CRC_SelectAddress+0x1e>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCEndAddr));

    /* Write CRC Start and End addresses */
    FLASH->CRCSADD1 = CRCStartAddr;
240095ea:	4a06      	ldr	r2, [pc, #24]	; (24009604 <FLASH_CRC_SelectAddress+0x2c>)
240095ec:	68fb      	ldr	r3, [r7, #12]
240095ee:	6553      	str	r3, [r2, #84]	; 0x54
    FLASH->CRCEADD1 = CRCEndAddr;
240095f0:	4a04      	ldr	r2, [pc, #16]	; (24009604 <FLASH_CRC_SelectAddress+0x2c>)
240095f2:	68bb      	ldr	r3, [r7, #8]
240095f4:	6593      	str	r3, [r2, #88]	; 0x58
    /* Write CRC Start and End addresses */
    FLASH->CRCSADD2 = CRCStartAddr;
    FLASH->CRCEADD2 = CRCEndAddr;
  }
#endif /* DUAL_BANK */
}
240095f6:	bf00      	nop
240095f8:	3714      	adds	r7, #20
240095fa:	46bd      	mov	sp, r7
240095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24009600:	4770      	bx	lr
24009602:	bf00      	nop
24009604:	52002000 	.word	0x52002000

24009608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24009608:	b480      	push	{r7}
2400960a:	b089      	sub	sp, #36	; 0x24
2400960c:	af00      	add	r7, sp, #0
2400960e:	6078      	str	r0, [r7, #4]
24009610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24009612:	2300      	movs	r3, #0
24009614:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24009616:	4b89      	ldr	r3, [pc, #548]	; (2400983c <HAL_GPIO_Init+0x234>)
24009618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400961a:	e194      	b.n	24009946 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2400961c:	683b      	ldr	r3, [r7, #0]
2400961e:	681a      	ldr	r2, [r3, #0]
24009620:	2101      	movs	r1, #1
24009622:	69fb      	ldr	r3, [r7, #28]
24009624:	fa01 f303 	lsl.w	r3, r1, r3
24009628:	4013      	ands	r3, r2
2400962a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
2400962c:	693b      	ldr	r3, [r7, #16]
2400962e:	2b00      	cmp	r3, #0
24009630:	f000 8186 	beq.w	24009940 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24009634:	683b      	ldr	r3, [r7, #0]
24009636:	685b      	ldr	r3, [r3, #4]
24009638:	f003 0303 	and.w	r3, r3, #3
2400963c:	2b01      	cmp	r3, #1
2400963e:	d005      	beq.n	2400964c <HAL_GPIO_Init+0x44>
24009640:	683b      	ldr	r3, [r7, #0]
24009642:	685b      	ldr	r3, [r3, #4]
24009644:	f003 0303 	and.w	r3, r3, #3
24009648:	2b02      	cmp	r3, #2
2400964a:	d130      	bne.n	240096ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
2400964c:	687b      	ldr	r3, [r7, #4]
2400964e:	689b      	ldr	r3, [r3, #8]
24009650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24009652:	69fb      	ldr	r3, [r7, #28]
24009654:	005b      	lsls	r3, r3, #1
24009656:	2203      	movs	r2, #3
24009658:	fa02 f303 	lsl.w	r3, r2, r3
2400965c:	43db      	mvns	r3, r3
2400965e:	69ba      	ldr	r2, [r7, #24]
24009660:	4013      	ands	r3, r2
24009662:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
24009664:	683b      	ldr	r3, [r7, #0]
24009666:	68da      	ldr	r2, [r3, #12]
24009668:	69fb      	ldr	r3, [r7, #28]
2400966a:	005b      	lsls	r3, r3, #1
2400966c:	fa02 f303 	lsl.w	r3, r2, r3
24009670:	69ba      	ldr	r2, [r7, #24]
24009672:	4313      	orrs	r3, r2
24009674:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
24009676:	687b      	ldr	r3, [r7, #4]
24009678:	69ba      	ldr	r2, [r7, #24]
2400967a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2400967c:	687b      	ldr	r3, [r7, #4]
2400967e:	685b      	ldr	r3, [r3, #4]
24009680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24009682:	2201      	movs	r2, #1
24009684:	69fb      	ldr	r3, [r7, #28]
24009686:	fa02 f303 	lsl.w	r3, r2, r3
2400968a:	43db      	mvns	r3, r3
2400968c:	69ba      	ldr	r2, [r7, #24]
2400968e:	4013      	ands	r3, r2
24009690:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24009692:	683b      	ldr	r3, [r7, #0]
24009694:	685b      	ldr	r3, [r3, #4]
24009696:	091b      	lsrs	r3, r3, #4
24009698:	f003 0201 	and.w	r2, r3, #1
2400969c:	69fb      	ldr	r3, [r7, #28]
2400969e:	fa02 f303 	lsl.w	r3, r2, r3
240096a2:	69ba      	ldr	r2, [r7, #24]
240096a4:	4313      	orrs	r3, r2
240096a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
240096a8:	687b      	ldr	r3, [r7, #4]
240096aa:	69ba      	ldr	r2, [r7, #24]
240096ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
240096ae:	683b      	ldr	r3, [r7, #0]
240096b0:	685b      	ldr	r3, [r3, #4]
240096b2:	f003 0303 	and.w	r3, r3, #3
240096b6:	2b03      	cmp	r3, #3
240096b8:	d017      	beq.n	240096ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
240096ba:	687b      	ldr	r3, [r7, #4]
240096bc:	68db      	ldr	r3, [r3, #12]
240096be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
240096c0:	69fb      	ldr	r3, [r7, #28]
240096c2:	005b      	lsls	r3, r3, #1
240096c4:	2203      	movs	r2, #3
240096c6:	fa02 f303 	lsl.w	r3, r2, r3
240096ca:	43db      	mvns	r3, r3
240096cc:	69ba      	ldr	r2, [r7, #24]
240096ce:	4013      	ands	r3, r2
240096d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240096d2:	683b      	ldr	r3, [r7, #0]
240096d4:	689a      	ldr	r2, [r3, #8]
240096d6:	69fb      	ldr	r3, [r7, #28]
240096d8:	005b      	lsls	r3, r3, #1
240096da:	fa02 f303 	lsl.w	r3, r2, r3
240096de:	69ba      	ldr	r2, [r7, #24]
240096e0:	4313      	orrs	r3, r2
240096e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
240096e4:	687b      	ldr	r3, [r7, #4]
240096e6:	69ba      	ldr	r2, [r7, #24]
240096e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
240096ea:	683b      	ldr	r3, [r7, #0]
240096ec:	685b      	ldr	r3, [r3, #4]
240096ee:	f003 0303 	and.w	r3, r3, #3
240096f2:	2b02      	cmp	r3, #2
240096f4:	d123      	bne.n	2400973e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
240096f6:	69fb      	ldr	r3, [r7, #28]
240096f8:	08da      	lsrs	r2, r3, #3
240096fa:	687b      	ldr	r3, [r7, #4]
240096fc:	3208      	adds	r2, #8
240096fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
24009702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24009704:	69fb      	ldr	r3, [r7, #28]
24009706:	f003 0307 	and.w	r3, r3, #7
2400970a:	009b      	lsls	r3, r3, #2
2400970c:	220f      	movs	r2, #15
2400970e:	fa02 f303 	lsl.w	r3, r2, r3
24009712:	43db      	mvns	r3, r3
24009714:	69ba      	ldr	r2, [r7, #24]
24009716:	4013      	ands	r3, r2
24009718:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400971a:	683b      	ldr	r3, [r7, #0]
2400971c:	691a      	ldr	r2, [r3, #16]
2400971e:	69fb      	ldr	r3, [r7, #28]
24009720:	f003 0307 	and.w	r3, r3, #7
24009724:	009b      	lsls	r3, r3, #2
24009726:	fa02 f303 	lsl.w	r3, r2, r3
2400972a:	69ba      	ldr	r2, [r7, #24]
2400972c:	4313      	orrs	r3, r2
2400972e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24009730:	69fb      	ldr	r3, [r7, #28]
24009732:	08da      	lsrs	r2, r3, #3
24009734:	687b      	ldr	r3, [r7, #4]
24009736:	3208      	adds	r2, #8
24009738:	69b9      	ldr	r1, [r7, #24]
2400973a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2400973e:	687b      	ldr	r3, [r7, #4]
24009740:	681b      	ldr	r3, [r3, #0]
24009742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24009744:	69fb      	ldr	r3, [r7, #28]
24009746:	005b      	lsls	r3, r3, #1
24009748:	2203      	movs	r2, #3
2400974a:	fa02 f303 	lsl.w	r3, r2, r3
2400974e:	43db      	mvns	r3, r3
24009750:	69ba      	ldr	r2, [r7, #24]
24009752:	4013      	ands	r3, r2
24009754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24009756:	683b      	ldr	r3, [r7, #0]
24009758:	685b      	ldr	r3, [r3, #4]
2400975a:	f003 0203 	and.w	r2, r3, #3
2400975e:	69fb      	ldr	r3, [r7, #28]
24009760:	005b      	lsls	r3, r3, #1
24009762:	fa02 f303 	lsl.w	r3, r2, r3
24009766:	69ba      	ldr	r2, [r7, #24]
24009768:	4313      	orrs	r3, r2
2400976a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2400976c:	687b      	ldr	r3, [r7, #4]
2400976e:	69ba      	ldr	r2, [r7, #24]
24009770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24009772:	683b      	ldr	r3, [r7, #0]
24009774:	685b      	ldr	r3, [r3, #4]
24009776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2400977a:	2b00      	cmp	r3, #0
2400977c:	f000 80e0 	beq.w	24009940 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24009780:	4b2f      	ldr	r3, [pc, #188]	; (24009840 <HAL_GPIO_Init+0x238>)
24009782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24009786:	4a2e      	ldr	r2, [pc, #184]	; (24009840 <HAL_GPIO_Init+0x238>)
24009788:	f043 0302 	orr.w	r3, r3, #2
2400978c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24009790:	4b2b      	ldr	r3, [pc, #172]	; (24009840 <HAL_GPIO_Init+0x238>)
24009792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24009796:	f003 0302 	and.w	r3, r3, #2
2400979a:	60fb      	str	r3, [r7, #12]
2400979c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2400979e:	4a29      	ldr	r2, [pc, #164]	; (24009844 <HAL_GPIO_Init+0x23c>)
240097a0:	69fb      	ldr	r3, [r7, #28]
240097a2:	089b      	lsrs	r3, r3, #2
240097a4:	3302      	adds	r3, #2
240097a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
240097aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240097ac:	69fb      	ldr	r3, [r7, #28]
240097ae:	f003 0303 	and.w	r3, r3, #3
240097b2:	009b      	lsls	r3, r3, #2
240097b4:	220f      	movs	r2, #15
240097b6:	fa02 f303 	lsl.w	r3, r2, r3
240097ba:	43db      	mvns	r3, r3
240097bc:	69ba      	ldr	r2, [r7, #24]
240097be:	4013      	ands	r3, r2
240097c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240097c2:	687b      	ldr	r3, [r7, #4]
240097c4:	4a20      	ldr	r2, [pc, #128]	; (24009848 <HAL_GPIO_Init+0x240>)
240097c6:	4293      	cmp	r3, r2
240097c8:	d052      	beq.n	24009870 <HAL_GPIO_Init+0x268>
240097ca:	687b      	ldr	r3, [r7, #4]
240097cc:	4a1f      	ldr	r2, [pc, #124]	; (2400984c <HAL_GPIO_Init+0x244>)
240097ce:	4293      	cmp	r3, r2
240097d0:	d031      	beq.n	24009836 <HAL_GPIO_Init+0x22e>
240097d2:	687b      	ldr	r3, [r7, #4]
240097d4:	4a1e      	ldr	r2, [pc, #120]	; (24009850 <HAL_GPIO_Init+0x248>)
240097d6:	4293      	cmp	r3, r2
240097d8:	d02b      	beq.n	24009832 <HAL_GPIO_Init+0x22a>
240097da:	687b      	ldr	r3, [r7, #4]
240097dc:	4a1d      	ldr	r2, [pc, #116]	; (24009854 <HAL_GPIO_Init+0x24c>)
240097de:	4293      	cmp	r3, r2
240097e0:	d025      	beq.n	2400982e <HAL_GPIO_Init+0x226>
240097e2:	687b      	ldr	r3, [r7, #4]
240097e4:	4a1c      	ldr	r2, [pc, #112]	; (24009858 <HAL_GPIO_Init+0x250>)
240097e6:	4293      	cmp	r3, r2
240097e8:	d01f      	beq.n	2400982a <HAL_GPIO_Init+0x222>
240097ea:	687b      	ldr	r3, [r7, #4]
240097ec:	4a1b      	ldr	r2, [pc, #108]	; (2400985c <HAL_GPIO_Init+0x254>)
240097ee:	4293      	cmp	r3, r2
240097f0:	d019      	beq.n	24009826 <HAL_GPIO_Init+0x21e>
240097f2:	687b      	ldr	r3, [r7, #4]
240097f4:	4a1a      	ldr	r2, [pc, #104]	; (24009860 <HAL_GPIO_Init+0x258>)
240097f6:	4293      	cmp	r3, r2
240097f8:	d013      	beq.n	24009822 <HAL_GPIO_Init+0x21a>
240097fa:	687b      	ldr	r3, [r7, #4]
240097fc:	4a19      	ldr	r2, [pc, #100]	; (24009864 <HAL_GPIO_Init+0x25c>)
240097fe:	4293      	cmp	r3, r2
24009800:	d00d      	beq.n	2400981e <HAL_GPIO_Init+0x216>
24009802:	687b      	ldr	r3, [r7, #4]
24009804:	4a18      	ldr	r2, [pc, #96]	; (24009868 <HAL_GPIO_Init+0x260>)
24009806:	4293      	cmp	r3, r2
24009808:	d007      	beq.n	2400981a <HAL_GPIO_Init+0x212>
2400980a:	687b      	ldr	r3, [r7, #4]
2400980c:	4a17      	ldr	r2, [pc, #92]	; (2400986c <HAL_GPIO_Init+0x264>)
2400980e:	4293      	cmp	r3, r2
24009810:	d101      	bne.n	24009816 <HAL_GPIO_Init+0x20e>
24009812:	2309      	movs	r3, #9
24009814:	e02d      	b.n	24009872 <HAL_GPIO_Init+0x26a>
24009816:	230a      	movs	r3, #10
24009818:	e02b      	b.n	24009872 <HAL_GPIO_Init+0x26a>
2400981a:	2308      	movs	r3, #8
2400981c:	e029      	b.n	24009872 <HAL_GPIO_Init+0x26a>
2400981e:	2307      	movs	r3, #7
24009820:	e027      	b.n	24009872 <HAL_GPIO_Init+0x26a>
24009822:	2306      	movs	r3, #6
24009824:	e025      	b.n	24009872 <HAL_GPIO_Init+0x26a>
24009826:	2305      	movs	r3, #5
24009828:	e023      	b.n	24009872 <HAL_GPIO_Init+0x26a>
2400982a:	2304      	movs	r3, #4
2400982c:	e021      	b.n	24009872 <HAL_GPIO_Init+0x26a>
2400982e:	2303      	movs	r3, #3
24009830:	e01f      	b.n	24009872 <HAL_GPIO_Init+0x26a>
24009832:	2302      	movs	r3, #2
24009834:	e01d      	b.n	24009872 <HAL_GPIO_Init+0x26a>
24009836:	2301      	movs	r3, #1
24009838:	e01b      	b.n	24009872 <HAL_GPIO_Init+0x26a>
2400983a:	bf00      	nop
2400983c:	58000080 	.word	0x58000080
24009840:	58024400 	.word	0x58024400
24009844:	58000400 	.word	0x58000400
24009848:	58020000 	.word	0x58020000
2400984c:	58020400 	.word	0x58020400
24009850:	58020800 	.word	0x58020800
24009854:	58020c00 	.word	0x58020c00
24009858:	58021000 	.word	0x58021000
2400985c:	58021400 	.word	0x58021400
24009860:	58021800 	.word	0x58021800
24009864:	58021c00 	.word	0x58021c00
24009868:	58022000 	.word	0x58022000
2400986c:	58022400 	.word	0x58022400
24009870:	2300      	movs	r3, #0
24009872:	69fa      	ldr	r2, [r7, #28]
24009874:	f002 0203 	and.w	r2, r2, #3
24009878:	0092      	lsls	r2, r2, #2
2400987a:	4093      	lsls	r3, r2
2400987c:	69ba      	ldr	r2, [r7, #24]
2400987e:	4313      	orrs	r3, r2
24009880:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
24009882:	4938      	ldr	r1, [pc, #224]	; (24009964 <HAL_GPIO_Init+0x35c>)
24009884:	69fb      	ldr	r3, [r7, #28]
24009886:	089b      	lsrs	r3, r3, #2
24009888:	3302      	adds	r3, #2
2400988a:	69ba      	ldr	r2, [r7, #24]
2400988c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24009890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24009894:	681b      	ldr	r3, [r3, #0]
24009896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24009898:	693b      	ldr	r3, [r7, #16]
2400989a:	43db      	mvns	r3, r3
2400989c:	69ba      	ldr	r2, [r7, #24]
2400989e:	4013      	ands	r3, r2
240098a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
240098a2:	683b      	ldr	r3, [r7, #0]
240098a4:	685b      	ldr	r3, [r3, #4]
240098a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240098aa:	2b00      	cmp	r3, #0
240098ac:	d003      	beq.n	240098b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
240098ae:	69ba      	ldr	r2, [r7, #24]
240098b0:	693b      	ldr	r3, [r7, #16]
240098b2:	4313      	orrs	r3, r2
240098b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
240098b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240098ba:	69bb      	ldr	r3, [r7, #24]
240098bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
240098be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240098c2:	685b      	ldr	r3, [r3, #4]
240098c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
240098c6:	693b      	ldr	r3, [r7, #16]
240098c8:	43db      	mvns	r3, r3
240098ca:	69ba      	ldr	r2, [r7, #24]
240098cc:	4013      	ands	r3, r2
240098ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
240098d0:	683b      	ldr	r3, [r7, #0]
240098d2:	685b      	ldr	r3, [r3, #4]
240098d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240098d8:	2b00      	cmp	r3, #0
240098da:	d003      	beq.n	240098e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
240098dc:	69ba      	ldr	r2, [r7, #24]
240098de:	693b      	ldr	r3, [r7, #16]
240098e0:	4313      	orrs	r3, r2
240098e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
240098e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240098e8:	69bb      	ldr	r3, [r7, #24]
240098ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
240098ec:	697b      	ldr	r3, [r7, #20]
240098ee:	685b      	ldr	r3, [r3, #4]
240098f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
240098f2:	693b      	ldr	r3, [r7, #16]
240098f4:	43db      	mvns	r3, r3
240098f6:	69ba      	ldr	r2, [r7, #24]
240098f8:	4013      	ands	r3, r2
240098fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
240098fc:	683b      	ldr	r3, [r7, #0]
240098fe:	685b      	ldr	r3, [r3, #4]
24009900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24009904:	2b00      	cmp	r3, #0
24009906:	d003      	beq.n	24009910 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
24009908:	69ba      	ldr	r2, [r7, #24]
2400990a:	693b      	ldr	r3, [r7, #16]
2400990c:	4313      	orrs	r3, r2
2400990e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
24009910:	697b      	ldr	r3, [r7, #20]
24009912:	69ba      	ldr	r2, [r7, #24]
24009914:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
24009916:	697b      	ldr	r3, [r7, #20]
24009918:	681b      	ldr	r3, [r3, #0]
2400991a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400991c:	693b      	ldr	r3, [r7, #16]
2400991e:	43db      	mvns	r3, r3
24009920:	69ba      	ldr	r2, [r7, #24]
24009922:	4013      	ands	r3, r2
24009924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24009926:	683b      	ldr	r3, [r7, #0]
24009928:	685b      	ldr	r3, [r3, #4]
2400992a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400992e:	2b00      	cmp	r3, #0
24009930:	d003      	beq.n	2400993a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
24009932:	69ba      	ldr	r2, [r7, #24]
24009934:	693b      	ldr	r3, [r7, #16]
24009936:	4313      	orrs	r3, r2
24009938:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400993a:	697b      	ldr	r3, [r7, #20]
2400993c:	69ba      	ldr	r2, [r7, #24]
2400993e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
24009940:	69fb      	ldr	r3, [r7, #28]
24009942:	3301      	adds	r3, #1
24009944:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24009946:	683b      	ldr	r3, [r7, #0]
24009948:	681a      	ldr	r2, [r3, #0]
2400994a:	69fb      	ldr	r3, [r7, #28]
2400994c:	fa22 f303 	lsr.w	r3, r2, r3
24009950:	2b00      	cmp	r3, #0
24009952:	f47f ae63 	bne.w	2400961c <HAL_GPIO_Init+0x14>
  }
}
24009956:	bf00      	nop
24009958:	bf00      	nop
2400995a:	3724      	adds	r7, #36	; 0x24
2400995c:	46bd      	mov	sp, r7
2400995e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009962:	4770      	bx	lr
24009964:	58000400 	.word	0x58000400

24009968 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
24009968:	b480      	push	{r7}
2400996a:	b087      	sub	sp, #28
2400996c:	af00      	add	r7, sp, #0
2400996e:	6078      	str	r0, [r7, #4]
24009970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24009972:	2300      	movs	r3, #0
24009974:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24009976:	4b75      	ldr	r3, [pc, #468]	; (24009b4c <HAL_GPIO_DeInit+0x1e4>)
24009978:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
2400997a:	e0d9      	b.n	24009b30 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
2400997c:	2201      	movs	r2, #1
2400997e:	697b      	ldr	r3, [r7, #20]
24009980:	fa02 f303 	lsl.w	r3, r2, r3
24009984:	683a      	ldr	r2, [r7, #0]
24009986:	4013      	ands	r3, r2
24009988:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
2400998a:	68fb      	ldr	r3, [r7, #12]
2400998c:	2b00      	cmp	r3, #0
2400998e:	f000 80cc 	beq.w	24009b2a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
24009992:	4a6f      	ldr	r2, [pc, #444]	; (24009b50 <HAL_GPIO_DeInit+0x1e8>)
24009994:	697b      	ldr	r3, [r7, #20]
24009996:	089b      	lsrs	r3, r3, #2
24009998:	3302      	adds	r3, #2
2400999a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400999e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
240099a0:	697b      	ldr	r3, [r7, #20]
240099a2:	f003 0303 	and.w	r3, r3, #3
240099a6:	009b      	lsls	r3, r3, #2
240099a8:	220f      	movs	r2, #15
240099aa:	fa02 f303 	lsl.w	r3, r2, r3
240099ae:	68ba      	ldr	r2, [r7, #8]
240099b0:	4013      	ands	r3, r2
240099b2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
240099b4:	687b      	ldr	r3, [r7, #4]
240099b6:	4a67      	ldr	r2, [pc, #412]	; (24009b54 <HAL_GPIO_DeInit+0x1ec>)
240099b8:	4293      	cmp	r3, r2
240099ba:	d037      	beq.n	24009a2c <HAL_GPIO_DeInit+0xc4>
240099bc:	687b      	ldr	r3, [r7, #4]
240099be:	4a66      	ldr	r2, [pc, #408]	; (24009b58 <HAL_GPIO_DeInit+0x1f0>)
240099c0:	4293      	cmp	r3, r2
240099c2:	d031      	beq.n	24009a28 <HAL_GPIO_DeInit+0xc0>
240099c4:	687b      	ldr	r3, [r7, #4]
240099c6:	4a65      	ldr	r2, [pc, #404]	; (24009b5c <HAL_GPIO_DeInit+0x1f4>)
240099c8:	4293      	cmp	r3, r2
240099ca:	d02b      	beq.n	24009a24 <HAL_GPIO_DeInit+0xbc>
240099cc:	687b      	ldr	r3, [r7, #4]
240099ce:	4a64      	ldr	r2, [pc, #400]	; (24009b60 <HAL_GPIO_DeInit+0x1f8>)
240099d0:	4293      	cmp	r3, r2
240099d2:	d025      	beq.n	24009a20 <HAL_GPIO_DeInit+0xb8>
240099d4:	687b      	ldr	r3, [r7, #4]
240099d6:	4a63      	ldr	r2, [pc, #396]	; (24009b64 <HAL_GPIO_DeInit+0x1fc>)
240099d8:	4293      	cmp	r3, r2
240099da:	d01f      	beq.n	24009a1c <HAL_GPIO_DeInit+0xb4>
240099dc:	687b      	ldr	r3, [r7, #4]
240099de:	4a62      	ldr	r2, [pc, #392]	; (24009b68 <HAL_GPIO_DeInit+0x200>)
240099e0:	4293      	cmp	r3, r2
240099e2:	d019      	beq.n	24009a18 <HAL_GPIO_DeInit+0xb0>
240099e4:	687b      	ldr	r3, [r7, #4]
240099e6:	4a61      	ldr	r2, [pc, #388]	; (24009b6c <HAL_GPIO_DeInit+0x204>)
240099e8:	4293      	cmp	r3, r2
240099ea:	d013      	beq.n	24009a14 <HAL_GPIO_DeInit+0xac>
240099ec:	687b      	ldr	r3, [r7, #4]
240099ee:	4a60      	ldr	r2, [pc, #384]	; (24009b70 <HAL_GPIO_DeInit+0x208>)
240099f0:	4293      	cmp	r3, r2
240099f2:	d00d      	beq.n	24009a10 <HAL_GPIO_DeInit+0xa8>
240099f4:	687b      	ldr	r3, [r7, #4]
240099f6:	4a5f      	ldr	r2, [pc, #380]	; (24009b74 <HAL_GPIO_DeInit+0x20c>)
240099f8:	4293      	cmp	r3, r2
240099fa:	d007      	beq.n	24009a0c <HAL_GPIO_DeInit+0xa4>
240099fc:	687b      	ldr	r3, [r7, #4]
240099fe:	4a5e      	ldr	r2, [pc, #376]	; (24009b78 <HAL_GPIO_DeInit+0x210>)
24009a00:	4293      	cmp	r3, r2
24009a02:	d101      	bne.n	24009a08 <HAL_GPIO_DeInit+0xa0>
24009a04:	2309      	movs	r3, #9
24009a06:	e012      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a08:	230a      	movs	r3, #10
24009a0a:	e010      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a0c:	2308      	movs	r3, #8
24009a0e:	e00e      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a10:	2307      	movs	r3, #7
24009a12:	e00c      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a14:	2306      	movs	r3, #6
24009a16:	e00a      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a18:	2305      	movs	r3, #5
24009a1a:	e008      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a1c:	2304      	movs	r3, #4
24009a1e:	e006      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a20:	2303      	movs	r3, #3
24009a22:	e004      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a24:	2302      	movs	r3, #2
24009a26:	e002      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a28:	2301      	movs	r3, #1
24009a2a:	e000      	b.n	24009a2e <HAL_GPIO_DeInit+0xc6>
24009a2c:	2300      	movs	r3, #0
24009a2e:	697a      	ldr	r2, [r7, #20]
24009a30:	f002 0203 	and.w	r2, r2, #3
24009a34:	0092      	lsls	r2, r2, #2
24009a36:	4093      	lsls	r3, r2
24009a38:	68ba      	ldr	r2, [r7, #8]
24009a3a:	429a      	cmp	r2, r3
24009a3c:	d136      	bne.n	24009aac <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
24009a3e:	693b      	ldr	r3, [r7, #16]
24009a40:	681a      	ldr	r2, [r3, #0]
24009a42:	68fb      	ldr	r3, [r7, #12]
24009a44:	43db      	mvns	r3, r3
24009a46:	401a      	ands	r2, r3
24009a48:	693b      	ldr	r3, [r7, #16]
24009a4a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
24009a4c:	693b      	ldr	r3, [r7, #16]
24009a4e:	685a      	ldr	r2, [r3, #4]
24009a50:	68fb      	ldr	r3, [r7, #12]
24009a52:	43db      	mvns	r3, r3
24009a54:	401a      	ands	r2, r3
24009a56:	693b      	ldr	r3, [r7, #16]
24009a58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
24009a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24009a5e:	685a      	ldr	r2, [r3, #4]
24009a60:	68fb      	ldr	r3, [r7, #12]
24009a62:	43db      	mvns	r3, r3
24009a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
24009a68:	4013      	ands	r3, r2
24009a6a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
24009a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24009a70:	681a      	ldr	r2, [r3, #0]
24009a72:	68fb      	ldr	r3, [r7, #12]
24009a74:	43db      	mvns	r3, r3
24009a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
24009a7a:	4013      	ands	r3, r2
24009a7c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
24009a7e:	697b      	ldr	r3, [r7, #20]
24009a80:	f003 0303 	and.w	r3, r3, #3
24009a84:	009b      	lsls	r3, r3, #2
24009a86:	220f      	movs	r2, #15
24009a88:	fa02 f303 	lsl.w	r3, r2, r3
24009a8c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
24009a8e:	4a30      	ldr	r2, [pc, #192]	; (24009b50 <HAL_GPIO_DeInit+0x1e8>)
24009a90:	697b      	ldr	r3, [r7, #20]
24009a92:	089b      	lsrs	r3, r3, #2
24009a94:	3302      	adds	r3, #2
24009a96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
24009a9a:	68bb      	ldr	r3, [r7, #8]
24009a9c:	43da      	mvns	r2, r3
24009a9e:	482c      	ldr	r0, [pc, #176]	; (24009b50 <HAL_GPIO_DeInit+0x1e8>)
24009aa0:	697b      	ldr	r3, [r7, #20]
24009aa2:	089b      	lsrs	r3, r3, #2
24009aa4:	400a      	ands	r2, r1
24009aa6:	3302      	adds	r3, #2
24009aa8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
24009aac:	687b      	ldr	r3, [r7, #4]
24009aae:	681a      	ldr	r2, [r3, #0]
24009ab0:	697b      	ldr	r3, [r7, #20]
24009ab2:	005b      	lsls	r3, r3, #1
24009ab4:	2103      	movs	r1, #3
24009ab6:	fa01 f303 	lsl.w	r3, r1, r3
24009aba:	431a      	orrs	r2, r3
24009abc:	687b      	ldr	r3, [r7, #4]
24009abe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
24009ac0:	697b      	ldr	r3, [r7, #20]
24009ac2:	08da      	lsrs	r2, r3, #3
24009ac4:	687b      	ldr	r3, [r7, #4]
24009ac6:	3208      	adds	r2, #8
24009ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
24009acc:	697b      	ldr	r3, [r7, #20]
24009ace:	f003 0307 	and.w	r3, r3, #7
24009ad2:	009b      	lsls	r3, r3, #2
24009ad4:	220f      	movs	r2, #15
24009ad6:	fa02 f303 	lsl.w	r3, r2, r3
24009ada:	43db      	mvns	r3, r3
24009adc:	697a      	ldr	r2, [r7, #20]
24009ade:	08d2      	lsrs	r2, r2, #3
24009ae0:	4019      	ands	r1, r3
24009ae2:	687b      	ldr	r3, [r7, #4]
24009ae4:	3208      	adds	r2, #8
24009ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24009aea:	687b      	ldr	r3, [r7, #4]
24009aec:	68da      	ldr	r2, [r3, #12]
24009aee:	697b      	ldr	r3, [r7, #20]
24009af0:	005b      	lsls	r3, r3, #1
24009af2:	2103      	movs	r1, #3
24009af4:	fa01 f303 	lsl.w	r3, r1, r3
24009af8:	43db      	mvns	r3, r3
24009afa:	401a      	ands	r2, r3
24009afc:	687b      	ldr	r3, [r7, #4]
24009afe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
24009b00:	687b      	ldr	r3, [r7, #4]
24009b02:	685a      	ldr	r2, [r3, #4]
24009b04:	2101      	movs	r1, #1
24009b06:	697b      	ldr	r3, [r7, #20]
24009b08:	fa01 f303 	lsl.w	r3, r1, r3
24009b0c:	43db      	mvns	r3, r3
24009b0e:	401a      	ands	r2, r3
24009b10:	687b      	ldr	r3, [r7, #4]
24009b12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24009b14:	687b      	ldr	r3, [r7, #4]
24009b16:	689a      	ldr	r2, [r3, #8]
24009b18:	697b      	ldr	r3, [r7, #20]
24009b1a:	005b      	lsls	r3, r3, #1
24009b1c:	2103      	movs	r1, #3
24009b1e:	fa01 f303 	lsl.w	r3, r1, r3
24009b22:	43db      	mvns	r3, r3
24009b24:	401a      	ands	r2, r3
24009b26:	687b      	ldr	r3, [r7, #4]
24009b28:	609a      	str	r2, [r3, #8]
    }

    position++;
24009b2a:	697b      	ldr	r3, [r7, #20]
24009b2c:	3301      	adds	r3, #1
24009b2e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
24009b30:	683a      	ldr	r2, [r7, #0]
24009b32:	697b      	ldr	r3, [r7, #20]
24009b34:	fa22 f303 	lsr.w	r3, r2, r3
24009b38:	2b00      	cmp	r3, #0
24009b3a:	f47f af1f 	bne.w	2400997c <HAL_GPIO_DeInit+0x14>
  }
}
24009b3e:	bf00      	nop
24009b40:	bf00      	nop
24009b42:	371c      	adds	r7, #28
24009b44:	46bd      	mov	sp, r7
24009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
24009b4a:	4770      	bx	lr
24009b4c:	58000080 	.word	0x58000080
24009b50:	58000400 	.word	0x58000400
24009b54:	58020000 	.word	0x58020000
24009b58:	58020400 	.word	0x58020400
24009b5c:	58020800 	.word	0x58020800
24009b60:	58020c00 	.word	0x58020c00
24009b64:	58021000 	.word	0x58021000
24009b68:	58021400 	.word	0x58021400
24009b6c:	58021800 	.word	0x58021800
24009b70:	58021c00 	.word	0x58021c00
24009b74:	58022000 	.word	0x58022000
24009b78:	58022400 	.word	0x58022400

24009b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24009b7c:	b480      	push	{r7}
24009b7e:	b085      	sub	sp, #20
24009b80:	af00      	add	r7, sp, #0
24009b82:	6078      	str	r0, [r7, #4]
24009b84:	460b      	mov	r3, r1
24009b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24009b88:	687b      	ldr	r3, [r7, #4]
24009b8a:	691a      	ldr	r2, [r3, #16]
24009b8c:	887b      	ldrh	r3, [r7, #2]
24009b8e:	4013      	ands	r3, r2
24009b90:	2b00      	cmp	r3, #0
24009b92:	d002      	beq.n	24009b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
24009b94:	2301      	movs	r3, #1
24009b96:	73fb      	strb	r3, [r7, #15]
24009b98:	e001      	b.n	24009b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
24009b9a:	2300      	movs	r3, #0
24009b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
24009b9e:	7bfb      	ldrb	r3, [r7, #15]
}
24009ba0:	4618      	mov	r0, r3
24009ba2:	3714      	adds	r7, #20
24009ba4:	46bd      	mov	sp, r7
24009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
24009baa:	4770      	bx	lr

24009bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
24009bac:	b480      	push	{r7}
24009bae:	b083      	sub	sp, #12
24009bb0:	af00      	add	r7, sp, #0
24009bb2:	6078      	str	r0, [r7, #4]
24009bb4:	460b      	mov	r3, r1
24009bb6:	807b      	strh	r3, [r7, #2]
24009bb8:	4613      	mov	r3, r2
24009bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24009bbc:	787b      	ldrb	r3, [r7, #1]
24009bbe:	2b00      	cmp	r3, #0
24009bc0:	d003      	beq.n	24009bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
24009bc2:	887a      	ldrh	r2, [r7, #2]
24009bc4:	687b      	ldr	r3, [r7, #4]
24009bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
24009bc8:	e003      	b.n	24009bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24009bca:	887b      	ldrh	r3, [r7, #2]
24009bcc:	041a      	lsls	r2, r3, #16
24009bce:	687b      	ldr	r3, [r7, #4]
24009bd0:	619a      	str	r2, [r3, #24]
}
24009bd2:	bf00      	nop
24009bd4:	370c      	adds	r7, #12
24009bd6:	46bd      	mov	sp, r7
24009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
24009bdc:	4770      	bx	lr

24009bde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24009bde:	b480      	push	{r7}
24009be0:	b085      	sub	sp, #20
24009be2:	af00      	add	r7, sp, #0
24009be4:	6078      	str	r0, [r7, #4]
24009be6:	460b      	mov	r3, r1
24009be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
24009bea:	687b      	ldr	r3, [r7, #4]
24009bec:	695b      	ldr	r3, [r3, #20]
24009bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
24009bf0:	887a      	ldrh	r2, [r7, #2]
24009bf2:	68fb      	ldr	r3, [r7, #12]
24009bf4:	4013      	ands	r3, r2
24009bf6:	041a      	lsls	r2, r3, #16
24009bf8:	68fb      	ldr	r3, [r7, #12]
24009bfa:	43d9      	mvns	r1, r3
24009bfc:	887b      	ldrh	r3, [r7, #2]
24009bfe:	400b      	ands	r3, r1
24009c00:	431a      	orrs	r2, r3
24009c02:	687b      	ldr	r3, [r7, #4]
24009c04:	619a      	str	r2, [r3, #24]
}
24009c06:	bf00      	nop
24009c08:	3714      	adds	r7, #20
24009c0a:	46bd      	mov	sp, r7
24009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009c10:	4770      	bx	lr

24009c12 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24009c12:	b480      	push	{r7}
24009c14:	b085      	sub	sp, #20
24009c16:	af00      	add	r7, sp, #0
24009c18:	6078      	str	r0, [r7, #4]
24009c1a:	460b      	mov	r3, r1
24009c1c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
24009c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24009c22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
24009c24:	887a      	ldrh	r2, [r7, #2]
24009c26:	68fb      	ldr	r3, [r7, #12]
24009c28:	4313      	orrs	r3, r2
24009c2a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
24009c2c:	68fa      	ldr	r2, [r7, #12]
24009c2e:	687b      	ldr	r3, [r7, #4]
24009c30:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
24009c32:	887a      	ldrh	r2, [r7, #2]
24009c34:	687b      	ldr	r3, [r7, #4]
24009c36:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
24009c38:	68fa      	ldr	r2, [r7, #12]
24009c3a:	687b      	ldr	r3, [r7, #4]
24009c3c:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence*/
  tmp = GPIOx->LCKR;
24009c3e:	687b      	ldr	r3, [r7, #4]
24009c40:	69db      	ldr	r3, [r3, #28]
24009c42:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00U)
24009c44:	687b      	ldr	r3, [r7, #4]
24009c46:	69db      	ldr	r3, [r3, #28]
24009c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24009c4c:	2b00      	cmp	r3, #0
24009c4e:	d001      	beq.n	24009c54 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
24009c50:	2300      	movs	r3, #0
24009c52:	e000      	b.n	24009c56 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
24009c54:	2301      	movs	r3, #1
  }
}
24009c56:	4618      	mov	r0, r3
24009c58:	3714      	adds	r7, #20
24009c5a:	46bd      	mov	sp, r7
24009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009c60:	4770      	bx	lr

24009c62 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
24009c62:	b580      	push	{r7, lr}
24009c64:	b082      	sub	sp, #8
24009c66:	af00      	add	r7, sp, #0
24009c68:	4603      	mov	r3, r0
24009c6a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
24009c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24009c70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
24009c74:	88fb      	ldrh	r3, [r7, #6]
24009c76:	4013      	ands	r3, r2
24009c78:	2b00      	cmp	r3, #0
24009c7a:	d008      	beq.n	24009c8e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
24009c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24009c80:	88fb      	ldrh	r3, [r7, #6]
24009c82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
24009c86:	88fb      	ldrh	r3, [r7, #6]
24009c88:	4618      	mov	r0, r3
24009c8a:	f000 f804 	bl	24009c96 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
24009c8e:	bf00      	nop
24009c90:	3708      	adds	r7, #8
24009c92:	46bd      	mov	sp, r7
24009c94:	bd80      	pop	{r7, pc}

24009c96 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
24009c96:	b480      	push	{r7}
24009c98:	b083      	sub	sp, #12
24009c9a:	af00      	add	r7, sp, #0
24009c9c:	4603      	mov	r3, r0
24009c9e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
24009ca0:	bf00      	nop
24009ca2:	370c      	adds	r7, #12
24009ca4:	46bd      	mov	sp, r7
24009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
24009caa:	4770      	bx	lr

24009cac <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
24009cac:	b480      	push	{r7}
24009cae:	b083      	sub	sp, #12
24009cb0:	af00      	add	r7, sp, #0
24009cb2:	6078      	str	r0, [r7, #4]
24009cb4:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
24009cb6:	490c      	ldr	r1, [pc, #48]	; (24009ce8 <HAL_HSEM_Take+0x3c>)
24009cb8:	683a      	ldr	r2, [r7, #0]
24009cba:	4b0c      	ldr	r3, [pc, #48]	; (24009cec <HAL_HSEM_Take+0x40>)
24009cbc:	4313      	orrs	r3, r2
24009cbe:	687a      	ldr	r2, [r7, #4]
24009cc0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
24009cc4:	4a08      	ldr	r2, [pc, #32]	; (24009ce8 <HAL_HSEM_Take+0x3c>)
24009cc6:	687b      	ldr	r3, [r7, #4]
24009cc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24009ccc:	6839      	ldr	r1, [r7, #0]
24009cce:	4b07      	ldr	r3, [pc, #28]	; (24009cec <HAL_HSEM_Take+0x40>)
24009cd0:	430b      	orrs	r3, r1
24009cd2:	429a      	cmp	r2, r3
24009cd4:	d101      	bne.n	24009cda <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
24009cd6:	2300      	movs	r3, #0
24009cd8:	e000      	b.n	24009cdc <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
24009cda:	2301      	movs	r3, #1
}
24009cdc:	4618      	mov	r0, r3
24009cde:	370c      	adds	r7, #12
24009ce0:	46bd      	mov	sp, r7
24009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
24009ce6:	4770      	bx	lr
24009ce8:	58026400 	.word	0x58026400
24009cec:	80000300 	.word	0x80000300

24009cf0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
24009cf0:	b480      	push	{r7}
24009cf2:	b083      	sub	sp, #12
24009cf4:	af00      	add	r7, sp, #0
24009cf6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
24009cf8:	4a08      	ldr	r2, [pc, #32]	; (24009d1c <HAL_HSEM_FastTake+0x2c>)
24009cfa:	687b      	ldr	r3, [r7, #4]
24009cfc:	3320      	adds	r3, #32
24009cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24009d02:	4a07      	ldr	r2, [pc, #28]	; (24009d20 <HAL_HSEM_FastTake+0x30>)
24009d04:	4293      	cmp	r3, r2
24009d06:	d101      	bne.n	24009d0c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
24009d08:	2300      	movs	r3, #0
24009d0a:	e000      	b.n	24009d0e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
24009d0c:	2301      	movs	r3, #1
}
24009d0e:	4618      	mov	r0, r3
24009d10:	370c      	adds	r7, #12
24009d12:	46bd      	mov	sp, r7
24009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d18:	4770      	bx	lr
24009d1a:	bf00      	nop
24009d1c:	58026400 	.word	0x58026400
24009d20:	80000300 	.word	0x80000300

24009d24 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
24009d24:	b480      	push	{r7}
24009d26:	b083      	sub	sp, #12
24009d28:	af00      	add	r7, sp, #0
24009d2a:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
24009d2c:	4a07      	ldr	r2, [pc, #28]	; (24009d4c <HAL_HSEM_IsSemTaken+0x28>)
24009d2e:	687b      	ldr	r3, [r7, #4]
24009d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24009d34:	2b00      	cmp	r3, #0
24009d36:	da01      	bge.n	24009d3c <HAL_HSEM_IsSemTaken+0x18>
24009d38:	2301      	movs	r3, #1
24009d3a:	e000      	b.n	24009d3e <HAL_HSEM_IsSemTaken+0x1a>
24009d3c:	2300      	movs	r3, #0
}
24009d3e:	4618      	mov	r0, r3
24009d40:	370c      	adds	r7, #12
24009d42:	46bd      	mov	sp, r7
24009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d48:	4770      	bx	lr
24009d4a:	bf00      	nop
24009d4c:	58026400 	.word	0x58026400

24009d50 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
24009d50:	b480      	push	{r7}
24009d52:	b083      	sub	sp, #12
24009d54:	af00      	add	r7, sp, #0
24009d56:	6078      	str	r0, [r7, #4]
24009d58:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
24009d5a:	4906      	ldr	r1, [pc, #24]	; (24009d74 <HAL_HSEM_Release+0x24>)
24009d5c:	683b      	ldr	r3, [r7, #0]
24009d5e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
24009d62:	687b      	ldr	r3, [r7, #4]
24009d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
24009d68:	bf00      	nop
24009d6a:	370c      	adds	r7, #12
24009d6c:	46bd      	mov	sp, r7
24009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d72:	4770      	bx	lr
24009d74:	58026400 	.word	0x58026400

24009d78 <HAL_HSEM_ReleaseAll>:
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @param  CoreID: CoreID of the CPU that is using semaphores to be released
  * @retval None
  */
void HAL_HSEM_ReleaseAll(uint32_t Key, uint32_t CoreID)
{
24009d78:	b480      	push	{r7}
24009d7a:	b083      	sub	sp, #12
24009d7c:	af00      	add	r7, sp, #0
24009d7e:	6078      	str	r0, [r7, #4]
24009d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_KEY(Key));
  assert_param(IS_HSEM_COREID(CoreID));

  HSEM->CR = ((Key << HSEM_CR_KEY_Pos) | (CoreID << HSEM_CR_COREID_Pos));
24009d82:	687b      	ldr	r3, [r7, #4]
24009d84:	041a      	lsls	r2, r3, #16
24009d86:	683b      	ldr	r3, [r7, #0]
24009d88:	021b      	lsls	r3, r3, #8
24009d8a:	4905      	ldr	r1, [pc, #20]	; (24009da0 <HAL_HSEM_ReleaseAll+0x28>)
24009d8c:	4313      	orrs	r3, r2
24009d8e:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
}
24009d92:	bf00      	nop
24009d94:	370c      	adds	r7, #12
24009d96:	46bd      	mov	sp, r7
24009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d9c:	4770      	bx	lr
24009d9e:	bf00      	nop
24009da0:	58026400 	.word	0x58026400

24009da4 <HAL_HSEM_SetClearKey>:
  * @brief  Set semaphore Key .
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @retval None
  */
void  HAL_HSEM_SetClearKey(uint32_t Key)
{
24009da4:	b480      	push	{r7}
24009da6:	b083      	sub	sp, #12
24009da8:	af00      	add	r7, sp, #0
24009daa:	6078      	str	r0, [r7, #4]
  assert_param(IS_HSEM_KEY(Key));

  MODIFY_REG(HSEM->KEYR, HSEM_KEYR_KEY, (Key << HSEM_KEYR_KEY_Pos));
24009dac:	4b07      	ldr	r3, [pc, #28]	; (24009dcc <HAL_HSEM_SetClearKey+0x28>)
24009dae:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
24009db2:	b29a      	uxth	r2, r3
24009db4:	687b      	ldr	r3, [r7, #4]
24009db6:	041b      	lsls	r3, r3, #16
24009db8:	4904      	ldr	r1, [pc, #16]	; (24009dcc <HAL_HSEM_SetClearKey+0x28>)
24009dba:	4313      	orrs	r3, r2
24009dbc:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

}
24009dc0:	bf00      	nop
24009dc2:	370c      	adds	r7, #12
24009dc4:	46bd      	mov	sp, r7
24009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
24009dca:	4770      	bx	lr
24009dcc:	58026400 	.word	0x58026400

24009dd0 <HAL_HSEM_GetClearKey>:
/**
  * @brief  Get semaphore Key .
  * @retval Semaphore Key , value from 0 to 0xFFFF
  */
uint32_t HAL_HSEM_GetClearKey(void)
{
24009dd0:	b480      	push	{r7}
24009dd2:	af00      	add	r7, sp, #0
  return (HSEM->KEYR >> HSEM_KEYR_KEY_Pos);
24009dd4:	4b04      	ldr	r3, [pc, #16]	; (24009de8 <HAL_HSEM_GetClearKey+0x18>)
24009dd6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
24009dda:	0c1b      	lsrs	r3, r3, #16
}
24009ddc:	4618      	mov	r0, r3
24009dde:	46bd      	mov	sp, r7
24009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
24009de4:	4770      	bx	lr
24009de6:	bf00      	nop
24009de8:	58026400 	.word	0x58026400

24009dec <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
24009dec:	b480      	push	{r7}
24009dee:	b083      	sub	sp, #12
24009df0:	af00      	add	r7, sp, #0
24009df2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
24009df4:	4b05      	ldr	r3, [pc, #20]	; (24009e0c <HAL_HSEM_ActivateNotification+0x20>)
24009df6:	681a      	ldr	r2, [r3, #0]
24009df8:	4904      	ldr	r1, [pc, #16]	; (24009e0c <HAL_HSEM_ActivateNotification+0x20>)
24009dfa:	687b      	ldr	r3, [r7, #4]
24009dfc:	4313      	orrs	r3, r2
24009dfe:	600b      	str	r3, [r1, #0]
#endif
}
24009e00:	bf00      	nop
24009e02:	370c      	adds	r7, #12
24009e04:	46bd      	mov	sp, r7
24009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
24009e0a:	4770      	bx	lr
24009e0c:	58026500 	.word	0x58026500

24009e10 <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
24009e10:	b480      	push	{r7}
24009e12:	b083      	sub	sp, #12
24009e14:	af00      	add	r7, sp, #0
24009e16:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
24009e18:	4b06      	ldr	r3, [pc, #24]	; (24009e34 <HAL_HSEM_DeactivateNotification+0x24>)
24009e1a:	681a      	ldr	r2, [r3, #0]
24009e1c:	687b      	ldr	r3, [r7, #4]
24009e1e:	43db      	mvns	r3, r3
24009e20:	4904      	ldr	r1, [pc, #16]	; (24009e34 <HAL_HSEM_DeactivateNotification+0x24>)
24009e22:	4013      	ands	r3, r2
24009e24:	600b      	str	r3, [r1, #0]
#endif
}
24009e26:	bf00      	nop
24009e28:	370c      	adds	r7, #12
24009e2a:	46bd      	mov	sp, r7
24009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009e30:	4770      	bx	lr
24009e32:	bf00      	nop
24009e34:	58026500 	.word	0x58026500

24009e38 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
24009e38:	b580      	push	{r7, lr}
24009e3a:	b082      	sub	sp, #8
24009e3c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
24009e3e:	4b0a      	ldr	r3, [pc, #40]	; (24009e68 <HAL_HSEM_IRQHandler+0x30>)
24009e40:	68db      	ldr	r3, [r3, #12]
24009e42:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
24009e44:	4b08      	ldr	r3, [pc, #32]	; (24009e68 <HAL_HSEM_IRQHandler+0x30>)
24009e46:	681a      	ldr	r2, [r3, #0]
24009e48:	687b      	ldr	r3, [r7, #4]
24009e4a:	43db      	mvns	r3, r3
24009e4c:	4906      	ldr	r1, [pc, #24]	; (24009e68 <HAL_HSEM_IRQHandler+0x30>)
24009e4e:	4013      	ands	r3, r2
24009e50:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
24009e52:	4a05      	ldr	r2, [pc, #20]	; (24009e68 <HAL_HSEM_IRQHandler+0x30>)
24009e54:	687b      	ldr	r3, [r7, #4]
24009e56:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
24009e58:	6878      	ldr	r0, [r7, #4]
24009e5a:	f000 f807 	bl	24009e6c <HAL_HSEM_FreeCallback>
}
24009e5e:	bf00      	nop
24009e60:	3708      	adds	r7, #8
24009e62:	46bd      	mov	sp, r7
24009e64:	bd80      	pop	{r7, pc}
24009e66:	bf00      	nop
24009e68:	58026500 	.word	0x58026500

24009e6c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
24009e6c:	b480      	push	{r7}
24009e6e:	b083      	sub	sp, #12
24009e70:	af00      	add	r7, sp, #0
24009e72:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
24009e74:	bf00      	nop
24009e76:	370c      	adds	r7, #12
24009e78:	46bd      	mov	sp, r7
24009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
24009e7e:	4770      	bx	lr

24009e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
24009e80:	b580      	push	{r7, lr}
24009e82:	b082      	sub	sp, #8
24009e84:	af00      	add	r7, sp, #0
24009e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
24009e88:	687b      	ldr	r3, [r7, #4]
24009e8a:	2b00      	cmp	r3, #0
24009e8c:	d101      	bne.n	24009e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
24009e8e:	2301      	movs	r3, #1
24009e90:	e07f      	b.n	24009f92 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
24009e92:	687b      	ldr	r3, [r7, #4]
24009e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24009e98:	b2db      	uxtb	r3, r3
24009e9a:	2b00      	cmp	r3, #0
24009e9c:	d106      	bne.n	24009eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
24009e9e:	687b      	ldr	r3, [r7, #4]
24009ea0:	2200      	movs	r2, #0
24009ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
24009ea6:	6878      	ldr	r0, [r7, #4]
24009ea8:	f000 f8a9 	bl	24009ffe <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
24009eac:	687b      	ldr	r3, [r7, #4]
24009eae:	2224      	movs	r2, #36	; 0x24
24009eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
24009eb4:	687b      	ldr	r3, [r7, #4]
24009eb6:	681b      	ldr	r3, [r3, #0]
24009eb8:	681a      	ldr	r2, [r3, #0]
24009eba:	687b      	ldr	r3, [r7, #4]
24009ebc:	681b      	ldr	r3, [r3, #0]
24009ebe:	f022 0201 	bic.w	r2, r2, #1
24009ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24009ec4:	687b      	ldr	r3, [r7, #4]
24009ec6:	685a      	ldr	r2, [r3, #4]
24009ec8:	687b      	ldr	r3, [r7, #4]
24009eca:	681b      	ldr	r3, [r3, #0]
24009ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
24009ed0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
24009ed2:	687b      	ldr	r3, [r7, #4]
24009ed4:	681b      	ldr	r3, [r3, #0]
24009ed6:	689a      	ldr	r2, [r3, #8]
24009ed8:	687b      	ldr	r3, [r7, #4]
24009eda:	681b      	ldr	r3, [r3, #0]
24009edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24009ee0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24009ee2:	687b      	ldr	r3, [r7, #4]
24009ee4:	68db      	ldr	r3, [r3, #12]
24009ee6:	2b01      	cmp	r3, #1
24009ee8:	d107      	bne.n	24009efa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24009eea:	687b      	ldr	r3, [r7, #4]
24009eec:	689a      	ldr	r2, [r3, #8]
24009eee:	687b      	ldr	r3, [r7, #4]
24009ef0:	681b      	ldr	r3, [r3, #0]
24009ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
24009ef6:	609a      	str	r2, [r3, #8]
24009ef8:	e006      	b.n	24009f08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24009efa:	687b      	ldr	r3, [r7, #4]
24009efc:	689a      	ldr	r2, [r3, #8]
24009efe:	687b      	ldr	r3, [r7, #4]
24009f00:	681b      	ldr	r3, [r3, #0]
24009f02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
24009f06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24009f08:	687b      	ldr	r3, [r7, #4]
24009f0a:	68db      	ldr	r3, [r3, #12]
24009f0c:	2b02      	cmp	r3, #2
24009f0e:	d104      	bne.n	24009f1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
24009f10:	687b      	ldr	r3, [r7, #4]
24009f12:	681b      	ldr	r3, [r3, #0]
24009f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
24009f18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24009f1a:	687b      	ldr	r3, [r7, #4]
24009f1c:	681b      	ldr	r3, [r3, #0]
24009f1e:	6859      	ldr	r1, [r3, #4]
24009f20:	687b      	ldr	r3, [r7, #4]
24009f22:	681a      	ldr	r2, [r3, #0]
24009f24:	4b1d      	ldr	r3, [pc, #116]	; (24009f9c <HAL_I2C_Init+0x11c>)
24009f26:	430b      	orrs	r3, r1
24009f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
24009f2a:	687b      	ldr	r3, [r7, #4]
24009f2c:	681b      	ldr	r3, [r3, #0]
24009f2e:	68da      	ldr	r2, [r3, #12]
24009f30:	687b      	ldr	r3, [r7, #4]
24009f32:	681b      	ldr	r3, [r3, #0]
24009f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24009f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24009f3a:	687b      	ldr	r3, [r7, #4]
24009f3c:	691a      	ldr	r2, [r3, #16]
24009f3e:	687b      	ldr	r3, [r7, #4]
24009f40:	695b      	ldr	r3, [r3, #20]
24009f42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
24009f46:	687b      	ldr	r3, [r7, #4]
24009f48:	699b      	ldr	r3, [r3, #24]
24009f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24009f4c:	687b      	ldr	r3, [r7, #4]
24009f4e:	681b      	ldr	r3, [r3, #0]
24009f50:	430a      	orrs	r2, r1
24009f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24009f54:	687b      	ldr	r3, [r7, #4]
24009f56:	69d9      	ldr	r1, [r3, #28]
24009f58:	687b      	ldr	r3, [r7, #4]
24009f5a:	6a1a      	ldr	r2, [r3, #32]
24009f5c:	687b      	ldr	r3, [r7, #4]
24009f5e:	681b      	ldr	r3, [r3, #0]
24009f60:	430a      	orrs	r2, r1
24009f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
24009f64:	687b      	ldr	r3, [r7, #4]
24009f66:	681b      	ldr	r3, [r3, #0]
24009f68:	681a      	ldr	r2, [r3, #0]
24009f6a:	687b      	ldr	r3, [r7, #4]
24009f6c:	681b      	ldr	r3, [r3, #0]
24009f6e:	f042 0201 	orr.w	r2, r2, #1
24009f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24009f74:	687b      	ldr	r3, [r7, #4]
24009f76:	2200      	movs	r2, #0
24009f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
24009f7a:	687b      	ldr	r3, [r7, #4]
24009f7c:	2220      	movs	r2, #32
24009f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24009f82:	687b      	ldr	r3, [r7, #4]
24009f84:	2200      	movs	r2, #0
24009f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24009f88:	687b      	ldr	r3, [r7, #4]
24009f8a:	2200      	movs	r2, #0
24009f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
24009f90:	2300      	movs	r3, #0
}
24009f92:	4618      	mov	r0, r3
24009f94:	3708      	adds	r7, #8
24009f96:	46bd      	mov	sp, r7
24009f98:	bd80      	pop	{r7, pc}
24009f9a:	bf00      	nop
24009f9c:	02008000 	.word	0x02008000

24009fa0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
24009fa0:	b580      	push	{r7, lr}
24009fa2:	b082      	sub	sp, #8
24009fa4:	af00      	add	r7, sp, #0
24009fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
24009fa8:	687b      	ldr	r3, [r7, #4]
24009faa:	2b00      	cmp	r3, #0
24009fac:	d101      	bne.n	24009fb2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
24009fae:	2301      	movs	r3, #1
24009fb0:	e021      	b.n	24009ff6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
24009fb2:	687b      	ldr	r3, [r7, #4]
24009fb4:	2224      	movs	r2, #36	; 0x24
24009fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
24009fba:	687b      	ldr	r3, [r7, #4]
24009fbc:	681b      	ldr	r3, [r3, #0]
24009fbe:	681a      	ldr	r2, [r3, #0]
24009fc0:	687b      	ldr	r3, [r7, #4]
24009fc2:	681b      	ldr	r3, [r3, #0]
24009fc4:	f022 0201 	bic.w	r2, r2, #1
24009fc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
24009fca:	6878      	ldr	r0, [r7, #4]
24009fcc:	f000 f821 	bl	2400a012 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24009fd0:	687b      	ldr	r3, [r7, #4]
24009fd2:	2200      	movs	r2, #0
24009fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
24009fd6:	687b      	ldr	r3, [r7, #4]
24009fd8:	2200      	movs	r2, #0
24009fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24009fde:	687b      	ldr	r3, [r7, #4]
24009fe0:	2200      	movs	r2, #0
24009fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24009fe4:	687b      	ldr	r3, [r7, #4]
24009fe6:	2200      	movs	r2, #0
24009fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
24009fec:	687b      	ldr	r3, [r7, #4]
24009fee:	2200      	movs	r2, #0
24009ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
24009ff4:	2300      	movs	r3, #0
}
24009ff6:	4618      	mov	r0, r3
24009ff8:	3708      	adds	r7, #8
24009ffa:	46bd      	mov	sp, r7
24009ffc:	bd80      	pop	{r7, pc}

24009ffe <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
24009ffe:	b480      	push	{r7}
2400a000:	b083      	sub	sp, #12
2400a002:	af00      	add	r7, sp, #0
2400a004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
2400a006:	bf00      	nop
2400a008:	370c      	adds	r7, #12
2400a00a:	46bd      	mov	sp, r7
2400a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a010:	4770      	bx	lr

2400a012 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
2400a012:	b480      	push	{r7}
2400a014:	b083      	sub	sp, #12
2400a016:	af00      	add	r7, sp, #0
2400a018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
2400a01a:	bf00      	nop
2400a01c:	370c      	adds	r7, #12
2400a01e:	46bd      	mov	sp, r7
2400a020:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a024:	4770      	bx	lr
	...

2400a028 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
2400a028:	b580      	push	{r7, lr}
2400a02a:	b088      	sub	sp, #32
2400a02c:	af02      	add	r7, sp, #8
2400a02e:	60f8      	str	r0, [r7, #12]
2400a030:	607a      	str	r2, [r7, #4]
2400a032:	461a      	mov	r2, r3
2400a034:	460b      	mov	r3, r1
2400a036:	817b      	strh	r3, [r7, #10]
2400a038:	4613      	mov	r3, r2
2400a03a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a03c:	68fb      	ldr	r3, [r7, #12]
2400a03e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a042:	b2db      	uxtb	r3, r3
2400a044:	2b20      	cmp	r3, #32
2400a046:	f040 80da 	bne.w	2400a1fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a04a:	68fb      	ldr	r3, [r7, #12]
2400a04c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a050:	2b01      	cmp	r3, #1
2400a052:	d101      	bne.n	2400a058 <HAL_I2C_Master_Transmit+0x30>
2400a054:	2302      	movs	r3, #2
2400a056:	e0d3      	b.n	2400a200 <HAL_I2C_Master_Transmit+0x1d8>
2400a058:	68fb      	ldr	r3, [r7, #12]
2400a05a:	2201      	movs	r2, #1
2400a05c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a060:	f7f8 f8cc 	bl	240021fc <HAL_GetTick>
2400a064:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400a066:	697b      	ldr	r3, [r7, #20]
2400a068:	9300      	str	r3, [sp, #0]
2400a06a:	2319      	movs	r3, #25
2400a06c:	2201      	movs	r2, #1
2400a06e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a072:	68f8      	ldr	r0, [r7, #12]
2400a074:	f004 fd3c 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a078:	4603      	mov	r3, r0
2400a07a:	2b00      	cmp	r3, #0
2400a07c:	d001      	beq.n	2400a082 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
2400a07e:	2301      	movs	r3, #1
2400a080:	e0be      	b.n	2400a200 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400a082:	68fb      	ldr	r3, [r7, #12]
2400a084:	2221      	movs	r2, #33	; 0x21
2400a086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400a08a:	68fb      	ldr	r3, [r7, #12]
2400a08c:	2210      	movs	r2, #16
2400a08e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a092:	68fb      	ldr	r3, [r7, #12]
2400a094:	2200      	movs	r2, #0
2400a096:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400a098:	68fb      	ldr	r3, [r7, #12]
2400a09a:	687a      	ldr	r2, [r7, #4]
2400a09c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400a09e:	68fb      	ldr	r3, [r7, #12]
2400a0a0:	893a      	ldrh	r2, [r7, #8]
2400a0a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400a0a4:	68fb      	ldr	r3, [r7, #12]
2400a0a6:	2200      	movs	r2, #0
2400a0a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a0aa:	68fb      	ldr	r3, [r7, #12]
2400a0ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a0ae:	b29b      	uxth	r3, r3
2400a0b0:	2bff      	cmp	r3, #255	; 0xff
2400a0b2:	d90e      	bls.n	2400a0d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a0b4:	68fb      	ldr	r3, [r7, #12]
2400a0b6:	22ff      	movs	r2, #255	; 0xff
2400a0b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a0ba:	68fb      	ldr	r3, [r7, #12]
2400a0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a0be:	b2da      	uxtb	r2, r3
2400a0c0:	8979      	ldrh	r1, [r7, #10]
2400a0c2:	4b51      	ldr	r3, [pc, #324]	; (2400a208 <HAL_I2C_Master_Transmit+0x1e0>)
2400a0c4:	9300      	str	r3, [sp, #0]
2400a0c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a0ca:	68f8      	ldr	r0, [r7, #12]
2400a0cc:	f004 ff32 	bl	2400ef34 <I2C_TransferConfig>
2400a0d0:	e06c      	b.n	2400a1ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a0d2:	68fb      	ldr	r3, [r7, #12]
2400a0d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a0d6:	b29a      	uxth	r2, r3
2400a0d8:	68fb      	ldr	r3, [r7, #12]
2400a0da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a0dc:	68fb      	ldr	r3, [r7, #12]
2400a0de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a0e0:	b2da      	uxtb	r2, r3
2400a0e2:	8979      	ldrh	r1, [r7, #10]
2400a0e4:	4b48      	ldr	r3, [pc, #288]	; (2400a208 <HAL_I2C_Master_Transmit+0x1e0>)
2400a0e6:	9300      	str	r3, [sp, #0]
2400a0e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a0ec:	68f8      	ldr	r0, [r7, #12]
2400a0ee:	f004 ff21 	bl	2400ef34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
2400a0f2:	e05b      	b.n	2400a1ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a0f4:	697a      	ldr	r2, [r7, #20]
2400a0f6:	6a39      	ldr	r1, [r7, #32]
2400a0f8:	68f8      	ldr	r0, [r7, #12]
2400a0fa:	f004 fd39 	bl	2400eb70 <I2C_WaitOnTXISFlagUntilTimeout>
2400a0fe:	4603      	mov	r3, r0
2400a100:	2b00      	cmp	r3, #0
2400a102:	d001      	beq.n	2400a108 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
2400a104:	2301      	movs	r3, #1
2400a106:	e07b      	b.n	2400a200 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400a108:	68fb      	ldr	r3, [r7, #12]
2400a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a10c:	781a      	ldrb	r2, [r3, #0]
2400a10e:	68fb      	ldr	r3, [r7, #12]
2400a110:	681b      	ldr	r3, [r3, #0]
2400a112:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a114:	68fb      	ldr	r3, [r7, #12]
2400a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a118:	1c5a      	adds	r2, r3, #1
2400a11a:	68fb      	ldr	r3, [r7, #12]
2400a11c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400a11e:	68fb      	ldr	r3, [r7, #12]
2400a120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a122:	b29b      	uxth	r3, r3
2400a124:	3b01      	subs	r3, #1
2400a126:	b29a      	uxth	r2, r3
2400a128:	68fb      	ldr	r3, [r7, #12]
2400a12a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400a12c:	68fb      	ldr	r3, [r7, #12]
2400a12e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a130:	3b01      	subs	r3, #1
2400a132:	b29a      	uxth	r2, r3
2400a134:	68fb      	ldr	r3, [r7, #12]
2400a136:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400a138:	68fb      	ldr	r3, [r7, #12]
2400a13a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a13c:	b29b      	uxth	r3, r3
2400a13e:	2b00      	cmp	r3, #0
2400a140:	d034      	beq.n	2400a1ac <HAL_I2C_Master_Transmit+0x184>
2400a142:	68fb      	ldr	r3, [r7, #12]
2400a144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a146:	2b00      	cmp	r3, #0
2400a148:	d130      	bne.n	2400a1ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400a14a:	697b      	ldr	r3, [r7, #20]
2400a14c:	9300      	str	r3, [sp, #0]
2400a14e:	6a3b      	ldr	r3, [r7, #32]
2400a150:	2200      	movs	r2, #0
2400a152:	2180      	movs	r1, #128	; 0x80
2400a154:	68f8      	ldr	r0, [r7, #12]
2400a156:	f004 fccb 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a15a:	4603      	mov	r3, r0
2400a15c:	2b00      	cmp	r3, #0
2400a15e:	d001      	beq.n	2400a164 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
2400a160:	2301      	movs	r3, #1
2400a162:	e04d      	b.n	2400a200 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a164:	68fb      	ldr	r3, [r7, #12]
2400a166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a168:	b29b      	uxth	r3, r3
2400a16a:	2bff      	cmp	r3, #255	; 0xff
2400a16c:	d90e      	bls.n	2400a18c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400a16e:	68fb      	ldr	r3, [r7, #12]
2400a170:	22ff      	movs	r2, #255	; 0xff
2400a172:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a174:	68fb      	ldr	r3, [r7, #12]
2400a176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a178:	b2da      	uxtb	r2, r3
2400a17a:	8979      	ldrh	r1, [r7, #10]
2400a17c:	2300      	movs	r3, #0
2400a17e:	9300      	str	r3, [sp, #0]
2400a180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a184:	68f8      	ldr	r0, [r7, #12]
2400a186:	f004 fed5 	bl	2400ef34 <I2C_TransferConfig>
2400a18a:	e00f      	b.n	2400a1ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400a18c:	68fb      	ldr	r3, [r7, #12]
2400a18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a190:	b29a      	uxth	r2, r3
2400a192:	68fb      	ldr	r3, [r7, #12]
2400a194:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a196:	68fb      	ldr	r3, [r7, #12]
2400a198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a19a:	b2da      	uxtb	r2, r3
2400a19c:	8979      	ldrh	r1, [r7, #10]
2400a19e:	2300      	movs	r3, #0
2400a1a0:	9300      	str	r3, [sp, #0]
2400a1a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a1a6:	68f8      	ldr	r0, [r7, #12]
2400a1a8:	f004 fec4 	bl	2400ef34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400a1ac:	68fb      	ldr	r3, [r7, #12]
2400a1ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a1b0:	b29b      	uxth	r3, r3
2400a1b2:	2b00      	cmp	r3, #0
2400a1b4:	d19e      	bne.n	2400a0f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a1b6:	697a      	ldr	r2, [r7, #20]
2400a1b8:	6a39      	ldr	r1, [r7, #32]
2400a1ba:	68f8      	ldr	r0, [r7, #12]
2400a1bc:	f004 fd18 	bl	2400ebf0 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a1c0:	4603      	mov	r3, r0
2400a1c2:	2b00      	cmp	r3, #0
2400a1c4:	d001      	beq.n	2400a1ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
2400a1c6:	2301      	movs	r3, #1
2400a1c8:	e01a      	b.n	2400a200 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a1ca:	68fb      	ldr	r3, [r7, #12]
2400a1cc:	681b      	ldr	r3, [r3, #0]
2400a1ce:	2220      	movs	r2, #32
2400a1d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400a1d2:	68fb      	ldr	r3, [r7, #12]
2400a1d4:	681b      	ldr	r3, [r3, #0]
2400a1d6:	6859      	ldr	r1, [r3, #4]
2400a1d8:	68fb      	ldr	r3, [r7, #12]
2400a1da:	681a      	ldr	r2, [r3, #0]
2400a1dc:	4b0b      	ldr	r3, [pc, #44]	; (2400a20c <HAL_I2C_Master_Transmit+0x1e4>)
2400a1de:	400b      	ands	r3, r1
2400a1e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a1e2:	68fb      	ldr	r3, [r7, #12]
2400a1e4:	2220      	movs	r2, #32
2400a1e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a1ea:	68fb      	ldr	r3, [r7, #12]
2400a1ec:	2200      	movs	r2, #0
2400a1ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a1f2:	68fb      	ldr	r3, [r7, #12]
2400a1f4:	2200      	movs	r2, #0
2400a1f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a1fa:	2300      	movs	r3, #0
2400a1fc:	e000      	b.n	2400a200 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
2400a1fe:	2302      	movs	r3, #2
  }
}
2400a200:	4618      	mov	r0, r3
2400a202:	3718      	adds	r7, #24
2400a204:	46bd      	mov	sp, r7
2400a206:	bd80      	pop	{r7, pc}
2400a208:	80002000 	.word	0x80002000
2400a20c:	fe00e800 	.word	0xfe00e800

2400a210 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
2400a210:	b580      	push	{r7, lr}
2400a212:	b088      	sub	sp, #32
2400a214:	af02      	add	r7, sp, #8
2400a216:	60f8      	str	r0, [r7, #12]
2400a218:	607a      	str	r2, [r7, #4]
2400a21a:	461a      	mov	r2, r3
2400a21c:	460b      	mov	r3, r1
2400a21e:	817b      	strh	r3, [r7, #10]
2400a220:	4613      	mov	r3, r2
2400a222:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a224:	68fb      	ldr	r3, [r7, #12]
2400a226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a22a:	b2db      	uxtb	r3, r3
2400a22c:	2b20      	cmp	r3, #32
2400a22e:	f040 80db 	bne.w	2400a3e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a232:	68fb      	ldr	r3, [r7, #12]
2400a234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a238:	2b01      	cmp	r3, #1
2400a23a:	d101      	bne.n	2400a240 <HAL_I2C_Master_Receive+0x30>
2400a23c:	2302      	movs	r3, #2
2400a23e:	e0d4      	b.n	2400a3ea <HAL_I2C_Master_Receive+0x1da>
2400a240:	68fb      	ldr	r3, [r7, #12]
2400a242:	2201      	movs	r2, #1
2400a244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a248:	f7f7 ffd8 	bl	240021fc <HAL_GetTick>
2400a24c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400a24e:	697b      	ldr	r3, [r7, #20]
2400a250:	9300      	str	r3, [sp, #0]
2400a252:	2319      	movs	r3, #25
2400a254:	2201      	movs	r2, #1
2400a256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a25a:	68f8      	ldr	r0, [r7, #12]
2400a25c:	f004 fc48 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a260:	4603      	mov	r3, r0
2400a262:	2b00      	cmp	r3, #0
2400a264:	d001      	beq.n	2400a26a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
2400a266:	2301      	movs	r3, #1
2400a268:	e0bf      	b.n	2400a3ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400a26a:	68fb      	ldr	r3, [r7, #12]
2400a26c:	2222      	movs	r2, #34	; 0x22
2400a26e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400a272:	68fb      	ldr	r3, [r7, #12]
2400a274:	2210      	movs	r2, #16
2400a276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a27a:	68fb      	ldr	r3, [r7, #12]
2400a27c:	2200      	movs	r2, #0
2400a27e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400a280:	68fb      	ldr	r3, [r7, #12]
2400a282:	687a      	ldr	r2, [r7, #4]
2400a284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400a286:	68fb      	ldr	r3, [r7, #12]
2400a288:	893a      	ldrh	r2, [r7, #8]
2400a28a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400a28c:	68fb      	ldr	r3, [r7, #12]
2400a28e:	2200      	movs	r2, #0
2400a290:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a292:	68fb      	ldr	r3, [r7, #12]
2400a294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a296:	b29b      	uxth	r3, r3
2400a298:	2bff      	cmp	r3, #255	; 0xff
2400a29a:	d90e      	bls.n	2400a2ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a29c:	68fb      	ldr	r3, [r7, #12]
2400a29e:	22ff      	movs	r2, #255	; 0xff
2400a2a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a2a2:	68fb      	ldr	r3, [r7, #12]
2400a2a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a2a6:	b2da      	uxtb	r2, r3
2400a2a8:	8979      	ldrh	r1, [r7, #10]
2400a2aa:	4b52      	ldr	r3, [pc, #328]	; (2400a3f4 <HAL_I2C_Master_Receive+0x1e4>)
2400a2ac:	9300      	str	r3, [sp, #0]
2400a2ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a2b2:	68f8      	ldr	r0, [r7, #12]
2400a2b4:	f004 fe3e 	bl	2400ef34 <I2C_TransferConfig>
2400a2b8:	e06d      	b.n	2400a396 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a2ba:	68fb      	ldr	r3, [r7, #12]
2400a2bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a2be:	b29a      	uxth	r2, r3
2400a2c0:	68fb      	ldr	r3, [r7, #12]
2400a2c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a2c4:	68fb      	ldr	r3, [r7, #12]
2400a2c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a2c8:	b2da      	uxtb	r2, r3
2400a2ca:	8979      	ldrh	r1, [r7, #10]
2400a2cc:	4b49      	ldr	r3, [pc, #292]	; (2400a3f4 <HAL_I2C_Master_Receive+0x1e4>)
2400a2ce:	9300      	str	r3, [sp, #0]
2400a2d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a2d4:	68f8      	ldr	r0, [r7, #12]
2400a2d6:	f004 fe2d 	bl	2400ef34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
2400a2da:	e05c      	b.n	2400a396 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a2dc:	697a      	ldr	r2, [r7, #20]
2400a2de:	6a39      	ldr	r1, [r7, #32]
2400a2e0:	68f8      	ldr	r0, [r7, #12]
2400a2e2:	f004 fcc1 	bl	2400ec68 <I2C_WaitOnRXNEFlagUntilTimeout>
2400a2e6:	4603      	mov	r3, r0
2400a2e8:	2b00      	cmp	r3, #0
2400a2ea:	d001      	beq.n	2400a2f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
2400a2ec:	2301      	movs	r3, #1
2400a2ee:	e07c      	b.n	2400a3ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400a2f0:	68fb      	ldr	r3, [r7, #12]
2400a2f2:	681b      	ldr	r3, [r3, #0]
2400a2f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400a2f6:	68fb      	ldr	r3, [r7, #12]
2400a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a2fa:	b2d2      	uxtb	r2, r2
2400a2fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a2fe:	68fb      	ldr	r3, [r7, #12]
2400a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a302:	1c5a      	adds	r2, r3, #1
2400a304:	68fb      	ldr	r3, [r7, #12]
2400a306:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400a308:	68fb      	ldr	r3, [r7, #12]
2400a30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a30c:	3b01      	subs	r3, #1
2400a30e:	b29a      	uxth	r2, r3
2400a310:	68fb      	ldr	r3, [r7, #12]
2400a312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400a314:	68fb      	ldr	r3, [r7, #12]
2400a316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a318:	b29b      	uxth	r3, r3
2400a31a:	3b01      	subs	r3, #1
2400a31c:	b29a      	uxth	r2, r3
2400a31e:	68fb      	ldr	r3, [r7, #12]
2400a320:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400a322:	68fb      	ldr	r3, [r7, #12]
2400a324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a326:	b29b      	uxth	r3, r3
2400a328:	2b00      	cmp	r3, #0
2400a32a:	d034      	beq.n	2400a396 <HAL_I2C_Master_Receive+0x186>
2400a32c:	68fb      	ldr	r3, [r7, #12]
2400a32e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a330:	2b00      	cmp	r3, #0
2400a332:	d130      	bne.n	2400a396 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400a334:	697b      	ldr	r3, [r7, #20]
2400a336:	9300      	str	r3, [sp, #0]
2400a338:	6a3b      	ldr	r3, [r7, #32]
2400a33a:	2200      	movs	r2, #0
2400a33c:	2180      	movs	r1, #128	; 0x80
2400a33e:	68f8      	ldr	r0, [r7, #12]
2400a340:	f004 fbd6 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a344:	4603      	mov	r3, r0
2400a346:	2b00      	cmp	r3, #0
2400a348:	d001      	beq.n	2400a34e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
2400a34a:	2301      	movs	r3, #1
2400a34c:	e04d      	b.n	2400a3ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a34e:	68fb      	ldr	r3, [r7, #12]
2400a350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a352:	b29b      	uxth	r3, r3
2400a354:	2bff      	cmp	r3, #255	; 0xff
2400a356:	d90e      	bls.n	2400a376 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400a358:	68fb      	ldr	r3, [r7, #12]
2400a35a:	22ff      	movs	r2, #255	; 0xff
2400a35c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400a35e:	68fb      	ldr	r3, [r7, #12]
2400a360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a362:	b2da      	uxtb	r2, r3
2400a364:	8979      	ldrh	r1, [r7, #10]
2400a366:	2300      	movs	r3, #0
2400a368:	9300      	str	r3, [sp, #0]
2400a36a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a36e:	68f8      	ldr	r0, [r7, #12]
2400a370:	f004 fde0 	bl	2400ef34 <I2C_TransferConfig>
2400a374:	e00f      	b.n	2400a396 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400a376:	68fb      	ldr	r3, [r7, #12]
2400a378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a37a:	b29a      	uxth	r2, r3
2400a37c:	68fb      	ldr	r3, [r7, #12]
2400a37e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400a380:	68fb      	ldr	r3, [r7, #12]
2400a382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a384:	b2da      	uxtb	r2, r3
2400a386:	8979      	ldrh	r1, [r7, #10]
2400a388:	2300      	movs	r3, #0
2400a38a:	9300      	str	r3, [sp, #0]
2400a38c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a390:	68f8      	ldr	r0, [r7, #12]
2400a392:	f004 fdcf 	bl	2400ef34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400a396:	68fb      	ldr	r3, [r7, #12]
2400a398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a39a:	b29b      	uxth	r3, r3
2400a39c:	2b00      	cmp	r3, #0
2400a39e:	d19d      	bne.n	2400a2dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a3a0:	697a      	ldr	r2, [r7, #20]
2400a3a2:	6a39      	ldr	r1, [r7, #32]
2400a3a4:	68f8      	ldr	r0, [r7, #12]
2400a3a6:	f004 fc23 	bl	2400ebf0 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a3aa:	4603      	mov	r3, r0
2400a3ac:	2b00      	cmp	r3, #0
2400a3ae:	d001      	beq.n	2400a3b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
2400a3b0:	2301      	movs	r3, #1
2400a3b2:	e01a      	b.n	2400a3ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a3b4:	68fb      	ldr	r3, [r7, #12]
2400a3b6:	681b      	ldr	r3, [r3, #0]
2400a3b8:	2220      	movs	r2, #32
2400a3ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400a3bc:	68fb      	ldr	r3, [r7, #12]
2400a3be:	681b      	ldr	r3, [r3, #0]
2400a3c0:	6859      	ldr	r1, [r3, #4]
2400a3c2:	68fb      	ldr	r3, [r7, #12]
2400a3c4:	681a      	ldr	r2, [r3, #0]
2400a3c6:	4b0c      	ldr	r3, [pc, #48]	; (2400a3f8 <HAL_I2C_Master_Receive+0x1e8>)
2400a3c8:	400b      	ands	r3, r1
2400a3ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a3cc:	68fb      	ldr	r3, [r7, #12]
2400a3ce:	2220      	movs	r2, #32
2400a3d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a3d4:	68fb      	ldr	r3, [r7, #12]
2400a3d6:	2200      	movs	r2, #0
2400a3d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a3dc:	68fb      	ldr	r3, [r7, #12]
2400a3de:	2200      	movs	r2, #0
2400a3e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a3e4:	2300      	movs	r3, #0
2400a3e6:	e000      	b.n	2400a3ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
2400a3e8:	2302      	movs	r3, #2
  }
}
2400a3ea:	4618      	mov	r0, r3
2400a3ec:	3718      	adds	r7, #24
2400a3ee:	46bd      	mov	sp, r7
2400a3f0:	bd80      	pop	{r7, pc}
2400a3f2:	bf00      	nop
2400a3f4:	80002400 	.word	0x80002400
2400a3f8:	fe00e800 	.word	0xfe00e800

2400a3fc <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
2400a3fc:	b580      	push	{r7, lr}
2400a3fe:	b088      	sub	sp, #32
2400a400:	af02      	add	r7, sp, #8
2400a402:	60f8      	str	r0, [r7, #12]
2400a404:	60b9      	str	r1, [r7, #8]
2400a406:	603b      	str	r3, [r7, #0]
2400a408:	4613      	mov	r3, r2
2400a40a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a40c:	68fb      	ldr	r3, [r7, #12]
2400a40e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a412:	b2db      	uxtb	r3, r3
2400a414:	2b20      	cmp	r3, #32
2400a416:	f040 8109 	bne.w	2400a62c <HAL_I2C_Slave_Transmit+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
2400a41a:	68bb      	ldr	r3, [r7, #8]
2400a41c:	2b00      	cmp	r3, #0
2400a41e:	d002      	beq.n	2400a426 <HAL_I2C_Slave_Transmit+0x2a>
2400a420:	88fb      	ldrh	r3, [r7, #6]
2400a422:	2b00      	cmp	r3, #0
2400a424:	d105      	bne.n	2400a432 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400a426:	68fb      	ldr	r3, [r7, #12]
2400a428:	f44f 7200 	mov.w	r2, #512	; 0x200
2400a42c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400a42e:	2301      	movs	r3, #1
2400a430:	e0fd      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a432:	68fb      	ldr	r3, [r7, #12]
2400a434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a438:	2b01      	cmp	r3, #1
2400a43a:	d101      	bne.n	2400a440 <HAL_I2C_Slave_Transmit+0x44>
2400a43c:	2302      	movs	r3, #2
2400a43e:	e0f6      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
2400a440:	68fb      	ldr	r3, [r7, #12]
2400a442:	2201      	movs	r2, #1
2400a444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a448:	f7f7 fed8 	bl	240021fc <HAL_GetTick>
2400a44c:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400a44e:	68fb      	ldr	r3, [r7, #12]
2400a450:	2221      	movs	r2, #33	; 0x21
2400a452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400a456:	68fb      	ldr	r3, [r7, #12]
2400a458:	2220      	movs	r2, #32
2400a45a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a45e:	68fb      	ldr	r3, [r7, #12]
2400a460:	2200      	movs	r2, #0
2400a462:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400a464:	68fb      	ldr	r3, [r7, #12]
2400a466:	68ba      	ldr	r2, [r7, #8]
2400a468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400a46a:	68fb      	ldr	r3, [r7, #12]
2400a46c:	88fa      	ldrh	r2, [r7, #6]
2400a46e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400a470:	68fb      	ldr	r3, [r7, #12]
2400a472:	2200      	movs	r2, #0
2400a474:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400a476:	68fb      	ldr	r3, [r7, #12]
2400a478:	681b      	ldr	r3, [r3, #0]
2400a47a:	685a      	ldr	r2, [r3, #4]
2400a47c:	68fb      	ldr	r3, [r7, #12]
2400a47e:	681b      	ldr	r3, [r3, #0]
2400a480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400a484:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400a486:	697b      	ldr	r3, [r7, #20]
2400a488:	9300      	str	r3, [sp, #0]
2400a48a:	683b      	ldr	r3, [r7, #0]
2400a48c:	2200      	movs	r2, #0
2400a48e:	2108      	movs	r1, #8
2400a490:	68f8      	ldr	r0, [r7, #12]
2400a492:	f004 fb2d 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a496:	4603      	mov	r3, r0
2400a498:	2b00      	cmp	r3, #0
2400a49a:	d009      	beq.n	2400a4b0 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a49c:	68fb      	ldr	r3, [r7, #12]
2400a49e:	681b      	ldr	r3, [r3, #0]
2400a4a0:	685a      	ldr	r2, [r3, #4]
2400a4a2:	68fb      	ldr	r3, [r7, #12]
2400a4a4:	681b      	ldr	r3, [r3, #0]
2400a4a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a4aa:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a4ac:	2301      	movs	r3, #1
2400a4ae:	e0be      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400a4b0:	68fb      	ldr	r3, [r7, #12]
2400a4b2:	681b      	ldr	r3, [r3, #0]
2400a4b4:	2208      	movs	r2, #8
2400a4b6:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400a4b8:	68fb      	ldr	r3, [r7, #12]
2400a4ba:	68db      	ldr	r3, [r3, #12]
2400a4bc:	2b02      	cmp	r3, #2
2400a4be:	d118      	bne.n	2400a4f2 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400a4c0:	697b      	ldr	r3, [r7, #20]
2400a4c2:	9300      	str	r3, [sp, #0]
2400a4c4:	683b      	ldr	r3, [r7, #0]
2400a4c6:	2200      	movs	r2, #0
2400a4c8:	2108      	movs	r1, #8
2400a4ca:	68f8      	ldr	r0, [r7, #12]
2400a4cc:	f004 fb10 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a4d0:	4603      	mov	r3, r0
2400a4d2:	2b00      	cmp	r3, #0
2400a4d4:	d009      	beq.n	2400a4ea <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a4d6:	68fb      	ldr	r3, [r7, #12]
2400a4d8:	681b      	ldr	r3, [r3, #0]
2400a4da:	685a      	ldr	r2, [r3, #4]
2400a4dc:	68fb      	ldr	r3, [r7, #12]
2400a4de:	681b      	ldr	r3, [r3, #0]
2400a4e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a4e4:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400a4e6:	2301      	movs	r3, #1
2400a4e8:	e0a1      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400a4ea:	68fb      	ldr	r3, [r7, #12]
2400a4ec:	681b      	ldr	r3, [r3, #0]
2400a4ee:	2208      	movs	r2, #8
2400a4f0:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
2400a4f2:	697b      	ldr	r3, [r7, #20]
2400a4f4:	9300      	str	r3, [sp, #0]
2400a4f6:	683b      	ldr	r3, [r7, #0]
2400a4f8:	2200      	movs	r2, #0
2400a4fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2400a4fe:	68f8      	ldr	r0, [r7, #12]
2400a500:	f004 faf6 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a504:	4603      	mov	r3, r0
2400a506:	2b00      	cmp	r3, #0
2400a508:	d02d      	beq.n	2400a566 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a50a:	68fb      	ldr	r3, [r7, #12]
2400a50c:	681b      	ldr	r3, [r3, #0]
2400a50e:	685a      	ldr	r2, [r3, #4]
2400a510:	68fb      	ldr	r3, [r7, #12]
2400a512:	681b      	ldr	r3, [r3, #0]
2400a514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a518:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a51a:	2301      	movs	r3, #1
2400a51c:	e087      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a51e:	697a      	ldr	r2, [r7, #20]
2400a520:	6839      	ldr	r1, [r7, #0]
2400a522:	68f8      	ldr	r0, [r7, #12]
2400a524:	f004 fb24 	bl	2400eb70 <I2C_WaitOnTXISFlagUntilTimeout>
2400a528:	4603      	mov	r3, r0
2400a52a:	2b00      	cmp	r3, #0
2400a52c:	d009      	beq.n	2400a542 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a52e:	68fb      	ldr	r3, [r7, #12]
2400a530:	681b      	ldr	r3, [r3, #0]
2400a532:	685a      	ldr	r2, [r3, #4]
2400a534:	68fb      	ldr	r3, [r7, #12]
2400a536:	681b      	ldr	r3, [r3, #0]
2400a538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a53c:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400a53e:	2301      	movs	r3, #1
2400a540:	e075      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400a542:	68fb      	ldr	r3, [r7, #12]
2400a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a546:	781a      	ldrb	r2, [r3, #0]
2400a548:	68fb      	ldr	r3, [r7, #12]
2400a54a:	681b      	ldr	r3, [r3, #0]
2400a54c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a54e:	68fb      	ldr	r3, [r7, #12]
2400a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a552:	1c5a      	adds	r2, r3, #1
2400a554:	68fb      	ldr	r3, [r7, #12]
2400a556:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400a558:	68fb      	ldr	r3, [r7, #12]
2400a55a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a55c:	b29b      	uxth	r3, r3
2400a55e:	3b01      	subs	r3, #1
2400a560:	b29a      	uxth	r2, r3
2400a562:	68fb      	ldr	r3, [r7, #12]
2400a564:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
2400a566:	68fb      	ldr	r3, [r7, #12]
2400a568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a56a:	b29b      	uxth	r3, r3
2400a56c:	2b00      	cmp	r3, #0
2400a56e:	d1d6      	bne.n	2400a51e <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
2400a570:	697b      	ldr	r3, [r7, #20]
2400a572:	9300      	str	r3, [sp, #0]
2400a574:	683b      	ldr	r3, [r7, #0]
2400a576:	2200      	movs	r2, #0
2400a578:	2110      	movs	r1, #16
2400a57a:	68f8      	ldr	r0, [r7, #12]
2400a57c:	f004 fab8 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a580:	4603      	mov	r3, r0
2400a582:	2b00      	cmp	r3, #0
2400a584:	d009      	beq.n	2400a59a <HAL_I2C_Slave_Transmit+0x19e>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a586:	68fb      	ldr	r3, [r7, #12]
2400a588:	681b      	ldr	r3, [r3, #0]
2400a58a:	685a      	ldr	r2, [r3, #4]
2400a58c:	68fb      	ldr	r3, [r7, #12]
2400a58e:	681b      	ldr	r3, [r3, #0]
2400a590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a594:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a596:	2301      	movs	r3, #1
2400a598:	e049      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400a59a:	68f8      	ldr	r0, [r7, #12]
2400a59c:	f003 ffc3 	bl	2400e526 <I2C_Flush_TXDR>

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400a5a0:	68fb      	ldr	r3, [r7, #12]
2400a5a2:	681b      	ldr	r3, [r3, #0]
2400a5a4:	2210      	movs	r2, #16
2400a5a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a5a8:	697a      	ldr	r2, [r7, #20]
2400a5aa:	6839      	ldr	r1, [r7, #0]
2400a5ac:	68f8      	ldr	r0, [r7, #12]
2400a5ae:	f004 fb1f 	bl	2400ebf0 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a5b2:	4603      	mov	r3, r0
2400a5b4:	2b00      	cmp	r3, #0
2400a5b6:	d009      	beq.n	2400a5cc <HAL_I2C_Slave_Transmit+0x1d0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a5b8:	68fb      	ldr	r3, [r7, #12]
2400a5ba:	681b      	ldr	r3, [r3, #0]
2400a5bc:	685a      	ldr	r2, [r3, #4]
2400a5be:	68fb      	ldr	r3, [r7, #12]
2400a5c0:	681b      	ldr	r3, [r3, #0]
2400a5c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a5c6:	605a      	str	r2, [r3, #4]

      return HAL_ERROR;
2400a5c8:	2301      	movs	r3, #1
2400a5ca:	e030      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a5cc:	68fb      	ldr	r3, [r7, #12]
2400a5ce:	681b      	ldr	r3, [r3, #0]
2400a5d0:	2220      	movs	r2, #32
2400a5d2:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400a5d4:	697b      	ldr	r3, [r7, #20]
2400a5d6:	9300      	str	r3, [sp, #0]
2400a5d8:	683b      	ldr	r3, [r7, #0]
2400a5da:	2201      	movs	r2, #1
2400a5dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a5e0:	68f8      	ldr	r0, [r7, #12]
2400a5e2:	f004 fa85 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a5e6:	4603      	mov	r3, r0
2400a5e8:	2b00      	cmp	r3, #0
2400a5ea:	d009      	beq.n	2400a600 <HAL_I2C_Slave_Transmit+0x204>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a5ec:	68fb      	ldr	r3, [r7, #12]
2400a5ee:	681b      	ldr	r3, [r3, #0]
2400a5f0:	685a      	ldr	r2, [r3, #4]
2400a5f2:	68fb      	ldr	r3, [r7, #12]
2400a5f4:	681b      	ldr	r3, [r3, #0]
2400a5f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a5fa:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a5fc:	2301      	movs	r3, #1
2400a5fe:	e016      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a600:	68fb      	ldr	r3, [r7, #12]
2400a602:	681b      	ldr	r3, [r3, #0]
2400a604:	685a      	ldr	r2, [r3, #4]
2400a606:	68fb      	ldr	r3, [r7, #12]
2400a608:	681b      	ldr	r3, [r3, #0]
2400a60a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a60e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a610:	68fb      	ldr	r3, [r7, #12]
2400a612:	2220      	movs	r2, #32
2400a614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a618:	68fb      	ldr	r3, [r7, #12]
2400a61a:	2200      	movs	r2, #0
2400a61c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a620:	68fb      	ldr	r3, [r7, #12]
2400a622:	2200      	movs	r2, #0
2400a624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a628:	2300      	movs	r3, #0
2400a62a:	e000      	b.n	2400a62e <HAL_I2C_Slave_Transmit+0x232>
  }
  else
  {
    return HAL_BUSY;
2400a62c:	2302      	movs	r3, #2
  }
}
2400a62e:	4618      	mov	r0, r3
2400a630:	3718      	adds	r7, #24
2400a632:	46bd      	mov	sp, r7
2400a634:	bd80      	pop	{r7, pc}

2400a636 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
2400a636:	b580      	push	{r7, lr}
2400a638:	b088      	sub	sp, #32
2400a63a:	af02      	add	r7, sp, #8
2400a63c:	60f8      	str	r0, [r7, #12]
2400a63e:	60b9      	str	r1, [r7, #8]
2400a640:	603b      	str	r3, [r7, #0]
2400a642:	4613      	mov	r3, r2
2400a644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a646:	68fb      	ldr	r3, [r7, #12]
2400a648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a64c:	b2db      	uxtb	r3, r3
2400a64e:	2b20      	cmp	r3, #32
2400a650:	f040 80fc 	bne.w	2400a84c <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
2400a654:	68bb      	ldr	r3, [r7, #8]
2400a656:	2b00      	cmp	r3, #0
2400a658:	d002      	beq.n	2400a660 <HAL_I2C_Slave_Receive+0x2a>
2400a65a:	88fb      	ldrh	r3, [r7, #6]
2400a65c:	2b00      	cmp	r3, #0
2400a65e:	d105      	bne.n	2400a66c <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400a660:	68fb      	ldr	r3, [r7, #12]
2400a662:	f44f 7200 	mov.w	r2, #512	; 0x200
2400a666:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400a668:	2301      	movs	r3, #1
2400a66a:	e0f0      	b.n	2400a84e <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a66c:	68fb      	ldr	r3, [r7, #12]
2400a66e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a672:	2b01      	cmp	r3, #1
2400a674:	d101      	bne.n	2400a67a <HAL_I2C_Slave_Receive+0x44>
2400a676:	2302      	movs	r3, #2
2400a678:	e0e9      	b.n	2400a84e <HAL_I2C_Slave_Receive+0x218>
2400a67a:	68fb      	ldr	r3, [r7, #12]
2400a67c:	2201      	movs	r2, #1
2400a67e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400a682:	f7f7 fdbb 	bl	240021fc <HAL_GetTick>
2400a686:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400a688:	68fb      	ldr	r3, [r7, #12]
2400a68a:	2222      	movs	r2, #34	; 0x22
2400a68c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400a690:	68fb      	ldr	r3, [r7, #12]
2400a692:	2220      	movs	r2, #32
2400a694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400a698:	68fb      	ldr	r3, [r7, #12]
2400a69a:	2200      	movs	r2, #0
2400a69c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400a69e:	68fb      	ldr	r3, [r7, #12]
2400a6a0:	68ba      	ldr	r2, [r7, #8]
2400a6a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400a6a4:	68fb      	ldr	r3, [r7, #12]
2400a6a6:	88fa      	ldrh	r2, [r7, #6]
2400a6a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
2400a6aa:	68fb      	ldr	r3, [r7, #12]
2400a6ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a6ae:	b29a      	uxth	r2, r3
2400a6b0:	68fb      	ldr	r3, [r7, #12]
2400a6b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
2400a6b4:	68fb      	ldr	r3, [r7, #12]
2400a6b6:	2200      	movs	r2, #0
2400a6b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400a6ba:	68fb      	ldr	r3, [r7, #12]
2400a6bc:	681b      	ldr	r3, [r3, #0]
2400a6be:	685a      	ldr	r2, [r3, #4]
2400a6c0:	68fb      	ldr	r3, [r7, #12]
2400a6c2:	681b      	ldr	r3, [r3, #0]
2400a6c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400a6c8:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400a6ca:	697b      	ldr	r3, [r7, #20]
2400a6cc:	9300      	str	r3, [sp, #0]
2400a6ce:	683b      	ldr	r3, [r7, #0]
2400a6d0:	2200      	movs	r2, #0
2400a6d2:	2108      	movs	r1, #8
2400a6d4:	68f8      	ldr	r0, [r7, #12]
2400a6d6:	f004 fa0b 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a6da:	4603      	mov	r3, r0
2400a6dc:	2b00      	cmp	r3, #0
2400a6de:	d009      	beq.n	2400a6f4 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a6e0:	68fb      	ldr	r3, [r7, #12]
2400a6e2:	681b      	ldr	r3, [r3, #0]
2400a6e4:	685a      	ldr	r2, [r3, #4]
2400a6e6:	68fb      	ldr	r3, [r7, #12]
2400a6e8:	681b      	ldr	r3, [r3, #0]
2400a6ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a6ee:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a6f0:	2301      	movs	r3, #1
2400a6f2:	e0ac      	b.n	2400a84e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400a6f4:	68fb      	ldr	r3, [r7, #12]
2400a6f6:	681b      	ldr	r3, [r3, #0]
2400a6f8:	2208      	movs	r2, #8
2400a6fa:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
2400a6fc:	697b      	ldr	r3, [r7, #20]
2400a6fe:	9300      	str	r3, [sp, #0]
2400a700:	683b      	ldr	r3, [r7, #0]
2400a702:	2201      	movs	r2, #1
2400a704:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2400a708:	68f8      	ldr	r0, [r7, #12]
2400a70a:	f004 f9f1 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a70e:	4603      	mov	r3, r0
2400a710:	2b00      	cmp	r3, #0
2400a712:	d054      	beq.n	2400a7be <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a714:	68fb      	ldr	r3, [r7, #12]
2400a716:	681b      	ldr	r3, [r3, #0]
2400a718:	685a      	ldr	r2, [r3, #4]
2400a71a:	68fb      	ldr	r3, [r7, #12]
2400a71c:	681b      	ldr	r3, [r3, #0]
2400a71e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a722:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a724:	2301      	movs	r3, #1
2400a726:	e092      	b.n	2400a84e <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a728:	697a      	ldr	r2, [r7, #20]
2400a72a:	6839      	ldr	r1, [r7, #0]
2400a72c:	68f8      	ldr	r0, [r7, #12]
2400a72e:	f004 fa9b 	bl	2400ec68 <I2C_WaitOnRXNEFlagUntilTimeout>
2400a732:	4603      	mov	r3, r0
2400a734:	2b00      	cmp	r3, #0
2400a736:	d029      	beq.n	2400a78c <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a738:	68fb      	ldr	r3, [r7, #12]
2400a73a:	681b      	ldr	r3, [r3, #0]
2400a73c:	685a      	ldr	r2, [r3, #4]
2400a73e:	68fb      	ldr	r3, [r7, #12]
2400a740:	681b      	ldr	r3, [r3, #0]
2400a742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a746:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
2400a748:	68fb      	ldr	r3, [r7, #12]
2400a74a:	681b      	ldr	r3, [r3, #0]
2400a74c:	699b      	ldr	r3, [r3, #24]
2400a74e:	f003 0304 	and.w	r3, r3, #4
2400a752:	2b04      	cmp	r3, #4
2400a754:	d118      	bne.n	2400a788 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400a756:	68fb      	ldr	r3, [r7, #12]
2400a758:	681b      	ldr	r3, [r3, #0]
2400a75a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400a75c:	68fb      	ldr	r3, [r7, #12]
2400a75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a760:	b2d2      	uxtb	r2, r2
2400a762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
2400a764:	68fb      	ldr	r3, [r7, #12]
2400a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a768:	1c5a      	adds	r2, r3, #1
2400a76a:	68fb      	ldr	r3, [r7, #12]
2400a76c:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
2400a76e:	68fb      	ldr	r3, [r7, #12]
2400a770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a772:	b29b      	uxth	r3, r3
2400a774:	3b01      	subs	r3, #1
2400a776:	b29a      	uxth	r2, r3
2400a778:	68fb      	ldr	r3, [r7, #12]
2400a77a:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
2400a77c:	68fb      	ldr	r3, [r7, #12]
2400a77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a780:	3b01      	subs	r3, #1
2400a782:	b29a      	uxth	r2, r3
2400a784:	68fb      	ldr	r3, [r7, #12]
2400a786:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
2400a788:	2301      	movs	r3, #1
2400a78a:	e060      	b.n	2400a84e <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400a78c:	68fb      	ldr	r3, [r7, #12]
2400a78e:	681b      	ldr	r3, [r3, #0]
2400a790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400a792:	68fb      	ldr	r3, [r7, #12]
2400a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a796:	b2d2      	uxtb	r2, r2
2400a798:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400a79a:	68fb      	ldr	r3, [r7, #12]
2400a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400a79e:	1c5a      	adds	r2, r3, #1
2400a7a0:	68fb      	ldr	r3, [r7, #12]
2400a7a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400a7a4:	68fb      	ldr	r3, [r7, #12]
2400a7a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a7a8:	b29b      	uxth	r3, r3
2400a7aa:	3b01      	subs	r3, #1
2400a7ac:	b29a      	uxth	r2, r3
2400a7ae:	68fb      	ldr	r3, [r7, #12]
2400a7b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400a7b2:	68fb      	ldr	r3, [r7, #12]
2400a7b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a7b6:	3b01      	subs	r3, #1
2400a7b8:	b29a      	uxth	r2, r3
2400a7ba:	68fb      	ldr	r3, [r7, #12]
2400a7bc:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
2400a7be:	68fb      	ldr	r3, [r7, #12]
2400a7c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a7c2:	b29b      	uxth	r3, r3
2400a7c4:	2b00      	cmp	r3, #0
2400a7c6:	d1af      	bne.n	2400a728 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400a7c8:	697a      	ldr	r2, [r7, #20]
2400a7ca:	6839      	ldr	r1, [r7, #0]
2400a7cc:	68f8      	ldr	r0, [r7, #12]
2400a7ce:	f004 fa0f 	bl	2400ebf0 <I2C_WaitOnSTOPFlagUntilTimeout>
2400a7d2:	4603      	mov	r3, r0
2400a7d4:	2b00      	cmp	r3, #0
2400a7d6:	d009      	beq.n	2400a7ec <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a7d8:	68fb      	ldr	r3, [r7, #12]
2400a7da:	681b      	ldr	r3, [r3, #0]
2400a7dc:	685a      	ldr	r2, [r3, #4]
2400a7de:	68fb      	ldr	r3, [r7, #12]
2400a7e0:	681b      	ldr	r3, [r3, #0]
2400a7e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a7e6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a7e8:	2301      	movs	r3, #1
2400a7ea:	e030      	b.n	2400a84e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400a7ec:	68fb      	ldr	r3, [r7, #12]
2400a7ee:	681b      	ldr	r3, [r3, #0]
2400a7f0:	2220      	movs	r2, #32
2400a7f2:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400a7f4:	697b      	ldr	r3, [r7, #20]
2400a7f6:	9300      	str	r3, [sp, #0]
2400a7f8:	683b      	ldr	r3, [r7, #0]
2400a7fa:	2201      	movs	r2, #1
2400a7fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400a800:	68f8      	ldr	r0, [r7, #12]
2400a802:	f004 f975 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400a806:	4603      	mov	r3, r0
2400a808:	2b00      	cmp	r3, #0
2400a80a:	d009      	beq.n	2400a820 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a80c:	68fb      	ldr	r3, [r7, #12]
2400a80e:	681b      	ldr	r3, [r3, #0]
2400a810:	685a      	ldr	r2, [r3, #4]
2400a812:	68fb      	ldr	r3, [r7, #12]
2400a814:	681b      	ldr	r3, [r3, #0]
2400a816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a81a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400a81c:	2301      	movs	r3, #1
2400a81e:	e016      	b.n	2400a84e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400a820:	68fb      	ldr	r3, [r7, #12]
2400a822:	681b      	ldr	r3, [r3, #0]
2400a824:	685a      	ldr	r2, [r3, #4]
2400a826:	68fb      	ldr	r3, [r7, #12]
2400a828:	681b      	ldr	r3, [r3, #0]
2400a82a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400a82e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400a830:	68fb      	ldr	r3, [r7, #12]
2400a832:	2220      	movs	r2, #32
2400a834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400a838:	68fb      	ldr	r3, [r7, #12]
2400a83a:	2200      	movs	r2, #0
2400a83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a840:	68fb      	ldr	r3, [r7, #12]
2400a842:	2200      	movs	r2, #0
2400a844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400a848:	2300      	movs	r3, #0
2400a84a:	e000      	b.n	2400a84e <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
2400a84c:	2302      	movs	r3, #2
  }
}
2400a84e:	4618      	mov	r0, r3
2400a850:	3718      	adds	r7, #24
2400a852:	46bd      	mov	sp, r7
2400a854:	bd80      	pop	{r7, pc}
	...

2400a858 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400a858:	b580      	push	{r7, lr}
2400a85a:	b088      	sub	sp, #32
2400a85c:	af02      	add	r7, sp, #8
2400a85e:	60f8      	str	r0, [r7, #12]
2400a860:	607a      	str	r2, [r7, #4]
2400a862:	461a      	mov	r2, r3
2400a864:	460b      	mov	r3, r1
2400a866:	817b      	strh	r3, [r7, #10]
2400a868:	4613      	mov	r3, r2
2400a86a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a86c:	68fb      	ldr	r3, [r7, #12]
2400a86e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a872:	b2db      	uxtb	r3, r3
2400a874:	2b20      	cmp	r3, #32
2400a876:	d153      	bne.n	2400a920 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400a878:	68fb      	ldr	r3, [r7, #12]
2400a87a:	681b      	ldr	r3, [r3, #0]
2400a87c:	699b      	ldr	r3, [r3, #24]
2400a87e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400a882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400a886:	d101      	bne.n	2400a88c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
2400a888:	2302      	movs	r3, #2
2400a88a:	e04a      	b.n	2400a922 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a88c:	68fb      	ldr	r3, [r7, #12]
2400a88e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a892:	2b01      	cmp	r3, #1
2400a894:	d101      	bne.n	2400a89a <HAL_I2C_Master_Transmit_IT+0x42>
2400a896:	2302      	movs	r3, #2
2400a898:	e043      	b.n	2400a922 <HAL_I2C_Master_Transmit_IT+0xca>
2400a89a:	68fb      	ldr	r3, [r7, #12]
2400a89c:	2201      	movs	r2, #1
2400a89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400a8a2:	68fb      	ldr	r3, [r7, #12]
2400a8a4:	2221      	movs	r2, #33	; 0x21
2400a8a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400a8aa:	68fb      	ldr	r3, [r7, #12]
2400a8ac:	2210      	movs	r2, #16
2400a8ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400a8b2:	68fb      	ldr	r3, [r7, #12]
2400a8b4:	2200      	movs	r2, #0
2400a8b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400a8b8:	68fb      	ldr	r3, [r7, #12]
2400a8ba:	687a      	ldr	r2, [r7, #4]
2400a8bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400a8be:	68fb      	ldr	r3, [r7, #12]
2400a8c0:	893a      	ldrh	r2, [r7, #8]
2400a8c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400a8c4:	68fb      	ldr	r3, [r7, #12]
2400a8c6:	4a19      	ldr	r2, [pc, #100]	; (2400a92c <HAL_I2C_Master_Transmit_IT+0xd4>)
2400a8c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400a8ca:	68fb      	ldr	r3, [r7, #12]
2400a8cc:	4a18      	ldr	r2, [pc, #96]	; (2400a930 <HAL_I2C_Master_Transmit_IT+0xd8>)
2400a8ce:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a8d0:	68fb      	ldr	r3, [r7, #12]
2400a8d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a8d4:	b29b      	uxth	r3, r3
2400a8d6:	2bff      	cmp	r3, #255	; 0xff
2400a8d8:	d906      	bls.n	2400a8e8 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a8da:	68fb      	ldr	r3, [r7, #12]
2400a8dc:	22ff      	movs	r2, #255	; 0xff
2400a8de:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400a8e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a8e4:	617b      	str	r3, [r7, #20]
2400a8e6:	e007      	b.n	2400a8f8 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a8e8:	68fb      	ldr	r3, [r7, #12]
2400a8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a8ec:	b29a      	uxth	r2, r3
2400a8ee:	68fb      	ldr	r3, [r7, #12]
2400a8f0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400a8f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a8f6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
2400a8f8:	68fb      	ldr	r3, [r7, #12]
2400a8fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a8fc:	b2da      	uxtb	r2, r3
2400a8fe:	8979      	ldrh	r1, [r7, #10]
2400a900:	4b0c      	ldr	r3, [pc, #48]	; (2400a934 <HAL_I2C_Master_Transmit_IT+0xdc>)
2400a902:	9300      	str	r3, [sp, #0]
2400a904:	697b      	ldr	r3, [r7, #20]
2400a906:	68f8      	ldr	r0, [r7, #12]
2400a908:	f004 fb14 	bl	2400ef34 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a90c:	68fb      	ldr	r3, [r7, #12]
2400a90e:	2200      	movs	r2, #0
2400a910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400a914:	2101      	movs	r1, #1
2400a916:	68f8      	ldr	r0, [r7, #12]
2400a918:	f004 fb3e 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400a91c:	2300      	movs	r3, #0
2400a91e:	e000      	b.n	2400a922 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400a920:	2302      	movs	r3, #2
  }
}
2400a922:	4618      	mov	r0, r3
2400a924:	3718      	adds	r7, #24
2400a926:	46bd      	mov	sp, r7
2400a928:	bd80      	pop	{r7, pc}
2400a92a:	bf00      	nop
2400a92c:	ffff0000 	.word	0xffff0000
2400a930:	2400cf77 	.word	0x2400cf77
2400a934:	80002000 	.word	0x80002000

2400a938 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
2400a938:	b580      	push	{r7, lr}
2400a93a:	b088      	sub	sp, #32
2400a93c:	af02      	add	r7, sp, #8
2400a93e:	60f8      	str	r0, [r7, #12]
2400a940:	607a      	str	r2, [r7, #4]
2400a942:	461a      	mov	r2, r3
2400a944:	460b      	mov	r3, r1
2400a946:	817b      	strh	r3, [r7, #10]
2400a948:	4613      	mov	r3, r2
2400a94a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400a94c:	68fb      	ldr	r3, [r7, #12]
2400a94e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400a952:	b2db      	uxtb	r3, r3
2400a954:	2b20      	cmp	r3, #32
2400a956:	d153      	bne.n	2400aa00 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400a958:	68fb      	ldr	r3, [r7, #12]
2400a95a:	681b      	ldr	r3, [r3, #0]
2400a95c:	699b      	ldr	r3, [r3, #24]
2400a95e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400a962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400a966:	d101      	bne.n	2400a96c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
2400a968:	2302      	movs	r3, #2
2400a96a:	e04a      	b.n	2400aa02 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400a96c:	68fb      	ldr	r3, [r7, #12]
2400a96e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400a972:	2b01      	cmp	r3, #1
2400a974:	d101      	bne.n	2400a97a <HAL_I2C_Master_Receive_IT+0x42>
2400a976:	2302      	movs	r3, #2
2400a978:	e043      	b.n	2400aa02 <HAL_I2C_Master_Receive_IT+0xca>
2400a97a:	68fb      	ldr	r3, [r7, #12]
2400a97c:	2201      	movs	r2, #1
2400a97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400a982:	68fb      	ldr	r3, [r7, #12]
2400a984:	2222      	movs	r2, #34	; 0x22
2400a986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400a98a:	68fb      	ldr	r3, [r7, #12]
2400a98c:	2210      	movs	r2, #16
2400a98e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400a992:	68fb      	ldr	r3, [r7, #12]
2400a994:	2200      	movs	r2, #0
2400a996:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400a998:	68fb      	ldr	r3, [r7, #12]
2400a99a:	687a      	ldr	r2, [r7, #4]
2400a99c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400a99e:	68fb      	ldr	r3, [r7, #12]
2400a9a0:	893a      	ldrh	r2, [r7, #8]
2400a9a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400a9a4:	68fb      	ldr	r3, [r7, #12]
2400a9a6:	4a19      	ldr	r2, [pc, #100]	; (2400aa0c <HAL_I2C_Master_Receive_IT+0xd4>)
2400a9a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400a9aa:	68fb      	ldr	r3, [r7, #12]
2400a9ac:	4a18      	ldr	r2, [pc, #96]	; (2400aa10 <HAL_I2C_Master_Receive_IT+0xd8>)
2400a9ae:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400a9b0:	68fb      	ldr	r3, [r7, #12]
2400a9b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a9b4:	b29b      	uxth	r3, r3
2400a9b6:	2bff      	cmp	r3, #255	; 0xff
2400a9b8:	d906      	bls.n	2400a9c8 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400a9ba:	68fb      	ldr	r3, [r7, #12]
2400a9bc:	22ff      	movs	r2, #255	; 0xff
2400a9be:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400a9c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400a9c4:	617b      	str	r3, [r7, #20]
2400a9c6:	e007      	b.n	2400a9d8 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400a9c8:	68fb      	ldr	r3, [r7, #12]
2400a9ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400a9cc:	b29a      	uxth	r2, r3
2400a9ce:	68fb      	ldr	r3, [r7, #12]
2400a9d0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400a9d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a9d6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400a9d8:	68fb      	ldr	r3, [r7, #12]
2400a9da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400a9dc:	b2da      	uxtb	r2, r3
2400a9de:	8979      	ldrh	r1, [r7, #10]
2400a9e0:	4b0c      	ldr	r3, [pc, #48]	; (2400aa14 <HAL_I2C_Master_Receive_IT+0xdc>)
2400a9e2:	9300      	str	r3, [sp, #0]
2400a9e4:	697b      	ldr	r3, [r7, #20]
2400a9e6:	68f8      	ldr	r0, [r7, #12]
2400a9e8:	f004 faa4 	bl	2400ef34 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400a9ec:	68fb      	ldr	r3, [r7, #12]
2400a9ee:	2200      	movs	r2, #0
2400a9f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400a9f4:	2102      	movs	r1, #2
2400a9f6:	68f8      	ldr	r0, [r7, #12]
2400a9f8:	f004 face 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400a9fc:	2300      	movs	r3, #0
2400a9fe:	e000      	b.n	2400aa02 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400aa00:	2302      	movs	r3, #2
  }
}
2400aa02:	4618      	mov	r0, r3
2400aa04:	3718      	adds	r7, #24
2400aa06:	46bd      	mov	sp, r7
2400aa08:	bd80      	pop	{r7, pc}
2400aa0a:	bf00      	nop
2400aa0c:	ffff0000 	.word	0xffff0000
2400aa10:	2400cf77 	.word	0x2400cf77
2400aa14:	80002400 	.word	0x80002400

2400aa18 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400aa18:	b580      	push	{r7, lr}
2400aa1a:	b084      	sub	sp, #16
2400aa1c:	af00      	add	r7, sp, #0
2400aa1e:	60f8      	str	r0, [r7, #12]
2400aa20:	60b9      	str	r1, [r7, #8]
2400aa22:	4613      	mov	r3, r2
2400aa24:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400aa26:	68fb      	ldr	r3, [r7, #12]
2400aa28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400aa2c:	b2db      	uxtb	r3, r3
2400aa2e:	2b20      	cmp	r3, #32
2400aa30:	d139      	bne.n	2400aaa6 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400aa32:	68fb      	ldr	r3, [r7, #12]
2400aa34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400aa38:	2b01      	cmp	r3, #1
2400aa3a:	d101      	bne.n	2400aa40 <HAL_I2C_Slave_Transmit_IT+0x28>
2400aa3c:	2302      	movs	r3, #2
2400aa3e:	e033      	b.n	2400aaa8 <HAL_I2C_Slave_Transmit_IT+0x90>
2400aa40:	68fb      	ldr	r3, [r7, #12]
2400aa42:	2201      	movs	r2, #1
2400aa44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400aa48:	68fb      	ldr	r3, [r7, #12]
2400aa4a:	2221      	movs	r2, #33	; 0x21
2400aa4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400aa50:	68fb      	ldr	r3, [r7, #12]
2400aa52:	2220      	movs	r2, #32
2400aa54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400aa58:	68fb      	ldr	r3, [r7, #12]
2400aa5a:	2200      	movs	r2, #0
2400aa5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400aa5e:	68fb      	ldr	r3, [r7, #12]
2400aa60:	681b      	ldr	r3, [r3, #0]
2400aa62:	685a      	ldr	r2, [r3, #4]
2400aa64:	68fb      	ldr	r3, [r7, #12]
2400aa66:	681b      	ldr	r3, [r3, #0]
2400aa68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400aa6c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400aa6e:	68fb      	ldr	r3, [r7, #12]
2400aa70:	68ba      	ldr	r2, [r7, #8]
2400aa72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400aa74:	68fb      	ldr	r3, [r7, #12]
2400aa76:	88fa      	ldrh	r2, [r7, #6]
2400aa78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400aa7a:	68fb      	ldr	r3, [r7, #12]
2400aa7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400aa7e:	b29a      	uxth	r2, r3
2400aa80:	68fb      	ldr	r3, [r7, #12]
2400aa82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400aa84:	68fb      	ldr	r3, [r7, #12]
2400aa86:	4a0a      	ldr	r2, [pc, #40]	; (2400aab0 <HAL_I2C_Slave_Transmit_IT+0x98>)
2400aa88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400aa8a:	68fb      	ldr	r3, [r7, #12]
2400aa8c:	4a09      	ldr	r2, [pc, #36]	; (2400aab4 <HAL_I2C_Slave_Transmit_IT+0x9c>)
2400aa8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400aa90:	68fb      	ldr	r3, [r7, #12]
2400aa92:	2200      	movs	r2, #0
2400aa94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400aa98:	f248 0101 	movw	r1, #32769	; 0x8001
2400aa9c:	68f8      	ldr	r0, [r7, #12]
2400aa9e:	f004 fa7b 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400aaa2:	2300      	movs	r3, #0
2400aaa4:	e000      	b.n	2400aaa8 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2400aaa6:	2302      	movs	r3, #2
  }
}
2400aaa8:	4618      	mov	r0, r3
2400aaaa:	3710      	adds	r7, #16
2400aaac:	46bd      	mov	sp, r7
2400aaae:	bd80      	pop	{r7, pc}
2400aab0:	ffff0000 	.word	0xffff0000
2400aab4:	2400d1c7 	.word	0x2400d1c7

2400aab8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400aab8:	b580      	push	{r7, lr}
2400aaba:	b084      	sub	sp, #16
2400aabc:	af00      	add	r7, sp, #0
2400aabe:	60f8      	str	r0, [r7, #12]
2400aac0:	60b9      	str	r1, [r7, #8]
2400aac2:	4613      	mov	r3, r2
2400aac4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400aac6:	68fb      	ldr	r3, [r7, #12]
2400aac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400aacc:	b2db      	uxtb	r3, r3
2400aace:	2b20      	cmp	r3, #32
2400aad0:	d139      	bne.n	2400ab46 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400aad2:	68fb      	ldr	r3, [r7, #12]
2400aad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400aad8:	2b01      	cmp	r3, #1
2400aada:	d101      	bne.n	2400aae0 <HAL_I2C_Slave_Receive_IT+0x28>
2400aadc:	2302      	movs	r3, #2
2400aade:	e033      	b.n	2400ab48 <HAL_I2C_Slave_Receive_IT+0x90>
2400aae0:	68fb      	ldr	r3, [r7, #12]
2400aae2:	2201      	movs	r2, #1
2400aae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400aae8:	68fb      	ldr	r3, [r7, #12]
2400aaea:	2222      	movs	r2, #34	; 0x22
2400aaec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400aaf0:	68fb      	ldr	r3, [r7, #12]
2400aaf2:	2220      	movs	r2, #32
2400aaf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400aaf8:	68fb      	ldr	r3, [r7, #12]
2400aafa:	2200      	movs	r2, #0
2400aafc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400aafe:	68fb      	ldr	r3, [r7, #12]
2400ab00:	681b      	ldr	r3, [r3, #0]
2400ab02:	685a      	ldr	r2, [r3, #4]
2400ab04:	68fb      	ldr	r3, [r7, #12]
2400ab06:	681b      	ldr	r3, [r3, #0]
2400ab08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ab0c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ab0e:	68fb      	ldr	r3, [r7, #12]
2400ab10:	68ba      	ldr	r2, [r7, #8]
2400ab12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400ab14:	68fb      	ldr	r3, [r7, #12]
2400ab16:	88fa      	ldrh	r2, [r7, #6]
2400ab18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400ab1a:	68fb      	ldr	r3, [r7, #12]
2400ab1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ab1e:	b29a      	uxth	r2, r3
2400ab20:	68fb      	ldr	r3, [r7, #12]
2400ab22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400ab24:	68fb      	ldr	r3, [r7, #12]
2400ab26:	4a0a      	ldr	r2, [pc, #40]	; (2400ab50 <HAL_I2C_Slave_Receive_IT+0x98>)
2400ab28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400ab2a:	68fb      	ldr	r3, [r7, #12]
2400ab2c:	4a09      	ldr	r2, [pc, #36]	; (2400ab54 <HAL_I2C_Slave_Receive_IT+0x9c>)
2400ab2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ab30:	68fb      	ldr	r3, [r7, #12]
2400ab32:	2200      	movs	r2, #0
2400ab34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400ab38:	f248 0102 	movw	r1, #32770	; 0x8002
2400ab3c:	68f8      	ldr	r0, [r7, #12]
2400ab3e:	f004 fa2b 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400ab42:	2300      	movs	r3, #0
2400ab44:	e000      	b.n	2400ab48 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2400ab46:	2302      	movs	r3, #2
  }
}
2400ab48:	4618      	mov	r0, r3
2400ab4a:	3710      	adds	r7, #16
2400ab4c:	46bd      	mov	sp, r7
2400ab4e:	bd80      	pop	{r7, pc}
2400ab50:	ffff0000 	.word	0xffff0000
2400ab54:	2400d1c7 	.word	0x2400d1c7

2400ab58 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
2400ab58:	b580      	push	{r7, lr}
2400ab5a:	b088      	sub	sp, #32
2400ab5c:	af02      	add	r7, sp, #8
2400ab5e:	60f8      	str	r0, [r7, #12]
2400ab60:	607a      	str	r2, [r7, #4]
2400ab62:	461a      	mov	r2, r3
2400ab64:	460b      	mov	r3, r1
2400ab66:	817b      	strh	r3, [r7, #10]
2400ab68:	4613      	mov	r3, r2
2400ab6a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ab6c:	68fb      	ldr	r3, [r7, #12]
2400ab6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ab72:	b2db      	uxtb	r3, r3
2400ab74:	2b20      	cmp	r3, #32
2400ab76:	f040 80cd 	bne.w	2400ad14 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400ab7a:	68fb      	ldr	r3, [r7, #12]
2400ab7c:	681b      	ldr	r3, [r3, #0]
2400ab7e:	699b      	ldr	r3, [r3, #24]
2400ab80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ab84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ab88:	d101      	bne.n	2400ab8e <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
2400ab8a:	2302      	movs	r3, #2
2400ab8c:	e0c3      	b.n	2400ad16 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ab8e:	68fb      	ldr	r3, [r7, #12]
2400ab90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ab94:	2b01      	cmp	r3, #1
2400ab96:	d101      	bne.n	2400ab9c <HAL_I2C_Master_Transmit_DMA+0x44>
2400ab98:	2302      	movs	r3, #2
2400ab9a:	e0bc      	b.n	2400ad16 <HAL_I2C_Master_Transmit_DMA+0x1be>
2400ab9c:	68fb      	ldr	r3, [r7, #12]
2400ab9e:	2201      	movs	r2, #1
2400aba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400aba4:	68fb      	ldr	r3, [r7, #12]
2400aba6:	2221      	movs	r2, #33	; 0x21
2400aba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400abac:	68fb      	ldr	r3, [r7, #12]
2400abae:	2210      	movs	r2, #16
2400abb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400abb4:	68fb      	ldr	r3, [r7, #12]
2400abb6:	2200      	movs	r2, #0
2400abb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400abba:	68fb      	ldr	r3, [r7, #12]
2400abbc:	687a      	ldr	r2, [r7, #4]
2400abbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400abc0:	68fb      	ldr	r3, [r7, #12]
2400abc2:	893a      	ldrh	r2, [r7, #8]
2400abc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400abc6:	68fb      	ldr	r3, [r7, #12]
2400abc8:	4a55      	ldr	r2, [pc, #340]	; (2400ad20 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
2400abca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400abcc:	68fb      	ldr	r3, [r7, #12]
2400abce:	4a55      	ldr	r2, [pc, #340]	; (2400ad24 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
2400abd0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400abd2:	68fb      	ldr	r3, [r7, #12]
2400abd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400abd6:	b29b      	uxth	r3, r3
2400abd8:	2bff      	cmp	r3, #255	; 0xff
2400abda:	d906      	bls.n	2400abea <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400abdc:	68fb      	ldr	r3, [r7, #12]
2400abde:	22ff      	movs	r2, #255	; 0xff
2400abe0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400abe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400abe6:	617b      	str	r3, [r7, #20]
2400abe8:	e007      	b.n	2400abfa <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400abea:	68fb      	ldr	r3, [r7, #12]
2400abec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400abee:	b29a      	uxth	r2, r3
2400abf0:	68fb      	ldr	r3, [r7, #12]
2400abf2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400abf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400abf8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400abfa:	68fb      	ldr	r3, [r7, #12]
2400abfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400abfe:	2b00      	cmp	r3, #0
2400ac00:	d070      	beq.n	2400ace4 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
2400ac02:	68fb      	ldr	r3, [r7, #12]
2400ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ac06:	2b00      	cmp	r3, #0
2400ac08:	d020      	beq.n	2400ac4c <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400ac0a:	68fb      	ldr	r3, [r7, #12]
2400ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ac0e:	4a46      	ldr	r2, [pc, #280]	; (2400ad28 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
2400ac10:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400ac12:	68fb      	ldr	r3, [r7, #12]
2400ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ac16:	4a45      	ldr	r2, [pc, #276]	; (2400ad2c <HAL_I2C_Master_Transmit_DMA+0x1d4>)
2400ac18:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400ac1a:	68fb      	ldr	r3, [r7, #12]
2400ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ac1e:	2200      	movs	r2, #0
2400ac20:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400ac22:	68fb      	ldr	r3, [r7, #12]
2400ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ac26:	2200      	movs	r2, #0
2400ac28:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400ac2a:	68fb      	ldr	r3, [r7, #12]
2400ac2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400ac2e:	6879      	ldr	r1, [r7, #4]
2400ac30:	68fb      	ldr	r3, [r7, #12]
2400ac32:	681b      	ldr	r3, [r3, #0]
2400ac34:	3328      	adds	r3, #40	; 0x28
2400ac36:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400ac38:	68fb      	ldr	r3, [r7, #12]
2400ac3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400ac3c:	f7f9 f878 	bl	24003d30 <HAL_DMA_Start_IT>
2400ac40:	4603      	mov	r3, r0
2400ac42:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400ac44:	7cfb      	ldrb	r3, [r7, #19]
2400ac46:	2b00      	cmp	r3, #0
2400ac48:	d138      	bne.n	2400acbc <HAL_I2C_Master_Transmit_DMA+0x164>
2400ac4a:	e013      	b.n	2400ac74 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400ac4c:	68fb      	ldr	r3, [r7, #12]
2400ac4e:	2220      	movs	r2, #32
2400ac50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400ac54:	68fb      	ldr	r3, [r7, #12]
2400ac56:	2200      	movs	r2, #0
2400ac58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400ac5c:	68fb      	ldr	r3, [r7, #12]
2400ac5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ac60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400ac64:	68fb      	ldr	r3, [r7, #12]
2400ac66:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400ac68:	68fb      	ldr	r3, [r7, #12]
2400ac6a:	2200      	movs	r2, #0
2400ac6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400ac70:	2301      	movs	r3, #1
2400ac72:	e050      	b.n	2400ad16 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
2400ac74:	68fb      	ldr	r3, [r7, #12]
2400ac76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ac78:	b2da      	uxtb	r2, r3
2400ac7a:	8979      	ldrh	r1, [r7, #10]
2400ac7c:	4b2c      	ldr	r3, [pc, #176]	; (2400ad30 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
2400ac7e:	9300      	str	r3, [sp, #0]
2400ac80:	697b      	ldr	r3, [r7, #20]
2400ac82:	68f8      	ldr	r0, [r7, #12]
2400ac84:	f004 f956 	bl	2400ef34 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400ac88:	68fb      	ldr	r3, [r7, #12]
2400ac8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ac8c:	b29a      	uxth	r2, r3
2400ac8e:	68fb      	ldr	r3, [r7, #12]
2400ac90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ac92:	1ad3      	subs	r3, r2, r3
2400ac94:	b29a      	uxth	r2, r3
2400ac96:	68fb      	ldr	r3, [r7, #12]
2400ac98:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400ac9a:	68fb      	ldr	r3, [r7, #12]
2400ac9c:	2200      	movs	r2, #0
2400ac9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400aca2:	2110      	movs	r1, #16
2400aca4:	68f8      	ldr	r0, [r7, #12]
2400aca6:	f004 f977 	bl	2400ef98 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400acaa:	68fb      	ldr	r3, [r7, #12]
2400acac:	681b      	ldr	r3, [r3, #0]
2400acae:	681a      	ldr	r2, [r3, #0]
2400acb0:	68fb      	ldr	r3, [r7, #12]
2400acb2:	681b      	ldr	r3, [r3, #0]
2400acb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400acb8:	601a      	str	r2, [r3, #0]
2400acba:	e029      	b.n	2400ad10 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400acbc:	68fb      	ldr	r3, [r7, #12]
2400acbe:	2220      	movs	r2, #32
2400acc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400acc4:	68fb      	ldr	r3, [r7, #12]
2400acc6:	2200      	movs	r2, #0
2400acc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400accc:	68fb      	ldr	r3, [r7, #12]
2400acce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400acd0:	f043 0210 	orr.w	r2, r3, #16
2400acd4:	68fb      	ldr	r3, [r7, #12]
2400acd6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400acd8:	68fb      	ldr	r3, [r7, #12]
2400acda:	2200      	movs	r2, #0
2400acdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400ace0:	2301      	movs	r3, #1
2400ace2:	e018      	b.n	2400ad16 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400ace4:	68fb      	ldr	r3, [r7, #12]
2400ace6:	4a13      	ldr	r2, [pc, #76]	; (2400ad34 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
2400ace8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400acea:	68fb      	ldr	r3, [r7, #12]
2400acec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400acee:	b2da      	uxtb	r2, r3
2400acf0:	8979      	ldrh	r1, [r7, #10]
2400acf2:	4b0f      	ldr	r3, [pc, #60]	; (2400ad30 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
2400acf4:	9300      	str	r3, [sp, #0]
2400acf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400acfa:	68f8      	ldr	r0, [r7, #12]
2400acfc:	f004 f91a 	bl	2400ef34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ad00:	68fb      	ldr	r3, [r7, #12]
2400ad02:	2200      	movs	r2, #0
2400ad04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400ad08:	2101      	movs	r1, #1
2400ad0a:	68f8      	ldr	r0, [r7, #12]
2400ad0c:	f004 f944 	bl	2400ef98 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400ad10:	2300      	movs	r3, #0
2400ad12:	e000      	b.n	2400ad16 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400ad14:	2302      	movs	r3, #2
  }
}
2400ad16:	4618      	mov	r0, r3
2400ad18:	3718      	adds	r7, #24
2400ad1a:	46bd      	mov	sp, r7
2400ad1c:	bd80      	pop	{r7, pc}
2400ad1e:	bf00      	nop
2400ad20:	ffff0000 	.word	0xffff0000
2400ad24:	2400d3cd 	.word	0x2400d3cd
2400ad28:	2400e56f 	.word	0x2400e56f
2400ad2c:	2400e841 	.word	0x2400e841
2400ad30:	80002000 	.word	0x80002000
2400ad34:	2400cf77 	.word	0x2400cf77

2400ad38 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400ad38:	b580      	push	{r7, lr}
2400ad3a:	b088      	sub	sp, #32
2400ad3c:	af02      	add	r7, sp, #8
2400ad3e:	60f8      	str	r0, [r7, #12]
2400ad40:	607a      	str	r2, [r7, #4]
2400ad42:	461a      	mov	r2, r3
2400ad44:	460b      	mov	r3, r1
2400ad46:	817b      	strh	r3, [r7, #10]
2400ad48:	4613      	mov	r3, r2
2400ad4a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ad4c:	68fb      	ldr	r3, [r7, #12]
2400ad4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ad52:	b2db      	uxtb	r3, r3
2400ad54:	2b20      	cmp	r3, #32
2400ad56:	f040 80cd 	bne.w	2400aef4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400ad5a:	68fb      	ldr	r3, [r7, #12]
2400ad5c:	681b      	ldr	r3, [r3, #0]
2400ad5e:	699b      	ldr	r3, [r3, #24]
2400ad60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ad64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ad68:	d101      	bne.n	2400ad6e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
2400ad6a:	2302      	movs	r3, #2
2400ad6c:	e0c3      	b.n	2400aef6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ad6e:	68fb      	ldr	r3, [r7, #12]
2400ad70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ad74:	2b01      	cmp	r3, #1
2400ad76:	d101      	bne.n	2400ad7c <HAL_I2C_Master_Receive_DMA+0x44>
2400ad78:	2302      	movs	r3, #2
2400ad7a:	e0bc      	b.n	2400aef6 <HAL_I2C_Master_Receive_DMA+0x1be>
2400ad7c:	68fb      	ldr	r3, [r7, #12]
2400ad7e:	2201      	movs	r2, #1
2400ad80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400ad84:	68fb      	ldr	r3, [r7, #12]
2400ad86:	2222      	movs	r2, #34	; 0x22
2400ad88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400ad8c:	68fb      	ldr	r3, [r7, #12]
2400ad8e:	2210      	movs	r2, #16
2400ad90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400ad94:	68fb      	ldr	r3, [r7, #12]
2400ad96:	2200      	movs	r2, #0
2400ad98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ad9a:	68fb      	ldr	r3, [r7, #12]
2400ad9c:	687a      	ldr	r2, [r7, #4]
2400ad9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400ada0:	68fb      	ldr	r3, [r7, #12]
2400ada2:	893a      	ldrh	r2, [r7, #8]
2400ada4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400ada6:	68fb      	ldr	r3, [r7, #12]
2400ada8:	4a55      	ldr	r2, [pc, #340]	; (2400af00 <HAL_I2C_Master_Receive_DMA+0x1c8>)
2400adaa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400adac:	68fb      	ldr	r3, [r7, #12]
2400adae:	4a55      	ldr	r2, [pc, #340]	; (2400af04 <HAL_I2C_Master_Receive_DMA+0x1cc>)
2400adb0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400adb2:	68fb      	ldr	r3, [r7, #12]
2400adb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400adb6:	b29b      	uxth	r3, r3
2400adb8:	2bff      	cmp	r3, #255	; 0xff
2400adba:	d906      	bls.n	2400adca <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400adbc:	68fb      	ldr	r3, [r7, #12]
2400adbe:	22ff      	movs	r2, #255	; 0xff
2400adc0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400adc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400adc6:	617b      	str	r3, [r7, #20]
2400adc8:	e007      	b.n	2400adda <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400adca:	68fb      	ldr	r3, [r7, #12]
2400adcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400adce:	b29a      	uxth	r2, r3
2400add0:	68fb      	ldr	r3, [r7, #12]
2400add2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400add4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400add8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400adda:	68fb      	ldr	r3, [r7, #12]
2400addc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400adde:	2b00      	cmp	r3, #0
2400ade0:	d070      	beq.n	2400aec4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
2400ade2:	68fb      	ldr	r3, [r7, #12]
2400ade4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ade6:	2b00      	cmp	r3, #0
2400ade8:	d020      	beq.n	2400ae2c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400adea:	68fb      	ldr	r3, [r7, #12]
2400adec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400adee:	4a46      	ldr	r2, [pc, #280]	; (2400af08 <HAL_I2C_Master_Receive_DMA+0x1d0>)
2400adf0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400adf2:	68fb      	ldr	r3, [r7, #12]
2400adf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400adf6:	4a45      	ldr	r2, [pc, #276]	; (2400af0c <HAL_I2C_Master_Receive_DMA+0x1d4>)
2400adf8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400adfa:	68fb      	ldr	r3, [r7, #12]
2400adfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400adfe:	2200      	movs	r2, #0
2400ae00:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400ae02:	68fb      	ldr	r3, [r7, #12]
2400ae04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ae06:	2200      	movs	r2, #0
2400ae08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400ae0a:	68fb      	ldr	r3, [r7, #12]
2400ae0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400ae0e:	68fb      	ldr	r3, [r7, #12]
2400ae10:	681b      	ldr	r3, [r3, #0]
2400ae12:	3324      	adds	r3, #36	; 0x24
2400ae14:	4619      	mov	r1, r3
2400ae16:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400ae18:	68fb      	ldr	r3, [r7, #12]
2400ae1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400ae1c:	f7f8 ff88 	bl	24003d30 <HAL_DMA_Start_IT>
2400ae20:	4603      	mov	r3, r0
2400ae22:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400ae24:	7cfb      	ldrb	r3, [r7, #19]
2400ae26:	2b00      	cmp	r3, #0
2400ae28:	d138      	bne.n	2400ae9c <HAL_I2C_Master_Receive_DMA+0x164>
2400ae2a:	e013      	b.n	2400ae54 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400ae2c:	68fb      	ldr	r3, [r7, #12]
2400ae2e:	2220      	movs	r2, #32
2400ae30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400ae34:	68fb      	ldr	r3, [r7, #12]
2400ae36:	2200      	movs	r2, #0
2400ae38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400ae3c:	68fb      	ldr	r3, [r7, #12]
2400ae3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ae40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400ae44:	68fb      	ldr	r3, [r7, #12]
2400ae46:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400ae48:	68fb      	ldr	r3, [r7, #12]
2400ae4a:	2200      	movs	r2, #0
2400ae4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400ae50:	2301      	movs	r3, #1
2400ae52:	e050      	b.n	2400aef6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400ae54:	68fb      	ldr	r3, [r7, #12]
2400ae56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ae58:	b2da      	uxtb	r2, r3
2400ae5a:	8979      	ldrh	r1, [r7, #10]
2400ae5c:	4b2c      	ldr	r3, [pc, #176]	; (2400af10 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400ae5e:	9300      	str	r3, [sp, #0]
2400ae60:	697b      	ldr	r3, [r7, #20]
2400ae62:	68f8      	ldr	r0, [r7, #12]
2400ae64:	f004 f866 	bl	2400ef34 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400ae68:	68fb      	ldr	r3, [r7, #12]
2400ae6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ae6c:	b29a      	uxth	r2, r3
2400ae6e:	68fb      	ldr	r3, [r7, #12]
2400ae70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ae72:	1ad3      	subs	r3, r2, r3
2400ae74:	b29a      	uxth	r2, r3
2400ae76:	68fb      	ldr	r3, [r7, #12]
2400ae78:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400ae7a:	68fb      	ldr	r3, [r7, #12]
2400ae7c:	2200      	movs	r2, #0
2400ae7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400ae82:	2110      	movs	r1, #16
2400ae84:	68f8      	ldr	r0, [r7, #12]
2400ae86:	f004 f887 	bl	2400ef98 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400ae8a:	68fb      	ldr	r3, [r7, #12]
2400ae8c:	681b      	ldr	r3, [r3, #0]
2400ae8e:	681a      	ldr	r2, [r3, #0]
2400ae90:	68fb      	ldr	r3, [r7, #12]
2400ae92:	681b      	ldr	r3, [r3, #0]
2400ae94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400ae98:	601a      	str	r2, [r3, #0]
2400ae9a:	e029      	b.n	2400aef0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400ae9c:	68fb      	ldr	r3, [r7, #12]
2400ae9e:	2220      	movs	r2, #32
2400aea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400aea4:	68fb      	ldr	r3, [r7, #12]
2400aea6:	2200      	movs	r2, #0
2400aea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400aeac:	68fb      	ldr	r3, [r7, #12]
2400aeae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400aeb0:	f043 0210 	orr.w	r2, r3, #16
2400aeb4:	68fb      	ldr	r3, [r7, #12]
2400aeb6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400aeb8:	68fb      	ldr	r3, [r7, #12]
2400aeba:	2200      	movs	r2, #0
2400aebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400aec0:	2301      	movs	r3, #1
2400aec2:	e018      	b.n	2400aef6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400aec4:	68fb      	ldr	r3, [r7, #12]
2400aec6:	4a13      	ldr	r2, [pc, #76]	; (2400af14 <HAL_I2C_Master_Receive_DMA+0x1dc>)
2400aec8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400aeca:	68fb      	ldr	r3, [r7, #12]
2400aecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400aece:	b2da      	uxtb	r2, r3
2400aed0:	8979      	ldrh	r1, [r7, #10]
2400aed2:	4b0f      	ldr	r3, [pc, #60]	; (2400af10 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400aed4:	9300      	str	r3, [sp, #0]
2400aed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400aeda:	68f8      	ldr	r0, [r7, #12]
2400aedc:	f004 f82a 	bl	2400ef34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400aee0:	68fb      	ldr	r3, [r7, #12]
2400aee2:	2200      	movs	r2, #0
2400aee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400aee8:	2101      	movs	r1, #1
2400aeea:	68f8      	ldr	r0, [r7, #12]
2400aeec:	f004 f854 	bl	2400ef98 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400aef0:	2300      	movs	r3, #0
2400aef2:	e000      	b.n	2400aef6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400aef4:	2302      	movs	r3, #2
  }
}
2400aef6:	4618      	mov	r0, r3
2400aef8:	3718      	adds	r7, #24
2400aefa:	46bd      	mov	sp, r7
2400aefc:	bd80      	pop	{r7, pc}
2400aefe:	bf00      	nop
2400af00:	ffff0000 	.word	0xffff0000
2400af04:	2400d3cd 	.word	0x2400d3cd
2400af08:	2400e645 	.word	0x2400e645
2400af0c:	2400e841 	.word	0x2400e841
2400af10:	80002400 	.word	0x80002400
2400af14:	2400cf77 	.word	0x2400cf77

2400af18 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400af18:	b580      	push	{r7, lr}
2400af1a:	b086      	sub	sp, #24
2400af1c:	af00      	add	r7, sp, #0
2400af1e:	60f8      	str	r0, [r7, #12]
2400af20:	60b9      	str	r1, [r7, #8]
2400af22:	4613      	mov	r3, r2
2400af24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400af26:	68fb      	ldr	r3, [r7, #12]
2400af28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400af2c:	b2db      	uxtb	r3, r3
2400af2e:	2b20      	cmp	r3, #32
2400af30:	f040 809b 	bne.w	2400b06a <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400af34:	68bb      	ldr	r3, [r7, #8]
2400af36:	2b00      	cmp	r3, #0
2400af38:	d002      	beq.n	2400af40 <HAL_I2C_Slave_Transmit_DMA+0x28>
2400af3a:	88fb      	ldrh	r3, [r7, #6]
2400af3c:	2b00      	cmp	r3, #0
2400af3e:	d105      	bne.n	2400af4c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400af40:	68fb      	ldr	r3, [r7, #12]
2400af42:	f44f 7200 	mov.w	r2, #512	; 0x200
2400af46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400af48:	2301      	movs	r3, #1
2400af4a:	e08f      	b.n	2400b06c <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400af4c:	68fb      	ldr	r3, [r7, #12]
2400af4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400af52:	2b01      	cmp	r3, #1
2400af54:	d101      	bne.n	2400af5a <HAL_I2C_Slave_Transmit_DMA+0x42>
2400af56:	2302      	movs	r3, #2
2400af58:	e088      	b.n	2400b06c <HAL_I2C_Slave_Transmit_DMA+0x154>
2400af5a:	68fb      	ldr	r3, [r7, #12]
2400af5c:	2201      	movs	r2, #1
2400af5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400af62:	68fb      	ldr	r3, [r7, #12]
2400af64:	2221      	movs	r2, #33	; 0x21
2400af66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400af6a:	68fb      	ldr	r3, [r7, #12]
2400af6c:	2220      	movs	r2, #32
2400af6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400af72:	68fb      	ldr	r3, [r7, #12]
2400af74:	2200      	movs	r2, #0
2400af76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400af78:	68fb      	ldr	r3, [r7, #12]
2400af7a:	68ba      	ldr	r2, [r7, #8]
2400af7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400af7e:	68fb      	ldr	r3, [r7, #12]
2400af80:	88fa      	ldrh	r2, [r7, #6]
2400af82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400af84:	68fb      	ldr	r3, [r7, #12]
2400af86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400af88:	b29a      	uxth	r2, r3
2400af8a:	68fb      	ldr	r3, [r7, #12]
2400af8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400af8e:	68fb      	ldr	r3, [r7, #12]
2400af90:	4a38      	ldr	r2, [pc, #224]	; (2400b074 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
2400af92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400af94:	68fb      	ldr	r3, [r7, #12]
2400af96:	4a38      	ldr	r2, [pc, #224]	; (2400b078 <HAL_I2C_Slave_Transmit_DMA+0x160>)
2400af98:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
2400af9a:	68fb      	ldr	r3, [r7, #12]
2400af9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400af9e:	2b00      	cmp	r3, #0
2400afa0:	d020      	beq.n	2400afe4 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400afa2:	68fb      	ldr	r3, [r7, #12]
2400afa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400afa6:	4a35      	ldr	r2, [pc, #212]	; (2400b07c <HAL_I2C_Slave_Transmit_DMA+0x164>)
2400afa8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400afaa:	68fb      	ldr	r3, [r7, #12]
2400afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400afae:	4a34      	ldr	r2, [pc, #208]	; (2400b080 <HAL_I2C_Slave_Transmit_DMA+0x168>)
2400afb0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400afb2:	68fb      	ldr	r3, [r7, #12]
2400afb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400afb6:	2200      	movs	r2, #0
2400afb8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400afba:	68fb      	ldr	r3, [r7, #12]
2400afbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400afbe:	2200      	movs	r2, #0
2400afc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400afc2:	68fb      	ldr	r3, [r7, #12]
2400afc4:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400afc6:	68b9      	ldr	r1, [r7, #8]
2400afc8:	68fb      	ldr	r3, [r7, #12]
2400afca:	681b      	ldr	r3, [r3, #0]
2400afcc:	3328      	adds	r3, #40	; 0x28
2400afce:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400afd0:	68fb      	ldr	r3, [r7, #12]
2400afd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400afd4:	f7f8 feac 	bl	24003d30 <HAL_DMA_Start_IT>
2400afd8:	4603      	mov	r3, r0
2400afda:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400afdc:	7dfb      	ldrb	r3, [r7, #23]
2400afde:	2b00      	cmp	r3, #0
2400afe0:	d12f      	bne.n	2400b042 <HAL_I2C_Slave_Transmit_DMA+0x12a>
2400afe2:	e013      	b.n	2400b00c <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400afe4:	68fb      	ldr	r3, [r7, #12]
2400afe6:	2228      	movs	r2, #40	; 0x28
2400afe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400afec:	68fb      	ldr	r3, [r7, #12]
2400afee:	2200      	movs	r2, #0
2400aff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400aff4:	68fb      	ldr	r3, [r7, #12]
2400aff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400aff8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400affc:	68fb      	ldr	r3, [r7, #12]
2400affe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b000:	68fb      	ldr	r3, [r7, #12]
2400b002:	2200      	movs	r2, #0
2400b004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b008:	2301      	movs	r3, #1
2400b00a:	e02f      	b.n	2400b06c <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b00c:	68fb      	ldr	r3, [r7, #12]
2400b00e:	681b      	ldr	r3, [r3, #0]
2400b010:	685a      	ldr	r2, [r3, #4]
2400b012:	68fb      	ldr	r3, [r7, #12]
2400b014:	681b      	ldr	r3, [r3, #0]
2400b016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b01a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b01c:	68fb      	ldr	r3, [r7, #12]
2400b01e:	2200      	movs	r2, #0
2400b020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400b024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b028:	68f8      	ldr	r0, [r7, #12]
2400b02a:	f003 ffb5 	bl	2400ef98 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400b02e:	68fb      	ldr	r3, [r7, #12]
2400b030:	681b      	ldr	r3, [r3, #0]
2400b032:	681a      	ldr	r2, [r3, #0]
2400b034:	68fb      	ldr	r3, [r7, #12]
2400b036:	681b      	ldr	r3, [r3, #0]
2400b038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400b03c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400b03e:	2300      	movs	r3, #0
2400b040:	e014      	b.n	2400b06c <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b042:	68fb      	ldr	r3, [r7, #12]
2400b044:	2228      	movs	r2, #40	; 0x28
2400b046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b04a:	68fb      	ldr	r3, [r7, #12]
2400b04c:	2200      	movs	r2, #0
2400b04e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400b052:	68fb      	ldr	r3, [r7, #12]
2400b054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b056:	f043 0210 	orr.w	r2, r3, #16
2400b05a:	68fb      	ldr	r3, [r7, #12]
2400b05c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b05e:	68fb      	ldr	r3, [r7, #12]
2400b060:	2200      	movs	r2, #0
2400b062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b066:	2301      	movs	r3, #1
2400b068:	e000      	b.n	2400b06c <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2400b06a:	2302      	movs	r3, #2
  }
}
2400b06c:	4618      	mov	r0, r3
2400b06e:	3718      	adds	r7, #24
2400b070:	46bd      	mov	sp, r7
2400b072:	bd80      	pop	{r7, pc}
2400b074:	ffff0000 	.word	0xffff0000
2400b078:	2400d5b5 	.word	0x2400d5b5
2400b07c:	2400e605 	.word	0x2400e605
2400b080:	2400e841 	.word	0x2400e841

2400b084 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400b084:	b580      	push	{r7, lr}
2400b086:	b086      	sub	sp, #24
2400b088:	af00      	add	r7, sp, #0
2400b08a:	60f8      	str	r0, [r7, #12]
2400b08c:	60b9      	str	r1, [r7, #8]
2400b08e:	4613      	mov	r3, r2
2400b090:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b092:	68fb      	ldr	r3, [r7, #12]
2400b094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b098:	b2db      	uxtb	r3, r3
2400b09a:	2b20      	cmp	r3, #32
2400b09c:	f040 809b 	bne.w	2400b1d6 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400b0a0:	68bb      	ldr	r3, [r7, #8]
2400b0a2:	2b00      	cmp	r3, #0
2400b0a4:	d002      	beq.n	2400b0ac <HAL_I2C_Slave_Receive_DMA+0x28>
2400b0a6:	88fb      	ldrh	r3, [r7, #6]
2400b0a8:	2b00      	cmp	r3, #0
2400b0aa:	d105      	bne.n	2400b0b8 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b0ac:	68fb      	ldr	r3, [r7, #12]
2400b0ae:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b0b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b0b4:	2301      	movs	r3, #1
2400b0b6:	e08f      	b.n	2400b1d8 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b0b8:	68fb      	ldr	r3, [r7, #12]
2400b0ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b0be:	2b01      	cmp	r3, #1
2400b0c0:	d101      	bne.n	2400b0c6 <HAL_I2C_Slave_Receive_DMA+0x42>
2400b0c2:	2302      	movs	r3, #2
2400b0c4:	e088      	b.n	2400b1d8 <HAL_I2C_Slave_Receive_DMA+0x154>
2400b0c6:	68fb      	ldr	r3, [r7, #12]
2400b0c8:	2201      	movs	r2, #1
2400b0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b0ce:	68fb      	ldr	r3, [r7, #12]
2400b0d0:	2222      	movs	r2, #34	; 0x22
2400b0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400b0d6:	68fb      	ldr	r3, [r7, #12]
2400b0d8:	2220      	movs	r2, #32
2400b0da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b0de:	68fb      	ldr	r3, [r7, #12]
2400b0e0:	2200      	movs	r2, #0
2400b0e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b0e4:	68fb      	ldr	r3, [r7, #12]
2400b0e6:	68ba      	ldr	r2, [r7, #8]
2400b0e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b0ea:	68fb      	ldr	r3, [r7, #12]
2400b0ec:	88fa      	ldrh	r2, [r7, #6]
2400b0ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400b0f0:	68fb      	ldr	r3, [r7, #12]
2400b0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b0f4:	b29a      	uxth	r2, r3
2400b0f6:	68fb      	ldr	r3, [r7, #12]
2400b0f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b0fa:	68fb      	ldr	r3, [r7, #12]
2400b0fc:	4a38      	ldr	r2, [pc, #224]	; (2400b1e0 <HAL_I2C_Slave_Receive_DMA+0x15c>)
2400b0fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400b100:	68fb      	ldr	r3, [r7, #12]
2400b102:	4a38      	ldr	r2, [pc, #224]	; (2400b1e4 <HAL_I2C_Slave_Receive_DMA+0x160>)
2400b104:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
2400b106:	68fb      	ldr	r3, [r7, #12]
2400b108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b10a:	2b00      	cmp	r3, #0
2400b10c:	d020      	beq.n	2400b150 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400b10e:	68fb      	ldr	r3, [r7, #12]
2400b110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b112:	4a35      	ldr	r2, [pc, #212]	; (2400b1e8 <HAL_I2C_Slave_Receive_DMA+0x164>)
2400b114:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400b116:	68fb      	ldr	r3, [r7, #12]
2400b118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b11a:	4a34      	ldr	r2, [pc, #208]	; (2400b1ec <HAL_I2C_Slave_Receive_DMA+0x168>)
2400b11c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400b11e:	68fb      	ldr	r3, [r7, #12]
2400b120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b122:	2200      	movs	r2, #0
2400b124:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400b126:	68fb      	ldr	r3, [r7, #12]
2400b128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400b12a:	2200      	movs	r2, #0
2400b12c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400b12e:	68fb      	ldr	r3, [r7, #12]
2400b130:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400b132:	68fb      	ldr	r3, [r7, #12]
2400b134:	681b      	ldr	r3, [r3, #0]
2400b136:	3324      	adds	r3, #36	; 0x24
2400b138:	4619      	mov	r1, r3
2400b13a:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
2400b13c:	68fb      	ldr	r3, [r7, #12]
2400b13e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400b140:	f7f8 fdf6 	bl	24003d30 <HAL_DMA_Start_IT>
2400b144:	4603      	mov	r3, r0
2400b146:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400b148:	7dfb      	ldrb	r3, [r7, #23]
2400b14a:	2b00      	cmp	r3, #0
2400b14c:	d12f      	bne.n	2400b1ae <HAL_I2C_Slave_Receive_DMA+0x12a>
2400b14e:	e013      	b.n	2400b178 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b150:	68fb      	ldr	r3, [r7, #12]
2400b152:	2228      	movs	r2, #40	; 0x28
2400b154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b158:	68fb      	ldr	r3, [r7, #12]
2400b15a:	2200      	movs	r2, #0
2400b15c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400b160:	68fb      	ldr	r3, [r7, #12]
2400b162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b164:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400b168:	68fb      	ldr	r3, [r7, #12]
2400b16a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b16c:	68fb      	ldr	r3, [r7, #12]
2400b16e:	2200      	movs	r2, #0
2400b170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b174:	2301      	movs	r3, #1
2400b176:	e02f      	b.n	2400b1d8 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b178:	68fb      	ldr	r3, [r7, #12]
2400b17a:	681b      	ldr	r3, [r3, #0]
2400b17c:	685a      	ldr	r2, [r3, #4]
2400b17e:	68fb      	ldr	r3, [r7, #12]
2400b180:	681b      	ldr	r3, [r3, #0]
2400b182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400b186:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b188:	68fb      	ldr	r3, [r7, #12]
2400b18a:	2200      	movs	r2, #0
2400b18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400b190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b194:	68f8      	ldr	r0, [r7, #12]
2400b196:	f003 feff 	bl	2400ef98 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400b19a:	68fb      	ldr	r3, [r7, #12]
2400b19c:	681b      	ldr	r3, [r3, #0]
2400b19e:	681a      	ldr	r2, [r3, #0]
2400b1a0:	68fb      	ldr	r3, [r7, #12]
2400b1a2:	681b      	ldr	r3, [r3, #0]
2400b1a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400b1a8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400b1aa:	2300      	movs	r3, #0
2400b1ac:	e014      	b.n	2400b1d8 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400b1ae:	68fb      	ldr	r3, [r7, #12]
2400b1b0:	2228      	movs	r2, #40	; 0x28
2400b1b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b1b6:	68fb      	ldr	r3, [r7, #12]
2400b1b8:	2200      	movs	r2, #0
2400b1ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400b1be:	68fb      	ldr	r3, [r7, #12]
2400b1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b1c2:	f043 0210 	orr.w	r2, r3, #16
2400b1c6:	68fb      	ldr	r3, [r7, #12]
2400b1c8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b1ca:	68fb      	ldr	r3, [r7, #12]
2400b1cc:	2200      	movs	r2, #0
2400b1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b1d2:	2301      	movs	r3, #1
2400b1d4:	e000      	b.n	2400b1d8 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2400b1d6:	2302      	movs	r3, #2
  }
}
2400b1d8:	4618      	mov	r0, r3
2400b1da:	3718      	adds	r7, #24
2400b1dc:	46bd      	mov	sp, r7
2400b1de:	bd80      	pop	{r7, pc}
2400b1e0:	ffff0000 	.word	0xffff0000
2400b1e4:	2400d5b5 	.word	0x2400d5b5
2400b1e8:	2400e6dd 	.word	0x2400e6dd
2400b1ec:	2400e841 	.word	0x2400e841

2400b1f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400b1f0:	b580      	push	{r7, lr}
2400b1f2:	b088      	sub	sp, #32
2400b1f4:	af02      	add	r7, sp, #8
2400b1f6:	60f8      	str	r0, [r7, #12]
2400b1f8:	4608      	mov	r0, r1
2400b1fa:	4611      	mov	r1, r2
2400b1fc:	461a      	mov	r2, r3
2400b1fe:	4603      	mov	r3, r0
2400b200:	817b      	strh	r3, [r7, #10]
2400b202:	460b      	mov	r3, r1
2400b204:	813b      	strh	r3, [r7, #8]
2400b206:	4613      	mov	r3, r2
2400b208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b20a:	68fb      	ldr	r3, [r7, #12]
2400b20c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b210:	b2db      	uxtb	r3, r3
2400b212:	2b20      	cmp	r3, #32
2400b214:	f040 80f9 	bne.w	2400b40a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
2400b218:	6a3b      	ldr	r3, [r7, #32]
2400b21a:	2b00      	cmp	r3, #0
2400b21c:	d002      	beq.n	2400b224 <HAL_I2C_Mem_Write+0x34>
2400b21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b220:	2b00      	cmp	r3, #0
2400b222:	d105      	bne.n	2400b230 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b224:	68fb      	ldr	r3, [r7, #12]
2400b226:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b22a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b22c:	2301      	movs	r3, #1
2400b22e:	e0ed      	b.n	2400b40c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b230:	68fb      	ldr	r3, [r7, #12]
2400b232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b236:	2b01      	cmp	r3, #1
2400b238:	d101      	bne.n	2400b23e <HAL_I2C_Mem_Write+0x4e>
2400b23a:	2302      	movs	r3, #2
2400b23c:	e0e6      	b.n	2400b40c <HAL_I2C_Mem_Write+0x21c>
2400b23e:	68fb      	ldr	r3, [r7, #12]
2400b240:	2201      	movs	r2, #1
2400b242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b246:	f7f6 ffd9 	bl	240021fc <HAL_GetTick>
2400b24a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400b24c:	697b      	ldr	r3, [r7, #20]
2400b24e:	9300      	str	r3, [sp, #0]
2400b250:	2319      	movs	r3, #25
2400b252:	2201      	movs	r2, #1
2400b254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b258:	68f8      	ldr	r0, [r7, #12]
2400b25a:	f003 fc49 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400b25e:	4603      	mov	r3, r0
2400b260:	2b00      	cmp	r3, #0
2400b262:	d001      	beq.n	2400b268 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
2400b264:	2301      	movs	r3, #1
2400b266:	e0d1      	b.n	2400b40c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400b268:	68fb      	ldr	r3, [r7, #12]
2400b26a:	2221      	movs	r2, #33	; 0x21
2400b26c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400b270:	68fb      	ldr	r3, [r7, #12]
2400b272:	2240      	movs	r2, #64	; 0x40
2400b274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b278:	68fb      	ldr	r3, [r7, #12]
2400b27a:	2200      	movs	r2, #0
2400b27c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400b27e:	68fb      	ldr	r3, [r7, #12]
2400b280:	6a3a      	ldr	r2, [r7, #32]
2400b282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400b284:	68fb      	ldr	r3, [r7, #12]
2400b286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400b288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400b28a:	68fb      	ldr	r3, [r7, #12]
2400b28c:	2200      	movs	r2, #0
2400b28e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400b290:	88f8      	ldrh	r0, [r7, #6]
2400b292:	893a      	ldrh	r2, [r7, #8]
2400b294:	8979      	ldrh	r1, [r7, #10]
2400b296:	697b      	ldr	r3, [r7, #20]
2400b298:	9301      	str	r3, [sp, #4]
2400b29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b29c:	9300      	str	r3, [sp, #0]
2400b29e:	4603      	mov	r3, r0
2400b2a0:	68f8      	ldr	r0, [r7, #12]
2400b2a2:	f002 fb69 	bl	2400d978 <I2C_RequestMemoryWrite>
2400b2a6:	4603      	mov	r3, r0
2400b2a8:	2b00      	cmp	r3, #0
2400b2aa:	d005      	beq.n	2400b2b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b2ac:	68fb      	ldr	r3, [r7, #12]
2400b2ae:	2200      	movs	r2, #0
2400b2b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b2b4:	2301      	movs	r3, #1
2400b2b6:	e0a9      	b.n	2400b40c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b2b8:	68fb      	ldr	r3, [r7, #12]
2400b2ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b2bc:	b29b      	uxth	r3, r3
2400b2be:	2bff      	cmp	r3, #255	; 0xff
2400b2c0:	d90e      	bls.n	2400b2e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b2c2:	68fb      	ldr	r3, [r7, #12]
2400b2c4:	22ff      	movs	r2, #255	; 0xff
2400b2c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400b2c8:	68fb      	ldr	r3, [r7, #12]
2400b2ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b2cc:	b2da      	uxtb	r2, r3
2400b2ce:	8979      	ldrh	r1, [r7, #10]
2400b2d0:	2300      	movs	r3, #0
2400b2d2:	9300      	str	r3, [sp, #0]
2400b2d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b2d8:	68f8      	ldr	r0, [r7, #12]
2400b2da:	f003 fe2b 	bl	2400ef34 <I2C_TransferConfig>
2400b2de:	e00f      	b.n	2400b300 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b2e0:	68fb      	ldr	r3, [r7, #12]
2400b2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b2e4:	b29a      	uxth	r2, r3
2400b2e6:	68fb      	ldr	r3, [r7, #12]
2400b2e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
2400b2ea:	68fb      	ldr	r3, [r7, #12]
2400b2ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b2ee:	b2da      	uxtb	r2, r3
2400b2f0:	8979      	ldrh	r1, [r7, #10]
2400b2f2:	2300      	movs	r3, #0
2400b2f4:	9300      	str	r3, [sp, #0]
2400b2f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b2fa:	68f8      	ldr	r0, [r7, #12]
2400b2fc:	f003 fe1a 	bl	2400ef34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b300:	697a      	ldr	r2, [r7, #20]
2400b302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400b304:	68f8      	ldr	r0, [r7, #12]
2400b306:	f003 fc33 	bl	2400eb70 <I2C_WaitOnTXISFlagUntilTimeout>
2400b30a:	4603      	mov	r3, r0
2400b30c:	2b00      	cmp	r3, #0
2400b30e:	d001      	beq.n	2400b314 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
2400b310:	2301      	movs	r3, #1
2400b312:	e07b      	b.n	2400b40c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400b314:	68fb      	ldr	r3, [r7, #12]
2400b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b318:	781a      	ldrb	r2, [r3, #0]
2400b31a:	68fb      	ldr	r3, [r7, #12]
2400b31c:	681b      	ldr	r3, [r3, #0]
2400b31e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b320:	68fb      	ldr	r3, [r7, #12]
2400b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b324:	1c5a      	adds	r2, r3, #1
2400b326:	68fb      	ldr	r3, [r7, #12]
2400b328:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400b32a:	68fb      	ldr	r3, [r7, #12]
2400b32c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b32e:	b29b      	uxth	r3, r3
2400b330:	3b01      	subs	r3, #1
2400b332:	b29a      	uxth	r2, r3
2400b334:	68fb      	ldr	r3, [r7, #12]
2400b336:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400b338:	68fb      	ldr	r3, [r7, #12]
2400b33a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b33c:	3b01      	subs	r3, #1
2400b33e:	b29a      	uxth	r2, r3
2400b340:	68fb      	ldr	r3, [r7, #12]
2400b342:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400b344:	68fb      	ldr	r3, [r7, #12]
2400b346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b348:	b29b      	uxth	r3, r3
2400b34a:	2b00      	cmp	r3, #0
2400b34c:	d034      	beq.n	2400b3b8 <HAL_I2C_Mem_Write+0x1c8>
2400b34e:	68fb      	ldr	r3, [r7, #12]
2400b350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b352:	2b00      	cmp	r3, #0
2400b354:	d130      	bne.n	2400b3b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400b356:	697b      	ldr	r3, [r7, #20]
2400b358:	9300      	str	r3, [sp, #0]
2400b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b35c:	2200      	movs	r2, #0
2400b35e:	2180      	movs	r1, #128	; 0x80
2400b360:	68f8      	ldr	r0, [r7, #12]
2400b362:	f003 fbc5 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400b366:	4603      	mov	r3, r0
2400b368:	2b00      	cmp	r3, #0
2400b36a:	d001      	beq.n	2400b370 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
2400b36c:	2301      	movs	r3, #1
2400b36e:	e04d      	b.n	2400b40c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b370:	68fb      	ldr	r3, [r7, #12]
2400b372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b374:	b29b      	uxth	r3, r3
2400b376:	2bff      	cmp	r3, #255	; 0xff
2400b378:	d90e      	bls.n	2400b398 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400b37a:	68fb      	ldr	r3, [r7, #12]
2400b37c:	22ff      	movs	r2, #255	; 0xff
2400b37e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b380:	68fb      	ldr	r3, [r7, #12]
2400b382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b384:	b2da      	uxtb	r2, r3
2400b386:	8979      	ldrh	r1, [r7, #10]
2400b388:	2300      	movs	r3, #0
2400b38a:	9300      	str	r3, [sp, #0]
2400b38c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b390:	68f8      	ldr	r0, [r7, #12]
2400b392:	f003 fdcf 	bl	2400ef34 <I2C_TransferConfig>
2400b396:	e00f      	b.n	2400b3b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400b398:	68fb      	ldr	r3, [r7, #12]
2400b39a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b39c:	b29a      	uxth	r2, r3
2400b39e:	68fb      	ldr	r3, [r7, #12]
2400b3a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b3a2:	68fb      	ldr	r3, [r7, #12]
2400b3a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b3a6:	b2da      	uxtb	r2, r3
2400b3a8:	8979      	ldrh	r1, [r7, #10]
2400b3aa:	2300      	movs	r3, #0
2400b3ac:	9300      	str	r3, [sp, #0]
2400b3ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b3b2:	68f8      	ldr	r0, [r7, #12]
2400b3b4:	f003 fdbe 	bl	2400ef34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
2400b3b8:	68fb      	ldr	r3, [r7, #12]
2400b3ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b3bc:	b29b      	uxth	r3, r3
2400b3be:	2b00      	cmp	r3, #0
2400b3c0:	d19e      	bne.n	2400b300 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b3c2:	697a      	ldr	r2, [r7, #20]
2400b3c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400b3c6:	68f8      	ldr	r0, [r7, #12]
2400b3c8:	f003 fc12 	bl	2400ebf0 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b3cc:	4603      	mov	r3, r0
2400b3ce:	2b00      	cmp	r3, #0
2400b3d0:	d001      	beq.n	2400b3d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
2400b3d2:	2301      	movs	r3, #1
2400b3d4:	e01a      	b.n	2400b40c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b3d6:	68fb      	ldr	r3, [r7, #12]
2400b3d8:	681b      	ldr	r3, [r3, #0]
2400b3da:	2220      	movs	r2, #32
2400b3dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400b3de:	68fb      	ldr	r3, [r7, #12]
2400b3e0:	681b      	ldr	r3, [r3, #0]
2400b3e2:	6859      	ldr	r1, [r3, #4]
2400b3e4:	68fb      	ldr	r3, [r7, #12]
2400b3e6:	681a      	ldr	r2, [r3, #0]
2400b3e8:	4b0a      	ldr	r3, [pc, #40]	; (2400b414 <HAL_I2C_Mem_Write+0x224>)
2400b3ea:	400b      	ands	r3, r1
2400b3ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b3ee:	68fb      	ldr	r3, [r7, #12]
2400b3f0:	2220      	movs	r2, #32
2400b3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b3f6:	68fb      	ldr	r3, [r7, #12]
2400b3f8:	2200      	movs	r2, #0
2400b3fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b3fe:	68fb      	ldr	r3, [r7, #12]
2400b400:	2200      	movs	r2, #0
2400b402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400b406:	2300      	movs	r3, #0
2400b408:	e000      	b.n	2400b40c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
2400b40a:	2302      	movs	r3, #2
  }
}
2400b40c:	4618      	mov	r0, r3
2400b40e:	3718      	adds	r7, #24
2400b410:	46bd      	mov	sp, r7
2400b412:	bd80      	pop	{r7, pc}
2400b414:	fe00e800 	.word	0xfe00e800

2400b418 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400b418:	b580      	push	{r7, lr}
2400b41a:	b088      	sub	sp, #32
2400b41c:	af02      	add	r7, sp, #8
2400b41e:	60f8      	str	r0, [r7, #12]
2400b420:	4608      	mov	r0, r1
2400b422:	4611      	mov	r1, r2
2400b424:	461a      	mov	r2, r3
2400b426:	4603      	mov	r3, r0
2400b428:	817b      	strh	r3, [r7, #10]
2400b42a:	460b      	mov	r3, r1
2400b42c:	813b      	strh	r3, [r7, #8]
2400b42e:	4613      	mov	r3, r2
2400b430:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b432:	68fb      	ldr	r3, [r7, #12]
2400b434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b438:	b2db      	uxtb	r3, r3
2400b43a:	2b20      	cmp	r3, #32
2400b43c:	f040 80fd 	bne.w	2400b63a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
2400b440:	6a3b      	ldr	r3, [r7, #32]
2400b442:	2b00      	cmp	r3, #0
2400b444:	d002      	beq.n	2400b44c <HAL_I2C_Mem_Read+0x34>
2400b446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b448:	2b00      	cmp	r3, #0
2400b44a:	d105      	bne.n	2400b458 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b44c:	68fb      	ldr	r3, [r7, #12]
2400b44e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b452:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b454:	2301      	movs	r3, #1
2400b456:	e0f1      	b.n	2400b63c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b458:	68fb      	ldr	r3, [r7, #12]
2400b45a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b45e:	2b01      	cmp	r3, #1
2400b460:	d101      	bne.n	2400b466 <HAL_I2C_Mem_Read+0x4e>
2400b462:	2302      	movs	r3, #2
2400b464:	e0ea      	b.n	2400b63c <HAL_I2C_Mem_Read+0x224>
2400b466:	68fb      	ldr	r3, [r7, #12]
2400b468:	2201      	movs	r2, #1
2400b46a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b46e:	f7f6 fec5 	bl	240021fc <HAL_GetTick>
2400b472:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400b474:	697b      	ldr	r3, [r7, #20]
2400b476:	9300      	str	r3, [sp, #0]
2400b478:	2319      	movs	r3, #25
2400b47a:	2201      	movs	r2, #1
2400b47c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400b480:	68f8      	ldr	r0, [r7, #12]
2400b482:	f003 fb35 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400b486:	4603      	mov	r3, r0
2400b488:	2b00      	cmp	r3, #0
2400b48a:	d001      	beq.n	2400b490 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
2400b48c:	2301      	movs	r3, #1
2400b48e:	e0d5      	b.n	2400b63c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400b490:	68fb      	ldr	r3, [r7, #12]
2400b492:	2222      	movs	r2, #34	; 0x22
2400b494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400b498:	68fb      	ldr	r3, [r7, #12]
2400b49a:	2240      	movs	r2, #64	; 0x40
2400b49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b4a0:	68fb      	ldr	r3, [r7, #12]
2400b4a2:	2200      	movs	r2, #0
2400b4a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400b4a6:	68fb      	ldr	r3, [r7, #12]
2400b4a8:	6a3a      	ldr	r2, [r7, #32]
2400b4aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2400b4ac:	68fb      	ldr	r3, [r7, #12]
2400b4ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400b4b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2400b4b2:	68fb      	ldr	r3, [r7, #12]
2400b4b4:	2200      	movs	r2, #0
2400b4b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400b4b8:	88f8      	ldrh	r0, [r7, #6]
2400b4ba:	893a      	ldrh	r2, [r7, #8]
2400b4bc:	8979      	ldrh	r1, [r7, #10]
2400b4be:	697b      	ldr	r3, [r7, #20]
2400b4c0:	9301      	str	r3, [sp, #4]
2400b4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b4c4:	9300      	str	r3, [sp, #0]
2400b4c6:	4603      	mov	r3, r0
2400b4c8:	68f8      	ldr	r0, [r7, #12]
2400b4ca:	f002 faa9 	bl	2400da20 <I2C_RequestMemoryRead>
2400b4ce:	4603      	mov	r3, r0
2400b4d0:	2b00      	cmp	r3, #0
2400b4d2:	d005      	beq.n	2400b4e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b4d4:	68fb      	ldr	r3, [r7, #12]
2400b4d6:	2200      	movs	r2, #0
2400b4d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b4dc:	2301      	movs	r3, #1
2400b4de:	e0ad      	b.n	2400b63c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b4e0:	68fb      	ldr	r3, [r7, #12]
2400b4e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b4e4:	b29b      	uxth	r3, r3
2400b4e6:	2bff      	cmp	r3, #255	; 0xff
2400b4e8:	d90e      	bls.n	2400b508 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b4ea:	68fb      	ldr	r3, [r7, #12]
2400b4ec:	22ff      	movs	r2, #255	; 0xff
2400b4ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b4f0:	68fb      	ldr	r3, [r7, #12]
2400b4f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b4f4:	b2da      	uxtb	r2, r3
2400b4f6:	8979      	ldrh	r1, [r7, #10]
2400b4f8:	4b52      	ldr	r3, [pc, #328]	; (2400b644 <HAL_I2C_Mem_Read+0x22c>)
2400b4fa:	9300      	str	r3, [sp, #0]
2400b4fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b500:	68f8      	ldr	r0, [r7, #12]
2400b502:	f003 fd17 	bl	2400ef34 <I2C_TransferConfig>
2400b506:	e00f      	b.n	2400b528 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b508:	68fb      	ldr	r3, [r7, #12]
2400b50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b50c:	b29a      	uxth	r2, r3
2400b50e:	68fb      	ldr	r3, [r7, #12]
2400b510:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b512:	68fb      	ldr	r3, [r7, #12]
2400b514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b516:	b2da      	uxtb	r2, r3
2400b518:	8979      	ldrh	r1, [r7, #10]
2400b51a:	4b4a      	ldr	r3, [pc, #296]	; (2400b644 <HAL_I2C_Mem_Read+0x22c>)
2400b51c:	9300      	str	r3, [sp, #0]
2400b51e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b522:	68f8      	ldr	r0, [r7, #12]
2400b524:	f003 fd06 	bl	2400ef34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
2400b528:	697b      	ldr	r3, [r7, #20]
2400b52a:	9300      	str	r3, [sp, #0]
2400b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b52e:	2200      	movs	r2, #0
2400b530:	2104      	movs	r1, #4
2400b532:	68f8      	ldr	r0, [r7, #12]
2400b534:	f003 fadc 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400b538:	4603      	mov	r3, r0
2400b53a:	2b00      	cmp	r3, #0
2400b53c:	d001      	beq.n	2400b542 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
2400b53e:	2301      	movs	r3, #1
2400b540:	e07c      	b.n	2400b63c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400b542:	68fb      	ldr	r3, [r7, #12]
2400b544:	681b      	ldr	r3, [r3, #0]
2400b546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400b548:	68fb      	ldr	r3, [r7, #12]
2400b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b54c:	b2d2      	uxtb	r2, r2
2400b54e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b550:	68fb      	ldr	r3, [r7, #12]
2400b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400b554:	1c5a      	adds	r2, r3, #1
2400b556:	68fb      	ldr	r3, [r7, #12]
2400b558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400b55a:	68fb      	ldr	r3, [r7, #12]
2400b55c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b55e:	3b01      	subs	r3, #1
2400b560:	b29a      	uxth	r2, r3
2400b562:	68fb      	ldr	r3, [r7, #12]
2400b564:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400b566:	68fb      	ldr	r3, [r7, #12]
2400b568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b56a:	b29b      	uxth	r3, r3
2400b56c:	3b01      	subs	r3, #1
2400b56e:	b29a      	uxth	r2, r3
2400b570:	68fb      	ldr	r3, [r7, #12]
2400b572:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400b574:	68fb      	ldr	r3, [r7, #12]
2400b576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b578:	b29b      	uxth	r3, r3
2400b57a:	2b00      	cmp	r3, #0
2400b57c:	d034      	beq.n	2400b5e8 <HAL_I2C_Mem_Read+0x1d0>
2400b57e:	68fb      	ldr	r3, [r7, #12]
2400b580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b582:	2b00      	cmp	r3, #0
2400b584:	d130      	bne.n	2400b5e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400b586:	697b      	ldr	r3, [r7, #20]
2400b588:	9300      	str	r3, [sp, #0]
2400b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b58c:	2200      	movs	r2, #0
2400b58e:	2180      	movs	r1, #128	; 0x80
2400b590:	68f8      	ldr	r0, [r7, #12]
2400b592:	f003 faad 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400b596:	4603      	mov	r3, r0
2400b598:	2b00      	cmp	r3, #0
2400b59a:	d001      	beq.n	2400b5a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
2400b59c:	2301      	movs	r3, #1
2400b59e:	e04d      	b.n	2400b63c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b5a0:	68fb      	ldr	r3, [r7, #12]
2400b5a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b5a4:	b29b      	uxth	r3, r3
2400b5a6:	2bff      	cmp	r3, #255	; 0xff
2400b5a8:	d90e      	bls.n	2400b5c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400b5aa:	68fb      	ldr	r3, [r7, #12]
2400b5ac:	22ff      	movs	r2, #255	; 0xff
2400b5ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
2400b5b0:	68fb      	ldr	r3, [r7, #12]
2400b5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b5b4:	b2da      	uxtb	r2, r3
2400b5b6:	8979      	ldrh	r1, [r7, #10]
2400b5b8:	2300      	movs	r3, #0
2400b5ba:	9300      	str	r3, [sp, #0]
2400b5bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b5c0:	68f8      	ldr	r0, [r7, #12]
2400b5c2:	f003 fcb7 	bl	2400ef34 <I2C_TransferConfig>
2400b5c6:	e00f      	b.n	2400b5e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400b5c8:	68fb      	ldr	r3, [r7, #12]
2400b5ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b5cc:	b29a      	uxth	r2, r3
2400b5ce:	68fb      	ldr	r3, [r7, #12]
2400b5d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b5d2:	68fb      	ldr	r3, [r7, #12]
2400b5d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b5d6:	b2da      	uxtb	r2, r3
2400b5d8:	8979      	ldrh	r1, [r7, #10]
2400b5da:	2300      	movs	r3, #0
2400b5dc:	9300      	str	r3, [sp, #0]
2400b5de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b5e2:	68f8      	ldr	r0, [r7, #12]
2400b5e4:	f003 fca6 	bl	2400ef34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
2400b5e8:	68fb      	ldr	r3, [r7, #12]
2400b5ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b5ec:	b29b      	uxth	r3, r3
2400b5ee:	2b00      	cmp	r3, #0
2400b5f0:	d19a      	bne.n	2400b528 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b5f2:	697a      	ldr	r2, [r7, #20]
2400b5f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400b5f6:	68f8      	ldr	r0, [r7, #12]
2400b5f8:	f003 fafa 	bl	2400ebf0 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b5fc:	4603      	mov	r3, r0
2400b5fe:	2b00      	cmp	r3, #0
2400b600:	d001      	beq.n	2400b606 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
2400b602:	2301      	movs	r3, #1
2400b604:	e01a      	b.n	2400b63c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b606:	68fb      	ldr	r3, [r7, #12]
2400b608:	681b      	ldr	r3, [r3, #0]
2400b60a:	2220      	movs	r2, #32
2400b60c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400b60e:	68fb      	ldr	r3, [r7, #12]
2400b610:	681b      	ldr	r3, [r3, #0]
2400b612:	6859      	ldr	r1, [r3, #4]
2400b614:	68fb      	ldr	r3, [r7, #12]
2400b616:	681a      	ldr	r2, [r3, #0]
2400b618:	4b0b      	ldr	r3, [pc, #44]	; (2400b648 <HAL_I2C_Mem_Read+0x230>)
2400b61a:	400b      	ands	r3, r1
2400b61c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b61e:	68fb      	ldr	r3, [r7, #12]
2400b620:	2220      	movs	r2, #32
2400b622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b626:	68fb      	ldr	r3, [r7, #12]
2400b628:	2200      	movs	r2, #0
2400b62a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b62e:	68fb      	ldr	r3, [r7, #12]
2400b630:	2200      	movs	r2, #0
2400b632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400b636:	2300      	movs	r3, #0
2400b638:	e000      	b.n	2400b63c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
2400b63a:	2302      	movs	r3, #2
  }
}
2400b63c:	4618      	mov	r0, r3
2400b63e:	3718      	adds	r7, #24
2400b640:	46bd      	mov	sp, r7
2400b642:	bd80      	pop	{r7, pc}
2400b644:	80002400 	.word	0x80002400
2400b648:	fe00e800 	.word	0xfe00e800

2400b64c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400b64c:	b580      	push	{r7, lr}
2400b64e:	b088      	sub	sp, #32
2400b650:	af02      	add	r7, sp, #8
2400b652:	60f8      	str	r0, [r7, #12]
2400b654:	4608      	mov	r0, r1
2400b656:	4611      	mov	r1, r2
2400b658:	461a      	mov	r2, r3
2400b65a:	4603      	mov	r3, r0
2400b65c:	817b      	strh	r3, [r7, #10]
2400b65e:	460b      	mov	r3, r1
2400b660:	813b      	strh	r3, [r7, #8]
2400b662:	4613      	mov	r3, r2
2400b664:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b666:	68fb      	ldr	r3, [r7, #12]
2400b668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b66c:	b2db      	uxtb	r3, r3
2400b66e:	2b20      	cmp	r3, #32
2400b670:	d176      	bne.n	2400b760 <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
2400b672:	6a3b      	ldr	r3, [r7, #32]
2400b674:	2b00      	cmp	r3, #0
2400b676:	d002      	beq.n	2400b67e <HAL_I2C_Mem_Write_IT+0x32>
2400b678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b67a:	2b00      	cmp	r3, #0
2400b67c:	d105      	bne.n	2400b68a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b67e:	68fb      	ldr	r3, [r7, #12]
2400b680:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b684:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b686:	2301      	movs	r3, #1
2400b688:	e06b      	b.n	2400b762 <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b68a:	68fb      	ldr	r3, [r7, #12]
2400b68c:	681b      	ldr	r3, [r3, #0]
2400b68e:	699b      	ldr	r3, [r3, #24]
2400b690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b698:	d101      	bne.n	2400b69e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
2400b69a:	2302      	movs	r3, #2
2400b69c:	e061      	b.n	2400b762 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b69e:	68fb      	ldr	r3, [r7, #12]
2400b6a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b6a4:	2b01      	cmp	r3, #1
2400b6a6:	d101      	bne.n	2400b6ac <HAL_I2C_Mem_Write_IT+0x60>
2400b6a8:	2302      	movs	r3, #2
2400b6aa:	e05a      	b.n	2400b762 <HAL_I2C_Mem_Write_IT+0x116>
2400b6ac:	68fb      	ldr	r3, [r7, #12]
2400b6ae:	2201      	movs	r2, #1
2400b6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b6b4:	f7f6 fda2 	bl	240021fc <HAL_GetTick>
2400b6b8:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b6ba:	68fb      	ldr	r3, [r7, #12]
2400b6bc:	2221      	movs	r2, #33	; 0x21
2400b6be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400b6c2:	68fb      	ldr	r3, [r7, #12]
2400b6c4:	2240      	movs	r2, #64	; 0x40
2400b6c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b6ca:	68fb      	ldr	r3, [r7, #12]
2400b6cc:	2200      	movs	r2, #0
2400b6ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b6d0:	68fb      	ldr	r3, [r7, #12]
2400b6d2:	6a3a      	ldr	r2, [r7, #32]
2400b6d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b6d6:	68fb      	ldr	r3, [r7, #12]
2400b6d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400b6da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b6dc:	68fb      	ldr	r3, [r7, #12]
2400b6de:	4a23      	ldr	r2, [pc, #140]	; (2400b76c <HAL_I2C_Mem_Write_IT+0x120>)
2400b6e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400b6e2:	68fb      	ldr	r3, [r7, #12]
2400b6e4:	4a22      	ldr	r2, [pc, #136]	; (2400b770 <HAL_I2C_Mem_Write_IT+0x124>)
2400b6e6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b6e8:	68fb      	ldr	r3, [r7, #12]
2400b6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b6ec:	b29b      	uxth	r3, r3
2400b6ee:	2bff      	cmp	r3, #255	; 0xff
2400b6f0:	d906      	bls.n	2400b700 <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b6f2:	68fb      	ldr	r3, [r7, #12]
2400b6f4:	22ff      	movs	r2, #255	; 0xff
2400b6f6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b6f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b6fc:	617b      	str	r3, [r7, #20]
2400b6fe:	e007      	b.n	2400b710 <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b700:	68fb      	ldr	r3, [r7, #12]
2400b702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b704:	b29a      	uxth	r2, r3
2400b706:	68fb      	ldr	r3, [r7, #12]
2400b708:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b70a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b70e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
2400b710:	88f8      	ldrh	r0, [r7, #6]
2400b712:	893a      	ldrh	r2, [r7, #8]
2400b714:	8979      	ldrh	r1, [r7, #10]
2400b716:	693b      	ldr	r3, [r7, #16]
2400b718:	9301      	str	r3, [sp, #4]
2400b71a:	2319      	movs	r3, #25
2400b71c:	9300      	str	r3, [sp, #0]
2400b71e:	4603      	mov	r3, r0
2400b720:	68f8      	ldr	r0, [r7, #12]
2400b722:	f002 f929 	bl	2400d978 <I2C_RequestMemoryWrite>
2400b726:	4603      	mov	r3, r0
2400b728:	2b00      	cmp	r3, #0
2400b72a:	d005      	beq.n	2400b738 <HAL_I2C_Mem_Write_IT+0xec>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b72c:	68fb      	ldr	r3, [r7, #12]
2400b72e:	2200      	movs	r2, #0
2400b730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b734:	2301      	movs	r3, #1
2400b736:	e014      	b.n	2400b762 <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400b738:	68fb      	ldr	r3, [r7, #12]
2400b73a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b73c:	b2da      	uxtb	r2, r3
2400b73e:	8979      	ldrh	r1, [r7, #10]
2400b740:	2300      	movs	r3, #0
2400b742:	9300      	str	r3, [sp, #0]
2400b744:	697b      	ldr	r3, [r7, #20]
2400b746:	68f8      	ldr	r0, [r7, #12]
2400b748:	f003 fbf4 	bl	2400ef34 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b74c:	68fb      	ldr	r3, [r7, #12]
2400b74e:	2200      	movs	r2, #0
2400b750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400b754:	2101      	movs	r1, #1
2400b756:	68f8      	ldr	r0, [r7, #12]
2400b758:	f003 fc1e 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400b75c:	2300      	movs	r3, #0
2400b75e:	e000      	b.n	2400b762 <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
2400b760:	2302      	movs	r3, #2
  }
}
2400b762:	4618      	mov	r0, r3
2400b764:	3718      	adds	r7, #24
2400b766:	46bd      	mov	sp, r7
2400b768:	bd80      	pop	{r7, pc}
2400b76a:	bf00      	nop
2400b76c:	ffff0000 	.word	0xffff0000
2400b770:	2400cf77 	.word	0x2400cf77

2400b774 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400b774:	b580      	push	{r7, lr}
2400b776:	b088      	sub	sp, #32
2400b778:	af02      	add	r7, sp, #8
2400b77a:	60f8      	str	r0, [r7, #12]
2400b77c:	4608      	mov	r0, r1
2400b77e:	4611      	mov	r1, r2
2400b780:	461a      	mov	r2, r3
2400b782:	4603      	mov	r3, r0
2400b784:	817b      	strh	r3, [r7, #10]
2400b786:	460b      	mov	r3, r1
2400b788:	813b      	strh	r3, [r7, #8]
2400b78a:	4613      	mov	r3, r2
2400b78c:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b78e:	68fb      	ldr	r3, [r7, #12]
2400b790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b794:	b2db      	uxtb	r3, r3
2400b796:	2b20      	cmp	r3, #32
2400b798:	d176      	bne.n	2400b888 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
2400b79a:	6a3b      	ldr	r3, [r7, #32]
2400b79c:	2b00      	cmp	r3, #0
2400b79e:	d002      	beq.n	2400b7a6 <HAL_I2C_Mem_Read_IT+0x32>
2400b7a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2400b7a2:	2b00      	cmp	r3, #0
2400b7a4:	d105      	bne.n	2400b7b2 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b7a6:	68fb      	ldr	r3, [r7, #12]
2400b7a8:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b7ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b7ae:	2301      	movs	r3, #1
2400b7b0:	e06b      	b.n	2400b88a <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b7b2:	68fb      	ldr	r3, [r7, #12]
2400b7b4:	681b      	ldr	r3, [r3, #0]
2400b7b6:	699b      	ldr	r3, [r3, #24]
2400b7b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b7bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b7c0:	d101      	bne.n	2400b7c6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
2400b7c2:	2302      	movs	r3, #2
2400b7c4:	e061      	b.n	2400b88a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b7c6:	68fb      	ldr	r3, [r7, #12]
2400b7c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b7cc:	2b01      	cmp	r3, #1
2400b7ce:	d101      	bne.n	2400b7d4 <HAL_I2C_Mem_Read_IT+0x60>
2400b7d0:	2302      	movs	r3, #2
2400b7d2:	e05a      	b.n	2400b88a <HAL_I2C_Mem_Read_IT+0x116>
2400b7d4:	68fb      	ldr	r3, [r7, #12]
2400b7d6:	2201      	movs	r2, #1
2400b7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b7dc:	f7f6 fd0e 	bl	240021fc <HAL_GetTick>
2400b7e0:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b7e2:	68fb      	ldr	r3, [r7, #12]
2400b7e4:	2222      	movs	r2, #34	; 0x22
2400b7e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400b7ea:	68fb      	ldr	r3, [r7, #12]
2400b7ec:	2240      	movs	r2, #64	; 0x40
2400b7ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b7f2:	68fb      	ldr	r3, [r7, #12]
2400b7f4:	2200      	movs	r2, #0
2400b7f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b7f8:	68fb      	ldr	r3, [r7, #12]
2400b7fa:	6a3a      	ldr	r2, [r7, #32]
2400b7fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b7fe:	68fb      	ldr	r3, [r7, #12]
2400b800:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2400b802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b804:	68fb      	ldr	r3, [r7, #12]
2400b806:	4a23      	ldr	r2, [pc, #140]	; (2400b894 <HAL_I2C_Mem_Read_IT+0x120>)
2400b808:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400b80a:	68fb      	ldr	r3, [r7, #12]
2400b80c:	4a22      	ldr	r2, [pc, #136]	; (2400b898 <HAL_I2C_Mem_Read_IT+0x124>)
2400b80e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b810:	68fb      	ldr	r3, [r7, #12]
2400b812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b814:	b29b      	uxth	r3, r3
2400b816:	2bff      	cmp	r3, #255	; 0xff
2400b818:	d906      	bls.n	2400b828 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b81a:	68fb      	ldr	r3, [r7, #12]
2400b81c:	22ff      	movs	r2, #255	; 0xff
2400b81e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b824:	617b      	str	r3, [r7, #20]
2400b826:	e007      	b.n	2400b838 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b828:	68fb      	ldr	r3, [r7, #12]
2400b82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b82c:	b29a      	uxth	r2, r3
2400b82e:	68fb      	ldr	r3, [r7, #12]
2400b830:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b836:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
2400b838:	88f8      	ldrh	r0, [r7, #6]
2400b83a:	893a      	ldrh	r2, [r7, #8]
2400b83c:	8979      	ldrh	r1, [r7, #10]
2400b83e:	693b      	ldr	r3, [r7, #16]
2400b840:	9301      	str	r3, [sp, #4]
2400b842:	2319      	movs	r3, #25
2400b844:	9300      	str	r3, [sp, #0]
2400b846:	4603      	mov	r3, r0
2400b848:	68f8      	ldr	r0, [r7, #12]
2400b84a:	f002 f8e9 	bl	2400da20 <I2C_RequestMemoryRead>
2400b84e:	4603      	mov	r3, r0
2400b850:	2b00      	cmp	r3, #0
2400b852:	d005      	beq.n	2400b860 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b854:	68fb      	ldr	r3, [r7, #12]
2400b856:	2200      	movs	r2, #0
2400b858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b85c:	2301      	movs	r3, #1
2400b85e:	e014      	b.n	2400b88a <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400b860:	68fb      	ldr	r3, [r7, #12]
2400b862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400b864:	b2da      	uxtb	r2, r3
2400b866:	8979      	ldrh	r1, [r7, #10]
2400b868:	4b0c      	ldr	r3, [pc, #48]	; (2400b89c <HAL_I2C_Mem_Read_IT+0x128>)
2400b86a:	9300      	str	r3, [sp, #0]
2400b86c:	697b      	ldr	r3, [r7, #20]
2400b86e:	68f8      	ldr	r0, [r7, #12]
2400b870:	f003 fb60 	bl	2400ef34 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b874:	68fb      	ldr	r3, [r7, #12]
2400b876:	2200      	movs	r2, #0
2400b878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400b87c:	2102      	movs	r1, #2
2400b87e:	68f8      	ldr	r0, [r7, #12]
2400b880:	f003 fb8a 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400b884:	2300      	movs	r3, #0
2400b886:	e000      	b.n	2400b88a <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
2400b888:	2302      	movs	r3, #2
  }
}
2400b88a:	4618      	mov	r0, r3
2400b88c:	3718      	adds	r7, #24
2400b88e:	46bd      	mov	sp, r7
2400b890:	bd80      	pop	{r7, pc}
2400b892:	bf00      	nop
2400b894:	ffff0000 	.word	0xffff0000
2400b898:	2400cf77 	.word	0x2400cf77
2400b89c:	80002400 	.word	0x80002400

2400b8a0 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400b8a0:	b580      	push	{r7, lr}
2400b8a2:	b08a      	sub	sp, #40	; 0x28
2400b8a4:	af02      	add	r7, sp, #8
2400b8a6:	60f8      	str	r0, [r7, #12]
2400b8a8:	4608      	mov	r0, r1
2400b8aa:	4611      	mov	r1, r2
2400b8ac:	461a      	mov	r2, r3
2400b8ae:	4603      	mov	r3, r0
2400b8b0:	817b      	strh	r3, [r7, #10]
2400b8b2:	460b      	mov	r3, r1
2400b8b4:	813b      	strh	r3, [r7, #8]
2400b8b6:	4613      	mov	r3, r2
2400b8b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b8ba:	68fb      	ldr	r3, [r7, #12]
2400b8bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400b8c0:	b2db      	uxtb	r3, r3
2400b8c2:	2b20      	cmp	r3, #32
2400b8c4:	f040 80d5 	bne.w	2400ba72 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
2400b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400b8ca:	2b00      	cmp	r3, #0
2400b8cc:	d002      	beq.n	2400b8d4 <HAL_I2C_Mem_Write_DMA+0x34>
2400b8ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2400b8d0:	2b00      	cmp	r3, #0
2400b8d2:	d105      	bne.n	2400b8e0 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b8d4:	68fb      	ldr	r3, [r7, #12]
2400b8d6:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b8da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400b8dc:	2301      	movs	r3, #1
2400b8de:	e0c9      	b.n	2400ba74 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b8e0:	68fb      	ldr	r3, [r7, #12]
2400b8e2:	681b      	ldr	r3, [r3, #0]
2400b8e4:	699b      	ldr	r3, [r3, #24]
2400b8e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400b8ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400b8ee:	d101      	bne.n	2400b8f4 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
2400b8f0:	2302      	movs	r3, #2
2400b8f2:	e0bf      	b.n	2400ba74 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b8f4:	68fb      	ldr	r3, [r7, #12]
2400b8f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400b8fa:	2b01      	cmp	r3, #1
2400b8fc:	d101      	bne.n	2400b902 <HAL_I2C_Mem_Write_DMA+0x62>
2400b8fe:	2302      	movs	r3, #2
2400b900:	e0b8      	b.n	2400ba74 <HAL_I2C_Mem_Write_DMA+0x1d4>
2400b902:	68fb      	ldr	r3, [r7, #12]
2400b904:	2201      	movs	r2, #1
2400b906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b90a:	f7f6 fc77 	bl	240021fc <HAL_GetTick>
2400b90e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b910:	68fb      	ldr	r3, [r7, #12]
2400b912:	2221      	movs	r2, #33	; 0x21
2400b914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400b918:	68fb      	ldr	r3, [r7, #12]
2400b91a:	2240      	movs	r2, #64	; 0x40
2400b91c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b920:	68fb      	ldr	r3, [r7, #12]
2400b922:	2200      	movs	r2, #0
2400b924:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b926:	68fb      	ldr	r3, [r7, #12]
2400b928:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400b92a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400b92c:	68fb      	ldr	r3, [r7, #12]
2400b92e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
2400b930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b932:	68fb      	ldr	r3, [r7, #12]
2400b934:	4a51      	ldr	r2, [pc, #324]	; (2400ba7c <HAL_I2C_Mem_Write_DMA+0x1dc>)
2400b936:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400b938:	68fb      	ldr	r3, [r7, #12]
2400b93a:	4a51      	ldr	r2, [pc, #324]	; (2400ba80 <HAL_I2C_Mem_Write_DMA+0x1e0>)
2400b93c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b93e:	68fb      	ldr	r3, [r7, #12]
2400b940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b942:	b29b      	uxth	r3, r3
2400b944:	2bff      	cmp	r3, #255	; 0xff
2400b946:	d906      	bls.n	2400b956 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b948:	68fb      	ldr	r3, [r7, #12]
2400b94a:	22ff      	movs	r2, #255	; 0xff
2400b94c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400b94e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400b952:	61fb      	str	r3, [r7, #28]
2400b954:	e007      	b.n	2400b966 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b956:	68fb      	ldr	r3, [r7, #12]
2400b958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400b95a:	b29a      	uxth	r2, r3
2400b95c:	68fb      	ldr	r3, [r7, #12]
2400b95e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b964:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
2400b966:	88f8      	ldrh	r0, [r7, #6]
2400b968:	893a      	ldrh	r2, [r7, #8]
2400b96a:	8979      	ldrh	r1, [r7, #10]
2400b96c:	69bb      	ldr	r3, [r7, #24]
2400b96e:	9301      	str	r3, [sp, #4]
2400b970:	2319      	movs	r3, #25
2400b972:	9300      	str	r3, [sp, #0]
2400b974:	4603      	mov	r3, r0
2400b976:	68f8      	ldr	r0, [r7, #12]
2400b978:	f001 fffe 	bl	2400d978 <I2C_RequestMemoryWrite>
2400b97c:	4603      	mov	r3, r0
2400b97e:	2b00      	cmp	r3, #0
2400b980:	d005      	beq.n	2400b98e <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400b982:	68fb      	ldr	r3, [r7, #12]
2400b984:	2200      	movs	r2, #0
2400b986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b98a:	2301      	movs	r3, #1
2400b98c:	e072      	b.n	2400ba74 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
2400b98e:	68fb      	ldr	r3, [r7, #12]
2400b990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b992:	2b00      	cmp	r3, #0
2400b994:	d020      	beq.n	2400b9d8 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400b996:	68fb      	ldr	r3, [r7, #12]
2400b998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b99a:	4a3a      	ldr	r2, [pc, #232]	; (2400ba84 <HAL_I2C_Mem_Write_DMA+0x1e4>)
2400b99c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400b99e:	68fb      	ldr	r3, [r7, #12]
2400b9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b9a2:	4a39      	ldr	r2, [pc, #228]	; (2400ba88 <HAL_I2C_Mem_Write_DMA+0x1e8>)
2400b9a4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400b9a6:	68fb      	ldr	r3, [r7, #12]
2400b9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b9aa:	2200      	movs	r2, #0
2400b9ac:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400b9ae:	68fb      	ldr	r3, [r7, #12]
2400b9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400b9b2:	2200      	movs	r2, #0
2400b9b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400b9b6:	68fb      	ldr	r3, [r7, #12]
2400b9b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400b9ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2400b9bc:	68fb      	ldr	r3, [r7, #12]
2400b9be:	681b      	ldr	r3, [r3, #0]
2400b9c0:	3328      	adds	r3, #40	; 0x28
2400b9c2:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400b9c4:	68fb      	ldr	r3, [r7, #12]
2400b9c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400b9c8:	f7f8 f9b2 	bl	24003d30 <HAL_DMA_Start_IT>
2400b9cc:	4603      	mov	r3, r0
2400b9ce:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400b9d0:	7dfb      	ldrb	r3, [r7, #23]
2400b9d2:	2b00      	cmp	r3, #0
2400b9d4:	d139      	bne.n	2400ba4a <HAL_I2C_Mem_Write_DMA+0x1aa>
2400b9d6:	e013      	b.n	2400ba00 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
2400b9d8:	68fb      	ldr	r3, [r7, #12]
2400b9da:	2220      	movs	r2, #32
2400b9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400b9e0:	68fb      	ldr	r3, [r7, #12]
2400b9e2:	2200      	movs	r2, #0
2400b9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400b9e8:	68fb      	ldr	r3, [r7, #12]
2400b9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400b9ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400b9f0:	68fb      	ldr	r3, [r7, #12]
2400b9f2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400b9f4:	68fb      	ldr	r3, [r7, #12]
2400b9f6:	2200      	movs	r2, #0
2400b9f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400b9fc:	2301      	movs	r3, #1
2400b9fe:	e039      	b.n	2400ba74 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400ba00:	68fb      	ldr	r3, [r7, #12]
2400ba02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ba04:	b2da      	uxtb	r2, r3
2400ba06:	8979      	ldrh	r1, [r7, #10]
2400ba08:	2300      	movs	r3, #0
2400ba0a:	9300      	str	r3, [sp, #0]
2400ba0c:	69fb      	ldr	r3, [r7, #28]
2400ba0e:	68f8      	ldr	r0, [r7, #12]
2400ba10:	f003 fa90 	bl	2400ef34 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400ba14:	68fb      	ldr	r3, [r7, #12]
2400ba16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400ba18:	b29a      	uxth	r2, r3
2400ba1a:	68fb      	ldr	r3, [r7, #12]
2400ba1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ba1e:	1ad3      	subs	r3, r2, r3
2400ba20:	b29a      	uxth	r2, r3
2400ba22:	68fb      	ldr	r3, [r7, #12]
2400ba24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ba26:	68fb      	ldr	r3, [r7, #12]
2400ba28:	2200      	movs	r2, #0
2400ba2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400ba2e:	2110      	movs	r1, #16
2400ba30:	68f8      	ldr	r0, [r7, #12]
2400ba32:	f003 fab1 	bl	2400ef98 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400ba36:	68fb      	ldr	r3, [r7, #12]
2400ba38:	681b      	ldr	r3, [r3, #0]
2400ba3a:	681a      	ldr	r2, [r3, #0]
2400ba3c:	68fb      	ldr	r3, [r7, #12]
2400ba3e:	681b      	ldr	r3, [r3, #0]
2400ba40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400ba44:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400ba46:	2300      	movs	r3, #0
2400ba48:	e014      	b.n	2400ba74 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
2400ba4a:	68fb      	ldr	r3, [r7, #12]
2400ba4c:	2220      	movs	r2, #32
2400ba4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400ba52:	68fb      	ldr	r3, [r7, #12]
2400ba54:	2200      	movs	r2, #0
2400ba56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400ba5a:	68fb      	ldr	r3, [r7, #12]
2400ba5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ba5e:	f043 0210 	orr.w	r2, r3, #16
2400ba62:	68fb      	ldr	r3, [r7, #12]
2400ba64:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400ba66:	68fb      	ldr	r3, [r7, #12]
2400ba68:	2200      	movs	r2, #0
2400ba6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400ba6e:	2301      	movs	r3, #1
2400ba70:	e000      	b.n	2400ba74 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
2400ba72:	2302      	movs	r3, #2
  }
}
2400ba74:	4618      	mov	r0, r3
2400ba76:	3720      	adds	r7, #32
2400ba78:	46bd      	mov	sp, r7
2400ba7a:	bd80      	pop	{r7, pc}
2400ba7c:	ffff0000 	.word	0xffff0000
2400ba80:	2400d3cd 	.word	0x2400d3cd
2400ba84:	2400e56f 	.word	0x2400e56f
2400ba88:	2400e841 	.word	0x2400e841

2400ba8c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400ba8c:	b580      	push	{r7, lr}
2400ba8e:	b08a      	sub	sp, #40	; 0x28
2400ba90:	af02      	add	r7, sp, #8
2400ba92:	60f8      	str	r0, [r7, #12]
2400ba94:	4608      	mov	r0, r1
2400ba96:	4611      	mov	r1, r2
2400ba98:	461a      	mov	r2, r3
2400ba9a:	4603      	mov	r3, r0
2400ba9c:	817b      	strh	r3, [r7, #10]
2400ba9e:	460b      	mov	r3, r1
2400baa0:	813b      	strh	r3, [r7, #8]
2400baa2:	4613      	mov	r3, r2
2400baa4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400baa6:	68fb      	ldr	r3, [r7, #12]
2400baa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400baac:	b2db      	uxtb	r3, r3
2400baae:	2b20      	cmp	r3, #32
2400bab0:	f040 80d5 	bne.w	2400bc5e <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
2400bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400bab6:	2b00      	cmp	r3, #0
2400bab8:	d002      	beq.n	2400bac0 <HAL_I2C_Mem_Read_DMA+0x34>
2400baba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2400babc:	2b00      	cmp	r3, #0
2400babe:	d105      	bne.n	2400bacc <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400bac0:	68fb      	ldr	r3, [r7, #12]
2400bac2:	f44f 7200 	mov.w	r2, #512	; 0x200
2400bac6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400bac8:	2301      	movs	r3, #1
2400baca:	e0c9      	b.n	2400bc60 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400bacc:	68fb      	ldr	r3, [r7, #12]
2400bace:	681b      	ldr	r3, [r3, #0]
2400bad0:	699b      	ldr	r3, [r3, #24]
2400bad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400bad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400bada:	d101      	bne.n	2400bae0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
2400badc:	2302      	movs	r3, #2
2400bade:	e0bf      	b.n	2400bc60 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bae0:	68fb      	ldr	r3, [r7, #12]
2400bae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bae6:	2b01      	cmp	r3, #1
2400bae8:	d101      	bne.n	2400baee <HAL_I2C_Mem_Read_DMA+0x62>
2400baea:	2302      	movs	r3, #2
2400baec:	e0b8      	b.n	2400bc60 <HAL_I2C_Mem_Read_DMA+0x1d4>
2400baee:	68fb      	ldr	r3, [r7, #12]
2400baf0:	2201      	movs	r2, #1
2400baf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400baf6:	f7f6 fb81 	bl	240021fc <HAL_GetTick>
2400bafa:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400bafc:	68fb      	ldr	r3, [r7, #12]
2400bafe:	2222      	movs	r2, #34	; 0x22
2400bb00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400bb04:	68fb      	ldr	r3, [r7, #12]
2400bb06:	2240      	movs	r2, #64	; 0x40
2400bb08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400bb0c:	68fb      	ldr	r3, [r7, #12]
2400bb0e:	2200      	movs	r2, #0
2400bb10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bb12:	68fb      	ldr	r3, [r7, #12]
2400bb14:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400bb16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400bb18:	68fb      	ldr	r3, [r7, #12]
2400bb1a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
2400bb1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400bb1e:	68fb      	ldr	r3, [r7, #12]
2400bb20:	4a51      	ldr	r2, [pc, #324]	; (2400bc68 <HAL_I2C_Mem_Read_DMA+0x1dc>)
2400bb22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400bb24:	68fb      	ldr	r3, [r7, #12]
2400bb26:	4a51      	ldr	r2, [pc, #324]	; (2400bc6c <HAL_I2C_Mem_Read_DMA+0x1e0>)
2400bb28:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bb2a:	68fb      	ldr	r3, [r7, #12]
2400bb2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bb2e:	b29b      	uxth	r3, r3
2400bb30:	2bff      	cmp	r3, #255	; 0xff
2400bb32:	d906      	bls.n	2400bb42 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400bb34:	68fb      	ldr	r3, [r7, #12]
2400bb36:	22ff      	movs	r2, #255	; 0xff
2400bb38:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400bb3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bb3e:	61fb      	str	r3, [r7, #28]
2400bb40:	e007      	b.n	2400bb52 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400bb42:	68fb      	ldr	r3, [r7, #12]
2400bb44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bb46:	b29a      	uxth	r2, r3
2400bb48:	68fb      	ldr	r3, [r7, #12]
2400bb4a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2400bb4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bb50:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
2400bb52:	88f8      	ldrh	r0, [r7, #6]
2400bb54:	893a      	ldrh	r2, [r7, #8]
2400bb56:	8979      	ldrh	r1, [r7, #10]
2400bb58:	69bb      	ldr	r3, [r7, #24]
2400bb5a:	9301      	str	r3, [sp, #4]
2400bb5c:	2319      	movs	r3, #25
2400bb5e:	9300      	str	r3, [sp, #0]
2400bb60:	4603      	mov	r3, r0
2400bb62:	68f8      	ldr	r0, [r7, #12]
2400bb64:	f001 ff5c 	bl	2400da20 <I2C_RequestMemoryRead>
2400bb68:	4603      	mov	r3, r0
2400bb6a:	2b00      	cmp	r3, #0
2400bb6c:	d005      	beq.n	2400bb7a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bb6e:	68fb      	ldr	r3, [r7, #12]
2400bb70:	2200      	movs	r2, #0
2400bb72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bb76:	2301      	movs	r3, #1
2400bb78:	e072      	b.n	2400bc60 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
2400bb7a:	68fb      	ldr	r3, [r7, #12]
2400bb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bb7e:	2b00      	cmp	r3, #0
2400bb80:	d020      	beq.n	2400bbc4 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400bb82:	68fb      	ldr	r3, [r7, #12]
2400bb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bb86:	4a3a      	ldr	r2, [pc, #232]	; (2400bc70 <HAL_I2C_Mem_Read_DMA+0x1e4>)
2400bb88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400bb8a:	68fb      	ldr	r3, [r7, #12]
2400bb8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bb8e:	4a39      	ldr	r2, [pc, #228]	; (2400bc74 <HAL_I2C_Mem_Read_DMA+0x1e8>)
2400bb90:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400bb92:	68fb      	ldr	r3, [r7, #12]
2400bb94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bb96:	2200      	movs	r2, #0
2400bb98:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400bb9a:	68fb      	ldr	r3, [r7, #12]
2400bb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400bb9e:	2200      	movs	r2, #0
2400bba0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400bba2:	68fb      	ldr	r3, [r7, #12]
2400bba4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400bba6:	68fb      	ldr	r3, [r7, #12]
2400bba8:	681b      	ldr	r3, [r3, #0]
2400bbaa:	3324      	adds	r3, #36	; 0x24
2400bbac:	4619      	mov	r1, r3
2400bbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
2400bbb0:	68fb      	ldr	r3, [r7, #12]
2400bbb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400bbb4:	f7f8 f8bc 	bl	24003d30 <HAL_DMA_Start_IT>
2400bbb8:	4603      	mov	r3, r0
2400bbba:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400bbbc:	7dfb      	ldrb	r3, [r7, #23]
2400bbbe:	2b00      	cmp	r3, #0
2400bbc0:	d139      	bne.n	2400bc36 <HAL_I2C_Mem_Read_DMA+0x1aa>
2400bbc2:	e013      	b.n	2400bbec <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
2400bbc4:	68fb      	ldr	r3, [r7, #12]
2400bbc6:	2220      	movs	r2, #32
2400bbc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bbcc:	68fb      	ldr	r3, [r7, #12]
2400bbce:	2200      	movs	r2, #0
2400bbd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400bbd4:	68fb      	ldr	r3, [r7, #12]
2400bbd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400bbd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400bbdc:	68fb      	ldr	r3, [r7, #12]
2400bbde:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400bbe0:	68fb      	ldr	r3, [r7, #12]
2400bbe2:	2200      	movs	r2, #0
2400bbe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bbe8:	2301      	movs	r3, #1
2400bbea:	e039      	b.n	2400bc60 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400bbec:	68fb      	ldr	r3, [r7, #12]
2400bbee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bbf0:	b2da      	uxtb	r2, r3
2400bbf2:	8979      	ldrh	r1, [r7, #10]
2400bbf4:	4b20      	ldr	r3, [pc, #128]	; (2400bc78 <HAL_I2C_Mem_Read_DMA+0x1ec>)
2400bbf6:	9300      	str	r3, [sp, #0]
2400bbf8:	69fb      	ldr	r3, [r7, #28]
2400bbfa:	68f8      	ldr	r0, [r7, #12]
2400bbfc:	f003 f99a 	bl	2400ef34 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400bc00:	68fb      	ldr	r3, [r7, #12]
2400bc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bc04:	b29a      	uxth	r2, r3
2400bc06:	68fb      	ldr	r3, [r7, #12]
2400bc08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bc0a:	1ad3      	subs	r3, r2, r3
2400bc0c:	b29a      	uxth	r2, r3
2400bc0e:	68fb      	ldr	r3, [r7, #12]
2400bc10:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bc12:	68fb      	ldr	r3, [r7, #12]
2400bc14:	2200      	movs	r2, #0
2400bc16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400bc1a:	2110      	movs	r1, #16
2400bc1c:	68f8      	ldr	r0, [r7, #12]
2400bc1e:	f003 f9bb 	bl	2400ef98 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400bc22:	68fb      	ldr	r3, [r7, #12]
2400bc24:	681b      	ldr	r3, [r3, #0]
2400bc26:	681a      	ldr	r2, [r3, #0]
2400bc28:	68fb      	ldr	r3, [r7, #12]
2400bc2a:	681b      	ldr	r3, [r3, #0]
2400bc2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400bc30:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400bc32:	2300      	movs	r3, #0
2400bc34:	e014      	b.n	2400bc60 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
2400bc36:	68fb      	ldr	r3, [r7, #12]
2400bc38:	2220      	movs	r2, #32
2400bc3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bc3e:	68fb      	ldr	r3, [r7, #12]
2400bc40:	2200      	movs	r2, #0
2400bc42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400bc46:	68fb      	ldr	r3, [r7, #12]
2400bc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400bc4a:	f043 0210 	orr.w	r2, r3, #16
2400bc4e:	68fb      	ldr	r3, [r7, #12]
2400bc50:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400bc52:	68fb      	ldr	r3, [r7, #12]
2400bc54:	2200      	movs	r2, #0
2400bc56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400bc5a:	2301      	movs	r3, #1
2400bc5c:	e000      	b.n	2400bc60 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
2400bc5e:	2302      	movs	r3, #2
  }
}
2400bc60:	4618      	mov	r0, r3
2400bc62:	3720      	adds	r7, #32
2400bc64:	46bd      	mov	sp, r7
2400bc66:	bd80      	pop	{r7, pc}
2400bc68:	ffff0000 	.word	0xffff0000
2400bc6c:	2400d3cd 	.word	0x2400d3cd
2400bc70:	2400e645 	.word	0x2400e645
2400bc74:	2400e841 	.word	0x2400e841
2400bc78:	80002400 	.word	0x80002400

2400bc7c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
2400bc7c:	b580      	push	{r7, lr}
2400bc7e:	b08a      	sub	sp, #40	; 0x28
2400bc80:	af02      	add	r7, sp, #8
2400bc82:	60f8      	str	r0, [r7, #12]
2400bc84:	607a      	str	r2, [r7, #4]
2400bc86:	603b      	str	r3, [r7, #0]
2400bc88:	460b      	mov	r3, r1
2400bc8a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
2400bc8c:	2300      	movs	r3, #0
2400bc8e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bc90:	68fb      	ldr	r3, [r7, #12]
2400bc92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bc96:	b2db      	uxtb	r3, r3
2400bc98:	2b20      	cmp	r3, #32
2400bc9a:	f040 80ef 	bne.w	2400be7c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400bc9e:	68fb      	ldr	r3, [r7, #12]
2400bca0:	681b      	ldr	r3, [r3, #0]
2400bca2:	699b      	ldr	r3, [r3, #24]
2400bca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400bca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400bcac:	d101      	bne.n	2400bcb2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
2400bcae:	2302      	movs	r3, #2
2400bcb0:	e0e5      	b.n	2400be7e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bcb2:	68fb      	ldr	r3, [r7, #12]
2400bcb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bcb8:	2b01      	cmp	r3, #1
2400bcba:	d101      	bne.n	2400bcc0 <HAL_I2C_IsDeviceReady+0x44>
2400bcbc:	2302      	movs	r3, #2
2400bcbe:	e0de      	b.n	2400be7e <HAL_I2C_IsDeviceReady+0x202>
2400bcc0:	68fb      	ldr	r3, [r7, #12]
2400bcc2:	2201      	movs	r2, #1
2400bcc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400bcc8:	68fb      	ldr	r3, [r7, #12]
2400bcca:	2224      	movs	r2, #36	; 0x24
2400bccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400bcd0:	68fb      	ldr	r3, [r7, #12]
2400bcd2:	2200      	movs	r2, #0
2400bcd4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
2400bcd6:	68fb      	ldr	r3, [r7, #12]
2400bcd8:	68db      	ldr	r3, [r3, #12]
2400bcda:	2b01      	cmp	r3, #1
2400bcdc:	d105      	bne.n	2400bcea <HAL_I2C_IsDeviceReady+0x6e>
2400bcde:	897b      	ldrh	r3, [r7, #10]
2400bce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
2400bce4:	4b68      	ldr	r3, [pc, #416]	; (2400be88 <HAL_I2C_IsDeviceReady+0x20c>)
2400bce6:	4313      	orrs	r3, r2
2400bce8:	e004      	b.n	2400bcf4 <HAL_I2C_IsDeviceReady+0x78>
2400bcea:	897b      	ldrh	r3, [r7, #10]
2400bcec:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400bcf0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
2400bcf4:	68fa      	ldr	r2, [r7, #12]
2400bcf6:	6812      	ldr	r2, [r2, #0]
2400bcf8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
2400bcfa:	f7f6 fa7f 	bl	240021fc <HAL_GetTick>
2400bcfe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400bd00:	68fb      	ldr	r3, [r7, #12]
2400bd02:	681b      	ldr	r3, [r3, #0]
2400bd04:	699b      	ldr	r3, [r3, #24]
2400bd06:	f003 0320 	and.w	r3, r3, #32
2400bd0a:	2b20      	cmp	r3, #32
2400bd0c:	bf0c      	ite	eq
2400bd0e:	2301      	moveq	r3, #1
2400bd10:	2300      	movne	r3, #0
2400bd12:	b2db      	uxtb	r3, r3
2400bd14:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400bd16:	68fb      	ldr	r3, [r7, #12]
2400bd18:	681b      	ldr	r3, [r3, #0]
2400bd1a:	699b      	ldr	r3, [r3, #24]
2400bd1c:	f003 0310 	and.w	r3, r3, #16
2400bd20:	2b10      	cmp	r3, #16
2400bd22:	bf0c      	ite	eq
2400bd24:	2301      	moveq	r3, #1
2400bd26:	2300      	movne	r3, #0
2400bd28:	b2db      	uxtb	r3, r3
2400bd2a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
2400bd2c:	e034      	b.n	2400bd98 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
2400bd2e:	683b      	ldr	r3, [r7, #0]
2400bd30:	f1b3 3fff 	cmp.w	r3, #4294967295
2400bd34:	d01a      	beq.n	2400bd6c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400bd36:	f7f6 fa61 	bl	240021fc <HAL_GetTick>
2400bd3a:	4602      	mov	r2, r0
2400bd3c:	69bb      	ldr	r3, [r7, #24]
2400bd3e:	1ad3      	subs	r3, r2, r3
2400bd40:	683a      	ldr	r2, [r7, #0]
2400bd42:	429a      	cmp	r2, r3
2400bd44:	d302      	bcc.n	2400bd4c <HAL_I2C_IsDeviceReady+0xd0>
2400bd46:	683b      	ldr	r3, [r7, #0]
2400bd48:	2b00      	cmp	r3, #0
2400bd4a:	d10f      	bne.n	2400bd6c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
2400bd4c:	68fb      	ldr	r3, [r7, #12]
2400bd4e:	2220      	movs	r2, #32
2400bd50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400bd54:	68fb      	ldr	r3, [r7, #12]
2400bd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400bd58:	f043 0220 	orr.w	r2, r3, #32
2400bd5c:	68fb      	ldr	r3, [r7, #12]
2400bd5e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
2400bd60:	68fb      	ldr	r3, [r7, #12]
2400bd62:	2200      	movs	r2, #0
2400bd64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
2400bd68:	2301      	movs	r3, #1
2400bd6a:	e088      	b.n	2400be7e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400bd6c:	68fb      	ldr	r3, [r7, #12]
2400bd6e:	681b      	ldr	r3, [r3, #0]
2400bd70:	699b      	ldr	r3, [r3, #24]
2400bd72:	f003 0320 	and.w	r3, r3, #32
2400bd76:	2b20      	cmp	r3, #32
2400bd78:	bf0c      	ite	eq
2400bd7a:	2301      	moveq	r3, #1
2400bd7c:	2300      	movne	r3, #0
2400bd7e:	b2db      	uxtb	r3, r3
2400bd80:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400bd82:	68fb      	ldr	r3, [r7, #12]
2400bd84:	681b      	ldr	r3, [r3, #0]
2400bd86:	699b      	ldr	r3, [r3, #24]
2400bd88:	f003 0310 	and.w	r3, r3, #16
2400bd8c:	2b10      	cmp	r3, #16
2400bd8e:	bf0c      	ite	eq
2400bd90:	2301      	moveq	r3, #1
2400bd92:	2300      	movne	r3, #0
2400bd94:	b2db      	uxtb	r3, r3
2400bd96:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
2400bd98:	7ffb      	ldrb	r3, [r7, #31]
2400bd9a:	2b00      	cmp	r3, #0
2400bd9c:	d102      	bne.n	2400bda4 <HAL_I2C_IsDeviceReady+0x128>
2400bd9e:	7fbb      	ldrb	r3, [r7, #30]
2400bda0:	2b00      	cmp	r3, #0
2400bda2:	d0c4      	beq.n	2400bd2e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
2400bda4:	68fb      	ldr	r3, [r7, #12]
2400bda6:	681b      	ldr	r3, [r3, #0]
2400bda8:	699b      	ldr	r3, [r3, #24]
2400bdaa:	f003 0310 	and.w	r3, r3, #16
2400bdae:	2b10      	cmp	r3, #16
2400bdb0:	d01a      	beq.n	2400bde8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400bdb2:	69bb      	ldr	r3, [r7, #24]
2400bdb4:	9300      	str	r3, [sp, #0]
2400bdb6:	683b      	ldr	r3, [r7, #0]
2400bdb8:	2200      	movs	r2, #0
2400bdba:	2120      	movs	r1, #32
2400bdbc:	68f8      	ldr	r0, [r7, #12]
2400bdbe:	f002 fe97 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400bdc2:	4603      	mov	r3, r0
2400bdc4:	2b00      	cmp	r3, #0
2400bdc6:	d001      	beq.n	2400bdcc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
2400bdc8:	2301      	movs	r3, #1
2400bdca:	e058      	b.n	2400be7e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400bdcc:	68fb      	ldr	r3, [r7, #12]
2400bdce:	681b      	ldr	r3, [r3, #0]
2400bdd0:	2220      	movs	r2, #32
2400bdd2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
2400bdd4:	68fb      	ldr	r3, [r7, #12]
2400bdd6:	2220      	movs	r2, #32
2400bdd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400bddc:	68fb      	ldr	r3, [r7, #12]
2400bdde:	2200      	movs	r2, #0
2400bde0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
2400bde4:	2300      	movs	r3, #0
2400bde6:	e04a      	b.n	2400be7e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400bde8:	69bb      	ldr	r3, [r7, #24]
2400bdea:	9300      	str	r3, [sp, #0]
2400bdec:	683b      	ldr	r3, [r7, #0]
2400bdee:	2200      	movs	r2, #0
2400bdf0:	2120      	movs	r1, #32
2400bdf2:	68f8      	ldr	r0, [r7, #12]
2400bdf4:	f002 fe7c 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400bdf8:	4603      	mov	r3, r0
2400bdfa:	2b00      	cmp	r3, #0
2400bdfc:	d001      	beq.n	2400be02 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
2400bdfe:	2301      	movs	r3, #1
2400be00:	e03d      	b.n	2400be7e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400be02:	68fb      	ldr	r3, [r7, #12]
2400be04:	681b      	ldr	r3, [r3, #0]
2400be06:	2210      	movs	r2, #16
2400be08:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400be0a:	68fb      	ldr	r3, [r7, #12]
2400be0c:	681b      	ldr	r3, [r3, #0]
2400be0e:	2220      	movs	r2, #32
2400be10:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
2400be12:	697b      	ldr	r3, [r7, #20]
2400be14:	687a      	ldr	r2, [r7, #4]
2400be16:	429a      	cmp	r2, r3
2400be18:	d118      	bne.n	2400be4c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400be1a:	68fb      	ldr	r3, [r7, #12]
2400be1c:	681b      	ldr	r3, [r3, #0]
2400be1e:	685a      	ldr	r2, [r3, #4]
2400be20:	68fb      	ldr	r3, [r7, #12]
2400be22:	681b      	ldr	r3, [r3, #0]
2400be24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400be28:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400be2a:	69bb      	ldr	r3, [r7, #24]
2400be2c:	9300      	str	r3, [sp, #0]
2400be2e:	683b      	ldr	r3, [r7, #0]
2400be30:	2200      	movs	r2, #0
2400be32:	2120      	movs	r1, #32
2400be34:	68f8      	ldr	r0, [r7, #12]
2400be36:	f002 fe5b 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400be3a:	4603      	mov	r3, r0
2400be3c:	2b00      	cmp	r3, #0
2400be3e:	d001      	beq.n	2400be44 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
2400be40:	2301      	movs	r3, #1
2400be42:	e01c      	b.n	2400be7e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400be44:	68fb      	ldr	r3, [r7, #12]
2400be46:	681b      	ldr	r3, [r3, #0]
2400be48:	2220      	movs	r2, #32
2400be4a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
2400be4c:	697b      	ldr	r3, [r7, #20]
2400be4e:	3301      	adds	r3, #1
2400be50:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
2400be52:	697b      	ldr	r3, [r7, #20]
2400be54:	687a      	ldr	r2, [r7, #4]
2400be56:	429a      	cmp	r2, r3
2400be58:	f63f af3d 	bhi.w	2400bcd6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
2400be5c:	68fb      	ldr	r3, [r7, #12]
2400be5e:	2220      	movs	r2, #32
2400be60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400be64:	68fb      	ldr	r3, [r7, #12]
2400be66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400be68:	f043 0220 	orr.w	r2, r3, #32
2400be6c:	68fb      	ldr	r3, [r7, #12]
2400be6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400be70:	68fb      	ldr	r3, [r7, #12]
2400be72:	2200      	movs	r2, #0
2400be74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
2400be78:	2301      	movs	r3, #1
2400be7a:	e000      	b.n	2400be7e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
2400be7c:	2302      	movs	r3, #2
  }
}
2400be7e:	4618      	mov	r0, r3
2400be80:	3720      	adds	r7, #32
2400be82:	46bd      	mov	sp, r7
2400be84:	bd80      	pop	{r7, pc}
2400be86:	bf00      	nop
2400be88:	02002000 	.word	0x02002000

2400be8c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400be8c:	b580      	push	{r7, lr}
2400be8e:	b088      	sub	sp, #32
2400be90:	af02      	add	r7, sp, #8
2400be92:	60f8      	str	r0, [r7, #12]
2400be94:	607a      	str	r2, [r7, #4]
2400be96:	461a      	mov	r2, r3
2400be98:	460b      	mov	r3, r1
2400be9a:	817b      	strh	r3, [r7, #10]
2400be9c:	4613      	mov	r3, r2
2400be9e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400bea0:	4b3a      	ldr	r3, [pc, #232]	; (2400bf8c <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
2400bea2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bea4:	68fb      	ldr	r3, [r7, #12]
2400bea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400beaa:	b2db      	uxtb	r3, r3
2400beac:	2b20      	cmp	r3, #32
2400beae:	d167      	bne.n	2400bf80 <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400beb0:	68fb      	ldr	r3, [r7, #12]
2400beb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400beb6:	2b01      	cmp	r3, #1
2400beb8:	d101      	bne.n	2400bebe <HAL_I2C_Master_Seq_Transmit_IT+0x32>
2400beba:	2302      	movs	r3, #2
2400bebc:	e061      	b.n	2400bf82 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
2400bebe:	68fb      	ldr	r3, [r7, #12]
2400bec0:	2201      	movs	r2, #1
2400bec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400bec6:	68fb      	ldr	r3, [r7, #12]
2400bec8:	2221      	movs	r2, #33	; 0x21
2400beca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400bece:	68fb      	ldr	r3, [r7, #12]
2400bed0:	2210      	movs	r2, #16
2400bed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400bed6:	68fb      	ldr	r3, [r7, #12]
2400bed8:	2200      	movs	r2, #0
2400beda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bedc:	68fb      	ldr	r3, [r7, #12]
2400bede:	687a      	ldr	r2, [r7, #4]
2400bee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400bee2:	68fb      	ldr	r3, [r7, #12]
2400bee4:	893a      	ldrh	r2, [r7, #8]
2400bee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400bee8:	68fb      	ldr	r3, [r7, #12]
2400beea:	6a3a      	ldr	r2, [r7, #32]
2400beec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400beee:	68fb      	ldr	r3, [r7, #12]
2400bef0:	4a27      	ldr	r2, [pc, #156]	; (2400bf90 <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
2400bef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bef4:	68fb      	ldr	r3, [r7, #12]
2400bef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bef8:	b29b      	uxth	r3, r3
2400befa:	2bff      	cmp	r3, #255	; 0xff
2400befc:	d906      	bls.n	2400bf0c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400befe:	68fb      	ldr	r3, [r7, #12]
2400bf00:	22ff      	movs	r2, #255	; 0xff
2400bf02:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400bf04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400bf08:	617b      	str	r3, [r7, #20]
2400bf0a:	e007      	b.n	2400bf1c <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400bf0c:	68fb      	ldr	r3, [r7, #12]
2400bf0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bf10:	b29a      	uxth	r2, r3
2400bf12:	68fb      	ldr	r3, [r7, #12]
2400bf14:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400bf16:	68fb      	ldr	r3, [r7, #12]
2400bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400bf1a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400bf1c:	68fb      	ldr	r3, [r7, #12]
2400bf1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400bf20:	2b11      	cmp	r3, #17
2400bf22:	d10e      	bne.n	2400bf42 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400bf24:	6a3b      	ldr	r3, [r7, #32]
2400bf26:	2baa      	cmp	r3, #170	; 0xaa
2400bf28:	d003      	beq.n	2400bf32 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
2400bf2a:	6a3b      	ldr	r3, [r7, #32]
2400bf2c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400bf30:	d101      	bne.n	2400bf36 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
2400bf32:	2301      	movs	r3, #1
2400bf34:	e000      	b.n	2400bf38 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
2400bf36:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400bf38:	2b00      	cmp	r3, #0
2400bf3a:	d102      	bne.n	2400bf42 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400bf3c:	2300      	movs	r3, #0
2400bf3e:	613b      	str	r3, [r7, #16]
2400bf40:	e00a      	b.n	2400bf58 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400bf42:	68f8      	ldr	r0, [r7, #12]
2400bf44:	f003 f8ea 	bl	2400f11c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400bf48:	68fb      	ldr	r3, [r7, #12]
2400bf4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400bf4c:	b29b      	uxth	r3, r3
2400bf4e:	2bff      	cmp	r3, #255	; 0xff
2400bf50:	d802      	bhi.n	2400bf58 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400bf52:	68fb      	ldr	r3, [r7, #12]
2400bf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400bf56:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400bf58:	68fb      	ldr	r3, [r7, #12]
2400bf5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400bf5c:	b2da      	uxtb	r2, r3
2400bf5e:	8979      	ldrh	r1, [r7, #10]
2400bf60:	693b      	ldr	r3, [r7, #16]
2400bf62:	9300      	str	r3, [sp, #0]
2400bf64:	697b      	ldr	r3, [r7, #20]
2400bf66:	68f8      	ldr	r0, [r7, #12]
2400bf68:	f002 ffe4 	bl	2400ef34 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400bf6c:	68fb      	ldr	r3, [r7, #12]
2400bf6e:	2200      	movs	r2, #0
2400bf70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400bf74:	2101      	movs	r1, #1
2400bf76:	68f8      	ldr	r0, [r7, #12]
2400bf78:	f003 f80e 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400bf7c:	2300      	movs	r3, #0
2400bf7e:	e000      	b.n	2400bf82 <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400bf80:	2302      	movs	r3, #2
  }
}
2400bf82:	4618      	mov	r0, r3
2400bf84:	3718      	adds	r7, #24
2400bf86:	46bd      	mov	sp, r7
2400bf88:	bd80      	pop	{r7, pc}
2400bf8a:	bf00      	nop
2400bf8c:	80002000 	.word	0x80002000
2400bf90:	2400cf77 	.word	0x2400cf77

2400bf94 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
2400bf94:	b580      	push	{r7, lr}
2400bf96:	b08a      	sub	sp, #40	; 0x28
2400bf98:	af02      	add	r7, sp, #8
2400bf9a:	60f8      	str	r0, [r7, #12]
2400bf9c:	607a      	str	r2, [r7, #4]
2400bf9e:	461a      	mov	r2, r3
2400bfa0:	460b      	mov	r3, r1
2400bfa2:	817b      	strh	r3, [r7, #10]
2400bfa4:	4613      	mov	r3, r2
2400bfa6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400bfa8:	4b77      	ldr	r3, [pc, #476]	; (2400c188 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
2400bfaa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bfac:	68fb      	ldr	r3, [r7, #12]
2400bfae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400bfb2:	b2db      	uxtb	r3, r3
2400bfb4:	2b20      	cmp	r3, #32
2400bfb6:	f040 80e1 	bne.w	2400c17c <HAL_I2C_Master_Seq_Transmit_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bfba:	68fb      	ldr	r3, [r7, #12]
2400bfbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400bfc0:	2b01      	cmp	r3, #1
2400bfc2:	d101      	bne.n	2400bfc8 <HAL_I2C_Master_Seq_Transmit_DMA+0x34>
2400bfc4:	2302      	movs	r3, #2
2400bfc6:	e0da      	b.n	2400c17e <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
2400bfc8:	68fb      	ldr	r3, [r7, #12]
2400bfca:	2201      	movs	r2, #1
2400bfcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400bfd0:	68fb      	ldr	r3, [r7, #12]
2400bfd2:	2221      	movs	r2, #33	; 0x21
2400bfd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400bfd8:	68fb      	ldr	r3, [r7, #12]
2400bfda:	2210      	movs	r2, #16
2400bfdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400bfe0:	68fb      	ldr	r3, [r7, #12]
2400bfe2:	2200      	movs	r2, #0
2400bfe4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bfe6:	68fb      	ldr	r3, [r7, #12]
2400bfe8:	687a      	ldr	r2, [r7, #4]
2400bfea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400bfec:	68fb      	ldr	r3, [r7, #12]
2400bfee:	893a      	ldrh	r2, [r7, #8]
2400bff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400bff2:	68fb      	ldr	r3, [r7, #12]
2400bff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400bff6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400bff8:	68fb      	ldr	r3, [r7, #12]
2400bffa:	4a64      	ldr	r2, [pc, #400]	; (2400c18c <HAL_I2C_Master_Seq_Transmit_DMA+0x1f8>)
2400bffc:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bffe:	68fb      	ldr	r3, [r7, #12]
2400c000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c002:	b29b      	uxth	r3, r3
2400c004:	2bff      	cmp	r3, #255	; 0xff
2400c006:	d906      	bls.n	2400c016 <HAL_I2C_Master_Seq_Transmit_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c008:	68fb      	ldr	r3, [r7, #12]
2400c00a:	22ff      	movs	r2, #255	; 0xff
2400c00c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c00e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c012:	61fb      	str	r3, [r7, #28]
2400c014:	e007      	b.n	2400c026 <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c016:	68fb      	ldr	r3, [r7, #12]
2400c018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c01a:	b29a      	uxth	r2, r3
2400c01c:	68fb      	ldr	r3, [r7, #12]
2400c01e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400c020:	68fb      	ldr	r3, [r7, #12]
2400c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c024:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400c026:	68fb      	ldr	r3, [r7, #12]
2400c028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c02a:	2b11      	cmp	r3, #17
2400c02c:	d10e      	bne.n	2400c04c <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c030:	2baa      	cmp	r3, #170	; 0xaa
2400c032:	d003      	beq.n	2400c03c <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
2400c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c036:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400c03a:	d101      	bne.n	2400c040 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
2400c03c:	2301      	movs	r3, #1
2400c03e:	e000      	b.n	2400c042 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
2400c040:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400c042:	2b00      	cmp	r3, #0
2400c044:	d102      	bne.n	2400c04c <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400c046:	2300      	movs	r3, #0
2400c048:	61bb      	str	r3, [r7, #24]
2400c04a:	e00a      	b.n	2400c062 <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400c04c:	68f8      	ldr	r0, [r7, #12]
2400c04e:	f003 f865 	bl	2400f11c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400c052:	68fb      	ldr	r3, [r7, #12]
2400c054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c056:	b29b      	uxth	r3, r3
2400c058:	2bff      	cmp	r3, #255	; 0xff
2400c05a:	d802      	bhi.n	2400c062 <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400c05c:	68fb      	ldr	r3, [r7, #12]
2400c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c060:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400c062:	68fb      	ldr	r3, [r7, #12]
2400c064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c066:	2b00      	cmp	r3, #0
2400c068:	d070      	beq.n	2400c14c <HAL_I2C_Master_Seq_Transmit_DMA+0x1b8>
    {
      if (hi2c->hdmatx != NULL)
2400c06a:	68fb      	ldr	r3, [r7, #12]
2400c06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c06e:	2b00      	cmp	r3, #0
2400c070:	d020      	beq.n	2400c0b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400c072:	68fb      	ldr	r3, [r7, #12]
2400c074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c076:	4a46      	ldr	r2, [pc, #280]	; (2400c190 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>)
2400c078:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400c07a:	68fb      	ldr	r3, [r7, #12]
2400c07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c07e:	4a45      	ldr	r2, [pc, #276]	; (2400c194 <HAL_I2C_Master_Seq_Transmit_DMA+0x200>)
2400c080:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400c082:	68fb      	ldr	r3, [r7, #12]
2400c084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c086:	2200      	movs	r2, #0
2400c088:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400c08a:	68fb      	ldr	r3, [r7, #12]
2400c08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c08e:	2200      	movs	r2, #0
2400c090:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c092:	68fb      	ldr	r3, [r7, #12]
2400c094:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400c096:	6879      	ldr	r1, [r7, #4]
2400c098:	68fb      	ldr	r3, [r7, #12]
2400c09a:	681b      	ldr	r3, [r3, #0]
2400c09c:	3328      	adds	r3, #40	; 0x28
2400c09e:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400c0a0:	68fb      	ldr	r3, [r7, #12]
2400c0a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c0a4:	f7f7 fe44 	bl	24003d30 <HAL_DMA_Start_IT>
2400c0a8:	4603      	mov	r3, r0
2400c0aa:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400c0ac:	7dfb      	ldrb	r3, [r7, #23]
2400c0ae:	2b00      	cmp	r3, #0
2400c0b0:	d138      	bne.n	2400c124 <HAL_I2C_Master_Seq_Transmit_DMA+0x190>
2400c0b2:	e013      	b.n	2400c0dc <HAL_I2C_Master_Seq_Transmit_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400c0b4:	68fb      	ldr	r3, [r7, #12]
2400c0b6:	2220      	movs	r2, #32
2400c0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c0bc:	68fb      	ldr	r3, [r7, #12]
2400c0be:	2200      	movs	r2, #0
2400c0c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c0c4:	68fb      	ldr	r3, [r7, #12]
2400c0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c0c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c0cc:	68fb      	ldr	r3, [r7, #12]
2400c0ce:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400c0d0:	68fb      	ldr	r3, [r7, #12]
2400c0d2:	2200      	movs	r2, #0
2400c0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400c0d8:	2301      	movs	r3, #1
2400c0da:	e050      	b.n	2400c17e <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to write */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c0dc:	68fb      	ldr	r3, [r7, #12]
2400c0de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c0e0:	b2da      	uxtb	r2, r3
2400c0e2:	8979      	ldrh	r1, [r7, #10]
2400c0e4:	69bb      	ldr	r3, [r7, #24]
2400c0e6:	9300      	str	r3, [sp, #0]
2400c0e8:	69fb      	ldr	r3, [r7, #28]
2400c0ea:	68f8      	ldr	r0, [r7, #12]
2400c0ec:	f002 ff22 	bl	2400ef34 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400c0f0:	68fb      	ldr	r3, [r7, #12]
2400c0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c0f4:	b29a      	uxth	r2, r3
2400c0f6:	68fb      	ldr	r3, [r7, #12]
2400c0f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c0fa:	1ad3      	subs	r3, r2, r3
2400c0fc:	b29a      	uxth	r2, r3
2400c0fe:	68fb      	ldr	r3, [r7, #12]
2400c100:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c102:	68fb      	ldr	r3, [r7, #12]
2400c104:	2200      	movs	r2, #0
2400c106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c10a:	2110      	movs	r1, #16
2400c10c:	68f8      	ldr	r0, [r7, #12]
2400c10e:	f002 ff43 	bl	2400ef98 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400c112:	68fb      	ldr	r3, [r7, #12]
2400c114:	681b      	ldr	r3, [r3, #0]
2400c116:	681a      	ldr	r2, [r3, #0]
2400c118:	68fb      	ldr	r3, [r7, #12]
2400c11a:	681b      	ldr	r3, [r3, #0]
2400c11c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c120:	601a      	str	r2, [r3, #0]
2400c122:	e029      	b.n	2400c178 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400c124:	68fb      	ldr	r3, [r7, #12]
2400c126:	2220      	movs	r2, #32
2400c128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c12c:	68fb      	ldr	r3, [r7, #12]
2400c12e:	2200      	movs	r2, #0
2400c130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c134:	68fb      	ldr	r3, [r7, #12]
2400c136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c138:	f043 0210 	orr.w	r2, r3, #16
2400c13c:	68fb      	ldr	r3, [r7, #12]
2400c13e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c140:	68fb      	ldr	r3, [r7, #12]
2400c142:	2200      	movs	r2, #0
2400c144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400c148:	2301      	movs	r3, #1
2400c14a:	e018      	b.n	2400c17e <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400c14c:	68fb      	ldr	r3, [r7, #12]
2400c14e:	4a12      	ldr	r2, [pc, #72]	; (2400c198 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>)
2400c150:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c152:	68fb      	ldr	r3, [r7, #12]
2400c154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c156:	b2da      	uxtb	r2, r3
2400c158:	8979      	ldrh	r1, [r7, #10]
2400c15a:	4b0b      	ldr	r3, [pc, #44]	; (2400c188 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
2400c15c:	9300      	str	r3, [sp, #0]
2400c15e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c162:	68f8      	ldr	r0, [r7, #12]
2400c164:	f002 fee6 	bl	2400ef34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c168:	68fb      	ldr	r3, [r7, #12]
2400c16a:	2200      	movs	r2, #0
2400c16c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c170:	2101      	movs	r1, #1
2400c172:	68f8      	ldr	r0, [r7, #12]
2400c174:	f002 ff10 	bl	2400ef98 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400c178:	2300      	movs	r3, #0
2400c17a:	e000      	b.n	2400c17e <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400c17c:	2302      	movs	r3, #2
  }
}
2400c17e:	4618      	mov	r0, r3
2400c180:	3720      	adds	r7, #32
2400c182:	46bd      	mov	sp, r7
2400c184:	bd80      	pop	{r7, pc}
2400c186:	bf00      	nop
2400c188:	80002000 	.word	0x80002000
2400c18c:	2400d3cd 	.word	0x2400d3cd
2400c190:	2400e56f 	.word	0x2400e56f
2400c194:	2400e841 	.word	0x2400e841
2400c198:	2400cf77 	.word	0x2400cf77

2400c19c <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
2400c19c:	b580      	push	{r7, lr}
2400c19e:	b088      	sub	sp, #32
2400c1a0:	af02      	add	r7, sp, #8
2400c1a2:	60f8      	str	r0, [r7, #12]
2400c1a4:	607a      	str	r2, [r7, #4]
2400c1a6:	461a      	mov	r2, r3
2400c1a8:	460b      	mov	r3, r1
2400c1aa:	817b      	strh	r3, [r7, #10]
2400c1ac:	4613      	mov	r3, r2
2400c1ae:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400c1b0:	4b3a      	ldr	r3, [pc, #232]	; (2400c29c <HAL_I2C_Master_Seq_Receive_IT+0x100>)
2400c1b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c1b4:	68fb      	ldr	r3, [r7, #12]
2400c1b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c1ba:	b2db      	uxtb	r3, r3
2400c1bc:	2b20      	cmp	r3, #32
2400c1be:	d167      	bne.n	2400c290 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c1c0:	68fb      	ldr	r3, [r7, #12]
2400c1c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c1c6:	2b01      	cmp	r3, #1
2400c1c8:	d101      	bne.n	2400c1ce <HAL_I2C_Master_Seq_Receive_IT+0x32>
2400c1ca:	2302      	movs	r3, #2
2400c1cc:	e061      	b.n	2400c292 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
2400c1ce:	68fb      	ldr	r3, [r7, #12]
2400c1d0:	2201      	movs	r2, #1
2400c1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400c1d6:	68fb      	ldr	r3, [r7, #12]
2400c1d8:	2222      	movs	r2, #34	; 0x22
2400c1da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400c1de:	68fb      	ldr	r3, [r7, #12]
2400c1e0:	2210      	movs	r2, #16
2400c1e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c1e6:	68fb      	ldr	r3, [r7, #12]
2400c1e8:	2200      	movs	r2, #0
2400c1ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c1ec:	68fb      	ldr	r3, [r7, #12]
2400c1ee:	687a      	ldr	r2, [r7, #4]
2400c1f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c1f2:	68fb      	ldr	r3, [r7, #12]
2400c1f4:	893a      	ldrh	r2, [r7, #8]
2400c1f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400c1f8:	68fb      	ldr	r3, [r7, #12]
2400c1fa:	6a3a      	ldr	r2, [r7, #32]
2400c1fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400c1fe:	68fb      	ldr	r3, [r7, #12]
2400c200:	4a27      	ldr	r2, [pc, #156]	; (2400c2a0 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
2400c202:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c204:	68fb      	ldr	r3, [r7, #12]
2400c206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c208:	b29b      	uxth	r3, r3
2400c20a:	2bff      	cmp	r3, #255	; 0xff
2400c20c:	d906      	bls.n	2400c21c <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c20e:	68fb      	ldr	r3, [r7, #12]
2400c210:	22ff      	movs	r2, #255	; 0xff
2400c212:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c218:	617b      	str	r3, [r7, #20]
2400c21a:	e007      	b.n	2400c22c <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c21c:	68fb      	ldr	r3, [r7, #12]
2400c21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c220:	b29a      	uxth	r2, r3
2400c222:	68fb      	ldr	r3, [r7, #12]
2400c224:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400c226:	68fb      	ldr	r3, [r7, #12]
2400c228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c22a:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c22c:	68fb      	ldr	r3, [r7, #12]
2400c22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c230:	2b12      	cmp	r3, #18
2400c232:	d10e      	bne.n	2400c252 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400c234:	6a3b      	ldr	r3, [r7, #32]
2400c236:	2baa      	cmp	r3, #170	; 0xaa
2400c238:	d003      	beq.n	2400c242 <HAL_I2C_Master_Seq_Receive_IT+0xa6>
2400c23a:	6a3b      	ldr	r3, [r7, #32]
2400c23c:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400c240:	d101      	bne.n	2400c246 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
2400c242:	2301      	movs	r3, #1
2400c244:	e000      	b.n	2400c248 <HAL_I2C_Master_Seq_Receive_IT+0xac>
2400c246:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c248:	2b00      	cmp	r3, #0
2400c24a:	d102      	bne.n	2400c252 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400c24c:	2300      	movs	r3, #0
2400c24e:	613b      	str	r3, [r7, #16]
2400c250:	e00a      	b.n	2400c268 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400c252:	68f8      	ldr	r0, [r7, #12]
2400c254:	f002 ff62 	bl	2400f11c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400c258:	68fb      	ldr	r3, [r7, #12]
2400c25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c25c:	b29b      	uxth	r3, r3
2400c25e:	2bff      	cmp	r3, #255	; 0xff
2400c260:	d802      	bhi.n	2400c268 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400c262:	68fb      	ldr	r3, [r7, #12]
2400c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c266:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c268:	68fb      	ldr	r3, [r7, #12]
2400c26a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c26c:	b2da      	uxtb	r2, r3
2400c26e:	8979      	ldrh	r1, [r7, #10]
2400c270:	693b      	ldr	r3, [r7, #16]
2400c272:	9300      	str	r3, [sp, #0]
2400c274:	697b      	ldr	r3, [r7, #20]
2400c276:	68f8      	ldr	r0, [r7, #12]
2400c278:	f002 fe5c 	bl	2400ef34 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c27c:	68fb      	ldr	r3, [r7, #12]
2400c27e:	2200      	movs	r2, #0
2400c280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400c284:	2102      	movs	r1, #2
2400c286:	68f8      	ldr	r0, [r7, #12]
2400c288:	f002 fe86 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400c28c:	2300      	movs	r3, #0
2400c28e:	e000      	b.n	2400c292 <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400c290:	2302      	movs	r3, #2
  }
}
2400c292:	4618      	mov	r0, r3
2400c294:	3718      	adds	r7, #24
2400c296:	46bd      	mov	sp, r7
2400c298:	bd80      	pop	{r7, pc}
2400c29a:	bf00      	nop
2400c29c:	80002400 	.word	0x80002400
2400c2a0:	2400cf77 	.word	0x2400cf77

2400c2a4 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400c2a4:	b580      	push	{r7, lr}
2400c2a6:	b08a      	sub	sp, #40	; 0x28
2400c2a8:	af02      	add	r7, sp, #8
2400c2aa:	60f8      	str	r0, [r7, #12]
2400c2ac:	607a      	str	r2, [r7, #4]
2400c2ae:	461a      	mov	r2, r3
2400c2b0:	460b      	mov	r3, r1
2400c2b2:	817b      	strh	r3, [r7, #10]
2400c2b4:	4613      	mov	r3, r2
2400c2b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400c2b8:	4b77      	ldr	r3, [pc, #476]	; (2400c498 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400c2ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c2bc:	68fb      	ldr	r3, [r7, #12]
2400c2be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c2c2:	b2db      	uxtb	r3, r3
2400c2c4:	2b20      	cmp	r3, #32
2400c2c6:	f040 80e1 	bne.w	2400c48c <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c2ca:	68fb      	ldr	r3, [r7, #12]
2400c2cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c2d0:	2b01      	cmp	r3, #1
2400c2d2:	d101      	bne.n	2400c2d8 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
2400c2d4:	2302      	movs	r3, #2
2400c2d6:	e0da      	b.n	2400c48e <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
2400c2d8:	68fb      	ldr	r3, [r7, #12]
2400c2da:	2201      	movs	r2, #1
2400c2dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400c2e0:	68fb      	ldr	r3, [r7, #12]
2400c2e2:	2222      	movs	r2, #34	; 0x22
2400c2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400c2e8:	68fb      	ldr	r3, [r7, #12]
2400c2ea:	2210      	movs	r2, #16
2400c2ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c2f0:	68fb      	ldr	r3, [r7, #12]
2400c2f2:	2200      	movs	r2, #0
2400c2f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c2f6:	68fb      	ldr	r3, [r7, #12]
2400c2f8:	687a      	ldr	r2, [r7, #4]
2400c2fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c2fc:	68fb      	ldr	r3, [r7, #12]
2400c2fe:	893a      	ldrh	r2, [r7, #8]
2400c300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2400c302:	68fb      	ldr	r3, [r7, #12]
2400c304:	6aba      	ldr	r2, [r7, #40]	; 0x28
2400c306:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400c308:	68fb      	ldr	r3, [r7, #12]
2400c30a:	4a64      	ldr	r2, [pc, #400]	; (2400c49c <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
2400c30c:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c30e:	68fb      	ldr	r3, [r7, #12]
2400c310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c312:	b29b      	uxth	r3, r3
2400c314:	2bff      	cmp	r3, #255	; 0xff
2400c316:	d906      	bls.n	2400c326 <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c318:	68fb      	ldr	r3, [r7, #12]
2400c31a:	22ff      	movs	r2, #255	; 0xff
2400c31c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2400c31e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400c322:	61fb      	str	r3, [r7, #28]
2400c324:	e007      	b.n	2400c336 <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c326:	68fb      	ldr	r3, [r7, #12]
2400c328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c32a:	b29a      	uxth	r2, r3
2400c32c:	68fb      	ldr	r3, [r7, #12]
2400c32e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
2400c330:	68fb      	ldr	r3, [r7, #12]
2400c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c334:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c336:	68fb      	ldr	r3, [r7, #12]
2400c338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c33a:	2b12      	cmp	r3, #18
2400c33c:	d10e      	bne.n	2400c35c <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400c33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c340:	2baa      	cmp	r3, #170	; 0xaa
2400c342:	d003      	beq.n	2400c34c <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
2400c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
2400c346:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400c34a:	d101      	bne.n	2400c350 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
2400c34c:	2301      	movs	r3, #1
2400c34e:	e000      	b.n	2400c352 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
2400c350:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400c352:	2b00      	cmp	r3, #0
2400c354:	d102      	bne.n	2400c35c <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400c356:	2300      	movs	r3, #0
2400c358:	61bb      	str	r3, [r7, #24]
2400c35a:	e00a      	b.n	2400c372 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400c35c:	68f8      	ldr	r0, [r7, #12]
2400c35e:	f002 fedd 	bl	2400f11c <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400c362:	68fb      	ldr	r3, [r7, #12]
2400c364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c366:	b29b      	uxth	r3, r3
2400c368:	2bff      	cmp	r3, #255	; 0xff
2400c36a:	d802      	bhi.n	2400c372 <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400c36c:	68fb      	ldr	r3, [r7, #12]
2400c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400c370:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400c372:	68fb      	ldr	r3, [r7, #12]
2400c374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c376:	2b00      	cmp	r3, #0
2400c378:	d070      	beq.n	2400c45c <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
2400c37a:	68fb      	ldr	r3, [r7, #12]
2400c37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c37e:	2b00      	cmp	r3, #0
2400c380:	d020      	beq.n	2400c3c4 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400c382:	68fb      	ldr	r3, [r7, #12]
2400c384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c386:	4a46      	ldr	r2, [pc, #280]	; (2400c4a0 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
2400c388:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400c38a:	68fb      	ldr	r3, [r7, #12]
2400c38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c38e:	4a45      	ldr	r2, [pc, #276]	; (2400c4a4 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
2400c390:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400c392:	68fb      	ldr	r3, [r7, #12]
2400c394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c396:	2200      	movs	r2, #0
2400c398:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400c39a:	68fb      	ldr	r3, [r7, #12]
2400c39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c39e:	2200      	movs	r2, #0
2400c3a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c3a2:	68fb      	ldr	r3, [r7, #12]
2400c3a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400c3a6:	68fb      	ldr	r3, [r7, #12]
2400c3a8:	681b      	ldr	r3, [r3, #0]
2400c3aa:	3324      	adds	r3, #36	; 0x24
2400c3ac:	4619      	mov	r1, r3
2400c3ae:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400c3b0:	68fb      	ldr	r3, [r7, #12]
2400c3b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c3b4:	f7f7 fcbc 	bl	24003d30 <HAL_DMA_Start_IT>
2400c3b8:	4603      	mov	r3, r0
2400c3ba:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400c3bc:	7dfb      	ldrb	r3, [r7, #23]
2400c3be:	2b00      	cmp	r3, #0
2400c3c0:	d138      	bne.n	2400c434 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
2400c3c2:	e013      	b.n	2400c3ec <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400c3c4:	68fb      	ldr	r3, [r7, #12]
2400c3c6:	2220      	movs	r2, #32
2400c3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c3cc:	68fb      	ldr	r3, [r7, #12]
2400c3ce:	2200      	movs	r2, #0
2400c3d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c3d4:	68fb      	ldr	r3, [r7, #12]
2400c3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c3d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c3dc:	68fb      	ldr	r3, [r7, #12]
2400c3de:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2400c3e0:	68fb      	ldr	r3, [r7, #12]
2400c3e2:	2200      	movs	r2, #0
2400c3e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400c3e8:	2301      	movs	r3, #1
2400c3ea:	e050      	b.n	2400c48e <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400c3ec:	68fb      	ldr	r3, [r7, #12]
2400c3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c3f0:	b2da      	uxtb	r2, r3
2400c3f2:	8979      	ldrh	r1, [r7, #10]
2400c3f4:	69bb      	ldr	r3, [r7, #24]
2400c3f6:	9300      	str	r3, [sp, #0]
2400c3f8:	69fb      	ldr	r3, [r7, #28]
2400c3fa:	68f8      	ldr	r0, [r7, #12]
2400c3fc:	f002 fd9a 	bl	2400ef34 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400c400:	68fb      	ldr	r3, [r7, #12]
2400c402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c404:	b29a      	uxth	r2, r3
2400c406:	68fb      	ldr	r3, [r7, #12]
2400c408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c40a:	1ad3      	subs	r3, r2, r3
2400c40c:	b29a      	uxth	r2, r3
2400c40e:	68fb      	ldr	r3, [r7, #12]
2400c410:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c412:	68fb      	ldr	r3, [r7, #12]
2400c414:	2200      	movs	r2, #0
2400c416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400c41a:	2110      	movs	r1, #16
2400c41c:	68f8      	ldr	r0, [r7, #12]
2400c41e:	f002 fdbb 	bl	2400ef98 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400c422:	68fb      	ldr	r3, [r7, #12]
2400c424:	681b      	ldr	r3, [r3, #0]
2400c426:	681a      	ldr	r2, [r3, #0]
2400c428:	68fb      	ldr	r3, [r7, #12]
2400c42a:	681b      	ldr	r3, [r3, #0]
2400c42c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400c430:	601a      	str	r2, [r3, #0]
2400c432:	e029      	b.n	2400c488 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400c434:	68fb      	ldr	r3, [r7, #12]
2400c436:	2220      	movs	r2, #32
2400c438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c43c:	68fb      	ldr	r3, [r7, #12]
2400c43e:	2200      	movs	r2, #0
2400c440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c444:	68fb      	ldr	r3, [r7, #12]
2400c446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c448:	f043 0210 	orr.w	r2, r3, #16
2400c44c:	68fb      	ldr	r3, [r7, #12]
2400c44e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400c450:	68fb      	ldr	r3, [r7, #12]
2400c452:	2200      	movs	r2, #0
2400c454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400c458:	2301      	movs	r3, #1
2400c45a:	e018      	b.n	2400c48e <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400c45c:	68fb      	ldr	r3, [r7, #12]
2400c45e:	4a12      	ldr	r2, [pc, #72]	; (2400c4a8 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
2400c460:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c462:	68fb      	ldr	r3, [r7, #12]
2400c464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c466:	b2da      	uxtb	r2, r3
2400c468:	8979      	ldrh	r1, [r7, #10]
2400c46a:	4b0b      	ldr	r3, [pc, #44]	; (2400c498 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400c46c:	9300      	str	r3, [sp, #0]
2400c46e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c472:	68f8      	ldr	r0, [r7, #12]
2400c474:	f002 fd5e 	bl	2400ef34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c478:	68fb      	ldr	r3, [r7, #12]
2400c47a:	2200      	movs	r2, #0
2400c47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c480:	2101      	movs	r1, #1
2400c482:	68f8      	ldr	r0, [r7, #12]
2400c484:	f002 fd88 	bl	2400ef98 <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400c488:	2300      	movs	r3, #0
2400c48a:	e000      	b.n	2400c48e <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400c48c:	2302      	movs	r3, #2
  }
}
2400c48e:	4618      	mov	r0, r3
2400c490:	3720      	adds	r7, #32
2400c492:	46bd      	mov	sp, r7
2400c494:	bd80      	pop	{r7, pc}
2400c496:	bf00      	nop
2400c498:	80002400 	.word	0x80002400
2400c49c:	2400d3cd 	.word	0x2400d3cd
2400c4a0:	2400e645 	.word	0x2400e645
2400c4a4:	2400e841 	.word	0x2400e841
2400c4a8:	2400cf77 	.word	0x2400cf77

2400c4ac <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400c4ac:	b580      	push	{r7, lr}
2400c4ae:	b084      	sub	sp, #16
2400c4b0:	af00      	add	r7, sp, #0
2400c4b2:	60f8      	str	r0, [r7, #12]
2400c4b4:	60b9      	str	r1, [r7, #8]
2400c4b6:	603b      	str	r3, [r7, #0]
2400c4b8:	4613      	mov	r3, r2
2400c4ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400c4bc:	68fb      	ldr	r3, [r7, #12]
2400c4be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c4c2:	b2db      	uxtb	r3, r3
2400c4c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400c4c8:	2b28      	cmp	r3, #40	; 0x28
2400c4ca:	f040 808a 	bne.w	2400c5e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
2400c4ce:	68bb      	ldr	r3, [r7, #8]
2400c4d0:	2b00      	cmp	r3, #0
2400c4d2:	d002      	beq.n	2400c4da <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
2400c4d4:	88fb      	ldrh	r3, [r7, #6]
2400c4d6:	2b00      	cmp	r3, #0
2400c4d8:	d105      	bne.n	2400c4e6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c4da:	68fb      	ldr	r3, [r7, #12]
2400c4dc:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c4e0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c4e2:	2301      	movs	r3, #1
2400c4e4:	e07e      	b.n	2400c5e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400c4e6:	f248 0101 	movw	r1, #32769	; 0x8001
2400c4ea:	68f8      	ldr	r0, [r7, #12]
2400c4ec:	f002 fdb8 	bl	2400f060 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c4f0:	68fb      	ldr	r3, [r7, #12]
2400c4f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c4f6:	2b01      	cmp	r3, #1
2400c4f8:	d101      	bne.n	2400c4fe <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
2400c4fa:	2302      	movs	r3, #2
2400c4fc:	e072      	b.n	2400c5e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
2400c4fe:	68fb      	ldr	r3, [r7, #12]
2400c500:	2201      	movs	r2, #1
2400c502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400c506:	68fb      	ldr	r3, [r7, #12]
2400c508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c50c:	b2db      	uxtb	r3, r3
2400c50e:	2b2a      	cmp	r3, #42	; 0x2a
2400c510:	d12a      	bne.n	2400c568 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400c512:	2102      	movs	r1, #2
2400c514:	68f8      	ldr	r0, [r7, #12]
2400c516:	f002 fda3 	bl	2400f060 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400c51a:	68fb      	ldr	r3, [r7, #12]
2400c51c:	681b      	ldr	r3, [r3, #0]
2400c51e:	681b      	ldr	r3, [r3, #0]
2400c520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c528:	d11e      	bne.n	2400c568 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400c52a:	68fb      	ldr	r3, [r7, #12]
2400c52c:	681b      	ldr	r3, [r3, #0]
2400c52e:	681a      	ldr	r2, [r3, #0]
2400c530:	68fb      	ldr	r3, [r7, #12]
2400c532:	681b      	ldr	r3, [r3, #0]
2400c534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c538:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
2400c53a:	68fb      	ldr	r3, [r7, #12]
2400c53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c53e:	2b00      	cmp	r3, #0
2400c540:	d012      	beq.n	2400c568 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400c542:	68fb      	ldr	r3, [r7, #12]
2400c544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c546:	4a29      	ldr	r2, [pc, #164]	; (2400c5ec <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
2400c548:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400c54a:	68fb      	ldr	r3, [r7, #12]
2400c54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c54e:	4618      	mov	r0, r3
2400c550:	f7f8 f976 	bl	24004840 <HAL_DMA_Abort_IT>
2400c554:	4603      	mov	r3, r0
2400c556:	2b00      	cmp	r3, #0
2400c558:	d006      	beq.n	2400c568 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400c55a:	68fb      	ldr	r3, [r7, #12]
2400c55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c560:	68fa      	ldr	r2, [r7, #12]
2400c562:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400c564:	4610      	mov	r0, r2
2400c566:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400c568:	68fb      	ldr	r3, [r7, #12]
2400c56a:	2229      	movs	r2, #41	; 0x29
2400c56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400c570:	68fb      	ldr	r3, [r7, #12]
2400c572:	2220      	movs	r2, #32
2400c574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c578:	68fb      	ldr	r3, [r7, #12]
2400c57a:	2200      	movs	r2, #0
2400c57c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c57e:	68fb      	ldr	r3, [r7, #12]
2400c580:	681b      	ldr	r3, [r3, #0]
2400c582:	685a      	ldr	r2, [r3, #4]
2400c584:	68fb      	ldr	r3, [r7, #12]
2400c586:	681b      	ldr	r3, [r3, #0]
2400c588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c58c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c58e:	68fb      	ldr	r3, [r7, #12]
2400c590:	68ba      	ldr	r2, [r7, #8]
2400c592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c594:	68fb      	ldr	r3, [r7, #12]
2400c596:	88fa      	ldrh	r2, [r7, #6]
2400c598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c59a:	68fb      	ldr	r3, [r7, #12]
2400c59c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c59e:	b29a      	uxth	r2, r3
2400c5a0:	68fb      	ldr	r3, [r7, #12]
2400c5a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400c5a4:	68fb      	ldr	r3, [r7, #12]
2400c5a6:	683a      	ldr	r2, [r7, #0]
2400c5a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400c5aa:	68fb      	ldr	r3, [r7, #12]
2400c5ac:	4a10      	ldr	r2, [pc, #64]	; (2400c5f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
2400c5ae:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2400c5b0:	68fb      	ldr	r3, [r7, #12]
2400c5b2:	681b      	ldr	r3, [r3, #0]
2400c5b4:	699b      	ldr	r3, [r3, #24]
2400c5b6:	0c1b      	lsrs	r3, r3, #16
2400c5b8:	b2db      	uxtb	r3, r3
2400c5ba:	f003 0301 	and.w	r3, r3, #1
2400c5be:	b2db      	uxtb	r3, r3
2400c5c0:	2b01      	cmp	r3, #1
2400c5c2:	d103      	bne.n	2400c5cc <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400c5c4:	68fb      	ldr	r3, [r7, #12]
2400c5c6:	681b      	ldr	r3, [r3, #0]
2400c5c8:	2208      	movs	r2, #8
2400c5ca:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c5cc:	68fb      	ldr	r3, [r7, #12]
2400c5ce:	2200      	movs	r2, #0
2400c5d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400c5d4:	f248 0101 	movw	r1, #32769	; 0x8001
2400c5d8:	68f8      	ldr	r0, [r7, #12]
2400c5da:	f002 fcdd 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400c5de:	2300      	movs	r3, #0
2400c5e0:	e000      	b.n	2400c5e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
2400c5e2:	2301      	movs	r3, #1
  }
}
2400c5e4:	4618      	mov	r0, r3
2400c5e6:	3710      	adds	r7, #16
2400c5e8:	46bd      	mov	sp, r7
2400c5ea:	bd80      	pop	{r7, pc}
2400c5ec:	2400eab5 	.word	0x2400eab5
2400c5f0:	2400d1c7 	.word	0x2400d1c7

2400c5f4 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                 uint32_t XferOptions)
{
2400c5f4:	b580      	push	{r7, lr}
2400c5f6:	b086      	sub	sp, #24
2400c5f8:	af00      	add	r7, sp, #0
2400c5fa:	60f8      	str	r0, [r7, #12]
2400c5fc:	60b9      	str	r1, [r7, #8]
2400c5fe:	603b      	str	r3, [r7, #0]
2400c600:	4613      	mov	r3, r2
2400c602:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400c604:	68fb      	ldr	r3, [r7, #12]
2400c606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c60a:	b2db      	uxtb	r3, r3
2400c60c:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400c610:	2b28      	cmp	r3, #40	; 0x28
2400c612:	f040 811a 	bne.w	2400c84a <HAL_I2C_Slave_Seq_Transmit_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
2400c616:	68bb      	ldr	r3, [r7, #8]
2400c618:	2b00      	cmp	r3, #0
2400c61a:	d002      	beq.n	2400c622 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
2400c61c:	88fb      	ldrh	r3, [r7, #6]
2400c61e:	2b00      	cmp	r3, #0
2400c620:	d105      	bne.n	2400c62e <HAL_I2C_Slave_Seq_Transmit_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c622:	68fb      	ldr	r3, [r7, #12]
2400c624:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c628:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c62a:	2301      	movs	r3, #1
2400c62c:	e10e      	b.n	2400c84c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c62e:	68fb      	ldr	r3, [r7, #12]
2400c630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c634:	2b01      	cmp	r3, #1
2400c636:	d101      	bne.n	2400c63c <HAL_I2C_Slave_Seq_Transmit_DMA+0x48>
2400c638:	2302      	movs	r3, #2
2400c63a:	e107      	b.n	2400c84c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
2400c63c:	68fb      	ldr	r3, [r7, #12]
2400c63e:	2201      	movs	r2, #1
2400c640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400c644:	f248 0101 	movw	r1, #32769	; 0x8001
2400c648:	68f8      	ldr	r0, [r7, #12]
2400c64a:	f002 fd09 	bl	2400f060 <I2C_Disable_IRQ>

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400c64e:	68fb      	ldr	r3, [r7, #12]
2400c650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c654:	b2db      	uxtb	r3, r3
2400c656:	2b2a      	cmp	r3, #42	; 0x2a
2400c658:	d12b      	bne.n	2400c6b2 <HAL_I2C_Slave_Seq_Transmit_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400c65a:	2102      	movs	r1, #2
2400c65c:	68f8      	ldr	r0, [r7, #12]
2400c65e:	f002 fcff 	bl	2400f060 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400c662:	68fb      	ldr	r3, [r7, #12]
2400c664:	681b      	ldr	r3, [r3, #0]
2400c666:	681b      	ldr	r3, [r3, #0]
2400c668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400c66c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400c670:	d14c      	bne.n	2400c70c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400c672:	68fb      	ldr	r3, [r7, #12]
2400c674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c676:	2b00      	cmp	r3, #0
2400c678:	d048      	beq.n	2400c70c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400c67a:	68fb      	ldr	r3, [r7, #12]
2400c67c:	681b      	ldr	r3, [r3, #0]
2400c67e:	681a      	ldr	r2, [r3, #0]
2400c680:	68fb      	ldr	r3, [r7, #12]
2400c682:	681b      	ldr	r3, [r3, #0]
2400c684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c688:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400c68a:	68fb      	ldr	r3, [r7, #12]
2400c68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c68e:	4a71      	ldr	r2, [pc, #452]	; (2400c854 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
2400c690:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400c692:	68fb      	ldr	r3, [r7, #12]
2400c694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c696:	4618      	mov	r0, r3
2400c698:	f7f8 f8d2 	bl	24004840 <HAL_DMA_Abort_IT>
2400c69c:	4603      	mov	r3, r0
2400c69e:	2b00      	cmp	r3, #0
2400c6a0:	d034      	beq.n	2400c70c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400c6a2:	68fb      	ldr	r3, [r7, #12]
2400c6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400c6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c6a8:	68fa      	ldr	r2, [r7, #12]
2400c6aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400c6ac:	4610      	mov	r0, r2
2400c6ae:	4798      	blx	r3
2400c6b0:	e02c      	b.n	2400c70c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400c6b2:	68fb      	ldr	r3, [r7, #12]
2400c6b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c6b8:	b2db      	uxtb	r3, r3
2400c6ba:	2b29      	cmp	r3, #41	; 0x29
2400c6bc:	d126      	bne.n	2400c70c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400c6be:	68fb      	ldr	r3, [r7, #12]
2400c6c0:	681b      	ldr	r3, [r3, #0]
2400c6c2:	681b      	ldr	r3, [r3, #0]
2400c6c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400c6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400c6cc:	d11e      	bne.n	2400c70c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400c6ce:	68fb      	ldr	r3, [r7, #12]
2400c6d0:	681b      	ldr	r3, [r3, #0]
2400c6d2:	681a      	ldr	r2, [r3, #0]
2400c6d4:	68fb      	ldr	r3, [r7, #12]
2400c6d6:	681b      	ldr	r3, [r3, #0]
2400c6d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400c6dc:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400c6de:	68fb      	ldr	r3, [r7, #12]
2400c6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c6e2:	2b00      	cmp	r3, #0
2400c6e4:	d012      	beq.n	2400c70c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400c6e6:	68fb      	ldr	r3, [r7, #12]
2400c6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c6ea:	4a5a      	ldr	r2, [pc, #360]	; (2400c854 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
2400c6ec:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400c6ee:	68fb      	ldr	r3, [r7, #12]
2400c6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c6f2:	4618      	mov	r0, r3
2400c6f4:	f7f8 f8a4 	bl	24004840 <HAL_DMA_Abort_IT>
2400c6f8:	4603      	mov	r3, r0
2400c6fa:	2b00      	cmp	r3, #0
2400c6fc:	d006      	beq.n	2400c70c <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400c6fe:	68fb      	ldr	r3, [r7, #12]
2400c700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c704:	68fa      	ldr	r2, [r7, #12]
2400c706:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400c708:	4610      	mov	r0, r2
2400c70a:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400c70c:	68fb      	ldr	r3, [r7, #12]
2400c70e:	2229      	movs	r2, #41	; 0x29
2400c710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400c714:	68fb      	ldr	r3, [r7, #12]
2400c716:	2220      	movs	r2, #32
2400c718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c71c:	68fb      	ldr	r3, [r7, #12]
2400c71e:	2200      	movs	r2, #0
2400c720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c722:	68fb      	ldr	r3, [r7, #12]
2400c724:	681b      	ldr	r3, [r3, #0]
2400c726:	685a      	ldr	r2, [r3, #4]
2400c728:	68fb      	ldr	r3, [r7, #12]
2400c72a:	681b      	ldr	r3, [r3, #0]
2400c72c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c730:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c732:	68fb      	ldr	r3, [r7, #12]
2400c734:	68ba      	ldr	r2, [r7, #8]
2400c736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c738:	68fb      	ldr	r3, [r7, #12]
2400c73a:	88fa      	ldrh	r2, [r7, #6]
2400c73c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c73e:	68fb      	ldr	r3, [r7, #12]
2400c740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c742:	b29a      	uxth	r2, r3
2400c744:	68fb      	ldr	r3, [r7, #12]
2400c746:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400c748:	68fb      	ldr	r3, [r7, #12]
2400c74a:	683a      	ldr	r2, [r7, #0]
2400c74c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400c74e:	68fb      	ldr	r3, [r7, #12]
2400c750:	4a41      	ldr	r2, [pc, #260]	; (2400c858 <HAL_I2C_Slave_Seq_Transmit_DMA+0x264>)
2400c752:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
2400c754:	68fb      	ldr	r3, [r7, #12]
2400c756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c758:	2b00      	cmp	r3, #0
2400c75a:	d020      	beq.n	2400c79e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400c75c:	68fb      	ldr	r3, [r7, #12]
2400c75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c760:	4a3e      	ldr	r2, [pc, #248]	; (2400c85c <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
2400c762:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400c764:	68fb      	ldr	r3, [r7, #12]
2400c766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c768:	4a3d      	ldr	r2, [pc, #244]	; (2400c860 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
2400c76a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400c76c:	68fb      	ldr	r3, [r7, #12]
2400c76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c770:	2200      	movs	r2, #0
2400c772:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400c774:	68fb      	ldr	r3, [r7, #12]
2400c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c778:	2200      	movs	r2, #0
2400c77a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c77c:	68fb      	ldr	r3, [r7, #12]
2400c77e:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400c780:	68b9      	ldr	r1, [r7, #8]
2400c782:	68fb      	ldr	r3, [r7, #12]
2400c784:	681b      	ldr	r3, [r3, #0]
2400c786:	3328      	adds	r3, #40	; 0x28
2400c788:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400c78a:	68fb      	ldr	r3, [r7, #12]
2400c78c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c78e:	f7f7 facf 	bl	24003d30 <HAL_DMA_Start_IT>
2400c792:	4603      	mov	r3, r0
2400c794:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400c796:	7dfb      	ldrb	r3, [r7, #23]
2400c798:	2b00      	cmp	r3, #0
2400c79a:	d12b      	bne.n	2400c7f4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x200>
2400c79c:	e013      	b.n	2400c7c6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c79e:	68fb      	ldr	r3, [r7, #12]
2400c7a0:	2228      	movs	r2, #40	; 0x28
2400c7a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c7a6:	68fb      	ldr	r3, [r7, #12]
2400c7a8:	2200      	movs	r2, #0
2400c7aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c7ae:	68fb      	ldr	r3, [r7, #12]
2400c7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c7b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400c7b6:	68fb      	ldr	r3, [r7, #12]
2400c7b8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c7ba:	68fb      	ldr	r3, [r7, #12]
2400c7bc:	2200      	movs	r2, #0
2400c7be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c7c2:	2301      	movs	r3, #1
2400c7c4:	e042      	b.n	2400c84c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400c7c6:	68fb      	ldr	r3, [r7, #12]
2400c7c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c7ca:	b29a      	uxth	r2, r3
2400c7cc:	68fb      	ldr	r3, [r7, #12]
2400c7ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400c7d0:	1ad3      	subs	r3, r2, r3
2400c7d2:	b29a      	uxth	r2, r3
2400c7d4:	68fb      	ldr	r3, [r7, #12]
2400c7d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400c7d8:	68fb      	ldr	r3, [r7, #12]
2400c7da:	2200      	movs	r2, #0
2400c7dc:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2400c7de:	68fb      	ldr	r3, [r7, #12]
2400c7e0:	681b      	ldr	r3, [r3, #0]
2400c7e2:	699b      	ldr	r3, [r3, #24]
2400c7e4:	0c1b      	lsrs	r3, r3, #16
2400c7e6:	b2db      	uxtb	r3, r3
2400c7e8:	f003 0301 	and.w	r3, r3, #1
2400c7ec:	b2db      	uxtb	r3, r3
2400c7ee:	2b01      	cmp	r3, #1
2400c7f0:	d118      	bne.n	2400c824 <HAL_I2C_Slave_Seq_Transmit_DMA+0x230>
2400c7f2:	e013      	b.n	2400c81c <HAL_I2C_Slave_Seq_Transmit_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c7f4:	68fb      	ldr	r3, [r7, #12]
2400c7f6:	2228      	movs	r2, #40	; 0x28
2400c7f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c7fc:	68fb      	ldr	r3, [r7, #12]
2400c7fe:	2200      	movs	r2, #0
2400c800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c804:	68fb      	ldr	r3, [r7, #12]
2400c806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400c808:	f043 0210 	orr.w	r2, r3, #16
2400c80c:	68fb      	ldr	r3, [r7, #12]
2400c80e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400c810:	68fb      	ldr	r3, [r7, #12]
2400c812:	2200      	movs	r2, #0
2400c814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400c818:	2301      	movs	r3, #1
2400c81a:	e017      	b.n	2400c84c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400c81c:	68fb      	ldr	r3, [r7, #12]
2400c81e:	681b      	ldr	r3, [r3, #0]
2400c820:	2208      	movs	r2, #8
2400c822:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c824:	68fb      	ldr	r3, [r7, #12]
2400c826:	2200      	movs	r2, #0
2400c828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400c82c:	68fb      	ldr	r3, [r7, #12]
2400c82e:	681b      	ldr	r3, [r3, #0]
2400c830:	681a      	ldr	r2, [r3, #0]
2400c832:	68fb      	ldr	r3, [r7, #12]
2400c834:	681b      	ldr	r3, [r3, #0]
2400c836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400c83a:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* Enable ERR, STOP, NACK, ADDR interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400c83c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400c840:	68f8      	ldr	r0, [r7, #12]
2400c842:	f002 fba9 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400c846:	2300      	movs	r3, #0
2400c848:	e000      	b.n	2400c84c <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
2400c84a:	2301      	movs	r3, #1
  }
}
2400c84c:	4618      	mov	r0, r3
2400c84e:	3718      	adds	r7, #24
2400c850:	46bd      	mov	sp, r7
2400c852:	bd80      	pop	{r7, pc}
2400c854:	2400eab5 	.word	0x2400eab5
2400c858:	2400d5b5 	.word	0x2400d5b5
2400c85c:	2400e605 	.word	0x2400e605
2400c860:	2400e841 	.word	0x2400e841

2400c864 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
2400c864:	b580      	push	{r7, lr}
2400c866:	b084      	sub	sp, #16
2400c868:	af00      	add	r7, sp, #0
2400c86a:	60f8      	str	r0, [r7, #12]
2400c86c:	60b9      	str	r1, [r7, #8]
2400c86e:	603b      	str	r3, [r7, #0]
2400c870:	4613      	mov	r3, r2
2400c872:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400c874:	68fb      	ldr	r3, [r7, #12]
2400c876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c87a:	b2db      	uxtb	r3, r3
2400c87c:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400c880:	2b28      	cmp	r3, #40	; 0x28
2400c882:	f040 808a 	bne.w	2400c99a <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
2400c886:	68bb      	ldr	r3, [r7, #8]
2400c888:	2b00      	cmp	r3, #0
2400c88a:	d002      	beq.n	2400c892 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
2400c88c:	88fb      	ldrh	r3, [r7, #6]
2400c88e:	2b00      	cmp	r3, #0
2400c890:	d105      	bne.n	2400c89e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c892:	68fb      	ldr	r3, [r7, #12]
2400c894:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c898:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c89a:	2301      	movs	r3, #1
2400c89c:	e07e      	b.n	2400c99c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400c89e:	f248 0102 	movw	r1, #32770	; 0x8002
2400c8a2:	68f8      	ldr	r0, [r7, #12]
2400c8a4:	f002 fbdc 	bl	2400f060 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c8a8:	68fb      	ldr	r3, [r7, #12]
2400c8aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c8ae:	2b01      	cmp	r3, #1
2400c8b0:	d101      	bne.n	2400c8b6 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
2400c8b2:	2302      	movs	r3, #2
2400c8b4:	e072      	b.n	2400c99c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
2400c8b6:	68fb      	ldr	r3, [r7, #12]
2400c8b8:	2201      	movs	r2, #1
2400c8ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400c8be:	68fb      	ldr	r3, [r7, #12]
2400c8c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c8c4:	b2db      	uxtb	r3, r3
2400c8c6:	2b29      	cmp	r3, #41	; 0x29
2400c8c8:	d12a      	bne.n	2400c920 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c8ca:	2101      	movs	r1, #1
2400c8cc:	68f8      	ldr	r0, [r7, #12]
2400c8ce:	f002 fbc7 	bl	2400f060 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400c8d2:	68fb      	ldr	r3, [r7, #12]
2400c8d4:	681b      	ldr	r3, [r3, #0]
2400c8d6:	681b      	ldr	r3, [r3, #0]
2400c8d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400c8dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400c8e0:	d11e      	bne.n	2400c920 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400c8e2:	68fb      	ldr	r3, [r7, #12]
2400c8e4:	681b      	ldr	r3, [r3, #0]
2400c8e6:	681a      	ldr	r2, [r3, #0]
2400c8e8:	68fb      	ldr	r3, [r7, #12]
2400c8ea:	681b      	ldr	r3, [r3, #0]
2400c8ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400c8f0:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400c8f2:	68fb      	ldr	r3, [r7, #12]
2400c8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c8f6:	2b00      	cmp	r3, #0
2400c8f8:	d012      	beq.n	2400c920 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400c8fa:	68fb      	ldr	r3, [r7, #12]
2400c8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c8fe:	4a29      	ldr	r2, [pc, #164]	; (2400c9a4 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
2400c900:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400c902:	68fb      	ldr	r3, [r7, #12]
2400c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c906:	4618      	mov	r0, r3
2400c908:	f7f7 ff9a 	bl	24004840 <HAL_DMA_Abort_IT>
2400c90c:	4603      	mov	r3, r0
2400c90e:	2b00      	cmp	r3, #0
2400c910:	d006      	beq.n	2400c920 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400c912:	68fb      	ldr	r3, [r7, #12]
2400c914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400c916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400c918:	68fa      	ldr	r2, [r7, #12]
2400c91a:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400c91c:	4610      	mov	r0, r2
2400c91e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400c920:	68fb      	ldr	r3, [r7, #12]
2400c922:	222a      	movs	r2, #42	; 0x2a
2400c924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400c928:	68fb      	ldr	r3, [r7, #12]
2400c92a:	2220      	movs	r2, #32
2400c92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c930:	68fb      	ldr	r3, [r7, #12]
2400c932:	2200      	movs	r2, #0
2400c934:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c936:	68fb      	ldr	r3, [r7, #12]
2400c938:	681b      	ldr	r3, [r3, #0]
2400c93a:	685a      	ldr	r2, [r3, #4]
2400c93c:	68fb      	ldr	r3, [r7, #12]
2400c93e:	681b      	ldr	r3, [r3, #0]
2400c940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400c944:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c946:	68fb      	ldr	r3, [r7, #12]
2400c948:	68ba      	ldr	r2, [r7, #8]
2400c94a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400c94c:	68fb      	ldr	r3, [r7, #12]
2400c94e:	88fa      	ldrh	r2, [r7, #6]
2400c950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400c952:	68fb      	ldr	r3, [r7, #12]
2400c954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400c956:	b29a      	uxth	r2, r3
2400c958:	68fb      	ldr	r3, [r7, #12]
2400c95a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400c95c:	68fb      	ldr	r3, [r7, #12]
2400c95e:	683a      	ldr	r2, [r7, #0]
2400c960:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400c962:	68fb      	ldr	r3, [r7, #12]
2400c964:	4a10      	ldr	r2, [pc, #64]	; (2400c9a8 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
2400c966:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
2400c968:	68fb      	ldr	r3, [r7, #12]
2400c96a:	681b      	ldr	r3, [r3, #0]
2400c96c:	699b      	ldr	r3, [r3, #24]
2400c96e:	0c1b      	lsrs	r3, r3, #16
2400c970:	b2db      	uxtb	r3, r3
2400c972:	f003 0301 	and.w	r3, r3, #1
2400c976:	b2db      	uxtb	r3, r3
2400c978:	2b00      	cmp	r3, #0
2400c97a:	d103      	bne.n	2400c984 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400c97c:	68fb      	ldr	r3, [r7, #12]
2400c97e:	681b      	ldr	r3, [r3, #0]
2400c980:	2208      	movs	r2, #8
2400c982:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c984:	68fb      	ldr	r3, [r7, #12]
2400c986:	2200      	movs	r2, #0
2400c988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400c98c:	f248 0102 	movw	r1, #32770	; 0x8002
2400c990:	68f8      	ldr	r0, [r7, #12]
2400c992:	f002 fb01 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400c996:	2300      	movs	r3, #0
2400c998:	e000      	b.n	2400c99c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
2400c99a:	2301      	movs	r3, #1
  }
}
2400c99c:	4618      	mov	r0, r3
2400c99e:	3710      	adds	r7, #16
2400c9a0:	46bd      	mov	sp, r7
2400c9a2:	bd80      	pop	{r7, pc}
2400c9a4:	2400eab5 	.word	0x2400eab5
2400c9a8:	2400d1c7 	.word	0x2400d1c7

2400c9ac <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400c9ac:	b580      	push	{r7, lr}
2400c9ae:	b086      	sub	sp, #24
2400c9b0:	af00      	add	r7, sp, #0
2400c9b2:	60f8      	str	r0, [r7, #12]
2400c9b4:	60b9      	str	r1, [r7, #8]
2400c9b6:	603b      	str	r3, [r7, #0]
2400c9b8:	4613      	mov	r3, r2
2400c9ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400c9bc:	68fb      	ldr	r3, [r7, #12]
2400c9be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400c9c2:	b2db      	uxtb	r3, r3
2400c9c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400c9c8:	2b28      	cmp	r3, #40	; 0x28
2400c9ca:	f040 811a 	bne.w	2400cc02 <HAL_I2C_Slave_Seq_Receive_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
2400c9ce:	68bb      	ldr	r3, [r7, #8]
2400c9d0:	2b00      	cmp	r3, #0
2400c9d2:	d002      	beq.n	2400c9da <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
2400c9d4:	88fb      	ldrh	r3, [r7, #6]
2400c9d6:	2b00      	cmp	r3, #0
2400c9d8:	d105      	bne.n	2400c9e6 <HAL_I2C_Slave_Seq_Receive_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c9da:	68fb      	ldr	r3, [r7, #12]
2400c9dc:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c9e0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2400c9e2:	2301      	movs	r3, #1
2400c9e4:	e10e      	b.n	2400cc04 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400c9e6:	f248 0102 	movw	r1, #32770	; 0x8002
2400c9ea:	68f8      	ldr	r0, [r7, #12]
2400c9ec:	f002 fb38 	bl	2400f060 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c9f0:	68fb      	ldr	r3, [r7, #12]
2400c9f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400c9f6:	2b01      	cmp	r3, #1
2400c9f8:	d101      	bne.n	2400c9fe <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
2400c9fa:	2302      	movs	r3, #2
2400c9fc:	e102      	b.n	2400cc04 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
2400c9fe:	68fb      	ldr	r3, [r7, #12]
2400ca00:	2201      	movs	r2, #1
2400ca02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400ca06:	68fb      	ldr	r3, [r7, #12]
2400ca08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ca0c:	b2db      	uxtb	r3, r3
2400ca0e:	2b29      	cmp	r3, #41	; 0x29
2400ca10:	d12b      	bne.n	2400ca6a <HAL_I2C_Slave_Seq_Receive_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400ca12:	2101      	movs	r1, #1
2400ca14:	68f8      	ldr	r0, [r7, #12]
2400ca16:	f002 fb23 	bl	2400f060 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400ca1a:	68fb      	ldr	r3, [r7, #12]
2400ca1c:	681b      	ldr	r3, [r3, #0]
2400ca1e:	681b      	ldr	r3, [r3, #0]
2400ca20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400ca24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400ca28:	d14c      	bne.n	2400cac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400ca2a:	68fb      	ldr	r3, [r7, #12]
2400ca2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ca2e:	2b00      	cmp	r3, #0
2400ca30:	d048      	beq.n	2400cac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400ca32:	68fb      	ldr	r3, [r7, #12]
2400ca34:	681b      	ldr	r3, [r3, #0]
2400ca36:	681a      	ldr	r2, [r3, #0]
2400ca38:	68fb      	ldr	r3, [r7, #12]
2400ca3a:	681b      	ldr	r3, [r3, #0]
2400ca3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400ca40:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400ca42:	68fb      	ldr	r3, [r7, #12]
2400ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ca46:	4a71      	ldr	r2, [pc, #452]	; (2400cc0c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
2400ca48:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400ca4a:	68fb      	ldr	r3, [r7, #12]
2400ca4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ca4e:	4618      	mov	r0, r3
2400ca50:	f7f7 fef6 	bl	24004840 <HAL_DMA_Abort_IT>
2400ca54:	4603      	mov	r3, r0
2400ca56:	2b00      	cmp	r3, #0
2400ca58:	d034      	beq.n	2400cac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400ca5a:	68fb      	ldr	r3, [r7, #12]
2400ca5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400ca5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400ca60:	68fa      	ldr	r2, [r7, #12]
2400ca62:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400ca64:	4610      	mov	r0, r2
2400ca66:	4798      	blx	r3
2400ca68:	e02c      	b.n	2400cac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400ca6a:	68fb      	ldr	r3, [r7, #12]
2400ca6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ca70:	b2db      	uxtb	r3, r3
2400ca72:	2b2a      	cmp	r3, #42	; 0x2a
2400ca74:	d126      	bne.n	2400cac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400ca76:	68fb      	ldr	r3, [r7, #12]
2400ca78:	681b      	ldr	r3, [r3, #0]
2400ca7a:	681b      	ldr	r3, [r3, #0]
2400ca7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400ca80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400ca84:	d11e      	bne.n	2400cac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400ca86:	68fb      	ldr	r3, [r7, #12]
2400ca88:	681b      	ldr	r3, [r3, #0]
2400ca8a:	681a      	ldr	r2, [r3, #0]
2400ca8c:	68fb      	ldr	r3, [r7, #12]
2400ca8e:	681b      	ldr	r3, [r3, #0]
2400ca90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400ca94:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400ca96:	68fb      	ldr	r3, [r7, #12]
2400ca98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ca9a:	2b00      	cmp	r3, #0
2400ca9c:	d012      	beq.n	2400cac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400ca9e:	68fb      	ldr	r3, [r7, #12]
2400caa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400caa2:	4a5a      	ldr	r2, [pc, #360]	; (2400cc0c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
2400caa4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400caa6:	68fb      	ldr	r3, [r7, #12]
2400caa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400caaa:	4618      	mov	r0, r3
2400caac:	f7f7 fec8 	bl	24004840 <HAL_DMA_Abort_IT>
2400cab0:	4603      	mov	r3, r0
2400cab2:	2b00      	cmp	r3, #0
2400cab4:	d006      	beq.n	2400cac4 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400cab6:	68fb      	ldr	r3, [r7, #12]
2400cab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400caba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400cabc:	68fa      	ldr	r2, [r7, #12]
2400cabe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400cac0:	4610      	mov	r0, r2
2400cac2:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400cac4:	68fb      	ldr	r3, [r7, #12]
2400cac6:	222a      	movs	r2, #42	; 0x2a
2400cac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400cacc:	68fb      	ldr	r3, [r7, #12]
2400cace:	2220      	movs	r2, #32
2400cad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400cad4:	68fb      	ldr	r3, [r7, #12]
2400cad6:	2200      	movs	r2, #0
2400cad8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400cada:	68fb      	ldr	r3, [r7, #12]
2400cadc:	681b      	ldr	r3, [r3, #0]
2400cade:	685a      	ldr	r2, [r3, #4]
2400cae0:	68fb      	ldr	r3, [r7, #12]
2400cae2:	681b      	ldr	r3, [r3, #0]
2400cae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400cae8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400caea:	68fb      	ldr	r3, [r7, #12]
2400caec:	68ba      	ldr	r2, [r7, #8]
2400caee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2400caf0:	68fb      	ldr	r3, [r7, #12]
2400caf2:	88fa      	ldrh	r2, [r7, #6]
2400caf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400caf6:	68fb      	ldr	r3, [r7, #12]
2400caf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cafa:	b29a      	uxth	r2, r3
2400cafc:	68fb      	ldr	r3, [r7, #12]
2400cafe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
2400cb00:	68fb      	ldr	r3, [r7, #12]
2400cb02:	683a      	ldr	r2, [r7, #0]
2400cb04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400cb06:	68fb      	ldr	r3, [r7, #12]
2400cb08:	4a41      	ldr	r2, [pc, #260]	; (2400cc10 <HAL_I2C_Slave_Seq_Receive_DMA+0x264>)
2400cb0a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
2400cb0c:	68fb      	ldr	r3, [r7, #12]
2400cb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb10:	2b00      	cmp	r3, #0
2400cb12:	d020      	beq.n	2400cb56 <HAL_I2C_Slave_Seq_Receive_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400cb14:	68fb      	ldr	r3, [r7, #12]
2400cb16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb18:	4a3e      	ldr	r2, [pc, #248]	; (2400cc14 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
2400cb1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400cb1c:	68fb      	ldr	r3, [r7, #12]
2400cb1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb20:	4a3d      	ldr	r2, [pc, #244]	; (2400cc18 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
2400cb22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400cb24:	68fb      	ldr	r3, [r7, #12]
2400cb26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb28:	2200      	movs	r2, #0
2400cb2a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400cb2c:	68fb      	ldr	r3, [r7, #12]
2400cb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400cb30:	2200      	movs	r2, #0
2400cb32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400cb34:	68fb      	ldr	r3, [r7, #12]
2400cb36:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400cb38:	68fb      	ldr	r3, [r7, #12]
2400cb3a:	681b      	ldr	r3, [r3, #0]
2400cb3c:	3324      	adds	r3, #36	; 0x24
2400cb3e:	4619      	mov	r1, r3
2400cb40:	68ba      	ldr	r2, [r7, #8]
                                       (uint32_t)pData, hi2c->XferSize);
2400cb42:	68fb      	ldr	r3, [r7, #12]
2400cb44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400cb46:	f7f7 f8f3 	bl	24003d30 <HAL_DMA_Start_IT>
2400cb4a:	4603      	mov	r3, r0
2400cb4c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400cb4e:	7dfb      	ldrb	r3, [r7, #23]
2400cb50:	2b00      	cmp	r3, #0
2400cb52:	d12b      	bne.n	2400cbac <HAL_I2C_Slave_Seq_Receive_DMA+0x200>
2400cb54:	e013      	b.n	2400cb7e <HAL_I2C_Slave_Seq_Receive_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400cb56:	68fb      	ldr	r3, [r7, #12]
2400cb58:	2228      	movs	r2, #40	; 0x28
2400cb5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cb5e:	68fb      	ldr	r3, [r7, #12]
2400cb60:	2200      	movs	r2, #0
2400cb62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400cb66:	68fb      	ldr	r3, [r7, #12]
2400cb68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cb6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2400cb6e:	68fb      	ldr	r3, [r7, #12]
2400cb70:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400cb72:	68fb      	ldr	r3, [r7, #12]
2400cb74:	2200      	movs	r2, #0
2400cb76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400cb7a:	2301      	movs	r3, #1
2400cb7c:	e042      	b.n	2400cc04 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400cb7e:	68fb      	ldr	r3, [r7, #12]
2400cb80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400cb82:	b29a      	uxth	r2, r3
2400cb84:	68fb      	ldr	r3, [r7, #12]
2400cb86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400cb88:	1ad3      	subs	r3, r2, r3
2400cb8a:	b29a      	uxth	r2, r3
2400cb8c:	68fb      	ldr	r3, [r7, #12]
2400cb8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400cb90:	68fb      	ldr	r3, [r7, #12]
2400cb92:	2200      	movs	r2, #0
2400cb94:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
2400cb96:	68fb      	ldr	r3, [r7, #12]
2400cb98:	681b      	ldr	r3, [r3, #0]
2400cb9a:	699b      	ldr	r3, [r3, #24]
2400cb9c:	0c1b      	lsrs	r3, r3, #16
2400cb9e:	b2db      	uxtb	r3, r3
2400cba0:	f003 0301 	and.w	r3, r3, #1
2400cba4:	b2db      	uxtb	r3, r3
2400cba6:	2b00      	cmp	r3, #0
2400cba8:	d118      	bne.n	2400cbdc <HAL_I2C_Slave_Seq_Receive_DMA+0x230>
2400cbaa:	e013      	b.n	2400cbd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400cbac:	68fb      	ldr	r3, [r7, #12]
2400cbae:	2228      	movs	r2, #40	; 0x28
2400cbb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cbb4:	68fb      	ldr	r3, [r7, #12]
2400cbb6:	2200      	movs	r2, #0
2400cbb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400cbbc:	68fb      	ldr	r3, [r7, #12]
2400cbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cbc0:	f043 0210 	orr.w	r2, r3, #16
2400cbc4:	68fb      	ldr	r3, [r7, #12]
2400cbc6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2400cbc8:	68fb      	ldr	r3, [r7, #12]
2400cbca:	2200      	movs	r2, #0
2400cbcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2400cbd0:	2301      	movs	r3, #1
2400cbd2:	e017      	b.n	2400cc04 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400cbd4:	68fb      	ldr	r3, [r7, #12]
2400cbd6:	681b      	ldr	r3, [r3, #0]
2400cbd8:	2208      	movs	r2, #8
2400cbda:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cbdc:	68fb      	ldr	r3, [r7, #12]
2400cbde:	2200      	movs	r2, #0
2400cbe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400cbe4:	68fb      	ldr	r3, [r7, #12]
2400cbe6:	681b      	ldr	r3, [r3, #0]
2400cbe8:	681a      	ldr	r2, [r3, #0]
2400cbea:	68fb      	ldr	r3, [r7, #12]
2400cbec:	681b      	ldr	r3, [r3, #0]
2400cbee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400cbf2:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400cbf4:	f248 0102 	movw	r1, #32770	; 0x8002
2400cbf8:	68f8      	ldr	r0, [r7, #12]
2400cbfa:	f002 f9cd 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400cbfe:	2300      	movs	r3, #0
2400cc00:	e000      	b.n	2400cc04 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
2400cc02:	2301      	movs	r3, #1
  }
}
2400cc04:	4618      	mov	r0, r3
2400cc06:	3718      	adds	r7, #24
2400cc08:	46bd      	mov	sp, r7
2400cc0a:	bd80      	pop	{r7, pc}
2400cc0c:	2400eab5 	.word	0x2400eab5
2400cc10:	2400d5b5 	.word	0x2400d5b5
2400cc14:	2400e6dd 	.word	0x2400e6dd
2400cc18:	2400e841 	.word	0x2400e841

2400cc1c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400cc1c:	b580      	push	{r7, lr}
2400cc1e:	b082      	sub	sp, #8
2400cc20:	af00      	add	r7, sp, #0
2400cc22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400cc24:	687b      	ldr	r3, [r7, #4]
2400cc26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cc2a:	b2db      	uxtb	r3, r3
2400cc2c:	2b20      	cmp	r3, #32
2400cc2e:	d10d      	bne.n	2400cc4c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
2400cc30:	687b      	ldr	r3, [r7, #4]
2400cc32:	2228      	movs	r2, #40	; 0x28
2400cc34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
2400cc38:	687b      	ldr	r3, [r7, #4]
2400cc3a:	4a07      	ldr	r2, [pc, #28]	; (2400cc58 <HAL_I2C_EnableListen_IT+0x3c>)
2400cc3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400cc3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400cc42:	6878      	ldr	r0, [r7, #4]
2400cc44:	f002 f9a8 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400cc48:	2300      	movs	r3, #0
2400cc4a:	e000      	b.n	2400cc4e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
2400cc4c:	2302      	movs	r3, #2
  }
}
2400cc4e:	4618      	mov	r0, r3
2400cc50:	3708      	adds	r7, #8
2400cc52:	46bd      	mov	sp, r7
2400cc54:	bd80      	pop	{r7, pc}
2400cc56:	bf00      	nop
2400cc58:	2400d1c7 	.word	0x2400d1c7

2400cc5c <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400cc5c:	b580      	push	{r7, lr}
2400cc5e:	b084      	sub	sp, #16
2400cc60:	af00      	add	r7, sp, #0
2400cc62:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400cc64:	687b      	ldr	r3, [r7, #4]
2400cc66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cc6a:	b2db      	uxtb	r3, r3
2400cc6c:	2b28      	cmp	r3, #40	; 0x28
2400cc6e:	d121      	bne.n	2400ccb4 <HAL_I2C_DisableListen_IT+0x58>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
2400cc70:	687b      	ldr	r3, [r7, #4]
2400cc72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cc76:	b2db      	uxtb	r3, r3
2400cc78:	f003 0303 	and.w	r3, r3, #3
2400cc7c:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
2400cc7e:	687b      	ldr	r3, [r7, #4]
2400cc80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400cc84:	b2db      	uxtb	r3, r3
2400cc86:	461a      	mov	r2, r3
2400cc88:	68fb      	ldr	r3, [r7, #12]
2400cc8a:	431a      	orrs	r2, r3
2400cc8c:	687b      	ldr	r3, [r7, #4]
2400cc8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
2400cc90:	687b      	ldr	r3, [r7, #4]
2400cc92:	2220      	movs	r2, #32
2400cc94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400cc98:	687b      	ldr	r3, [r7, #4]
2400cc9a:	2200      	movs	r2, #0
2400cc9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->XferISR = NULL;
2400cca0:	687b      	ldr	r3, [r7, #4]
2400cca2:	2200      	movs	r2, #0
2400cca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400cca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400ccaa:	6878      	ldr	r0, [r7, #4]
2400ccac:	f002 f9d8 	bl	2400f060 <I2C_Disable_IRQ>

    return HAL_OK;
2400ccb0:	2300      	movs	r3, #0
2400ccb2:	e000      	b.n	2400ccb6 <HAL_I2C_DisableListen_IT+0x5a>
  }
  else
  {
    return HAL_BUSY;
2400ccb4:	2302      	movs	r3, #2
  }
}
2400ccb6:	4618      	mov	r0, r3
2400ccb8:	3710      	adds	r7, #16
2400ccba:	46bd      	mov	sp, r7
2400ccbc:	bd80      	pop	{r7, pc}
	...

2400ccc0 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
2400ccc0:	b580      	push	{r7, lr}
2400ccc2:	b084      	sub	sp, #16
2400ccc4:	af02      	add	r7, sp, #8
2400ccc6:	6078      	str	r0, [r7, #4]
2400ccc8:	460b      	mov	r3, r1
2400ccca:	807b      	strh	r3, [r7, #2]
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
2400cccc:	687b      	ldr	r3, [r7, #4]
2400ccce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400ccd2:	b2db      	uxtb	r3, r3
2400ccd4:	2b10      	cmp	r3, #16
2400ccd6:	d13c      	bne.n	2400cd52 <HAL_I2C_Master_Abort_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ccd8:	687b      	ldr	r3, [r7, #4]
2400ccda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400ccde:	2b01      	cmp	r3, #1
2400cce0:	d101      	bne.n	2400cce6 <HAL_I2C_Master_Abort_IT+0x26>
2400cce2:	2302      	movs	r3, #2
2400cce4:	e036      	b.n	2400cd54 <HAL_I2C_Master_Abort_IT+0x94>
2400cce6:	687b      	ldr	r3, [r7, #4]
2400cce8:	2201      	movs	r2, #1
2400ccea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400ccee:	687b      	ldr	r3, [r7, #4]
2400ccf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ccf4:	b2db      	uxtb	r3, r3
2400ccf6:	2b21      	cmp	r3, #33	; 0x21
2400ccf8:	d107      	bne.n	2400cd0a <HAL_I2C_Master_Abort_IT+0x4a>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400ccfa:	2101      	movs	r1, #1
2400ccfc:	6878      	ldr	r0, [r7, #4]
2400ccfe:	f002 f9af 	bl	2400f060 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400cd02:	687b      	ldr	r3, [r7, #4]
2400cd04:	2211      	movs	r2, #17
2400cd06:	631a      	str	r2, [r3, #48]	; 0x30
2400cd08:	e00c      	b.n	2400cd24 <HAL_I2C_Master_Abort_IT+0x64>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400cd0a:	687b      	ldr	r3, [r7, #4]
2400cd0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cd10:	b2db      	uxtb	r3, r3
2400cd12:	2b22      	cmp	r3, #34	; 0x22
2400cd14:	d106      	bne.n	2400cd24 <HAL_I2C_Master_Abort_IT+0x64>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400cd16:	2102      	movs	r1, #2
2400cd18:	6878      	ldr	r0, [r7, #4]
2400cd1a:	f002 f9a1 	bl	2400f060 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400cd1e:	687b      	ldr	r3, [r7, #4]
2400cd20:	2212      	movs	r2, #18
2400cd22:	631a      	str	r2, [r3, #48]	; 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
2400cd24:	687b      	ldr	r3, [r7, #4]
2400cd26:	2260      	movs	r2, #96	; 0x60
2400cd28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
2400cd2c:	8879      	ldrh	r1, [r7, #2]
2400cd2e:	4b0b      	ldr	r3, [pc, #44]	; (2400cd5c <HAL_I2C_Master_Abort_IT+0x9c>)
2400cd30:	9300      	str	r3, [sp, #0]
2400cd32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400cd36:	2201      	movs	r2, #1
2400cd38:	6878      	ldr	r0, [r7, #4]
2400cd3a:	f002 f8fb 	bl	2400ef34 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400cd3e:	687b      	ldr	r3, [r7, #4]
2400cd40:	2200      	movs	r2, #0
2400cd42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400cd46:	2120      	movs	r1, #32
2400cd48:	6878      	ldr	r0, [r7, #4]
2400cd4a:	f002 f925 	bl	2400ef98 <I2C_Enable_IRQ>

    return HAL_OK;
2400cd4e:	2300      	movs	r3, #0
2400cd50:	e000      	b.n	2400cd54 <HAL_I2C_Master_Abort_IT+0x94>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
2400cd52:	2301      	movs	r3, #1
  }
}
2400cd54:	4618      	mov	r0, r3
2400cd56:	3708      	adds	r7, #8
2400cd58:	46bd      	mov	sp, r7
2400cd5a:	bd80      	pop	{r7, pc}
2400cd5c:	80004000 	.word	0x80004000

2400cd60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400cd60:	b580      	push	{r7, lr}
2400cd62:	b084      	sub	sp, #16
2400cd64:	af00      	add	r7, sp, #0
2400cd66:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400cd68:	687b      	ldr	r3, [r7, #4]
2400cd6a:	681b      	ldr	r3, [r3, #0]
2400cd6c:	699b      	ldr	r3, [r3, #24]
2400cd6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400cd70:	687b      	ldr	r3, [r7, #4]
2400cd72:	681b      	ldr	r3, [r3, #0]
2400cd74:	681b      	ldr	r3, [r3, #0]
2400cd76:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
2400cd78:	687b      	ldr	r3, [r7, #4]
2400cd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400cd7c:	2b00      	cmp	r3, #0
2400cd7e:	d005      	beq.n	2400cd8c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
2400cd80:	687b      	ldr	r3, [r7, #4]
2400cd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400cd84:	68ba      	ldr	r2, [r7, #8]
2400cd86:	68f9      	ldr	r1, [r7, #12]
2400cd88:	6878      	ldr	r0, [r7, #4]
2400cd8a:	4798      	blx	r3
  }
}
2400cd8c:	bf00      	nop
2400cd8e:	3710      	adds	r7, #16
2400cd90:	46bd      	mov	sp, r7
2400cd92:	bd80      	pop	{r7, pc}

2400cd94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400cd94:	b580      	push	{r7, lr}
2400cd96:	b086      	sub	sp, #24
2400cd98:	af00      	add	r7, sp, #0
2400cd9a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400cd9c:	687b      	ldr	r3, [r7, #4]
2400cd9e:	681b      	ldr	r3, [r3, #0]
2400cda0:	699b      	ldr	r3, [r3, #24]
2400cda2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400cda4:	687b      	ldr	r3, [r7, #4]
2400cda6:	681b      	ldr	r3, [r3, #0]
2400cda8:	681b      	ldr	r3, [r3, #0]
2400cdaa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400cdac:	697b      	ldr	r3, [r7, #20]
2400cdae:	0a1b      	lsrs	r3, r3, #8
2400cdb0:	f003 0301 	and.w	r3, r3, #1
2400cdb4:	2b00      	cmp	r3, #0
2400cdb6:	d010      	beq.n	2400cdda <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400cdb8:	693b      	ldr	r3, [r7, #16]
2400cdba:	09db      	lsrs	r3, r3, #7
2400cdbc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400cdc0:	2b00      	cmp	r3, #0
2400cdc2:	d00a      	beq.n	2400cdda <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400cdc4:	687b      	ldr	r3, [r7, #4]
2400cdc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cdc8:	f043 0201 	orr.w	r2, r3, #1
2400cdcc:	687b      	ldr	r3, [r7, #4]
2400cdce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400cdd0:	687b      	ldr	r3, [r7, #4]
2400cdd2:	681b      	ldr	r3, [r3, #0]
2400cdd4:	f44f 7280 	mov.w	r2, #256	; 0x100
2400cdd8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400cdda:	697b      	ldr	r3, [r7, #20]
2400cddc:	0a9b      	lsrs	r3, r3, #10
2400cdde:	f003 0301 	and.w	r3, r3, #1
2400cde2:	2b00      	cmp	r3, #0
2400cde4:	d010      	beq.n	2400ce08 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400cde6:	693b      	ldr	r3, [r7, #16]
2400cde8:	09db      	lsrs	r3, r3, #7
2400cdea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400cdee:	2b00      	cmp	r3, #0
2400cdf0:	d00a      	beq.n	2400ce08 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400cdf2:	687b      	ldr	r3, [r7, #4]
2400cdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cdf6:	f043 0208 	orr.w	r2, r3, #8
2400cdfa:	687b      	ldr	r3, [r7, #4]
2400cdfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400cdfe:	687b      	ldr	r3, [r7, #4]
2400ce00:	681b      	ldr	r3, [r3, #0]
2400ce02:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400ce06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400ce08:	697b      	ldr	r3, [r7, #20]
2400ce0a:	0a5b      	lsrs	r3, r3, #9
2400ce0c:	f003 0301 	and.w	r3, r3, #1
2400ce10:	2b00      	cmp	r3, #0
2400ce12:	d010      	beq.n	2400ce36 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400ce14:	693b      	ldr	r3, [r7, #16]
2400ce16:	09db      	lsrs	r3, r3, #7
2400ce18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400ce1c:	2b00      	cmp	r3, #0
2400ce1e:	d00a      	beq.n	2400ce36 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400ce20:	687b      	ldr	r3, [r7, #4]
2400ce22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ce24:	f043 0202 	orr.w	r2, r3, #2
2400ce28:	687b      	ldr	r3, [r7, #4]
2400ce2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400ce2c:	687b      	ldr	r3, [r7, #4]
2400ce2e:	681b      	ldr	r3, [r3, #0]
2400ce30:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ce34:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400ce36:	687b      	ldr	r3, [r7, #4]
2400ce38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ce3a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400ce3c:	68fb      	ldr	r3, [r7, #12]
2400ce3e:	f003 030b 	and.w	r3, r3, #11
2400ce42:	2b00      	cmp	r3, #0
2400ce44:	d003      	beq.n	2400ce4e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
2400ce46:	68f9      	ldr	r1, [r7, #12]
2400ce48:	6878      	ldr	r0, [r7, #4]
2400ce4a:	f001 fa75 	bl	2400e338 <I2C_ITError>
  }
}
2400ce4e:	bf00      	nop
2400ce50:	3718      	adds	r7, #24
2400ce52:	46bd      	mov	sp, r7
2400ce54:	bd80      	pop	{r7, pc}

2400ce56 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ce56:	b480      	push	{r7}
2400ce58:	b083      	sub	sp, #12
2400ce5a:	af00      	add	r7, sp, #0
2400ce5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
2400ce5e:	bf00      	nop
2400ce60:	370c      	adds	r7, #12
2400ce62:	46bd      	mov	sp, r7
2400ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce68:	4770      	bx	lr

2400ce6a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ce6a:	b480      	push	{r7}
2400ce6c:	b083      	sub	sp, #12
2400ce6e:	af00      	add	r7, sp, #0
2400ce70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
2400ce72:	bf00      	nop
2400ce74:	370c      	adds	r7, #12
2400ce76:	46bd      	mov	sp, r7
2400ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce7c:	4770      	bx	lr

2400ce7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ce7e:	b480      	push	{r7}
2400ce80:	b083      	sub	sp, #12
2400ce82:	af00      	add	r7, sp, #0
2400ce84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
2400ce86:	bf00      	nop
2400ce88:	370c      	adds	r7, #12
2400ce8a:	46bd      	mov	sp, r7
2400ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ce90:	4770      	bx	lr

2400ce92 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ce92:	b480      	push	{r7}
2400ce94:	b083      	sub	sp, #12
2400ce96:	af00      	add	r7, sp, #0
2400ce98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
2400ce9a:	bf00      	nop
2400ce9c:	370c      	adds	r7, #12
2400ce9e:	46bd      	mov	sp, r7
2400cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cea4:	4770      	bx	lr

2400cea6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
2400cea6:	b480      	push	{r7}
2400cea8:	b083      	sub	sp, #12
2400ceaa:	af00      	add	r7, sp, #0
2400ceac:	6078      	str	r0, [r7, #4]
2400ceae:	460b      	mov	r3, r1
2400ceb0:	70fb      	strb	r3, [r7, #3]
2400ceb2:	4613      	mov	r3, r2
2400ceb4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
2400ceb6:	bf00      	nop
2400ceb8:	370c      	adds	r7, #12
2400ceba:	46bd      	mov	sp, r7
2400cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cec0:	4770      	bx	lr

2400cec2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400cec2:	b480      	push	{r7}
2400cec4:	b083      	sub	sp, #12
2400cec6:	af00      	add	r7, sp, #0
2400cec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
2400ceca:	bf00      	nop
2400cecc:	370c      	adds	r7, #12
2400cece:	46bd      	mov	sp, r7
2400ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ced4:	4770      	bx	lr

2400ced6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ced6:	b480      	push	{r7}
2400ced8:	b083      	sub	sp, #12
2400ceda:	af00      	add	r7, sp, #0
2400cedc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
2400cede:	bf00      	nop
2400cee0:	370c      	adds	r7, #12
2400cee2:	46bd      	mov	sp, r7
2400cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cee8:	4770      	bx	lr

2400ceea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400ceea:	b480      	push	{r7}
2400ceec:	b083      	sub	sp, #12
2400ceee:	af00      	add	r7, sp, #0
2400cef0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
2400cef2:	bf00      	nop
2400cef4:	370c      	adds	r7, #12
2400cef6:	46bd      	mov	sp, r7
2400cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cefc:	4770      	bx	lr

2400cefe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400cefe:	b480      	push	{r7}
2400cf00:	b083      	sub	sp, #12
2400cf02:	af00      	add	r7, sp, #0
2400cf04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
2400cf06:	bf00      	nop
2400cf08:	370c      	adds	r7, #12
2400cf0a:	46bd      	mov	sp, r7
2400cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cf10:	4770      	bx	lr

2400cf12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400cf12:	b480      	push	{r7}
2400cf14:	b083      	sub	sp, #12
2400cf16:	af00      	add	r7, sp, #0
2400cf18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
2400cf1a:	bf00      	nop
2400cf1c:	370c      	adds	r7, #12
2400cf1e:	46bd      	mov	sp, r7
2400cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cf24:	4770      	bx	lr

2400cf26 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
2400cf26:	b480      	push	{r7}
2400cf28:	b083      	sub	sp, #12
2400cf2a:	af00      	add	r7, sp, #0
2400cf2c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
2400cf2e:	687b      	ldr	r3, [r7, #4]
2400cf30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400cf34:	b2db      	uxtb	r3, r3
}
2400cf36:	4618      	mov	r0, r3
2400cf38:	370c      	adds	r7, #12
2400cf3a:	46bd      	mov	sp, r7
2400cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cf40:	4770      	bx	lr

2400cf42 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
2400cf42:	b480      	push	{r7}
2400cf44:	b083      	sub	sp, #12
2400cf46:	af00      	add	r7, sp, #0
2400cf48:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
2400cf4a:	687b      	ldr	r3, [r7, #4]
2400cf4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400cf50:	b2db      	uxtb	r3, r3
}
2400cf52:	4618      	mov	r0, r3
2400cf54:	370c      	adds	r7, #12
2400cf56:	46bd      	mov	sp, r7
2400cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cf5c:	4770      	bx	lr

2400cf5e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
2400cf5e:	b480      	push	{r7}
2400cf60:	b083      	sub	sp, #12
2400cf62:	af00      	add	r7, sp, #0
2400cf64:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
2400cf66:	687b      	ldr	r3, [r7, #4]
2400cf68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
2400cf6a:	4618      	mov	r0, r3
2400cf6c:	370c      	adds	r7, #12
2400cf6e:	46bd      	mov	sp, r7
2400cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
2400cf74:	4770      	bx	lr

2400cf76 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400cf76:	b580      	push	{r7, lr}
2400cf78:	b088      	sub	sp, #32
2400cf7a:	af02      	add	r7, sp, #8
2400cf7c:	60f8      	str	r0, [r7, #12]
2400cf7e:	60b9      	str	r1, [r7, #8]
2400cf80:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
2400cf82:	68bb      	ldr	r3, [r7, #8]
2400cf84:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400cf86:	68fb      	ldr	r3, [r7, #12]
2400cf88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400cf8c:	2b01      	cmp	r3, #1
2400cf8e:	d101      	bne.n	2400cf94 <I2C_Master_ISR_IT+0x1e>
2400cf90:	2302      	movs	r3, #2
2400cf92:	e114      	b.n	2400d1be <I2C_Master_ISR_IT+0x248>
2400cf94:	68fb      	ldr	r3, [r7, #12]
2400cf96:	2201      	movs	r2, #1
2400cf98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400cf9c:	697b      	ldr	r3, [r7, #20]
2400cf9e:	091b      	lsrs	r3, r3, #4
2400cfa0:	f003 0301 	and.w	r3, r3, #1
2400cfa4:	2b00      	cmp	r3, #0
2400cfa6:	d013      	beq.n	2400cfd0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400cfa8:	687b      	ldr	r3, [r7, #4]
2400cfaa:	091b      	lsrs	r3, r3, #4
2400cfac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400cfb0:	2b00      	cmp	r3, #0
2400cfb2:	d00d      	beq.n	2400cfd0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400cfb4:	68fb      	ldr	r3, [r7, #12]
2400cfb6:	681b      	ldr	r3, [r3, #0]
2400cfb8:	2210      	movs	r2, #16
2400cfba:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400cfbc:	68fb      	ldr	r3, [r7, #12]
2400cfbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400cfc0:	f043 0204 	orr.w	r2, r3, #4
2400cfc4:	68fb      	ldr	r3, [r7, #12]
2400cfc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400cfc8:	68f8      	ldr	r0, [r7, #12]
2400cfca:	f001 faac 	bl	2400e526 <I2C_Flush_TXDR>
2400cfce:	e0e1      	b.n	2400d194 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400cfd0:	697b      	ldr	r3, [r7, #20]
2400cfd2:	089b      	lsrs	r3, r3, #2
2400cfd4:	f003 0301 	and.w	r3, r3, #1
2400cfd8:	2b00      	cmp	r3, #0
2400cfda:	d023      	beq.n	2400d024 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400cfdc:	687b      	ldr	r3, [r7, #4]
2400cfde:	089b      	lsrs	r3, r3, #2
2400cfe0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400cfe4:	2b00      	cmp	r3, #0
2400cfe6:	d01d      	beq.n	2400d024 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400cfe8:	697b      	ldr	r3, [r7, #20]
2400cfea:	f023 0304 	bic.w	r3, r3, #4
2400cfee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400cff0:	68fb      	ldr	r3, [r7, #12]
2400cff2:	681b      	ldr	r3, [r3, #0]
2400cff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400cff6:	68fb      	ldr	r3, [r7, #12]
2400cff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400cffa:	b2d2      	uxtb	r2, r2
2400cffc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400cffe:	68fb      	ldr	r3, [r7, #12]
2400d000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d002:	1c5a      	adds	r2, r3, #1
2400d004:	68fb      	ldr	r3, [r7, #12]
2400d006:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400d008:	68fb      	ldr	r3, [r7, #12]
2400d00a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d00c:	3b01      	subs	r3, #1
2400d00e:	b29a      	uxth	r2, r3
2400d010:	68fb      	ldr	r3, [r7, #12]
2400d012:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400d014:	68fb      	ldr	r3, [r7, #12]
2400d016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d018:	b29b      	uxth	r3, r3
2400d01a:	3b01      	subs	r3, #1
2400d01c:	b29a      	uxth	r2, r3
2400d01e:	68fb      	ldr	r3, [r7, #12]
2400d020:	855a      	strh	r2, [r3, #42]	; 0x2a
2400d022:	e0b7      	b.n	2400d194 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400d024:	697b      	ldr	r3, [r7, #20]
2400d026:	085b      	lsrs	r3, r3, #1
2400d028:	f003 0301 	and.w	r3, r3, #1
2400d02c:	2b00      	cmp	r3, #0
2400d02e:	d01e      	beq.n	2400d06e <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400d030:	687b      	ldr	r3, [r7, #4]
2400d032:	085b      	lsrs	r3, r3, #1
2400d034:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400d038:	2b00      	cmp	r3, #0
2400d03a:	d018      	beq.n	2400d06e <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400d03c:	68fb      	ldr	r3, [r7, #12]
2400d03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d040:	781a      	ldrb	r2, [r3, #0]
2400d042:	68fb      	ldr	r3, [r7, #12]
2400d044:	681b      	ldr	r3, [r3, #0]
2400d046:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400d048:	68fb      	ldr	r3, [r7, #12]
2400d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d04c:	1c5a      	adds	r2, r3, #1
2400d04e:	68fb      	ldr	r3, [r7, #12]
2400d050:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
2400d052:	68fb      	ldr	r3, [r7, #12]
2400d054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d056:	3b01      	subs	r3, #1
2400d058:	b29a      	uxth	r2, r3
2400d05a:	68fb      	ldr	r3, [r7, #12]
2400d05c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
2400d05e:	68fb      	ldr	r3, [r7, #12]
2400d060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d062:	b29b      	uxth	r3, r3
2400d064:	3b01      	subs	r3, #1
2400d066:	b29a      	uxth	r2, r3
2400d068:	68fb      	ldr	r3, [r7, #12]
2400d06a:	855a      	strh	r2, [r3, #42]	; 0x2a
2400d06c:	e092      	b.n	2400d194 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400d06e:	697b      	ldr	r3, [r7, #20]
2400d070:	09db      	lsrs	r3, r3, #7
2400d072:	f003 0301 	and.w	r3, r3, #1
2400d076:	2b00      	cmp	r3, #0
2400d078:	d05d      	beq.n	2400d136 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d07a:	687b      	ldr	r3, [r7, #4]
2400d07c:	099b      	lsrs	r3, r3, #6
2400d07e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400d082:	2b00      	cmp	r3, #0
2400d084:	d057      	beq.n	2400d136 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400d086:	68fb      	ldr	r3, [r7, #12]
2400d088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d08a:	b29b      	uxth	r3, r3
2400d08c:	2b00      	cmp	r3, #0
2400d08e:	d040      	beq.n	2400d112 <I2C_Master_ISR_IT+0x19c>
2400d090:	68fb      	ldr	r3, [r7, #12]
2400d092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d094:	2b00      	cmp	r3, #0
2400d096:	d13c      	bne.n	2400d112 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400d098:	68fb      	ldr	r3, [r7, #12]
2400d09a:	681b      	ldr	r3, [r3, #0]
2400d09c:	685b      	ldr	r3, [r3, #4]
2400d09e:	b29b      	uxth	r3, r3
2400d0a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400d0a4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d0a6:	68fb      	ldr	r3, [r7, #12]
2400d0a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d0aa:	b29b      	uxth	r3, r3
2400d0ac:	2bff      	cmp	r3, #255	; 0xff
2400d0ae:	d90e      	bls.n	2400d0ce <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400d0b0:	68fb      	ldr	r3, [r7, #12]
2400d0b2:	22ff      	movs	r2, #255	; 0xff
2400d0b4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400d0b6:	68fb      	ldr	r3, [r7, #12]
2400d0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d0ba:	b2da      	uxtb	r2, r3
2400d0bc:	8a79      	ldrh	r1, [r7, #18]
2400d0be:	2300      	movs	r3, #0
2400d0c0:	9300      	str	r3, [sp, #0]
2400d0c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d0c6:	68f8      	ldr	r0, [r7, #12]
2400d0c8:	f001 ff34 	bl	2400ef34 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d0cc:	e032      	b.n	2400d134 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400d0ce:	68fb      	ldr	r3, [r7, #12]
2400d0d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d0d2:	b29a      	uxth	r2, r3
2400d0d4:	68fb      	ldr	r3, [r7, #12]
2400d0d6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400d0d8:	68fb      	ldr	r3, [r7, #12]
2400d0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d0dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d0e0:	d00b      	beq.n	2400d0fa <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400d0e2:	68fb      	ldr	r3, [r7, #12]
2400d0e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d0e6:	b2da      	uxtb	r2, r3
2400d0e8:	68fb      	ldr	r3, [r7, #12]
2400d0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d0ec:	8a79      	ldrh	r1, [r7, #18]
2400d0ee:	2000      	movs	r0, #0
2400d0f0:	9000      	str	r0, [sp, #0]
2400d0f2:	68f8      	ldr	r0, [r7, #12]
2400d0f4:	f001 ff1e 	bl	2400ef34 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d0f8:	e01c      	b.n	2400d134 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400d0fa:	68fb      	ldr	r3, [r7, #12]
2400d0fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d0fe:	b2da      	uxtb	r2, r3
2400d100:	8a79      	ldrh	r1, [r7, #18]
2400d102:	2300      	movs	r3, #0
2400d104:	9300      	str	r3, [sp, #0]
2400d106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d10a:	68f8      	ldr	r0, [r7, #12]
2400d10c:	f001 ff12 	bl	2400ef34 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d110:	e010      	b.n	2400d134 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d112:	68fb      	ldr	r3, [r7, #12]
2400d114:	681b      	ldr	r3, [r3, #0]
2400d116:	685b      	ldr	r3, [r3, #4]
2400d118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d11c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d120:	d003      	beq.n	2400d12a <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400d122:	68f8      	ldr	r0, [r7, #12]
2400d124:	f000 fd54 	bl	2400dbd0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400d128:	e034      	b.n	2400d194 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d12a:	2140      	movs	r1, #64	; 0x40
2400d12c:	68f8      	ldr	r0, [r7, #12]
2400d12e:	f001 f903 	bl	2400e338 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400d132:	e02f      	b.n	2400d194 <I2C_Master_ISR_IT+0x21e>
2400d134:	e02e      	b.n	2400d194 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400d136:	697b      	ldr	r3, [r7, #20]
2400d138:	099b      	lsrs	r3, r3, #6
2400d13a:	f003 0301 	and.w	r3, r3, #1
2400d13e:	2b00      	cmp	r3, #0
2400d140:	d028      	beq.n	2400d194 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d142:	687b      	ldr	r3, [r7, #4]
2400d144:	099b      	lsrs	r3, r3, #6
2400d146:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400d14a:	2b00      	cmp	r3, #0
2400d14c:	d022      	beq.n	2400d194 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
2400d14e:	68fb      	ldr	r3, [r7, #12]
2400d150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d152:	b29b      	uxth	r3, r3
2400d154:	2b00      	cmp	r3, #0
2400d156:	d119      	bne.n	2400d18c <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d158:	68fb      	ldr	r3, [r7, #12]
2400d15a:	681b      	ldr	r3, [r3, #0]
2400d15c:	685b      	ldr	r3, [r3, #4]
2400d15e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d166:	d015      	beq.n	2400d194 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400d168:	68fb      	ldr	r3, [r7, #12]
2400d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d16c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d170:	d108      	bne.n	2400d184 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400d172:	68fb      	ldr	r3, [r7, #12]
2400d174:	681b      	ldr	r3, [r3, #0]
2400d176:	685a      	ldr	r2, [r3, #4]
2400d178:	68fb      	ldr	r3, [r7, #12]
2400d17a:	681b      	ldr	r3, [r3, #0]
2400d17c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d180:	605a      	str	r2, [r3, #4]
2400d182:	e007      	b.n	2400d194 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400d184:	68f8      	ldr	r0, [r7, #12]
2400d186:	f000 fd23 	bl	2400dbd0 <I2C_ITMasterSeqCplt>
2400d18a:	e003      	b.n	2400d194 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d18c:	2140      	movs	r1, #64	; 0x40
2400d18e:	68f8      	ldr	r0, [r7, #12]
2400d190:	f001 f8d2 	bl	2400e338 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d194:	697b      	ldr	r3, [r7, #20]
2400d196:	095b      	lsrs	r3, r3, #5
2400d198:	f003 0301 	and.w	r3, r3, #1
2400d19c:	2b00      	cmp	r3, #0
2400d19e:	d009      	beq.n	2400d1b4 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d1a0:	687b      	ldr	r3, [r7, #4]
2400d1a2:	095b      	lsrs	r3, r3, #5
2400d1a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d1a8:	2b00      	cmp	r3, #0
2400d1aa:	d003      	beq.n	2400d1b4 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2400d1ac:	6979      	ldr	r1, [r7, #20]
2400d1ae:	68f8      	ldr	r0, [r7, #12]
2400d1b0:	f000 fdaa 	bl	2400dd08 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d1b4:	68fb      	ldr	r3, [r7, #12]
2400d1b6:	2200      	movs	r2, #0
2400d1b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d1bc:	2300      	movs	r3, #0
}
2400d1be:	4618      	mov	r0, r3
2400d1c0:	3718      	adds	r7, #24
2400d1c2:	46bd      	mov	sp, r7
2400d1c4:	bd80      	pop	{r7, pc}

2400d1c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
2400d1c6:	b580      	push	{r7, lr}
2400d1c8:	b086      	sub	sp, #24
2400d1ca:	af00      	add	r7, sp, #0
2400d1cc:	60f8      	str	r0, [r7, #12]
2400d1ce:	60b9      	str	r1, [r7, #8]
2400d1d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400d1d2:	68fb      	ldr	r3, [r7, #12]
2400d1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d1d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2400d1d8:	68bb      	ldr	r3, [r7, #8]
2400d1da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
2400d1dc:	68fb      	ldr	r3, [r7, #12]
2400d1de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d1e2:	2b01      	cmp	r3, #1
2400d1e4:	d101      	bne.n	2400d1ea <I2C_Slave_ISR_IT+0x24>
2400d1e6:	2302      	movs	r3, #2
2400d1e8:	e0ec      	b.n	2400d3c4 <I2C_Slave_ISR_IT+0x1fe>
2400d1ea:	68fb      	ldr	r3, [r7, #12]
2400d1ec:	2201      	movs	r2, #1
2400d1ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d1f2:	693b      	ldr	r3, [r7, #16]
2400d1f4:	095b      	lsrs	r3, r3, #5
2400d1f6:	f003 0301 	and.w	r3, r3, #1
2400d1fa:	2b00      	cmp	r3, #0
2400d1fc:	d009      	beq.n	2400d212 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d1fe:	687b      	ldr	r3, [r7, #4]
2400d200:	095b      	lsrs	r3, r3, #5
2400d202:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d206:	2b00      	cmp	r3, #0
2400d208:	d003      	beq.n	2400d212 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
2400d20a:	6939      	ldr	r1, [r7, #16]
2400d20c:	68f8      	ldr	r0, [r7, #12]
2400d20e:	f000 fe45 	bl	2400de9c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400d212:	693b      	ldr	r3, [r7, #16]
2400d214:	091b      	lsrs	r3, r3, #4
2400d216:	f003 0301 	and.w	r3, r3, #1
2400d21a:	2b00      	cmp	r3, #0
2400d21c:	d04d      	beq.n	2400d2ba <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400d21e:	687b      	ldr	r3, [r7, #4]
2400d220:	091b      	lsrs	r3, r3, #4
2400d222:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400d226:	2b00      	cmp	r3, #0
2400d228:	d047      	beq.n	2400d2ba <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
2400d22a:	68fb      	ldr	r3, [r7, #12]
2400d22c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d22e:	b29b      	uxth	r3, r3
2400d230:	2b00      	cmp	r3, #0
2400d232:	d128      	bne.n	2400d286 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400d234:	68fb      	ldr	r3, [r7, #12]
2400d236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d23a:	b2db      	uxtb	r3, r3
2400d23c:	2b28      	cmp	r3, #40	; 0x28
2400d23e:	d108      	bne.n	2400d252 <I2C_Slave_ISR_IT+0x8c>
2400d240:	697b      	ldr	r3, [r7, #20]
2400d242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d246:	d104      	bne.n	2400d252 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
2400d248:	6939      	ldr	r1, [r7, #16]
2400d24a:	68f8      	ldr	r0, [r7, #12]
2400d24c:	f001 f81e 	bl	2400e28c <I2C_ITListenCplt>
2400d250:	e032      	b.n	2400d2b8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400d252:	68fb      	ldr	r3, [r7, #12]
2400d254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d258:	b2db      	uxtb	r3, r3
2400d25a:	2b29      	cmp	r3, #41	; 0x29
2400d25c:	d10e      	bne.n	2400d27c <I2C_Slave_ISR_IT+0xb6>
2400d25e:	697b      	ldr	r3, [r7, #20]
2400d260:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d264:	d00a      	beq.n	2400d27c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d266:	68fb      	ldr	r3, [r7, #12]
2400d268:	681b      	ldr	r3, [r3, #0]
2400d26a:	2210      	movs	r2, #16
2400d26c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2400d26e:	68f8      	ldr	r0, [r7, #12]
2400d270:	f001 f959 	bl	2400e526 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400d274:	68f8      	ldr	r0, [r7, #12]
2400d276:	f000 fce8 	bl	2400dc4a <I2C_ITSlaveSeqCplt>
2400d27a:	e01d      	b.n	2400d2b8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d27c:	68fb      	ldr	r3, [r7, #12]
2400d27e:	681b      	ldr	r3, [r3, #0]
2400d280:	2210      	movs	r2, #16
2400d282:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
2400d284:	e096      	b.n	2400d3b4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d286:	68fb      	ldr	r3, [r7, #12]
2400d288:	681b      	ldr	r3, [r3, #0]
2400d28a:	2210      	movs	r2, #16
2400d28c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400d28e:	68fb      	ldr	r3, [r7, #12]
2400d290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d292:	f043 0204 	orr.w	r2, r3, #4
2400d296:	68fb      	ldr	r3, [r7, #12]
2400d298:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400d29a:	697b      	ldr	r3, [r7, #20]
2400d29c:	2b00      	cmp	r3, #0
2400d29e:	d004      	beq.n	2400d2aa <I2C_Slave_ISR_IT+0xe4>
2400d2a0:	697b      	ldr	r3, [r7, #20]
2400d2a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400d2a6:	f040 8085 	bne.w	2400d3b4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
2400d2aa:	68fb      	ldr	r3, [r7, #12]
2400d2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d2ae:	4619      	mov	r1, r3
2400d2b0:	68f8      	ldr	r0, [r7, #12]
2400d2b2:	f001 f841 	bl	2400e338 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400d2b6:	e07d      	b.n	2400d3b4 <I2C_Slave_ISR_IT+0x1ee>
2400d2b8:	e07c      	b.n	2400d3b4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400d2ba:	693b      	ldr	r3, [r7, #16]
2400d2bc:	089b      	lsrs	r3, r3, #2
2400d2be:	f003 0301 	and.w	r3, r3, #1
2400d2c2:	2b00      	cmp	r3, #0
2400d2c4:	d030      	beq.n	2400d328 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400d2c6:	687b      	ldr	r3, [r7, #4]
2400d2c8:	089b      	lsrs	r3, r3, #2
2400d2ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400d2ce:	2b00      	cmp	r3, #0
2400d2d0:	d02a      	beq.n	2400d328 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
2400d2d2:	68fb      	ldr	r3, [r7, #12]
2400d2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d2d6:	b29b      	uxth	r3, r3
2400d2d8:	2b00      	cmp	r3, #0
2400d2da:	d018      	beq.n	2400d30e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400d2dc:	68fb      	ldr	r3, [r7, #12]
2400d2de:	681b      	ldr	r3, [r3, #0]
2400d2e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400d2e2:	68fb      	ldr	r3, [r7, #12]
2400d2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d2e6:	b2d2      	uxtb	r2, r2
2400d2e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400d2ea:	68fb      	ldr	r3, [r7, #12]
2400d2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d2ee:	1c5a      	adds	r2, r3, #1
2400d2f0:	68fb      	ldr	r3, [r7, #12]
2400d2f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
2400d2f4:	68fb      	ldr	r3, [r7, #12]
2400d2f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d2f8:	3b01      	subs	r3, #1
2400d2fa:	b29a      	uxth	r2, r3
2400d2fc:	68fb      	ldr	r3, [r7, #12]
2400d2fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400d300:	68fb      	ldr	r3, [r7, #12]
2400d302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d304:	b29b      	uxth	r3, r3
2400d306:	3b01      	subs	r3, #1
2400d308:	b29a      	uxth	r2, r3
2400d30a:	68fb      	ldr	r3, [r7, #12]
2400d30c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
2400d30e:	68fb      	ldr	r3, [r7, #12]
2400d310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d312:	b29b      	uxth	r3, r3
2400d314:	2b00      	cmp	r3, #0
2400d316:	d14f      	bne.n	2400d3b8 <I2C_Slave_ISR_IT+0x1f2>
2400d318:	697b      	ldr	r3, [r7, #20]
2400d31a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d31e:	d04b      	beq.n	2400d3b8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
2400d320:	68f8      	ldr	r0, [r7, #12]
2400d322:	f000 fc92 	bl	2400dc4a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
2400d326:	e047      	b.n	2400d3b8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400d328:	693b      	ldr	r3, [r7, #16]
2400d32a:	08db      	lsrs	r3, r3, #3
2400d32c:	f003 0301 	and.w	r3, r3, #1
2400d330:	2b00      	cmp	r3, #0
2400d332:	d00a      	beq.n	2400d34a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400d334:	687b      	ldr	r3, [r7, #4]
2400d336:	08db      	lsrs	r3, r3, #3
2400d338:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400d33c:	2b00      	cmp	r3, #0
2400d33e:	d004      	beq.n	2400d34a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
2400d340:	6939      	ldr	r1, [r7, #16]
2400d342:	68f8      	ldr	r0, [r7, #12]
2400d344:	f000 fbc0 	bl	2400dac8 <I2C_ITAddrCplt>
2400d348:	e037      	b.n	2400d3ba <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400d34a:	693b      	ldr	r3, [r7, #16]
2400d34c:	085b      	lsrs	r3, r3, #1
2400d34e:	f003 0301 	and.w	r3, r3, #1
2400d352:	2b00      	cmp	r3, #0
2400d354:	d031      	beq.n	2400d3ba <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400d356:	687b      	ldr	r3, [r7, #4]
2400d358:	085b      	lsrs	r3, r3, #1
2400d35a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400d35e:	2b00      	cmp	r3, #0
2400d360:	d02b      	beq.n	2400d3ba <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
2400d362:	68fb      	ldr	r3, [r7, #12]
2400d364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d366:	b29b      	uxth	r3, r3
2400d368:	2b00      	cmp	r3, #0
2400d36a:	d018      	beq.n	2400d39e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400d36c:	68fb      	ldr	r3, [r7, #12]
2400d36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d370:	781a      	ldrb	r2, [r3, #0]
2400d372:	68fb      	ldr	r3, [r7, #12]
2400d374:	681b      	ldr	r3, [r3, #0]
2400d376:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400d378:	68fb      	ldr	r3, [r7, #12]
2400d37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400d37c:	1c5a      	adds	r2, r3, #1
2400d37e:	68fb      	ldr	r3, [r7, #12]
2400d380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2400d382:	68fb      	ldr	r3, [r7, #12]
2400d384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d386:	b29b      	uxth	r3, r3
2400d388:	3b01      	subs	r3, #1
2400d38a:	b29a      	uxth	r2, r3
2400d38c:	68fb      	ldr	r3, [r7, #12]
2400d38e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2400d390:	68fb      	ldr	r3, [r7, #12]
2400d392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d394:	3b01      	subs	r3, #1
2400d396:	b29a      	uxth	r2, r3
2400d398:	68fb      	ldr	r3, [r7, #12]
2400d39a:	851a      	strh	r2, [r3, #40]	; 0x28
2400d39c:	e00d      	b.n	2400d3ba <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400d39e:	697b      	ldr	r3, [r7, #20]
2400d3a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400d3a4:	d002      	beq.n	2400d3ac <I2C_Slave_ISR_IT+0x1e6>
2400d3a6:	697b      	ldr	r3, [r7, #20]
2400d3a8:	2b00      	cmp	r3, #0
2400d3aa:	d106      	bne.n	2400d3ba <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400d3ac:	68f8      	ldr	r0, [r7, #12]
2400d3ae:	f000 fc4c 	bl	2400dc4a <I2C_ITSlaveSeqCplt>
2400d3b2:	e002      	b.n	2400d3ba <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
2400d3b4:	bf00      	nop
2400d3b6:	e000      	b.n	2400d3ba <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
2400d3b8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d3ba:	68fb      	ldr	r3, [r7, #12]
2400d3bc:	2200      	movs	r2, #0
2400d3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d3c2:	2300      	movs	r3, #0
}
2400d3c4:	4618      	mov	r0, r3
2400d3c6:	3718      	adds	r7, #24
2400d3c8:	46bd      	mov	sp, r7
2400d3ca:	bd80      	pop	{r7, pc}

2400d3cc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
2400d3cc:	b580      	push	{r7, lr}
2400d3ce:	b088      	sub	sp, #32
2400d3d0:	af02      	add	r7, sp, #8
2400d3d2:	60f8      	str	r0, [r7, #12]
2400d3d4:	60b9      	str	r1, [r7, #8]
2400d3d6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400d3d8:	68fb      	ldr	r3, [r7, #12]
2400d3da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d3de:	2b01      	cmp	r3, #1
2400d3e0:	d101      	bne.n	2400d3e6 <I2C_Master_ISR_DMA+0x1a>
2400d3e2:	2302      	movs	r3, #2
2400d3e4:	e0e1      	b.n	2400d5aa <I2C_Master_ISR_DMA+0x1de>
2400d3e6:	68fb      	ldr	r3, [r7, #12]
2400d3e8:	2201      	movs	r2, #1
2400d3ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400d3ee:	68bb      	ldr	r3, [r7, #8]
2400d3f0:	091b      	lsrs	r3, r3, #4
2400d3f2:	f003 0301 	and.w	r3, r3, #1
2400d3f6:	2b00      	cmp	r3, #0
2400d3f8:	d017      	beq.n	2400d42a <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400d3fa:	687b      	ldr	r3, [r7, #4]
2400d3fc:	091b      	lsrs	r3, r3, #4
2400d3fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400d402:	2b00      	cmp	r3, #0
2400d404:	d011      	beq.n	2400d42a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d406:	68fb      	ldr	r3, [r7, #12]
2400d408:	681b      	ldr	r3, [r3, #0]
2400d40a:	2210      	movs	r2, #16
2400d40c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400d40e:	68fb      	ldr	r3, [r7, #12]
2400d410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d412:	f043 0204 	orr.w	r2, r3, #4
2400d416:	68fb      	ldr	r3, [r7, #12]
2400d418:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400d41a:	2120      	movs	r1, #32
2400d41c:	68f8      	ldr	r0, [r7, #12]
2400d41e:	f001 fdbb 	bl	2400ef98 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400d422:	68f8      	ldr	r0, [r7, #12]
2400d424:	f001 f87f 	bl	2400e526 <I2C_Flush_TXDR>
2400d428:	e0ba      	b.n	2400d5a0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400d42a:	68bb      	ldr	r3, [r7, #8]
2400d42c:	09db      	lsrs	r3, r3, #7
2400d42e:	f003 0301 	and.w	r3, r3, #1
2400d432:	2b00      	cmp	r3, #0
2400d434:	d072      	beq.n	2400d51c <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d436:	687b      	ldr	r3, [r7, #4]
2400d438:	099b      	lsrs	r3, r3, #6
2400d43a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400d43e:	2b00      	cmp	r3, #0
2400d440:	d06c      	beq.n	2400d51c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
2400d442:	68fb      	ldr	r3, [r7, #12]
2400d444:	681b      	ldr	r3, [r3, #0]
2400d446:	681a      	ldr	r2, [r3, #0]
2400d448:	68fb      	ldr	r3, [r7, #12]
2400d44a:	681b      	ldr	r3, [r3, #0]
2400d44c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2400d450:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
2400d452:	68fb      	ldr	r3, [r7, #12]
2400d454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d456:	b29b      	uxth	r3, r3
2400d458:	2b00      	cmp	r3, #0
2400d45a:	d04e      	beq.n	2400d4fa <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400d45c:	68fb      	ldr	r3, [r7, #12]
2400d45e:	681b      	ldr	r3, [r3, #0]
2400d460:	685b      	ldr	r3, [r3, #4]
2400d462:	b29b      	uxth	r3, r3
2400d464:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400d468:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d46a:	68fb      	ldr	r3, [r7, #12]
2400d46c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d46e:	b29b      	uxth	r3, r3
2400d470:	2bff      	cmp	r3, #255	; 0xff
2400d472:	d906      	bls.n	2400d482 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400d474:	68fb      	ldr	r3, [r7, #12]
2400d476:	22ff      	movs	r2, #255	; 0xff
2400d478:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
2400d47a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d47e:	617b      	str	r3, [r7, #20]
2400d480:	e010      	b.n	2400d4a4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400d482:	68fb      	ldr	r3, [r7, #12]
2400d484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d486:	b29a      	uxth	r2, r3
2400d488:	68fb      	ldr	r3, [r7, #12]
2400d48a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400d48c:	68fb      	ldr	r3, [r7, #12]
2400d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d494:	d003      	beq.n	2400d49e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
2400d496:	68fb      	ldr	r3, [r7, #12]
2400d498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d49a:	617b      	str	r3, [r7, #20]
2400d49c:	e002      	b.n	2400d4a4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
2400d49e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400d4a2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400d4a4:	68fb      	ldr	r3, [r7, #12]
2400d4a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d4a8:	b2da      	uxtb	r2, r3
2400d4aa:	8a79      	ldrh	r1, [r7, #18]
2400d4ac:	2300      	movs	r3, #0
2400d4ae:	9300      	str	r3, [sp, #0]
2400d4b0:	697b      	ldr	r3, [r7, #20]
2400d4b2:	68f8      	ldr	r0, [r7, #12]
2400d4b4:	f001 fd3e 	bl	2400ef34 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400d4b8:	68fb      	ldr	r3, [r7, #12]
2400d4ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d4bc:	b29a      	uxth	r2, r3
2400d4be:	68fb      	ldr	r3, [r7, #12]
2400d4c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400d4c2:	1ad3      	subs	r3, r2, r3
2400d4c4:	b29a      	uxth	r2, r3
2400d4c6:	68fb      	ldr	r3, [r7, #12]
2400d4c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400d4ca:	68fb      	ldr	r3, [r7, #12]
2400d4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d4d0:	b2db      	uxtb	r3, r3
2400d4d2:	2b22      	cmp	r3, #34	; 0x22
2400d4d4:	d108      	bne.n	2400d4e8 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400d4d6:	68fb      	ldr	r3, [r7, #12]
2400d4d8:	681b      	ldr	r3, [r3, #0]
2400d4da:	681a      	ldr	r2, [r3, #0]
2400d4dc:	68fb      	ldr	r3, [r7, #12]
2400d4de:	681b      	ldr	r3, [r3, #0]
2400d4e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400d4e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400d4e6:	e05b      	b.n	2400d5a0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400d4e8:	68fb      	ldr	r3, [r7, #12]
2400d4ea:	681b      	ldr	r3, [r3, #0]
2400d4ec:	681a      	ldr	r2, [r3, #0]
2400d4ee:	68fb      	ldr	r3, [r7, #12]
2400d4f0:	681b      	ldr	r3, [r3, #0]
2400d4f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d4f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400d4f8:	e052      	b.n	2400d5a0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d4fa:	68fb      	ldr	r3, [r7, #12]
2400d4fc:	681b      	ldr	r3, [r3, #0]
2400d4fe:	685b      	ldr	r3, [r3, #4]
2400d500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d508:	d003      	beq.n	2400d512 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400d50a:	68f8      	ldr	r0, [r7, #12]
2400d50c:	f000 fb60 	bl	2400dbd0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
2400d510:	e046      	b.n	2400d5a0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d512:	2140      	movs	r1, #64	; 0x40
2400d514:	68f8      	ldr	r0, [r7, #12]
2400d516:	f000 ff0f 	bl	2400e338 <I2C_ITError>
    if (hi2c->XferCount != 0U)
2400d51a:	e041      	b.n	2400d5a0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400d51c:	68bb      	ldr	r3, [r7, #8]
2400d51e:	099b      	lsrs	r3, r3, #6
2400d520:	f003 0301 	and.w	r3, r3, #1
2400d524:	2b00      	cmp	r3, #0
2400d526:	d029      	beq.n	2400d57c <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400d528:	687b      	ldr	r3, [r7, #4]
2400d52a:	099b      	lsrs	r3, r3, #6
2400d52c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400d530:	2b00      	cmp	r3, #0
2400d532:	d023      	beq.n	2400d57c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
2400d534:	68fb      	ldr	r3, [r7, #12]
2400d536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400d538:	b29b      	uxth	r3, r3
2400d53a:	2b00      	cmp	r3, #0
2400d53c:	d119      	bne.n	2400d572 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400d53e:	68fb      	ldr	r3, [r7, #12]
2400d540:	681b      	ldr	r3, [r3, #0]
2400d542:	685b      	ldr	r3, [r3, #4]
2400d544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400d548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d54c:	d027      	beq.n	2400d59e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400d54e:	68fb      	ldr	r3, [r7, #12]
2400d550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d552:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d556:	d108      	bne.n	2400d56a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400d558:	68fb      	ldr	r3, [r7, #12]
2400d55a:	681b      	ldr	r3, [r3, #0]
2400d55c:	685a      	ldr	r2, [r3, #4]
2400d55e:	68fb      	ldr	r3, [r7, #12]
2400d560:	681b      	ldr	r3, [r3, #0]
2400d562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400d566:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
2400d568:	e019      	b.n	2400d59e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400d56a:	68f8      	ldr	r0, [r7, #12]
2400d56c:	f000 fb30 	bl	2400dbd0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
2400d570:	e015      	b.n	2400d59e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400d572:	2140      	movs	r1, #64	; 0x40
2400d574:	68f8      	ldr	r0, [r7, #12]
2400d576:	f000 fedf 	bl	2400e338 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400d57a:	e010      	b.n	2400d59e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d57c:	68bb      	ldr	r3, [r7, #8]
2400d57e:	095b      	lsrs	r3, r3, #5
2400d580:	f003 0301 	and.w	r3, r3, #1
2400d584:	2b00      	cmp	r3, #0
2400d586:	d00b      	beq.n	2400d5a0 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d588:	687b      	ldr	r3, [r7, #4]
2400d58a:	095b      	lsrs	r3, r3, #5
2400d58c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d590:	2b00      	cmp	r3, #0
2400d592:	d005      	beq.n	2400d5a0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2400d594:	68b9      	ldr	r1, [r7, #8]
2400d596:	68f8      	ldr	r0, [r7, #12]
2400d598:	f000 fbb6 	bl	2400dd08 <I2C_ITMasterCplt>
2400d59c:	e000      	b.n	2400d5a0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
2400d59e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d5a0:	68fb      	ldr	r3, [r7, #12]
2400d5a2:	2200      	movs	r2, #0
2400d5a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d5a8:	2300      	movs	r3, #0
}
2400d5aa:	4618      	mov	r0, r3
2400d5ac:	3718      	adds	r7, #24
2400d5ae:	46bd      	mov	sp, r7
2400d5b0:	bd80      	pop	{r7, pc}
	...

2400d5b4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400d5b4:	b580      	push	{r7, lr}
2400d5b6:	b088      	sub	sp, #32
2400d5b8:	af00      	add	r7, sp, #0
2400d5ba:	60f8      	str	r0, [r7, #12]
2400d5bc:	60b9      	str	r1, [r7, #8]
2400d5be:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400d5c0:	68fb      	ldr	r3, [r7, #12]
2400d5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400d5c4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
2400d5c6:	2300      	movs	r3, #0
2400d5c8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
2400d5ca:	68fb      	ldr	r3, [r7, #12]
2400d5cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400d5d0:	2b01      	cmp	r3, #1
2400d5d2:	d101      	bne.n	2400d5d8 <I2C_Slave_ISR_DMA+0x24>
2400d5d4:	2302      	movs	r3, #2
2400d5d6:	e1ca      	b.n	2400d96e <I2C_Slave_ISR_DMA+0x3ba>
2400d5d8:	68fb      	ldr	r3, [r7, #12]
2400d5da:	2201      	movs	r2, #1
2400d5dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d5e0:	68bb      	ldr	r3, [r7, #8]
2400d5e2:	095b      	lsrs	r3, r3, #5
2400d5e4:	f003 0301 	and.w	r3, r3, #1
2400d5e8:	2b00      	cmp	r3, #0
2400d5ea:	d009      	beq.n	2400d600 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400d5ec:	687b      	ldr	r3, [r7, #4]
2400d5ee:	095b      	lsrs	r3, r3, #5
2400d5f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400d5f4:	2b00      	cmp	r3, #0
2400d5f6:	d003      	beq.n	2400d600 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
2400d5f8:	68b9      	ldr	r1, [r7, #8]
2400d5fa:	68f8      	ldr	r0, [r7, #12]
2400d5fc:	f000 fc4e 	bl	2400de9c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400d600:	68bb      	ldr	r3, [r7, #8]
2400d602:	091b      	lsrs	r3, r3, #4
2400d604:	f003 0301 	and.w	r3, r3, #1
2400d608:	2b00      	cmp	r3, #0
2400d60a:	f000 819b 	beq.w	2400d944 <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400d60e:	687b      	ldr	r3, [r7, #4]
2400d610:	091b      	lsrs	r3, r3, #4
2400d612:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400d616:	2b00      	cmp	r3, #0
2400d618:	f000 8194 	beq.w	2400d944 <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400d61c:	687b      	ldr	r3, [r7, #4]
2400d61e:	0b9b      	lsrs	r3, r3, #14
2400d620:	f003 0301 	and.w	r3, r3, #1
2400d624:	2b00      	cmp	r3, #0
2400d626:	d106      	bne.n	2400d636 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
2400d628:	687b      	ldr	r3, [r7, #4]
2400d62a:	0bdb      	lsrs	r3, r3, #15
2400d62c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400d630:	2b00      	cmp	r3, #0
2400d632:	f000 8180 	beq.w	2400d936 <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
2400d636:	68fb      	ldr	r3, [r7, #12]
2400d638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d63a:	2b00      	cmp	r3, #0
2400d63c:	d07c      	beq.n	2400d738 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
2400d63e:	687b      	ldr	r3, [r7, #4]
2400d640:	0bdb      	lsrs	r3, r3, #15
2400d642:	f003 0301 	and.w	r3, r3, #1
2400d646:	2b00      	cmp	r3, #0
2400d648:	d076      	beq.n	2400d738 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400d64a:	68fb      	ldr	r3, [r7, #12]
2400d64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d64e:	681b      	ldr	r3, [r3, #0]
2400d650:	4a74      	ldr	r2, [pc, #464]	; (2400d824 <I2C_Slave_ISR_DMA+0x270>)
2400d652:	4293      	cmp	r3, r2
2400d654:	d059      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d656:	68fb      	ldr	r3, [r7, #12]
2400d658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d65a:	681b      	ldr	r3, [r3, #0]
2400d65c:	4a72      	ldr	r2, [pc, #456]	; (2400d828 <I2C_Slave_ISR_DMA+0x274>)
2400d65e:	4293      	cmp	r3, r2
2400d660:	d053      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d662:	68fb      	ldr	r3, [r7, #12]
2400d664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d666:	681b      	ldr	r3, [r3, #0]
2400d668:	4a70      	ldr	r2, [pc, #448]	; (2400d82c <I2C_Slave_ISR_DMA+0x278>)
2400d66a:	4293      	cmp	r3, r2
2400d66c:	d04d      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d66e:	68fb      	ldr	r3, [r7, #12]
2400d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d672:	681b      	ldr	r3, [r3, #0]
2400d674:	4a6e      	ldr	r2, [pc, #440]	; (2400d830 <I2C_Slave_ISR_DMA+0x27c>)
2400d676:	4293      	cmp	r3, r2
2400d678:	d047      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d67a:	68fb      	ldr	r3, [r7, #12]
2400d67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d67e:	681b      	ldr	r3, [r3, #0]
2400d680:	4a6c      	ldr	r2, [pc, #432]	; (2400d834 <I2C_Slave_ISR_DMA+0x280>)
2400d682:	4293      	cmp	r3, r2
2400d684:	d041      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d686:	68fb      	ldr	r3, [r7, #12]
2400d688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d68a:	681b      	ldr	r3, [r3, #0]
2400d68c:	4a6a      	ldr	r2, [pc, #424]	; (2400d838 <I2C_Slave_ISR_DMA+0x284>)
2400d68e:	4293      	cmp	r3, r2
2400d690:	d03b      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d692:	68fb      	ldr	r3, [r7, #12]
2400d694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d696:	681b      	ldr	r3, [r3, #0]
2400d698:	4a68      	ldr	r2, [pc, #416]	; (2400d83c <I2C_Slave_ISR_DMA+0x288>)
2400d69a:	4293      	cmp	r3, r2
2400d69c:	d035      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d69e:	68fb      	ldr	r3, [r7, #12]
2400d6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d6a2:	681b      	ldr	r3, [r3, #0]
2400d6a4:	4a66      	ldr	r2, [pc, #408]	; (2400d840 <I2C_Slave_ISR_DMA+0x28c>)
2400d6a6:	4293      	cmp	r3, r2
2400d6a8:	d02f      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d6aa:	68fb      	ldr	r3, [r7, #12]
2400d6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d6ae:	681b      	ldr	r3, [r3, #0]
2400d6b0:	4a64      	ldr	r2, [pc, #400]	; (2400d844 <I2C_Slave_ISR_DMA+0x290>)
2400d6b2:	4293      	cmp	r3, r2
2400d6b4:	d029      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d6b6:	68fb      	ldr	r3, [r7, #12]
2400d6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d6ba:	681b      	ldr	r3, [r3, #0]
2400d6bc:	4a62      	ldr	r2, [pc, #392]	; (2400d848 <I2C_Slave_ISR_DMA+0x294>)
2400d6be:	4293      	cmp	r3, r2
2400d6c0:	d023      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d6c2:	68fb      	ldr	r3, [r7, #12]
2400d6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d6c6:	681b      	ldr	r3, [r3, #0]
2400d6c8:	4a60      	ldr	r2, [pc, #384]	; (2400d84c <I2C_Slave_ISR_DMA+0x298>)
2400d6ca:	4293      	cmp	r3, r2
2400d6cc:	d01d      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d6ce:	68fb      	ldr	r3, [r7, #12]
2400d6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d6d2:	681b      	ldr	r3, [r3, #0]
2400d6d4:	4a5e      	ldr	r2, [pc, #376]	; (2400d850 <I2C_Slave_ISR_DMA+0x29c>)
2400d6d6:	4293      	cmp	r3, r2
2400d6d8:	d017      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d6da:	68fb      	ldr	r3, [r7, #12]
2400d6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d6de:	681b      	ldr	r3, [r3, #0]
2400d6e0:	4a5c      	ldr	r2, [pc, #368]	; (2400d854 <I2C_Slave_ISR_DMA+0x2a0>)
2400d6e2:	4293      	cmp	r3, r2
2400d6e4:	d011      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d6e6:	68fb      	ldr	r3, [r7, #12]
2400d6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d6ea:	681b      	ldr	r3, [r3, #0]
2400d6ec:	4a5a      	ldr	r2, [pc, #360]	; (2400d858 <I2C_Slave_ISR_DMA+0x2a4>)
2400d6ee:	4293      	cmp	r3, r2
2400d6f0:	d00b      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d6f2:	68fb      	ldr	r3, [r7, #12]
2400d6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d6f6:	681b      	ldr	r3, [r3, #0]
2400d6f8:	4a58      	ldr	r2, [pc, #352]	; (2400d85c <I2C_Slave_ISR_DMA+0x2a8>)
2400d6fa:	4293      	cmp	r3, r2
2400d6fc:	d005      	beq.n	2400d70a <I2C_Slave_ISR_DMA+0x156>
2400d6fe:	68fb      	ldr	r3, [r7, #12]
2400d700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d702:	681b      	ldr	r3, [r3, #0]
2400d704:	4a56      	ldr	r2, [pc, #344]	; (2400d860 <I2C_Slave_ISR_DMA+0x2ac>)
2400d706:	4293      	cmp	r3, r2
2400d708:	d109      	bne.n	2400d71e <I2C_Slave_ISR_DMA+0x16a>
2400d70a:	68fb      	ldr	r3, [r7, #12]
2400d70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d70e:	681b      	ldr	r3, [r3, #0]
2400d710:	685b      	ldr	r3, [r3, #4]
2400d712:	2b00      	cmp	r3, #0
2400d714:	bf0c      	ite	eq
2400d716:	2301      	moveq	r3, #1
2400d718:	2300      	movne	r3, #0
2400d71a:	b2db      	uxtb	r3, r3
2400d71c:	e008      	b.n	2400d730 <I2C_Slave_ISR_DMA+0x17c>
2400d71e:	68fb      	ldr	r3, [r7, #12]
2400d720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400d722:	681b      	ldr	r3, [r3, #0]
2400d724:	685b      	ldr	r3, [r3, #4]
2400d726:	2b00      	cmp	r3, #0
2400d728:	bf0c      	ite	eq
2400d72a:	2301      	moveq	r3, #1
2400d72c:	2300      	movne	r3, #0
2400d72e:	b2db      	uxtb	r3, r3
2400d730:	2b00      	cmp	r3, #0
2400d732:	d001      	beq.n	2400d738 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
2400d734:	2301      	movs	r3, #1
2400d736:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
2400d738:	68fb      	ldr	r3, [r7, #12]
2400d73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d73c:	2b00      	cmp	r3, #0
2400d73e:	f000 809e 	beq.w	2400d87e <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
2400d742:	687b      	ldr	r3, [r7, #4]
2400d744:	0b9b      	lsrs	r3, r3, #14
2400d746:	f003 0301 	and.w	r3, r3, #1
2400d74a:	2b00      	cmp	r3, #0
2400d74c:	f000 8097 	beq.w	2400d87e <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400d750:	68fb      	ldr	r3, [r7, #12]
2400d752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d754:	681b      	ldr	r3, [r3, #0]
2400d756:	4a33      	ldr	r2, [pc, #204]	; (2400d824 <I2C_Slave_ISR_DMA+0x270>)
2400d758:	4293      	cmp	r3, r2
2400d75a:	d059      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d75c:	68fb      	ldr	r3, [r7, #12]
2400d75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d760:	681b      	ldr	r3, [r3, #0]
2400d762:	4a31      	ldr	r2, [pc, #196]	; (2400d828 <I2C_Slave_ISR_DMA+0x274>)
2400d764:	4293      	cmp	r3, r2
2400d766:	d053      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d768:	68fb      	ldr	r3, [r7, #12]
2400d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d76c:	681b      	ldr	r3, [r3, #0]
2400d76e:	4a2f      	ldr	r2, [pc, #188]	; (2400d82c <I2C_Slave_ISR_DMA+0x278>)
2400d770:	4293      	cmp	r3, r2
2400d772:	d04d      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d774:	68fb      	ldr	r3, [r7, #12]
2400d776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d778:	681b      	ldr	r3, [r3, #0]
2400d77a:	4a2d      	ldr	r2, [pc, #180]	; (2400d830 <I2C_Slave_ISR_DMA+0x27c>)
2400d77c:	4293      	cmp	r3, r2
2400d77e:	d047      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d780:	68fb      	ldr	r3, [r7, #12]
2400d782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d784:	681b      	ldr	r3, [r3, #0]
2400d786:	4a2b      	ldr	r2, [pc, #172]	; (2400d834 <I2C_Slave_ISR_DMA+0x280>)
2400d788:	4293      	cmp	r3, r2
2400d78a:	d041      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d78c:	68fb      	ldr	r3, [r7, #12]
2400d78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d790:	681b      	ldr	r3, [r3, #0]
2400d792:	4a29      	ldr	r2, [pc, #164]	; (2400d838 <I2C_Slave_ISR_DMA+0x284>)
2400d794:	4293      	cmp	r3, r2
2400d796:	d03b      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d798:	68fb      	ldr	r3, [r7, #12]
2400d79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d79c:	681b      	ldr	r3, [r3, #0]
2400d79e:	4a27      	ldr	r2, [pc, #156]	; (2400d83c <I2C_Slave_ISR_DMA+0x288>)
2400d7a0:	4293      	cmp	r3, r2
2400d7a2:	d035      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d7a4:	68fb      	ldr	r3, [r7, #12]
2400d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7a8:	681b      	ldr	r3, [r3, #0]
2400d7aa:	4a25      	ldr	r2, [pc, #148]	; (2400d840 <I2C_Slave_ISR_DMA+0x28c>)
2400d7ac:	4293      	cmp	r3, r2
2400d7ae:	d02f      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d7b0:	68fb      	ldr	r3, [r7, #12]
2400d7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7b4:	681b      	ldr	r3, [r3, #0]
2400d7b6:	4a23      	ldr	r2, [pc, #140]	; (2400d844 <I2C_Slave_ISR_DMA+0x290>)
2400d7b8:	4293      	cmp	r3, r2
2400d7ba:	d029      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d7bc:	68fb      	ldr	r3, [r7, #12]
2400d7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7c0:	681b      	ldr	r3, [r3, #0]
2400d7c2:	4a21      	ldr	r2, [pc, #132]	; (2400d848 <I2C_Slave_ISR_DMA+0x294>)
2400d7c4:	4293      	cmp	r3, r2
2400d7c6:	d023      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d7c8:	68fb      	ldr	r3, [r7, #12]
2400d7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7cc:	681b      	ldr	r3, [r3, #0]
2400d7ce:	4a1f      	ldr	r2, [pc, #124]	; (2400d84c <I2C_Slave_ISR_DMA+0x298>)
2400d7d0:	4293      	cmp	r3, r2
2400d7d2:	d01d      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d7d4:	68fb      	ldr	r3, [r7, #12]
2400d7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7d8:	681b      	ldr	r3, [r3, #0]
2400d7da:	4a1d      	ldr	r2, [pc, #116]	; (2400d850 <I2C_Slave_ISR_DMA+0x29c>)
2400d7dc:	4293      	cmp	r3, r2
2400d7de:	d017      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d7e0:	68fb      	ldr	r3, [r7, #12]
2400d7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7e4:	681b      	ldr	r3, [r3, #0]
2400d7e6:	4a1b      	ldr	r2, [pc, #108]	; (2400d854 <I2C_Slave_ISR_DMA+0x2a0>)
2400d7e8:	4293      	cmp	r3, r2
2400d7ea:	d011      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d7ec:	68fb      	ldr	r3, [r7, #12]
2400d7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7f0:	681b      	ldr	r3, [r3, #0]
2400d7f2:	4a19      	ldr	r2, [pc, #100]	; (2400d858 <I2C_Slave_ISR_DMA+0x2a4>)
2400d7f4:	4293      	cmp	r3, r2
2400d7f6:	d00b      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d7f8:	68fb      	ldr	r3, [r7, #12]
2400d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d7fc:	681b      	ldr	r3, [r3, #0]
2400d7fe:	4a17      	ldr	r2, [pc, #92]	; (2400d85c <I2C_Slave_ISR_DMA+0x2a8>)
2400d800:	4293      	cmp	r3, r2
2400d802:	d005      	beq.n	2400d810 <I2C_Slave_ISR_DMA+0x25c>
2400d804:	68fb      	ldr	r3, [r7, #12]
2400d806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d808:	681b      	ldr	r3, [r3, #0]
2400d80a:	4a15      	ldr	r2, [pc, #84]	; (2400d860 <I2C_Slave_ISR_DMA+0x2ac>)
2400d80c:	4293      	cmp	r3, r2
2400d80e:	d129      	bne.n	2400d864 <I2C_Slave_ISR_DMA+0x2b0>
2400d810:	68fb      	ldr	r3, [r7, #12]
2400d812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d814:	681b      	ldr	r3, [r3, #0]
2400d816:	685b      	ldr	r3, [r3, #4]
2400d818:	2b00      	cmp	r3, #0
2400d81a:	bf0c      	ite	eq
2400d81c:	2301      	moveq	r3, #1
2400d81e:	2300      	movne	r3, #0
2400d820:	b2db      	uxtb	r3, r3
2400d822:	e028      	b.n	2400d876 <I2C_Slave_ISR_DMA+0x2c2>
2400d824:	40020010 	.word	0x40020010
2400d828:	40020028 	.word	0x40020028
2400d82c:	40020040 	.word	0x40020040
2400d830:	40020058 	.word	0x40020058
2400d834:	40020070 	.word	0x40020070
2400d838:	40020088 	.word	0x40020088
2400d83c:	400200a0 	.word	0x400200a0
2400d840:	400200b8 	.word	0x400200b8
2400d844:	40020410 	.word	0x40020410
2400d848:	40020428 	.word	0x40020428
2400d84c:	40020440 	.word	0x40020440
2400d850:	40020458 	.word	0x40020458
2400d854:	40020470 	.word	0x40020470
2400d858:	40020488 	.word	0x40020488
2400d85c:	400204a0 	.word	0x400204a0
2400d860:	400204b8 	.word	0x400204b8
2400d864:	68fb      	ldr	r3, [r7, #12]
2400d866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400d868:	681b      	ldr	r3, [r3, #0]
2400d86a:	685b      	ldr	r3, [r3, #4]
2400d86c:	2b00      	cmp	r3, #0
2400d86e:	bf0c      	ite	eq
2400d870:	2301      	moveq	r3, #1
2400d872:	2300      	movne	r3, #0
2400d874:	b2db      	uxtb	r3, r3
2400d876:	2b00      	cmp	r3, #0
2400d878:	d001      	beq.n	2400d87e <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
2400d87a:	2301      	movs	r3, #1
2400d87c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
2400d87e:	69fb      	ldr	r3, [r7, #28]
2400d880:	2b01      	cmp	r3, #1
2400d882:	d128      	bne.n	2400d8d6 <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400d884:	68fb      	ldr	r3, [r7, #12]
2400d886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d88a:	b2db      	uxtb	r3, r3
2400d88c:	2b28      	cmp	r3, #40	; 0x28
2400d88e:	d108      	bne.n	2400d8a2 <I2C_Slave_ISR_DMA+0x2ee>
2400d890:	69bb      	ldr	r3, [r7, #24]
2400d892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400d896:	d104      	bne.n	2400d8a2 <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
2400d898:	68b9      	ldr	r1, [r7, #8]
2400d89a:	68f8      	ldr	r0, [r7, #12]
2400d89c:	f000 fcf6 	bl	2400e28c <I2C_ITListenCplt>
2400d8a0:	e048      	b.n	2400d934 <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400d8a2:	68fb      	ldr	r3, [r7, #12]
2400d8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d8a8:	b2db      	uxtb	r3, r3
2400d8aa:	2b29      	cmp	r3, #41	; 0x29
2400d8ac:	d10e      	bne.n	2400d8cc <I2C_Slave_ISR_DMA+0x318>
2400d8ae:	69bb      	ldr	r3, [r7, #24]
2400d8b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400d8b4:	d00a      	beq.n	2400d8cc <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d8b6:	68fb      	ldr	r3, [r7, #12]
2400d8b8:	681b      	ldr	r3, [r3, #0]
2400d8ba:	2210      	movs	r2, #16
2400d8bc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
2400d8be:	68f8      	ldr	r0, [r7, #12]
2400d8c0:	f000 fe31 	bl	2400e526 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
2400d8c4:	68f8      	ldr	r0, [r7, #12]
2400d8c6:	f000 f9c0 	bl	2400dc4a <I2C_ITSlaveSeqCplt>
2400d8ca:	e033      	b.n	2400d934 <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d8cc:	68fb      	ldr	r3, [r7, #12]
2400d8ce:	681b      	ldr	r3, [r3, #0]
2400d8d0:	2210      	movs	r2, #16
2400d8d2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
2400d8d4:	e034      	b.n	2400d940 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d8d6:	68fb      	ldr	r3, [r7, #12]
2400d8d8:	681b      	ldr	r3, [r3, #0]
2400d8da:	2210      	movs	r2, #16
2400d8dc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400d8de:	68fb      	ldr	r3, [r7, #12]
2400d8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d8e2:	f043 0204 	orr.w	r2, r3, #4
2400d8e6:	68fb      	ldr	r3, [r7, #12]
2400d8e8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
2400d8ea:	68fb      	ldr	r3, [r7, #12]
2400d8ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400d8f0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400d8f2:	69bb      	ldr	r3, [r7, #24]
2400d8f4:	2b00      	cmp	r3, #0
2400d8f6:	d003      	beq.n	2400d900 <I2C_Slave_ISR_DMA+0x34c>
2400d8f8:	69bb      	ldr	r3, [r7, #24]
2400d8fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400d8fe:	d11f      	bne.n	2400d940 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400d900:	7dfb      	ldrb	r3, [r7, #23]
2400d902:	2b21      	cmp	r3, #33	; 0x21
2400d904:	d002      	beq.n	2400d90c <I2C_Slave_ISR_DMA+0x358>
2400d906:	7dfb      	ldrb	r3, [r7, #23]
2400d908:	2b29      	cmp	r3, #41	; 0x29
2400d90a:	d103      	bne.n	2400d914 <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400d90c:	68fb      	ldr	r3, [r7, #12]
2400d90e:	2221      	movs	r2, #33	; 0x21
2400d910:	631a      	str	r2, [r3, #48]	; 0x30
2400d912:	e008      	b.n	2400d926 <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400d914:	7dfb      	ldrb	r3, [r7, #23]
2400d916:	2b22      	cmp	r3, #34	; 0x22
2400d918:	d002      	beq.n	2400d920 <I2C_Slave_ISR_DMA+0x36c>
2400d91a:	7dfb      	ldrb	r3, [r7, #23]
2400d91c:	2b2a      	cmp	r3, #42	; 0x2a
2400d91e:	d102      	bne.n	2400d926 <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400d920:	68fb      	ldr	r3, [r7, #12]
2400d922:	2222      	movs	r2, #34	; 0x22
2400d924:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
2400d926:	68fb      	ldr	r3, [r7, #12]
2400d928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400d92a:	4619      	mov	r1, r3
2400d92c:	68f8      	ldr	r0, [r7, #12]
2400d92e:	f000 fd03 	bl	2400e338 <I2C_ITError>
      if (treatdmanack == 1U)
2400d932:	e005      	b.n	2400d940 <I2C_Slave_ISR_DMA+0x38c>
2400d934:	e004      	b.n	2400d940 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400d936:	68fb      	ldr	r3, [r7, #12]
2400d938:	681b      	ldr	r3, [r3, #0]
2400d93a:	2210      	movs	r2, #16
2400d93c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400d93e:	e011      	b.n	2400d964 <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
2400d940:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400d942:	e00f      	b.n	2400d964 <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400d944:	68bb      	ldr	r3, [r7, #8]
2400d946:	08db      	lsrs	r3, r3, #3
2400d948:	f003 0301 	and.w	r3, r3, #1
2400d94c:	2b00      	cmp	r3, #0
2400d94e:	d009      	beq.n	2400d964 <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400d950:	687b      	ldr	r3, [r7, #4]
2400d952:	08db      	lsrs	r3, r3, #3
2400d954:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400d958:	2b00      	cmp	r3, #0
2400d95a:	d003      	beq.n	2400d964 <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
2400d95c:	68b9      	ldr	r1, [r7, #8]
2400d95e:	68f8      	ldr	r0, [r7, #12]
2400d960:	f000 f8b2 	bl	2400dac8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400d964:	68fb      	ldr	r3, [r7, #12]
2400d966:	2200      	movs	r2, #0
2400d968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2400d96c:	2300      	movs	r3, #0
}
2400d96e:	4618      	mov	r0, r3
2400d970:	3720      	adds	r7, #32
2400d972:	46bd      	mov	sp, r7
2400d974:	bd80      	pop	{r7, pc}
2400d976:	bf00      	nop

2400d978 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
2400d978:	b580      	push	{r7, lr}
2400d97a:	b086      	sub	sp, #24
2400d97c:	af02      	add	r7, sp, #8
2400d97e:	60f8      	str	r0, [r7, #12]
2400d980:	4608      	mov	r0, r1
2400d982:	4611      	mov	r1, r2
2400d984:	461a      	mov	r2, r3
2400d986:	4603      	mov	r3, r0
2400d988:	817b      	strh	r3, [r7, #10]
2400d98a:	460b      	mov	r3, r1
2400d98c:	813b      	strh	r3, [r7, #8]
2400d98e:	4613      	mov	r3, r2
2400d990:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400d992:	88fb      	ldrh	r3, [r7, #6]
2400d994:	b2da      	uxtb	r2, r3
2400d996:	8979      	ldrh	r1, [r7, #10]
2400d998:	4b20      	ldr	r3, [pc, #128]	; (2400da1c <I2C_RequestMemoryWrite+0xa4>)
2400d99a:	9300      	str	r3, [sp, #0]
2400d99c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2400d9a0:	68f8      	ldr	r0, [r7, #12]
2400d9a2:	f001 fac7 	bl	2400ef34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400d9a6:	69fa      	ldr	r2, [r7, #28]
2400d9a8:	69b9      	ldr	r1, [r7, #24]
2400d9aa:	68f8      	ldr	r0, [r7, #12]
2400d9ac:	f001 f8e0 	bl	2400eb70 <I2C_WaitOnTXISFlagUntilTimeout>
2400d9b0:	4603      	mov	r3, r0
2400d9b2:	2b00      	cmp	r3, #0
2400d9b4:	d001      	beq.n	2400d9ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
2400d9b6:	2301      	movs	r3, #1
2400d9b8:	e02c      	b.n	2400da14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400d9ba:	88fb      	ldrh	r3, [r7, #6]
2400d9bc:	2b01      	cmp	r3, #1
2400d9be:	d105      	bne.n	2400d9cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400d9c0:	893b      	ldrh	r3, [r7, #8]
2400d9c2:	b2da      	uxtb	r2, r3
2400d9c4:	68fb      	ldr	r3, [r7, #12]
2400d9c6:	681b      	ldr	r3, [r3, #0]
2400d9c8:	629a      	str	r2, [r3, #40]	; 0x28
2400d9ca:	e015      	b.n	2400d9f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400d9cc:	893b      	ldrh	r3, [r7, #8]
2400d9ce:	0a1b      	lsrs	r3, r3, #8
2400d9d0:	b29b      	uxth	r3, r3
2400d9d2:	b2da      	uxtb	r2, r3
2400d9d4:	68fb      	ldr	r3, [r7, #12]
2400d9d6:	681b      	ldr	r3, [r3, #0]
2400d9d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400d9da:	69fa      	ldr	r2, [r7, #28]
2400d9dc:	69b9      	ldr	r1, [r7, #24]
2400d9de:	68f8      	ldr	r0, [r7, #12]
2400d9e0:	f001 f8c6 	bl	2400eb70 <I2C_WaitOnTXISFlagUntilTimeout>
2400d9e4:	4603      	mov	r3, r0
2400d9e6:	2b00      	cmp	r3, #0
2400d9e8:	d001      	beq.n	2400d9ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
2400d9ea:	2301      	movs	r3, #1
2400d9ec:	e012      	b.n	2400da14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400d9ee:	893b      	ldrh	r3, [r7, #8]
2400d9f0:	b2da      	uxtb	r2, r3
2400d9f2:	68fb      	ldr	r3, [r7, #12]
2400d9f4:	681b      	ldr	r3, [r3, #0]
2400d9f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
2400d9f8:	69fb      	ldr	r3, [r7, #28]
2400d9fa:	9300      	str	r3, [sp, #0]
2400d9fc:	69bb      	ldr	r3, [r7, #24]
2400d9fe:	2200      	movs	r2, #0
2400da00:	2180      	movs	r1, #128	; 0x80
2400da02:	68f8      	ldr	r0, [r7, #12]
2400da04:	f001 f874 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400da08:	4603      	mov	r3, r0
2400da0a:	2b00      	cmp	r3, #0
2400da0c:	d001      	beq.n	2400da12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
2400da0e:	2301      	movs	r3, #1
2400da10:	e000      	b.n	2400da14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
2400da12:	2300      	movs	r3, #0
}
2400da14:	4618      	mov	r0, r3
2400da16:	3710      	adds	r7, #16
2400da18:	46bd      	mov	sp, r7
2400da1a:	bd80      	pop	{r7, pc}
2400da1c:	80002000 	.word	0x80002000

2400da20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
2400da20:	b580      	push	{r7, lr}
2400da22:	b086      	sub	sp, #24
2400da24:	af02      	add	r7, sp, #8
2400da26:	60f8      	str	r0, [r7, #12]
2400da28:	4608      	mov	r0, r1
2400da2a:	4611      	mov	r1, r2
2400da2c:	461a      	mov	r2, r3
2400da2e:	4603      	mov	r3, r0
2400da30:	817b      	strh	r3, [r7, #10]
2400da32:	460b      	mov	r3, r1
2400da34:	813b      	strh	r3, [r7, #8]
2400da36:	4613      	mov	r3, r2
2400da38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400da3a:	88fb      	ldrh	r3, [r7, #6]
2400da3c:	b2da      	uxtb	r2, r3
2400da3e:	8979      	ldrh	r1, [r7, #10]
2400da40:	4b20      	ldr	r3, [pc, #128]	; (2400dac4 <I2C_RequestMemoryRead+0xa4>)
2400da42:	9300      	str	r3, [sp, #0]
2400da44:	2300      	movs	r3, #0
2400da46:	68f8      	ldr	r0, [r7, #12]
2400da48:	f001 fa74 	bl	2400ef34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400da4c:	69fa      	ldr	r2, [r7, #28]
2400da4e:	69b9      	ldr	r1, [r7, #24]
2400da50:	68f8      	ldr	r0, [r7, #12]
2400da52:	f001 f88d 	bl	2400eb70 <I2C_WaitOnTXISFlagUntilTimeout>
2400da56:	4603      	mov	r3, r0
2400da58:	2b00      	cmp	r3, #0
2400da5a:	d001      	beq.n	2400da60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
2400da5c:	2301      	movs	r3, #1
2400da5e:	e02c      	b.n	2400daba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400da60:	88fb      	ldrh	r3, [r7, #6]
2400da62:	2b01      	cmp	r3, #1
2400da64:	d105      	bne.n	2400da72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400da66:	893b      	ldrh	r3, [r7, #8]
2400da68:	b2da      	uxtb	r2, r3
2400da6a:	68fb      	ldr	r3, [r7, #12]
2400da6c:	681b      	ldr	r3, [r3, #0]
2400da6e:	629a      	str	r2, [r3, #40]	; 0x28
2400da70:	e015      	b.n	2400da9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400da72:	893b      	ldrh	r3, [r7, #8]
2400da74:	0a1b      	lsrs	r3, r3, #8
2400da76:	b29b      	uxth	r3, r3
2400da78:	b2da      	uxtb	r2, r3
2400da7a:	68fb      	ldr	r3, [r7, #12]
2400da7c:	681b      	ldr	r3, [r3, #0]
2400da7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400da80:	69fa      	ldr	r2, [r7, #28]
2400da82:	69b9      	ldr	r1, [r7, #24]
2400da84:	68f8      	ldr	r0, [r7, #12]
2400da86:	f001 f873 	bl	2400eb70 <I2C_WaitOnTXISFlagUntilTimeout>
2400da8a:	4603      	mov	r3, r0
2400da8c:	2b00      	cmp	r3, #0
2400da8e:	d001      	beq.n	2400da94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
2400da90:	2301      	movs	r3, #1
2400da92:	e012      	b.n	2400daba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400da94:	893b      	ldrh	r3, [r7, #8]
2400da96:	b2da      	uxtb	r2, r3
2400da98:	68fb      	ldr	r3, [r7, #12]
2400da9a:	681b      	ldr	r3, [r3, #0]
2400da9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
2400da9e:	69fb      	ldr	r3, [r7, #28]
2400daa0:	9300      	str	r3, [sp, #0]
2400daa2:	69bb      	ldr	r3, [r7, #24]
2400daa4:	2200      	movs	r2, #0
2400daa6:	2140      	movs	r1, #64	; 0x40
2400daa8:	68f8      	ldr	r0, [r7, #12]
2400daaa:	f001 f821 	bl	2400eaf0 <I2C_WaitOnFlagUntilTimeout>
2400daae:	4603      	mov	r3, r0
2400dab0:	2b00      	cmp	r3, #0
2400dab2:	d001      	beq.n	2400dab8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
2400dab4:	2301      	movs	r3, #1
2400dab6:	e000      	b.n	2400daba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
2400dab8:	2300      	movs	r3, #0
}
2400daba:	4618      	mov	r0, r3
2400dabc:	3710      	adds	r7, #16
2400dabe:	46bd      	mov	sp, r7
2400dac0:	bd80      	pop	{r7, pc}
2400dac2:	bf00      	nop
2400dac4:	80002000 	.word	0x80002000

2400dac8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400dac8:	b580      	push	{r7, lr}
2400daca:	b084      	sub	sp, #16
2400dacc:	af00      	add	r7, sp, #0
2400dace:	6078      	str	r0, [r7, #4]
2400dad0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400dad2:	687b      	ldr	r3, [r7, #4]
2400dad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dad8:	b2db      	uxtb	r3, r3
2400dada:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400dade:	2b28      	cmp	r3, #40	; 0x28
2400dae0:	d16a      	bne.n	2400dbb8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
2400dae2:	687b      	ldr	r3, [r7, #4]
2400dae4:	681b      	ldr	r3, [r3, #0]
2400dae6:	699b      	ldr	r3, [r3, #24]
2400dae8:	0c1b      	lsrs	r3, r3, #16
2400daea:	b2db      	uxtb	r3, r3
2400daec:	f003 0301 	and.w	r3, r3, #1
2400daf0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
2400daf2:	687b      	ldr	r3, [r7, #4]
2400daf4:	681b      	ldr	r3, [r3, #0]
2400daf6:	699b      	ldr	r3, [r3, #24]
2400daf8:	0c1b      	lsrs	r3, r3, #16
2400dafa:	b29b      	uxth	r3, r3
2400dafc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400db00:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
2400db02:	687b      	ldr	r3, [r7, #4]
2400db04:	681b      	ldr	r3, [r3, #0]
2400db06:	689b      	ldr	r3, [r3, #8]
2400db08:	b29b      	uxth	r3, r3
2400db0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400db0e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
2400db10:	687b      	ldr	r3, [r7, #4]
2400db12:	681b      	ldr	r3, [r3, #0]
2400db14:	68db      	ldr	r3, [r3, #12]
2400db16:	b29b      	uxth	r3, r3
2400db18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400db1c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400db1e:	687b      	ldr	r3, [r7, #4]
2400db20:	68db      	ldr	r3, [r3, #12]
2400db22:	2b02      	cmp	r3, #2
2400db24:	d138      	bne.n	2400db98 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
2400db26:	897b      	ldrh	r3, [r7, #10]
2400db28:	09db      	lsrs	r3, r3, #7
2400db2a:	b29a      	uxth	r2, r3
2400db2c:	89bb      	ldrh	r3, [r7, #12]
2400db2e:	4053      	eors	r3, r2
2400db30:	b29b      	uxth	r3, r3
2400db32:	f003 0306 	and.w	r3, r3, #6
2400db36:	2b00      	cmp	r3, #0
2400db38:	d11c      	bne.n	2400db74 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
2400db3a:	897b      	ldrh	r3, [r7, #10]
2400db3c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
2400db3e:	687b      	ldr	r3, [r7, #4]
2400db40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400db42:	1c5a      	adds	r2, r3, #1
2400db44:	687b      	ldr	r3, [r7, #4]
2400db46:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
2400db48:	687b      	ldr	r3, [r7, #4]
2400db4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400db4c:	2b02      	cmp	r3, #2
2400db4e:	d13b      	bne.n	2400dbc8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
2400db50:	687b      	ldr	r3, [r7, #4]
2400db52:	2200      	movs	r2, #0
2400db54:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400db56:	687b      	ldr	r3, [r7, #4]
2400db58:	681b      	ldr	r3, [r3, #0]
2400db5a:	2208      	movs	r2, #8
2400db5c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2400db5e:	687b      	ldr	r3, [r7, #4]
2400db60:	2200      	movs	r2, #0
2400db62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400db66:	89ba      	ldrh	r2, [r7, #12]
2400db68:	7bfb      	ldrb	r3, [r7, #15]
2400db6a:	4619      	mov	r1, r3
2400db6c:	6878      	ldr	r0, [r7, #4]
2400db6e:	f7ff f99a 	bl	2400cea6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
2400db72:	e029      	b.n	2400dbc8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
2400db74:	893b      	ldrh	r3, [r7, #8]
2400db76:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400db78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400db7c:	6878      	ldr	r0, [r7, #4]
2400db7e:	f001 fa6f 	bl	2400f060 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
2400db82:	687b      	ldr	r3, [r7, #4]
2400db84:	2200      	movs	r2, #0
2400db86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400db8a:	89ba      	ldrh	r2, [r7, #12]
2400db8c:	7bfb      	ldrb	r3, [r7, #15]
2400db8e:	4619      	mov	r1, r3
2400db90:	6878      	ldr	r0, [r7, #4]
2400db92:	f7ff f988 	bl	2400cea6 <HAL_I2C_AddrCallback>
}
2400db96:	e017      	b.n	2400dbc8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400db98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2400db9c:	6878      	ldr	r0, [r7, #4]
2400db9e:	f001 fa5f 	bl	2400f060 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
2400dba2:	687b      	ldr	r3, [r7, #4]
2400dba4:	2200      	movs	r2, #0
2400dba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400dbaa:	89ba      	ldrh	r2, [r7, #12]
2400dbac:	7bfb      	ldrb	r3, [r7, #15]
2400dbae:	4619      	mov	r1, r3
2400dbb0:	6878      	ldr	r0, [r7, #4]
2400dbb2:	f7ff f978 	bl	2400cea6 <HAL_I2C_AddrCallback>
}
2400dbb6:	e007      	b.n	2400dbc8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400dbb8:	687b      	ldr	r3, [r7, #4]
2400dbba:	681b      	ldr	r3, [r3, #0]
2400dbbc:	2208      	movs	r2, #8
2400dbbe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
2400dbc0:	687b      	ldr	r3, [r7, #4]
2400dbc2:	2200      	movs	r2, #0
2400dbc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
2400dbc8:	bf00      	nop
2400dbca:	3710      	adds	r7, #16
2400dbcc:	46bd      	mov	sp, r7
2400dbce:	bd80      	pop	{r7, pc}

2400dbd0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400dbd0:	b580      	push	{r7, lr}
2400dbd2:	b082      	sub	sp, #8
2400dbd4:	af00      	add	r7, sp, #0
2400dbd6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400dbd8:	687b      	ldr	r3, [r7, #4]
2400dbda:	2200      	movs	r2, #0
2400dbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400dbe0:	687b      	ldr	r3, [r7, #4]
2400dbe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dbe6:	b2db      	uxtb	r3, r3
2400dbe8:	2b21      	cmp	r3, #33	; 0x21
2400dbea:	d115      	bne.n	2400dc18 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
2400dbec:	687b      	ldr	r3, [r7, #4]
2400dbee:	2220      	movs	r2, #32
2400dbf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400dbf4:	687b      	ldr	r3, [r7, #4]
2400dbf6:	2211      	movs	r2, #17
2400dbf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
2400dbfa:	687b      	ldr	r3, [r7, #4]
2400dbfc:	2200      	movs	r2, #0
2400dbfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400dc00:	2101      	movs	r1, #1
2400dc02:	6878      	ldr	r0, [r7, #4]
2400dc04:	f001 fa2c 	bl	2400f060 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400dc08:	687b      	ldr	r3, [r7, #4]
2400dc0a:	2200      	movs	r2, #0
2400dc0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
2400dc10:	6878      	ldr	r0, [r7, #4]
2400dc12:	f7ff f920 	bl	2400ce56 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400dc16:	e014      	b.n	2400dc42 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
2400dc18:	687b      	ldr	r3, [r7, #4]
2400dc1a:	2220      	movs	r2, #32
2400dc1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400dc20:	687b      	ldr	r3, [r7, #4]
2400dc22:	2212      	movs	r2, #18
2400dc24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
2400dc26:	687b      	ldr	r3, [r7, #4]
2400dc28:	2200      	movs	r2, #0
2400dc2a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400dc2c:	2102      	movs	r1, #2
2400dc2e:	6878      	ldr	r0, [r7, #4]
2400dc30:	f001 fa16 	bl	2400f060 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400dc34:	687b      	ldr	r3, [r7, #4]
2400dc36:	2200      	movs	r2, #0
2400dc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2400dc3c:	6878      	ldr	r0, [r7, #4]
2400dc3e:	f7ff f914 	bl	2400ce6a <HAL_I2C_MasterRxCpltCallback>
}
2400dc42:	bf00      	nop
2400dc44:	3708      	adds	r7, #8
2400dc46:	46bd      	mov	sp, r7
2400dc48:	bd80      	pop	{r7, pc}

2400dc4a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400dc4a:	b580      	push	{r7, lr}
2400dc4c:	b084      	sub	sp, #16
2400dc4e:	af00      	add	r7, sp, #0
2400dc50:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400dc52:	687b      	ldr	r3, [r7, #4]
2400dc54:	681b      	ldr	r3, [r3, #0]
2400dc56:	681b      	ldr	r3, [r3, #0]
2400dc58:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400dc5a:	687b      	ldr	r3, [r7, #4]
2400dc5c:	2200      	movs	r2, #0
2400dc5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400dc62:	68fb      	ldr	r3, [r7, #12]
2400dc64:	0b9b      	lsrs	r3, r3, #14
2400dc66:	f003 0301 	and.w	r3, r3, #1
2400dc6a:	2b00      	cmp	r3, #0
2400dc6c:	d008      	beq.n	2400dc80 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400dc6e:	687b      	ldr	r3, [r7, #4]
2400dc70:	681b      	ldr	r3, [r3, #0]
2400dc72:	681a      	ldr	r2, [r3, #0]
2400dc74:	687b      	ldr	r3, [r7, #4]
2400dc76:	681b      	ldr	r3, [r3, #0]
2400dc78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400dc7c:	601a      	str	r2, [r3, #0]
2400dc7e:	e00d      	b.n	2400dc9c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400dc80:	68fb      	ldr	r3, [r7, #12]
2400dc82:	0bdb      	lsrs	r3, r3, #15
2400dc84:	f003 0301 	and.w	r3, r3, #1
2400dc88:	2b00      	cmp	r3, #0
2400dc8a:	d007      	beq.n	2400dc9c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400dc8c:	687b      	ldr	r3, [r7, #4]
2400dc8e:	681b      	ldr	r3, [r3, #0]
2400dc90:	681a      	ldr	r2, [r3, #0]
2400dc92:	687b      	ldr	r3, [r7, #4]
2400dc94:	681b      	ldr	r3, [r3, #0]
2400dc96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400dc9a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400dc9c:	687b      	ldr	r3, [r7, #4]
2400dc9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dca2:	b2db      	uxtb	r3, r3
2400dca4:	2b29      	cmp	r3, #41	; 0x29
2400dca6:	d112      	bne.n	2400dcce <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400dca8:	687b      	ldr	r3, [r7, #4]
2400dcaa:	2228      	movs	r2, #40	; 0x28
2400dcac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400dcb0:	687b      	ldr	r3, [r7, #4]
2400dcb2:	2221      	movs	r2, #33	; 0x21
2400dcb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400dcb6:	2101      	movs	r1, #1
2400dcb8:	6878      	ldr	r0, [r7, #4]
2400dcba:	f001 f9d1 	bl	2400f060 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400dcbe:	687b      	ldr	r3, [r7, #4]
2400dcc0:	2200      	movs	r2, #0
2400dcc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400dcc6:	6878      	ldr	r0, [r7, #4]
2400dcc8:	f7ff f8d9 	bl	2400ce7e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2400dccc:	e017      	b.n	2400dcfe <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400dcce:	687b      	ldr	r3, [r7, #4]
2400dcd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dcd4:	b2db      	uxtb	r3, r3
2400dcd6:	2b2a      	cmp	r3, #42	; 0x2a
2400dcd8:	d111      	bne.n	2400dcfe <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400dcda:	687b      	ldr	r3, [r7, #4]
2400dcdc:	2228      	movs	r2, #40	; 0x28
2400dcde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400dce2:	687b      	ldr	r3, [r7, #4]
2400dce4:	2222      	movs	r2, #34	; 0x22
2400dce6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400dce8:	2102      	movs	r1, #2
2400dcea:	6878      	ldr	r0, [r7, #4]
2400dcec:	f001 f9b8 	bl	2400f060 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400dcf0:	687b      	ldr	r3, [r7, #4]
2400dcf2:	2200      	movs	r2, #0
2400dcf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400dcf8:	6878      	ldr	r0, [r7, #4]
2400dcfa:	f7ff f8ca 	bl	2400ce92 <HAL_I2C_SlaveRxCpltCallback>
}
2400dcfe:	bf00      	nop
2400dd00:	3710      	adds	r7, #16
2400dd02:	46bd      	mov	sp, r7
2400dd04:	bd80      	pop	{r7, pc}
	...

2400dd08 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400dd08:	b580      	push	{r7, lr}
2400dd0a:	b086      	sub	sp, #24
2400dd0c:	af00      	add	r7, sp, #0
2400dd0e:	6078      	str	r0, [r7, #4]
2400dd10:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
2400dd12:	683b      	ldr	r3, [r7, #0]
2400dd14:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400dd16:	687b      	ldr	r3, [r7, #4]
2400dd18:	681b      	ldr	r3, [r3, #0]
2400dd1a:	2220      	movs	r2, #32
2400dd1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400dd1e:	687b      	ldr	r3, [r7, #4]
2400dd20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dd24:	b2db      	uxtb	r3, r3
2400dd26:	2b21      	cmp	r3, #33	; 0x21
2400dd28:	d107      	bne.n	2400dd3a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400dd2a:	2101      	movs	r1, #1
2400dd2c:	6878      	ldr	r0, [r7, #4]
2400dd2e:	f001 f997 	bl	2400f060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400dd32:	687b      	ldr	r3, [r7, #4]
2400dd34:	2211      	movs	r2, #17
2400dd36:	631a      	str	r2, [r3, #48]	; 0x30
2400dd38:	e00c      	b.n	2400dd54 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400dd3a:	687b      	ldr	r3, [r7, #4]
2400dd3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dd40:	b2db      	uxtb	r3, r3
2400dd42:	2b22      	cmp	r3, #34	; 0x22
2400dd44:	d106      	bne.n	2400dd54 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400dd46:	2102      	movs	r1, #2
2400dd48:	6878      	ldr	r0, [r7, #4]
2400dd4a:	f001 f989 	bl	2400f060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400dd4e:	687b      	ldr	r3, [r7, #4]
2400dd50:	2212      	movs	r2, #18
2400dd52:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400dd54:	687b      	ldr	r3, [r7, #4]
2400dd56:	681b      	ldr	r3, [r3, #0]
2400dd58:	6859      	ldr	r1, [r3, #4]
2400dd5a:	687b      	ldr	r3, [r7, #4]
2400dd5c:	681a      	ldr	r2, [r3, #0]
2400dd5e:	4b4d      	ldr	r3, [pc, #308]	; (2400de94 <I2C_ITMasterCplt+0x18c>)
2400dd60:	400b      	ands	r3, r1
2400dd62:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
2400dd64:	687b      	ldr	r3, [r7, #4]
2400dd66:	2200      	movs	r2, #0
2400dd68:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400dd6a:	687b      	ldr	r3, [r7, #4]
2400dd6c:	4a4a      	ldr	r2, [pc, #296]	; (2400de98 <I2C_ITMasterCplt+0x190>)
2400dd6e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
2400dd70:	697b      	ldr	r3, [r7, #20]
2400dd72:	091b      	lsrs	r3, r3, #4
2400dd74:	f003 0301 	and.w	r3, r3, #1
2400dd78:	2b00      	cmp	r3, #0
2400dd7a:	d009      	beq.n	2400dd90 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400dd7c:	687b      	ldr	r3, [r7, #4]
2400dd7e:	681b      	ldr	r3, [r3, #0]
2400dd80:	2210      	movs	r2, #16
2400dd82:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400dd84:	687b      	ldr	r3, [r7, #4]
2400dd86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400dd88:	f043 0204 	orr.w	r2, r3, #4
2400dd8c:	687b      	ldr	r3, [r7, #4]
2400dd8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
2400dd90:	687b      	ldr	r3, [r7, #4]
2400dd92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dd96:	b2db      	uxtb	r3, r3
2400dd98:	2b60      	cmp	r3, #96	; 0x60
2400dd9a:	d10b      	bne.n	2400ddb4 <I2C_ITMasterCplt+0xac>
2400dd9c:	697b      	ldr	r3, [r7, #20]
2400dd9e:	089b      	lsrs	r3, r3, #2
2400dda0:	f003 0301 	and.w	r3, r3, #1
2400dda4:	2b00      	cmp	r3, #0
2400dda6:	d005      	beq.n	2400ddb4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
2400dda8:	687b      	ldr	r3, [r7, #4]
2400ddaa:	681b      	ldr	r3, [r3, #0]
2400ddac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400ddae:	b2db      	uxtb	r3, r3
2400ddb0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
2400ddb2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400ddb4:	6878      	ldr	r0, [r7, #4]
2400ddb6:	f000 fbb6 	bl	2400e526 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400ddba:	687b      	ldr	r3, [r7, #4]
2400ddbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ddbe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
2400ddc0:	687b      	ldr	r3, [r7, #4]
2400ddc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400ddc6:	b2db      	uxtb	r3, r3
2400ddc8:	2b60      	cmp	r3, #96	; 0x60
2400ddca:	d002      	beq.n	2400ddd2 <I2C_ITMasterCplt+0xca>
2400ddcc:	693b      	ldr	r3, [r7, #16]
2400ddce:	2b00      	cmp	r3, #0
2400ddd0:	d006      	beq.n	2400dde0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400ddd2:	687b      	ldr	r3, [r7, #4]
2400ddd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ddd6:	4619      	mov	r1, r3
2400ddd8:	6878      	ldr	r0, [r7, #4]
2400ddda:	f000 faad 	bl	2400e338 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
2400ddde:	e054      	b.n	2400de8a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400dde0:	687b      	ldr	r3, [r7, #4]
2400dde2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400dde6:	b2db      	uxtb	r3, r3
2400dde8:	2b21      	cmp	r3, #33	; 0x21
2400ddea:	d124      	bne.n	2400de36 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
2400ddec:	687b      	ldr	r3, [r7, #4]
2400ddee:	2220      	movs	r2, #32
2400ddf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400ddf4:	687b      	ldr	r3, [r7, #4]
2400ddf6:	2200      	movs	r2, #0
2400ddf8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400ddfa:	687b      	ldr	r3, [r7, #4]
2400ddfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400de00:	b2db      	uxtb	r3, r3
2400de02:	2b40      	cmp	r3, #64	; 0x40
2400de04:	d10b      	bne.n	2400de1e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400de06:	687b      	ldr	r3, [r7, #4]
2400de08:	2200      	movs	r2, #0
2400de0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400de0e:	687b      	ldr	r3, [r7, #4]
2400de10:	2200      	movs	r2, #0
2400de12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
2400de16:	6878      	ldr	r0, [r7, #4]
2400de18:	f7ff f85d 	bl	2400ced6 <HAL_I2C_MemTxCpltCallback>
}
2400de1c:	e035      	b.n	2400de8a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400de1e:	687b      	ldr	r3, [r7, #4]
2400de20:	2200      	movs	r2, #0
2400de22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400de26:	687b      	ldr	r3, [r7, #4]
2400de28:	2200      	movs	r2, #0
2400de2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
2400de2e:	6878      	ldr	r0, [r7, #4]
2400de30:	f7ff f811 	bl	2400ce56 <HAL_I2C_MasterTxCpltCallback>
}
2400de34:	e029      	b.n	2400de8a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400de36:	687b      	ldr	r3, [r7, #4]
2400de38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400de3c:	b2db      	uxtb	r3, r3
2400de3e:	2b22      	cmp	r3, #34	; 0x22
2400de40:	d123      	bne.n	2400de8a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
2400de42:	687b      	ldr	r3, [r7, #4]
2400de44:	2220      	movs	r2, #32
2400de46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400de4a:	687b      	ldr	r3, [r7, #4]
2400de4c:	2200      	movs	r2, #0
2400de4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400de50:	687b      	ldr	r3, [r7, #4]
2400de52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400de56:	b2db      	uxtb	r3, r3
2400de58:	2b40      	cmp	r3, #64	; 0x40
2400de5a:	d10b      	bne.n	2400de74 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400de5c:	687b      	ldr	r3, [r7, #4]
2400de5e:	2200      	movs	r2, #0
2400de60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400de64:	687b      	ldr	r3, [r7, #4]
2400de66:	2200      	movs	r2, #0
2400de68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
2400de6c:	6878      	ldr	r0, [r7, #4]
2400de6e:	f7ff f83c 	bl	2400ceea <HAL_I2C_MemRxCpltCallback>
}
2400de72:	e00a      	b.n	2400de8a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400de74:	687b      	ldr	r3, [r7, #4]
2400de76:	2200      	movs	r2, #0
2400de78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
2400de7c:	687b      	ldr	r3, [r7, #4]
2400de7e:	2200      	movs	r2, #0
2400de80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
2400de84:	6878      	ldr	r0, [r7, #4]
2400de86:	f7fe fff0 	bl	2400ce6a <HAL_I2C_MasterRxCpltCallback>
}
2400de8a:	bf00      	nop
2400de8c:	3718      	adds	r7, #24
2400de8e:	46bd      	mov	sp, r7
2400de90:	bd80      	pop	{r7, pc}
2400de92:	bf00      	nop
2400de94:	fe00e800 	.word	0xfe00e800
2400de98:	ffff0000 	.word	0xffff0000

2400de9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400de9c:	b580      	push	{r7, lr}
2400de9e:	b086      	sub	sp, #24
2400dea0:	af00      	add	r7, sp, #0
2400dea2:	6078      	str	r0, [r7, #4]
2400dea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400dea6:	687b      	ldr	r3, [r7, #4]
2400dea8:	681b      	ldr	r3, [r3, #0]
2400deaa:	681b      	ldr	r3, [r3, #0]
2400deac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
2400deae:	683b      	ldr	r3, [r7, #0]
2400deb0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400deb2:	687b      	ldr	r3, [r7, #4]
2400deb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400deb8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400deba:	687b      	ldr	r3, [r7, #4]
2400debc:	681b      	ldr	r3, [r3, #0]
2400debe:	2220      	movs	r2, #32
2400dec0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400dec2:	7bfb      	ldrb	r3, [r7, #15]
2400dec4:	2b21      	cmp	r3, #33	; 0x21
2400dec6:	d002      	beq.n	2400dece <I2C_ITSlaveCplt+0x32>
2400dec8:	7bfb      	ldrb	r3, [r7, #15]
2400deca:	2b29      	cmp	r3, #41	; 0x29
2400decc:	d108      	bne.n	2400dee0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400dece:	f248 0101 	movw	r1, #32769	; 0x8001
2400ded2:	6878      	ldr	r0, [r7, #4]
2400ded4:	f001 f8c4 	bl	2400f060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400ded8:	687b      	ldr	r3, [r7, #4]
2400deda:	2221      	movs	r2, #33	; 0x21
2400dedc:	631a      	str	r2, [r3, #48]	; 0x30
2400dede:	e00d      	b.n	2400defc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400dee0:	7bfb      	ldrb	r3, [r7, #15]
2400dee2:	2b22      	cmp	r3, #34	; 0x22
2400dee4:	d002      	beq.n	2400deec <I2C_ITSlaveCplt+0x50>
2400dee6:	7bfb      	ldrb	r3, [r7, #15]
2400dee8:	2b2a      	cmp	r3, #42	; 0x2a
2400deea:	d107      	bne.n	2400defc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400deec:	f248 0102 	movw	r1, #32770	; 0x8002
2400def0:	6878      	ldr	r0, [r7, #4]
2400def2:	f001 f8b5 	bl	2400f060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400def6:	687b      	ldr	r3, [r7, #4]
2400def8:	2222      	movs	r2, #34	; 0x22
2400defa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400defc:	687b      	ldr	r3, [r7, #4]
2400defe:	681b      	ldr	r3, [r3, #0]
2400df00:	685a      	ldr	r2, [r3, #4]
2400df02:	687b      	ldr	r3, [r7, #4]
2400df04:	681b      	ldr	r3, [r3, #0]
2400df06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400df0a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400df0c:	687b      	ldr	r3, [r7, #4]
2400df0e:	681b      	ldr	r3, [r3, #0]
2400df10:	6859      	ldr	r1, [r3, #4]
2400df12:	687b      	ldr	r3, [r7, #4]
2400df14:	681a      	ldr	r2, [r3, #0]
2400df16:	4b80      	ldr	r3, [pc, #512]	; (2400e118 <I2C_ITSlaveCplt+0x27c>)
2400df18:	400b      	ands	r3, r1
2400df1a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400df1c:	6878      	ldr	r0, [r7, #4]
2400df1e:	f000 fb02 	bl	2400e526 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400df22:	693b      	ldr	r3, [r7, #16]
2400df24:	0b9b      	lsrs	r3, r3, #14
2400df26:	f003 0301 	and.w	r3, r3, #1
2400df2a:	2b00      	cmp	r3, #0
2400df2c:	d07a      	beq.n	2400e024 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400df2e:	687b      	ldr	r3, [r7, #4]
2400df30:	681b      	ldr	r3, [r3, #0]
2400df32:	681a      	ldr	r2, [r3, #0]
2400df34:	687b      	ldr	r3, [r7, #4]
2400df36:	681b      	ldr	r3, [r3, #0]
2400df38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400df3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
2400df3e:	687b      	ldr	r3, [r7, #4]
2400df40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df42:	2b00      	cmp	r3, #0
2400df44:	f000 8111 	beq.w	2400e16a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
2400df48:	687b      	ldr	r3, [r7, #4]
2400df4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df4c:	681b      	ldr	r3, [r3, #0]
2400df4e:	4a73      	ldr	r2, [pc, #460]	; (2400e11c <I2C_ITSlaveCplt+0x280>)
2400df50:	4293      	cmp	r3, r2
2400df52:	d059      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400df54:	687b      	ldr	r3, [r7, #4]
2400df56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df58:	681b      	ldr	r3, [r3, #0]
2400df5a:	4a71      	ldr	r2, [pc, #452]	; (2400e120 <I2C_ITSlaveCplt+0x284>)
2400df5c:	4293      	cmp	r3, r2
2400df5e:	d053      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400df60:	687b      	ldr	r3, [r7, #4]
2400df62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df64:	681b      	ldr	r3, [r3, #0]
2400df66:	4a6f      	ldr	r2, [pc, #444]	; (2400e124 <I2C_ITSlaveCplt+0x288>)
2400df68:	4293      	cmp	r3, r2
2400df6a:	d04d      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400df6c:	687b      	ldr	r3, [r7, #4]
2400df6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df70:	681b      	ldr	r3, [r3, #0]
2400df72:	4a6d      	ldr	r2, [pc, #436]	; (2400e128 <I2C_ITSlaveCplt+0x28c>)
2400df74:	4293      	cmp	r3, r2
2400df76:	d047      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400df78:	687b      	ldr	r3, [r7, #4]
2400df7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df7c:	681b      	ldr	r3, [r3, #0]
2400df7e:	4a6b      	ldr	r2, [pc, #428]	; (2400e12c <I2C_ITSlaveCplt+0x290>)
2400df80:	4293      	cmp	r3, r2
2400df82:	d041      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400df84:	687b      	ldr	r3, [r7, #4]
2400df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df88:	681b      	ldr	r3, [r3, #0]
2400df8a:	4a69      	ldr	r2, [pc, #420]	; (2400e130 <I2C_ITSlaveCplt+0x294>)
2400df8c:	4293      	cmp	r3, r2
2400df8e:	d03b      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400df90:	687b      	ldr	r3, [r7, #4]
2400df92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400df94:	681b      	ldr	r3, [r3, #0]
2400df96:	4a67      	ldr	r2, [pc, #412]	; (2400e134 <I2C_ITSlaveCplt+0x298>)
2400df98:	4293      	cmp	r3, r2
2400df9a:	d035      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400df9c:	687b      	ldr	r3, [r7, #4]
2400df9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfa0:	681b      	ldr	r3, [r3, #0]
2400dfa2:	4a65      	ldr	r2, [pc, #404]	; (2400e138 <I2C_ITSlaveCplt+0x29c>)
2400dfa4:	4293      	cmp	r3, r2
2400dfa6:	d02f      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400dfa8:	687b      	ldr	r3, [r7, #4]
2400dfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfac:	681b      	ldr	r3, [r3, #0]
2400dfae:	4a63      	ldr	r2, [pc, #396]	; (2400e13c <I2C_ITSlaveCplt+0x2a0>)
2400dfb0:	4293      	cmp	r3, r2
2400dfb2:	d029      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400dfb4:	687b      	ldr	r3, [r7, #4]
2400dfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfb8:	681b      	ldr	r3, [r3, #0]
2400dfba:	4a61      	ldr	r2, [pc, #388]	; (2400e140 <I2C_ITSlaveCplt+0x2a4>)
2400dfbc:	4293      	cmp	r3, r2
2400dfbe:	d023      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400dfc0:	687b      	ldr	r3, [r7, #4]
2400dfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfc4:	681b      	ldr	r3, [r3, #0]
2400dfc6:	4a5f      	ldr	r2, [pc, #380]	; (2400e144 <I2C_ITSlaveCplt+0x2a8>)
2400dfc8:	4293      	cmp	r3, r2
2400dfca:	d01d      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400dfcc:	687b      	ldr	r3, [r7, #4]
2400dfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfd0:	681b      	ldr	r3, [r3, #0]
2400dfd2:	4a5d      	ldr	r2, [pc, #372]	; (2400e148 <I2C_ITSlaveCplt+0x2ac>)
2400dfd4:	4293      	cmp	r3, r2
2400dfd6:	d017      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400dfd8:	687b      	ldr	r3, [r7, #4]
2400dfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfdc:	681b      	ldr	r3, [r3, #0]
2400dfde:	4a5b      	ldr	r2, [pc, #364]	; (2400e14c <I2C_ITSlaveCplt+0x2b0>)
2400dfe0:	4293      	cmp	r3, r2
2400dfe2:	d011      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400dfe4:	687b      	ldr	r3, [r7, #4]
2400dfe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dfe8:	681b      	ldr	r3, [r3, #0]
2400dfea:	4a59      	ldr	r2, [pc, #356]	; (2400e150 <I2C_ITSlaveCplt+0x2b4>)
2400dfec:	4293      	cmp	r3, r2
2400dfee:	d00b      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400dff0:	687b      	ldr	r3, [r7, #4]
2400dff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400dff4:	681b      	ldr	r3, [r3, #0]
2400dff6:	4a57      	ldr	r2, [pc, #348]	; (2400e154 <I2C_ITSlaveCplt+0x2b8>)
2400dff8:	4293      	cmp	r3, r2
2400dffa:	d005      	beq.n	2400e008 <I2C_ITSlaveCplt+0x16c>
2400dffc:	687b      	ldr	r3, [r7, #4]
2400dffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e000:	681b      	ldr	r3, [r3, #0]
2400e002:	4a55      	ldr	r2, [pc, #340]	; (2400e158 <I2C_ITSlaveCplt+0x2bc>)
2400e004:	4293      	cmp	r3, r2
2400e006:	d105      	bne.n	2400e014 <I2C_ITSlaveCplt+0x178>
2400e008:	687b      	ldr	r3, [r7, #4]
2400e00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e00c:	681b      	ldr	r3, [r3, #0]
2400e00e:	685b      	ldr	r3, [r3, #4]
2400e010:	b29b      	uxth	r3, r3
2400e012:	e004      	b.n	2400e01e <I2C_ITSlaveCplt+0x182>
2400e014:	687b      	ldr	r3, [r7, #4]
2400e016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e018:	681b      	ldr	r3, [r3, #0]
2400e01a:	685b      	ldr	r3, [r3, #4]
2400e01c:	b29b      	uxth	r3, r3
2400e01e:	687a      	ldr	r2, [r7, #4]
2400e020:	8553      	strh	r3, [r2, #42]	; 0x2a
2400e022:	e0a2      	b.n	2400e16a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400e024:	693b      	ldr	r3, [r7, #16]
2400e026:	0bdb      	lsrs	r3, r3, #15
2400e028:	f003 0301 	and.w	r3, r3, #1
2400e02c:	2b00      	cmp	r3, #0
2400e02e:	f000 809c 	beq.w	2400e16a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e032:	687b      	ldr	r3, [r7, #4]
2400e034:	681b      	ldr	r3, [r3, #0]
2400e036:	681a      	ldr	r2, [r3, #0]
2400e038:	687b      	ldr	r3, [r7, #4]
2400e03a:	681b      	ldr	r3, [r3, #0]
2400e03c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e040:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
2400e042:	687b      	ldr	r3, [r7, #4]
2400e044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e046:	2b00      	cmp	r3, #0
2400e048:	f000 808f 	beq.w	2400e16a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
2400e04c:	687b      	ldr	r3, [r7, #4]
2400e04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e050:	681b      	ldr	r3, [r3, #0]
2400e052:	4a32      	ldr	r2, [pc, #200]	; (2400e11c <I2C_ITSlaveCplt+0x280>)
2400e054:	4293      	cmp	r3, r2
2400e056:	d059      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e058:	687b      	ldr	r3, [r7, #4]
2400e05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e05c:	681b      	ldr	r3, [r3, #0]
2400e05e:	4a30      	ldr	r2, [pc, #192]	; (2400e120 <I2C_ITSlaveCplt+0x284>)
2400e060:	4293      	cmp	r3, r2
2400e062:	d053      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e064:	687b      	ldr	r3, [r7, #4]
2400e066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e068:	681b      	ldr	r3, [r3, #0]
2400e06a:	4a2e      	ldr	r2, [pc, #184]	; (2400e124 <I2C_ITSlaveCplt+0x288>)
2400e06c:	4293      	cmp	r3, r2
2400e06e:	d04d      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e070:	687b      	ldr	r3, [r7, #4]
2400e072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e074:	681b      	ldr	r3, [r3, #0]
2400e076:	4a2c      	ldr	r2, [pc, #176]	; (2400e128 <I2C_ITSlaveCplt+0x28c>)
2400e078:	4293      	cmp	r3, r2
2400e07a:	d047      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e07c:	687b      	ldr	r3, [r7, #4]
2400e07e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e080:	681b      	ldr	r3, [r3, #0]
2400e082:	4a2a      	ldr	r2, [pc, #168]	; (2400e12c <I2C_ITSlaveCplt+0x290>)
2400e084:	4293      	cmp	r3, r2
2400e086:	d041      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e088:	687b      	ldr	r3, [r7, #4]
2400e08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e08c:	681b      	ldr	r3, [r3, #0]
2400e08e:	4a28      	ldr	r2, [pc, #160]	; (2400e130 <I2C_ITSlaveCplt+0x294>)
2400e090:	4293      	cmp	r3, r2
2400e092:	d03b      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e094:	687b      	ldr	r3, [r7, #4]
2400e096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e098:	681b      	ldr	r3, [r3, #0]
2400e09a:	4a26      	ldr	r2, [pc, #152]	; (2400e134 <I2C_ITSlaveCplt+0x298>)
2400e09c:	4293      	cmp	r3, r2
2400e09e:	d035      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e0a0:	687b      	ldr	r3, [r7, #4]
2400e0a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0a4:	681b      	ldr	r3, [r3, #0]
2400e0a6:	4a24      	ldr	r2, [pc, #144]	; (2400e138 <I2C_ITSlaveCplt+0x29c>)
2400e0a8:	4293      	cmp	r3, r2
2400e0aa:	d02f      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e0ac:	687b      	ldr	r3, [r7, #4]
2400e0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0b0:	681b      	ldr	r3, [r3, #0]
2400e0b2:	4a22      	ldr	r2, [pc, #136]	; (2400e13c <I2C_ITSlaveCplt+0x2a0>)
2400e0b4:	4293      	cmp	r3, r2
2400e0b6:	d029      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e0b8:	687b      	ldr	r3, [r7, #4]
2400e0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0bc:	681b      	ldr	r3, [r3, #0]
2400e0be:	4a20      	ldr	r2, [pc, #128]	; (2400e140 <I2C_ITSlaveCplt+0x2a4>)
2400e0c0:	4293      	cmp	r3, r2
2400e0c2:	d023      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e0c4:	687b      	ldr	r3, [r7, #4]
2400e0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0c8:	681b      	ldr	r3, [r3, #0]
2400e0ca:	4a1e      	ldr	r2, [pc, #120]	; (2400e144 <I2C_ITSlaveCplt+0x2a8>)
2400e0cc:	4293      	cmp	r3, r2
2400e0ce:	d01d      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e0d0:	687b      	ldr	r3, [r7, #4]
2400e0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0d4:	681b      	ldr	r3, [r3, #0]
2400e0d6:	4a1c      	ldr	r2, [pc, #112]	; (2400e148 <I2C_ITSlaveCplt+0x2ac>)
2400e0d8:	4293      	cmp	r3, r2
2400e0da:	d017      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e0dc:	687b      	ldr	r3, [r7, #4]
2400e0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0e0:	681b      	ldr	r3, [r3, #0]
2400e0e2:	4a1a      	ldr	r2, [pc, #104]	; (2400e14c <I2C_ITSlaveCplt+0x2b0>)
2400e0e4:	4293      	cmp	r3, r2
2400e0e6:	d011      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e0e8:	687b      	ldr	r3, [r7, #4]
2400e0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0ec:	681b      	ldr	r3, [r3, #0]
2400e0ee:	4a18      	ldr	r2, [pc, #96]	; (2400e150 <I2C_ITSlaveCplt+0x2b4>)
2400e0f0:	4293      	cmp	r3, r2
2400e0f2:	d00b      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e0f4:	687b      	ldr	r3, [r7, #4]
2400e0f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e0f8:	681b      	ldr	r3, [r3, #0]
2400e0fa:	4a16      	ldr	r2, [pc, #88]	; (2400e154 <I2C_ITSlaveCplt+0x2b8>)
2400e0fc:	4293      	cmp	r3, r2
2400e0fe:	d005      	beq.n	2400e10c <I2C_ITSlaveCplt+0x270>
2400e100:	687b      	ldr	r3, [r7, #4]
2400e102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e104:	681b      	ldr	r3, [r3, #0]
2400e106:	4a14      	ldr	r2, [pc, #80]	; (2400e158 <I2C_ITSlaveCplt+0x2bc>)
2400e108:	4293      	cmp	r3, r2
2400e10a:	d127      	bne.n	2400e15c <I2C_ITSlaveCplt+0x2c0>
2400e10c:	687b      	ldr	r3, [r7, #4]
2400e10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e110:	681b      	ldr	r3, [r3, #0]
2400e112:	685b      	ldr	r3, [r3, #4]
2400e114:	b29b      	uxth	r3, r3
2400e116:	e026      	b.n	2400e166 <I2C_ITSlaveCplt+0x2ca>
2400e118:	fe00e800 	.word	0xfe00e800
2400e11c:	40020010 	.word	0x40020010
2400e120:	40020028 	.word	0x40020028
2400e124:	40020040 	.word	0x40020040
2400e128:	40020058 	.word	0x40020058
2400e12c:	40020070 	.word	0x40020070
2400e130:	40020088 	.word	0x40020088
2400e134:	400200a0 	.word	0x400200a0
2400e138:	400200b8 	.word	0x400200b8
2400e13c:	40020410 	.word	0x40020410
2400e140:	40020428 	.word	0x40020428
2400e144:	40020440 	.word	0x40020440
2400e148:	40020458 	.word	0x40020458
2400e14c:	40020470 	.word	0x40020470
2400e150:	40020488 	.word	0x40020488
2400e154:	400204a0 	.word	0x400204a0
2400e158:	400204b8 	.word	0x400204b8
2400e15c:	687b      	ldr	r3, [r7, #4]
2400e15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e160:	681b      	ldr	r3, [r3, #0]
2400e162:	685b      	ldr	r3, [r3, #4]
2400e164:	b29b      	uxth	r3, r3
2400e166:	687a      	ldr	r2, [r7, #4]
2400e168:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
2400e16a:	697b      	ldr	r3, [r7, #20]
2400e16c:	089b      	lsrs	r3, r3, #2
2400e16e:	f003 0301 	and.w	r3, r3, #1
2400e172:	2b00      	cmp	r3, #0
2400e174:	d020      	beq.n	2400e1b8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400e176:	697b      	ldr	r3, [r7, #20]
2400e178:	f023 0304 	bic.w	r3, r3, #4
2400e17c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e17e:	687b      	ldr	r3, [r7, #4]
2400e180:	681b      	ldr	r3, [r3, #0]
2400e182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400e184:	687b      	ldr	r3, [r7, #4]
2400e186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e188:	b2d2      	uxtb	r2, r2
2400e18a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e18c:	687b      	ldr	r3, [r7, #4]
2400e18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e190:	1c5a      	adds	r2, r3, #1
2400e192:	687b      	ldr	r3, [r7, #4]
2400e194:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
2400e196:	687b      	ldr	r3, [r7, #4]
2400e198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e19a:	2b00      	cmp	r3, #0
2400e19c:	d00c      	beq.n	2400e1b8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
2400e19e:	687b      	ldr	r3, [r7, #4]
2400e1a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e1a2:	3b01      	subs	r3, #1
2400e1a4:	b29a      	uxth	r2, r3
2400e1a6:	687b      	ldr	r3, [r7, #4]
2400e1a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400e1aa:	687b      	ldr	r3, [r7, #4]
2400e1ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e1ae:	b29b      	uxth	r3, r3
2400e1b0:	3b01      	subs	r3, #1
2400e1b2:	b29a      	uxth	r2, r3
2400e1b4:	687b      	ldr	r3, [r7, #4]
2400e1b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
2400e1b8:	687b      	ldr	r3, [r7, #4]
2400e1ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e1bc:	b29b      	uxth	r3, r3
2400e1be:	2b00      	cmp	r3, #0
2400e1c0:	d005      	beq.n	2400e1ce <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e1c2:	687b      	ldr	r3, [r7, #4]
2400e1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e1c6:	f043 0204 	orr.w	r2, r3, #4
2400e1ca:	687b      	ldr	r3, [r7, #4]
2400e1cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
2400e1ce:	687b      	ldr	r3, [r7, #4]
2400e1d0:	2200      	movs	r2, #0
2400e1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
2400e1d6:	687b      	ldr	r3, [r7, #4]
2400e1d8:	2200      	movs	r2, #0
2400e1da:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400e1dc:	687b      	ldr	r3, [r7, #4]
2400e1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e1e0:	2b00      	cmp	r3, #0
2400e1e2:	d010      	beq.n	2400e206 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400e1e4:	687b      	ldr	r3, [r7, #4]
2400e1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e1e8:	4619      	mov	r1, r3
2400e1ea:	6878      	ldr	r0, [r7, #4]
2400e1ec:	f000 f8a4 	bl	2400e338 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400e1f0:	687b      	ldr	r3, [r7, #4]
2400e1f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e1f6:	b2db      	uxtb	r3, r3
2400e1f8:	2b28      	cmp	r3, #40	; 0x28
2400e1fa:	d141      	bne.n	2400e280 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
2400e1fc:	6979      	ldr	r1, [r7, #20]
2400e1fe:	6878      	ldr	r0, [r7, #4]
2400e200:	f000 f844 	bl	2400e28c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400e204:	e03c      	b.n	2400e280 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400e206:	687b      	ldr	r3, [r7, #4]
2400e208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e20a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400e20e:	d014      	beq.n	2400e23a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
2400e210:	6878      	ldr	r0, [r7, #4]
2400e212:	f7ff fd1a 	bl	2400dc4a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400e216:	687b      	ldr	r3, [r7, #4]
2400e218:	4a1b      	ldr	r2, [pc, #108]	; (2400e288 <I2C_ITSlaveCplt+0x3ec>)
2400e21a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
2400e21c:	687b      	ldr	r3, [r7, #4]
2400e21e:	2220      	movs	r2, #32
2400e220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e224:	687b      	ldr	r3, [r7, #4]
2400e226:	2200      	movs	r2, #0
2400e228:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e22a:	687b      	ldr	r3, [r7, #4]
2400e22c:	2200      	movs	r2, #0
2400e22e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
2400e232:	6878      	ldr	r0, [r7, #4]
2400e234:	f7fe fe45 	bl	2400cec2 <HAL_I2C_ListenCpltCallback>
}
2400e238:	e022      	b.n	2400e280 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e23a:	687b      	ldr	r3, [r7, #4]
2400e23c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e240:	b2db      	uxtb	r3, r3
2400e242:	2b22      	cmp	r3, #34	; 0x22
2400e244:	d10e      	bne.n	2400e264 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
2400e246:	687b      	ldr	r3, [r7, #4]
2400e248:	2220      	movs	r2, #32
2400e24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e24e:	687b      	ldr	r3, [r7, #4]
2400e250:	2200      	movs	r2, #0
2400e252:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e254:	687b      	ldr	r3, [r7, #4]
2400e256:	2200      	movs	r2, #0
2400e258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400e25c:	6878      	ldr	r0, [r7, #4]
2400e25e:	f7fe fe18 	bl	2400ce92 <HAL_I2C_SlaveRxCpltCallback>
}
2400e262:	e00d      	b.n	2400e280 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
2400e264:	687b      	ldr	r3, [r7, #4]
2400e266:	2220      	movs	r2, #32
2400e268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e26c:	687b      	ldr	r3, [r7, #4]
2400e26e:	2200      	movs	r2, #0
2400e270:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e272:	687b      	ldr	r3, [r7, #4]
2400e274:	2200      	movs	r2, #0
2400e276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400e27a:	6878      	ldr	r0, [r7, #4]
2400e27c:	f7fe fdff 	bl	2400ce7e <HAL_I2C_SlaveTxCpltCallback>
}
2400e280:	bf00      	nop
2400e282:	3718      	adds	r7, #24
2400e284:	46bd      	mov	sp, r7
2400e286:	bd80      	pop	{r7, pc}
2400e288:	ffff0000 	.word	0xffff0000

2400e28c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400e28c:	b580      	push	{r7, lr}
2400e28e:	b082      	sub	sp, #8
2400e290:	af00      	add	r7, sp, #0
2400e292:	6078      	str	r0, [r7, #4]
2400e294:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400e296:	687b      	ldr	r3, [r7, #4]
2400e298:	4a26      	ldr	r2, [pc, #152]	; (2400e334 <I2C_ITListenCplt+0xa8>)
2400e29a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
2400e29c:	687b      	ldr	r3, [r7, #4]
2400e29e:	2200      	movs	r2, #0
2400e2a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2400e2a2:	687b      	ldr	r3, [r7, #4]
2400e2a4:	2220      	movs	r2, #32
2400e2a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400e2aa:	687b      	ldr	r3, [r7, #4]
2400e2ac:	2200      	movs	r2, #0
2400e2ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
2400e2b2:	687b      	ldr	r3, [r7, #4]
2400e2b4:	2200      	movs	r2, #0
2400e2b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400e2b8:	683b      	ldr	r3, [r7, #0]
2400e2ba:	089b      	lsrs	r3, r3, #2
2400e2bc:	f003 0301 	and.w	r3, r3, #1
2400e2c0:	2b00      	cmp	r3, #0
2400e2c2:	d022      	beq.n	2400e30a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e2c4:	687b      	ldr	r3, [r7, #4]
2400e2c6:	681b      	ldr	r3, [r3, #0]
2400e2c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400e2ca:	687b      	ldr	r3, [r7, #4]
2400e2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e2ce:	b2d2      	uxtb	r2, r2
2400e2d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e2d2:	687b      	ldr	r3, [r7, #4]
2400e2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e2d6:	1c5a      	adds	r2, r3, #1
2400e2d8:	687b      	ldr	r3, [r7, #4]
2400e2da:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
2400e2dc:	687b      	ldr	r3, [r7, #4]
2400e2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e2e0:	2b00      	cmp	r3, #0
2400e2e2:	d012      	beq.n	2400e30a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
2400e2e4:	687b      	ldr	r3, [r7, #4]
2400e2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400e2e8:	3b01      	subs	r3, #1
2400e2ea:	b29a      	uxth	r2, r3
2400e2ec:	687b      	ldr	r3, [r7, #4]
2400e2ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400e2f0:	687b      	ldr	r3, [r7, #4]
2400e2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e2f4:	b29b      	uxth	r3, r3
2400e2f6:	3b01      	subs	r3, #1
2400e2f8:	b29a      	uxth	r2, r3
2400e2fa:	687b      	ldr	r3, [r7, #4]
2400e2fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e2fe:	687b      	ldr	r3, [r7, #4]
2400e300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400e302:	f043 0204 	orr.w	r2, r3, #4
2400e306:	687b      	ldr	r3, [r7, #4]
2400e308:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400e30a:	f248 0103 	movw	r1, #32771	; 0x8003
2400e30e:	6878      	ldr	r0, [r7, #4]
2400e310:	f000 fea6 	bl	2400f060 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e314:	687b      	ldr	r3, [r7, #4]
2400e316:	681b      	ldr	r3, [r3, #0]
2400e318:	2210      	movs	r2, #16
2400e31a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e31c:	687b      	ldr	r3, [r7, #4]
2400e31e:	2200      	movs	r2, #0
2400e320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
2400e324:	6878      	ldr	r0, [r7, #4]
2400e326:	f7fe fdcc 	bl	2400cec2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
2400e32a:	bf00      	nop
2400e32c:	3708      	adds	r7, #8
2400e32e:	46bd      	mov	sp, r7
2400e330:	bd80      	pop	{r7, pc}
2400e332:	bf00      	nop
2400e334:	ffff0000 	.word	0xffff0000

2400e338 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
2400e338:	b580      	push	{r7, lr}
2400e33a:	b084      	sub	sp, #16
2400e33c:	af00      	add	r7, sp, #0
2400e33e:	6078      	str	r0, [r7, #4]
2400e340:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400e342:	687b      	ldr	r3, [r7, #4]
2400e344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2400e34a:	687b      	ldr	r3, [r7, #4]
2400e34c:	2200      	movs	r2, #0
2400e34e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400e352:	687b      	ldr	r3, [r7, #4]
2400e354:	4a5d      	ldr	r2, [pc, #372]	; (2400e4cc <I2C_ITError+0x194>)
2400e356:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
2400e358:	687b      	ldr	r3, [r7, #4]
2400e35a:	2200      	movs	r2, #0
2400e35c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
2400e35e:	687b      	ldr	r3, [r7, #4]
2400e360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400e362:	683b      	ldr	r3, [r7, #0]
2400e364:	431a      	orrs	r2, r3
2400e366:	687b      	ldr	r3, [r7, #4]
2400e368:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2400e36a:	7bfb      	ldrb	r3, [r7, #15]
2400e36c:	2b28      	cmp	r3, #40	; 0x28
2400e36e:	d005      	beq.n	2400e37c <I2C_ITError+0x44>
2400e370:	7bfb      	ldrb	r3, [r7, #15]
2400e372:	2b29      	cmp	r3, #41	; 0x29
2400e374:	d002      	beq.n	2400e37c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
2400e376:	7bfb      	ldrb	r3, [r7, #15]
2400e378:	2b2a      	cmp	r3, #42	; 0x2a
2400e37a:	d10b      	bne.n	2400e394 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400e37c:	2103      	movs	r1, #3
2400e37e:	6878      	ldr	r0, [r7, #4]
2400e380:	f000 fe6e 	bl	2400f060 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400e384:	687b      	ldr	r3, [r7, #4]
2400e386:	2228      	movs	r2, #40	; 0x28
2400e388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
2400e38c:	687b      	ldr	r3, [r7, #4]
2400e38e:	4a50      	ldr	r2, [pc, #320]	; (2400e4d0 <I2C_ITError+0x198>)
2400e390:	635a      	str	r2, [r3, #52]	; 0x34
2400e392:	e011      	b.n	2400e3b8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400e394:	f248 0103 	movw	r1, #32771	; 0x8003
2400e398:	6878      	ldr	r0, [r7, #4]
2400e39a:	f000 fe61 	bl	2400f060 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
2400e39e:	687b      	ldr	r3, [r7, #4]
2400e3a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e3a4:	b2db      	uxtb	r3, r3
2400e3a6:	2b60      	cmp	r3, #96	; 0x60
2400e3a8:	d003      	beq.n	2400e3b2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
2400e3aa:	687b      	ldr	r3, [r7, #4]
2400e3ac:	2220      	movs	r2, #32
2400e3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
2400e3b2:	687b      	ldr	r3, [r7, #4]
2400e3b4:	2200      	movs	r2, #0
2400e3b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
2400e3b8:	687b      	ldr	r3, [r7, #4]
2400e3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400e3bc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
2400e3be:	687b      	ldr	r3, [r7, #4]
2400e3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e3c2:	2b00      	cmp	r3, #0
2400e3c4:	d039      	beq.n	2400e43a <I2C_ITError+0x102>
2400e3c6:	68bb      	ldr	r3, [r7, #8]
2400e3c8:	2b11      	cmp	r3, #17
2400e3ca:	d002      	beq.n	2400e3d2 <I2C_ITError+0x9a>
2400e3cc:	68bb      	ldr	r3, [r7, #8]
2400e3ce:	2b21      	cmp	r3, #33	; 0x21
2400e3d0:	d133      	bne.n	2400e43a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400e3d2:	687b      	ldr	r3, [r7, #4]
2400e3d4:	681b      	ldr	r3, [r3, #0]
2400e3d6:	681b      	ldr	r3, [r3, #0]
2400e3d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400e3dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400e3e0:	d107      	bne.n	2400e3f2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e3e2:	687b      	ldr	r3, [r7, #4]
2400e3e4:	681b      	ldr	r3, [r3, #0]
2400e3e6:	681a      	ldr	r2, [r3, #0]
2400e3e8:	687b      	ldr	r3, [r7, #4]
2400e3ea:	681b      	ldr	r3, [r3, #0]
2400e3ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e3f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400e3f2:	687b      	ldr	r3, [r7, #4]
2400e3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e3f6:	4618      	mov	r0, r3
2400e3f8:	f7f8 f804 	bl	24006404 <HAL_DMA_GetState>
2400e3fc:	4603      	mov	r3, r0
2400e3fe:	2b01      	cmp	r3, #1
2400e400:	d017      	beq.n	2400e432 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400e402:	687b      	ldr	r3, [r7, #4]
2400e404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e406:	4a33      	ldr	r2, [pc, #204]	; (2400e4d4 <I2C_ITError+0x19c>)
2400e408:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400e40a:	687b      	ldr	r3, [r7, #4]
2400e40c:	2200      	movs	r2, #0
2400e40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400e412:	687b      	ldr	r3, [r7, #4]
2400e414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e416:	4618      	mov	r0, r3
2400e418:	f7f6 fa12 	bl	24004840 <HAL_DMA_Abort_IT>
2400e41c:	4603      	mov	r3, r0
2400e41e:	2b00      	cmp	r3, #0
2400e420:	d04d      	beq.n	2400e4be <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400e422:	687b      	ldr	r3, [r7, #4]
2400e424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400e428:	687a      	ldr	r2, [r7, #4]
2400e42a:	6b92      	ldr	r2, [r2, #56]	; 0x38
2400e42c:	4610      	mov	r0, r2
2400e42e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400e430:	e045      	b.n	2400e4be <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400e432:	6878      	ldr	r0, [r7, #4]
2400e434:	f000 f850 	bl	2400e4d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400e438:	e041      	b.n	2400e4be <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
2400e43a:	687b      	ldr	r3, [r7, #4]
2400e43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e43e:	2b00      	cmp	r3, #0
2400e440:	d039      	beq.n	2400e4b6 <I2C_ITError+0x17e>
2400e442:	68bb      	ldr	r3, [r7, #8]
2400e444:	2b12      	cmp	r3, #18
2400e446:	d002      	beq.n	2400e44e <I2C_ITError+0x116>
2400e448:	68bb      	ldr	r3, [r7, #8]
2400e44a:	2b22      	cmp	r3, #34	; 0x22
2400e44c:	d133      	bne.n	2400e4b6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400e44e:	687b      	ldr	r3, [r7, #4]
2400e450:	681b      	ldr	r3, [r3, #0]
2400e452:	681b      	ldr	r3, [r3, #0]
2400e454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400e458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400e45c:	d107      	bne.n	2400e46e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e45e:	687b      	ldr	r3, [r7, #4]
2400e460:	681b      	ldr	r3, [r3, #0]
2400e462:	681a      	ldr	r2, [r3, #0]
2400e464:	687b      	ldr	r3, [r7, #4]
2400e466:	681b      	ldr	r3, [r3, #0]
2400e468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e46c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400e46e:	687b      	ldr	r3, [r7, #4]
2400e470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e472:	4618      	mov	r0, r3
2400e474:	f7f7 ffc6 	bl	24006404 <HAL_DMA_GetState>
2400e478:	4603      	mov	r3, r0
2400e47a:	2b01      	cmp	r3, #1
2400e47c:	d017      	beq.n	2400e4ae <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400e47e:	687b      	ldr	r3, [r7, #4]
2400e480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e482:	4a14      	ldr	r2, [pc, #80]	; (2400e4d4 <I2C_ITError+0x19c>)
2400e484:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400e486:	687b      	ldr	r3, [r7, #4]
2400e488:	2200      	movs	r2, #0
2400e48a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400e48e:	687b      	ldr	r3, [r7, #4]
2400e490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e492:	4618      	mov	r0, r3
2400e494:	f7f6 f9d4 	bl	24004840 <HAL_DMA_Abort_IT>
2400e498:	4603      	mov	r3, r0
2400e49a:	2b00      	cmp	r3, #0
2400e49c:	d011      	beq.n	2400e4c2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400e49e:	687b      	ldr	r3, [r7, #4]
2400e4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e4a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400e4a4:	687a      	ldr	r2, [r7, #4]
2400e4a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2400e4a8:	4610      	mov	r0, r2
2400e4aa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400e4ac:	e009      	b.n	2400e4c2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400e4ae:	6878      	ldr	r0, [r7, #4]
2400e4b0:	f000 f812 	bl	2400e4d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400e4b4:	e005      	b.n	2400e4c2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
2400e4b6:	6878      	ldr	r0, [r7, #4]
2400e4b8:	f000 f80e 	bl	2400e4d8 <I2C_TreatErrorCallback>
  }
}
2400e4bc:	e002      	b.n	2400e4c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400e4be:	bf00      	nop
2400e4c0:	e000      	b.n	2400e4c4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400e4c2:	bf00      	nop
}
2400e4c4:	bf00      	nop
2400e4c6:	3710      	adds	r7, #16
2400e4c8:	46bd      	mov	sp, r7
2400e4ca:	bd80      	pop	{r7, pc}
2400e4cc:	ffff0000 	.word	0xffff0000
2400e4d0:	2400d1c7 	.word	0x2400d1c7
2400e4d4:	2400eab5 	.word	0x2400eab5

2400e4d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400e4d8:	b580      	push	{r7, lr}
2400e4da:	b082      	sub	sp, #8
2400e4dc:	af00      	add	r7, sp, #0
2400e4de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400e4e0:	687b      	ldr	r3, [r7, #4]
2400e4e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400e4e6:	b2db      	uxtb	r3, r3
2400e4e8:	2b60      	cmp	r3, #96	; 0x60
2400e4ea:	d10e      	bne.n	2400e50a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
2400e4ec:	687b      	ldr	r3, [r7, #4]
2400e4ee:	2220      	movs	r2, #32
2400e4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400e4f4:	687b      	ldr	r3, [r7, #4]
2400e4f6:	2200      	movs	r2, #0
2400e4f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400e4fa:	687b      	ldr	r3, [r7, #4]
2400e4fc:	2200      	movs	r2, #0
2400e4fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
2400e502:	6878      	ldr	r0, [r7, #4]
2400e504:	f7fe fd05 	bl	2400cf12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400e508:	e009      	b.n	2400e51e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
2400e50a:	687b      	ldr	r3, [r7, #4]
2400e50c:	2200      	movs	r2, #0
2400e50e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2400e510:	687b      	ldr	r3, [r7, #4]
2400e512:	2200      	movs	r2, #0
2400e514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
2400e518:	6878      	ldr	r0, [r7, #4]
2400e51a:	f7fe fcf0 	bl	2400cefe <HAL_I2C_ErrorCallback>
}
2400e51e:	bf00      	nop
2400e520:	3708      	adds	r7, #8
2400e522:	46bd      	mov	sp, r7
2400e524:	bd80      	pop	{r7, pc}

2400e526 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
2400e526:	b480      	push	{r7}
2400e528:	b083      	sub	sp, #12
2400e52a:	af00      	add	r7, sp, #0
2400e52c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400e52e:	687b      	ldr	r3, [r7, #4]
2400e530:	681b      	ldr	r3, [r3, #0]
2400e532:	699b      	ldr	r3, [r3, #24]
2400e534:	f003 0302 	and.w	r3, r3, #2
2400e538:	2b02      	cmp	r3, #2
2400e53a:	d103      	bne.n	2400e544 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
2400e53c:	687b      	ldr	r3, [r7, #4]
2400e53e:	681b      	ldr	r3, [r3, #0]
2400e540:	2200      	movs	r2, #0
2400e542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400e544:	687b      	ldr	r3, [r7, #4]
2400e546:	681b      	ldr	r3, [r3, #0]
2400e548:	699b      	ldr	r3, [r3, #24]
2400e54a:	f003 0301 	and.w	r3, r3, #1
2400e54e:	2b01      	cmp	r3, #1
2400e550:	d007      	beq.n	2400e562 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400e552:	687b      	ldr	r3, [r7, #4]
2400e554:	681b      	ldr	r3, [r3, #0]
2400e556:	699a      	ldr	r2, [r3, #24]
2400e558:	687b      	ldr	r3, [r7, #4]
2400e55a:	681b      	ldr	r3, [r3, #0]
2400e55c:	f042 0201 	orr.w	r2, r2, #1
2400e560:	619a      	str	r2, [r3, #24]
  }
}
2400e562:	bf00      	nop
2400e564:	370c      	adds	r7, #12
2400e566:	46bd      	mov	sp, r7
2400e568:	f85d 7b04 	ldr.w	r7, [sp], #4
2400e56c:	4770      	bx	lr

2400e56e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
2400e56e:	b580      	push	{r7, lr}
2400e570:	b084      	sub	sp, #16
2400e572:	af00      	add	r7, sp, #0
2400e574:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e576:	687b      	ldr	r3, [r7, #4]
2400e578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e57a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e57c:	68fb      	ldr	r3, [r7, #12]
2400e57e:	681b      	ldr	r3, [r3, #0]
2400e580:	681a      	ldr	r2, [r3, #0]
2400e582:	68fb      	ldr	r3, [r7, #12]
2400e584:	681b      	ldr	r3, [r3, #0]
2400e586:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e58a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2400e58c:	68fb      	ldr	r3, [r7, #12]
2400e58e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e590:	b29b      	uxth	r3, r3
2400e592:	2b00      	cmp	r3, #0
2400e594:	d104      	bne.n	2400e5a0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400e596:	2120      	movs	r1, #32
2400e598:	68f8      	ldr	r0, [r7, #12]
2400e59a:	f000 fcfd 	bl	2400ef98 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2400e59e:	e02d      	b.n	2400e5fc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2400e5a0:	68fb      	ldr	r3, [r7, #12]
2400e5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e5a4:	68fa      	ldr	r2, [r7, #12]
2400e5a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
2400e5a8:	441a      	add	r2, r3
2400e5aa:	68fb      	ldr	r3, [r7, #12]
2400e5ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e5ae:	68fb      	ldr	r3, [r7, #12]
2400e5b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e5b2:	b29b      	uxth	r3, r3
2400e5b4:	2bff      	cmp	r3, #255	; 0xff
2400e5b6:	d903      	bls.n	2400e5c0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400e5b8:	68fb      	ldr	r3, [r7, #12]
2400e5ba:	22ff      	movs	r2, #255	; 0xff
2400e5bc:	851a      	strh	r2, [r3, #40]	; 0x28
2400e5be:	e004      	b.n	2400e5ca <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2400e5c0:	68fb      	ldr	r3, [r7, #12]
2400e5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e5c4:	b29a      	uxth	r2, r3
2400e5c6:	68fb      	ldr	r3, [r7, #12]
2400e5c8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400e5ca:	68fb      	ldr	r3, [r7, #12]
2400e5cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
2400e5ce:	68fb      	ldr	r3, [r7, #12]
2400e5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e5d2:	4619      	mov	r1, r3
2400e5d4:	68fb      	ldr	r3, [r7, #12]
2400e5d6:	681b      	ldr	r3, [r3, #0]
2400e5d8:	3328      	adds	r3, #40	; 0x28
2400e5da:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2400e5dc:	68fb      	ldr	r3, [r7, #12]
2400e5de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400e5e0:	f7f5 fba6 	bl	24003d30 <HAL_DMA_Start_IT>
2400e5e4:	4603      	mov	r3, r0
2400e5e6:	2b00      	cmp	r3, #0
2400e5e8:	d004      	beq.n	2400e5f4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400e5ea:	2110      	movs	r1, #16
2400e5ec:	68f8      	ldr	r0, [r7, #12]
2400e5ee:	f7ff fea3 	bl	2400e338 <I2C_ITError>
}
2400e5f2:	e003      	b.n	2400e5fc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2400e5f4:	2140      	movs	r1, #64	; 0x40
2400e5f6:	68f8      	ldr	r0, [r7, #12]
2400e5f8:	f000 fcce 	bl	2400ef98 <I2C_Enable_IRQ>
}
2400e5fc:	bf00      	nop
2400e5fe:	3710      	adds	r7, #16
2400e600:	46bd      	mov	sp, r7
2400e602:	bd80      	pop	{r7, pc}

2400e604 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
2400e604:	b580      	push	{r7, lr}
2400e606:	b084      	sub	sp, #16
2400e608:	af00      	add	r7, sp, #0
2400e60a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e60c:	687b      	ldr	r3, [r7, #4]
2400e60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2400e612:	68fb      	ldr	r3, [r7, #12]
2400e614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e616:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400e618:	68bb      	ldr	r3, [r7, #8]
2400e61a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400e61e:	d002      	beq.n	2400e626 <I2C_DMASlaveTransmitCplt+0x22>
2400e620:	68bb      	ldr	r3, [r7, #8]
2400e622:	2b00      	cmp	r3, #0
2400e624:	d10a      	bne.n	2400e63c <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400e626:	68fb      	ldr	r3, [r7, #12]
2400e628:	681b      	ldr	r3, [r3, #0]
2400e62a:	681a      	ldr	r2, [r3, #0]
2400e62c:	68fb      	ldr	r3, [r7, #12]
2400e62e:	681b      	ldr	r3, [r3, #0]
2400e630:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2400e634:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2400e636:	68f8      	ldr	r0, [r7, #12]
2400e638:	f7ff fb07 	bl	2400dc4a <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2400e63c:	bf00      	nop
2400e63e:	3710      	adds	r7, #16
2400e640:	46bd      	mov	sp, r7
2400e642:	bd80      	pop	{r7, pc}

2400e644 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
2400e644:	b580      	push	{r7, lr}
2400e646:	b084      	sub	sp, #16
2400e648:	af00      	add	r7, sp, #0
2400e64a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e64c:	687b      	ldr	r3, [r7, #4]
2400e64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e650:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e652:	68fb      	ldr	r3, [r7, #12]
2400e654:	681b      	ldr	r3, [r3, #0]
2400e656:	681a      	ldr	r2, [r3, #0]
2400e658:	68fb      	ldr	r3, [r7, #12]
2400e65a:	681b      	ldr	r3, [r3, #0]
2400e65c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e660:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2400e662:	68fb      	ldr	r3, [r7, #12]
2400e664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e666:	b29b      	uxth	r3, r3
2400e668:	2b00      	cmp	r3, #0
2400e66a:	d104      	bne.n	2400e676 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400e66c:	2120      	movs	r1, #32
2400e66e:	68f8      	ldr	r0, [r7, #12]
2400e670:	f000 fc92 	bl	2400ef98 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2400e674:	e02d      	b.n	2400e6d2 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2400e676:	68fb      	ldr	r3, [r7, #12]
2400e678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e67a:	68fa      	ldr	r2, [r7, #12]
2400e67c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
2400e67e:	441a      	add	r2, r3
2400e680:	68fb      	ldr	r3, [r7, #12]
2400e682:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e684:	68fb      	ldr	r3, [r7, #12]
2400e686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e688:	b29b      	uxth	r3, r3
2400e68a:	2bff      	cmp	r3, #255	; 0xff
2400e68c:	d903      	bls.n	2400e696 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400e68e:	68fb      	ldr	r3, [r7, #12]
2400e690:	22ff      	movs	r2, #255	; 0xff
2400e692:	851a      	strh	r2, [r3, #40]	; 0x28
2400e694:	e004      	b.n	2400e6a0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2400e696:	68fb      	ldr	r3, [r7, #12]
2400e698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2400e69a:	b29a      	uxth	r2, r3
2400e69c:	68fb      	ldr	r3, [r7, #12]
2400e69e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2400e6a0:	68fb      	ldr	r3, [r7, #12]
2400e6a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2400e6a4:	68fb      	ldr	r3, [r7, #12]
2400e6a6:	681b      	ldr	r3, [r3, #0]
2400e6a8:	3324      	adds	r3, #36	; 0x24
2400e6aa:	4619      	mov	r1, r3
2400e6ac:	68fb      	ldr	r3, [r7, #12]
2400e6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400e6b0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2400e6b2:	68fb      	ldr	r3, [r7, #12]
2400e6b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2400e6b6:	f7f5 fb3b 	bl	24003d30 <HAL_DMA_Start_IT>
2400e6ba:	4603      	mov	r3, r0
2400e6bc:	2b00      	cmp	r3, #0
2400e6be:	d004      	beq.n	2400e6ca <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400e6c0:	2110      	movs	r1, #16
2400e6c2:	68f8      	ldr	r0, [r7, #12]
2400e6c4:	f7ff fe38 	bl	2400e338 <I2C_ITError>
}
2400e6c8:	e003      	b.n	2400e6d2 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2400e6ca:	2140      	movs	r1, #64	; 0x40
2400e6cc:	68f8      	ldr	r0, [r7, #12]
2400e6ce:	f000 fc63 	bl	2400ef98 <I2C_Enable_IRQ>
}
2400e6d2:	bf00      	nop
2400e6d4:	3710      	adds	r7, #16
2400e6d6:	46bd      	mov	sp, r7
2400e6d8:	bd80      	pop	{r7, pc}
	...

2400e6dc <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
2400e6dc:	b580      	push	{r7, lr}
2400e6de:	b084      	sub	sp, #16
2400e6e0:	af00      	add	r7, sp, #0
2400e6e2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e6e4:	687b      	ldr	r3, [r7, #4]
2400e6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e6e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2400e6ea:	68fb      	ldr	r3, [r7, #12]
2400e6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400e6ee:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
2400e6f0:	68fb      	ldr	r3, [r7, #12]
2400e6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e6f4:	681b      	ldr	r3, [r3, #0]
2400e6f6:	4a42      	ldr	r2, [pc, #264]	; (2400e800 <I2C_DMASlaveReceiveCplt+0x124>)
2400e6f8:	4293      	cmp	r3, r2
2400e6fa:	d059      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e6fc:	68fb      	ldr	r3, [r7, #12]
2400e6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e700:	681b      	ldr	r3, [r3, #0]
2400e702:	4a40      	ldr	r2, [pc, #256]	; (2400e804 <I2C_DMASlaveReceiveCplt+0x128>)
2400e704:	4293      	cmp	r3, r2
2400e706:	d053      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e708:	68fb      	ldr	r3, [r7, #12]
2400e70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e70c:	681b      	ldr	r3, [r3, #0]
2400e70e:	4a3e      	ldr	r2, [pc, #248]	; (2400e808 <I2C_DMASlaveReceiveCplt+0x12c>)
2400e710:	4293      	cmp	r3, r2
2400e712:	d04d      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e714:	68fb      	ldr	r3, [r7, #12]
2400e716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e718:	681b      	ldr	r3, [r3, #0]
2400e71a:	4a3c      	ldr	r2, [pc, #240]	; (2400e80c <I2C_DMASlaveReceiveCplt+0x130>)
2400e71c:	4293      	cmp	r3, r2
2400e71e:	d047      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e720:	68fb      	ldr	r3, [r7, #12]
2400e722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e724:	681b      	ldr	r3, [r3, #0]
2400e726:	4a3a      	ldr	r2, [pc, #232]	; (2400e810 <I2C_DMASlaveReceiveCplt+0x134>)
2400e728:	4293      	cmp	r3, r2
2400e72a:	d041      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e72c:	68fb      	ldr	r3, [r7, #12]
2400e72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e730:	681b      	ldr	r3, [r3, #0]
2400e732:	4a38      	ldr	r2, [pc, #224]	; (2400e814 <I2C_DMASlaveReceiveCplt+0x138>)
2400e734:	4293      	cmp	r3, r2
2400e736:	d03b      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e738:	68fb      	ldr	r3, [r7, #12]
2400e73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e73c:	681b      	ldr	r3, [r3, #0]
2400e73e:	4a36      	ldr	r2, [pc, #216]	; (2400e818 <I2C_DMASlaveReceiveCplt+0x13c>)
2400e740:	4293      	cmp	r3, r2
2400e742:	d035      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e744:	68fb      	ldr	r3, [r7, #12]
2400e746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e748:	681b      	ldr	r3, [r3, #0]
2400e74a:	4a34      	ldr	r2, [pc, #208]	; (2400e81c <I2C_DMASlaveReceiveCplt+0x140>)
2400e74c:	4293      	cmp	r3, r2
2400e74e:	d02f      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e750:	68fb      	ldr	r3, [r7, #12]
2400e752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e754:	681b      	ldr	r3, [r3, #0]
2400e756:	4a32      	ldr	r2, [pc, #200]	; (2400e820 <I2C_DMASlaveReceiveCplt+0x144>)
2400e758:	4293      	cmp	r3, r2
2400e75a:	d029      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e75c:	68fb      	ldr	r3, [r7, #12]
2400e75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e760:	681b      	ldr	r3, [r3, #0]
2400e762:	4a30      	ldr	r2, [pc, #192]	; (2400e824 <I2C_DMASlaveReceiveCplt+0x148>)
2400e764:	4293      	cmp	r3, r2
2400e766:	d023      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e768:	68fb      	ldr	r3, [r7, #12]
2400e76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e76c:	681b      	ldr	r3, [r3, #0]
2400e76e:	4a2e      	ldr	r2, [pc, #184]	; (2400e828 <I2C_DMASlaveReceiveCplt+0x14c>)
2400e770:	4293      	cmp	r3, r2
2400e772:	d01d      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e774:	68fb      	ldr	r3, [r7, #12]
2400e776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e778:	681b      	ldr	r3, [r3, #0]
2400e77a:	4a2c      	ldr	r2, [pc, #176]	; (2400e82c <I2C_DMASlaveReceiveCplt+0x150>)
2400e77c:	4293      	cmp	r3, r2
2400e77e:	d017      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e780:	68fb      	ldr	r3, [r7, #12]
2400e782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e784:	681b      	ldr	r3, [r3, #0]
2400e786:	4a2a      	ldr	r2, [pc, #168]	; (2400e830 <I2C_DMASlaveReceiveCplt+0x154>)
2400e788:	4293      	cmp	r3, r2
2400e78a:	d011      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e78c:	68fb      	ldr	r3, [r7, #12]
2400e78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e790:	681b      	ldr	r3, [r3, #0]
2400e792:	4a28      	ldr	r2, [pc, #160]	; (2400e834 <I2C_DMASlaveReceiveCplt+0x158>)
2400e794:	4293      	cmp	r3, r2
2400e796:	d00b      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e798:	68fb      	ldr	r3, [r7, #12]
2400e79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e79c:	681b      	ldr	r3, [r3, #0]
2400e79e:	4a26      	ldr	r2, [pc, #152]	; (2400e838 <I2C_DMASlaveReceiveCplt+0x15c>)
2400e7a0:	4293      	cmp	r3, r2
2400e7a2:	d005      	beq.n	2400e7b0 <I2C_DMASlaveReceiveCplt+0xd4>
2400e7a4:	68fb      	ldr	r3, [r7, #12]
2400e7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e7a8:	681b      	ldr	r3, [r3, #0]
2400e7aa:	4a24      	ldr	r2, [pc, #144]	; (2400e83c <I2C_DMASlaveReceiveCplt+0x160>)
2400e7ac:	4293      	cmp	r3, r2
2400e7ae:	d109      	bne.n	2400e7c4 <I2C_DMASlaveReceiveCplt+0xe8>
2400e7b0:	68fb      	ldr	r3, [r7, #12]
2400e7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e7b4:	681b      	ldr	r3, [r3, #0]
2400e7b6:	685b      	ldr	r3, [r3, #4]
2400e7b8:	2b00      	cmp	r3, #0
2400e7ba:	bf0c      	ite	eq
2400e7bc:	2301      	moveq	r3, #1
2400e7be:	2300      	movne	r3, #0
2400e7c0:	b2db      	uxtb	r3, r3
2400e7c2:	e008      	b.n	2400e7d6 <I2C_DMASlaveReceiveCplt+0xfa>
2400e7c4:	68fb      	ldr	r3, [r7, #12]
2400e7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e7c8:	681b      	ldr	r3, [r3, #0]
2400e7ca:	685b      	ldr	r3, [r3, #4]
2400e7cc:	2b00      	cmp	r3, #0
2400e7ce:	bf0c      	ite	eq
2400e7d0:	2301      	moveq	r3, #1
2400e7d2:	2300      	movne	r3, #0
2400e7d4:	b2db      	uxtb	r3, r3
2400e7d6:	2b00      	cmp	r3, #0
2400e7d8:	d00e      	beq.n	2400e7f8 <I2C_DMASlaveReceiveCplt+0x11c>
2400e7da:	68bb      	ldr	r3, [r7, #8]
2400e7dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2400e7e0:	d00a      	beq.n	2400e7f8 <I2C_DMASlaveReceiveCplt+0x11c>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400e7e2:	68fb      	ldr	r3, [r7, #12]
2400e7e4:	681b      	ldr	r3, [r3, #0]
2400e7e6:	681a      	ldr	r2, [r3, #0]
2400e7e8:	68fb      	ldr	r3, [r7, #12]
2400e7ea:	681b      	ldr	r3, [r3, #0]
2400e7ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400e7f0:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2400e7f2:	68f8      	ldr	r0, [r7, #12]
2400e7f4:	f7ff fa29 	bl	2400dc4a <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2400e7f8:	bf00      	nop
2400e7fa:	3710      	adds	r7, #16
2400e7fc:	46bd      	mov	sp, r7
2400e7fe:	bd80      	pop	{r7, pc}
2400e800:	40020010 	.word	0x40020010
2400e804:	40020028 	.word	0x40020028
2400e808:	40020040 	.word	0x40020040
2400e80c:	40020058 	.word	0x40020058
2400e810:	40020070 	.word	0x40020070
2400e814:	40020088 	.word	0x40020088
2400e818:	400200a0 	.word	0x400200a0
2400e81c:	400200b8 	.word	0x400200b8
2400e820:	40020410 	.word	0x40020410
2400e824:	40020428 	.word	0x40020428
2400e828:	40020440 	.word	0x40020440
2400e82c:	40020458 	.word	0x40020458
2400e830:	40020470 	.word	0x40020470
2400e834:	40020488 	.word	0x40020488
2400e838:	400204a0 	.word	0x400204a0
2400e83c:	400204b8 	.word	0x400204b8

2400e840 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
2400e840:	b580      	push	{r7, lr}
2400e842:	b084      	sub	sp, #16
2400e844:	af00      	add	r7, sp, #0
2400e846:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
2400e848:	2300      	movs	r3, #0
2400e84a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400e84c:	687b      	ldr	r3, [r7, #4]
2400e84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e850:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
2400e852:	68bb      	ldr	r3, [r7, #8]
2400e854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e856:	2b00      	cmp	r3, #0
2400e858:	d076      	beq.n	2400e948 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400e85a:	68bb      	ldr	r3, [r7, #8]
2400e85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e85e:	681b      	ldr	r3, [r3, #0]
2400e860:	4a71      	ldr	r2, [pc, #452]	; (2400ea28 <I2C_DMAError+0x1e8>)
2400e862:	4293      	cmp	r3, r2
2400e864:	d059      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e866:	68bb      	ldr	r3, [r7, #8]
2400e868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e86a:	681b      	ldr	r3, [r3, #0]
2400e86c:	4a6f      	ldr	r2, [pc, #444]	; (2400ea2c <I2C_DMAError+0x1ec>)
2400e86e:	4293      	cmp	r3, r2
2400e870:	d053      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e872:	68bb      	ldr	r3, [r7, #8]
2400e874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e876:	681b      	ldr	r3, [r3, #0]
2400e878:	4a6d      	ldr	r2, [pc, #436]	; (2400ea30 <I2C_DMAError+0x1f0>)
2400e87a:	4293      	cmp	r3, r2
2400e87c:	d04d      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e87e:	68bb      	ldr	r3, [r7, #8]
2400e880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e882:	681b      	ldr	r3, [r3, #0]
2400e884:	4a6b      	ldr	r2, [pc, #428]	; (2400ea34 <I2C_DMAError+0x1f4>)
2400e886:	4293      	cmp	r3, r2
2400e888:	d047      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e88a:	68bb      	ldr	r3, [r7, #8]
2400e88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e88e:	681b      	ldr	r3, [r3, #0]
2400e890:	4a69      	ldr	r2, [pc, #420]	; (2400ea38 <I2C_DMAError+0x1f8>)
2400e892:	4293      	cmp	r3, r2
2400e894:	d041      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e896:	68bb      	ldr	r3, [r7, #8]
2400e898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e89a:	681b      	ldr	r3, [r3, #0]
2400e89c:	4a67      	ldr	r2, [pc, #412]	; (2400ea3c <I2C_DMAError+0x1fc>)
2400e89e:	4293      	cmp	r3, r2
2400e8a0:	d03b      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e8a2:	68bb      	ldr	r3, [r7, #8]
2400e8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e8a6:	681b      	ldr	r3, [r3, #0]
2400e8a8:	4a65      	ldr	r2, [pc, #404]	; (2400ea40 <I2C_DMAError+0x200>)
2400e8aa:	4293      	cmp	r3, r2
2400e8ac:	d035      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e8ae:	68bb      	ldr	r3, [r7, #8]
2400e8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e8b2:	681b      	ldr	r3, [r3, #0]
2400e8b4:	4a63      	ldr	r2, [pc, #396]	; (2400ea44 <I2C_DMAError+0x204>)
2400e8b6:	4293      	cmp	r3, r2
2400e8b8:	d02f      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e8ba:	68bb      	ldr	r3, [r7, #8]
2400e8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e8be:	681b      	ldr	r3, [r3, #0]
2400e8c0:	4a61      	ldr	r2, [pc, #388]	; (2400ea48 <I2C_DMAError+0x208>)
2400e8c2:	4293      	cmp	r3, r2
2400e8c4:	d029      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e8c6:	68bb      	ldr	r3, [r7, #8]
2400e8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e8ca:	681b      	ldr	r3, [r3, #0]
2400e8cc:	4a5f      	ldr	r2, [pc, #380]	; (2400ea4c <I2C_DMAError+0x20c>)
2400e8ce:	4293      	cmp	r3, r2
2400e8d0:	d023      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e8d2:	68bb      	ldr	r3, [r7, #8]
2400e8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e8d6:	681b      	ldr	r3, [r3, #0]
2400e8d8:	4a5d      	ldr	r2, [pc, #372]	; (2400ea50 <I2C_DMAError+0x210>)
2400e8da:	4293      	cmp	r3, r2
2400e8dc:	d01d      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e8de:	68bb      	ldr	r3, [r7, #8]
2400e8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e8e2:	681b      	ldr	r3, [r3, #0]
2400e8e4:	4a5b      	ldr	r2, [pc, #364]	; (2400ea54 <I2C_DMAError+0x214>)
2400e8e6:	4293      	cmp	r3, r2
2400e8e8:	d017      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e8ea:	68bb      	ldr	r3, [r7, #8]
2400e8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e8ee:	681b      	ldr	r3, [r3, #0]
2400e8f0:	4a59      	ldr	r2, [pc, #356]	; (2400ea58 <I2C_DMAError+0x218>)
2400e8f2:	4293      	cmp	r3, r2
2400e8f4:	d011      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e8f6:	68bb      	ldr	r3, [r7, #8]
2400e8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e8fa:	681b      	ldr	r3, [r3, #0]
2400e8fc:	4a57      	ldr	r2, [pc, #348]	; (2400ea5c <I2C_DMAError+0x21c>)
2400e8fe:	4293      	cmp	r3, r2
2400e900:	d00b      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e902:	68bb      	ldr	r3, [r7, #8]
2400e904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e906:	681b      	ldr	r3, [r3, #0]
2400e908:	4a55      	ldr	r2, [pc, #340]	; (2400ea60 <I2C_DMAError+0x220>)
2400e90a:	4293      	cmp	r3, r2
2400e90c:	d005      	beq.n	2400e91a <I2C_DMAError+0xda>
2400e90e:	68bb      	ldr	r3, [r7, #8]
2400e910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e912:	681b      	ldr	r3, [r3, #0]
2400e914:	4a53      	ldr	r2, [pc, #332]	; (2400ea64 <I2C_DMAError+0x224>)
2400e916:	4293      	cmp	r3, r2
2400e918:	d109      	bne.n	2400e92e <I2C_DMAError+0xee>
2400e91a:	68bb      	ldr	r3, [r7, #8]
2400e91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e91e:	681b      	ldr	r3, [r3, #0]
2400e920:	685b      	ldr	r3, [r3, #4]
2400e922:	2b00      	cmp	r3, #0
2400e924:	bf0c      	ite	eq
2400e926:	2301      	moveq	r3, #1
2400e928:	2300      	movne	r3, #0
2400e92a:	b2db      	uxtb	r3, r3
2400e92c:	e008      	b.n	2400e940 <I2C_DMAError+0x100>
2400e92e:	68bb      	ldr	r3, [r7, #8]
2400e930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400e932:	681b      	ldr	r3, [r3, #0]
2400e934:	685b      	ldr	r3, [r3, #4]
2400e936:	2b00      	cmp	r3, #0
2400e938:	bf0c      	ite	eq
2400e93a:	2301      	moveq	r3, #1
2400e93c:	2300      	movne	r3, #0
2400e93e:	b2db      	uxtb	r3, r3
2400e940:	2b00      	cmp	r3, #0
2400e942:	d001      	beq.n	2400e948 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
2400e944:	2301      	movs	r3, #1
2400e946:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
2400e948:	68bb      	ldr	r3, [r7, #8]
2400e94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e94c:	2b00      	cmp	r3, #0
2400e94e:	f000 8098 	beq.w	2400ea82 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400e952:	68bb      	ldr	r3, [r7, #8]
2400e954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e956:	681b      	ldr	r3, [r3, #0]
2400e958:	4a33      	ldr	r2, [pc, #204]	; (2400ea28 <I2C_DMAError+0x1e8>)
2400e95a:	4293      	cmp	r3, r2
2400e95c:	d059      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e95e:	68bb      	ldr	r3, [r7, #8]
2400e960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e962:	681b      	ldr	r3, [r3, #0]
2400e964:	4a31      	ldr	r2, [pc, #196]	; (2400ea2c <I2C_DMAError+0x1ec>)
2400e966:	4293      	cmp	r3, r2
2400e968:	d053      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e96a:	68bb      	ldr	r3, [r7, #8]
2400e96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e96e:	681b      	ldr	r3, [r3, #0]
2400e970:	4a2f      	ldr	r2, [pc, #188]	; (2400ea30 <I2C_DMAError+0x1f0>)
2400e972:	4293      	cmp	r3, r2
2400e974:	d04d      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e976:	68bb      	ldr	r3, [r7, #8]
2400e978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e97a:	681b      	ldr	r3, [r3, #0]
2400e97c:	4a2d      	ldr	r2, [pc, #180]	; (2400ea34 <I2C_DMAError+0x1f4>)
2400e97e:	4293      	cmp	r3, r2
2400e980:	d047      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e982:	68bb      	ldr	r3, [r7, #8]
2400e984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e986:	681b      	ldr	r3, [r3, #0]
2400e988:	4a2b      	ldr	r2, [pc, #172]	; (2400ea38 <I2C_DMAError+0x1f8>)
2400e98a:	4293      	cmp	r3, r2
2400e98c:	d041      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e98e:	68bb      	ldr	r3, [r7, #8]
2400e990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e992:	681b      	ldr	r3, [r3, #0]
2400e994:	4a29      	ldr	r2, [pc, #164]	; (2400ea3c <I2C_DMAError+0x1fc>)
2400e996:	4293      	cmp	r3, r2
2400e998:	d03b      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e99a:	68bb      	ldr	r3, [r7, #8]
2400e99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e99e:	681b      	ldr	r3, [r3, #0]
2400e9a0:	4a27      	ldr	r2, [pc, #156]	; (2400ea40 <I2C_DMAError+0x200>)
2400e9a2:	4293      	cmp	r3, r2
2400e9a4:	d035      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e9a6:	68bb      	ldr	r3, [r7, #8]
2400e9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9aa:	681b      	ldr	r3, [r3, #0]
2400e9ac:	4a25      	ldr	r2, [pc, #148]	; (2400ea44 <I2C_DMAError+0x204>)
2400e9ae:	4293      	cmp	r3, r2
2400e9b0:	d02f      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e9b2:	68bb      	ldr	r3, [r7, #8]
2400e9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9b6:	681b      	ldr	r3, [r3, #0]
2400e9b8:	4a23      	ldr	r2, [pc, #140]	; (2400ea48 <I2C_DMAError+0x208>)
2400e9ba:	4293      	cmp	r3, r2
2400e9bc:	d029      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e9be:	68bb      	ldr	r3, [r7, #8]
2400e9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9c2:	681b      	ldr	r3, [r3, #0]
2400e9c4:	4a21      	ldr	r2, [pc, #132]	; (2400ea4c <I2C_DMAError+0x20c>)
2400e9c6:	4293      	cmp	r3, r2
2400e9c8:	d023      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e9ca:	68bb      	ldr	r3, [r7, #8]
2400e9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9ce:	681b      	ldr	r3, [r3, #0]
2400e9d0:	4a1f      	ldr	r2, [pc, #124]	; (2400ea50 <I2C_DMAError+0x210>)
2400e9d2:	4293      	cmp	r3, r2
2400e9d4:	d01d      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e9d6:	68bb      	ldr	r3, [r7, #8]
2400e9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9da:	681b      	ldr	r3, [r3, #0]
2400e9dc:	4a1d      	ldr	r2, [pc, #116]	; (2400ea54 <I2C_DMAError+0x214>)
2400e9de:	4293      	cmp	r3, r2
2400e9e0:	d017      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e9e2:	68bb      	ldr	r3, [r7, #8]
2400e9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9e6:	681b      	ldr	r3, [r3, #0]
2400e9e8:	4a1b      	ldr	r2, [pc, #108]	; (2400ea58 <I2C_DMAError+0x218>)
2400e9ea:	4293      	cmp	r3, r2
2400e9ec:	d011      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e9ee:	68bb      	ldr	r3, [r7, #8]
2400e9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9f2:	681b      	ldr	r3, [r3, #0]
2400e9f4:	4a19      	ldr	r2, [pc, #100]	; (2400ea5c <I2C_DMAError+0x21c>)
2400e9f6:	4293      	cmp	r3, r2
2400e9f8:	d00b      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400e9fa:	68bb      	ldr	r3, [r7, #8]
2400e9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400e9fe:	681b      	ldr	r3, [r3, #0]
2400ea00:	4a17      	ldr	r2, [pc, #92]	; (2400ea60 <I2C_DMAError+0x220>)
2400ea02:	4293      	cmp	r3, r2
2400ea04:	d005      	beq.n	2400ea12 <I2C_DMAError+0x1d2>
2400ea06:	68bb      	ldr	r3, [r7, #8]
2400ea08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ea0a:	681b      	ldr	r3, [r3, #0]
2400ea0c:	4a15      	ldr	r2, [pc, #84]	; (2400ea64 <I2C_DMAError+0x224>)
2400ea0e:	4293      	cmp	r3, r2
2400ea10:	d12a      	bne.n	2400ea68 <I2C_DMAError+0x228>
2400ea12:	68bb      	ldr	r3, [r7, #8]
2400ea14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ea16:	681b      	ldr	r3, [r3, #0]
2400ea18:	685b      	ldr	r3, [r3, #4]
2400ea1a:	2b00      	cmp	r3, #0
2400ea1c:	bf0c      	ite	eq
2400ea1e:	2301      	moveq	r3, #1
2400ea20:	2300      	movne	r3, #0
2400ea22:	b2db      	uxtb	r3, r3
2400ea24:	e029      	b.n	2400ea7a <I2C_DMAError+0x23a>
2400ea26:	bf00      	nop
2400ea28:	40020010 	.word	0x40020010
2400ea2c:	40020028 	.word	0x40020028
2400ea30:	40020040 	.word	0x40020040
2400ea34:	40020058 	.word	0x40020058
2400ea38:	40020070 	.word	0x40020070
2400ea3c:	40020088 	.word	0x40020088
2400ea40:	400200a0 	.word	0x400200a0
2400ea44:	400200b8 	.word	0x400200b8
2400ea48:	40020410 	.word	0x40020410
2400ea4c:	40020428 	.word	0x40020428
2400ea50:	40020440 	.word	0x40020440
2400ea54:	40020458 	.word	0x40020458
2400ea58:	40020470 	.word	0x40020470
2400ea5c:	40020488 	.word	0x40020488
2400ea60:	400204a0 	.word	0x400204a0
2400ea64:	400204b8 	.word	0x400204b8
2400ea68:	68bb      	ldr	r3, [r7, #8]
2400ea6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ea6c:	681b      	ldr	r3, [r3, #0]
2400ea6e:	685b      	ldr	r3, [r3, #4]
2400ea70:	2b00      	cmp	r3, #0
2400ea72:	bf0c      	ite	eq
2400ea74:	2301      	moveq	r3, #1
2400ea76:	2300      	movne	r3, #0
2400ea78:	b2db      	uxtb	r3, r3
2400ea7a:	2b00      	cmp	r3, #0
2400ea7c:	d001      	beq.n	2400ea82 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
2400ea7e:	2301      	movs	r3, #1
2400ea80:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
2400ea82:	6878      	ldr	r0, [r7, #4]
2400ea84:	f7f7 fccc 	bl	24006420 <HAL_DMA_GetError>
2400ea88:	4603      	mov	r3, r0
2400ea8a:	2b02      	cmp	r3, #2
2400ea8c:	d00e      	beq.n	2400eaac <I2C_DMAError+0x26c>
2400ea8e:	68fb      	ldr	r3, [r7, #12]
2400ea90:	2b00      	cmp	r3, #0
2400ea92:	d00b      	beq.n	2400eaac <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ea94:	68bb      	ldr	r3, [r7, #8]
2400ea96:	681b      	ldr	r3, [r3, #0]
2400ea98:	685a      	ldr	r2, [r3, #4]
2400ea9a:	68bb      	ldr	r3, [r7, #8]
2400ea9c:	681b      	ldr	r3, [r3, #0]
2400ea9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2400eaa2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400eaa4:	2110      	movs	r1, #16
2400eaa6:	68b8      	ldr	r0, [r7, #8]
2400eaa8:	f7ff fc46 	bl	2400e338 <I2C_ITError>
  }
}
2400eaac:	bf00      	nop
2400eaae:	3710      	adds	r7, #16
2400eab0:	46bd      	mov	sp, r7
2400eab2:	bd80      	pop	{r7, pc}

2400eab4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
2400eab4:	b580      	push	{r7, lr}
2400eab6:	b084      	sub	sp, #16
2400eab8:	af00      	add	r7, sp, #0
2400eaba:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400eabc:	687b      	ldr	r3, [r7, #4]
2400eabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400eac0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
2400eac2:	68fb      	ldr	r3, [r7, #12]
2400eac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400eac6:	2b00      	cmp	r3, #0
2400eac8:	d003      	beq.n	2400ead2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
2400eaca:	68fb      	ldr	r3, [r7, #12]
2400eacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400eace:	2200      	movs	r2, #0
2400ead0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
2400ead2:	68fb      	ldr	r3, [r7, #12]
2400ead4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400ead6:	2b00      	cmp	r3, #0
2400ead8:	d003      	beq.n	2400eae2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
2400eada:	68fb      	ldr	r3, [r7, #12]
2400eadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400eade:	2200      	movs	r2, #0
2400eae0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
2400eae2:	68f8      	ldr	r0, [r7, #12]
2400eae4:	f7ff fcf8 	bl	2400e4d8 <I2C_TreatErrorCallback>
}
2400eae8:	bf00      	nop
2400eaea:	3710      	adds	r7, #16
2400eaec:	46bd      	mov	sp, r7
2400eaee:	bd80      	pop	{r7, pc}

2400eaf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
2400eaf0:	b580      	push	{r7, lr}
2400eaf2:	b084      	sub	sp, #16
2400eaf4:	af00      	add	r7, sp, #0
2400eaf6:	60f8      	str	r0, [r7, #12]
2400eaf8:	60b9      	str	r1, [r7, #8]
2400eafa:	603b      	str	r3, [r7, #0]
2400eafc:	4613      	mov	r3, r2
2400eafe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400eb00:	e022      	b.n	2400eb48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2400eb02:	683b      	ldr	r3, [r7, #0]
2400eb04:	f1b3 3fff 	cmp.w	r3, #4294967295
2400eb08:	d01e      	beq.n	2400eb48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400eb0a:	f7f3 fb77 	bl	240021fc <HAL_GetTick>
2400eb0e:	4602      	mov	r2, r0
2400eb10:	69bb      	ldr	r3, [r7, #24]
2400eb12:	1ad3      	subs	r3, r2, r3
2400eb14:	683a      	ldr	r2, [r7, #0]
2400eb16:	429a      	cmp	r2, r3
2400eb18:	d302      	bcc.n	2400eb20 <I2C_WaitOnFlagUntilTimeout+0x30>
2400eb1a:	683b      	ldr	r3, [r7, #0]
2400eb1c:	2b00      	cmp	r3, #0
2400eb1e:	d113      	bne.n	2400eb48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400eb20:	68fb      	ldr	r3, [r7, #12]
2400eb22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400eb24:	f043 0220 	orr.w	r2, r3, #32
2400eb28:	68fb      	ldr	r3, [r7, #12]
2400eb2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2400eb2c:	68fb      	ldr	r3, [r7, #12]
2400eb2e:	2220      	movs	r2, #32
2400eb30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400eb34:	68fb      	ldr	r3, [r7, #12]
2400eb36:	2200      	movs	r2, #0
2400eb38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400eb3c:	68fb      	ldr	r3, [r7, #12]
2400eb3e:	2200      	movs	r2, #0
2400eb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2400eb44:	2301      	movs	r3, #1
2400eb46:	e00f      	b.n	2400eb68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400eb48:	68fb      	ldr	r3, [r7, #12]
2400eb4a:	681b      	ldr	r3, [r3, #0]
2400eb4c:	699a      	ldr	r2, [r3, #24]
2400eb4e:	68bb      	ldr	r3, [r7, #8]
2400eb50:	4013      	ands	r3, r2
2400eb52:	68ba      	ldr	r2, [r7, #8]
2400eb54:	429a      	cmp	r2, r3
2400eb56:	bf0c      	ite	eq
2400eb58:	2301      	moveq	r3, #1
2400eb5a:	2300      	movne	r3, #0
2400eb5c:	b2db      	uxtb	r3, r3
2400eb5e:	461a      	mov	r2, r3
2400eb60:	79fb      	ldrb	r3, [r7, #7]
2400eb62:	429a      	cmp	r2, r3
2400eb64:	d0cd      	beq.n	2400eb02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2400eb66:	2300      	movs	r3, #0
}
2400eb68:	4618      	mov	r0, r3
2400eb6a:	3710      	adds	r7, #16
2400eb6c:	46bd      	mov	sp, r7
2400eb6e:	bd80      	pop	{r7, pc}

2400eb70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400eb70:	b580      	push	{r7, lr}
2400eb72:	b084      	sub	sp, #16
2400eb74:	af00      	add	r7, sp, #0
2400eb76:	60f8      	str	r0, [r7, #12]
2400eb78:	60b9      	str	r1, [r7, #8]
2400eb7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400eb7c:	e02c      	b.n	2400ebd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400eb7e:	687a      	ldr	r2, [r7, #4]
2400eb80:	68b9      	ldr	r1, [r7, #8]
2400eb82:	68f8      	ldr	r0, [r7, #12]
2400eb84:	f000 f8ea 	bl	2400ed5c <I2C_IsErrorOccurred>
2400eb88:	4603      	mov	r3, r0
2400eb8a:	2b00      	cmp	r3, #0
2400eb8c:	d001      	beq.n	2400eb92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400eb8e:	2301      	movs	r3, #1
2400eb90:	e02a      	b.n	2400ebe8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2400eb92:	68bb      	ldr	r3, [r7, #8]
2400eb94:	f1b3 3fff 	cmp.w	r3, #4294967295
2400eb98:	d01e      	beq.n	2400ebd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400eb9a:	f7f3 fb2f 	bl	240021fc <HAL_GetTick>
2400eb9e:	4602      	mov	r2, r0
2400eba0:	687b      	ldr	r3, [r7, #4]
2400eba2:	1ad3      	subs	r3, r2, r3
2400eba4:	68ba      	ldr	r2, [r7, #8]
2400eba6:	429a      	cmp	r2, r3
2400eba8:	d302      	bcc.n	2400ebb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
2400ebaa:	68bb      	ldr	r3, [r7, #8]
2400ebac:	2b00      	cmp	r3, #0
2400ebae:	d113      	bne.n	2400ebd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400ebb0:	68fb      	ldr	r3, [r7, #12]
2400ebb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ebb4:	f043 0220 	orr.w	r2, r3, #32
2400ebb8:	68fb      	ldr	r3, [r7, #12]
2400ebba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2400ebbc:	68fb      	ldr	r3, [r7, #12]
2400ebbe:	2220      	movs	r2, #32
2400ebc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400ebc4:	68fb      	ldr	r3, [r7, #12]
2400ebc6:	2200      	movs	r2, #0
2400ebc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400ebcc:	68fb      	ldr	r3, [r7, #12]
2400ebce:	2200      	movs	r2, #0
2400ebd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400ebd4:	2301      	movs	r3, #1
2400ebd6:	e007      	b.n	2400ebe8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400ebd8:	68fb      	ldr	r3, [r7, #12]
2400ebda:	681b      	ldr	r3, [r3, #0]
2400ebdc:	699b      	ldr	r3, [r3, #24]
2400ebde:	f003 0302 	and.w	r3, r3, #2
2400ebe2:	2b02      	cmp	r3, #2
2400ebe4:	d1cb      	bne.n	2400eb7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
2400ebe6:	2300      	movs	r3, #0
}
2400ebe8:	4618      	mov	r0, r3
2400ebea:	3710      	adds	r7, #16
2400ebec:	46bd      	mov	sp, r7
2400ebee:	bd80      	pop	{r7, pc}

2400ebf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400ebf0:	b580      	push	{r7, lr}
2400ebf2:	b084      	sub	sp, #16
2400ebf4:	af00      	add	r7, sp, #0
2400ebf6:	60f8      	str	r0, [r7, #12]
2400ebf8:	60b9      	str	r1, [r7, #8]
2400ebfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400ebfc:	e028      	b.n	2400ec50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400ebfe:	687a      	ldr	r2, [r7, #4]
2400ec00:	68b9      	ldr	r1, [r7, #8]
2400ec02:	68f8      	ldr	r0, [r7, #12]
2400ec04:	f000 f8aa 	bl	2400ed5c <I2C_IsErrorOccurred>
2400ec08:	4603      	mov	r3, r0
2400ec0a:	2b00      	cmp	r3, #0
2400ec0c:	d001      	beq.n	2400ec12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400ec0e:	2301      	movs	r3, #1
2400ec10:	e026      	b.n	2400ec60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400ec12:	f7f3 faf3 	bl	240021fc <HAL_GetTick>
2400ec16:	4602      	mov	r2, r0
2400ec18:	687b      	ldr	r3, [r7, #4]
2400ec1a:	1ad3      	subs	r3, r2, r3
2400ec1c:	68ba      	ldr	r2, [r7, #8]
2400ec1e:	429a      	cmp	r2, r3
2400ec20:	d302      	bcc.n	2400ec28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
2400ec22:	68bb      	ldr	r3, [r7, #8]
2400ec24:	2b00      	cmp	r3, #0
2400ec26:	d113      	bne.n	2400ec50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400ec28:	68fb      	ldr	r3, [r7, #12]
2400ec2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ec2c:	f043 0220 	orr.w	r2, r3, #32
2400ec30:	68fb      	ldr	r3, [r7, #12]
2400ec32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
2400ec34:	68fb      	ldr	r3, [r7, #12]
2400ec36:	2220      	movs	r2, #32
2400ec38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400ec3c:	68fb      	ldr	r3, [r7, #12]
2400ec3e:	2200      	movs	r2, #0
2400ec40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ec44:	68fb      	ldr	r3, [r7, #12]
2400ec46:	2200      	movs	r2, #0
2400ec48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
2400ec4c:	2301      	movs	r3, #1
2400ec4e:	e007      	b.n	2400ec60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400ec50:	68fb      	ldr	r3, [r7, #12]
2400ec52:	681b      	ldr	r3, [r3, #0]
2400ec54:	699b      	ldr	r3, [r3, #24]
2400ec56:	f003 0320 	and.w	r3, r3, #32
2400ec5a:	2b20      	cmp	r3, #32
2400ec5c:	d1cf      	bne.n	2400ebfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
2400ec5e:	2300      	movs	r3, #0
}
2400ec60:	4618      	mov	r0, r3
2400ec62:	3710      	adds	r7, #16
2400ec64:	46bd      	mov	sp, r7
2400ec66:	bd80      	pop	{r7, pc}

2400ec68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2400ec68:	b580      	push	{r7, lr}
2400ec6a:	b084      	sub	sp, #16
2400ec6c:	af00      	add	r7, sp, #0
2400ec6e:	60f8      	str	r0, [r7, #12]
2400ec70:	60b9      	str	r1, [r7, #8]
2400ec72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2400ec74:	e064      	b.n	2400ed40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2400ec76:	687a      	ldr	r2, [r7, #4]
2400ec78:	68b9      	ldr	r1, [r7, #8]
2400ec7a:	68f8      	ldr	r0, [r7, #12]
2400ec7c:	f000 f86e 	bl	2400ed5c <I2C_IsErrorOccurred>
2400ec80:	4603      	mov	r3, r0
2400ec82:	2b00      	cmp	r3, #0
2400ec84:	d001      	beq.n	2400ec8a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2400ec86:	2301      	movs	r3, #1
2400ec88:	e062      	b.n	2400ed50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
2400ec8a:	68fb      	ldr	r3, [r7, #12]
2400ec8c:	681b      	ldr	r3, [r3, #0]
2400ec8e:	699b      	ldr	r3, [r3, #24]
2400ec90:	f003 0320 	and.w	r3, r3, #32
2400ec94:	2b20      	cmp	r3, #32
2400ec96:	d138      	bne.n	2400ed0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
2400ec98:	68fb      	ldr	r3, [r7, #12]
2400ec9a:	681b      	ldr	r3, [r3, #0]
2400ec9c:	699b      	ldr	r3, [r3, #24]
2400ec9e:	f003 0304 	and.w	r3, r3, #4
2400eca2:	2b04      	cmp	r3, #4
2400eca4:	d105      	bne.n	2400ecb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
2400eca6:	68fb      	ldr	r3, [r7, #12]
2400eca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2400ecaa:	2b00      	cmp	r3, #0
2400ecac:	d001      	beq.n	2400ecb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
2400ecae:	2300      	movs	r3, #0
2400ecb0:	e04e      	b.n	2400ed50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
2400ecb2:	68fb      	ldr	r3, [r7, #12]
2400ecb4:	681b      	ldr	r3, [r3, #0]
2400ecb6:	699b      	ldr	r3, [r3, #24]
2400ecb8:	f003 0310 	and.w	r3, r3, #16
2400ecbc:	2b10      	cmp	r3, #16
2400ecbe:	d107      	bne.n	2400ecd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ecc0:	68fb      	ldr	r3, [r7, #12]
2400ecc2:	681b      	ldr	r3, [r3, #0]
2400ecc4:	2210      	movs	r2, #16
2400ecc6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
2400ecc8:	68fb      	ldr	r3, [r7, #12]
2400ecca:	2204      	movs	r2, #4
2400eccc:	645a      	str	r2, [r3, #68]	; 0x44
2400ecce:	e002      	b.n	2400ecd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ecd0:	68fb      	ldr	r3, [r7, #12]
2400ecd2:	2200      	movs	r2, #0
2400ecd4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400ecd6:	68fb      	ldr	r3, [r7, #12]
2400ecd8:	681b      	ldr	r3, [r3, #0]
2400ecda:	2220      	movs	r2, #32
2400ecdc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
2400ecde:	68fb      	ldr	r3, [r7, #12]
2400ece0:	681b      	ldr	r3, [r3, #0]
2400ece2:	6859      	ldr	r1, [r3, #4]
2400ece4:	68fb      	ldr	r3, [r7, #12]
2400ece6:	681a      	ldr	r2, [r3, #0]
2400ece8:	4b1b      	ldr	r3, [pc, #108]	; (2400ed58 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
2400ecea:	400b      	ands	r3, r1
2400ecec:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
2400ecee:	68fb      	ldr	r3, [r7, #12]
2400ecf0:	2220      	movs	r2, #32
2400ecf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2400ecf6:	68fb      	ldr	r3, [r7, #12]
2400ecf8:	2200      	movs	r2, #0
2400ecfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400ecfe:	68fb      	ldr	r3, [r7, #12]
2400ed00:	2200      	movs	r2, #0
2400ed02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2400ed06:	2301      	movs	r3, #1
2400ed08:	e022      	b.n	2400ed50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400ed0a:	f7f3 fa77 	bl	240021fc <HAL_GetTick>
2400ed0e:	4602      	mov	r2, r0
2400ed10:	687b      	ldr	r3, [r7, #4]
2400ed12:	1ad3      	subs	r3, r2, r3
2400ed14:	68ba      	ldr	r2, [r7, #8]
2400ed16:	429a      	cmp	r2, r3
2400ed18:	d302      	bcc.n	2400ed20 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
2400ed1a:	68bb      	ldr	r3, [r7, #8]
2400ed1c:	2b00      	cmp	r3, #0
2400ed1e:	d10f      	bne.n	2400ed40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400ed20:	68fb      	ldr	r3, [r7, #12]
2400ed22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ed24:	f043 0220 	orr.w	r2, r3, #32
2400ed28:	68fb      	ldr	r3, [r7, #12]
2400ed2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
2400ed2c:	68fb      	ldr	r3, [r7, #12]
2400ed2e:	2220      	movs	r2, #32
2400ed30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400ed34:	68fb      	ldr	r3, [r7, #12]
2400ed36:	2200      	movs	r2, #0
2400ed38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
2400ed3c:	2301      	movs	r3, #1
2400ed3e:	e007      	b.n	2400ed50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2400ed40:	68fb      	ldr	r3, [r7, #12]
2400ed42:	681b      	ldr	r3, [r3, #0]
2400ed44:	699b      	ldr	r3, [r3, #24]
2400ed46:	f003 0304 	and.w	r3, r3, #4
2400ed4a:	2b04      	cmp	r3, #4
2400ed4c:	d193      	bne.n	2400ec76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
2400ed4e:	2300      	movs	r3, #0
}
2400ed50:	4618      	mov	r0, r3
2400ed52:	3710      	adds	r7, #16
2400ed54:	46bd      	mov	sp, r7
2400ed56:	bd80      	pop	{r7, pc}
2400ed58:	fe00e800 	.word	0xfe00e800

2400ed5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
2400ed5c:	b580      	push	{r7, lr}
2400ed5e:	b08a      	sub	sp, #40	; 0x28
2400ed60:	af00      	add	r7, sp, #0
2400ed62:	60f8      	str	r0, [r7, #12]
2400ed64:	60b9      	str	r1, [r7, #8]
2400ed66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2400ed68:	2300      	movs	r3, #0
2400ed6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
2400ed6e:	68fb      	ldr	r3, [r7, #12]
2400ed70:	681b      	ldr	r3, [r3, #0]
2400ed72:	699b      	ldr	r3, [r3, #24]
2400ed74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
2400ed76:	2300      	movs	r3, #0
2400ed78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
2400ed7a:	687b      	ldr	r3, [r7, #4]
2400ed7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
2400ed7e:	69bb      	ldr	r3, [r7, #24]
2400ed80:	f003 0310 	and.w	r3, r3, #16
2400ed84:	2b00      	cmp	r3, #0
2400ed86:	d075      	beq.n	2400ee74 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ed88:	68fb      	ldr	r3, [r7, #12]
2400ed8a:	681b      	ldr	r3, [r3, #0]
2400ed8c:	2210      	movs	r2, #16
2400ed8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400ed90:	e056      	b.n	2400ee40 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
2400ed92:	68bb      	ldr	r3, [r7, #8]
2400ed94:	f1b3 3fff 	cmp.w	r3, #4294967295
2400ed98:	d052      	beq.n	2400ee40 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400ed9a:	f7f3 fa2f 	bl	240021fc <HAL_GetTick>
2400ed9e:	4602      	mov	r2, r0
2400eda0:	69fb      	ldr	r3, [r7, #28]
2400eda2:	1ad3      	subs	r3, r2, r3
2400eda4:	68ba      	ldr	r2, [r7, #8]
2400eda6:	429a      	cmp	r2, r3
2400eda8:	d302      	bcc.n	2400edb0 <I2C_IsErrorOccurred+0x54>
2400edaa:	68bb      	ldr	r3, [r7, #8]
2400edac:	2b00      	cmp	r3, #0
2400edae:	d147      	bne.n	2400ee40 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400edb0:	68fb      	ldr	r3, [r7, #12]
2400edb2:	681b      	ldr	r3, [r3, #0]
2400edb4:	685b      	ldr	r3, [r3, #4]
2400edb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2400edba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
2400edbc:	68fb      	ldr	r3, [r7, #12]
2400edbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2400edc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2400edc4:	68fb      	ldr	r3, [r7, #12]
2400edc6:	681b      	ldr	r3, [r3, #0]
2400edc8:	699b      	ldr	r3, [r3, #24]
2400edca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2400edce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400edd2:	d12e      	bne.n	2400ee32 <I2C_IsErrorOccurred+0xd6>
2400edd4:	697b      	ldr	r3, [r7, #20]
2400edd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400edda:	d02a      	beq.n	2400ee32 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
2400eddc:	7cfb      	ldrb	r3, [r7, #19]
2400edde:	2b20      	cmp	r3, #32
2400ede0:	d027      	beq.n	2400ee32 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400ede2:	68fb      	ldr	r3, [r7, #12]
2400ede4:	681b      	ldr	r3, [r3, #0]
2400ede6:	685a      	ldr	r2, [r3, #4]
2400ede8:	68fb      	ldr	r3, [r7, #12]
2400edea:	681b      	ldr	r3, [r3, #0]
2400edec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400edf0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
2400edf2:	f7f3 fa03 	bl	240021fc <HAL_GetTick>
2400edf6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400edf8:	e01b      	b.n	2400ee32 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400edfa:	f7f3 f9ff 	bl	240021fc <HAL_GetTick>
2400edfe:	4602      	mov	r2, r0
2400ee00:	69fb      	ldr	r3, [r7, #28]
2400ee02:	1ad3      	subs	r3, r2, r3
2400ee04:	2b19      	cmp	r3, #25
2400ee06:	d914      	bls.n	2400ee32 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400ee08:	68fb      	ldr	r3, [r7, #12]
2400ee0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400ee0c:	f043 0220 	orr.w	r2, r3, #32
2400ee10:	68fb      	ldr	r3, [r7, #12]
2400ee12:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
2400ee14:	68fb      	ldr	r3, [r7, #12]
2400ee16:	2220      	movs	r2, #32
2400ee18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
2400ee1c:	68fb      	ldr	r3, [r7, #12]
2400ee1e:	2200      	movs	r2, #0
2400ee20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
2400ee24:	68fb      	ldr	r3, [r7, #12]
2400ee26:	2200      	movs	r2, #0
2400ee28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
2400ee2c:	2301      	movs	r3, #1
2400ee2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400ee32:	68fb      	ldr	r3, [r7, #12]
2400ee34:	681b      	ldr	r3, [r3, #0]
2400ee36:	699b      	ldr	r3, [r3, #24]
2400ee38:	f003 0320 	and.w	r3, r3, #32
2400ee3c:	2b20      	cmp	r3, #32
2400ee3e:	d1dc      	bne.n	2400edfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400ee40:	68fb      	ldr	r3, [r7, #12]
2400ee42:	681b      	ldr	r3, [r3, #0]
2400ee44:	699b      	ldr	r3, [r3, #24]
2400ee46:	f003 0320 	and.w	r3, r3, #32
2400ee4a:	2b20      	cmp	r3, #32
2400ee4c:	d003      	beq.n	2400ee56 <I2C_IsErrorOccurred+0xfa>
2400ee4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400ee52:	2b00      	cmp	r3, #0
2400ee54:	d09d      	beq.n	2400ed92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
2400ee56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400ee5a:	2b00      	cmp	r3, #0
2400ee5c:	d103      	bne.n	2400ee66 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400ee5e:	68fb      	ldr	r3, [r7, #12]
2400ee60:	681b      	ldr	r3, [r3, #0]
2400ee62:	2220      	movs	r2, #32
2400ee64:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
2400ee66:	6a3b      	ldr	r3, [r7, #32]
2400ee68:	f043 0304 	orr.w	r3, r3, #4
2400ee6c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
2400ee6e:	2301      	movs	r3, #1
2400ee70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
2400ee74:	68fb      	ldr	r3, [r7, #12]
2400ee76:	681b      	ldr	r3, [r3, #0]
2400ee78:	699b      	ldr	r3, [r3, #24]
2400ee7a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
2400ee7c:	69bb      	ldr	r3, [r7, #24]
2400ee7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400ee82:	2b00      	cmp	r3, #0
2400ee84:	d00b      	beq.n	2400ee9e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
2400ee86:	6a3b      	ldr	r3, [r7, #32]
2400ee88:	f043 0301 	orr.w	r3, r3, #1
2400ee8c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400ee8e:	68fb      	ldr	r3, [r7, #12]
2400ee90:	681b      	ldr	r3, [r3, #0]
2400ee92:	f44f 7280 	mov.w	r2, #256	; 0x100
2400ee96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400ee98:	2301      	movs	r3, #1
2400ee9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400ee9e:	69bb      	ldr	r3, [r7, #24]
2400eea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2400eea4:	2b00      	cmp	r3, #0
2400eea6:	d00b      	beq.n	2400eec0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
2400eea8:	6a3b      	ldr	r3, [r7, #32]
2400eeaa:	f043 0308 	orr.w	r3, r3, #8
2400eeae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400eeb0:	68fb      	ldr	r3, [r7, #12]
2400eeb2:	681b      	ldr	r3, [r3, #0]
2400eeb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400eeb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400eeba:	2301      	movs	r3, #1
2400eebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2400eec0:	69bb      	ldr	r3, [r7, #24]
2400eec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
2400eec6:	2b00      	cmp	r3, #0
2400eec8:	d00b      	beq.n	2400eee2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
2400eeca:	6a3b      	ldr	r3, [r7, #32]
2400eecc:	f043 0302 	orr.w	r3, r3, #2
2400eed0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400eed2:	68fb      	ldr	r3, [r7, #12]
2400eed4:	681b      	ldr	r3, [r3, #0]
2400eed6:	f44f 7200 	mov.w	r2, #512	; 0x200
2400eeda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2400eedc:	2301      	movs	r3, #1
2400eede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
2400eee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2400eee6:	2b00      	cmp	r3, #0
2400eee8:	d01c      	beq.n	2400ef24 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400eeea:	68f8      	ldr	r0, [r7, #12]
2400eeec:	f7ff fb1b 	bl	2400e526 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400eef0:	68fb      	ldr	r3, [r7, #12]
2400eef2:	681b      	ldr	r3, [r3, #0]
2400eef4:	6859      	ldr	r1, [r3, #4]
2400eef6:	68fb      	ldr	r3, [r7, #12]
2400eef8:	681a      	ldr	r2, [r3, #0]
2400eefa:	4b0d      	ldr	r3, [pc, #52]	; (2400ef30 <I2C_IsErrorOccurred+0x1d4>)
2400eefc:	400b      	ands	r3, r1
2400eefe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
2400ef00:	68fb      	ldr	r3, [r7, #12]
2400ef02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400ef04:	6a3b      	ldr	r3, [r7, #32]
2400ef06:	431a      	orrs	r2, r3
2400ef08:	68fb      	ldr	r3, [r7, #12]
2400ef0a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
2400ef0c:	68fb      	ldr	r3, [r7, #12]
2400ef0e:	2220      	movs	r2, #32
2400ef10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400ef14:	68fb      	ldr	r3, [r7, #12]
2400ef16:	2200      	movs	r2, #0
2400ef18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ef1c:	68fb      	ldr	r3, [r7, #12]
2400ef1e:	2200      	movs	r2, #0
2400ef20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2400ef24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
2400ef28:	4618      	mov	r0, r3
2400ef2a:	3728      	adds	r7, #40	; 0x28
2400ef2c:	46bd      	mov	sp, r7
2400ef2e:	bd80      	pop	{r7, pc}
2400ef30:	fe00e800 	.word	0xfe00e800

2400ef34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
2400ef34:	b480      	push	{r7}
2400ef36:	b087      	sub	sp, #28
2400ef38:	af00      	add	r7, sp, #0
2400ef3a:	60f8      	str	r0, [r7, #12]
2400ef3c:	607b      	str	r3, [r7, #4]
2400ef3e:	460b      	mov	r3, r1
2400ef40:	817b      	strh	r3, [r7, #10]
2400ef42:	4613      	mov	r3, r2
2400ef44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400ef46:	897b      	ldrh	r3, [r7, #10]
2400ef48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400ef4c:	7a7b      	ldrb	r3, [r7, #9]
2400ef4e:	041b      	lsls	r3, r3, #16
2400ef50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400ef54:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400ef56:	687b      	ldr	r3, [r7, #4]
2400ef58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400ef5a:	6a3b      	ldr	r3, [r7, #32]
2400ef5c:	4313      	orrs	r3, r2
2400ef5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400ef62:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
2400ef64:	68fb      	ldr	r3, [r7, #12]
2400ef66:	681b      	ldr	r3, [r3, #0]
2400ef68:	685a      	ldr	r2, [r3, #4]
2400ef6a:	6a3b      	ldr	r3, [r7, #32]
2400ef6c:	0d5b      	lsrs	r3, r3, #21
2400ef6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
2400ef72:	4b08      	ldr	r3, [pc, #32]	; (2400ef94 <I2C_TransferConfig+0x60>)
2400ef74:	430b      	orrs	r3, r1
2400ef76:	43db      	mvns	r3, r3
2400ef78:	ea02 0103 	and.w	r1, r2, r3
2400ef7c:	68fb      	ldr	r3, [r7, #12]
2400ef7e:	681b      	ldr	r3, [r3, #0]
2400ef80:	697a      	ldr	r2, [r7, #20]
2400ef82:	430a      	orrs	r2, r1
2400ef84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
2400ef86:	bf00      	nop
2400ef88:	371c      	adds	r7, #28
2400ef8a:	46bd      	mov	sp, r7
2400ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ef90:	4770      	bx	lr
2400ef92:	bf00      	nop
2400ef94:	03ff63ff 	.word	0x03ff63ff

2400ef98 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2400ef98:	b480      	push	{r7}
2400ef9a:	b085      	sub	sp, #20
2400ef9c:	af00      	add	r7, sp, #0
2400ef9e:	6078      	str	r0, [r7, #4]
2400efa0:	460b      	mov	r3, r1
2400efa2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2400efa4:	2300      	movs	r3, #0
2400efa6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2400efa8:	687b      	ldr	r3, [r7, #4]
2400efaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400efac:	4a2a      	ldr	r2, [pc, #168]	; (2400f058 <I2C_Enable_IRQ+0xc0>)
2400efae:	4293      	cmp	r3, r2
2400efb0:	d004      	beq.n	2400efbc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
2400efb2:	687b      	ldr	r3, [r7, #4]
2400efb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2400efb6:	4a29      	ldr	r2, [pc, #164]	; (2400f05c <I2C_Enable_IRQ+0xc4>)
2400efb8:	4293      	cmp	r3, r2
2400efba:	d11d      	bne.n	2400eff8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400efbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400efc0:	2b00      	cmp	r3, #0
2400efc2:	da03      	bge.n	2400efcc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400efc4:	68fb      	ldr	r3, [r7, #12]
2400efc6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400efca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
2400efcc:	887b      	ldrh	r3, [r7, #2]
2400efce:	2b10      	cmp	r3, #16
2400efd0:	d103      	bne.n	2400efda <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2400efd2:	68fb      	ldr	r3, [r7, #12]
2400efd4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2400efd8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2400efda:	887b      	ldrh	r3, [r7, #2]
2400efdc:	2b20      	cmp	r3, #32
2400efde:	d103      	bne.n	2400efe8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
2400efe0:	68fb      	ldr	r3, [r7, #12]
2400efe2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
2400efe6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400efe8:	887b      	ldrh	r3, [r7, #2]
2400efea:	2b40      	cmp	r3, #64	; 0x40
2400efec:	d125      	bne.n	2400f03a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
2400efee:	68fb      	ldr	r3, [r7, #12]
2400eff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400eff4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400eff6:	e020      	b.n	2400f03a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400eff8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400effc:	2b00      	cmp	r3, #0
2400effe:	da03      	bge.n	2400f008 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f000:	68fb      	ldr	r3, [r7, #12]
2400f002:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400f006:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2400f008:	887b      	ldrh	r3, [r7, #2]
2400f00a:	f003 0301 	and.w	r3, r3, #1
2400f00e:	2b00      	cmp	r3, #0
2400f010:	d003      	beq.n	2400f01a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
2400f012:	68fb      	ldr	r3, [r7, #12]
2400f014:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
2400f018:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2400f01a:	887b      	ldrh	r3, [r7, #2]
2400f01c:	f003 0302 	and.w	r3, r3, #2
2400f020:	2b00      	cmp	r3, #0
2400f022:	d003      	beq.n	2400f02c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
2400f024:	68fb      	ldr	r3, [r7, #12]
2400f026:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
2400f02a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2400f02c:	887b      	ldrh	r3, [r7, #2]
2400f02e:	2b20      	cmp	r3, #32
2400f030:	d103      	bne.n	2400f03a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
2400f032:	68fb      	ldr	r3, [r7, #12]
2400f034:	f043 0320 	orr.w	r3, r3, #32
2400f038:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2400f03a:	687b      	ldr	r3, [r7, #4]
2400f03c:	681b      	ldr	r3, [r3, #0]
2400f03e:	6819      	ldr	r1, [r3, #0]
2400f040:	687b      	ldr	r3, [r7, #4]
2400f042:	681b      	ldr	r3, [r3, #0]
2400f044:	68fa      	ldr	r2, [r7, #12]
2400f046:	430a      	orrs	r2, r1
2400f048:	601a      	str	r2, [r3, #0]
}
2400f04a:	bf00      	nop
2400f04c:	3714      	adds	r7, #20
2400f04e:	46bd      	mov	sp, r7
2400f050:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f054:	4770      	bx	lr
2400f056:	bf00      	nop
2400f058:	2400d3cd 	.word	0x2400d3cd
2400f05c:	2400d5b5 	.word	0x2400d5b5

2400f060 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2400f060:	b480      	push	{r7}
2400f062:	b085      	sub	sp, #20
2400f064:	af00      	add	r7, sp, #0
2400f066:	6078      	str	r0, [r7, #4]
2400f068:	460b      	mov	r3, r1
2400f06a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2400f06c:	2300      	movs	r3, #0
2400f06e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2400f070:	887b      	ldrh	r3, [r7, #2]
2400f072:	f003 0301 	and.w	r3, r3, #1
2400f076:	2b00      	cmp	r3, #0
2400f078:	d00f      	beq.n	2400f09a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
2400f07a:	68fb      	ldr	r3, [r7, #12]
2400f07c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
2400f080:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400f082:	687b      	ldr	r3, [r7, #4]
2400f084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f088:	b2db      	uxtb	r3, r3
2400f08a:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400f08e:	2b28      	cmp	r3, #40	; 0x28
2400f090:	d003      	beq.n	2400f09a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f092:	68fb      	ldr	r3, [r7, #12]
2400f094:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
2400f098:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2400f09a:	887b      	ldrh	r3, [r7, #2]
2400f09c:	f003 0302 	and.w	r3, r3, #2
2400f0a0:	2b00      	cmp	r3, #0
2400f0a2:	d00f      	beq.n	2400f0c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
2400f0a4:	68fb      	ldr	r3, [r7, #12]
2400f0a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
2400f0aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400f0ac:	687b      	ldr	r3, [r7, #4]
2400f0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f0b2:	b2db      	uxtb	r3, r3
2400f0b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
2400f0b8:	2b28      	cmp	r3, #40	; 0x28
2400f0ba:	d003      	beq.n	2400f0c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f0bc:	68fb      	ldr	r3, [r7, #12]
2400f0be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
2400f0c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2400f0c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2400f0c8:	2b00      	cmp	r3, #0
2400f0ca:	da03      	bge.n	2400f0d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2400f0cc:	68fb      	ldr	r3, [r7, #12]
2400f0ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2400f0d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
2400f0d4:	887b      	ldrh	r3, [r7, #2]
2400f0d6:	2b10      	cmp	r3, #16
2400f0d8:	d103      	bne.n	2400f0e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2400f0da:	68fb      	ldr	r3, [r7, #12]
2400f0dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2400f0e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
2400f0e2:	887b      	ldrh	r3, [r7, #2]
2400f0e4:	2b20      	cmp	r3, #32
2400f0e6:	d103      	bne.n	2400f0f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
2400f0e8:	68fb      	ldr	r3, [r7, #12]
2400f0ea:	f043 0320 	orr.w	r3, r3, #32
2400f0ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
2400f0f0:	887b      	ldrh	r3, [r7, #2]
2400f0f2:	2b40      	cmp	r3, #64	; 0x40
2400f0f4:	d103      	bne.n	2400f0fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
2400f0f6:	68fb      	ldr	r3, [r7, #12]
2400f0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400f0fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400f0fe:	687b      	ldr	r3, [r7, #4]
2400f100:	681b      	ldr	r3, [r3, #0]
2400f102:	6819      	ldr	r1, [r3, #0]
2400f104:	68fb      	ldr	r3, [r7, #12]
2400f106:	43da      	mvns	r2, r3
2400f108:	687b      	ldr	r3, [r7, #4]
2400f10a:	681b      	ldr	r3, [r3, #0]
2400f10c:	400a      	ands	r2, r1
2400f10e:	601a      	str	r2, [r3, #0]
}
2400f110:	bf00      	nop
2400f112:	3714      	adds	r7, #20
2400f114:	46bd      	mov	sp, r7
2400f116:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f11a:	4770      	bx	lr

2400f11c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
2400f11c:	b480      	push	{r7}
2400f11e:	b083      	sub	sp, #12
2400f120:	af00      	add	r7, sp, #0
2400f122:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
2400f124:	687b      	ldr	r3, [r7, #4]
2400f126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400f128:	2baa      	cmp	r3, #170	; 0xaa
2400f12a:	d103      	bne.n	2400f134 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
2400f12c:	687b      	ldr	r3, [r7, #4]
2400f12e:	2200      	movs	r2, #0
2400f130:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
2400f132:	e008      	b.n	2400f146 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
2400f134:	687b      	ldr	r3, [r7, #4]
2400f136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400f138:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2400f13c:	d103      	bne.n	2400f146 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
2400f13e:	687b      	ldr	r3, [r7, #4]
2400f140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
2400f144:	62da      	str	r2, [r3, #44]	; 0x2c
}
2400f146:	bf00      	nop
2400f148:	370c      	adds	r7, #12
2400f14a:	46bd      	mov	sp, r7
2400f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f150:	4770      	bx	lr

2400f152 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
2400f152:	b480      	push	{r7}
2400f154:	b083      	sub	sp, #12
2400f156:	af00      	add	r7, sp, #0
2400f158:	6078      	str	r0, [r7, #4]
2400f15a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f15c:	687b      	ldr	r3, [r7, #4]
2400f15e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f162:	b2db      	uxtb	r3, r3
2400f164:	2b20      	cmp	r3, #32
2400f166:	d138      	bne.n	2400f1da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f168:	687b      	ldr	r3, [r7, #4]
2400f16a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f16e:	2b01      	cmp	r3, #1
2400f170:	d101      	bne.n	2400f176 <HAL_I2CEx_ConfigAnalogFilter+0x24>
2400f172:	2302      	movs	r3, #2
2400f174:	e032      	b.n	2400f1dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
2400f176:	687b      	ldr	r3, [r7, #4]
2400f178:	2201      	movs	r2, #1
2400f17a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f17e:	687b      	ldr	r3, [r7, #4]
2400f180:	2224      	movs	r2, #36	; 0x24
2400f182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f186:	687b      	ldr	r3, [r7, #4]
2400f188:	681b      	ldr	r3, [r3, #0]
2400f18a:	681a      	ldr	r2, [r3, #0]
2400f18c:	687b      	ldr	r3, [r7, #4]
2400f18e:	681b      	ldr	r3, [r3, #0]
2400f190:	f022 0201 	bic.w	r2, r2, #1
2400f194:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
2400f196:	687b      	ldr	r3, [r7, #4]
2400f198:	681b      	ldr	r3, [r3, #0]
2400f19a:	681a      	ldr	r2, [r3, #0]
2400f19c:	687b      	ldr	r3, [r7, #4]
2400f19e:	681b      	ldr	r3, [r3, #0]
2400f1a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2400f1a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
2400f1a6:	687b      	ldr	r3, [r7, #4]
2400f1a8:	681b      	ldr	r3, [r3, #0]
2400f1aa:	6819      	ldr	r1, [r3, #0]
2400f1ac:	687b      	ldr	r3, [r7, #4]
2400f1ae:	681b      	ldr	r3, [r3, #0]
2400f1b0:	683a      	ldr	r2, [r7, #0]
2400f1b2:	430a      	orrs	r2, r1
2400f1b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f1b6:	687b      	ldr	r3, [r7, #4]
2400f1b8:	681b      	ldr	r3, [r3, #0]
2400f1ba:	681a      	ldr	r2, [r3, #0]
2400f1bc:	687b      	ldr	r3, [r7, #4]
2400f1be:	681b      	ldr	r3, [r3, #0]
2400f1c0:	f042 0201 	orr.w	r2, r2, #1
2400f1c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f1c6:	687b      	ldr	r3, [r7, #4]
2400f1c8:	2220      	movs	r2, #32
2400f1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f1ce:	687b      	ldr	r3, [r7, #4]
2400f1d0:	2200      	movs	r2, #0
2400f1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f1d6:	2300      	movs	r3, #0
2400f1d8:	e000      	b.n	2400f1dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
2400f1da:	2302      	movs	r3, #2
  }
}
2400f1dc:	4618      	mov	r0, r3
2400f1de:	370c      	adds	r7, #12
2400f1e0:	46bd      	mov	sp, r7
2400f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f1e6:	4770      	bx	lr

2400f1e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
2400f1e8:	b480      	push	{r7}
2400f1ea:	b085      	sub	sp, #20
2400f1ec:	af00      	add	r7, sp, #0
2400f1ee:	6078      	str	r0, [r7, #4]
2400f1f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f1f2:	687b      	ldr	r3, [r7, #4]
2400f1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f1f8:	b2db      	uxtb	r3, r3
2400f1fa:	2b20      	cmp	r3, #32
2400f1fc:	d139      	bne.n	2400f272 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f1fe:	687b      	ldr	r3, [r7, #4]
2400f200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f204:	2b01      	cmp	r3, #1
2400f206:	d101      	bne.n	2400f20c <HAL_I2CEx_ConfigDigitalFilter+0x24>
2400f208:	2302      	movs	r3, #2
2400f20a:	e033      	b.n	2400f274 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
2400f20c:	687b      	ldr	r3, [r7, #4]
2400f20e:	2201      	movs	r2, #1
2400f210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f214:	687b      	ldr	r3, [r7, #4]
2400f216:	2224      	movs	r2, #36	; 0x24
2400f218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f21c:	687b      	ldr	r3, [r7, #4]
2400f21e:	681b      	ldr	r3, [r3, #0]
2400f220:	681a      	ldr	r2, [r3, #0]
2400f222:	687b      	ldr	r3, [r7, #4]
2400f224:	681b      	ldr	r3, [r3, #0]
2400f226:	f022 0201 	bic.w	r2, r2, #1
2400f22a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
2400f22c:	687b      	ldr	r3, [r7, #4]
2400f22e:	681b      	ldr	r3, [r3, #0]
2400f230:	681b      	ldr	r3, [r3, #0]
2400f232:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
2400f234:	68fb      	ldr	r3, [r7, #12]
2400f236:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
2400f23a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
2400f23c:	683b      	ldr	r3, [r7, #0]
2400f23e:	021b      	lsls	r3, r3, #8
2400f240:	68fa      	ldr	r2, [r7, #12]
2400f242:	4313      	orrs	r3, r2
2400f244:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
2400f246:	687b      	ldr	r3, [r7, #4]
2400f248:	681b      	ldr	r3, [r3, #0]
2400f24a:	68fa      	ldr	r2, [r7, #12]
2400f24c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f24e:	687b      	ldr	r3, [r7, #4]
2400f250:	681b      	ldr	r3, [r3, #0]
2400f252:	681a      	ldr	r2, [r3, #0]
2400f254:	687b      	ldr	r3, [r7, #4]
2400f256:	681b      	ldr	r3, [r3, #0]
2400f258:	f042 0201 	orr.w	r2, r2, #1
2400f25c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f25e:	687b      	ldr	r3, [r7, #4]
2400f260:	2220      	movs	r2, #32
2400f262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f266:	687b      	ldr	r3, [r7, #4]
2400f268:	2200      	movs	r2, #0
2400f26a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f26e:	2300      	movs	r3, #0
2400f270:	e000      	b.n	2400f274 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
2400f272:	2302      	movs	r3, #2
  }
}
2400f274:	4618      	mov	r0, r3
2400f276:	3714      	adds	r7, #20
2400f278:	46bd      	mov	sp, r7
2400f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f27e:	4770      	bx	lr

2400f280 <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
2400f280:	b480      	push	{r7}
2400f282:	b083      	sub	sp, #12
2400f284:	af00      	add	r7, sp, #0
2400f286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f288:	687b      	ldr	r3, [r7, #4]
2400f28a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f28e:	b2db      	uxtb	r3, r3
2400f290:	2b20      	cmp	r3, #32
2400f292:	d130      	bne.n	2400f2f6 <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f294:	687b      	ldr	r3, [r7, #4]
2400f296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f29a:	2b01      	cmp	r3, #1
2400f29c:	d101      	bne.n	2400f2a2 <HAL_I2CEx_EnableWakeUp+0x22>
2400f29e:	2302      	movs	r3, #2
2400f2a0:	e02a      	b.n	2400f2f8 <HAL_I2CEx_EnableWakeUp+0x78>
2400f2a2:	687b      	ldr	r3, [r7, #4]
2400f2a4:	2201      	movs	r2, #1
2400f2a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f2aa:	687b      	ldr	r3, [r7, #4]
2400f2ac:	2224      	movs	r2, #36	; 0x24
2400f2ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f2b2:	687b      	ldr	r3, [r7, #4]
2400f2b4:	681b      	ldr	r3, [r3, #0]
2400f2b6:	681a      	ldr	r2, [r3, #0]
2400f2b8:	687b      	ldr	r3, [r7, #4]
2400f2ba:	681b      	ldr	r3, [r3, #0]
2400f2bc:	f022 0201 	bic.w	r2, r2, #1
2400f2c0:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
2400f2c2:	687b      	ldr	r3, [r7, #4]
2400f2c4:	681b      	ldr	r3, [r3, #0]
2400f2c6:	681a      	ldr	r2, [r3, #0]
2400f2c8:	687b      	ldr	r3, [r7, #4]
2400f2ca:	681b      	ldr	r3, [r3, #0]
2400f2cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400f2d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f2d2:	687b      	ldr	r3, [r7, #4]
2400f2d4:	681b      	ldr	r3, [r3, #0]
2400f2d6:	681a      	ldr	r2, [r3, #0]
2400f2d8:	687b      	ldr	r3, [r7, #4]
2400f2da:	681b      	ldr	r3, [r3, #0]
2400f2dc:	f042 0201 	orr.w	r2, r2, #1
2400f2e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f2e2:	687b      	ldr	r3, [r7, #4]
2400f2e4:	2220      	movs	r2, #32
2400f2e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f2ea:	687b      	ldr	r3, [r7, #4]
2400f2ec:	2200      	movs	r2, #0
2400f2ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f2f2:	2300      	movs	r3, #0
2400f2f4:	e000      	b.n	2400f2f8 <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2400f2f6:	2302      	movs	r3, #2
  }
}
2400f2f8:	4618      	mov	r0, r3
2400f2fa:	370c      	adds	r7, #12
2400f2fc:	46bd      	mov	sp, r7
2400f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f302:	4770      	bx	lr

2400f304 <HAL_I2CEx_DisableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
2400f304:	b480      	push	{r7}
2400f306:	b083      	sub	sp, #12
2400f308:	af00      	add	r7, sp, #0
2400f30a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400f30c:	687b      	ldr	r3, [r7, #4]
2400f30e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2400f312:	b2db      	uxtb	r3, r3
2400f314:	2b20      	cmp	r3, #32
2400f316:	d130      	bne.n	2400f37a <HAL_I2CEx_DisableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400f318:	687b      	ldr	r3, [r7, #4]
2400f31a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400f31e:	2b01      	cmp	r3, #1
2400f320:	d101      	bne.n	2400f326 <HAL_I2CEx_DisableWakeUp+0x22>
2400f322:	2302      	movs	r3, #2
2400f324:	e02a      	b.n	2400f37c <HAL_I2CEx_DisableWakeUp+0x78>
2400f326:	687b      	ldr	r3, [r7, #4]
2400f328:	2201      	movs	r2, #1
2400f32a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400f32e:	687b      	ldr	r3, [r7, #4]
2400f330:	2224      	movs	r2, #36	; 0x24
2400f332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400f336:	687b      	ldr	r3, [r7, #4]
2400f338:	681b      	ldr	r3, [r3, #0]
2400f33a:	681a      	ldr	r2, [r3, #0]
2400f33c:	687b      	ldr	r3, [r7, #4]
2400f33e:	681b      	ldr	r3, [r3, #0]
2400f340:	f022 0201 	bic.w	r2, r2, #1
2400f344:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
2400f346:	687b      	ldr	r3, [r7, #4]
2400f348:	681b      	ldr	r3, [r3, #0]
2400f34a:	681a      	ldr	r2, [r3, #0]
2400f34c:	687b      	ldr	r3, [r7, #4]
2400f34e:	681b      	ldr	r3, [r3, #0]
2400f350:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2400f354:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2400f356:	687b      	ldr	r3, [r7, #4]
2400f358:	681b      	ldr	r3, [r3, #0]
2400f35a:	681a      	ldr	r2, [r3, #0]
2400f35c:	687b      	ldr	r3, [r7, #4]
2400f35e:	681b      	ldr	r3, [r3, #0]
2400f360:	f042 0201 	orr.w	r2, r2, #1
2400f364:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2400f366:	687b      	ldr	r3, [r7, #4]
2400f368:	2220      	movs	r2, #32
2400f36a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f36e:	687b      	ldr	r3, [r7, #4]
2400f370:	2200      	movs	r2, #0
2400f372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2400f376:	2300      	movs	r3, #0
2400f378:	e000      	b.n	2400f37c <HAL_I2CEx_DisableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2400f37a:	2302      	movs	r3, #2
  }
}
2400f37c:	4618      	mov	r0, r3
2400f37e:	370c      	adds	r7, #12
2400f380:	46bd      	mov	sp, r7
2400f382:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f386:	4770      	bx	lr

2400f388 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
2400f388:	b480      	push	{r7}
2400f38a:	b085      	sub	sp, #20
2400f38c:	af00      	add	r7, sp, #0
2400f38e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400f390:	4b0d      	ldr	r3, [pc, #52]	; (2400f3c8 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400f392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400f396:	4a0c      	ldr	r2, [pc, #48]	; (2400f3c8 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400f398:	f043 0302 	orr.w	r3, r3, #2
2400f39c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400f3a0:	4b09      	ldr	r3, [pc, #36]	; (2400f3c8 <HAL_I2CEx_EnableFastModePlus+0x40>)
2400f3a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400f3a6:	f003 0302 	and.w	r3, r3, #2
2400f3aa:	60fb      	str	r3, [r7, #12]
2400f3ac:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2400f3ae:	4b07      	ldr	r3, [pc, #28]	; (2400f3cc <HAL_I2CEx_EnableFastModePlus+0x44>)
2400f3b0:	685a      	ldr	r2, [r3, #4]
2400f3b2:	4906      	ldr	r1, [pc, #24]	; (2400f3cc <HAL_I2CEx_EnableFastModePlus+0x44>)
2400f3b4:	687b      	ldr	r3, [r7, #4]
2400f3b6:	4313      	orrs	r3, r2
2400f3b8:	604b      	str	r3, [r1, #4]
}
2400f3ba:	bf00      	nop
2400f3bc:	3714      	adds	r7, #20
2400f3be:	46bd      	mov	sp, r7
2400f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f3c4:	4770      	bx	lr
2400f3c6:	bf00      	nop
2400f3c8:	58024400 	.word	0x58024400
2400f3cc:	58000400 	.word	0x58000400

2400f3d0 <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
2400f3d0:	b480      	push	{r7}
2400f3d2:	b085      	sub	sp, #20
2400f3d4:	af00      	add	r7, sp, #0
2400f3d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400f3d8:	4b0d      	ldr	r3, [pc, #52]	; (2400f410 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400f3da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400f3de:	4a0c      	ldr	r2, [pc, #48]	; (2400f410 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400f3e0:	f043 0302 	orr.w	r3, r3, #2
2400f3e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
2400f3e8:	4b09      	ldr	r3, [pc, #36]	; (2400f410 <HAL_I2CEx_DisableFastModePlus+0x40>)
2400f3ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400f3ee:	f003 0302 	and.w	r3, r3, #2
2400f3f2:	60fb      	str	r3, [r7, #12]
2400f3f4:	68fb      	ldr	r3, [r7, #12]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2400f3f6:	4b07      	ldr	r3, [pc, #28]	; (2400f414 <HAL_I2CEx_DisableFastModePlus+0x44>)
2400f3f8:	685a      	ldr	r2, [r3, #4]
2400f3fa:	687b      	ldr	r3, [r7, #4]
2400f3fc:	43db      	mvns	r3, r3
2400f3fe:	4905      	ldr	r1, [pc, #20]	; (2400f414 <HAL_I2CEx_DisableFastModePlus+0x44>)
2400f400:	4013      	ands	r3, r2
2400f402:	604b      	str	r3, [r1, #4]
}
2400f404:	bf00      	nop
2400f406:	3714      	adds	r7, #20
2400f408:	46bd      	mov	sp, r7
2400f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f40e:	4770      	bx	lr
2400f410:	58024400 	.word	0x58024400
2400f414:	58000400 	.word	0x58000400

2400f418 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
2400f418:	b580      	push	{r7, lr}
2400f41a:	b084      	sub	sp, #16
2400f41c:	af00      	add	r7, sp, #0
2400f41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2400f420:	f7f2 feec 	bl	240021fc <HAL_GetTick>
2400f424:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f426:	687b      	ldr	r3, [r7, #4]
2400f428:	2b00      	cmp	r3, #0
2400f42a:	d101      	bne.n	2400f430 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
2400f42c:	2301      	movs	r3, #1
2400f42e:	e03b      	b.n	2400f4a8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
2400f430:	687b      	ldr	r3, [r7, #4]
2400f432:	2200      	movs	r2, #0
2400f434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
2400f438:	687b      	ldr	r3, [r7, #4]
2400f43a:	2202      	movs	r2, #2
2400f43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
2400f440:	687b      	ldr	r3, [r7, #4]
2400f442:	681b      	ldr	r3, [r3, #0]
2400f444:	68da      	ldr	r2, [r3, #12]
2400f446:	687b      	ldr	r3, [r7, #4]
2400f448:	681b      	ldr	r3, [r3, #0]
2400f44a:	f022 0201 	bic.w	r2, r2, #1
2400f44e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400f450:	e00f      	b.n	2400f472 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
2400f452:	f7f2 fed3 	bl	240021fc <HAL_GetTick>
2400f456:	4602      	mov	r2, r0
2400f458:	68fb      	ldr	r3, [r7, #12]
2400f45a:	1ad3      	subs	r3, r2, r3
2400f45c:	2b05      	cmp	r3, #5
2400f45e:	d908      	bls.n	2400f472 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
2400f460:	687b      	ldr	r3, [r7, #4]
2400f462:	2240      	movs	r2, #64	; 0x40
2400f464:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
2400f466:	687b      	ldr	r3, [r7, #4]
2400f468:	2203      	movs	r2, #3
2400f46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
2400f46e:	2301      	movs	r3, #1
2400f470:	e01a      	b.n	2400f4a8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400f472:	687b      	ldr	r3, [r7, #4]
2400f474:	681b      	ldr	r3, [r3, #0]
2400f476:	68db      	ldr	r3, [r3, #12]
2400f478:	f003 0301 	and.w	r3, r3, #1
2400f47c:	2b00      	cmp	r3, #0
2400f47e:	d1e8      	bne.n	2400f452 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
2400f480:	6878      	ldr	r0, [r7, #4]
2400f482:	f001 f899 	bl	240105b8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2400f486:	687b      	ldr	r3, [r7, #4]
2400f488:	2200      	movs	r2, #0
2400f48a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
2400f48c:	687b      	ldr	r3, [r7, #4]
2400f48e:	2200      	movs	r2, #0
2400f490:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
2400f492:	687b      	ldr	r3, [r7, #4]
2400f494:	2200      	movs	r2, #0
2400f496:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400f498:	687b      	ldr	r3, [r7, #4]
2400f49a:	2200      	movs	r2, #0
2400f49c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
2400f49e:	687b      	ldr	r3, [r7, #4]
2400f4a0:	2201      	movs	r2, #1
2400f4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
2400f4a6:	2300      	movs	r3, #0
}
2400f4a8:	4618      	mov	r0, r3
2400f4aa:	3710      	adds	r7, #16
2400f4ac:	46bd      	mov	sp, r7
2400f4ae:	bd80      	pop	{r7, pc}

2400f4b0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
2400f4b0:	b480      	push	{r7}
2400f4b2:	b083      	sub	sp, #12
2400f4b4:	af00      	add	r7, sp, #0
2400f4b6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f4b8:	687b      	ldr	r3, [r7, #4]
2400f4ba:	2b00      	cmp	r3, #0
2400f4bc:	d101      	bne.n	2400f4c2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
2400f4be:	2301      	movs	r3, #1
2400f4c0:	e048      	b.n	2400f554 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
2400f4c2:	687b      	ldr	r3, [r7, #4]
2400f4c4:	681b      	ldr	r3, [r3, #0]
2400f4c6:	68da      	ldr	r2, [r3, #12]
2400f4c8:	687b      	ldr	r3, [r7, #4]
2400f4ca:	681b      	ldr	r3, [r3, #0]
2400f4cc:	f022 0201 	bic.w	r2, r2, #1
2400f4d0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
2400f4d2:	687b      	ldr	r3, [r7, #4]
2400f4d4:	681b      	ldr	r3, [r3, #0]
2400f4d6:	2200      	movs	r2, #0
2400f4d8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
2400f4da:	687b      	ldr	r3, [r7, #4]
2400f4dc:	681b      	ldr	r3, [r3, #0]
2400f4de:	2200      	movs	r2, #0
2400f4e0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
2400f4e2:	687b      	ldr	r3, [r7, #4]
2400f4e4:	681b      	ldr	r3, [r3, #0]
2400f4e6:	2200      	movs	r2, #0
2400f4e8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
2400f4ea:	687b      	ldr	r3, [r7, #4]
2400f4ec:	681b      	ldr	r3, [r3, #0]
2400f4ee:	2200      	movs	r2, #0
2400f4f0:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
2400f4f2:	687b      	ldr	r3, [r7, #4]
2400f4f4:	681b      	ldr	r3, [r3, #0]
2400f4f6:	2200      	movs	r2, #0
2400f4f8:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
2400f4fa:	687b      	ldr	r3, [r7, #4]
2400f4fc:	681b      	ldr	r3, [r3, #0]
2400f4fe:	2200      	movs	r2, #0
2400f500:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
2400f502:	687b      	ldr	r3, [r7, #4]
2400f504:	681b      	ldr	r3, [r3, #0]
2400f506:	2200      	movs	r2, #0
2400f508:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
2400f50a:	687b      	ldr	r3, [r7, #4]
2400f50c:	681b      	ldr	r3, [r3, #0]
2400f50e:	2200      	movs	r2, #0
2400f510:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
2400f512:	687b      	ldr	r3, [r7, #4]
2400f514:	681b      	ldr	r3, [r3, #0]
2400f516:	2200      	movs	r2, #0
2400f518:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
2400f51a:	687b      	ldr	r3, [r7, #4]
2400f51c:	681b      	ldr	r3, [r3, #0]
2400f51e:	2200      	movs	r2, #0
2400f520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
2400f522:	687b      	ldr	r3, [r7, #4]
2400f524:	681b      	ldr	r3, [r3, #0]
2400f526:	221f      	movs	r2, #31
2400f528:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2400f52a:	687b      	ldr	r3, [r7, #4]
2400f52c:	2200      	movs	r2, #0
2400f52e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
2400f530:	687b      	ldr	r3, [r7, #4]
2400f532:	2200      	movs	r2, #0
2400f534:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
2400f536:	687b      	ldr	r3, [r7, #4]
2400f538:	2200      	movs	r2, #0
2400f53a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400f53c:	687b      	ldr	r3, [r7, #4]
2400f53e:	2200      	movs	r2, #0
2400f540:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
2400f542:	687b      	ldr	r3, [r7, #4]
2400f544:	2200      	movs	r2, #0
2400f546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400f54a:	687b      	ldr	r3, [r7, #4]
2400f54c:	2200      	movs	r2, #0
2400f54e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
2400f552:	2300      	movs	r3, #0
}
2400f554:	4618      	mov	r0, r3
2400f556:	370c      	adds	r7, #12
2400f558:	46bd      	mov	sp, r7
2400f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f55e:	4770      	bx	lr

2400f560 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
2400f560:	b480      	push	{r7}
2400f562:	b087      	sub	sp, #28
2400f564:	af00      	add	r7, sp, #0
2400f566:	60f8      	str	r0, [r7, #12]
2400f568:	60b9      	str	r1, [r7, #8]
2400f56a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
2400f56c:	2300      	movs	r3, #0
2400f56e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f570:	68fb      	ldr	r3, [r7, #12]
2400f572:	2b00      	cmp	r3, #0
2400f574:	d101      	bne.n	2400f57a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
2400f576:	2301      	movs	r3, #1
2400f578:	e03e      	b.n	2400f5f8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400f57a:	68fb      	ldr	r3, [r7, #12]
2400f57c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400f580:	2b01      	cmp	r3, #1
2400f582:	d101      	bne.n	2400f588 <HAL_MDMA_ConfigPostRequestMask+0x28>
2400f584:	2302      	movs	r3, #2
2400f586:	e037      	b.n	2400f5f8 <HAL_MDMA_ConfigPostRequestMask+0x98>
2400f588:	68fb      	ldr	r3, [r7, #12]
2400f58a:	2201      	movs	r2, #1
2400f58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400f590:	68fb      	ldr	r3, [r7, #12]
2400f592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400f596:	b2db      	uxtb	r3, r3
2400f598:	2b01      	cmp	r3, #1
2400f59a:	d126      	bne.n	2400f5ea <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
2400f59c:	68fb      	ldr	r3, [r7, #12]
2400f59e:	681b      	ldr	r3, [r3, #0]
2400f5a0:	691b      	ldr	r3, [r3, #16]
2400f5a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
2400f5a6:	2b00      	cmp	r3, #0
2400f5a8:	d11c      	bne.n	2400f5e4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
2400f5aa:	68fb      	ldr	r3, [r7, #12]
2400f5ac:	681b      	ldr	r3, [r3, #0]
2400f5ae:	68ba      	ldr	r2, [r7, #8]
2400f5b0:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
2400f5b2:	68fb      	ldr	r3, [r7, #12]
2400f5b4:	681b      	ldr	r3, [r3, #0]
2400f5b6:	687a      	ldr	r2, [r7, #4]
2400f5b8:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
2400f5ba:	68bb      	ldr	r3, [r7, #8]
2400f5bc:	2b00      	cmp	r3, #0
2400f5be:	d108      	bne.n	2400f5d2 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
2400f5c0:	68fb      	ldr	r3, [r7, #12]
2400f5c2:	681b      	ldr	r3, [r3, #0]
2400f5c4:	691a      	ldr	r2, [r3, #16]
2400f5c6:	68fb      	ldr	r3, [r7, #12]
2400f5c8:	681b      	ldr	r3, [r3, #0]
2400f5ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2400f5ce:	611a      	str	r2, [r3, #16]
2400f5d0:	e00d      	b.n	2400f5ee <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
2400f5d2:	68fb      	ldr	r3, [r7, #12]
2400f5d4:	681b      	ldr	r3, [r3, #0]
2400f5d6:	691a      	ldr	r2, [r3, #16]
2400f5d8:	68fb      	ldr	r3, [r7, #12]
2400f5da:	681b      	ldr	r3, [r3, #0]
2400f5dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
2400f5e0:	611a      	str	r2, [r3, #16]
2400f5e2:	e004      	b.n	2400f5ee <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
2400f5e4:	2301      	movs	r3, #1
2400f5e6:	75fb      	strb	r3, [r7, #23]
2400f5e8:	e001      	b.n	2400f5ee <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2400f5ea:	2301      	movs	r3, #1
2400f5ec:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400f5ee:	68fb      	ldr	r3, [r7, #12]
2400f5f0:	2200      	movs	r2, #0
2400f5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400f5f6:	7dfb      	ldrb	r3, [r7, #23]
}
2400f5f8:	4618      	mov	r0, r3
2400f5fa:	371c      	adds	r7, #28
2400f5fc:	46bd      	mov	sp, r7
2400f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f602:	4770      	bx	lr

2400f604 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
2400f604:	b480      	push	{r7}
2400f606:	b087      	sub	sp, #28
2400f608:	af00      	add	r7, sp, #0
2400f60a:	60f8      	str	r0, [r7, #12]
2400f60c:	460b      	mov	r3, r1
2400f60e:	607a      	str	r2, [r7, #4]
2400f610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2400f612:	2300      	movs	r3, #0
2400f614:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f616:	68fb      	ldr	r3, [r7, #12]
2400f618:	2b00      	cmp	r3, #0
2400f61a:	d101      	bne.n	2400f620 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
2400f61c:	2301      	movs	r3, #1
2400f61e:	e044      	b.n	2400f6aa <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400f620:	68fb      	ldr	r3, [r7, #12]
2400f622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400f626:	2b01      	cmp	r3, #1
2400f628:	d101      	bne.n	2400f62e <HAL_MDMA_RegisterCallback+0x2a>
2400f62a:	2302      	movs	r3, #2
2400f62c:	e03d      	b.n	2400f6aa <HAL_MDMA_RegisterCallback+0xa6>
2400f62e:	68fb      	ldr	r3, [r7, #12]
2400f630:	2201      	movs	r2, #1
2400f632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400f636:	68fb      	ldr	r3, [r7, #12]
2400f638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400f63c:	b2db      	uxtb	r3, r3
2400f63e:	2b01      	cmp	r3, #1
2400f640:	d12a      	bne.n	2400f698 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
2400f642:	7afb      	ldrb	r3, [r7, #11]
2400f644:	2b05      	cmp	r3, #5
2400f646:	d82a      	bhi.n	2400f69e <HAL_MDMA_RegisterCallback+0x9a>
2400f648:	a201      	add	r2, pc, #4	; (adr r2, 2400f650 <HAL_MDMA_RegisterCallback+0x4c>)
2400f64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400f64e:	bf00      	nop
2400f650:	2400f669 	.word	0x2400f669
2400f654:	2400f671 	.word	0x2400f671
2400f658:	2400f679 	.word	0x2400f679
2400f65c:	2400f681 	.word	0x2400f681
2400f660:	2400f689 	.word	0x2400f689
2400f664:	2400f691 	.word	0x2400f691
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
2400f668:	68fb      	ldr	r3, [r7, #12]
2400f66a:	687a      	ldr	r2, [r7, #4]
2400f66c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2400f66e:	e017      	b.n	2400f6a0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
2400f670:	68fb      	ldr	r3, [r7, #12]
2400f672:	687a      	ldr	r2, [r7, #4]
2400f674:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2400f676:	e013      	b.n	2400f6a0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
2400f678:	68fb      	ldr	r3, [r7, #12]
2400f67a:	687a      	ldr	r2, [r7, #4]
2400f67c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2400f67e:	e00f      	b.n	2400f6a0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
2400f680:	68fb      	ldr	r3, [r7, #12]
2400f682:	687a      	ldr	r2, [r7, #4]
2400f684:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2400f686:	e00b      	b.n	2400f6a0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
2400f688:	68fb      	ldr	r3, [r7, #12]
2400f68a:	687a      	ldr	r2, [r7, #4]
2400f68c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2400f68e:	e007      	b.n	2400f6a0 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
2400f690:	68fb      	ldr	r3, [r7, #12]
2400f692:	687a      	ldr	r2, [r7, #4]
2400f694:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400f696:	e003      	b.n	2400f6a0 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
2400f698:	2301      	movs	r3, #1
2400f69a:	75fb      	strb	r3, [r7, #23]
2400f69c:	e000      	b.n	2400f6a0 <HAL_MDMA_RegisterCallback+0x9c>
      break;
2400f69e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400f6a0:	68fb      	ldr	r3, [r7, #12]
2400f6a2:	2200      	movs	r2, #0
2400f6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400f6a8:	7dfb      	ldrb	r3, [r7, #23]
}
2400f6aa:	4618      	mov	r0, r3
2400f6ac:	371c      	adds	r7, #28
2400f6ae:	46bd      	mov	sp, r7
2400f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f6b4:	4770      	bx	lr
2400f6b6:	bf00      	nop

2400f6b8 <HAL_MDMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_MDMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID)
{
2400f6b8:	b480      	push	{r7}
2400f6ba:	b085      	sub	sp, #20
2400f6bc:	af00      	add	r7, sp, #0
2400f6be:	6078      	str	r0, [r7, #4]
2400f6c0:	460b      	mov	r3, r1
2400f6c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
2400f6c4:	2300      	movs	r3, #0
2400f6c6:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400f6c8:	687b      	ldr	r3, [r7, #4]
2400f6ca:	2b00      	cmp	r3, #0
2400f6cc:	d101      	bne.n	2400f6d2 <HAL_MDMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
2400f6ce:	2301      	movs	r3, #1
2400f6d0:	e059      	b.n	2400f786 <HAL_MDMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400f6d2:	687b      	ldr	r3, [r7, #4]
2400f6d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400f6d8:	2b01      	cmp	r3, #1
2400f6da:	d101      	bne.n	2400f6e0 <HAL_MDMA_UnRegisterCallback+0x28>
2400f6dc:	2302      	movs	r3, #2
2400f6de:	e052      	b.n	2400f786 <HAL_MDMA_UnRegisterCallback+0xce>
2400f6e0:	687b      	ldr	r3, [r7, #4]
2400f6e2:	2201      	movs	r2, #1
2400f6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400f6e8:	687b      	ldr	r3, [r7, #4]
2400f6ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400f6ee:	b2db      	uxtb	r3, r3
2400f6f0:	2b01      	cmp	r3, #1
2400f6f2:	d141      	bne.n	2400f778 <HAL_MDMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
2400f6f4:	78fb      	ldrb	r3, [r7, #3]
2400f6f6:	2b06      	cmp	r3, #6
2400f6f8:	d83b      	bhi.n	2400f772 <HAL_MDMA_UnRegisterCallback+0xba>
2400f6fa:	a201      	add	r2, pc, #4	; (adr r2, 2400f700 <HAL_MDMA_UnRegisterCallback+0x48>)
2400f6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400f700:	2400f71d 	.word	0x2400f71d
2400f704:	2400f725 	.word	0x2400f725
2400f708:	2400f72d 	.word	0x2400f72d
2400f70c:	2400f735 	.word	0x2400f735
2400f710:	2400f73d 	.word	0x2400f73d
2400f714:	2400f745 	.word	0x2400f745
2400f718:	2400f74d 	.word	0x2400f74d
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = NULL;
2400f71c:	687b      	ldr	r3, [r7, #4]
2400f71e:	2200      	movs	r2, #0
2400f720:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2400f722:	e02b      	b.n	2400f77c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = NULL;
2400f724:	687b      	ldr	r3, [r7, #4]
2400f726:	2200      	movs	r2, #0
2400f728:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2400f72a:	e027      	b.n	2400f77c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = NULL;
2400f72c:	687b      	ldr	r3, [r7, #4]
2400f72e:	2200      	movs	r2, #0
2400f730:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2400f732:	e023      	b.n	2400f77c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = NULL;
2400f734:	687b      	ldr	r3, [r7, #4]
2400f736:	2200      	movs	r2, #0
2400f738:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2400f73a:	e01f      	b.n	2400f77c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = NULL;
2400f73c:	687b      	ldr	r3, [r7, #4]
2400f73e:	2200      	movs	r2, #0
2400f740:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2400f742:	e01b      	b.n	2400f77c <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = NULL;
2400f744:	687b      	ldr	r3, [r7, #4]
2400f746:	2200      	movs	r2, #0
2400f748:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400f74a:	e017      	b.n	2400f77c <HAL_MDMA_UnRegisterCallback+0xc4>

    case   HAL_MDMA_XFER_ALL_CB_ID:
      hmdma->XferCpltCallback = NULL;
2400f74c:	687b      	ldr	r3, [r7, #4]
2400f74e:	2200      	movs	r2, #0
2400f750:	645a      	str	r2, [r3, #68]	; 0x44
      hmdma->XferBufferCpltCallback = NULL;
2400f752:	687b      	ldr	r3, [r7, #4]
2400f754:	2200      	movs	r2, #0
2400f756:	649a      	str	r2, [r3, #72]	; 0x48
      hmdma->XferBlockCpltCallback = NULL;
2400f758:	687b      	ldr	r3, [r7, #4]
2400f75a:	2200      	movs	r2, #0
2400f75c:	64da      	str	r2, [r3, #76]	; 0x4c
      hmdma->XferRepeatBlockCpltCallback = NULL;
2400f75e:	687b      	ldr	r3, [r7, #4]
2400f760:	2200      	movs	r2, #0
2400f762:	651a      	str	r2, [r3, #80]	; 0x50
      hmdma->XferErrorCallback = NULL;
2400f764:	687b      	ldr	r3, [r7, #4]
2400f766:	2200      	movs	r2, #0
2400f768:	655a      	str	r2, [r3, #84]	; 0x54
      hmdma->XferAbortCallback = NULL;
2400f76a:	687b      	ldr	r3, [r7, #4]
2400f76c:	2200      	movs	r2, #0
2400f76e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
2400f770:	e004      	b.n	2400f77c <HAL_MDMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
2400f772:	2301      	movs	r3, #1
2400f774:	73fb      	strb	r3, [r7, #15]
      break;
2400f776:	e001      	b.n	2400f77c <HAL_MDMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
2400f778:	2301      	movs	r3, #1
2400f77a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
2400f77c:	687b      	ldr	r3, [r7, #4]
2400f77e:	2200      	movs	r2, #0
2400f780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400f784:	7bfb      	ldrb	r3, [r7, #15]
}
2400f786:	4618      	mov	r0, r3
2400f788:	3714      	adds	r7, #20
2400f78a:	46bd      	mov	sp, r7
2400f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f790:	4770      	bx	lr
2400f792:	bf00      	nop

2400f794 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
2400f794:	b480      	push	{r7}
2400f796:	b085      	sub	sp, #20
2400f798:	af00      	add	r7, sp, #0
2400f79a:	6078      	str	r0, [r7, #4]
2400f79c:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
2400f79e:	687b      	ldr	r3, [r7, #4]
2400f7a0:	2b00      	cmp	r3, #0
2400f7a2:	d002      	beq.n	2400f7aa <HAL_MDMA_LinkedList_CreateNode+0x16>
2400f7a4:	683b      	ldr	r3, [r7, #0]
2400f7a6:	2b00      	cmp	r3, #0
2400f7a8:	d101      	bne.n	2400f7ae <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
2400f7aa:	2301      	movs	r3, #1
2400f7ac:	e0c8      	b.n	2400f940 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
2400f7ae:	687b      	ldr	r3, [r7, #4]
2400f7b0:	2200      	movs	r2, #0
2400f7b2:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
2400f7b4:	687b      	ldr	r3, [r7, #4]
2400f7b6:	2200      	movs	r2, #0
2400f7b8:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
2400f7ba:	687b      	ldr	r3, [r7, #4]
2400f7bc:	2200      	movs	r2, #0
2400f7be:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
2400f7c0:	687b      	ldr	r3, [r7, #4]
2400f7c2:	2200      	movs	r2, #0
2400f7c4:	625a      	str	r2, [r3, #36]	; 0x24
  pNode->Reserved = 0;
2400f7c6:	687b      	ldr	r3, [r7, #4]
2400f7c8:	2200      	movs	r2, #0
2400f7ca:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400f7cc:	683b      	ldr	r3, [r7, #0]
2400f7ce:	691a      	ldr	r2, [r3, #16]
2400f7d0:	683b      	ldr	r3, [r7, #0]
2400f7d2:	695b      	ldr	r3, [r3, #20]
2400f7d4:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400f7d6:	683b      	ldr	r3, [r7, #0]
2400f7d8:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400f7da:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400f7dc:	683b      	ldr	r3, [r7, #0]
2400f7de:	69db      	ldr	r3, [r3, #28]
2400f7e0:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400f7e2:	683b      	ldr	r3, [r7, #0]
2400f7e4:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
2400f7e6:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400f7e8:	683b      	ldr	r3, [r7, #0]
2400f7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400f7ec:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
2400f7ee:	683b      	ldr	r3, [r7, #0]
2400f7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
2400f7f2:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2400f7f4:	683b      	ldr	r3, [r7, #0]
2400f7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400f7f8:	3b01      	subs	r3, #1
2400f7fa:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
2400f7fc:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
2400f7fe:	683b      	ldr	r3, [r7, #0]
2400f800:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2400f802:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
2400f804:	687b      	ldr	r3, [r7, #4]
2400f806:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
2400f808:	683b      	ldr	r3, [r7, #0]
2400f80a:	681b      	ldr	r3, [r3, #0]
2400f80c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400f810:	d105      	bne.n	2400f81e <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
2400f812:	687b      	ldr	r3, [r7, #4]
2400f814:	681b      	ldr	r3, [r3, #0]
2400f816:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
2400f81a:	687b      	ldr	r3, [r7, #4]
2400f81c:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
2400f81e:	683b      	ldr	r3, [r7, #0]
2400f820:	681b      	ldr	r3, [r3, #0]
2400f822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400f826:	d003      	beq.n	2400f830 <HAL_MDMA_LinkedList_CreateNode+0x9c>
2400f828:	683b      	ldr	r3, [r7, #0]
2400f82a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400f82c:	2b00      	cmp	r3, #0
2400f82e:	d005      	beq.n	2400f83c <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
2400f830:	687b      	ldr	r3, [r7, #4]
2400f832:	681b      	ldr	r3, [r3, #0]
2400f834:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
2400f838:	687b      	ldr	r3, [r7, #4]
2400f83a:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
2400f83c:	683b      	ldr	r3, [r7, #0]
2400f83e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400f840:	3b01      	subs	r3, #1
2400f842:	051a      	lsls	r2, r3, #20
2400f844:	687b      	ldr	r3, [r7, #4]
2400f846:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
2400f848:	683b      	ldr	r3, [r7, #0]
2400f84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400f84c:	2b00      	cmp	r3, #0
2400f84e:	da0e      	bge.n	2400f86e <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
2400f850:	687b      	ldr	r3, [r7, #4]
2400f852:	685b      	ldr	r3, [r3, #4]
2400f854:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
2400f858:	687b      	ldr	r3, [r7, #4]
2400f85a:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
2400f85c:	683b      	ldr	r3, [r7, #0]
2400f85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400f860:	425b      	negs	r3, r3
2400f862:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
2400f864:	68fb      	ldr	r3, [r7, #12]
2400f866:	b29a      	uxth	r2, r3
2400f868:	687b      	ldr	r3, [r7, #4]
2400f86a:	611a      	str	r2, [r3, #16]
2400f86c:	e004      	b.n	2400f878 <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
2400f86e:	683b      	ldr	r3, [r7, #0]
2400f870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400f872:	b29a      	uxth	r2, r3
2400f874:	687b      	ldr	r3, [r7, #4]
2400f876:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
2400f878:	683b      	ldr	r3, [r7, #0]
2400f87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400f87c:	2b00      	cmp	r3, #0
2400f87e:	da11      	bge.n	2400f8a4 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
2400f880:	687b      	ldr	r3, [r7, #4]
2400f882:	685b      	ldr	r3, [r3, #4]
2400f884:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
2400f888:	687b      	ldr	r3, [r7, #4]
2400f88a:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
2400f88c:	683b      	ldr	r3, [r7, #0]
2400f88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400f890:	425b      	negs	r3, r3
2400f892:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
2400f894:	687b      	ldr	r3, [r7, #4]
2400f896:	691a      	ldr	r2, [r3, #16]
2400f898:	68fb      	ldr	r3, [r7, #12]
2400f89a:	041b      	lsls	r3, r3, #16
2400f89c:	431a      	orrs	r2, r3
2400f89e:	687b      	ldr	r3, [r7, #4]
2400f8a0:	611a      	str	r2, [r3, #16]
2400f8a2:	e007      	b.n	2400f8b4 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
2400f8a4:	687b      	ldr	r3, [r7, #4]
2400f8a6:	691a      	ldr	r2, [r3, #16]
2400f8a8:	683b      	ldr	r3, [r7, #0]
2400f8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400f8ac:	041b      	lsls	r3, r3, #16
2400f8ae:	431a      	orrs	r2, r3
2400f8b0:	687b      	ldr	r3, [r7, #4]
2400f8b2:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
2400f8b4:	687b      	ldr	r3, [r7, #4]
2400f8b6:	685a      	ldr	r2, [r3, #4]
2400f8b8:	683b      	ldr	r3, [r7, #0]
2400f8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400f8bc:	431a      	orrs	r2, r3
2400f8be:	687b      	ldr	r3, [r7, #4]
2400f8c0:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
2400f8c2:	683b      	ldr	r3, [r7, #0]
2400f8c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400f8c6:	687b      	ldr	r3, [r7, #4]
2400f8c8:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
2400f8ca:	683b      	ldr	r3, [r7, #0]
2400f8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400f8ce:	687b      	ldr	r3, [r7, #4]
2400f8d0:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
2400f8d2:	683b      	ldr	r3, [r7, #0]
2400f8d4:	681b      	ldr	r3, [r3, #0]
2400f8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400f8da:	d00c      	beq.n	2400f8f6 <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
2400f8dc:	683b      	ldr	r3, [r7, #0]
2400f8de:	681b      	ldr	r3, [r3, #0]
2400f8e0:	b2da      	uxtb	r2, r3
2400f8e2:	687b      	ldr	r3, [r7, #4]
2400f8e4:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
2400f8e6:	683b      	ldr	r3, [r7, #0]
2400f8e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400f8ea:	687b      	ldr	r3, [r7, #4]
2400f8ec:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
2400f8ee:	683b      	ldr	r3, [r7, #0]
2400f8f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400f8f2:	687b      	ldr	r3, [r7, #4]
2400f8f4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
2400f8f6:	683b      	ldr	r3, [r7, #0]
2400f8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2400f8fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
2400f8fe:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
2400f900:	68bb      	ldr	r3, [r7, #8]
2400f902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400f906:	d002      	beq.n	2400f90e <HAL_MDMA_LinkedList_CreateNode+0x17a>
2400f908:	68bb      	ldr	r3, [r7, #8]
2400f90a:	2b00      	cmp	r3, #0
2400f90c:	d105      	bne.n	2400f91a <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
2400f90e:	687b      	ldr	r3, [r7, #4]
2400f910:	699b      	ldr	r3, [r3, #24]
2400f912:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2400f916:	687b      	ldr	r3, [r7, #4]
2400f918:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
2400f91a:	683b      	ldr	r3, [r7, #0]
2400f91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400f91e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
2400f922:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
2400f924:	68bb      	ldr	r3, [r7, #8]
2400f926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400f92a:	d002      	beq.n	2400f932 <HAL_MDMA_LinkedList_CreateNode+0x19e>
2400f92c:	68bb      	ldr	r3, [r7, #8]
2400f92e:	2b00      	cmp	r3, #0
2400f930:	d105      	bne.n	2400f93e <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
2400f932:	687b      	ldr	r3, [r7, #4]
2400f934:	699b      	ldr	r3, [r3, #24]
2400f936:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
2400f93a:	687b      	ldr	r3, [r7, #4]
2400f93c:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
2400f93e:	2300      	movs	r3, #0
}
2400f940:	4618      	mov	r0, r3
2400f942:	3714      	adds	r7, #20
2400f944:	46bd      	mov	sp, r7
2400f946:	f85d 7b04 	ldr.w	r7, [sp], #4
2400f94a:	4770      	bx	lr

2400f94c <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, MDMA_LinkNodeTypeDef *pPrevNode)
{
2400f94c:	b480      	push	{r7}
2400f94e:	b089      	sub	sp, #36	; 0x24
2400f950:	af00      	add	r7, sp, #0
2400f952:	60f8      	str	r0, [r7, #12]
2400f954:	60b9      	str	r1, [r7, #8]
2400f956:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
2400f958:	2300      	movs	r3, #0
2400f95a:	61bb      	str	r3, [r7, #24]
2400f95c:	2300      	movs	r3, #0
2400f95e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
2400f960:	2300      	movs	r3, #0
2400f962:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
2400f964:	68fb      	ldr	r3, [r7, #12]
2400f966:	2b00      	cmp	r3, #0
2400f968:	d002      	beq.n	2400f970 <HAL_MDMA_LinkedList_AddNode+0x24>
2400f96a:	68bb      	ldr	r3, [r7, #8]
2400f96c:	2b00      	cmp	r3, #0
2400f96e:	d101      	bne.n	2400f974 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
2400f970:	2301      	movs	r3, #1
2400f972:	e0a9      	b.n	2400fac8 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400f974:	68fb      	ldr	r3, [r7, #12]
2400f976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400f97a:	2b01      	cmp	r3, #1
2400f97c:	d101      	bne.n	2400f982 <HAL_MDMA_LinkedList_AddNode+0x36>
2400f97e:	2302      	movs	r3, #2
2400f980:	e0a2      	b.n	2400fac8 <HAL_MDMA_LinkedList_AddNode+0x17c>
2400f982:	68fb      	ldr	r3, [r7, #12]
2400f984:	2201      	movs	r2, #1
2400f986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400f98a:	68fb      	ldr	r3, [r7, #12]
2400f98c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400f990:	b2db      	uxtb	r3, r3
2400f992:	2b01      	cmp	r3, #1
2400f994:	f040 8093 	bne.w	2400fabe <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400f998:	68fb      	ldr	r3, [r7, #12]
2400f99a:	2202      	movs	r2, #2
2400f99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
2400f9a0:	68fb      	ldr	r3, [r7, #12]
2400f9a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400f9a4:	2b00      	cmp	r3, #0
2400f9a6:	d116      	bne.n	2400f9d6 <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
2400f9a8:	687b      	ldr	r3, [r7, #4]
2400f9aa:	2b00      	cmp	r3, #0
2400f9ac:	d110      	bne.n	2400f9d0 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
2400f9ae:	68fb      	ldr	r3, [r7, #12]
2400f9b0:	681b      	ldr	r3, [r3, #0]
2400f9b2:	68ba      	ldr	r2, [r7, #8]
2400f9b4:	625a      	str	r2, [r3, #36]	; 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
2400f9b6:	68fb      	ldr	r3, [r7, #12]
2400f9b8:	68ba      	ldr	r2, [r7, #8]
2400f9ba:	65da      	str	r2, [r3, #92]	; 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
2400f9bc:	68bb      	ldr	r3, [r7, #8]
2400f9be:	2200      	movs	r2, #0
2400f9c0:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
2400f9c2:	68fb      	ldr	r3, [r7, #12]
2400f9c4:	68ba      	ldr	r2, [r7, #8]
2400f9c6:	661a      	str	r2, [r3, #96]	; 0x60

        hmdma->LinkedListNodeCounter = 1;
2400f9c8:	68fb      	ldr	r3, [r7, #12]
2400f9ca:	2201      	movs	r2, #1
2400f9cc:	665a      	str	r2, [r3, #100]	; 0x64
2400f9ce:	e06c      	b.n	2400faaa <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
2400f9d0:	2301      	movs	r3, #1
2400f9d2:	74fb      	strb	r3, [r7, #19]
2400f9d4:	e069      	b.n	2400faaa <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
2400f9d6:	68fb      	ldr	r3, [r7, #12]
2400f9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400f9da:	68ba      	ldr	r2, [r7, #8]
2400f9dc:	429a      	cmp	r2, r3
2400f9de:	d062      	beq.n	2400faa6 <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
2400f9e0:	68fb      	ldr	r3, [r7, #12]
2400f9e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400f9e4:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
2400f9e6:	e00c      	b.n	2400fa02 <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
2400f9e8:	69fb      	ldr	r3, [r7, #28]
2400f9ea:	695a      	ldr	r2, [r3, #20]
2400f9ec:	68bb      	ldr	r3, [r7, #8]
2400f9ee:	429a      	cmp	r2, r3
2400f9f0:	d101      	bne.n	2400f9f6 <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
2400f9f2:	2301      	movs	r3, #1
2400f9f4:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
2400f9f6:	69fb      	ldr	r3, [r7, #28]
2400f9f8:	695b      	ldr	r3, [r3, #20]
2400f9fa:	61fb      	str	r3, [r7, #28]
        counter++;
2400f9fc:	69bb      	ldr	r3, [r7, #24]
2400f9fe:	3301      	adds	r3, #1
2400fa00:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
2400fa02:	68fb      	ldr	r3, [r7, #12]
2400fa04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fa06:	69ba      	ldr	r2, [r7, #24]
2400fa08:	429a      	cmp	r2, r3
2400fa0a:	d202      	bcs.n	2400fa12 <HAL_MDMA_LinkedList_AddNode+0xc6>
2400fa0c:	7cfb      	ldrb	r3, [r7, #19]
2400fa0e:	2b00      	cmp	r3, #0
2400fa10:	d0ea      	beq.n	2400f9e8 <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
2400fa12:	7cfb      	ldrb	r3, [r7, #19]
2400fa14:	2b00      	cmp	r3, #0
2400fa16:	d148      	bne.n	2400faaa <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
2400fa18:	68fb      	ldr	r3, [r7, #12]
2400fa1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fa1c:	687a      	ldr	r2, [r7, #4]
2400fa1e:	429a      	cmp	r2, r3
2400fa20:	d002      	beq.n	2400fa28 <HAL_MDMA_LinkedList_AddNode+0xdc>
2400fa22:	687b      	ldr	r3, [r7, #4]
2400fa24:	2b00      	cmp	r3, #0
2400fa26:	d111      	bne.n	2400fa4c <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
2400fa28:	68fb      	ldr	r3, [r7, #12]
2400fa2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fa2c:	695a      	ldr	r2, [r3, #20]
2400fa2e:	68bb      	ldr	r3, [r7, #8]
2400fa30:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
2400fa32:	68fb      	ldr	r3, [r7, #12]
2400fa34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fa36:	68ba      	ldr	r2, [r7, #8]
2400fa38:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
2400fa3a:	68fb      	ldr	r3, [r7, #12]
2400fa3c:	68ba      	ldr	r2, [r7, #8]
2400fa3e:	661a      	str	r2, [r3, #96]	; 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
2400fa40:	68fb      	ldr	r3, [r7, #12]
2400fa42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fa44:	1c5a      	adds	r2, r3, #1
2400fa46:	68fb      	ldr	r3, [r7, #12]
2400fa48:	665a      	str	r2, [r3, #100]	; 0x64
2400fa4a:	e02e      	b.n	2400faaa <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
2400fa4c:	68fb      	ldr	r3, [r7, #12]
2400fa4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fa50:	61fb      	str	r3, [r7, #28]
          counter = 0;
2400fa52:	2300      	movs	r3, #0
2400fa54:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
2400fa56:	e018      	b.n	2400fa8a <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
2400fa58:	69bb      	ldr	r3, [r7, #24]
2400fa5a:	3301      	adds	r3, #1
2400fa5c:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
2400fa5e:	69fa      	ldr	r2, [r7, #28]
2400fa60:	687b      	ldr	r3, [r7, #4]
2400fa62:	429a      	cmp	r2, r3
2400fa64:	d10e      	bne.n	2400fa84 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
2400fa66:	69fb      	ldr	r3, [r7, #28]
2400fa68:	695a      	ldr	r2, [r3, #20]
2400fa6a:	68bb      	ldr	r3, [r7, #8]
2400fa6c:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
2400fa6e:	68ba      	ldr	r2, [r7, #8]
2400fa70:	69fb      	ldr	r3, [r7, #28]
2400fa72:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
2400fa74:	68fb      	ldr	r3, [r7, #12]
2400fa76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fa78:	1c5a      	adds	r2, r3, #1
2400fa7a:	68fb      	ldr	r3, [r7, #12]
2400fa7c:	665a      	str	r2, [r3, #100]	; 0x64
              nodeInserted = 1;
2400fa7e:	2301      	movs	r3, #1
2400fa80:	617b      	str	r3, [r7, #20]
2400fa82:	e002      	b.n	2400fa8a <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
2400fa84:	69fb      	ldr	r3, [r7, #28]
2400fa86:	695b      	ldr	r3, [r3, #20]
2400fa88:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
2400fa8a:	68fb      	ldr	r3, [r7, #12]
2400fa8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fa8e:	69ba      	ldr	r2, [r7, #24]
2400fa90:	429a      	cmp	r2, r3
2400fa92:	d202      	bcs.n	2400fa9a <HAL_MDMA_LinkedList_AddNode+0x14e>
2400fa94:	697b      	ldr	r3, [r7, #20]
2400fa96:	2b00      	cmp	r3, #0
2400fa98:	d0de      	beq.n	2400fa58 <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
2400fa9a:	697b      	ldr	r3, [r7, #20]
2400fa9c:	2b00      	cmp	r3, #0
2400fa9e:	d104      	bne.n	2400faaa <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
2400faa0:	2301      	movs	r3, #1
2400faa2:	74fb      	strb	r3, [r7, #19]
2400faa4:	e001      	b.n	2400faaa <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
2400faa6:	2301      	movs	r3, #1
2400faa8:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400faaa:	68fb      	ldr	r3, [r7, #12]
2400faac:	2200      	movs	r2, #0
2400faae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
2400fab2:	68fb      	ldr	r3, [r7, #12]
2400fab4:	2201      	movs	r2, #1
2400fab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
2400faba:	7cfb      	ldrb	r3, [r7, #19]
2400fabc:	e004      	b.n	2400fac8 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fabe:	68fb      	ldr	r3, [r7, #12]
2400fac0:	2200      	movs	r2, #0
2400fac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400fac6:	2302      	movs	r3, #2
  }
}
2400fac8:	4618      	mov	r0, r3
2400faca:	3724      	adds	r7, #36	; 0x24
2400facc:	46bd      	mov	sp, r7
2400face:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fad2:	4770      	bx	lr

2400fad4 <HAL_MDMA_LinkedList_RemoveNode>:
  *                 to be removed from the list.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNode)
{
2400fad4:	b480      	push	{r7}
2400fad6:	b087      	sub	sp, #28
2400fad8:	af00      	add	r7, sp, #0
2400fada:	6078      	str	r0, [r7, #4]
2400fadc:	6039      	str	r1, [r7, #0]
  MDMA_LinkNodeTypeDef *ptmpNode;
  uint32_t counter = 0, nodeDeleted = 0;
2400fade:	2300      	movs	r3, #0
2400fae0:	613b      	str	r3, [r7, #16]
2400fae2:	2300      	movs	r3, #0
2400fae4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
2400fae6:	2300      	movs	r3, #0
2400fae8:	72fb      	strb	r3, [r7, #11]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNode == NULL))
2400faea:	687b      	ldr	r3, [r7, #4]
2400faec:	2b00      	cmp	r3, #0
2400faee:	d002      	beq.n	2400faf6 <HAL_MDMA_LinkedList_RemoveNode+0x22>
2400faf0:	683b      	ldr	r3, [r7, #0]
2400faf2:	2b00      	cmp	r3, #0
2400faf4:	d101      	bne.n	2400fafa <HAL_MDMA_LinkedList_RemoveNode+0x26>
  {
    return HAL_ERROR;
2400faf6:	2301      	movs	r3, #1
2400faf8:	e099      	b.n	2400fc2e <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fafa:	687b      	ldr	r3, [r7, #4]
2400fafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fb00:	2b01      	cmp	r3, #1
2400fb02:	d101      	bne.n	2400fb08 <HAL_MDMA_LinkedList_RemoveNode+0x34>
2400fb04:	2302      	movs	r3, #2
2400fb06:	e092      	b.n	2400fc2e <HAL_MDMA_LinkedList_RemoveNode+0x15a>
2400fb08:	687b      	ldr	r3, [r7, #4]
2400fb0a:	2201      	movs	r2, #1
2400fb0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fb10:	687b      	ldr	r3, [r7, #4]
2400fb12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fb16:	b2db      	uxtb	r3, r3
2400fb18:	2b01      	cmp	r3, #1
2400fb1a:	f040 8083 	bne.w	2400fc24 <HAL_MDMA_LinkedList_RemoveNode+0x150>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fb1e:	687b      	ldr	r3, [r7, #4]
2400fb20:	2202      	movs	r2, #2
2400fb22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2400fb26:	687b      	ldr	r3, [r7, #4]
2400fb28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fb2a:	2b00      	cmp	r3, #0
2400fb2c:	d007      	beq.n	2400fb3e <HAL_MDMA_LinkedList_RemoveNode+0x6a>
2400fb2e:	687b      	ldr	r3, [r7, #4]
2400fb30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fb32:	2b00      	cmp	r3, #0
2400fb34:	d003      	beq.n	2400fb3e <HAL_MDMA_LinkedList_RemoveNode+0x6a>
2400fb36:	687b      	ldr	r3, [r7, #4]
2400fb38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fb3a:	2b00      	cmp	r3, #0
2400fb3c:	d102      	bne.n	2400fb44 <HAL_MDMA_LinkedList_RemoveNode+0x70>
    {
      hal_status = HAL_ERROR;
2400fb3e:	2301      	movs	r3, #1
2400fb40:	72fb      	strb	r3, [r7, #11]
2400fb42:	e065      	b.n	2400fc10 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
    }
    else if(hmdma->FirstLinkedListNodeAddress == pNode) /* Deleting first node */
2400fb44:	687b      	ldr	r3, [r7, #4]
2400fb46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fb48:	683a      	ldr	r2, [r7, #0]
2400fb4a:	429a      	cmp	r2, r3
2400fb4c:	d130      	bne.n	2400fbb0 <HAL_MDMA_LinkedList_RemoveNode+0xdc>
    {
      /* Delete 1st node */
      if(hmdma->LastLinkedListNodeAddress == pNode)
2400fb4e:	687b      	ldr	r3, [r7, #4]
2400fb50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fb52:	683a      	ldr	r2, [r7, #0]
2400fb54:	429a      	cmp	r2, r3
2400fb56:	d10d      	bne.n	2400fb74 <HAL_MDMA_LinkedList_RemoveNode+0xa0>
      {
        /*if the last node is at the same time the first one (1 single node after the init node 0)
        then update the last node too */

        hmdma->FirstLinkedListNodeAddress = 0;
2400fb58:	687b      	ldr	r3, [r7, #4]
2400fb5a:	2200      	movs	r2, #0
2400fb5c:	65da      	str	r2, [r3, #92]	; 0x5c
        hmdma->LastLinkedListNodeAddress  = 0;
2400fb5e:	687b      	ldr	r3, [r7, #4]
2400fb60:	2200      	movs	r2, #0
2400fb62:	661a      	str	r2, [r3, #96]	; 0x60
        hmdma->LinkedListNodeCounter = 0;
2400fb64:	687b      	ldr	r3, [r7, #4]
2400fb66:	2200      	movs	r2, #0
2400fb68:	665a      	str	r2, [r3, #100]	; 0x64

        hmdma->Instance->CLAR = 0;
2400fb6a:	687b      	ldr	r3, [r7, #4]
2400fb6c:	681b      	ldr	r3, [r3, #0]
2400fb6e:	2200      	movs	r2, #0
2400fb70:	625a      	str	r2, [r3, #36]	; 0x24
2400fb72:	e04d      	b.n	2400fc10 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
      else
      {
        if((uint32_t)hmdma->FirstLinkedListNodeAddress == hmdma->LastLinkedListNodeAddress->CLAR)
2400fb74:	687b      	ldr	r3, [r7, #4]
2400fb76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fb78:	461a      	mov	r2, r3
2400fb7a:	687b      	ldr	r3, [r7, #4]
2400fb7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fb7e:	695b      	ldr	r3, [r3, #20]
2400fb80:	429a      	cmp	r2, r3
2400fb82:	d104      	bne.n	2400fb8e <HAL_MDMA_LinkedList_RemoveNode+0xba>
        {
          /* if last node is looping to first (circular list) one update the last node connection */
          hmdma->LastLinkedListNodeAddress->CLAR = pNode->CLAR;
2400fb84:	687b      	ldr	r3, [r7, #4]
2400fb86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fb88:	683a      	ldr	r2, [r7, #0]
2400fb8a:	6952      	ldr	r2, [r2, #20]
2400fb8c:	615a      	str	r2, [r3, #20]
        }

        /* if deleting the first node after the initialization
        connect the next node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = pNode->CLAR;
2400fb8e:	687b      	ldr	r3, [r7, #4]
2400fb90:	681b      	ldr	r3, [r3, #0]
2400fb92:	683a      	ldr	r2, [r7, #0]
2400fb94:	6952      	ldr	r2, [r2, #20]
2400fb96:	625a      	str	r2, [r3, #36]	; 0x24
        hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
2400fb98:	687b      	ldr	r3, [r7, #4]
2400fb9a:	681b      	ldr	r3, [r3, #0]
2400fb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400fb9e:	461a      	mov	r2, r3
2400fba0:	687b      	ldr	r3, [r7, #4]
2400fba2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Update the Handle node counter */
        hmdma->LinkedListNodeCounter--;
2400fba4:	687b      	ldr	r3, [r7, #4]
2400fba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fba8:	1e5a      	subs	r2, r3, #1
2400fbaa:	687b      	ldr	r3, [r7, #4]
2400fbac:	665a      	str	r2, [r3, #100]	; 0x64
2400fbae:	e02f      	b.n	2400fc10 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
    }
    else /* Deleting any other node */
    {
      /*Deleted node is not the first one : find it  */
      ptmpNode = hmdma->FirstLinkedListNodeAddress;
2400fbb0:	687b      	ldr	r3, [r7, #4]
2400fbb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fbb4:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
2400fbb6:	e01e      	b.n	2400fbf6 <HAL_MDMA_LinkedList_RemoveNode+0x122>
      {
        counter++;
2400fbb8:	693b      	ldr	r3, [r7, #16]
2400fbba:	3301      	adds	r3, #1
2400fbbc:	613b      	str	r3, [r7, #16]
        if(ptmpNode->CLAR == ((uint32_t)pNode))
2400fbbe:	697b      	ldr	r3, [r7, #20]
2400fbc0:	695a      	ldr	r2, [r3, #20]
2400fbc2:	683b      	ldr	r3, [r7, #0]
2400fbc4:	429a      	cmp	r2, r3
2400fbc6:	d113      	bne.n	2400fbf0 <HAL_MDMA_LinkedList_RemoveNode+0x11c>
        {
          /* if deleting the last node */
          if(pNode == hmdma->LastLinkedListNodeAddress)
2400fbc8:	687b      	ldr	r3, [r7, #4]
2400fbca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fbcc:	683a      	ldr	r2, [r7, #0]
2400fbce:	429a      	cmp	r2, r3
2400fbd0:	d102      	bne.n	2400fbd8 <HAL_MDMA_LinkedList_RemoveNode+0x104>
          {
            /*Update the linked list last node address in the handle*/
            hmdma->LastLinkedListNodeAddress = ptmpNode;
2400fbd2:	687b      	ldr	r3, [r7, #4]
2400fbd4:	697a      	ldr	r2, [r7, #20]
2400fbd6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          /* update the next node link after deleting pMDMA_LinkedListNode */
          ptmpNode->CLAR = pNode->CLAR;
2400fbd8:	683b      	ldr	r3, [r7, #0]
2400fbda:	695a      	ldr	r2, [r3, #20]
2400fbdc:	697b      	ldr	r3, [r7, #20]
2400fbde:	615a      	str	r2, [r3, #20]
          nodeDeleted = 1;
2400fbe0:	2301      	movs	r3, #1
2400fbe2:	60fb      	str	r3, [r7, #12]
          /* Update the Handle node counter */
          hmdma->LinkedListNodeCounter--;
2400fbe4:	687b      	ldr	r3, [r7, #4]
2400fbe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fbe8:	1e5a      	subs	r2, r3, #1
2400fbea:	687b      	ldr	r3, [r7, #4]
2400fbec:	665a      	str	r2, [r3, #100]	; 0x64
2400fbee:	e002      	b.n	2400fbf6 <HAL_MDMA_LinkedList_RemoveNode+0x122>
        }
        else
        {
          ptmpNode = (MDMA_LinkNodeTypeDef *)ptmpNode->CLAR;
2400fbf0:	697b      	ldr	r3, [r7, #20]
2400fbf2:	695b      	ldr	r3, [r3, #20]
2400fbf4:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
2400fbf6:	687b      	ldr	r3, [r7, #4]
2400fbf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fbfa:	693a      	ldr	r2, [r7, #16]
2400fbfc:	429a      	cmp	r2, r3
2400fbfe:	d202      	bcs.n	2400fc06 <HAL_MDMA_LinkedList_RemoveNode+0x132>
2400fc00:	68fb      	ldr	r3, [r7, #12]
2400fc02:	2b00      	cmp	r3, #0
2400fc04:	d0d8      	beq.n	2400fbb8 <HAL_MDMA_LinkedList_RemoveNode+0xe4>
        }
      }

      if(nodeDeleted == 0U)
2400fc06:	68fb      	ldr	r3, [r7, #12]
2400fc08:	2b00      	cmp	r3, #0
2400fc0a:	d101      	bne.n	2400fc10 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      {
        /* last node reashed without finding the node to delete : return error */
        hal_status = HAL_ERROR;
2400fc0c:	2301      	movs	r3, #1
2400fc0e:	72fb      	strb	r3, [r7, #11]
      }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fc10:	687b      	ldr	r3, [r7, #4]
2400fc12:	2200      	movs	r2, #0
2400fc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
2400fc18:	687b      	ldr	r3, [r7, #4]
2400fc1a:	2201      	movs	r2, #1
2400fc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
2400fc20:	7afb      	ldrb	r3, [r7, #11]
2400fc22:	e004      	b.n	2400fc2e <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fc24:	687b      	ldr	r3, [r7, #4]
2400fc26:	2200      	movs	r2, #0
2400fc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400fc2c:	2302      	movs	r3, #2
  }
}
2400fc2e:	4618      	mov	r0, r3
2400fc30:	371c      	adds	r7, #28
2400fc32:	46bd      	mov	sp, r7
2400fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fc38:	4770      	bx	lr

2400fc3a <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
2400fc3a:	b480      	push	{r7}
2400fc3c:	b085      	sub	sp, #20
2400fc3e:	af00      	add	r7, sp, #0
2400fc40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2400fc42:	2300      	movs	r3, #0
2400fc44:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fc46:	687b      	ldr	r3, [r7, #4]
2400fc48:	2b00      	cmp	r3, #0
2400fc4a:	d101      	bne.n	2400fc50 <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
2400fc4c:	2301      	movs	r3, #1
2400fc4e:	e031      	b.n	2400fcb4 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fc50:	687b      	ldr	r3, [r7, #4]
2400fc52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fc56:	2b01      	cmp	r3, #1
2400fc58:	d101      	bne.n	2400fc5e <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
2400fc5a:	2302      	movs	r3, #2
2400fc5c:	e02a      	b.n	2400fcb4 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
2400fc5e:	687b      	ldr	r3, [r7, #4]
2400fc60:	2201      	movs	r2, #1
2400fc62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fc66:	687b      	ldr	r3, [r7, #4]
2400fc68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fc6c:	b2db      	uxtb	r3, r3
2400fc6e:	2b01      	cmp	r3, #1
2400fc70:	d117      	bne.n	2400fca2 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fc72:	687b      	ldr	r3, [r7, #4]
2400fc74:	2202      	movs	r2, #2
2400fc76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2400fc7a:	687b      	ldr	r3, [r7, #4]
2400fc7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fc7e:	2b00      	cmp	r3, #0
2400fc80:	d007      	beq.n	2400fc92 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
2400fc82:	687b      	ldr	r3, [r7, #4]
2400fc84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fc86:	2b00      	cmp	r3, #0
2400fc88:	d003      	beq.n	2400fc92 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
2400fc8a:	687b      	ldr	r3, [r7, #4]
2400fc8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fc8e:	2b00      	cmp	r3, #0
2400fc90:	d102      	bne.n	2400fc98 <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
2400fc92:	2301      	movs	r3, #1
2400fc94:	73fb      	strb	r3, [r7, #15]
2400fc96:	e004      	b.n	2400fca2 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
2400fc98:	687b      	ldr	r3, [r7, #4]
2400fc9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2400fc9c:	687b      	ldr	r3, [r7, #4]
2400fc9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fca0:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
2400fca2:	687b      	ldr	r3, [r7, #4]
2400fca4:	2200      	movs	r2, #0
2400fca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
2400fcaa:	687b      	ldr	r3, [r7, #4]
2400fcac:	2201      	movs	r2, #1
2400fcae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
2400fcb2:	7bfb      	ldrb	r3, [r7, #15]
}
2400fcb4:	4618      	mov	r0, r3
2400fcb6:	3714      	adds	r7, #20
2400fcb8:	46bd      	mov	sp, r7
2400fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fcbe:	4770      	bx	lr

2400fcc0 <HAL_MDMA_LinkedList_DisableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma)
{
2400fcc0:	b480      	push	{r7}
2400fcc2:	b085      	sub	sp, #20
2400fcc4:	af00      	add	r7, sp, #0
2400fcc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2400fcc8:	2300      	movs	r3, #0
2400fcca:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fccc:	687b      	ldr	r3, [r7, #4]
2400fcce:	2b00      	cmp	r3, #0
2400fcd0:	d101      	bne.n	2400fcd6 <HAL_MDMA_LinkedList_DisableCircularMode+0x16>
  {
    return HAL_ERROR;
2400fcd2:	2301      	movs	r3, #1
2400fcd4:	e030      	b.n	2400fd38 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fcd6:	687b      	ldr	r3, [r7, #4]
2400fcd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fcdc:	2b01      	cmp	r3, #1
2400fcde:	d101      	bne.n	2400fce4 <HAL_MDMA_LinkedList_DisableCircularMode+0x24>
2400fce0:	2302      	movs	r3, #2
2400fce2:	e029      	b.n	2400fd38 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
2400fce4:	687b      	ldr	r3, [r7, #4]
2400fce6:	2201      	movs	r2, #1
2400fce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fcec:	687b      	ldr	r3, [r7, #4]
2400fcee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fcf2:	b2db      	uxtb	r3, r3
2400fcf4:	2b01      	cmp	r3, #1
2400fcf6:	d116      	bne.n	2400fd26 <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fcf8:	687b      	ldr	r3, [r7, #4]
2400fcfa:	2202      	movs	r2, #2
2400fcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2400fd00:	687b      	ldr	r3, [r7, #4]
2400fd02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400fd04:	2b00      	cmp	r3, #0
2400fd06:	d007      	beq.n	2400fd18 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
2400fd08:	687b      	ldr	r3, [r7, #4]
2400fd0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fd0c:	2b00      	cmp	r3, #0
2400fd0e:	d003      	beq.n	2400fd18 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
2400fd10:	687b      	ldr	r3, [r7, #4]
2400fd12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400fd14:	2b00      	cmp	r3, #0
2400fd16:	d102      	bne.n	2400fd1e <HAL_MDMA_LinkedList_DisableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
2400fd18:	2301      	movs	r3, #1
2400fd1a:	73fb      	strb	r3, [r7, #15]
2400fd1c:	e003      	b.n	2400fd26 <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
    }
    else
    {
      /* to disable circular mode Last Node should be connected to NULL */
      hmdma->LastLinkedListNodeAddress->CLAR = 0;
2400fd1e:	687b      	ldr	r3, [r7, #4]
2400fd20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400fd22:	2200      	movs	r2, #0
2400fd24:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
2400fd26:	687b      	ldr	r3, [r7, #4]
2400fd28:	2200      	movs	r2, #0
2400fd2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
2400fd2e:	687b      	ldr	r3, [r7, #4]
2400fd30:	2201      	movs	r2, #1
2400fd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
2400fd36:	7bfb      	ldrb	r3, [r7, #15]
}
2400fd38:	4618      	mov	r0, r3
2400fd3a:	3714      	adds	r7, #20
2400fd3c:	46bd      	mov	sp, r7
2400fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fd42:	4770      	bx	lr

2400fd44 <HAL_MDMA_Start>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
2400fd44:	b580      	push	{r7, lr}
2400fd46:	b086      	sub	sp, #24
2400fd48:	af02      	add	r7, sp, #8
2400fd4a:	60f8      	str	r0, [r7, #12]
2400fd4c:	60b9      	str	r1, [r7, #8]
2400fd4e:	607a      	str	r2, [r7, #4]
2400fd50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fd52:	68fb      	ldr	r3, [r7, #12]
2400fd54:	2b00      	cmp	r3, #0
2400fd56:	d101      	bne.n	2400fd5c <HAL_MDMA_Start+0x18>
  {
    return HAL_ERROR;
2400fd58:	2301      	movs	r3, #1
2400fd5a:	e044      	b.n	2400fde6 <HAL_MDMA_Start+0xa2>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fd5c:	68fb      	ldr	r3, [r7, #12]
2400fd5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fd62:	2b01      	cmp	r3, #1
2400fd64:	d101      	bne.n	2400fd6a <HAL_MDMA_Start+0x26>
2400fd66:	2302      	movs	r3, #2
2400fd68:	e03d      	b.n	2400fde6 <HAL_MDMA_Start+0xa2>
2400fd6a:	68fb      	ldr	r3, [r7, #12]
2400fd6c:	2201      	movs	r2, #1
2400fd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fd72:	68fb      	ldr	r3, [r7, #12]
2400fd74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fd78:	b2db      	uxtb	r3, r3
2400fd7a:	2b01      	cmp	r3, #1
2400fd7c:	d12c      	bne.n	2400fdd8 <HAL_MDMA_Start+0x94>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fd7e:	68fb      	ldr	r3, [r7, #12]
2400fd80:	2202      	movs	r2, #2
2400fd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400fd86:	68fb      	ldr	r3, [r7, #12]
2400fd88:	2200      	movs	r2, #0
2400fd8a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
2400fd8c:	68fb      	ldr	r3, [r7, #12]
2400fd8e:	681b      	ldr	r3, [r3, #0]
2400fd90:	68da      	ldr	r2, [r3, #12]
2400fd92:	68fb      	ldr	r3, [r7, #12]
2400fd94:	681b      	ldr	r3, [r3, #0]
2400fd96:	f022 0201 	bic.w	r2, r2, #1
2400fd9a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
2400fd9c:	69bb      	ldr	r3, [r7, #24]
2400fd9e:	9300      	str	r3, [sp, #0]
2400fda0:	683b      	ldr	r3, [r7, #0]
2400fda2:	687a      	ldr	r2, [r7, #4]
2400fda4:	68b9      	ldr	r1, [r7, #8]
2400fda6:	68f8      	ldr	r0, [r7, #12]
2400fda8:	f000 fb96 	bl	240104d8 <MDMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
2400fdac:	68fb      	ldr	r3, [r7, #12]
2400fdae:	681b      	ldr	r3, [r3, #0]
2400fdb0:	68da      	ldr	r2, [r3, #12]
2400fdb2:	68fb      	ldr	r3, [r7, #12]
2400fdb4:	681b      	ldr	r3, [r3, #0]
2400fdb6:	f042 0201 	orr.w	r2, r2, #1
2400fdba:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
2400fdbc:	68fb      	ldr	r3, [r7, #12]
2400fdbe:	685b      	ldr	r3, [r3, #4]
2400fdc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400fdc4:	d10e      	bne.n	2400fde4 <HAL_MDMA_Start+0xa0>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
2400fdc6:	68fb      	ldr	r3, [r7, #12]
2400fdc8:	681b      	ldr	r3, [r3, #0]
2400fdca:	68da      	ldr	r2, [r3, #12]
2400fdcc:	68fb      	ldr	r3, [r7, #12]
2400fdce:	681b      	ldr	r3, [r3, #0]
2400fdd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400fdd4:	60da      	str	r2, [r3, #12]
2400fdd6:	e005      	b.n	2400fde4 <HAL_MDMA_Start+0xa0>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400fdd8:	68fb      	ldr	r3, [r7, #12]
2400fdda:	2200      	movs	r2, #0
2400fddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400fde0:	2302      	movs	r3, #2
2400fde2:	e000      	b.n	2400fde6 <HAL_MDMA_Start+0xa2>
  }

  return HAL_OK;
2400fde4:	2300      	movs	r3, #0
}
2400fde6:	4618      	mov	r0, r3
2400fde8:	3710      	adds	r7, #16
2400fdea:	46bd      	mov	sp, r7
2400fdec:	bd80      	pop	{r7, pc}

2400fdee <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
2400fdee:	b580      	push	{r7, lr}
2400fdf0:	b086      	sub	sp, #24
2400fdf2:	af02      	add	r7, sp, #8
2400fdf4:	60f8      	str	r0, [r7, #12]
2400fdf6:	60b9      	str	r1, [r7, #8]
2400fdf8:	607a      	str	r2, [r7, #4]
2400fdfa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fdfc:	68fb      	ldr	r3, [r7, #12]
2400fdfe:	2b00      	cmp	r3, #0
2400fe00:	d101      	bne.n	2400fe06 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
2400fe02:	2301      	movs	r3, #1
2400fe04:	e070      	b.n	2400fee8 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400fe06:	68fb      	ldr	r3, [r7, #12]
2400fe08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2400fe0c:	2b01      	cmp	r3, #1
2400fe0e:	d101      	bne.n	2400fe14 <HAL_MDMA_Start_IT+0x26>
2400fe10:	2302      	movs	r3, #2
2400fe12:	e069      	b.n	2400fee8 <HAL_MDMA_Start_IT+0xfa>
2400fe14:	68fb      	ldr	r3, [r7, #12]
2400fe16:	2201      	movs	r2, #1
2400fe18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2400fe1c:	68fb      	ldr	r3, [r7, #12]
2400fe1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400fe22:	b2db      	uxtb	r3, r3
2400fe24:	2b01      	cmp	r3, #1
2400fe26:	d158      	bne.n	2400feda <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2400fe28:	68fb      	ldr	r3, [r7, #12]
2400fe2a:	2202      	movs	r2, #2
2400fe2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400fe30:	68fb      	ldr	r3, [r7, #12]
2400fe32:	2200      	movs	r2, #0
2400fe34:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
2400fe36:	68fb      	ldr	r3, [r7, #12]
2400fe38:	681b      	ldr	r3, [r3, #0]
2400fe3a:	68da      	ldr	r2, [r3, #12]
2400fe3c:	68fb      	ldr	r3, [r7, #12]
2400fe3e:	681b      	ldr	r3, [r3, #0]
2400fe40:	f022 0201 	bic.w	r2, r2, #1
2400fe44:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
2400fe46:	69bb      	ldr	r3, [r7, #24]
2400fe48:	9300      	str	r3, [sp, #0]
2400fe4a:	683b      	ldr	r3, [r7, #0]
2400fe4c:	687a      	ldr	r2, [r7, #4]
2400fe4e:	68b9      	ldr	r1, [r7, #8]
2400fe50:	68f8      	ldr	r0, [r7, #12]
2400fe52:	f000 fb41 	bl	240104d8 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
2400fe56:	68fb      	ldr	r3, [r7, #12]
2400fe58:	681b      	ldr	r3, [r3, #0]
2400fe5a:	68da      	ldr	r2, [r3, #12]
2400fe5c:	68fb      	ldr	r3, [r7, #12]
2400fe5e:	681b      	ldr	r3, [r3, #0]
2400fe60:	f042 0206 	orr.w	r2, r2, #6
2400fe64:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
2400fe66:	68fb      	ldr	r3, [r7, #12]
2400fe68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400fe6a:	2b00      	cmp	r3, #0
2400fe6c:	d007      	beq.n	2400fe7e <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
2400fe6e:	68fb      	ldr	r3, [r7, #12]
2400fe70:	681b      	ldr	r3, [r3, #0]
2400fe72:	68da      	ldr	r2, [r3, #12]
2400fe74:	68fb      	ldr	r3, [r7, #12]
2400fe76:	681b      	ldr	r3, [r3, #0]
2400fe78:	f042 0210 	orr.w	r2, r2, #16
2400fe7c:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
2400fe7e:	68fb      	ldr	r3, [r7, #12]
2400fe80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400fe82:	2b00      	cmp	r3, #0
2400fe84:	d007      	beq.n	2400fe96 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
2400fe86:	68fb      	ldr	r3, [r7, #12]
2400fe88:	681b      	ldr	r3, [r3, #0]
2400fe8a:	68da      	ldr	r2, [r3, #12]
2400fe8c:	68fb      	ldr	r3, [r7, #12]
2400fe8e:	681b      	ldr	r3, [r3, #0]
2400fe90:	f042 0208 	orr.w	r2, r2, #8
2400fe94:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
2400fe96:	68fb      	ldr	r3, [r7, #12]
2400fe98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400fe9a:	2b00      	cmp	r3, #0
2400fe9c:	d007      	beq.n	2400feae <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
2400fe9e:	68fb      	ldr	r3, [r7, #12]
2400fea0:	681b      	ldr	r3, [r3, #0]
2400fea2:	68da      	ldr	r2, [r3, #12]
2400fea4:	68fb      	ldr	r3, [r7, #12]
2400fea6:	681b      	ldr	r3, [r3, #0]
2400fea8:	f042 0220 	orr.w	r2, r2, #32
2400feac:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
2400feae:	68fb      	ldr	r3, [r7, #12]
2400feb0:	681b      	ldr	r3, [r3, #0]
2400feb2:	68da      	ldr	r2, [r3, #12]
2400feb4:	68fb      	ldr	r3, [r7, #12]
2400feb6:	681b      	ldr	r3, [r3, #0]
2400feb8:	f042 0201 	orr.w	r2, r2, #1
2400febc:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
2400febe:	68fb      	ldr	r3, [r7, #12]
2400fec0:	685b      	ldr	r3, [r3, #4]
2400fec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400fec6:	d10e      	bne.n	2400fee6 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
2400fec8:	68fb      	ldr	r3, [r7, #12]
2400feca:	681b      	ldr	r3, [r3, #0]
2400fecc:	68da      	ldr	r2, [r3, #12]
2400fece:	68fb      	ldr	r3, [r7, #12]
2400fed0:	681b      	ldr	r3, [r3, #0]
2400fed2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400fed6:	60da      	str	r2, [r3, #12]
2400fed8:	e005      	b.n	2400fee6 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2400feda:	68fb      	ldr	r3, [r7, #12]
2400fedc:	2200      	movs	r2, #0
2400fede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400fee2:	2302      	movs	r3, #2
2400fee4:	e000      	b.n	2400fee8 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
2400fee6:	2300      	movs	r3, #0
}
2400fee8:	4618      	mov	r0, r3
2400feea:	3710      	adds	r7, #16
2400feec:	46bd      	mov	sp, r7
2400feee:	bd80      	pop	{r7, pc}

2400fef0 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
2400fef0:	b580      	push	{r7, lr}
2400fef2:	b084      	sub	sp, #16
2400fef4:	af00      	add	r7, sp, #0
2400fef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
2400fef8:	f7f2 f980 	bl	240021fc <HAL_GetTick>
2400fefc:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400fefe:	687b      	ldr	r3, [r7, #4]
2400ff00:	2b00      	cmp	r3, #0
2400ff02:	d101      	bne.n	2400ff08 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
2400ff04:	2301      	movs	r3, #1
2400ff06:	e04a      	b.n	2400ff9e <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2400ff08:	687b      	ldr	r3, [r7, #4]
2400ff0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400ff0e:	b2db      	uxtb	r3, r3
2400ff10:	2b02      	cmp	r3, #2
2400ff12:	d008      	beq.n	2400ff26 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2400ff14:	687b      	ldr	r3, [r7, #4]
2400ff16:	2280      	movs	r2, #128	; 0x80
2400ff18:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
2400ff1a:	687b      	ldr	r3, [r7, #4]
2400ff1c:	2200      	movs	r2, #0
2400ff1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
2400ff22:	2301      	movs	r3, #1
2400ff24:	e03b      	b.n	2400ff9e <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
2400ff26:	687b      	ldr	r3, [r7, #4]
2400ff28:	681b      	ldr	r3, [r3, #0]
2400ff2a:	68da      	ldr	r2, [r3, #12]
2400ff2c:	687b      	ldr	r3, [r7, #4]
2400ff2e:	681b      	ldr	r3, [r3, #0]
2400ff30:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
2400ff34:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
2400ff36:	687b      	ldr	r3, [r7, #4]
2400ff38:	681b      	ldr	r3, [r3, #0]
2400ff3a:	68da      	ldr	r2, [r3, #12]
2400ff3c:	687b      	ldr	r3, [r7, #4]
2400ff3e:	681b      	ldr	r3, [r3, #0]
2400ff40:	f022 0201 	bic.w	r2, r2, #1
2400ff44:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400ff46:	e016      	b.n	2400ff76 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
2400ff48:	f7f2 f958 	bl	240021fc <HAL_GetTick>
2400ff4c:	4602      	mov	r2, r0
2400ff4e:	68fb      	ldr	r3, [r7, #12]
2400ff50:	1ad3      	subs	r3, r2, r3
2400ff52:	2b05      	cmp	r3, #5
2400ff54:	d90f      	bls.n	2400ff76 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
2400ff56:	687b      	ldr	r3, [r7, #4]
2400ff58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400ff5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2400ff5e:	687b      	ldr	r3, [r7, #4]
2400ff60:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
2400ff62:	687b      	ldr	r3, [r7, #4]
2400ff64:	2200      	movs	r2, #0
2400ff66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
2400ff6a:	687b      	ldr	r3, [r7, #4]
2400ff6c:	2203      	movs	r2, #3
2400ff6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
2400ff72:	2301      	movs	r3, #1
2400ff74:	e013      	b.n	2400ff9e <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2400ff76:	687b      	ldr	r3, [r7, #4]
2400ff78:	681b      	ldr	r3, [r3, #0]
2400ff7a:	68db      	ldr	r3, [r3, #12]
2400ff7c:	f003 0301 	and.w	r3, r3, #1
2400ff80:	2b00      	cmp	r3, #0
2400ff82:	d1e1      	bne.n	2400ff48 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
2400ff84:	687b      	ldr	r3, [r7, #4]
2400ff86:	681b      	ldr	r3, [r3, #0]
2400ff88:	221f      	movs	r2, #31
2400ff8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
2400ff8c:	687b      	ldr	r3, [r7, #4]
2400ff8e:	2200      	movs	r2, #0
2400ff90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
2400ff94:	687b      	ldr	r3, [r7, #4]
2400ff96:	2201      	movs	r2, #1
2400ff98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
2400ff9c:	2300      	movs	r3, #0
}
2400ff9e:	4618      	mov	r0, r3
2400ffa0:	3710      	adds	r7, #16
2400ffa2:	46bd      	mov	sp, r7
2400ffa4:	bd80      	pop	{r7, pc}

2400ffa6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
2400ffa6:	b480      	push	{r7}
2400ffa8:	b083      	sub	sp, #12
2400ffaa:	af00      	add	r7, sp, #0
2400ffac:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400ffae:	687b      	ldr	r3, [r7, #4]
2400ffb0:	2b00      	cmp	r3, #0
2400ffb2:	d101      	bne.n	2400ffb8 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2400ffb4:	2301      	movs	r3, #1
2400ffb6:	e017      	b.n	2400ffe8 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2400ffb8:	687b      	ldr	r3, [r7, #4]
2400ffba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400ffbe:	b2db      	uxtb	r3, r3
2400ffc0:	2b02      	cmp	r3, #2
2400ffc2:	d004      	beq.n	2400ffce <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2400ffc4:	687b      	ldr	r3, [r7, #4]
2400ffc6:	2280      	movs	r2, #128	; 0x80
2400ffc8:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2400ffca:	2301      	movs	r3, #1
2400ffcc:	e00c      	b.n	2400ffe8 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
2400ffce:	687b      	ldr	r3, [r7, #4]
2400ffd0:	2204      	movs	r2, #4
2400ffd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
2400ffd6:	687b      	ldr	r3, [r7, #4]
2400ffd8:	681b      	ldr	r3, [r3, #0]
2400ffda:	68da      	ldr	r2, [r3, #12]
2400ffdc:	687b      	ldr	r3, [r7, #4]
2400ffde:	681b      	ldr	r3, [r3, #0]
2400ffe0:	f022 0201 	bic.w	r2, r2, #1
2400ffe4:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
2400ffe6:	2300      	movs	r3, #0
}
2400ffe8:	4618      	mov	r0, r3
2400ffea:	370c      	adds	r7, #12
2400ffec:	46bd      	mov	sp, r7
2400ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fff2:	4770      	bx	lr

2400fff4 <HAL_MDMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the MDMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, HAL_MDMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
2400fff4:	b580      	push	{r7, lr}
2400fff6:	b088      	sub	sp, #32
2400fff8:	af00      	add	r7, sp, #0
2400fffa:	60f8      	str	r0, [r7, #12]
2400fffc:	460b      	mov	r3, r1
2400fffe:	607a      	str	r2, [r7, #4]
24010000:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_MDMA_LEVEL_COMPLETE(CompleteLevel));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010002:	68fb      	ldr	r3, [r7, #12]
24010004:	2b00      	cmp	r3, #0
24010006:	d101      	bne.n	2401000c <HAL_MDMA_PollForTransfer+0x18>
  {
    return HAL_ERROR;
24010008:	2301      	movs	r3, #1
2401000a:	e0b9      	b.n	24010180 <HAL_MDMA_PollForTransfer+0x18c>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2401000c:	68fb      	ldr	r3, [r7, #12]
2401000e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24010012:	b2db      	uxtb	r3, r3
24010014:	2b02      	cmp	r3, #2
24010016:	d004      	beq.n	24010022 <HAL_MDMA_PollForTransfer+0x2e>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24010018:	68fb      	ldr	r3, [r7, #12]
2401001a:	2280      	movs	r2, #128	; 0x80
2401001c:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2401001e:	2301      	movs	r3, #1
24010020:	e0ae      	b.n	24010180 <HAL_MDMA_PollForTransfer+0x18c>
  }

  /* Get the level transfer complete flag */
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
24010022:	7afb      	ldrb	r3, [r7, #11]
24010024:	2b00      	cmp	r3, #0
24010026:	d00b      	beq.n	24010040 <HAL_MDMA_PollForTransfer+0x4c>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
24010028:	7afb      	ldrb	r3, [r7, #11]
2401002a:	2b01      	cmp	r3, #1
2401002c:	d006      	beq.n	2401003c <HAL_MDMA_PollForTransfer+0x48>
               (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   : \
2401002e:	7afb      	ldrb	r3, [r7, #11]
24010030:	2b02      	cmp	r3, #2
24010032:	d101      	bne.n	24010038 <HAL_MDMA_PollForTransfer+0x44>
24010034:	2308      	movs	r3, #8
24010036:	e004      	b.n	24010042 <HAL_MDMA_PollForTransfer+0x4e>
24010038:	2304      	movs	r3, #4
2401003a:	e002      	b.n	24010042 <HAL_MDMA_PollForTransfer+0x4e>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
2401003c:	2310      	movs	r3, #16
2401003e:	e000      	b.n	24010042 <HAL_MDMA_PollForTransfer+0x4e>
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
24010040:	2302      	movs	r3, #2
24010042:	61fb      	str	r3, [r7, #28]
               MDMA_FLAG_BRT);


  /* Get timeout */
  tickstart = HAL_GetTick();
24010044:	f7f2 f8da 	bl	240021fc <HAL_GetTick>
24010048:	61b8      	str	r0, [r7, #24]

  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
2401004a:	e067      	b.n	2401011c <HAL_MDMA_PollForTransfer+0x128>
  {
    if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
2401004c:	68fb      	ldr	r3, [r7, #12]
2401004e:	681b      	ldr	r3, [r3, #0]
24010050:	681b      	ldr	r3, [r3, #0]
24010052:	f003 0301 	and.w	r3, r3, #1
24010056:	2b00      	cmp	r3, #0
24010058:	d046      	beq.n	240100e8 <HAL_MDMA_PollForTransfer+0xf4>
    {
      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
2401005a:	68fb      	ldr	r3, [r7, #12]
2401005c:	681b      	ldr	r3, [r3, #0]
2401005e:	689b      	ldr	r3, [r3, #8]
24010060:	617b      	str	r3, [r7, #20]

      if((errorFlag & MDMA_CESR_TED) == 0U)
24010062:	697b      	ldr	r3, [r7, #20]
24010064:	f003 0380 	and.w	r3, r3, #128	; 0x80
24010068:	2b00      	cmp	r3, #0
2401006a:	d106      	bne.n	2401007a <HAL_MDMA_PollForTransfer+0x86>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
2401006c:	68fb      	ldr	r3, [r7, #12]
2401006e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010070:	f043 0201 	orr.w	r2, r3, #1
24010074:	68fb      	ldr	r3, [r7, #12]
24010076:	669a      	str	r2, [r3, #104]	; 0x68
24010078:	e005      	b.n	24010086 <HAL_MDMA_PollForTransfer+0x92>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
2401007a:	68fb      	ldr	r3, [r7, #12]
2401007c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401007e:	f043 0202 	orr.w	r2, r3, #2
24010082:	68fb      	ldr	r3, [r7, #12]
24010084:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
24010086:	697b      	ldr	r3, [r7, #20]
24010088:	f403 7300 	and.w	r3, r3, #512	; 0x200
2401008c:	2b00      	cmp	r3, #0
2401008e:	d005      	beq.n	2401009c <HAL_MDMA_PollForTransfer+0xa8>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24010090:	68fb      	ldr	r3, [r7, #12]
24010092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010094:	f043 0204 	orr.w	r2, r3, #4
24010098:	68fb      	ldr	r3, [r7, #12]
2401009a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
2401009c:	697b      	ldr	r3, [r7, #20]
2401009e:	f403 7380 	and.w	r3, r3, #256	; 0x100
240100a2:	2b00      	cmp	r3, #0
240100a4:	d005      	beq.n	240100b2 <HAL_MDMA_PollForTransfer+0xbe>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
240100a6:	68fb      	ldr	r3, [r7, #12]
240100a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240100aa:	f043 0208 	orr.w	r2, r3, #8
240100ae:	68fb      	ldr	r3, [r7, #12]
240100b0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
240100b2:	697b      	ldr	r3, [r7, #20]
240100b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
240100b8:	2b00      	cmp	r3, #0
240100ba:	d005      	beq.n	240100c8 <HAL_MDMA_PollForTransfer+0xd4>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
240100bc:	68fb      	ldr	r3, [r7, #12]
240100be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240100c0:	f043 0210 	orr.w	r2, r3, #16
240100c4:	68fb      	ldr	r3, [r7, #12]
240100c6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
240100c8:	697b      	ldr	r3, [r7, #20]
240100ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
240100ce:	2b00      	cmp	r3, #0
240100d0:	d005      	beq.n	240100de <HAL_MDMA_PollForTransfer+0xea>
      {
        /* Update error code : Block Size error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
240100d2:	68fb      	ldr	r3, [r7, #12]
240100d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240100d6:	f043 0220 	orr.w	r2, r3, #32
240100da:	68fb      	ldr	r3, [r7, #12]
240100dc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      (void) HAL_MDMA_Abort(hmdma); /* if error then abort the current transfer */
240100de:	68f8      	ldr	r0, [r7, #12]
240100e0:	f7ff ff06 	bl	2400fef0 <HAL_MDMA_Abort>
          - Clear all transfer flags
          - Unlock
          - Set the State
      */

      return HAL_ERROR;
240100e4:	2301      	movs	r3, #1
240100e6:	e04b      	b.n	24010180 <HAL_MDMA_PollForTransfer+0x18c>

    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
240100e8:	687b      	ldr	r3, [r7, #4]
240100ea:	f1b3 3fff 	cmp.w	r3, #4294967295
240100ee:	d015      	beq.n	2401011c <HAL_MDMA_PollForTransfer+0x128>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
240100f0:	f7f2 f884 	bl	240021fc <HAL_GetTick>
240100f4:	4602      	mov	r2, r0
240100f6:	69bb      	ldr	r3, [r7, #24]
240100f8:	1ad3      	subs	r3, r2, r3
240100fa:	687a      	ldr	r2, [r7, #4]
240100fc:	429a      	cmp	r2, r3
240100fe:	d302      	bcc.n	24010106 <HAL_MDMA_PollForTransfer+0x112>
24010100:	687b      	ldr	r3, [r7, #4]
24010102:	2b00      	cmp	r3, #0
24010104:	d10a      	bne.n	2401011c <HAL_MDMA_PollForTransfer+0x128>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
24010106:	68fb      	ldr	r3, [r7, #12]
24010108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401010a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2401010e:	68fb      	ldr	r3, [r7, #12]
24010110:	669a      	str	r2, [r3, #104]	; 0x68

        (void) HAL_MDMA_Abort(hmdma); /* if timeout then abort the current transfer */
24010112:	68f8      	ldr	r0, [r7, #12]
24010114:	f7ff feec 	bl	2400fef0 <HAL_MDMA_Abort>
            - Clear all transfer flags
            - Unlock
            - Set the State
        */

        return HAL_ERROR;
24010118:	2301      	movs	r3, #1
2401011a:	e031      	b.n	24010180 <HAL_MDMA_PollForTransfer+0x18c>
  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
2401011c:	68fb      	ldr	r3, [r7, #12]
2401011e:	681b      	ldr	r3, [r3, #0]
24010120:	681a      	ldr	r2, [r3, #0]
24010122:	69fb      	ldr	r3, [r7, #28]
24010124:	4013      	ands	r3, r2
24010126:	2b00      	cmp	r3, #0
24010128:	d090      	beq.n	2401004c <HAL_MDMA_PollForTransfer+0x58>
      }
    }
  }

  /* Clear the transfer level flag */
  if(CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)
2401012a:	7afb      	ldrb	r3, [r7, #11]
2401012c:	2b01      	cmp	r3, #1
2401012e:	d104      	bne.n	2401013a <HAL_MDMA_PollForTransfer+0x146>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
24010130:	68fb      	ldr	r3, [r7, #12]
24010132:	681b      	ldr	r3, [r3, #0]
24010134:	2210      	movs	r2, #16
24010136:	605a      	str	r2, [r3, #4]
24010138:	e021      	b.n	2401017e <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_BLOCK_TRANSFER)
2401013a:	7afb      	ldrb	r3, [r7, #11]
2401013c:	2b02      	cmp	r3, #2
2401013e:	d104      	bne.n	2401014a <HAL_MDMA_PollForTransfer+0x156>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT));
24010140:	68fb      	ldr	r3, [r7, #12]
24010142:	681b      	ldr	r3, [r3, #0]
24010144:	2218      	movs	r2, #24
24010146:	605a      	str	r2, [r3, #4]
24010148:	e019      	b.n	2401017e <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_REPEAT_BLOCK_TRANSFER)
2401014a:	7afb      	ldrb	r3, [r7, #11]
2401014c:	2b03      	cmp	r3, #3
2401014e:	d104      	bne.n	2401015a <HAL_MDMA_PollForTransfer+0x166>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT | MDMA_FLAG_BRT));
24010150:	68fb      	ldr	r3, [r7, #12]
24010152:	681b      	ldr	r3, [r3, #0]
24010154:	221c      	movs	r2, #28
24010156:	605a      	str	r2, [r3, #4]
24010158:	e011      	b.n	2401017e <HAL_MDMA_PollForTransfer+0x18a>
  }
  else if(CompleteLevel == HAL_MDMA_FULL_TRANSFER)
2401015a:	7afb      	ldrb	r3, [r7, #11]
2401015c:	2b00      	cmp	r3, #0
2401015e:	d10c      	bne.n	2401017a <HAL_MDMA_PollForTransfer+0x186>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC | MDMA_FLAG_CTC));
24010160:	68fb      	ldr	r3, [r7, #12]
24010162:	681b      	ldr	r3, [r3, #0]
24010164:	221e      	movs	r2, #30
24010166:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24010168:	68fb      	ldr	r3, [r7, #12]
2401016a:	2200      	movs	r2, #0
2401016c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24010170:	68fb      	ldr	r3, [r7, #12]
24010172:	2201      	movs	r2, #1
24010174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24010178:	e001      	b.n	2401017e <HAL_MDMA_PollForTransfer+0x18a>
  }
  else
  {
    return HAL_ERROR;
2401017a:	2301      	movs	r3, #1
2401017c:	e000      	b.n	24010180 <HAL_MDMA_PollForTransfer+0x18c>
  }

  return HAL_OK;
2401017e:	2300      	movs	r3, #0
}
24010180:	4618      	mov	r0, r3
24010182:	3720      	adds	r7, #32
24010184:	46bd      	mov	sp, r7
24010186:	bd80      	pop	{r7, pc}

24010188 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
24010188:	b480      	push	{r7}
2401018a:	b085      	sub	sp, #20
2401018c:	af00      	add	r7, sp, #0
2401018e:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010190:	687b      	ldr	r3, [r7, #4]
24010192:	2b00      	cmp	r3, #0
24010194:	d101      	bne.n	2401019a <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
24010196:	2301      	movs	r3, #1
24010198:	e02a      	b.n	240101f0 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
2401019a:	687b      	ldr	r3, [r7, #4]
2401019c:	681b      	ldr	r3, [r3, #0]
2401019e:	691b      	ldr	r3, [r3, #16]
240101a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
240101a4:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
240101a6:	687b      	ldr	r3, [r7, #4]
240101a8:	681b      	ldr	r3, [r3, #0]
240101aa:	68db      	ldr	r3, [r3, #12]
240101ac:	f003 0301 	and.w	r3, r3, #1
240101b0:	2b00      	cmp	r3, #0
240101b2:	d104      	bne.n	240101be <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
240101b4:	687b      	ldr	r3, [r7, #4]
240101b6:	2280      	movs	r2, #128	; 0x80
240101b8:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
240101ba:	2301      	movs	r3, #1
240101bc:	e018      	b.n	240101f0 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
240101be:	687b      	ldr	r3, [r7, #4]
240101c0:	681b      	ldr	r3, [r3, #0]
240101c2:	681b      	ldr	r3, [r3, #0]
240101c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240101c8:	2b00      	cmp	r3, #0
240101ca:	d102      	bne.n	240101d2 <HAL_MDMA_GenerateSWRequest+0x4a>
240101cc:	68fb      	ldr	r3, [r7, #12]
240101ce:	2b00      	cmp	r3, #0
240101d0:	d105      	bne.n	240101de <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
240101d2:	687b      	ldr	r3, [r7, #4]
240101d4:	f44f 7280 	mov.w	r2, #256	; 0x100
240101d8:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
240101da:	2301      	movs	r3, #1
240101dc:	e008      	b.n	240101f0 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
240101de:	687b      	ldr	r3, [r7, #4]
240101e0:	681b      	ldr	r3, [r3, #0]
240101e2:	68da      	ldr	r2, [r3, #12]
240101e4:	687b      	ldr	r3, [r7, #4]
240101e6:	681b      	ldr	r3, [r3, #0]
240101e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240101ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
240101ee:	2300      	movs	r3, #0
  }
}
240101f0:	4618      	mov	r0, r3
240101f2:	3714      	adds	r7, #20
240101f4:	46bd      	mov	sp, r7
240101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
240101fa:	4770      	bx	lr

240101fc <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
240101fc:	b580      	push	{r7, lr}
240101fe:	b086      	sub	sp, #24
24010200:	af00      	add	r7, sp, #0
24010202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
24010204:	2300      	movs	r3, #0
24010206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
24010208:	4b91      	ldr	r3, [pc, #580]	; (24010450 <HAL_MDMA_IRQHandler+0x254>)
2401020a:	681b      	ldr	r3, [r3, #0]
2401020c:	4a91      	ldr	r2, [pc, #580]	; (24010454 <HAL_MDMA_IRQHandler+0x258>)
2401020e:	fba2 2303 	umull	r2, r3, r2, r3
24010212:	0a9b      	lsrs	r3, r3, #10
24010214:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
24010216:	687b      	ldr	r3, [r7, #4]
24010218:	681b      	ldr	r3, [r3, #0]
2401021a:	461a      	mov	r2, r3
2401021c:	4b8e      	ldr	r3, [pc, #568]	; (24010458 <HAL_MDMA_IRQHandler+0x25c>)
2401021e:	4413      	add	r3, r2
24010220:	099b      	lsrs	r3, r3, #6
24010222:	f003 031f 	and.w	r3, r3, #31
24010226:	2201      	movs	r2, #1
24010228:	fa02 f303 	lsl.w	r3, r2, r3
2401022c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
2401022e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
24010232:	681a      	ldr	r2, [r3, #0]
24010234:	693b      	ldr	r3, [r7, #16]
24010236:	4013      	ands	r3, r2
24010238:	2b00      	cmp	r3, #0
2401023a:	f000 812d 	beq.w	24010498 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
2401023e:	687b      	ldr	r3, [r7, #4]
24010240:	681b      	ldr	r3, [r3, #0]
24010242:	681b      	ldr	r3, [r3, #0]
24010244:	f003 0301 	and.w	r3, r3, #1
24010248:	2b00      	cmp	r3, #0
2401024a:	d054      	beq.n	240102f6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
2401024c:	687b      	ldr	r3, [r7, #4]
2401024e:	681b      	ldr	r3, [r3, #0]
24010250:	68db      	ldr	r3, [r3, #12]
24010252:	f003 0302 	and.w	r3, r3, #2
24010256:	2b00      	cmp	r3, #0
24010258:	d04d      	beq.n	240102f6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
2401025a:	687b      	ldr	r3, [r7, #4]
2401025c:	681b      	ldr	r3, [r3, #0]
2401025e:	68da      	ldr	r2, [r3, #12]
24010260:	687b      	ldr	r3, [r7, #4]
24010262:	681b      	ldr	r3, [r3, #0]
24010264:	f022 0202 	bic.w	r2, r2, #2
24010268:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
2401026a:	687b      	ldr	r3, [r7, #4]
2401026c:	681b      	ldr	r3, [r3, #0]
2401026e:	689b      	ldr	r3, [r3, #8]
24010270:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
24010272:	68fb      	ldr	r3, [r7, #12]
24010274:	f003 0380 	and.w	r3, r3, #128	; 0x80
24010278:	2b00      	cmp	r3, #0
2401027a:	d106      	bne.n	2401028a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
2401027c:	687b      	ldr	r3, [r7, #4]
2401027e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010280:	f043 0201 	orr.w	r2, r3, #1
24010284:	687b      	ldr	r3, [r7, #4]
24010286:	669a      	str	r2, [r3, #104]	; 0x68
24010288:	e005      	b.n	24010296 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
2401028a:	687b      	ldr	r3, [r7, #4]
2401028c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401028e:	f043 0202 	orr.w	r2, r3, #2
24010292:	687b      	ldr	r3, [r7, #4]
24010294:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
24010296:	68fb      	ldr	r3, [r7, #12]
24010298:	f403 7300 	and.w	r3, r3, #512	; 0x200
2401029c:	2b00      	cmp	r3, #0
2401029e:	d005      	beq.n	240102ac <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
240102a0:	687b      	ldr	r3, [r7, #4]
240102a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240102a4:	f043 0204 	orr.w	r2, r3, #4
240102a8:	687b      	ldr	r3, [r7, #4]
240102aa:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
240102ac:	68fb      	ldr	r3, [r7, #12]
240102ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
240102b2:	2b00      	cmp	r3, #0
240102b4:	d005      	beq.n	240102c2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
240102b6:	687b      	ldr	r3, [r7, #4]
240102b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240102ba:	f043 0208 	orr.w	r2, r3, #8
240102be:	687b      	ldr	r3, [r7, #4]
240102c0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
240102c2:	68fb      	ldr	r3, [r7, #12]
240102c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
240102c8:	2b00      	cmp	r3, #0
240102ca:	d005      	beq.n	240102d8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
240102cc:	687b      	ldr	r3, [r7, #4]
240102ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240102d0:	f043 0210 	orr.w	r2, r3, #16
240102d4:	687b      	ldr	r3, [r7, #4]
240102d6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
240102d8:	68fb      	ldr	r3, [r7, #12]
240102da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
240102de:	2b00      	cmp	r3, #0
240102e0:	d005      	beq.n	240102ee <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
240102e2:	687b      	ldr	r3, [r7, #4]
240102e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240102e6:	f043 0220 	orr.w	r2, r3, #32
240102ea:	687b      	ldr	r3, [r7, #4]
240102ec:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
240102ee:	687b      	ldr	r3, [r7, #4]
240102f0:	681b      	ldr	r3, [r3, #0]
240102f2:	2201      	movs	r2, #1
240102f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
240102f6:	687b      	ldr	r3, [r7, #4]
240102f8:	681b      	ldr	r3, [r3, #0]
240102fa:	681b      	ldr	r3, [r3, #0]
240102fc:	f003 0310 	and.w	r3, r3, #16
24010300:	2b00      	cmp	r3, #0
24010302:	d012      	beq.n	2401032a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
24010304:	687b      	ldr	r3, [r7, #4]
24010306:	681b      	ldr	r3, [r3, #0]
24010308:	68db      	ldr	r3, [r3, #12]
2401030a:	f003 0320 	and.w	r3, r3, #32
2401030e:	2b00      	cmp	r3, #0
24010310:	d00b      	beq.n	2401032a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
24010312:	687b      	ldr	r3, [r7, #4]
24010314:	681b      	ldr	r3, [r3, #0]
24010316:	2210      	movs	r2, #16
24010318:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
2401031a:	687b      	ldr	r3, [r7, #4]
2401031c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2401031e:	2b00      	cmp	r3, #0
24010320:	d003      	beq.n	2401032a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
24010322:	687b      	ldr	r3, [r7, #4]
24010324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24010326:	6878      	ldr	r0, [r7, #4]
24010328:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
2401032a:	687b      	ldr	r3, [r7, #4]
2401032c:	681b      	ldr	r3, [r3, #0]
2401032e:	681b      	ldr	r3, [r3, #0]
24010330:	f003 0308 	and.w	r3, r3, #8
24010334:	2b00      	cmp	r3, #0
24010336:	d012      	beq.n	2401035e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
24010338:	687b      	ldr	r3, [r7, #4]
2401033a:	681b      	ldr	r3, [r3, #0]
2401033c:	68db      	ldr	r3, [r3, #12]
2401033e:	f003 0310 	and.w	r3, r3, #16
24010342:	2b00      	cmp	r3, #0
24010344:	d00b      	beq.n	2401035e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
24010346:	687b      	ldr	r3, [r7, #4]
24010348:	681b      	ldr	r3, [r3, #0]
2401034a:	2208      	movs	r2, #8
2401034c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
2401034e:	687b      	ldr	r3, [r7, #4]
24010350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24010352:	2b00      	cmp	r3, #0
24010354:	d003      	beq.n	2401035e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
24010356:	687b      	ldr	r3, [r7, #4]
24010358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401035a:	6878      	ldr	r0, [r7, #4]
2401035c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
2401035e:	687b      	ldr	r3, [r7, #4]
24010360:	681b      	ldr	r3, [r3, #0]
24010362:	681b      	ldr	r3, [r3, #0]
24010364:	f003 0304 	and.w	r3, r3, #4
24010368:	2b00      	cmp	r3, #0
2401036a:	d012      	beq.n	24010392 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
2401036c:	687b      	ldr	r3, [r7, #4]
2401036e:	681b      	ldr	r3, [r3, #0]
24010370:	68db      	ldr	r3, [r3, #12]
24010372:	f003 0308 	and.w	r3, r3, #8
24010376:	2b00      	cmp	r3, #0
24010378:	d00b      	beq.n	24010392 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
2401037a:	687b      	ldr	r3, [r7, #4]
2401037c:	681b      	ldr	r3, [r3, #0]
2401037e:	2204      	movs	r2, #4
24010380:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
24010382:	687b      	ldr	r3, [r7, #4]
24010384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24010386:	2b00      	cmp	r3, #0
24010388:	d003      	beq.n	24010392 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
2401038a:	687b      	ldr	r3, [r7, #4]
2401038c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401038e:	6878      	ldr	r0, [r7, #4]
24010390:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
24010392:	687b      	ldr	r3, [r7, #4]
24010394:	681b      	ldr	r3, [r3, #0]
24010396:	681b      	ldr	r3, [r3, #0]
24010398:	f003 0302 	and.w	r3, r3, #2
2401039c:	2b00      	cmp	r3, #0
2401039e:	d039      	beq.n	24010414 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
240103a0:	687b      	ldr	r3, [r7, #4]
240103a2:	681b      	ldr	r3, [r3, #0]
240103a4:	68db      	ldr	r3, [r3, #12]
240103a6:	f003 0304 	and.w	r3, r3, #4
240103aa:	2b00      	cmp	r3, #0
240103ac:	d032      	beq.n	24010414 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
240103ae:	687b      	ldr	r3, [r7, #4]
240103b0:	681b      	ldr	r3, [r3, #0]
240103b2:	68da      	ldr	r2, [r3, #12]
240103b4:	687b      	ldr	r3, [r7, #4]
240103b6:	681b      	ldr	r3, [r3, #0]
240103b8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
240103bc:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
240103be:	687b      	ldr	r3, [r7, #4]
240103c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240103c4:	b2db      	uxtb	r3, r3
240103c6:	2b04      	cmp	r3, #4
240103c8:	d110      	bne.n	240103ec <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
240103ca:	687b      	ldr	r3, [r7, #4]
240103cc:	2200      	movs	r2, #0
240103ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
240103d2:	687b      	ldr	r3, [r7, #4]
240103d4:	2201      	movs	r2, #1
240103d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
240103da:	687b      	ldr	r3, [r7, #4]
240103dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240103de:	2b00      	cmp	r3, #0
240103e0:	d05c      	beq.n	2401049c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
240103e2:	687b      	ldr	r3, [r7, #4]
240103e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240103e6:	6878      	ldr	r0, [r7, #4]
240103e8:	4798      	blx	r3
        }
        return;
240103ea:	e057      	b.n	2401049c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
240103ec:	687b      	ldr	r3, [r7, #4]
240103ee:	681b      	ldr	r3, [r3, #0]
240103f0:	2202      	movs	r2, #2
240103f2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
240103f4:	687b      	ldr	r3, [r7, #4]
240103f6:	2200      	movs	r2, #0
240103f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
240103fc:	687b      	ldr	r3, [r7, #4]
240103fe:	2201      	movs	r2, #1
24010400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
24010404:	687b      	ldr	r3, [r7, #4]
24010406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24010408:	2b00      	cmp	r3, #0
2401040a:	d003      	beq.n	24010414 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
2401040c:	687b      	ldr	r3, [r7, #4]
2401040e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24010410:	6878      	ldr	r0, [r7, #4]
24010412:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
24010414:	687b      	ldr	r3, [r7, #4]
24010416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24010418:	2b00      	cmp	r3, #0
2401041a:	d040      	beq.n	2401049e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
2401041c:	687b      	ldr	r3, [r7, #4]
2401041e:	2204      	movs	r2, #4
24010420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
24010424:	687b      	ldr	r3, [r7, #4]
24010426:	681b      	ldr	r3, [r3, #0]
24010428:	68da      	ldr	r2, [r3, #12]
2401042a:	687b      	ldr	r3, [r7, #4]
2401042c:	681b      	ldr	r3, [r3, #0]
2401042e:	f022 0201 	bic.w	r2, r2, #1
24010432:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
24010434:	68bb      	ldr	r3, [r7, #8]
24010436:	3301      	adds	r3, #1
24010438:	60bb      	str	r3, [r7, #8]
2401043a:	697a      	ldr	r2, [r7, #20]
2401043c:	429a      	cmp	r2, r3
2401043e:	d30d      	bcc.n	2401045c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
24010440:	687b      	ldr	r3, [r7, #4]
24010442:	681b      	ldr	r3, [r3, #0]
24010444:	68db      	ldr	r3, [r3, #12]
24010446:	f003 0301 	and.w	r3, r3, #1
2401044a:	2b00      	cmp	r3, #0
2401044c:	d1f2      	bne.n	24010434 <HAL_MDMA_IRQHandler+0x238>
2401044e:	e006      	b.n	2401045e <HAL_MDMA_IRQHandler+0x262>
24010450:	240004b0 	.word	0x240004b0
24010454:	1b4e81b5 	.word	0x1b4e81b5
24010458:	adffffc0 	.word	0xadffffc0
        break;
2401045c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
2401045e:	687b      	ldr	r3, [r7, #4]
24010460:	2200      	movs	r2, #0
24010462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24010466:	687b      	ldr	r3, [r7, #4]
24010468:	681b      	ldr	r3, [r3, #0]
2401046a:	68db      	ldr	r3, [r3, #12]
2401046c:	f003 0301 	and.w	r3, r3, #1
24010470:	2b00      	cmp	r3, #0
24010472:	d004      	beq.n	2401047e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
24010474:	687b      	ldr	r3, [r7, #4]
24010476:	2203      	movs	r2, #3
24010478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
2401047c:	e003      	b.n	24010486 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
2401047e:	687b      	ldr	r3, [r7, #4]
24010480:	2201      	movs	r2, #1
24010482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
24010486:	687b      	ldr	r3, [r7, #4]
24010488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401048a:	2b00      	cmp	r3, #0
2401048c:	d007      	beq.n	2401049e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
2401048e:	687b      	ldr	r3, [r7, #4]
24010490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24010492:	6878      	ldr	r0, [r7, #4]
24010494:	4798      	blx	r3
24010496:	e002      	b.n	2401049e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
24010498:	bf00      	nop
2401049a:	e000      	b.n	2401049e <HAL_MDMA_IRQHandler+0x2a2>
        return;
2401049c:	bf00      	nop
    }
  }
}
2401049e:	3718      	adds	r7, #24
240104a0:	46bd      	mov	sp, r7
240104a2:	bd80      	pop	{r7, pc}

240104a4 <HAL_MDMA_GetState>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL state
  */
HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma)
{
240104a4:	b480      	push	{r7}
240104a6:	b083      	sub	sp, #12
240104a8:	af00      	add	r7, sp, #0
240104aa:	6078      	str	r0, [r7, #4]
  return hmdma->State;
240104ac:	687b      	ldr	r3, [r7, #4]
240104ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240104b2:	b2db      	uxtb	r3, r3
}
240104b4:	4618      	mov	r0, r3
240104b6:	370c      	adds	r7, #12
240104b8:	46bd      	mov	sp, r7
240104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
240104be:	4770      	bx	lr

240104c0 <HAL_MDMA_GetError>:
  * @param  hmdma : pointer to a MDMA_HandleTypeDef structure that contains
  *              the configuration information for the specified MDMA Channel.
  * @retval MDMA Error Code
  */
uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma)
{
240104c0:	b480      	push	{r7}
240104c2:	b083      	sub	sp, #12
240104c4:	af00      	add	r7, sp, #0
240104c6:	6078      	str	r0, [r7, #4]
  return hmdma->ErrorCode;
240104c8:	687b      	ldr	r3, [r7, #4]
240104ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
240104cc:	4618      	mov	r0, r3
240104ce:	370c      	adds	r7, #12
240104d0:	46bd      	mov	sp, r7
240104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
240104d6:	4770      	bx	lr

240104d8 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
240104d8:	b480      	push	{r7}
240104da:	b087      	sub	sp, #28
240104dc:	af00      	add	r7, sp, #0
240104de:	60f8      	str	r0, [r7, #12]
240104e0:	60b9      	str	r1, [r7, #8]
240104e2:	607a      	str	r2, [r7, #4]
240104e4:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
240104e6:	68fb      	ldr	r3, [r7, #12]
240104e8:	681b      	ldr	r3, [r3, #0]
240104ea:	695a      	ldr	r2, [r3, #20]
240104ec:	4b31      	ldr	r3, [pc, #196]	; (240105b4 <MDMA_SetConfig+0xdc>)
240104ee:	4013      	ands	r3, r2
240104f0:	683a      	ldr	r2, [r7, #0]
240104f2:	f3c2 0110 	ubfx	r1, r2, #0, #17
240104f6:	68fa      	ldr	r2, [r7, #12]
240104f8:	6812      	ldr	r2, [r2, #0]
240104fa:	430b      	orrs	r3, r1
240104fc:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
240104fe:	68fb      	ldr	r3, [r7, #12]
24010500:	681b      	ldr	r3, [r3, #0]
24010502:	695b      	ldr	r3, [r3, #20]
24010504:	f3c3 0113 	ubfx	r1, r3, #0, #20
24010508:	6a3b      	ldr	r3, [r7, #32]
2401050a:	3b01      	subs	r3, #1
2401050c:	051a      	lsls	r2, r3, #20
2401050e:	68fb      	ldr	r3, [r7, #12]
24010510:	681b      	ldr	r3, [r3, #0]
24010512:	430a      	orrs	r2, r1
24010514:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
24010516:	68fb      	ldr	r3, [r7, #12]
24010518:	681b      	ldr	r3, [r3, #0]
2401051a:	221f      	movs	r2, #31
2401051c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
2401051e:	68fb      	ldr	r3, [r7, #12]
24010520:	681b      	ldr	r3, [r3, #0]
24010522:	687a      	ldr	r2, [r7, #4]
24010524:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
24010526:	68fb      	ldr	r3, [r7, #12]
24010528:	681b      	ldr	r3, [r3, #0]
2401052a:	68ba      	ldr	r2, [r7, #8]
2401052c:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
2401052e:	68bb      	ldr	r3, [r7, #8]
24010530:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24010534:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24010536:	697b      	ldr	r3, [r7, #20]
24010538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401053c:	d002      	beq.n	24010544 <MDMA_SetConfig+0x6c>
2401053e:	697b      	ldr	r3, [r7, #20]
24010540:	2b00      	cmp	r3, #0
24010542:	d108      	bne.n	24010556 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
24010544:	68fb      	ldr	r3, [r7, #12]
24010546:	681b      	ldr	r3, [r3, #0]
24010548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2401054a:	68fb      	ldr	r3, [r7, #12]
2401054c:	681b      	ldr	r3, [r3, #0]
2401054e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24010552:	629a      	str	r2, [r3, #40]	; 0x28
24010554:	e007      	b.n	24010566 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
24010556:	68fb      	ldr	r3, [r7, #12]
24010558:	681b      	ldr	r3, [r3, #0]
2401055a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2401055c:	68fb      	ldr	r3, [r7, #12]
2401055e:	681b      	ldr	r3, [r3, #0]
24010560:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24010564:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
24010566:	687b      	ldr	r3, [r7, #4]
24010568:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
2401056c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
2401056e:	697b      	ldr	r3, [r7, #20]
24010570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24010574:	d002      	beq.n	2401057c <MDMA_SetConfig+0xa4>
24010576:	697b      	ldr	r3, [r7, #20]
24010578:	2b00      	cmp	r3, #0
2401057a:	d108      	bne.n	2401058e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
2401057c:	68fb      	ldr	r3, [r7, #12]
2401057e:	681b      	ldr	r3, [r3, #0]
24010580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010582:	68fb      	ldr	r3, [r7, #12]
24010584:	681b      	ldr	r3, [r3, #0]
24010586:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2401058a:	629a      	str	r2, [r3, #40]	; 0x28
2401058c:	e007      	b.n	2401059e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
2401058e:	68fb      	ldr	r3, [r7, #12]
24010590:	681b      	ldr	r3, [r3, #0]
24010592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010594:	68fb      	ldr	r3, [r7, #12]
24010596:	681b      	ldr	r3, [r3, #0]
24010598:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2401059c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
2401059e:	68fb      	ldr	r3, [r7, #12]
240105a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
240105a2:	68fb      	ldr	r3, [r7, #12]
240105a4:	681b      	ldr	r3, [r3, #0]
240105a6:	625a      	str	r2, [r3, #36]	; 0x24
}
240105a8:	bf00      	nop
240105aa:	371c      	adds	r7, #28
240105ac:	46bd      	mov	sp, r7
240105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240105b2:	4770      	bx	lr
240105b4:	fffe0000 	.word	0xfffe0000

240105b8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
240105b8:	b480      	push	{r7}
240105ba:	b085      	sub	sp, #20
240105bc:	af00      	add	r7, sp, #0
240105be:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
240105c0:	687b      	ldr	r3, [r7, #4]
240105c2:	68d9      	ldr	r1, [r3, #12]
240105c4:	687b      	ldr	r3, [r7, #4]
240105c6:	691a      	ldr	r2, [r3, #16]
240105c8:	687b      	ldr	r3, [r7, #4]
240105ca:	681b      	ldr	r3, [r3, #0]
240105cc:	430a      	orrs	r2, r1
240105ce:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
240105d0:	687b      	ldr	r3, [r7, #4]
240105d2:	695a      	ldr	r2, [r3, #20]
240105d4:	687b      	ldr	r3, [r7, #4]
240105d6:	699b      	ldr	r3, [r3, #24]
240105d8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
240105da:	687b      	ldr	r3, [r7, #4]
240105dc:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
240105de:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
240105e0:	687b      	ldr	r3, [r7, #4]
240105e2:	6a1b      	ldr	r3, [r3, #32]
240105e4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
240105e6:	687b      	ldr	r3, [r7, #4]
240105e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
240105ea:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
240105ec:	687b      	ldr	r3, [r7, #4]
240105ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240105f0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
240105f2:	687b      	ldr	r3, [r7, #4]
240105f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
240105f6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
240105f8:	687b      	ldr	r3, [r7, #4]
240105fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240105fc:	3b01      	subs	r3, #1
240105fe:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
24010600:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
24010604:	687b      	ldr	r3, [r7, #4]
24010606:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24010608:	687b      	ldr	r3, [r7, #4]
2401060a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
2401060c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
2401060e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
24010610:	687b      	ldr	r3, [r7, #4]
24010612:	685b      	ldr	r3, [r3, #4]
24010614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24010618:	d107      	bne.n	2401062a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
2401061a:	687b      	ldr	r3, [r7, #4]
2401061c:	681b      	ldr	r3, [r3, #0]
2401061e:	691a      	ldr	r2, [r3, #16]
24010620:	687b      	ldr	r3, [r7, #4]
24010622:	681b      	ldr	r3, [r3, #0]
24010624:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
24010628:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
2401062a:	687b      	ldr	r3, [r7, #4]
2401062c:	681b      	ldr	r3, [r3, #0]
2401062e:	2200      	movs	r2, #0
24010630:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
24010632:	687b      	ldr	r3, [r7, #4]
24010634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010636:	2b00      	cmp	r3, #0
24010638:	da11      	bge.n	2401065e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
2401063a:	687b      	ldr	r3, [r7, #4]
2401063c:	681b      	ldr	r3, [r3, #0]
2401063e:	695a      	ldr	r2, [r3, #20]
24010640:	687b      	ldr	r3, [r7, #4]
24010642:	681b      	ldr	r3, [r3, #0]
24010644:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24010648:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
2401064a:	687b      	ldr	r3, [r7, #4]
2401064c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401064e:	425b      	negs	r3, r3
24010650:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
24010652:	687b      	ldr	r3, [r7, #4]
24010654:	681b      	ldr	r3, [r3, #0]
24010656:	68fa      	ldr	r2, [r7, #12]
24010658:	b292      	uxth	r2, r2
2401065a:	621a      	str	r2, [r3, #32]
2401065c:	e006      	b.n	2401066c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
2401065e:	687b      	ldr	r3, [r7, #4]
24010660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24010662:	461a      	mov	r2, r3
24010664:	687b      	ldr	r3, [r7, #4]
24010666:	681b      	ldr	r3, [r3, #0]
24010668:	b292      	uxth	r2, r2
2401066a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
2401066c:	687b      	ldr	r3, [r7, #4]
2401066e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010670:	2b00      	cmp	r3, #0
24010672:	da15      	bge.n	240106a0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
24010674:	687b      	ldr	r3, [r7, #4]
24010676:	681b      	ldr	r3, [r3, #0]
24010678:	695a      	ldr	r2, [r3, #20]
2401067a:	687b      	ldr	r3, [r7, #4]
2401067c:	681b      	ldr	r3, [r3, #0]
2401067e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
24010682:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
24010684:	687b      	ldr	r3, [r7, #4]
24010686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24010688:	425b      	negs	r3, r3
2401068a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
2401068c:	687b      	ldr	r3, [r7, #4]
2401068e:	681b      	ldr	r3, [r3, #0]
24010690:	6a19      	ldr	r1, [r3, #32]
24010692:	68fb      	ldr	r3, [r7, #12]
24010694:	041a      	lsls	r2, r3, #16
24010696:	687b      	ldr	r3, [r7, #4]
24010698:	681b      	ldr	r3, [r3, #0]
2401069a:	430a      	orrs	r2, r1
2401069c:	621a      	str	r2, [r3, #32]
2401069e:	e009      	b.n	240106b4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
240106a0:	687b      	ldr	r3, [r7, #4]
240106a2:	681b      	ldr	r3, [r3, #0]
240106a4:	6a19      	ldr	r1, [r3, #32]
240106a6:	687b      	ldr	r3, [r7, #4]
240106a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240106aa:	041a      	lsls	r2, r3, #16
240106ac:	687b      	ldr	r3, [r7, #4]
240106ae:	681b      	ldr	r3, [r3, #0]
240106b0:	430a      	orrs	r2, r1
240106b2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
240106b4:	687b      	ldr	r3, [r7, #4]
240106b6:	685b      	ldr	r3, [r3, #4]
240106b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240106bc:	d006      	beq.n	240106cc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
240106be:	687b      	ldr	r3, [r7, #4]
240106c0:	685a      	ldr	r2, [r3, #4]
240106c2:	687b      	ldr	r3, [r7, #4]
240106c4:	681b      	ldr	r3, [r3, #0]
240106c6:	b2d2      	uxtb	r2, r2
240106c8:	629a      	str	r2, [r3, #40]	; 0x28
240106ca:	e003      	b.n	240106d4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
240106cc:	687b      	ldr	r3, [r7, #4]
240106ce:	681b      	ldr	r3, [r3, #0]
240106d0:	2200      	movs	r2, #0
240106d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
240106d4:	687b      	ldr	r3, [r7, #4]
240106d6:	681b      	ldr	r3, [r3, #0]
240106d8:	2200      	movs	r2, #0
240106da:	625a      	str	r2, [r3, #36]	; 0x24
}
240106dc:	bf00      	nop
240106de:	3714      	adds	r7, #20
240106e0:	46bd      	mov	sp, r7
240106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240106e6:	4770      	bx	lr

240106e8 <HAL_PWR_DeInit>:
  *         The prototype is kept just to maintain compatibility with other
  *         products.
  * @retval None.
  */
void HAL_PWR_DeInit (void)
{
240106e8:	b480      	push	{r7}
240106ea:	af00      	add	r7, sp, #0
}
240106ec:	bf00      	nop
240106ee:	46bd      	mov	sp, r7
240106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240106f4:	4770      	bx	lr
	...

240106f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
240106f8:	b480      	push	{r7}
240106fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
240106fc:	4b05      	ldr	r3, [pc, #20]	; (24010714 <HAL_PWR_EnableBkUpAccess+0x1c>)
240106fe:	681b      	ldr	r3, [r3, #0]
24010700:	4a04      	ldr	r2, [pc, #16]	; (24010714 <HAL_PWR_EnableBkUpAccess+0x1c>)
24010702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24010706:	6013      	str	r3, [r2, #0]
}
24010708:	bf00      	nop
2401070a:	46bd      	mov	sp, r7
2401070c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010710:	4770      	bx	lr
24010712:	bf00      	nop
24010714:	58024800 	.word	0x58024800

24010718 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
24010718:	b480      	push	{r7}
2401071a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
2401071c:	4b05      	ldr	r3, [pc, #20]	; (24010734 <HAL_PWR_DisableBkUpAccess+0x1c>)
2401071e:	681b      	ldr	r3, [r3, #0]
24010720:	4a04      	ldr	r2, [pc, #16]	; (24010734 <HAL_PWR_DisableBkUpAccess+0x1c>)
24010722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24010726:	6013      	str	r3, [r2, #0]
}
24010728:	bf00      	nop
2401072a:	46bd      	mov	sp, r7
2401072c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010730:	4770      	bx	lr
24010732:	bf00      	nop
24010734:	58024800 	.word	0x58024800

24010738 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
24010738:	b480      	push	{r7}
2401073a:	b083      	sub	sp, #12
2401073c:	af00      	add	r7, sp, #0
2401073e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
24010740:	687b      	ldr	r3, [r7, #4]
24010742:	2b00      	cmp	r3, #0
24010744:	d069      	beq.n	2401081a <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
24010746:	4b38      	ldr	r3, [pc, #224]	; (24010828 <HAL_PWR_ConfigPVD+0xf0>)
24010748:	681b      	ldr	r3, [r3, #0]
2401074a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
2401074e:	687b      	ldr	r3, [r7, #4]
24010750:	681b      	ldr	r3, [r3, #0]
24010752:	4935      	ldr	r1, [pc, #212]	; (24010828 <HAL_PWR_ConfigPVD+0xf0>)
24010754:	4313      	orrs	r3, r2
24010756:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
24010758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2401075c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24010760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24010768:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
2401076c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24010774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401077c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
24010780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010784:	681b      	ldr	r3, [r3, #0]
24010786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401078a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401078e:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
24010790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010794:	685b      	ldr	r3, [r3, #4]
24010796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401079a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401079e:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
240107a0:	687b      	ldr	r3, [r7, #4]
240107a2:	685b      	ldr	r3, [r3, #4]
240107a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240107a8:	2b00      	cmp	r3, #0
240107aa:	d009      	beq.n	240107c0 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
240107ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240107b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240107b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240107b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240107bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
240107c0:	687b      	ldr	r3, [r7, #4]
240107c2:	685b      	ldr	r3, [r3, #4]
240107c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240107c8:	2b00      	cmp	r3, #0
240107ca:	d009      	beq.n	240107e0 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
240107cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240107d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240107d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240107d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240107dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
240107e0:	687b      	ldr	r3, [r7, #4]
240107e2:	685b      	ldr	r3, [r3, #4]
240107e4:	f003 0301 	and.w	r3, r3, #1
240107e8:	2b00      	cmp	r3, #0
240107ea:	d007      	beq.n	240107fc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
240107ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240107f0:	681b      	ldr	r3, [r3, #0]
240107f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240107f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240107fa:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
240107fc:	687b      	ldr	r3, [r7, #4]
240107fe:	685b      	ldr	r3, [r3, #4]
24010800:	f003 0302 	and.w	r3, r3, #2
24010804:	2b00      	cmp	r3, #0
24010806:	d009      	beq.n	2401081c <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
24010808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2401080c:	685b      	ldr	r3, [r3, #4]
2401080e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24010816:	6053      	str	r3, [r2, #4]
24010818:	e000      	b.n	2401081c <HAL_PWR_ConfigPVD+0xe4>
    return;
2401081a:	bf00      	nop
  }
}
2401081c:	370c      	adds	r7, #12
2401081e:	46bd      	mov	sp, r7
24010820:	f85d 7b04 	ldr.w	r7, [sp], #4
24010824:	4770      	bx	lr
24010826:	bf00      	nop
24010828:	58024800 	.word	0x58024800

2401082c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
2401082c:	b480      	push	{r7}
2401082e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
24010830:	4b05      	ldr	r3, [pc, #20]	; (24010848 <HAL_PWR_EnablePVD+0x1c>)
24010832:	681b      	ldr	r3, [r3, #0]
24010834:	4a04      	ldr	r2, [pc, #16]	; (24010848 <HAL_PWR_EnablePVD+0x1c>)
24010836:	f043 0310 	orr.w	r3, r3, #16
2401083a:	6013      	str	r3, [r2, #0]
}
2401083c:	bf00      	nop
2401083e:	46bd      	mov	sp, r7
24010840:	f85d 7b04 	ldr.w	r7, [sp], #4
24010844:	4770      	bx	lr
24010846:	bf00      	nop
24010848:	58024800 	.word	0x58024800

2401084c <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_DisablePVD (void)
{
2401084c:	b480      	push	{r7}
2401084e:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_PVDEN);
24010850:	4b05      	ldr	r3, [pc, #20]	; (24010868 <HAL_PWR_DisablePVD+0x1c>)
24010852:	681b      	ldr	r3, [r3, #0]
24010854:	4a04      	ldr	r2, [pc, #16]	; (24010868 <HAL_PWR_DisablePVD+0x1c>)
24010856:	f023 0310 	bic.w	r3, r3, #16
2401085a:	6013      	str	r3, [r2, #0]
}
2401085c:	bf00      	nop
2401085e:	46bd      	mov	sp, r7
24010860:	f85d 7b04 	ldr.w	r7, [sp], #4
24010864:	4770      	bx	lr
24010866:	bf00      	nop
24010868:	58024800 	.word	0x58024800

2401086c <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
2401086c:	b480      	push	{r7}
2401086e:	b083      	sub	sp, #12
24010870:	af00      	add	r7, sp, #0
24010872:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
24010874:	4b06      	ldr	r3, [pc, #24]	; (24010890 <HAL_PWR_EnableWakeUpPin+0x24>)
24010876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010878:	4b06      	ldr	r3, [pc, #24]	; (24010894 <HAL_PWR_EnableWakeUpPin+0x28>)
2401087a:	4013      	ands	r3, r2
2401087c:	4904      	ldr	r1, [pc, #16]	; (24010890 <HAL_PWR_EnableWakeUpPin+0x24>)
2401087e:	687a      	ldr	r2, [r7, #4]
24010880:	4313      	orrs	r3, r2
24010882:	628b      	str	r3, [r1, #40]	; 0x28
}
24010884:	bf00      	nop
24010886:	370c      	adds	r7, #12
24010888:	46bd      	mov	sp, r7
2401088a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401088e:	4770      	bx	lr
24010890:	58024800 	.word	0x58024800
24010894:	f000c0c0 	.word	0xf000c0c0

24010898 <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
24010898:	b480      	push	{r7}
2401089a:	b083      	sub	sp, #12
2401089c:	af00      	add	r7, sp, #0
2401089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
240108a0:	4b07      	ldr	r3, [pc, #28]	; (240108c0 <HAL_PWR_DisableWakeUpPin+0x28>)
240108a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240108a4:	687b      	ldr	r3, [r7, #4]
240108a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240108aa:	43db      	mvns	r3, r3
240108ac:	4904      	ldr	r1, [pc, #16]	; (240108c0 <HAL_PWR_DisableWakeUpPin+0x28>)
240108ae:	4013      	ands	r3, r2
240108b0:	628b      	str	r3, [r1, #40]	; 0x28
}
240108b2:	bf00      	nop
240108b4:	370c      	adds	r7, #12
240108b6:	46bd      	mov	sp, r7
240108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240108bc:	4770      	bx	lr
240108be:	bf00      	nop
240108c0:	58024800 	.word	0x58024800

240108c4 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
240108c4:	b480      	push	{r7}
240108c6:	b083      	sub	sp, #12
240108c8:	af00      	add	r7, sp, #0
240108ca:	6078      	str	r0, [r7, #4]
240108cc:	460b      	mov	r3, r1
240108ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240108d0:	4b08      	ldr	r3, [pc, #32]	; (240108f4 <HAL_PWR_EnterSLEEPMode+0x30>)
240108d2:	691b      	ldr	r3, [r3, #16]
240108d4:	4a07      	ldr	r2, [pc, #28]	; (240108f4 <HAL_PWR_EnterSLEEPMode+0x30>)
240108d6:	f023 0304 	bic.w	r3, r3, #4
240108da:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
240108dc:	78fb      	ldrb	r3, [r7, #3]
240108de:	2b01      	cmp	r3, #1
240108e0:	d101      	bne.n	240108e6 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
240108e2:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
240108e4:	e000      	b.n	240108e8 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
240108e6:	bf20      	wfe
}
240108e8:	bf00      	nop
240108ea:	370c      	adds	r7, #12
240108ec:	46bd      	mov	sp, r7
240108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
240108f2:	4770      	bx	lr
240108f4:	e000ed00 	.word	0xe000ed00

240108f8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
240108f8:	b480      	push	{r7}
240108fa:	b083      	sub	sp, #12
240108fc:	af00      	add	r7, sp, #0
240108fe:	6078      	str	r0, [r7, #4]
24010900:	460b      	mov	r3, r1
24010902:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
24010904:	4b18      	ldr	r3, [pc, #96]	; (24010968 <HAL_PWR_EnterSTOPMode+0x70>)
24010906:	681b      	ldr	r3, [r3, #0]
24010908:	f023 0201 	bic.w	r2, r3, #1
2401090c:	4916      	ldr	r1, [pc, #88]	; (24010968 <HAL_PWR_EnterSTOPMode+0x70>)
2401090e:	687b      	ldr	r3, [r7, #4]
24010910:	4313      	orrs	r3, r2
24010912:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
24010914:	4b14      	ldr	r3, [pc, #80]	; (24010968 <HAL_PWR_EnterSTOPMode+0x70>)
24010916:	691b      	ldr	r3, [r3, #16]
24010918:	4a13      	ldr	r2, [pc, #76]	; (24010968 <HAL_PWR_EnterSTOPMode+0x70>)
2401091a:	f023 0305 	bic.w	r3, r3, #5
2401091e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24010920:	4b11      	ldr	r3, [pc, #68]	; (24010968 <HAL_PWR_EnterSTOPMode+0x70>)
24010922:	691b      	ldr	r3, [r3, #16]
24010924:	4a10      	ldr	r2, [pc, #64]	; (24010968 <HAL_PWR_EnterSTOPMode+0x70>)
24010926:	f023 0302 	bic.w	r3, r3, #2
2401092a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2401092c:	4b0f      	ldr	r3, [pc, #60]	; (2401096c <HAL_PWR_EnterSTOPMode+0x74>)
2401092e:	691b      	ldr	r3, [r3, #16]
24010930:	4a0e      	ldr	r2, [pc, #56]	; (2401096c <HAL_PWR_EnterSTOPMode+0x74>)
24010932:	f043 0304 	orr.w	r3, r3, #4
24010936:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24010938:	f3bf 8f4f 	dsb	sy
}
2401093c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2401093e:	f3bf 8f6f 	isb	sy
}
24010942:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
24010944:	78fb      	ldrb	r3, [r7, #3]
24010946:	2b01      	cmp	r3, #1
24010948:	d101      	bne.n	2401094e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
2401094a:	bf30      	wfi
2401094c:	e000      	b.n	24010950 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
2401094e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24010950:	4b06      	ldr	r3, [pc, #24]	; (2401096c <HAL_PWR_EnterSTOPMode+0x74>)
24010952:	691b      	ldr	r3, [r3, #16]
24010954:	4a05      	ldr	r2, [pc, #20]	; (2401096c <HAL_PWR_EnterSTOPMode+0x74>)
24010956:	f023 0304 	bic.w	r3, r3, #4
2401095a:	6113      	str	r3, [r2, #16]
}
2401095c:	bf00      	nop
2401095e:	370c      	adds	r7, #12
24010960:	46bd      	mov	sp, r7
24010962:	f85d 7b04 	ldr.w	r7, [sp], #4
24010966:	4770      	bx	lr
24010968:	58024800 	.word	0x58024800
2401096c:	e000ed00 	.word	0xe000ed00

24010970 <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
24010970:	b480      	push	{r7}
24010972:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
24010974:	4b0e      	ldr	r3, [pc, #56]	; (240109b0 <HAL_PWR_EnterSTANDBYMode+0x40>)
24010976:	691b      	ldr	r3, [r3, #16]
24010978:	4a0d      	ldr	r2, [pc, #52]	; (240109b0 <HAL_PWR_EnterSTANDBYMode+0x40>)
2401097a:	f043 0305 	orr.w	r3, r3, #5
2401097e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24010980:	4b0b      	ldr	r3, [pc, #44]	; (240109b0 <HAL_PWR_EnterSTANDBYMode+0x40>)
24010982:	691b      	ldr	r3, [r3, #16]
24010984:	4a0a      	ldr	r2, [pc, #40]	; (240109b0 <HAL_PWR_EnterSTANDBYMode+0x40>)
24010986:	f043 0302 	orr.w	r3, r3, #2
2401098a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2401098c:	4b09      	ldr	r3, [pc, #36]	; (240109b4 <HAL_PWR_EnterSTANDBYMode+0x44>)
2401098e:	691b      	ldr	r3, [r3, #16]
24010990:	4a08      	ldr	r2, [pc, #32]	; (240109b4 <HAL_PWR_EnterSTANDBYMode+0x44>)
24010992:	f043 0304 	orr.w	r3, r3, #4
24010996:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24010998:	f3bf 8f4f 	dsb	sy
}
2401099c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2401099e:	f3bf 8f6f 	isb	sy
}
240109a2:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
240109a4:	bf30      	wfi
}
240109a6:	bf00      	nop
240109a8:	46bd      	mov	sp, r7
240109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
240109ae:	4770      	bx	lr
240109b0:	58024800 	.word	0x58024800
240109b4:	e000ed00 	.word	0xe000ed00

240109b8 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit (void)
{
240109b8:	b480      	push	{r7}
240109ba:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
240109bc:	4b05      	ldr	r3, [pc, #20]	; (240109d4 <HAL_PWR_EnableSleepOnExit+0x1c>)
240109be:	691b      	ldr	r3, [r3, #16]
240109c0:	4a04      	ldr	r2, [pc, #16]	; (240109d4 <HAL_PWR_EnableSleepOnExit+0x1c>)
240109c2:	f043 0302 	orr.w	r3, r3, #2
240109c6:	6113      	str	r3, [r2, #16]
}
240109c8:	bf00      	nop
240109ca:	46bd      	mov	sp, r7
240109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
240109d0:	4770      	bx	lr
240109d2:	bf00      	nop
240109d4:	e000ed00 	.word	0xe000ed00

240109d8 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit (void)
{
240109d8:	b480      	push	{r7}
240109da:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-Mx System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
240109dc:	4b05      	ldr	r3, [pc, #20]	; (240109f4 <HAL_PWR_DisableSleepOnExit+0x1c>)
240109de:	691b      	ldr	r3, [r3, #16]
240109e0:	4a04      	ldr	r2, [pc, #16]	; (240109f4 <HAL_PWR_DisableSleepOnExit+0x1c>)
240109e2:	f023 0302 	bic.w	r3, r3, #2
240109e6:	6113      	str	r3, [r2, #16]
}
240109e8:	bf00      	nop
240109ea:	46bd      	mov	sp, r7
240109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
240109f0:	4770      	bx	lr
240109f2:	bf00      	nop
240109f4:	e000ed00 	.word	0xe000ed00

240109f8 <HAL_PWR_EnableSEVOnPend>:
  *         pending event / interrupt even if it's disabled or has insufficient
  *         priority to cause exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_EnableSEVOnPend (void)
{
240109f8:	b480      	push	{r7}
240109fa:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
240109fc:	4b05      	ldr	r3, [pc, #20]	; (24010a14 <HAL_PWR_EnableSEVOnPend+0x1c>)
240109fe:	691b      	ldr	r3, [r3, #16]
24010a00:	4a04      	ldr	r2, [pc, #16]	; (24010a14 <HAL_PWR_EnableSEVOnPend+0x1c>)
24010a02:	f043 0310 	orr.w	r3, r3, #16
24010a06:	6113      	str	r3, [r2, #16]
}
24010a08:	bf00      	nop
24010a0a:	46bd      	mov	sp, r7
24010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010a10:	4770      	bx	lr
24010a12:	bf00      	nop
24010a14:	e000ed00 	.word	0xe000ed00

24010a18 <HAL_PWR_DisableSEVOnPend>:
  * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
  *         enabled pending causes exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_DisableSEVOnPend (void)
{
24010a18:	b480      	push	{r7}
24010a1a:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
24010a1c:	4b05      	ldr	r3, [pc, #20]	; (24010a34 <HAL_PWR_DisableSEVOnPend+0x1c>)
24010a1e:	691b      	ldr	r3, [r3, #16]
24010a20:	4a04      	ldr	r2, [pc, #16]	; (24010a34 <HAL_PWR_DisableSEVOnPend+0x1c>)
24010a22:	f023 0310 	bic.w	r3, r3, #16
24010a26:	6113      	str	r3, [r2, #16]
}
24010a28:	bf00      	nop
24010a2a:	46bd      	mov	sp, r7
24010a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
24010a30:	4770      	bx	lr
24010a32:	bf00      	nop
24010a34:	e000ed00 	.word	0xe000ed00

24010a38 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None.
  */
void HAL_PWR_PVD_IRQHandler (void)
{
24010a38:	b580      	push	{r7, lr}
24010a3a:	af00      	add	r7, sp, #0
      HAL_PWR_PVDCallback ();
    }
  }
#else /* Single core devices */
  /* PVD EXTI line interrupt detected */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
24010a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24010a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24010a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24010a4c:	d10b      	bne.n	24010a66 <HAL_PWR_PVD_IRQHandler+0x2e>
  {
    /* Clear PWR EXTI pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
24010a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24010a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24010a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24010a5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback ();
24010a62:	f000 f802 	bl	24010a6a <HAL_PWR_PVDCallback>
  }
#endif /* defined (DUAL_CORE) */
}
24010a66:	bf00      	nop
24010a68:	bd80      	pop	{r7, pc}

24010a6a <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
24010a6a:	b480      	push	{r7}
24010a6c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
24010a6e:	bf00      	nop
24010a70:	46bd      	mov	sp, r7
24010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
24010a76:	4770      	bx	lr

24010a78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24010a78:	b580      	push	{r7, lr}
24010a7a:	b084      	sub	sp, #16
24010a7c:	af00      	add	r7, sp, #0
24010a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24010a80:	4b19      	ldr	r3, [pc, #100]	; (24010ae8 <HAL_PWREx_ConfigSupply+0x70>)
24010a82:	68db      	ldr	r3, [r3, #12]
24010a84:	f003 0304 	and.w	r3, r3, #4
24010a88:	2b04      	cmp	r3, #4
24010a8a:	d00a      	beq.n	24010aa2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24010a8c:	4b16      	ldr	r3, [pc, #88]	; (24010ae8 <HAL_PWREx_ConfigSupply+0x70>)
24010a8e:	68db      	ldr	r3, [r3, #12]
24010a90:	f003 0307 	and.w	r3, r3, #7
24010a94:	687a      	ldr	r2, [r7, #4]
24010a96:	429a      	cmp	r2, r3
24010a98:	d001      	beq.n	24010a9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24010a9a:	2301      	movs	r3, #1
24010a9c:	e01f      	b.n	24010ade <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
24010a9e:	2300      	movs	r3, #0
24010aa0:	e01d      	b.n	24010ade <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24010aa2:	4b11      	ldr	r3, [pc, #68]	; (24010ae8 <HAL_PWREx_ConfigSupply+0x70>)
24010aa4:	68db      	ldr	r3, [r3, #12]
24010aa6:	f023 0207 	bic.w	r2, r3, #7
24010aaa:	490f      	ldr	r1, [pc, #60]	; (24010ae8 <HAL_PWREx_ConfigSupply+0x70>)
24010aac:	687b      	ldr	r3, [r7, #4]
24010aae:	4313      	orrs	r3, r2
24010ab0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24010ab2:	f7f1 fba3 	bl	240021fc <HAL_GetTick>
24010ab6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010ab8:	e009      	b.n	24010ace <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24010aba:	f7f1 fb9f 	bl	240021fc <HAL_GetTick>
24010abe:	4602      	mov	r2, r0
24010ac0:	68fb      	ldr	r3, [r7, #12]
24010ac2:	1ad3      	subs	r3, r2, r3
24010ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24010ac8:	d901      	bls.n	24010ace <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
24010aca:	2301      	movs	r3, #1
24010acc:	e007      	b.n	24010ade <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010ace:	4b06      	ldr	r3, [pc, #24]	; (24010ae8 <HAL_PWREx_ConfigSupply+0x70>)
24010ad0:	685b      	ldr	r3, [r3, #4]
24010ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24010ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24010ada:	d1ee      	bne.n	24010aba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
24010adc:	2300      	movs	r3, #0
}
24010ade:	4618      	mov	r0, r3
24010ae0:	3710      	adds	r7, #16
24010ae2:	46bd      	mov	sp, r7
24010ae4:	bd80      	pop	{r7, pc}
24010ae6:	bf00      	nop
24010ae8:	58024800 	.word	0x58024800

24010aec <HAL_PWREx_GetSupplyConfig>:
/**
  * @brief Get the power supply configuration.
  * @retval The supply configuration.
  */
uint32_t HAL_PWREx_GetSupplyConfig (void)
{
24010aec:	b480      	push	{r7}
24010aee:	af00      	add	r7, sp, #0
  return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
24010af0:	4b04      	ldr	r3, [pc, #16]	; (24010b04 <HAL_PWREx_GetSupplyConfig+0x18>)
24010af2:	68db      	ldr	r3, [r3, #12]
24010af4:	f003 0307 	and.w	r3, r3, #7
}
24010af8:	4618      	mov	r0, r3
24010afa:	46bd      	mov	sp, r7
24010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
24010b00:	4770      	bx	lr
24010b02:	bf00      	nop
24010b04:	58024800 	.word	0x58024800

24010b08 <HAL_PWREx_ControlVoltageScaling>:
  *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
  *         low power mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
{
24010b08:	b580      	push	{r7, lr}
24010b0a:	b084      	sub	sp, #16
24010b0c:	af00      	add	r7, sp, #0
24010b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));

  /* Get the voltage scaling  */
  if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
24010b10:	4b3f      	ldr	r3, [pc, #252]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b12:	685b      	ldr	r3, [r3, #4]
24010b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24010b18:	687a      	ldr	r2, [r7, #4]
24010b1a:	429a      	cmp	r2, r3
24010b1c:	d101      	bne.n	24010b22 <HAL_PWREx_ControlVoltageScaling+0x1a>
  {
    /* Old and new voltage scaling configuration match : nothing to do */
    return HAL_OK;
24010b1e:	2300      	movs	r3, #0
24010b20:	e072      	b.n	24010c08 <HAL_PWREx_ControlVoltageScaling+0x100>
#if defined (PWR_SRDCR_VOS)
  /* Set the voltage range */
  MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#else
#if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
24010b22:	687b      	ldr	r3, [r7, #4]
24010b24:	2b00      	cmp	r3, #0
24010b26:	d129      	bne.n	24010b7c <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
24010b28:	4b39      	ldr	r3, [pc, #228]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b2a:	68db      	ldr	r3, [r3, #12]
24010b2c:	f003 0302 	and.w	r3, r3, #2
24010b30:	2b02      	cmp	r3, #2
24010b32:	d121      	bne.n	24010b78 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set the voltage range */
      MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
24010b34:	4b36      	ldr	r3, [pc, #216]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b36:	699b      	ldr	r3, [r3, #24]
24010b38:	4a35      	ldr	r2, [pc, #212]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24010b3e:	6193      	str	r3, [r2, #24]

      /* Get tick */
      tickstart = HAL_GetTick ();
24010b40:	f7f1 fb5c 	bl	240021fc <HAL_GetTick>
24010b44:	60f8      	str	r0, [r7, #12]

      /* Wait till voltage level flag is set */
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010b46:	e009      	b.n	24010b5c <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24010b48:	f7f1 fb58 	bl	240021fc <HAL_GetTick>
24010b4c:	4602      	mov	r2, r0
24010b4e:	68fb      	ldr	r3, [r7, #12]
24010b50:	1ad3      	subs	r3, r2, r3
24010b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24010b56:	d901      	bls.n	24010b5c <HAL_PWREx_ControlVoltageScaling+0x54>
        {
          return HAL_ERROR;
24010b58:	2301      	movs	r3, #1
24010b5a:	e055      	b.n	24010c08 <HAL_PWREx_ControlVoltageScaling+0x100>
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010b5c:	4b2c      	ldr	r3, [pc, #176]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b5e:	685b      	ldr	r3, [r3, #4]
24010b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24010b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24010b68:	d1ee      	bne.n	24010b48 <HAL_PWREx_ControlVoltageScaling+0x40>
        }
      }

      /* Enable the PWR overdrive */
      SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
24010b6a:	4b2a      	ldr	r3, [pc, #168]	; (24010c14 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010b6e:	4a29      	ldr	r2, [pc, #164]	; (24010c14 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010b70:	f043 0301 	orr.w	r3, r3, #1
24010b74:	62d3      	str	r3, [r2, #44]	; 0x2c
24010b76:	e031      	b.n	24010bdc <HAL_PWREx_ControlVoltageScaling+0xd4>
    }
    else
    {
      /* The voltage scale 0 is only possible when LDO regulator is enabled */
      return HAL_ERROR;
24010b78:	2301      	movs	r3, #1
24010b7a:	e045      	b.n	24010c08 <HAL_PWREx_ControlVoltageScaling+0x100>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
24010b7c:	4b24      	ldr	r3, [pc, #144]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010b7e:	685b      	ldr	r3, [r3, #4]
24010b80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24010b84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
24010b88:	d120      	bne.n	24010bcc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
24010b8a:	4b22      	ldr	r3, [pc, #136]	; (24010c14 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010b8e:	f003 0301 	and.w	r3, r3, #1
24010b92:	2b00      	cmp	r3, #0
24010b94:	d01a      	beq.n	24010bcc <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        /* Disable the PWR overdrive */
        CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
24010b96:	4b1f      	ldr	r3, [pc, #124]	; (24010c14 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24010b9a:	4a1e      	ldr	r2, [pc, #120]	; (24010c14 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24010b9c:	f023 0301 	bic.w	r3, r3, #1
24010ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Get tick */
        tickstart = HAL_GetTick ();
24010ba2:	f7f1 fb2b 	bl	240021fc <HAL_GetTick>
24010ba6:	60f8      	str	r0, [r7, #12]

        /* Wait till voltage level flag is set */
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010ba8:	e009      	b.n	24010bbe <HAL_PWREx_ControlVoltageScaling+0xb6>
        {
          if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24010baa:	f7f1 fb27 	bl	240021fc <HAL_GetTick>
24010bae:	4602      	mov	r2, r0
24010bb0:	68fb      	ldr	r3, [r7, #12]
24010bb2:	1ad3      	subs	r3, r2, r3
24010bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24010bb8:	d901      	bls.n	24010bbe <HAL_PWREx_ControlVoltageScaling+0xb6>
          {
            return HAL_ERROR;
24010bba:	2301      	movs	r3, #1
24010bbc:	e024      	b.n	24010c08 <HAL_PWREx_ControlVoltageScaling+0x100>
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010bbe:	4b14      	ldr	r3, [pc, #80]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010bc0:	685b      	ldr	r3, [r3, #4]
24010bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24010bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24010bca:	d1ee      	bne.n	24010baa <HAL_PWREx_ControlVoltageScaling+0xa2>
        }
      }
    }

    /* Set the voltage range */
    MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
24010bcc:	4b10      	ldr	r3, [pc, #64]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010bce:	699b      	ldr	r3, [r3, #24]
24010bd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24010bd4:	490e      	ldr	r1, [pc, #56]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010bd6:	687b      	ldr	r3, [r7, #4]
24010bd8:	4313      	orrs	r3, r2
24010bda:	618b      	str	r3, [r1, #24]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
#endif /* defined (SYSCFG_PWRCR_ODEN) */
#endif /* defined (PWR_SRDCR_VOS) */

  /* Get tick */
  tickstart = HAL_GetTick ();
24010bdc:	f7f1 fb0e 	bl	240021fc <HAL_GetTick>
24010be0:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010be2:	e009      	b.n	24010bf8 <HAL_PWREx_ControlVoltageScaling+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
24010be4:	f7f1 fb0a 	bl	240021fc <HAL_GetTick>
24010be8:	4602      	mov	r2, r0
24010bea:	68fb      	ldr	r3, [r7, #12]
24010bec:	1ad3      	subs	r3, r2, r3
24010bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24010bf2:	d901      	bls.n	24010bf8 <HAL_PWREx_ControlVoltageScaling+0xf0>
    {
      return HAL_ERROR;
24010bf4:	2301      	movs	r3, #1
24010bf6:	e007      	b.n	24010c08 <HAL_PWREx_ControlVoltageScaling+0x100>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24010bf8:	4b05      	ldr	r3, [pc, #20]	; (24010c10 <HAL_PWREx_ControlVoltageScaling+0x108>)
24010bfa:	685b      	ldr	r3, [r3, #4]
24010bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24010c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24010c04:	d1ee      	bne.n	24010be4 <HAL_PWREx_ControlVoltageScaling+0xdc>
    }
  }

  return HAL_OK;
24010c06:	2300      	movs	r3, #0
}
24010c08:	4618      	mov	r0, r3
24010c0a:	3710      	adds	r7, #16
24010c0c:	46bd      	mov	sp, r7
24010c0e:	bd80      	pop	{r7, pc}
24010c10:	58024800 	.word	0x58024800
24010c14:	58000400 	.word	0x58000400

24010c18 <HAL_PWREx_GetVoltageRange>:
  * @brief Get the main internal regulator output voltage. Reflecting the last
  *        VOS value applied to the PMU.
  * @retval The current applied VOS selection.
  */
uint32_t HAL_PWREx_GetVoltageRange (void)
{
24010c18:	b480      	push	{r7}
24010c1a:	af00      	add	r7, sp, #0
  /* Get the active voltage scaling */
  return (PWR->CSR1 & PWR_CSR1_ACTVOS);
24010c1c:	4b04      	ldr	r3, [pc, #16]	; (24010c30 <HAL_PWREx_GetVoltageRange+0x18>)
24010c1e:	685b      	ldr	r3, [r3, #4]
24010c20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24010c24:	4618      	mov	r0, r3
24010c26:	46bd      	mov	sp, r7
24010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c2c:	4770      	bx	lr
24010c2e:	bf00      	nop
24010c30:	58024800 	.word	0x58024800

24010c34 <HAL_PWREx_ControlStopModeVoltageScaling>:
  * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
  *         when exiting from system Stop mode.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
{
24010c34:	b480      	push	{r7}
24010c36:	b083      	sub	sp, #12
24010c38:	af00      	add	r7, sp, #0
24010c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));

  /* Return the stop mode voltage range */
  MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
24010c3c:	4b07      	ldr	r3, [pc, #28]	; (24010c5c <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
24010c3e:	681b      	ldr	r3, [r3, #0]
24010c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24010c44:	4905      	ldr	r1, [pc, #20]	; (24010c5c <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
24010c46:	687b      	ldr	r3, [r7, #4]
24010c48:	4313      	orrs	r3, r2
24010c4a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
24010c4c:	2300      	movs	r3, #0
}
24010c4e:	4618      	mov	r0, r3
24010c50:	370c      	adds	r7, #12
24010c52:	46bd      	mov	sp, r7
24010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c58:	4770      	bx	lr
24010c5a:	bf00      	nop
24010c5c:	58024800 	.word	0x58024800

24010c60 <HAL_PWREx_GetStopModeVoltageRange>:
/**
  * @brief Get the main internal regulator output voltage in STOP mode.
  * @retval The actual applied VOS selection.
  */
uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
{
24010c60:	b480      	push	{r7}
24010c62:	af00      	add	r7, sp, #0
  /* Return the stop voltage scaling */
  return (PWR->CR1 & PWR_CR1_SVOS);
24010c64:	4b04      	ldr	r3, [pc, #16]	; (24010c78 <HAL_PWREx_GetStopModeVoltageRange+0x18>)
24010c66:	681b      	ldr	r3, [r3, #0]
24010c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24010c6c:	4618      	mov	r0, r3
24010c6e:	46bd      	mov	sp, r7
24010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c74:	4770      	bx	lr
24010c76:	bf00      	nop
24010c78:	58024800 	.word	0x58024800

24010c7c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
24010c7c:	b480      	push	{r7}
24010c7e:	b085      	sub	sp, #20
24010c80:	af00      	add	r7, sp, #0
24010c82:	60f8      	str	r0, [r7, #12]
24010c84:	460b      	mov	r3, r1
24010c86:	607a      	str	r2, [r7, #4]
24010c88:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
24010c8a:	4b20      	ldr	r3, [pc, #128]	; (24010d0c <HAL_PWREx_EnterSTOPMode+0x90>)
24010c8c:	681b      	ldr	r3, [r3, #0]
24010c8e:	f023 0201 	bic.w	r2, r3, #1
24010c92:	491e      	ldr	r1, [pc, #120]	; (24010d0c <HAL_PWREx_EnterSTOPMode+0x90>)
24010c94:	68fb      	ldr	r3, [r7, #12]
24010c96:	4313      	orrs	r3, r2
24010c98:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
24010c9a:	687b      	ldr	r3, [r7, #4]
24010c9c:	2b00      	cmp	r3, #0
24010c9e:	d11e      	bne.n	24010cde <HAL_PWREx_EnterSTOPMode+0x62>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
24010ca0:	4b1a      	ldr	r3, [pc, #104]	; (24010d0c <HAL_PWREx_EnterSTOPMode+0x90>)
24010ca2:	691b      	ldr	r3, [r3, #16]
24010ca4:	4a19      	ldr	r2, [pc, #100]	; (24010d0c <HAL_PWREx_EnterSTOPMode+0x90>)
24010ca6:	f023 0301 	bic.w	r3, r3, #1
24010caa:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24010cac:	4b18      	ldr	r3, [pc, #96]	; (24010d10 <HAL_PWREx_EnterSTOPMode+0x94>)
24010cae:	691b      	ldr	r3, [r3, #16]
24010cb0:	4a17      	ldr	r2, [pc, #92]	; (24010d10 <HAL_PWREx_EnterSTOPMode+0x94>)
24010cb2:	f043 0304 	orr.w	r3, r3, #4
24010cb6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24010cb8:	f3bf 8f4f 	dsb	sy
}
24010cbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24010cbe:	f3bf 8f6f 	isb	sy
}
24010cc2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
24010cc4:	7afb      	ldrb	r3, [r7, #11]
24010cc6:	2b01      	cmp	r3, #1
24010cc8:	d101      	bne.n	24010cce <HAL_PWREx_EnterSTOPMode+0x52>
    {
      /* Request Wait For Interrupt */
      __WFI ();
24010cca:	bf30      	wfi
24010ccc:	e000      	b.n	24010cd0 <HAL_PWREx_EnterSTOPMode+0x54>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
24010cce:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24010cd0:	4b0f      	ldr	r3, [pc, #60]	; (24010d10 <HAL_PWREx_EnterSTOPMode+0x94>)
24010cd2:	691b      	ldr	r3, [r3, #16]
24010cd4:	4a0e      	ldr	r2, [pc, #56]	; (24010d10 <HAL_PWREx_EnterSTOPMode+0x94>)
24010cd6:	f023 0304 	bic.w	r3, r3, #4
24010cda:	6113      	str	r3, [r2, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
24010cdc:	e00f      	b.n	24010cfe <HAL_PWREx_EnterSTOPMode+0x82>
  else if (Domain == PWR_D2_DOMAIN)
24010cde:	687b      	ldr	r3, [r7, #4]
24010ce0:	2b01      	cmp	r3, #1
24010ce2:	d106      	bne.n	24010cf2 <HAL_PWREx_EnterSTOPMode+0x76>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24010ce4:	4b09      	ldr	r3, [pc, #36]	; (24010d0c <HAL_PWREx_EnterSTOPMode+0x90>)
24010ce6:	691b      	ldr	r3, [r3, #16]
24010ce8:	4a08      	ldr	r2, [pc, #32]	; (24010d0c <HAL_PWREx_EnterSTOPMode+0x90>)
24010cea:	f023 0302 	bic.w	r3, r3, #2
24010cee:	6113      	str	r3, [r2, #16]
}
24010cf0:	e005      	b.n	24010cfe <HAL_PWREx_EnterSTOPMode+0x82>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
24010cf2:	4b06      	ldr	r3, [pc, #24]	; (24010d0c <HAL_PWREx_EnterSTOPMode+0x90>)
24010cf4:	691b      	ldr	r3, [r3, #16]
24010cf6:	4a05      	ldr	r2, [pc, #20]	; (24010d0c <HAL_PWREx_EnterSTOPMode+0x90>)
24010cf8:	f023 0304 	bic.w	r3, r3, #4
24010cfc:	6113      	str	r3, [r2, #16]
}
24010cfe:	bf00      	nop
24010d00:	3714      	adds	r7, #20
24010d02:	46bd      	mov	sp, r7
24010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
24010d08:	4770      	bx	lr
24010d0a:	bf00      	nop
24010d0c:	58024800 	.word	0x58024800
24010d10:	e000ed00 	.word	0xe000ed00

24010d14 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
24010d14:	b480      	push	{r7}
24010d16:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
24010d18:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
24010d1a:	bf00      	nop
24010d1c:	46bd      	mov	sp, r7
24010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
24010d22:	4770      	bx	lr

24010d24 <HAL_PWREx_EnterSTANDBYMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
  *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
  * @retval None
  */
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
{
24010d24:	b480      	push	{r7}
24010d26:	b083      	sub	sp, #12
24010d28:	af00      	add	r7, sp, #0
24010d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
24010d2c:	687b      	ldr	r3, [r7, #4]
24010d2e:	2b00      	cmp	r3, #0
24010d30:	d10d      	bne.n	24010d4e <HAL_PWREx_EnterSTANDBYMode+0x2a>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
24010d32:	4b12      	ldr	r3, [pc, #72]	; (24010d7c <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010d34:	691b      	ldr	r3, [r3, #16]
24010d36:	4a11      	ldr	r2, [pc, #68]	; (24010d7c <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010d38:	f043 0301 	orr.w	r3, r3, #1
24010d3c:	6113      	str	r3, [r2, #16]
    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
#endif /*DUAL_CORE*/

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24010d3e:	4b10      	ldr	r3, [pc, #64]	; (24010d80 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
24010d40:	691b      	ldr	r3, [r3, #16]
24010d42:	4a0f      	ldr	r2, [pc, #60]	; (24010d80 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
24010d44:	f043 0304 	orr.w	r3, r3, #4
24010d48:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
    __force_stores ();
#endif /* defined (__CC_ARM) */

    /* Request Wait For Interrupt */
    __WFI ();
24010d4a:	bf30      	wfi
#if defined (DUAL_CORE)
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
#endif /* defined (DUAL_CORE) */
  }
}
24010d4c:	e00f      	b.n	24010d6e <HAL_PWREx_EnterSTANDBYMode+0x4a>
  else if (Domain == PWR_D2_DOMAIN)
24010d4e:	687b      	ldr	r3, [r7, #4]
24010d50:	2b01      	cmp	r3, #1
24010d52:	d106      	bne.n	24010d62 <HAL_PWREx_EnterSTANDBYMode+0x3e>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
24010d54:	4b09      	ldr	r3, [pc, #36]	; (24010d7c <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010d56:	691b      	ldr	r3, [r3, #16]
24010d58:	4a08      	ldr	r2, [pc, #32]	; (24010d7c <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010d5a:	f043 0302 	orr.w	r3, r3, #2
24010d5e:	6113      	str	r3, [r2, #16]
}
24010d60:	e005      	b.n	24010d6e <HAL_PWREx_EnterSTANDBYMode+0x4a>
    SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
24010d62:	4b06      	ldr	r3, [pc, #24]	; (24010d7c <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010d64:	691b      	ldr	r3, [r3, #16]
24010d66:	4a05      	ldr	r2, [pc, #20]	; (24010d7c <HAL_PWREx_EnterSTANDBYMode+0x58>)
24010d68:	f043 0304 	orr.w	r3, r3, #4
24010d6c:	6113      	str	r3, [r2, #16]
}
24010d6e:	bf00      	nop
24010d70:	370c      	adds	r7, #12
24010d72:	46bd      	mov	sp, r7
24010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
24010d78:	4770      	bx	lr
24010d7a:	bf00      	nop
24010d7c:	58024800 	.word	0x58024800
24010d80:	e000ed00 	.word	0xe000ed00

24010d84 <HAL_PWREx_ConfigD3Domain>:
  *                                     regardless of the CPU sub-system low
  *                                     power mode.
  * @retval None
  */
void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
{
24010d84:	b480      	push	{r7}
24010d86:	b083      	sub	sp, #12
24010d88:	af00      	add	r7, sp, #0
24010d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_D3_STATE (D3State));

  /* Keep D3/SRD in run mode */
  MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
24010d8c:	4b06      	ldr	r3, [pc, #24]	; (24010da8 <HAL_PWREx_ConfigD3Domain+0x24>)
24010d8e:	691b      	ldr	r3, [r3, #16]
24010d90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
24010d94:	4904      	ldr	r1, [pc, #16]	; (24010da8 <HAL_PWREx_ConfigD3Domain+0x24>)
24010d96:	687b      	ldr	r3, [r7, #4]
24010d98:	4313      	orrs	r3, r2
24010d9a:	610b      	str	r3, [r1, #16]
}
24010d9c:	bf00      	nop
24010d9e:	370c      	adds	r7, #12
24010da0:	46bd      	mov	sp, r7
24010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
24010da6:	4770      	bx	lr
24010da8:	58024800 	.word	0x58024800

24010dac <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
24010dac:	b480      	push	{r7}
24010dae:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
24010db0:	4b05      	ldr	r3, [pc, #20]	; (24010dc8 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24010db2:	681b      	ldr	r3, [r3, #0]
24010db4:	4a04      	ldr	r2, [pc, #16]	; (24010dc8 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24010db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24010dba:	6013      	str	r3, [r2, #0]
}
24010dbc:	bf00      	nop
24010dbe:	46bd      	mov	sp, r7
24010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
24010dc4:	4770      	bx	lr
24010dc6:	bf00      	nop
24010dc8:	58024800 	.word	0x58024800

24010dcc <HAL_PWREx_DisableFlashPowerDown>:
  *         to obtain the best trade-off between low-power consumption and
  *         restart time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_DisableFlashPowerDown (void)
{
24010dcc:	b480      	push	{r7}
24010dce:	af00      	add	r7, sp, #0
  /* Disable the Flash Power Down */
  CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
24010dd0:	4b05      	ldr	r3, [pc, #20]	; (24010de8 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24010dd2:	681b      	ldr	r3, [r3, #0]
24010dd4:	4a04      	ldr	r2, [pc, #16]	; (24010de8 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24010dd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
24010dda:	6013      	str	r3, [r2, #0]
}
24010ddc:	bf00      	nop
24010dde:	46bd      	mov	sp, r7
24010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
24010de4:	4770      	bx	lr
24010de6:	bf00      	nop
24010de8:	58024800 	.word	0x58024800

24010dec <HAL_PWREx_EnableWakeUpPin>:
  *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
  *         Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
{
24010dec:	b480      	push	{r7}
24010dee:	b093      	sub	sp, #76	; 0x4c
24010df0:	af00      	add	r7, sp, #0
24010df2:	6078      	str	r0, [r7, #4]
  uint32_t pinConfig;
  uint32_t regMask;
  const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
24010df4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24010df8:	647b      	str	r3, [r7, #68]	; 0x44
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
  assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
  assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));

  pinConfig = sPinParams->WakeUpPin | \
24010dfa:	687b      	ldr	r3, [r7, #4]
24010dfc:	681a      	ldr	r2, [r3, #0]
              (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP1_Pos) & 0x1FU)) | \
24010dfe:	687b      	ldr	r3, [r7, #4]
24010e00:	6859      	ldr	r1, [r3, #4]
24010e02:	687b      	ldr	r3, [r7, #4]
24010e04:	681b      	ldr	r3, [r3, #0]
24010e06:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24010e08:	693b      	ldr	r3, [r7, #16]
24010e0a:	fa93 f3a3 	rbit	r3, r3
24010e0e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
24010e10:	68fb      	ldr	r3, [r7, #12]
24010e12:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
24010e14:	697b      	ldr	r3, [r7, #20]
24010e16:	2b00      	cmp	r3, #0
24010e18:	d101      	bne.n	24010e1e <HAL_PWREx_EnableWakeUpPin+0x32>
  {
    return 32U;
24010e1a:	2320      	movs	r3, #32
24010e1c:	e003      	b.n	24010e26 <HAL_PWREx_EnableWakeUpPin+0x3a>
  }
  return __builtin_clz(value);
24010e1e:	697b      	ldr	r3, [r7, #20]
24010e20:	fab3 f383 	clz	r3, r3
24010e24:	b2db      	uxtb	r3, r3
24010e26:	3308      	adds	r3, #8
24010e28:	f003 031f 	and.w	r3, r3, #31
24010e2c:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
24010e30:	431a      	orrs	r2, r3
              (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) + PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
24010e32:	687b      	ldr	r3, [r7, #4]
24010e34:	6899      	ldr	r1, [r3, #8]
24010e36:	687b      	ldr	r3, [r7, #4]
24010e38:	681b      	ldr	r3, [r3, #0]
24010e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24010e3c:	69fb      	ldr	r3, [r7, #28]
24010e3e:	fa93 f3a3 	rbit	r3, r3
24010e42:	61bb      	str	r3, [r7, #24]
  return result;
24010e44:	69bb      	ldr	r3, [r7, #24]
24010e46:	623b      	str	r3, [r7, #32]
  if (value == 0U)
24010e48:	6a3b      	ldr	r3, [r7, #32]
24010e4a:	2b00      	cmp	r3, #0
24010e4c:	d101      	bne.n	24010e52 <HAL_PWREx_EnableWakeUpPin+0x66>
    return 32U;
24010e4e:	2320      	movs	r3, #32
24010e50:	e003      	b.n	24010e5a <HAL_PWREx_EnableWakeUpPin+0x6e>
  return __builtin_clz(value);
24010e52:	6a3b      	ldr	r3, [r7, #32]
24010e54:	fab3 f383 	clz	r3, r3
24010e58:	b2db      	uxtb	r3, r3
24010e5a:	3308      	adds	r3, #8
24010e5c:	005b      	lsls	r3, r3, #1
24010e5e:	f003 031e 	and.w	r3, r3, #30
24010e62:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
24010e66:	4313      	orrs	r3, r2
24010e68:	643b      	str	r3, [r7, #64]	; 0x40

  regMask   = sPinParams->WakeUpPin | \
24010e6a:	687b      	ldr	r3, [r7, #4]
24010e6c:	681a      	ldr	r2, [r3, #0]
              (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
24010e6e:	687b      	ldr	r3, [r7, #4]
24010e70:	681b      	ldr	r3, [r3, #0]
24010e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24010e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
24010e76:	fa93 f3a3 	rbit	r3, r3
24010e7a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
24010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24010e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
24010e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24010e82:	2b00      	cmp	r3, #0
24010e84:	d101      	bne.n	24010e8a <HAL_PWREx_EnableWakeUpPin+0x9e>
    return 32U;
24010e86:	2320      	movs	r3, #32
24010e88:	e003      	b.n	24010e92 <HAL_PWREx_EnableWakeUpPin+0xa6>
  return __builtin_clz(value);
24010e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24010e8c:	fab3 f383 	clz	r3, r3
24010e90:	b2db      	uxtb	r3, r3
24010e92:	f003 031f 	and.w	r3, r3, #31
24010e96:	f44f 7180 	mov.w	r1, #256	; 0x100
24010e9a:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
24010e9e:	431a      	orrs	r2, r3
              (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) & 0x1FU));
24010ea0:	687b      	ldr	r3, [r7, #4]
24010ea2:	681b      	ldr	r3, [r3, #0]
24010ea4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24010ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24010ea8:	fa93 f3a3 	rbit	r3, r3
24010eac:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
24010eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24010eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
24010eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24010eb4:	2b00      	cmp	r3, #0
24010eb6:	d101      	bne.n	24010ebc <HAL_PWREx_EnableWakeUpPin+0xd0>
    return 32U;
24010eb8:	2320      	movs	r3, #32
24010eba:	e003      	b.n	24010ec4 <HAL_PWREx_EnableWakeUpPin+0xd8>
  return __builtin_clz(value);
24010ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24010ebe:	fab3 f383 	clz	r3, r3
24010ec2:	b2db      	uxtb	r3, r3
24010ec4:	005b      	lsls	r3, r3, #1
24010ec6:	f003 031e 	and.w	r3, r3, #30
24010eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
24010ecc:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
24010ed0:	4313      	orrs	r3, r2
24010ed2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge) */
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
24010ed4:	4b0e      	ldr	r3, [pc, #56]	; (24010f10 <HAL_PWREx_EnableWakeUpPin+0x124>)
24010ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24010eda:	43db      	mvns	r3, r3
24010edc:	401a      	ands	r2, r3
24010ede:	490c      	ldr	r1, [pc, #48]	; (24010f10 <HAL_PWREx_EnableWakeUpPin+0x124>)
24010ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24010ee2:	4313      	orrs	r3, r2
24010ee4:	628b      	str	r3, [r1, #40]	; 0x28
#ifndef DUAL_CORE
  /* Configure the Wakeup Pin EXTI Line */
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
24010ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24010eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24010eee:	f023 52fc 	bic.w	r2, r3, #528482304	; 0x1f800000
24010ef2:	687b      	ldr	r3, [r7, #4]
24010ef4:	681b      	ldr	r3, [r3, #0]
24010ef6:	05db      	lsls	r3, r3, #23
24010ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
24010efc:	4313      	orrs	r3, r2
24010efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
#endif /* !DUAL_CORE */
}
24010f02:	bf00      	nop
24010f04:	374c      	adds	r7, #76	; 0x4c
24010f06:	46bd      	mov	sp, r7
24010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
24010f0c:	4770      	bx	lr
24010f0e:	bf00      	nop
24010f10:	58024800 	.word	0x58024800

24010f14 <HAL_PWREx_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
  *         devices that support GPIOI port.
  * @retval None
  */
void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
{
24010f14:	b480      	push	{r7}
24010f16:	b083      	sub	sp, #12
24010f18:	af00      	add	r7, sp, #0
24010f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));

  /* Disable the WakeUpPin */
  CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
24010f1c:	4b06      	ldr	r3, [pc, #24]	; (24010f38 <HAL_PWREx_DisableWakeUpPin+0x24>)
24010f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24010f20:	687b      	ldr	r3, [r7, #4]
24010f22:	43db      	mvns	r3, r3
24010f24:	4904      	ldr	r1, [pc, #16]	; (24010f38 <HAL_PWREx_DisableWakeUpPin+0x24>)
24010f26:	4013      	ands	r3, r2
24010f28:	628b      	str	r3, [r1, #40]	; 0x28
}
24010f2a:	bf00      	nop
24010f2c:	370c      	adds	r7, #12
24010f2e:	46bd      	mov	sp, r7
24010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
24010f34:	4770      	bx	lr
24010f36:	bf00      	nop
24010f38:	58024800 	.word	0x58024800

24010f3c <HAL_PWREx_GetWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval The Wake-Up pin flag.
  */
uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
{
24010f3c:	b480      	push	{r7}
24010f3e:	b083      	sub	sp, #12
24010f40:	af00      	add	r7, sp, #0
24010f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Return the wake up pin flag */
  return (PWR->WKUPFR & WakeUpFlag);
24010f44:	4b04      	ldr	r3, [pc, #16]	; (24010f58 <HAL_PWREx_GetWakeupFlag+0x1c>)
24010f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24010f48:	687b      	ldr	r3, [r7, #4]
24010f4a:	4013      	ands	r3, r2
}
24010f4c:	4618      	mov	r0, r3
24010f4e:	370c      	adds	r7, #12
24010f50:	46bd      	mov	sp, r7
24010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
24010f56:	4770      	bx	lr
24010f58:	58024800 	.word	0x58024800

24010f5c <HAL_PWREx_ClearWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
{
24010f5c:	b480      	push	{r7}
24010f5e:	b083      	sub	sp, #12
24010f60:	af00      	add	r7, sp, #0
24010f62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Clear the wake up event received from wake up pin x */
  SET_BIT (PWR->WKUPCR, WakeUpFlag);
24010f64:	4b0a      	ldr	r3, [pc, #40]	; (24010f90 <HAL_PWREx_ClearWakeupFlag+0x34>)
24010f66:	6a1a      	ldr	r2, [r3, #32]
24010f68:	4909      	ldr	r1, [pc, #36]	; (24010f90 <HAL_PWREx_ClearWakeupFlag+0x34>)
24010f6a:	687b      	ldr	r3, [r7, #4]
24010f6c:	4313      	orrs	r3, r2
24010f6e:	620b      	str	r3, [r1, #32]

  /* Check if the wake up event is well cleared */
  if ((PWR->WKUPFR & WakeUpFlag) != 0U)
24010f70:	4b07      	ldr	r3, [pc, #28]	; (24010f90 <HAL_PWREx_ClearWakeupFlag+0x34>)
24010f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24010f74:	687b      	ldr	r3, [r7, #4]
24010f76:	4013      	ands	r3, r2
24010f78:	2b00      	cmp	r3, #0
24010f7a:	d001      	beq.n	24010f80 <HAL_PWREx_ClearWakeupFlag+0x24>
  {
    return HAL_ERROR;
24010f7c:	2301      	movs	r3, #1
24010f7e:	e000      	b.n	24010f82 <HAL_PWREx_ClearWakeupFlag+0x26>
  }

  return HAL_OK;
24010f80:	2300      	movs	r3, #0
}
24010f82:	4618      	mov	r0, r3
24010f84:	370c      	adds	r7, #12
24010f86:	46bd      	mov	sp, r7
24010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
24010f8c:	4770      	bx	lr
24010f8e:	bf00      	nop
24010f90:	58024800 	.word	0x58024800

24010f94 <HAL_PWREx_WAKEUP_PIN_IRQHandler>:
  * @brief This function handles the PWR WAKEUP PIN interrupt request.
  * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
  * @retval None.
  */
void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
{
24010f94:	b580      	push	{r7, lr}
24010f96:	af00      	add	r7, sp, #0
  /* Wakeup pin EXTI line interrupt detected */
  if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
24010f98:	4b2a      	ldr	r3, [pc, #168]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010f9c:	f003 0301 	and.w	r3, r3, #1
24010fa0:	2b00      	cmp	r3, #0
24010fa2:	d008      	beq.n	24010fb6 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x22>
  {
    /* Clear PWR WKUPF1 flag */
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
24010fa4:	4b27      	ldr	r3, [pc, #156]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010fa6:	6a1b      	ldr	r3, [r3, #32]
24010fa8:	4a26      	ldr	r2, [pc, #152]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010faa:	f043 0301 	orr.w	r3, r3, #1
24010fae:	6213      	str	r3, [r2, #32]

    /* PWR WKUP1 interrupt user callback */
    HAL_PWREx_WKUP1_Callback ();
24010fb0:	f000 f84a 	bl	24011048 <HAL_PWREx_WKUP1_Callback>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);

    /* PWR WKUP6 interrupt user callback */
    HAL_PWREx_WKUP6_Callback ();
  }
}
24010fb4:	e043      	b.n	2401103e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
24010fb6:	4b23      	ldr	r3, [pc, #140]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010fba:	f003 0302 	and.w	r3, r3, #2
24010fbe:	2b00      	cmp	r3, #0
24010fc0:	d008      	beq.n	24010fd4 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x40>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
24010fc2:	4b20      	ldr	r3, [pc, #128]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010fc4:	6a1b      	ldr	r3, [r3, #32]
24010fc6:	4a1f      	ldr	r2, [pc, #124]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010fc8:	f043 0302 	orr.w	r3, r3, #2
24010fcc:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP2_Callback ();
24010fce:	f000 f842 	bl	24011056 <HAL_PWREx_WKUP2_Callback>
}
24010fd2:	e034      	b.n	2401103e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
24010fd4:	4b1b      	ldr	r3, [pc, #108]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010fd8:	f003 0304 	and.w	r3, r3, #4
24010fdc:	2b00      	cmp	r3, #0
24010fde:	d008      	beq.n	24010ff2 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x5e>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
24010fe0:	4b18      	ldr	r3, [pc, #96]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010fe2:	6a1b      	ldr	r3, [r3, #32]
24010fe4:	4a17      	ldr	r2, [pc, #92]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010fe6:	f043 0304 	orr.w	r3, r3, #4
24010fea:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP3_Callback ();
24010fec:	f000 f83a 	bl	24011064 <HAL_PWREx_WKUP3_Callback>
}
24010ff0:	e025      	b.n	2401103e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
24010ff2:	4b14      	ldr	r3, [pc, #80]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24010ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24010ff6:	f003 0308 	and.w	r3, r3, #8
24010ffa:	2b00      	cmp	r3, #0
24010ffc:	d008      	beq.n	24011010 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x7c>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
24010ffe:	4b11      	ldr	r3, [pc, #68]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011000:	6a1b      	ldr	r3, [r3, #32]
24011002:	4a10      	ldr	r2, [pc, #64]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011004:	f043 0308 	orr.w	r3, r3, #8
24011008:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP4_Callback ();
2401100a:	f000 f832 	bl	24011072 <HAL_PWREx_WKUP4_Callback>
}
2401100e:	e016      	b.n	2401103e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
24011010:	4b0c      	ldr	r3, [pc, #48]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011014:	f003 0310 	and.w	r3, r3, #16
24011018:	2b00      	cmp	r3, #0
2401101a:	d008      	beq.n	2401102e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x9a>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
2401101c:	4b09      	ldr	r3, [pc, #36]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
2401101e:	6a1b      	ldr	r3, [r3, #32]
24011020:	4a08      	ldr	r2, [pc, #32]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011022:	f043 0310 	orr.w	r3, r3, #16
24011026:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP5_Callback ();
24011028:	f000 f82a 	bl	24011080 <HAL_PWREx_WKUP5_Callback>
}
2401102c:	e007      	b.n	2401103e <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
2401102e:	4b05      	ldr	r3, [pc, #20]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011030:	6a1b      	ldr	r3, [r3, #32]
24011032:	4a04      	ldr	r2, [pc, #16]	; (24011044 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24011034:	f043 0320 	orr.w	r3, r3, #32
24011038:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP6_Callback ();
2401103a:	f000 f828 	bl	2401108e <HAL_PWREx_WKUP6_Callback>
}
2401103e:	bf00      	nop
24011040:	bd80      	pop	{r7, pc}
24011042:	bf00      	nop
24011044:	58024800 	.word	0x58024800

24011048 <HAL_PWREx_WKUP1_Callback>:
/**
  * @brief PWR WKUP1 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP1_Callback (void)
{
24011048:	b480      	push	{r7}
2401104a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP1Callback can be implemented in the user file
  */
}
2401104c:	bf00      	nop
2401104e:	46bd      	mov	sp, r7
24011050:	f85d 7b04 	ldr.w	r7, [sp], #4
24011054:	4770      	bx	lr

24011056 <HAL_PWREx_WKUP2_Callback>:
/**
  * @brief PWR WKUP2 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP2_Callback (void)
{
24011056:	b480      	push	{r7}
24011058:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP2Callback can be implemented in the user file
  */
}
2401105a:	bf00      	nop
2401105c:	46bd      	mov	sp, r7
2401105e:	f85d 7b04 	ldr.w	r7, [sp], #4
24011062:	4770      	bx	lr

24011064 <HAL_PWREx_WKUP3_Callback>:
/**
  * @brief PWR WKUP3 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP3_Callback (void)
{
24011064:	b480      	push	{r7}
24011066:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP3Callback can be implemented in the user file
  */
}
24011068:	bf00      	nop
2401106a:	46bd      	mov	sp, r7
2401106c:	f85d 7b04 	ldr.w	r7, [sp], #4
24011070:	4770      	bx	lr

24011072 <HAL_PWREx_WKUP4_Callback>:
/**
  * @brief PWR WKUP4 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP4_Callback (void)
{
24011072:	b480      	push	{r7}
24011074:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP4Callback can be implemented in the user file
  */
}
24011076:	bf00      	nop
24011078:	46bd      	mov	sp, r7
2401107a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401107e:	4770      	bx	lr

24011080 <HAL_PWREx_WKUP5_Callback>:
/**
  * @brief PWR WKUP5 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP5_Callback (void)
{
24011080:	b480      	push	{r7}
24011082:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP5Callback can be implemented in the user file
  */
}
24011084:	bf00      	nop
24011086:	46bd      	mov	sp, r7
24011088:	f85d 7b04 	ldr.w	r7, [sp], #4
2401108c:	4770      	bx	lr

2401108e <HAL_PWREx_WKUP6_Callback>:
/**
  * @brief PWR WKUP6 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP6_Callback (void)
{
2401108e:	b480      	push	{r7}
24011090:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP6Callback can be implemented in the user file
  */
}
24011092:	bf00      	nop
24011094:	46bd      	mov	sp, r7
24011096:	f85d 7b04 	ldr.w	r7, [sp], #4
2401109a:	4770      	bx	lr

2401109c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
2401109c:	b580      	push	{r7, lr}
2401109e:	b082      	sub	sp, #8
240110a0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
240110a2:	4b10      	ldr	r3, [pc, #64]	; (240110e4 <HAL_PWREx_EnableBkUpReg+0x48>)
240110a4:	689b      	ldr	r3, [r3, #8]
240110a6:	4a0f      	ldr	r2, [pc, #60]	; (240110e4 <HAL_PWREx_EnableBkUpReg+0x48>)
240110a8:	f043 0301 	orr.w	r3, r3, #1
240110ac:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
240110ae:	f7f1 f8a5 	bl	240021fc <HAL_GetTick>
240110b2:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
240110b4:	e009      	b.n	240110ca <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
240110b6:	f7f1 f8a1 	bl	240021fc <HAL_GetTick>
240110ba:	4602      	mov	r2, r0
240110bc:	687b      	ldr	r3, [r7, #4]
240110be:	1ad3      	subs	r3, r2, r3
240110c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240110c4:	d901      	bls.n	240110ca <HAL_PWREx_EnableBkUpReg+0x2e>
    {
      return HAL_ERROR;
240110c6:	2301      	movs	r3, #1
240110c8:	e007      	b.n	240110da <HAL_PWREx_EnableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
240110ca:	4b06      	ldr	r3, [pc, #24]	; (240110e4 <HAL_PWREx_EnableBkUpReg+0x48>)
240110cc:	689b      	ldr	r3, [r3, #8]
240110ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240110d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240110d6:	d1ee      	bne.n	240110b6 <HAL_PWREx_EnableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
240110d8:	2300      	movs	r3, #0
}
240110da:	4618      	mov	r0, r3
240110dc:	3708      	adds	r7, #8
240110de:	46bd      	mov	sp, r7
240110e0:	bd80      	pop	{r7, pc}
240110e2:	bf00      	nop
240110e4:	58024800 	.word	0x58024800

240110e8 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
240110e8:	b580      	push	{r7, lr}
240110ea:	b082      	sub	sp, #8
240110ec:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
240110ee:	4b10      	ldr	r3, [pc, #64]	; (24011130 <HAL_PWREx_DisableBkUpReg+0x48>)
240110f0:	689b      	ldr	r3, [r3, #8]
240110f2:	4a0f      	ldr	r2, [pc, #60]	; (24011130 <HAL_PWREx_DisableBkUpReg+0x48>)
240110f4:	f023 0301 	bic.w	r3, r3, #1
240110f8:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
240110fa:	f7f1 f87f 	bl	240021fc <HAL_GetTick>
240110fe:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24011100:	e009      	b.n	24011116 <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24011102:	f7f1 f87b 	bl	240021fc <HAL_GetTick>
24011106:	4602      	mov	r2, r0
24011108:	687b      	ldr	r3, [r7, #4]
2401110a:	1ad3      	subs	r3, r2, r3
2401110c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24011110:	d901      	bls.n	24011116 <HAL_PWREx_DisableBkUpReg+0x2e>
    {
      return HAL_ERROR;
24011112:	2301      	movs	r3, #1
24011114:	e007      	b.n	24011126 <HAL_PWREx_DisableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24011116:	4b06      	ldr	r3, [pc, #24]	; (24011130 <HAL_PWREx_DisableBkUpReg+0x48>)
24011118:	689b      	ldr	r3, [r3, #8]
2401111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2401111e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24011122:	d0ee      	beq.n	24011102 <HAL_PWREx_DisableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24011124:	2300      	movs	r3, #0
}
24011126:	4618      	mov	r0, r3
24011128:	3708      	adds	r7, #8
2401112a:	46bd      	mov	sp, r7
2401112c:	bd80      	pop	{r7, pc}
2401112e:	bf00      	nop
24011130:	58024800 	.word	0x58024800

24011134 <HAL_PWREx_EnableUSBReg>:
/**
  * @brief Enable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
{
24011134:	b580      	push	{r7, lr}
24011136:	b082      	sub	sp, #8
24011138:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB regulator */
  SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
2401113a:	4b10      	ldr	r3, [pc, #64]	; (2401117c <HAL_PWREx_EnableUSBReg+0x48>)
2401113c:	68db      	ldr	r3, [r3, #12]
2401113e:	4a0f      	ldr	r2, [pc, #60]	; (2401117c <HAL_PWREx_EnableUSBReg+0x48>)
24011140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24011144:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24011146:	f7f1 f859 	bl	240021fc <HAL_GetTick>
2401114a:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
2401114c:	e009      	b.n	24011162 <HAL_PWREx_EnableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
2401114e:	f7f1 f855 	bl	240021fc <HAL_GetTick>
24011152:	4602      	mov	r2, r0
24011154:	687b      	ldr	r3, [r7, #4]
24011156:	1ad3      	subs	r3, r2, r3
24011158:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2401115c:	d901      	bls.n	24011162 <HAL_PWREx_EnableUSBReg+0x2e>
    {
      return HAL_ERROR;
2401115e:	2301      	movs	r3, #1
24011160:	e007      	b.n	24011172 <HAL_PWREx_EnableUSBReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
24011162:	4b06      	ldr	r3, [pc, #24]	; (2401117c <HAL_PWREx_EnableUSBReg+0x48>)
24011164:	68db      	ldr	r3, [r3, #12]
24011166:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
2401116a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2401116e:	d1ee      	bne.n	2401114e <HAL_PWREx_EnableUSBReg+0x1a>
    }
  }

  return HAL_OK;
24011170:	2300      	movs	r3, #0
}
24011172:	4618      	mov	r0, r3
24011174:	3708      	adds	r7, #8
24011176:	46bd      	mov	sp, r7
24011178:	bd80      	pop	{r7, pc}
2401117a:	bf00      	nop
2401117c:	58024800 	.word	0x58024800

24011180 <HAL_PWREx_DisableUSBReg>:
/**
  * @brief Disable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
{
24011180:	b580      	push	{r7, lr}
24011182:	b082      	sub	sp, #8
24011184:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the USB regulator */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
24011186:	4b10      	ldr	r3, [pc, #64]	; (240111c8 <HAL_PWREx_DisableUSBReg+0x48>)
24011188:	68db      	ldr	r3, [r3, #12]
2401118a:	4a0f      	ldr	r2, [pc, #60]	; (240111c8 <HAL_PWREx_DisableUSBReg+0x48>)
2401118c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
24011190:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24011192:	f7f1 f833 	bl	240021fc <HAL_GetTick>
24011196:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is reset */
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
24011198:	e009      	b.n	240111ae <HAL_PWREx_DisableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
2401119a:	f7f1 f82f 	bl	240021fc <HAL_GetTick>
2401119e:	4602      	mov	r2, r0
240111a0:	687b      	ldr	r3, [r7, #4]
240111a2:	1ad3      	subs	r3, r2, r3
240111a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240111a8:	d901      	bls.n	240111ae <HAL_PWREx_DisableUSBReg+0x2e>
    {
      return HAL_ERROR;
240111aa:	2301      	movs	r3, #1
240111ac:	e007      	b.n	240111be <HAL_PWREx_DisableUSBReg+0x3e>
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
240111ae:	4b06      	ldr	r3, [pc, #24]	; (240111c8 <HAL_PWREx_DisableUSBReg+0x48>)
240111b0:	68db      	ldr	r3, [r3, #12]
240111b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
240111b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240111ba:	d0ee      	beq.n	2401119a <HAL_PWREx_DisableUSBReg+0x1a>
    }
  }

  return HAL_OK;
240111bc:	2300      	movs	r3, #0
}
240111be:	4618      	mov	r0, r3
240111c0:	3708      	adds	r7, #8
240111c2:	46bd      	mov	sp, r7
240111c4:	bd80      	pop	{r7, pc}
240111c6:	bf00      	nop
240111c8:	58024800 	.word	0x58024800

240111cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
240111cc:	b480      	push	{r7}
240111ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
240111d0:	4b05      	ldr	r3, [pc, #20]	; (240111e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
240111d2:	68db      	ldr	r3, [r3, #12]
240111d4:	4a04      	ldr	r2, [pc, #16]	; (240111e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
240111d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240111da:	60d3      	str	r3, [r2, #12]
}
240111dc:	bf00      	nop
240111de:	46bd      	mov	sp, r7
240111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
240111e4:	4770      	bx	lr
240111e6:	bf00      	nop
240111e8:	58024800 	.word	0x58024800

240111ec <HAL_PWREx_DisableUSBVoltageDetector>:
/**
  * @brief Disable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
240111ec:	b480      	push	{r7}
240111ee:	af00      	add	r7, sp, #0
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
240111f0:	4b05      	ldr	r3, [pc, #20]	; (24011208 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
240111f2:	68db      	ldr	r3, [r3, #12]
240111f4:	4a04      	ldr	r2, [pc, #16]	; (24011208 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
240111f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240111fa:	60d3      	str	r3, [r2, #12]
}
240111fc:	bf00      	nop
240111fe:	46bd      	mov	sp, r7
24011200:	f85d 7b04 	ldr.w	r7, [sp], #4
24011204:	4770      	bx	lr
24011206:	bf00      	nop
24011208:	58024800 	.word	0x58024800

2401120c <HAL_PWREx_EnableBatteryCharging>:
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
  * @retval None.
  */
void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
{
2401120c:	b480      	push	{r7}
2401120e:	b083      	sub	sp, #12
24011210:	af00      	add	r7, sp, #0
24011212:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));

  /* Specify the charging resistor */
  MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
24011214:	4b09      	ldr	r3, [pc, #36]	; (2401123c <HAL_PWREx_EnableBatteryCharging+0x30>)
24011216:	68db      	ldr	r3, [r3, #12]
24011218:	f423 7200 	bic.w	r2, r3, #512	; 0x200
2401121c:	4907      	ldr	r1, [pc, #28]	; (2401123c <HAL_PWREx_EnableBatteryCharging+0x30>)
2401121e:	687b      	ldr	r3, [r7, #4]
24011220:	4313      	orrs	r3, r2
24011222:	60cb      	str	r3, [r1, #12]

  /* Enable the Battery charging */
  SET_BIT (PWR->CR3, PWR_CR3_VBE);
24011224:	4b05      	ldr	r3, [pc, #20]	; (2401123c <HAL_PWREx_EnableBatteryCharging+0x30>)
24011226:	68db      	ldr	r3, [r3, #12]
24011228:	4a04      	ldr	r2, [pc, #16]	; (2401123c <HAL_PWREx_EnableBatteryCharging+0x30>)
2401122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2401122e:	60d3      	str	r3, [r2, #12]
}
24011230:	bf00      	nop
24011232:	370c      	adds	r7, #12
24011234:	46bd      	mov	sp, r7
24011236:	f85d 7b04 	ldr.w	r7, [sp], #4
2401123a:	4770      	bx	lr
2401123c:	58024800 	.word	0x58024800

24011240 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable the Battery charging.
  * @retval None.
  */
void HAL_PWREx_DisableBatteryCharging (void)
{
24011240:	b480      	push	{r7}
24011242:	af00      	add	r7, sp, #0
  /* Disable the Battery charging */
  CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
24011244:	4b05      	ldr	r3, [pc, #20]	; (2401125c <HAL_PWREx_DisableBatteryCharging+0x1c>)
24011246:	68db      	ldr	r3, [r3, #12]
24011248:	4a04      	ldr	r2, [pc, #16]	; (2401125c <HAL_PWREx_DisableBatteryCharging+0x1c>)
2401124a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2401124e:	60d3      	str	r3, [r2, #12]
}
24011250:	bf00      	nop
24011252:	46bd      	mov	sp, r7
24011254:	f85d 7b04 	ldr.w	r7, [sp], #4
24011258:	4770      	bx	lr
2401125a:	bf00      	nop
2401125c:	58024800 	.word	0x58024800

24011260 <HAL_PWREx_EnableMonitoring>:
/**
  * @brief Enable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_EnableMonitoring (void)
{
24011260:	b480      	push	{r7}
24011262:	af00      	add	r7, sp, #0
  /* Enable the VBAT and Temperature monitoring */
  SET_BIT (PWR->CR2, PWR_CR2_MONEN);
24011264:	4b05      	ldr	r3, [pc, #20]	; (2401127c <HAL_PWREx_EnableMonitoring+0x1c>)
24011266:	689b      	ldr	r3, [r3, #8]
24011268:	4a04      	ldr	r2, [pc, #16]	; (2401127c <HAL_PWREx_EnableMonitoring+0x1c>)
2401126a:	f043 0310 	orr.w	r3, r3, #16
2401126e:	6093      	str	r3, [r2, #8]
}
24011270:	bf00      	nop
24011272:	46bd      	mov	sp, r7
24011274:	f85d 7b04 	ldr.w	r7, [sp], #4
24011278:	4770      	bx	lr
2401127a:	bf00      	nop
2401127c:	58024800 	.word	0x58024800

24011280 <HAL_PWREx_DisableMonitoring>:
/**
  * @brief Disable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_DisableMonitoring (void)
{
24011280:	b480      	push	{r7}
24011282:	af00      	add	r7, sp, #0
  /* Disable the VBAT and Temperature monitoring */
  CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
24011284:	4b05      	ldr	r3, [pc, #20]	; (2401129c <HAL_PWREx_DisableMonitoring+0x1c>)
24011286:	689b      	ldr	r3, [r3, #8]
24011288:	4a04      	ldr	r2, [pc, #16]	; (2401129c <HAL_PWREx_DisableMonitoring+0x1c>)
2401128a:	f023 0310 	bic.w	r3, r3, #16
2401128e:	6093      	str	r3, [r2, #8]
}
24011290:	bf00      	nop
24011292:	46bd      	mov	sp, r7
24011294:	f85d 7b04 	ldr.w	r7, [sp], #4
24011298:	4770      	bx	lr
2401129a:	bf00      	nop
2401129c:	58024800 	.word	0x58024800

240112a0 <HAL_PWREx_GetTemperatureLevel>:
  * @brief Indicate whether the junction temperature is between, above or below
  *        the thresholds.
  * @retval Temperature level.
  */
uint32_t HAL_PWREx_GetTemperatureLevel (void)
{
240112a0:	b480      	push	{r7}
240112a2:	b083      	sub	sp, #12
240112a4:	af00      	add	r7, sp, #0
  uint32_t tempLevel, regValue;

  /* Read the temperature flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
240112a6:	4b0f      	ldr	r3, [pc, #60]	; (240112e4 <HAL_PWREx_GetTemperatureLevel+0x44>)
240112a8:	689b      	ldr	r3, [r3, #8]
240112aa:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
240112ae:	603b      	str	r3, [r7, #0]

  /* Check if the temperature is below the threshold */
  if (regValue == PWR_CR2_TEMPL)
240112b0:	683b      	ldr	r3, [r7, #0]
240112b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240112b6:	d103      	bne.n	240112c0 <HAL_PWREx_GetTemperatureLevel+0x20>
  {
    tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
240112b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
240112bc:	607b      	str	r3, [r7, #4]
240112be:	e009      	b.n	240112d4 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* Check if the temperature is above the threshold */
  else if (regValue == PWR_CR2_TEMPH)
240112c0:	683b      	ldr	r3, [r7, #0]
240112c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
240112c6:	d103      	bne.n	240112d0 <HAL_PWREx_GetTemperatureLevel+0x30>
  {
    tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
240112c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
240112cc:	607b      	str	r3, [r7, #4]
240112ce:	e001      	b.n	240112d4 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* The temperature is between the thresholds */
  else
  {
    tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
240112d0:	2300      	movs	r3, #0
240112d2:	607b      	str	r3, [r7, #4]
  }

  return tempLevel;
240112d4:	687b      	ldr	r3, [r7, #4]
}
240112d6:	4618      	mov	r0, r3
240112d8:	370c      	adds	r7, #12
240112da:	46bd      	mov	sp, r7
240112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
240112e0:	4770      	bx	lr
240112e2:	bf00      	nop
240112e4:	58024800 	.word	0x58024800

240112e8 <HAL_PWREx_GetVBATLevel>:
  * @brief Indicate whether the Battery voltage level is between, above or below
  *        the thresholds.
  * @retval VBAT level.
  */
uint32_t HAL_PWREx_GetVBATLevel (void)
{
240112e8:	b480      	push	{r7}
240112ea:	b083      	sub	sp, #12
240112ec:	af00      	add	r7, sp, #0
  uint32_t VBATLevel, regValue;

  /* Read the VBAT flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
240112ee:	4b0f      	ldr	r3, [pc, #60]	; (2401132c <HAL_PWREx_GetVBATLevel+0x44>)
240112f0:	689b      	ldr	r3, [r3, #8]
240112f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
240112f6:	603b      	str	r3, [r7, #0]

  /* Check if the VBAT is below the threshold */
  if (regValue == PWR_CR2_VBATL)
240112f8:	683b      	ldr	r3, [r7, #0]
240112fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
240112fe:	d103      	bne.n	24011308 <HAL_PWREx_GetVBATLevel+0x20>
  {
    VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
24011300:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24011304:	607b      	str	r3, [r7, #4]
24011306:	e009      	b.n	2401131c <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* Check if the VBAT is above the threshold */
  else if (regValue == PWR_CR2_VBATH)
24011308:	683b      	ldr	r3, [r7, #0]
2401130a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2401130e:	d103      	bne.n	24011318 <HAL_PWREx_GetVBATLevel+0x30>
  {
    VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
24011310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
24011314:	607b      	str	r3, [r7, #4]
24011316:	e001      	b.n	2401131c <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* The VBAT is between the thresholds */
  else
  {
    VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
24011318:	2300      	movs	r3, #0
2401131a:	607b      	str	r3, [r7, #4]
  }

  return VBATLevel;
2401131c:	687b      	ldr	r3, [r7, #4]
}
2401131e:	4618      	mov	r0, r3
24011320:	370c      	adds	r7, #12
24011322:	46bd      	mov	sp, r7
24011324:	f85d 7b04 	ldr.w	r7, [sp], #4
24011328:	4770      	bx	lr
2401132a:	bf00      	nop
2401132c:	58024800 	.word	0x58024800

24011330 <HAL_PWREx_ConfigAVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
{
24011330:	b480      	push	{r7}
24011332:	b083      	sub	sp, #12
24011334:	af00      	add	r7, sp, #0
24011336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
  assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));

  /* Set the ALS[18:17] bits according to AVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
24011338:	4b37      	ldr	r3, [pc, #220]	; (24011418 <HAL_PWREx_ConfigAVD+0xe8>)
2401133a:	681b      	ldr	r3, [r3, #0]
2401133c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
24011340:	687b      	ldr	r3, [r7, #4]
24011342:	681b      	ldr	r3, [r3, #0]
24011344:	4934      	ldr	r1, [pc, #208]	; (24011418 <HAL_PWREx_ConfigAVD+0xe8>)
24011346:	4313      	orrs	r3, r2
24011348:	600b      	str	r3, [r1, #0]

  /* Clear any previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
2401134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2401134e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24011352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401135a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_AVD_EXTI_DISABLE_IT ();
2401135e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24011366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401136e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
24011372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011376:	681b      	ldr	r3, [r3, #0]
24011378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401137c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24011380:	6013      	str	r3, [r2, #0]
  __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
24011382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011386:	685b      	ldr	r3, [r3, #4]
24011388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401138c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24011390:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Configure the interrupt mode */
  if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
24011392:	687b      	ldr	r3, [r7, #4]
24011394:	685b      	ldr	r3, [r3, #4]
24011396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2401139a:	2b00      	cmp	r3, #0
2401139c:	d009      	beq.n	240113b2 <HAL_PWREx_ConfigAVD+0x82>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_IT ();
2401139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240113a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240113a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240113aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240113ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the event mode */
  if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
240113b2:	687b      	ldr	r3, [r7, #4]
240113b4:	685b      	ldr	r3, [r3, #4]
240113b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240113ba:	2b00      	cmp	r3, #0
240113bc:	d009      	beq.n	240113d2 <HAL_PWREx_ConfigAVD+0xa2>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
240113be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240113c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240113c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240113ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240113ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
240113d2:	687b      	ldr	r3, [r7, #4]
240113d4:	685b      	ldr	r3, [r3, #4]
240113d6:	f003 0301 	and.w	r3, r3, #1
240113da:	2b00      	cmp	r3, #0
240113dc:	d007      	beq.n	240113ee <HAL_PWREx_ConfigAVD+0xbe>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
240113de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240113e2:	681b      	ldr	r3, [r3, #0]
240113e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240113e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240113ec:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
240113ee:	687b      	ldr	r3, [r7, #4]
240113f0:	685b      	ldr	r3, [r3, #4]
240113f2:	f003 0302 	and.w	r3, r3, #2
240113f6:	2b00      	cmp	r3, #0
240113f8:	d007      	beq.n	2401140a <HAL_PWREx_ConfigAVD+0xda>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
240113fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240113fe:	685b      	ldr	r3, [r3, #4]
24011400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24011404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011408:	6053      	str	r3, [r2, #4]
  }
}
2401140a:	bf00      	nop
2401140c:	370c      	adds	r7, #12
2401140e:	46bd      	mov	sp, r7
24011410:	f85d 7b04 	ldr.w	r7, [sp], #4
24011414:	4770      	bx	lr
24011416:	bf00      	nop
24011418:	58024800 	.word	0x58024800

2401141c <HAL_PWREx_EnableAVD>:
/**
  * @brief Enable the Analog Voltage Detector (AVD).
  * @retval None.
  */
void HAL_PWREx_EnableAVD (void)
{
2401141c:	b480      	push	{r7}
2401141e:	af00      	add	r7, sp, #0
  /* Enable the Analog Voltage Detector */
  SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
24011420:	4b05      	ldr	r3, [pc, #20]	; (24011438 <HAL_PWREx_EnableAVD+0x1c>)
24011422:	681b      	ldr	r3, [r3, #0]
24011424:	4a04      	ldr	r2, [pc, #16]	; (24011438 <HAL_PWREx_EnableAVD+0x1c>)
24011426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2401142a:	6013      	str	r3, [r2, #0]
}
2401142c:	bf00      	nop
2401142e:	46bd      	mov	sp, r7
24011430:	f85d 7b04 	ldr.w	r7, [sp], #4
24011434:	4770      	bx	lr
24011436:	bf00      	nop
24011438:	58024800 	.word	0x58024800

2401143c <HAL_PWREx_DisableAVD>:
/**
  * @brief Disable the Analog Voltage Detector(AVD).
  * @retval None.
  */
void HAL_PWREx_DisableAVD (void)
{
2401143c:	b480      	push	{r7}
2401143e:	af00      	add	r7, sp, #0
  /* Disable the Analog Voltage Detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
24011440:	4b05      	ldr	r3, [pc, #20]	; (24011458 <HAL_PWREx_DisableAVD+0x1c>)
24011442:	681b      	ldr	r3, [r3, #0]
24011444:	4a04      	ldr	r2, [pc, #16]	; (24011458 <HAL_PWREx_DisableAVD+0x1c>)
24011446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2401144a:	6013      	str	r3, [r2, #0]
}
2401144c:	bf00      	nop
2401144e:	46bd      	mov	sp, r7
24011450:	f85d 7b04 	ldr.w	r7, [sp], #4
24011454:	4770      	bx	lr
24011456:	bf00      	nop
24011458:	58024800 	.word	0x58024800

2401145c <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
2401145c:	b580      	push	{r7, lr}
2401145e:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
24011460:	4b1b      	ldr	r3, [pc, #108]	; (240114d0 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
24011462:	681b      	ldr	r3, [r3, #0]
24011464:	f003 0310 	and.w	r3, r3, #16
24011468:	2b00      	cmp	r3, #0
2401146a:	d014      	beq.n	24011496 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
2401146c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24011474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24011478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2401147c:	d10b      	bne.n	24011496 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
2401147e:	f7ff faf4 	bl	24010a6a <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
24011482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24011486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2401148a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24011492:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
24011496:	4b0e      	ldr	r3, [pc, #56]	; (240114d0 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
24011498:	681b      	ldr	r3, [r3, #0]
2401149a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2401149e:	2b00      	cmp	r3, #0
240114a0:	d014      	beq.n	240114cc <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
240114a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240114a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240114aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240114ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240114b2:	d10b      	bne.n	240114cc <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
240114b4:	f000 f80e 	bl	240114d4 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
240114b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240114bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240114c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240114c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240114c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
240114cc:	bf00      	nop
240114ce:	bd80      	pop	{r7, pc}
240114d0:	58024800 	.word	0x58024800

240114d4 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
240114d4:	b480      	push	{r7}
240114d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
240114d8:	bf00      	nop
240114da:	46bd      	mov	sp, r7
240114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
240114e0:	4770      	bx	lr
	...

240114e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
240114e4:	b580      	push	{r7, lr}
240114e6:	b086      	sub	sp, #24
240114e8:	af02      	add	r7, sp, #8
240114ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
240114ec:	f7f0 fe86 	bl	240021fc <HAL_GetTick>
240114f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
240114f2:	687b      	ldr	r3, [r7, #4]
240114f4:	2b00      	cmp	r3, #0
240114f6:	d101      	bne.n	240114fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
240114f8:	2301      	movs	r3, #1
240114fa:	e05f      	b.n	240115bc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
240114fc:	687b      	ldr	r3, [r7, #4]
240114fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011502:	b2db      	uxtb	r3, r3
24011504:	2b00      	cmp	r3, #0
24011506:	d107      	bne.n	24011518 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
24011508:	6878      	ldr	r0, [r7, #4]
2401150a:	f7ef fce9 	bl	24000ee0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
2401150e:	f241 3188 	movw	r1, #5000	; 0x1388
24011512:	6878      	ldr	r0, [r7, #4]
24011514:	f001 f98e 	bl	24012834 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24011518:	687b      	ldr	r3, [r7, #4]
2401151a:	681b      	ldr	r3, [r3, #0]
2401151c:	681b      	ldr	r3, [r3, #0]
2401151e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
24011522:	687b      	ldr	r3, [r7, #4]
24011524:	689b      	ldr	r3, [r3, #8]
24011526:	3b01      	subs	r3, #1
24011528:	021a      	lsls	r2, r3, #8
2401152a:	687b      	ldr	r3, [r7, #4]
2401152c:	681b      	ldr	r3, [r3, #0]
2401152e:	430a      	orrs	r2, r1
24011530:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24011532:	687b      	ldr	r3, [r7, #4]
24011534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24011536:	9300      	str	r3, [sp, #0]
24011538:	68fb      	ldr	r3, [r7, #12]
2401153a:	2200      	movs	r2, #0
2401153c:	2120      	movs	r1, #32
2401153e:	6878      	ldr	r0, [r7, #4]
24011540:	f001 fa87 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24011544:	4603      	mov	r3, r0
24011546:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
24011548:	7afb      	ldrb	r3, [r7, #11]
2401154a:	2b00      	cmp	r3, #0
2401154c:	d135      	bne.n	240115ba <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
2401154e:	687b      	ldr	r3, [r7, #4]
24011550:	681b      	ldr	r3, [r3, #0]
24011552:	681a      	ldr	r2, [r3, #0]
24011554:	4b1b      	ldr	r3, [pc, #108]	; (240115c4 <HAL_QSPI_Init+0xe0>)
24011556:	4013      	ands	r3, r2
24011558:	687a      	ldr	r2, [r7, #4]
2401155a:	6852      	ldr	r2, [r2, #4]
2401155c:	0611      	lsls	r1, r2, #24
2401155e:	687a      	ldr	r2, [r7, #4]
24011560:	68d2      	ldr	r2, [r2, #12]
24011562:	4311      	orrs	r1, r2
24011564:	687a      	ldr	r2, [r7, #4]
24011566:	69d2      	ldr	r2, [r2, #28]
24011568:	4311      	orrs	r1, r2
2401156a:	687a      	ldr	r2, [r7, #4]
2401156c:	6a12      	ldr	r2, [r2, #32]
2401156e:	4311      	orrs	r1, r2
24011570:	687a      	ldr	r2, [r7, #4]
24011572:	6812      	ldr	r2, [r2, #0]
24011574:	430b      	orrs	r3, r1
24011576:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24011578:	687b      	ldr	r3, [r7, #4]
2401157a:	681b      	ldr	r3, [r3, #0]
2401157c:	685a      	ldr	r2, [r3, #4]
2401157e:	4b12      	ldr	r3, [pc, #72]	; (240115c8 <HAL_QSPI_Init+0xe4>)
24011580:	4013      	ands	r3, r2
24011582:	687a      	ldr	r2, [r7, #4]
24011584:	6912      	ldr	r2, [r2, #16]
24011586:	0411      	lsls	r1, r2, #16
24011588:	687a      	ldr	r2, [r7, #4]
2401158a:	6952      	ldr	r2, [r2, #20]
2401158c:	4311      	orrs	r1, r2
2401158e:	687a      	ldr	r2, [r7, #4]
24011590:	6992      	ldr	r2, [r2, #24]
24011592:	4311      	orrs	r1, r2
24011594:	687a      	ldr	r2, [r7, #4]
24011596:	6812      	ldr	r2, [r2, #0]
24011598:	430b      	orrs	r3, r1
2401159a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
2401159c:	687b      	ldr	r3, [r7, #4]
2401159e:	681b      	ldr	r3, [r3, #0]
240115a0:	681a      	ldr	r2, [r3, #0]
240115a2:	687b      	ldr	r3, [r7, #4]
240115a4:	681b      	ldr	r3, [r3, #0]
240115a6:	f042 0201 	orr.w	r2, r2, #1
240115aa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240115ac:	687b      	ldr	r3, [r7, #4]
240115ae:	2200      	movs	r2, #0
240115b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
240115b2:	687b      	ldr	r3, [r7, #4]
240115b4:	2201      	movs	r2, #1
240115b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
240115ba:	7afb      	ldrb	r3, [r7, #11]
}
240115bc:	4618      	mov	r0, r3
240115be:	3710      	adds	r7, #16
240115c0:	46bd      	mov	sp, r7
240115c2:	bd80      	pop	{r7, pc}
240115c4:	00ffff2f 	.word	0x00ffff2f
240115c8:	ffe0f8fe 	.word	0xffe0f8fe

240115cc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
240115cc:	b580      	push	{r7, lr}
240115ce:	b082      	sub	sp, #8
240115d0:	af00      	add	r7, sp, #0
240115d2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
240115d4:	687b      	ldr	r3, [r7, #4]
240115d6:	2b00      	cmp	r3, #0
240115d8:	d101      	bne.n	240115de <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
240115da:	2301      	movs	r3, #1
240115dc:	e012      	b.n	24011604 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
240115de:	687b      	ldr	r3, [r7, #4]
240115e0:	681b      	ldr	r3, [r3, #0]
240115e2:	681a      	ldr	r2, [r3, #0]
240115e4:	687b      	ldr	r3, [r7, #4]
240115e6:	681b      	ldr	r3, [r3, #0]
240115e8:	f022 0201 	bic.w	r2, r2, #1
240115ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
240115ee:	6878      	ldr	r0, [r7, #4]
240115f0:	f7ef fd32 	bl	24001058 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240115f4:	687b      	ldr	r3, [r7, #4]
240115f6:	2200      	movs	r2, #0
240115f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
240115fa:	687b      	ldr	r3, [r7, #4]
240115fc:	2200      	movs	r2, #0
240115fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
24011602:	2300      	movs	r3, #0
}
24011604:	4618      	mov	r0, r3
24011606:	3708      	adds	r7, #8
24011608:	46bd      	mov	sp, r7
2401160a:	bd80      	pop	{r7, pc}
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
2401160c:	b480      	push	{r7}
2401160e:	b083      	sub	sp, #12
24011610:	af00      	add	r7, sp, #0
24011612:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
24011614:	bf00      	nop
24011616:	370c      	adds	r7, #12
24011618:	46bd      	mov	sp, r7
2401161a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401161e:	4770      	bx	lr
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
24011620:	b480      	push	{r7}
24011622:	b083      	sub	sp, #12
24011624:	af00      	add	r7, sp, #0
24011626:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
24011628:	bf00      	nop
2401162a:	370c      	adds	r7, #12
2401162c:	46bd      	mov	sp, r7
2401162e:	f85d 7b04 	ldr.w	r7, [sp], #4
24011632:	4770      	bx	lr

24011634 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
24011634:	b580      	push	{r7, lr}
24011636:	b086      	sub	sp, #24
24011638:	af00      	add	r7, sp, #0
2401163a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
2401163c:	687b      	ldr	r3, [r7, #4]
2401163e:	681b      	ldr	r3, [r3, #0]
24011640:	689b      	ldr	r3, [r3, #8]
24011642:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
24011644:	687b      	ldr	r3, [r7, #4]
24011646:	681b      	ldr	r3, [r3, #0]
24011648:	681b      	ldr	r3, [r3, #0]
2401164a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
2401164c:	697b      	ldr	r3, [r7, #20]
2401164e:	f003 0304 	and.w	r3, r3, #4
24011652:	2b00      	cmp	r3, #0
24011654:	d064      	beq.n	24011720 <HAL_QSPI_IRQHandler+0xec>
24011656:	693b      	ldr	r3, [r7, #16]
24011658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2401165c:	2b00      	cmp	r3, #0
2401165e:	d05f      	beq.n	24011720 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
24011660:	687b      	ldr	r3, [r7, #4]
24011662:	681b      	ldr	r3, [r3, #0]
24011664:	3320      	adds	r3, #32
24011666:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011668:	687b      	ldr	r3, [r7, #4]
2401166a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401166e:	b2db      	uxtb	r3, r3
24011670:	2b12      	cmp	r3, #18
24011672:	d125      	bne.n	240116c0 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24011674:	e01c      	b.n	240116b0 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
24011676:	687b      	ldr	r3, [r7, #4]
24011678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401167a:	2b00      	cmp	r3, #0
2401167c:	d00f      	beq.n	2401169e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
2401167e:	687b      	ldr	r3, [r7, #4]
24011680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011682:	781a      	ldrb	r2, [r3, #0]
24011684:	68fb      	ldr	r3, [r7, #12]
24011686:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
24011688:	687b      	ldr	r3, [r7, #4]
2401168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401168c:	1c5a      	adds	r2, r3, #1
2401168e:	687b      	ldr	r3, [r7, #4]
24011690:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
24011692:	687b      	ldr	r3, [r7, #4]
24011694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24011696:	1e5a      	subs	r2, r3, #1
24011698:	687b      	ldr	r3, [r7, #4]
2401169a:	62da      	str	r2, [r3, #44]	; 0x2c
2401169c:	e008      	b.n	240116b0 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
2401169e:	687b      	ldr	r3, [r7, #4]
240116a0:	681b      	ldr	r3, [r3, #0]
240116a2:	681a      	ldr	r2, [r3, #0]
240116a4:	687b      	ldr	r3, [r7, #4]
240116a6:	681b      	ldr	r3, [r3, #0]
240116a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
240116ac:	601a      	str	r2, [r3, #0]
          break;
240116ae:	e033      	b.n	24011718 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
240116b0:	687b      	ldr	r3, [r7, #4]
240116b2:	681b      	ldr	r3, [r3, #0]
240116b4:	689b      	ldr	r3, [r3, #8]
240116b6:	f003 0304 	and.w	r3, r3, #4
240116ba:	2b00      	cmp	r3, #0
240116bc:	d1db      	bne.n	24011676 <HAL_QSPI_IRQHandler+0x42>
240116be:	e02b      	b.n	24011718 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
240116c0:	687b      	ldr	r3, [r7, #4]
240116c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240116c6:	b2db      	uxtb	r3, r3
240116c8:	2b22      	cmp	r3, #34	; 0x22
240116ca:	d125      	bne.n	24011718 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
240116cc:	e01d      	b.n	2401170a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
240116ce:	687b      	ldr	r3, [r7, #4]
240116d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240116d2:	2b00      	cmp	r3, #0
240116d4:	d010      	beq.n	240116f8 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
240116d6:	687b      	ldr	r3, [r7, #4]
240116d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240116da:	68fa      	ldr	r2, [r7, #12]
240116dc:	7812      	ldrb	r2, [r2, #0]
240116de:	b2d2      	uxtb	r2, r2
240116e0:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
240116e2:	687b      	ldr	r3, [r7, #4]
240116e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240116e6:	1c5a      	adds	r2, r3, #1
240116e8:	687b      	ldr	r3, [r7, #4]
240116ea:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
240116ec:	687b      	ldr	r3, [r7, #4]
240116ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240116f0:	1e5a      	subs	r2, r3, #1
240116f2:	687b      	ldr	r3, [r7, #4]
240116f4:	639a      	str	r2, [r3, #56]	; 0x38
240116f6:	e008      	b.n	2401170a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
240116f8:	687b      	ldr	r3, [r7, #4]
240116fa:	681b      	ldr	r3, [r3, #0]
240116fc:	681a      	ldr	r2, [r3, #0]
240116fe:	687b      	ldr	r3, [r7, #4]
24011700:	681b      	ldr	r3, [r3, #0]
24011702:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24011706:	601a      	str	r2, [r3, #0]
          break;
24011708:	e006      	b.n	24011718 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2401170a:	687b      	ldr	r3, [r7, #4]
2401170c:	681b      	ldr	r3, [r3, #0]
2401170e:	689b      	ldr	r3, [r3, #8]
24011710:	f003 0304 	and.w	r3, r3, #4
24011714:	2b00      	cmp	r3, #0
24011716:	d1da      	bne.n	240116ce <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
24011718:	6878      	ldr	r0, [r7, #4]
2401171a:	f000 ff72 	bl	24012602 <HAL_QSPI_FifoThresholdCallback>
2401171e:	e13c      	b.n	2401199a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
24011720:	697b      	ldr	r3, [r7, #20]
24011722:	f003 0302 	and.w	r3, r3, #2
24011726:	2b00      	cmp	r3, #0
24011728:	f000 80b0 	beq.w	2401188c <HAL_QSPI_IRQHandler+0x258>
2401172c:	693b      	ldr	r3, [r7, #16]
2401172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24011732:	2b00      	cmp	r3, #0
24011734:	f000 80aa 	beq.w	2401188c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
24011738:	687b      	ldr	r3, [r7, #4]
2401173a:	681b      	ldr	r3, [r3, #0]
2401173c:	2202      	movs	r2, #2
2401173e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24011740:	687b      	ldr	r3, [r7, #4]
24011742:	681b      	ldr	r3, [r3, #0]
24011744:	681a      	ldr	r2, [r3, #0]
24011746:	687b      	ldr	r3, [r7, #4]
24011748:	681b      	ldr	r3, [r3, #0]
2401174a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
2401174e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011750:	687b      	ldr	r3, [r7, #4]
24011752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011756:	b2db      	uxtb	r3, r3
24011758:	2b12      	cmp	r3, #18
2401175a:	d120      	bne.n	2401179e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2401175c:	687b      	ldr	r3, [r7, #4]
2401175e:	681b      	ldr	r3, [r3, #0]
24011760:	681b      	ldr	r3, [r3, #0]
24011762:	f003 0304 	and.w	r3, r3, #4
24011766:	2b00      	cmp	r3, #0
24011768:	d011      	beq.n	2401178e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2401176a:	687b      	ldr	r3, [r7, #4]
2401176c:	681b      	ldr	r3, [r3, #0]
2401176e:	681a      	ldr	r2, [r3, #0]
24011770:	687b      	ldr	r3, [r7, #4]
24011772:	681b      	ldr	r3, [r3, #0]
24011774:	f022 0204 	bic.w	r2, r2, #4
24011778:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
2401177a:	687b      	ldr	r3, [r7, #4]
2401177c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401177e:	681b      	ldr	r3, [r3, #0]
24011780:	68da      	ldr	r2, [r3, #12]
24011782:	687b      	ldr	r3, [r7, #4]
24011784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011786:	681b      	ldr	r3, [r3, #0]
24011788:	f022 0201 	bic.w	r2, r2, #1
2401178c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2401178e:	687b      	ldr	r3, [r7, #4]
24011790:	2201      	movs	r2, #1
24011792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
24011796:	6878      	ldr	r0, [r7, #4]
24011798:	f000 ff29 	bl	240125ee <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2401179c:	e0fa      	b.n	24011994 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
2401179e:	687b      	ldr	r3, [r7, #4]
240117a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240117a4:	b2db      	uxtb	r3, r3
240117a6:	2b22      	cmp	r3, #34	; 0x22
240117a8:	d143      	bne.n	24011832 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240117aa:	687b      	ldr	r3, [r7, #4]
240117ac:	681b      	ldr	r3, [r3, #0]
240117ae:	681b      	ldr	r3, [r3, #0]
240117b0:	f003 0304 	and.w	r3, r3, #4
240117b4:	2b00      	cmp	r3, #0
240117b6:	d012      	beq.n	240117de <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240117b8:	687b      	ldr	r3, [r7, #4]
240117ba:	681b      	ldr	r3, [r3, #0]
240117bc:	681a      	ldr	r2, [r3, #0]
240117be:	687b      	ldr	r3, [r7, #4]
240117c0:	681b      	ldr	r3, [r3, #0]
240117c2:	f022 0204 	bic.w	r2, r2, #4
240117c6:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
240117c8:	687b      	ldr	r3, [r7, #4]
240117ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240117cc:	681b      	ldr	r3, [r3, #0]
240117ce:	68da      	ldr	r2, [r3, #12]
240117d0:	687b      	ldr	r3, [r7, #4]
240117d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240117d4:	681b      	ldr	r3, [r3, #0]
240117d6:	f022 0201 	bic.w	r2, r2, #1
240117da:	60da      	str	r2, [r3, #12]
240117dc:	e021      	b.n	24011822 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
240117de:	687b      	ldr	r3, [r7, #4]
240117e0:	681b      	ldr	r3, [r3, #0]
240117e2:	3320      	adds	r3, #32
240117e4:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
240117e6:	e013      	b.n	24011810 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
240117e8:	687b      	ldr	r3, [r7, #4]
240117ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240117ec:	2b00      	cmp	r3, #0
240117ee:	d017      	beq.n	24011820 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
240117f0:	687b      	ldr	r3, [r7, #4]
240117f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240117f4:	68fa      	ldr	r2, [r7, #12]
240117f6:	7812      	ldrb	r2, [r2, #0]
240117f8:	b2d2      	uxtb	r2, r2
240117fa:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
240117fc:	687b      	ldr	r3, [r7, #4]
240117fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011800:	1c5a      	adds	r2, r3, #1
24011802:	687b      	ldr	r3, [r7, #4]
24011804:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
24011806:	687b      	ldr	r3, [r7, #4]
24011808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2401180a:	1e5a      	subs	r2, r3, #1
2401180c:	687b      	ldr	r3, [r7, #4]
2401180e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
24011810:	687b      	ldr	r3, [r7, #4]
24011812:	681b      	ldr	r3, [r3, #0]
24011814:	689b      	ldr	r3, [r3, #8]
24011816:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
2401181a:	2b00      	cmp	r3, #0
2401181c:	d1e4      	bne.n	240117e8 <HAL_QSPI_IRQHandler+0x1b4>
2401181e:	e000      	b.n	24011822 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
24011820:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24011822:	687b      	ldr	r3, [r7, #4]
24011824:	2201      	movs	r2, #1
24011826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
2401182a:	6878      	ldr	r0, [r7, #4]
2401182c:	f000 fed5 	bl	240125da <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011830:	e0b0      	b.n	24011994 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
24011832:	687b      	ldr	r3, [r7, #4]
24011834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011838:	b2db      	uxtb	r3, r3
2401183a:	2b02      	cmp	r3, #2
2401183c:	d107      	bne.n	2401184e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2401183e:	687b      	ldr	r3, [r7, #4]
24011840:	2201      	movs	r2, #1
24011842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
24011846:	6878      	ldr	r0, [r7, #4]
24011848:	f000 febd 	bl	240125c6 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2401184c:	e0a2      	b.n	24011994 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
2401184e:	687b      	ldr	r3, [r7, #4]
24011850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011854:	b2db      	uxtb	r3, r3
24011856:	2b08      	cmp	r3, #8
24011858:	f040 809c 	bne.w	24011994 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
2401185c:	687b      	ldr	r3, [r7, #4]
2401185e:	681b      	ldr	r3, [r3, #0]
24011860:	695a      	ldr	r2, [r3, #20]
24011862:	687b      	ldr	r3, [r7, #4]
24011864:	681b      	ldr	r3, [r3, #0]
24011866:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2401186a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2401186c:	687b      	ldr	r3, [r7, #4]
2401186e:	2201      	movs	r2, #1
24011870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
24011874:	687b      	ldr	r3, [r7, #4]
24011876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011878:	2b00      	cmp	r3, #0
2401187a:	d103      	bne.n	24011884 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
2401187c:	6878      	ldr	r0, [r7, #4]
2401187e:	f000 fe98 	bl	240125b2 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011882:	e087      	b.n	24011994 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
24011884:	6878      	ldr	r0, [r7, #4]
24011886:	f000 fe8a 	bl	2401259e <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2401188a:	e083      	b.n	24011994 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
2401188c:	697b      	ldr	r3, [r7, #20]
2401188e:	f003 0308 	and.w	r3, r3, #8
24011892:	2b00      	cmp	r3, #0
24011894:	d01f      	beq.n	240118d6 <HAL_QSPI_IRQHandler+0x2a2>
24011896:	693b      	ldr	r3, [r7, #16]
24011898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2401189c:	2b00      	cmp	r3, #0
2401189e:	d01a      	beq.n	240118d6 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
240118a0:	687b      	ldr	r3, [r7, #4]
240118a2:	681b      	ldr	r3, [r3, #0]
240118a4:	2208      	movs	r2, #8
240118a6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
240118a8:	687b      	ldr	r3, [r7, #4]
240118aa:	681b      	ldr	r3, [r3, #0]
240118ac:	681b      	ldr	r3, [r3, #0]
240118ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240118b2:	2b00      	cmp	r3, #0
240118b4:	d00b      	beq.n	240118ce <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
240118b6:	687b      	ldr	r3, [r7, #4]
240118b8:	681b      	ldr	r3, [r3, #0]
240118ba:	681a      	ldr	r2, [r3, #0]
240118bc:	687b      	ldr	r3, [r7, #4]
240118be:	681b      	ldr	r3, [r3, #0]
240118c0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
240118c4:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
240118c6:	687b      	ldr	r3, [r7, #4]
240118c8:	2201      	movs	r2, #1
240118ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
240118ce:	6878      	ldr	r0, [r7, #4]
240118d0:	f000 fea1 	bl	24012616 <HAL_QSPI_StatusMatchCallback>
240118d4:	e061      	b.n	2401199a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
240118d6:	697b      	ldr	r3, [r7, #20]
240118d8:	f003 0301 	and.w	r3, r3, #1
240118dc:	2b00      	cmp	r3, #0
240118de:	d047      	beq.n	24011970 <HAL_QSPI_IRQHandler+0x33c>
240118e0:	693b      	ldr	r3, [r7, #16]
240118e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240118e6:	2b00      	cmp	r3, #0
240118e8:	d042      	beq.n	24011970 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
240118ea:	687b      	ldr	r3, [r7, #4]
240118ec:	681b      	ldr	r3, [r3, #0]
240118ee:	2201      	movs	r2, #1
240118f0:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
240118f2:	687b      	ldr	r3, [r7, #4]
240118f4:	681b      	ldr	r3, [r3, #0]
240118f6:	681a      	ldr	r2, [r3, #0]
240118f8:	687b      	ldr	r3, [r7, #4]
240118fa:	681b      	ldr	r3, [r3, #0]
240118fc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
24011900:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
24011902:	687b      	ldr	r3, [r7, #4]
24011904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011906:	f043 0202 	orr.w	r2, r3, #2
2401190a:	687b      	ldr	r3, [r7, #4]
2401190c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2401190e:	687b      	ldr	r3, [r7, #4]
24011910:	681b      	ldr	r3, [r3, #0]
24011912:	681b      	ldr	r3, [r3, #0]
24011914:	f003 0304 	and.w	r3, r3, #4
24011918:	2b00      	cmp	r3, #0
2401191a:	d021      	beq.n	24011960 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2401191c:	687b      	ldr	r3, [r7, #4]
2401191e:	681b      	ldr	r3, [r3, #0]
24011920:	681a      	ldr	r2, [r3, #0]
24011922:	687b      	ldr	r3, [r7, #4]
24011924:	681b      	ldr	r3, [r3, #0]
24011926:	f022 0204 	bic.w	r2, r2, #4
2401192a:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
2401192c:	687b      	ldr	r3, [r7, #4]
2401192e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011930:	4a1c      	ldr	r2, [pc, #112]	; (240119a4 <HAL_QSPI_IRQHandler+0x370>)
24011932:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
24011934:	687b      	ldr	r3, [r7, #4]
24011936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011938:	4618      	mov	r0, r3
2401193a:	f7fe fb34 	bl	2400ffa6 <HAL_MDMA_Abort_IT>
2401193e:	4603      	mov	r3, r0
24011940:	2b00      	cmp	r3, #0
24011942:	d029      	beq.n	24011998 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24011944:	687b      	ldr	r3, [r7, #4]
24011946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011948:	f043 0204 	orr.w	r2, r3, #4
2401194c:	687b      	ldr	r3, [r7, #4]
2401194e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
24011950:	687b      	ldr	r3, [r7, #4]
24011952:	2201      	movs	r2, #1
24011954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
24011958:	6878      	ldr	r0, [r7, #4]
2401195a:	f000 fe20 	bl	2401259e <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2401195e:	e01b      	b.n	24011998 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24011960:	687b      	ldr	r3, [r7, #4]
24011962:	2201      	movs	r2, #1
24011964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
24011968:	6878      	ldr	r0, [r7, #4]
2401196a:	f000 fe18 	bl	2401259e <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2401196e:	e013      	b.n	24011998 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
24011970:	697b      	ldr	r3, [r7, #20]
24011972:	f003 0310 	and.w	r3, r3, #16
24011976:	2b00      	cmp	r3, #0
24011978:	d00f      	beq.n	2401199a <HAL_QSPI_IRQHandler+0x366>
2401197a:	693b      	ldr	r3, [r7, #16]
2401197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24011980:	2b00      	cmp	r3, #0
24011982:	d00a      	beq.n	2401199a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
24011984:	687b      	ldr	r3, [r7, #4]
24011986:	681b      	ldr	r3, [r3, #0]
24011988:	2210      	movs	r2, #16
2401198a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
2401198c:	6878      	ldr	r0, [r7, #4]
2401198e:	f000 fe4c 	bl	2401262a <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
24011992:	e002      	b.n	2401199a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24011994:	bf00      	nop
24011996:	e000      	b.n	2401199a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24011998:	bf00      	nop
}
2401199a:	bf00      	nop
2401199c:	3718      	adds	r7, #24
2401199e:	46bd      	mov	sp, r7
240119a0:	bd80      	pop	{r7, pc}
240119a2:	bf00      	nop
240119a4:	240129ed 	.word	0x240129ed

240119a8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
240119a8:	b580      	push	{r7, lr}
240119aa:	b088      	sub	sp, #32
240119ac:	af02      	add	r7, sp, #8
240119ae:	60f8      	str	r0, [r7, #12]
240119b0:	60b9      	str	r1, [r7, #8]
240119b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
240119b4:	f7f0 fc22 	bl	240021fc <HAL_GetTick>
240119b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
240119ba:	68fb      	ldr	r3, [r7, #12]
240119bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240119c0:	b2db      	uxtb	r3, r3
240119c2:	2b01      	cmp	r3, #1
240119c4:	d101      	bne.n	240119ca <HAL_QSPI_Command+0x22>
240119c6:	2302      	movs	r3, #2
240119c8:	e048      	b.n	24011a5c <HAL_QSPI_Command+0xb4>
240119ca:	68fb      	ldr	r3, [r7, #12]
240119cc:	2201      	movs	r2, #1
240119ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240119d2:	68fb      	ldr	r3, [r7, #12]
240119d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240119d8:	b2db      	uxtb	r3, r3
240119da:	2b01      	cmp	r3, #1
240119dc:	d137      	bne.n	24011a4e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240119de:	68fb      	ldr	r3, [r7, #12]
240119e0:	2200      	movs	r2, #0
240119e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
240119e4:	68fb      	ldr	r3, [r7, #12]
240119e6:	2202      	movs	r2, #2
240119e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
240119ec:	687b      	ldr	r3, [r7, #4]
240119ee:	9300      	str	r3, [sp, #0]
240119f0:	693b      	ldr	r3, [r7, #16]
240119f2:	2200      	movs	r2, #0
240119f4:	2120      	movs	r1, #32
240119f6:	68f8      	ldr	r0, [r7, #12]
240119f8:	f001 f82b 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
240119fc:	4603      	mov	r3, r0
240119fe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24011a00:	7dfb      	ldrb	r3, [r7, #23]
24011a02:	2b00      	cmp	r3, #0
24011a04:	d125      	bne.n	24011a52 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011a06:	2200      	movs	r2, #0
24011a08:	68b9      	ldr	r1, [r7, #8]
24011a0a:	68f8      	ldr	r0, [r7, #12]
24011a0c:	f001 f858 	bl	24012ac0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24011a10:	68bb      	ldr	r3, [r7, #8]
24011a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011a14:	2b00      	cmp	r3, #0
24011a16:	d115      	bne.n	24011a44 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24011a18:	687b      	ldr	r3, [r7, #4]
24011a1a:	9300      	str	r3, [sp, #0]
24011a1c:	693b      	ldr	r3, [r7, #16]
24011a1e:	2201      	movs	r2, #1
24011a20:	2102      	movs	r1, #2
24011a22:	68f8      	ldr	r0, [r7, #12]
24011a24:	f001 f815 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24011a28:	4603      	mov	r3, r0
24011a2a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
24011a2c:	7dfb      	ldrb	r3, [r7, #23]
24011a2e:	2b00      	cmp	r3, #0
24011a30:	d10f      	bne.n	24011a52 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24011a32:	68fb      	ldr	r3, [r7, #12]
24011a34:	681b      	ldr	r3, [r3, #0]
24011a36:	2202      	movs	r2, #2
24011a38:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
24011a3a:	68fb      	ldr	r3, [r7, #12]
24011a3c:	2201      	movs	r2, #1
24011a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24011a42:	e006      	b.n	24011a52 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24011a44:	68fb      	ldr	r3, [r7, #12]
24011a46:	2201      	movs	r2, #1
24011a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24011a4c:	e001      	b.n	24011a52 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
24011a4e:	2302      	movs	r3, #2
24011a50:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24011a52:	68fb      	ldr	r3, [r7, #12]
24011a54:	2200      	movs	r2, #0
24011a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24011a5a:	7dfb      	ldrb	r3, [r7, #23]
}
24011a5c:	4618      	mov	r0, r3
24011a5e:	3718      	adds	r7, #24
24011a60:	46bd      	mov	sp, r7
24011a62:	bd80      	pop	{r7, pc}

24011a64 <HAL_QSPI_Command_IT>:
  * @param cmd structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
24011a64:	b580      	push	{r7, lr}
24011a66:	b086      	sub	sp, #24
24011a68:	af02      	add	r7, sp, #8
24011a6a:	6078      	str	r0, [r7, #4]
24011a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24011a6e:	f7f0 fbc5 	bl	240021fc <HAL_GetTick>
24011a72:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24011a74:	687b      	ldr	r3, [r7, #4]
24011a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011a7a:	b2db      	uxtb	r3, r3
24011a7c:	2b01      	cmp	r3, #1
24011a7e:	d101      	bne.n	24011a84 <HAL_QSPI_Command_IT+0x20>
24011a80:	2302      	movs	r3, #2
24011a82:	e051      	b.n	24011b28 <HAL_QSPI_Command_IT+0xc4>
24011a84:	687b      	ldr	r3, [r7, #4]
24011a86:	2201      	movs	r2, #1
24011a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011a8c:	687b      	ldr	r3, [r7, #4]
24011a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011a92:	b2db      	uxtb	r3, r3
24011a94:	2b01      	cmp	r3, #1
24011a96:	d140      	bne.n	24011b1a <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011a98:	687b      	ldr	r3, [r7, #4]
24011a9a:	2200      	movs	r2, #0
24011a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
24011a9e:	687b      	ldr	r3, [r7, #4]
24011aa0:	2202      	movs	r2, #2
24011aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24011aa6:	687b      	ldr	r3, [r7, #4]
24011aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24011aaa:	9300      	str	r3, [sp, #0]
24011aac:	68bb      	ldr	r3, [r7, #8]
24011aae:	2200      	movs	r2, #0
24011ab0:	2120      	movs	r1, #32
24011ab2:	6878      	ldr	r0, [r7, #4]
24011ab4:	f000 ffcd 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24011ab8:	4603      	mov	r3, r0
24011aba:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24011abc:	7bfb      	ldrb	r3, [r7, #15]
24011abe:	2b00      	cmp	r3, #0
24011ac0:	d126      	bne.n	24011b10 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
24011ac2:	683b      	ldr	r3, [r7, #0]
24011ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011ac6:	2b00      	cmp	r3, #0
24011ac8:	d103      	bne.n	24011ad2 <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24011aca:	687b      	ldr	r3, [r7, #4]
24011acc:	681b      	ldr	r3, [r3, #0]
24011ace:	2203      	movs	r2, #3
24011ad0:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011ad2:	2200      	movs	r2, #0
24011ad4:	6839      	ldr	r1, [r7, #0]
24011ad6:	6878      	ldr	r0, [r7, #4]
24011ad8:	f000 fff2 	bl	24012ac0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24011adc:	683b      	ldr	r3, [r7, #0]
24011ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011ae0:	2b00      	cmp	r3, #0
24011ae2:	d10c      	bne.n	24011afe <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24011ae4:	687b      	ldr	r3, [r7, #4]
24011ae6:	2200      	movs	r2, #0
24011ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
24011aec:	687b      	ldr	r3, [r7, #4]
24011aee:	681b      	ldr	r3, [r3, #0]
24011af0:	681a      	ldr	r2, [r3, #0]
24011af2:	687b      	ldr	r3, [r7, #4]
24011af4:	681b      	ldr	r3, [r3, #0]
24011af6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
24011afa:	601a      	str	r2, [r3, #0]
24011afc:	e013      	b.n	24011b26 <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24011afe:	687b      	ldr	r3, [r7, #4]
24011b00:	2201      	movs	r2, #1
24011b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24011b06:	687b      	ldr	r3, [r7, #4]
24011b08:	2200      	movs	r2, #0
24011b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24011b0e:	e00a      	b.n	24011b26 <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011b10:	687b      	ldr	r3, [r7, #4]
24011b12:	2200      	movs	r2, #0
24011b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24011b18:	e005      	b.n	24011b26 <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
24011b1a:	2302      	movs	r3, #2
24011b1c:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24011b1e:	687b      	ldr	r3, [r7, #4]
24011b20:	2200      	movs	r2, #0
24011b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
24011b26:	7bfb      	ldrb	r3, [r7, #15]
}
24011b28:	4618      	mov	r0, r3
24011b2a:	3710      	adds	r7, #16
24011b2c:	46bd      	mov	sp, r7
24011b2e:	bd80      	pop	{r7, pc}

24011b30 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
24011b30:	b580      	push	{r7, lr}
24011b32:	b08a      	sub	sp, #40	; 0x28
24011b34:	af02      	add	r7, sp, #8
24011b36:	60f8      	str	r0, [r7, #12]
24011b38:	60b9      	str	r1, [r7, #8]
24011b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24011b3c:	2300      	movs	r3, #0
24011b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24011b40:	f7f0 fb5c 	bl	240021fc <HAL_GetTick>
24011b44:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24011b46:	68fb      	ldr	r3, [r7, #12]
24011b48:	681b      	ldr	r3, [r3, #0]
24011b4a:	3320      	adds	r3, #32
24011b4c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011b4e:	68fb      	ldr	r3, [r7, #12]
24011b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011b54:	b2db      	uxtb	r3, r3
24011b56:	2b01      	cmp	r3, #1
24011b58:	d101      	bne.n	24011b5e <HAL_QSPI_Transmit+0x2e>
24011b5a:	2302      	movs	r3, #2
24011b5c:	e076      	b.n	24011c4c <HAL_QSPI_Transmit+0x11c>
24011b5e:	68fb      	ldr	r3, [r7, #12]
24011b60:	2201      	movs	r2, #1
24011b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011b66:	68fb      	ldr	r3, [r7, #12]
24011b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011b6c:	b2db      	uxtb	r3, r3
24011b6e:	2b01      	cmp	r3, #1
24011b70:	d165      	bne.n	24011c3e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011b72:	68fb      	ldr	r3, [r7, #12]
24011b74:	2200      	movs	r2, #0
24011b76:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011b78:	68bb      	ldr	r3, [r7, #8]
24011b7a:	2b00      	cmp	r3, #0
24011b7c:	d056      	beq.n	24011c2c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24011b7e:	68fb      	ldr	r3, [r7, #12]
24011b80:	2212      	movs	r2, #18
24011b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24011b86:	68fb      	ldr	r3, [r7, #12]
24011b88:	681b      	ldr	r3, [r3, #0]
24011b8a:	691b      	ldr	r3, [r3, #16]
24011b8c:	1c5a      	adds	r2, r3, #1
24011b8e:	68fb      	ldr	r3, [r7, #12]
24011b90:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24011b92:	68fb      	ldr	r3, [r7, #12]
24011b94:	681b      	ldr	r3, [r3, #0]
24011b96:	691b      	ldr	r3, [r3, #16]
24011b98:	1c5a      	adds	r2, r3, #1
24011b9a:	68fb      	ldr	r3, [r7, #12]
24011b9c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
24011b9e:	68fb      	ldr	r3, [r7, #12]
24011ba0:	68ba      	ldr	r2, [r7, #8]
24011ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011ba4:	68fb      	ldr	r3, [r7, #12]
24011ba6:	681b      	ldr	r3, [r3, #0]
24011ba8:	695a      	ldr	r2, [r3, #20]
24011baa:	68fb      	ldr	r3, [r7, #12]
24011bac:	681b      	ldr	r3, [r3, #0]
24011bae:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24011bb2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
24011bb4:	e01b      	b.n	24011bee <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
24011bb6:	687b      	ldr	r3, [r7, #4]
24011bb8:	9300      	str	r3, [sp, #0]
24011bba:	69bb      	ldr	r3, [r7, #24]
24011bbc:	2201      	movs	r2, #1
24011bbe:	2104      	movs	r1, #4
24011bc0:	68f8      	ldr	r0, [r7, #12]
24011bc2:	f000 ff46 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24011bc6:	4603      	mov	r3, r0
24011bc8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
24011bca:	7ffb      	ldrb	r3, [r7, #31]
24011bcc:	2b00      	cmp	r3, #0
24011bce:	d113      	bne.n	24011bf8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
24011bd0:	68fb      	ldr	r3, [r7, #12]
24011bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011bd4:	781a      	ldrb	r2, [r3, #0]
24011bd6:	697b      	ldr	r3, [r7, #20]
24011bd8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
24011bda:	68fb      	ldr	r3, [r7, #12]
24011bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24011bde:	1c5a      	adds	r2, r3, #1
24011be0:	68fb      	ldr	r3, [r7, #12]
24011be2:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
24011be4:	68fb      	ldr	r3, [r7, #12]
24011be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24011be8:	1e5a      	subs	r2, r3, #1
24011bea:	68fb      	ldr	r3, [r7, #12]
24011bec:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
24011bee:	68fb      	ldr	r3, [r7, #12]
24011bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24011bf2:	2b00      	cmp	r3, #0
24011bf4:	d1df      	bne.n	24011bb6 <HAL_QSPI_Transmit+0x86>
24011bf6:	e000      	b.n	24011bfa <HAL_QSPI_Transmit+0xca>
          break;
24011bf8:	bf00      	nop
      }

      if (status == HAL_OK)
24011bfa:	7ffb      	ldrb	r3, [r7, #31]
24011bfc:	2b00      	cmp	r3, #0
24011bfe:	d110      	bne.n	24011c22 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24011c00:	687b      	ldr	r3, [r7, #4]
24011c02:	9300      	str	r3, [sp, #0]
24011c04:	69bb      	ldr	r3, [r7, #24]
24011c06:	2201      	movs	r2, #1
24011c08:	2102      	movs	r1, #2
24011c0a:	68f8      	ldr	r0, [r7, #12]
24011c0c:	f000 ff21 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24011c10:	4603      	mov	r3, r0
24011c12:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
24011c14:	7ffb      	ldrb	r3, [r7, #31]
24011c16:	2b00      	cmp	r3, #0
24011c18:	d103      	bne.n	24011c22 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24011c1a:	68fb      	ldr	r3, [r7, #12]
24011c1c:	681b      	ldr	r3, [r3, #0]
24011c1e:	2202      	movs	r2, #2
24011c20:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
24011c22:	68fb      	ldr	r3, [r7, #12]
24011c24:	2201      	movs	r2, #1
24011c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24011c2a:	e00a      	b.n	24011c42 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24011c2c:	68fb      	ldr	r3, [r7, #12]
24011c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011c30:	f043 0208 	orr.w	r2, r3, #8
24011c34:	68fb      	ldr	r3, [r7, #12]
24011c36:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24011c38:	2301      	movs	r3, #1
24011c3a:	77fb      	strb	r3, [r7, #31]
24011c3c:	e001      	b.n	24011c42 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
24011c3e:	2302      	movs	r3, #2
24011c40:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24011c42:	68fb      	ldr	r3, [r7, #12]
24011c44:	2200      	movs	r2, #0
24011c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
24011c4a:	7ffb      	ldrb	r3, [r7, #31]
}
24011c4c:	4618      	mov	r0, r3
24011c4e:	3720      	adds	r7, #32
24011c50:	46bd      	mov	sp, r7
24011c52:	bd80      	pop	{r7, pc}

24011c54 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
24011c54:	b580      	push	{r7, lr}
24011c56:	b08a      	sub	sp, #40	; 0x28
24011c58:	af02      	add	r7, sp, #8
24011c5a:	60f8      	str	r0, [r7, #12]
24011c5c:	60b9      	str	r1, [r7, #8]
24011c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24011c60:	2300      	movs	r3, #0
24011c62:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24011c64:	f7f0 faca 	bl	240021fc <HAL_GetTick>
24011c68:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
24011c6a:	68fb      	ldr	r3, [r7, #12]
24011c6c:	681b      	ldr	r3, [r3, #0]
24011c6e:	699b      	ldr	r3, [r3, #24]
24011c70:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24011c72:	68fb      	ldr	r3, [r7, #12]
24011c74:	681b      	ldr	r3, [r3, #0]
24011c76:	3320      	adds	r3, #32
24011c78:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011c7a:	68fb      	ldr	r3, [r7, #12]
24011c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011c80:	b2db      	uxtb	r3, r3
24011c82:	2b01      	cmp	r3, #1
24011c84:	d101      	bne.n	24011c8a <HAL_QSPI_Receive+0x36>
24011c86:	2302      	movs	r3, #2
24011c88:	e07d      	b.n	24011d86 <HAL_QSPI_Receive+0x132>
24011c8a:	68fb      	ldr	r3, [r7, #12]
24011c8c:	2201      	movs	r2, #1
24011c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011c92:	68fb      	ldr	r3, [r7, #12]
24011c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011c98:	b2db      	uxtb	r3, r3
24011c9a:	2b01      	cmp	r3, #1
24011c9c:	d16c      	bne.n	24011d78 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011c9e:	68fb      	ldr	r3, [r7, #12]
24011ca0:	2200      	movs	r2, #0
24011ca2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011ca4:	68bb      	ldr	r3, [r7, #8]
24011ca6:	2b00      	cmp	r3, #0
24011ca8:	d05d      	beq.n	24011d66 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
24011caa:	68fb      	ldr	r3, [r7, #12]
24011cac:	2222      	movs	r2, #34	; 0x22
24011cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24011cb2:	68fb      	ldr	r3, [r7, #12]
24011cb4:	681b      	ldr	r3, [r3, #0]
24011cb6:	691b      	ldr	r3, [r3, #16]
24011cb8:	1c5a      	adds	r2, r3, #1
24011cba:	68fb      	ldr	r3, [r7, #12]
24011cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24011cbe:	68fb      	ldr	r3, [r7, #12]
24011cc0:	681b      	ldr	r3, [r3, #0]
24011cc2:	691b      	ldr	r3, [r3, #16]
24011cc4:	1c5a      	adds	r2, r3, #1
24011cc6:	68fb      	ldr	r3, [r7, #12]
24011cc8:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
24011cca:	68fb      	ldr	r3, [r7, #12]
24011ccc:	68ba      	ldr	r2, [r7, #8]
24011cce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24011cd0:	68fb      	ldr	r3, [r7, #12]
24011cd2:	681b      	ldr	r3, [r3, #0]
24011cd4:	695b      	ldr	r3, [r3, #20]
24011cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
24011cda:	68fb      	ldr	r3, [r7, #12]
24011cdc:	681b      	ldr	r3, [r3, #0]
24011cde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24011ce2:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24011ce4:	68fb      	ldr	r3, [r7, #12]
24011ce6:	681b      	ldr	r3, [r3, #0]
24011ce8:	697a      	ldr	r2, [r7, #20]
24011cea:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
24011cec:	e01c      	b.n	24011d28 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
24011cee:	687b      	ldr	r3, [r7, #4]
24011cf0:	9300      	str	r3, [sp, #0]
24011cf2:	69bb      	ldr	r3, [r7, #24]
24011cf4:	2201      	movs	r2, #1
24011cf6:	2106      	movs	r1, #6
24011cf8:	68f8      	ldr	r0, [r7, #12]
24011cfa:	f000 feaa 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24011cfe:	4603      	mov	r3, r0
24011d00:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
24011d02:	7ffb      	ldrb	r3, [r7, #31]
24011d04:	2b00      	cmp	r3, #0
24011d06:	d114      	bne.n	24011d32 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24011d08:	68fb      	ldr	r3, [r7, #12]
24011d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011d0c:	693a      	ldr	r2, [r7, #16]
24011d0e:	7812      	ldrb	r2, [r2, #0]
24011d10:	b2d2      	uxtb	r2, r2
24011d12:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
24011d14:	68fb      	ldr	r3, [r7, #12]
24011d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24011d18:	1c5a      	adds	r2, r3, #1
24011d1a:	68fb      	ldr	r3, [r7, #12]
24011d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
24011d1e:	68fb      	ldr	r3, [r7, #12]
24011d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011d22:	1e5a      	subs	r2, r3, #1
24011d24:	68fb      	ldr	r3, [r7, #12]
24011d26:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
24011d28:	68fb      	ldr	r3, [r7, #12]
24011d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24011d2c:	2b00      	cmp	r3, #0
24011d2e:	d1de      	bne.n	24011cee <HAL_QSPI_Receive+0x9a>
24011d30:	e000      	b.n	24011d34 <HAL_QSPI_Receive+0xe0>
          break;
24011d32:	bf00      	nop
      }

      if (status == HAL_OK)
24011d34:	7ffb      	ldrb	r3, [r7, #31]
24011d36:	2b00      	cmp	r3, #0
24011d38:	d110      	bne.n	24011d5c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24011d3a:	687b      	ldr	r3, [r7, #4]
24011d3c:	9300      	str	r3, [sp, #0]
24011d3e:	69bb      	ldr	r3, [r7, #24]
24011d40:	2201      	movs	r2, #1
24011d42:	2102      	movs	r1, #2
24011d44:	68f8      	ldr	r0, [r7, #12]
24011d46:	f000 fe84 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24011d4a:	4603      	mov	r3, r0
24011d4c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
24011d4e:	7ffb      	ldrb	r3, [r7, #31]
24011d50:	2b00      	cmp	r3, #0
24011d52:	d103      	bne.n	24011d5c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24011d54:	68fb      	ldr	r3, [r7, #12]
24011d56:	681b      	ldr	r3, [r3, #0]
24011d58:	2202      	movs	r2, #2
24011d5a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
24011d5c:	68fb      	ldr	r3, [r7, #12]
24011d5e:	2201      	movs	r2, #1
24011d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24011d64:	e00a      	b.n	24011d7c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24011d66:	68fb      	ldr	r3, [r7, #12]
24011d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011d6a:	f043 0208 	orr.w	r2, r3, #8
24011d6e:	68fb      	ldr	r3, [r7, #12]
24011d70:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24011d72:	2301      	movs	r3, #1
24011d74:	77fb      	strb	r3, [r7, #31]
24011d76:	e001      	b.n	24011d7c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
24011d78:	2302      	movs	r3, #2
24011d7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24011d7c:	68fb      	ldr	r3, [r7, #12]
24011d7e:	2200      	movs	r2, #0
24011d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
24011d84:	7ffb      	ldrb	r3, [r7, #31]
}
24011d86:	4618      	mov	r0, r3
24011d88:	3720      	adds	r7, #32
24011d8a:	46bd      	mov	sp, r7
24011d8c:	bd80      	pop	{r7, pc}

24011d8e <HAL_QSPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24011d8e:	b480      	push	{r7}
24011d90:	b085      	sub	sp, #20
24011d92:	af00      	add	r7, sp, #0
24011d94:	6078      	str	r0, [r7, #4]
24011d96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24011d98:	2300      	movs	r3, #0
24011d9a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011d9c:	687b      	ldr	r3, [r7, #4]
24011d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011da2:	b2db      	uxtb	r3, r3
24011da4:	2b01      	cmp	r3, #1
24011da6:	d101      	bne.n	24011dac <HAL_QSPI_Transmit_IT+0x1e>
24011da8:	2302      	movs	r3, #2
24011daa:	e04f      	b.n	24011e4c <HAL_QSPI_Transmit_IT+0xbe>
24011dac:	687b      	ldr	r3, [r7, #4]
24011dae:	2201      	movs	r2, #1
24011db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011db4:	687b      	ldr	r3, [r7, #4]
24011db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011dba:	b2db      	uxtb	r3, r3
24011dbc:	2b01      	cmp	r3, #1
24011dbe:	d13e      	bne.n	24011e3e <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011dc0:	687b      	ldr	r3, [r7, #4]
24011dc2:	2200      	movs	r2, #0
24011dc4:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011dc6:	683b      	ldr	r3, [r7, #0]
24011dc8:	2b00      	cmp	r3, #0
24011dca:	d02b      	beq.n	24011e24 <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24011dcc:	687b      	ldr	r3, [r7, #4]
24011dce:	2212      	movs	r2, #18
24011dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24011dd4:	687b      	ldr	r3, [r7, #4]
24011dd6:	681b      	ldr	r3, [r3, #0]
24011dd8:	691b      	ldr	r3, [r3, #16]
24011dda:	1c5a      	adds	r2, r3, #1
24011ddc:	687b      	ldr	r3, [r7, #4]
24011dde:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24011de0:	687b      	ldr	r3, [r7, #4]
24011de2:	681b      	ldr	r3, [r3, #0]
24011de4:	691b      	ldr	r3, [r3, #16]
24011de6:	1c5a      	adds	r2, r3, #1
24011de8:	687b      	ldr	r3, [r7, #4]
24011dea:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
24011dec:	687b      	ldr	r3, [r7, #4]
24011dee:	683a      	ldr	r2, [r7, #0]
24011df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24011df2:	687b      	ldr	r3, [r7, #4]
24011df4:	681b      	ldr	r3, [r3, #0]
24011df6:	2203      	movs	r2, #3
24011df8:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011dfa:	687b      	ldr	r3, [r7, #4]
24011dfc:	681b      	ldr	r3, [r3, #0]
24011dfe:	695a      	ldr	r2, [r3, #20]
24011e00:	687b      	ldr	r3, [r7, #4]
24011e02:	681b      	ldr	r3, [r3, #0]
24011e04:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24011e08:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011e0a:	687b      	ldr	r3, [r7, #4]
24011e0c:	2200      	movs	r2, #0
24011e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24011e12:	687b      	ldr	r3, [r7, #4]
24011e14:	681b      	ldr	r3, [r3, #0]
24011e16:	681a      	ldr	r2, [r3, #0]
24011e18:	687b      	ldr	r3, [r7, #4]
24011e1a:	681b      	ldr	r3, [r3, #0]
24011e1c:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
24011e20:	601a      	str	r2, [r3, #0]
24011e22:	e012      	b.n	24011e4a <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24011e24:	687b      	ldr	r3, [r7, #4]
24011e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011e28:	f043 0208 	orr.w	r2, r3, #8
24011e2c:	687b      	ldr	r3, [r7, #4]
24011e2e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24011e30:	2301      	movs	r3, #1
24011e32:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011e34:	687b      	ldr	r3, [r7, #4]
24011e36:	2200      	movs	r2, #0
24011e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24011e3c:	e005      	b.n	24011e4a <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
24011e3e:	2302      	movs	r3, #2
24011e40:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24011e42:	687b      	ldr	r3, [r7, #4]
24011e44:	2200      	movs	r2, #0
24011e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24011e4a:	7bfb      	ldrb	r3, [r7, #15]
}
24011e4c:	4618      	mov	r0, r3
24011e4e:	3714      	adds	r7, #20
24011e50:	46bd      	mov	sp, r7
24011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
24011e56:	4770      	bx	lr

24011e58 <HAL_QSPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24011e58:	b480      	push	{r7}
24011e5a:	b085      	sub	sp, #20
24011e5c:	af00      	add	r7, sp, #0
24011e5e:	6078      	str	r0, [r7, #4]
24011e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24011e62:	2300      	movs	r3, #0
24011e64:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
24011e66:	687b      	ldr	r3, [r7, #4]
24011e68:	681b      	ldr	r3, [r3, #0]
24011e6a:	699b      	ldr	r3, [r3, #24]
24011e6c:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011e6e:	687b      	ldr	r3, [r7, #4]
24011e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011e74:	b2db      	uxtb	r3, r3
24011e76:	2b01      	cmp	r3, #1
24011e78:	d101      	bne.n	24011e7e <HAL_QSPI_Receive_IT+0x26>
24011e7a:	2302      	movs	r3, #2
24011e7c:	e055      	b.n	24011f2a <HAL_QSPI_Receive_IT+0xd2>
24011e7e:	687b      	ldr	r3, [r7, #4]
24011e80:	2201      	movs	r2, #1
24011e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011e86:	687b      	ldr	r3, [r7, #4]
24011e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011e8c:	b2db      	uxtb	r3, r3
24011e8e:	2b01      	cmp	r3, #1
24011e90:	d144      	bne.n	24011f1c <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011e92:	687b      	ldr	r3, [r7, #4]
24011e94:	2200      	movs	r2, #0
24011e96:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011e98:	683b      	ldr	r3, [r7, #0]
24011e9a:	2b00      	cmp	r3, #0
24011e9c:	d031      	beq.n	24011f02 <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
24011e9e:	687b      	ldr	r3, [r7, #4]
24011ea0:	2222      	movs	r2, #34	; 0x22
24011ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24011ea6:	687b      	ldr	r3, [r7, #4]
24011ea8:	681b      	ldr	r3, [r3, #0]
24011eaa:	691b      	ldr	r3, [r3, #16]
24011eac:	1c5a      	adds	r2, r3, #1
24011eae:	687b      	ldr	r3, [r7, #4]
24011eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24011eb2:	687b      	ldr	r3, [r7, #4]
24011eb4:	681b      	ldr	r3, [r3, #0]
24011eb6:	691b      	ldr	r3, [r3, #16]
24011eb8:	1c5a      	adds	r2, r3, #1
24011eba:	687b      	ldr	r3, [r7, #4]
24011ebc:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
24011ebe:	687b      	ldr	r3, [r7, #4]
24011ec0:	683a      	ldr	r2, [r7, #0]
24011ec2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24011ec4:	687b      	ldr	r3, [r7, #4]
24011ec6:	681b      	ldr	r3, [r3, #0]
24011ec8:	2203      	movs	r2, #3
24011eca:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24011ecc:	687b      	ldr	r3, [r7, #4]
24011ece:	681b      	ldr	r3, [r3, #0]
24011ed0:	695b      	ldr	r3, [r3, #20]
24011ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
24011ed6:	687b      	ldr	r3, [r7, #4]
24011ed8:	681b      	ldr	r3, [r3, #0]
24011eda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24011ede:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24011ee0:	687b      	ldr	r3, [r7, #4]
24011ee2:	681b      	ldr	r3, [r3, #0]
24011ee4:	68ba      	ldr	r2, [r7, #8]
24011ee6:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011ee8:	687b      	ldr	r3, [r7, #4]
24011eea:	2200      	movs	r2, #0
24011eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24011ef0:	687b      	ldr	r3, [r7, #4]
24011ef2:	681b      	ldr	r3, [r3, #0]
24011ef4:	681a      	ldr	r2, [r3, #0]
24011ef6:	687b      	ldr	r3, [r7, #4]
24011ef8:	681b      	ldr	r3, [r3, #0]
24011efa:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
24011efe:	601a      	str	r2, [r3, #0]
24011f00:	e012      	b.n	24011f28 <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24011f02:	687b      	ldr	r3, [r7, #4]
24011f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24011f06:	f043 0208 	orr.w	r2, r3, #8
24011f0a:	687b      	ldr	r3, [r7, #4]
24011f0c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24011f0e:	2301      	movs	r3, #1
24011f10:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24011f12:	687b      	ldr	r3, [r7, #4]
24011f14:	2200      	movs	r2, #0
24011f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24011f1a:	e005      	b.n	24011f28 <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
24011f1c:	2302      	movs	r3, #2
24011f1e:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24011f20:	687b      	ldr	r3, [r7, #4]
24011f22:	2200      	movs	r2, #0
24011f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24011f28:	7bfb      	ldrb	r3, [r7, #15]
}
24011f2a:	4618      	mov	r0, r3
24011f2c:	3714      	adds	r7, #20
24011f2e:	46bd      	mov	sp, r7
24011f30:	f85d 7b04 	ldr.w	r7, [sp], #4
24011f34:	4770      	bx	lr
	...

24011f38 <HAL_QSPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24011f38:	b590      	push	{r4, r7, lr}
24011f3a:	b087      	sub	sp, #28
24011f3c:	af02      	add	r7, sp, #8
24011f3e:	6078      	str	r0, [r7, #4]
24011f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24011f42:	2300      	movs	r3, #0
24011f44:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
24011f46:	687b      	ldr	r3, [r7, #4]
24011f48:	681b      	ldr	r3, [r3, #0]
24011f4a:	691b      	ldr	r3, [r3, #16]
24011f4c:	3301      	adds	r3, #1
24011f4e:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
24011f50:	687b      	ldr	r3, [r7, #4]
24011f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24011f56:	b2db      	uxtb	r3, r3
24011f58:	2b01      	cmp	r3, #1
24011f5a:	d101      	bne.n	24011f60 <HAL_QSPI_Transmit_DMA+0x28>
24011f5c:	2302      	movs	r3, #2
24011f5e:	e0cb      	b.n	240120f8 <HAL_QSPI_Transmit_DMA+0x1c0>
24011f60:	687b      	ldr	r3, [r7, #4]
24011f62:	2201      	movs	r2, #1
24011f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24011f68:	687b      	ldr	r3, [r7, #4]
24011f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24011f6e:	b2db      	uxtb	r3, r3
24011f70:	2b01      	cmp	r3, #1
24011f72:	f040 80ba 	bne.w	240120ea <HAL_QSPI_Transmit_DMA+0x1b2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24011f76:	687b      	ldr	r3, [r7, #4]
24011f78:	2200      	movs	r2, #0
24011f7a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24011f7c:	683b      	ldr	r3, [r7, #0]
24011f7e:	2b00      	cmp	r3, #0
24011f80:	f000 80a6 	beq.w	240120d0 <HAL_QSPI_Transmit_DMA+0x198>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
24011f84:	687b      	ldr	r3, [r7, #4]
24011f86:	68ba      	ldr	r2, [r7, #8]
24011f88:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24011f8a:	687b      	ldr	r3, [r7, #4]
24011f8c:	2212      	movs	r2, #18
24011f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
24011f92:	687b      	ldr	r3, [r7, #4]
24011f94:	681b      	ldr	r3, [r3, #0]
24011f96:	2203      	movs	r2, #3
24011f98:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
24011f9a:	687b      	ldr	r3, [r7, #4]
24011f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24011f9e:	687b      	ldr	r3, [r7, #4]
24011fa0:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
24011fa2:	687b      	ldr	r3, [r7, #4]
24011fa4:	683a      	ldr	r2, [r7, #0]
24011fa6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24011fa8:	687b      	ldr	r3, [r7, #4]
24011faa:	681b      	ldr	r3, [r3, #0]
24011fac:	695a      	ldr	r2, [r3, #20]
24011fae:	687b      	ldr	r3, [r7, #4]
24011fb0:	681b      	ldr	r3, [r3, #0]
24011fb2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24011fb6:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
24011fb8:	687b      	ldr	r3, [r7, #4]
24011fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011fbc:	4a50      	ldr	r2, [pc, #320]	; (24012100 <HAL_QSPI_Transmit_DMA+0x1c8>)
24011fbe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
24011fc0:	687b      	ldr	r3, [r7, #4]
24011fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011fc4:	4a4f      	ldr	r2, [pc, #316]	; (24012104 <HAL_QSPI_Transmit_DMA+0x1cc>)
24011fc6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
24011fc8:	687b      	ldr	r3, [r7, #4]
24011fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011fcc:	2200      	movs	r2, #0
24011fce:	659a      	str	r2, [r3, #88]	; 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
24011fd0:	687b      	ldr	r3, [r7, #4]
24011fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011fd4:	681b      	ldr	r3, [r3, #0]
24011fd6:	6919      	ldr	r1, [r3, #16]
24011fd8:	687b      	ldr	r3, [r7, #4]
24011fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011fdc:	681a      	ldr	r2, [r3, #0]
24011fde:	4b4a      	ldr	r3, [pc, #296]	; (24012108 <HAL_QSPI_Transmit_DMA+0x1d0>)
24011fe0:	400b      	ands	r3, r1
24011fe2:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
24011fe4:	687b      	ldr	r3, [r7, #4]
24011fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011fe8:	69db      	ldr	r3, [r3, #28]
24011fea:	2b00      	cmp	r3, #0
24011fec:	d10c      	bne.n	24012008 <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
24011fee:	687b      	ldr	r3, [r7, #4]
24011ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24011ff2:	681b      	ldr	r3, [r3, #0]
24011ff4:	691a      	ldr	r2, [r3, #16]
24011ff6:	4b45      	ldr	r3, [pc, #276]	; (2401210c <HAL_QSPI_Transmit_DMA+0x1d4>)
24011ff8:	4013      	ands	r3, r2
24011ffa:	687a      	ldr	r2, [r7, #4]
24011ffc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24011ffe:	6812      	ldr	r2, [r2, #0]
24012000:	f043 0302 	orr.w	r3, r3, #2
24012004:	6113      	str	r3, [r2, #16]
24012006:	e02c      	b.n	24012062 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
24012008:	687b      	ldr	r3, [r7, #4]
2401200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401200c:	69db      	ldr	r3, [r3, #28]
2401200e:	2b10      	cmp	r3, #16
24012010:	d10c      	bne.n	2401202c <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
24012012:	687b      	ldr	r3, [r7, #4]
24012014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012016:	681b      	ldr	r3, [r3, #0]
24012018:	691a      	ldr	r2, [r3, #16]
2401201a:	4b3c      	ldr	r3, [pc, #240]	; (2401210c <HAL_QSPI_Transmit_DMA+0x1d4>)
2401201c:	4013      	ands	r3, r2
2401201e:	687a      	ldr	r2, [r7, #4]
24012020:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24012022:	6812      	ldr	r2, [r2, #0]
24012024:	f443 7381 	orr.w	r3, r3, #258	; 0x102
24012028:	6113      	str	r3, [r2, #16]
2401202a:	e01a      	b.n	24012062 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
2401202c:	687b      	ldr	r3, [r7, #4]
2401202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012030:	69db      	ldr	r3, [r3, #28]
24012032:	2b20      	cmp	r3, #32
24012034:	d10d      	bne.n	24012052 <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
24012036:	687b      	ldr	r3, [r7, #4]
24012038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401203a:	681b      	ldr	r3, [r3, #0]
2401203c:	691b      	ldr	r3, [r3, #16]
2401203e:	4a33      	ldr	r2, [pc, #204]	; (2401210c <HAL_QSPI_Transmit_DMA+0x1d4>)
24012040:	401a      	ands	r2, r3
24012042:	687b      	ldr	r3, [r7, #4]
24012044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012046:	6819      	ldr	r1, [r3, #0]
24012048:	f240 2302 	movw	r3, #514	; 0x202
2401204c:	4313      	orrs	r3, r2
2401204e:	610b      	str	r3, [r1, #16]
24012050:	e007      	b.n	24012062 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24012052:	687b      	ldr	r3, [r7, #4]
24012054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012056:	f043 0204 	orr.w	r2, r3, #4
2401205a:	687b      	ldr	r3, [r7, #4]
2401205c:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
2401205e:	2301      	movs	r3, #1
24012060:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
24012062:	687b      	ldr	r3, [r7, #4]
24012064:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
24012066:	6839      	ldr	r1, [r7, #0]
24012068:	687b      	ldr	r3, [r7, #4]
2401206a:	681b      	ldr	r3, [r3, #0]
2401206c:	3320      	adds	r3, #32
2401206e:	461c      	mov	r4, r3
24012070:	687b      	ldr	r3, [r7, #4]
24012072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24012074:	2201      	movs	r2, #1
24012076:	9200      	str	r2, [sp, #0]
24012078:	4622      	mov	r2, r4
2401207a:	f7fd feb8 	bl	2400fdee <HAL_MDMA_Start_IT>
2401207e:	4603      	mov	r3, r0
24012080:	2b00      	cmp	r3, #0
24012082:	d114      	bne.n	240120ae <HAL_QSPI_Transmit_DMA+0x176>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24012084:	687b      	ldr	r3, [r7, #4]
24012086:	2200      	movs	r2, #0
24012088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
2401208c:	687b      	ldr	r3, [r7, #4]
2401208e:	681b      	ldr	r3, [r3, #0]
24012090:	681a      	ldr	r2, [r3, #0]
24012092:	687b      	ldr	r3, [r7, #4]
24012094:	681b      	ldr	r3, [r3, #0]
24012096:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2401209a:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2401209c:	687b      	ldr	r3, [r7, #4]
2401209e:	681b      	ldr	r3, [r3, #0]
240120a0:	681a      	ldr	r2, [r3, #0]
240120a2:	687b      	ldr	r3, [r7, #4]
240120a4:	681b      	ldr	r3, [r3, #0]
240120a6:	f042 0204 	orr.w	r2, r2, #4
240120aa:	601a      	str	r2, [r3, #0]
240120ac:	e023      	b.n	240120f6 <HAL_QSPI_Transmit_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
240120ae:	2301      	movs	r3, #1
240120b0:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
240120b2:	687b      	ldr	r3, [r7, #4]
240120b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240120b6:	f043 0204 	orr.w	r2, r3, #4
240120ba:	687b      	ldr	r3, [r7, #4]
240120bc:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
240120be:	687b      	ldr	r3, [r7, #4]
240120c0:	2201      	movs	r2, #1
240120c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
240120c6:	687b      	ldr	r3, [r7, #4]
240120c8:	2200      	movs	r2, #0
240120ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240120ce:	e012      	b.n	240120f6 <HAL_QSPI_Transmit_DMA+0x1be>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
240120d0:	687b      	ldr	r3, [r7, #4]
240120d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240120d4:	f043 0208 	orr.w	r2, r3, #8
240120d8:	687b      	ldr	r3, [r7, #4]
240120da:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
240120dc:	2301      	movs	r3, #1
240120de:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240120e0:	687b      	ldr	r3, [r7, #4]
240120e2:	2200      	movs	r2, #0
240120e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240120e8:	e005      	b.n	240120f6 <HAL_QSPI_Transmit_DMA+0x1be>
    }
  }
  else
  {
    status = HAL_BUSY;
240120ea:	2302      	movs	r3, #2
240120ec:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240120ee:	687b      	ldr	r3, [r7, #4]
240120f0:	2200      	movs	r2, #0
240120f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
240120f6:	7bfb      	ldrb	r3, [r7, #15]
}
240120f8:	4618      	mov	r0, r3
240120fa:	3714      	adds	r7, #20
240120fc:	46bd      	mov	sp, r7
240120fe:	bd90      	pop	{r4, r7, pc}
24012100:	24012979 	.word	0x24012979
24012104:	240129a9 	.word	0x240129a9
24012108:	fffff3f3 	.word	0xfffff3f3
2401210c:	fffffcfc 	.word	0xfffffcfc

24012110 <HAL_QSPI_Receive_DMA>:
  * @param  pData pointer to data buffer.
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24012110:	b590      	push	{r4, r7, lr}
24012112:	b089      	sub	sp, #36	; 0x24
24012114:	af02      	add	r7, sp, #8
24012116:	6078      	str	r0, [r7, #4]
24012118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401211a:	2300      	movs	r3, #0
2401211c:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
2401211e:	687b      	ldr	r3, [r7, #4]
24012120:	681b      	ldr	r3, [r3, #0]
24012122:	699b      	ldr	r3, [r3, #24]
24012124:	613b      	str	r3, [r7, #16]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
24012126:	687b      	ldr	r3, [r7, #4]
24012128:	681b      	ldr	r3, [r3, #0]
2401212a:	691b      	ldr	r3, [r3, #16]
2401212c:	3301      	adds	r3, #1
2401212e:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hqspi);
24012130:	687b      	ldr	r3, [r7, #4]
24012132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012136:	b2db      	uxtb	r3, r3
24012138:	2b01      	cmp	r3, #1
2401213a:	d101      	bne.n	24012140 <HAL_QSPI_Receive_DMA+0x30>
2401213c:	2302      	movs	r3, #2
2401213e:	e0d1      	b.n	240122e4 <HAL_QSPI_Receive_DMA+0x1d4>
24012140:	687b      	ldr	r3, [r7, #4]
24012142:	2201      	movs	r2, #1
24012144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012148:	687b      	ldr	r3, [r7, #4]
2401214a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401214e:	b2db      	uxtb	r3, r3
24012150:	2b01      	cmp	r3, #1
24012152:	f040 80c0 	bne.w	240122d6 <HAL_QSPI_Receive_DMA+0x1c6>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012156:	687b      	ldr	r3, [r7, #4]
24012158:	2200      	movs	r2, #0
2401215a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2401215c:	683b      	ldr	r3, [r7, #0]
2401215e:	2b00      	cmp	r3, #0
24012160:	f000 80ac 	beq.w	240122bc <HAL_QSPI_Receive_DMA+0x1ac>
    {
      /* Configure counters of the handle */
      hqspi->RxXferCount = data_size;
24012164:	687b      	ldr	r3, [r7, #4]
24012166:	68fa      	ldr	r2, [r7, #12]
24012168:	639a      	str	r2, [r3, #56]	; 0x38
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
2401216a:	687b      	ldr	r3, [r7, #4]
2401216c:	2222      	movs	r2, #34	; 0x22
2401216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
24012172:	687b      	ldr	r3, [r7, #4]
24012174:	681b      	ldr	r3, [r3, #0]
24012176:	2203      	movs	r2, #3
24012178:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->RxXferSize = hqspi->RxXferCount;
2401217a:	687b      	ldr	r3, [r7, #4]
2401217c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2401217e:	687b      	ldr	r3, [r7, #4]
24012180:	635a      	str	r2, [r3, #52]	; 0x34
        hqspi->pRxBuffPtr = pData;
24012182:	687b      	ldr	r3, [r7, #4]
24012184:	683a      	ldr	r2, [r7, #0]
24012186:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMARxCplt;
24012188:	687b      	ldr	r3, [r7, #4]
2401218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401218c:	4a57      	ldr	r2, [pc, #348]	; (240122ec <HAL_QSPI_Receive_DMA+0x1dc>)
2401218e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
24012190:	687b      	ldr	r3, [r7, #4]
24012192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012194:	4a56      	ldr	r2, [pc, #344]	; (240122f0 <HAL_QSPI_Receive_DMA+0x1e0>)
24012196:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
24012198:	687b      	ldr	r3, [r7, #4]
2401219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401219c:	2200      	movs	r2, #0
2401219e:	659a      	str	r2, [r3, #88]	; 0x58

      /* In Receive mode , the MDMA source is the QSPI DR register : Force the MDMA Source Increment to disable */
      MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_DISABLE);
240121a0:	687b      	ldr	r3, [r7, #4]
240121a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240121a4:	681b      	ldr	r3, [r3, #0]
240121a6:	6919      	ldr	r1, [r3, #16]
240121a8:	687b      	ldr	r3, [r7, #4]
240121aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240121ac:	681a      	ldr	r2, [r3, #0]
240121ae:	4b51      	ldr	r3, [pc, #324]	; (240122f4 <HAL_QSPI_Receive_DMA+0x1e4>)
240121b0:	400b      	ands	r3, r1
240121b2:	6113      	str	r3, [r2, #16]

      /* Update MDMA configuration with the correct DestinationInc field for read operation */
      if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_BYTE)
240121b4:	687b      	ldr	r3, [r7, #4]
240121b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240121b8:	6a1b      	ldr	r3, [r3, #32]
240121ba:	2b00      	cmp	r3, #0
240121bc:	d10c      	bne.n	240121d8 <HAL_QSPI_Receive_DMA+0xc8>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_BYTE);
240121be:	687b      	ldr	r3, [r7, #4]
240121c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240121c2:	681b      	ldr	r3, [r3, #0]
240121c4:	691a      	ldr	r2, [r3, #16]
240121c6:	4b4c      	ldr	r3, [pc, #304]	; (240122f8 <HAL_QSPI_Receive_DMA+0x1e8>)
240121c8:	4013      	ands	r3, r2
240121ca:	687a      	ldr	r2, [r7, #4]
240121cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
240121ce:	6812      	ldr	r2, [r2, #0]
240121d0:	f043 0308 	orr.w	r3, r3, #8
240121d4:	6113      	str	r3, [r2, #16]
240121d6:	e02c      	b.n	24012232 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_HALFWORD)
240121d8:	687b      	ldr	r3, [r7, #4]
240121da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240121dc:	6a1b      	ldr	r3, [r3, #32]
240121de:	2b40      	cmp	r3, #64	; 0x40
240121e0:	d10c      	bne.n	240121fc <HAL_QSPI_Receive_DMA+0xec>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_HALFWORD);
240121e2:	687b      	ldr	r3, [r7, #4]
240121e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240121e6:	681b      	ldr	r3, [r3, #0]
240121e8:	691a      	ldr	r2, [r3, #16]
240121ea:	4b43      	ldr	r3, [pc, #268]	; (240122f8 <HAL_QSPI_Receive_DMA+0x1e8>)
240121ec:	4013      	ands	r3, r2
240121ee:	687a      	ldr	r2, [r7, #4]
240121f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
240121f2:	6812      	ldr	r2, [r2, #0]
240121f4:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
240121f8:	6113      	str	r3, [r2, #16]
240121fa:	e01a      	b.n	24012232 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_WORD)
240121fc:	687b      	ldr	r3, [r7, #4]
240121fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012200:	6a1b      	ldr	r3, [r3, #32]
24012202:	2b80      	cmp	r3, #128	; 0x80
24012204:	d10d      	bne.n	24012222 <HAL_QSPI_Receive_DMA+0x112>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_WORD);
24012206:	687b      	ldr	r3, [r7, #4]
24012208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2401220a:	681b      	ldr	r3, [r3, #0]
2401220c:	691b      	ldr	r3, [r3, #16]
2401220e:	4a3a      	ldr	r2, [pc, #232]	; (240122f8 <HAL_QSPI_Receive_DMA+0x1e8>)
24012210:	401a      	ands	r2, r3
24012212:	687b      	ldr	r3, [r7, #4]
24012214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24012216:	6819      	ldr	r1, [r3, #0]
24012218:	f640 0308 	movw	r3, #2056	; 0x808
2401221c:	4313      	orrs	r3, r2
2401221e:	610b      	str	r3, [r1, #16]
24012220:	e007      	b.n	24012232 <HAL_QSPI_Receive_DMA+0x122>
      }
      else
      {
       /* in case of incorrect destination data size */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24012222:	687b      	ldr	r3, [r7, #4]
24012224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012226:	f043 0204 	orr.w	r2, r3, #4
2401222a:	687b      	ldr	r3, [r7, #4]
2401222c:	645a      	str	r2, [r3, #68]	; 0x44
        status = HAL_ERROR;
2401222e:	2301      	movs	r3, #1
24012230:	75fb      	strb	r3, [r7, #23]
      }
          /* Configure QSPI: CCR register with functional as indirect read */
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24012232:	687b      	ldr	r3, [r7, #4]
24012234:	681b      	ldr	r3, [r3, #0]
24012236:	695b      	ldr	r3, [r3, #20]
24012238:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2401223c:	687b      	ldr	r3, [r7, #4]
2401223e:	681b      	ldr	r3, [r3, #0]
24012240:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24012244:	615a      	str	r2, [r3, #20]

          /* Start the transfer by re-writing the address in AR register */
          WRITE_REG(hqspi->Instance->AR, addr_reg);
24012246:	687b      	ldr	r3, [r7, #4]
24012248:	681b      	ldr	r3, [r3, #0]
2401224a:	693a      	ldr	r2, [r7, #16]
2401224c:	619a      	str	r2, [r3, #24]

        /* Enable the MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize, 1) == HAL_OK)
2401224e:	687b      	ldr	r3, [r7, #4]
24012250:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
24012252:	687b      	ldr	r3, [r7, #4]
24012254:	681b      	ldr	r3, [r3, #0]
24012256:	3320      	adds	r3, #32
24012258:	461c      	mov	r4, r3
2401225a:	683a      	ldr	r2, [r7, #0]
2401225c:	687b      	ldr	r3, [r7, #4]
2401225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012260:	2101      	movs	r1, #1
24012262:	9100      	str	r1, [sp, #0]
24012264:	4621      	mov	r1, r4
24012266:	f7fd fdc2 	bl	2400fdee <HAL_MDMA_Start_IT>
2401226a:	4603      	mov	r3, r0
2401226c:	2b00      	cmp	r3, #0
2401226e:	d114      	bne.n	2401229a <HAL_QSPI_Receive_DMA+0x18a>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
24012270:	687b      	ldr	r3, [r7, #4]
24012272:	2200      	movs	r2, #0
24012274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
24012278:	687b      	ldr	r3, [r7, #4]
2401227a:	681b      	ldr	r3, [r3, #0]
2401227c:	681a      	ldr	r2, [r3, #0]
2401227e:	687b      	ldr	r3, [r7, #4]
24012280:	681b      	ldr	r3, [r3, #0]
24012282:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24012286:	601a      	str	r2, [r3, #0]

          /* Enable using MDMA by setting DMAEN, note that DMAEN bit is "reserved"
             but no impact on H7 HW and it minimize the cost in the footprint */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24012288:	687b      	ldr	r3, [r7, #4]
2401228a:	681b      	ldr	r3, [r3, #0]
2401228c:	681a      	ldr	r2, [r3, #0]
2401228e:	687b      	ldr	r3, [r7, #4]
24012290:	681b      	ldr	r3, [r3, #0]
24012292:	f042 0204 	orr.w	r2, r2, #4
24012296:	601a      	str	r2, [r3, #0]
24012298:	e023      	b.n	240122e2 <HAL_QSPI_Receive_DMA+0x1d2>
        }
        else
        {
          status = HAL_ERROR;
2401229a:	2301      	movs	r3, #1
2401229c:	75fb      	strb	r3, [r7, #23]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
2401229e:	687b      	ldr	r3, [r7, #4]
240122a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240122a2:	f043 0204 	orr.w	r2, r3, #4
240122a6:	687b      	ldr	r3, [r7, #4]
240122a8:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
240122aa:	687b      	ldr	r3, [r7, #4]
240122ac:	2201      	movs	r2, #1
240122ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
240122b2:	687b      	ldr	r3, [r7, #4]
240122b4:	2200      	movs	r2, #0
240122b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240122ba:	e012      	b.n	240122e2 <HAL_QSPI_Receive_DMA+0x1d2>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
240122bc:	687b      	ldr	r3, [r7, #4]
240122be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240122c0:	f043 0208 	orr.w	r2, r3, #8
240122c4:	687b      	ldr	r3, [r7, #4]
240122c6:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
240122c8:	2301      	movs	r3, #1
240122ca:	75fb      	strb	r3, [r7, #23]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240122cc:	687b      	ldr	r3, [r7, #4]
240122ce:	2200      	movs	r2, #0
240122d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240122d4:	e005      	b.n	240122e2 <HAL_QSPI_Receive_DMA+0x1d2>
    }
  }
  else
  {
    status = HAL_BUSY;
240122d6:	2302      	movs	r3, #2
240122d8:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240122da:	687b      	ldr	r3, [r7, #4]
240122dc:	2200      	movs	r2, #0
240122de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
240122e2:	7dfb      	ldrb	r3, [r7, #23]
}
240122e4:	4618      	mov	r0, r3
240122e6:	371c      	adds	r7, #28
240122e8:	46bd      	mov	sp, r7
240122ea:	bd90      	pop	{r4, r7, pc}
240122ec:	24012949 	.word	0x24012949
240122f0:	240129a9 	.word	0x240129a9
240122f4:	fffffcfc 	.word	0xfffffcfc
240122f8:	fffff3f3 	.word	0xfffff3f3

240122fc <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
240122fc:	b580      	push	{r7, lr}
240122fe:	b088      	sub	sp, #32
24012300:	af02      	add	r7, sp, #8
24012302:	60f8      	str	r0, [r7, #12]
24012304:	60b9      	str	r1, [r7, #8]
24012306:	607a      	str	r2, [r7, #4]
24012308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2401230a:	f7ef ff77 	bl	240021fc <HAL_GetTick>
2401230e:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24012310:	68fb      	ldr	r3, [r7, #12]
24012312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012316:	b2db      	uxtb	r3, r3
24012318:	2b01      	cmp	r3, #1
2401231a:	d101      	bne.n	24012320 <HAL_QSPI_AutoPolling+0x24>
2401231c:	2302      	movs	r3, #2
2401231e:	e060      	b.n	240123e2 <HAL_QSPI_AutoPolling+0xe6>
24012320:	68fb      	ldr	r3, [r7, #12]
24012322:	2201      	movs	r2, #1
24012324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012328:	68fb      	ldr	r3, [r7, #12]
2401232a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401232e:	b2db      	uxtb	r3, r3
24012330:	2b01      	cmp	r3, #1
24012332:	d14f      	bne.n	240123d4 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012334:	68fb      	ldr	r3, [r7, #12]
24012336:	2200      	movs	r2, #0
24012338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
2401233a:	68fb      	ldr	r3, [r7, #12]
2401233c:	2242      	movs	r2, #66	; 0x42
2401233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24012342:	683b      	ldr	r3, [r7, #0]
24012344:	9300      	str	r3, [sp, #0]
24012346:	693b      	ldr	r3, [r7, #16]
24012348:	2200      	movs	r2, #0
2401234a:	2120      	movs	r1, #32
2401234c:	68f8      	ldr	r0, [r7, #12]
2401234e:	f000 fb80 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24012352:	4603      	mov	r3, r0
24012354:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012356:	7dfb      	ldrb	r3, [r7, #23]
24012358:	2b00      	cmp	r3, #0
2401235a:	d13d      	bne.n	240123d8 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
2401235c:	68fb      	ldr	r3, [r7, #12]
2401235e:	681b      	ldr	r3, [r3, #0]
24012360:	687a      	ldr	r2, [r7, #4]
24012362:	6812      	ldr	r2, [r2, #0]
24012364:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
24012366:	68fb      	ldr	r3, [r7, #12]
24012368:	681b      	ldr	r3, [r3, #0]
2401236a:	687a      	ldr	r2, [r7, #4]
2401236c:	6852      	ldr	r2, [r2, #4]
2401236e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
24012370:	68fb      	ldr	r3, [r7, #12]
24012372:	681b      	ldr	r3, [r3, #0]
24012374:	687a      	ldr	r2, [r7, #4]
24012376:	6892      	ldr	r2, [r2, #8]
24012378:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
2401237a:	68fb      	ldr	r3, [r7, #12]
2401237c:	681b      	ldr	r3, [r3, #0]
2401237e:	681b      	ldr	r3, [r3, #0]
24012380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
24012384:	687b      	ldr	r3, [r7, #4]
24012386:	691b      	ldr	r3, [r3, #16]
24012388:	431a      	orrs	r2, r3
2401238a:	68fb      	ldr	r3, [r7, #12]
2401238c:	681b      	ldr	r3, [r3, #0]
2401238e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
24012392:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
24012394:	687b      	ldr	r3, [r7, #4]
24012396:	68da      	ldr	r2, [r3, #12]
24012398:	68bb      	ldr	r3, [r7, #8]
2401239a:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
2401239c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
240123a0:	68b9      	ldr	r1, [r7, #8]
240123a2:	68f8      	ldr	r0, [r7, #12]
240123a4:	f000 fb8c 	bl	24012ac0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
240123a8:	683b      	ldr	r3, [r7, #0]
240123aa:	9300      	str	r3, [sp, #0]
240123ac:	693b      	ldr	r3, [r7, #16]
240123ae:	2201      	movs	r2, #1
240123b0:	2108      	movs	r1, #8
240123b2:	68f8      	ldr	r0, [r7, #12]
240123b4:	f000 fb4d 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
240123b8:	4603      	mov	r3, r0
240123ba:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
240123bc:	7dfb      	ldrb	r3, [r7, #23]
240123be:	2b00      	cmp	r3, #0
240123c0:	d10a      	bne.n	240123d8 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
240123c2:	68fb      	ldr	r3, [r7, #12]
240123c4:	681b      	ldr	r3, [r3, #0]
240123c6:	2208      	movs	r2, #8
240123c8:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
240123ca:	68fb      	ldr	r3, [r7, #12]
240123cc:	2201      	movs	r2, #1
240123ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240123d2:	e001      	b.n	240123d8 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
240123d4:	2302      	movs	r3, #2
240123d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240123d8:	68fb      	ldr	r3, [r7, #12]
240123da:	2200      	movs	r2, #0
240123dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240123e0:	7dfb      	ldrb	r3, [r7, #23]
}
240123e2:	4618      	mov	r0, r3
240123e4:	3718      	adds	r7, #24
240123e6:	46bd      	mov	sp, r7
240123e8:	bd80      	pop	{r7, pc}

240123ea <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
240123ea:	b580      	push	{r7, lr}
240123ec:	b088      	sub	sp, #32
240123ee:	af02      	add	r7, sp, #8
240123f0:	60f8      	str	r0, [r7, #12]
240123f2:	60b9      	str	r1, [r7, #8]
240123f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
240123f6:	f7ef ff01 	bl	240021fc <HAL_GetTick>
240123fa:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
240123fc:	68fb      	ldr	r3, [r7, #12]
240123fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012402:	b2db      	uxtb	r3, r3
24012404:	2b01      	cmp	r3, #1
24012406:	d101      	bne.n	2401240c <HAL_QSPI_AutoPolling_IT+0x22>
24012408:	2302      	movs	r3, #2
2401240a:	e062      	b.n	240124d2 <HAL_QSPI_AutoPolling_IT+0xe8>
2401240c:	68fb      	ldr	r3, [r7, #12]
2401240e:	2201      	movs	r2, #1
24012410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012414:	68fb      	ldr	r3, [r7, #12]
24012416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401241a:	b2db      	uxtb	r3, r3
2401241c:	2b01      	cmp	r3, #1
2401241e:	d151      	bne.n	240124c4 <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012420:	68fb      	ldr	r3, [r7, #12]
24012422:	2200      	movs	r2, #0
24012424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
24012426:	68fb      	ldr	r3, [r7, #12]
24012428:	2242      	movs	r2, #66	; 0x42
2401242a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2401242e:	68fb      	ldr	r3, [r7, #12]
24012430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012432:	9300      	str	r3, [sp, #0]
24012434:	693b      	ldr	r3, [r7, #16]
24012436:	2200      	movs	r2, #0
24012438:	2120      	movs	r1, #32
2401243a:	68f8      	ldr	r0, [r7, #12]
2401243c:	f000 fb09 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24012440:	4603      	mov	r3, r0
24012442:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012444:	7dfb      	ldrb	r3, [r7, #23]
24012446:	2b00      	cmp	r3, #0
24012448:	d137      	bne.n	240124ba <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
2401244a:	68fb      	ldr	r3, [r7, #12]
2401244c:	681b      	ldr	r3, [r3, #0]
2401244e:	687a      	ldr	r2, [r7, #4]
24012450:	6812      	ldr	r2, [r2, #0]
24012452:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
24012454:	68fb      	ldr	r3, [r7, #12]
24012456:	681b      	ldr	r3, [r3, #0]
24012458:	687a      	ldr	r2, [r7, #4]
2401245a:	6852      	ldr	r2, [r2, #4]
2401245c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
2401245e:	68fb      	ldr	r3, [r7, #12]
24012460:	681b      	ldr	r3, [r3, #0]
24012462:	687a      	ldr	r2, [r7, #4]
24012464:	6892      	ldr	r2, [r2, #8]
24012466:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
24012468:	68fb      	ldr	r3, [r7, #12]
2401246a:	681b      	ldr	r3, [r3, #0]
2401246c:	681b      	ldr	r3, [r3, #0]
2401246e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
24012472:	687b      	ldr	r3, [r7, #4]
24012474:	691a      	ldr	r2, [r3, #16]
24012476:	687b      	ldr	r3, [r7, #4]
24012478:	695b      	ldr	r3, [r3, #20]
2401247a:	431a      	orrs	r2, r3
2401247c:	68fb      	ldr	r3, [r7, #12]
2401247e:	681b      	ldr	r3, [r3, #0]
24012480:	430a      	orrs	r2, r1
24012482:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
24012484:	68fb      	ldr	r3, [r7, #12]
24012486:	681b      	ldr	r3, [r3, #0]
24012488:	2209      	movs	r2, #9
2401248a:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
2401248c:	687b      	ldr	r3, [r7, #4]
2401248e:	68da      	ldr	r2, [r3, #12]
24012490:	68bb      	ldr	r3, [r7, #8]
24012492:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
24012494:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
24012498:	68b9      	ldr	r1, [r7, #8]
2401249a:	68f8      	ldr	r0, [r7, #12]
2401249c:	f000 fb10 	bl	24012ac0 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240124a0:	68fb      	ldr	r3, [r7, #12]
240124a2:	2200      	movs	r2, #0
240124a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
240124a8:	68fb      	ldr	r3, [r7, #12]
240124aa:	681b      	ldr	r3, [r3, #0]
240124ac:	681a      	ldr	r2, [r3, #0]
240124ae:	68fb      	ldr	r3, [r7, #12]
240124b0:	681b      	ldr	r3, [r3, #0]
240124b2:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
240124b6:	601a      	str	r2, [r3, #0]
240124b8:	e00a      	b.n	240124d0 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240124ba:	68fb      	ldr	r3, [r7, #12]
240124bc:	2200      	movs	r2, #0
240124be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240124c2:	e005      	b.n	240124d0 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
240124c4:	2302      	movs	r3, #2
240124c6:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240124c8:	68fb      	ldr	r3, [r7, #12]
240124ca:	2200      	movs	r2, #0
240124cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
240124d0:	7dfb      	ldrb	r3, [r7, #23]
}
240124d2:	4618      	mov	r0, r3
240124d4:	3718      	adds	r7, #24
240124d6:	46bd      	mov	sp, r7
240124d8:	bd80      	pop	{r7, pc}

240124da <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
240124da:	b580      	push	{r7, lr}
240124dc:	b088      	sub	sp, #32
240124de:	af02      	add	r7, sp, #8
240124e0:	60f8      	str	r0, [r7, #12]
240124e2:	60b9      	str	r1, [r7, #8]
240124e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
240124e6:	f7ef fe89 	bl	240021fc <HAL_GetTick>
240124ea:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
240124ec:	68fb      	ldr	r3, [r7, #12]
240124ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240124f2:	b2db      	uxtb	r3, r3
240124f4:	2b01      	cmp	r3, #1
240124f6:	d101      	bne.n	240124fc <HAL_QSPI_MemoryMapped+0x22>
240124f8:	2302      	movs	r3, #2
240124fa:	e04c      	b.n	24012596 <HAL_QSPI_MemoryMapped+0xbc>
240124fc:	68fb      	ldr	r3, [r7, #12]
240124fe:	2201      	movs	r2, #1
24012500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012504:	68fb      	ldr	r3, [r7, #12]
24012506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401250a:	b2db      	uxtb	r3, r3
2401250c:	2b01      	cmp	r3, #1
2401250e:	d13b      	bne.n	24012588 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24012510:	68fb      	ldr	r3, [r7, #12]
24012512:	2200      	movs	r2, #0
24012514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
24012516:	68fb      	ldr	r3, [r7, #12]
24012518:	2282      	movs	r2, #130	; 0x82
2401251a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2401251e:	68fb      	ldr	r3, [r7, #12]
24012520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012522:	9300      	str	r3, [sp, #0]
24012524:	693b      	ldr	r3, [r7, #16]
24012526:	2200      	movs	r2, #0
24012528:	2120      	movs	r1, #32
2401252a:	68f8      	ldr	r0, [r7, #12]
2401252c:	f000 fa91 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
24012530:	4603      	mov	r3, r0
24012532:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012534:	7dfb      	ldrb	r3, [r7, #23]
24012536:	2b00      	cmp	r3, #0
24012538:	d128      	bne.n	2401258c <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
2401253a:	68fb      	ldr	r3, [r7, #12]
2401253c:	681b      	ldr	r3, [r3, #0]
2401253e:	681b      	ldr	r3, [r3, #0]
24012540:	f023 0108 	bic.w	r1, r3, #8
24012544:	687b      	ldr	r3, [r7, #4]
24012546:	685a      	ldr	r2, [r3, #4]
24012548:	68fb      	ldr	r3, [r7, #12]
2401254a:	681b      	ldr	r3, [r3, #0]
2401254c:	430a      	orrs	r2, r1
2401254e:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
24012550:	687b      	ldr	r3, [r7, #4]
24012552:	685b      	ldr	r3, [r3, #4]
24012554:	2b08      	cmp	r3, #8
24012556:	d110      	bne.n	2401257a <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
24012558:	68fb      	ldr	r3, [r7, #12]
2401255a:	681b      	ldr	r3, [r3, #0]
2401255c:	687a      	ldr	r2, [r7, #4]
2401255e:	6812      	ldr	r2, [r2, #0]
24012560:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
24012562:	68fb      	ldr	r3, [r7, #12]
24012564:	681b      	ldr	r3, [r3, #0]
24012566:	2210      	movs	r2, #16
24012568:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
2401256a:	68fb      	ldr	r3, [r7, #12]
2401256c:	681b      	ldr	r3, [r3, #0]
2401256e:	681a      	ldr	r2, [r3, #0]
24012570:	68fb      	ldr	r3, [r7, #12]
24012572:	681b      	ldr	r3, [r3, #0]
24012574:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
24012578:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
2401257a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
2401257e:	68b9      	ldr	r1, [r7, #8]
24012580:	68f8      	ldr	r0, [r7, #12]
24012582:	f000 fa9d 	bl	24012ac0 <QSPI_Config>
24012586:	e001      	b.n	2401258c <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
24012588:	2302      	movs	r3, #2
2401258a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2401258c:	68fb      	ldr	r3, [r7, #12]
2401258e:	2200      	movs	r2, #0
24012590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24012594:	7dfb      	ldrb	r3, [r7, #23]
}
24012596:	4618      	mov	r0, r3
24012598:	3718      	adds	r7, #24
2401259a:	46bd      	mov	sp, r7
2401259c:	bd80      	pop	{r7, pc}

2401259e <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
2401259e:	b480      	push	{r7}
240125a0:	b083      	sub	sp, #12
240125a2:	af00      	add	r7, sp, #0
240125a4:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
240125a6:	bf00      	nop
240125a8:	370c      	adds	r7, #12
240125aa:	46bd      	mov	sp, r7
240125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
240125b0:	4770      	bx	lr

240125b2 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
240125b2:	b480      	push	{r7}
240125b4:	b083      	sub	sp, #12
240125b6:	af00      	add	r7, sp, #0
240125b8:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
240125ba:	bf00      	nop
240125bc:	370c      	adds	r7, #12
240125be:	46bd      	mov	sp, r7
240125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240125c4:	4770      	bx	lr

240125c6 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
240125c6:	b480      	push	{r7}
240125c8:	b083      	sub	sp, #12
240125ca:	af00      	add	r7, sp, #0
240125cc:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
240125ce:	bf00      	nop
240125d0:	370c      	adds	r7, #12
240125d2:	46bd      	mov	sp, r7
240125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
240125d8:	4770      	bx	lr

240125da <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
240125da:	b480      	push	{r7}
240125dc:	b083      	sub	sp, #12
240125de:	af00      	add	r7, sp, #0
240125e0:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
240125e2:	bf00      	nop
240125e4:	370c      	adds	r7, #12
240125e6:	46bd      	mov	sp, r7
240125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
240125ec:	4770      	bx	lr

240125ee <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
240125ee:	b480      	push	{r7}
240125f0:	b083      	sub	sp, #12
240125f2:	af00      	add	r7, sp, #0
240125f4:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
240125f6:	bf00      	nop
240125f8:	370c      	adds	r7, #12
240125fa:	46bd      	mov	sp, r7
240125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24012600:	4770      	bx	lr

24012602 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
24012602:	b480      	push	{r7}
24012604:	b083      	sub	sp, #12
24012606:	af00      	add	r7, sp, #0
24012608:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
2401260a:	bf00      	nop
2401260c:	370c      	adds	r7, #12
2401260e:	46bd      	mov	sp, r7
24012610:	f85d 7b04 	ldr.w	r7, [sp], #4
24012614:	4770      	bx	lr

24012616 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
24012616:	b480      	push	{r7}
24012618:	b083      	sub	sp, #12
2401261a:	af00      	add	r7, sp, #0
2401261c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
2401261e:	bf00      	nop
24012620:	370c      	adds	r7, #12
24012622:	46bd      	mov	sp, r7
24012624:	f85d 7b04 	ldr.w	r7, [sp], #4
24012628:	4770      	bx	lr

2401262a <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
2401262a:	b480      	push	{r7}
2401262c:	b083      	sub	sp, #12
2401262e:	af00      	add	r7, sp, #0
24012630:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
24012632:	bf00      	nop
24012634:	370c      	adds	r7, #12
24012636:	46bd      	mov	sp, r7
24012638:	f85d 7b04 	ldr.w	r7, [sp], #4
2401263c:	4770      	bx	lr

2401263e <HAL_QSPI_GetState>:
  * @brief  Return the QSPI handle state.
  * @param  hqspi QSPI handle
  * @retval HAL state
  */
HAL_QSPI_StateTypeDef HAL_QSPI_GetState(QSPI_HandleTypeDef *hqspi)
{
2401263e:	b480      	push	{r7}
24012640:	b083      	sub	sp, #12
24012642:	af00      	add	r7, sp, #0
24012644:	6078      	str	r0, [r7, #4]
  /* Return QSPI handle state */
  return hqspi->State;
24012646:	687b      	ldr	r3, [r7, #4]
24012648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401264c:	b2db      	uxtb	r3, r3
}
2401264e:	4618      	mov	r0, r3
24012650:	370c      	adds	r7, #12
24012652:	46bd      	mov	sp, r7
24012654:	f85d 7b04 	ldr.w	r7, [sp], #4
24012658:	4770      	bx	lr

2401265a <HAL_QSPI_GetError>:
* @brief  Return the QSPI error code.
* @param  hqspi QSPI handle
* @retval QSPI Error Code
*/
uint32_t HAL_QSPI_GetError(QSPI_HandleTypeDef *hqspi)
{
2401265a:	b480      	push	{r7}
2401265c:	b083      	sub	sp, #12
2401265e:	af00      	add	r7, sp, #0
24012660:	6078      	str	r0, [r7, #4]
  return hqspi->ErrorCode;
24012662:	687b      	ldr	r3, [r7, #4]
24012664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
24012666:	4618      	mov	r0, r3
24012668:	370c      	adds	r7, #12
2401266a:	46bd      	mov	sp, r7
2401266c:	f85d 7b04 	ldr.w	r7, [sp], #4
24012670:	4770      	bx	lr

24012672 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
24012672:	b580      	push	{r7, lr}
24012674:	b086      	sub	sp, #24
24012676:	af02      	add	r7, sp, #8
24012678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2401267a:	2300      	movs	r3, #0
2401267c:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
2401267e:	f7ef fdbd 	bl	240021fc <HAL_GetTick>
24012682:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
24012684:	687b      	ldr	r3, [r7, #4]
24012686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401268a:	b2db      	uxtb	r3, r3
2401268c:	f003 0302 	and.w	r3, r3, #2
24012690:	2b00      	cmp	r3, #0
24012692:	d062      	beq.n	2401275a <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24012694:	687b      	ldr	r3, [r7, #4]
24012696:	2200      	movs	r2, #0
24012698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2401269c:	687b      	ldr	r3, [r7, #4]
2401269e:	681b      	ldr	r3, [r3, #0]
240126a0:	681b      	ldr	r3, [r3, #0]
240126a2:	f003 0304 	and.w	r3, r3, #4
240126a6:	2b00      	cmp	r3, #0
240126a8:	d017      	beq.n	240126da <HAL_QSPI_Abort+0x68>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240126aa:	687b      	ldr	r3, [r7, #4]
240126ac:	681b      	ldr	r3, [r3, #0]
240126ae:	681a      	ldr	r2, [r3, #0]
240126b0:	687b      	ldr	r3, [r7, #4]
240126b2:	681b      	ldr	r3, [r3, #0]
240126b4:	f022 0204 	bic.w	r2, r2, #4
240126b8:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
240126ba:	687b      	ldr	r3, [r7, #4]
240126bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240126be:	4618      	mov	r0, r3
240126c0:	f7fd fc16 	bl	2400fef0 <HAL_MDMA_Abort>
240126c4:	4603      	mov	r3, r0
240126c6:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
240126c8:	7bfb      	ldrb	r3, [r7, #15]
240126ca:	2b00      	cmp	r3, #0
240126cc:	d005      	beq.n	240126da <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
240126ce:	687b      	ldr	r3, [r7, #4]
240126d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240126d2:	f043 0204 	orr.w	r2, r3, #4
240126d6:	687b      	ldr	r3, [r7, #4]
240126d8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
240126da:	687b      	ldr	r3, [r7, #4]
240126dc:	681b      	ldr	r3, [r3, #0]
240126de:	689b      	ldr	r3, [r3, #8]
240126e0:	f003 0320 	and.w	r3, r3, #32
240126e4:	2b00      	cmp	r3, #0
240126e6:	d034      	beq.n	24012752 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
240126e8:	687b      	ldr	r3, [r7, #4]
240126ea:	681b      	ldr	r3, [r3, #0]
240126ec:	681a      	ldr	r2, [r3, #0]
240126ee:	687b      	ldr	r3, [r7, #4]
240126f0:	681b      	ldr	r3, [r3, #0]
240126f2:	f042 0202 	orr.w	r2, r2, #2
240126f6:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
240126f8:	687b      	ldr	r3, [r7, #4]
240126fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240126fc:	9300      	str	r3, [sp, #0]
240126fe:	68bb      	ldr	r3, [r7, #8]
24012700:	2201      	movs	r2, #1
24012702:	2102      	movs	r1, #2
24012704:	6878      	ldr	r0, [r7, #4]
24012706:	f000 f9a4 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
2401270a:	4603      	mov	r3, r0
2401270c:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
2401270e:	7bfb      	ldrb	r3, [r7, #15]
24012710:	2b00      	cmp	r3, #0
24012712:	d10e      	bne.n	24012732 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24012714:	687b      	ldr	r3, [r7, #4]
24012716:	681b      	ldr	r3, [r3, #0]
24012718:	2202      	movs	r2, #2
2401271a:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2401271c:	687b      	ldr	r3, [r7, #4]
2401271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24012720:	9300      	str	r3, [sp, #0]
24012722:	68bb      	ldr	r3, [r7, #8]
24012724:	2200      	movs	r2, #0
24012726:	2120      	movs	r1, #32
24012728:	6878      	ldr	r0, [r7, #4]
2401272a:	f000 f992 	bl	24012a52 <QSPI_WaitFlagStateUntilTimeout>
2401272e:	4603      	mov	r3, r0
24012730:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
24012732:	7bfb      	ldrb	r3, [r7, #15]
24012734:	2b00      	cmp	r3, #0
24012736:	d110      	bne.n	2401275a <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
24012738:	687b      	ldr	r3, [r7, #4]
2401273a:	681b      	ldr	r3, [r3, #0]
2401273c:	695a      	ldr	r2, [r3, #20]
2401273e:	687b      	ldr	r3, [r7, #4]
24012740:	681b      	ldr	r3, [r3, #0]
24012742:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24012746:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
24012748:	687b      	ldr	r3, [r7, #4]
2401274a:	2201      	movs	r2, #1
2401274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24012750:	e003      	b.n	2401275a <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
24012752:	687b      	ldr	r3, [r7, #4]
24012754:	2201      	movs	r2, #1
24012756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
2401275a:	7bfb      	ldrb	r3, [r7, #15]
}
2401275c:	4618      	mov	r0, r3
2401275e:	3710      	adds	r7, #16
24012760:	46bd      	mov	sp, r7
24012762:	bd80      	pop	{r7, pc}

24012764 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
24012764:	b580      	push	{r7, lr}
24012766:	b084      	sub	sp, #16
24012768:	af00      	add	r7, sp, #0
2401276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2401276c:	2300      	movs	r3, #0
2401276e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
24012770:	687b      	ldr	r3, [r7, #4]
24012772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012776:	b2db      	uxtb	r3, r3
24012778:	f003 0302 	and.w	r3, r3, #2
2401277c:	2b00      	cmp	r3, #0
2401277e:	d052      	beq.n	24012826 <HAL_QSPI_Abort_IT+0xc2>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24012780:	687b      	ldr	r3, [r7, #4]
24012782:	2200      	movs	r2, #0
24012784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
24012788:	687b      	ldr	r3, [r7, #4]
2401278a:	2208      	movs	r2, #8
2401278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
24012790:	687b      	ldr	r3, [r7, #4]
24012792:	681b      	ldr	r3, [r3, #0]
24012794:	681a      	ldr	r2, [r3, #0]
24012796:	687b      	ldr	r3, [r7, #4]
24012798:	681b      	ldr	r3, [r3, #0]
2401279a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
2401279e:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240127a0:	687b      	ldr	r3, [r7, #4]
240127a2:	681b      	ldr	r3, [r3, #0]
240127a4:	681b      	ldr	r3, [r3, #0]
240127a6:	f003 0304 	and.w	r3, r3, #4
240127aa:	2b00      	cmp	r3, #0
240127ac:	d01b      	beq.n	240127e6 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240127ae:	687b      	ldr	r3, [r7, #4]
240127b0:	681b      	ldr	r3, [r3, #0]
240127b2:	681a      	ldr	r2, [r3, #0]
240127b4:	687b      	ldr	r3, [r7, #4]
240127b6:	681b      	ldr	r3, [r3, #0]
240127b8:	f022 0204 	bic.w	r2, r2, #4
240127bc:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
240127be:	687b      	ldr	r3, [r7, #4]
240127c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240127c2:	4a1b      	ldr	r2, [pc, #108]	; (24012830 <HAL_QSPI_Abort_IT+0xcc>)
240127c4:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
240127c6:	687b      	ldr	r3, [r7, #4]
240127c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240127ca:	4618      	mov	r0, r3
240127cc:	f7fd fbeb 	bl	2400ffa6 <HAL_MDMA_Abort_IT>
240127d0:	4603      	mov	r3, r0
240127d2:	2b00      	cmp	r3, #0
240127d4:	d027      	beq.n	24012826 <HAL_QSPI_Abort_IT+0xc2>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
240127d6:	687b      	ldr	r3, [r7, #4]
240127d8:	2201      	movs	r2, #1
240127da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
240127de:	6878      	ldr	r0, [r7, #4]
240127e0:	f7ff fee7 	bl	240125b2 <HAL_QSPI_AbortCpltCallback>
240127e4:	e01f      	b.n	24012826 <HAL_QSPI_Abort_IT+0xc2>
#endif
      }
    }
    else
    {
      if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
240127e6:	687b      	ldr	r3, [r7, #4]
240127e8:	681b      	ldr	r3, [r3, #0]
240127ea:	689b      	ldr	r3, [r3, #8]
240127ec:	f003 0320 	and.w	r3, r3, #32
240127f0:	2b00      	cmp	r3, #0
240127f2:	d014      	beq.n	2401281e <HAL_QSPI_Abort_IT+0xba>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
240127f4:	687b      	ldr	r3, [r7, #4]
240127f6:	681b      	ldr	r3, [r3, #0]
240127f8:	2202      	movs	r2, #2
240127fa:	60da      	str	r2, [r3, #12]
        
        /* Enable the QSPI Transfer Complete Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
240127fc:	687b      	ldr	r3, [r7, #4]
240127fe:	681b      	ldr	r3, [r3, #0]
24012800:	681a      	ldr	r2, [r3, #0]
24012802:	687b      	ldr	r3, [r7, #4]
24012804:	681b      	ldr	r3, [r3, #0]
24012806:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2401280a:	601a      	str	r2, [r3, #0]
        
        /* Configure QSPI: CR register with Abort request */
        SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2401280c:	687b      	ldr	r3, [r7, #4]
2401280e:	681b      	ldr	r3, [r3, #0]
24012810:	681a      	ldr	r2, [r3, #0]
24012812:	687b      	ldr	r3, [r7, #4]
24012814:	681b      	ldr	r3, [r3, #0]
24012816:	f042 0202 	orr.w	r2, r2, #2
2401281a:	601a      	str	r2, [r3, #0]
2401281c:	e003      	b.n	24012826 <HAL_QSPI_Abort_IT+0xc2>
      }    
      else
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
2401281e:	687b      	ldr	r3, [r7, #4]
24012820:	2201      	movs	r2, #1
24012822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }
  }
  return status;
24012826:	7bfb      	ldrb	r3, [r7, #15]
}
24012828:	4618      	mov	r0, r3
2401282a:	3710      	adds	r7, #16
2401282c:	46bd      	mov	sp, r7
2401282e:	bd80      	pop	{r7, pc}
24012830:	240129ed 	.word	0x240129ed

24012834 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
24012834:	b480      	push	{r7}
24012836:	b083      	sub	sp, #12
24012838:	af00      	add	r7, sp, #0
2401283a:	6078      	str	r0, [r7, #4]
2401283c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
2401283e:	687b      	ldr	r3, [r7, #4]
24012840:	683a      	ldr	r2, [r7, #0]
24012842:	649a      	str	r2, [r3, #72]	; 0x48
}
24012844:	bf00      	nop
24012846:	370c      	adds	r7, #12
24012848:	46bd      	mov	sp, r7
2401284a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401284e:	4770      	bx	lr

24012850 <HAL_QSPI_SetFifoThreshold>:
  * @param  hqspi QSPI handle.
  * @param  Threshold Threshold of the Fifo (value between 1 and 16).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold)
{
24012850:	b480      	push	{r7}
24012852:	b085      	sub	sp, #20
24012854:	af00      	add	r7, sp, #0
24012856:	6078      	str	r0, [r7, #4]
24012858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401285a:	2300      	movs	r3, #0
2401285c:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
2401285e:	687b      	ldr	r3, [r7, #4]
24012860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24012864:	b2db      	uxtb	r3, r3
24012866:	2b01      	cmp	r3, #1
24012868:	d101      	bne.n	2401286e <HAL_QSPI_SetFifoThreshold+0x1e>
2401286a:	2302      	movs	r3, #2
2401286c:	e021      	b.n	240128b2 <HAL_QSPI_SetFifoThreshold+0x62>
2401286e:	687b      	ldr	r3, [r7, #4]
24012870:	2201      	movs	r2, #1
24012872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012876:	687b      	ldr	r3, [r7, #4]
24012878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401287c:	b2db      	uxtb	r3, r3
2401287e:	2b01      	cmp	r3, #1
24012880:	d110      	bne.n	240128a4 <HAL_QSPI_SetFifoThreshold+0x54>
  {
    /* Synchronize init structure with new FIFO threshold value */
    hqspi->Init.FifoThreshold = Threshold;
24012882:	687b      	ldr	r3, [r7, #4]
24012884:	683a      	ldr	r2, [r7, #0]
24012886:	609a      	str	r2, [r3, #8]

    /* Configure QSPI FIFO Threshold */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24012888:	687b      	ldr	r3, [r7, #4]
2401288a:	681b      	ldr	r3, [r3, #0]
2401288c:	681b      	ldr	r3, [r3, #0]
2401288e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
24012892:	687b      	ldr	r3, [r7, #4]
24012894:	689b      	ldr	r3, [r3, #8]
24012896:	3b01      	subs	r3, #1
24012898:	021a      	lsls	r2, r3, #8
2401289a:	687b      	ldr	r3, [r7, #4]
2401289c:	681b      	ldr	r3, [r3, #0]
2401289e:	430a      	orrs	r2, r1
240128a0:	601a      	str	r2, [r3, #0]
240128a2:	e001      	b.n	240128a8 <HAL_QSPI_SetFifoThreshold+0x58>
               ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
  }
  else
  {
    status = HAL_BUSY;
240128a4:	2302      	movs	r3, #2
240128a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240128a8:	687b      	ldr	r3, [r7, #4]
240128aa:	2200      	movs	r2, #0
240128ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240128b0:	7bfb      	ldrb	r3, [r7, #15]
}
240128b2:	4618      	mov	r0, r3
240128b4:	3714      	adds	r7, #20
240128b6:	46bd      	mov	sp, r7
240128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240128bc:	4770      	bx	lr

240128be <HAL_QSPI_GetFifoThreshold>:
/** @brief Get QSPI Fifo threshold.
  * @param  hqspi QSPI handle.
  * @retval Fifo threshold (value between 1 and 16)
  */
uint32_t HAL_QSPI_GetFifoThreshold(QSPI_HandleTypeDef *hqspi)
{
240128be:	b480      	push	{r7}
240128c0:	b083      	sub	sp, #12
240128c2:	af00      	add	r7, sp, #0
240128c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1U);
240128c6:	687b      	ldr	r3, [r7, #4]
240128c8:	681b      	ldr	r3, [r3, #0]
240128ca:	681b      	ldr	r3, [r3, #0]
240128cc:	0a1b      	lsrs	r3, r3, #8
240128ce:	f003 030f 	and.w	r3, r3, #15
240128d2:	3301      	adds	r3, #1
}
240128d4:	4618      	mov	r0, r3
240128d6:	370c      	adds	r7, #12
240128d8:	46bd      	mov	sp, r7
240128da:	f85d 7b04 	ldr.w	r7, [sp], #4
240128de:	4770      	bx	lr

240128e0 <HAL_QSPI_SetFlashID>:
  *                   This parameter can be a value of @ref QSPI_Flash_Select.
  * @note   The FlashID is ignored when dual flash mode is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFlashID(QSPI_HandleTypeDef *hqspi, uint32_t FlashID)
{
240128e0:	b480      	push	{r7}
240128e2:	b085      	sub	sp, #20
240128e4:	af00      	add	r7, sp, #0
240128e6:	6078      	str	r0, [r7, #4]
240128e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240128ea:	2300      	movs	r3, #0
240128ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_QSPI_FLASH_ID(FlashID));

  /* Process locked */
  __HAL_LOCK(hqspi);
240128ee:	687b      	ldr	r3, [r7, #4]
240128f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240128f4:	b2db      	uxtb	r3, r3
240128f6:	2b01      	cmp	r3, #1
240128f8:	d101      	bne.n	240128fe <HAL_QSPI_SetFlashID+0x1e>
240128fa:	2302      	movs	r3, #2
240128fc:	e01e      	b.n	2401293c <HAL_QSPI_SetFlashID+0x5c>
240128fe:	687b      	ldr	r3, [r7, #4]
24012900:	2201      	movs	r2, #1
24012902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24012906:	687b      	ldr	r3, [r7, #4]
24012908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2401290c:	b2db      	uxtb	r3, r3
2401290e:	2b01      	cmp	r3, #1
24012910:	d10d      	bne.n	2401292e <HAL_QSPI_SetFlashID+0x4e>
  {
    /* Synchronize init structure with new FlashID value */
    hqspi->Init.FlashID = FlashID;
24012912:	687b      	ldr	r3, [r7, #4]
24012914:	683a      	ldr	r2, [r7, #0]
24012916:	61da      	str	r2, [r3, #28]

    /* Configure QSPI FlashID */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
24012918:	687b      	ldr	r3, [r7, #4]
2401291a:	681b      	ldr	r3, [r3, #0]
2401291c:	681b      	ldr	r3, [r3, #0]
2401291e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
24012922:	687b      	ldr	r3, [r7, #4]
24012924:	681b      	ldr	r3, [r3, #0]
24012926:	683a      	ldr	r2, [r7, #0]
24012928:	430a      	orrs	r2, r1
2401292a:	601a      	str	r2, [r3, #0]
2401292c:	e001      	b.n	24012932 <HAL_QSPI_SetFlashID+0x52>
  }
  else
  {
    status = HAL_BUSY;
2401292e:	2302      	movs	r3, #2
24012930:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24012932:	687b      	ldr	r3, [r7, #4]
24012934:	2200      	movs	r2, #0
24012936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2401293a:	7bfb      	ldrb	r3, [r7, #15]
}
2401293c:	4618      	mov	r0, r3
2401293e:	3714      	adds	r7, #20
24012940:	46bd      	mov	sp, r7
24012942:	f85d 7b04 	ldr.w	r7, [sp], #4
24012946:	4770      	bx	lr

24012948 <QSPI_DMARxCplt>:
  * @brief  DMA QSPI receive process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(MDMA_HandleTypeDef *hmdma)
{
24012948:	b480      	push	{r7}
2401294a:	b085      	sub	sp, #20
2401294c:	af00      	add	r7, sp, #0
2401294e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
24012950:	687b      	ldr	r3, [r7, #4]
24012952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24012954:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
24012956:	68fb      	ldr	r3, [r7, #12]
24012958:	2200      	movs	r2, #0
2401295a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2401295c:	68fb      	ldr	r3, [r7, #12]
2401295e:	681b      	ldr	r3, [r3, #0]
24012960:	681a      	ldr	r2, [r3, #0]
24012962:	68fb      	ldr	r3, [r7, #12]
24012964:	681b      	ldr	r3, [r3, #0]
24012966:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2401296a:	601a      	str	r2, [r3, #0]
}
2401296c:	bf00      	nop
2401296e:	3714      	adds	r7, #20
24012970:	46bd      	mov	sp, r7
24012972:	f85d 7b04 	ldr.w	r7, [sp], #4
24012976:	4770      	bx	lr

24012978 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
24012978:	b480      	push	{r7}
2401297a:	b085      	sub	sp, #20
2401297c:	af00      	add	r7, sp, #0
2401297e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
24012980:	687b      	ldr	r3, [r7, #4]
24012982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24012984:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
24012986:	68fb      	ldr	r3, [r7, #12]
24012988:	2200      	movs	r2, #0
2401298a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2401298c:	68fb      	ldr	r3, [r7, #12]
2401298e:	681b      	ldr	r3, [r3, #0]
24012990:	681a      	ldr	r2, [r3, #0]
24012992:	68fb      	ldr	r3, [r7, #12]
24012994:	681b      	ldr	r3, [r3, #0]
24012996:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2401299a:	601a      	str	r2, [r3, #0]
}
2401299c:	bf00      	nop
2401299e:	3714      	adds	r7, #20
240129a0:	46bd      	mov	sp, r7
240129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
240129a6:	4770      	bx	lr

240129a8 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
240129a8:	b580      	push	{r7, lr}
240129aa:	b084      	sub	sp, #16
240129ac:	af00      	add	r7, sp, #0
240129ae:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
240129b0:	687b      	ldr	r3, [r7, #4]
240129b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240129b4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
240129b6:	68fb      	ldr	r3, [r7, #12]
240129b8:	2200      	movs	r2, #0
240129ba:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
240129bc:	68fb      	ldr	r3, [r7, #12]
240129be:	2200      	movs	r2, #0
240129c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
240129c2:	68fb      	ldr	r3, [r7, #12]
240129c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240129c6:	f043 0204 	orr.w	r2, r3, #4
240129ca:	68fb      	ldr	r3, [r7, #12]
240129cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
     but no impact on H7 HW and it minimize the cost in the footprint */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240129ce:	68fb      	ldr	r3, [r7, #12]
240129d0:	681b      	ldr	r3, [r3, #0]
240129d2:	681a      	ldr	r2, [r3, #0]
240129d4:	68fb      	ldr	r3, [r7, #12]
240129d6:	681b      	ldr	r3, [r3, #0]
240129d8:	f022 0204 	bic.w	r2, r2, #4
240129dc:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
240129de:	68f8      	ldr	r0, [r7, #12]
240129e0:	f7ff fec0 	bl	24012764 <HAL_QSPI_Abort_IT>

}
240129e4:	bf00      	nop
240129e6:	3710      	adds	r7, #16
240129e8:	46bd      	mov	sp, r7
240129ea:	bd80      	pop	{r7, pc}

240129ec <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
240129ec:	b580      	push	{r7, lr}
240129ee:	b084      	sub	sp, #16
240129f0:	af00      	add	r7, sp, #0
240129f2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
240129f4:	687b      	ldr	r3, [r7, #4]
240129f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240129f8:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
240129fa:	68fb      	ldr	r3, [r7, #12]
240129fc:	2200      	movs	r2, #0
240129fe:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
24012a00:	68fb      	ldr	r3, [r7, #12]
24012a02:	2200      	movs	r2, #0
24012a04:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
24012a06:	68fb      	ldr	r3, [r7, #12]
24012a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24012a0c:	b2db      	uxtb	r3, r3
24012a0e:	2b08      	cmp	r3, #8
24012a10:	d114      	bne.n	24012a3c <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24012a12:	68fb      	ldr	r3, [r7, #12]
24012a14:	681b      	ldr	r3, [r3, #0]
24012a16:	2202      	movs	r2, #2
24012a18:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
24012a1a:	68fb      	ldr	r3, [r7, #12]
24012a1c:	681b      	ldr	r3, [r3, #0]
24012a1e:	681a      	ldr	r2, [r3, #0]
24012a20:	68fb      	ldr	r3, [r7, #12]
24012a22:	681b      	ldr	r3, [r3, #0]
24012a24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24012a28:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
24012a2a:	68fb      	ldr	r3, [r7, #12]
24012a2c:	681b      	ldr	r3, [r3, #0]
24012a2e:	681a      	ldr	r2, [r3, #0]
24012a30:	68fb      	ldr	r3, [r7, #12]
24012a32:	681b      	ldr	r3, [r3, #0]
24012a34:	f042 0202 	orr.w	r2, r2, #2
24012a38:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
24012a3a:	e006      	b.n	24012a4a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
24012a3c:	68fb      	ldr	r3, [r7, #12]
24012a3e:	2201      	movs	r2, #1
24012a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
24012a44:	68f8      	ldr	r0, [r7, #12]
24012a46:	f7ff fdaa 	bl	2401259e <HAL_QSPI_ErrorCallback>
}
24012a4a:	bf00      	nop
24012a4c:	3710      	adds	r7, #16
24012a4e:	46bd      	mov	sp, r7
24012a50:	bd80      	pop	{r7, pc}

24012a52 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
24012a52:	b580      	push	{r7, lr}
24012a54:	b084      	sub	sp, #16
24012a56:	af00      	add	r7, sp, #0
24012a58:	60f8      	str	r0, [r7, #12]
24012a5a:	60b9      	str	r1, [r7, #8]
24012a5c:	603b      	str	r3, [r7, #0]
24012a5e:	4613      	mov	r3, r2
24012a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24012a62:	e01a      	b.n	24012a9a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24012a64:	69bb      	ldr	r3, [r7, #24]
24012a66:	f1b3 3fff 	cmp.w	r3, #4294967295
24012a6a:	d016      	beq.n	24012a9a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24012a6c:	f7ef fbc6 	bl	240021fc <HAL_GetTick>
24012a70:	4602      	mov	r2, r0
24012a72:	683b      	ldr	r3, [r7, #0]
24012a74:	1ad3      	subs	r3, r2, r3
24012a76:	69ba      	ldr	r2, [r7, #24]
24012a78:	429a      	cmp	r2, r3
24012a7a:	d302      	bcc.n	24012a82 <QSPI_WaitFlagStateUntilTimeout+0x30>
24012a7c:	69bb      	ldr	r3, [r7, #24]
24012a7e:	2b00      	cmp	r3, #0
24012a80:	d10b      	bne.n	24012a9a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24012a82:	68fb      	ldr	r3, [r7, #12]
24012a84:	2204      	movs	r2, #4
24012a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24012a8a:	68fb      	ldr	r3, [r7, #12]
24012a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24012a8e:	f043 0201 	orr.w	r2, r3, #1
24012a92:	68fb      	ldr	r3, [r7, #12]
24012a94:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
24012a96:	2301      	movs	r3, #1
24012a98:	e00e      	b.n	24012ab8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24012a9a:	68fb      	ldr	r3, [r7, #12]
24012a9c:	681b      	ldr	r3, [r3, #0]
24012a9e:	689a      	ldr	r2, [r3, #8]
24012aa0:	68bb      	ldr	r3, [r7, #8]
24012aa2:	4013      	ands	r3, r2
24012aa4:	2b00      	cmp	r3, #0
24012aa6:	bf14      	ite	ne
24012aa8:	2301      	movne	r3, #1
24012aaa:	2300      	moveq	r3, #0
24012aac:	b2db      	uxtb	r3, r3
24012aae:	461a      	mov	r2, r3
24012ab0:	79fb      	ldrb	r3, [r7, #7]
24012ab2:	429a      	cmp	r2, r3
24012ab4:	d1d6      	bne.n	24012a64 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
24012ab6:	2300      	movs	r3, #0
}
24012ab8:	4618      	mov	r0, r3
24012aba:	3710      	adds	r7, #16
24012abc:	46bd      	mov	sp, r7
24012abe:	bd80      	pop	{r7, pc}

24012ac0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
24012ac0:	b480      	push	{r7}
24012ac2:	b085      	sub	sp, #20
24012ac4:	af00      	add	r7, sp, #0
24012ac6:	60f8      	str	r0, [r7, #12]
24012ac8:	60b9      	str	r1, [r7, #8]
24012aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
24012acc:	68bb      	ldr	r3, [r7, #8]
24012ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012ad0:	2b00      	cmp	r3, #0
24012ad2:	d009      	beq.n	24012ae8 <QSPI_Config+0x28>
24012ad4:	687b      	ldr	r3, [r7, #4]
24012ad6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012ada:	d005      	beq.n	24012ae8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
24012adc:	68bb      	ldr	r3, [r7, #8]
24012ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24012ae0:	68fb      	ldr	r3, [r7, #12]
24012ae2:	681b      	ldr	r3, [r3, #0]
24012ae4:	3a01      	subs	r2, #1
24012ae6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
24012ae8:	68bb      	ldr	r3, [r7, #8]
24012aea:	699b      	ldr	r3, [r3, #24]
24012aec:	2b00      	cmp	r3, #0
24012aee:	f000 80b9 	beq.w	24012c64 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24012af2:	68bb      	ldr	r3, [r7, #8]
24012af4:	6a1b      	ldr	r3, [r3, #32]
24012af6:	2b00      	cmp	r3, #0
24012af8:	d05f      	beq.n	24012bba <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24012afa:	68fb      	ldr	r3, [r7, #12]
24012afc:	681b      	ldr	r3, [r3, #0]
24012afe:	68ba      	ldr	r2, [r7, #8]
24012b00:	6892      	ldr	r2, [r2, #8]
24012b02:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24012b04:	68bb      	ldr	r3, [r7, #8]
24012b06:	69db      	ldr	r3, [r3, #28]
24012b08:	2b00      	cmp	r3, #0
24012b0a:	d031      	beq.n	24012b70 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012b0c:	68bb      	ldr	r3, [r7, #8]
24012b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012b10:	68bb      	ldr	r3, [r7, #8]
24012b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012b14:	431a      	orrs	r2, r3
24012b16:	68bb      	ldr	r3, [r7, #8]
24012b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012b1a:	431a      	orrs	r2, r3
24012b1c:	68bb      	ldr	r3, [r7, #8]
24012b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012b20:	431a      	orrs	r2, r3
24012b22:	68bb      	ldr	r3, [r7, #8]
24012b24:	695b      	ldr	r3, [r3, #20]
24012b26:	049b      	lsls	r3, r3, #18
24012b28:	431a      	orrs	r2, r3
24012b2a:	68bb      	ldr	r3, [r7, #8]
24012b2c:	691b      	ldr	r3, [r3, #16]
24012b2e:	431a      	orrs	r2, r3
24012b30:	68bb      	ldr	r3, [r7, #8]
24012b32:	6a1b      	ldr	r3, [r3, #32]
24012b34:	431a      	orrs	r2, r3
24012b36:	68bb      	ldr	r3, [r7, #8]
24012b38:	68db      	ldr	r3, [r3, #12]
24012b3a:	431a      	orrs	r2, r3
24012b3c:	68bb      	ldr	r3, [r7, #8]
24012b3e:	69db      	ldr	r3, [r3, #28]
24012b40:	431a      	orrs	r2, r3
24012b42:	68bb      	ldr	r3, [r7, #8]
24012b44:	699b      	ldr	r3, [r3, #24]
24012b46:	431a      	orrs	r2, r3
24012b48:	68bb      	ldr	r3, [r7, #8]
24012b4a:	681b      	ldr	r3, [r3, #0]
24012b4c:	ea42 0103 	orr.w	r1, r2, r3
24012b50:	68fb      	ldr	r3, [r7, #12]
24012b52:	681b      	ldr	r3, [r3, #0]
24012b54:	687a      	ldr	r2, [r7, #4]
24012b56:	430a      	orrs	r2, r1
24012b58:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24012b5a:	687b      	ldr	r3, [r7, #4]
24012b5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012b60:	f000 812e 	beq.w	24012dc0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24012b64:	68fb      	ldr	r3, [r7, #12]
24012b66:	681b      	ldr	r3, [r3, #0]
24012b68:	68ba      	ldr	r2, [r7, #8]
24012b6a:	6852      	ldr	r2, [r2, #4]
24012b6c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
24012b6e:	e127      	b.n	24012dc0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012b70:	68bb      	ldr	r3, [r7, #8]
24012b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012b74:	68bb      	ldr	r3, [r7, #8]
24012b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012b78:	431a      	orrs	r2, r3
24012b7a:	68bb      	ldr	r3, [r7, #8]
24012b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012b7e:	431a      	orrs	r2, r3
24012b80:	68bb      	ldr	r3, [r7, #8]
24012b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012b84:	431a      	orrs	r2, r3
24012b86:	68bb      	ldr	r3, [r7, #8]
24012b88:	695b      	ldr	r3, [r3, #20]
24012b8a:	049b      	lsls	r3, r3, #18
24012b8c:	431a      	orrs	r2, r3
24012b8e:	68bb      	ldr	r3, [r7, #8]
24012b90:	691b      	ldr	r3, [r3, #16]
24012b92:	431a      	orrs	r2, r3
24012b94:	68bb      	ldr	r3, [r7, #8]
24012b96:	6a1b      	ldr	r3, [r3, #32]
24012b98:	431a      	orrs	r2, r3
24012b9a:	68bb      	ldr	r3, [r7, #8]
24012b9c:	69db      	ldr	r3, [r3, #28]
24012b9e:	431a      	orrs	r2, r3
24012ba0:	68bb      	ldr	r3, [r7, #8]
24012ba2:	699b      	ldr	r3, [r3, #24]
24012ba4:	431a      	orrs	r2, r3
24012ba6:	68bb      	ldr	r3, [r7, #8]
24012ba8:	681b      	ldr	r3, [r3, #0]
24012baa:	ea42 0103 	orr.w	r1, r2, r3
24012bae:	68fb      	ldr	r3, [r7, #12]
24012bb0:	681b      	ldr	r3, [r3, #0]
24012bb2:	687a      	ldr	r2, [r7, #4]
24012bb4:	430a      	orrs	r2, r1
24012bb6:	615a      	str	r2, [r3, #20]
}
24012bb8:	e102      	b.n	24012dc0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24012bba:	68bb      	ldr	r3, [r7, #8]
24012bbc:	69db      	ldr	r3, [r3, #28]
24012bbe:	2b00      	cmp	r3, #0
24012bc0:	d02e      	beq.n	24012c20 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012bc2:	68bb      	ldr	r3, [r7, #8]
24012bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012bc6:	68bb      	ldr	r3, [r7, #8]
24012bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012bca:	431a      	orrs	r2, r3
24012bcc:	68bb      	ldr	r3, [r7, #8]
24012bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012bd0:	431a      	orrs	r2, r3
24012bd2:	68bb      	ldr	r3, [r7, #8]
24012bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012bd6:	431a      	orrs	r2, r3
24012bd8:	68bb      	ldr	r3, [r7, #8]
24012bda:	695b      	ldr	r3, [r3, #20]
24012bdc:	049b      	lsls	r3, r3, #18
24012bde:	431a      	orrs	r2, r3
24012be0:	68bb      	ldr	r3, [r7, #8]
24012be2:	6a1b      	ldr	r3, [r3, #32]
24012be4:	431a      	orrs	r2, r3
24012be6:	68bb      	ldr	r3, [r7, #8]
24012be8:	68db      	ldr	r3, [r3, #12]
24012bea:	431a      	orrs	r2, r3
24012bec:	68bb      	ldr	r3, [r7, #8]
24012bee:	69db      	ldr	r3, [r3, #28]
24012bf0:	431a      	orrs	r2, r3
24012bf2:	68bb      	ldr	r3, [r7, #8]
24012bf4:	699b      	ldr	r3, [r3, #24]
24012bf6:	431a      	orrs	r2, r3
24012bf8:	68bb      	ldr	r3, [r7, #8]
24012bfa:	681b      	ldr	r3, [r3, #0]
24012bfc:	ea42 0103 	orr.w	r1, r2, r3
24012c00:	68fb      	ldr	r3, [r7, #12]
24012c02:	681b      	ldr	r3, [r3, #0]
24012c04:	687a      	ldr	r2, [r7, #4]
24012c06:	430a      	orrs	r2, r1
24012c08:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24012c0a:	687b      	ldr	r3, [r7, #4]
24012c0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012c10:	f000 80d6 	beq.w	24012dc0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24012c14:	68fb      	ldr	r3, [r7, #12]
24012c16:	681b      	ldr	r3, [r3, #0]
24012c18:	68ba      	ldr	r2, [r7, #8]
24012c1a:	6852      	ldr	r2, [r2, #4]
24012c1c:	619a      	str	r2, [r3, #24]
}
24012c1e:	e0cf      	b.n	24012dc0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012c20:	68bb      	ldr	r3, [r7, #8]
24012c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012c24:	68bb      	ldr	r3, [r7, #8]
24012c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012c28:	431a      	orrs	r2, r3
24012c2a:	68bb      	ldr	r3, [r7, #8]
24012c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012c2e:	431a      	orrs	r2, r3
24012c30:	68bb      	ldr	r3, [r7, #8]
24012c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012c34:	431a      	orrs	r2, r3
24012c36:	68bb      	ldr	r3, [r7, #8]
24012c38:	695b      	ldr	r3, [r3, #20]
24012c3a:	049b      	lsls	r3, r3, #18
24012c3c:	431a      	orrs	r2, r3
24012c3e:	68bb      	ldr	r3, [r7, #8]
24012c40:	6a1b      	ldr	r3, [r3, #32]
24012c42:	431a      	orrs	r2, r3
24012c44:	68bb      	ldr	r3, [r7, #8]
24012c46:	69db      	ldr	r3, [r3, #28]
24012c48:	431a      	orrs	r2, r3
24012c4a:	68bb      	ldr	r3, [r7, #8]
24012c4c:	699b      	ldr	r3, [r3, #24]
24012c4e:	431a      	orrs	r2, r3
24012c50:	68bb      	ldr	r3, [r7, #8]
24012c52:	681b      	ldr	r3, [r3, #0]
24012c54:	ea42 0103 	orr.w	r1, r2, r3
24012c58:	68fb      	ldr	r3, [r7, #12]
24012c5a:	681b      	ldr	r3, [r3, #0]
24012c5c:	687a      	ldr	r2, [r7, #4]
24012c5e:	430a      	orrs	r2, r1
24012c60:	615a      	str	r2, [r3, #20]
}
24012c62:	e0ad      	b.n	24012dc0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24012c64:	68bb      	ldr	r3, [r7, #8]
24012c66:	6a1b      	ldr	r3, [r3, #32]
24012c68:	2b00      	cmp	r3, #0
24012c6a:	d058      	beq.n	24012d1e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24012c6c:	68fb      	ldr	r3, [r7, #12]
24012c6e:	681b      	ldr	r3, [r3, #0]
24012c70:	68ba      	ldr	r2, [r7, #8]
24012c72:	6892      	ldr	r2, [r2, #8]
24012c74:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24012c76:	68bb      	ldr	r3, [r7, #8]
24012c78:	69db      	ldr	r3, [r3, #28]
24012c7a:	2b00      	cmp	r3, #0
24012c7c:	d02d      	beq.n	24012cda <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012c7e:	68bb      	ldr	r3, [r7, #8]
24012c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012c82:	68bb      	ldr	r3, [r7, #8]
24012c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012c86:	431a      	orrs	r2, r3
24012c88:	68bb      	ldr	r3, [r7, #8]
24012c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012c8c:	431a      	orrs	r2, r3
24012c8e:	68bb      	ldr	r3, [r7, #8]
24012c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012c92:	431a      	orrs	r2, r3
24012c94:	68bb      	ldr	r3, [r7, #8]
24012c96:	695b      	ldr	r3, [r3, #20]
24012c98:	049b      	lsls	r3, r3, #18
24012c9a:	431a      	orrs	r2, r3
24012c9c:	68bb      	ldr	r3, [r7, #8]
24012c9e:	691b      	ldr	r3, [r3, #16]
24012ca0:	431a      	orrs	r2, r3
24012ca2:	68bb      	ldr	r3, [r7, #8]
24012ca4:	6a1b      	ldr	r3, [r3, #32]
24012ca6:	431a      	orrs	r2, r3
24012ca8:	68bb      	ldr	r3, [r7, #8]
24012caa:	68db      	ldr	r3, [r3, #12]
24012cac:	431a      	orrs	r2, r3
24012cae:	68bb      	ldr	r3, [r7, #8]
24012cb0:	69db      	ldr	r3, [r3, #28]
24012cb2:	431a      	orrs	r2, r3
24012cb4:	68bb      	ldr	r3, [r7, #8]
24012cb6:	699b      	ldr	r3, [r3, #24]
24012cb8:	ea42 0103 	orr.w	r1, r2, r3
24012cbc:	68fb      	ldr	r3, [r7, #12]
24012cbe:	681b      	ldr	r3, [r3, #0]
24012cc0:	687a      	ldr	r2, [r7, #4]
24012cc2:	430a      	orrs	r2, r1
24012cc4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24012cc6:	687b      	ldr	r3, [r7, #4]
24012cc8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012ccc:	d078      	beq.n	24012dc0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24012cce:	68fb      	ldr	r3, [r7, #12]
24012cd0:	681b      	ldr	r3, [r3, #0]
24012cd2:	68ba      	ldr	r2, [r7, #8]
24012cd4:	6852      	ldr	r2, [r2, #4]
24012cd6:	619a      	str	r2, [r3, #24]
}
24012cd8:	e072      	b.n	24012dc0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012cda:	68bb      	ldr	r3, [r7, #8]
24012cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012cde:	68bb      	ldr	r3, [r7, #8]
24012ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012ce2:	431a      	orrs	r2, r3
24012ce4:	68bb      	ldr	r3, [r7, #8]
24012ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012ce8:	431a      	orrs	r2, r3
24012cea:	68bb      	ldr	r3, [r7, #8]
24012cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012cee:	431a      	orrs	r2, r3
24012cf0:	68bb      	ldr	r3, [r7, #8]
24012cf2:	695b      	ldr	r3, [r3, #20]
24012cf4:	049b      	lsls	r3, r3, #18
24012cf6:	431a      	orrs	r2, r3
24012cf8:	68bb      	ldr	r3, [r7, #8]
24012cfa:	691b      	ldr	r3, [r3, #16]
24012cfc:	431a      	orrs	r2, r3
24012cfe:	68bb      	ldr	r3, [r7, #8]
24012d00:	6a1b      	ldr	r3, [r3, #32]
24012d02:	431a      	orrs	r2, r3
24012d04:	68bb      	ldr	r3, [r7, #8]
24012d06:	69db      	ldr	r3, [r3, #28]
24012d08:	431a      	orrs	r2, r3
24012d0a:	68bb      	ldr	r3, [r7, #8]
24012d0c:	699b      	ldr	r3, [r3, #24]
24012d0e:	ea42 0103 	orr.w	r1, r2, r3
24012d12:	68fb      	ldr	r3, [r7, #12]
24012d14:	681b      	ldr	r3, [r3, #0]
24012d16:	687a      	ldr	r2, [r7, #4]
24012d18:	430a      	orrs	r2, r1
24012d1a:	615a      	str	r2, [r3, #20]
}
24012d1c:	e050      	b.n	24012dc0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24012d1e:	68bb      	ldr	r3, [r7, #8]
24012d20:	69db      	ldr	r3, [r3, #28]
24012d22:	2b00      	cmp	r3, #0
24012d24:	d02a      	beq.n	24012d7c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012d26:	68bb      	ldr	r3, [r7, #8]
24012d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012d2a:	68bb      	ldr	r3, [r7, #8]
24012d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012d2e:	431a      	orrs	r2, r3
24012d30:	68bb      	ldr	r3, [r7, #8]
24012d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012d34:	431a      	orrs	r2, r3
24012d36:	68bb      	ldr	r3, [r7, #8]
24012d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012d3a:	431a      	orrs	r2, r3
24012d3c:	68bb      	ldr	r3, [r7, #8]
24012d3e:	695b      	ldr	r3, [r3, #20]
24012d40:	049b      	lsls	r3, r3, #18
24012d42:	431a      	orrs	r2, r3
24012d44:	68bb      	ldr	r3, [r7, #8]
24012d46:	6a1b      	ldr	r3, [r3, #32]
24012d48:	431a      	orrs	r2, r3
24012d4a:	68bb      	ldr	r3, [r7, #8]
24012d4c:	68db      	ldr	r3, [r3, #12]
24012d4e:	431a      	orrs	r2, r3
24012d50:	68bb      	ldr	r3, [r7, #8]
24012d52:	69db      	ldr	r3, [r3, #28]
24012d54:	431a      	orrs	r2, r3
24012d56:	68bb      	ldr	r3, [r7, #8]
24012d58:	699b      	ldr	r3, [r3, #24]
24012d5a:	ea42 0103 	orr.w	r1, r2, r3
24012d5e:	68fb      	ldr	r3, [r7, #12]
24012d60:	681b      	ldr	r3, [r3, #0]
24012d62:	687a      	ldr	r2, [r7, #4]
24012d64:	430a      	orrs	r2, r1
24012d66:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24012d68:	687b      	ldr	r3, [r7, #4]
24012d6a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24012d6e:	d027      	beq.n	24012dc0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24012d70:	68fb      	ldr	r3, [r7, #12]
24012d72:	681b      	ldr	r3, [r3, #0]
24012d74:	68ba      	ldr	r2, [r7, #8]
24012d76:	6852      	ldr	r2, [r2, #4]
24012d78:	619a      	str	r2, [r3, #24]
}
24012d7a:	e021      	b.n	24012dc0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
24012d7c:	68bb      	ldr	r3, [r7, #8]
24012d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012d80:	2b00      	cmp	r3, #0
24012d82:	d01d      	beq.n	24012dc0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24012d84:	68bb      	ldr	r3, [r7, #8]
24012d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24012d88:	68bb      	ldr	r3, [r7, #8]
24012d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24012d8c:	431a      	orrs	r2, r3
24012d8e:	68bb      	ldr	r3, [r7, #8]
24012d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012d92:	431a      	orrs	r2, r3
24012d94:	68bb      	ldr	r3, [r7, #8]
24012d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24012d98:	431a      	orrs	r2, r3
24012d9a:	68bb      	ldr	r3, [r7, #8]
24012d9c:	695b      	ldr	r3, [r3, #20]
24012d9e:	049b      	lsls	r3, r3, #18
24012da0:	431a      	orrs	r2, r3
24012da2:	68bb      	ldr	r3, [r7, #8]
24012da4:	6a1b      	ldr	r3, [r3, #32]
24012da6:	431a      	orrs	r2, r3
24012da8:	68bb      	ldr	r3, [r7, #8]
24012daa:	69db      	ldr	r3, [r3, #28]
24012dac:	431a      	orrs	r2, r3
24012dae:	68bb      	ldr	r3, [r7, #8]
24012db0:	699b      	ldr	r3, [r3, #24]
24012db2:	ea42 0103 	orr.w	r1, r2, r3
24012db6:	68fb      	ldr	r3, [r7, #12]
24012db8:	681b      	ldr	r3, [r3, #0]
24012dba:	687a      	ldr	r2, [r7, #4]
24012dbc:	430a      	orrs	r2, r1
24012dbe:	615a      	str	r2, [r3, #20]
}
24012dc0:	bf00      	nop
24012dc2:	3714      	adds	r7, #20
24012dc4:	46bd      	mov	sp, r7
24012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
24012dca:	4770      	bx	lr

24012dcc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
24012dcc:	b580      	push	{r7, lr}
24012dce:	b082      	sub	sp, #8
24012dd0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

        /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
24012dd2:	4b89      	ldr	r3, [pc, #548]	; (24012ff8 <HAL_RCC_DeInit+0x22c>)
24012dd4:	681b      	ldr	r3, [r3, #0]
24012dd6:	f003 030f 	and.w	r3, r3, #15
24012dda:	2b06      	cmp	r3, #6
24012ddc:	d80f      	bhi.n	24012dfe <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
24012dde:	4b86      	ldr	r3, [pc, #536]	; (24012ff8 <HAL_RCC_DeInit+0x22c>)
24012de0:	681b      	ldr	r3, [r3, #0]
24012de2:	f023 030f 	bic.w	r3, r3, #15
24012de6:	4a84      	ldr	r2, [pc, #528]	; (24012ff8 <HAL_RCC_DeInit+0x22c>)
24012de8:	f043 0307 	orr.w	r3, r3, #7
24012dec:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24012dee:	4b82      	ldr	r3, [pc, #520]	; (24012ff8 <HAL_RCC_DeInit+0x22c>)
24012df0:	681b      	ldr	r3, [r3, #0]
24012df2:	f003 030f 	and.w	r3, r3, #15
24012df6:	2b07      	cmp	r3, #7
24012df8:	d001      	beq.n	24012dfe <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
24012dfa:	2301      	movs	r3, #1
24012dfc:	e0f7      	b.n	24012fee <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012dfe:	f7ef f9fd 	bl	240021fc <HAL_GetTick>
24012e02:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
24012e04:	4b7d      	ldr	r3, [pc, #500]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e06:	681b      	ldr	r3, [r3, #0]
24012e08:	4a7c      	ldr	r2, [pc, #496]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e0a:	f043 0301 	orr.w	r3, r3, #1
24012e0e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24012e10:	e008      	b.n	24012e24 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24012e12:	f7ef f9f3 	bl	240021fc <HAL_GetTick>
24012e16:	4602      	mov	r2, r0
24012e18:	687b      	ldr	r3, [r7, #4]
24012e1a:	1ad3      	subs	r3, r2, r3
24012e1c:	2b02      	cmp	r3, #2
24012e1e:	d901      	bls.n	24012e24 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
24012e20:	2303      	movs	r3, #3
24012e22:	e0e4      	b.n	24012fee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24012e24:	4b75      	ldr	r3, [pc, #468]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e26:	681b      	ldr	r3, [r3, #0]
24012e28:	f003 0304 	and.w	r3, r3, #4
24012e2c:	2b00      	cmp	r3, #0
24012e2e:	d0f0      	beq.n	24012e12 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
24012e30:	4b72      	ldr	r3, [pc, #456]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e32:	685b      	ldr	r3, [r3, #4]
24012e34:	4a71      	ldr	r2, [pc, #452]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24012e3a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
24012e3c:	4b6f      	ldr	r3, [pc, #444]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e3e:	2200      	movs	r2, #0
24012e40:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
24012e42:	4b6f      	ldr	r3, [pc, #444]	; (24013000 <HAL_RCC_DeInit+0x234>)
24012e44:	4a6f      	ldr	r2, [pc, #444]	; (24013004 <HAL_RCC_DeInit+0x238>)
24012e46:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
24012e48:	4b6f      	ldr	r3, [pc, #444]	; (24013008 <HAL_RCC_DeInit+0x23c>)
24012e4a:	4a6e      	ldr	r2, [pc, #440]	; (24013004 <HAL_RCC_DeInit+0x238>)
24012e4c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
24012e4e:	4b6f      	ldr	r3, [pc, #444]	; (2401300c <HAL_RCC_DeInit+0x240>)
24012e50:	681b      	ldr	r3, [r3, #0]
24012e52:	4618      	mov	r0, r3
24012e54:	f7ef f988 	bl	24002168 <HAL_InitTick>
24012e58:	4603      	mov	r3, r0
24012e5a:	2b00      	cmp	r3, #0
24012e5c:	d001      	beq.n	24012e62 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
24012e5e:	2301      	movs	r3, #1
24012e60:	e0c5      	b.n	24012fee <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012e62:	f7ef f9cb 	bl	240021fc <HAL_GetTick>
24012e66:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24012e68:	e00a      	b.n	24012e80 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24012e6a:	f7ef f9c7 	bl	240021fc <HAL_GetTick>
24012e6e:	4602      	mov	r2, r0
24012e70:	687b      	ldr	r3, [r7, #4]
24012e72:	1ad3      	subs	r3, r2, r3
24012e74:	f241 3288 	movw	r2, #5000	; 0x1388
24012e78:	4293      	cmp	r3, r2
24012e7a:	d901      	bls.n	24012e80 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
24012e7c:	2303      	movs	r3, #3
24012e7e:	e0b6      	b.n	24012fee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24012e80:	4b5e      	ldr	r3, [pc, #376]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e82:	691b      	ldr	r3, [r3, #16]
24012e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
24012e88:	2b00      	cmp	r3, #0
24012e8a:	d1ee      	bne.n	24012e6a <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012e8c:	f7ef f9b6 	bl	240021fc <HAL_GetTick>
24012e90:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON  \
24012e92:	4b5a      	ldr	r3, [pc, #360]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e94:	681a      	ldr	r2, [r3, #0]
24012e96:	4959      	ldr	r1, [pc, #356]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012e98:	4b5d      	ldr	r3, [pc, #372]	; (24013010 <HAL_RCC_DeInit+0x244>)
24012e9a:	4013      	ands	r3, r2
24012e9c:	600b      	str	r3, [r1, #0]
  | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
24012e9e:	e008      	b.n	24012eb2 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24012ea0:	f7ef f9ac 	bl	240021fc <HAL_GetTick>
24012ea4:	4602      	mov	r2, r0
24012ea6:	687b      	ldr	r3, [r7, #4]
24012ea8:	1ad3      	subs	r3, r2, r3
24012eaa:	2b64      	cmp	r3, #100	; 0x64
24012eac:	d901      	bls.n	24012eb2 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
24012eae:	2303      	movs	r3, #3
24012eb0:	e09d      	b.n	24012fee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
24012eb2:	4b52      	ldr	r3, [pc, #328]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012eb4:	681b      	ldr	r3, [r3, #0]
24012eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24012eba:	2b00      	cmp	r3, #0
24012ebc:	d1f0      	bne.n	24012ea0 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012ebe:	f7ef f99d 	bl	240021fc <HAL_GetTick>
24012ec2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
24012ec4:	4b4d      	ldr	r3, [pc, #308]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012ec6:	681b      	ldr	r3, [r3, #0]
24012ec8:	4a4c      	ldr	r2, [pc, #304]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24012ece:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24012ed0:	e008      	b.n	24012ee4 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24012ed2:	f7ef f993 	bl	240021fc <HAL_GetTick>
24012ed6:	4602      	mov	r2, r0
24012ed8:	687b      	ldr	r3, [r7, #4]
24012eda:	1ad3      	subs	r3, r2, r3
24012edc:	2b02      	cmp	r3, #2
24012ede:	d901      	bls.n	24012ee4 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
24012ee0:	2303      	movs	r3, #3
24012ee2:	e084      	b.n	24012fee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24012ee4:	4b45      	ldr	r3, [pc, #276]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012ee6:	681b      	ldr	r3, [r3, #0]
24012ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24012eec:	2b00      	cmp	r3, #0
24012eee:	d1f0      	bne.n	24012ed2 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012ef0:	f7ef f984 	bl	240021fc <HAL_GetTick>
24012ef4:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
24012ef6:	4b41      	ldr	r3, [pc, #260]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012ef8:	681b      	ldr	r3, [r3, #0]
24012efa:	4a40      	ldr	r2, [pc, #256]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012efc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24012f00:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24012f02:	e008      	b.n	24012f16 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24012f04:	f7ef f97a 	bl	240021fc <HAL_GetTick>
24012f08:	4602      	mov	r2, r0
24012f0a:	687b      	ldr	r3, [r7, #4]
24012f0c:	1ad3      	subs	r3, r2, r3
24012f0e:	2b02      	cmp	r3, #2
24012f10:	d901      	bls.n	24012f16 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
24012f12:	2303      	movs	r3, #3
24012f14:	e06b      	b.n	24012fee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24012f16:	4b39      	ldr	r3, [pc, #228]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f18:	681b      	ldr	r3, [r3, #0]
24012f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24012f1e:	2b00      	cmp	r3, #0
24012f20:	d1f0      	bne.n	24012f04 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24012f22:	f7ef f96b 	bl	240021fc <HAL_GetTick>
24012f26:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
24012f28:	4b34      	ldr	r3, [pc, #208]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f2a:	681b      	ldr	r3, [r3, #0]
24012f2c:	4a33      	ldr	r2, [pc, #204]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24012f32:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24012f34:	e008      	b.n	24012f48 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24012f36:	f7ef f961 	bl	240021fc <HAL_GetTick>
24012f3a:	4602      	mov	r2, r0
24012f3c:	687b      	ldr	r3, [r7, #4]
24012f3e:	1ad3      	subs	r3, r2, r3
24012f40:	2b02      	cmp	r3, #2
24012f42:	d901      	bls.n	24012f48 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
24012f44:	2303      	movs	r3, #3
24012f46:	e052      	b.n	24012fee <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24012f48:	4b2c      	ldr	r3, [pc, #176]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f4a:	681b      	ldr	r3, [r3, #0]
24012f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24012f50:	2b00      	cmp	r3, #0
24012f52:	d1f0      	bne.n	24012f36 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
24012f54:	4b29      	ldr	r3, [pc, #164]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f56:	2200      	movs	r2, #0
24012f58:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
24012f5a:	4b28      	ldr	r3, [pc, #160]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f5c:	2200      	movs	r2, #0
24012f5e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
24012f60:	4b26      	ldr	r3, [pc, #152]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f62:	2200      	movs	r2, #0
24012f64:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
24012f66:	4b25      	ldr	r3, [pc, #148]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f68:	4a2a      	ldr	r2, [pc, #168]	; (24013014 <HAL_RCC_DeInit+0x248>)
24012f6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
24012f6c:	4b23      	ldr	r3, [pc, #140]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f6e:	4a2a      	ldr	r2, [pc, #168]	; (24013018 <HAL_RCC_DeInit+0x24c>)
24012f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR,0x01010280U);
24012f72:	4b22      	ldr	r3, [pc, #136]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f74:	4a29      	ldr	r2, [pc, #164]	; (2401301c <HAL_RCC_DeInit+0x250>)
24012f76:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
24012f78:	4b20      	ldr	r3, [pc, #128]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f7a:	2200      	movs	r2, #0
24012f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR,0x01010280U);
24012f7e:	4b1f      	ldr	r3, [pc, #124]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f80:	4a26      	ldr	r2, [pc, #152]	; (2401301c <HAL_RCC_DeInit+0x250>)
24012f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
24012f84:	4b1d      	ldr	r3, [pc, #116]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f86:	2200      	movs	r2, #0
24012f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR,0x01010280U);
24012f8a:	4b1c      	ldr	r3, [pc, #112]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f8c:	4a23      	ldr	r2, [pc, #140]	; (2401301c <HAL_RCC_DeInit+0x250>)
24012f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
24012f90:	4b1a      	ldr	r3, [pc, #104]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f92:	2200      	movs	r2, #0
24012f94:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
24012f96:	4b19      	ldr	r3, [pc, #100]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f98:	681b      	ldr	r3, [r3, #0]
24012f9a:	4a18      	ldr	r2, [pc, #96]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24012fa0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
24012fa2:	4b16      	ldr	r3, [pc, #88]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012fa4:	2200      	movs	r2, #0
24012fa6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR,0xFFFFFFFFU);
24012fa8:	4b14      	ldr	r3, [pc, #80]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012faa:	f04f 32ff 	mov.w	r2, #4294967295
24012fae:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
24012fb0:	4b12      	ldr	r3, [pc, #72]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012fb2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
24012fb6:	4a11      	ldr	r2, [pc, #68]	; (24012ffc <HAL_RCC_DeInit+0x230>)
24012fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24012fbc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

      /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
24012fc0:	4b0d      	ldr	r3, [pc, #52]	; (24012ff8 <HAL_RCC_DeInit+0x22c>)
24012fc2:	681b      	ldr	r3, [r3, #0]
24012fc4:	f003 0308 	and.w	r3, r3, #8
24012fc8:	2b00      	cmp	r3, #0
24012fca:	d00f      	beq.n	24012fec <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
24012fcc:	4b0a      	ldr	r3, [pc, #40]	; (24012ff8 <HAL_RCC_DeInit+0x22c>)
24012fce:	681b      	ldr	r3, [r3, #0]
24012fd0:	f023 030f 	bic.w	r3, r3, #15
24012fd4:	4a08      	ldr	r2, [pc, #32]	; (24012ff8 <HAL_RCC_DeInit+0x22c>)
24012fd6:	f043 0307 	orr.w	r3, r3, #7
24012fda:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24012fdc:	4b06      	ldr	r3, [pc, #24]	; (24012ff8 <HAL_RCC_DeInit+0x22c>)
24012fde:	681b      	ldr	r3, [r3, #0]
24012fe0:	f003 030f 	and.w	r3, r3, #15
24012fe4:	2b07      	cmp	r3, #7
24012fe6:	d001      	beq.n	24012fec <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
24012fe8:	2301      	movs	r3, #1
24012fea:	e000      	b.n	24012fee <HAL_RCC_DeInit+0x222>
    }

}

  return HAL_OK;
24012fec:	2300      	movs	r3, #0
}
24012fee:	4618      	mov	r0, r3
24012ff0:	3708      	adds	r7, #8
24012ff2:	46bd      	mov	sp, r7
24012ff4:	bd80      	pop	{r7, pc}
24012ff6:	bf00      	nop
24012ff8:	52002000 	.word	0x52002000
24012ffc:	58024400 	.word	0x58024400
24013000:	240004b0 	.word	0x240004b0
24013004:	03d09000 	.word	0x03d09000
24013008:	240004b4 	.word	0x240004b4
2401300c:	240004b8 	.word	0x240004b8
24013010:	fff6ed45 	.word	0xfff6ed45
24013014:	02020200 	.word	0x02020200
24013018:	01ff0000 	.word	0x01ff0000
2401301c:	01010280 	.word	0x01010280

24013020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24013020:	b580      	push	{r7, lr}
24013022:	b08c      	sub	sp, #48	; 0x30
24013024:	af00      	add	r7, sp, #0
24013026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
24013028:	687b      	ldr	r3, [r7, #4]
2401302a:	2b00      	cmp	r3, #0
2401302c:	d102      	bne.n	24013034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
2401302e:	2301      	movs	r3, #1
24013030:	f000 bc1d 	b.w	2401386e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24013034:	687b      	ldr	r3, [r7, #4]
24013036:	681b      	ldr	r3, [r3, #0]
24013038:	f003 0301 	and.w	r3, r3, #1
2401303c:	2b00      	cmp	r3, #0
2401303e:	f000 8087 	beq.w	24013150 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24013042:	4b99      	ldr	r3, [pc, #612]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013044:	691b      	ldr	r3, [r3, #16]
24013046:	f003 0338 	and.w	r3, r3, #56	; 0x38
2401304a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2401304c:	4b96      	ldr	r3, [pc, #600]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013050:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24013052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24013054:	2b10      	cmp	r3, #16
24013056:	d007      	beq.n	24013068 <HAL_RCC_OscConfig+0x48>
24013058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2401305a:	2b18      	cmp	r3, #24
2401305c:	d110      	bne.n	24013080 <HAL_RCC_OscConfig+0x60>
2401305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24013060:	f003 0303 	and.w	r3, r3, #3
24013064:	2b02      	cmp	r3, #2
24013066:	d10b      	bne.n	24013080 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24013068:	4b8f      	ldr	r3, [pc, #572]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401306a:	681b      	ldr	r3, [r3, #0]
2401306c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24013070:	2b00      	cmp	r3, #0
24013072:	d06c      	beq.n	2401314e <HAL_RCC_OscConfig+0x12e>
24013074:	687b      	ldr	r3, [r7, #4]
24013076:	685b      	ldr	r3, [r3, #4]
24013078:	2b00      	cmp	r3, #0
2401307a:	d168      	bne.n	2401314e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
2401307c:	2301      	movs	r3, #1
2401307e:	e3f6      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24013080:	687b      	ldr	r3, [r7, #4]
24013082:	685b      	ldr	r3, [r3, #4]
24013084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24013088:	d106      	bne.n	24013098 <HAL_RCC_OscConfig+0x78>
2401308a:	4b87      	ldr	r3, [pc, #540]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401308c:	681b      	ldr	r3, [r3, #0]
2401308e:	4a86      	ldr	r2, [pc, #536]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24013094:	6013      	str	r3, [r2, #0]
24013096:	e02e      	b.n	240130f6 <HAL_RCC_OscConfig+0xd6>
24013098:	687b      	ldr	r3, [r7, #4]
2401309a:	685b      	ldr	r3, [r3, #4]
2401309c:	2b00      	cmp	r3, #0
2401309e:	d10c      	bne.n	240130ba <HAL_RCC_OscConfig+0x9a>
240130a0:	4b81      	ldr	r3, [pc, #516]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130a2:	681b      	ldr	r3, [r3, #0]
240130a4:	4a80      	ldr	r2, [pc, #512]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240130aa:	6013      	str	r3, [r2, #0]
240130ac:	4b7e      	ldr	r3, [pc, #504]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130ae:	681b      	ldr	r3, [r3, #0]
240130b0:	4a7d      	ldr	r2, [pc, #500]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
240130b6:	6013      	str	r3, [r2, #0]
240130b8:	e01d      	b.n	240130f6 <HAL_RCC_OscConfig+0xd6>
240130ba:	687b      	ldr	r3, [r7, #4]
240130bc:	685b      	ldr	r3, [r3, #4]
240130be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240130c2:	d10c      	bne.n	240130de <HAL_RCC_OscConfig+0xbe>
240130c4:	4b78      	ldr	r3, [pc, #480]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130c6:	681b      	ldr	r3, [r3, #0]
240130c8:	4a77      	ldr	r2, [pc, #476]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240130ce:	6013      	str	r3, [r2, #0]
240130d0:	4b75      	ldr	r3, [pc, #468]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130d2:	681b      	ldr	r3, [r3, #0]
240130d4:	4a74      	ldr	r2, [pc, #464]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240130da:	6013      	str	r3, [r2, #0]
240130dc:	e00b      	b.n	240130f6 <HAL_RCC_OscConfig+0xd6>
240130de:	4b72      	ldr	r3, [pc, #456]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130e0:	681b      	ldr	r3, [r3, #0]
240130e2:	4a71      	ldr	r2, [pc, #452]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240130e8:	6013      	str	r3, [r2, #0]
240130ea:	4b6f      	ldr	r3, [pc, #444]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130ec:	681b      	ldr	r3, [r3, #0]
240130ee:	4a6e      	ldr	r2, [pc, #440]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240130f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
240130f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
240130f6:	687b      	ldr	r3, [r7, #4]
240130f8:	685b      	ldr	r3, [r3, #4]
240130fa:	2b00      	cmp	r3, #0
240130fc:	d013      	beq.n	24013126 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240130fe:	f7ef f87d 	bl	240021fc <HAL_GetTick>
24013102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24013104:	e008      	b.n	24013118 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
24013106:	f7ef f879 	bl	240021fc <HAL_GetTick>
2401310a:	4602      	mov	r2, r0
2401310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401310e:	1ad3      	subs	r3, r2, r3
24013110:	2b64      	cmp	r3, #100	; 0x64
24013112:	d901      	bls.n	24013118 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
24013114:	2303      	movs	r3, #3
24013116:	e3aa      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24013118:	4b63      	ldr	r3, [pc, #396]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401311a:	681b      	ldr	r3, [r3, #0]
2401311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24013120:	2b00      	cmp	r3, #0
24013122:	d0f0      	beq.n	24013106 <HAL_RCC_OscConfig+0xe6>
24013124:	e014      	b.n	24013150 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013126:	f7ef f869 	bl	240021fc <HAL_GetTick>
2401312a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2401312c:	e008      	b.n	24013140 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2401312e:	f7ef f865 	bl	240021fc <HAL_GetTick>
24013132:	4602      	mov	r2, r0
24013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013136:	1ad3      	subs	r3, r2, r3
24013138:	2b64      	cmp	r3, #100	; 0x64
2401313a:	d901      	bls.n	24013140 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
2401313c:	2303      	movs	r3, #3
2401313e:	e396      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24013140:	4b59      	ldr	r3, [pc, #356]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013142:	681b      	ldr	r3, [r3, #0]
24013144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24013148:	2b00      	cmp	r3, #0
2401314a:	d1f0      	bne.n	2401312e <HAL_RCC_OscConfig+0x10e>
2401314c:	e000      	b.n	24013150 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2401314e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24013150:	687b      	ldr	r3, [r7, #4]
24013152:	681b      	ldr	r3, [r3, #0]
24013154:	f003 0302 	and.w	r3, r3, #2
24013158:	2b00      	cmp	r3, #0
2401315a:	f000 80cb 	beq.w	240132f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2401315e:	4b52      	ldr	r3, [pc, #328]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013160:	691b      	ldr	r3, [r3, #16]
24013162:	f003 0338 	and.w	r3, r3, #56	; 0x38
24013166:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24013168:	4b4f      	ldr	r3, [pc, #316]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401316c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2401316e:	6a3b      	ldr	r3, [r7, #32]
24013170:	2b00      	cmp	r3, #0
24013172:	d007      	beq.n	24013184 <HAL_RCC_OscConfig+0x164>
24013174:	6a3b      	ldr	r3, [r7, #32]
24013176:	2b18      	cmp	r3, #24
24013178:	d156      	bne.n	24013228 <HAL_RCC_OscConfig+0x208>
2401317a:	69fb      	ldr	r3, [r7, #28]
2401317c:	f003 0303 	and.w	r3, r3, #3
24013180:	2b00      	cmp	r3, #0
24013182:	d151      	bne.n	24013228 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24013184:	4b48      	ldr	r3, [pc, #288]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013186:	681b      	ldr	r3, [r3, #0]
24013188:	f003 0304 	and.w	r3, r3, #4
2401318c:	2b00      	cmp	r3, #0
2401318e:	d005      	beq.n	2401319c <HAL_RCC_OscConfig+0x17c>
24013190:	687b      	ldr	r3, [r7, #4]
24013192:	68db      	ldr	r3, [r3, #12]
24013194:	2b00      	cmp	r3, #0
24013196:	d101      	bne.n	2401319c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
24013198:	2301      	movs	r3, #1
2401319a:	e368      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2401319c:	4b42      	ldr	r3, [pc, #264]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401319e:	681b      	ldr	r3, [r3, #0]
240131a0:	f023 0219 	bic.w	r2, r3, #25
240131a4:	687b      	ldr	r3, [r7, #4]
240131a6:	68db      	ldr	r3, [r3, #12]
240131a8:	493f      	ldr	r1, [pc, #252]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240131aa:	4313      	orrs	r3, r2
240131ac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
240131ae:	f7ef f825 	bl	240021fc <HAL_GetTick>
240131b2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240131b4:	e008      	b.n	240131c8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
240131b6:	f7ef f821 	bl	240021fc <HAL_GetTick>
240131ba:	4602      	mov	r2, r0
240131bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240131be:	1ad3      	subs	r3, r2, r3
240131c0:	2b02      	cmp	r3, #2
240131c2:	d901      	bls.n	240131c8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
240131c4:	2303      	movs	r3, #3
240131c6:	e352      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240131c8:	4b37      	ldr	r3, [pc, #220]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240131ca:	681b      	ldr	r3, [r3, #0]
240131cc:	f003 0304 	and.w	r3, r3, #4
240131d0:	2b00      	cmp	r3, #0
240131d2:	d0f0      	beq.n	240131b6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240131d4:	f7ef f8ac 	bl	24002330 <HAL_GetREVID>
240131d8:	4603      	mov	r3, r0
240131da:	f241 0203 	movw	r2, #4099	; 0x1003
240131de:	4293      	cmp	r3, r2
240131e0:	d817      	bhi.n	24013212 <HAL_RCC_OscConfig+0x1f2>
240131e2:	687b      	ldr	r3, [r7, #4]
240131e4:	691b      	ldr	r3, [r3, #16]
240131e6:	2b40      	cmp	r3, #64	; 0x40
240131e8:	d108      	bne.n	240131fc <HAL_RCC_OscConfig+0x1dc>
240131ea:	4b2f      	ldr	r3, [pc, #188]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240131ec:	685b      	ldr	r3, [r3, #4]
240131ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240131f2:	4a2d      	ldr	r2, [pc, #180]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240131f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240131f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240131fa:	e07b      	b.n	240132f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240131fc:	4b2a      	ldr	r3, [pc, #168]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240131fe:	685b      	ldr	r3, [r3, #4]
24013200:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24013204:	687b      	ldr	r3, [r7, #4]
24013206:	691b      	ldr	r3, [r3, #16]
24013208:	031b      	lsls	r3, r3, #12
2401320a:	4927      	ldr	r1, [pc, #156]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401320c:	4313      	orrs	r3, r2
2401320e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24013210:	e070      	b.n	240132f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24013212:	4b25      	ldr	r3, [pc, #148]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013214:	685b      	ldr	r3, [r3, #4]
24013216:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2401321a:	687b      	ldr	r3, [r7, #4]
2401321c:	691b      	ldr	r3, [r3, #16]
2401321e:	061b      	lsls	r3, r3, #24
24013220:	4921      	ldr	r1, [pc, #132]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013222:	4313      	orrs	r3, r2
24013224:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24013226:	e065      	b.n	240132f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
24013228:	687b      	ldr	r3, [r7, #4]
2401322a:	68db      	ldr	r3, [r3, #12]
2401322c:	2b00      	cmp	r3, #0
2401322e:	d048      	beq.n	240132c2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24013230:	4b1d      	ldr	r3, [pc, #116]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013232:	681b      	ldr	r3, [r3, #0]
24013234:	f023 0219 	bic.w	r2, r3, #25
24013238:	687b      	ldr	r3, [r7, #4]
2401323a:	68db      	ldr	r3, [r3, #12]
2401323c:	491a      	ldr	r1, [pc, #104]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401323e:	4313      	orrs	r3, r2
24013240:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013242:	f7ee ffdb 	bl	240021fc <HAL_GetTick>
24013246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24013248:	e008      	b.n	2401325c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2401324a:	f7ee ffd7 	bl	240021fc <HAL_GetTick>
2401324e:	4602      	mov	r2, r0
24013250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013252:	1ad3      	subs	r3, r2, r3
24013254:	2b02      	cmp	r3, #2
24013256:	d901      	bls.n	2401325c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
24013258:	2303      	movs	r3, #3
2401325a:	e308      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2401325c:	4b12      	ldr	r3, [pc, #72]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
2401325e:	681b      	ldr	r3, [r3, #0]
24013260:	f003 0304 	and.w	r3, r3, #4
24013264:	2b00      	cmp	r3, #0
24013266:	d0f0      	beq.n	2401324a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24013268:	f7ef f862 	bl	24002330 <HAL_GetREVID>
2401326c:	4603      	mov	r3, r0
2401326e:	f241 0203 	movw	r2, #4099	; 0x1003
24013272:	4293      	cmp	r3, r2
24013274:	d81a      	bhi.n	240132ac <HAL_RCC_OscConfig+0x28c>
24013276:	687b      	ldr	r3, [r7, #4]
24013278:	691b      	ldr	r3, [r3, #16]
2401327a:	2b40      	cmp	r3, #64	; 0x40
2401327c:	d108      	bne.n	24013290 <HAL_RCC_OscConfig+0x270>
2401327e:	4b0a      	ldr	r3, [pc, #40]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013280:	685b      	ldr	r3, [r3, #4]
24013282:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24013286:	4a08      	ldr	r2, [pc, #32]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2401328c:	6053      	str	r3, [r2, #4]
2401328e:	e031      	b.n	240132f4 <HAL_RCC_OscConfig+0x2d4>
24013290:	4b05      	ldr	r3, [pc, #20]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
24013292:	685b      	ldr	r3, [r3, #4]
24013294:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24013298:	687b      	ldr	r3, [r7, #4]
2401329a:	691b      	ldr	r3, [r3, #16]
2401329c:	031b      	lsls	r3, r3, #12
2401329e:	4902      	ldr	r1, [pc, #8]	; (240132a8 <HAL_RCC_OscConfig+0x288>)
240132a0:	4313      	orrs	r3, r2
240132a2:	604b      	str	r3, [r1, #4]
240132a4:	e026      	b.n	240132f4 <HAL_RCC_OscConfig+0x2d4>
240132a6:	bf00      	nop
240132a8:	58024400 	.word	0x58024400
240132ac:	4b9a      	ldr	r3, [pc, #616]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240132ae:	685b      	ldr	r3, [r3, #4]
240132b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
240132b4:	687b      	ldr	r3, [r7, #4]
240132b6:	691b      	ldr	r3, [r3, #16]
240132b8:	061b      	lsls	r3, r3, #24
240132ba:	4997      	ldr	r1, [pc, #604]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240132bc:	4313      	orrs	r3, r2
240132be:	604b      	str	r3, [r1, #4]
240132c0:	e018      	b.n	240132f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
240132c2:	4b95      	ldr	r3, [pc, #596]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240132c4:	681b      	ldr	r3, [r3, #0]
240132c6:	4a94      	ldr	r2, [pc, #592]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240132c8:	f023 0301 	bic.w	r3, r3, #1
240132cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240132ce:	f7ee ff95 	bl	240021fc <HAL_GetTick>
240132d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240132d4:	e008      	b.n	240132e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
240132d6:	f7ee ff91 	bl	240021fc <HAL_GetTick>
240132da:	4602      	mov	r2, r0
240132dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240132de:	1ad3      	subs	r3, r2, r3
240132e0:	2b02      	cmp	r3, #2
240132e2:	d901      	bls.n	240132e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
240132e4:	2303      	movs	r3, #3
240132e6:	e2c2      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240132e8:	4b8b      	ldr	r3, [pc, #556]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240132ea:	681b      	ldr	r3, [r3, #0]
240132ec:	f003 0304 	and.w	r3, r3, #4
240132f0:	2b00      	cmp	r3, #0
240132f2:	d1f0      	bne.n	240132d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240132f4:	687b      	ldr	r3, [r7, #4]
240132f6:	681b      	ldr	r3, [r3, #0]
240132f8:	f003 0310 	and.w	r3, r3, #16
240132fc:	2b00      	cmp	r3, #0
240132fe:	f000 80a9 	beq.w	24013454 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24013302:	4b85      	ldr	r3, [pc, #532]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013304:	691b      	ldr	r3, [r3, #16]
24013306:	f003 0338 	and.w	r3, r3, #56	; 0x38
2401330a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2401330c:	4b82      	ldr	r3, [pc, #520]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013310:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24013312:	69bb      	ldr	r3, [r7, #24]
24013314:	2b08      	cmp	r3, #8
24013316:	d007      	beq.n	24013328 <HAL_RCC_OscConfig+0x308>
24013318:	69bb      	ldr	r3, [r7, #24]
2401331a:	2b18      	cmp	r3, #24
2401331c:	d13a      	bne.n	24013394 <HAL_RCC_OscConfig+0x374>
2401331e:	697b      	ldr	r3, [r7, #20]
24013320:	f003 0303 	and.w	r3, r3, #3
24013324:	2b01      	cmp	r3, #1
24013326:	d135      	bne.n	24013394 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24013328:	4b7b      	ldr	r3, [pc, #492]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401332a:	681b      	ldr	r3, [r3, #0]
2401332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013330:	2b00      	cmp	r3, #0
24013332:	d005      	beq.n	24013340 <HAL_RCC_OscConfig+0x320>
24013334:	687b      	ldr	r3, [r7, #4]
24013336:	69db      	ldr	r3, [r3, #28]
24013338:	2b80      	cmp	r3, #128	; 0x80
2401333a:	d001      	beq.n	24013340 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
2401333c:	2301      	movs	r3, #1
2401333e:	e296      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24013340:	f7ee fff6 	bl	24002330 <HAL_GetREVID>
24013344:	4603      	mov	r3, r0
24013346:	f241 0203 	movw	r2, #4099	; 0x1003
2401334a:	4293      	cmp	r3, r2
2401334c:	d817      	bhi.n	2401337e <HAL_RCC_OscConfig+0x35e>
2401334e:	687b      	ldr	r3, [r7, #4]
24013350:	6a1b      	ldr	r3, [r3, #32]
24013352:	2b20      	cmp	r3, #32
24013354:	d108      	bne.n	24013368 <HAL_RCC_OscConfig+0x348>
24013356:	4b70      	ldr	r3, [pc, #448]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013358:	685b      	ldr	r3, [r3, #4]
2401335a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2401335e:	4a6e      	ldr	r2, [pc, #440]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24013364:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24013366:	e075      	b.n	24013454 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24013368:	4b6b      	ldr	r3, [pc, #428]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401336a:	685b      	ldr	r3, [r3, #4]
2401336c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
24013370:	687b      	ldr	r3, [r7, #4]
24013372:	6a1b      	ldr	r3, [r3, #32]
24013374:	069b      	lsls	r3, r3, #26
24013376:	4968      	ldr	r1, [pc, #416]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013378:	4313      	orrs	r3, r2
2401337a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2401337c:	e06a      	b.n	24013454 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2401337e:	4b66      	ldr	r3, [pc, #408]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013380:	68db      	ldr	r3, [r3, #12]
24013382:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24013386:	687b      	ldr	r3, [r7, #4]
24013388:	6a1b      	ldr	r3, [r3, #32]
2401338a:	061b      	lsls	r3, r3, #24
2401338c:	4962      	ldr	r1, [pc, #392]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401338e:	4313      	orrs	r3, r2
24013390:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24013392:	e05f      	b.n	24013454 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
24013394:	687b      	ldr	r3, [r7, #4]
24013396:	69db      	ldr	r3, [r3, #28]
24013398:	2b00      	cmp	r3, #0
2401339a:	d042      	beq.n	24013422 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
2401339c:	4b5e      	ldr	r3, [pc, #376]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401339e:	681b      	ldr	r3, [r3, #0]
240133a0:	4a5d      	ldr	r2, [pc, #372]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240133a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240133a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240133a8:	f7ee ff28 	bl	240021fc <HAL_GetTick>
240133ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240133ae:	e008      	b.n	240133c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
240133b0:	f7ee ff24 	bl	240021fc <HAL_GetTick>
240133b4:	4602      	mov	r2, r0
240133b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240133b8:	1ad3      	subs	r3, r2, r3
240133ba:	2b02      	cmp	r3, #2
240133bc:	d901      	bls.n	240133c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
240133be:	2303      	movs	r3, #3
240133c0:	e255      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240133c2:	4b55      	ldr	r3, [pc, #340]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240133c4:	681b      	ldr	r3, [r3, #0]
240133c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
240133ca:	2b00      	cmp	r3, #0
240133cc:	d0f0      	beq.n	240133b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240133ce:	f7ee ffaf 	bl	24002330 <HAL_GetREVID>
240133d2:	4603      	mov	r3, r0
240133d4:	f241 0203 	movw	r2, #4099	; 0x1003
240133d8:	4293      	cmp	r3, r2
240133da:	d817      	bhi.n	2401340c <HAL_RCC_OscConfig+0x3ec>
240133dc:	687b      	ldr	r3, [r7, #4]
240133de:	6a1b      	ldr	r3, [r3, #32]
240133e0:	2b20      	cmp	r3, #32
240133e2:	d108      	bne.n	240133f6 <HAL_RCC_OscConfig+0x3d6>
240133e4:	4b4c      	ldr	r3, [pc, #304]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240133e6:	685b      	ldr	r3, [r3, #4]
240133e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240133ec:	4a4a      	ldr	r2, [pc, #296]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240133ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240133f2:	6053      	str	r3, [r2, #4]
240133f4:	e02e      	b.n	24013454 <HAL_RCC_OscConfig+0x434>
240133f6:	4b48      	ldr	r3, [pc, #288]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240133f8:	685b      	ldr	r3, [r3, #4]
240133fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
240133fe:	687b      	ldr	r3, [r7, #4]
24013400:	6a1b      	ldr	r3, [r3, #32]
24013402:	069b      	lsls	r3, r3, #26
24013404:	4944      	ldr	r1, [pc, #272]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013406:	4313      	orrs	r3, r2
24013408:	604b      	str	r3, [r1, #4]
2401340a:	e023      	b.n	24013454 <HAL_RCC_OscConfig+0x434>
2401340c:	4b42      	ldr	r3, [pc, #264]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401340e:	68db      	ldr	r3, [r3, #12]
24013410:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24013414:	687b      	ldr	r3, [r7, #4]
24013416:	6a1b      	ldr	r3, [r3, #32]
24013418:	061b      	lsls	r3, r3, #24
2401341a:	493f      	ldr	r1, [pc, #252]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401341c:	4313      	orrs	r3, r2
2401341e:	60cb      	str	r3, [r1, #12]
24013420:	e018      	b.n	24013454 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
24013422:	4b3d      	ldr	r3, [pc, #244]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013424:	681b      	ldr	r3, [r3, #0]
24013426:	4a3c      	ldr	r2, [pc, #240]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2401342c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401342e:	f7ee fee5 	bl	240021fc <HAL_GetTick>
24013432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24013434:	e008      	b.n	24013448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
24013436:	f7ee fee1 	bl	240021fc <HAL_GetTick>
2401343a:	4602      	mov	r2, r0
2401343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401343e:	1ad3      	subs	r3, r2, r3
24013440:	2b02      	cmp	r3, #2
24013442:	d901      	bls.n	24013448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
24013444:	2303      	movs	r3, #3
24013446:	e212      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24013448:	4b33      	ldr	r3, [pc, #204]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401344a:	681b      	ldr	r3, [r3, #0]
2401344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013450:	2b00      	cmp	r3, #0
24013452:	d1f0      	bne.n	24013436 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24013454:	687b      	ldr	r3, [r7, #4]
24013456:	681b      	ldr	r3, [r3, #0]
24013458:	f003 0308 	and.w	r3, r3, #8
2401345c:	2b00      	cmp	r3, #0
2401345e:	d036      	beq.n	240134ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
24013460:	687b      	ldr	r3, [r7, #4]
24013462:	695b      	ldr	r3, [r3, #20]
24013464:	2b00      	cmp	r3, #0
24013466:	d019      	beq.n	2401349c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
24013468:	4b2b      	ldr	r3, [pc, #172]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2401346c:	4a2a      	ldr	r2, [pc, #168]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401346e:	f043 0301 	orr.w	r3, r3, #1
24013472:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013474:	f7ee fec2 	bl	240021fc <HAL_GetTick>
24013478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2401347a:	e008      	b.n	2401348e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2401347c:	f7ee febe 	bl	240021fc <HAL_GetTick>
24013480:	4602      	mov	r2, r0
24013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013484:	1ad3      	subs	r3, r2, r3
24013486:	2b02      	cmp	r3, #2
24013488:	d901      	bls.n	2401348e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
2401348a:	2303      	movs	r3, #3
2401348c:	e1ef      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2401348e:	4b22      	ldr	r3, [pc, #136]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
24013490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24013492:	f003 0302 	and.w	r3, r3, #2
24013496:	2b00      	cmp	r3, #0
24013498:	d0f0      	beq.n	2401347c <HAL_RCC_OscConfig+0x45c>
2401349a:	e018      	b.n	240134ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2401349c:	4b1e      	ldr	r3, [pc, #120]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401349e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240134a0:	4a1d      	ldr	r2, [pc, #116]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240134a2:	f023 0301 	bic.w	r3, r3, #1
240134a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240134a8:	f7ee fea8 	bl	240021fc <HAL_GetTick>
240134ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
240134ae:	e008      	b.n	240134c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
240134b0:	f7ee fea4 	bl	240021fc <HAL_GetTick>
240134b4:	4602      	mov	r2, r0
240134b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240134b8:	1ad3      	subs	r3, r2, r3
240134ba:	2b02      	cmp	r3, #2
240134bc:	d901      	bls.n	240134c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
240134be:	2303      	movs	r3, #3
240134c0:	e1d5      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
240134c2:	4b15      	ldr	r3, [pc, #84]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240134c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240134c6:	f003 0302 	and.w	r3, r3, #2
240134ca:	2b00      	cmp	r3, #0
240134cc:	d1f0      	bne.n	240134b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
240134ce:	687b      	ldr	r3, [r7, #4]
240134d0:	681b      	ldr	r3, [r3, #0]
240134d2:	f003 0320 	and.w	r3, r3, #32
240134d6:	2b00      	cmp	r3, #0
240134d8:	d039      	beq.n	2401354e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
240134da:	687b      	ldr	r3, [r7, #4]
240134dc:	699b      	ldr	r3, [r3, #24]
240134de:	2b00      	cmp	r3, #0
240134e0:	d01c      	beq.n	2401351c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
240134e2:	4b0d      	ldr	r3, [pc, #52]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240134e4:	681b      	ldr	r3, [r3, #0]
240134e6:	4a0c      	ldr	r2, [pc, #48]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
240134e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
240134ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
240134ee:	f7ee fe85 	bl	240021fc <HAL_GetTick>
240134f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240134f4:	e008      	b.n	24013508 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
240134f6:	f7ee fe81 	bl	240021fc <HAL_GetTick>
240134fa:	4602      	mov	r2, r0
240134fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240134fe:	1ad3      	subs	r3, r2, r3
24013500:	2b02      	cmp	r3, #2
24013502:	d901      	bls.n	24013508 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
24013504:	2303      	movs	r3, #3
24013506:	e1b2      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24013508:	4b03      	ldr	r3, [pc, #12]	; (24013518 <HAL_RCC_OscConfig+0x4f8>)
2401350a:	681b      	ldr	r3, [r3, #0]
2401350c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24013510:	2b00      	cmp	r3, #0
24013512:	d0f0      	beq.n	240134f6 <HAL_RCC_OscConfig+0x4d6>
24013514:	e01b      	b.n	2401354e <HAL_RCC_OscConfig+0x52e>
24013516:	bf00      	nop
24013518:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
2401351c:	4b9b      	ldr	r3, [pc, #620]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
2401351e:	681b      	ldr	r3, [r3, #0]
24013520:	4a9a      	ldr	r2, [pc, #616]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24013526:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24013528:	f7ee fe68 	bl	240021fc <HAL_GetTick>
2401352c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2401352e:	e008      	b.n	24013542 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
24013530:	f7ee fe64 	bl	240021fc <HAL_GetTick>
24013534:	4602      	mov	r2, r0
24013536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013538:	1ad3      	subs	r3, r2, r3
2401353a:	2b02      	cmp	r3, #2
2401353c:	d901      	bls.n	24013542 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
2401353e:	2303      	movs	r3, #3
24013540:	e195      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24013542:	4b92      	ldr	r3, [pc, #584]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013544:	681b      	ldr	r3, [r3, #0]
24013546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2401354a:	2b00      	cmp	r3, #0
2401354c:	d1f0      	bne.n	24013530 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2401354e:	687b      	ldr	r3, [r7, #4]
24013550:	681b      	ldr	r3, [r3, #0]
24013552:	f003 0304 	and.w	r3, r3, #4
24013556:	2b00      	cmp	r3, #0
24013558:	f000 8081 	beq.w	2401365e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2401355c:	4b8c      	ldr	r3, [pc, #560]	; (24013790 <HAL_RCC_OscConfig+0x770>)
2401355e:	681b      	ldr	r3, [r3, #0]
24013560:	4a8b      	ldr	r2, [pc, #556]	; (24013790 <HAL_RCC_OscConfig+0x770>)
24013562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24013566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24013568:	f7ee fe48 	bl	240021fc <HAL_GetTick>
2401356c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
2401356e:	e008      	b.n	24013582 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
24013570:	f7ee fe44 	bl	240021fc <HAL_GetTick>
24013574:	4602      	mov	r2, r0
24013576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013578:	1ad3      	subs	r3, r2, r3
2401357a:	2b64      	cmp	r3, #100	; 0x64
2401357c:	d901      	bls.n	24013582 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
2401357e:	2303      	movs	r3, #3
24013580:	e175      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
24013582:	4b83      	ldr	r3, [pc, #524]	; (24013790 <HAL_RCC_OscConfig+0x770>)
24013584:	681b      	ldr	r3, [r3, #0]
24013586:	f403 7380 	and.w	r3, r3, #256	; 0x100
2401358a:	2b00      	cmp	r3, #0
2401358c:	d0f0      	beq.n	24013570 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2401358e:	687b      	ldr	r3, [r7, #4]
24013590:	689b      	ldr	r3, [r3, #8]
24013592:	2b01      	cmp	r3, #1
24013594:	d106      	bne.n	240135a4 <HAL_RCC_OscConfig+0x584>
24013596:	4b7d      	ldr	r3, [pc, #500]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401359a:	4a7c      	ldr	r2, [pc, #496]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
2401359c:	f043 0301 	orr.w	r3, r3, #1
240135a0:	6713      	str	r3, [r2, #112]	; 0x70
240135a2:	e02d      	b.n	24013600 <HAL_RCC_OscConfig+0x5e0>
240135a4:	687b      	ldr	r3, [r7, #4]
240135a6:	689b      	ldr	r3, [r3, #8]
240135a8:	2b00      	cmp	r3, #0
240135aa:	d10c      	bne.n	240135c6 <HAL_RCC_OscConfig+0x5a6>
240135ac:	4b77      	ldr	r3, [pc, #476]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240135b0:	4a76      	ldr	r2, [pc, #472]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135b2:	f023 0301 	bic.w	r3, r3, #1
240135b6:	6713      	str	r3, [r2, #112]	; 0x70
240135b8:	4b74      	ldr	r3, [pc, #464]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240135bc:	4a73      	ldr	r2, [pc, #460]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135be:	f023 0304 	bic.w	r3, r3, #4
240135c2:	6713      	str	r3, [r2, #112]	; 0x70
240135c4:	e01c      	b.n	24013600 <HAL_RCC_OscConfig+0x5e0>
240135c6:	687b      	ldr	r3, [r7, #4]
240135c8:	689b      	ldr	r3, [r3, #8]
240135ca:	2b05      	cmp	r3, #5
240135cc:	d10c      	bne.n	240135e8 <HAL_RCC_OscConfig+0x5c8>
240135ce:	4b6f      	ldr	r3, [pc, #444]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240135d2:	4a6e      	ldr	r2, [pc, #440]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135d4:	f043 0304 	orr.w	r3, r3, #4
240135d8:	6713      	str	r3, [r2, #112]	; 0x70
240135da:	4b6c      	ldr	r3, [pc, #432]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240135de:	4a6b      	ldr	r2, [pc, #428]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135e0:	f043 0301 	orr.w	r3, r3, #1
240135e4:	6713      	str	r3, [r2, #112]	; 0x70
240135e6:	e00b      	b.n	24013600 <HAL_RCC_OscConfig+0x5e0>
240135e8:	4b68      	ldr	r3, [pc, #416]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240135ec:	4a67      	ldr	r2, [pc, #412]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135ee:	f023 0301 	bic.w	r3, r3, #1
240135f2:	6713      	str	r3, [r2, #112]	; 0x70
240135f4:	4b65      	ldr	r3, [pc, #404]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240135f8:	4a64      	ldr	r2, [pc, #400]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240135fa:	f023 0304 	bic.w	r3, r3, #4
240135fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24013600:	687b      	ldr	r3, [r7, #4]
24013602:	689b      	ldr	r3, [r3, #8]
24013604:	2b00      	cmp	r3, #0
24013606:	d015      	beq.n	24013634 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013608:	f7ee fdf8 	bl	240021fc <HAL_GetTick>
2401360c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2401360e:	e00a      	b.n	24013626 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
24013610:	f7ee fdf4 	bl	240021fc <HAL_GetTick>
24013614:	4602      	mov	r2, r0
24013616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013618:	1ad3      	subs	r3, r2, r3
2401361a:	f241 3288 	movw	r2, #5000	; 0x1388
2401361e:	4293      	cmp	r3, r2
24013620:	d901      	bls.n	24013626 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
24013622:	2303      	movs	r3, #3
24013624:	e123      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24013626:	4b59      	ldr	r3, [pc, #356]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401362a:	f003 0302 	and.w	r3, r3, #2
2401362e:	2b00      	cmp	r3, #0
24013630:	d0ee      	beq.n	24013610 <HAL_RCC_OscConfig+0x5f0>
24013632:	e014      	b.n	2401365e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013634:	f7ee fde2 	bl	240021fc <HAL_GetTick>
24013638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2401363a:	e00a      	b.n	24013652 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2401363c:	f7ee fdde 	bl	240021fc <HAL_GetTick>
24013640:	4602      	mov	r2, r0
24013642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24013644:	1ad3      	subs	r3, r2, r3
24013646:	f241 3288 	movw	r2, #5000	; 0x1388
2401364a:	4293      	cmp	r3, r2
2401364c:	d901      	bls.n	24013652 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
2401364e:	2303      	movs	r3, #3
24013650:	e10d      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24013652:	4b4e      	ldr	r3, [pc, #312]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24013656:	f003 0302 	and.w	r3, r3, #2
2401365a:	2b00      	cmp	r3, #0
2401365c:	d1ee      	bne.n	2401363c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2401365e:	687b      	ldr	r3, [r7, #4]
24013660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013662:	2b00      	cmp	r3, #0
24013664:	f000 8102 	beq.w	2401386c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24013668:	4b48      	ldr	r3, [pc, #288]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
2401366a:	691b      	ldr	r3, [r3, #16]
2401366c:	f003 0338 	and.w	r3, r3, #56	; 0x38
24013670:	2b18      	cmp	r3, #24
24013672:	f000 80bd 	beq.w	240137f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24013676:	687b      	ldr	r3, [r7, #4]
24013678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2401367a:	2b02      	cmp	r3, #2
2401367c:	f040 809e 	bne.w	240137bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24013680:	4b42      	ldr	r3, [pc, #264]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013682:	681b      	ldr	r3, [r3, #0]
24013684:	4a41      	ldr	r2, [pc, #260]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2401368a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401368c:	f7ee fdb6 	bl	240021fc <HAL_GetTick>
24013690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24013692:	e008      	b.n	240136a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
24013694:	f7ee fdb2 	bl	240021fc <HAL_GetTick>
24013698:	4602      	mov	r2, r0
2401369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2401369c:	1ad3      	subs	r3, r2, r3
2401369e:	2b02      	cmp	r3, #2
240136a0:	d901      	bls.n	240136a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
240136a2:	2303      	movs	r3, #3
240136a4:	e0e3      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240136a6:	4b39      	ldr	r3, [pc, #228]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240136a8:	681b      	ldr	r3, [r3, #0]
240136aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240136ae:	2b00      	cmp	r3, #0
240136b0:	d1f0      	bne.n	24013694 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
240136b2:	4b36      	ldr	r3, [pc, #216]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240136b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240136b6:	4b37      	ldr	r3, [pc, #220]	; (24013794 <HAL_RCC_OscConfig+0x774>)
240136b8:	4013      	ands	r3, r2
240136ba:	687a      	ldr	r2, [r7, #4]
240136bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
240136be:	687a      	ldr	r2, [r7, #4]
240136c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
240136c2:	0112      	lsls	r2, r2, #4
240136c4:	430a      	orrs	r2, r1
240136c6:	4931      	ldr	r1, [pc, #196]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240136c8:	4313      	orrs	r3, r2
240136ca:	628b      	str	r3, [r1, #40]	; 0x28
240136cc:	687b      	ldr	r3, [r7, #4]
240136ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240136d0:	3b01      	subs	r3, #1
240136d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
240136d6:	687b      	ldr	r3, [r7, #4]
240136d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240136da:	3b01      	subs	r3, #1
240136dc:	025b      	lsls	r3, r3, #9
240136de:	b29b      	uxth	r3, r3
240136e0:	431a      	orrs	r2, r3
240136e2:	687b      	ldr	r3, [r7, #4]
240136e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240136e6:	3b01      	subs	r3, #1
240136e8:	041b      	lsls	r3, r3, #16
240136ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
240136ee:	431a      	orrs	r2, r3
240136f0:	687b      	ldr	r3, [r7, #4]
240136f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240136f4:	3b01      	subs	r3, #1
240136f6:	061b      	lsls	r3, r3, #24
240136f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
240136fc:	4923      	ldr	r1, [pc, #140]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
240136fe:	4313      	orrs	r3, r2
24013700:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
24013702:	4b22      	ldr	r3, [pc, #136]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013706:	4a21      	ldr	r2, [pc, #132]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013708:	f023 0301 	bic.w	r3, r3, #1
2401370c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2401370e:	4b1f      	ldr	r3, [pc, #124]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24013712:	4b21      	ldr	r3, [pc, #132]	; (24013798 <HAL_RCC_OscConfig+0x778>)
24013714:	4013      	ands	r3, r2
24013716:	687a      	ldr	r2, [r7, #4]
24013718:	6c92      	ldr	r2, [r2, #72]	; 0x48
2401371a:	00d2      	lsls	r2, r2, #3
2401371c:	491b      	ldr	r1, [pc, #108]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
2401371e:	4313      	orrs	r3, r2
24013720:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24013722:	4b1a      	ldr	r3, [pc, #104]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013726:	f023 020c 	bic.w	r2, r3, #12
2401372a:	687b      	ldr	r3, [r7, #4]
2401372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401372e:	4917      	ldr	r1, [pc, #92]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013730:	4313      	orrs	r3, r2
24013732:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24013734:	4b15      	ldr	r3, [pc, #84]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013738:	f023 0202 	bic.w	r2, r3, #2
2401373c:	687b      	ldr	r3, [r7, #4]
2401373e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24013740:	4912      	ldr	r1, [pc, #72]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013742:	4313      	orrs	r3, r2
24013744:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24013746:	4b11      	ldr	r3, [pc, #68]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401374a:	4a10      	ldr	r2, [pc, #64]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
2401374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24013750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24013752:	4b0e      	ldr	r3, [pc, #56]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013756:	4a0d      	ldr	r2, [pc, #52]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2401375c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
2401375e:	4b0b      	ldr	r3, [pc, #44]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013762:	4a0a      	ldr	r2, [pc, #40]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24013768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
2401376a:	4b08      	ldr	r3, [pc, #32]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
2401376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401376e:	4a07      	ldr	r2, [pc, #28]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013770:	f043 0301 	orr.w	r3, r3, #1
24013774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
24013776:	4b05      	ldr	r3, [pc, #20]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
24013778:	681b      	ldr	r3, [r3, #0]
2401377a:	4a04      	ldr	r2, [pc, #16]	; (2401378c <HAL_RCC_OscConfig+0x76c>)
2401377c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24013780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24013782:	f7ee fd3b 	bl	240021fc <HAL_GetTick>
24013786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24013788:	e011      	b.n	240137ae <HAL_RCC_OscConfig+0x78e>
2401378a:	bf00      	nop
2401378c:	58024400 	.word	0x58024400
24013790:	58024800 	.word	0x58024800
24013794:	fffffc0c 	.word	0xfffffc0c
24013798:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2401379c:	f7ee fd2e 	bl	240021fc <HAL_GetTick>
240137a0:	4602      	mov	r2, r0
240137a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240137a4:	1ad3      	subs	r3, r2, r3
240137a6:	2b02      	cmp	r3, #2
240137a8:	d901      	bls.n	240137ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
240137aa:	2303      	movs	r3, #3
240137ac:	e05f      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240137ae:	4b32      	ldr	r3, [pc, #200]	; (24013878 <HAL_RCC_OscConfig+0x858>)
240137b0:	681b      	ldr	r3, [r3, #0]
240137b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240137b6:	2b00      	cmp	r3, #0
240137b8:	d0f0      	beq.n	2401379c <HAL_RCC_OscConfig+0x77c>
240137ba:	e057      	b.n	2401386c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
240137bc:	4b2e      	ldr	r3, [pc, #184]	; (24013878 <HAL_RCC_OscConfig+0x858>)
240137be:	681b      	ldr	r3, [r3, #0]
240137c0:	4a2d      	ldr	r2, [pc, #180]	; (24013878 <HAL_RCC_OscConfig+0x858>)
240137c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240137c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240137c8:	f7ee fd18 	bl	240021fc <HAL_GetTick>
240137cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240137ce:	e008      	b.n	240137e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
240137d0:	f7ee fd14 	bl	240021fc <HAL_GetTick>
240137d4:	4602      	mov	r2, r0
240137d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240137d8:	1ad3      	subs	r3, r2, r3
240137da:	2b02      	cmp	r3, #2
240137dc:	d901      	bls.n	240137e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
240137de:	2303      	movs	r3, #3
240137e0:	e045      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240137e2:	4b25      	ldr	r3, [pc, #148]	; (24013878 <HAL_RCC_OscConfig+0x858>)
240137e4:	681b      	ldr	r3, [r3, #0]
240137e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240137ea:	2b00      	cmp	r3, #0
240137ec:	d1f0      	bne.n	240137d0 <HAL_RCC_OscConfig+0x7b0>
240137ee:	e03d      	b.n	2401386c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
240137f0:	4b21      	ldr	r3, [pc, #132]	; (24013878 <HAL_RCC_OscConfig+0x858>)
240137f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240137f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
240137f6:	4b20      	ldr	r3, [pc, #128]	; (24013878 <HAL_RCC_OscConfig+0x858>)
240137f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240137fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240137fc:	687b      	ldr	r3, [r7, #4]
240137fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24013800:	2b01      	cmp	r3, #1
24013802:	d031      	beq.n	24013868 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24013804:	693b      	ldr	r3, [r7, #16]
24013806:	f003 0203 	and.w	r2, r3, #3
2401380a:	687b      	ldr	r3, [r7, #4]
2401380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2401380e:	429a      	cmp	r2, r3
24013810:	d12a      	bne.n	24013868 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24013812:	693b      	ldr	r3, [r7, #16]
24013814:	091b      	lsrs	r3, r3, #4
24013816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401381a:	687b      	ldr	r3, [r7, #4]
2401381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2401381e:	429a      	cmp	r2, r3
24013820:	d122      	bne.n	24013868 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24013822:	68fb      	ldr	r3, [r7, #12]
24013824:	f3c3 0208 	ubfx	r2, r3, #0, #9
24013828:	687b      	ldr	r3, [r7, #4]
2401382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401382c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2401382e:	429a      	cmp	r2, r3
24013830:	d11a      	bne.n	24013868 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24013832:	68fb      	ldr	r3, [r7, #12]
24013834:	0a5b      	lsrs	r3, r3, #9
24013836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2401383a:	687b      	ldr	r3, [r7, #4]
2401383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401383e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24013840:	429a      	cmp	r2, r3
24013842:	d111      	bne.n	24013868 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24013844:	68fb      	ldr	r3, [r7, #12]
24013846:	0c1b      	lsrs	r3, r3, #16
24013848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2401384c:	687b      	ldr	r3, [r7, #4]
2401384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24013850:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24013852:	429a      	cmp	r2, r3
24013854:	d108      	bne.n	24013868 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24013856:	68fb      	ldr	r3, [r7, #12]
24013858:	0e1b      	lsrs	r3, r3, #24
2401385a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2401385e:	687b      	ldr	r3, [r7, #4]
24013860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24013862:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24013864:	429a      	cmp	r2, r3
24013866:	d001      	beq.n	2401386c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
24013868:	2301      	movs	r3, #1
2401386a:	e000      	b.n	2401386e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
2401386c:	2300      	movs	r3, #0
}
2401386e:	4618      	mov	r0, r3
24013870:	3730      	adds	r7, #48	; 0x30
24013872:	46bd      	mov	sp, r7
24013874:	bd80      	pop	{r7, pc}
24013876:	bf00      	nop
24013878:	58024400 	.word	0x58024400

2401387c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2401387c:	b580      	push	{r7, lr}
2401387e:	b086      	sub	sp, #24
24013880:	af00      	add	r7, sp, #0
24013882:	6078      	str	r0, [r7, #4]
24013884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
24013886:	687b      	ldr	r3, [r7, #4]
24013888:	2b00      	cmp	r3, #0
2401388a:	d101      	bne.n	24013890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2401388c:	2301      	movs	r3, #1
2401388e:	e19c      	b.n	24013bca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
24013890:	4b8a      	ldr	r3, [pc, #552]	; (24013abc <HAL_RCC_ClockConfig+0x240>)
24013892:	681b      	ldr	r3, [r3, #0]
24013894:	f003 030f 	and.w	r3, r3, #15
24013898:	683a      	ldr	r2, [r7, #0]
2401389a:	429a      	cmp	r2, r3
2401389c:	d910      	bls.n	240138c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2401389e:	4b87      	ldr	r3, [pc, #540]	; (24013abc <HAL_RCC_ClockConfig+0x240>)
240138a0:	681b      	ldr	r3, [r3, #0]
240138a2:	f023 020f 	bic.w	r2, r3, #15
240138a6:	4985      	ldr	r1, [pc, #532]	; (24013abc <HAL_RCC_ClockConfig+0x240>)
240138a8:	683b      	ldr	r3, [r7, #0]
240138aa:	4313      	orrs	r3, r2
240138ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
240138ae:	4b83      	ldr	r3, [pc, #524]	; (24013abc <HAL_RCC_ClockConfig+0x240>)
240138b0:	681b      	ldr	r3, [r3, #0]
240138b2:	f003 030f 	and.w	r3, r3, #15
240138b6:	683a      	ldr	r2, [r7, #0]
240138b8:	429a      	cmp	r2, r3
240138ba:	d001      	beq.n	240138c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
240138bc:	2301      	movs	r3, #1
240138be:	e184      	b.n	24013bca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
240138c0:	687b      	ldr	r3, [r7, #4]
240138c2:	681b      	ldr	r3, [r3, #0]
240138c4:	f003 0304 	and.w	r3, r3, #4
240138c8:	2b00      	cmp	r3, #0
240138ca:	d010      	beq.n	240138ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
240138cc:	687b      	ldr	r3, [r7, #4]
240138ce:	691a      	ldr	r2, [r3, #16]
240138d0:	4b7b      	ldr	r3, [pc, #492]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240138d2:	699b      	ldr	r3, [r3, #24]
240138d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
240138d8:	429a      	cmp	r2, r3
240138da:	d908      	bls.n	240138ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
240138dc:	4b78      	ldr	r3, [pc, #480]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240138de:	699b      	ldr	r3, [r3, #24]
240138e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
240138e4:	687b      	ldr	r3, [r7, #4]
240138e6:	691b      	ldr	r3, [r3, #16]
240138e8:	4975      	ldr	r1, [pc, #468]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240138ea:	4313      	orrs	r3, r2
240138ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
240138ee:	687b      	ldr	r3, [r7, #4]
240138f0:	681b      	ldr	r3, [r3, #0]
240138f2:	f003 0308 	and.w	r3, r3, #8
240138f6:	2b00      	cmp	r3, #0
240138f8:	d010      	beq.n	2401391c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240138fa:	687b      	ldr	r3, [r7, #4]
240138fc:	695a      	ldr	r2, [r3, #20]
240138fe:	4b70      	ldr	r3, [pc, #448]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013900:	69db      	ldr	r3, [r3, #28]
24013902:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013906:	429a      	cmp	r2, r3
24013908:	d908      	bls.n	2401391c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2401390a:	4b6d      	ldr	r3, [pc, #436]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
2401390c:	69db      	ldr	r3, [r3, #28]
2401390e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013912:	687b      	ldr	r3, [r7, #4]
24013914:	695b      	ldr	r3, [r3, #20]
24013916:	496a      	ldr	r1, [pc, #424]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013918:	4313      	orrs	r3, r2
2401391a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2401391c:	687b      	ldr	r3, [r7, #4]
2401391e:	681b      	ldr	r3, [r3, #0]
24013920:	f003 0310 	and.w	r3, r3, #16
24013924:	2b00      	cmp	r3, #0
24013926:	d010      	beq.n	2401394a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24013928:	687b      	ldr	r3, [r7, #4]
2401392a:	699a      	ldr	r2, [r3, #24]
2401392c:	4b64      	ldr	r3, [pc, #400]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
2401392e:	69db      	ldr	r3, [r3, #28]
24013930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24013934:	429a      	cmp	r2, r3
24013936:	d908      	bls.n	2401394a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24013938:	4b61      	ldr	r3, [pc, #388]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
2401393a:	69db      	ldr	r3, [r3, #28]
2401393c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24013940:	687b      	ldr	r3, [r7, #4]
24013942:	699b      	ldr	r3, [r3, #24]
24013944:	495e      	ldr	r1, [pc, #376]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013946:	4313      	orrs	r3, r2
24013948:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2401394a:	687b      	ldr	r3, [r7, #4]
2401394c:	681b      	ldr	r3, [r3, #0]
2401394e:	f003 0320 	and.w	r3, r3, #32
24013952:	2b00      	cmp	r3, #0
24013954:	d010      	beq.n	24013978 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24013956:	687b      	ldr	r3, [r7, #4]
24013958:	69da      	ldr	r2, [r3, #28]
2401395a:	4b59      	ldr	r3, [pc, #356]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
2401395c:	6a1b      	ldr	r3, [r3, #32]
2401395e:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013962:	429a      	cmp	r2, r3
24013964:	d908      	bls.n	24013978 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
24013966:	4b56      	ldr	r3, [pc, #344]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013968:	6a1b      	ldr	r3, [r3, #32]
2401396a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2401396e:	687b      	ldr	r3, [r7, #4]
24013970:	69db      	ldr	r3, [r3, #28]
24013972:	4953      	ldr	r1, [pc, #332]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013974:	4313      	orrs	r3, r2
24013976:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24013978:	687b      	ldr	r3, [r7, #4]
2401397a:	681b      	ldr	r3, [r3, #0]
2401397c:	f003 0302 	and.w	r3, r3, #2
24013980:	2b00      	cmp	r3, #0
24013982:	d010      	beq.n	240139a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24013984:	687b      	ldr	r3, [r7, #4]
24013986:	68da      	ldr	r2, [r3, #12]
24013988:	4b4d      	ldr	r3, [pc, #308]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
2401398a:	699b      	ldr	r3, [r3, #24]
2401398c:	f003 030f 	and.w	r3, r3, #15
24013990:	429a      	cmp	r2, r3
24013992:	d908      	bls.n	240139a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24013994:	4b4a      	ldr	r3, [pc, #296]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013996:	699b      	ldr	r3, [r3, #24]
24013998:	f023 020f 	bic.w	r2, r3, #15
2401399c:	687b      	ldr	r3, [r7, #4]
2401399e:	68db      	ldr	r3, [r3, #12]
240139a0:	4947      	ldr	r1, [pc, #284]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240139a2:	4313      	orrs	r3, r2
240139a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240139a6:	687b      	ldr	r3, [r7, #4]
240139a8:	681b      	ldr	r3, [r3, #0]
240139aa:	f003 0301 	and.w	r3, r3, #1
240139ae:	2b00      	cmp	r3, #0
240139b0:	d055      	beq.n	24013a5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
240139b2:	4b43      	ldr	r3, [pc, #268]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240139b4:	699b      	ldr	r3, [r3, #24]
240139b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
240139ba:	687b      	ldr	r3, [r7, #4]
240139bc:	689b      	ldr	r3, [r3, #8]
240139be:	4940      	ldr	r1, [pc, #256]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240139c0:	4313      	orrs	r3, r2
240139c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240139c4:	687b      	ldr	r3, [r7, #4]
240139c6:	685b      	ldr	r3, [r3, #4]
240139c8:	2b02      	cmp	r3, #2
240139ca:	d107      	bne.n	240139dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240139cc:	4b3c      	ldr	r3, [pc, #240]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240139ce:	681b      	ldr	r3, [r3, #0]
240139d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240139d4:	2b00      	cmp	r3, #0
240139d6:	d121      	bne.n	24013a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
240139d8:	2301      	movs	r3, #1
240139da:	e0f6      	b.n	24013bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
240139dc:	687b      	ldr	r3, [r7, #4]
240139de:	685b      	ldr	r3, [r3, #4]
240139e0:	2b03      	cmp	r3, #3
240139e2:	d107      	bne.n	240139f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240139e4:	4b36      	ldr	r3, [pc, #216]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240139e6:	681b      	ldr	r3, [r3, #0]
240139e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240139ec:	2b00      	cmp	r3, #0
240139ee:	d115      	bne.n	24013a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
240139f0:	2301      	movs	r3, #1
240139f2:	e0ea      	b.n	24013bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
240139f4:	687b      	ldr	r3, [r7, #4]
240139f6:	685b      	ldr	r3, [r3, #4]
240139f8:	2b01      	cmp	r3, #1
240139fa:	d107      	bne.n	24013a0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240139fc:	4b30      	ldr	r3, [pc, #192]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
240139fe:	681b      	ldr	r3, [r3, #0]
24013a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
24013a04:	2b00      	cmp	r3, #0
24013a06:	d109      	bne.n	24013a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24013a08:	2301      	movs	r3, #1
24013a0a:	e0de      	b.n	24013bca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24013a0c:	4b2c      	ldr	r3, [pc, #176]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013a0e:	681b      	ldr	r3, [r3, #0]
24013a10:	f003 0304 	and.w	r3, r3, #4
24013a14:	2b00      	cmp	r3, #0
24013a16:	d101      	bne.n	24013a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24013a18:	2301      	movs	r3, #1
24013a1a:	e0d6      	b.n	24013bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24013a1c:	4b28      	ldr	r3, [pc, #160]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013a1e:	691b      	ldr	r3, [r3, #16]
24013a20:	f023 0207 	bic.w	r2, r3, #7
24013a24:	687b      	ldr	r3, [r7, #4]
24013a26:	685b      	ldr	r3, [r3, #4]
24013a28:	4925      	ldr	r1, [pc, #148]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013a2a:	4313      	orrs	r3, r2
24013a2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24013a2e:	f7ee fbe5 	bl	240021fc <HAL_GetTick>
24013a32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24013a34:	e00a      	b.n	24013a4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
24013a36:	f7ee fbe1 	bl	240021fc <HAL_GetTick>
24013a3a:	4602      	mov	r2, r0
24013a3c:	697b      	ldr	r3, [r7, #20]
24013a3e:	1ad3      	subs	r3, r2, r3
24013a40:	f241 3288 	movw	r2, #5000	; 0x1388
24013a44:	4293      	cmp	r3, r2
24013a46:	d901      	bls.n	24013a4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
24013a48:	2303      	movs	r3, #3
24013a4a:	e0be      	b.n	24013bca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24013a4c:	4b1c      	ldr	r3, [pc, #112]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013a4e:	691b      	ldr	r3, [r3, #16]
24013a50:	f003 0238 	and.w	r2, r3, #56	; 0x38
24013a54:	687b      	ldr	r3, [r7, #4]
24013a56:	685b      	ldr	r3, [r3, #4]
24013a58:	00db      	lsls	r3, r3, #3
24013a5a:	429a      	cmp	r2, r3
24013a5c:	d1eb      	bne.n	24013a36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24013a5e:	687b      	ldr	r3, [r7, #4]
24013a60:	681b      	ldr	r3, [r3, #0]
24013a62:	f003 0302 	and.w	r3, r3, #2
24013a66:	2b00      	cmp	r3, #0
24013a68:	d010      	beq.n	24013a8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24013a6a:	687b      	ldr	r3, [r7, #4]
24013a6c:	68da      	ldr	r2, [r3, #12]
24013a6e:	4b14      	ldr	r3, [pc, #80]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013a70:	699b      	ldr	r3, [r3, #24]
24013a72:	f003 030f 	and.w	r3, r3, #15
24013a76:	429a      	cmp	r2, r3
24013a78:	d208      	bcs.n	24013a8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24013a7a:	4b11      	ldr	r3, [pc, #68]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013a7c:	699b      	ldr	r3, [r3, #24]
24013a7e:	f023 020f 	bic.w	r2, r3, #15
24013a82:	687b      	ldr	r3, [r7, #4]
24013a84:	68db      	ldr	r3, [r3, #12]
24013a86:	490e      	ldr	r1, [pc, #56]	; (24013ac0 <HAL_RCC_ClockConfig+0x244>)
24013a88:	4313      	orrs	r3, r2
24013a8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
24013a8c:	4b0b      	ldr	r3, [pc, #44]	; (24013abc <HAL_RCC_ClockConfig+0x240>)
24013a8e:	681b      	ldr	r3, [r3, #0]
24013a90:	f003 030f 	and.w	r3, r3, #15
24013a94:	683a      	ldr	r2, [r7, #0]
24013a96:	429a      	cmp	r2, r3
24013a98:	d214      	bcs.n	24013ac4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24013a9a:	4b08      	ldr	r3, [pc, #32]	; (24013abc <HAL_RCC_ClockConfig+0x240>)
24013a9c:	681b      	ldr	r3, [r3, #0]
24013a9e:	f023 020f 	bic.w	r2, r3, #15
24013aa2:	4906      	ldr	r1, [pc, #24]	; (24013abc <HAL_RCC_ClockConfig+0x240>)
24013aa4:	683b      	ldr	r3, [r7, #0]
24013aa6:	4313      	orrs	r3, r2
24013aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
24013aaa:	4b04      	ldr	r3, [pc, #16]	; (24013abc <HAL_RCC_ClockConfig+0x240>)
24013aac:	681b      	ldr	r3, [r3, #0]
24013aae:	f003 030f 	and.w	r3, r3, #15
24013ab2:	683a      	ldr	r2, [r7, #0]
24013ab4:	429a      	cmp	r2, r3
24013ab6:	d005      	beq.n	24013ac4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
24013ab8:	2301      	movs	r3, #1
24013aba:	e086      	b.n	24013bca <HAL_RCC_ClockConfig+0x34e>
24013abc:	52002000 	.word	0x52002000
24013ac0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24013ac4:	687b      	ldr	r3, [r7, #4]
24013ac6:	681b      	ldr	r3, [r3, #0]
24013ac8:	f003 0304 	and.w	r3, r3, #4
24013acc:	2b00      	cmp	r3, #0
24013ace:	d010      	beq.n	24013af2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24013ad0:	687b      	ldr	r3, [r7, #4]
24013ad2:	691a      	ldr	r2, [r3, #16]
24013ad4:	4b3f      	ldr	r3, [pc, #252]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013ad6:	699b      	ldr	r3, [r3, #24]
24013ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013adc:	429a      	cmp	r2, r3
24013ade:	d208      	bcs.n	24013af2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24013ae0:	4b3c      	ldr	r3, [pc, #240]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013ae2:	699b      	ldr	r3, [r3, #24]
24013ae4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013ae8:	687b      	ldr	r3, [r7, #4]
24013aea:	691b      	ldr	r3, [r3, #16]
24013aec:	4939      	ldr	r1, [pc, #228]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013aee:	4313      	orrs	r3, r2
24013af0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24013af2:	687b      	ldr	r3, [r7, #4]
24013af4:	681b      	ldr	r3, [r3, #0]
24013af6:	f003 0308 	and.w	r3, r3, #8
24013afa:	2b00      	cmp	r3, #0
24013afc:	d010      	beq.n	24013b20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24013afe:	687b      	ldr	r3, [r7, #4]
24013b00:	695a      	ldr	r2, [r3, #20]
24013b02:	4b34      	ldr	r3, [pc, #208]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b04:	69db      	ldr	r3, [r3, #28]
24013b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013b0a:	429a      	cmp	r2, r3
24013b0c:	d208      	bcs.n	24013b20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24013b0e:	4b31      	ldr	r3, [pc, #196]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b10:	69db      	ldr	r3, [r3, #28]
24013b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013b16:	687b      	ldr	r3, [r7, #4]
24013b18:	695b      	ldr	r3, [r3, #20]
24013b1a:	492e      	ldr	r1, [pc, #184]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b1c:	4313      	orrs	r3, r2
24013b1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24013b20:	687b      	ldr	r3, [r7, #4]
24013b22:	681b      	ldr	r3, [r3, #0]
24013b24:	f003 0310 	and.w	r3, r3, #16
24013b28:	2b00      	cmp	r3, #0
24013b2a:	d010      	beq.n	24013b4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24013b2c:	687b      	ldr	r3, [r7, #4]
24013b2e:	699a      	ldr	r2, [r3, #24]
24013b30:	4b28      	ldr	r3, [pc, #160]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b32:	69db      	ldr	r3, [r3, #28]
24013b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24013b38:	429a      	cmp	r2, r3
24013b3a:	d208      	bcs.n	24013b4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24013b3c:	4b25      	ldr	r3, [pc, #148]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b3e:	69db      	ldr	r3, [r3, #28]
24013b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24013b44:	687b      	ldr	r3, [r7, #4]
24013b46:	699b      	ldr	r3, [r3, #24]
24013b48:	4922      	ldr	r1, [pc, #136]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b4a:	4313      	orrs	r3, r2
24013b4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24013b4e:	687b      	ldr	r3, [r7, #4]
24013b50:	681b      	ldr	r3, [r3, #0]
24013b52:	f003 0320 	and.w	r3, r3, #32
24013b56:	2b00      	cmp	r3, #0
24013b58:	d010      	beq.n	24013b7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24013b5a:	687b      	ldr	r3, [r7, #4]
24013b5c:	69da      	ldr	r2, [r3, #28]
24013b5e:	4b1d      	ldr	r3, [pc, #116]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b60:	6a1b      	ldr	r3, [r3, #32]
24013b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
24013b66:	429a      	cmp	r2, r3
24013b68:	d208      	bcs.n	24013b7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
24013b6a:	4b1a      	ldr	r3, [pc, #104]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b6c:	6a1b      	ldr	r3, [r3, #32]
24013b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24013b72:	687b      	ldr	r3, [r7, #4]
24013b74:	69db      	ldr	r3, [r3, #28]
24013b76:	4917      	ldr	r1, [pc, #92]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b78:	4313      	orrs	r3, r2
24013b7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24013b7c:	f000 f8be 	bl	24013cfc <HAL_RCC_GetSysClockFreq>
24013b80:	4602      	mov	r2, r0
24013b82:	4b14      	ldr	r3, [pc, #80]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b84:	699b      	ldr	r3, [r3, #24]
24013b86:	0a1b      	lsrs	r3, r3, #8
24013b88:	f003 030f 	and.w	r3, r3, #15
24013b8c:	4912      	ldr	r1, [pc, #72]	; (24013bd8 <HAL_RCC_ClockConfig+0x35c>)
24013b8e:	5ccb      	ldrb	r3, [r1, r3]
24013b90:	f003 031f 	and.w	r3, r3, #31
24013b94:	fa22 f303 	lsr.w	r3, r2, r3
24013b98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24013b9a:	4b0e      	ldr	r3, [pc, #56]	; (24013bd4 <HAL_RCC_ClockConfig+0x358>)
24013b9c:	699b      	ldr	r3, [r3, #24]
24013b9e:	f003 030f 	and.w	r3, r3, #15
24013ba2:	4a0d      	ldr	r2, [pc, #52]	; (24013bd8 <HAL_RCC_ClockConfig+0x35c>)
24013ba4:	5cd3      	ldrb	r3, [r2, r3]
24013ba6:	f003 031f 	and.w	r3, r3, #31
24013baa:	693a      	ldr	r2, [r7, #16]
24013bac:	fa22 f303 	lsr.w	r3, r2, r3
24013bb0:	4a0a      	ldr	r2, [pc, #40]	; (24013bdc <HAL_RCC_ClockConfig+0x360>)
24013bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24013bb4:	4a0a      	ldr	r2, [pc, #40]	; (24013be0 <HAL_RCC_ClockConfig+0x364>)
24013bb6:	693b      	ldr	r3, [r7, #16]
24013bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
24013bba:	4b0a      	ldr	r3, [pc, #40]	; (24013be4 <HAL_RCC_ClockConfig+0x368>)
24013bbc:	681b      	ldr	r3, [r3, #0]
24013bbe:	4618      	mov	r0, r3
24013bc0:	f7ee fad2 	bl	24002168 <HAL_InitTick>
24013bc4:	4603      	mov	r3, r0
24013bc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
24013bc8:	7bfb      	ldrb	r3, [r7, #15]
}
24013bca:	4618      	mov	r0, r3
24013bcc:	3718      	adds	r7, #24
24013bce:	46bd      	mov	sp, r7
24013bd0:	bd80      	pop	{r7, pc}
24013bd2:	bf00      	nop
24013bd4:	58024400 	.word	0x58024400
24013bd8:	24016ff4 	.word	0x24016ff4
24013bdc:	240004b4 	.word	0x240004b4
24013be0:	240004b0 	.word	0x240004b0
24013be4:	240004b8 	.word	0x240004b8

24013be8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
24013be8:	b580      	push	{r7, lr}
24013bea:	b08c      	sub	sp, #48	; 0x30
24013bec:	af00      	add	r7, sp, #0
24013bee:	60f8      	str	r0, [r7, #12]
24013bf0:	60b9      	str	r1, [r7, #8]
24013bf2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
24013bf4:	68fb      	ldr	r3, [r7, #12]
24013bf6:	2b00      	cmp	r3, #0
24013bf8:	d12a      	bne.n	24013c50 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
24013bfa:	4b2d      	ldr	r3, [pc, #180]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24013c00:	4a2b      	ldr	r2, [pc, #172]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013c02:	f043 0301 	orr.w	r3, r3, #1
24013c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24013c0a:	4b29      	ldr	r3, [pc, #164]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24013c10:	f003 0301 	and.w	r3, r3, #1
24013c14:	61bb      	str	r3, [r7, #24]
24013c16:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
24013c18:	f44f 7380 	mov.w	r3, #256	; 0x100
24013c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24013c1e:	2302      	movs	r3, #2
24013c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24013c22:	2303      	movs	r3, #3
24013c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24013c26:	2300      	movs	r3, #0
24013c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24013c2a:	2300      	movs	r3, #0
24013c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
24013c2e:	f107 031c 	add.w	r3, r7, #28
24013c32:	4619      	mov	r1, r3
24013c34:	481f      	ldr	r0, [pc, #124]	; (24013cb4 <HAL_RCC_MCOConfig+0xcc>)
24013c36:	f7f5 fce7 	bl	24009608 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
24013c3a:	4b1d      	ldr	r3, [pc, #116]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013c3c:	691b      	ldr	r3, [r3, #16]
24013c3e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
24013c42:	68b9      	ldr	r1, [r7, #8]
24013c44:	687b      	ldr	r3, [r7, #4]
24013c46:	430b      	orrs	r3, r1
24013c48:	4919      	ldr	r1, [pc, #100]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013c4a:	4313      	orrs	r3, r2
24013c4c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
24013c4e:	e02a      	b.n	24013ca6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
24013c50:	4b17      	ldr	r3, [pc, #92]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24013c56:	4a16      	ldr	r2, [pc, #88]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013c58:	f043 0304 	orr.w	r3, r3, #4
24013c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24013c60:	4b13      	ldr	r3, [pc, #76]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24013c66:	f003 0304 	and.w	r3, r3, #4
24013c6a:	617b      	str	r3, [r7, #20]
24013c6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
24013c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
24013c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24013c74:	2302      	movs	r3, #2
24013c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24013c78:	2303      	movs	r3, #3
24013c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24013c7c:	2300      	movs	r3, #0
24013c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24013c80:	2300      	movs	r3, #0
24013c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
24013c84:	f107 031c 	add.w	r3, r7, #28
24013c88:	4619      	mov	r1, r3
24013c8a:	480b      	ldr	r0, [pc, #44]	; (24013cb8 <HAL_RCC_MCOConfig+0xd0>)
24013c8c:	f7f5 fcbc 	bl	24009608 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
24013c90:	4b07      	ldr	r3, [pc, #28]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013c92:	691b      	ldr	r3, [r3, #16]
24013c94:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
24013c98:	687b      	ldr	r3, [r7, #4]
24013c9a:	01d9      	lsls	r1, r3, #7
24013c9c:	68bb      	ldr	r3, [r7, #8]
24013c9e:	430b      	orrs	r3, r1
24013ca0:	4903      	ldr	r1, [pc, #12]	; (24013cb0 <HAL_RCC_MCOConfig+0xc8>)
24013ca2:	4313      	orrs	r3, r2
24013ca4:	610b      	str	r3, [r1, #16]
}
24013ca6:	bf00      	nop
24013ca8:	3730      	adds	r7, #48	; 0x30
24013caa:	46bd      	mov	sp, r7
24013cac:	bd80      	pop	{r7, pc}
24013cae:	bf00      	nop
24013cb0:	58024400 	.word	0x58024400
24013cb4:	58020000 	.word	0x58020000
24013cb8:	58020800 	.word	0x58020800

24013cbc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
24013cbc:	b480      	push	{r7}
24013cbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
24013cc0:	4b05      	ldr	r3, [pc, #20]	; (24013cd8 <HAL_RCC_EnableCSS+0x1c>)
24013cc2:	681b      	ldr	r3, [r3, #0]
24013cc4:	4a04      	ldr	r2, [pc, #16]	; (24013cd8 <HAL_RCC_EnableCSS+0x1c>)
24013cc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24013cca:	6013      	str	r3, [r2, #0]
}
24013ccc:	bf00      	nop
24013cce:	46bd      	mov	sp, r7
24013cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
24013cd4:	4770      	bx	lr
24013cd6:	bf00      	nop
24013cd8:	58024400 	.word	0x58024400

24013cdc <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
24013cdc:	b480      	push	{r7}
24013cde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSHSEON);
24013ce0:	4b05      	ldr	r3, [pc, #20]	; (24013cf8 <HAL_RCC_DisableCSS+0x1c>)
24013ce2:	681b      	ldr	r3, [r3, #0]
24013ce4:	4a04      	ldr	r2, [pc, #16]	; (24013cf8 <HAL_RCC_DisableCSS+0x1c>)
24013ce6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
24013cea:	6013      	str	r3, [r2, #0]
}
24013cec:	bf00      	nop
24013cee:	46bd      	mov	sp, r7
24013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
24013cf4:	4770      	bx	lr
24013cf6:	bf00      	nop
24013cf8:	58024400 	.word	0x58024400

24013cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
24013cfc:	b480      	push	{r7}
24013cfe:	b089      	sub	sp, #36	; 0x24
24013d00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24013d02:	4bb3      	ldr	r3, [pc, #716]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d04:	691b      	ldr	r3, [r3, #16]
24013d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
24013d0a:	2b18      	cmp	r3, #24
24013d0c:	f200 8155 	bhi.w	24013fba <HAL_RCC_GetSysClockFreq+0x2be>
24013d10:	a201      	add	r2, pc, #4	; (adr r2, 24013d18 <HAL_RCC_GetSysClockFreq+0x1c>)
24013d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24013d16:	bf00      	nop
24013d18:	24013d7d 	.word	0x24013d7d
24013d1c:	24013fbb 	.word	0x24013fbb
24013d20:	24013fbb 	.word	0x24013fbb
24013d24:	24013fbb 	.word	0x24013fbb
24013d28:	24013fbb 	.word	0x24013fbb
24013d2c:	24013fbb 	.word	0x24013fbb
24013d30:	24013fbb 	.word	0x24013fbb
24013d34:	24013fbb 	.word	0x24013fbb
24013d38:	24013da3 	.word	0x24013da3
24013d3c:	24013fbb 	.word	0x24013fbb
24013d40:	24013fbb 	.word	0x24013fbb
24013d44:	24013fbb 	.word	0x24013fbb
24013d48:	24013fbb 	.word	0x24013fbb
24013d4c:	24013fbb 	.word	0x24013fbb
24013d50:	24013fbb 	.word	0x24013fbb
24013d54:	24013fbb 	.word	0x24013fbb
24013d58:	24013da9 	.word	0x24013da9
24013d5c:	24013fbb 	.word	0x24013fbb
24013d60:	24013fbb 	.word	0x24013fbb
24013d64:	24013fbb 	.word	0x24013fbb
24013d68:	24013fbb 	.word	0x24013fbb
24013d6c:	24013fbb 	.word	0x24013fbb
24013d70:	24013fbb 	.word	0x24013fbb
24013d74:	24013fbb 	.word	0x24013fbb
24013d78:	24013daf 	.word	0x24013daf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24013d7c:	4b94      	ldr	r3, [pc, #592]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d7e:	681b      	ldr	r3, [r3, #0]
24013d80:	f003 0320 	and.w	r3, r3, #32
24013d84:	2b00      	cmp	r3, #0
24013d86:	d009      	beq.n	24013d9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24013d88:	4b91      	ldr	r3, [pc, #580]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013d8a:	681b      	ldr	r3, [r3, #0]
24013d8c:	08db      	lsrs	r3, r3, #3
24013d8e:	f003 0303 	and.w	r3, r3, #3
24013d92:	4a90      	ldr	r2, [pc, #576]	; (24013fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
24013d94:	fa22 f303 	lsr.w	r3, r2, r3
24013d98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
24013d9a:	e111      	b.n	24013fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
24013d9c:	4b8d      	ldr	r3, [pc, #564]	; (24013fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
24013d9e:	61bb      	str	r3, [r7, #24]
    break;
24013da0:	e10e      	b.n	24013fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
24013da2:	4b8d      	ldr	r3, [pc, #564]	; (24013fd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
24013da4:	61bb      	str	r3, [r7, #24]
    break;
24013da6:	e10b      	b.n	24013fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
24013da8:	4b8c      	ldr	r3, [pc, #560]	; (24013fdc <HAL_RCC_GetSysClockFreq+0x2e0>)
24013daa:	61bb      	str	r3, [r7, #24]
    break;
24013dac:	e108      	b.n	24013fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24013dae:	4b88      	ldr	r3, [pc, #544]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013db2:	f003 0303 	and.w	r3, r3, #3
24013db6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24013db8:	4b85      	ldr	r3, [pc, #532]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24013dbc:	091b      	lsrs	r3, r3, #4
24013dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013dc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
24013dc4:	4b82      	ldr	r3, [pc, #520]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24013dc8:	f003 0301 	and.w	r3, r3, #1
24013dcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24013dce:	4b80      	ldr	r3, [pc, #512]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24013dd2:	08db      	lsrs	r3, r3, #3
24013dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
24013dd8:	68fa      	ldr	r2, [r7, #12]
24013dda:	fb02 f303 	mul.w	r3, r2, r3
24013dde:	ee07 3a90 	vmov	s15, r3
24013de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013de6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
24013dea:	693b      	ldr	r3, [r7, #16]
24013dec:	2b00      	cmp	r3, #0
24013dee:	f000 80e1 	beq.w	24013fb4 <HAL_RCC_GetSysClockFreq+0x2b8>
24013df2:	697b      	ldr	r3, [r7, #20]
24013df4:	2b02      	cmp	r3, #2
24013df6:	f000 8083 	beq.w	24013f00 <HAL_RCC_GetSysClockFreq+0x204>
24013dfa:	697b      	ldr	r3, [r7, #20]
24013dfc:	2b02      	cmp	r3, #2
24013dfe:	f200 80a1 	bhi.w	24013f44 <HAL_RCC_GetSysClockFreq+0x248>
24013e02:	697b      	ldr	r3, [r7, #20]
24013e04:	2b00      	cmp	r3, #0
24013e06:	d003      	beq.n	24013e10 <HAL_RCC_GetSysClockFreq+0x114>
24013e08:	697b      	ldr	r3, [r7, #20]
24013e0a:	2b01      	cmp	r3, #1
24013e0c:	d056      	beq.n	24013ebc <HAL_RCC_GetSysClockFreq+0x1c0>
24013e0e:	e099      	b.n	24013f44 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24013e10:	4b6f      	ldr	r3, [pc, #444]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013e12:	681b      	ldr	r3, [r3, #0]
24013e14:	f003 0320 	and.w	r3, r3, #32
24013e18:	2b00      	cmp	r3, #0
24013e1a:	d02d      	beq.n	24013e78 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24013e1c:	4b6c      	ldr	r3, [pc, #432]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013e1e:	681b      	ldr	r3, [r3, #0]
24013e20:	08db      	lsrs	r3, r3, #3
24013e22:	f003 0303 	and.w	r3, r3, #3
24013e26:	4a6b      	ldr	r2, [pc, #428]	; (24013fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
24013e28:	fa22 f303 	lsr.w	r3, r2, r3
24013e2c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013e2e:	687b      	ldr	r3, [r7, #4]
24013e30:	ee07 3a90 	vmov	s15, r3
24013e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013e38:	693b      	ldr	r3, [r7, #16]
24013e3a:	ee07 3a90 	vmov	s15, r3
24013e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013e46:	4b62      	ldr	r3, [pc, #392]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013e4e:	ee07 3a90 	vmov	s15, r3
24013e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013e56:	ed97 6a02 	vldr	s12, [r7, #8]
24013e5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 24013fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
24013e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
24013e72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
24013e76:	e087      	b.n	24013f88 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013e78:	693b      	ldr	r3, [r7, #16]
24013e7a:	ee07 3a90 	vmov	s15, r3
24013e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013e82:	eddf 6a58 	vldr	s13, [pc, #352]	; 24013fe4 <HAL_RCC_GetSysClockFreq+0x2e8>
24013e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013e8a:	4b51      	ldr	r3, [pc, #324]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013e92:	ee07 3a90 	vmov	s15, r3
24013e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013e9a:	ed97 6a02 	vldr	s12, [r7, #8]
24013e9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 24013fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
24013ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
24013eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24013eba:	e065      	b.n	24013f88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013ebc:	693b      	ldr	r3, [r7, #16]
24013ebe:	ee07 3a90 	vmov	s15, r3
24013ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013ec6:	eddf 6a48 	vldr	s13, [pc, #288]	; 24013fe8 <HAL_RCC_GetSysClockFreq+0x2ec>
24013eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013ece:	4b40      	ldr	r3, [pc, #256]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013ed6:	ee07 3a90 	vmov	s15, r3
24013eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013ede:	ed97 6a02 	vldr	s12, [r7, #8]
24013ee2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24013fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
24013ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
24013efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24013efe:	e043      	b.n	24013f88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013f00:	693b      	ldr	r3, [r7, #16]
24013f02:	ee07 3a90 	vmov	s15, r3
24013f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013f0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 24013fec <HAL_RCC_GetSysClockFreq+0x2f0>
24013f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013f12:	4b2f      	ldr	r3, [pc, #188]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013f1a:	ee07 3a90 	vmov	s15, r3
24013f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013f22:	ed97 6a02 	vldr	s12, [r7, #8]
24013f26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24013fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
24013f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
24013f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24013f42:	e021      	b.n	24013f88 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24013f44:	693b      	ldr	r3, [r7, #16]
24013f46:	ee07 3a90 	vmov	s15, r3
24013f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24013f4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 24013fe8 <HAL_RCC_GetSysClockFreq+0x2ec>
24013f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013f56:	4b1e      	ldr	r3, [pc, #120]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24013f5e:	ee07 3a90 	vmov	s15, r3
24013f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
24013f66:	ed97 6a02 	vldr	s12, [r7, #8]
24013f6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24013fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
24013f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24013f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
24013f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
24013f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24013f86:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24013f88:	4b11      	ldr	r3, [pc, #68]	; (24013fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
24013f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24013f8c:	0a5b      	lsrs	r3, r3, #9
24013f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24013f92:	3301      	adds	r3, #1
24013f94:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24013f96:	683b      	ldr	r3, [r7, #0]
24013f98:	ee07 3a90 	vmov	s15, r3
24013f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24013fa0:	edd7 6a07 	vldr	s13, [r7, #28]
24013fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
24013fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24013fac:	ee17 3a90 	vmov	r3, s15
24013fb0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
24013fb2:	e005      	b.n	24013fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
24013fb4:	2300      	movs	r3, #0
24013fb6:	61bb      	str	r3, [r7, #24]
    break;
24013fb8:	e002      	b.n	24013fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
24013fba:	4b07      	ldr	r3, [pc, #28]	; (24013fd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
24013fbc:	61bb      	str	r3, [r7, #24]
    break;
24013fbe:	bf00      	nop
  }

  return sysclockfreq;
24013fc0:	69bb      	ldr	r3, [r7, #24]
}
24013fc2:	4618      	mov	r0, r3
24013fc4:	3724      	adds	r7, #36	; 0x24
24013fc6:	46bd      	mov	sp, r7
24013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
24013fcc:	4770      	bx	lr
24013fce:	bf00      	nop
24013fd0:	58024400 	.word	0x58024400
24013fd4:	03d09000 	.word	0x03d09000
24013fd8:	003d0900 	.word	0x003d0900
24013fdc:	02dc6c00 	.word	0x02dc6c00
24013fe0:	46000000 	.word	0x46000000
24013fe4:	4c742400 	.word	0x4c742400
24013fe8:	4a742400 	.word	0x4a742400
24013fec:	4c371b00 	.word	0x4c371b00

24013ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24013ff0:	b580      	push	{r7, lr}
24013ff2:	b082      	sub	sp, #8
24013ff4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24013ff6:	f7ff fe81 	bl	24013cfc <HAL_RCC_GetSysClockFreq>
24013ffa:	4602      	mov	r2, r0
24013ffc:	4b10      	ldr	r3, [pc, #64]	; (24014040 <HAL_RCC_GetHCLKFreq+0x50>)
24013ffe:	699b      	ldr	r3, [r3, #24]
24014000:	0a1b      	lsrs	r3, r3, #8
24014002:	f003 030f 	and.w	r3, r3, #15
24014006:	490f      	ldr	r1, [pc, #60]	; (24014044 <HAL_RCC_GetHCLKFreq+0x54>)
24014008:	5ccb      	ldrb	r3, [r1, r3]
2401400a:	f003 031f 	and.w	r3, r3, #31
2401400e:	fa22 f303 	lsr.w	r3, r2, r3
24014012:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24014014:	4b0a      	ldr	r3, [pc, #40]	; (24014040 <HAL_RCC_GetHCLKFreq+0x50>)
24014016:	699b      	ldr	r3, [r3, #24]
24014018:	f003 030f 	and.w	r3, r3, #15
2401401c:	4a09      	ldr	r2, [pc, #36]	; (24014044 <HAL_RCC_GetHCLKFreq+0x54>)
2401401e:	5cd3      	ldrb	r3, [r2, r3]
24014020:	f003 031f 	and.w	r3, r3, #31
24014024:	687a      	ldr	r2, [r7, #4]
24014026:	fa22 f303 	lsr.w	r3, r2, r3
2401402a:	4a07      	ldr	r2, [pc, #28]	; (24014048 <HAL_RCC_GetHCLKFreq+0x58>)
2401402c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2401402e:	4a07      	ldr	r2, [pc, #28]	; (2401404c <HAL_RCC_GetHCLKFreq+0x5c>)
24014030:	687b      	ldr	r3, [r7, #4]
24014032:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
24014034:	4b04      	ldr	r3, [pc, #16]	; (24014048 <HAL_RCC_GetHCLKFreq+0x58>)
24014036:	681b      	ldr	r3, [r3, #0]
}
24014038:	4618      	mov	r0, r3
2401403a:	3708      	adds	r7, #8
2401403c:	46bd      	mov	sp, r7
2401403e:	bd80      	pop	{r7, pc}
24014040:	58024400 	.word	0x58024400
24014044:	24016ff4 	.word	0x24016ff4
24014048:	240004b4 	.word	0x240004b4
2401404c:	240004b0 	.word	0x240004b0

24014050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24014050:	b580      	push	{r7, lr}
24014052:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24014054:	f7ff ffcc 	bl	24013ff0 <HAL_RCC_GetHCLKFreq>
24014058:	4602      	mov	r2, r0
2401405a:	4b06      	ldr	r3, [pc, #24]	; (24014074 <HAL_RCC_GetPCLK1Freq+0x24>)
2401405c:	69db      	ldr	r3, [r3, #28]
2401405e:	091b      	lsrs	r3, r3, #4
24014060:	f003 0307 	and.w	r3, r3, #7
24014064:	4904      	ldr	r1, [pc, #16]	; (24014078 <HAL_RCC_GetPCLK1Freq+0x28>)
24014066:	5ccb      	ldrb	r3, [r1, r3]
24014068:	f003 031f 	and.w	r3, r3, #31
2401406c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24014070:	4618      	mov	r0, r3
24014072:	bd80      	pop	{r7, pc}
24014074:	58024400 	.word	0x58024400
24014078:	24016ff4 	.word	0x24016ff4

2401407c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
2401407c:	b580      	push	{r7, lr}
2401407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
24014080:	f7ff ffb6 	bl	24013ff0 <HAL_RCC_GetHCLKFreq>
24014084:	4602      	mov	r2, r0
24014086:	4b06      	ldr	r3, [pc, #24]	; (240140a0 <HAL_RCC_GetPCLK2Freq+0x24>)
24014088:	69db      	ldr	r3, [r3, #28]
2401408a:	0a1b      	lsrs	r3, r3, #8
2401408c:	f003 0307 	and.w	r3, r3, #7
24014090:	4904      	ldr	r1, [pc, #16]	; (240140a4 <HAL_RCC_GetPCLK2Freq+0x28>)
24014092:	5ccb      	ldrb	r3, [r1, r3]
24014094:	f003 031f 	and.w	r3, r3, #31
24014098:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
2401409c:	4618      	mov	r0, r3
2401409e:	bd80      	pop	{r7, pc}
240140a0:	58024400 	.word	0x58024400
240140a4:	24016ff4 	.word	0x24016ff4

240140a8 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
240140a8:	b580      	push	{r7, lr}
240140aa:	b082      	sub	sp, #8
240140ac:	af00      	add	r7, sp, #0
240140ae:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_CSI | \
240140b0:	687b      	ldr	r3, [r7, #4]
240140b2:	223f      	movs	r2, #63	; 0x3f
240140b4:	601a      	str	r2, [r3, #0]
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#else
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
240140b6:	4b72      	ldr	r3, [pc, #456]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
240140b8:	681b      	ldr	r3, [r3, #0]
240140ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240140be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
240140c2:	d104      	bne.n	240140ce <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
240140c4:	687b      	ldr	r3, [r7, #4]
240140c6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
240140ca:	605a      	str	r2, [r3, #4]
240140cc:	e00e      	b.n	240140ec <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
240140ce:	4b6c      	ldr	r3, [pc, #432]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
240140d0:	681b      	ldr	r3, [r3, #0]
240140d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240140d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240140da:	d104      	bne.n	240140e6 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
240140dc:	687b      	ldr	r3, [r7, #4]
240140de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
240140e2:	605a      	str	r2, [r3, #4]
240140e4:	e002      	b.n	240140ec <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
240140e6:	687b      	ldr	r3, [r7, #4]
240140e8:	2200      	movs	r2, #0
240140ea:	605a      	str	r2, [r3, #4]
  }
#endif /* RCC_CR_HSEEXT */

   /* Get the CSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_CSION) == RCC_CR_CSION)
240140ec:	4b64      	ldr	r3, [pc, #400]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
240140ee:	681b      	ldr	r3, [r3, #0]
240140f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
240140f4:	2b80      	cmp	r3, #128	; 0x80
240140f6:	d103      	bne.n	24014100 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_ON;
240140f8:	687b      	ldr	r3, [r7, #4]
240140fa:	2280      	movs	r2, #128	; 0x80
240140fc:	61da      	str	r2, [r3, #28]
240140fe:	e002      	b.n	24014106 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
24014100:	687b      	ldr	r3, [r7, #4]
24014102:	2200      	movs	r2, #0
24014104:	61da      	str	r2, [r3, #28]
  }

#if defined(RCC_VER_X)
  if(HAL_GetREVID() <= REV_ID_Y)
24014106:	f7ee f913 	bl	24002330 <HAL_GetREVID>
2401410a:	4603      	mov	r3, r0
2401410c:	f241 0203 	movw	r2, #4099	; 0x1003
24014110:	4293      	cmp	r3, r2
24014112:	d807      	bhi.n	24014124 <HAL_RCC_GetOscConfig+0x7c>
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_CSITRIM_Msk) >> HAL_RCC_REV_Y_CSITRIM_Pos);
24014114:	4b5a      	ldr	r3, [pc, #360]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014116:	685b      	ldr	r3, [r3, #4]
24014118:	0e9b      	lsrs	r3, r3, #26
2401411a:	f003 021f 	and.w	r2, r3, #31
2401411e:	687b      	ldr	r3, [r7, #4]
24014120:	621a      	str	r2, [r3, #32]
24014122:	e006      	b.n	24014132 <HAL_RCC_GetOscConfig+0x8a>
  }
  else
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
24014124:	4b56      	ldr	r3, [pc, #344]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014126:	68db      	ldr	r3, [r3, #12]
24014128:	0e1b      	lsrs	r3, r3, #24
2401412a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401412e:	687b      	ldr	r3, [r7, #4]
24014130:	621a      	str	r2, [r3, #32]
#else
 RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
#endif /*RCC_VER_X*/

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
24014132:	4b53      	ldr	r3, [pc, #332]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014134:	681b      	ldr	r3, [r3, #0]
24014136:	f003 0301 	and.w	r3, r3, #1
2401413a:	2b01      	cmp	r3, #1
2401413c:	d103      	bne.n	24014146 <HAL_RCC_GetOscConfig+0x9e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
2401413e:	687b      	ldr	r3, [r7, #4]
24014140:	2201      	movs	r2, #1
24014142:	60da      	str	r2, [r3, #12]
24014144:	e002      	b.n	2401414c <HAL_RCC_GetOscConfig+0xa4>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
24014146:	687b      	ldr	r3, [r7, #4]
24014148:	2200      	movs	r2, #0
2401414a:	60da      	str	r2, [r3, #12]
  }

#if defined(RCC_VER_X)
  if(HAL_GetREVID() <= REV_ID_Y)
2401414c:	f7ee f8f0 	bl	24002330 <HAL_GetREVID>
24014150:	4603      	mov	r3, r0
24014152:	f241 0203 	movw	r2, #4099	; 0x1003
24014156:	4293      	cmp	r3, r2
24014158:	d807      	bhi.n	2401416a <HAL_RCC_GetOscConfig+0xc2>
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk) >> HAL_RCC_REV_Y_HSITRIM_Pos);
2401415a:	4b49      	ldr	r3, [pc, #292]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
2401415c:	685b      	ldr	r3, [r3, #4]
2401415e:	0b1b      	lsrs	r3, r3, #12
24014160:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24014164:	687b      	ldr	r3, [r7, #4]
24014166:	611a      	str	r2, [r3, #16]
24014168:	e006      	b.n	24014178 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
2401416a:	4b45      	ldr	r3, [pc, #276]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
2401416c:	685b      	ldr	r3, [r3, #4]
2401416e:	0e1b      	lsrs	r3, r3, #24
24014170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24014174:	687b      	ldr	r3, [r7, #4]
24014176:	611a      	str	r2, [r3, #16]
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#else
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
24014178:	4b41      	ldr	r3, [pc, #260]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
2401417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401417c:	f003 0304 	and.w	r3, r3, #4
24014180:	2b04      	cmp	r3, #4
24014182:	d103      	bne.n	2401418c <HAL_RCC_GetOscConfig+0xe4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
24014184:	687b      	ldr	r3, [r7, #4]
24014186:	2205      	movs	r2, #5
24014188:	609a      	str	r2, [r3, #8]
2401418a:	e00c      	b.n	240141a6 <HAL_RCC_GetOscConfig+0xfe>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
2401418c:	4b3c      	ldr	r3, [pc, #240]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
2401418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24014190:	f003 0301 	and.w	r3, r3, #1
24014194:	2b01      	cmp	r3, #1
24014196:	d103      	bne.n	240141a0 <HAL_RCC_GetOscConfig+0xf8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
24014198:	687b      	ldr	r3, [r7, #4]
2401419a:	2201      	movs	r2, #1
2401419c:	609a      	str	r2, [r3, #8]
2401419e:	e002      	b.n	240141a6 <HAL_RCC_GetOscConfig+0xfe>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
240141a0:	687b      	ldr	r3, [r7, #4]
240141a2:	2200      	movs	r2, #0
240141a4:	609a      	str	r2, [r3, #8]
  }
#endif /* RCC_BDCR_LSEEXT */

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
240141a6:	4b36      	ldr	r3, [pc, #216]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
240141a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240141aa:	f003 0301 	and.w	r3, r3, #1
240141ae:	2b01      	cmp	r3, #1
240141b0:	d103      	bne.n	240141ba <HAL_RCC_GetOscConfig+0x112>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
240141b2:	687b      	ldr	r3, [r7, #4]
240141b4:	2201      	movs	r2, #1
240141b6:	615a      	str	r2, [r3, #20]
240141b8:	e002      	b.n	240141c0 <HAL_RCC_GetOscConfig+0x118>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
240141ba:	687b      	ldr	r3, [r7, #4]
240141bc:	2200      	movs	r2, #0
240141be:	615a      	str	r2, [r3, #20]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
240141c0:	4b2f      	ldr	r3, [pc, #188]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
240141c2:	681b      	ldr	r3, [r3, #0]
240141c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240141c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240141cc:	d103      	bne.n	240141d6 <HAL_RCC_GetOscConfig+0x12e>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
240141ce:	687b      	ldr	r3, [r7, #4]
240141d0:	2201      	movs	r2, #1
240141d2:	619a      	str	r2, [r3, #24]
240141d4:	e002      	b.n	240141dc <HAL_RCC_GetOscConfig+0x134>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
240141d6:	687b      	ldr	r3, [r7, #4]
240141d8:	2200      	movs	r2, #0
240141da:	619a      	str	r2, [r3, #24]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
240141dc:	4b28      	ldr	r3, [pc, #160]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
240141de:	681b      	ldr	r3, [r3, #0]
240141e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240141e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240141e8:	d103      	bne.n	240141f2 <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
240141ea:	687b      	ldr	r3, [r7, #4]
240141ec:	2202      	movs	r2, #2
240141ee:	625a      	str	r2, [r3, #36]	; 0x24
240141f0:	e002      	b.n	240141f8 <HAL_RCC_GetOscConfig+0x150>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
240141f2:	687b      	ldr	r3, [r7, #4]
240141f4:	2201      	movs	r2, #1
240141f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240141f8:	4b21      	ldr	r3, [pc, #132]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
240141fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240141fc:	f003 0203 	and.w	r2, r3, #3
24014200:	687b      	ldr	r3, [r7, #4]
24014202:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> RCC_PLLCKSELR_DIVM1_Pos);
24014204:	4b1e      	ldr	r3, [pc, #120]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24014208:	091b      	lsrs	r3, r3, #4
2401420a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2401420e:	687b      	ldr	r3, [r7, #4]
24014210:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> RCC_PLL1DIVR_N1_Pos)+ 1U;
24014212:	4b1b      	ldr	r3, [pc, #108]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014216:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401421a:	1c5a      	adds	r2, r3, #1
2401421c:	687b      	ldr	r3, [r7, #4]
2401421e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos)+ 1U;
24014220:	4b17      	ldr	r3, [pc, #92]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014224:	0e1b      	lsrs	r3, r3, #24
24014226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401422a:	1c5a      	adds	r2, r3, #1
2401422c:	687b      	ldr	r3, [r7, #4]
2401422e:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos)+ 1U;
24014230:	4b13      	ldr	r3, [pc, #76]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014234:	0a5b      	lsrs	r3, r3, #9
24014236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401423a:	1c5a      	adds	r2, r3, #1
2401423c:	687b      	ldr	r3, [r7, #4]
2401423e:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos)+ 1U;
24014240:	4b0f      	ldr	r3, [pc, #60]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24014244:	0c1b      	lsrs	r3, r3, #16
24014246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401424a:	1c5a      	adds	r2, r3, #1
2401424c:	687b      	ldr	r3, [r7, #4]
2401424e:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE));
24014250:	4b0b      	ldr	r3, [pc, #44]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
24014252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014254:	f003 020c 	and.w	r2, r3, #12
24014258:	687b      	ldr	r3, [r7, #4]
2401425a:	641a      	str	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> RCC_PLLCFGR_PLL1VCOSEL_Pos);
2401425c:	4b08      	ldr	r3, [pc, #32]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
2401425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014260:	085b      	lsrs	r3, r3, #1
24014262:	f003 0201 	and.w	r2, r3, #1
24014266:	687b      	ldr	r3, [r7, #4]
24014268:	645a      	str	r2, [r3, #68]	; 0x44
  RCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos));
2401426a:	4b05      	ldr	r3, [pc, #20]	; (24014280 <HAL_RCC_GetOscConfig+0x1d8>)
2401426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401426e:	08db      	lsrs	r3, r3, #3
24014270:	f3c3 020c 	ubfx	r2, r3, #0, #13
24014274:	687b      	ldr	r3, [r7, #4]
24014276:	649a      	str	r2, [r3, #72]	; 0x48
}
24014278:	bf00      	nop
2401427a:	3708      	adds	r7, #8
2401427c:	46bd      	mov	sp, r7
2401427e:	bd80      	pop	{r7, pc}
24014280:	58024400 	.word	0x58024400

24014284 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
24014284:	b480      	push	{r7}
24014286:	b083      	sub	sp, #12
24014288:	af00      	add	r7, sp, #0
2401428a:	6078      	str	r0, [r7, #4]
2401428c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
2401428e:	687b      	ldr	r3, [r7, #4]
24014290:	223f      	movs	r2, #63	; 0x3f
24014292:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
24014294:	4b1a      	ldr	r3, [pc, #104]	; (24014300 <HAL_RCC_GetClockConfig+0x7c>)
24014296:	691b      	ldr	r3, [r3, #16]
24014298:	f003 0207 	and.w	r2, r3, #7
2401429c:	687b      	ldr	r3, [r7, #4]
2401429e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
240142a0:	4b17      	ldr	r3, [pc, #92]	; (24014300 <HAL_RCC_GetClockConfig+0x7c>)
240142a2:	699b      	ldr	r3, [r3, #24]
240142a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
240142a8:	687b      	ldr	r3, [r7, #4]
240142aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
240142ac:	4b14      	ldr	r3, [pc, #80]	; (24014300 <HAL_RCC_GetClockConfig+0x7c>)
240142ae:	699b      	ldr	r3, [r3, #24]
240142b0:	f003 020f 	and.w	r2, r3, #15
240142b4:	687b      	ldr	r3, [r7, #4]
240142b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
240142b8:	4b11      	ldr	r3, [pc, #68]	; (24014300 <HAL_RCC_GetClockConfig+0x7c>)
240142ba:	699b      	ldr	r3, [r3, #24]
240142bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
240142c0:	687b      	ldr	r3, [r7, #4]
240142c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
240142c4:	4b0e      	ldr	r3, [pc, #56]	; (24014300 <HAL_RCC_GetClockConfig+0x7c>)
240142c6:	69db      	ldr	r3, [r3, #28]
240142c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
240142cc:	687b      	ldr	r3, [r7, #4]
240142ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
240142d0:	4b0b      	ldr	r3, [pc, #44]	; (24014300 <HAL_RCC_GetClockConfig+0x7c>)
240142d2:	69db      	ldr	r3, [r3, #28]
240142d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
240142d8:	687b      	ldr	r3, [r7, #4]
240142da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
240142dc:	4b08      	ldr	r3, [pc, #32]	; (24014300 <HAL_RCC_GetClockConfig+0x7c>)
240142de:	6a1b      	ldr	r3, [r3, #32]
240142e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
240142e4:	687b      	ldr	r3, [r7, #4]
240142e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
240142e8:	4b06      	ldr	r3, [pc, #24]	; (24014304 <HAL_RCC_GetClockConfig+0x80>)
240142ea:	681b      	ldr	r3, [r3, #0]
240142ec:	f003 020f 	and.w	r2, r3, #15
240142f0:	683b      	ldr	r3, [r7, #0]
240142f2:	601a      	str	r2, [r3, #0]
}
240142f4:	bf00      	nop
240142f6:	370c      	adds	r7, #12
240142f8:	46bd      	mov	sp, r7
240142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
240142fe:	4770      	bx	lr
24014300:	58024400 	.word	0x58024400
24014304:	52002000 	.word	0x52002000

24014308 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
24014308:	b580      	push	{r7, lr}
2401430a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
2401430c:	4b07      	ldr	r3, [pc, #28]	; (2401432c <HAL_RCC_NMI_IRQHandler+0x24>)
2401430e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24014310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24014314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24014318:	d105      	bne.n	24014326 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
2401431a:	f000 f809 	bl	24014330 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
2401431e:	4b03      	ldr	r3, [pc, #12]	; (2401432c <HAL_RCC_NMI_IRQHandler+0x24>)
24014320:	f44f 6280 	mov.w	r2, #1024	; 0x400
24014324:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
24014326:	bf00      	nop
24014328:	bd80      	pop	{r7, pc}
2401432a:	bf00      	nop
2401432c:	58024400 	.word	0x58024400

24014330 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
24014330:	b480      	push	{r7}
24014332:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
24014334:	bf00      	nop
24014336:	46bd      	mov	sp, r7
24014338:	f85d 7b04 	ldr.w	r7, [sp], #4
2401433c:	4770      	bx	lr
	...

24014340 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
24014340:	b580      	push	{r7, lr}
24014342:	b086      	sub	sp, #24
24014344:	af00      	add	r7, sp, #0
24014346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
24014348:	2300      	movs	r3, #0
2401434a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
2401434c:	2300      	movs	r3, #0
2401434e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24014350:	687b      	ldr	r3, [r7, #4]
24014352:	681b      	ldr	r3, [r3, #0]
24014354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24014358:	2b00      	cmp	r3, #0
2401435a:	d03f      	beq.n	240143dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
2401435c:	687b      	ldr	r3, [r7, #4]
2401435e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24014360:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24014364:	d02a      	beq.n	240143bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
24014366:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2401436a:	d824      	bhi.n	240143b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
2401436c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014370:	d018      	beq.n	240143a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
24014372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014376:	d81e      	bhi.n	240143b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
24014378:	2b00      	cmp	r3, #0
2401437a:	d003      	beq.n	24014384 <HAL_RCCEx_PeriphCLKConfig+0x44>
2401437c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24014380:	d007      	beq.n	24014392 <HAL_RCCEx_PeriphCLKConfig+0x52>
24014382:	e018      	b.n	240143b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014384:	4ba3      	ldr	r3, [pc, #652]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014388:	4aa2      	ldr	r2, [pc, #648]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401438a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2401438e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
24014390:	e015      	b.n	240143be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24014392:	687b      	ldr	r3, [r7, #4]
24014394:	3304      	adds	r3, #4
24014396:	2102      	movs	r1, #2
24014398:	4618      	mov	r0, r3
2401439a:	f002 fbbf 	bl	24016b1c <RCCEx_PLL2_Config>
2401439e:	4603      	mov	r3, r0
240143a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
240143a2:	e00c      	b.n	240143be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
240143a4:	687b      	ldr	r3, [r7, #4]
240143a6:	3324      	adds	r3, #36	; 0x24
240143a8:	2102      	movs	r1, #2
240143aa:	4618      	mov	r0, r3
240143ac:	f002 fc68 	bl	24016c80 <RCCEx_PLL3_Config>
240143b0:	4603      	mov	r3, r0
240143b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
240143b4:	e003      	b.n	240143be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240143b6:	2301      	movs	r3, #1
240143b8:	75fb      	strb	r3, [r7, #23]
      break;
240143ba:	e000      	b.n	240143be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
240143bc:	bf00      	nop
    }

    if(ret == HAL_OK)
240143be:	7dfb      	ldrb	r3, [r7, #23]
240143c0:	2b00      	cmp	r3, #0
240143c2:	d109      	bne.n	240143d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
240143c4:	4b93      	ldr	r3, [pc, #588]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240143c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240143c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
240143cc:	687b      	ldr	r3, [r7, #4]
240143ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240143d0:	4990      	ldr	r1, [pc, #576]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240143d2:	4313      	orrs	r3, r2
240143d4:	650b      	str	r3, [r1, #80]	; 0x50
240143d6:	e001      	b.n	240143dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
240143d8:	7dfb      	ldrb	r3, [r7, #23]
240143da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
240143dc:	687b      	ldr	r3, [r7, #4]
240143de:	681b      	ldr	r3, [r3, #0]
240143e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
240143e4:	2b00      	cmp	r3, #0
240143e6:	d03d      	beq.n	24014464 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
240143e8:	687b      	ldr	r3, [r7, #4]
240143ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240143ec:	2b04      	cmp	r3, #4
240143ee:	d826      	bhi.n	2401443e <HAL_RCCEx_PeriphCLKConfig+0xfe>
240143f0:	a201      	add	r2, pc, #4	; (adr r2, 240143f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
240143f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240143f6:	bf00      	nop
240143f8:	2401440d 	.word	0x2401440d
240143fc:	2401441b 	.word	0x2401441b
24014400:	2401442d 	.word	0x2401442d
24014404:	24014445 	.word	0x24014445
24014408:	24014445 	.word	0x24014445
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401440c:	4b81      	ldr	r3, [pc, #516]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014410:	4a80      	ldr	r2, [pc, #512]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24014412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014418:	e015      	b.n	24014446 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2401441a:	687b      	ldr	r3, [r7, #4]
2401441c:	3304      	adds	r3, #4
2401441e:	2100      	movs	r1, #0
24014420:	4618      	mov	r0, r3
24014422:	f002 fb7b 	bl	24016b1c <RCCEx_PLL2_Config>
24014426:	4603      	mov	r3, r0
24014428:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
2401442a:	e00c      	b.n	24014446 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2401442c:	687b      	ldr	r3, [r7, #4]
2401442e:	3324      	adds	r3, #36	; 0x24
24014430:	2100      	movs	r1, #0
24014432:	4618      	mov	r0, r3
24014434:	f002 fc24 	bl	24016c80 <RCCEx_PLL3_Config>
24014438:	4603      	mov	r3, r0
2401443a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
2401443c:	e003      	b.n	24014446 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2401443e:	2301      	movs	r3, #1
24014440:	75fb      	strb	r3, [r7, #23]
      break;
24014442:	e000      	b.n	24014446 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
24014444:	bf00      	nop
    }

    if(ret == HAL_OK)
24014446:	7dfb      	ldrb	r3, [r7, #23]
24014448:	2b00      	cmp	r3, #0
2401444a:	d109      	bne.n	24014460 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2401444c:	4b71      	ldr	r3, [pc, #452]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401444e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014450:	f023 0207 	bic.w	r2, r3, #7
24014454:	687b      	ldr	r3, [r7, #4]
24014456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014458:	496e      	ldr	r1, [pc, #440]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401445a:	4313      	orrs	r3, r2
2401445c:	650b      	str	r3, [r1, #80]	; 0x50
2401445e:	e001      	b.n	24014464 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014460:	7dfb      	ldrb	r3, [r7, #23]
24014462:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24014464:	687b      	ldr	r3, [r7, #4]
24014466:	681b      	ldr	r3, [r3, #0]
24014468:	f403 7300 	and.w	r3, r3, #512	; 0x200
2401446c:	2b00      	cmp	r3, #0
2401446e:	d042      	beq.n	240144f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
24014470:	687b      	ldr	r3, [r7, #4]
24014472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24014478:	d02b      	beq.n	240144d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
2401447a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401447e:	d825      	bhi.n	240144cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
24014480:	2bc0      	cmp	r3, #192	; 0xc0
24014482:	d028      	beq.n	240144d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
24014484:	2bc0      	cmp	r3, #192	; 0xc0
24014486:	d821      	bhi.n	240144cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
24014488:	2b80      	cmp	r3, #128	; 0x80
2401448a:	d016      	beq.n	240144ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
2401448c:	2b80      	cmp	r3, #128	; 0x80
2401448e:	d81d      	bhi.n	240144cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
24014490:	2b00      	cmp	r3, #0
24014492:	d002      	beq.n	2401449a <HAL_RCCEx_PeriphCLKConfig+0x15a>
24014494:	2b40      	cmp	r3, #64	; 0x40
24014496:	d007      	beq.n	240144a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
24014498:	e018      	b.n	240144cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401449a:	4b5e      	ldr	r3, [pc, #376]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401449e:	4a5d      	ldr	r2, [pc, #372]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240144a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240144a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
240144a6:	e017      	b.n	240144d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
240144a8:	687b      	ldr	r3, [r7, #4]
240144aa:	3304      	adds	r3, #4
240144ac:	2100      	movs	r1, #0
240144ae:	4618      	mov	r0, r3
240144b0:	f002 fb34 	bl	24016b1c <RCCEx_PLL2_Config>
240144b4:	4603      	mov	r3, r0
240144b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
240144b8:	e00e      	b.n	240144d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
240144ba:	687b      	ldr	r3, [r7, #4]
240144bc:	3324      	adds	r3, #36	; 0x24
240144be:	2100      	movs	r1, #0
240144c0:	4618      	mov	r0, r3
240144c2:	f002 fbdd 	bl	24016c80 <RCCEx_PLL3_Config>
240144c6:	4603      	mov	r3, r0
240144c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
240144ca:	e005      	b.n	240144d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240144cc:	2301      	movs	r3, #1
240144ce:	75fb      	strb	r3, [r7, #23]
      break;
240144d0:	e002      	b.n	240144d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
240144d2:	bf00      	nop
240144d4:	e000      	b.n	240144d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
240144d6:	bf00      	nop
    }

    if(ret == HAL_OK)
240144d8:	7dfb      	ldrb	r3, [r7, #23]
240144da:	2b00      	cmp	r3, #0
240144dc:	d109      	bne.n	240144f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
240144de:	4b4d      	ldr	r3, [pc, #308]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240144e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240144e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
240144e6:	687b      	ldr	r3, [r7, #4]
240144e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240144ea:	494a      	ldr	r1, [pc, #296]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240144ec:	4313      	orrs	r3, r2
240144ee:	650b      	str	r3, [r1, #80]	; 0x50
240144f0:	e001      	b.n	240144f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
240144f2:	7dfb      	ldrb	r3, [r7, #23]
240144f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240144f6:	687b      	ldr	r3, [r7, #4]
240144f8:	681b      	ldr	r3, [r3, #0]
240144fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
240144fe:	2b00      	cmp	r3, #0
24014500:	d049      	beq.n	24014596 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
24014502:	687b      	ldr	r3, [r7, #4]
24014504:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24014508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2401450c:	d030      	beq.n	24014570 <HAL_RCCEx_PeriphCLKConfig+0x230>
2401450e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24014512:	d82a      	bhi.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x22a>
24014514:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24014518:	d02c      	beq.n	24014574 <HAL_RCCEx_PeriphCLKConfig+0x234>
2401451a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2401451e:	d824      	bhi.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x22a>
24014520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24014524:	d018      	beq.n	24014558 <HAL_RCCEx_PeriphCLKConfig+0x218>
24014526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2401452a:	d81e      	bhi.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x22a>
2401452c:	2b00      	cmp	r3, #0
2401452e:	d003      	beq.n	24014538 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24014530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014534:	d007      	beq.n	24014546 <HAL_RCCEx_PeriphCLKConfig+0x206>
24014536:	e018      	b.n	2401456a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014538:	4b36      	ldr	r3, [pc, #216]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401453c:	4a35      	ldr	r2, [pc, #212]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401453e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014544:	e017      	b.n	24014576 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014546:	687b      	ldr	r3, [r7, #4]
24014548:	3304      	adds	r3, #4
2401454a:	2100      	movs	r1, #0
2401454c:	4618      	mov	r0, r3
2401454e:	f002 fae5 	bl	24016b1c <RCCEx_PLL2_Config>
24014552:	4603      	mov	r3, r0
24014554:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
24014556:	e00e      	b.n	24014576 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
24014558:	687b      	ldr	r3, [r7, #4]
2401455a:	3324      	adds	r3, #36	; 0x24
2401455c:	2100      	movs	r1, #0
2401455e:	4618      	mov	r0, r3
24014560:	f002 fb8e 	bl	24016c80 <RCCEx_PLL3_Config>
24014564:	4603      	mov	r3, r0
24014566:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014568:	e005      	b.n	24014576 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
2401456a:	2301      	movs	r3, #1
2401456c:	75fb      	strb	r3, [r7, #23]
      break;
2401456e:	e002      	b.n	24014576 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
24014570:	bf00      	nop
24014572:	e000      	b.n	24014576 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
24014574:	bf00      	nop
    }

    if(ret == HAL_OK)
24014576:	7dfb      	ldrb	r3, [r7, #23]
24014578:	2b00      	cmp	r3, #0
2401457a:	d10a      	bne.n	24014592 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
2401457c:	4b25      	ldr	r3, [pc, #148]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401457e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014580:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
24014584:	687b      	ldr	r3, [r7, #4]
24014586:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2401458a:	4922      	ldr	r1, [pc, #136]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2401458c:	4313      	orrs	r3, r2
2401458e:	658b      	str	r3, [r1, #88]	; 0x58
24014590:	e001      	b.n	24014596 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014592:	7dfb      	ldrb	r3, [r7, #23]
24014594:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24014596:	687b      	ldr	r3, [r7, #4]
24014598:	681b      	ldr	r3, [r3, #0]
2401459a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
2401459e:	2b00      	cmp	r3, #0
240145a0:	d04b      	beq.n	2401463a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
240145a2:	687b      	ldr	r3, [r7, #4]
240145a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
240145a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240145ac:	d030      	beq.n	24014610 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
240145ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240145b2:	d82a      	bhi.n	2401460a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
240145b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240145b8:	d02e      	beq.n	24014618 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
240145ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240145be:	d824      	bhi.n	2401460a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
240145c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240145c4:	d018      	beq.n	240145f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
240145c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240145ca:	d81e      	bhi.n	2401460a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
240145cc:	2b00      	cmp	r3, #0
240145ce:	d003      	beq.n	240145d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
240145d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240145d4:	d007      	beq.n	240145e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
240145d6:	e018      	b.n	2401460a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240145d8:	4b0e      	ldr	r3, [pc, #56]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240145da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240145dc:	4a0d      	ldr	r2, [pc, #52]	; (24014614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240145de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240145e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
240145e4:	e019      	b.n	2401461a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
240145e6:	687b      	ldr	r3, [r7, #4]
240145e8:	3304      	adds	r3, #4
240145ea:	2100      	movs	r1, #0
240145ec:	4618      	mov	r0, r3
240145ee:	f002 fa95 	bl	24016b1c <RCCEx_PLL2_Config>
240145f2:	4603      	mov	r3, r0
240145f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
240145f6:	e010      	b.n	2401461a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240145f8:	687b      	ldr	r3, [r7, #4]
240145fa:	3324      	adds	r3, #36	; 0x24
240145fc:	2100      	movs	r1, #0
240145fe:	4618      	mov	r0, r3
24014600:	f002 fb3e 	bl	24016c80 <RCCEx_PLL3_Config>
24014604:	4603      	mov	r3, r0
24014606:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24014608:	e007      	b.n	2401461a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
2401460a:	2301      	movs	r3, #1
2401460c:	75fb      	strb	r3, [r7, #23]
      break;
2401460e:	e004      	b.n	2401461a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
24014610:	bf00      	nop
24014612:	e002      	b.n	2401461a <HAL_RCCEx_PeriphCLKConfig+0x2da>
24014614:	58024400 	.word	0x58024400
      break;
24014618:	bf00      	nop
    }

    if(ret == HAL_OK)
2401461a:	7dfb      	ldrb	r3, [r7, #23]
2401461c:	2b00      	cmp	r3, #0
2401461e:	d10a      	bne.n	24014636 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24014620:	4b99      	ldr	r3, [pc, #612]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014624:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
24014628:	687b      	ldr	r3, [r7, #4]
2401462a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2401462e:	4996      	ldr	r1, [pc, #600]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014630:	4313      	orrs	r3, r2
24014632:	658b      	str	r3, [r1, #88]	; 0x58
24014634:	e001      	b.n	2401463a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014636:	7dfb      	ldrb	r3, [r7, #23]
24014638:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2401463a:	687b      	ldr	r3, [r7, #4]
2401463c:	681b      	ldr	r3, [r3, #0]
2401463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24014642:	2b00      	cmp	r3, #0
24014644:	d032      	beq.n	240146ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
24014646:	687b      	ldr	r3, [r7, #4]
24014648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2401464a:	2b30      	cmp	r3, #48	; 0x30
2401464c:	d01c      	beq.n	24014688 <HAL_RCCEx_PeriphCLKConfig+0x348>
2401464e:	2b30      	cmp	r3, #48	; 0x30
24014650:	d817      	bhi.n	24014682 <HAL_RCCEx_PeriphCLKConfig+0x342>
24014652:	2b20      	cmp	r3, #32
24014654:	d00c      	beq.n	24014670 <HAL_RCCEx_PeriphCLKConfig+0x330>
24014656:	2b20      	cmp	r3, #32
24014658:	d813      	bhi.n	24014682 <HAL_RCCEx_PeriphCLKConfig+0x342>
2401465a:	2b00      	cmp	r3, #0
2401465c:	d016      	beq.n	2401468c <HAL_RCCEx_PeriphCLKConfig+0x34c>
2401465e:	2b10      	cmp	r3, #16
24014660:	d10f      	bne.n	24014682 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014662:	4b89      	ldr	r3, [pc, #548]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014666:	4a88      	ldr	r2, [pc, #544]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2401466c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
2401466e:	e00e      	b.n	2401468e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24014670:	687b      	ldr	r3, [r7, #4]
24014672:	3304      	adds	r3, #4
24014674:	2102      	movs	r1, #2
24014676:	4618      	mov	r0, r3
24014678:	f002 fa50 	bl	24016b1c <RCCEx_PLL2_Config>
2401467c:	4603      	mov	r3, r0
2401467e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
24014680:	e005      	b.n	2401468e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
24014682:	2301      	movs	r3, #1
24014684:	75fb      	strb	r3, [r7, #23]
      break;
24014686:	e002      	b.n	2401468e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
24014688:	bf00      	nop
2401468a:	e000      	b.n	2401468e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
2401468c:	bf00      	nop
    }

    if(ret == HAL_OK)
2401468e:	7dfb      	ldrb	r3, [r7, #23]
24014690:	2b00      	cmp	r3, #0
24014692:	d109      	bne.n	240146a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24014694:	4b7c      	ldr	r3, [pc, #496]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24014698:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2401469c:	687b      	ldr	r3, [r7, #4]
2401469e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240146a0:	4979      	ldr	r1, [pc, #484]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240146a2:	4313      	orrs	r3, r2
240146a4:	64cb      	str	r3, [r1, #76]	; 0x4c
240146a6:	e001      	b.n	240146ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
240146a8:	7dfb      	ldrb	r3, [r7, #23]
240146aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
240146ac:	687b      	ldr	r3, [r7, #4]
240146ae:	681b      	ldr	r3, [r3, #0]
240146b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240146b4:	2b00      	cmp	r3, #0
240146b6:	d047      	beq.n	24014748 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
240146b8:	687b      	ldr	r3, [r7, #4]
240146ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240146bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240146c0:	d030      	beq.n	24014724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
240146c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240146c6:	d82a      	bhi.n	2401471e <HAL_RCCEx_PeriphCLKConfig+0x3de>
240146c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240146cc:	d02c      	beq.n	24014728 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
240146ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240146d2:	d824      	bhi.n	2401471e <HAL_RCCEx_PeriphCLKConfig+0x3de>
240146d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240146d8:	d018      	beq.n	2401470c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
240146da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240146de:	d81e      	bhi.n	2401471e <HAL_RCCEx_PeriphCLKConfig+0x3de>
240146e0:	2b00      	cmp	r3, #0
240146e2:	d003      	beq.n	240146ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
240146e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240146e8:	d007      	beq.n	240146fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
240146ea:	e018      	b.n	2401471e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240146ec:	4b66      	ldr	r3, [pc, #408]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240146ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240146f0:	4a65      	ldr	r2, [pc, #404]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240146f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240146f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
240146f8:	e017      	b.n	2401472a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
240146fa:	687b      	ldr	r3, [r7, #4]
240146fc:	3304      	adds	r3, #4
240146fe:	2100      	movs	r1, #0
24014700:	4618      	mov	r0, r3
24014702:	f002 fa0b 	bl	24016b1c <RCCEx_PLL2_Config>
24014706:	4603      	mov	r3, r0
24014708:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
2401470a:	e00e      	b.n	2401472a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2401470c:	687b      	ldr	r3, [r7, #4]
2401470e:	3324      	adds	r3, #36	; 0x24
24014710:	2100      	movs	r1, #0
24014712:	4618      	mov	r0, r3
24014714:	f002 fab4 	bl	24016c80 <RCCEx_PLL3_Config>
24014718:	4603      	mov	r3, r0
2401471a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
2401471c:	e005      	b.n	2401472a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2401471e:	2301      	movs	r3, #1
24014720:	75fb      	strb	r3, [r7, #23]
      break;
24014722:	e002      	b.n	2401472a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
24014724:	bf00      	nop
24014726:	e000      	b.n	2401472a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
24014728:	bf00      	nop
    }

    if(ret == HAL_OK)
2401472a:	7dfb      	ldrb	r3, [r7, #23]
2401472c:	2b00      	cmp	r3, #0
2401472e:	d109      	bne.n	24014744 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24014730:	4b55      	ldr	r3, [pc, #340]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24014734:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
24014738:	687b      	ldr	r3, [r7, #4]
2401473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2401473c:	4952      	ldr	r1, [pc, #328]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
2401473e:	4313      	orrs	r3, r2
24014740:	650b      	str	r3, [r1, #80]	; 0x50
24014742:	e001      	b.n	24014748 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014744:	7dfb      	ldrb	r3, [r7, #23]
24014746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24014748:	687b      	ldr	r3, [r7, #4]
2401474a:	681b      	ldr	r3, [r3, #0]
2401474c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24014750:	2b00      	cmp	r3, #0
24014752:	d049      	beq.n	240147e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
24014754:	687b      	ldr	r3, [r7, #4]
24014756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24014758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2401475c:	d02e      	beq.n	240147bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
2401475e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24014762:	d828      	bhi.n	240147b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
24014764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24014768:	d02a      	beq.n	240147c0 <HAL_RCCEx_PeriphCLKConfig+0x480>
2401476a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2401476e:	d822      	bhi.n	240147b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
24014770:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24014774:	d026      	beq.n	240147c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
24014776:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2401477a:	d81c      	bhi.n	240147b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
2401477c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24014780:	d010      	beq.n	240147a4 <HAL_RCCEx_PeriphCLKConfig+0x464>
24014782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24014786:	d816      	bhi.n	240147b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
24014788:	2b00      	cmp	r3, #0
2401478a:	d01d      	beq.n	240147c8 <HAL_RCCEx_PeriphCLKConfig+0x488>
2401478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24014790:	d111      	bne.n	240147b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014792:	687b      	ldr	r3, [r7, #4]
24014794:	3304      	adds	r3, #4
24014796:	2101      	movs	r1, #1
24014798:	4618      	mov	r0, r3
2401479a:	f002 f9bf 	bl	24016b1c <RCCEx_PLL2_Config>
2401479e:	4603      	mov	r3, r0
240147a0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
240147a2:	e012      	b.n	240147ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
240147a4:	687b      	ldr	r3, [r7, #4]
240147a6:	3324      	adds	r3, #36	; 0x24
240147a8:	2101      	movs	r1, #1
240147aa:	4618      	mov	r0, r3
240147ac:	f002 fa68 	bl	24016c80 <RCCEx_PLL3_Config>
240147b0:	4603      	mov	r3, r0
240147b2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
240147b4:	e009      	b.n	240147ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240147b6:	2301      	movs	r3, #1
240147b8:	75fb      	strb	r3, [r7, #23]
      break;
240147ba:	e006      	b.n	240147ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
240147bc:	bf00      	nop
240147be:	e004      	b.n	240147ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
240147c0:	bf00      	nop
240147c2:	e002      	b.n	240147ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
240147c4:	bf00      	nop
240147c6:	e000      	b.n	240147ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
240147c8:	bf00      	nop
    }

    if(ret == HAL_OK)
240147ca:	7dfb      	ldrb	r3, [r7, #23]
240147cc:	2b00      	cmp	r3, #0
240147ce:	d109      	bne.n	240147e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
240147d0:	4b2d      	ldr	r3, [pc, #180]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240147d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240147d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
240147d8:	687b      	ldr	r3, [r7, #4]
240147da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240147dc:	492a      	ldr	r1, [pc, #168]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
240147de:	4313      	orrs	r3, r2
240147e0:	650b      	str	r3, [r1, #80]	; 0x50
240147e2:	e001      	b.n	240147e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
240147e4:	7dfb      	ldrb	r3, [r7, #23]
240147e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
240147e8:	687b      	ldr	r3, [r7, #4]
240147ea:	681b      	ldr	r3, [r3, #0]
240147ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
240147f0:	2b00      	cmp	r3, #0
240147f2:	d04d      	beq.n	24014890 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
240147f4:	687b      	ldr	r3, [r7, #4]
240147f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
240147fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
240147fe:	d02e      	beq.n	2401485e <HAL_RCCEx_PeriphCLKConfig+0x51e>
24014800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24014804:	d828      	bhi.n	24014858 <HAL_RCCEx_PeriphCLKConfig+0x518>
24014806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2401480a:	d02a      	beq.n	24014862 <HAL_RCCEx_PeriphCLKConfig+0x522>
2401480c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24014810:	d822      	bhi.n	24014858 <HAL_RCCEx_PeriphCLKConfig+0x518>
24014812:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24014816:	d026      	beq.n	24014866 <HAL_RCCEx_PeriphCLKConfig+0x526>
24014818:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2401481c:	d81c      	bhi.n	24014858 <HAL_RCCEx_PeriphCLKConfig+0x518>
2401481e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014822:	d010      	beq.n	24014846 <HAL_RCCEx_PeriphCLKConfig+0x506>
24014824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014828:	d816      	bhi.n	24014858 <HAL_RCCEx_PeriphCLKConfig+0x518>
2401482a:	2b00      	cmp	r3, #0
2401482c:	d01d      	beq.n	2401486a <HAL_RCCEx_PeriphCLKConfig+0x52a>
2401482e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24014832:	d111      	bne.n	24014858 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014834:	687b      	ldr	r3, [r7, #4]
24014836:	3304      	adds	r3, #4
24014838:	2101      	movs	r1, #1
2401483a:	4618      	mov	r0, r3
2401483c:	f002 f96e 	bl	24016b1c <RCCEx_PLL2_Config>
24014840:	4603      	mov	r3, r0
24014842:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
24014844:	e012      	b.n	2401486c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014846:	687b      	ldr	r3, [r7, #4]
24014848:	3324      	adds	r3, #36	; 0x24
2401484a:	2101      	movs	r1, #1
2401484c:	4618      	mov	r0, r3
2401484e:	f002 fa17 	bl	24016c80 <RCCEx_PLL3_Config>
24014852:	4603      	mov	r3, r0
24014854:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
24014856:	e009      	b.n	2401486c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
24014858:	2301      	movs	r3, #1
2401485a:	75fb      	strb	r3, [r7, #23]
      break;
2401485c:	e006      	b.n	2401486c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
2401485e:	bf00      	nop
24014860:	e004      	b.n	2401486c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
24014862:	bf00      	nop
24014864:	e002      	b.n	2401486c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
24014866:	bf00      	nop
24014868:	e000      	b.n	2401486c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
2401486a:	bf00      	nop
    }

    if(ret == HAL_OK)
2401486c:	7dfb      	ldrb	r3, [r7, #23]
2401486e:	2b00      	cmp	r3, #0
24014870:	d10c      	bne.n	2401488c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24014872:	4b05      	ldr	r3, [pc, #20]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014876:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
2401487a:	687b      	ldr	r3, [r7, #4]
2401487c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
24014880:	4901      	ldr	r1, [pc, #4]	; (24014888 <HAL_RCCEx_PeriphCLKConfig+0x548>)
24014882:	4313      	orrs	r3, r2
24014884:	658b      	str	r3, [r1, #88]	; 0x58
24014886:	e003      	b.n	24014890 <HAL_RCCEx_PeriphCLKConfig+0x550>
24014888:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2401488c:	7dfb      	ldrb	r3, [r7, #23]
2401488e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24014890:	687b      	ldr	r3, [r7, #4]
24014892:	681b      	ldr	r3, [r3, #0]
24014894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24014898:	2b00      	cmp	r3, #0
2401489a:	d02f      	beq.n	240148fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
2401489c:	687b      	ldr	r3, [r7, #4]
2401489e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240148a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240148a4:	d00e      	beq.n	240148c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
240148a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240148aa:	d814      	bhi.n	240148d6 <HAL_RCCEx_PeriphCLKConfig+0x596>
240148ac:	2b00      	cmp	r3, #0
240148ae:	d015      	beq.n	240148dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
240148b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240148b4:	d10f      	bne.n	240148d6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240148b6:	4baf      	ldr	r3, [pc, #700]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240148b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240148ba:	4aae      	ldr	r2, [pc, #696]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240148bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240148c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
240148c2:	e00c      	b.n	240148de <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
240148c4:	687b      	ldr	r3, [r7, #4]
240148c6:	3304      	adds	r3, #4
240148c8:	2101      	movs	r1, #1
240148ca:	4618      	mov	r0, r3
240148cc:	f002 f926 	bl	24016b1c <RCCEx_PLL2_Config>
240148d0:	4603      	mov	r3, r0
240148d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
240148d4:	e003      	b.n	240148de <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240148d6:	2301      	movs	r3, #1
240148d8:	75fb      	strb	r3, [r7, #23]
      break;
240148da:	e000      	b.n	240148de <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
240148dc:	bf00      	nop
    }

    if(ret == HAL_OK)
240148de:	7dfb      	ldrb	r3, [r7, #23]
240148e0:	2b00      	cmp	r3, #0
240148e2:	d109      	bne.n	240148f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
240148e4:	4ba3      	ldr	r3, [pc, #652]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240148e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240148e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
240148ec:	687b      	ldr	r3, [r7, #4]
240148ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240148f0:	49a0      	ldr	r1, [pc, #640]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240148f2:	4313      	orrs	r3, r2
240148f4:	650b      	str	r3, [r1, #80]	; 0x50
240148f6:	e001      	b.n	240148fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
240148f8:	7dfb      	ldrb	r3, [r7, #23]
240148fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
240148fc:	687b      	ldr	r3, [r7, #4]
240148fe:	681b      	ldr	r3, [r3, #0]
24014900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24014904:	2b00      	cmp	r3, #0
24014906:	d032      	beq.n	2401496e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
24014908:	687b      	ldr	r3, [r7, #4]
2401490a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2401490c:	2b03      	cmp	r3, #3
2401490e:	d81b      	bhi.n	24014948 <HAL_RCCEx_PeriphCLKConfig+0x608>
24014910:	a201      	add	r2, pc, #4	; (adr r2, 24014918 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
24014912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014916:	bf00      	nop
24014918:	2401494f 	.word	0x2401494f
2401491c:	24014929 	.word	0x24014929
24014920:	24014937 	.word	0x24014937
24014924:	2401494f 	.word	0x2401494f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014928:	4b92      	ldr	r3, [pc, #584]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401492c:	4a91      	ldr	r2, [pc, #580]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
2401492e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
24014934:	e00c      	b.n	24014950 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24014936:	687b      	ldr	r3, [r7, #4]
24014938:	3304      	adds	r3, #4
2401493a:	2102      	movs	r1, #2
2401493c:	4618      	mov	r0, r3
2401493e:	f002 f8ed 	bl	24016b1c <RCCEx_PLL2_Config>
24014942:	4603      	mov	r3, r0
24014944:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
24014946:	e003      	b.n	24014950 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
24014948:	2301      	movs	r3, #1
2401494a:	75fb      	strb	r3, [r7, #23]
      break;
2401494c:	e000      	b.n	24014950 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
2401494e:	bf00      	nop
    }

    if(ret == HAL_OK)
24014950:	7dfb      	ldrb	r3, [r7, #23]
24014952:	2b00      	cmp	r3, #0
24014954:	d109      	bne.n	2401496a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24014956:	4b87      	ldr	r3, [pc, #540]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401495a:	f023 0203 	bic.w	r2, r3, #3
2401495e:	687b      	ldr	r3, [r7, #4]
24014960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24014962:	4984      	ldr	r1, [pc, #528]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014964:	4313      	orrs	r3, r2
24014966:	64cb      	str	r3, [r1, #76]	; 0x4c
24014968:	e001      	b.n	2401496e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401496a:	7dfb      	ldrb	r3, [r7, #23]
2401496c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2401496e:	687b      	ldr	r3, [r7, #4]
24014970:	681b      	ldr	r3, [r3, #0]
24014972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24014976:	2b00      	cmp	r3, #0
24014978:	f000 8086 	beq.w	24014a88 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2401497c:	4b7e      	ldr	r3, [pc, #504]	; (24014b78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
2401497e:	681b      	ldr	r3, [r3, #0]
24014980:	4a7d      	ldr	r2, [pc, #500]	; (24014b78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
24014982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24014986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24014988:	f7ed fc38 	bl	240021fc <HAL_GetTick>
2401498c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
2401498e:	e009      	b.n	240149a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24014990:	f7ed fc34 	bl	240021fc <HAL_GetTick>
24014994:	4602      	mov	r2, r0
24014996:	693b      	ldr	r3, [r7, #16]
24014998:	1ad3      	subs	r3, r2, r3
2401499a:	2b64      	cmp	r3, #100	; 0x64
2401499c:	d902      	bls.n	240149a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
2401499e:	2303      	movs	r3, #3
240149a0:	75fb      	strb	r3, [r7, #23]
        break;
240149a2:	e005      	b.n	240149b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
240149a4:	4b74      	ldr	r3, [pc, #464]	; (24014b78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
240149a6:	681b      	ldr	r3, [r3, #0]
240149a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
240149ac:	2b00      	cmp	r3, #0
240149ae:	d0ef      	beq.n	24014990 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
240149b0:	7dfb      	ldrb	r3, [r7, #23]
240149b2:	2b00      	cmp	r3, #0
240149b4:	d166      	bne.n	24014a84 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
240149b6:	4b6f      	ldr	r3, [pc, #444]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240149ba:	687b      	ldr	r3, [r7, #4]
240149bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
240149c0:	4053      	eors	r3, r2
240149c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
240149c6:	2b00      	cmp	r3, #0
240149c8:	d013      	beq.n	240149f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
240149ca:	4b6a      	ldr	r3, [pc, #424]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240149ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
240149d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
240149d4:	4b67      	ldr	r3, [pc, #412]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240149d8:	4a66      	ldr	r2, [pc, #408]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240149de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
240149e0:	4b64      	ldr	r3, [pc, #400]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240149e4:	4a63      	ldr	r2, [pc, #396]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240149ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
240149ec:	4a61      	ldr	r2, [pc, #388]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
240149ee:	68fb      	ldr	r3, [r7, #12]
240149f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
240149f2:	687b      	ldr	r3, [r7, #4]
240149f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
240149f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240149fc:	d115      	bne.n	24014a2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240149fe:	f7ed fbfd 	bl	240021fc <HAL_GetTick>
24014a02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24014a04:	e00b      	b.n	24014a1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24014a06:	f7ed fbf9 	bl	240021fc <HAL_GetTick>
24014a0a:	4602      	mov	r2, r0
24014a0c:	693b      	ldr	r3, [r7, #16]
24014a0e:	1ad3      	subs	r3, r2, r3
24014a10:	f241 3288 	movw	r2, #5000	; 0x1388
24014a14:	4293      	cmp	r3, r2
24014a16:	d902      	bls.n	24014a1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
24014a18:	2303      	movs	r3, #3
24014a1a:	75fb      	strb	r3, [r7, #23]
            break;
24014a1c:	e005      	b.n	24014a2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24014a1e:	4b55      	ldr	r3, [pc, #340]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24014a22:	f003 0302 	and.w	r3, r3, #2
24014a26:	2b00      	cmp	r3, #0
24014a28:	d0ed      	beq.n	24014a06 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
24014a2a:	7dfb      	ldrb	r3, [r7, #23]
24014a2c:	2b00      	cmp	r3, #0
24014a2e:	d126      	bne.n	24014a7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24014a30:	687b      	ldr	r3, [r7, #4]
24014a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24014a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
24014a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24014a3e:	d10d      	bne.n	24014a5c <HAL_RCCEx_PeriphCLKConfig+0x71c>
24014a40:	4b4c      	ldr	r3, [pc, #304]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014a42:	691b      	ldr	r3, [r3, #16]
24014a44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
24014a48:	687b      	ldr	r3, [r7, #4]
24014a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24014a4e:	0919      	lsrs	r1, r3, #4
24014a50:	4b4a      	ldr	r3, [pc, #296]	; (24014b7c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
24014a52:	400b      	ands	r3, r1
24014a54:	4947      	ldr	r1, [pc, #284]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014a56:	4313      	orrs	r3, r2
24014a58:	610b      	str	r3, [r1, #16]
24014a5a:	e005      	b.n	24014a68 <HAL_RCCEx_PeriphCLKConfig+0x728>
24014a5c:	4b45      	ldr	r3, [pc, #276]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014a5e:	691b      	ldr	r3, [r3, #16]
24014a60:	4a44      	ldr	r2, [pc, #272]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014a62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
24014a66:	6113      	str	r3, [r2, #16]
24014a68:	4b42      	ldr	r3, [pc, #264]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24014a6c:	687b      	ldr	r3, [r7, #4]
24014a6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24014a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
24014a76:	493f      	ldr	r1, [pc, #252]	; (24014b74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
24014a78:	4313      	orrs	r3, r2
24014a7a:	670b      	str	r3, [r1, #112]	; 0x70
24014a7c:	e004      	b.n	24014a88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
24014a7e:	7dfb      	ldrb	r3, [r7, #23]
24014a80:	75bb      	strb	r3, [r7, #22]
24014a82:	e001      	b.n	24014a88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
24014a84:	7dfb      	ldrb	r3, [r7, #23]
24014a86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24014a88:	687b      	ldr	r3, [r7, #4]
24014a8a:	681b      	ldr	r3, [r3, #0]
24014a8c:	f003 0301 	and.w	r3, r3, #1
24014a90:	2b00      	cmp	r3, #0
24014a92:	f000 8085 	beq.w	24014ba0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
24014a96:	687b      	ldr	r3, [r7, #4]
24014a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
24014a9a:	2b28      	cmp	r3, #40	; 0x28
24014a9c:	d866      	bhi.n	24014b6c <HAL_RCCEx_PeriphCLKConfig+0x82c>
24014a9e:	a201      	add	r2, pc, #4	; (adr r2, 24014aa4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
24014aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014aa4:	24014b81 	.word	0x24014b81
24014aa8:	24014b6d 	.word	0x24014b6d
24014aac:	24014b6d 	.word	0x24014b6d
24014ab0:	24014b6d 	.word	0x24014b6d
24014ab4:	24014b6d 	.word	0x24014b6d
24014ab8:	24014b6d 	.word	0x24014b6d
24014abc:	24014b6d 	.word	0x24014b6d
24014ac0:	24014b6d 	.word	0x24014b6d
24014ac4:	24014b49 	.word	0x24014b49
24014ac8:	24014b6d 	.word	0x24014b6d
24014acc:	24014b6d 	.word	0x24014b6d
24014ad0:	24014b6d 	.word	0x24014b6d
24014ad4:	24014b6d 	.word	0x24014b6d
24014ad8:	24014b6d 	.word	0x24014b6d
24014adc:	24014b6d 	.word	0x24014b6d
24014ae0:	24014b6d 	.word	0x24014b6d
24014ae4:	24014b5b 	.word	0x24014b5b
24014ae8:	24014b6d 	.word	0x24014b6d
24014aec:	24014b6d 	.word	0x24014b6d
24014af0:	24014b6d 	.word	0x24014b6d
24014af4:	24014b6d 	.word	0x24014b6d
24014af8:	24014b6d 	.word	0x24014b6d
24014afc:	24014b6d 	.word	0x24014b6d
24014b00:	24014b6d 	.word	0x24014b6d
24014b04:	24014b81 	.word	0x24014b81
24014b08:	24014b6d 	.word	0x24014b6d
24014b0c:	24014b6d 	.word	0x24014b6d
24014b10:	24014b6d 	.word	0x24014b6d
24014b14:	24014b6d 	.word	0x24014b6d
24014b18:	24014b6d 	.word	0x24014b6d
24014b1c:	24014b6d 	.word	0x24014b6d
24014b20:	24014b6d 	.word	0x24014b6d
24014b24:	24014b81 	.word	0x24014b81
24014b28:	24014b6d 	.word	0x24014b6d
24014b2c:	24014b6d 	.word	0x24014b6d
24014b30:	24014b6d 	.word	0x24014b6d
24014b34:	24014b6d 	.word	0x24014b6d
24014b38:	24014b6d 	.word	0x24014b6d
24014b3c:	24014b6d 	.word	0x24014b6d
24014b40:	24014b6d 	.word	0x24014b6d
24014b44:	24014b81 	.word	0x24014b81
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014b48:	687b      	ldr	r3, [r7, #4]
24014b4a:	3304      	adds	r3, #4
24014b4c:	2101      	movs	r1, #1
24014b4e:	4618      	mov	r0, r3
24014b50:	f001 ffe4 	bl	24016b1c <RCCEx_PLL2_Config>
24014b54:	4603      	mov	r3, r0
24014b56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
24014b58:	e013      	b.n	24014b82 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014b5a:	687b      	ldr	r3, [r7, #4]
24014b5c:	3324      	adds	r3, #36	; 0x24
24014b5e:	2101      	movs	r1, #1
24014b60:	4618      	mov	r0, r3
24014b62:	f002 f88d 	bl	24016c80 <RCCEx_PLL3_Config>
24014b66:	4603      	mov	r3, r0
24014b68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
24014b6a:	e00a      	b.n	24014b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014b6c:	2301      	movs	r3, #1
24014b6e:	75fb      	strb	r3, [r7, #23]
      break;
24014b70:	e007      	b.n	24014b82 <HAL_RCCEx_PeriphCLKConfig+0x842>
24014b72:	bf00      	nop
24014b74:	58024400 	.word	0x58024400
24014b78:	58024800 	.word	0x58024800
24014b7c:	00ffffcf 	.word	0x00ffffcf
      break;
24014b80:	bf00      	nop
    }

    if(ret == HAL_OK)
24014b82:	7dfb      	ldrb	r3, [r7, #23]
24014b84:	2b00      	cmp	r3, #0
24014b86:	d109      	bne.n	24014b9c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24014b88:	4b96      	ldr	r3, [pc, #600]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014b8c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
24014b90:	687b      	ldr	r3, [r7, #4]
24014b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
24014b94:	4993      	ldr	r1, [pc, #588]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014b96:	4313      	orrs	r3, r2
24014b98:	654b      	str	r3, [r1, #84]	; 0x54
24014b9a:	e001      	b.n	24014ba0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014b9c:	7dfb      	ldrb	r3, [r7, #23]
24014b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24014ba0:	687b      	ldr	r3, [r7, #4]
24014ba2:	681b      	ldr	r3, [r3, #0]
24014ba4:	f003 0302 	and.w	r3, r3, #2
24014ba8:	2b00      	cmp	r3, #0
24014baa:	d038      	beq.n	24014c1e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
24014bac:	687b      	ldr	r3, [r7, #4]
24014bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24014bb0:	2b05      	cmp	r3, #5
24014bb2:	d821      	bhi.n	24014bf8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
24014bb4:	a201      	add	r2, pc, #4	; (adr r2, 24014bbc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
24014bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014bba:	bf00      	nop
24014bbc:	24014bff 	.word	0x24014bff
24014bc0:	24014bd5 	.word	0x24014bd5
24014bc4:	24014be7 	.word	0x24014be7
24014bc8:	24014bff 	.word	0x24014bff
24014bcc:	24014bff 	.word	0x24014bff
24014bd0:	24014bff 	.word	0x24014bff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014bd4:	687b      	ldr	r3, [r7, #4]
24014bd6:	3304      	adds	r3, #4
24014bd8:	2101      	movs	r1, #1
24014bda:	4618      	mov	r0, r3
24014bdc:	f001 ff9e 	bl	24016b1c <RCCEx_PLL2_Config>
24014be0:	4603      	mov	r3, r0
24014be2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
24014be4:	e00c      	b.n	24014c00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014be6:	687b      	ldr	r3, [r7, #4]
24014be8:	3324      	adds	r3, #36	; 0x24
24014bea:	2101      	movs	r1, #1
24014bec:	4618      	mov	r0, r3
24014bee:	f002 f847 	bl	24016c80 <RCCEx_PLL3_Config>
24014bf2:	4603      	mov	r3, r0
24014bf4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
24014bf6:	e003      	b.n	24014c00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014bf8:	2301      	movs	r3, #1
24014bfa:	75fb      	strb	r3, [r7, #23]
      break;
24014bfc:	e000      	b.n	24014c00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
24014bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
24014c00:	7dfb      	ldrb	r3, [r7, #23]
24014c02:	2b00      	cmp	r3, #0
24014c04:	d109      	bne.n	24014c1a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24014c06:	4b77      	ldr	r3, [pc, #476]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014c0a:	f023 0207 	bic.w	r2, r3, #7
24014c0e:	687b      	ldr	r3, [r7, #4]
24014c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24014c12:	4974      	ldr	r1, [pc, #464]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014c14:	4313      	orrs	r3, r2
24014c16:	654b      	str	r3, [r1, #84]	; 0x54
24014c18:	e001      	b.n	24014c1e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014c1a:	7dfb      	ldrb	r3, [r7, #23]
24014c1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24014c1e:	687b      	ldr	r3, [r7, #4]
24014c20:	681b      	ldr	r3, [r3, #0]
24014c22:	f003 0304 	and.w	r3, r3, #4
24014c26:	2b00      	cmp	r3, #0
24014c28:	d03a      	beq.n	24014ca0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
24014c2a:	687b      	ldr	r3, [r7, #4]
24014c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24014c30:	2b05      	cmp	r3, #5
24014c32:	d821      	bhi.n	24014c78 <HAL_RCCEx_PeriphCLKConfig+0x938>
24014c34:	a201      	add	r2, pc, #4	; (adr r2, 24014c3c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
24014c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24014c3a:	bf00      	nop
24014c3c:	24014c7f 	.word	0x24014c7f
24014c40:	24014c55 	.word	0x24014c55
24014c44:	24014c67 	.word	0x24014c67
24014c48:	24014c7f 	.word	0x24014c7f
24014c4c:	24014c7f 	.word	0x24014c7f
24014c50:	24014c7f 	.word	0x24014c7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24014c54:	687b      	ldr	r3, [r7, #4]
24014c56:	3304      	adds	r3, #4
24014c58:	2101      	movs	r1, #1
24014c5a:	4618      	mov	r0, r3
24014c5c:	f001 ff5e 	bl	24016b1c <RCCEx_PLL2_Config>
24014c60:	4603      	mov	r3, r0
24014c62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
24014c64:	e00c      	b.n	24014c80 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014c66:	687b      	ldr	r3, [r7, #4]
24014c68:	3324      	adds	r3, #36	; 0x24
24014c6a:	2101      	movs	r1, #1
24014c6c:	4618      	mov	r0, r3
24014c6e:	f002 f807 	bl	24016c80 <RCCEx_PLL3_Config>
24014c72:	4603      	mov	r3, r0
24014c74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
24014c76:	e003      	b.n	24014c80 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014c78:	2301      	movs	r3, #1
24014c7a:	75fb      	strb	r3, [r7, #23]
      break;
24014c7c:	e000      	b.n	24014c80 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
24014c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
24014c80:	7dfb      	ldrb	r3, [r7, #23]
24014c82:	2b00      	cmp	r3, #0
24014c84:	d10a      	bne.n	24014c9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24014c86:	4b57      	ldr	r3, [pc, #348]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014c8a:	f023 0207 	bic.w	r2, r3, #7
24014c8e:	687b      	ldr	r3, [r7, #4]
24014c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24014c94:	4953      	ldr	r1, [pc, #332]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014c96:	4313      	orrs	r3, r2
24014c98:	658b      	str	r3, [r1, #88]	; 0x58
24014c9a:	e001      	b.n	24014ca0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014c9c:	7dfb      	ldrb	r3, [r7, #23]
24014c9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24014ca0:	687b      	ldr	r3, [r7, #4]
24014ca2:	681b      	ldr	r3, [r3, #0]
24014ca4:	f003 0320 	and.w	r3, r3, #32
24014ca8:	2b00      	cmp	r3, #0
24014caa:	d04b      	beq.n	24014d44 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
24014cac:	687b      	ldr	r3, [r7, #4]
24014cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24014cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24014cb6:	d02e      	beq.n	24014d16 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
24014cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24014cbc:	d828      	bhi.n	24014d10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24014cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24014cc2:	d02a      	beq.n	24014d1a <HAL_RCCEx_PeriphCLKConfig+0x9da>
24014cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24014cc8:	d822      	bhi.n	24014d10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24014cca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24014cce:	d026      	beq.n	24014d1e <HAL_RCCEx_PeriphCLKConfig+0x9de>
24014cd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24014cd4:	d81c      	bhi.n	24014d10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24014cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014cda:	d010      	beq.n	24014cfe <HAL_RCCEx_PeriphCLKConfig+0x9be>
24014cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24014ce0:	d816      	bhi.n	24014d10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
24014ce2:	2b00      	cmp	r3, #0
24014ce4:	d01d      	beq.n	24014d22 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
24014ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24014cea:	d111      	bne.n	24014d10 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014cec:	687b      	ldr	r3, [r7, #4]
24014cee:	3304      	adds	r3, #4
24014cf0:	2100      	movs	r1, #0
24014cf2:	4618      	mov	r0, r3
24014cf4:	f001 ff12 	bl	24016b1c <RCCEx_PLL2_Config>
24014cf8:	4603      	mov	r3, r0
24014cfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
24014cfc:	e012      	b.n	24014d24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014cfe:	687b      	ldr	r3, [r7, #4]
24014d00:	3324      	adds	r3, #36	; 0x24
24014d02:	2102      	movs	r1, #2
24014d04:	4618      	mov	r0, r3
24014d06:	f001 ffbb 	bl	24016c80 <RCCEx_PLL3_Config>
24014d0a:	4603      	mov	r3, r0
24014d0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
24014d0e:	e009      	b.n	24014d24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014d10:	2301      	movs	r3, #1
24014d12:	75fb      	strb	r3, [r7, #23]
      break;
24014d14:	e006      	b.n	24014d24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
24014d16:	bf00      	nop
24014d18:	e004      	b.n	24014d24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
24014d1a:	bf00      	nop
24014d1c:	e002      	b.n	24014d24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
24014d1e:	bf00      	nop
24014d20:	e000      	b.n	24014d24 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
24014d22:	bf00      	nop
    }

    if(ret == HAL_OK)
24014d24:	7dfb      	ldrb	r3, [r7, #23]
24014d26:	2b00      	cmp	r3, #0
24014d28:	d10a      	bne.n	24014d40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24014d2a:	4b2e      	ldr	r3, [pc, #184]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014d2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
24014d32:	687b      	ldr	r3, [r7, #4]
24014d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24014d38:	492a      	ldr	r1, [pc, #168]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014d3a:	4313      	orrs	r3, r2
24014d3c:	654b      	str	r3, [r1, #84]	; 0x54
24014d3e:	e001      	b.n	24014d44 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014d40:	7dfb      	ldrb	r3, [r7, #23]
24014d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24014d44:	687b      	ldr	r3, [r7, #4]
24014d46:	681b      	ldr	r3, [r3, #0]
24014d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
24014d4c:	2b00      	cmp	r3, #0
24014d4e:	d04d      	beq.n	24014dec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
24014d50:	687b      	ldr	r3, [r7, #4]
24014d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24014d56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24014d5a:	d02e      	beq.n	24014dba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
24014d5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24014d60:	d828      	bhi.n	24014db4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24014d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24014d66:	d02a      	beq.n	24014dbe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
24014d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24014d6c:	d822      	bhi.n	24014db4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24014d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24014d72:	d026      	beq.n	24014dc2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
24014d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24014d78:	d81c      	bhi.n	24014db4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24014d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24014d7e:	d010      	beq.n	24014da2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
24014d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24014d84:	d816      	bhi.n	24014db4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
24014d86:	2b00      	cmp	r3, #0
24014d88:	d01d      	beq.n	24014dc6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
24014d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24014d8e:	d111      	bne.n	24014db4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014d90:	687b      	ldr	r3, [r7, #4]
24014d92:	3304      	adds	r3, #4
24014d94:	2100      	movs	r1, #0
24014d96:	4618      	mov	r0, r3
24014d98:	f001 fec0 	bl	24016b1c <RCCEx_PLL2_Config>
24014d9c:	4603      	mov	r3, r0
24014d9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
24014da0:	e012      	b.n	24014dc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014da2:	687b      	ldr	r3, [r7, #4]
24014da4:	3324      	adds	r3, #36	; 0x24
24014da6:	2102      	movs	r1, #2
24014da8:	4618      	mov	r0, r3
24014daa:	f001 ff69 	bl	24016c80 <RCCEx_PLL3_Config>
24014dae:	4603      	mov	r3, r0
24014db0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
24014db2:	e009      	b.n	24014dc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014db4:	2301      	movs	r3, #1
24014db6:	75fb      	strb	r3, [r7, #23]
      break;
24014db8:	e006      	b.n	24014dc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24014dba:	bf00      	nop
24014dbc:	e004      	b.n	24014dc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24014dbe:	bf00      	nop
24014dc0:	e002      	b.n	24014dc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24014dc2:	bf00      	nop
24014dc4:	e000      	b.n	24014dc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
24014dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
24014dc8:	7dfb      	ldrb	r3, [r7, #23]
24014dca:	2b00      	cmp	r3, #0
24014dcc:	d10c      	bne.n	24014de8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24014dce:	4b05      	ldr	r3, [pc, #20]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014dd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
24014dd6:	687b      	ldr	r3, [r7, #4]
24014dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24014ddc:	4901      	ldr	r1, [pc, #4]	; (24014de4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
24014dde:	4313      	orrs	r3, r2
24014de0:	658b      	str	r3, [r1, #88]	; 0x58
24014de2:	e003      	b.n	24014dec <HAL_RCCEx_PeriphCLKConfig+0xaac>
24014de4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24014de8:	7dfb      	ldrb	r3, [r7, #23]
24014dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24014dec:	687b      	ldr	r3, [r7, #4]
24014dee:	681b      	ldr	r3, [r3, #0]
24014df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
24014df4:	2b00      	cmp	r3, #0
24014df6:	d04b      	beq.n	24014e90 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
24014df8:	687b      	ldr	r3, [r7, #4]
24014dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24014dfe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24014e02:	d02e      	beq.n	24014e62 <HAL_RCCEx_PeriphCLKConfig+0xb22>
24014e04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24014e08:	d828      	bhi.n	24014e5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
24014e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24014e0e:	d02a      	beq.n	24014e66 <HAL_RCCEx_PeriphCLKConfig+0xb26>
24014e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24014e14:	d822      	bhi.n	24014e5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
24014e16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24014e1a:	d026      	beq.n	24014e6a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
24014e1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24014e20:	d81c      	bhi.n	24014e5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
24014e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24014e26:	d010      	beq.n	24014e4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
24014e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24014e2c:	d816      	bhi.n	24014e5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
24014e2e:	2b00      	cmp	r3, #0
24014e30:	d01d      	beq.n	24014e6e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
24014e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24014e36:	d111      	bne.n	24014e5c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014e38:	687b      	ldr	r3, [r7, #4]
24014e3a:	3304      	adds	r3, #4
24014e3c:	2100      	movs	r1, #0
24014e3e:	4618      	mov	r0, r3
24014e40:	f001 fe6c 	bl	24016b1c <RCCEx_PLL2_Config>
24014e44:	4603      	mov	r3, r0
24014e46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
24014e48:	e012      	b.n	24014e70 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014e4a:	687b      	ldr	r3, [r7, #4]
24014e4c:	3324      	adds	r3, #36	; 0x24
24014e4e:	2102      	movs	r1, #2
24014e50:	4618      	mov	r0, r3
24014e52:	f001 ff15 	bl	24016c80 <RCCEx_PLL3_Config>
24014e56:	4603      	mov	r3, r0
24014e58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
24014e5a:	e009      	b.n	24014e70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014e5c:	2301      	movs	r3, #1
24014e5e:	75fb      	strb	r3, [r7, #23]
      break;
24014e60:	e006      	b.n	24014e70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
24014e62:	bf00      	nop
24014e64:	e004      	b.n	24014e70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
24014e66:	bf00      	nop
24014e68:	e002      	b.n	24014e70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
24014e6a:	bf00      	nop
24014e6c:	e000      	b.n	24014e70 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
24014e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
24014e70:	7dfb      	ldrb	r3, [r7, #23]
24014e72:	2b00      	cmp	r3, #0
24014e74:	d10a      	bne.n	24014e8c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24014e76:	4b9d      	ldr	r3, [pc, #628]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
24014e7e:	687b      	ldr	r3, [r7, #4]
24014e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
24014e84:	4999      	ldr	r1, [pc, #612]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014e86:	4313      	orrs	r3, r2
24014e88:	658b      	str	r3, [r1, #88]	; 0x58
24014e8a:	e001      	b.n	24014e90 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014e8c:	7dfb      	ldrb	r3, [r7, #23]
24014e8e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24014e90:	687b      	ldr	r3, [r7, #4]
24014e92:	681b      	ldr	r3, [r3, #0]
24014e94:	f003 0308 	and.w	r3, r3, #8
24014e98:	2b00      	cmp	r3, #0
24014e9a:	d01a      	beq.n	24014ed2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
24014e9c:	687b      	ldr	r3, [r7, #4]
24014e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24014ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24014ea6:	d10a      	bne.n	24014ebe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
24014ea8:	687b      	ldr	r3, [r7, #4]
24014eaa:	3324      	adds	r3, #36	; 0x24
24014eac:	2102      	movs	r1, #2
24014eae:	4618      	mov	r0, r3
24014eb0:	f001 fee6 	bl	24016c80 <RCCEx_PLL3_Config>
24014eb4:	4603      	mov	r3, r0
24014eb6:	2b00      	cmp	r3, #0
24014eb8:	d001      	beq.n	24014ebe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
24014eba:	2301      	movs	r3, #1
24014ebc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24014ebe:	4b8b      	ldr	r3, [pc, #556]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
24014ec6:	687b      	ldr	r3, [r7, #4]
24014ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24014ecc:	4987      	ldr	r1, [pc, #540]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014ece:	4313      	orrs	r3, r2
24014ed0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24014ed2:	687b      	ldr	r3, [r7, #4]
24014ed4:	681b      	ldr	r3, [r3, #0]
24014ed6:	f003 0310 	and.w	r3, r3, #16
24014eda:	2b00      	cmp	r3, #0
24014edc:	d01a      	beq.n	24014f14 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
24014ede:	687b      	ldr	r3, [r7, #4]
24014ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24014ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24014ee8:	d10a      	bne.n	24014f00 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
24014eea:	687b      	ldr	r3, [r7, #4]
24014eec:	3324      	adds	r3, #36	; 0x24
24014eee:	2102      	movs	r1, #2
24014ef0:	4618      	mov	r0, r3
24014ef2:	f001 fec5 	bl	24016c80 <RCCEx_PLL3_Config>
24014ef6:	4603      	mov	r3, r0
24014ef8:	2b00      	cmp	r3, #0
24014efa:	d001      	beq.n	24014f00 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
24014efc:	2301      	movs	r3, #1
24014efe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24014f00:	4b7a      	ldr	r3, [pc, #488]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24014f08:	687b      	ldr	r3, [r7, #4]
24014f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24014f0e:	4977      	ldr	r1, [pc, #476]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f10:	4313      	orrs	r3, r2
24014f12:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24014f14:	687b      	ldr	r3, [r7, #4]
24014f16:	681b      	ldr	r3, [r3, #0]
24014f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24014f1c:	2b00      	cmp	r3, #0
24014f1e:	d034      	beq.n	24014f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
24014f20:	687b      	ldr	r3, [r7, #4]
24014f22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24014f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24014f2a:	d01d      	beq.n	24014f68 <HAL_RCCEx_PeriphCLKConfig+0xc28>
24014f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24014f30:	d817      	bhi.n	24014f62 <HAL_RCCEx_PeriphCLKConfig+0xc22>
24014f32:	2b00      	cmp	r3, #0
24014f34:	d003      	beq.n	24014f3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
24014f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24014f3a:	d009      	beq.n	24014f50 <HAL_RCCEx_PeriphCLKConfig+0xc10>
24014f3c:	e011      	b.n	24014f62 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24014f3e:	687b      	ldr	r3, [r7, #4]
24014f40:	3304      	adds	r3, #4
24014f42:	2100      	movs	r1, #0
24014f44:	4618      	mov	r0, r3
24014f46:	f001 fde9 	bl	24016b1c <RCCEx_PLL2_Config>
24014f4a:	4603      	mov	r3, r0
24014f4c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
24014f4e:	e00c      	b.n	24014f6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24014f50:	687b      	ldr	r3, [r7, #4]
24014f52:	3324      	adds	r3, #36	; 0x24
24014f54:	2102      	movs	r1, #2
24014f56:	4618      	mov	r0, r3
24014f58:	f001 fe92 	bl	24016c80 <RCCEx_PLL3_Config>
24014f5c:	4603      	mov	r3, r0
24014f5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
24014f60:	e003      	b.n	24014f6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014f62:	2301      	movs	r3, #1
24014f64:	75fb      	strb	r3, [r7, #23]
      break;
24014f66:	e000      	b.n	24014f6a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
24014f68:	bf00      	nop
    }

    if(ret == HAL_OK)
24014f6a:	7dfb      	ldrb	r3, [r7, #23]
24014f6c:	2b00      	cmp	r3, #0
24014f6e:	d10a      	bne.n	24014f86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24014f70:	4b5e      	ldr	r3, [pc, #376]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24014f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
24014f78:	687b      	ldr	r3, [r7, #4]
24014f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24014f7e:	495b      	ldr	r1, [pc, #364]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014f80:	4313      	orrs	r3, r2
24014f82:	658b      	str	r3, [r1, #88]	; 0x58
24014f84:	e001      	b.n	24014f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014f86:	7dfb      	ldrb	r3, [r7, #23]
24014f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24014f8a:	687b      	ldr	r3, [r7, #4]
24014f8c:	681b      	ldr	r3, [r3, #0]
24014f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24014f92:	2b00      	cmp	r3, #0
24014f94:	d033      	beq.n	24014ffe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
24014f96:	687b      	ldr	r3, [r7, #4]
24014f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24014f9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24014fa0:	d01c      	beq.n	24014fdc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
24014fa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24014fa6:	d816      	bhi.n	24014fd6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
24014fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24014fac:	d003      	beq.n	24014fb6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
24014fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24014fb2:	d007      	beq.n	24014fc4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
24014fb4:	e00f      	b.n	24014fd6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24014fb6:	4b4d      	ldr	r3, [pc, #308]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24014fba:	4a4c      	ldr	r2, [pc, #304]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24014fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
24014fc2:	e00c      	b.n	24014fde <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24014fc4:	687b      	ldr	r3, [r7, #4]
24014fc6:	3324      	adds	r3, #36	; 0x24
24014fc8:	2101      	movs	r1, #1
24014fca:	4618      	mov	r0, r3
24014fcc:	f001 fe58 	bl	24016c80 <RCCEx_PLL3_Config>
24014fd0:	4603      	mov	r3, r0
24014fd2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
24014fd4:	e003      	b.n	24014fde <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24014fd6:	2301      	movs	r3, #1
24014fd8:	75fb      	strb	r3, [r7, #23]
      break;
24014fda:	e000      	b.n	24014fde <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
24014fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
24014fde:	7dfb      	ldrb	r3, [r7, #23]
24014fe0:	2b00      	cmp	r3, #0
24014fe2:	d10a      	bne.n	24014ffa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24014fe4:	4b41      	ldr	r3, [pc, #260]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24014fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
24014fec:	687b      	ldr	r3, [r7, #4]
24014fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24014ff2:	493e      	ldr	r1, [pc, #248]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24014ff4:	4313      	orrs	r3, r2
24014ff6:	654b      	str	r3, [r1, #84]	; 0x54
24014ff8:	e001      	b.n	24014ffe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
24014ffa:	7dfb      	ldrb	r3, [r7, #23]
24014ffc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24014ffe:	687b      	ldr	r3, [r7, #4]
24015000:	681b      	ldr	r3, [r3, #0]
24015002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24015006:	2b00      	cmp	r3, #0
24015008:	d029      	beq.n	2401505e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
2401500a:	687b      	ldr	r3, [r7, #4]
2401500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401500e:	2b00      	cmp	r3, #0
24015010:	d003      	beq.n	2401501a <HAL_RCCEx_PeriphCLKConfig+0xcda>
24015012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24015016:	d007      	beq.n	24015028 <HAL_RCCEx_PeriphCLKConfig+0xce8>
24015018:	e00f      	b.n	2401503a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401501a:	4b34      	ldr	r3, [pc, #208]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
2401501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401501e:	4a33      	ldr	r2, [pc, #204]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24015024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
24015026:	e00b      	b.n	24015040 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24015028:	687b      	ldr	r3, [r7, #4]
2401502a:	3304      	adds	r3, #4
2401502c:	2102      	movs	r1, #2
2401502e:	4618      	mov	r0, r3
24015030:	f001 fd74 	bl	24016b1c <RCCEx_PLL2_Config>
24015034:	4603      	mov	r3, r0
24015036:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
24015038:	e002      	b.n	24015040 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
2401503a:	2301      	movs	r3, #1
2401503c:	75fb      	strb	r3, [r7, #23]
      break;
2401503e:	bf00      	nop
    }

    if(ret == HAL_OK)
24015040:	7dfb      	ldrb	r3, [r7, #23]
24015042:	2b00      	cmp	r3, #0
24015044:	d109      	bne.n	2401505a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24015046:	4b29      	ldr	r3, [pc, #164]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401504a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
2401504e:	687b      	ldr	r3, [r7, #4]
24015050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015052:	4926      	ldr	r1, [pc, #152]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
24015054:	4313      	orrs	r3, r2
24015056:	64cb      	str	r3, [r1, #76]	; 0x4c
24015058:	e001      	b.n	2401505e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401505a:	7dfb      	ldrb	r3, [r7, #23]
2401505c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2401505e:	687b      	ldr	r3, [r7, #4]
24015060:	681b      	ldr	r3, [r3, #0]
24015062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015066:	2b00      	cmp	r3, #0
24015068:	d00a      	beq.n	24015080 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
2401506a:	687b      	ldr	r3, [r7, #4]
2401506c:	3324      	adds	r3, #36	; 0x24
2401506e:	2102      	movs	r1, #2
24015070:	4618      	mov	r0, r3
24015072:	f001 fe05 	bl	24016c80 <RCCEx_PLL3_Config>
24015076:	4603      	mov	r3, r0
24015078:	2b00      	cmp	r3, #0
2401507a:	d001      	beq.n	24015080 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
2401507c:	2301      	movs	r3, #1
2401507e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24015080:	687b      	ldr	r3, [r7, #4]
24015082:	681b      	ldr	r3, [r3, #0]
24015084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015088:	2b00      	cmp	r3, #0
2401508a:	d033      	beq.n	240150f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
2401508c:	687b      	ldr	r3, [r7, #4]
2401508e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24015090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24015094:	d017      	beq.n	240150c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
24015096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2401509a:	d811      	bhi.n	240150c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
2401509c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240150a0:	d013      	beq.n	240150ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
240150a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240150a6:	d80b      	bhi.n	240150c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
240150a8:	2b00      	cmp	r3, #0
240150aa:	d010      	beq.n	240150ce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
240150ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240150b0:	d106      	bne.n	240150c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240150b2:	4b0e      	ldr	r3, [pc, #56]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240150b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240150b6:	4a0d      	ldr	r2, [pc, #52]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240150b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240150bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
240150be:	e007      	b.n	240150d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240150c0:	2301      	movs	r3, #1
240150c2:	75fb      	strb	r3, [r7, #23]
      break;
240150c4:	e004      	b.n	240150d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
240150c6:	bf00      	nop
240150c8:	e002      	b.n	240150d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
240150ca:	bf00      	nop
240150cc:	e000      	b.n	240150d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
240150ce:	bf00      	nop
    }

    if(ret == HAL_OK)
240150d0:	7dfb      	ldrb	r3, [r7, #23]
240150d2:	2b00      	cmp	r3, #0
240150d4:	d10c      	bne.n	240150f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
240150d6:	4b05      	ldr	r3, [pc, #20]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240150d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240150da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
240150de:	687b      	ldr	r3, [r7, #4]
240150e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
240150e2:	4902      	ldr	r1, [pc, #8]	; (240150ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
240150e4:	4313      	orrs	r3, r2
240150e6:	654b      	str	r3, [r1, #84]	; 0x54
240150e8:	e004      	b.n	240150f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
240150ea:	bf00      	nop
240150ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240150f0:	7dfb      	ldrb	r3, [r7, #23]
240150f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240150f4:	687b      	ldr	r3, [r7, #4]
240150f6:	681b      	ldr	r3, [r3, #0]
240150f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240150fc:	2b00      	cmp	r3, #0
240150fe:	d008      	beq.n	24015112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24015100:	4b31      	ldr	r3, [pc, #196]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015104:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24015108:	687b      	ldr	r3, [r7, #4]
2401510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401510c:	492e      	ldr	r1, [pc, #184]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401510e:	4313      	orrs	r3, r2
24015110:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24015112:	687b      	ldr	r3, [r7, #4]
24015114:	681b      	ldr	r3, [r3, #0]
24015116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2401511a:	2b00      	cmp	r3, #0
2401511c:	d009      	beq.n	24015132 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
2401511e:	4b2a      	ldr	r3, [pc, #168]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015120:	691b      	ldr	r3, [r3, #16]
24015122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
24015126:	687b      	ldr	r3, [r7, #4]
24015128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2401512c:	4926      	ldr	r1, [pc, #152]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401512e:	4313      	orrs	r3, r2
24015130:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24015132:	687b      	ldr	r3, [r7, #4]
24015134:	681b      	ldr	r3, [r3, #0]
24015136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2401513a:	2b00      	cmp	r3, #0
2401513c:	d008      	beq.n	24015150 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2401513e:	4b22      	ldr	r3, [pc, #136]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015142:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
24015146:	687b      	ldr	r3, [r7, #4]
24015148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2401514a:	491f      	ldr	r1, [pc, #124]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401514c:	4313      	orrs	r3, r2
2401514e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24015150:	687b      	ldr	r3, [r7, #4]
24015152:	681b      	ldr	r3, [r3, #0]
24015154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
24015158:	2b00      	cmp	r3, #0
2401515a:	d00d      	beq.n	24015178 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2401515c:	4b1a      	ldr	r3, [pc, #104]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401515e:	691b      	ldr	r3, [r3, #16]
24015160:	4a19      	ldr	r2, [pc, #100]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015162:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24015166:	6113      	str	r3, [r2, #16]
24015168:	4b17      	ldr	r3, [pc, #92]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401516a:	691a      	ldr	r2, [r3, #16]
2401516c:	687b      	ldr	r3, [r7, #4]
2401516e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
24015172:	4915      	ldr	r1, [pc, #84]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015174:	4313      	orrs	r3, r2
24015176:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24015178:	687b      	ldr	r3, [r7, #4]
2401517a:	681b      	ldr	r3, [r3, #0]
2401517c:	2b00      	cmp	r3, #0
2401517e:	da08      	bge.n	24015192 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24015180:	4b11      	ldr	r3, [pc, #68]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
24015182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015184:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
24015188:	687b      	ldr	r3, [r7, #4]
2401518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401518c:	490e      	ldr	r1, [pc, #56]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
2401518e:	4313      	orrs	r3, r2
24015190:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24015192:	687b      	ldr	r3, [r7, #4]
24015194:	681b      	ldr	r3, [r3, #0]
24015196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
2401519a:	2b00      	cmp	r3, #0
2401519c:	d009      	beq.n	240151b2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2401519e:	4b0a      	ldr	r3, [pc, #40]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240151a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240151a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
240151a6:	687b      	ldr	r3, [r7, #4]
240151a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240151ac:	4906      	ldr	r1, [pc, #24]	; (240151c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
240151ae:	4313      	orrs	r3, r2
240151b0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
240151b2:	7dbb      	ldrb	r3, [r7, #22]
240151b4:	2b00      	cmp	r3, #0
240151b6:	d101      	bne.n	240151bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
240151b8:	2300      	movs	r3, #0
240151ba:	e000      	b.n	240151be <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
240151bc:	2301      	movs	r3, #1
}
240151be:	4618      	mov	r0, r3
240151c0:	3718      	adds	r7, #24
240151c2:	46bd      	mov	sp, r7
240151c4:	bd80      	pop	{r7, pc}
240151c6:	bf00      	nop
240151c8:	58024400 	.word	0x58024400

240151cc <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
240151cc:	b480      	push	{r7}
240151ce:	b083      	sub	sp, #12
240151d0:	af00      	add	r7, sp, #0
240151d2:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
240151d4:	687b      	ldr	r3, [r7, #4]
240151d6:	4aa3      	ldr	r2, [pc, #652]	; (24015464 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
240151d8:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
240151da:	687b      	ldr	r3, [r7, #4]
240151dc:	681b      	ldr	r3, [r3, #0]
240151de:	f043 0208 	orr.w	r2, r3, #8
240151e2:	687b      	ldr	r3, [r7, #4]
240151e4:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)		 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
240151e6:	687b      	ldr	r3, [r7, #4]
240151e8:	681b      	ldr	r3, [r3, #0]
240151ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
240151ee:	687b      	ldr	r3, [r7, #4]
240151f0:	601a      	str	r2, [r3, #0]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
240151f2:	687b      	ldr	r3, [r7, #4]
240151f4:	681b      	ldr	r3, [r3, #0]
240151f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
240151fa:	687b      	ldr	r3, [r7, #4]
240151fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
240151fe:	687b      	ldr	r3, [r7, #4]
24015200:	681b      	ldr	r3, [r3, #0]
24015202:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
24015206:	687b      	ldr	r3, [r7, #4]
24015208:	601a      	str	r2, [r3, #0]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
2401520a:	687b      	ldr	r3, [r7, #4]
2401520c:	681b      	ldr	r3, [r3, #0]
2401520e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
24015212:	687b      	ldr	r3, [r7, #4]
24015214:	601a      	str	r2, [r3, #0]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
24015216:	687b      	ldr	r3, [r7, #4]
24015218:	681b      	ldr	r3, [r3, #0]
2401521a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
2401521e:	687b      	ldr	r3, [r7, #4]
24015220:	601a      	str	r2, [r3, #0]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
24015222:	687b      	ldr	r3, [r7, #4]
24015224:	681b      	ldr	r3, [r3, #0]
24015226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
2401522a:	687b      	ldr	r3, [r7, #4]
2401522c:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
2401522e:	4b8e      	ldr	r3, [pc, #568]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015232:	0d1b      	lsrs	r3, r3, #20
24015234:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24015238:	687b      	ldr	r3, [r7, #4]
2401523a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
2401523c:	4b8a      	ldr	r3, [pc, #552]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24015240:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015244:	1c5a      	adds	r2, r3, #1
24015246:	687b      	ldr	r3, [r7, #4]
24015248:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
2401524a:	4b87      	ldr	r3, [pc, #540]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401524e:	0e1b      	lsrs	r3, r3, #24
24015250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015254:	1c5a      	adds	r2, r3, #1
24015256:	687b      	ldr	r3, [r7, #4]
24015258:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
2401525a:	4b83      	ldr	r3, [pc, #524]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401525e:	0a5b      	lsrs	r3, r3, #9
24015260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015264:	1c5a      	adds	r2, r3, #1
24015266:	687b      	ldr	r3, [r7, #4]
24015268:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
2401526a:	4b7f      	ldr	r3, [pc, #508]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401526e:	0c1b      	lsrs	r3, r3, #16
24015270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24015274:	1c5a      	adds	r2, r3, #1
24015276:	687b      	ldr	r3, [r7, #4]
24015278:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
2401527a:	4b7b      	ldr	r3, [pc, #492]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401527e:	0a9b      	lsrs	r3, r3, #10
24015280:	f003 0203 	and.w	r2, r3, #3
24015284:	687b      	ldr	r3, [r7, #4]
24015286:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
24015288:	4b77      	ldr	r3, [pc, #476]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401528c:	0a5b      	lsrs	r3, r3, #9
2401528e:	f003 0201 	and.w	r2, r3, #1
24015292:	687b      	ldr	r3, [r7, #4]
24015294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
24015296:	4b74      	ldr	r3, [pc, #464]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401529a:	0b1b      	lsrs	r3, r3, #12
2401529c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240152a0:	687b      	ldr	r3, [r7, #4]
240152a2:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
240152a4:	4b70      	ldr	r3, [pc, #448]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240152a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
240152ac:	1c5a      	adds	r2, r3, #1
240152ae:	687b      	ldr	r3, [r7, #4]
240152b0:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
240152b2:	4b6d      	ldr	r3, [pc, #436]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240152b6:	0e1b      	lsrs	r3, r3, #24
240152b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240152bc:	1c5a      	adds	r2, r3, #1
240152be:	687b      	ldr	r3, [r7, #4]
240152c0:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
240152c2:	4b69      	ldr	r3, [pc, #420]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240152c6:	0a5b      	lsrs	r3, r3, #9
240152c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240152cc:	1c5a      	adds	r2, r3, #1
240152ce:	687b      	ldr	r3, [r7, #4]
240152d0:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
240152d2:	4b65      	ldr	r3, [pc, #404]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240152d6:	0c1b      	lsrs	r3, r3, #16
240152d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240152dc:	1c5a      	adds	r2, r3, #1
240152de:	687b      	ldr	r3, [r7, #4]
240152e0:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
240152e2:	4b61      	ldr	r3, [pc, #388]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240152e6:	099b      	lsrs	r3, r3, #6
240152e8:	f003 0203 	and.w	r2, r3, #3
240152ec:	687b      	ldr	r3, [r7, #4]
240152ee:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
240152f0:	4b5d      	ldr	r3, [pc, #372]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240152f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240152f4:	095b      	lsrs	r3, r3, #5
240152f6:	f003 0201 	and.w	r2, r3, #1
240152fa:	687b      	ldr	r3, [r7, #4]
240152fc:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
240152fe:	4b5a      	ldr	r3, [pc, #360]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015302:	f003 0238 	and.w	r2, r3, #56	; 0x38
24015306:	687b      	ldr	r3, [r7, #4]
24015308:	679a      	str	r2, [r3, #120]	; 0x78
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
2401530a:	4b57      	ldr	r3, [pc, #348]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401530e:	f003 0207 	and.w	r2, r3, #7
24015312:	687b      	ldr	r3, [r7, #4]
24015314:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
24015316:	4b54      	ldr	r3, [pc, #336]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401531a:	f003 0207 	and.w	r2, r3, #7
2401531e:	687b      	ldr	r3, [r7, #4]
24015320:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
24015324:	4b50      	ldr	r3, [pc, #320]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015328:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
2401532c:	687b      	ldr	r3, [r7, #4]
2401532e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
24015332:	4b4d      	ldr	r3, [pc, #308]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24015336:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
2401533a:	687b      	ldr	r3, [r7, #4]
2401533c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
24015340:	4b49      	ldr	r3, [pc, #292]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015344:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
24015348:	687b      	ldr	r3, [r7, #4]
2401534a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
2401534e:	4b46      	ldr	r3, [pc, #280]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015352:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
24015356:	687b      	ldr	r3, [r7, #4]
24015358:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
2401535c:	4b42      	ldr	r3, [pc, #264]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015360:	f003 0207 	and.w	r2, r3, #7
24015364:	687b      	ldr	r3, [r7, #4]
24015366:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
24015368:	4b3f      	ldr	r3, [pc, #252]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401536a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401536c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
24015370:	687b      	ldr	r3, [r7, #4]
24015372:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
24015374:	4b3c      	ldr	r3, [pc, #240]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015378:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
2401537c:	687b      	ldr	r3, [r7, #4]
2401537e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
24015382:	4b39      	ldr	r3, [pc, #228]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015386:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
2401538a:	687b      	ldr	r3, [r7, #4]
2401538c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
24015390:	4b35      	ldr	r3, [pc, #212]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24015394:	f403 7240 	and.w	r2, r3, #768	; 0x300
24015398:	687b      	ldr	r3, [r7, #4]
2401539a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
2401539e:	4b32      	ldr	r3, [pc, #200]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240153a2:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
240153a6:	687b      	ldr	r3, [r7, #4]
240153a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
240153ac:	4b2e      	ldr	r3, [pc, #184]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240153b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
240153b4:	687b      	ldr	r3, [r7, #4]
240153b6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
240153b8:	4b2b      	ldr	r3, [pc, #172]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240153bc:	f403 7240 	and.w	r2, r3, #768	; 0x300
240153c0:	687b      	ldr	r3, [r7, #4]
240153c2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
240153c4:	4b28      	ldr	r3, [pc, #160]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153c6:	691b      	ldr	r3, [r3, #16]
240153c8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
240153cc:	687b      	ldr	r3, [r7, #4]
240153ce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
240153d2:	4b25      	ldr	r3, [pc, #148]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240153d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
240153da:	687b      	ldr	r3, [r7, #4]
240153dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
240153e0:	4b21      	ldr	r3, [pc, #132]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240153e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
240153e8:	687b      	ldr	r3, [r7, #4]
240153ea:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
240153ec:	4b1e      	ldr	r3, [pc, #120]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240153f0:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
240153f4:	687b      	ldr	r3, [r7, #4]
240153f6:	669a      	str	r2, [r3, #104]	; 0x68
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
240153f8:	4b1b      	ldr	r3, [pc, #108]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240153fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240153fc:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
24015400:	687b      	ldr	r3, [r7, #4]
24015402:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
24015404:	4b18      	ldr	r3, [pc, #96]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015408:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
2401540c:	687b      	ldr	r3, [r7, #4]
2401540e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
24015410:	4b15      	ldr	r3, [pc, #84]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015414:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
24015418:	687b      	ldr	r3, [r7, #4]
2401541a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
2401541c:	4b12      	ldr	r3, [pc, #72]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015420:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
24015424:	687b      	ldr	r3, [r7, #4]
24015426:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
2401542a:	4b0f      	ldr	r3, [pc, #60]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401542c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2401542e:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
24015432:	687b      	ldr	r3, [r7, #4]
24015434:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
24015436:	4b0c      	ldr	r3, [pc, #48]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2401543a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
2401543e:	687b      	ldr	r3, [r7, #4]
24015440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
24015444:	4b08      	ldr	r3, [pc, #32]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015448:	f003 0203 	and.w	r2, r3, #3
2401544c:	687b      	ldr	r3, [r7, #4]
2401544e:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
24015450:	4b05      	ldr	r3, [pc, #20]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24015452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015454:	f003 0230 	and.w	r2, r3, #48	; 0x30
24015458:	687b      	ldr	r3, [r7, #4]
2401545a:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
2401545c:	4b02      	ldr	r3, [pc, #8]	; (24015468 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2401545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015460:	e004      	b.n	2401546c <HAL_RCCEx_GetPeriphCLKConfig+0x2a0>
24015462:	bf00      	nop
24015464:	c9fff1f7 	.word	0xc9fff1f7
24015468:	58024400 	.word	0x58024400
2401546c:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
24015470:	687b      	ldr	r3, [r7, #4]
24015472:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
24015474:	4b0a      	ldr	r3, [pc, #40]	; (240154a0 <HAL_RCCEx_GetPeriphCLKConfig+0x2d4>)
24015476:	691b      	ldr	r3, [r3, #16]
24015478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2401547c:	2b00      	cmp	r3, #0
2401547e:	d104      	bne.n	2401548a <HAL_RCCEx_GetPeriphCLKConfig+0x2be>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
24015480:	687b      	ldr	r3, [r7, #4]
24015482:	2200      	movs	r2, #0
24015484:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
24015488:	e004      	b.n	24015494 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2401548a:	687b      	ldr	r3, [r7, #4]
2401548c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
24015490:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
24015494:	bf00      	nop
24015496:	370c      	adds	r7, #12
24015498:	46bd      	mov	sp, r7
2401549a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401549e:	4770      	bx	lr
240154a0:	58024400 	.word	0x58024400

240154a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
240154a4:	b580      	push	{r7, lr}
240154a6:	b090      	sub	sp, #64	; 0x40
240154a8:	af00      	add	r7, sp, #0
240154aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
240154ac:	687b      	ldr	r3, [r7, #4]
240154ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240154b2:	f040 8095 	bne.w	240155e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
240154b6:	4b97      	ldr	r3, [pc, #604]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240154b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240154ba:	f003 0307 	and.w	r3, r3, #7
240154be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
240154c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240154c2:	2b04      	cmp	r3, #4
240154c4:	f200 8088 	bhi.w	240155d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
240154c8:	a201      	add	r2, pc, #4	; (adr r2, 240154d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
240154ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240154ce:	bf00      	nop
240154d0:	240154e5 	.word	0x240154e5
240154d4:	2401550d 	.word	0x2401550d
240154d8:	24015535 	.word	0x24015535
240154dc:	240155d1 	.word	0x240155d1
240154e0:	2401555d 	.word	0x2401555d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240154e4:	4b8b      	ldr	r3, [pc, #556]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240154e6:	681b      	ldr	r3, [r3, #0]
240154e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240154ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240154f0:	d108      	bne.n	24015504 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240154f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
240154f6:	4618      	mov	r0, r3
240154f8:	f000 ff7a 	bl	240163f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
240154fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
240154fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015500:	f000 bc94 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015504:	2300      	movs	r3, #0
24015506:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015508:	f000 bc90 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2401550c:	4b81      	ldr	r3, [pc, #516]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401550e:	681b      	ldr	r3, [r3, #0]
24015510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015518:	d108      	bne.n	2401552c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401551a:	f107 0318 	add.w	r3, r7, #24
2401551e:	4618      	mov	r0, r3
24015520:	f000 fcbe 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015524:	69bb      	ldr	r3, [r7, #24]
24015526:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015528:	f000 bc80 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
2401552c:	2300      	movs	r3, #0
2401552e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015530:	f000 bc7c 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015534:	4b77      	ldr	r3, [pc, #476]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015536:	681b      	ldr	r3, [r3, #0]
24015538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2401553c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015540:	d108      	bne.n	24015554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015542:	f107 030c 	add.w	r3, r7, #12
24015546:	4618      	mov	r0, r3
24015548:	f000 fdfe 	bl	24016148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2401554c:	68fb      	ldr	r3, [r7, #12]
2401554e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015550:	f000 bc6c 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015554:	2300      	movs	r3, #0
24015556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015558:	f000 bc68 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2401555c:	4b6d      	ldr	r3, [pc, #436]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401555e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015564:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24015566:	4b6b      	ldr	r3, [pc, #428]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015568:	681b      	ldr	r3, [r3, #0]
2401556a:	f003 0304 	and.w	r3, r3, #4
2401556e:	2b04      	cmp	r3, #4
24015570:	d10c      	bne.n	2401558c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
24015572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015574:	2b00      	cmp	r3, #0
24015576:	d109      	bne.n	2401558c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015578:	4b66      	ldr	r3, [pc, #408]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401557a:	681b      	ldr	r3, [r3, #0]
2401557c:	08db      	lsrs	r3, r3, #3
2401557e:	f003 0303 	and.w	r3, r3, #3
24015582:	4a65      	ldr	r2, [pc, #404]	; (24015718 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
24015584:	fa22 f303 	lsr.w	r3, r2, r3
24015588:	63fb      	str	r3, [r7, #60]	; 0x3c
2401558a:	e01f      	b.n	240155cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2401558c:	4b61      	ldr	r3, [pc, #388]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401558e:	681b      	ldr	r3, [r3, #0]
24015590:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015598:	d106      	bne.n	240155a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
2401559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401559c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240155a0:	d102      	bne.n	240155a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
240155a2:	4b5e      	ldr	r3, [pc, #376]	; (2401571c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240155a4:	63fb      	str	r3, [r7, #60]	; 0x3c
240155a6:	e011      	b.n	240155cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240155a8:	4b5a      	ldr	r3, [pc, #360]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240155aa:	681b      	ldr	r3, [r3, #0]
240155ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240155b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240155b4:	d106      	bne.n	240155c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
240155b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240155b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240155bc:	d102      	bne.n	240155c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
240155be:	4b58      	ldr	r3, [pc, #352]	; (24015720 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
240155c0:	63fb      	str	r3, [r7, #60]	; 0x3c
240155c2:	e003      	b.n	240155cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
240155c4:	2300      	movs	r3, #0
240155c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
240155c8:	f000 bc30 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
240155cc:	f000 bc2e 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
240155d0:	4b54      	ldr	r3, [pc, #336]	; (24015724 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
240155d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240155d4:	f000 bc2a 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
240155d8:	2300      	movs	r3, #0
240155da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240155dc:	f000 bc26 	b.w	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
240155e0:	687b      	ldr	r3, [r7, #4]
240155e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240155e6:	f040 809f 	bne.w	24015728 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
240155ea:	4b4a      	ldr	r3, [pc, #296]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240155ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240155ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
240155f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
240155f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240155f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240155fa:	d04d      	beq.n	24015698 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
240155fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240155fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015602:	f200 8084 	bhi.w	2401570e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
24015606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015608:	2bc0      	cmp	r3, #192	; 0xc0
2401560a:	d07d      	beq.n	24015708 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
2401560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401560e:	2bc0      	cmp	r3, #192	; 0xc0
24015610:	d87d      	bhi.n	2401570e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
24015612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015614:	2b80      	cmp	r3, #128	; 0x80
24015616:	d02d      	beq.n	24015674 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
24015618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401561a:	2b80      	cmp	r3, #128	; 0x80
2401561c:	d877      	bhi.n	2401570e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
2401561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015620:	2b00      	cmp	r3, #0
24015622:	d003      	beq.n	2401562c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
24015624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015626:	2b40      	cmp	r3, #64	; 0x40
24015628:	d012      	beq.n	24015650 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
2401562a:	e070      	b.n	2401570e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2401562c:	4b39      	ldr	r3, [pc, #228]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401562e:	681b      	ldr	r3, [r3, #0]
24015630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015638:	d107      	bne.n	2401564a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2401563a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2401563e:	4618      	mov	r0, r3
24015640:	f000 fed6 	bl	240163f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015644:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015646:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015648:	e3f0      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
2401564a:	2300      	movs	r3, #0
2401564c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401564e:	e3ed      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015650:	4b30      	ldr	r3, [pc, #192]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015652:	681b      	ldr	r3, [r3, #0]
24015654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2401565c:	d107      	bne.n	2401566e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401565e:	f107 0318 	add.w	r3, r7, #24
24015662:	4618      	mov	r0, r3
24015664:	f000 fc1c 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015668:	69bb      	ldr	r3, [r7, #24]
2401566a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2401566c:	e3de      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
2401566e:	2300      	movs	r3, #0
24015670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015672:	e3db      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015674:	4b27      	ldr	r3, [pc, #156]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
24015676:	681b      	ldr	r3, [r3, #0]
24015678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2401567c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015680:	d107      	bne.n	24015692 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015682:	f107 030c 	add.w	r3, r7, #12
24015686:	4618      	mov	r0, r3
24015688:	f000 fd5e 	bl	24016148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2401568c:	68fb      	ldr	r3, [r7, #12]
2401568e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015690:	e3cc      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015692:	2300      	movs	r3, #0
24015694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015696:	e3c9      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015698:	4b1e      	ldr	r3, [pc, #120]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
2401569a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2401569c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
240156a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240156a2:	4b1c      	ldr	r3, [pc, #112]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240156a4:	681b      	ldr	r3, [r3, #0]
240156a6:	f003 0304 	and.w	r3, r3, #4
240156aa:	2b04      	cmp	r3, #4
240156ac:	d10c      	bne.n	240156c8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
240156ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240156b0:	2b00      	cmp	r3, #0
240156b2:	d109      	bne.n	240156c8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240156b4:	4b17      	ldr	r3, [pc, #92]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240156b6:	681b      	ldr	r3, [r3, #0]
240156b8:	08db      	lsrs	r3, r3, #3
240156ba:	f003 0303 	and.w	r3, r3, #3
240156be:	4a16      	ldr	r2, [pc, #88]	; (24015718 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
240156c0:	fa22 f303 	lsr.w	r3, r2, r3
240156c4:	63fb      	str	r3, [r7, #60]	; 0x3c
240156c6:	e01e      	b.n	24015706 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240156c8:	4b12      	ldr	r3, [pc, #72]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240156ca:	681b      	ldr	r3, [r3, #0]
240156cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
240156d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240156d4:	d106      	bne.n	240156e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
240156d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240156d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240156dc:	d102      	bne.n	240156e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
240156de:	4b0f      	ldr	r3, [pc, #60]	; (2401571c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240156e0:	63fb      	str	r3, [r7, #60]	; 0x3c
240156e2:	e010      	b.n	24015706 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240156e4:	4b0b      	ldr	r3, [pc, #44]	; (24015714 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
240156e6:	681b      	ldr	r3, [r3, #0]
240156e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240156ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240156f0:	d106      	bne.n	24015700 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
240156f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240156f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240156f8:	d102      	bne.n	24015700 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
240156fa:	4b09      	ldr	r3, [pc, #36]	; (24015720 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
240156fc:	63fb      	str	r3, [r7, #60]	; 0x3c
240156fe:	e002      	b.n	24015706 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015700:	2300      	movs	r3, #0
24015702:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015704:	e392      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015706:	e391      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24015708:	4b06      	ldr	r3, [pc, #24]	; (24015724 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2401570a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401570c:	e38e      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
2401570e:	2300      	movs	r3, #0
24015710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015712:	e38b      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015714:	58024400 	.word	0x58024400
24015718:	03d09000 	.word	0x03d09000
2401571c:	003d0900 	.word	0x003d0900
24015720:	02dc6c00 	.word	0x02dc6c00
24015724:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24015728:	687b      	ldr	r3, [r7, #4]
2401572a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401572e:	f040 809c 	bne.w	2401586a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
24015732:	4b9d      	ldr	r3, [pc, #628]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015736:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
2401573a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
2401573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401573e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24015742:	d054      	beq.n	240157ee <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
24015744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015746:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2401574a:	f200 808b 	bhi.w	24015864 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
2401574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015750:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24015754:	f000 8083 	beq.w	2401585e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
24015758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401575a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2401575e:	f200 8081 	bhi.w	24015864 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
24015762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24015768:	d02f      	beq.n	240157ca <HAL_RCCEx_GetPeriphCLKFreq+0x326>
2401576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401576c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24015770:	d878      	bhi.n	24015864 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
24015772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015774:	2b00      	cmp	r3, #0
24015776:	d004      	beq.n	24015782 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
24015778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401577a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2401577e:	d012      	beq.n	240157a6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
24015780:	e070      	b.n	24015864 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015782:	4b89      	ldr	r3, [pc, #548]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015784:	681b      	ldr	r3, [r3, #0]
24015786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2401578a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2401578e:	d107      	bne.n	240157a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015790:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015794:	4618      	mov	r0, r3
24015796:	f000 fe2b 	bl	240163f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2401579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2401579c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2401579e:	e345      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240157a0:	2300      	movs	r3, #0
240157a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240157a4:	e342      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240157a6:	4b80      	ldr	r3, [pc, #512]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240157a8:	681b      	ldr	r3, [r3, #0]
240157aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240157ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240157b2:	d107      	bne.n	240157c4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240157b4:	f107 0318 	add.w	r3, r7, #24
240157b8:	4618      	mov	r0, r3
240157ba:	f000 fb71 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240157be:	69bb      	ldr	r3, [r7, #24]
240157c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240157c2:	e333      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240157c4:	2300      	movs	r3, #0
240157c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240157c8:	e330      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240157ca:	4b77      	ldr	r3, [pc, #476]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240157cc:	681b      	ldr	r3, [r3, #0]
240157ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240157d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240157d6:	d107      	bne.n	240157e8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240157d8:	f107 030c 	add.w	r3, r7, #12
240157dc:	4618      	mov	r0, r3
240157de:	f000 fcb3 	bl	24016148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240157e2:	68fb      	ldr	r3, [r7, #12]
240157e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240157e6:	e321      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240157e8:	2300      	movs	r3, #0
240157ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240157ec:	e31e      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
240157ee:	4b6e      	ldr	r3, [pc, #440]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240157f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240157f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
240157f6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240157f8:	4b6b      	ldr	r3, [pc, #428]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240157fa:	681b      	ldr	r3, [r3, #0]
240157fc:	f003 0304 	and.w	r3, r3, #4
24015800:	2b04      	cmp	r3, #4
24015802:	d10c      	bne.n	2401581e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
24015804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015806:	2b00      	cmp	r3, #0
24015808:	d109      	bne.n	2401581e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2401580a:	4b67      	ldr	r3, [pc, #412]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401580c:	681b      	ldr	r3, [r3, #0]
2401580e:	08db      	lsrs	r3, r3, #3
24015810:	f003 0303 	and.w	r3, r3, #3
24015814:	4a65      	ldr	r2, [pc, #404]	; (240159ac <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
24015816:	fa22 f303 	lsr.w	r3, r2, r3
2401581a:	63fb      	str	r3, [r7, #60]	; 0x3c
2401581c:	e01e      	b.n	2401585c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2401581e:	4b62      	ldr	r3, [pc, #392]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015820:	681b      	ldr	r3, [r3, #0]
24015822:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401582a:	d106      	bne.n	2401583a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
2401582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401582e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015832:	d102      	bne.n	2401583a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015834:	4b5e      	ldr	r3, [pc, #376]	; (240159b0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
24015836:	63fb      	str	r3, [r7, #60]	; 0x3c
24015838:	e010      	b.n	2401585c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2401583a:	4b5b      	ldr	r3, [pc, #364]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401583c:	681b      	ldr	r3, [r3, #0]
2401583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015846:	d106      	bne.n	24015856 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
24015848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401584a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401584e:	d102      	bne.n	24015856 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015850:	4b58      	ldr	r3, [pc, #352]	; (240159b4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
24015852:	63fb      	str	r3, [r7, #60]	; 0x3c
24015854:	e002      	b.n	2401585c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015856:	2300      	movs	r3, #0
24015858:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
2401585a:	e2e7      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
2401585c:	e2e6      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
2401585e:	4b56      	ldr	r3, [pc, #344]	; (240159b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24015860:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015862:	e2e3      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
24015864:	2300      	movs	r3, #0
24015866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015868:	e2e0      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
2401586a:	687b      	ldr	r3, [r7, #4]
2401586c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24015870:	f040 80a7 	bne.w	240159c2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
24015874:	4b4c      	ldr	r3, [pc, #304]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015878:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
2401587c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
2401587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24015884:	d055      	beq.n	24015932 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
24015886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2401588c:	f200 8096 	bhi.w	240159bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
24015890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24015892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24015896:	f000 8084 	beq.w	240159a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
2401589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2401589c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240158a0:	f200 808c 	bhi.w	240159bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
240158a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240158a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240158aa:	d030      	beq.n	2401590e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
240158ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240158ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240158b2:	f200 8083 	bhi.w	240159bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
240158b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240158b8:	2b00      	cmp	r3, #0
240158ba:	d004      	beq.n	240158c6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
240158bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240158be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240158c2:	d012      	beq.n	240158ea <HAL_RCCEx_GetPeriphCLKFreq+0x446>
240158c4:	e07a      	b.n	240159bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240158c6:	4b38      	ldr	r3, [pc, #224]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240158c8:	681b      	ldr	r3, [r3, #0]
240158ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240158ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240158d2:	d107      	bne.n	240158e4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240158d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
240158d8:	4618      	mov	r0, r3
240158da:	f000 fd89 	bl	240163f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240158de:	6abb      	ldr	r3, [r7, #40]	; 0x28
240158e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
240158e2:	e2a3      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
240158e4:	2300      	movs	r3, #0
240158e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240158e8:	e2a0      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240158ea:	4b2f      	ldr	r3, [pc, #188]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
240158ec:	681b      	ldr	r3, [r3, #0]
240158ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
240158f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
240158f6:	d107      	bne.n	24015908 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240158f8:	f107 0318 	add.w	r3, r7, #24
240158fc:	4618      	mov	r0, r3
240158fe:	f000 facf 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015902:	69bb      	ldr	r3, [r7, #24]
24015904:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
24015906:	e291      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015908:	2300      	movs	r3, #0
2401590a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2401590c:	e28e      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2401590e:	4b26      	ldr	r3, [pc, #152]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015910:	681b      	ldr	r3, [r3, #0]
24015912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2401591a:	d107      	bne.n	2401592c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2401591c:	f107 030c 	add.w	r3, r7, #12
24015920:	4618      	mov	r0, r3
24015922:	f000 fc11 	bl	24016148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24015926:	68fb      	ldr	r3, [r7, #12]
24015928:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2401592a:	e27f      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
2401592c:	2300      	movs	r3, #0
2401592e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015930:	e27c      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015932:	4b1d      	ldr	r3, [pc, #116]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2401593a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2401593c:	4b1a      	ldr	r3, [pc, #104]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
2401593e:	681b      	ldr	r3, [r3, #0]
24015940:	f003 0304 	and.w	r3, r3, #4
24015944:	2b04      	cmp	r3, #4
24015946:	d10c      	bne.n	24015962 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
24015948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401594a:	2b00      	cmp	r3, #0
2401594c:	d109      	bne.n	24015962 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2401594e:	4b16      	ldr	r3, [pc, #88]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015950:	681b      	ldr	r3, [r3, #0]
24015952:	08db      	lsrs	r3, r3, #3
24015954:	f003 0303 	and.w	r3, r3, #3
24015958:	4a14      	ldr	r2, [pc, #80]	; (240159ac <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
2401595a:	fa22 f303 	lsr.w	r3, r2, r3
2401595e:	63fb      	str	r3, [r7, #60]	; 0x3c
24015960:	e01e      	b.n	240159a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015962:	4b11      	ldr	r3, [pc, #68]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015964:	681b      	ldr	r3, [r3, #0]
24015966:	f403 7380 	and.w	r3, r3, #256	; 0x100
2401596a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2401596e:	d106      	bne.n	2401597e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
24015970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015976:	d102      	bne.n	2401597e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015978:	4b0d      	ldr	r3, [pc, #52]	; (240159b0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
2401597a:	63fb      	str	r3, [r7, #60]	; 0x3c
2401597c:	e010      	b.n	240159a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2401597e:	4b0a      	ldr	r3, [pc, #40]	; (240159a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
24015980:	681b      	ldr	r3, [r3, #0]
24015982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2401598a:	d106      	bne.n	2401599a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
2401598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2401598e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015992:	d102      	bne.n	2401599a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015994:	4b07      	ldr	r3, [pc, #28]	; (240159b4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
24015996:	63fb      	str	r3, [r7, #60]	; 0x3c
24015998:	e002      	b.n	240159a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
2401599a:	2300      	movs	r3, #0
2401599c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
2401599e:	e245      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
240159a0:	e244      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
240159a2:	4b05      	ldr	r3, [pc, #20]	; (240159b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
240159a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240159a6:	e241      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
240159a8:	58024400 	.word	0x58024400
240159ac:	03d09000 	.word	0x03d09000
240159b0:	003d0900 	.word	0x003d0900
240159b4:	02dc6c00 	.word	0x02dc6c00
240159b8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
240159bc:	2300      	movs	r3, #0
240159be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240159c0:	e234      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
240159c2:	687b      	ldr	r3, [r7, #4]
240159c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240159c8:	f040 809c 	bne.w	24015b04 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
240159cc:	4b9b      	ldr	r3, [pc, #620]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
240159ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240159d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
240159d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
240159d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240159d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240159dc:	d054      	beq.n	24015a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
240159de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240159e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240159e4:	f200 808b 	bhi.w	24015afe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
240159e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240159ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240159ee:	f000 8083 	beq.w	24015af8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
240159f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240159f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240159f8:	f200 8081 	bhi.w	24015afe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
240159fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240159fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24015a02:	d02f      	beq.n	24015a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
24015a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24015a0a:	d878      	bhi.n	24015afe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
24015a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015a0e:	2b00      	cmp	r3, #0
24015a10:	d004      	beq.n	24015a1c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
24015a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24015a18:	d012      	beq.n	24015a40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
24015a1a:	e070      	b.n	24015afe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015a1c:	4b87      	ldr	r3, [pc, #540]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a1e:	681b      	ldr	r3, [r3, #0]
24015a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015a28:	d107      	bne.n	24015a3a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015a2e:	4618      	mov	r0, r3
24015a30:	f000 fcde 	bl	240163f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015a36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015a38:	e1f8      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015a3a:	2300      	movs	r3, #0
24015a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015a3e:	e1f5      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015a40:	4b7e      	ldr	r3, [pc, #504]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a42:	681b      	ldr	r3, [r3, #0]
24015a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015a4c:	d107      	bne.n	24015a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015a4e:	f107 0318 	add.w	r3, r7, #24
24015a52:	4618      	mov	r0, r3
24015a54:	f000 fa24 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015a58:	69bb      	ldr	r3, [r7, #24]
24015a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015a5c:	e1e6      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015a5e:	2300      	movs	r3, #0
24015a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015a62:	e1e3      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015a64:	4b75      	ldr	r3, [pc, #468]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a66:	681b      	ldr	r3, [r3, #0]
24015a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015a70:	d107      	bne.n	24015a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015a72:	f107 030c 	add.w	r3, r7, #12
24015a76:	4618      	mov	r0, r3
24015a78:	f000 fb66 	bl	24016148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24015a7c:	68fb      	ldr	r3, [r7, #12]
24015a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015a80:	e1d4      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015a82:	2300      	movs	r3, #0
24015a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015a86:	e1d1      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015a88:	4b6c      	ldr	r3, [pc, #432]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015a90:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24015a92:	4b6a      	ldr	r3, [pc, #424]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015a94:	681b      	ldr	r3, [r3, #0]
24015a96:	f003 0304 	and.w	r3, r3, #4
24015a9a:	2b04      	cmp	r3, #4
24015a9c:	d10c      	bne.n	24015ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
24015a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015aa0:	2b00      	cmp	r3, #0
24015aa2:	d109      	bne.n	24015ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015aa4:	4b65      	ldr	r3, [pc, #404]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015aa6:	681b      	ldr	r3, [r3, #0]
24015aa8:	08db      	lsrs	r3, r3, #3
24015aaa:	f003 0303 	and.w	r3, r3, #3
24015aae:	4a64      	ldr	r2, [pc, #400]	; (24015c40 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
24015ab0:	fa22 f303 	lsr.w	r3, r2, r3
24015ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
24015ab6:	e01e      	b.n	24015af6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015ab8:	4b60      	ldr	r3, [pc, #384]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015aba:	681b      	ldr	r3, [r3, #0]
24015abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015ac4:	d106      	bne.n	24015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
24015ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015acc:	d102      	bne.n	24015ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015ace:	4b5d      	ldr	r3, [pc, #372]	; (24015c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
24015ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
24015ad2:	e010      	b.n	24015af6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24015ad4:	4b59      	ldr	r3, [pc, #356]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015ad6:	681b      	ldr	r3, [r3, #0]
24015ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015ae0:	d106      	bne.n	24015af0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
24015ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015ae8:	d102      	bne.n	24015af0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015aea:	4b57      	ldr	r3, [pc, #348]	; (24015c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
24015aec:	63fb      	str	r3, [r7, #60]	; 0x3c
24015aee:	e002      	b.n	24015af6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015af0:	2300      	movs	r3, #0
24015af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015af4:	e19a      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015af6:	e199      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24015af8:	4b54      	ldr	r3, [pc, #336]	; (24015c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
24015afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015afc:	e196      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
24015afe:	2300      	movs	r3, #0
24015b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015b02:	e193      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24015b04:	687b      	ldr	r3, [r7, #4]
24015b06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24015b0a:	d173      	bne.n	24015bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
24015b0c:	4b4b      	ldr	r3, [pc, #300]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24015b14:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015b1c:	d02f      	beq.n	24015b7e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
24015b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015b24:	d863      	bhi.n	24015bee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
24015b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015b28:	2b00      	cmp	r3, #0
24015b2a:	d004      	beq.n	24015b36 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
24015b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24015b32:	d012      	beq.n	24015b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
24015b34:	e05b      	b.n	24015bee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015b36:	4b41      	ldr	r3, [pc, #260]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b38:	681b      	ldr	r3, [r3, #0]
24015b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015b42:	d107      	bne.n	24015b54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015b44:	f107 0318 	add.w	r3, r7, #24
24015b48:	4618      	mov	r0, r3
24015b4a:	f000 f9a9 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24015b4e:	69bb      	ldr	r3, [r7, #24]
24015b50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015b52:	e16b      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015b54:	2300      	movs	r3, #0
24015b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015b58:	e168      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015b5a:	4b38      	ldr	r3, [pc, #224]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b5c:	681b      	ldr	r3, [r3, #0]
24015b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015b66:	d107      	bne.n	24015b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015b68:	f107 030c 	add.w	r3, r7, #12
24015b6c:	4618      	mov	r0, r3
24015b6e:	f000 faeb 	bl	24016148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24015b72:	697b      	ldr	r3, [r7, #20]
24015b74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015b76:	e159      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015b78:	2300      	movs	r3, #0
24015b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015b7c:	e156      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24015b7e:	4b2f      	ldr	r3, [pc, #188]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015b82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015b86:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24015b88:	4b2c      	ldr	r3, [pc, #176]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b8a:	681b      	ldr	r3, [r3, #0]
24015b8c:	f003 0304 	and.w	r3, r3, #4
24015b90:	2b04      	cmp	r3, #4
24015b92:	d10c      	bne.n	24015bae <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
24015b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015b96:	2b00      	cmp	r3, #0
24015b98:	d109      	bne.n	24015bae <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015b9a:	4b28      	ldr	r3, [pc, #160]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015b9c:	681b      	ldr	r3, [r3, #0]
24015b9e:	08db      	lsrs	r3, r3, #3
24015ba0:	f003 0303 	and.w	r3, r3, #3
24015ba4:	4a26      	ldr	r2, [pc, #152]	; (24015c40 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
24015ba6:	fa22 f303 	lsr.w	r3, r2, r3
24015baa:	63fb      	str	r3, [r7, #60]	; 0x3c
24015bac:	e01e      	b.n	24015bec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24015bae:	4b23      	ldr	r3, [pc, #140]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015bb0:	681b      	ldr	r3, [r3, #0]
24015bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015bba:	d106      	bne.n	24015bca <HAL_RCCEx_GetPeriphCLKFreq+0x726>
24015bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015bc2:	d102      	bne.n	24015bca <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
24015bc4:	4b1f      	ldr	r3, [pc, #124]	; (24015c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
24015bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
24015bc8:	e010      	b.n	24015bec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24015bca:	4b1c      	ldr	r3, [pc, #112]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015bcc:	681b      	ldr	r3, [r3, #0]
24015bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015bd6:	d106      	bne.n	24015be6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
24015bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24015bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015bde:	d102      	bne.n	24015be6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
24015be0:	4b19      	ldr	r3, [pc, #100]	; (24015c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
24015be2:	63fb      	str	r3, [r7, #60]	; 0x3c
24015be4:	e002      	b.n	24015bec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
24015be6:	2300      	movs	r3, #0
24015be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
24015bea:	e11f      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015bec:	e11e      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
24015bee:	2300      	movs	r3, #0
24015bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015bf2:	e11b      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24015bf4:	687b      	ldr	r3, [r7, #4]
24015bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24015bfa:	d13e      	bne.n	24015c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
24015bfc:	4b0f      	ldr	r3, [pc, #60]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24015c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24015c04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c08:	2b00      	cmp	r3, #0
24015c0a:	d004      	beq.n	24015c16 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
24015c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24015c12:	d01d      	beq.n	24015c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
24015c14:	e02e      	b.n	24015c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015c16:	4b09      	ldr	r3, [pc, #36]	; (24015c3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
24015c18:	681b      	ldr	r3, [r3, #0]
24015c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015c22:	d107      	bne.n	24015c34 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015c28:	4618      	mov	r0, r3
24015c2a:	f000 fbe1 	bl	240163f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015c30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015c32:	e0fb      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015c34:	2300      	movs	r3, #0
24015c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015c38:	e0f8      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24015c3a:	bf00      	nop
24015c3c:	58024400 	.word	0x58024400
24015c40:	03d09000 	.word	0x03d09000
24015c44:	003d0900 	.word	0x003d0900
24015c48:	02dc6c00 	.word	0x02dc6c00
24015c4c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015c50:	4b79      	ldr	r3, [pc, #484]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015c52:	681b      	ldr	r3, [r3, #0]
24015c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015c5c:	d107      	bne.n	24015c6e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015c5e:	f107 0318 	add.w	r3, r7, #24
24015c62:	4618      	mov	r0, r3
24015c64:	f000 f91c 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24015c68:	6a3b      	ldr	r3, [r7, #32]
24015c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015c6c:	e0de      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015c6e:	2300      	movs	r3, #0
24015c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015c72:	e0db      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
24015c74:	2300      	movs	r3, #0
24015c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015c78:	e0d8      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24015c7a:	687b      	ldr	r3, [r7, #4]
24015c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24015c80:	f040 8085 	bne.w	24015d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
24015c84:	4b6c      	ldr	r3, [pc, #432]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24015c88:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
24015c8c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24015c94:	d06b      	beq.n	24015d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
24015c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24015c9c:	d874      	bhi.n	24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24015c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24015ca4:	d056      	beq.n	24015d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
24015ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24015cac:	d86c      	bhi.n	24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24015cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015cb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24015cb4:	d03b      	beq.n	24015d2e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
24015cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24015cbc:	d864      	bhi.n	24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24015cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015cc4:	d021      	beq.n	24015d0a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
24015cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015ccc:	d85c      	bhi.n	24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24015cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015cd0:	2b00      	cmp	r3, #0
24015cd2:	d004      	beq.n	24015cde <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
24015cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015cda:	d004      	beq.n	24015ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
24015cdc:	e054      	b.n	24015d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
24015cde:	f000 f8c9 	bl	24015e74 <HAL_RCCEx_GetD3PCLK1Freq>
24015ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
24015ce4:	e0a2      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015ce6:	4b54      	ldr	r3, [pc, #336]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015ce8:	681b      	ldr	r3, [r3, #0]
24015cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015cf2:	d107      	bne.n	24015d04 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015cf4:	f107 0318 	add.w	r3, r7, #24
24015cf8:	4618      	mov	r0, r3
24015cfa:	f000 f8d1 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24015cfe:	69fb      	ldr	r3, [r7, #28]
24015d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015d02:	e093      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015d04:	2300      	movs	r3, #0
24015d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d08:	e090      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24015d0a:	4b4b      	ldr	r3, [pc, #300]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d0c:	681b      	ldr	r3, [r3, #0]
24015d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24015d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015d16:	d107      	bne.n	24015d28 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24015d18:	f107 030c 	add.w	r3, r7, #12
24015d1c:	4618      	mov	r0, r3
24015d1e:	f000 fa13 	bl	24016148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24015d22:	693b      	ldr	r3, [r7, #16]
24015d24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015d26:	e081      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015d28:	2300      	movs	r3, #0
24015d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d2c:	e07e      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24015d2e:	4b42      	ldr	r3, [pc, #264]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d30:	681b      	ldr	r3, [r3, #0]
24015d32:	f003 0304 	and.w	r3, r3, #4
24015d36:	2b04      	cmp	r3, #4
24015d38:	d109      	bne.n	24015d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015d3a:	4b3f      	ldr	r3, [pc, #252]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d3c:	681b      	ldr	r3, [r3, #0]
24015d3e:	08db      	lsrs	r3, r3, #3
24015d40:	f003 0303 	and.w	r3, r3, #3
24015d44:	4a3d      	ldr	r2, [pc, #244]	; (24015e3c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
24015d46:	fa22 f303 	lsr.w	r3, r2, r3
24015d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015d4c:	e06e      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015d4e:	2300      	movs	r3, #0
24015d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d52:	e06b      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24015d54:	4b38      	ldr	r3, [pc, #224]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d56:	681b      	ldr	r3, [r3, #0]
24015d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
24015d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24015d60:	d102      	bne.n	24015d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
24015d62:	4b37      	ldr	r3, [pc, #220]	; (24015e40 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24015d64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
24015d66:	e061      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
24015d68:	2300      	movs	r3, #0
24015d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d6c:	e05e      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24015d6e:	4b32      	ldr	r3, [pc, #200]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d70:	681b      	ldr	r3, [r3, #0]
24015d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015d7a:	d102      	bne.n	24015d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
24015d7c:	4b31      	ldr	r3, [pc, #196]	; (24015e44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
24015d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015d80:	e054      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015d82:	2300      	movs	r3, #0
24015d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d86:	e051      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
24015d88:	2300      	movs	r3, #0
24015d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015d8c:	e04e      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24015d8e:	687b      	ldr	r3, [r7, #4]
24015d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
24015d94:	d148      	bne.n	24015e28 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
24015d96:	4b28      	ldr	r3, [pc, #160]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24015d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24015d9e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24015da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015da6:	d02a      	beq.n	24015dfe <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
24015da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24015dae:	d838      	bhi.n	24015e22 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
24015db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015db2:	2b00      	cmp	r3, #0
24015db4:	d004      	beq.n	24015dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
24015db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24015db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24015dbc:	d00d      	beq.n	24015dda <HAL_RCCEx_GetPeriphCLKFreq+0x936>
24015dbe:	e030      	b.n	24015e22 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24015dc0:	4b1d      	ldr	r3, [pc, #116]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015dc2:	681b      	ldr	r3, [r3, #0]
24015dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24015dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24015dcc:	d102      	bne.n	24015dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
24015dce:	4b1d      	ldr	r3, [pc, #116]	; (24015e44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
24015dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015dd2:	e02b      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015dd4:	2300      	movs	r3, #0
24015dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015dd8:	e028      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24015dda:	4b17      	ldr	r3, [pc, #92]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015ddc:	681b      	ldr	r3, [r3, #0]
24015dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24015de2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24015de6:	d107      	bne.n	24015df8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24015de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
24015dec:	4618      	mov	r0, r3
24015dee:	f000 faff 	bl	240163f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24015df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
24015df4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015df6:	e019      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015df8:	2300      	movs	r3, #0
24015dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015dfc:	e016      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24015dfe:	4b0e      	ldr	r3, [pc, #56]	; (24015e38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24015e00:	681b      	ldr	r3, [r3, #0]
24015e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24015e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
24015e0a:	d107      	bne.n	24015e1c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24015e0c:	f107 0318 	add.w	r3, r7, #24
24015e10:	4618      	mov	r0, r3
24015e12:	f000 f845 	bl	24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24015e16:	69fb      	ldr	r3, [r7, #28]
24015e18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
24015e1a:	e007      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
24015e1c:	2300      	movs	r3, #0
24015e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015e20:	e004      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
24015e22:	2300      	movs	r3, #0
24015e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24015e26:	e001      	b.n	24015e2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
24015e28:	2300      	movs	r3, #0
24015e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
24015e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
24015e2e:	4618      	mov	r0, r3
24015e30:	3740      	adds	r7, #64	; 0x40
24015e32:	46bd      	mov	sp, r7
24015e34:	bd80      	pop	{r7, pc}
24015e36:	bf00      	nop
24015e38:	58024400 	.word	0x58024400
24015e3c:	03d09000 	.word	0x03d09000
24015e40:	003d0900 	.word	0x003d0900
24015e44:	02dc6c00 	.word	0x02dc6c00

24015e48 <HAL_RCCEx_GetD1PCLK1Freq>:
  * @note   Each time D1PCLK1 changes, this function must be called to update the
  *         right D1PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D1PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void)
{
24015e48:	b580      	push	{r7, lr}
24015e4a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1PPRE)
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE)>> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
24015e4c:	f7fe f8d0 	bl	24013ff0 <HAL_RCC_GetHCLKFreq>
24015e50:	4602      	mov	r2, r0
24015e52:	4b06      	ldr	r3, [pc, #24]	; (24015e6c <HAL_RCCEx_GetD1PCLK1Freq+0x24>)
24015e54:	699b      	ldr	r3, [r3, #24]
24015e56:	091b      	lsrs	r3, r3, #4
24015e58:	f003 0307 	and.w	r3, r3, #7
24015e5c:	4904      	ldr	r1, [pc, #16]	; (24015e70 <HAL_RCCEx_GetD1PCLK1Freq+0x28>)
24015e5e:	5ccb      	ldrb	r3, [r1, r3]
24015e60:	f003 031f 	and.w	r3, r3, #31
24015e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
/* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE)>> RCC_CDCFGR1_CDPPRE_Pos] & 0x1FU));
#endif
}
24015e68:	4618      	mov	r0, r3
24015e6a:	bd80      	pop	{r7, pc}
24015e6c:	58024400 	.word	0x58024400
24015e70:	24016ff4 	.word	0x24016ff4

24015e74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
24015e74:	b580      	push	{r7, lr}
24015e76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24015e78:	f7fe f8ba 	bl	24013ff0 <HAL_RCC_GetHCLKFreq>
24015e7c:	4602      	mov	r2, r0
24015e7e:	4b06      	ldr	r3, [pc, #24]	; (24015e98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
24015e80:	6a1b      	ldr	r3, [r3, #32]
24015e82:	091b      	lsrs	r3, r3, #4
24015e84:	f003 0307 	and.w	r3, r3, #7
24015e88:	4904      	ldr	r1, [pc, #16]	; (24015e9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
24015e8a:	5ccb      	ldrb	r3, [r1, r3]
24015e8c:	f003 031f 	and.w	r3, r3, #31
24015e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
24015e94:	4618      	mov	r0, r3
24015e96:	bd80      	pop	{r7, pc}
24015e98:	58024400 	.word	0x58024400
24015e9c:	24016ff4 	.word	0x24016ff4

24015ea0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
24015ea0:	b480      	push	{r7}
24015ea2:	b089      	sub	sp, #36	; 0x24
24015ea4:	af00      	add	r7, sp, #0
24015ea6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24015ea8:	4ba1      	ldr	r3, [pc, #644]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015eac:	f003 0303 	and.w	r3, r3, #3
24015eb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
24015eb2:	4b9f      	ldr	r3, [pc, #636]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24015eb6:	0b1b      	lsrs	r3, r3, #12
24015eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015ebc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24015ebe:	4b9c      	ldr	r3, [pc, #624]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24015ec2:	091b      	lsrs	r3, r3, #4
24015ec4:	f003 0301 	and.w	r3, r3, #1
24015ec8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
24015eca:	4b99      	ldr	r3, [pc, #612]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24015ece:	08db      	lsrs	r3, r3, #3
24015ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
24015ed4:	693a      	ldr	r2, [r7, #16]
24015ed6:	fb02 f303 	mul.w	r3, r2, r3
24015eda:	ee07 3a90 	vmov	s15, r3
24015ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015ee2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
24015ee6:	697b      	ldr	r3, [r7, #20]
24015ee8:	2b00      	cmp	r3, #0
24015eea:	f000 8111 	beq.w	24016110 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
24015eee:	69bb      	ldr	r3, [r7, #24]
24015ef0:	2b02      	cmp	r3, #2
24015ef2:	f000 8083 	beq.w	24015ffc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
24015ef6:	69bb      	ldr	r3, [r7, #24]
24015ef8:	2b02      	cmp	r3, #2
24015efa:	f200 80a1 	bhi.w	24016040 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
24015efe:	69bb      	ldr	r3, [r7, #24]
24015f00:	2b00      	cmp	r3, #0
24015f02:	d003      	beq.n	24015f0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
24015f04:	69bb      	ldr	r3, [r7, #24]
24015f06:	2b01      	cmp	r3, #1
24015f08:	d056      	beq.n	24015fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
24015f0a:	e099      	b.n	24016040 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24015f0c:	4b88      	ldr	r3, [pc, #544]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015f0e:	681b      	ldr	r3, [r3, #0]
24015f10:	f003 0320 	and.w	r3, r3, #32
24015f14:	2b00      	cmp	r3, #0
24015f16:	d02d      	beq.n	24015f74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24015f18:	4b85      	ldr	r3, [pc, #532]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015f1a:	681b      	ldr	r3, [r3, #0]
24015f1c:	08db      	lsrs	r3, r3, #3
24015f1e:	f003 0303 	and.w	r3, r3, #3
24015f22:	4a84      	ldr	r2, [pc, #528]	; (24016134 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
24015f24:	fa22 f303 	lsr.w	r3, r2, r3
24015f28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015f2a:	68bb      	ldr	r3, [r7, #8]
24015f2c:	ee07 3a90 	vmov	s15, r3
24015f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015f34:	697b      	ldr	r3, [r7, #20]
24015f36:	ee07 3a90 	vmov	s15, r3
24015f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015f42:	4b7b      	ldr	r3, [pc, #492]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015f4a:	ee07 3a90 	vmov	s15, r3
24015f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015f52:	ed97 6a03 	vldr	s12, [r7, #12]
24015f56:	eddf 5a78 	vldr	s11, [pc, #480]	; 24016138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24015f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
24015f6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
24015f72:	e087      	b.n	24016084 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015f74:	697b      	ldr	r3, [r7, #20]
24015f76:	ee07 3a90 	vmov	s15, r3
24015f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015f7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2401613c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
24015f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015f86:	4b6a      	ldr	r3, [pc, #424]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015f8e:	ee07 3a90 	vmov	s15, r3
24015f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015f96:	ed97 6a03 	vldr	s12, [r7, #12]
24015f9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 24016138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24015f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015fae:	ee67 7a27 	vmul.f32	s15, s14, s15
24015fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24015fb6:	e065      	b.n	24016084 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015fb8:	697b      	ldr	r3, [r7, #20]
24015fba:	ee07 3a90 	vmov	s15, r3
24015fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015fc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 24016140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
24015fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015fca:	4b59      	ldr	r3, [pc, #356]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24015fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24015fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015fd2:	ee07 3a90 	vmov	s15, r3
24015fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015fda:	ed97 6a03 	vldr	s12, [r7, #12]
24015fde:	eddf 5a56 	vldr	s11, [pc, #344]	; 24016138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24015fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24015fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
24015ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24015ffa:	e043      	b.n	24016084 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24015ffc:	697b      	ldr	r3, [r7, #20]
24015ffe:	ee07 3a90 	vmov	s15, r3
24016002:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016006:	eddf 6a4f 	vldr	s13, [pc, #316]	; 24016144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
2401600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401600e:	4b48      	ldr	r3, [pc, #288]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24016012:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016016:	ee07 3a90 	vmov	s15, r3
2401601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401601e:	ed97 6a03 	vldr	s12, [r7, #12]
24016022:	eddf 5a45 	vldr	s11, [pc, #276]	; 24016138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24016026:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401602e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016032:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016036:	ee67 7a27 	vmul.f32	s15, s14, s15
2401603a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2401603e:	e021      	b.n	24016084 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24016040:	697b      	ldr	r3, [r7, #20]
24016042:	ee07 3a90 	vmov	s15, r3
24016046:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401604a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 24016140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2401604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016052:	4b37      	ldr	r3, [pc, #220]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24016056:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401605a:	ee07 3a90 	vmov	s15, r3
2401605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016062:	ed97 6a03 	vldr	s12, [r7, #12]
24016066:	eddf 5a34 	vldr	s11, [pc, #208]	; 24016138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2401606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016076:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401607a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401607e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016082:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
24016084:	4b2a      	ldr	r3, [pc, #168]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24016086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24016088:	0a5b      	lsrs	r3, r3, #9
2401608a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401608e:	ee07 3a90 	vmov	s15, r3
24016092:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401609a:	ee37 7a87 	vadd.f32	s14, s15, s14
2401609e:	edd7 6a07 	vldr	s13, [r7, #28]
240160a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
240160a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240160aa:	ee17 2a90 	vmov	r2, s15
240160ae:	687b      	ldr	r3, [r7, #4]
240160b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
240160b2:	4b1f      	ldr	r3, [pc, #124]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240160b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240160b6:	0c1b      	lsrs	r3, r3, #16
240160b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240160bc:	ee07 3a90 	vmov	s15, r3
240160c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
240160c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240160c8:	ee37 7a87 	vadd.f32	s14, s15, s14
240160cc:	edd7 6a07 	vldr	s13, [r7, #28]
240160d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
240160d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240160d8:	ee17 2a90 	vmov	r2, s15
240160dc:	687b      	ldr	r3, [r7, #4]
240160de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
240160e0:	4b13      	ldr	r3, [pc, #76]	; (24016130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240160e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240160e4:	0e1b      	lsrs	r3, r3, #24
240160e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240160ea:	ee07 3a90 	vmov	s15, r3
240160ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
240160f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240160f6:	ee37 7a87 	vadd.f32	s14, s15, s14
240160fa:	edd7 6a07 	vldr	s13, [r7, #28]
240160fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016106:	ee17 2a90 	vmov	r2, s15
2401610a:	687b      	ldr	r3, [r7, #4]
2401610c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
2401610e:	e008      	b.n	24016122 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
24016110:	687b      	ldr	r3, [r7, #4]
24016112:	2200      	movs	r2, #0
24016114:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24016116:	687b      	ldr	r3, [r7, #4]
24016118:	2200      	movs	r2, #0
2401611a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2401611c:	687b      	ldr	r3, [r7, #4]
2401611e:	2200      	movs	r2, #0
24016120:	609a      	str	r2, [r3, #8]
}
24016122:	bf00      	nop
24016124:	3724      	adds	r7, #36	; 0x24
24016126:	46bd      	mov	sp, r7
24016128:	f85d 7b04 	ldr.w	r7, [sp], #4
2401612c:	4770      	bx	lr
2401612e:	bf00      	nop
24016130:	58024400 	.word	0x58024400
24016134:	03d09000 	.word	0x03d09000
24016138:	46000000 	.word	0x46000000
2401613c:	4c742400 	.word	0x4c742400
24016140:	4a742400 	.word	0x4a742400
24016144:	4c371b00 	.word	0x4c371b00

24016148 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
24016148:	b480      	push	{r7}
2401614a:	b089      	sub	sp, #36	; 0x24
2401614c:	af00      	add	r7, sp, #0
2401614e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24016150:	4ba1      	ldr	r3, [pc, #644]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016154:	f003 0303 	and.w	r3, r3, #3
24016158:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
2401615a:	4b9f      	ldr	r3, [pc, #636]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2401615e:	0d1b      	lsrs	r3, r3, #20
24016160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016164:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24016166:	4b9c      	ldr	r3, [pc, #624]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2401616a:	0a1b      	lsrs	r3, r3, #8
2401616c:	f003 0301 	and.w	r3, r3, #1
24016170:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
24016172:	4b99      	ldr	r3, [pc, #612]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24016176:	08db      	lsrs	r3, r3, #3
24016178:	f3c3 030c 	ubfx	r3, r3, #0, #13
2401617c:	693a      	ldr	r2, [r7, #16]
2401617e:	fb02 f303 	mul.w	r3, r2, r3
24016182:	ee07 3a90 	vmov	s15, r3
24016186:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401618a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
2401618e:	697b      	ldr	r3, [r7, #20]
24016190:	2b00      	cmp	r3, #0
24016192:	f000 8111 	beq.w	240163b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
24016196:	69bb      	ldr	r3, [r7, #24]
24016198:	2b02      	cmp	r3, #2
2401619a:	f000 8083 	beq.w	240162a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
2401619e:	69bb      	ldr	r3, [r7, #24]
240161a0:	2b02      	cmp	r3, #2
240161a2:	f200 80a1 	bhi.w	240162e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
240161a6:	69bb      	ldr	r3, [r7, #24]
240161a8:	2b00      	cmp	r3, #0
240161aa:	d003      	beq.n	240161b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
240161ac:	69bb      	ldr	r3, [r7, #24]
240161ae:	2b01      	cmp	r3, #1
240161b0:	d056      	beq.n	24016260 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
240161b2:	e099      	b.n	240162e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240161b4:	4b88      	ldr	r3, [pc, #544]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240161b6:	681b      	ldr	r3, [r3, #0]
240161b8:	f003 0320 	and.w	r3, r3, #32
240161bc:	2b00      	cmp	r3, #0
240161be:	d02d      	beq.n	2401621c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240161c0:	4b85      	ldr	r3, [pc, #532]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240161c2:	681b      	ldr	r3, [r3, #0]
240161c4:	08db      	lsrs	r3, r3, #3
240161c6:	f003 0303 	and.w	r3, r3, #3
240161ca:	4a84      	ldr	r2, [pc, #528]	; (240163dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
240161cc:	fa22 f303 	lsr.w	r3, r2, r3
240161d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
240161d2:	68bb      	ldr	r3, [r7, #8]
240161d4:	ee07 3a90 	vmov	s15, r3
240161d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
240161dc:	697b      	ldr	r3, [r7, #20]
240161de:	ee07 3a90 	vmov	s15, r3
240161e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240161e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240161ea:	4b7b      	ldr	r3, [pc, #492]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240161ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240161ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
240161f2:	ee07 3a90 	vmov	s15, r3
240161f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
240161fa:	ed97 6a03 	vldr	s12, [r7, #12]
240161fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 240163e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016202:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016206:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401620a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016212:	ee67 7a27 	vmul.f32	s15, s14, s15
24016216:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
2401621a:	e087      	b.n	2401632c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
2401621c:	697b      	ldr	r3, [r7, #20]
2401621e:	ee07 3a90 	vmov	s15, r3
24016222:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016226:	eddf 6a6f 	vldr	s13, [pc, #444]	; 240163e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
2401622a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401622e:	4b6a      	ldr	r3, [pc, #424]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016232:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016236:	ee07 3a90 	vmov	s15, r3
2401623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401623e:	ed97 6a03 	vldr	s12, [r7, #12]
24016242:	eddf 5a67 	vldr	s11, [pc, #412]	; 240163e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016246:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401624a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401624e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016252:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016256:	ee67 7a27 	vmul.f32	s15, s14, s15
2401625a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2401625e:	e065      	b.n	2401632c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24016260:	697b      	ldr	r3, [r7, #20]
24016262:	ee07 3a90 	vmov	s15, r3
24016266:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401626a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 240163e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2401626e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016272:	4b59      	ldr	r3, [pc, #356]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24016274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016276:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401627a:	ee07 3a90 	vmov	s15, r3
2401627e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016282:	ed97 6a03 	vldr	s12, [r7, #12]
24016286:	eddf 5a56 	vldr	s11, [pc, #344]	; 240163e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2401628a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401628e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016296:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401629a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401629e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
240162a2:	e043      	b.n	2401632c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
240162a4:	697b      	ldr	r3, [r7, #20]
240162a6:	ee07 3a90 	vmov	s15, r3
240162aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
240162ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 240163ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
240162b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240162b6:	4b48      	ldr	r3, [pc, #288]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240162b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240162ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
240162be:	ee07 3a90 	vmov	s15, r3
240162c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
240162c6:	ed97 6a03 	vldr	s12, [r7, #12]
240162ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 240163e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
240162ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
240162d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
240162d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240162da:	ee77 7aa6 	vadd.f32	s15, s15, s13
240162de:	ee67 7a27 	vmul.f32	s15, s14, s15
240162e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
240162e6:	e021      	b.n	2401632c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
240162e8:	697b      	ldr	r3, [r7, #20]
240162ea:	ee07 3a90 	vmov	s15, r3
240162ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
240162f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 240163e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
240162f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240162fa:	4b37      	ldr	r3, [pc, #220]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240162fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240162fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016302:	ee07 3a90 	vmov	s15, r3
24016306:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401630a:	ed97 6a03 	vldr	s12, [r7, #12]
2401630e:	eddf 5a34 	vldr	s11, [pc, #208]	; 240163e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24016312:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016316:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401631a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016322:	ee67 7a27 	vmul.f32	s15, s14, s15
24016326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2401632a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
2401632c:	4b2a      	ldr	r3, [pc, #168]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24016330:	0a5b      	lsrs	r3, r3, #9
24016332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016336:	ee07 3a90 	vmov	s15, r3
2401633a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401633e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016342:	ee37 7a87 	vadd.f32	s14, s15, s14
24016346:	edd7 6a07 	vldr	s13, [r7, #28]
2401634a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401634e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016352:	ee17 2a90 	vmov	r2, s15
24016356:	687b      	ldr	r3, [r7, #4]
24016358:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
2401635a:	4b1f      	ldr	r3, [pc, #124]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401635e:	0c1b      	lsrs	r3, r3, #16
24016360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016364:	ee07 3a90 	vmov	s15, r3
24016368:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401636c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016370:	ee37 7a87 	vadd.f32	s14, s15, s14
24016374:	edd7 6a07 	vldr	s13, [r7, #28]
24016378:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401637c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016380:	ee17 2a90 	vmov	r2, s15
24016384:	687b      	ldr	r3, [r7, #4]
24016386:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
24016388:	4b13      	ldr	r3, [pc, #76]	; (240163d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2401638c:	0e1b      	lsrs	r3, r3, #24
2401638e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016392:	ee07 3a90 	vmov	s15, r3
24016396:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401639a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401639e:	ee37 7a87 	vadd.f32	s14, s15, s14
240163a2:	edd7 6a07 	vldr	s13, [r7, #28]
240163a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
240163aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240163ae:	ee17 2a90 	vmov	r2, s15
240163b2:	687b      	ldr	r3, [r7, #4]
240163b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
240163b6:	e008      	b.n	240163ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
240163b8:	687b      	ldr	r3, [r7, #4]
240163ba:	2200      	movs	r2, #0
240163bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
240163be:	687b      	ldr	r3, [r7, #4]
240163c0:	2200      	movs	r2, #0
240163c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
240163c4:	687b      	ldr	r3, [r7, #4]
240163c6:	2200      	movs	r2, #0
240163c8:	609a      	str	r2, [r3, #8]
}
240163ca:	bf00      	nop
240163cc:	3724      	adds	r7, #36	; 0x24
240163ce:	46bd      	mov	sp, r7
240163d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240163d4:	4770      	bx	lr
240163d6:	bf00      	nop
240163d8:	58024400 	.word	0x58024400
240163dc:	03d09000 	.word	0x03d09000
240163e0:	46000000 	.word	0x46000000
240163e4:	4c742400 	.word	0x4c742400
240163e8:	4a742400 	.word	0x4a742400
240163ec:	4c371b00 	.word	0x4c371b00

240163f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
240163f0:	b480      	push	{r7}
240163f2:	b089      	sub	sp, #36	; 0x24
240163f4:	af00      	add	r7, sp, #0
240163f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240163f8:	4ba0      	ldr	r3, [pc, #640]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240163fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240163fc:	f003 0303 	and.w	r3, r3, #3
24016400:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
24016402:	4b9e      	ldr	r3, [pc, #632]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016406:	091b      	lsrs	r3, r3, #4
24016408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401640c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2401640e:	4b9b      	ldr	r3, [pc, #620]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016412:	f003 0301 	and.w	r3, r3, #1
24016416:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24016418:	4b98      	ldr	r3, [pc, #608]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401641a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401641c:	08db      	lsrs	r3, r3, #3
2401641e:	f3c3 030c 	ubfx	r3, r3, #0, #13
24016422:	693a      	ldr	r2, [r7, #16]
24016424:	fb02 f303 	mul.w	r3, r2, r3
24016428:	ee07 3a90 	vmov	s15, r3
2401642c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016430:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
24016434:	697b      	ldr	r3, [r7, #20]
24016436:	2b00      	cmp	r3, #0
24016438:	f000 8111 	beq.w	2401665e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
2401643c:	69bb      	ldr	r3, [r7, #24]
2401643e:	2b02      	cmp	r3, #2
24016440:	f000 8083 	beq.w	2401654a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
24016444:	69bb      	ldr	r3, [r7, #24]
24016446:	2b02      	cmp	r3, #2
24016448:	f200 80a1 	bhi.w	2401658e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
2401644c:	69bb      	ldr	r3, [r7, #24]
2401644e:	2b00      	cmp	r3, #0
24016450:	d003      	beq.n	2401645a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
24016452:	69bb      	ldr	r3, [r7, #24]
24016454:	2b01      	cmp	r3, #1
24016456:	d056      	beq.n	24016506 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
24016458:	e099      	b.n	2401658e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2401645a:	4b88      	ldr	r3, [pc, #544]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401645c:	681b      	ldr	r3, [r3, #0]
2401645e:	f003 0320 	and.w	r3, r3, #32
24016462:	2b00      	cmp	r3, #0
24016464:	d02d      	beq.n	240164c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24016466:	4b85      	ldr	r3, [pc, #532]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016468:	681b      	ldr	r3, [r3, #0]
2401646a:	08db      	lsrs	r3, r3, #3
2401646c:	f003 0303 	and.w	r3, r3, #3
24016470:	4a83      	ldr	r2, [pc, #524]	; (24016680 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
24016472:	fa22 f303 	lsr.w	r3, r2, r3
24016476:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016478:	68bb      	ldr	r3, [r7, #8]
2401647a:	ee07 3a90 	vmov	s15, r3
2401647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016482:	697b      	ldr	r3, [r7, #20]
24016484:	ee07 3a90 	vmov	s15, r3
24016488:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401648c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016490:	4b7a      	ldr	r3, [pc, #488]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016494:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016498:	ee07 3a90 	vmov	s15, r3
2401649c:	eef8 6a67 	vcvt.f32.u32	s13, s15
240164a0:	ed97 6a03 	vldr	s12, [r7, #12]
240164a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 24016684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240164a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
240164ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
240164b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240164b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
240164b8:	ee67 7a27 	vmul.f32	s15, s14, s15
240164bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
240164c0:	e087      	b.n	240165d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
240164c2:	697b      	ldr	r3, [r7, #20]
240164c4:	ee07 3a90 	vmov	s15, r3
240164c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240164cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 24016688 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
240164d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240164d4:	4b69      	ldr	r3, [pc, #420]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240164d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240164d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
240164dc:	ee07 3a90 	vmov	s15, r3
240164e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
240164e4:	ed97 6a03 	vldr	s12, [r7, #12]
240164e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 24016684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240164ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
240164f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
240164f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240164f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
240164fc:	ee67 7a27 	vmul.f32	s15, s14, s15
24016500:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016504:	e065      	b.n	240165d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24016506:	697b      	ldr	r3, [r7, #20]
24016508:	ee07 3a90 	vmov	s15, r3
2401650c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016510:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2401668c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
24016514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24016518:	4b58      	ldr	r3, [pc, #352]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2401651c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016520:	ee07 3a90 	vmov	s15, r3
24016524:	eef8 6a67 	vcvt.f32.u32	s13, s15
24016528:	ed97 6a03 	vldr	s12, [r7, #12]
2401652c:	eddf 5a55 	vldr	s11, [pc, #340]	; 24016684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016530:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016534:	ee76 7aa7 	vadd.f32	s15, s13, s15
24016538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401653c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016540:	ee67 7a27 	vmul.f32	s15, s14, s15
24016544:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24016548:	e043      	b.n	240165d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2401654a:	697b      	ldr	r3, [r7, #20]
2401654c:	ee07 3a90 	vmov	s15, r3
24016550:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016554:	eddf 6a4e 	vldr	s13, [pc, #312]	; 24016690 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
24016558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401655c:	4b47      	ldr	r3, [pc, #284]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016560:	f3c3 0308 	ubfx	r3, r3, #0, #9
24016564:	ee07 3a90 	vmov	s15, r3
24016568:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401656c:	ed97 6a03 	vldr	s12, [r7, #12]
24016570:	eddf 5a44 	vldr	s11, [pc, #272]	; 24016684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24016574:	eec6 7a25 	vdiv.f32	s15, s12, s11
24016578:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401657c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016580:	ee77 7aa6 	vadd.f32	s15, s15, s13
24016584:	ee67 7a27 	vmul.f32	s15, s14, s15
24016588:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2401658c:	e021      	b.n	240165d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2401658e:	697b      	ldr	r3, [r7, #20]
24016590:	ee07 3a90 	vmov	s15, r3
24016594:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016598:	eddf 6a3b 	vldr	s13, [pc, #236]	; 24016688 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2401659c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240165a0:	4b36      	ldr	r3, [pc, #216]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240165a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240165a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240165a8:	ee07 3a90 	vmov	s15, r3
240165ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
240165b0:	ed97 6a03 	vldr	s12, [r7, #12]
240165b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 24016684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240165b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
240165bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
240165c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240165c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
240165c8:	ee67 7a27 	vmul.f32	s15, s14, s15
240165cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
240165d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
240165d2:	4b2a      	ldr	r3, [pc, #168]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240165d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240165d6:	0a5b      	lsrs	r3, r3, #9
240165d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240165dc:	ee07 3a90 	vmov	s15, r3
240165e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
240165e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240165e8:	ee37 7a87 	vadd.f32	s14, s15, s14
240165ec:	edd7 6a07 	vldr	s13, [r7, #28]
240165f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
240165f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240165f8:	ee17 2a90 	vmov	r2, s15
240165fc:	687b      	ldr	r3, [r7, #4]
240165fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
24016600:	4b1e      	ldr	r3, [pc, #120]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016604:	0c1b      	lsrs	r3, r3, #16
24016606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2401660a:	ee07 3a90 	vmov	s15, r3
2401660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016616:	ee37 7a87 	vadd.f32	s14, s15, s14
2401661a:	edd7 6a07 	vldr	s13, [r7, #28]
2401661e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016626:	ee17 2a90 	vmov	r2, s15
2401662a:	687b      	ldr	r3, [r7, #4]
2401662c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
2401662e:	4b13      	ldr	r3, [pc, #76]	; (2401667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24016630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24016632:	0e1b      	lsrs	r3, r3, #24
24016634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24016638:	ee07 3a90 	vmov	s15, r3
2401663c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24016640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24016644:	ee37 7a87 	vadd.f32	s14, s15, s14
24016648:	edd7 6a07 	vldr	s13, [r7, #28]
2401664c:	eec6 7a87 	vdiv.f32	s15, s13, s14
24016650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016654:	ee17 2a90 	vmov	r2, s15
24016658:	687b      	ldr	r3, [r7, #4]
2401665a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
2401665c:	e008      	b.n	24016670 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
2401665e:	687b      	ldr	r3, [r7, #4]
24016660:	2200      	movs	r2, #0
24016662:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24016664:	687b      	ldr	r3, [r7, #4]
24016666:	2200      	movs	r2, #0
24016668:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
2401666a:	687b      	ldr	r3, [r7, #4]
2401666c:	2200      	movs	r2, #0
2401666e:	609a      	str	r2, [r3, #8]
}
24016670:	bf00      	nop
24016672:	3724      	adds	r7, #36	; 0x24
24016674:	46bd      	mov	sp, r7
24016676:	f85d 7b04 	ldr.w	r7, [sp], #4
2401667a:	4770      	bx	lr
2401667c:	58024400 	.word	0x58024400
24016680:	03d09000 	.word	0x03d09000
24016684:	46000000 	.word	0x46000000
24016688:	4c742400 	.word	0x4c742400
2401668c:	4a742400 	.word	0x4a742400
24016690:	4c371b00 	.word	0x4c371b00

24016694 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System current Core Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
24016694:	b580      	push	{r7, lr}
24016696:	b082      	sub	sp, #8
24016698:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2401669a:	f7fd fb2f 	bl	24013cfc <HAL_RCC_GetSysClockFreq>
2401669e:	4602      	mov	r2, r0
240166a0:	4b10      	ldr	r3, [pc, #64]	; (240166e4 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
240166a2:	699b      	ldr	r3, [r3, #24]
240166a4:	0a1b      	lsrs	r3, r3, #8
240166a6:	f003 030f 	and.w	r3, r3, #15
240166aa:	490f      	ldr	r1, [pc, #60]	; (240166e8 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
240166ac:	5ccb      	ldrb	r3, [r1, r3]
240166ae:	f003 031f 	and.w	r3, r3, #31
240166b2:	fa22 f303 	lsr.w	r3, r2, r3
240166b6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240166b8:	4b0a      	ldr	r3, [pc, #40]	; (240166e4 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
240166ba:	699b      	ldr	r3, [r3, #24]
240166bc:	f003 030f 	and.w	r3, r3, #15
240166c0:	4a09      	ldr	r2, [pc, #36]	; (240166e8 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
240166c2:	5cd3      	ldrb	r3, [r2, r3]
240166c4:	f003 031f 	and.w	r3, r3, #31
240166c8:	687a      	ldr	r2, [r7, #4]
240166ca:	fa22 f303 	lsr.w	r3, r2, r3
240166ce:	4a07      	ldr	r2, [pc, #28]	; (240166ec <HAL_RCCEx_GetD1SysClockFreq+0x58>)
240166d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
240166d2:	4a07      	ldr	r2, [pc, #28]	; (240166f0 <HAL_RCCEx_GetD1SysClockFreq+0x5c>)
240166d4:	687b      	ldr	r3, [r7, #4]
240166d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return common_system_clock;
240166d8:	687b      	ldr	r3, [r7, #4]
}
240166da:	4618      	mov	r0, r3
240166dc:	3708      	adds	r7, #8
240166de:	46bd      	mov	sp, r7
240166e0:	bd80      	pop	{r7, pc}
240166e2:	bf00      	nop
240166e4:	58024400 	.word	0x58024400
240166e8:	24016ff4 	.word	0x24016ff4
240166ec:	240004b4 	.word	0x240004b4
240166f0:	240004b0 	.word	0x240004b0

240166f4 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
240166f4:	b480      	push	{r7}
240166f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
240166f8:	4b05      	ldr	r3, [pc, #20]	; (24016710 <HAL_RCCEx_EnableLSECSS+0x1c>)
240166fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240166fc:	4a04      	ldr	r2, [pc, #16]	; (24016710 <HAL_RCCEx_EnableLSECSS+0x1c>)
240166fe:	f043 0320 	orr.w	r3, r3, #32
24016702:	6713      	str	r3, [r2, #112]	; 0x70
}
24016704:	bf00      	nop
24016706:	46bd      	mov	sp, r7
24016708:	f85d 7b04 	ldr.w	r7, [sp], #4
2401670c:	4770      	bx	lr
2401670e:	bf00      	nop
24016710:	58024400 	.word	0x58024400

24016714 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disables the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
24016714:	b480      	push	{r7}
24016716:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24016718:	4b08      	ldr	r3, [pc, #32]	; (2401673c <HAL_RCCEx_DisableLSECSS+0x28>)
2401671a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2401671c:	4a07      	ldr	r2, [pc, #28]	; (2401673c <HAL_RCCEx_DisableLSECSS+0x28>)
2401671e:	f023 0320 	bic.w	r3, r3, #32
24016722:	6713      	str	r3, [r2, #112]	; 0x70
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
24016724:	4b05      	ldr	r3, [pc, #20]	; (2401673c <HAL_RCCEx_DisableLSECSS+0x28>)
24016726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24016728:	4a04      	ldr	r2, [pc, #16]	; (2401673c <HAL_RCCEx_DisableLSECSS+0x28>)
2401672a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
2401672e:	6613      	str	r3, [r2, #96]	; 0x60
}
24016730:	bf00      	nop
24016732:	46bd      	mov	sp, r7
24016734:	f85d 7b04 	ldr.w	r7, [sp], #4
24016738:	4770      	bx	lr
2401673a:	bf00      	nop
2401673c:	58024400 	.word	0x58024400

24016740 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on EXTI line 18
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
24016740:	b480      	push	{r7}
24016742:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24016744:	4b11      	ldr	r3, [pc, #68]	; (2401678c <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24016746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24016748:	4a10      	ldr	r2, [pc, #64]	; (2401678c <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
2401674a:	f043 0320 	orr.w	r3, r3, #32
2401674e:	6713      	str	r3, [r2, #112]	; 0x70

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
24016750:	4b0e      	ldr	r3, [pc, #56]	; (2401678c <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24016752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24016754:	4a0d      	ldr	r2, [pc, #52]	; (2401678c <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24016756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2401675a:	6613      	str	r3, [r2, #96]	; 0x60

  /* Enable IT on EXTI Line 18 */
#if defined(DUAL_CORE) && defined(CORE_CM4)
  __HAL_RCC_C2_LSECSS_EXTI_ENABLE_IT();
#else
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
2401675c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24016760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24016764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24016768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2401676c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* DUAL_CORE && CORE_CM4 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
24016770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24016774:	681b      	ldr	r3, [r3, #0]
24016776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2401677a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2401677e:	6013      	str	r3, [r2, #0]
}
24016780:	bf00      	nop
24016782:	46bd      	mov	sp, r7
24016784:	f85d 7b04 	ldr.w	r7, [sp], #4
24016788:	4770      	bx	lr
2401678a:	bf00      	nop
2401678c:	58024400 	.word	0x58024400

24016790 <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
24016790:	b480      	push	{r7}
24016792:	b083      	sub	sp, #12
24016794:	af00      	add	r7, sp, #0
24016796:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
24016798:	4b06      	ldr	r3, [pc, #24]	; (240167b4 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
2401679a:	691b      	ldr	r3, [r3, #16]
2401679c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
240167a0:	4904      	ldr	r1, [pc, #16]	; (240167b4 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
240167a2:	687b      	ldr	r3, [r7, #4]
240167a4:	4313      	orrs	r3, r2
240167a6:	610b      	str	r3, [r1, #16]
}
240167a8:	bf00      	nop
240167aa:	370c      	adds	r7, #12
240167ac:	46bd      	mov	sp, r7
240167ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240167b2:	4770      	bx	lr
240167b4:	58024400 	.word	0x58024400

240167b8 <HAL_RCCEx_KerWakeUpStopCLKConfig>:
  *            @arg RCC_STOP_KERWAKEUPCLOCK_CSI: CSI oscillator selection
  *            @arg RCC_STOP_KERWAKEUPCLOCK_HSI: HSI oscillator selection
  * @retval None
  */
void HAL_RCCEx_KerWakeUpStopCLKConfig(uint32_t WakeUpClk)
{
240167b8:	b480      	push	{r7}
240167ba:	b083      	sub	sp, #12
240167bc:	af00      	add	r7, sp, #0
240167be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_KERWAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_KERWAKEUPSTOP_CLK_CONFIG(WakeUpClk);
240167c0:	4b06      	ldr	r3, [pc, #24]	; (240167dc <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
240167c2:	691b      	ldr	r3, [r3, #16]
240167c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
240167c8:	4904      	ldr	r1, [pc, #16]	; (240167dc <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
240167ca:	687b      	ldr	r3, [r7, #4]
240167cc:	4313      	orrs	r3, r2
240167ce:	610b      	str	r3, [r1, #16]
}
240167d0:	bf00      	nop
240167d2:	370c      	adds	r7, #12
240167d4:	46bd      	mov	sp, r7
240167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
240167da:	4770      	bx	lr
240167dc:	58024400 	.word	0x58024400

240167e0 <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
240167e0:	b480      	push	{r7}
240167e2:	b083      	sub	sp, #12
240167e4:	af00      	add	r7, sp, #0
240167e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
240167e8:	4b06      	ldr	r3, [pc, #24]	; (24016804 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
240167ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
240167ee:	4905      	ldr	r1, [pc, #20]	; (24016804 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
240167f0:	687b      	ldr	r3, [r7, #4]
240167f2:	4313      	orrs	r3, r2
240167f4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
}
240167f8:	bf00      	nop
240167fa:	370c      	adds	r7, #12
240167fc:	46bd      	mov	sp, r7
240167fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24016802:	4770      	bx	lr
24016804:	58024400 	.word	0x58024400

24016808 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
24016808:	b580      	push	{r7, lr}
2401680a:	b084      	sub	sp, #16
2401680c:	af00      	add	r7, sp, #0
2401680e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
24016810:	4b26      	ldr	r3, [pc, #152]	; (240168ac <HAL_RCCEx_CRSConfig+0xa4>)
24016812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24016816:	4a25      	ldr	r2, [pc, #148]	; (240168ac <HAL_RCCEx_CRSConfig+0xa4>)
24016818:	f043 0302 	orr.w	r3, r3, #2
2401681c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
24016820:	4b22      	ldr	r3, [pc, #136]	; (240168ac <HAL_RCCEx_CRSConfig+0xa4>)
24016822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24016826:	4a21      	ldr	r2, [pc, #132]	; (240168ac <HAL_RCCEx_CRSConfig+0xa4>)
24016828:	f023 0302 	bic.w	r3, r3, #2
2401682c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
24016830:	f7eb fd7e 	bl	24002330 <HAL_GetREVID>
24016834:	4603      	mov	r3, r0
24016836:	f241 0203 	movw	r2, #4099	; 0x1003
2401683a:	4293      	cmp	r3, r2
2401683c:	d80b      	bhi.n	24016856 <HAL_RCCEx_CRSConfig+0x4e>
2401683e:	687b      	ldr	r3, [r7, #4]
24016840:	685b      	ldr	r3, [r3, #4]
24016842:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24016846:	d106      	bne.n	24016856 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
24016848:	687b      	ldr	r3, [r7, #4]
2401684a:	681a      	ldr	r2, [r3, #0]
2401684c:	687b      	ldr	r3, [r7, #4]
2401684e:	689b      	ldr	r3, [r3, #8]
24016850:	4313      	orrs	r3, r2
24016852:	60fb      	str	r3, [r7, #12]
24016854:	e008      	b.n	24016868 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
24016856:	687b      	ldr	r3, [r7, #4]
24016858:	681a      	ldr	r2, [r3, #0]
2401685a:	687b      	ldr	r3, [r7, #4]
2401685c:	685b      	ldr	r3, [r3, #4]
2401685e:	431a      	orrs	r2, r3
24016860:	687b      	ldr	r3, [r7, #4]
24016862:	689b      	ldr	r3, [r3, #8]
24016864:	4313      	orrs	r3, r2
24016866:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
24016868:	687b      	ldr	r3, [r7, #4]
2401686a:	68db      	ldr	r3, [r3, #12]
2401686c:	68fa      	ldr	r2, [r7, #12]
2401686e:	4313      	orrs	r3, r2
24016870:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
24016872:	687b      	ldr	r3, [r7, #4]
24016874:	691b      	ldr	r3, [r3, #16]
24016876:	041b      	lsls	r3, r3, #16
24016878:	68fa      	ldr	r2, [r7, #12]
2401687a:	4313      	orrs	r3, r2
2401687c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
2401687e:	4a0c      	ldr	r2, [pc, #48]	; (240168b0 <HAL_RCCEx_CRSConfig+0xa8>)
24016880:	68fb      	ldr	r3, [r7, #12]
24016882:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
24016884:	4b0a      	ldr	r3, [pc, #40]	; (240168b0 <HAL_RCCEx_CRSConfig+0xa8>)
24016886:	681b      	ldr	r3, [r3, #0]
24016888:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
2401688c:	687b      	ldr	r3, [r7, #4]
2401688e:	695b      	ldr	r3, [r3, #20]
24016890:	021b      	lsls	r3, r3, #8
24016892:	4907      	ldr	r1, [pc, #28]	; (240168b0 <HAL_RCCEx_CRSConfig+0xa8>)
24016894:	4313      	orrs	r3, r2
24016896:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
24016898:	4b05      	ldr	r3, [pc, #20]	; (240168b0 <HAL_RCCEx_CRSConfig+0xa8>)
2401689a:	681b      	ldr	r3, [r3, #0]
2401689c:	4a04      	ldr	r2, [pc, #16]	; (240168b0 <HAL_RCCEx_CRSConfig+0xa8>)
2401689e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
240168a2:	6013      	str	r3, [r2, #0]
}
240168a4:	bf00      	nop
240168a6:	3710      	adds	r7, #16
240168a8:	46bd      	mov	sp, r7
240168aa:	bd80      	pop	{r7, pc}
240168ac:	58024400 	.word	0x58024400
240168b0:	40008400 	.word	0x40008400

240168b4 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
240168b4:	b480      	push	{r7}
240168b6:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
240168b8:	4b05      	ldr	r3, [pc, #20]	; (240168d0 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
240168ba:	681b      	ldr	r3, [r3, #0]
240168bc:	4a04      	ldr	r2, [pc, #16]	; (240168d0 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
240168be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240168c2:	6013      	str	r3, [r2, #0]
}
240168c4:	bf00      	nop
240168c6:	46bd      	mov	sp, r7
240168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240168cc:	4770      	bx	lr
240168ce:	bf00      	nop
240168d0:	40008400 	.word	0x40008400

240168d4 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
240168d4:	b480      	push	{r7}
240168d6:	b083      	sub	sp, #12
240168d8:	af00      	add	r7, sp, #0
240168da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != (void *)NULL);

  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
240168dc:	4b0e      	ldr	r3, [pc, #56]	; (24016918 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
240168de:	685b      	ldr	r3, [r3, #4]
240168e0:	b29a      	uxth	r2, r3
240168e2:	687b      	ldr	r3, [r7, #4]
240168e4:	601a      	str	r2, [r3, #0]

  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
240168e6:	4b0c      	ldr	r3, [pc, #48]	; (24016918 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
240168e8:	681b      	ldr	r3, [r3, #0]
240168ea:	0a1b      	lsrs	r3, r3, #8
240168ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240168f0:	687b      	ldr	r3, [r7, #4]
240168f2:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
240168f4:	4b08      	ldr	r3, [pc, #32]	; (24016918 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
240168f6:	689b      	ldr	r3, [r3, #8]
240168f8:	0c1b      	lsrs	r3, r3, #16
240168fa:	b29a      	uxth	r2, r3
240168fc:	687b      	ldr	r3, [r7, #4]
240168fe:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
24016900:	4b05      	ldr	r3, [pc, #20]	; (24016918 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24016902:	689b      	ldr	r3, [r3, #8]
24016904:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
24016908:	687b      	ldr	r3, [r7, #4]
2401690a:	60da      	str	r2, [r3, #12]
}
2401690c:	bf00      	nop
2401690e:	370c      	adds	r7, #12
24016910:	46bd      	mov	sp, r7
24016912:	f85d 7b04 	ldr.w	r7, [sp], #4
24016916:	4770      	bx	lr
24016918:	40008400 	.word	0x40008400

2401691c <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
2401691c:	b580      	push	{r7, lr}
2401691e:	b084      	sub	sp, #16
24016920:	af00      	add	r7, sp, #0
24016922:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
24016924:	2300      	movs	r3, #0
24016926:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Get time-out */
  tickstart = HAL_GetTick();
24016928:	f7eb fc68 	bl	240021fc <HAL_GetTick>
2401692c:	60b8      	str	r0, [r7, #8]

  /* Wait for CRS flag or time-out detection */
  do
  {
    if(Timeout != HAL_MAX_DELAY)
2401692e:	687b      	ldr	r3, [r7, #4]
24016930:	f1b3 3fff 	cmp.w	r3, #4294967295
24016934:	d00c      	beq.n	24016950 <HAL_RCCEx_CRSWaitSynchronization+0x34>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24016936:	f7eb fc61 	bl	240021fc <HAL_GetTick>
2401693a:	4602      	mov	r2, r0
2401693c:	68bb      	ldr	r3, [r7, #8]
2401693e:	1ad3      	subs	r3, r2, r3
24016940:	687a      	ldr	r2, [r7, #4]
24016942:	429a      	cmp	r2, r3
24016944:	d302      	bcc.n	2401694c <HAL_RCCEx_CRSWaitSynchronization+0x30>
24016946:	687b      	ldr	r3, [r7, #4]
24016948:	2b00      	cmp	r3, #0
2401694a:	d101      	bne.n	24016950 <HAL_RCCEx_CRSWaitSynchronization+0x34>
      {
        crsstatus = RCC_CRS_TIMEOUT;
2401694c:	2301      	movs	r3, #1
2401694e:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
24016950:	4b2a      	ldr	r3, [pc, #168]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24016952:	689b      	ldr	r3, [r3, #8]
24016954:	f003 0301 	and.w	r3, r3, #1
24016958:	2b01      	cmp	r3, #1
2401695a:	d106      	bne.n	2401696a <HAL_RCCEx_CRSWaitSynchronization+0x4e>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
2401695c:	68fb      	ldr	r3, [r7, #12]
2401695e:	f043 0302 	orr.w	r3, r3, #2
24016962:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
24016964:	4b25      	ldr	r3, [pc, #148]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24016966:	2201      	movs	r2, #1
24016968:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNCWARN flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
2401696a:	4b24      	ldr	r3, [pc, #144]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2401696c:	689b      	ldr	r3, [r3, #8]
2401696e:	f003 0302 	and.w	r3, r3, #2
24016972:	2b02      	cmp	r3, #2
24016974:	d106      	bne.n	24016984 <HAL_RCCEx_CRSWaitSynchronization+0x68>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
24016976:	68fb      	ldr	r3, [r7, #12]
24016978:	f043 0304 	orr.w	r3, r3, #4
2401697c:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
2401697e:	4b1f      	ldr	r3, [pc, #124]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24016980:	2202      	movs	r2, #2
24016982:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS TRIM overflow flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
24016984:	4b1d      	ldr	r3, [pc, #116]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24016986:	689b      	ldr	r3, [r3, #8]
24016988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2401698c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24016990:	d106      	bne.n	240169a0 <HAL_RCCEx_CRSWaitSynchronization+0x84>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
24016992:	68fb      	ldr	r3, [r7, #12]
24016994:	f043 0320 	orr.w	r3, r3, #32
24016998:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
2401699a:	4b18      	ldr	r3, [pc, #96]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2401699c:	2204      	movs	r2, #4
2401699e:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Error flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
240169a0:	4b16      	ldr	r3, [pc, #88]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240169a2:	689b      	ldr	r3, [r3, #8]
240169a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
240169a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240169ac:	d106      	bne.n	240169bc <HAL_RCCEx_CRSWaitSynchronization+0xa0>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
240169ae:	68fb      	ldr	r3, [r7, #12]
240169b0:	f043 0308 	orr.w	r3, r3, #8
240169b4:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
240169b6:	4b11      	ldr	r3, [pc, #68]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240169b8:	2204      	movs	r2, #4
240169ba:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNC Missed flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
240169bc:	4b0f      	ldr	r3, [pc, #60]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240169be:	689b      	ldr	r3, [r3, #8]
240169c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
240169c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240169c8:	d106      	bne.n	240169d8 <HAL_RCCEx_CRSWaitSynchronization+0xbc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
240169ca:	68fb      	ldr	r3, [r7, #12]
240169cc:	f043 0310 	orr.w	r3, r3, #16
240169d0:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
240169d2:	4b0a      	ldr	r3, [pc, #40]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240169d4:	2204      	movs	r2, #4
240169d6:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Expected SYNC flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
240169d8:	4b08      	ldr	r3, [pc, #32]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240169da:	689b      	ldr	r3, [r3, #8]
240169dc:	f003 0308 	and.w	r3, r3, #8
240169e0:	2b08      	cmp	r3, #8
240169e2:	d102      	bne.n	240169ea <HAL_RCCEx_CRSWaitSynchronization+0xce>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
240169e4:	4b05      	ldr	r3, [pc, #20]	; (240169fc <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
240169e6:	2208      	movs	r2, #8
240169e8:	60da      	str	r2, [r3, #12]
    }
  } while(RCC_CRS_NONE == crsstatus);
240169ea:	68fb      	ldr	r3, [r7, #12]
240169ec:	2b00      	cmp	r3, #0
240169ee:	d09e      	beq.n	2401692e <HAL_RCCEx_CRSWaitSynchronization+0x12>

  return crsstatus;
240169f0:	68fb      	ldr	r3, [r7, #12]
}
240169f2:	4618      	mov	r0, r3
240169f4:	3710      	adds	r7, #16
240169f6:	46bd      	mov	sp, r7
240169f8:	bd80      	pop	{r7, pc}
240169fa:	bf00      	nop
240169fc:	40008400 	.word	0x40008400

24016a00 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
24016a00:	b580      	push	{r7, lr}
24016a02:	b084      	sub	sp, #16
24016a04:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
24016a06:	2300      	movs	r3, #0
24016a08:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
24016a0a:	4b33      	ldr	r3, [pc, #204]	; (24016ad8 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24016a0c:	689b      	ldr	r3, [r3, #8]
24016a0e:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
24016a10:	4b31      	ldr	r3, [pc, #196]	; (24016ad8 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24016a12:	681b      	ldr	r3, [r3, #0]
24016a14:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if(((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
24016a16:	68bb      	ldr	r3, [r7, #8]
24016a18:	f003 0301 	and.w	r3, r3, #1
24016a1c:	2b00      	cmp	r3, #0
24016a1e:	d00a      	beq.n	24016a36 <HAL_RCCEx_CRS_IRQHandler+0x36>
24016a20:	687b      	ldr	r3, [r7, #4]
24016a22:	f003 0301 	and.w	r3, r3, #1
24016a26:	2b00      	cmp	r3, #0
24016a28:	d005      	beq.n	24016a36 <HAL_RCCEx_CRS_IRQHandler+0x36>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
24016a2a:	4b2b      	ldr	r3, [pc, #172]	; (24016ad8 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24016a2c:	2201      	movs	r2, #1
24016a2e:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
24016a30:	f000 f854 	bl	24016adc <HAL_RCCEx_CRS_SyncOkCallback>
24016a34:	e04b      	b.n	24016ace <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS SYNCWARN flag  */
  else if(((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
24016a36:	68bb      	ldr	r3, [r7, #8]
24016a38:	f003 0302 	and.w	r3, r3, #2
24016a3c:	2b00      	cmp	r3, #0
24016a3e:	d00a      	beq.n	24016a56 <HAL_RCCEx_CRS_IRQHandler+0x56>
24016a40:	687b      	ldr	r3, [r7, #4]
24016a42:	f003 0302 	and.w	r3, r3, #2
24016a46:	2b00      	cmp	r3, #0
24016a48:	d005      	beq.n	24016a56 <HAL_RCCEx_CRS_IRQHandler+0x56>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
24016a4a:	4b23      	ldr	r3, [pc, #140]	; (24016ad8 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24016a4c:	2202      	movs	r2, #2
24016a4e:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
24016a50:	f000 f84b 	bl	24016aea <HAL_RCCEx_CRS_SyncWarnCallback>
24016a54:	e03b      	b.n	24016ace <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Expected SYNC flag  */
  else if(((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
24016a56:	68bb      	ldr	r3, [r7, #8]
24016a58:	f003 0308 	and.w	r3, r3, #8
24016a5c:	2b00      	cmp	r3, #0
24016a5e:	d00a      	beq.n	24016a76 <HAL_RCCEx_CRS_IRQHandler+0x76>
24016a60:	687b      	ldr	r3, [r7, #4]
24016a62:	f003 0308 	and.w	r3, r3, #8
24016a66:	2b00      	cmp	r3, #0
24016a68:	d005      	beq.n	24016a76 <HAL_RCCEx_CRS_IRQHandler+0x76>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
24016a6a:	4b1b      	ldr	r3, [pc, #108]	; (24016ad8 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24016a6c:	2208      	movs	r2, #8
24016a6e:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
24016a70:	f000 f842 	bl	24016af8 <HAL_RCCEx_CRS_ExpectedSyncCallback>
24016a74:	e02b      	b.n	24016ace <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Error flags  */
  else
  {
    if(((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
24016a76:	68bb      	ldr	r3, [r7, #8]
24016a78:	f003 0304 	and.w	r3, r3, #4
24016a7c:	2b00      	cmp	r3, #0
24016a7e:	d026      	beq.n	24016ace <HAL_RCCEx_CRS_IRQHandler+0xce>
24016a80:	687b      	ldr	r3, [r7, #4]
24016a82:	f003 0304 	and.w	r3, r3, #4
24016a86:	2b00      	cmp	r3, #0
24016a88:	d021      	beq.n	24016ace <HAL_RCCEx_CRS_IRQHandler+0xce>
    {
      if((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
24016a8a:	68bb      	ldr	r3, [r7, #8]
24016a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24016a90:	2b00      	cmp	r3, #0
24016a92:	d003      	beq.n	24016a9c <HAL_RCCEx_CRS_IRQHandler+0x9c>
      {
        crserror |= RCC_CRS_SYNCERR;
24016a94:	68fb      	ldr	r3, [r7, #12]
24016a96:	f043 0308 	orr.w	r3, r3, #8
24016a9a:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
24016a9c:	68bb      	ldr	r3, [r7, #8]
24016a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
24016aa2:	2b00      	cmp	r3, #0
24016aa4:	d003      	beq.n	24016aae <HAL_RCCEx_CRS_IRQHandler+0xae>
      {
        crserror |= RCC_CRS_SYNCMISS;
24016aa6:	68fb      	ldr	r3, [r7, #12]
24016aa8:	f043 0310 	orr.w	r3, r3, #16
24016aac:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
24016aae:	68bb      	ldr	r3, [r7, #8]
24016ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24016ab4:	2b00      	cmp	r3, #0
24016ab6:	d003      	beq.n	24016ac0 <HAL_RCCEx_CRS_IRQHandler+0xc0>
      {
        crserror |= RCC_CRS_TRIMOVF;
24016ab8:	68fb      	ldr	r3, [r7, #12]
24016aba:	f043 0320 	orr.w	r3, r3, #32
24016abe:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
24016ac0:	4b05      	ldr	r3, [pc, #20]	; (24016ad8 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24016ac2:	2204      	movs	r2, #4
24016ac4:	60da      	str	r2, [r3, #12]

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
24016ac6:	68f8      	ldr	r0, [r7, #12]
24016ac8:	f000 f81d 	bl	24016b06 <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
24016acc:	e7ff      	b.n	24016ace <HAL_RCCEx_CRS_IRQHandler+0xce>
24016ace:	bf00      	nop
24016ad0:	3710      	adds	r7, #16
24016ad2:	46bd      	mov	sp, r7
24016ad4:	bd80      	pop	{r7, pc}
24016ad6:	bf00      	nop
24016ad8:	40008400 	.word	0x40008400

24016adc <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
24016adc:	b480      	push	{r7}
24016ade:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
24016ae0:	bf00      	nop
24016ae2:	46bd      	mov	sp, r7
24016ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
24016ae8:	4770      	bx	lr

24016aea <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
24016aea:	b480      	push	{r7}
24016aec:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
24016aee:	bf00      	nop
24016af0:	46bd      	mov	sp, r7
24016af2:	f85d 7b04 	ldr.w	r7, [sp], #4
24016af6:	4770      	bx	lr

24016af8 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
24016af8:	b480      	push	{r7}
24016afa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
24016afc:	bf00      	nop
24016afe:	46bd      	mov	sp, r7
24016b00:	f85d 7b04 	ldr.w	r7, [sp], #4
24016b04:	4770      	bx	lr

24016b06 <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
24016b06:	b480      	push	{r7}
24016b08:	b083      	sub	sp, #12
24016b0a:	af00      	add	r7, sp, #0
24016b0c:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
24016b0e:	bf00      	nop
24016b10:	370c      	adds	r7, #12
24016b12:	46bd      	mov	sp, r7
24016b14:	f85d 7b04 	ldr.w	r7, [sp], #4
24016b18:	4770      	bx	lr
	...

24016b1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24016b1c:	b580      	push	{r7, lr}
24016b1e:	b084      	sub	sp, #16
24016b20:	af00      	add	r7, sp, #0
24016b22:	6078      	str	r0, [r7, #4]
24016b24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24016b26:	2300      	movs	r3, #0
24016b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24016b2a:	4b53      	ldr	r3, [pc, #332]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016b2e:	f003 0303 	and.w	r3, r3, #3
24016b32:	2b03      	cmp	r3, #3
24016b34:	d101      	bne.n	24016b3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
24016b36:	2301      	movs	r3, #1
24016b38:	e099      	b.n	24016c6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24016b3a:	4b4f      	ldr	r3, [pc, #316]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016b3c:	681b      	ldr	r3, [r3, #0]
24016b3e:	4a4e      	ldr	r2, [pc, #312]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016b40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24016b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24016b46:	f7eb fb59 	bl	240021fc <HAL_GetTick>
24016b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24016b4c:	e008      	b.n	24016b60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
24016b4e:	f7eb fb55 	bl	240021fc <HAL_GetTick>
24016b52:	4602      	mov	r2, r0
24016b54:	68bb      	ldr	r3, [r7, #8]
24016b56:	1ad3      	subs	r3, r2, r3
24016b58:	2b02      	cmp	r3, #2
24016b5a:	d901      	bls.n	24016b60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
24016b5c:	2303      	movs	r3, #3
24016b5e:	e086      	b.n	24016c6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24016b60:	4b45      	ldr	r3, [pc, #276]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016b62:	681b      	ldr	r3, [r3, #0]
24016b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24016b68:	2b00      	cmp	r3, #0
24016b6a:	d1f0      	bne.n	24016b4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24016b6c:	4b42      	ldr	r3, [pc, #264]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016b70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24016b74:	687b      	ldr	r3, [r7, #4]
24016b76:	681b      	ldr	r3, [r3, #0]
24016b78:	031b      	lsls	r3, r3, #12
24016b7a:	493f      	ldr	r1, [pc, #252]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016b7c:	4313      	orrs	r3, r2
24016b7e:	628b      	str	r3, [r1, #40]	; 0x28
24016b80:	687b      	ldr	r3, [r7, #4]
24016b82:	685b      	ldr	r3, [r3, #4]
24016b84:	3b01      	subs	r3, #1
24016b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
24016b8a:	687b      	ldr	r3, [r7, #4]
24016b8c:	689b      	ldr	r3, [r3, #8]
24016b8e:	3b01      	subs	r3, #1
24016b90:	025b      	lsls	r3, r3, #9
24016b92:	b29b      	uxth	r3, r3
24016b94:	431a      	orrs	r2, r3
24016b96:	687b      	ldr	r3, [r7, #4]
24016b98:	68db      	ldr	r3, [r3, #12]
24016b9a:	3b01      	subs	r3, #1
24016b9c:	041b      	lsls	r3, r3, #16
24016b9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24016ba2:	431a      	orrs	r2, r3
24016ba4:	687b      	ldr	r3, [r7, #4]
24016ba6:	691b      	ldr	r3, [r3, #16]
24016ba8:	3b01      	subs	r3, #1
24016baa:	061b      	lsls	r3, r3, #24
24016bac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24016bb0:	4931      	ldr	r1, [pc, #196]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016bb2:	4313      	orrs	r3, r2
24016bb4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24016bb6:	4b30      	ldr	r3, [pc, #192]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016bba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
24016bbe:	687b      	ldr	r3, [r7, #4]
24016bc0:	695b      	ldr	r3, [r3, #20]
24016bc2:	492d      	ldr	r1, [pc, #180]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016bc4:	4313      	orrs	r3, r2
24016bc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24016bc8:	4b2b      	ldr	r3, [pc, #172]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016bcc:	f023 0220 	bic.w	r2, r3, #32
24016bd0:	687b      	ldr	r3, [r7, #4]
24016bd2:	699b      	ldr	r3, [r3, #24]
24016bd4:	4928      	ldr	r1, [pc, #160]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016bd6:	4313      	orrs	r3, r2
24016bd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
24016bda:	4b27      	ldr	r3, [pc, #156]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016bde:	4a26      	ldr	r2, [pc, #152]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016be0:	f023 0310 	bic.w	r3, r3, #16
24016be4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24016be6:	4b24      	ldr	r3, [pc, #144]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24016bea:	4b24      	ldr	r3, [pc, #144]	; (24016c7c <RCCEx_PLL2_Config+0x160>)
24016bec:	4013      	ands	r3, r2
24016bee:	687a      	ldr	r2, [r7, #4]
24016bf0:	69d2      	ldr	r2, [r2, #28]
24016bf2:	00d2      	lsls	r2, r2, #3
24016bf4:	4920      	ldr	r1, [pc, #128]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016bf6:	4313      	orrs	r3, r2
24016bf8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24016bfa:	4b1f      	ldr	r3, [pc, #124]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016bfe:	4a1e      	ldr	r2, [pc, #120]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c00:	f043 0310 	orr.w	r3, r3, #16
24016c04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
24016c06:	683b      	ldr	r3, [r7, #0]
24016c08:	2b00      	cmp	r3, #0
24016c0a:	d106      	bne.n	24016c1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24016c0c:	4b1a      	ldr	r3, [pc, #104]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016c10:	4a19      	ldr	r2, [pc, #100]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24016c16:	62d3      	str	r3, [r2, #44]	; 0x2c
24016c18:	e00f      	b.n	24016c3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
24016c1a:	683b      	ldr	r3, [r7, #0]
24016c1c:	2b01      	cmp	r3, #1
24016c1e:	d106      	bne.n	24016c2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24016c20:	4b15      	ldr	r3, [pc, #84]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016c24:	4a14      	ldr	r2, [pc, #80]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24016c2a:	62d3      	str	r3, [r2, #44]	; 0x2c
24016c2c:	e005      	b.n	24016c3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24016c2e:	4b12      	ldr	r3, [pc, #72]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016c32:	4a11      	ldr	r2, [pc, #68]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
24016c38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24016c3a:	4b0f      	ldr	r3, [pc, #60]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c3c:	681b      	ldr	r3, [r3, #0]
24016c3e:	4a0e      	ldr	r2, [pc, #56]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24016c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24016c46:	f7eb fad9 	bl	240021fc <HAL_GetTick>
24016c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24016c4c:	e008      	b.n	24016c60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
24016c4e:	f7eb fad5 	bl	240021fc <HAL_GetTick>
24016c52:	4602      	mov	r2, r0
24016c54:	68bb      	ldr	r3, [r7, #8]
24016c56:	1ad3      	subs	r3, r2, r3
24016c58:	2b02      	cmp	r3, #2
24016c5a:	d901      	bls.n	24016c60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
24016c5c:	2303      	movs	r3, #3
24016c5e:	e006      	b.n	24016c6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24016c60:	4b05      	ldr	r3, [pc, #20]	; (24016c78 <RCCEx_PLL2_Config+0x15c>)
24016c62:	681b      	ldr	r3, [r3, #0]
24016c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24016c68:	2b00      	cmp	r3, #0
24016c6a:	d0f0      	beq.n	24016c4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
24016c6c:	7bfb      	ldrb	r3, [r7, #15]
}
24016c6e:	4618      	mov	r0, r3
24016c70:	3710      	adds	r7, #16
24016c72:	46bd      	mov	sp, r7
24016c74:	bd80      	pop	{r7, pc}
24016c76:	bf00      	nop
24016c78:	58024400 	.word	0x58024400
24016c7c:	ffff0007 	.word	0xffff0007

24016c80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24016c80:	b580      	push	{r7, lr}
24016c82:	b084      	sub	sp, #16
24016c84:	af00      	add	r7, sp, #0
24016c86:	6078      	str	r0, [r7, #4]
24016c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24016c8a:	2300      	movs	r3, #0
24016c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24016c8e:	4b53      	ldr	r3, [pc, #332]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016c92:	f003 0303 	and.w	r3, r3, #3
24016c96:	2b03      	cmp	r3, #3
24016c98:	d101      	bne.n	24016c9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
24016c9a:	2301      	movs	r3, #1
24016c9c:	e099      	b.n	24016dd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24016c9e:	4b4f      	ldr	r3, [pc, #316]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016ca0:	681b      	ldr	r3, [r3, #0]
24016ca2:	4a4e      	ldr	r2, [pc, #312]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24016ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24016caa:	f7eb faa7 	bl	240021fc <HAL_GetTick>
24016cae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24016cb0:	e008      	b.n	24016cc4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
24016cb2:	f7eb faa3 	bl	240021fc <HAL_GetTick>
24016cb6:	4602      	mov	r2, r0
24016cb8:	68bb      	ldr	r3, [r7, #8]
24016cba:	1ad3      	subs	r3, r2, r3
24016cbc:	2b02      	cmp	r3, #2
24016cbe:	d901      	bls.n	24016cc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
24016cc0:	2303      	movs	r3, #3
24016cc2:	e086      	b.n	24016dd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24016cc4:	4b45      	ldr	r3, [pc, #276]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016cc6:	681b      	ldr	r3, [r3, #0]
24016cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24016ccc:	2b00      	cmp	r3, #0
24016cce:	d1f0      	bne.n	24016cb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24016cd0:	4b42      	ldr	r3, [pc, #264]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24016cd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
24016cd8:	687b      	ldr	r3, [r7, #4]
24016cda:	681b      	ldr	r3, [r3, #0]
24016cdc:	051b      	lsls	r3, r3, #20
24016cde:	493f      	ldr	r1, [pc, #252]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016ce0:	4313      	orrs	r3, r2
24016ce2:	628b      	str	r3, [r1, #40]	; 0x28
24016ce4:	687b      	ldr	r3, [r7, #4]
24016ce6:	685b      	ldr	r3, [r3, #4]
24016ce8:	3b01      	subs	r3, #1
24016cea:	f3c3 0208 	ubfx	r2, r3, #0, #9
24016cee:	687b      	ldr	r3, [r7, #4]
24016cf0:	689b      	ldr	r3, [r3, #8]
24016cf2:	3b01      	subs	r3, #1
24016cf4:	025b      	lsls	r3, r3, #9
24016cf6:	b29b      	uxth	r3, r3
24016cf8:	431a      	orrs	r2, r3
24016cfa:	687b      	ldr	r3, [r7, #4]
24016cfc:	68db      	ldr	r3, [r3, #12]
24016cfe:	3b01      	subs	r3, #1
24016d00:	041b      	lsls	r3, r3, #16
24016d02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
24016d06:	431a      	orrs	r2, r3
24016d08:	687b      	ldr	r3, [r7, #4]
24016d0a:	691b      	ldr	r3, [r3, #16]
24016d0c:	3b01      	subs	r3, #1
24016d0e:	061b      	lsls	r3, r3, #24
24016d10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
24016d14:	4931      	ldr	r1, [pc, #196]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d16:	4313      	orrs	r3, r2
24016d18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24016d1a:	4b30      	ldr	r3, [pc, #192]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016d1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
24016d22:	687b      	ldr	r3, [r7, #4]
24016d24:	695b      	ldr	r3, [r3, #20]
24016d26:	492d      	ldr	r1, [pc, #180]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d28:	4313      	orrs	r3, r2
24016d2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24016d2c:	4b2b      	ldr	r3, [pc, #172]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016d30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
24016d34:	687b      	ldr	r3, [r7, #4]
24016d36:	699b      	ldr	r3, [r3, #24]
24016d38:	4928      	ldr	r1, [pc, #160]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d3a:	4313      	orrs	r3, r2
24016d3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
24016d3e:	4b27      	ldr	r3, [pc, #156]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016d42:	4a26      	ldr	r2, [pc, #152]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24016d48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24016d4a:	4b24      	ldr	r3, [pc, #144]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
24016d4e:	4b24      	ldr	r3, [pc, #144]	; (24016de0 <RCCEx_PLL3_Config+0x160>)
24016d50:	4013      	ands	r3, r2
24016d52:	687a      	ldr	r2, [r7, #4]
24016d54:	69d2      	ldr	r2, [r2, #28]
24016d56:	00d2      	lsls	r2, r2, #3
24016d58:	4920      	ldr	r1, [pc, #128]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d5a:	4313      	orrs	r3, r2
24016d5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24016d5e:	4b1f      	ldr	r3, [pc, #124]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016d62:	4a1e      	ldr	r2, [pc, #120]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24016d68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
24016d6a:	683b      	ldr	r3, [r7, #0]
24016d6c:	2b00      	cmp	r3, #0
24016d6e:	d106      	bne.n	24016d7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24016d70:	4b1a      	ldr	r3, [pc, #104]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016d74:	4a19      	ldr	r2, [pc, #100]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24016d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
24016d7c:	e00f      	b.n	24016d9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
24016d7e:	683b      	ldr	r3, [r7, #0]
24016d80:	2b01      	cmp	r3, #1
24016d82:	d106      	bne.n	24016d92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24016d84:	4b15      	ldr	r3, [pc, #84]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016d88:	4a14      	ldr	r2, [pc, #80]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
24016d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
24016d90:	e005      	b.n	24016d9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24016d92:	4b12      	ldr	r3, [pc, #72]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24016d96:	4a11      	ldr	r2, [pc, #68]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24016d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24016d9e:	4b0f      	ldr	r3, [pc, #60]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016da0:	681b      	ldr	r3, [r3, #0]
24016da2:	4a0e      	ldr	r2, [pc, #56]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24016da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24016daa:	f7eb fa27 	bl	240021fc <HAL_GetTick>
24016dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24016db0:	e008      	b.n	24016dc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
24016db2:	f7eb fa23 	bl	240021fc <HAL_GetTick>
24016db6:	4602      	mov	r2, r0
24016db8:	68bb      	ldr	r3, [r7, #8]
24016dba:	1ad3      	subs	r3, r2, r3
24016dbc:	2b02      	cmp	r3, #2
24016dbe:	d901      	bls.n	24016dc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
24016dc0:	2303      	movs	r3, #3
24016dc2:	e006      	b.n	24016dd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24016dc4:	4b05      	ldr	r3, [pc, #20]	; (24016ddc <RCCEx_PLL3_Config+0x15c>)
24016dc6:	681b      	ldr	r3, [r3, #0]
24016dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24016dcc:	2b00      	cmp	r3, #0
24016dce:	d0f0      	beq.n	24016db2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
24016dd0:	7bfb      	ldrb	r3, [r7, #15]
}
24016dd2:	4618      	mov	r0, r3
24016dd4:	3710      	adds	r7, #16
24016dd6:	46bd      	mov	sp, r7
24016dd8:	bd80      	pop	{r7, pc}
24016dda:	bf00      	nop
24016ddc:	58024400 	.word	0x58024400
24016de0:	ffff0007 	.word	0xffff0007

24016de4 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
24016de4:	b580      	push	{r7, lr}
24016de6:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
24016de8:	4b07      	ldr	r3, [pc, #28]	; (24016e08 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
24016dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24016dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
24016df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24016df4:	d105      	bne.n	24016e02 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
24016df6:	4b04      	ldr	r3, [pc, #16]	; (24016e08 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
24016df8:	f44f 7200 	mov.w	r2, #512	; 0x200
24016dfc:	669a      	str	r2, [r3, #104]	; 0x68

    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
24016dfe:	f000 f805 	bl	24016e0c <HAL_RCCEx_LSECSS_Callback>

  }
}
24016e02:	bf00      	nop
24016e04:	bd80      	pop	{r7, pc}
24016e06:	bf00      	nop
24016e08:	58024400 	.word	0x58024400

24016e0c <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
24016e0c:	b480      	push	{r7}
24016e0e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
  */
}
24016e10:	bf00      	nop
24016e12:	46bd      	mov	sp, r7
24016e14:	f85d 7b04 	ldr.w	r7, [sp], #4
24016e18:	4770      	bx	lr
	...

24016e1c <__errno>:
24016e1c:	4b01      	ldr	r3, [pc, #4]	; (24016e24 <__errno+0x8>)
24016e1e:	6818      	ldr	r0, [r3, #0]
24016e20:	4770      	bx	lr
24016e22:	bf00      	nop
24016e24:	240004c0 	.word	0x240004c0

24016e28 <exit>:
24016e28:	b508      	push	{r3, lr}
24016e2a:	4b07      	ldr	r3, [pc, #28]	; (24016e48 <exit+0x20>)
24016e2c:	4604      	mov	r4, r0
24016e2e:	b113      	cbz	r3, 24016e36 <exit+0xe>
24016e30:	2100      	movs	r1, #0
24016e32:	f3af 8000 	nop.w
24016e36:	4b05      	ldr	r3, [pc, #20]	; (24016e4c <exit+0x24>)
24016e38:	6818      	ldr	r0, [r3, #0]
24016e3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
24016e3c:	b103      	cbz	r3, 24016e40 <exit+0x18>
24016e3e:	4798      	blx	r3
24016e40:	4620      	mov	r0, r4
24016e42:	f7ea fd9c 	bl	2400197e <_exit>
24016e46:	bf00      	nop
24016e48:	00000000 	.word	0x00000000
24016e4c:	2401700c 	.word	0x2401700c

24016e50 <__libc_init_array>:
24016e50:	b570      	push	{r4, r5, r6, lr}
24016e52:	4d0d      	ldr	r5, [pc, #52]	; (24016e88 <__libc_init_array+0x38>)
24016e54:	4c0d      	ldr	r4, [pc, #52]	; (24016e8c <__libc_init_array+0x3c>)
24016e56:	1b64      	subs	r4, r4, r5
24016e58:	10a4      	asrs	r4, r4, #2
24016e5a:	2600      	movs	r6, #0
24016e5c:	42a6      	cmp	r6, r4
24016e5e:	d109      	bne.n	24016e74 <__libc_init_array+0x24>
24016e60:	4d0b      	ldr	r5, [pc, #44]	; (24016e90 <__libc_init_array+0x40>)
24016e62:	4c0c      	ldr	r4, [pc, #48]	; (24016e94 <__libc_init_array+0x44>)
24016e64:	f000 f832 	bl	24016ecc <_init>
24016e68:	1b64      	subs	r4, r4, r5
24016e6a:	10a4      	asrs	r4, r4, #2
24016e6c:	2600      	movs	r6, #0
24016e6e:	42a6      	cmp	r6, r4
24016e70:	d105      	bne.n	24016e7e <__libc_init_array+0x2e>
24016e72:	bd70      	pop	{r4, r5, r6, pc}
24016e74:	f855 3b04 	ldr.w	r3, [r5], #4
24016e78:	4798      	blx	r3
24016e7a:	3601      	adds	r6, #1
24016e7c:	e7ee      	b.n	24016e5c <__libc_init_array+0xc>
24016e7e:	f855 3b04 	ldr.w	r3, [r5], #4
24016e82:	4798      	blx	r3
24016e84:	3601      	adds	r6, #1
24016e86:	e7f2      	b.n	24016e6e <__libc_init_array+0x1e>
24016e88:	240004a0 	.word	0x240004a0
24016e8c:	240004a0 	.word	0x240004a0
24016e90:	240004a0 	.word	0x240004a0
24016e94:	240004a4 	.word	0x240004a4

24016e98 <memcmp>:
24016e98:	b510      	push	{r4, lr}
24016e9a:	3901      	subs	r1, #1
24016e9c:	4402      	add	r2, r0
24016e9e:	4290      	cmp	r0, r2
24016ea0:	d101      	bne.n	24016ea6 <memcmp+0xe>
24016ea2:	2000      	movs	r0, #0
24016ea4:	e005      	b.n	24016eb2 <memcmp+0x1a>
24016ea6:	7803      	ldrb	r3, [r0, #0]
24016ea8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
24016eac:	42a3      	cmp	r3, r4
24016eae:	d001      	beq.n	24016eb4 <memcmp+0x1c>
24016eb0:	1b18      	subs	r0, r3, r4
24016eb2:	bd10      	pop	{r4, pc}
24016eb4:	3001      	adds	r0, #1
24016eb6:	e7f2      	b.n	24016e9e <memcmp+0x6>

24016eb8 <memset>:
24016eb8:	4402      	add	r2, r0
24016eba:	4603      	mov	r3, r0
24016ebc:	4293      	cmp	r3, r2
24016ebe:	d100      	bne.n	24016ec2 <memset+0xa>
24016ec0:	4770      	bx	lr
24016ec2:	f803 1b01 	strb.w	r1, [r3], #1
24016ec6:	e7f9      	b.n	24016ebc <memset+0x4>

24016ec8 <__EH_FRAME_BEGIN__>:
24016ec8:	0000 0000                                   ....

24016ecc <_init>:
24016ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24016ece:	bf00      	nop
24016ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
24016ed2:	bc08      	pop	{r3}
24016ed4:	469e      	mov	lr, r3
24016ed6:	4770      	bx	lr

24016ed8 <_fini>:
24016ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24016eda:	bf00      	nop
24016edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
24016ede:	bc08      	pop	{r3}
24016ee0:	469e      	mov	lr, r3
24016ee2:	4770      	bx	lr
