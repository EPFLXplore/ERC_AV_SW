
Orion_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013af4  900002a0  900002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e6c  90013d98  90013d98  00023d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90014c04  90014c04  00024c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  90014c0c  90014c0c  00024c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  90014c18  90014c18  00024c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  90014c24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001288c  240001f0  90014e14  000301f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24012a7c  90014e14  00032a7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00068ceb  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a786  00000000  00000000  00098f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003e60  00000000  00000000  000a3690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003bb0  00000000  00000000  000a74f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004708d  00000000  00000000  000ab0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042aa9  00000000  00000000  000f212d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001aca7c  00000000  00000000  00134bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002e1652  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00012ca0  00000000  00000000  002e16a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	240001f0 	.word	0x240001f0
900002bc:	00000000 	.word	0x00000000
900002c0:	90013d7c 	.word	0x90013d7c

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	240001f4 	.word	0x240001f4
900002dc:	90013d7c 	.word	0x90013d7c

900002e0 <strcmp>:
900002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
900002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
900002e8:	2a01      	cmp	r2, #1
900002ea:	bf28      	it	cs
900002ec:	429a      	cmpcs	r2, r3
900002ee:	d0f7      	beq.n	900002e0 <strcmp>
900002f0:	1ad0      	subs	r0, r2, r3
900002f2:	4770      	bx	lr

900002f4 <strlen>:
900002f4:	4603      	mov	r3, r0
900002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
900002fa:	2a00      	cmp	r2, #0
900002fc:	d1fb      	bne.n	900002f6 <strlen+0x2>
900002fe:	1a18      	subs	r0, r3, r0
90000300:	3801      	subs	r0, #1
90000302:	4770      	bx	lr
	...

90000310 <memchr>:
90000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000314:	2a10      	cmp	r2, #16
90000316:	db2b      	blt.n	90000370 <memchr+0x60>
90000318:	f010 0f07 	tst.w	r0, #7
9000031c:	d008      	beq.n	90000330 <memchr+0x20>
9000031e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000322:	3a01      	subs	r2, #1
90000324:	428b      	cmp	r3, r1
90000326:	d02d      	beq.n	90000384 <memchr+0x74>
90000328:	f010 0f07 	tst.w	r0, #7
9000032c:	b342      	cbz	r2, 90000380 <memchr+0x70>
9000032e:	d1f6      	bne.n	9000031e <memchr+0xe>
90000330:	b4f0      	push	{r4, r5, r6, r7}
90000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000033a:	f022 0407 	bic.w	r4, r2, #7
9000033e:	f07f 0700 	mvns.w	r7, #0
90000342:	2300      	movs	r3, #0
90000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000348:	3c08      	subs	r4, #8
9000034a:	ea85 0501 	eor.w	r5, r5, r1
9000034e:	ea86 0601 	eor.w	r6, r6, r1
90000352:	fa85 f547 	uadd8	r5, r5, r7
90000356:	faa3 f587 	sel	r5, r3, r7
9000035a:	fa86 f647 	uadd8	r6, r6, r7
9000035e:	faa5 f687 	sel	r6, r5, r7
90000362:	b98e      	cbnz	r6, 90000388 <memchr+0x78>
90000364:	d1ee      	bne.n	90000344 <memchr+0x34>
90000366:	bcf0      	pop	{r4, r5, r6, r7}
90000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000036c:	f002 0207 	and.w	r2, r2, #7
90000370:	b132      	cbz	r2, 90000380 <memchr+0x70>
90000372:	f810 3b01 	ldrb.w	r3, [r0], #1
90000376:	3a01      	subs	r2, #1
90000378:	ea83 0301 	eor.w	r3, r3, r1
9000037c:	b113      	cbz	r3, 90000384 <memchr+0x74>
9000037e:	d1f8      	bne.n	90000372 <memchr+0x62>
90000380:	2000      	movs	r0, #0
90000382:	4770      	bx	lr
90000384:	3801      	subs	r0, #1
90000386:	4770      	bx	lr
90000388:	2d00      	cmp	r5, #0
9000038a:	bf06      	itte	eq
9000038c:	4635      	moveq	r5, r6
9000038e:	3803      	subeq	r0, #3
90000390:	3807      	subne	r0, #7
90000392:	f015 0f01 	tst.w	r5, #1
90000396:	d107      	bne.n	900003a8 <memchr+0x98>
90000398:	3001      	adds	r0, #1
9000039a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000039e:	bf02      	ittt	eq
900003a0:	3001      	addeq	r0, #1
900003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900003a6:	3001      	addeq	r0, #1
900003a8:	bcf0      	pop	{r4, r5, r6, r7}
900003aa:	3801      	subs	r0, #1
900003ac:	4770      	bx	lr
900003ae:	bf00      	nop

900003b0 <__aeabi_uldivmod>:
900003b0:	b953      	cbnz	r3, 900003c8 <__aeabi_uldivmod+0x18>
900003b2:	b94a      	cbnz	r2, 900003c8 <__aeabi_uldivmod+0x18>
900003b4:	2900      	cmp	r1, #0
900003b6:	bf08      	it	eq
900003b8:	2800      	cmpeq	r0, #0
900003ba:	bf1c      	itt	ne
900003bc:	f04f 31ff 	movne.w	r1, #4294967295
900003c0:	f04f 30ff 	movne.w	r0, #4294967295
900003c4:	f000 b974 	b.w	900006b0 <__aeabi_idiv0>
900003c8:	f1ad 0c08 	sub.w	ip, sp, #8
900003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003d0:	f000 f806 	bl	900003e0 <__udivmoddi4>
900003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
900003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003dc:	b004      	add	sp, #16
900003de:	4770      	bx	lr

900003e0 <__udivmoddi4>:
900003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003e4:	9d08      	ldr	r5, [sp, #32]
900003e6:	4604      	mov	r4, r0
900003e8:	468e      	mov	lr, r1
900003ea:	2b00      	cmp	r3, #0
900003ec:	d14d      	bne.n	9000048a <__udivmoddi4+0xaa>
900003ee:	428a      	cmp	r2, r1
900003f0:	4694      	mov	ip, r2
900003f2:	d969      	bls.n	900004c8 <__udivmoddi4+0xe8>
900003f4:	fab2 f282 	clz	r2, r2
900003f8:	b152      	cbz	r2, 90000410 <__udivmoddi4+0x30>
900003fa:	fa01 f302 	lsl.w	r3, r1, r2
900003fe:	f1c2 0120 	rsb	r1, r2, #32
90000402:	fa20 f101 	lsr.w	r1, r0, r1
90000406:	fa0c fc02 	lsl.w	ip, ip, r2
9000040a:	ea41 0e03 	orr.w	lr, r1, r3
9000040e:	4094      	lsls	r4, r2
90000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
90000414:	0c21      	lsrs	r1, r4, #16
90000416:	fbbe f6f8 	udiv	r6, lr, r8
9000041a:	fa1f f78c 	uxth.w	r7, ip
9000041e:	fb08 e316 	mls	r3, r8, r6, lr
90000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
90000426:	fb06 f107 	mul.w	r1, r6, r7
9000042a:	4299      	cmp	r1, r3
9000042c:	d90a      	bls.n	90000444 <__udivmoddi4+0x64>
9000042e:	eb1c 0303 	adds.w	r3, ip, r3
90000432:	f106 30ff 	add.w	r0, r6, #4294967295
90000436:	f080 811f 	bcs.w	90000678 <__udivmoddi4+0x298>
9000043a:	4299      	cmp	r1, r3
9000043c:	f240 811c 	bls.w	90000678 <__udivmoddi4+0x298>
90000440:	3e02      	subs	r6, #2
90000442:	4463      	add	r3, ip
90000444:	1a5b      	subs	r3, r3, r1
90000446:	b2a4      	uxth	r4, r4
90000448:	fbb3 f0f8 	udiv	r0, r3, r8
9000044c:	fb08 3310 	mls	r3, r8, r0, r3
90000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000454:	fb00 f707 	mul.w	r7, r0, r7
90000458:	42a7      	cmp	r7, r4
9000045a:	d90a      	bls.n	90000472 <__udivmoddi4+0x92>
9000045c:	eb1c 0404 	adds.w	r4, ip, r4
90000460:	f100 33ff 	add.w	r3, r0, #4294967295
90000464:	f080 810a 	bcs.w	9000067c <__udivmoddi4+0x29c>
90000468:	42a7      	cmp	r7, r4
9000046a:	f240 8107 	bls.w	9000067c <__udivmoddi4+0x29c>
9000046e:	4464      	add	r4, ip
90000470:	3802      	subs	r0, #2
90000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
90000476:	1be4      	subs	r4, r4, r7
90000478:	2600      	movs	r6, #0
9000047a:	b11d      	cbz	r5, 90000484 <__udivmoddi4+0xa4>
9000047c:	40d4      	lsrs	r4, r2
9000047e:	2300      	movs	r3, #0
90000480:	e9c5 4300 	strd	r4, r3, [r5]
90000484:	4631      	mov	r1, r6
90000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000048a:	428b      	cmp	r3, r1
9000048c:	d909      	bls.n	900004a2 <__udivmoddi4+0xc2>
9000048e:	2d00      	cmp	r5, #0
90000490:	f000 80ef 	beq.w	90000672 <__udivmoddi4+0x292>
90000494:	2600      	movs	r6, #0
90000496:	e9c5 0100 	strd	r0, r1, [r5]
9000049a:	4630      	mov	r0, r6
9000049c:	4631      	mov	r1, r6
9000049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004a2:	fab3 f683 	clz	r6, r3
900004a6:	2e00      	cmp	r6, #0
900004a8:	d14a      	bne.n	90000540 <__udivmoddi4+0x160>
900004aa:	428b      	cmp	r3, r1
900004ac:	d302      	bcc.n	900004b4 <__udivmoddi4+0xd4>
900004ae:	4282      	cmp	r2, r0
900004b0:	f200 80f9 	bhi.w	900006a6 <__udivmoddi4+0x2c6>
900004b4:	1a84      	subs	r4, r0, r2
900004b6:	eb61 0303 	sbc.w	r3, r1, r3
900004ba:	2001      	movs	r0, #1
900004bc:	469e      	mov	lr, r3
900004be:	2d00      	cmp	r5, #0
900004c0:	d0e0      	beq.n	90000484 <__udivmoddi4+0xa4>
900004c2:	e9c5 4e00 	strd	r4, lr, [r5]
900004c6:	e7dd      	b.n	90000484 <__udivmoddi4+0xa4>
900004c8:	b902      	cbnz	r2, 900004cc <__udivmoddi4+0xec>
900004ca:	deff      	udf	#255	; 0xff
900004cc:	fab2 f282 	clz	r2, r2
900004d0:	2a00      	cmp	r2, #0
900004d2:	f040 8092 	bne.w	900005fa <__udivmoddi4+0x21a>
900004d6:	eba1 010c 	sub.w	r1, r1, ip
900004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
900004de:	fa1f fe8c 	uxth.w	lr, ip
900004e2:	2601      	movs	r6, #1
900004e4:	0c20      	lsrs	r0, r4, #16
900004e6:	fbb1 f3f7 	udiv	r3, r1, r7
900004ea:	fb07 1113 	mls	r1, r7, r3, r1
900004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
900004f2:	fb0e f003 	mul.w	r0, lr, r3
900004f6:	4288      	cmp	r0, r1
900004f8:	d908      	bls.n	9000050c <__udivmoddi4+0x12c>
900004fa:	eb1c 0101 	adds.w	r1, ip, r1
900004fe:	f103 38ff 	add.w	r8, r3, #4294967295
90000502:	d202      	bcs.n	9000050a <__udivmoddi4+0x12a>
90000504:	4288      	cmp	r0, r1
90000506:	f200 80cb 	bhi.w	900006a0 <__udivmoddi4+0x2c0>
9000050a:	4643      	mov	r3, r8
9000050c:	1a09      	subs	r1, r1, r0
9000050e:	b2a4      	uxth	r4, r4
90000510:	fbb1 f0f7 	udiv	r0, r1, r7
90000514:	fb07 1110 	mls	r1, r7, r0, r1
90000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
9000051c:	fb0e fe00 	mul.w	lr, lr, r0
90000520:	45a6      	cmp	lr, r4
90000522:	d908      	bls.n	90000536 <__udivmoddi4+0x156>
90000524:	eb1c 0404 	adds.w	r4, ip, r4
90000528:	f100 31ff 	add.w	r1, r0, #4294967295
9000052c:	d202      	bcs.n	90000534 <__udivmoddi4+0x154>
9000052e:	45a6      	cmp	lr, r4
90000530:	f200 80bb 	bhi.w	900006aa <__udivmoddi4+0x2ca>
90000534:	4608      	mov	r0, r1
90000536:	eba4 040e 	sub.w	r4, r4, lr
9000053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
9000053e:	e79c      	b.n	9000047a <__udivmoddi4+0x9a>
90000540:	f1c6 0720 	rsb	r7, r6, #32
90000544:	40b3      	lsls	r3, r6
90000546:	fa22 fc07 	lsr.w	ip, r2, r7
9000054a:	ea4c 0c03 	orr.w	ip, ip, r3
9000054e:	fa20 f407 	lsr.w	r4, r0, r7
90000552:	fa01 f306 	lsl.w	r3, r1, r6
90000556:	431c      	orrs	r4, r3
90000558:	40f9      	lsrs	r1, r7
9000055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
9000055e:	fa00 f306 	lsl.w	r3, r0, r6
90000562:	fbb1 f8f9 	udiv	r8, r1, r9
90000566:	0c20      	lsrs	r0, r4, #16
90000568:	fa1f fe8c 	uxth.w	lr, ip
9000056c:	fb09 1118 	mls	r1, r9, r8, r1
90000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
90000574:	fb08 f00e 	mul.w	r0, r8, lr
90000578:	4288      	cmp	r0, r1
9000057a:	fa02 f206 	lsl.w	r2, r2, r6
9000057e:	d90b      	bls.n	90000598 <__udivmoddi4+0x1b8>
90000580:	eb1c 0101 	adds.w	r1, ip, r1
90000584:	f108 3aff 	add.w	sl, r8, #4294967295
90000588:	f080 8088 	bcs.w	9000069c <__udivmoddi4+0x2bc>
9000058c:	4288      	cmp	r0, r1
9000058e:	f240 8085 	bls.w	9000069c <__udivmoddi4+0x2bc>
90000592:	f1a8 0802 	sub.w	r8, r8, #2
90000596:	4461      	add	r1, ip
90000598:	1a09      	subs	r1, r1, r0
9000059a:	b2a4      	uxth	r4, r4
9000059c:	fbb1 f0f9 	udiv	r0, r1, r9
900005a0:	fb09 1110 	mls	r1, r9, r0, r1
900005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
900005a8:	fb00 fe0e 	mul.w	lr, r0, lr
900005ac:	458e      	cmp	lr, r1
900005ae:	d908      	bls.n	900005c2 <__udivmoddi4+0x1e2>
900005b0:	eb1c 0101 	adds.w	r1, ip, r1
900005b4:	f100 34ff 	add.w	r4, r0, #4294967295
900005b8:	d26c      	bcs.n	90000694 <__udivmoddi4+0x2b4>
900005ba:	458e      	cmp	lr, r1
900005bc:	d96a      	bls.n	90000694 <__udivmoddi4+0x2b4>
900005be:	3802      	subs	r0, #2
900005c0:	4461      	add	r1, ip
900005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
900005c6:	fba0 9402 	umull	r9, r4, r0, r2
900005ca:	eba1 010e 	sub.w	r1, r1, lr
900005ce:	42a1      	cmp	r1, r4
900005d0:	46c8      	mov	r8, r9
900005d2:	46a6      	mov	lr, r4
900005d4:	d356      	bcc.n	90000684 <__udivmoddi4+0x2a4>
900005d6:	d053      	beq.n	90000680 <__udivmoddi4+0x2a0>
900005d8:	b15d      	cbz	r5, 900005f2 <__udivmoddi4+0x212>
900005da:	ebb3 0208 	subs.w	r2, r3, r8
900005de:	eb61 010e 	sbc.w	r1, r1, lr
900005e2:	fa01 f707 	lsl.w	r7, r1, r7
900005e6:	fa22 f306 	lsr.w	r3, r2, r6
900005ea:	40f1      	lsrs	r1, r6
900005ec:	431f      	orrs	r7, r3
900005ee:	e9c5 7100 	strd	r7, r1, [r5]
900005f2:	2600      	movs	r6, #0
900005f4:	4631      	mov	r1, r6
900005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900005fa:	f1c2 0320 	rsb	r3, r2, #32
900005fe:	40d8      	lsrs	r0, r3
90000600:	fa0c fc02 	lsl.w	ip, ip, r2
90000604:	fa21 f303 	lsr.w	r3, r1, r3
90000608:	4091      	lsls	r1, r2
9000060a:	4301      	orrs	r1, r0
9000060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000610:	fa1f fe8c 	uxth.w	lr, ip
90000614:	fbb3 f0f7 	udiv	r0, r3, r7
90000618:	fb07 3610 	mls	r6, r7, r0, r3
9000061c:	0c0b      	lsrs	r3, r1, #16
9000061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90000622:	fb00 f60e 	mul.w	r6, r0, lr
90000626:	429e      	cmp	r6, r3
90000628:	fa04 f402 	lsl.w	r4, r4, r2
9000062c:	d908      	bls.n	90000640 <__udivmoddi4+0x260>
9000062e:	eb1c 0303 	adds.w	r3, ip, r3
90000632:	f100 38ff 	add.w	r8, r0, #4294967295
90000636:	d22f      	bcs.n	90000698 <__udivmoddi4+0x2b8>
90000638:	429e      	cmp	r6, r3
9000063a:	d92d      	bls.n	90000698 <__udivmoddi4+0x2b8>
9000063c:	3802      	subs	r0, #2
9000063e:	4463      	add	r3, ip
90000640:	1b9b      	subs	r3, r3, r6
90000642:	b289      	uxth	r1, r1
90000644:	fbb3 f6f7 	udiv	r6, r3, r7
90000648:	fb07 3316 	mls	r3, r7, r6, r3
9000064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000650:	fb06 f30e 	mul.w	r3, r6, lr
90000654:	428b      	cmp	r3, r1
90000656:	d908      	bls.n	9000066a <__udivmoddi4+0x28a>
90000658:	eb1c 0101 	adds.w	r1, ip, r1
9000065c:	f106 38ff 	add.w	r8, r6, #4294967295
90000660:	d216      	bcs.n	90000690 <__udivmoddi4+0x2b0>
90000662:	428b      	cmp	r3, r1
90000664:	d914      	bls.n	90000690 <__udivmoddi4+0x2b0>
90000666:	3e02      	subs	r6, #2
90000668:	4461      	add	r1, ip
9000066a:	1ac9      	subs	r1, r1, r3
9000066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
90000670:	e738      	b.n	900004e4 <__udivmoddi4+0x104>
90000672:	462e      	mov	r6, r5
90000674:	4628      	mov	r0, r5
90000676:	e705      	b.n	90000484 <__udivmoddi4+0xa4>
90000678:	4606      	mov	r6, r0
9000067a:	e6e3      	b.n	90000444 <__udivmoddi4+0x64>
9000067c:	4618      	mov	r0, r3
9000067e:	e6f8      	b.n	90000472 <__udivmoddi4+0x92>
90000680:	454b      	cmp	r3, r9
90000682:	d2a9      	bcs.n	900005d8 <__udivmoddi4+0x1f8>
90000684:	ebb9 0802 	subs.w	r8, r9, r2
90000688:	eb64 0e0c 	sbc.w	lr, r4, ip
9000068c:	3801      	subs	r0, #1
9000068e:	e7a3      	b.n	900005d8 <__udivmoddi4+0x1f8>
90000690:	4646      	mov	r6, r8
90000692:	e7ea      	b.n	9000066a <__udivmoddi4+0x28a>
90000694:	4620      	mov	r0, r4
90000696:	e794      	b.n	900005c2 <__udivmoddi4+0x1e2>
90000698:	4640      	mov	r0, r8
9000069a:	e7d1      	b.n	90000640 <__udivmoddi4+0x260>
9000069c:	46d0      	mov	r8, sl
9000069e:	e77b      	b.n	90000598 <__udivmoddi4+0x1b8>
900006a0:	3b02      	subs	r3, #2
900006a2:	4461      	add	r1, ip
900006a4:	e732      	b.n	9000050c <__udivmoddi4+0x12c>
900006a6:	4630      	mov	r0, r6
900006a8:	e709      	b.n	900004be <__udivmoddi4+0xde>
900006aa:	4464      	add	r4, ip
900006ac:	3802      	subs	r0, #2
900006ae:	e742      	b.n	90000536 <__udivmoddi4+0x156>

900006b0 <__aeabi_idiv0>:
900006b0:	4770      	bx	lr
900006b2:	bf00      	nop

900006b4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
900006b4:	b580      	push	{r7, lr}
900006b6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
900006b8:	4b2f      	ldr	r3, [pc, #188]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006ba:	4a30      	ldr	r2, [pc, #192]	; (9000077c <MX_FDCAN1_Init+0xc8>)
900006bc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
900006be:	4b2e      	ldr	r3, [pc, #184]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006c0:	f44f 7240 	mov.w	r2, #768	; 0x300
900006c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
900006c6:	4b2c      	ldr	r3, [pc, #176]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006c8:	2200      	movs	r2, #0
900006ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
900006cc:	4b2a      	ldr	r3, [pc, #168]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006ce:	2201      	movs	r2, #1
900006d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
900006d2:	4b29      	ldr	r3, [pc, #164]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006d4:	2201      	movs	r2, #1
900006d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
900006d8:	4b27      	ldr	r3, [pc, #156]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006da:	2200      	movs	r2, #0
900006dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
900006de:	4b26      	ldr	r3, [pc, #152]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006e0:	2202      	movs	r2, #2
900006e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
900006e4:	4b24      	ldr	r3, [pc, #144]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006e6:	2210      	movs	r2, #16
900006e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
900006ea:	4b23      	ldr	r3, [pc, #140]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006ec:	223f      	movs	r2, #63	; 0x3f
900006ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
900006f0:	4b21      	ldr	r3, [pc, #132]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006f2:	2210      	movs	r2, #16
900006f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
900006f6:	4b20      	ldr	r3, [pc, #128]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006f8:	2202      	movs	r2, #2
900006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
900006fc:	4b1e      	ldr	r3, [pc, #120]	; (90000778 <MX_FDCAN1_Init+0xc4>)
900006fe:	2205      	movs	r2, #5
90000700:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
90000702:	4b1d      	ldr	r3, [pc, #116]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000704:	220e      	movs	r2, #14
90000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
90000708:	4b1b      	ldr	r3, [pc, #108]	; (90000778 <MX_FDCAN1_Init+0xc4>)
9000070a:	2205      	movs	r2, #5
9000070c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
9000070e:	4b1a      	ldr	r3, [pc, #104]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000710:	2200      	movs	r2, #0
90000712:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 64;
90000714:	4b18      	ldr	r3, [pc, #96]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000716:	2240      	movs	r2, #64	; 0x40
90000718:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 32;
9000071a:	4b17      	ldr	r3, [pc, #92]	; (90000778 <MX_FDCAN1_Init+0xc4>)
9000071c:	2220      	movs	r2, #32
9000071e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
90000720:	4b15      	ldr	r3, [pc, #84]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000722:	2220      	movs	r2, #32
90000724:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
90000726:	4b14      	ldr	r3, [pc, #80]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000728:	2212      	movs	r2, #18
9000072a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
9000072c:	4b12      	ldr	r3, [pc, #72]	; (90000778 <MX_FDCAN1_Init+0xc4>)
9000072e:	2200      	movs	r2, #0
90000730:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
90000732:	4b11      	ldr	r3, [pc, #68]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000734:	2212      	movs	r2, #18
90000736:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
90000738:	4b0f      	ldr	r3, [pc, #60]	; (90000778 <MX_FDCAN1_Init+0xc4>)
9000073a:	2200      	movs	r2, #0
9000073c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
9000073e:	4b0e      	ldr	r3, [pc, #56]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000740:	2212      	movs	r2, #18
90000742:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
90000744:	4b0c      	ldr	r3, [pc, #48]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000746:	2200      	movs	r2, #0
90000748:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
9000074a:	4b0b      	ldr	r3, [pc, #44]	; (90000778 <MX_FDCAN1_Init+0xc4>)
9000074c:	2200      	movs	r2, #0
9000074e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
90000750:	4b09      	ldr	r3, [pc, #36]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000752:	2210      	movs	r2, #16
90000754:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
90000756:	4b08      	ldr	r3, [pc, #32]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000758:	2200      	movs	r2, #0
9000075a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
9000075c:	4b06      	ldr	r3, [pc, #24]	; (90000778 <MX_FDCAN1_Init+0xc4>)
9000075e:	2212      	movs	r2, #18
90000760:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
90000762:	4805      	ldr	r0, [pc, #20]	; (90000778 <MX_FDCAN1_Init+0xc4>)
90000764:	f001 fd2a 	bl	900021bc <HAL_FDCAN_Init>
90000768:	4603      	mov	r3, r0
9000076a:	2b00      	cmp	r3, #0
9000076c:	d001      	beq.n	90000772 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
9000076e:	f000 fc8f 	bl	90001090 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
90000772:	bf00      	nop
90000774:	bd80      	pop	{r7, pc}
90000776:	bf00      	nop
90000778:	2400020c 	.word	0x2400020c
9000077c:	4000a000 	.word	0x4000a000

90000780 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
90000780:	b580      	push	{r7, lr}
90000782:	b0ba      	sub	sp, #232	; 0xe8
90000784:	af00      	add	r7, sp, #0
90000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000788:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
9000078c:	2200      	movs	r2, #0
9000078e:	601a      	str	r2, [r3, #0]
90000790:	605a      	str	r2, [r3, #4]
90000792:	609a      	str	r2, [r3, #8]
90000794:	60da      	str	r2, [r3, #12]
90000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000798:	f107 0310 	add.w	r3, r7, #16
9000079c:	22c0      	movs	r2, #192	; 0xc0
9000079e:	2100      	movs	r1, #0
900007a0:	4618      	mov	r0, r3
900007a2:	f010 fc75 	bl	90011090 <memset>
  if(fdcanHandle->Instance==FDCAN1)
900007a6:	687b      	ldr	r3, [r7, #4]
900007a8:	681b      	ldr	r3, [r3, #0]
900007aa:	4a2b      	ldr	r2, [pc, #172]	; (90000858 <HAL_FDCAN_MspInit+0xd8>)
900007ac:	4293      	cmp	r3, r2
900007ae:	d14f      	bne.n	90000850 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
900007b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
900007b4:	f04f 0300 	mov.w	r3, #0
900007b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
900007bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
900007c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900007c4:	f107 0310 	add.w	r3, r7, #16
900007c8:	4618      	mov	r0, r3
900007ca:	f004 fd13 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
900007ce:	4603      	mov	r3, r0
900007d0:	2b00      	cmp	r3, #0
900007d2:	d001      	beq.n	900007d8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
900007d4:	f000 fc5c 	bl	90001090 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
900007d8:	4b20      	ldr	r3, [pc, #128]	; (9000085c <HAL_FDCAN_MspInit+0xdc>)
900007da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
900007de:	4a1f      	ldr	r2, [pc, #124]	; (9000085c <HAL_FDCAN_MspInit+0xdc>)
900007e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900007e4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
900007e8:	4b1c      	ldr	r3, [pc, #112]	; (9000085c <HAL_FDCAN_MspInit+0xdc>)
900007ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
900007ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
900007f2:	60fb      	str	r3, [r7, #12]
900007f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
900007f6:	4b19      	ldr	r3, [pc, #100]	; (9000085c <HAL_FDCAN_MspInit+0xdc>)
900007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900007fc:	4a17      	ldr	r2, [pc, #92]	; (9000085c <HAL_FDCAN_MspInit+0xdc>)
900007fe:	f043 0301 	orr.w	r3, r3, #1
90000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000806:	4b15      	ldr	r3, [pc, #84]	; (9000085c <HAL_FDCAN_MspInit+0xdc>)
90000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000080c:	f003 0301 	and.w	r3, r3, #1
90000810:	60bb      	str	r3, [r7, #8]
90000812:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
90000814:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
90000818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000081c:	2302      	movs	r3, #2
9000081e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000822:	2300      	movs	r3, #0
90000824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000828:	2300      	movs	r3, #0
9000082a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
9000082e:	2309      	movs	r3, #9
90000830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000834:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
90000838:	4619      	mov	r1, r3
9000083a:	4809      	ldr	r0, [pc, #36]	; (90000860 <HAL_FDCAN_MspInit+0xe0>)
9000083c:	f002 fef6 	bl	9000362c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 10, 0);
90000840:	2200      	movs	r2, #0
90000842:	210a      	movs	r1, #10
90000844:	2013      	movs	r0, #19
90000846:	f001 fc91 	bl	9000216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
9000084a:	2013      	movs	r0, #19
9000084c:	f001 fca8 	bl	900021a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
90000850:	bf00      	nop
90000852:	37e8      	adds	r7, #232	; 0xe8
90000854:	46bd      	mov	sp, r7
90000856:	bd80      	pop	{r7, pc}
90000858:	4000a000 	.word	0x4000a000
9000085c:	58024400 	.word	0x58024400
90000860:	58020000 	.word	0x58020000

90000864 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
90000864:	b580      	push	{r7, lr}
90000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	setupTelemetry();
90000868:	f00f fa16 	bl	9000fc98 <_Z14setupTelemetryv>
	initCortex();
9000086c:	f00f f9b6 	bl	9000fbdc <_Z10initCortexv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
90000870:	bf00      	nop
90000872:	bd80      	pop	{r7, pc}

90000874 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
90000874:	b580      	push	{r7, lr}
90000876:	b08c      	sub	sp, #48	; 0x30
90000878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000087a:	f107 031c 	add.w	r3, r7, #28
9000087e:	2200      	movs	r2, #0
90000880:	601a      	str	r2, [r3, #0]
90000882:	605a      	str	r2, [r3, #4]
90000884:	609a      	str	r2, [r3, #8]
90000886:	60da      	str	r2, [r3, #12]
90000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
9000088a:	4b65      	ldr	r3, [pc, #404]	; (90000a20 <MX_GPIO_Init+0x1ac>)
9000088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000890:	4a63      	ldr	r2, [pc, #396]	; (90000a20 <MX_GPIO_Init+0x1ac>)
90000892:	f043 0304 	orr.w	r3, r3, #4
90000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000089a:	4b61      	ldr	r3, [pc, #388]	; (90000a20 <MX_GPIO_Init+0x1ac>)
9000089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008a0:	f003 0304 	and.w	r3, r3, #4
900008a4:	61bb      	str	r3, [r7, #24]
900008a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900008a8:	4b5d      	ldr	r3, [pc, #372]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008ae:	4a5c      	ldr	r2, [pc, #368]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900008b8:	4b59      	ldr	r3, [pc, #356]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
900008c2:	617b      	str	r3, [r7, #20]
900008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
900008c6:	4b56      	ldr	r3, [pc, #344]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008cc:	4a54      	ldr	r2, [pc, #336]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008ce:	f043 0301 	orr.w	r3, r3, #1
900008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900008d6:	4b52      	ldr	r3, [pc, #328]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008dc:	f003 0301 	and.w	r3, r3, #1
900008e0:	613b      	str	r3, [r7, #16]
900008e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
900008e4:	4b4e      	ldr	r3, [pc, #312]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008ea:	4a4d      	ldr	r2, [pc, #308]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008ec:	f043 0302 	orr.w	r3, r3, #2
900008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900008f4:	4b4a      	ldr	r3, [pc, #296]	; (90000a20 <MX_GPIO_Init+0x1ac>)
900008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008fa:	f003 0302 	and.w	r3, r3, #2
900008fe:	60fb      	str	r3, [r7, #12]
90000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000902:	4b47      	ldr	r3, [pc, #284]	; (90000a20 <MX_GPIO_Init+0x1ac>)
90000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000908:	4a45      	ldr	r2, [pc, #276]	; (90000a20 <MX_GPIO_Init+0x1ac>)
9000090a:	f043 0310 	orr.w	r3, r3, #16
9000090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000912:	4b43      	ldr	r3, [pc, #268]	; (90000a20 <MX_GPIO_Init+0x1ac>)
90000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000918:	f003 0310 	and.w	r3, r3, #16
9000091c:	60bb      	str	r3, [r7, #8]
9000091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90000920:	4b3f      	ldr	r3, [pc, #252]	; (90000a20 <MX_GPIO_Init+0x1ac>)
90000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000926:	4a3e      	ldr	r2, [pc, #248]	; (90000a20 <MX_GPIO_Init+0x1ac>)
90000928:	f043 0308 	orr.w	r3, r3, #8
9000092c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000930:	4b3b      	ldr	r3, [pc, #236]	; (90000a20 <MX_GPIO_Init+0x1ac>)
90000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000936:	f003 0308 	and.w	r3, r3, #8
9000093a:	607b      	str	r3, [r7, #4]
9000093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin|HAT3_P6_Pin|HAT3_P5_Pin|HAT1_P2_Pin
9000093e:	2200      	movs	r2, #0
90000940:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
90000944:	4837      	ldr	r0, [pc, #220]	; (90000a24 <MX_GPIO_Init+0x1b0>)
90000946:	f003 f92b 	bl	90003ba0 <HAL_GPIO_WritePin>
                          |HAT1_P3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|HAT1_P4_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
9000094a:	2200      	movs	r2, #0
9000094c:	f248 2110 	movw	r1, #33296	; 0x8210
90000950:	4835      	ldr	r0, [pc, #212]	; (90000a28 <MX_GPIO_Init+0x1b4>)
90000952:	f003 f925 	bl	90003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAT3_P3_Pin|HAT3_P4_Pin|HAT3_P1_Pin|HAT3_P2_Pin, GPIO_PIN_RESET);
90000956:	2200      	movs	r2, #0
90000958:	21c3      	movs	r1, #195	; 0xc3
9000095a:	4834      	ldr	r0, [pc, #208]	; (90000a2c <MX_GPIO_Init+0x1b8>)
9000095c:	f003 f920 	bl	90003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HAT2_P1_Pin|HAT2_P2_Pin|HAT2_P3_Pin|LED_YELLOW_Pin
90000960:	2200      	movs	r2, #0
90000962:	f247 0194 	movw	r1, #28820	; 0x7094
90000966:	4832      	ldr	r0, [pc, #200]	; (90000a30 <MX_GPIO_Init+0x1bc>)
90000968:	f003 f91a 	bl	90003ba0 <HAL_GPIO_WritePin>
                          |HAT2_P5_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|HAT3_P6_Pin|HAT3_P5_Pin|HAT1_P2_Pin
9000096c:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
90000970:	61fb      	str	r3, [r7, #28]
                          |HAT1_P3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000972:	2301      	movs	r3, #1
90000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000976:	2300      	movs	r3, #0
90000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000097a:	2300      	movs	r3, #0
9000097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000097e:	f107 031c 	add.w	r3, r7, #28
90000982:	4619      	mov	r1, r3
90000984:	4827      	ldr	r0, [pc, #156]	; (90000a24 <MX_GPIO_Init+0x1b0>)
90000986:	f002 fe51 	bl	9000362c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|HAT1_P4_Pin|SPI3_CS_Pin;
9000098a:	f248 2310 	movw	r3, #33296	; 0x8210
9000098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000990:	2301      	movs	r3, #1
90000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000994:	2300      	movs	r3, #0
90000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000998:	2300      	movs	r3, #0
9000099a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000099c:	f107 031c 	add.w	r3, r7, #28
900009a0:	4619      	mov	r1, r3
900009a2:	4821      	ldr	r0, [pc, #132]	; (90000a28 <MX_GPIO_Init+0x1b4>)
900009a4:	f002 fe42 	bl	9000362c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HAT3_P3_Pin|HAT3_P4_Pin|HAT3_P1_Pin|HAT3_P2_Pin;
900009a8:	23c3      	movs	r3, #195	; 0xc3
900009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900009ac:	2301      	movs	r3, #1
900009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009b0:	2300      	movs	r3, #0
900009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900009b4:	2300      	movs	r3, #0
900009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900009b8:	f107 031c 	add.w	r3, r7, #28
900009bc:	4619      	mov	r1, r3
900009be:	481b      	ldr	r0, [pc, #108]	; (90000a2c <MX_GPIO_Init+0x1b8>)
900009c0:	f002 fe34 	bl	9000362c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SEL0_Pin|SEL1_Pin|SEL2_Pin;
900009c4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
900009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900009ca:	2300      	movs	r3, #0
900009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009ce:	2300      	movs	r3, #0
900009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900009d2:	f107 031c 	add.w	r3, r7, #28
900009d6:	4619      	mov	r1, r3
900009d8:	4816      	ldr	r0, [pc, #88]	; (90000a34 <MX_GPIO_Init+0x1c0>)
900009da:	f002 fe27 	bl	9000362c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_5V_Pin;
900009de:	f44f 6300 	mov.w	r3, #2048	; 0x800
900009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900009e4:	2300      	movs	r3, #0
900009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009e8:	2300      	movs	r3, #0
900009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STATUS_5V_GPIO_Port, &GPIO_InitStruct);
900009ec:	f107 031c 	add.w	r3, r7, #28
900009f0:	4619      	mov	r1, r3
900009f2:	480f      	ldr	r0, [pc, #60]	; (90000a30 <MX_GPIO_Init+0x1bc>)
900009f4:	f002 fe1a 	bl	9000362c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = HAT2_P1_Pin|HAT2_P2_Pin|HAT2_P3_Pin|LED_YELLOW_Pin
900009f8:	f247 0394 	movw	r3, #28820	; 0x7094
900009fc:	61fb      	str	r3, [r7, #28]
                          |HAT2_P5_Pin|LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900009fe:	2301      	movs	r3, #1
90000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a02:	2300      	movs	r3, #0
90000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a06:	2300      	movs	r3, #0
90000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000a0a:	f107 031c 	add.w	r3, r7, #28
90000a0e:	4619      	mov	r1, r3
90000a10:	4807      	ldr	r0, [pc, #28]	; (90000a30 <MX_GPIO_Init+0x1bc>)
90000a12:	f002 fe0b 	bl	9000362c <HAL_GPIO_Init>

}
90000a16:	bf00      	nop
90000a18:	3730      	adds	r7, #48	; 0x30
90000a1a:	46bd      	mov	sp, r7
90000a1c:	bd80      	pop	{r7, pc}
90000a1e:	bf00      	nop
90000a20:	58024400 	.word	0x58024400
90000a24:	58020800 	.word	0x58020800
90000a28:	58020000 	.word	0x58020000
90000a2c:	58020400 	.word	0x58020400
90000a30:	58020c00 	.word	0x58020c00
90000a34:	58021000 	.word	0x58021000

90000a38 <MX_I2C2_Init>:
  /* USER CODE END I2C1_Init 2 */

}
/* I2C2 init function */
void MX_I2C2_Init(void)
{
90000a38:	b580      	push	{r7, lr}
90000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
90000a3c:	4b1b      	ldr	r3, [pc, #108]	; (90000aac <MX_I2C2_Init+0x74>)
90000a3e:	4a1c      	ldr	r2, [pc, #112]	; (90000ab0 <MX_I2C2_Init+0x78>)
90000a40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
90000a42:	4b1a      	ldr	r3, [pc, #104]	; (90000aac <MX_I2C2_Init+0x74>)
90000a44:	4a1b      	ldr	r2, [pc, #108]	; (90000ab4 <MX_I2C2_Init+0x7c>)
90000a46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
90000a48:	4b18      	ldr	r3, [pc, #96]	; (90000aac <MX_I2C2_Init+0x74>)
90000a4a:	2200      	movs	r2, #0
90000a4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
90000a4e:	4b17      	ldr	r3, [pc, #92]	; (90000aac <MX_I2C2_Init+0x74>)
90000a50:	2201      	movs	r2, #1
90000a52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
90000a54:	4b15      	ldr	r3, [pc, #84]	; (90000aac <MX_I2C2_Init+0x74>)
90000a56:	2200      	movs	r2, #0
90000a58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
90000a5a:	4b14      	ldr	r3, [pc, #80]	; (90000aac <MX_I2C2_Init+0x74>)
90000a5c:	2200      	movs	r2, #0
90000a5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90000a60:	4b12      	ldr	r3, [pc, #72]	; (90000aac <MX_I2C2_Init+0x74>)
90000a62:	2200      	movs	r2, #0
90000a64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
90000a66:	4b11      	ldr	r3, [pc, #68]	; (90000aac <MX_I2C2_Init+0x74>)
90000a68:	2200      	movs	r2, #0
90000a6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
90000a6c:	4b0f      	ldr	r3, [pc, #60]	; (90000aac <MX_I2C2_Init+0x74>)
90000a6e:	2200      	movs	r2, #0
90000a70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
90000a72:	480e      	ldr	r0, [pc, #56]	; (90000aac <MX_I2C2_Init+0x74>)
90000a74:	f003 f8ae 	bl	90003bd4 <HAL_I2C_Init>
90000a78:	4603      	mov	r3, r0
90000a7a:	2b00      	cmp	r3, #0
90000a7c:	d001      	beq.n	90000a82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
90000a7e:	f000 fb07 	bl	90001090 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
90000a82:	2100      	movs	r1, #0
90000a84:	4809      	ldr	r0, [pc, #36]	; (90000aac <MX_I2C2_Init+0x74>)
90000a86:	f003 fabc 	bl	90004002 <HAL_I2CEx_ConfigAnalogFilter>
90000a8a:	4603      	mov	r3, r0
90000a8c:	2b00      	cmp	r3, #0
90000a8e:	d001      	beq.n	90000a94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
90000a90:	f000 fafe 	bl	90001090 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
90000a94:	2100      	movs	r1, #0
90000a96:	4805      	ldr	r0, [pc, #20]	; (90000aac <MX_I2C2_Init+0x74>)
90000a98:	f003 fafe 	bl	90004098 <HAL_I2CEx_ConfigDigitalFilter>
90000a9c:	4603      	mov	r3, r0
90000a9e:	2b00      	cmp	r3, #0
90000aa0:	d001      	beq.n	90000aa6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
90000aa2:	f000 faf5 	bl	90001090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
90000aa6:	bf00      	nop
90000aa8:	bd80      	pop	{r7, pc}
90000aaa:	bf00      	nop
90000aac:	24000300 	.word	0x24000300
90000ab0:	40005800 	.word	0x40005800
90000ab4:	307075b1 	.word	0x307075b1

90000ab8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
90000ab8:	b580      	push	{r7, lr}
90000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
90000abc:	4b1b      	ldr	r3, [pc, #108]	; (90000b2c <MX_I2C3_Init+0x74>)
90000abe:	4a1c      	ldr	r2, [pc, #112]	; (90000b30 <MX_I2C3_Init+0x78>)
90000ac0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
90000ac2:	4b1a      	ldr	r3, [pc, #104]	; (90000b2c <MX_I2C3_Init+0x74>)
90000ac4:	4a1b      	ldr	r2, [pc, #108]	; (90000b34 <MX_I2C3_Init+0x7c>)
90000ac6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
90000ac8:	4b18      	ldr	r3, [pc, #96]	; (90000b2c <MX_I2C3_Init+0x74>)
90000aca:	2200      	movs	r2, #0
90000acc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
90000ace:	4b17      	ldr	r3, [pc, #92]	; (90000b2c <MX_I2C3_Init+0x74>)
90000ad0:	2201      	movs	r2, #1
90000ad2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
90000ad4:	4b15      	ldr	r3, [pc, #84]	; (90000b2c <MX_I2C3_Init+0x74>)
90000ad6:	2200      	movs	r2, #0
90000ad8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
90000ada:	4b14      	ldr	r3, [pc, #80]	; (90000b2c <MX_I2C3_Init+0x74>)
90000adc:	2200      	movs	r2, #0
90000ade:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90000ae0:	4b12      	ldr	r3, [pc, #72]	; (90000b2c <MX_I2C3_Init+0x74>)
90000ae2:	2200      	movs	r2, #0
90000ae4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
90000ae6:	4b11      	ldr	r3, [pc, #68]	; (90000b2c <MX_I2C3_Init+0x74>)
90000ae8:	2200      	movs	r2, #0
90000aea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
90000aec:	4b0f      	ldr	r3, [pc, #60]	; (90000b2c <MX_I2C3_Init+0x74>)
90000aee:	2200      	movs	r2, #0
90000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
90000af2:	480e      	ldr	r0, [pc, #56]	; (90000b2c <MX_I2C3_Init+0x74>)
90000af4:	f003 f86e 	bl	90003bd4 <HAL_I2C_Init>
90000af8:	4603      	mov	r3, r0
90000afa:	2b00      	cmp	r3, #0
90000afc:	d001      	beq.n	90000b02 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
90000afe:	f000 fac7 	bl	90001090 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
90000b02:	2100      	movs	r1, #0
90000b04:	4809      	ldr	r0, [pc, #36]	; (90000b2c <MX_I2C3_Init+0x74>)
90000b06:	f003 fa7c 	bl	90004002 <HAL_I2CEx_ConfigAnalogFilter>
90000b0a:	4603      	mov	r3, r0
90000b0c:	2b00      	cmp	r3, #0
90000b0e:	d001      	beq.n	90000b14 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
90000b10:	f000 fabe 	bl	90001090 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
90000b14:	2100      	movs	r1, #0
90000b16:	4805      	ldr	r0, [pc, #20]	; (90000b2c <MX_I2C3_Init+0x74>)
90000b18:	f003 fabe 	bl	90004098 <HAL_I2CEx_ConfigDigitalFilter>
90000b1c:	4603      	mov	r3, r0
90000b1e:	2b00      	cmp	r3, #0
90000b20:	d001      	beq.n	90000b26 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
90000b22:	f000 fab5 	bl	90001090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
90000b26:	bf00      	nop
90000b28:	bd80      	pop	{r7, pc}
90000b2a:	bf00      	nop
90000b2c:	24000354 	.word	0x24000354
90000b30:	40005c00 	.word	0x40005c00
90000b34:	307075b1 	.word	0x307075b1

90000b38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
90000b38:	b580      	push	{r7, lr}
90000b3a:	b0c0      	sub	sp, #256	; 0x100
90000b3c:	af00      	add	r7, sp, #0
90000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000b40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90000b44:	2200      	movs	r2, #0
90000b46:	601a      	str	r2, [r3, #0]
90000b48:	605a      	str	r2, [r3, #4]
90000b4a:	609a      	str	r2, [r3, #8]
90000b4c:	60da      	str	r2, [r3, #12]
90000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
90000b54:	22c0      	movs	r2, #192	; 0xc0
90000b56:	2100      	movs	r1, #0
90000b58:	4618      	mov	r0, r3
90000b5a:	f010 fa99 	bl	90011090 <memset>
  if(i2cHandle->Instance==I2C1)
90000b5e:	687b      	ldr	r3, [r7, #4]
90000b60:	681b      	ldr	r3, [r3, #0]
90000b62:	4a87      	ldr	r2, [pc, #540]	; (90000d80 <HAL_I2C_MspInit+0x248>)
90000b64:	4293      	cmp	r3, r2
90000b66:	d147      	bne.n	90000bf8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
90000b68:	f04f 0208 	mov.w	r2, #8
90000b6c:	f04f 0300 	mov.w	r3, #0
90000b70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
90000b74:	2300      	movs	r3, #0
90000b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
90000b7e:	4618      	mov	r0, r3
90000b80:	f004 fb38 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90000b84:	4603      	mov	r3, r0
90000b86:	2b00      	cmp	r3, #0
90000b88:	d001      	beq.n	90000b8e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
90000b8a:	f000 fa81 	bl	90001090 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000b8e:	4b7d      	ldr	r3, [pc, #500]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000b94:	4a7b      	ldr	r2, [pc, #492]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000b96:	f043 0302 	orr.w	r3, r3, #2
90000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000b9e:	4b79      	ldr	r3, [pc, #484]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ba4:	f003 0302 	and.w	r3, r3, #2
90000ba8:	627b      	str	r3, [r7, #36]	; 0x24
90000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
90000bac:	f44f 7340 	mov.w	r3, #768	; 0x300
90000bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000bb4:	2312      	movs	r3, #18
90000bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bba:	2300      	movs	r3, #0
90000bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000bc0:	2300      	movs	r3, #0
90000bc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
90000bc6:	2304      	movs	r3, #4
90000bc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000bcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90000bd0:	4619      	mov	r1, r3
90000bd2:	486d      	ldr	r0, [pc, #436]	; (90000d88 <HAL_I2C_MspInit+0x250>)
90000bd4:	f002 fd2a 	bl	9000362c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
90000bd8:	4b6a      	ldr	r3, [pc, #424]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000bde:	4a69      	ldr	r2, [pc, #420]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90000be4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90000be8:	4b66      	ldr	r3, [pc, #408]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90000bf2:	623b      	str	r3, [r7, #32]
90000bf4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
90000bf6:	e0bd      	b.n	90000d74 <HAL_I2C_MspInit+0x23c>
  else if(i2cHandle->Instance==I2C2)
90000bf8:	687b      	ldr	r3, [r7, #4]
90000bfa:	681b      	ldr	r3, [r3, #0]
90000bfc:	4a63      	ldr	r2, [pc, #396]	; (90000d8c <HAL_I2C_MspInit+0x254>)
90000bfe:	4293      	cmp	r3, r2
90000c00:	d147      	bne.n	90000c92 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
90000c02:	f04f 0208 	mov.w	r2, #8
90000c06:	f04f 0300 	mov.w	r3, #0
90000c0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
90000c0e:	2300      	movs	r3, #0
90000c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
90000c18:	4618      	mov	r0, r3
90000c1a:	f004 faeb 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90000c1e:	4603      	mov	r3, r0
90000c20:	2b00      	cmp	r3, #0
90000c22:	d001      	beq.n	90000c28 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
90000c24:	f000 fa34 	bl	90001090 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
90000c28:	4b56      	ldr	r3, [pc, #344]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c2e:	4a55      	ldr	r2, [pc, #340]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000c30:	f043 0302 	orr.w	r3, r3, #2
90000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000c38:	4b52      	ldr	r3, [pc, #328]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c3e:	f003 0302 	and.w	r3, r3, #2
90000c42:	61fb      	str	r3, [r7, #28]
90000c44:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000c46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
90000c4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000c4e:	2312      	movs	r3, #18
90000c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c54:	2300      	movs	r3, #0
90000c56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c5a:	2300      	movs	r3, #0
90000c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
90000c60:	2304      	movs	r3, #4
90000c62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000c66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90000c6a:	4619      	mov	r1, r3
90000c6c:	4846      	ldr	r0, [pc, #280]	; (90000d88 <HAL_I2C_MspInit+0x250>)
90000c6e:	f002 fcdd 	bl	9000362c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
90000c72:	4b44      	ldr	r3, [pc, #272]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000c78:	4a42      	ldr	r2, [pc, #264]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90000c7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90000c82:	4b40      	ldr	r3, [pc, #256]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90000c8c:	61bb      	str	r3, [r7, #24]
90000c8e:	69bb      	ldr	r3, [r7, #24]
}
90000c90:	e070      	b.n	90000d74 <HAL_I2C_MspInit+0x23c>
  else if(i2cHandle->Instance==I2C3)
90000c92:	687b      	ldr	r3, [r7, #4]
90000c94:	681b      	ldr	r3, [r3, #0]
90000c96:	4a3e      	ldr	r2, [pc, #248]	; (90000d90 <HAL_I2C_MspInit+0x258>)
90000c98:	4293      	cmp	r3, r2
90000c9a:	d16b      	bne.n	90000d74 <HAL_I2C_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
90000c9c:	f04f 0208 	mov.w	r2, #8
90000ca0:	f04f 0300 	mov.w	r3, #0
90000ca4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
90000ca8:	2300      	movs	r3, #0
90000caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
90000cb2:	4618      	mov	r0, r3
90000cb4:	f004 fa9e 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90000cb8:	4603      	mov	r3, r0
90000cba:	2b00      	cmp	r3, #0
90000cbc:	d001      	beq.n	90000cc2 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
90000cbe:	f000 f9e7 	bl	90001090 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
90000cc2:	4b30      	ldr	r3, [pc, #192]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000cc8:	4a2e      	ldr	r2, [pc, #184]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000cca:	f043 0304 	orr.w	r3, r3, #4
90000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000cd2:	4b2c      	ldr	r3, [pc, #176]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000cd8:	f003 0304 	and.w	r3, r3, #4
90000cdc:	617b      	str	r3, [r7, #20]
90000cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
90000ce0:	4b28      	ldr	r3, [pc, #160]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ce6:	4a27      	ldr	r2, [pc, #156]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000ce8:	f043 0301 	orr.w	r3, r3, #1
90000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000cf0:	4b24      	ldr	r3, [pc, #144]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000cf6:	f003 0301 	and.w	r3, r3, #1
90000cfa:	613b      	str	r3, [r7, #16]
90000cfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90000cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
90000d02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000d06:	2312      	movs	r3, #18
90000d08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d0c:	2300      	movs	r3, #0
90000d0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d12:	2300      	movs	r3, #0
90000d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
90000d18:	2304      	movs	r3, #4
90000d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000d1e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90000d22:	4619      	mov	r1, r3
90000d24:	481b      	ldr	r0, [pc, #108]	; (90000d94 <HAL_I2C_MspInit+0x25c>)
90000d26:	f002 fc81 	bl	9000362c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
90000d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
90000d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000d32:	2312      	movs	r3, #18
90000d34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d38:	2300      	movs	r3, #0
90000d3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d3e:	2300      	movs	r3, #0
90000d40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
90000d44:	2304      	movs	r3, #4
90000d46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000d4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90000d4e:	4619      	mov	r1, r3
90000d50:	4811      	ldr	r0, [pc, #68]	; (90000d98 <HAL_I2C_MspInit+0x260>)
90000d52:	f002 fc6b 	bl	9000362c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
90000d56:	4b0b      	ldr	r3, [pc, #44]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000d5c:	4a09      	ldr	r2, [pc, #36]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000d5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90000d62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90000d66:	4b07      	ldr	r3, [pc, #28]	; (90000d84 <HAL_I2C_MspInit+0x24c>)
90000d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90000d70:	60fb      	str	r3, [r7, #12]
90000d72:	68fb      	ldr	r3, [r7, #12]
}
90000d74:	bf00      	nop
90000d76:	f507 7780 	add.w	r7, r7, #256	; 0x100
90000d7a:	46bd      	mov	sp, r7
90000d7c:	bd80      	pop	{r7, pc}
90000d7e:	bf00      	nop
90000d80:	40005400 	.word	0x40005400
90000d84:	58024400 	.word	0x58024400
90000d88:	58020400 	.word	0x58020400
90000d8c:	40005800 	.word	0x40005800
90000d90:	40005c00 	.word	0x40005c00
90000d94:	58020800 	.word	0x58020800
90000d98:	58020000 	.word	0x58020000

90000d9c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
90000d9c:	b580      	push	{r7, lr}
90000d9e:	b082      	sub	sp, #8
90000da0:	af00      	add	r7, sp, #0
90000da2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
90000da4:	687b      	ldr	r3, [r7, #4]
90000da6:	681b      	ldr	r3, [r3, #0]
90000da8:	4a24      	ldr	r2, [pc, #144]	; (90000e3c <HAL_I2C_MspDeInit+0xa0>)
90000daa:	4293      	cmp	r3, r2
90000dac:	d112      	bne.n	90000dd4 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
90000dae:	4b24      	ldr	r3, [pc, #144]	; (90000e40 <HAL_I2C_MspDeInit+0xa4>)
90000db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000db4:	4a22      	ldr	r2, [pc, #136]	; (90000e40 <HAL_I2C_MspDeInit+0xa4>)
90000db6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90000dba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
90000dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
90000dc2:	4820      	ldr	r0, [pc, #128]	; (90000e44 <HAL_I2C_MspDeInit+0xa8>)
90000dc4:	f002 fde2 	bl	9000398c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
90000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
90000dcc:	481d      	ldr	r0, [pc, #116]	; (90000e44 <HAL_I2C_MspDeInit+0xa8>)
90000dce:	f002 fddd 	bl	9000398c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
90000dd2:	e02e      	b.n	90000e32 <HAL_I2C_MspDeInit+0x96>
  else if(i2cHandle->Instance==I2C2)
90000dd4:	687b      	ldr	r3, [r7, #4]
90000dd6:	681b      	ldr	r3, [r3, #0]
90000dd8:	4a1b      	ldr	r2, [pc, #108]	; (90000e48 <HAL_I2C_MspDeInit+0xac>)
90000dda:	4293      	cmp	r3, r2
90000ddc:	d112      	bne.n	90000e04 <HAL_I2C_MspDeInit+0x68>
    __HAL_RCC_I2C2_CLK_DISABLE();
90000dde:	4b18      	ldr	r3, [pc, #96]	; (90000e40 <HAL_I2C_MspDeInit+0xa4>)
90000de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000de4:	4a16      	ldr	r2, [pc, #88]	; (90000e40 <HAL_I2C_MspDeInit+0xa4>)
90000de6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
90000dea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
90000dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
90000df2:	4814      	ldr	r0, [pc, #80]	; (90000e44 <HAL_I2C_MspDeInit+0xa8>)
90000df4:	f002 fdca 	bl	9000398c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
90000df8:	f44f 6100 	mov.w	r1, #2048	; 0x800
90000dfc:	4811      	ldr	r0, [pc, #68]	; (90000e44 <HAL_I2C_MspDeInit+0xa8>)
90000dfe:	f002 fdc5 	bl	9000398c <HAL_GPIO_DeInit>
}
90000e02:	e016      	b.n	90000e32 <HAL_I2C_MspDeInit+0x96>
  else if(i2cHandle->Instance==I2C3)
90000e04:	687b      	ldr	r3, [r7, #4]
90000e06:	681b      	ldr	r3, [r3, #0]
90000e08:	4a10      	ldr	r2, [pc, #64]	; (90000e4c <HAL_I2C_MspDeInit+0xb0>)
90000e0a:	4293      	cmp	r3, r2
90000e0c:	d111      	bne.n	90000e32 <HAL_I2C_MspDeInit+0x96>
    __HAL_RCC_I2C3_CLK_DISABLE();
90000e0e:	4b0c      	ldr	r3, [pc, #48]	; (90000e40 <HAL_I2C_MspDeInit+0xa4>)
90000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000e14:	4a0a      	ldr	r2, [pc, #40]	; (90000e40 <HAL_I2C_MspDeInit+0xa4>)
90000e16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90000e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
90000e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
90000e22:	480b      	ldr	r0, [pc, #44]	; (90000e50 <HAL_I2C_MspDeInit+0xb4>)
90000e24:	f002 fdb2 	bl	9000398c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
90000e28:	f44f 7180 	mov.w	r1, #256	; 0x100
90000e2c:	4809      	ldr	r0, [pc, #36]	; (90000e54 <HAL_I2C_MspDeInit+0xb8>)
90000e2e:	f002 fdad 	bl	9000398c <HAL_GPIO_DeInit>
}
90000e32:	bf00      	nop
90000e34:	3708      	adds	r7, #8
90000e36:	46bd      	mov	sp, r7
90000e38:	bd80      	pop	{r7, pc}
90000e3a:	bf00      	nop
90000e3c:	40005400 	.word	0x40005400
90000e40:	58024400 	.word	0x58024400
90000e44:	58020400 	.word	0x58020400
90000e48:	40005800 	.word	0x40005800
90000e4c:	40005c00 	.word	0x40005c00
90000e50:	58020800 	.word	0x58020800
90000e54:	58020000 	.word	0x58020000

90000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
90000e58:	b580      	push	{r7, lr}
90000e5a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
90000e5c:	f001 f866 	bl	90001f2c <HAL_Init>
  /* USER CODE BEGIN Init */
//  HAL_NVIC_SetPriority(SysTick_IRQn,5,0);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
90000e60:	f000 f81a 	bl	90000e98 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
90000e64:	f000 f8de 	bl	90001024 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
90000e68:	f7ff fd04 	bl	90000874 <MX_GPIO_Init>
//  MX_DMA_Init();
  MX_I2C2_Init();
90000e6c:	f7ff fde4 	bl	90000a38 <MX_I2C2_Init>
  MX_I2C3_Init();
90000e70:	f7ff fe22 	bl	90000ab8 <MX_I2C3_Init>
  MX_SPI1_Init();
90000e74:	f000 f912 	bl	9000109c <MX_SPI1_Init>
  MX_SPI2_Init();
90000e78:	f000 f968 	bl	9000114c <MX_SPI2_Init>
  MX_SPI3_Init();
90000e7c:	f000 f9be 	bl	900011fc <MX_SPI3_Init>
//  MX_TIM8_Init();
  MX_USART1_UART_Init();
90000e80:	f000 fdae 	bl	900019e0 <MX_USART1_UART_Init>
//  MX_USART3_UART_Init();
//  MX_UART4_Init();
//  MX_UART5_Init();
//  MX_UART8_Init();
//  MX_USART2_UART_Init();
  MX_FDCAN1_Init();
90000e84:	f7ff fc16 	bl	900006b4 <MX_FDCAN1_Init>
////   //Start capturing traffic on serial Port
////   ModbusStart(&ModbusH);
//  /* USER CODE END 2 */
//
//  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
90000e88:	f007 fd08 	bl	9000889c <osKernelInitialize>
  MX_FREERTOS_Init();
90000e8c:	f7ff fcea 	bl	90000864 <_Z16MX_FREERTOS_Initv>
//////
//////  /* Start scheduler */
  osKernelStart();
90000e90:	f007 fd28 	bl	900088e4 <osKernelStart>
//
//  /* We should never get here as control is now taken by the scheduler */
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
  while (1)
90000e94:	e7fe      	b.n	90000e94 <main+0x3c>
	...

90000e98 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90000e98:	b580      	push	{r7, lr}
90000e9a:	b09e      	sub	sp, #120	; 0x78
90000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ea2:	224c      	movs	r2, #76	; 0x4c
90000ea4:	2100      	movs	r1, #0
90000ea6:	4618      	mov	r0, r3
90000ea8:	f010 f8f2 	bl	90011090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90000eac:	f107 030c 	add.w	r3, r7, #12
90000eb0:	2220      	movs	r2, #32
90000eb2:	2100      	movs	r1, #0
90000eb4:	4618      	mov	r0, r3
90000eb6:	f010 f8eb 	bl	90011090 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90000eba:	2002      	movs	r0, #2
90000ebc:	f003 f938 	bl	90004130 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000ec0:	2300      	movs	r3, #0
90000ec2:	60bb      	str	r3, [r7, #8]
90000ec4:	4b54      	ldr	r3, [pc, #336]	; (90001018 <_Z18SystemClock_Configv+0x180>)
90000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000ec8:	4a53      	ldr	r2, [pc, #332]	; (90001018 <_Z18SystemClock_Configv+0x180>)
90000eca:	f023 0301 	bic.w	r3, r3, #1
90000ece:	62d3      	str	r3, [r2, #44]	; 0x2c
90000ed0:	4b51      	ldr	r3, [pc, #324]	; (90001018 <_Z18SystemClock_Configv+0x180>)
90000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000ed4:	f003 0301 	and.w	r3, r3, #1
90000ed8:	60bb      	str	r3, [r7, #8]
90000eda:	4b50      	ldr	r3, [pc, #320]	; (9000101c <_Z18SystemClock_Configv+0x184>)
90000edc:	699b      	ldr	r3, [r3, #24]
90000ede:	4a4f      	ldr	r2, [pc, #316]	; (9000101c <_Z18SystemClock_Configv+0x184>)
90000ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90000ee4:	6193      	str	r3, [r2, #24]
90000ee6:	4b4d      	ldr	r3, [pc, #308]	; (9000101c <_Z18SystemClock_Configv+0x184>)
90000ee8:	699b      	ldr	r3, [r3, #24]
90000eea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90000eee:	60bb      	str	r3, [r7, #8]
90000ef0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000ef2:	4b4a      	ldr	r3, [pc, #296]	; (9000101c <_Z18SystemClock_Configv+0x184>)
90000ef4:	699b      	ldr	r3, [r3, #24]
90000ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90000efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90000efe:	bf14      	ite	ne
90000f00:	2301      	movne	r3, #1
90000f02:	2300      	moveq	r3, #0
90000f04:	b2db      	uxtb	r3, r3
90000f06:	2b00      	cmp	r3, #0
90000f08:	d000      	beq.n	90000f0c <_Z18SystemClock_Configv+0x74>
90000f0a:	e7f2      	b.n	90000ef2 <_Z18SystemClock_Configv+0x5a>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000f0c:	4b44      	ldr	r3, [pc, #272]	; (90001020 <_Z18SystemClock_Configv+0x188>)
90000f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000f12:	4a43      	ldr	r2, [pc, #268]	; (90001020 <_Z18SystemClock_Configv+0x188>)
90000f14:	f043 0302 	orr.w	r3, r3, #2
90000f18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90000f1c:	4b40      	ldr	r3, [pc, #256]	; (90001020 <_Z18SystemClock_Configv+0x188>)
90000f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000f22:	f003 0302 	and.w	r3, r3, #2
90000f26:	607b      	str	r3, [r7, #4]
90000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
90000f2a:	2300      	movs	r3, #0
90000f2c:	603b      	str	r3, [r7, #0]
90000f2e:	4b3b      	ldr	r3, [pc, #236]	; (9000101c <_Z18SystemClock_Configv+0x184>)
90000f30:	699b      	ldr	r3, [r3, #24]
90000f32:	4a3a      	ldr	r2, [pc, #232]	; (9000101c <_Z18SystemClock_Configv+0x184>)
90000f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90000f38:	6193      	str	r3, [r2, #24]
90000f3a:	4b38      	ldr	r3, [pc, #224]	; (9000101c <_Z18SystemClock_Configv+0x184>)
90000f3c:	699b      	ldr	r3, [r3, #24]
90000f3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90000f42:	603b      	str	r3, [r7, #0]
90000f44:	4b34      	ldr	r3, [pc, #208]	; (90001018 <_Z18SystemClock_Configv+0x180>)
90000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000f48:	4a33      	ldr	r2, [pc, #204]	; (90001018 <_Z18SystemClock_Configv+0x180>)
90000f4a:	f043 0301 	orr.w	r3, r3, #1
90000f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
90000f50:	4b31      	ldr	r3, [pc, #196]	; (90001018 <_Z18SystemClock_Configv+0x180>)
90000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000f54:	f003 0301 	and.w	r3, r3, #1
90000f58:	603b      	str	r3, [r7, #0]
90000f5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000f5c:	4b2f      	ldr	r3, [pc, #188]	; (9000101c <_Z18SystemClock_Configv+0x184>)
90000f5e:	699b      	ldr	r3, [r3, #24]
90000f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90000f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90000f68:	bf14      	ite	ne
90000f6a:	2301      	movne	r3, #1
90000f6c:	2300      	moveq	r3, #0
90000f6e:	b2db      	uxtb	r3, r3
90000f70:	2b00      	cmp	r3, #0
90000f72:	d000      	beq.n	90000f76 <_Z18SystemClock_Configv+0xde>
90000f74:	e7f2      	b.n	90000f5c <_Z18SystemClock_Configv+0xc4>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
90000f76:	2303      	movs	r3, #3
90000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
90000f80:	2301      	movs	r3, #1
90000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 32;
90000f84:	2320      	movs	r3, #32
90000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000f88:	2302      	movs	r3, #2
90000f8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000f8c:	2302      	movs	r3, #2
90000f8e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
90000f90:	2303      	movs	r3, #3
90000f92:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
90000f94:	233c      	movs	r3, #60	; 0x3c
90000f96:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
90000f98:	2302      	movs	r3, #2
90000f9a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 12;
90000f9c:	230c      	movs	r3, #12
90000f9e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
90000fa0:	2302      	movs	r3, #2
90000fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
90000fa4:	230c      	movs	r3, #12
90000fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000fa8:	2300      	movs	r3, #0
90000faa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000fac:	2300      	movs	r3, #0
90000fae:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000fb4:	4618      	mov	r0, r3
90000fb6:	f003 f8f5 	bl	900041a4 <HAL_RCC_OscConfig>
90000fba:	4603      	mov	r3, r0
90000fbc:	2b00      	cmp	r3, #0
90000fbe:	bf14      	ite	ne
90000fc0:	2301      	movne	r3, #1
90000fc2:	2300      	moveq	r3, #0
90000fc4:	b2db      	uxtb	r3, r3
90000fc6:	2b00      	cmp	r3, #0
90000fc8:	d001      	beq.n	90000fce <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
90000fca:	f000 f861 	bl	90001090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90000fce:	233f      	movs	r3, #63	; 0x3f
90000fd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000fd2:	2303      	movs	r3, #3
90000fd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000fd6:	2300      	movs	r3, #0
90000fd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000fda:	2308      	movs	r3, #8
90000fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90000fde:	2340      	movs	r3, #64	; 0x40
90000fe0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90000fe2:	2340      	movs	r3, #64	; 0x40
90000fe4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
90000fea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90000fec:	2340      	movs	r3, #64	; 0x40
90000fee:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
90000ff0:	f107 030c 	add.w	r3, r7, #12
90000ff4:	2104      	movs	r1, #4
90000ff6:	4618      	mov	r0, r3
90000ff8:	f003 fd2e 	bl	90004a58 <HAL_RCC_ClockConfig>
90000ffc:	4603      	mov	r3, r0
90000ffe:	2b00      	cmp	r3, #0
90001000:	bf14      	ite	ne
90001002:	2301      	movne	r3, #1
90001004:	2300      	moveq	r3, #0
90001006:	b2db      	uxtb	r3, r3
90001008:	2b00      	cmp	r3, #0
9000100a:	d001      	beq.n	90001010 <_Z18SystemClock_Configv+0x178>
  {
    Error_Handler();
9000100c:	f000 f840 	bl	90001090 <Error_Handler>
  }
}
90001010:	bf00      	nop
90001012:	3778      	adds	r7, #120	; 0x78
90001014:	46bd      	mov	sp, r7
90001016:	bd80      	pop	{r7, pc}
90001018:	58000400 	.word	0x58000400
9000101c:	58024800 	.word	0x58024800
90001020:	58024400 	.word	0x58024400

90001024 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
90001024:	b580      	push	{r7, lr}
90001026:	b0b0      	sub	sp, #192	; 0xc0
90001028:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000102a:	463b      	mov	r3, r7
9000102c:	22c0      	movs	r2, #192	; 0xc0
9000102e:	2100      	movs	r1, #0
90001030:	4618      	mov	r0, r3
90001032:	f010 f82d 	bl	90011090 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
90001036:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
9000103a:	f04f 0300 	mov.w	r3, #0
9000103e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
90001042:	2300      	movs	r3, #0
90001044:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001046:	463b      	mov	r3, r7
90001048:	4618      	mov	r0, r3
9000104a:	f004 f8d3 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
9000104e:	4603      	mov	r3, r0
90001050:	2b00      	cmp	r3, #0
90001052:	bf14      	ite	ne
90001054:	2301      	movne	r3, #1
90001056:	2300      	moveq	r3, #0
90001058:	b2db      	uxtb	r3, r3
9000105a:	2b00      	cmp	r3, #0
9000105c:	d001      	beq.n	90001062 <_Z24PeriphCommonClock_Configv+0x3e>
  {
    Error_Handler();
9000105e:	f000 f817 	bl	90001090 <Error_Handler>
  }
}
90001062:	bf00      	nop
90001064:	37c0      	adds	r7, #192	; 0xc0
90001066:	46bd      	mov	sp, r7
90001068:	bd80      	pop	{r7, pc}
	...

9000106c <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
9000106c:	b580      	push	{r7, lr}
9000106e:	b082      	sub	sp, #8
90001070:	af00      	add	r7, sp, #0
90001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
90001074:	687b      	ldr	r3, [r7, #4]
90001076:	681b      	ldr	r3, [r3, #0]
90001078:	4a04      	ldr	r2, [pc, #16]	; (9000108c <HAL_TIM_PeriodElapsedCallback+0x20>)
9000107a:	4293      	cmp	r3, r2
9000107c:	d101      	bne.n	90001082 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
9000107e:	f000 ff91 	bl	90001fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90001082:	bf00      	nop
90001084:	3708      	adds	r7, #8
90001086:	46bd      	mov	sp, r7
90001088:	bd80      	pop	{r7, pc}
9000108a:	bf00      	nop
9000108c:	40001000 	.word	0x40001000

90001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90001090:	b480      	push	{r7}
90001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
90001094:	b672      	cpsid	i
}
90001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90001098:	e7fe      	b.n	90001098 <Error_Handler+0x8>
	...

9000109c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
9000109c:	b580      	push	{r7, lr}
9000109e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
900010a0:	4b28      	ldr	r3, [pc, #160]	; (90001144 <MX_SPI1_Init+0xa8>)
900010a2:	4a29      	ldr	r2, [pc, #164]	; (90001148 <MX_SPI1_Init+0xac>)
900010a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
900010a6:	4b27      	ldr	r3, [pc, #156]	; (90001144 <MX_SPI1_Init+0xa8>)
900010a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
900010ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
900010ae:	4b25      	ldr	r3, [pc, #148]	; (90001144 <MX_SPI1_Init+0xa8>)
900010b0:	2200      	movs	r2, #0
900010b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
900010b4:	4b23      	ldr	r3, [pc, #140]	; (90001144 <MX_SPI1_Init+0xa8>)
900010b6:	2207      	movs	r2, #7
900010b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
900010ba:	4b22      	ldr	r3, [pc, #136]	; (90001144 <MX_SPI1_Init+0xa8>)
900010bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
900010c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
900010c2:	4b20      	ldr	r3, [pc, #128]	; (90001144 <MX_SPI1_Init+0xa8>)
900010c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
900010c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
900010ca:	4b1e      	ldr	r3, [pc, #120]	; (90001144 <MX_SPI1_Init+0xa8>)
900010cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
900010d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
900010d2:	4b1c      	ldr	r3, [pc, #112]	; (90001144 <MX_SPI1_Init+0xa8>)
900010d4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
900010d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
900010da:	4b1a      	ldr	r3, [pc, #104]	; (90001144 <MX_SPI1_Init+0xa8>)
900010dc:	2200      	movs	r2, #0
900010de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
900010e0:	4b18      	ldr	r3, [pc, #96]	; (90001144 <MX_SPI1_Init+0xa8>)
900010e2:	2200      	movs	r2, #0
900010e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
900010e6:	4b17      	ldr	r3, [pc, #92]	; (90001144 <MX_SPI1_Init+0xa8>)
900010e8:	2200      	movs	r2, #0
900010ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
900010ec:	4b15      	ldr	r3, [pc, #84]	; (90001144 <MX_SPI1_Init+0xa8>)
900010ee:	2200      	movs	r2, #0
900010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
900010f2:	4b14      	ldr	r3, [pc, #80]	; (90001144 <MX_SPI1_Init+0xa8>)
900010f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
900010f8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
900010fa:	4b12      	ldr	r3, [pc, #72]	; (90001144 <MX_SPI1_Init+0xa8>)
900010fc:	2200      	movs	r2, #0
900010fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
90001100:	4b10      	ldr	r3, [pc, #64]	; (90001144 <MX_SPI1_Init+0xa8>)
90001102:	2200      	movs	r2, #0
90001104:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
90001106:	4b0f      	ldr	r3, [pc, #60]	; (90001144 <MX_SPI1_Init+0xa8>)
90001108:	2200      	movs	r2, #0
9000110a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
9000110c:	4b0d      	ldr	r3, [pc, #52]	; (90001144 <MX_SPI1_Init+0xa8>)
9000110e:	2200      	movs	r2, #0
90001110:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
90001112:	4b0c      	ldr	r3, [pc, #48]	; (90001144 <MX_SPI1_Init+0xa8>)
90001114:	2200      	movs	r2, #0
90001116:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
90001118:	4b0a      	ldr	r3, [pc, #40]	; (90001144 <MX_SPI1_Init+0xa8>)
9000111a:	2200      	movs	r2, #0
9000111c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
9000111e:	4b09      	ldr	r3, [pc, #36]	; (90001144 <MX_SPI1_Init+0xa8>)
90001120:	2200      	movs	r2, #0
90001122:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
90001124:	4b07      	ldr	r3, [pc, #28]	; (90001144 <MX_SPI1_Init+0xa8>)
90001126:	2200      	movs	r2, #0
90001128:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
9000112a:	4b06      	ldr	r3, [pc, #24]	; (90001144 <MX_SPI1_Init+0xa8>)
9000112c:	2200      	movs	r2, #0
9000112e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
90001130:	4804      	ldr	r0, [pc, #16]	; (90001144 <MX_SPI1_Init+0xa8>)
90001132:	f005 fe8b 	bl	90006e4c <HAL_SPI_Init>
90001136:	4603      	mov	r3, r0
90001138:	2b00      	cmp	r3, #0
9000113a:	d001      	beq.n	90001140 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
9000113c:	f7ff ffa8 	bl	90001090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
90001140:	bf00      	nop
90001142:	bd80      	pop	{r7, pc}
90001144:	240003a8 	.word	0x240003a8
90001148:	40013000 	.word	0x40013000

9000114c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
9000114c:	b580      	push	{r7, lr}
9000114e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
90001150:	4b28      	ldr	r3, [pc, #160]	; (900011f4 <MX_SPI2_Init+0xa8>)
90001152:	4a29      	ldr	r2, [pc, #164]	; (900011f8 <MX_SPI2_Init+0xac>)
90001154:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
90001156:	4b27      	ldr	r3, [pc, #156]	; (900011f4 <MX_SPI2_Init+0xa8>)
90001158:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
9000115c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
9000115e:	4b25      	ldr	r3, [pc, #148]	; (900011f4 <MX_SPI2_Init+0xa8>)
90001160:	2200      	movs	r2, #0
90001162:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
90001164:	4b23      	ldr	r3, [pc, #140]	; (900011f4 <MX_SPI2_Init+0xa8>)
90001166:	2207      	movs	r2, #7
90001168:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
9000116a:	4b22      	ldr	r3, [pc, #136]	; (900011f4 <MX_SPI2_Init+0xa8>)
9000116c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90001170:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
90001172:	4b20      	ldr	r3, [pc, #128]	; (900011f4 <MX_SPI2_Init+0xa8>)
90001174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90001178:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
9000117a:	4b1e      	ldr	r3, [pc, #120]	; (900011f4 <MX_SPI2_Init+0xa8>)
9000117c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001180:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
90001182:	4b1c      	ldr	r3, [pc, #112]	; (900011f4 <MX_SPI2_Init+0xa8>)
90001184:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
90001188:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
9000118a:	4b1a      	ldr	r3, [pc, #104]	; (900011f4 <MX_SPI2_Init+0xa8>)
9000118c:	2200      	movs	r2, #0
9000118e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
90001190:	4b18      	ldr	r3, [pc, #96]	; (900011f4 <MX_SPI2_Init+0xa8>)
90001192:	2200      	movs	r2, #0
90001194:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
90001196:	4b17      	ldr	r3, [pc, #92]	; (900011f4 <MX_SPI2_Init+0xa8>)
90001198:	2200      	movs	r2, #0
9000119a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
9000119c:	4b15      	ldr	r3, [pc, #84]	; (900011f4 <MX_SPI2_Init+0xa8>)
9000119e:	2200      	movs	r2, #0
900011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
900011a2:	4b14      	ldr	r3, [pc, #80]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
900011a8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
900011aa:	4b12      	ldr	r3, [pc, #72]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011ac:	2200      	movs	r2, #0
900011ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
900011b0:	4b10      	ldr	r3, [pc, #64]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011b2:	2200      	movs	r2, #0
900011b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
900011b6:	4b0f      	ldr	r3, [pc, #60]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011b8:	2200      	movs	r2, #0
900011ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
900011bc:	4b0d      	ldr	r3, [pc, #52]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011be:	2200      	movs	r2, #0
900011c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
900011c2:	4b0c      	ldr	r3, [pc, #48]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011c4:	2200      	movs	r2, #0
900011c6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
900011c8:	4b0a      	ldr	r3, [pc, #40]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011ca:	2200      	movs	r2, #0
900011cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
900011ce:	4b09      	ldr	r3, [pc, #36]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011d0:	2200      	movs	r2, #0
900011d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
900011d4:	4b07      	ldr	r3, [pc, #28]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011d6:	2200      	movs	r2, #0
900011d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
900011da:	4b06      	ldr	r3, [pc, #24]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011dc:	2200      	movs	r2, #0
900011de:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
900011e0:	4804      	ldr	r0, [pc, #16]	; (900011f4 <MX_SPI2_Init+0xa8>)
900011e2:	f005 fe33 	bl	90006e4c <HAL_SPI_Init>
900011e6:	4603      	mov	r3, r0
900011e8:	2b00      	cmp	r3, #0
900011ea:	d001      	beq.n	900011f0 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
900011ec:	f7ff ff50 	bl	90001090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
900011f0:	bf00      	nop
900011f2:	bd80      	pop	{r7, pc}
900011f4:	24000430 	.word	0x24000430
900011f8:	40003800 	.word	0x40003800

900011fc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
900011fc:	b580      	push	{r7, lr}
900011fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
90001200:	4b28      	ldr	r3, [pc, #160]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001202:	4a29      	ldr	r2, [pc, #164]	; (900012a8 <MX_SPI3_Init+0xac>)
90001204:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
90001206:	4b27      	ldr	r3, [pc, #156]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001208:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
9000120c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
9000120e:	4b25      	ldr	r3, [pc, #148]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001210:	2200      	movs	r2, #0
90001212:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
90001214:	4b23      	ldr	r3, [pc, #140]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001216:	2207      	movs	r2, #7
90001218:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
9000121a:	4b22      	ldr	r3, [pc, #136]	; (900012a4 <MX_SPI3_Init+0xa8>)
9000121c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90001220:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
90001222:	4b20      	ldr	r3, [pc, #128]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001224:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90001228:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
9000122a:	4b1e      	ldr	r3, [pc, #120]	; (900012a4 <MX_SPI3_Init+0xa8>)
9000122c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001230:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
90001232:	4b1c      	ldr	r3, [pc, #112]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001234:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
90001238:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
9000123a:	4b1a      	ldr	r3, [pc, #104]	; (900012a4 <MX_SPI3_Init+0xa8>)
9000123c:	2200      	movs	r2, #0
9000123e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
90001240:	4b18      	ldr	r3, [pc, #96]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001242:	2200      	movs	r2, #0
90001244:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
90001246:	4b17      	ldr	r3, [pc, #92]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001248:	2200      	movs	r2, #0
9000124a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
9000124c:	4b15      	ldr	r3, [pc, #84]	; (900012a4 <MX_SPI3_Init+0xa8>)
9000124e:	2200      	movs	r2, #0
90001250:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
90001252:	4b14      	ldr	r3, [pc, #80]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
90001258:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
9000125a:	4b12      	ldr	r3, [pc, #72]	; (900012a4 <MX_SPI3_Init+0xa8>)
9000125c:	2200      	movs	r2, #0
9000125e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
90001260:	4b10      	ldr	r3, [pc, #64]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001262:	2200      	movs	r2, #0
90001264:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
90001266:	4b0f      	ldr	r3, [pc, #60]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001268:	2200      	movs	r2, #0
9000126a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
9000126c:	4b0d      	ldr	r3, [pc, #52]	; (900012a4 <MX_SPI3_Init+0xa8>)
9000126e:	2200      	movs	r2, #0
90001270:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
90001272:	4b0c      	ldr	r3, [pc, #48]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001274:	2200      	movs	r2, #0
90001276:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
90001278:	4b0a      	ldr	r3, [pc, #40]	; (900012a4 <MX_SPI3_Init+0xa8>)
9000127a:	2200      	movs	r2, #0
9000127c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
9000127e:	4b09      	ldr	r3, [pc, #36]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001280:	2200      	movs	r2, #0
90001282:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
90001284:	4b07      	ldr	r3, [pc, #28]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001286:	2200      	movs	r2, #0
90001288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
9000128a:	4b06      	ldr	r3, [pc, #24]	; (900012a4 <MX_SPI3_Init+0xa8>)
9000128c:	2200      	movs	r2, #0
9000128e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
90001290:	4804      	ldr	r0, [pc, #16]	; (900012a4 <MX_SPI3_Init+0xa8>)
90001292:	f005 fddb 	bl	90006e4c <HAL_SPI_Init>
90001296:	4603      	mov	r3, r0
90001298:	2b00      	cmp	r3, #0
9000129a:	d001      	beq.n	900012a0 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
9000129c:	f7ff fef8 	bl	90001090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
900012a0:	bf00      	nop
900012a2:	bd80      	pop	{r7, pc}
900012a4:	240004b8 	.word	0x240004b8
900012a8:	40003c00 	.word	0x40003c00

900012ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
900012ac:	b580      	push	{r7, lr}
900012ae:	b0c0      	sub	sp, #256	; 0x100
900012b0:	af00      	add	r7, sp, #0
900012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
900012b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
900012b8:	2200      	movs	r2, #0
900012ba:	601a      	str	r2, [r3, #0]
900012bc:	605a      	str	r2, [r3, #4]
900012be:	609a      	str	r2, [r3, #8]
900012c0:	60da      	str	r2, [r3, #12]
900012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900012c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
900012c8:	22c0      	movs	r2, #192	; 0xc0
900012ca:	2100      	movs	r1, #0
900012cc:	4618      	mov	r0, r3
900012ce:	f00f fedf 	bl	90011090 <memset>
  if(spiHandle->Instance==SPI1)
900012d2:	687b      	ldr	r3, [r7, #4]
900012d4:	681b      	ldr	r3, [r3, #0]
900012d6:	4aa4      	ldr	r2, [pc, #656]	; (90001568 <HAL_SPI_MspInit+0x2bc>)
900012d8:	4293      	cmp	r3, r2
900012da:	d147      	bne.n	9000136c <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
900012dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
900012e0:	f04f 0300 	mov.w	r3, #0
900012e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
900012e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
900012ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900012f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
900012f4:	4618      	mov	r0, r3
900012f6:	f003 ff7d 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
900012fa:	4603      	mov	r3, r0
900012fc:	2b00      	cmp	r3, #0
900012fe:	d001      	beq.n	90001304 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
90001300:	f7ff fec6 	bl	90001090 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
90001304:	4b99      	ldr	r3, [pc, #612]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
90001306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
9000130a:	4a98      	ldr	r2, [pc, #608]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
9000130c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90001310:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
90001314:	4b95      	ldr	r3, [pc, #596]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
90001316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
9000131a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
9000131e:	627b      	str	r3, [r7, #36]	; 0x24
90001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
90001322:	4b92      	ldr	r3, [pc, #584]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
90001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001328:	4a90      	ldr	r2, [pc, #576]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
9000132a:	f043 0301 	orr.w	r3, r3, #1
9000132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001332:	4b8e      	ldr	r3, [pc, #568]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
90001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001338:	f003 0301 	and.w	r3, r3, #1
9000133c:	623b      	str	r3, [r7, #32]
9000133e:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90001340:	23e0      	movs	r3, #224	; 0xe0
90001342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001346:	2302      	movs	r3, #2
90001348:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000134c:	2300      	movs	r3, #0
9000134e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001352:	2300      	movs	r3, #0
90001354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
90001358:	2305      	movs	r3, #5
9000135a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000135e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90001362:	4619      	mov	r1, r3
90001364:	4882      	ldr	r0, [pc, #520]	; (90001570 <HAL_SPI_MspInit+0x2c4>)
90001366:	f002 f961 	bl	9000362c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
9000136a:	e0f7      	b.n	9000155c <HAL_SPI_MspInit+0x2b0>
  else if(spiHandle->Instance==SPI2)
9000136c:	687b      	ldr	r3, [r7, #4]
9000136e:	681b      	ldr	r3, [r3, #0]
90001370:	4a80      	ldr	r2, [pc, #512]	; (90001574 <HAL_SPI_MspInit+0x2c8>)
90001372:	4293      	cmp	r3, r2
90001374:	d16b      	bne.n	9000144e <HAL_SPI_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
90001376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
9000137a:	f04f 0300 	mov.w	r3, #0
9000137e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
90001382:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90001386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000138a:	f107 0328 	add.w	r3, r7, #40	; 0x28
9000138e:	4618      	mov	r0, r3
90001390:	f003 ff30 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90001394:	4603      	mov	r3, r0
90001396:	2b00      	cmp	r3, #0
90001398:	d001      	beq.n	9000139e <HAL_SPI_MspInit+0xf2>
      Error_Handler();
9000139a:	f7ff fe79 	bl	90001090 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
9000139e:	4b73      	ldr	r3, [pc, #460]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900013a4:	4a71      	ldr	r2, [pc, #452]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
900013aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
900013ae:	4b6f      	ldr	r3, [pc, #444]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900013b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
900013b8:	61fb      	str	r3, [r7, #28]
900013ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
900013bc:	4b6b      	ldr	r3, [pc, #428]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013c2:	4a6a      	ldr	r2, [pc, #424]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013c4:	f043 0304 	orr.w	r3, r3, #4
900013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900013cc:	4b67      	ldr	r3, [pc, #412]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013d2:	f003 0304 	and.w	r3, r3, #4
900013d6:	61bb      	str	r3, [r7, #24]
900013d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
900013da:	4b64      	ldr	r3, [pc, #400]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013e0:	4a62      	ldr	r2, [pc, #392]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013e2:	f043 0308 	orr.w	r3, r3, #8
900013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900013ea:	4b60      	ldr	r3, [pc, #384]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013f0:	f003 0308 	and.w	r3, r3, #8
900013f4:	617b      	str	r3, [r7, #20]
900013f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
900013f8:	230c      	movs	r3, #12
900013fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900013fe:	2302      	movs	r3, #2
90001400:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001404:	2300      	movs	r3, #0
90001406:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000140a:	2300      	movs	r3, #0
9000140c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90001410:	2305      	movs	r3, #5
90001412:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90001416:	f107 03ec 	add.w	r3, r7, #236	; 0xec
9000141a:	4619      	mov	r1, r3
9000141c:	4856      	ldr	r0, [pc, #344]	; (90001578 <HAL_SPI_MspInit+0x2cc>)
9000141e:	f002 f905 	bl	9000362c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
90001422:	2308      	movs	r3, #8
90001424:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001428:	2302      	movs	r3, #2
9000142a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000142e:	2300      	movs	r3, #0
90001430:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001434:	2300      	movs	r3, #0
90001436:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
9000143a:	2305      	movs	r3, #5
9000143c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90001440:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90001444:	4619      	mov	r1, r3
90001446:	484d      	ldr	r0, [pc, #308]	; (9000157c <HAL_SPI_MspInit+0x2d0>)
90001448:	f002 f8f0 	bl	9000362c <HAL_GPIO_Init>
}
9000144c:	e086      	b.n	9000155c <HAL_SPI_MspInit+0x2b0>
  else if(spiHandle->Instance==SPI3)
9000144e:	687b      	ldr	r3, [r7, #4]
90001450:	681b      	ldr	r3, [r3, #0]
90001452:	4a4b      	ldr	r2, [pc, #300]	; (90001580 <HAL_SPI_MspInit+0x2d4>)
90001454:	4293      	cmp	r3, r2
90001456:	f040 8081 	bne.w	9000155c <HAL_SPI_MspInit+0x2b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
9000145a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
9000145e:	f04f 0300 	mov.w	r3, #0
90001462:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
90001466:	f44f 4380 	mov.w	r3, #16384	; 0x4000
9000146a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000146e:	f107 0328 	add.w	r3, r7, #40	; 0x28
90001472:	4618      	mov	r0, r3
90001474:	f003 febe 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90001478:	4603      	mov	r3, r0
9000147a:	2b00      	cmp	r3, #0
9000147c:	d001      	beq.n	90001482 <HAL_SPI_MspInit+0x1d6>
      Error_Handler();
9000147e:	f7ff fe07 	bl	90001090 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
90001482:	4b3a      	ldr	r3, [pc, #232]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
90001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001488:	4a38      	ldr	r2, [pc, #224]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
9000148a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
9000148e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001492:	4b36      	ldr	r3, [pc, #216]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
90001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
9000149c:	613b      	str	r3, [r7, #16]
9000149e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
900014a0:	4b32      	ldr	r3, [pc, #200]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900014a6:	4a31      	ldr	r2, [pc, #196]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900014a8:	f043 0304 	orr.w	r3, r3, #4
900014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900014b0:	4b2e      	ldr	r3, [pc, #184]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900014b6:	f003 0304 	and.w	r3, r3, #4
900014ba:	60fb      	str	r3, [r7, #12]
900014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
900014be:	4b2b      	ldr	r3, [pc, #172]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900014c4:	4a29      	ldr	r2, [pc, #164]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900014c6:	f043 0302 	orr.w	r3, r3, #2
900014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900014ce:	4b27      	ldr	r3, [pc, #156]	; (9000156c <HAL_SPI_MspInit+0x2c0>)
900014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900014d4:	f003 0302 	and.w	r3, r3, #2
900014d8:	60bb      	str	r3, [r7, #8]
900014da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
900014dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
900014e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900014e4:	2302      	movs	r3, #2
900014e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900014ea:	2300      	movs	r3, #0
900014ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900014f0:	2300      	movs	r3, #0
900014f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
900014f6:	2306      	movs	r3, #6
900014f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900014fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90001500:	4619      	mov	r1, r3
90001502:	481d      	ldr	r0, [pc, #116]	; (90001578 <HAL_SPI_MspInit+0x2cc>)
90001504:	f002 f892 	bl	9000362c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
90001508:	2310      	movs	r3, #16
9000150a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000150e:	2302      	movs	r3, #2
90001510:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001514:	2300      	movs	r3, #0
90001516:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000151a:	2300      	movs	r3, #0
9000151c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
90001520:	2306      	movs	r3, #6
90001522:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001526:	f107 03ec 	add.w	r3, r7, #236	; 0xec
9000152a:	4619      	mov	r1, r3
9000152c:	4815      	ldr	r0, [pc, #84]	; (90001584 <HAL_SPI_MspInit+0x2d8>)
9000152e:	f002 f87d 	bl	9000362c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
90001532:	2320      	movs	r3, #32
90001534:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001538:	2302      	movs	r3, #2
9000153a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000153e:	2300      	movs	r3, #0
90001540:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001544:	2300      	movs	r3, #0
90001546:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
9000154a:	2307      	movs	r3, #7
9000154c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001550:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90001554:	4619      	mov	r1, r3
90001556:	480b      	ldr	r0, [pc, #44]	; (90001584 <HAL_SPI_MspInit+0x2d8>)
90001558:	f002 f868 	bl	9000362c <HAL_GPIO_Init>
}
9000155c:	bf00      	nop
9000155e:	f507 7780 	add.w	r7, r7, #256	; 0x100
90001562:	46bd      	mov	sp, r7
90001564:	bd80      	pop	{r7, pc}
90001566:	bf00      	nop
90001568:	40013000 	.word	0x40013000
9000156c:	58024400 	.word	0x58024400
90001570:	58020000 	.word	0x58020000
90001574:	40003800 	.word	0x40003800
90001578:	58020800 	.word	0x58020800
9000157c:	58020c00 	.word	0x58020c00
90001580:	40003c00 	.word	0x40003c00
90001584:	58020400 	.word	0x58020400

90001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90001588:	b580      	push	{r7, lr}
9000158a:	b082      	sub	sp, #8
9000158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000158e:	4b0c      	ldr	r3, [pc, #48]	; (900015c0 <HAL_MspInit+0x38>)
90001590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001594:	4a0a      	ldr	r2, [pc, #40]	; (900015c0 <HAL_MspInit+0x38>)
90001596:	f043 0302 	orr.w	r3, r3, #2
9000159a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
9000159e:	4b08      	ldr	r3, [pc, #32]	; (900015c0 <HAL_MspInit+0x38>)
900015a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900015a4:	f003 0302 	and.w	r3, r3, #2
900015a8:	607b      	str	r3, [r7, #4]
900015aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
900015ac:	2200      	movs	r2, #0
900015ae:	210f      	movs	r1, #15
900015b0:	f06f 0001 	mvn.w	r0, #1
900015b4:	f000 fdda 	bl	9000216c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
900015b8:	bf00      	nop
900015ba:	3708      	adds	r7, #8
900015bc:	46bd      	mov	sp, r7
900015be:	bd80      	pop	{r7, pc}
900015c0:	58024400 	.word	0x58024400

900015c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900015c4:	b580      	push	{r7, lr}
900015c6:	b090      	sub	sp, #64	; 0x40
900015c8:	af00      	add	r7, sp, #0
900015ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900015cc:	687b      	ldr	r3, [r7, #4]
900015ce:	2b0f      	cmp	r3, #15
900015d0:	d827      	bhi.n	90001622 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
900015d2:	2200      	movs	r2, #0
900015d4:	6879      	ldr	r1, [r7, #4]
900015d6:	2036      	movs	r0, #54	; 0x36
900015d8:	f000 fdc8 	bl	9000216c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
900015dc:	2036      	movs	r0, #54	; 0x36
900015de:	f000 fddf 	bl	900021a0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
900015e2:	4a29      	ldr	r2, [pc, #164]	; (90001688 <HAL_InitTick+0xc4>)
900015e4:	687b      	ldr	r3, [r7, #4]
900015e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
900015e8:	4b28      	ldr	r3, [pc, #160]	; (9000168c <HAL_InitTick+0xc8>)
900015ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900015ee:	4a27      	ldr	r2, [pc, #156]	; (9000168c <HAL_InitTick+0xc8>)
900015f0:	f043 0310 	orr.w	r3, r3, #16
900015f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
900015f8:	4b24      	ldr	r3, [pc, #144]	; (9000168c <HAL_InitTick+0xc8>)
900015fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900015fe:	f003 0310 	and.w	r3, r3, #16
90001602:	60fb      	str	r3, [r7, #12]
90001604:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90001606:	f107 0210 	add.w	r2, r7, #16
9000160a:	f107 0314 	add.w	r3, r7, #20
9000160e:	4611      	mov	r1, r2
90001610:	4618      	mov	r0, r3
90001612:	f003 fdad 	bl	90005170 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
90001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001618:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
9000161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000161c:	2b00      	cmp	r3, #0
9000161e:	d106      	bne.n	9000162e <HAL_InitTick+0x6a>
90001620:	e001      	b.n	90001626 <HAL_InitTick+0x62>
    return HAL_ERROR;
90001622:	2301      	movs	r3, #1
90001624:	e02b      	b.n	9000167e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90001626:	f003 fd77 	bl	90005118 <HAL_RCC_GetPCLK1Freq>
9000162a:	63f8      	str	r0, [r7, #60]	; 0x3c
9000162c:	e004      	b.n	90001638 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
9000162e:	f003 fd73 	bl	90005118 <HAL_RCC_GetPCLK1Freq>
90001632:	4603      	mov	r3, r0
90001634:	005b      	lsls	r3, r3, #1
90001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90001638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000163a:	4a15      	ldr	r2, [pc, #84]	; (90001690 <HAL_InitTick+0xcc>)
9000163c:	fba2 2303 	umull	r2, r3, r2, r3
90001640:	0c9b      	lsrs	r3, r3, #18
90001642:	3b01      	subs	r3, #1
90001644:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
90001646:	4b13      	ldr	r3, [pc, #76]	; (90001694 <HAL_InitTick+0xd0>)
90001648:	4a13      	ldr	r2, [pc, #76]	; (90001698 <HAL_InitTick+0xd4>)
9000164a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
9000164c:	4b11      	ldr	r3, [pc, #68]	; (90001694 <HAL_InitTick+0xd0>)
9000164e:	f240 32e7 	movw	r2, #999	; 0x3e7
90001652:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90001654:	4a0f      	ldr	r2, [pc, #60]	; (90001694 <HAL_InitTick+0xd0>)
90001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001658:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
9000165a:	4b0e      	ldr	r3, [pc, #56]	; (90001694 <HAL_InitTick+0xd0>)
9000165c:	2200      	movs	r2, #0
9000165e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90001660:	4b0c      	ldr	r3, [pc, #48]	; (90001694 <HAL_InitTick+0xd0>)
90001662:	2200      	movs	r2, #0
90001664:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90001666:	480b      	ldr	r0, [pc, #44]	; (90001694 <HAL_InitTick+0xd0>)
90001668:	f005 fd2f 	bl	900070ca <HAL_TIM_Base_Init>
9000166c:	4603      	mov	r3, r0
9000166e:	2b00      	cmp	r3, #0
90001670:	d104      	bne.n	9000167c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
90001672:	4808      	ldr	r0, [pc, #32]	; (90001694 <HAL_InitTick+0xd0>)
90001674:	f005 fd80 	bl	90007178 <HAL_TIM_Base_Start_IT>
90001678:	4603      	mov	r3, r0
9000167a:	e000      	b.n	9000167e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
9000167c:	2301      	movs	r3, #1
}
9000167e:	4618      	mov	r0, r3
90001680:	3740      	adds	r7, #64	; 0x40
90001682:	46bd      	mov	sp, r7
90001684:	bd80      	pop	{r7, pc}
90001686:	bf00      	nop
90001688:	24000008 	.word	0x24000008
9000168c:	58024400 	.word	0x58024400
90001690:	431bde83 	.word	0x431bde83
90001694:	24000540 	.word	0x24000540
90001698:	40001000 	.word	0x40001000

9000169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
9000169c:	b480      	push	{r7}
9000169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
900016a0:	e7fe      	b.n	900016a0 <NMI_Handler+0x4>

900016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
900016a2:	b480      	push	{r7}
900016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
900016a6:	e7fe      	b.n	900016a6 <HardFault_Handler+0x4>

900016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
900016a8:	b480      	push	{r7}
900016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
900016ac:	e7fe      	b.n	900016ac <MemManage_Handler+0x4>

900016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
900016ae:	b480      	push	{r7}
900016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
900016b2:	e7fe      	b.n	900016b2 <BusFault_Handler+0x4>

900016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
900016b4:	b480      	push	{r7}
900016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
900016b8:	e7fe      	b.n	900016b8 <UsageFault_Handler+0x4>

900016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
900016ba:	b480      	push	{r7}
900016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
900016be:	bf00      	nop
900016c0:	46bd      	mov	sp, r7
900016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900016c6:	4770      	bx	lr

900016c8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
900016c8:	b580      	push	{r7, lr}
900016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
900016cc:	4802      	ldr	r0, [pc, #8]	; (900016d8 <FDCAN1_IT0_IRQHandler+0x10>)
900016ce:	f001 faab 	bl	90002c28 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
900016d2:	bf00      	nop
900016d4:	bd80      	pop	{r7, pc}
900016d6:	bf00      	nop
900016d8:	2400020c 	.word	0x2400020c

900016dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
900016dc:	b580      	push	{r7, lr}
900016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
900016e0:	4802      	ldr	r0, [pc, #8]	; (900016ec <TIM6_DAC_IRQHandler+0x10>)
900016e2:	f005 fdc1 	bl	90007268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
900016e6:	bf00      	nop
900016e8:	bd80      	pop	{r7, pc}
900016ea:	bf00      	nop
900016ec:	24000540 	.word	0x24000540

900016f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
900016f0:	b480      	push	{r7}
900016f2:	af00      	add	r7, sp, #0
	return 1;
900016f4:	2301      	movs	r3, #1
}
900016f6:	4618      	mov	r0, r3
900016f8:	46bd      	mov	sp, r7
900016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
900016fe:	4770      	bx	lr

90001700 <_kill>:

int _kill(int pid, int sig)
{
90001700:	b580      	push	{r7, lr}
90001702:	b082      	sub	sp, #8
90001704:	af00      	add	r7, sp, #0
90001706:	6078      	str	r0, [r7, #4]
90001708:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
9000170a:	f00f fb75 	bl	90010df8 <__errno>
9000170e:	4603      	mov	r3, r0
90001710:	2216      	movs	r2, #22
90001712:	601a      	str	r2, [r3, #0]
	return -1;
90001714:	f04f 33ff 	mov.w	r3, #4294967295
}
90001718:	4618      	mov	r0, r3
9000171a:	3708      	adds	r7, #8
9000171c:	46bd      	mov	sp, r7
9000171e:	bd80      	pop	{r7, pc}

90001720 <_exit>:

void _exit (int status)
{
90001720:	b580      	push	{r7, lr}
90001722:	b082      	sub	sp, #8
90001724:	af00      	add	r7, sp, #0
90001726:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
90001728:	f04f 31ff 	mov.w	r1, #4294967295
9000172c:	6878      	ldr	r0, [r7, #4]
9000172e:	f7ff ffe7 	bl	90001700 <_kill>
	while (1) {}		/* Make sure we hang here */
90001732:	e7fe      	b.n	90001732 <_exit+0x12>

90001734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001734:	b580      	push	{r7, lr}
90001736:	b086      	sub	sp, #24
90001738:	af00      	add	r7, sp, #0
9000173a:	60f8      	str	r0, [r7, #12]
9000173c:	60b9      	str	r1, [r7, #8]
9000173e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001740:	2300      	movs	r3, #0
90001742:	617b      	str	r3, [r7, #20]
90001744:	e00a      	b.n	9000175c <_read+0x28>
	{
		*ptr++ = __io_getchar();
90001746:	f3af 8000 	nop.w
9000174a:	4601      	mov	r1, r0
9000174c:	68bb      	ldr	r3, [r7, #8]
9000174e:	1c5a      	adds	r2, r3, #1
90001750:	60ba      	str	r2, [r7, #8]
90001752:	b2ca      	uxtb	r2, r1
90001754:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001756:	697b      	ldr	r3, [r7, #20]
90001758:	3301      	adds	r3, #1
9000175a:	617b      	str	r3, [r7, #20]
9000175c:	697a      	ldr	r2, [r7, #20]
9000175e:	687b      	ldr	r3, [r7, #4]
90001760:	429a      	cmp	r2, r3
90001762:	dbf0      	blt.n	90001746 <_read+0x12>
	}

return len;
90001764:	687b      	ldr	r3, [r7, #4]
}
90001766:	4618      	mov	r0, r3
90001768:	3718      	adds	r7, #24
9000176a:	46bd      	mov	sp, r7
9000176c:	bd80      	pop	{r7, pc}

9000176e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
9000176e:	b580      	push	{r7, lr}
90001770:	b086      	sub	sp, #24
90001772:	af00      	add	r7, sp, #0
90001774:	60f8      	str	r0, [r7, #12]
90001776:	60b9      	str	r1, [r7, #8]
90001778:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000177a:	2300      	movs	r3, #0
9000177c:	617b      	str	r3, [r7, #20]
9000177e:	e009      	b.n	90001794 <_write+0x26>
	{
		__io_putchar(*ptr++);
90001780:	68bb      	ldr	r3, [r7, #8]
90001782:	1c5a      	adds	r2, r3, #1
90001784:	60ba      	str	r2, [r7, #8]
90001786:	781b      	ldrb	r3, [r3, #0]
90001788:	4618      	mov	r0, r3
9000178a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000178e:	697b      	ldr	r3, [r7, #20]
90001790:	3301      	adds	r3, #1
90001792:	617b      	str	r3, [r7, #20]
90001794:	697a      	ldr	r2, [r7, #20]
90001796:	687b      	ldr	r3, [r7, #4]
90001798:	429a      	cmp	r2, r3
9000179a:	dbf1      	blt.n	90001780 <_write+0x12>
	}
	return len;
9000179c:	687b      	ldr	r3, [r7, #4]
}
9000179e:	4618      	mov	r0, r3
900017a0:	3718      	adds	r7, #24
900017a2:	46bd      	mov	sp, r7
900017a4:	bd80      	pop	{r7, pc}

900017a6 <_close>:

int _close(int file)
{
900017a6:	b480      	push	{r7}
900017a8:	b083      	sub	sp, #12
900017aa:	af00      	add	r7, sp, #0
900017ac:	6078      	str	r0, [r7, #4]
	return -1;
900017ae:	f04f 33ff 	mov.w	r3, #4294967295
}
900017b2:	4618      	mov	r0, r3
900017b4:	370c      	adds	r7, #12
900017b6:	46bd      	mov	sp, r7
900017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900017bc:	4770      	bx	lr

900017be <_fstat>:


int _fstat(int file, struct stat *st)
{
900017be:	b480      	push	{r7}
900017c0:	b083      	sub	sp, #12
900017c2:	af00      	add	r7, sp, #0
900017c4:	6078      	str	r0, [r7, #4]
900017c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
900017c8:	683b      	ldr	r3, [r7, #0]
900017ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
900017ce:	605a      	str	r2, [r3, #4]
	return 0;
900017d0:	2300      	movs	r3, #0
}
900017d2:	4618      	mov	r0, r3
900017d4:	370c      	adds	r7, #12
900017d6:	46bd      	mov	sp, r7
900017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900017dc:	4770      	bx	lr

900017de <_isatty>:

int _isatty(int file)
{
900017de:	b480      	push	{r7}
900017e0:	b083      	sub	sp, #12
900017e2:	af00      	add	r7, sp, #0
900017e4:	6078      	str	r0, [r7, #4]
	return 1;
900017e6:	2301      	movs	r3, #1
}
900017e8:	4618      	mov	r0, r3
900017ea:	370c      	adds	r7, #12
900017ec:	46bd      	mov	sp, r7
900017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900017f2:	4770      	bx	lr

900017f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
900017f4:	b480      	push	{r7}
900017f6:	b085      	sub	sp, #20
900017f8:	af00      	add	r7, sp, #0
900017fa:	60f8      	str	r0, [r7, #12]
900017fc:	60b9      	str	r1, [r7, #8]
900017fe:	607a      	str	r2, [r7, #4]
	return 0;
90001800:	2300      	movs	r3, #0
}
90001802:	4618      	mov	r0, r3
90001804:	3714      	adds	r7, #20
90001806:	46bd      	mov	sp, r7
90001808:	f85d 7b04 	ldr.w	r7, [sp], #4
9000180c:	4770      	bx	lr
	...

90001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90001810:	b580      	push	{r7, lr}
90001812:	b086      	sub	sp, #24
90001814:	af00      	add	r7, sp, #0
90001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90001818:	4a14      	ldr	r2, [pc, #80]	; (9000186c <_sbrk+0x5c>)
9000181a:	4b15      	ldr	r3, [pc, #84]	; (90001870 <_sbrk+0x60>)
9000181c:	1ad3      	subs	r3, r2, r3
9000181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001820:	697b      	ldr	r3, [r7, #20]
90001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001824:	4b13      	ldr	r3, [pc, #76]	; (90001874 <_sbrk+0x64>)
90001826:	681b      	ldr	r3, [r3, #0]
90001828:	2b00      	cmp	r3, #0
9000182a:	d102      	bne.n	90001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
9000182c:	4b11      	ldr	r3, [pc, #68]	; (90001874 <_sbrk+0x64>)
9000182e:	4a12      	ldr	r2, [pc, #72]	; (90001878 <_sbrk+0x68>)
90001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001832:	4b10      	ldr	r3, [pc, #64]	; (90001874 <_sbrk+0x64>)
90001834:	681a      	ldr	r2, [r3, #0]
90001836:	687b      	ldr	r3, [r7, #4]
90001838:	4413      	add	r3, r2
9000183a:	693a      	ldr	r2, [r7, #16]
9000183c:	429a      	cmp	r2, r3
9000183e:	d207      	bcs.n	90001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
90001840:	f00f fada 	bl	90010df8 <__errno>
90001844:	4603      	mov	r3, r0
90001846:	220c      	movs	r2, #12
90001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
9000184a:	f04f 33ff 	mov.w	r3, #4294967295
9000184e:	e009      	b.n	90001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90001850:	4b08      	ldr	r3, [pc, #32]	; (90001874 <_sbrk+0x64>)
90001852:	681b      	ldr	r3, [r3, #0]
90001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001856:	4b07      	ldr	r3, [pc, #28]	; (90001874 <_sbrk+0x64>)
90001858:	681a      	ldr	r2, [r3, #0]
9000185a:	687b      	ldr	r3, [r7, #4]
9000185c:	4413      	add	r3, r2
9000185e:	4a05      	ldr	r2, [pc, #20]	; (90001874 <_sbrk+0x64>)
90001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001862:	68fb      	ldr	r3, [r7, #12]
}
90001864:	4618      	mov	r0, r3
90001866:	3718      	adds	r7, #24
90001868:	46bd      	mov	sp, r7
9000186a:	bd80      	pop	{r7, pc}
9000186c:	24080000 	.word	0x24080000
90001870:	00000400 	.word	0x00000400
90001874:	2400058c 	.word	0x2400058c
90001878:	24012a80 	.word	0x24012a80

9000187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
9000187c:	b480      	push	{r7}
9000187e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90001880:	4b3b      	ldr	r3, [pc, #236]	; (90001970 <SystemInit+0xf4>)
90001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001886:	4a3a      	ldr	r2, [pc, #232]	; (90001970 <SystemInit+0xf4>)
90001888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000188c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  RCC->CFGR = 0; // Reset the configuration register
90001890:	4b38      	ldr	r3, [pc, #224]	; (90001974 <SystemInit+0xf8>)
90001892:	2200      	movs	r2, #0
90001894:	611a      	str	r2, [r3, #16]
  SCB->VTOR = QSPI_BASE; // 0x90000000
90001896:	4b36      	ldr	r3, [pc, #216]	; (90001970 <SystemInit+0xf4>)
90001898:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
9000189c:	609a      	str	r2, [r3, #8]

  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
9000189e:	4b36      	ldr	r3, [pc, #216]	; (90001978 <SystemInit+0xfc>)
900018a0:	681b      	ldr	r3, [r3, #0]
900018a2:	f003 030f 	and.w	r3, r3, #15
900018a6:	2b06      	cmp	r3, #6
900018a8:	d807      	bhi.n	900018ba <SystemInit+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
900018aa:	4b33      	ldr	r3, [pc, #204]	; (90001978 <SystemInit+0xfc>)
900018ac:	681b      	ldr	r3, [r3, #0]
900018ae:	f023 030f 	bic.w	r3, r3, #15
900018b2:	4a31      	ldr	r2, [pc, #196]	; (90001978 <SystemInit+0xfc>)
900018b4:	f043 0307 	orr.w	r3, r3, #7
900018b8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
900018ba:	4b2e      	ldr	r3, [pc, #184]	; (90001974 <SystemInit+0xf8>)
900018bc:	681b      	ldr	r3, [r3, #0]
900018be:	4a2d      	ldr	r2, [pc, #180]	; (90001974 <SystemInit+0xf8>)
900018c0:	f043 0301 	orr.w	r3, r3, #1
900018c4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
900018c6:	4b2b      	ldr	r3, [pc, #172]	; (90001974 <SystemInit+0xf8>)
900018c8:	2200      	movs	r2, #0
900018ca:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900018cc:	4b29      	ldr	r3, [pc, #164]	; (90001974 <SystemInit+0xf8>)
900018ce:	681a      	ldr	r2, [r3, #0]
900018d0:	4928      	ldr	r1, [pc, #160]	; (90001974 <SystemInit+0xf8>)
900018d2:	4b2a      	ldr	r3, [pc, #168]	; (9000197c <SystemInit+0x100>)
900018d4:	4013      	ands	r3, r2
900018d6:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
900018d8:	4b27      	ldr	r3, [pc, #156]	; (90001978 <SystemInit+0xfc>)
900018da:	681b      	ldr	r3, [r3, #0]
900018dc:	f003 0308 	and.w	r3, r3, #8
900018e0:	2b00      	cmp	r3, #0
900018e2:	d007      	beq.n	900018f4 <SystemInit+0x78>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
900018e4:	4b24      	ldr	r3, [pc, #144]	; (90001978 <SystemInit+0xfc>)
900018e6:	681b      	ldr	r3, [r3, #0]
900018e8:	f023 030f 	bic.w	r3, r3, #15
900018ec:	4a22      	ldr	r2, [pc, #136]	; (90001978 <SystemInit+0xfc>)
900018ee:	f043 0307 	orr.w	r3, r3, #7
900018f2:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
900018f4:	4b1f      	ldr	r3, [pc, #124]	; (90001974 <SystemInit+0xf8>)
900018f6:	2200      	movs	r2, #0
900018f8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
900018fa:	4b1e      	ldr	r3, [pc, #120]	; (90001974 <SystemInit+0xf8>)
900018fc:	2200      	movs	r2, #0
900018fe:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90001900:	4b1c      	ldr	r3, [pc, #112]	; (90001974 <SystemInit+0xf8>)
90001902:	2200      	movs	r2, #0
90001904:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
90001906:	4b1b      	ldr	r3, [pc, #108]	; (90001974 <SystemInit+0xf8>)
90001908:	4a1d      	ldr	r2, [pc, #116]	; (90001980 <SystemInit+0x104>)
9000190a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
9000190c:	4b19      	ldr	r3, [pc, #100]	; (90001974 <SystemInit+0xf8>)
9000190e:	4a1d      	ldr	r2, [pc, #116]	; (90001984 <SystemInit+0x108>)
90001910:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
90001912:	4b18      	ldr	r3, [pc, #96]	; (90001974 <SystemInit+0xf8>)
90001914:	4a1c      	ldr	r2, [pc, #112]	; (90001988 <SystemInit+0x10c>)
90001916:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90001918:	4b16      	ldr	r3, [pc, #88]	; (90001974 <SystemInit+0xf8>)
9000191a:	2200      	movs	r2, #0
9000191c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
9000191e:	4b15      	ldr	r3, [pc, #84]	; (90001974 <SystemInit+0xf8>)
90001920:	4a19      	ldr	r2, [pc, #100]	; (90001988 <SystemInit+0x10c>)
90001922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
90001924:	4b13      	ldr	r3, [pc, #76]	; (90001974 <SystemInit+0xf8>)
90001926:	2200      	movs	r2, #0
90001928:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
9000192a:	4b12      	ldr	r3, [pc, #72]	; (90001974 <SystemInit+0xf8>)
9000192c:	4a16      	ldr	r2, [pc, #88]	; (90001988 <SystemInit+0x10c>)
9000192e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90001930:	4b10      	ldr	r3, [pc, #64]	; (90001974 <SystemInit+0xf8>)
90001932:	2200      	movs	r2, #0
90001934:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90001936:	4b0f      	ldr	r3, [pc, #60]	; (90001974 <SystemInit+0xf8>)
90001938:	681b      	ldr	r3, [r3, #0]
9000193a:	4a0e      	ldr	r2, [pc, #56]	; (90001974 <SystemInit+0xf8>)
9000193c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001940:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90001942:	4b0c      	ldr	r3, [pc, #48]	; (90001974 <SystemInit+0xf8>)
90001944:	2200      	movs	r2, #0
90001946:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90001948:	4b10      	ldr	r3, [pc, #64]	; (9000198c <SystemInit+0x110>)
9000194a:	681a      	ldr	r2, [r3, #0]
9000194c:	4b10      	ldr	r3, [pc, #64]	; (90001990 <SystemInit+0x114>)
9000194e:	4013      	ands	r3, r2
90001950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90001954:	d202      	bcs.n	9000195c <SystemInit+0xe0>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90001956:	4b0f      	ldr	r3, [pc, #60]	; (90001994 <SystemInit+0x118>)
90001958:	2201      	movs	r2, #1
9000195a:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
9000195c:	4b0e      	ldr	r3, [pc, #56]	; (90001998 <SystemInit+0x11c>)
9000195e:	f243 02d2 	movw	r2, #12498	; 0x30d2
90001962:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
90001964:	bf00      	nop
90001966:	46bd      	mov	sp, r7
90001968:	f85d 7b04 	ldr.w	r7, [sp], #4
9000196c:	4770      	bx	lr
9000196e:	bf00      	nop
90001970:	e000ed00 	.word	0xe000ed00
90001974:	58024400 	.word	0x58024400
90001978:	52002000 	.word	0x52002000
9000197c:	eaf6ed7f 	.word	0xeaf6ed7f
90001980:	02020200 	.word	0x02020200
90001984:	01ff0000 	.word	0x01ff0000
90001988:	01010280 	.word	0x01010280
9000198c:	5c001000 	.word	0x5c001000
90001990:	ffff0000 	.word	0xffff0000
90001994:	51008108 	.word	0x51008108
90001998:	52004000 	.word	0x52004000

9000199c <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
9000199c:	b480      	push	{r7}
9000199e:	b085      	sub	sp, #20
900019a0:	af00      	add	r7, sp, #0
900019a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
900019a4:	687b      	ldr	r3, [r7, #4]
900019a6:	681b      	ldr	r3, [r3, #0]
900019a8:	4a0b      	ldr	r2, [pc, #44]	; (900019d8 <HAL_TIM_Base_MspInit+0x3c>)
900019aa:	4293      	cmp	r3, r2
900019ac:	d10e      	bne.n	900019cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
900019ae:	4b0b      	ldr	r3, [pc, #44]	; (900019dc <HAL_TIM_Base_MspInit+0x40>)
900019b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900019b4:	4a09      	ldr	r2, [pc, #36]	; (900019dc <HAL_TIM_Base_MspInit+0x40>)
900019b6:	f043 0302 	orr.w	r3, r3, #2
900019ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
900019be:	4b07      	ldr	r3, [pc, #28]	; (900019dc <HAL_TIM_Base_MspInit+0x40>)
900019c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900019c4:	f003 0302 	and.w	r3, r3, #2
900019c8:	60fb      	str	r3, [r7, #12]
900019ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
900019cc:	bf00      	nop
900019ce:	3714      	adds	r7, #20
900019d0:	46bd      	mov	sp, r7
900019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
900019d6:	4770      	bx	lr
900019d8:	40010400 	.word	0x40010400
900019dc:	58024400 	.word	0x58024400

900019e0 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
900019e0:	b580      	push	{r7, lr}
900019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
900019e4:	4b22      	ldr	r3, [pc, #136]	; (90001a70 <MX_USART1_UART_Init+0x90>)
900019e6:	4a23      	ldr	r2, [pc, #140]	; (90001a74 <MX_USART1_UART_Init+0x94>)
900019e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
900019ea:	4b21      	ldr	r3, [pc, #132]	; (90001a70 <MX_USART1_UART_Init+0x90>)
900019ec:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
900019f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
900019f2:	4b1f      	ldr	r3, [pc, #124]	; (90001a70 <MX_USART1_UART_Init+0x90>)
900019f4:	2200      	movs	r2, #0
900019f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
900019f8:	4b1d      	ldr	r3, [pc, #116]	; (90001a70 <MX_USART1_UART_Init+0x90>)
900019fa:	2200      	movs	r2, #0
900019fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
900019fe:	4b1c      	ldr	r3, [pc, #112]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a00:	2200      	movs	r2, #0
90001a02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
90001a04:	4b1a      	ldr	r3, [pc, #104]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a06:	220c      	movs	r2, #12
90001a08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90001a0a:	4b19      	ldr	r3, [pc, #100]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a0c:	2200      	movs	r2, #0
90001a0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
90001a10:	4b17      	ldr	r3, [pc, #92]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a12:	2200      	movs	r2, #0
90001a14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90001a16:	4b16      	ldr	r3, [pc, #88]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a18:	2200      	movs	r2, #0
90001a1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90001a1c:	4b14      	ldr	r3, [pc, #80]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a1e:	2200      	movs	r2, #0
90001a20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90001a22:	4b13      	ldr	r3, [pc, #76]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a24:	2200      	movs	r2, #0
90001a26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
90001a28:	4811      	ldr	r0, [pc, #68]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a2a:	f005 fe1d 	bl	90007668 <HAL_UART_Init>
90001a2e:	4603      	mov	r3, r0
90001a30:	2b00      	cmp	r3, #0
90001a32:	d001      	beq.n	90001a38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
90001a34:	f7ff fb2c 	bl	90001090 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90001a38:	2100      	movs	r1, #0
90001a3a:	480d      	ldr	r0, [pc, #52]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a3c:	f006 fe1f 	bl	9000867e <HAL_UARTEx_SetTxFifoThreshold>
90001a40:	4603      	mov	r3, r0
90001a42:	2b00      	cmp	r3, #0
90001a44:	d001      	beq.n	90001a4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
90001a46:	f7ff fb23 	bl	90001090 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90001a4a:	2100      	movs	r1, #0
90001a4c:	4808      	ldr	r0, [pc, #32]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a4e:	f006 fe54 	bl	900086fa <HAL_UARTEx_SetRxFifoThreshold>
90001a52:	4603      	mov	r3, r0
90001a54:	2b00      	cmp	r3, #0
90001a56:	d001      	beq.n	90001a5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
90001a58:	f7ff fb1a 	bl	90001090 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
90001a5c:	4804      	ldr	r0, [pc, #16]	; (90001a70 <MX_USART1_UART_Init+0x90>)
90001a5e:	f006 fdd5 	bl	9000860c <HAL_UARTEx_DisableFifoMode>
90001a62:	4603      	mov	r3, r0
90001a64:	2b00      	cmp	r3, #0
90001a66:	d001      	beq.n	90001a6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
90001a68:	f7ff fb12 	bl	90001090 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
90001a6c:	bf00      	nop
90001a6e:	bd80      	pop	{r7, pc}
90001a70:	24000590 	.word	0x24000590
90001a74:	40011000 	.word	0x40011000

90001a78 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
90001a78:	b580      	push	{r7, lr}
90001a7a:	b0c4      	sub	sp, #272	; 0x110
90001a7c:	af00      	add	r7, sp, #0
90001a7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001a82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
90001a86:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001a88:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
90001a8c:	2200      	movs	r2, #0
90001a8e:	601a      	str	r2, [r3, #0]
90001a90:	605a      	str	r2, [r3, #4]
90001a92:	609a      	str	r2, [r3, #8]
90001a94:	60da      	str	r2, [r3, #12]
90001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90001a98:	f107 0338 	add.w	r3, r7, #56	; 0x38
90001a9c:	22c0      	movs	r2, #192	; 0xc0
90001a9e:	2100      	movs	r1, #0
90001aa0:	4618      	mov	r0, r3
90001aa2:	f00f faf5 	bl	90011090 <memset>
  if(uartHandle->Instance==UART4)
90001aa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001aaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
90001aae:	681b      	ldr	r3, [r3, #0]
90001ab0:	681b      	ldr	r3, [r3, #0]
90001ab2:	4aca      	ldr	r2, [pc, #808]	; (90001ddc <HAL_UART_MspInit+0x364>)
90001ab4:	4293      	cmp	r3, r2
90001ab6:	d146      	bne.n	90001b46 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
90001ab8:	f04f 0202 	mov.w	r2, #2
90001abc:	f04f 0300 	mov.w	r3, #0
90001ac0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90001ac4:	2300      	movs	r3, #0
90001ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
90001ace:	4618      	mov	r0, r3
90001ad0:	f003 fb90 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90001ad4:	4603      	mov	r3, r0
90001ad6:	2b00      	cmp	r3, #0
90001ad8:	d001      	beq.n	90001ade <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
90001ada:	f7ff fad9 	bl	90001090 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
90001ade:	4bc0      	ldr	r3, [pc, #768]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001ae4:	4abe      	ldr	r2, [pc, #760]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90001aea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001aee:	4bbc      	ldr	r3, [pc, #752]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90001af8:	637b      	str	r3, [r7, #52]	; 0x34
90001afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOD_CLK_ENABLE();
90001afc:	4bb8      	ldr	r3, [pc, #736]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b02:	4ab7      	ldr	r2, [pc, #732]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001b04:	f043 0308 	orr.w	r3, r3, #8
90001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b0c:	4bb4      	ldr	r3, [pc, #720]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b12:	f003 0308 	and.w	r3, r3, #8
90001b16:	633b      	str	r3, [r7, #48]	; 0x30
90001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
90001b1a:	2303      	movs	r3, #3
90001b1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001b20:	2302      	movs	r3, #2
90001b22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001b26:	2300      	movs	r3, #0
90001b28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001b2c:	2300      	movs	r3, #0
90001b2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
90001b32:	2308      	movs	r3, #8
90001b34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90001b38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
90001b3c:	4619      	mov	r1, r3
90001b3e:	48a9      	ldr	r0, [pc, #676]	; (90001de4 <HAL_UART_MspInit+0x36c>)
90001b40:	f001 fd74 	bl	9000362c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
90001b44:	e1bc      	b.n	90001ec0 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART5)
90001b46:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001b4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
90001b4e:	681b      	ldr	r3, [r3, #0]
90001b50:	681b      	ldr	r3, [r3, #0]
90001b52:	4aa5      	ldr	r2, [pc, #660]	; (90001de8 <HAL_UART_MspInit+0x370>)
90001b54:	4293      	cmp	r3, r2
90001b56:	d147      	bne.n	90001be8 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
90001b58:	f04f 0202 	mov.w	r2, #2
90001b5c:	f04f 0300 	mov.w	r3, #0
90001b60:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90001b64:	2300      	movs	r3, #0
90001b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001b6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
90001b6e:	4618      	mov	r0, r3
90001b70:	f003 fb40 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90001b74:	4603      	mov	r3, r0
90001b76:	2b00      	cmp	r3, #0
90001b78:	d001      	beq.n	90001b7e <HAL_UART_MspInit+0x106>
      Error_Handler();
90001b7a:	f7ff fa89 	bl	90001090 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
90001b7e:	4b98      	ldr	r3, [pc, #608]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001b84:	4a96      	ldr	r2, [pc, #600]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90001b8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001b8e:	4b94      	ldr	r3, [pc, #592]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
90001b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
90001b9c:	4b90      	ldr	r3, [pc, #576]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001ba2:	4a8f      	ldr	r2, [pc, #572]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001ba4:	f043 0302 	orr.w	r3, r3, #2
90001ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001bac:	4b8c      	ldr	r3, [pc, #560]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001bb2:	f003 0302 	and.w	r3, r3, #2
90001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
90001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
90001bba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
90001bbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001bc2:	2302      	movs	r3, #2
90001bc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001bc8:	2300      	movs	r3, #0
90001bca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001bce:	2300      	movs	r3, #0
90001bd0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
90001bd4:	230e      	movs	r3, #14
90001bd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001bda:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
90001bde:	4619      	mov	r1, r3
90001be0:	4882      	ldr	r0, [pc, #520]	; (90001dec <HAL_UART_MspInit+0x374>)
90001be2:	f001 fd23 	bl	9000362c <HAL_GPIO_Init>
}
90001be6:	e16b      	b.n	90001ec0 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART8)
90001be8:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001bec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
90001bf0:	681b      	ldr	r3, [r3, #0]
90001bf2:	681b      	ldr	r3, [r3, #0]
90001bf4:	4a7e      	ldr	r2, [pc, #504]	; (90001df0 <HAL_UART_MspInit+0x378>)
90001bf6:	4293      	cmp	r3, r2
90001bf8:	d146      	bne.n	90001c88 <HAL_UART_MspInit+0x210>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
90001bfa:	f04f 0202 	mov.w	r2, #2
90001bfe:	f04f 0300 	mov.w	r3, #0
90001c02:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90001c06:	2300      	movs	r3, #0
90001c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001c0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
90001c10:	4618      	mov	r0, r3
90001c12:	f003 faef 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90001c16:	4603      	mov	r3, r0
90001c18:	2b00      	cmp	r3, #0
90001c1a:	d001      	beq.n	90001c20 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
90001c1c:	f7ff fa38 	bl	90001090 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
90001c20:	4b6f      	ldr	r3, [pc, #444]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001c22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001c26:	4a6e      	ldr	r2, [pc, #440]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90001c2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001c30:	4b6b      	ldr	r3, [pc, #428]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90001c3a:	627b      	str	r3, [r7, #36]	; 0x24
90001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
90001c3e:	4b68      	ldr	r3, [pc, #416]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001c44:	4a66      	ldr	r2, [pc, #408]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001c46:	f043 0310 	orr.w	r3, r3, #16
90001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001c4e:	4b64      	ldr	r3, [pc, #400]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001c54:	f003 0310 	and.w	r3, r3, #16
90001c58:	623b      	str	r3, [r7, #32]
90001c5a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
90001c5c:	2303      	movs	r3, #3
90001c5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001c62:	2302      	movs	r3, #2
90001c64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001c68:	2300      	movs	r3, #0
90001c6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001c6e:	2300      	movs	r3, #0
90001c70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
90001c74:	2308      	movs	r3, #8
90001c76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90001c7a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
90001c7e:	4619      	mov	r1, r3
90001c80:	485c      	ldr	r0, [pc, #368]	; (90001df4 <HAL_UART_MspInit+0x37c>)
90001c82:	f001 fcd3 	bl	9000362c <HAL_GPIO_Init>
}
90001c86:	e11b      	b.n	90001ec0 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==USART1)
90001c88:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001c8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
90001c90:	681b      	ldr	r3, [r3, #0]
90001c92:	681b      	ldr	r3, [r3, #0]
90001c94:	4a58      	ldr	r2, [pc, #352]	; (90001df8 <HAL_UART_MspInit+0x380>)
90001c96:	4293      	cmp	r3, r2
90001c98:	d147      	bne.n	90001d2a <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
90001c9a:	f04f 0201 	mov.w	r2, #1
90001c9e:	f04f 0300 	mov.w	r3, #0
90001ca2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
90001ca6:	2300      	movs	r3, #0
90001ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001cac:	f107 0338 	add.w	r3, r7, #56	; 0x38
90001cb0:	4618      	mov	r0, r3
90001cb2:	f003 fa9f 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90001cb6:	4603      	mov	r3, r0
90001cb8:	2b00      	cmp	r3, #0
90001cba:	d001      	beq.n	90001cc0 <HAL_UART_MspInit+0x248>
      Error_Handler();
90001cbc:	f7ff f9e8 	bl	90001090 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
90001cc0:	4b47      	ldr	r3, [pc, #284]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90001cc6:	4a46      	ldr	r2, [pc, #280]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001cc8:	f043 0310 	orr.w	r3, r3, #16
90001ccc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
90001cd0:	4b43      	ldr	r3, [pc, #268]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90001cd6:	f003 0310 	and.w	r3, r3, #16
90001cda:	61fb      	str	r3, [r7, #28]
90001cdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
90001cde:	4b40      	ldr	r3, [pc, #256]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001ce4:	4a3e      	ldr	r2, [pc, #248]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001ce6:	f043 0302 	orr.w	r3, r3, #2
90001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001cee:	4b3c      	ldr	r3, [pc, #240]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001cf4:	f003 0302 	and.w	r3, r3, #2
90001cf8:	61bb      	str	r3, [r7, #24]
90001cfa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
90001cfc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
90001d00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001d04:	2302      	movs	r3, #2
90001d06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001d0a:	2300      	movs	r3, #0
90001d0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001d10:	2300      	movs	r3, #0
90001d12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
90001d16:	2304      	movs	r3, #4
90001d18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001d1c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
90001d20:	4619      	mov	r1, r3
90001d22:	4832      	ldr	r0, [pc, #200]	; (90001dec <HAL_UART_MspInit+0x374>)
90001d24:	f001 fc82 	bl	9000362c <HAL_GPIO_Init>
}
90001d28:	e0ca      	b.n	90001ec0 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==USART2)
90001d2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001d2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
90001d32:	681b      	ldr	r3, [r3, #0]
90001d34:	681b      	ldr	r3, [r3, #0]
90001d36:	4a31      	ldr	r2, [pc, #196]	; (90001dfc <HAL_UART_MspInit+0x384>)
90001d38:	4293      	cmp	r3, r2
90001d3a:	d161      	bne.n	90001e00 <HAL_UART_MspInit+0x388>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
90001d3c:	f04f 0202 	mov.w	r2, #2
90001d40:	f04f 0300 	mov.w	r3, #0
90001d44:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90001d48:	2300      	movs	r3, #0
90001d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001d4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
90001d52:	4618      	mov	r0, r3
90001d54:	f003 fa4e 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90001d58:	4603      	mov	r3, r0
90001d5a:	2b00      	cmp	r3, #0
90001d5c:	d001      	beq.n	90001d62 <HAL_UART_MspInit+0x2ea>
      Error_Handler();
90001d5e:	f7ff f997 	bl	90001090 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
90001d62:	4b1f      	ldr	r3, [pc, #124]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001d68:	4a1d      	ldr	r2, [pc, #116]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001d72:	4b1b      	ldr	r3, [pc, #108]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001d7c:	617b      	str	r3, [r7, #20]
90001d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90001d80:	4b17      	ldr	r3, [pc, #92]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001d86:	4a16      	ldr	r2, [pc, #88]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001d88:	f043 0308 	orr.w	r3, r3, #8
90001d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001d90:	4b13      	ldr	r3, [pc, #76]	; (90001de0 <HAL_UART_MspInit+0x368>)
90001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001d96:	f003 0208 	and.w	r2, r3, #8
90001d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001d9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
90001da2:	601a      	str	r2, [r3, #0]
90001da4:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001da8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
90001dac:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
90001dae:	2360      	movs	r3, #96	; 0x60
90001db0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001db4:	2302      	movs	r3, #2
90001db6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001dba:	2300      	movs	r3, #0
90001dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001dc0:	2300      	movs	r3, #0
90001dc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
90001dc6:	2307      	movs	r3, #7
90001dc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90001dcc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
90001dd0:	4619      	mov	r1, r3
90001dd2:	4804      	ldr	r0, [pc, #16]	; (90001de4 <HAL_UART_MspInit+0x36c>)
90001dd4:	f001 fc2a 	bl	9000362c <HAL_GPIO_Init>
}
90001dd8:	e072      	b.n	90001ec0 <HAL_UART_MspInit+0x448>
90001dda:	bf00      	nop
90001ddc:	40004c00 	.word	0x40004c00
90001de0:	58024400 	.word	0x58024400
90001de4:	58020c00 	.word	0x58020c00
90001de8:	40005000 	.word	0x40005000
90001dec:	58020400 	.word	0x58020400
90001df0:	40007c00 	.word	0x40007c00
90001df4:	58021000 	.word	0x58021000
90001df8:	40011000 	.word	0x40011000
90001dfc:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
90001e00:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001e04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
90001e08:	681b      	ldr	r3, [r3, #0]
90001e0a:	681b      	ldr	r3, [r3, #0]
90001e0c:	4a2f      	ldr	r2, [pc, #188]	; (90001ecc <HAL_UART_MspInit+0x454>)
90001e0e:	4293      	cmp	r3, r2
90001e10:	d156      	bne.n	90001ec0 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
90001e12:	f04f 0202 	mov.w	r2, #2
90001e16:	f04f 0300 	mov.w	r3, #0
90001e1a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90001e1e:	2300      	movs	r3, #0
90001e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001e24:	f107 0338 	add.w	r3, r7, #56	; 0x38
90001e28:	4618      	mov	r0, r3
90001e2a:	f003 f9e3 	bl	900051f4 <HAL_RCCEx_PeriphCLKConfig>
90001e2e:	4603      	mov	r3, r0
90001e30:	2b00      	cmp	r3, #0
90001e32:	d001      	beq.n	90001e38 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
90001e34:	f7ff f92c 	bl	90001090 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
90001e38:	4b25      	ldr	r3, [pc, #148]	; (90001ed0 <HAL_UART_MspInit+0x458>)
90001e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001e3e:	4a24      	ldr	r2, [pc, #144]	; (90001ed0 <HAL_UART_MspInit+0x458>)
90001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90001e44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001e48:	4b21      	ldr	r3, [pc, #132]	; (90001ed0 <HAL_UART_MspInit+0x458>)
90001e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001e4e:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
90001e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
90001e5a:	601a      	str	r2, [r3, #0]
90001e5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001e60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
90001e64:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90001e66:	4b1a      	ldr	r3, [pc, #104]	; (90001ed0 <HAL_UART_MspInit+0x458>)
90001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001e6c:	4a18      	ldr	r2, [pc, #96]	; (90001ed0 <HAL_UART_MspInit+0x458>)
90001e6e:	f043 0308 	orr.w	r3, r3, #8
90001e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001e76:	4b16      	ldr	r3, [pc, #88]	; (90001ed0 <HAL_UART_MspInit+0x458>)
90001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001e7c:	f003 0208 	and.w	r2, r3, #8
90001e80:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
90001e88:	601a      	str	r2, [r3, #0]
90001e8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
90001e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
90001e92:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
90001e94:	f44f 7340 	mov.w	r3, #768	; 0x300
90001e98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001e9c:	2302      	movs	r3, #2
90001e9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001ea2:	2300      	movs	r3, #0
90001ea4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001ea8:	2300      	movs	r3, #0
90001eaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90001eae:	2307      	movs	r3, #7
90001eb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90001eb4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
90001eb8:	4619      	mov	r1, r3
90001eba:	4806      	ldr	r0, [pc, #24]	; (90001ed4 <HAL_UART_MspInit+0x45c>)
90001ebc:	f001 fbb6 	bl	9000362c <HAL_GPIO_Init>
}
90001ec0:	bf00      	nop
90001ec2:	f507 7788 	add.w	r7, r7, #272	; 0x110
90001ec6:	46bd      	mov	sp, r7
90001ec8:	bd80      	pop	{r7, pc}
90001eca:	bf00      	nop
90001ecc:	40004800 	.word	0x40004800
90001ed0:	58024400 	.word	0x58024400
90001ed4:	58020c00 	.word	0x58020c00

90001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 90001f10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90001edc:	f7ff fcce 	bl	9000187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90001ee0:	480c      	ldr	r0, [pc, #48]	; (90001f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
90001ee2:	490d      	ldr	r1, [pc, #52]	; (90001f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90001ee4:	4a0d      	ldr	r2, [pc, #52]	; (90001f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
90001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
90001ee8:	e002      	b.n	90001ef0 <LoopCopyDataInit>

90001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90001eee:	3304      	adds	r3, #4

90001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
90001ef4:	d3f9      	bcc.n	90001eea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90001ef6:	4a0a      	ldr	r2, [pc, #40]	; (90001f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90001ef8:	4c0a      	ldr	r4, [pc, #40]	; (90001f24 <LoopFillZerobss+0x22>)
  movs r3, #0
90001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
90001efc:	e001      	b.n	90001f02 <LoopFillZerobss>

90001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90001f00:	3204      	adds	r2, #4

90001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
90001f04:	d3fb      	bcc.n	90001efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90001f06:	f00f f873 	bl	90010ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90001f0a:	f7fe ffa5 	bl	90000e58 <main>
  bx  lr
90001f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90001f10:	24080000 	.word	0x24080000
  ldr r0, =_sdata
90001f14:	24000000 	.word	0x24000000
  ldr r1, =_edata
90001f18:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
90001f1c:	90014c24 	.word	0x90014c24
  ldr r2, =_sbss
90001f20:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
90001f24:	24012a7c 	.word	0x24012a7c

90001f28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90001f28:	e7fe      	b.n	90001f28 <ADC3_IRQHandler>
	...

90001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90001f2c:	b580      	push	{r7, lr}
90001f2e:	b082      	sub	sp, #8
90001f30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90001f32:	2003      	movs	r0, #3
90001f34:	f000 f90f 	bl	90002156 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90001f38:	f002 ff44 	bl	90004dc4 <HAL_RCC_GetSysClockFreq>
90001f3c:	4602      	mov	r2, r0
90001f3e:	4b15      	ldr	r3, [pc, #84]	; (90001f94 <HAL_Init+0x68>)
90001f40:	699b      	ldr	r3, [r3, #24]
90001f42:	0a1b      	lsrs	r3, r3, #8
90001f44:	f003 030f 	and.w	r3, r3, #15
90001f48:	4913      	ldr	r1, [pc, #76]	; (90001f98 <HAL_Init+0x6c>)
90001f4a:	5ccb      	ldrb	r3, [r1, r3]
90001f4c:	f003 031f 	and.w	r3, r3, #31
90001f50:	fa22 f303 	lsr.w	r3, r2, r3
90001f54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90001f56:	4b0f      	ldr	r3, [pc, #60]	; (90001f94 <HAL_Init+0x68>)
90001f58:	699b      	ldr	r3, [r3, #24]
90001f5a:	f003 030f 	and.w	r3, r3, #15
90001f5e:	4a0e      	ldr	r2, [pc, #56]	; (90001f98 <HAL_Init+0x6c>)
90001f60:	5cd3      	ldrb	r3, [r2, r3]
90001f62:	f003 031f 	and.w	r3, r3, #31
90001f66:	687a      	ldr	r2, [r7, #4]
90001f68:	fa22 f303 	lsr.w	r3, r2, r3
90001f6c:	4a0b      	ldr	r2, [pc, #44]	; (90001f9c <HAL_Init+0x70>)
90001f6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90001f70:	4a0b      	ldr	r2, [pc, #44]	; (90001fa0 <HAL_Init+0x74>)
90001f72:	687b      	ldr	r3, [r7, #4]
90001f74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90001f76:	200f      	movs	r0, #15
90001f78:	f7ff fb24 	bl	900015c4 <HAL_InitTick>
90001f7c:	4603      	mov	r3, r0
90001f7e:	2b00      	cmp	r3, #0
90001f80:	d001      	beq.n	90001f86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90001f82:	2301      	movs	r3, #1
90001f84:	e002      	b.n	90001f8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90001f86:	f7ff faff 	bl	90001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90001f8a:	2300      	movs	r3, #0
}
90001f8c:	4618      	mov	r0, r3
90001f8e:	3708      	adds	r7, #8
90001f90:	46bd      	mov	sp, r7
90001f92:	bd80      	pop	{r7, pc}
90001f94:	58024400 	.word	0x58024400
90001f98:	90014068 	.word	0x90014068
90001f9c:	24000004 	.word	0x24000004
90001fa0:	24000000 	.word	0x24000000

90001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001fa4:	b480      	push	{r7}
90001fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90001fa8:	4b06      	ldr	r3, [pc, #24]	; (90001fc4 <HAL_IncTick+0x20>)
90001faa:	781b      	ldrb	r3, [r3, #0]
90001fac:	461a      	mov	r2, r3
90001fae:	4b06      	ldr	r3, [pc, #24]	; (90001fc8 <HAL_IncTick+0x24>)
90001fb0:	681b      	ldr	r3, [r3, #0]
90001fb2:	4413      	add	r3, r2
90001fb4:	4a04      	ldr	r2, [pc, #16]	; (90001fc8 <HAL_IncTick+0x24>)
90001fb6:	6013      	str	r3, [r2, #0]
}
90001fb8:	bf00      	nop
90001fba:	46bd      	mov	sp, r7
90001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fc0:	4770      	bx	lr
90001fc2:	bf00      	nop
90001fc4:	2400000c 	.word	0x2400000c
90001fc8:	24000624 	.word	0x24000624

90001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90001fcc:	b480      	push	{r7}
90001fce:	af00      	add	r7, sp, #0
  return uwTick;
90001fd0:	4b03      	ldr	r3, [pc, #12]	; (90001fe0 <HAL_GetTick+0x14>)
90001fd2:	681b      	ldr	r3, [r3, #0]
}
90001fd4:	4618      	mov	r0, r3
90001fd6:	46bd      	mov	sp, r7
90001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fdc:	4770      	bx	lr
90001fde:	bf00      	nop
90001fe0:	24000624 	.word	0x24000624

90001fe4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90001fe4:	b480      	push	{r7}
90001fe6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90001fe8:	4b03      	ldr	r3, [pc, #12]	; (90001ff8 <HAL_GetREVID+0x14>)
90001fea:	681b      	ldr	r3, [r3, #0]
90001fec:	0c1b      	lsrs	r3, r3, #16
}
90001fee:	4618      	mov	r0, r3
90001ff0:	46bd      	mov	sp, r7
90001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
90001ff6:	4770      	bx	lr
90001ff8:	5c001000 	.word	0x5c001000

90001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001ffc:	b480      	push	{r7}
90001ffe:	b085      	sub	sp, #20
90002000:	af00      	add	r7, sp, #0
90002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90002004:	687b      	ldr	r3, [r7, #4]
90002006:	f003 0307 	and.w	r3, r3, #7
9000200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000200c:	4b0b      	ldr	r3, [pc, #44]	; (9000203c <__NVIC_SetPriorityGrouping+0x40>)
9000200e:	68db      	ldr	r3, [r3, #12]
90002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90002012:	68ba      	ldr	r2, [r7, #8]
90002014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90002018:	4013      	ands	r3, r2
9000201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000201c:	68fb      	ldr	r3, [r7, #12]
9000201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90002020:	68bb      	ldr	r3, [r7, #8]
90002022:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90002024:	4b06      	ldr	r3, [pc, #24]	; (90002040 <__NVIC_SetPriorityGrouping+0x44>)
90002026:	4313      	orrs	r3, r2
90002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
9000202a:	4a04      	ldr	r2, [pc, #16]	; (9000203c <__NVIC_SetPriorityGrouping+0x40>)
9000202c:	68bb      	ldr	r3, [r7, #8]
9000202e:	60d3      	str	r3, [r2, #12]
}
90002030:	bf00      	nop
90002032:	3714      	adds	r7, #20
90002034:	46bd      	mov	sp, r7
90002036:	f85d 7b04 	ldr.w	r7, [sp], #4
9000203a:	4770      	bx	lr
9000203c:	e000ed00 	.word	0xe000ed00
90002040:	05fa0000 	.word	0x05fa0000

90002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
90002044:	b480      	push	{r7}
90002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90002048:	4b04      	ldr	r3, [pc, #16]	; (9000205c <__NVIC_GetPriorityGrouping+0x18>)
9000204a:	68db      	ldr	r3, [r3, #12]
9000204c:	0a1b      	lsrs	r3, r3, #8
9000204e:	f003 0307 	and.w	r3, r3, #7
}
90002052:	4618      	mov	r0, r3
90002054:	46bd      	mov	sp, r7
90002056:	f85d 7b04 	ldr.w	r7, [sp], #4
9000205a:	4770      	bx	lr
9000205c:	e000ed00 	.word	0xe000ed00

90002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
90002060:	b480      	push	{r7}
90002062:	b083      	sub	sp, #12
90002064:	af00      	add	r7, sp, #0
90002066:	4603      	mov	r3, r0
90002068:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
9000206a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000206e:	2b00      	cmp	r3, #0
90002070:	db0b      	blt.n	9000208a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002072:	88fb      	ldrh	r3, [r7, #6]
90002074:	f003 021f 	and.w	r2, r3, #31
90002078:	4907      	ldr	r1, [pc, #28]	; (90002098 <__NVIC_EnableIRQ+0x38>)
9000207a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000207e:	095b      	lsrs	r3, r3, #5
90002080:	2001      	movs	r0, #1
90002082:	fa00 f202 	lsl.w	r2, r0, r2
90002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
9000208a:	bf00      	nop
9000208c:	370c      	adds	r7, #12
9000208e:	46bd      	mov	sp, r7
90002090:	f85d 7b04 	ldr.w	r7, [sp], #4
90002094:	4770      	bx	lr
90002096:	bf00      	nop
90002098:	e000e100 	.word	0xe000e100

9000209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
9000209c:	b480      	push	{r7}
9000209e:	b083      	sub	sp, #12
900020a0:	af00      	add	r7, sp, #0
900020a2:	4603      	mov	r3, r0
900020a4:	6039      	str	r1, [r7, #0]
900020a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900020a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900020ac:	2b00      	cmp	r3, #0
900020ae:	db0a      	blt.n	900020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900020b0:	683b      	ldr	r3, [r7, #0]
900020b2:	b2da      	uxtb	r2, r3
900020b4:	490c      	ldr	r1, [pc, #48]	; (900020e8 <__NVIC_SetPriority+0x4c>)
900020b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900020ba:	0112      	lsls	r2, r2, #4
900020bc:	b2d2      	uxtb	r2, r2
900020be:	440b      	add	r3, r1
900020c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
900020c4:	e00a      	b.n	900020dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900020c6:	683b      	ldr	r3, [r7, #0]
900020c8:	b2da      	uxtb	r2, r3
900020ca:	4908      	ldr	r1, [pc, #32]	; (900020ec <__NVIC_SetPriority+0x50>)
900020cc:	88fb      	ldrh	r3, [r7, #6]
900020ce:	f003 030f 	and.w	r3, r3, #15
900020d2:	3b04      	subs	r3, #4
900020d4:	0112      	lsls	r2, r2, #4
900020d6:	b2d2      	uxtb	r2, r2
900020d8:	440b      	add	r3, r1
900020da:	761a      	strb	r2, [r3, #24]
}
900020dc:	bf00      	nop
900020de:	370c      	adds	r7, #12
900020e0:	46bd      	mov	sp, r7
900020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
900020e6:	4770      	bx	lr
900020e8:	e000e100 	.word	0xe000e100
900020ec:	e000ed00 	.word	0xe000ed00

900020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
900020f0:	b480      	push	{r7}
900020f2:	b089      	sub	sp, #36	; 0x24
900020f4:	af00      	add	r7, sp, #0
900020f6:	60f8      	str	r0, [r7, #12]
900020f8:	60b9      	str	r1, [r7, #8]
900020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900020fc:	68fb      	ldr	r3, [r7, #12]
900020fe:	f003 0307 	and.w	r3, r3, #7
90002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002104:	69fb      	ldr	r3, [r7, #28]
90002106:	f1c3 0307 	rsb	r3, r3, #7
9000210a:	2b04      	cmp	r3, #4
9000210c:	bf28      	it	cs
9000210e:	2304      	movcs	r3, #4
90002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90002112:	69fb      	ldr	r3, [r7, #28]
90002114:	3304      	adds	r3, #4
90002116:	2b06      	cmp	r3, #6
90002118:	d902      	bls.n	90002120 <NVIC_EncodePriority+0x30>
9000211a:	69fb      	ldr	r3, [r7, #28]
9000211c:	3b03      	subs	r3, #3
9000211e:	e000      	b.n	90002122 <NVIC_EncodePriority+0x32>
90002120:	2300      	movs	r3, #0
90002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002124:	f04f 32ff 	mov.w	r2, #4294967295
90002128:	69bb      	ldr	r3, [r7, #24]
9000212a:	fa02 f303 	lsl.w	r3, r2, r3
9000212e:	43da      	mvns	r2, r3
90002130:	68bb      	ldr	r3, [r7, #8]
90002132:	401a      	ands	r2, r3
90002134:	697b      	ldr	r3, [r7, #20]
90002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002138:	f04f 31ff 	mov.w	r1, #4294967295
9000213c:	697b      	ldr	r3, [r7, #20]
9000213e:	fa01 f303 	lsl.w	r3, r1, r3
90002142:	43d9      	mvns	r1, r3
90002144:	687b      	ldr	r3, [r7, #4]
90002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002148:	4313      	orrs	r3, r2
         );
}
9000214a:	4618      	mov	r0, r3
9000214c:	3724      	adds	r7, #36	; 0x24
9000214e:	46bd      	mov	sp, r7
90002150:	f85d 7b04 	ldr.w	r7, [sp], #4
90002154:	4770      	bx	lr

90002156 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90002156:	b580      	push	{r7, lr}
90002158:	b082      	sub	sp, #8
9000215a:	af00      	add	r7, sp, #0
9000215c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
9000215e:	6878      	ldr	r0, [r7, #4]
90002160:	f7ff ff4c 	bl	90001ffc <__NVIC_SetPriorityGrouping>
}
90002164:	bf00      	nop
90002166:	3708      	adds	r7, #8
90002168:	46bd      	mov	sp, r7
9000216a:	bd80      	pop	{r7, pc}

9000216c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
9000216c:	b580      	push	{r7, lr}
9000216e:	b086      	sub	sp, #24
90002170:	af00      	add	r7, sp, #0
90002172:	4603      	mov	r3, r0
90002174:	60b9      	str	r1, [r7, #8]
90002176:	607a      	str	r2, [r7, #4]
90002178:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
9000217a:	f7ff ff63 	bl	90002044 <__NVIC_GetPriorityGrouping>
9000217e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90002180:	687a      	ldr	r2, [r7, #4]
90002182:	68b9      	ldr	r1, [r7, #8]
90002184:	6978      	ldr	r0, [r7, #20]
90002186:	f7ff ffb3 	bl	900020f0 <NVIC_EncodePriority>
9000218a:	4602      	mov	r2, r0
9000218c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90002190:	4611      	mov	r1, r2
90002192:	4618      	mov	r0, r3
90002194:	f7ff ff82 	bl	9000209c <__NVIC_SetPriority>
}
90002198:	bf00      	nop
9000219a:	3718      	adds	r7, #24
9000219c:	46bd      	mov	sp, r7
9000219e:	bd80      	pop	{r7, pc}

900021a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900021a0:	b580      	push	{r7, lr}
900021a2:	b082      	sub	sp, #8
900021a4:	af00      	add	r7, sp, #0
900021a6:	4603      	mov	r3, r0
900021a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900021aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900021ae:	4618      	mov	r0, r3
900021b0:	f7ff ff56 	bl	90002060 <__NVIC_EnableIRQ>
}
900021b4:	bf00      	nop
900021b6:	3708      	adds	r7, #8
900021b8:	46bd      	mov	sp, r7
900021ba:	bd80      	pop	{r7, pc}

900021bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
900021bc:	b580      	push	{r7, lr}
900021be:	b098      	sub	sp, #96	; 0x60
900021c0:	af00      	add	r7, sp, #0
900021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
900021c4:	4a84      	ldr	r2, [pc, #528]	; (900023d8 <HAL_FDCAN_Init+0x21c>)
900021c6:	f107 030c 	add.w	r3, r7, #12
900021ca:	4611      	mov	r1, r2
900021cc:	224c      	movs	r2, #76	; 0x4c
900021ce:	4618      	mov	r0, r3
900021d0:	f00e ff36 	bl	90011040 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
900021d4:	687b      	ldr	r3, [r7, #4]
900021d6:	2b00      	cmp	r3, #0
900021d8:	d101      	bne.n	900021de <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
900021da:	2301      	movs	r3, #1
900021dc:	e1c6      	b.n	9000256c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
900021de:	687b      	ldr	r3, [r7, #4]
900021e0:	681b      	ldr	r3, [r3, #0]
900021e2:	4a7e      	ldr	r2, [pc, #504]	; (900023dc <HAL_FDCAN_Init+0x220>)
900021e4:	4293      	cmp	r3, r2
900021e6:	d106      	bne.n	900021f6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
900021e8:	687b      	ldr	r3, [r7, #4]
900021ea:	681b      	ldr	r3, [r3, #0]
900021ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
900021f0:	461a      	mov	r2, r3
900021f2:	687b      	ldr	r3, [r7, #4]
900021f4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
900021f6:	687b      	ldr	r3, [r7, #4]
900021f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
900021fc:	b2db      	uxtb	r3, r3
900021fe:	2b00      	cmp	r3, #0
90002200:	d106      	bne.n	90002210 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
90002202:	687b      	ldr	r3, [r7, #4]
90002204:	2200      	movs	r2, #0
90002206:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
9000220a:	6878      	ldr	r0, [r7, #4]
9000220c:	f7fe fab8 	bl	90000780 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
90002210:	687b      	ldr	r3, [r7, #4]
90002212:	681b      	ldr	r3, [r3, #0]
90002214:	699a      	ldr	r2, [r3, #24]
90002216:	687b      	ldr	r3, [r7, #4]
90002218:	681b      	ldr	r3, [r3, #0]
9000221a:	f022 0210 	bic.w	r2, r2, #16
9000221e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
90002220:	f7ff fed4 	bl	90001fcc <HAL_GetTick>
90002224:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
90002226:	e014      	b.n	90002252 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
90002228:	f7ff fed0 	bl	90001fcc <HAL_GetTick>
9000222c:	4602      	mov	r2, r0
9000222e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
90002230:	1ad3      	subs	r3, r2, r3
90002232:	2b0a      	cmp	r3, #10
90002234:	d90d      	bls.n	90002252 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
90002236:	687b      	ldr	r3, [r7, #4]
90002238:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
9000223c:	f043 0201 	orr.w	r2, r3, #1
90002240:	687b      	ldr	r3, [r7, #4]
90002242:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
90002246:	687b      	ldr	r3, [r7, #4]
90002248:	2203      	movs	r2, #3
9000224a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
9000224e:	2301      	movs	r3, #1
90002250:	e18c      	b.n	9000256c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
90002252:	687b      	ldr	r3, [r7, #4]
90002254:	681b      	ldr	r3, [r3, #0]
90002256:	699b      	ldr	r3, [r3, #24]
90002258:	f003 0308 	and.w	r3, r3, #8
9000225c:	2b08      	cmp	r3, #8
9000225e:	d0e3      	beq.n	90002228 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
90002260:	687b      	ldr	r3, [r7, #4]
90002262:	681b      	ldr	r3, [r3, #0]
90002264:	699a      	ldr	r2, [r3, #24]
90002266:	687b      	ldr	r3, [r7, #4]
90002268:	681b      	ldr	r3, [r3, #0]
9000226a:	f042 0201 	orr.w	r2, r2, #1
9000226e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
90002270:	f7ff feac 	bl	90001fcc <HAL_GetTick>
90002274:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
90002276:	e014      	b.n	900022a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
90002278:	f7ff fea8 	bl	90001fcc <HAL_GetTick>
9000227c:	4602      	mov	r2, r0
9000227e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
90002280:	1ad3      	subs	r3, r2, r3
90002282:	2b0a      	cmp	r3, #10
90002284:	d90d      	bls.n	900022a2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
90002286:	687b      	ldr	r3, [r7, #4]
90002288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
9000228c:	f043 0201 	orr.w	r2, r3, #1
90002290:	687b      	ldr	r3, [r7, #4]
90002292:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
90002296:	687b      	ldr	r3, [r7, #4]
90002298:	2203      	movs	r2, #3
9000229a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
9000229e:	2301      	movs	r3, #1
900022a0:	e164      	b.n	9000256c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
900022a2:	687b      	ldr	r3, [r7, #4]
900022a4:	681b      	ldr	r3, [r3, #0]
900022a6:	699b      	ldr	r3, [r3, #24]
900022a8:	f003 0301 	and.w	r3, r3, #1
900022ac:	2b00      	cmp	r3, #0
900022ae:	d0e3      	beq.n	90002278 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
900022b0:	687b      	ldr	r3, [r7, #4]
900022b2:	681b      	ldr	r3, [r3, #0]
900022b4:	699a      	ldr	r2, [r3, #24]
900022b6:	687b      	ldr	r3, [r7, #4]
900022b8:	681b      	ldr	r3, [r3, #0]
900022ba:	f042 0202 	orr.w	r2, r2, #2
900022be:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
900022c0:	687b      	ldr	r3, [r7, #4]
900022c2:	7c1b      	ldrb	r3, [r3, #16]
900022c4:	2b01      	cmp	r3, #1
900022c6:	d108      	bne.n	900022da <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
900022c8:	687b      	ldr	r3, [r7, #4]
900022ca:	681b      	ldr	r3, [r3, #0]
900022cc:	699a      	ldr	r2, [r3, #24]
900022ce:	687b      	ldr	r3, [r7, #4]
900022d0:	681b      	ldr	r3, [r3, #0]
900022d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
900022d6:	619a      	str	r2, [r3, #24]
900022d8:	e007      	b.n	900022ea <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
900022da:	687b      	ldr	r3, [r7, #4]
900022dc:	681b      	ldr	r3, [r3, #0]
900022de:	699a      	ldr	r2, [r3, #24]
900022e0:	687b      	ldr	r3, [r7, #4]
900022e2:	681b      	ldr	r3, [r3, #0]
900022e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900022e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
900022ea:	687b      	ldr	r3, [r7, #4]
900022ec:	7c5b      	ldrb	r3, [r3, #17]
900022ee:	2b01      	cmp	r3, #1
900022f0:	d108      	bne.n	90002304 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
900022f2:	687b      	ldr	r3, [r7, #4]
900022f4:	681b      	ldr	r3, [r3, #0]
900022f6:	699a      	ldr	r2, [r3, #24]
900022f8:	687b      	ldr	r3, [r7, #4]
900022fa:	681b      	ldr	r3, [r3, #0]
900022fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90002300:	619a      	str	r2, [r3, #24]
90002302:	e007      	b.n	90002314 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
90002304:	687b      	ldr	r3, [r7, #4]
90002306:	681b      	ldr	r3, [r3, #0]
90002308:	699a      	ldr	r2, [r3, #24]
9000230a:	687b      	ldr	r3, [r7, #4]
9000230c:	681b      	ldr	r3, [r3, #0]
9000230e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
90002312:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
90002314:	687b      	ldr	r3, [r7, #4]
90002316:	7c9b      	ldrb	r3, [r3, #18]
90002318:	2b01      	cmp	r3, #1
9000231a:	d108      	bne.n	9000232e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
9000231c:	687b      	ldr	r3, [r7, #4]
9000231e:	681b      	ldr	r3, [r3, #0]
90002320:	699a      	ldr	r2, [r3, #24]
90002322:	687b      	ldr	r3, [r7, #4]
90002324:	681b      	ldr	r3, [r3, #0]
90002326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
9000232a:	619a      	str	r2, [r3, #24]
9000232c:	e007      	b.n	9000233e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
9000232e:	687b      	ldr	r3, [r7, #4]
90002330:	681b      	ldr	r3, [r3, #0]
90002332:	699a      	ldr	r2, [r3, #24]
90002334:	687b      	ldr	r3, [r7, #4]
90002336:	681b      	ldr	r3, [r3, #0]
90002338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000233c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
9000233e:	687b      	ldr	r3, [r7, #4]
90002340:	681b      	ldr	r3, [r3, #0]
90002342:	699b      	ldr	r3, [r3, #24]
90002344:	f423 7140 	bic.w	r1, r3, #768	; 0x300
90002348:	687b      	ldr	r3, [r7, #4]
9000234a:	689a      	ldr	r2, [r3, #8]
9000234c:	687b      	ldr	r3, [r7, #4]
9000234e:	681b      	ldr	r3, [r3, #0]
90002350:	430a      	orrs	r2, r1
90002352:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
90002354:	687b      	ldr	r3, [r7, #4]
90002356:	681b      	ldr	r3, [r3, #0]
90002358:	699a      	ldr	r2, [r3, #24]
9000235a:	687b      	ldr	r3, [r7, #4]
9000235c:	681b      	ldr	r3, [r3, #0]
9000235e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
90002362:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
90002364:	687b      	ldr	r3, [r7, #4]
90002366:	681b      	ldr	r3, [r3, #0]
90002368:	691a      	ldr	r2, [r3, #16]
9000236a:	687b      	ldr	r3, [r7, #4]
9000236c:	681b      	ldr	r3, [r3, #0]
9000236e:	f022 0210 	bic.w	r2, r2, #16
90002372:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
90002374:	687b      	ldr	r3, [r7, #4]
90002376:	68db      	ldr	r3, [r3, #12]
90002378:	2b01      	cmp	r3, #1
9000237a:	d108      	bne.n	9000238e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
9000237c:	687b      	ldr	r3, [r7, #4]
9000237e:	681b      	ldr	r3, [r3, #0]
90002380:	699a      	ldr	r2, [r3, #24]
90002382:	687b      	ldr	r3, [r7, #4]
90002384:	681b      	ldr	r3, [r3, #0]
90002386:	f042 0204 	orr.w	r2, r2, #4
9000238a:	619a      	str	r2, [r3, #24]
9000238c:	e030      	b.n	900023f0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
9000238e:	687b      	ldr	r3, [r7, #4]
90002390:	68db      	ldr	r3, [r3, #12]
90002392:	2b00      	cmp	r3, #0
90002394:	d02c      	beq.n	900023f0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
90002396:	687b      	ldr	r3, [r7, #4]
90002398:	68db      	ldr	r3, [r3, #12]
9000239a:	2b02      	cmp	r3, #2
9000239c:	d020      	beq.n	900023e0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
9000239e:	687b      	ldr	r3, [r7, #4]
900023a0:	681b      	ldr	r3, [r3, #0]
900023a2:	699a      	ldr	r2, [r3, #24]
900023a4:	687b      	ldr	r3, [r7, #4]
900023a6:	681b      	ldr	r3, [r3, #0]
900023a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900023ac:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
900023ae:	687b      	ldr	r3, [r7, #4]
900023b0:	681b      	ldr	r3, [r3, #0]
900023b2:	691a      	ldr	r2, [r3, #16]
900023b4:	687b      	ldr	r3, [r7, #4]
900023b6:	681b      	ldr	r3, [r3, #0]
900023b8:	f042 0210 	orr.w	r2, r2, #16
900023bc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
900023be:	687b      	ldr	r3, [r7, #4]
900023c0:	68db      	ldr	r3, [r3, #12]
900023c2:	2b03      	cmp	r3, #3
900023c4:	d114      	bne.n	900023f0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
900023c6:	687b      	ldr	r3, [r7, #4]
900023c8:	681b      	ldr	r3, [r3, #0]
900023ca:	699a      	ldr	r2, [r3, #24]
900023cc:	687b      	ldr	r3, [r7, #4]
900023ce:	681b      	ldr	r3, [r3, #0]
900023d0:	f042 0220 	orr.w	r2, r2, #32
900023d4:	619a      	str	r2, [r3, #24]
900023d6:	e00b      	b.n	900023f0 <HAL_FDCAN_Init+0x234>
900023d8:	90013d98 	.word	0x90013d98
900023dc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
900023e0:	687b      	ldr	r3, [r7, #4]
900023e2:	681b      	ldr	r3, [r3, #0]
900023e4:	699a      	ldr	r2, [r3, #24]
900023e6:	687b      	ldr	r3, [r7, #4]
900023e8:	681b      	ldr	r3, [r3, #0]
900023ea:	f042 0220 	orr.w	r2, r2, #32
900023ee:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
900023f0:	687b      	ldr	r3, [r7, #4]
900023f2:	699b      	ldr	r3, [r3, #24]
900023f4:	3b01      	subs	r3, #1
900023f6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
900023f8:	687b      	ldr	r3, [r7, #4]
900023fa:	69db      	ldr	r3, [r3, #28]
900023fc:	3b01      	subs	r3, #1
900023fe:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
90002400:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
90002402:	687b      	ldr	r3, [r7, #4]
90002404:	6a1b      	ldr	r3, [r3, #32]
90002406:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
90002408:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
9000240c:	687b      	ldr	r3, [r7, #4]
9000240e:	695b      	ldr	r3, [r3, #20]
90002410:	3b01      	subs	r3, #1
90002412:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
90002414:	687b      	ldr	r3, [r7, #4]
90002416:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
90002418:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
9000241a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
9000241c:	687b      	ldr	r3, [r7, #4]
9000241e:	689b      	ldr	r3, [r3, #8]
90002420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90002424:	d115      	bne.n	90002452 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
90002426:	687b      	ldr	r3, [r7, #4]
90002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000242a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
9000242c:	687b      	ldr	r3, [r7, #4]
9000242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002430:	3b01      	subs	r3, #1
90002432:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
90002434:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
90002436:	687b      	ldr	r3, [r7, #4]
90002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000243a:	3b01      	subs	r3, #1
9000243c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
9000243e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
90002442:	687b      	ldr	r3, [r7, #4]
90002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002446:	3b01      	subs	r3, #1
90002448:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
9000244a:	687b      	ldr	r3, [r7, #4]
9000244c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
9000244e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
90002450:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
90002452:	687b      	ldr	r3, [r7, #4]
90002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90002456:	2b00      	cmp	r3, #0
90002458:	d00a      	beq.n	90002470 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
9000245a:	687b      	ldr	r3, [r7, #4]
9000245c:	681b      	ldr	r3, [r3, #0]
9000245e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
90002462:	687b      	ldr	r3, [r7, #4]
90002464:	6e5a      	ldr	r2, [r3, #100]	; 0x64
90002466:	687b      	ldr	r3, [r7, #4]
90002468:	681b      	ldr	r3, [r3, #0]
9000246a:	430a      	orrs	r2, r1
9000246c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
90002470:	687b      	ldr	r3, [r7, #4]
90002472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
90002474:	687b      	ldr	r3, [r7, #4]
90002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90002478:	4413      	add	r3, r2
9000247a:	2b00      	cmp	r3, #0
9000247c:	d011      	beq.n	900024a2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
9000247e:	687b      	ldr	r3, [r7, #4]
90002480:	681b      	ldr	r3, [r3, #0]
90002482:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
90002486:	f023 0107 	bic.w	r1, r3, #7
9000248a:	687b      	ldr	r3, [r7, #4]
9000248c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000248e:	009b      	lsls	r3, r3, #2
90002490:	3360      	adds	r3, #96	; 0x60
90002492:	443b      	add	r3, r7
90002494:	f853 2c54 	ldr.w	r2, [r3, #-84]
90002498:	687b      	ldr	r3, [r7, #4]
9000249a:	681b      	ldr	r3, [r3, #0]
9000249c:	430a      	orrs	r2, r1
9000249e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
900024a2:	687b      	ldr	r3, [r7, #4]
900024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900024a6:	2b00      	cmp	r3, #0
900024a8:	d011      	beq.n	900024ce <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
900024aa:	687b      	ldr	r3, [r7, #4]
900024ac:	681b      	ldr	r3, [r3, #0]
900024ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
900024b2:	f023 0107 	bic.w	r1, r3, #7
900024b6:	687b      	ldr	r3, [r7, #4]
900024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900024ba:	009b      	lsls	r3, r3, #2
900024bc:	3360      	adds	r3, #96	; 0x60
900024be:	443b      	add	r3, r7
900024c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
900024c4:	687b      	ldr	r3, [r7, #4]
900024c6:	681b      	ldr	r3, [r3, #0]
900024c8:	430a      	orrs	r2, r1
900024ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
900024ce:	687b      	ldr	r3, [r7, #4]
900024d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900024d2:	2b00      	cmp	r3, #0
900024d4:	d012      	beq.n	900024fc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
900024d6:	687b      	ldr	r3, [r7, #4]
900024d8:	681b      	ldr	r3, [r3, #0]
900024da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
900024de:	f023 0170 	bic.w	r1, r3, #112	; 0x70
900024e2:	687b      	ldr	r3, [r7, #4]
900024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900024e6:	009b      	lsls	r3, r3, #2
900024e8:	3360      	adds	r3, #96	; 0x60
900024ea:	443b      	add	r3, r7
900024ec:	f853 3c54 	ldr.w	r3, [r3, #-84]
900024f0:	011a      	lsls	r2, r3, #4
900024f2:	687b      	ldr	r3, [r7, #4]
900024f4:	681b      	ldr	r3, [r3, #0]
900024f6:	430a      	orrs	r2, r1
900024f8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
900024fc:	687b      	ldr	r3, [r7, #4]
900024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002500:	2b00      	cmp	r3, #0
90002502:	d012      	beq.n	9000252a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
90002504:	687b      	ldr	r3, [r7, #4]
90002506:	681b      	ldr	r3, [r3, #0]
90002508:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
9000250c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
90002510:	687b      	ldr	r3, [r7, #4]
90002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002514:	009b      	lsls	r3, r3, #2
90002516:	3360      	adds	r3, #96	; 0x60
90002518:	443b      	add	r3, r7
9000251a:	f853 3c54 	ldr.w	r3, [r3, #-84]
9000251e:	021a      	lsls	r2, r3, #8
90002520:	687b      	ldr	r3, [r7, #4]
90002522:	681b      	ldr	r3, [r3, #0]
90002524:	430a      	orrs	r2, r1
90002526:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
9000252a:	687b      	ldr	r3, [r7, #4]
9000252c:	681b      	ldr	r3, [r3, #0]
9000252e:	4a11      	ldr	r2, [pc, #68]	; (90002574 <HAL_FDCAN_Init+0x3b8>)
90002530:	4293      	cmp	r3, r2
90002532:	d107      	bne.n	90002544 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
90002534:	687b      	ldr	r3, [r7, #4]
90002536:	685b      	ldr	r3, [r3, #4]
90002538:	689a      	ldr	r2, [r3, #8]
9000253a:	687b      	ldr	r3, [r7, #4]
9000253c:	685b      	ldr	r3, [r3, #4]
9000253e:	f022 0203 	bic.w	r2, r2, #3
90002542:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
90002544:	687b      	ldr	r3, [r7, #4]
90002546:	2200      	movs	r2, #0
90002548:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
9000254c:	687b      	ldr	r3, [r7, #4]
9000254e:	2200      	movs	r2, #0
90002550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
90002554:	687b      	ldr	r3, [r7, #4]
90002556:	2201      	movs	r2, #1
90002558:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
9000255c:	6878      	ldr	r0, [r7, #4]
9000255e:	f000 fe61 	bl	90003224 <FDCAN_CalcultateRamBlockAddresses>
90002562:	4603      	mov	r3, r0
90002564:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
90002568:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
9000256c:	4618      	mov	r0, r3
9000256e:	3760      	adds	r7, #96	; 0x60
90002570:	46bd      	mov	sp, r7
90002572:	bd80      	pop	{r7, pc}
90002574:	4000a000 	.word	0x4000a000

90002578 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
90002578:	b480      	push	{r7}
9000257a:	b087      	sub	sp, #28
9000257c:	af00      	add	r7, sp, #0
9000257e:	6078      	str	r0, [r7, #4]
90002580:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
90002582:	687b      	ldr	r3, [r7, #4]
90002584:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
90002588:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
9000258a:	7bfb      	ldrb	r3, [r7, #15]
9000258c:	2b01      	cmp	r3, #1
9000258e:	d002      	beq.n	90002596 <HAL_FDCAN_ConfigFilter+0x1e>
90002590:	7bfb      	ldrb	r3, [r7, #15]
90002592:	2b02      	cmp	r3, #2
90002594:	d157      	bne.n	90002646 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
90002596:	683b      	ldr	r3, [r7, #0]
90002598:	681b      	ldr	r3, [r3, #0]
9000259a:	2b00      	cmp	r3, #0
9000259c:	d12b      	bne.n	900025f6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
9000259e:	683b      	ldr	r3, [r7, #0]
900025a0:	68db      	ldr	r3, [r3, #12]
900025a2:	2b07      	cmp	r3, #7
900025a4:	d10d      	bne.n	900025c2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
900025a6:	683b      	ldr	r3, [r7, #0]
900025a8:	691b      	ldr	r3, [r3, #16]
900025aa:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
900025ac:	683b      	ldr	r3, [r7, #0]
900025ae:	69db      	ldr	r3, [r3, #28]
900025b0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
900025b2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
900025b4:	683b      	ldr	r3, [r7, #0]
900025b6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
900025b8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
900025ba:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
900025be:	617b      	str	r3, [r7, #20]
900025c0:	e00e      	b.n	900025e0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
900025c2:	683b      	ldr	r3, [r7, #0]
900025c4:	689b      	ldr	r3, [r3, #8]
900025c6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
900025c8:	683b      	ldr	r3, [r7, #0]
900025ca:	68db      	ldr	r3, [r3, #12]
900025cc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
900025ce:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
900025d0:	683b      	ldr	r3, [r7, #0]
900025d2:	691b      	ldr	r3, [r3, #16]
900025d4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
900025d6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
900025d8:	683b      	ldr	r3, [r7, #0]
900025da:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
900025dc:	4313      	orrs	r3, r2
900025de:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
900025e0:	687b      	ldr	r3, [r7, #4]
900025e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
900025e4:	683b      	ldr	r3, [r7, #0]
900025e6:	685b      	ldr	r3, [r3, #4]
900025e8:	009b      	lsls	r3, r3, #2
900025ea:	4413      	add	r3, r2
900025ec:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
900025ee:	68bb      	ldr	r3, [r7, #8]
900025f0:	697a      	ldr	r2, [r7, #20]
900025f2:	601a      	str	r2, [r3, #0]
900025f4:	e025      	b.n	90002642 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
900025f6:	683b      	ldr	r3, [r7, #0]
900025f8:	68db      	ldr	r3, [r3, #12]
900025fa:	075a      	lsls	r2, r3, #29
900025fc:	683b      	ldr	r3, [r7, #0]
900025fe:	691b      	ldr	r3, [r3, #16]
90002600:	4313      	orrs	r3, r2
90002602:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
90002604:	683b      	ldr	r3, [r7, #0]
90002606:	68db      	ldr	r3, [r3, #12]
90002608:	2b07      	cmp	r3, #7
9000260a:	d103      	bne.n	90002614 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
9000260c:	683b      	ldr	r3, [r7, #0]
9000260e:	699b      	ldr	r3, [r3, #24]
90002610:	613b      	str	r3, [r7, #16]
90002612:	e006      	b.n	90002622 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
90002614:	683b      	ldr	r3, [r7, #0]
90002616:	689b      	ldr	r3, [r3, #8]
90002618:	079a      	lsls	r2, r3, #30
9000261a:	683b      	ldr	r3, [r7, #0]
9000261c:	695b      	ldr	r3, [r3, #20]
9000261e:	4313      	orrs	r3, r2
90002620:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
90002622:	687b      	ldr	r3, [r7, #4]
90002624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90002626:	683b      	ldr	r3, [r7, #0]
90002628:	685b      	ldr	r3, [r3, #4]
9000262a:	00db      	lsls	r3, r3, #3
9000262c:	4413      	add	r3, r2
9000262e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
90002630:	68bb      	ldr	r3, [r7, #8]
90002632:	697a      	ldr	r2, [r7, #20]
90002634:	601a      	str	r2, [r3, #0]
      FilterAddress++;
90002636:	68bb      	ldr	r3, [r7, #8]
90002638:	3304      	adds	r3, #4
9000263a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
9000263c:	68bb      	ldr	r3, [r7, #8]
9000263e:	693a      	ldr	r2, [r7, #16]
90002640:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
90002642:	2300      	movs	r3, #0
90002644:	e008      	b.n	90002658 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
90002646:	687b      	ldr	r3, [r7, #4]
90002648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
9000264c:	f043 0202 	orr.w	r2, r3, #2
90002650:	687b      	ldr	r3, [r7, #4]
90002652:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
90002656:	2301      	movs	r3, #1
  }
}
90002658:	4618      	mov	r0, r3
9000265a:	371c      	adds	r7, #28
9000265c:	46bd      	mov	sp, r7
9000265e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002662:	4770      	bx	lr

90002664 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
90002664:	b480      	push	{r7}
90002666:	b085      	sub	sp, #20
90002668:	af00      	add	r7, sp, #0
9000266a:	60f8      	str	r0, [r7, #12]
9000266c:	60b9      	str	r1, [r7, #8]
9000266e:	607a      	str	r2, [r7, #4]
90002670:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
90002672:	68fb      	ldr	r3, [r7, #12]
90002674:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
90002678:	b2db      	uxtb	r3, r3
9000267a:	2b01      	cmp	r3, #1
9000267c:	d110      	bne.n	900026a0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
9000267e:	68bb      	ldr	r3, [r7, #8]
90002680:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
90002682:	687b      	ldr	r3, [r7, #4]
90002684:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
90002686:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
90002688:	683b      	ldr	r3, [r7, #0]
9000268a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
9000268c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
90002690:	68fb      	ldr	r3, [r7, #12]
90002692:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
90002694:	69ba      	ldr	r2, [r7, #24]
90002696:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
90002698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
9000269c:	2300      	movs	r3, #0
9000269e:	e008      	b.n	900026b2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
900026a0:	68fb      	ldr	r3, [r7, #12]
900026a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900026a6:	f043 0204 	orr.w	r2, r3, #4
900026aa:	68fb      	ldr	r3, [r7, #12]
900026ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
900026b0:	2301      	movs	r3, #1
  }
}
900026b2:	4618      	mov	r0, r3
900026b4:	3714      	adds	r7, #20
900026b6:	46bd      	mov	sp, r7
900026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900026bc:	4770      	bx	lr

900026be <HAL_FDCAN_ConfigTxDelayCompensation>:
  * @param  TdcFilter Transmitter Delay Compensation Filter Window Length.
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset, uint32_t TdcFilter)
{
900026be:	b480      	push	{r7}
900026c0:	b085      	sub	sp, #20
900026c2:	af00      	add	r7, sp, #0
900026c4:	60f8      	str	r0, [r7, #12]
900026c6:	60b9      	str	r1, [r7, #8]
900026c8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
900026ca:	68fb      	ldr	r3, [r7, #12]
900026cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
900026d0:	b2db      	uxtb	r3, r3
900026d2:	2b01      	cmp	r3, #1
900026d4:	d108      	bne.n	900026e8 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
900026d6:	68bb      	ldr	r3, [r7, #8]
900026d8:	0219      	lsls	r1, r3, #8
900026da:	68fb      	ldr	r3, [r7, #12]
900026dc:	681b      	ldr	r3, [r3, #0]
900026de:	687a      	ldr	r2, [r7, #4]
900026e0:	430a      	orrs	r2, r1
900026e2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
900026e4:	2300      	movs	r3, #0
900026e6:	e008      	b.n	900026fa <HAL_FDCAN_ConfigTxDelayCompensation+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
900026e8:	68fb      	ldr	r3, [r7, #12]
900026ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900026ee:	f043 0204 	orr.w	r2, r3, #4
900026f2:	68fb      	ldr	r3, [r7, #12]
900026f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
900026f8:	2301      	movs	r3, #1
  }
}
900026fa:	4618      	mov	r0, r3
900026fc:	3714      	adds	r7, #20
900026fe:	46bd      	mov	sp, r7
90002700:	f85d 7b04 	ldr.w	r7, [sp], #4
90002704:	4770      	bx	lr

90002706 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
90002706:	b480      	push	{r7}
90002708:	b083      	sub	sp, #12
9000270a:	af00      	add	r7, sp, #0
9000270c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
9000270e:	687b      	ldr	r3, [r7, #4]
90002710:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
90002714:	b2db      	uxtb	r3, r3
90002716:	2b01      	cmp	r3, #1
90002718:	d109      	bne.n	9000272e <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
9000271a:	687b      	ldr	r3, [r7, #4]
9000271c:	681b      	ldr	r3, [r3, #0]
9000271e:	68da      	ldr	r2, [r3, #12]
90002720:	687b      	ldr	r3, [r7, #4]
90002722:	681b      	ldr	r3, [r3, #0]
90002724:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
90002728:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
9000272a:	2300      	movs	r3, #0
9000272c:	e008      	b.n	90002740 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
9000272e:	687b      	ldr	r3, [r7, #4]
90002730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90002734:	f043 0204 	orr.w	r2, r3, #4
90002738:	687b      	ldr	r3, [r7, #4]
9000273a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
9000273e:	2301      	movs	r3, #1
  }
}
90002740:	4618      	mov	r0, r3
90002742:	370c      	adds	r7, #12
90002744:	46bd      	mov	sp, r7
90002746:	f85d 7b04 	ldr.w	r7, [sp], #4
9000274a:	4770      	bx	lr

9000274c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
9000274c:	b480      	push	{r7}
9000274e:	b083      	sub	sp, #12
90002750:	af00      	add	r7, sp, #0
90002752:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
90002754:	687b      	ldr	r3, [r7, #4]
90002756:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000275a:	b2db      	uxtb	r3, r3
9000275c:	2b01      	cmp	r3, #1
9000275e:	d111      	bne.n	90002784 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
90002760:	687b      	ldr	r3, [r7, #4]
90002762:	2202      	movs	r2, #2
90002764:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
90002768:	687b      	ldr	r3, [r7, #4]
9000276a:	681b      	ldr	r3, [r3, #0]
9000276c:	699a      	ldr	r2, [r3, #24]
9000276e:	687b      	ldr	r3, [r7, #4]
90002770:	681b      	ldr	r3, [r3, #0]
90002772:	f022 0201 	bic.w	r2, r2, #1
90002776:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
90002778:	687b      	ldr	r3, [r7, #4]
9000277a:	2200      	movs	r2, #0
9000277c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
90002780:	2300      	movs	r3, #0
90002782:	e008      	b.n	90002796 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
90002784:	687b      	ldr	r3, [r7, #4]
90002786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
9000278a:	f043 0204 	orr.w	r2, r3, #4
9000278e:	687b      	ldr	r3, [r7, #4]
90002790:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
90002794:	2301      	movs	r3, #1
  }
}
90002796:	4618      	mov	r0, r3
90002798:	370c      	adds	r7, #12
9000279a:	46bd      	mov	sp, r7
9000279c:	f85d 7b04 	ldr.w	r7, [sp], #4
900027a0:	4770      	bx	lr

900027a2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
900027a2:	b580      	push	{r7, lr}
900027a4:	b086      	sub	sp, #24
900027a6:	af00      	add	r7, sp, #0
900027a8:	60f8      	str	r0, [r7, #12]
900027aa:	60b9      	str	r1, [r7, #8]
900027ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
900027ae:	68fb      	ldr	r3, [r7, #12]
900027b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
900027b4:	b2db      	uxtb	r3, r3
900027b6:	2b02      	cmp	r3, #2
900027b8:	d141      	bne.n	9000283e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
900027ba:	68fb      	ldr	r3, [r7, #12]
900027bc:	681b      	ldr	r3, [r3, #0]
900027be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900027c2:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
900027c6:	2b00      	cmp	r3, #0
900027c8:	d109      	bne.n	900027de <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
900027ca:	68fb      	ldr	r3, [r7, #12]
900027cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900027d0:	f043 0220 	orr.w	r2, r3, #32
900027d4:	68fb      	ldr	r3, [r7, #12]
900027d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
900027da:	2301      	movs	r3, #1
900027dc:	e038      	b.n	90002850 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
900027de:	68fb      	ldr	r3, [r7, #12]
900027e0:	681b      	ldr	r3, [r3, #0]
900027e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
900027e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900027ea:	2b00      	cmp	r3, #0
900027ec:	d009      	beq.n	90002802 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
900027ee:	68fb      	ldr	r3, [r7, #12]
900027f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900027f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
900027f8:	68fb      	ldr	r3, [r7, #12]
900027fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
900027fe:	2301      	movs	r3, #1
90002800:	e026      	b.n	90002850 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
90002802:	68fb      	ldr	r3, [r7, #12]
90002804:	681b      	ldr	r3, [r3, #0]
90002806:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
9000280a:	0c1b      	lsrs	r3, r3, #16
9000280c:	f003 031f 	and.w	r3, r3, #31
90002810:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
90002812:	697b      	ldr	r3, [r7, #20]
90002814:	687a      	ldr	r2, [r7, #4]
90002816:	68b9      	ldr	r1, [r7, #8]
90002818:	68f8      	ldr	r0, [r7, #12]
9000281a:	f000 fe89 	bl	90003530 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
9000281e:	68fb      	ldr	r3, [r7, #12]
90002820:	681b      	ldr	r3, [r3, #0]
90002822:	2101      	movs	r1, #1
90002824:	697a      	ldr	r2, [r7, #20]
90002826:	fa01 f202 	lsl.w	r2, r1, r2
9000282a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
9000282e:	2201      	movs	r2, #1
90002830:	697b      	ldr	r3, [r7, #20]
90002832:	409a      	lsls	r2, r3
90002834:	68fb      	ldr	r3, [r7, #12]
90002836:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
9000283a:	2300      	movs	r3, #0
9000283c:	e008      	b.n	90002850 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
9000283e:	68fb      	ldr	r3, [r7, #12]
90002840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90002844:	f043 0208 	orr.w	r2, r3, #8
90002848:	68fb      	ldr	r3, [r7, #12]
9000284a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
9000284e:	2301      	movs	r3, #1
  }
}
90002850:	4618      	mov	r0, r3
90002852:	3718      	adds	r7, #24
90002854:	46bd      	mov	sp, r7
90002856:	bd80      	pop	{r7, pc}

90002858 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
90002858:	b480      	push	{r7}
9000285a:	b08b      	sub	sp, #44	; 0x2c
9000285c:	af00      	add	r7, sp, #0
9000285e:	60f8      	str	r0, [r7, #12]
90002860:	60b9      	str	r1, [r7, #8]
90002862:	607a      	str	r2, [r7, #4]
90002864:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
90002866:	2300      	movs	r3, #0
90002868:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
9000286a:	68fb      	ldr	r3, [r7, #12]
9000286c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
90002870:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
90002872:	7efb      	ldrb	r3, [r7, #27]
90002874:	2b02      	cmp	r3, #2
90002876:	f040 814b 	bne.w	90002b10 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
9000287a:	68bb      	ldr	r3, [r7, #8]
9000287c:	2b40      	cmp	r3, #64	; 0x40
9000287e:	d14d      	bne.n	9000291c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
90002880:	68fb      	ldr	r3, [r7, #12]
90002882:	681b      	ldr	r3, [r3, #0]
90002884:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90002888:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
9000288c:	2b00      	cmp	r3, #0
9000288e:	d109      	bne.n	900028a4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
90002890:	68fb      	ldr	r3, [r7, #12]
90002892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90002896:	f043 0220 	orr.w	r2, r3, #32
9000289a:	68fb      	ldr	r3, [r7, #12]
9000289c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
900028a0:	2301      	movs	r3, #1
900028a2:	e13e      	b.n	90002b22 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
900028a4:	68fb      	ldr	r3, [r7, #12]
900028a6:	681b      	ldr	r3, [r3, #0]
900028a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900028ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900028b0:	2b00      	cmp	r3, #0
900028b2:	d109      	bne.n	900028c8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
900028b4:	68fb      	ldr	r3, [r7, #12]
900028b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900028ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
900028be:	68fb      	ldr	r3, [r7, #12]
900028c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
900028c4:	2301      	movs	r3, #1
900028c6:	e12c      	b.n	90002b22 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
900028c8:	68fb      	ldr	r3, [r7, #12]
900028ca:	681b      	ldr	r3, [r3, #0]
900028cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900028d0:	0e1b      	lsrs	r3, r3, #24
900028d2:	f003 0301 	and.w	r3, r3, #1
900028d6:	2b01      	cmp	r3, #1
900028d8:	d10b      	bne.n	900028f2 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
900028da:	68fb      	ldr	r3, [r7, #12]
900028dc:	681b      	ldr	r3, [r3, #0]
900028de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
900028e2:	0fdb      	lsrs	r3, r3, #31
900028e4:	f003 0301 	and.w	r3, r3, #1
900028e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
900028ec:	d101      	bne.n	900028f2 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
900028ee:	2301      	movs	r3, #1
900028f0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
900028f2:	68fb      	ldr	r3, [r7, #12]
900028f4:	681b      	ldr	r3, [r3, #0]
900028f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900028fa:	0a1b      	lsrs	r3, r3, #8
900028fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90002900:	69fa      	ldr	r2, [r7, #28]
90002902:	4413      	add	r3, r2
90002904:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
90002906:	68fb      	ldr	r3, [r7, #12]
90002908:	6f5a      	ldr	r2, [r3, #116]	; 0x74
9000290a:	68fb      	ldr	r3, [r7, #12]
9000290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000290e:	69f9      	ldr	r1, [r7, #28]
90002910:	fb01 f303 	mul.w	r3, r1, r3
90002914:	009b      	lsls	r3, r3, #2
90002916:	4413      	add	r3, r2
90002918:	627b      	str	r3, [r7, #36]	; 0x24
9000291a:	e069      	b.n	900029f0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
9000291c:	68bb      	ldr	r3, [r7, #8]
9000291e:	2b41      	cmp	r3, #65	; 0x41
90002920:	d14d      	bne.n	900029be <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
90002922:	68fb      	ldr	r3, [r7, #12]
90002924:	681b      	ldr	r3, [r3, #0]
90002926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000292a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
9000292e:	2b00      	cmp	r3, #0
90002930:	d109      	bne.n	90002946 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
90002932:	68fb      	ldr	r3, [r7, #12]
90002934:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90002938:	f043 0220 	orr.w	r2, r3, #32
9000293c:	68fb      	ldr	r3, [r7, #12]
9000293e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
90002942:	2301      	movs	r3, #1
90002944:	e0ed      	b.n	90002b22 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
90002946:	68fb      	ldr	r3, [r7, #12]
90002948:	681b      	ldr	r3, [r3, #0]
9000294a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9000294e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90002952:	2b00      	cmp	r3, #0
90002954:	d109      	bne.n	9000296a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
90002956:	68fb      	ldr	r3, [r7, #12]
90002958:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
9000295c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
90002960:	68fb      	ldr	r3, [r7, #12]
90002962:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
90002966:	2301      	movs	r3, #1
90002968:	e0db      	b.n	90002b22 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
9000296a:	68fb      	ldr	r3, [r7, #12]
9000296c:	681b      	ldr	r3, [r3, #0]
9000296e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90002972:	0e1b      	lsrs	r3, r3, #24
90002974:	f003 0301 	and.w	r3, r3, #1
90002978:	2b01      	cmp	r3, #1
9000297a:	d10b      	bne.n	90002994 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
9000297c:	68fb      	ldr	r3, [r7, #12]
9000297e:	681b      	ldr	r3, [r3, #0]
90002980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002984:	0fdb      	lsrs	r3, r3, #31
90002986:	f003 0301 	and.w	r3, r3, #1
9000298a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
9000298e:	d101      	bne.n	90002994 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
90002990:	2301      	movs	r3, #1
90002992:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
90002994:	68fb      	ldr	r3, [r7, #12]
90002996:	681b      	ldr	r3, [r3, #0]
90002998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9000299c:	0a1b      	lsrs	r3, r3, #8
9000299e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900029a2:	69fa      	ldr	r2, [r7, #28]
900029a4:	4413      	add	r3, r2
900029a6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
900029a8:	68fb      	ldr	r3, [r7, #12]
900029aa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
900029ac:	68fb      	ldr	r3, [r7, #12]
900029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900029b0:	69f9      	ldr	r1, [r7, #28]
900029b2:	fb01 f303 	mul.w	r3, r1, r3
900029b6:	009b      	lsls	r3, r3, #2
900029b8:	4413      	add	r3, r2
900029ba:	627b      	str	r3, [r7, #36]	; 0x24
900029bc:	e018      	b.n	900029f0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
900029be:	68fb      	ldr	r3, [r7, #12]
900029c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900029c2:	68ba      	ldr	r2, [r7, #8]
900029c4:	429a      	cmp	r2, r3
900029c6:	d309      	bcc.n	900029dc <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
900029c8:	68fb      	ldr	r3, [r7, #12]
900029ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900029ce:	f043 0220 	orr.w	r2, r3, #32
900029d2:	68fb      	ldr	r3, [r7, #12]
900029d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
900029d8:	2301      	movs	r3, #1
900029da:	e0a2      	b.n	90002b22 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
900029dc:	68fb      	ldr	r3, [r7, #12]
900029de:	6fda      	ldr	r2, [r3, #124]	; 0x7c
900029e0:	68fb      	ldr	r3, [r7, #12]
900029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900029e4:	68b9      	ldr	r1, [r7, #8]
900029e6:	fb01 f303 	mul.w	r3, r1, r3
900029ea:	009b      	lsls	r3, r3, #2
900029ec:	4413      	add	r3, r2
900029ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
900029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900029f2:	681b      	ldr	r3, [r3, #0]
900029f4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
900029f8:	687b      	ldr	r3, [r7, #4]
900029fa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
900029fc:	687b      	ldr	r3, [r7, #4]
900029fe:	685b      	ldr	r3, [r3, #4]
90002a00:	2b00      	cmp	r3, #0
90002a02:	d107      	bne.n	90002a14 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
90002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a06:	681b      	ldr	r3, [r3, #0]
90002a08:	0c9b      	lsrs	r3, r3, #18
90002a0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
90002a0e:	687b      	ldr	r3, [r7, #4]
90002a10:	601a      	str	r2, [r3, #0]
90002a12:	e005      	b.n	90002a20 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
90002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a16:	681b      	ldr	r3, [r3, #0]
90002a18:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
90002a1c:	687b      	ldr	r3, [r7, #4]
90002a1e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
90002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a22:	681b      	ldr	r3, [r3, #0]
90002a24:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
90002a28:	687b      	ldr	r3, [r7, #4]
90002a2a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
90002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a2e:	681b      	ldr	r3, [r3, #0]
90002a30:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
90002a34:	687b      	ldr	r3, [r7, #4]
90002a36:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
90002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a3a:	3304      	adds	r3, #4
90002a3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
90002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a40:	681b      	ldr	r3, [r3, #0]
90002a42:	b29a      	uxth	r2, r3
90002a44:	687b      	ldr	r3, [r7, #4]
90002a46:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
90002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a4a:	681b      	ldr	r3, [r3, #0]
90002a4c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
90002a50:	687b      	ldr	r3, [r7, #4]
90002a52:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
90002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a56:	681b      	ldr	r3, [r3, #0]
90002a58:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
90002a5c:	687b      	ldr	r3, [r7, #4]
90002a5e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
90002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a62:	681b      	ldr	r3, [r3, #0]
90002a64:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
90002a68:	687b      	ldr	r3, [r7, #4]
90002a6a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
90002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a6e:	681b      	ldr	r3, [r3, #0]
90002a70:	0e1b      	lsrs	r3, r3, #24
90002a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90002a76:	687b      	ldr	r3, [r7, #4]
90002a78:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
90002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a7c:	681b      	ldr	r3, [r3, #0]
90002a7e:	0fda      	lsrs	r2, r3, #31
90002a80:	687b      	ldr	r3, [r7, #4]
90002a82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
90002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a86:	3304      	adds	r3, #4
90002a88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
90002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002a8c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
90002a8e:	2300      	movs	r3, #0
90002a90:	623b      	str	r3, [r7, #32]
90002a92:	e00a      	b.n	90002aaa <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
90002a94:	697a      	ldr	r2, [r7, #20]
90002a96:	6a3b      	ldr	r3, [r7, #32]
90002a98:	441a      	add	r2, r3
90002a9a:	6839      	ldr	r1, [r7, #0]
90002a9c:	6a3b      	ldr	r3, [r7, #32]
90002a9e:	440b      	add	r3, r1
90002aa0:	7812      	ldrb	r2, [r2, #0]
90002aa2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
90002aa4:	6a3b      	ldr	r3, [r7, #32]
90002aa6:	3301      	adds	r3, #1
90002aa8:	623b      	str	r3, [r7, #32]
90002aaa:	687b      	ldr	r3, [r7, #4]
90002aac:	68db      	ldr	r3, [r3, #12]
90002aae:	0c1b      	lsrs	r3, r3, #16
90002ab0:	4a1f      	ldr	r2, [pc, #124]	; (90002b30 <HAL_FDCAN_GetRxMessage+0x2d8>)
90002ab2:	5cd3      	ldrb	r3, [r2, r3]
90002ab4:	461a      	mov	r2, r3
90002ab6:	6a3b      	ldr	r3, [r7, #32]
90002ab8:	4293      	cmp	r3, r2
90002aba:	d3eb      	bcc.n	90002a94 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
90002abc:	68bb      	ldr	r3, [r7, #8]
90002abe:	2b40      	cmp	r3, #64	; 0x40
90002ac0:	d105      	bne.n	90002ace <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
90002ac2:	68fb      	ldr	r3, [r7, #12]
90002ac4:	681b      	ldr	r3, [r3, #0]
90002ac6:	69fa      	ldr	r2, [r7, #28]
90002ac8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
90002acc:	e01e      	b.n	90002b0c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
90002ace:	68bb      	ldr	r3, [r7, #8]
90002ad0:	2b41      	cmp	r3, #65	; 0x41
90002ad2:	d105      	bne.n	90002ae0 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
90002ad4:	68fb      	ldr	r3, [r7, #12]
90002ad6:	681b      	ldr	r3, [r3, #0]
90002ad8:	69fa      	ldr	r2, [r7, #28]
90002ada:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
90002ade:	e015      	b.n	90002b0c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
90002ae0:	68bb      	ldr	r3, [r7, #8]
90002ae2:	2b1f      	cmp	r3, #31
90002ae4:	d808      	bhi.n	90002af8 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
90002ae6:	68fb      	ldr	r3, [r7, #12]
90002ae8:	681b      	ldr	r3, [r3, #0]
90002aea:	2101      	movs	r1, #1
90002aec:	68ba      	ldr	r2, [r7, #8]
90002aee:	fa01 f202 	lsl.w	r2, r1, r2
90002af2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
90002af6:	e009      	b.n	90002b0c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
90002af8:	68bb      	ldr	r3, [r7, #8]
90002afa:	f003 021f 	and.w	r2, r3, #31
90002afe:	68fb      	ldr	r3, [r7, #12]
90002b00:	681b      	ldr	r3, [r3, #0]
90002b02:	2101      	movs	r1, #1
90002b04:	fa01 f202 	lsl.w	r2, r1, r2
90002b08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
90002b0c:	2300      	movs	r3, #0
90002b0e:	e008      	b.n	90002b22 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
90002b10:	68fb      	ldr	r3, [r7, #12]
90002b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90002b16:	f043 0208 	orr.w	r2, r3, #8
90002b1a:	68fb      	ldr	r3, [r7, #12]
90002b1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
90002b20:	2301      	movs	r3, #1
  }
}
90002b22:	4618      	mov	r0, r3
90002b24:	372c      	adds	r7, #44	; 0x2c
90002b26:	46bd      	mov	sp, r7
90002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
90002b2c:	4770      	bx	lr
90002b2e:	bf00      	nop
90002b30:	90014078 	.word	0x90014078

90002b34 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
90002b34:	b480      	push	{r7}
90002b36:	b087      	sub	sp, #28
90002b38:	af00      	add	r7, sp, #0
90002b3a:	60f8      	str	r0, [r7, #12]
90002b3c:	60b9      	str	r1, [r7, #8]
90002b3e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
90002b40:	68fb      	ldr	r3, [r7, #12]
90002b42:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
90002b46:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
90002b48:	7dfb      	ldrb	r3, [r7, #23]
90002b4a:	2b01      	cmp	r3, #1
90002b4c:	d002      	beq.n	90002b54 <HAL_FDCAN_ActivateNotification+0x20>
90002b4e:	7dfb      	ldrb	r3, [r7, #23]
90002b50:	2b02      	cmp	r3, #2
90002b52:	d155      	bne.n	90002c00 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
90002b54:	68fb      	ldr	r3, [r7, #12]
90002b56:	681b      	ldr	r3, [r3, #0]
90002b58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
90002b5a:	68bb      	ldr	r3, [r7, #8]
90002b5c:	4013      	ands	r3, r2
90002b5e:	2b00      	cmp	r3, #0
90002b60:	d108      	bne.n	90002b74 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
90002b62:	68fb      	ldr	r3, [r7, #12]
90002b64:	681b      	ldr	r3, [r3, #0]
90002b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
90002b68:	68fb      	ldr	r3, [r7, #12]
90002b6a:	681b      	ldr	r3, [r3, #0]
90002b6c:	f042 0201 	orr.w	r2, r2, #1
90002b70:	65da      	str	r2, [r3, #92]	; 0x5c
90002b72:	e014      	b.n	90002b9e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
90002b74:	68fb      	ldr	r3, [r7, #12]
90002b76:	681b      	ldr	r3, [r3, #0]
90002b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
90002b7a:	68bb      	ldr	r3, [r7, #8]
90002b7c:	4013      	ands	r3, r2
90002b7e:	68ba      	ldr	r2, [r7, #8]
90002b80:	429a      	cmp	r2, r3
90002b82:	d108      	bne.n	90002b96 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
90002b84:	68fb      	ldr	r3, [r7, #12]
90002b86:	681b      	ldr	r3, [r3, #0]
90002b88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
90002b8a:	68fb      	ldr	r3, [r7, #12]
90002b8c:	681b      	ldr	r3, [r3, #0]
90002b8e:	f042 0202 	orr.w	r2, r2, #2
90002b92:	65da      	str	r2, [r3, #92]	; 0x5c
90002b94:	e003      	b.n	90002b9e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
90002b96:	68fb      	ldr	r3, [r7, #12]
90002b98:	681b      	ldr	r3, [r3, #0]
90002b9a:	2203      	movs	r2, #3
90002b9c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
90002b9e:	68bb      	ldr	r3, [r7, #8]
90002ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
90002ba4:	2b00      	cmp	r3, #0
90002ba6:	d009      	beq.n	90002bbc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
90002ba8:	68fb      	ldr	r3, [r7, #12]
90002baa:	681b      	ldr	r3, [r3, #0]
90002bac:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
90002bb0:	68fb      	ldr	r3, [r7, #12]
90002bb2:	681b      	ldr	r3, [r3, #0]
90002bb4:	687a      	ldr	r2, [r7, #4]
90002bb6:	430a      	orrs	r2, r1
90002bb8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
90002bbc:	68bb      	ldr	r3, [r7, #8]
90002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90002bc2:	2b00      	cmp	r3, #0
90002bc4:	d009      	beq.n	90002bda <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
90002bc6:	68fb      	ldr	r3, [r7, #12]
90002bc8:	681b      	ldr	r3, [r3, #0]
90002bca:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
90002bce:	68fb      	ldr	r3, [r7, #12]
90002bd0:	681b      	ldr	r3, [r3, #0]
90002bd2:	687a      	ldr	r2, [r7, #4]
90002bd4:	430a      	orrs	r2, r1
90002bd6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
90002bda:	68fb      	ldr	r3, [r7, #12]
90002bdc:	681b      	ldr	r3, [r3, #0]
90002bde:	6d59      	ldr	r1, [r3, #84]	; 0x54
90002be0:	68ba      	ldr	r2, [r7, #8]
90002be2:	4b0f      	ldr	r3, [pc, #60]	; (90002c20 <HAL_FDCAN_ActivateNotification+0xec>)
90002be4:	4013      	ands	r3, r2
90002be6:	68fa      	ldr	r2, [r7, #12]
90002be8:	6812      	ldr	r2, [r2, #0]
90002bea:	430b      	orrs	r3, r1
90002bec:	6553      	str	r3, [r2, #84]	; 0x54
90002bee:	4b0d      	ldr	r3, [pc, #52]	; (90002c24 <HAL_FDCAN_ActivateNotification+0xf0>)
90002bf0:	695a      	ldr	r2, [r3, #20]
90002bf2:	68bb      	ldr	r3, [r7, #8]
90002bf4:	0f9b      	lsrs	r3, r3, #30
90002bf6:	490b      	ldr	r1, [pc, #44]	; (90002c24 <HAL_FDCAN_ActivateNotification+0xf0>)
90002bf8:	4313      	orrs	r3, r2
90002bfa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
90002bfc:	2300      	movs	r3, #0
90002bfe:	e008      	b.n	90002c12 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
90002c00:	68fb      	ldr	r3, [r7, #12]
90002c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90002c06:	f043 0202 	orr.w	r2, r3, #2
90002c0a:	68fb      	ldr	r3, [r7, #12]
90002c0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
90002c10:	2301      	movs	r3, #1
  }
}
90002c12:	4618      	mov	r0, r3
90002c14:	371c      	adds	r7, #28
90002c16:	46bd      	mov	sp, r7
90002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
90002c1c:	4770      	bx	lr
90002c1e:	bf00      	nop
90002c20:	3fcfffff 	.word	0x3fcfffff
90002c24:	4000a800 	.word	0x4000a800

90002c28 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
90002c28:	b580      	push	{r7, lr}
90002c2a:	b096      	sub	sp, #88	; 0x58
90002c2c:	af00      	add	r7, sp, #0
90002c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
90002c30:	4b9a      	ldr	r3, [pc, #616]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002c32:	691b      	ldr	r3, [r3, #16]
90002c34:	079b      	lsls	r3, r3, #30
90002c36:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
90002c38:	4b98      	ldr	r3, [pc, #608]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002c3a:	695b      	ldr	r3, [r3, #20]
90002c3c:	079b      	lsls	r3, r3, #30
90002c3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
90002c40:	4013      	ands	r3, r2
90002c42:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
90002c44:	687b      	ldr	r3, [r7, #4]
90002c46:	681b      	ldr	r3, [r3, #0]
90002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002c4a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90002c4e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
90002c50:	687b      	ldr	r3, [r7, #4]
90002c52:	681b      	ldr	r3, [r3, #0]
90002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002c56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
90002c58:	4013      	ands	r3, r2
90002c5a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
90002c5c:	687b      	ldr	r3, [r7, #4]
90002c5e:	681b      	ldr	r3, [r3, #0]
90002c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002c62:	f003 030f 	and.w	r3, r3, #15
90002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
90002c68:	687b      	ldr	r3, [r7, #4]
90002c6a:	681b      	ldr	r3, [r3, #0]
90002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
90002c70:	4013      	ands	r3, r2
90002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
90002c74:	687b      	ldr	r3, [r7, #4]
90002c76:	681b      	ldr	r3, [r3, #0]
90002c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90002c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
90002c80:	687b      	ldr	r3, [r7, #4]
90002c82:	681b      	ldr	r3, [r3, #0]
90002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
90002c88:	4013      	ands	r3, r2
90002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
90002c8c:	687b      	ldr	r3, [r7, #4]
90002c8e:	681b      	ldr	r3, [r3, #0]
90002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002c92:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
90002c96:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
90002c98:	687b      	ldr	r3, [r7, #4]
90002c9a:	681b      	ldr	r3, [r3, #0]
90002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90002ca0:	4013      	ands	r3, r2
90002ca2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
90002ca4:	687b      	ldr	r3, [r7, #4]
90002ca6:	681b      	ldr	r3, [r3, #0]
90002ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002caa:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
90002cae:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
90002cb0:	687b      	ldr	r3, [r7, #4]
90002cb2:	681b      	ldr	r3, [r3, #0]
90002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
90002cb8:	4013      	ands	r3, r2
90002cba:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
90002cbc:	687b      	ldr	r3, [r7, #4]
90002cbe:	681b      	ldr	r3, [r3, #0]
90002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
90002cc4:	687b      	ldr	r3, [r7, #4]
90002cc6:	681b      	ldr	r3, [r3, #0]
90002cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002cca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
90002ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90002cce:	0a1b      	lsrs	r3, r3, #8
90002cd0:	f003 0301 	and.w	r3, r3, #1
90002cd4:	2b00      	cmp	r3, #0
90002cd6:	d010      	beq.n	90002cfa <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
90002cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002cda:	0a1b      	lsrs	r3, r3, #8
90002cdc:	f003 0301 	and.w	r3, r3, #1
90002ce0:	2b00      	cmp	r3, #0
90002ce2:	d00a      	beq.n	90002cfa <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
90002ce4:	687b      	ldr	r3, [r7, #4]
90002ce6:	681b      	ldr	r3, [r3, #0]
90002ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
90002cec:	651a      	str	r2, [r3, #80]	; 0x50
90002cee:	4b6b      	ldr	r3, [pc, #428]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002cf0:	2200      	movs	r2, #0
90002cf2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
90002cf4:	6878      	ldr	r0, [r7, #4]
90002cf6:	f000 fa54 	bl	900031a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
90002cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90002cfc:	0a9b      	lsrs	r3, r3, #10
90002cfe:	f003 0301 	and.w	r3, r3, #1
90002d02:	2b00      	cmp	r3, #0
90002d04:	d01d      	beq.n	90002d42 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
90002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002d08:	0a9b      	lsrs	r3, r3, #10
90002d0a:	f003 0301 	and.w	r3, r3, #1
90002d0e:	2b00      	cmp	r3, #0
90002d10:	d017      	beq.n	90002d42 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
90002d12:	687b      	ldr	r3, [r7, #4]
90002d14:	681b      	ldr	r3, [r3, #0]
90002d16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
90002d1a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
90002d1c:	687b      	ldr	r3, [r7, #4]
90002d1e:	681b      	ldr	r3, [r3, #0]
90002d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
90002d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90002d26:	4013      	ands	r3, r2
90002d28:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
90002d2a:	687b      	ldr	r3, [r7, #4]
90002d2c:	681b      	ldr	r3, [r3, #0]
90002d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
90002d32:	651a      	str	r2, [r3, #80]	; 0x50
90002d34:	4b59      	ldr	r3, [pc, #356]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002d36:	2200      	movs	r2, #0
90002d38:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
90002d3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
90002d3c:	6878      	ldr	r0, [r7, #4]
90002d3e:	f000 fa07 	bl	90003150 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
90002d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90002d44:	2b00      	cmp	r3, #0
90002d46:	d00d      	beq.n	90002d64 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
90002d48:	687b      	ldr	r3, [r7, #4]
90002d4a:	681a      	ldr	r2, [r3, #0]
90002d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
90002d4e:	4b54      	ldr	r3, [pc, #336]	; (90002ea0 <HAL_FDCAN_IRQHandler+0x278>)
90002d50:	400b      	ands	r3, r1
90002d52:	6513      	str	r3, [r2, #80]	; 0x50
90002d54:	4a51      	ldr	r2, [pc, #324]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90002d58:	0f9b      	lsrs	r3, r3, #30
90002d5a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
90002d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
90002d5e:	6878      	ldr	r0, [r7, #4]
90002d60:	f000 f9c0 	bl	900030e4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
90002d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90002d66:	2b00      	cmp	r3, #0
90002d68:	d00d      	beq.n	90002d86 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
90002d6a:	687b      	ldr	r3, [r7, #4]
90002d6c:	681a      	ldr	r2, [r3, #0]
90002d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
90002d70:	4b4b      	ldr	r3, [pc, #300]	; (90002ea0 <HAL_FDCAN_IRQHandler+0x278>)
90002d72:	400b      	ands	r3, r1
90002d74:	6513      	str	r3, [r2, #80]	; 0x50
90002d76:	4a49      	ldr	r2, [pc, #292]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90002d7a:	0f9b      	lsrs	r3, r3, #30
90002d7c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
90002d7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
90002d80:	6878      	ldr	r0, [r7, #4]
90002d82:	f000 f9ba 	bl	900030fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
90002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90002d88:	2b00      	cmp	r3, #0
90002d8a:	d00d      	beq.n	90002da8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
90002d8c:	687b      	ldr	r3, [r7, #4]
90002d8e:	681a      	ldr	r2, [r3, #0]
90002d90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
90002d92:	4b43      	ldr	r3, [pc, #268]	; (90002ea0 <HAL_FDCAN_IRQHandler+0x278>)
90002d94:	400b      	ands	r3, r1
90002d96:	6513      	str	r3, [r2, #80]	; 0x50
90002d98:	4a40      	ldr	r2, [pc, #256]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90002d9c:	0f9b      	lsrs	r3, r3, #30
90002d9e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
90002da0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
90002da2:	6878      	ldr	r0, [r7, #4]
90002da4:	f00c f91a 	bl	9000efdc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
90002da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002daa:	2b00      	cmp	r3, #0
90002dac:	d00d      	beq.n	90002dca <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
90002dae:	687b      	ldr	r3, [r7, #4]
90002db0:	681a      	ldr	r2, [r3, #0]
90002db2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
90002db4:	4b3a      	ldr	r3, [pc, #232]	; (90002ea0 <HAL_FDCAN_IRQHandler+0x278>)
90002db6:	400b      	ands	r3, r1
90002db8:	6513      	str	r3, [r2, #80]	; 0x50
90002dba:	4a38      	ldr	r2, [pc, #224]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90002dbe:	0f9b      	lsrs	r3, r3, #30
90002dc0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
90002dc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
90002dc4:	6878      	ldr	r0, [r7, #4]
90002dc6:	f000 f9a3 	bl	90003110 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
90002dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90002dcc:	0adb      	lsrs	r3, r3, #11
90002dce:	f003 0301 	and.w	r3, r3, #1
90002dd2:	2b00      	cmp	r3, #0
90002dd4:	d010      	beq.n	90002df8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
90002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002dd8:	0adb      	lsrs	r3, r3, #11
90002dda:	f003 0301 	and.w	r3, r3, #1
90002dde:	2b00      	cmp	r3, #0
90002de0:	d00a      	beq.n	90002df8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
90002de2:	687b      	ldr	r3, [r7, #4]
90002de4:	681b      	ldr	r3, [r3, #0]
90002de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
90002dea:	651a      	str	r2, [r3, #80]	; 0x50
90002dec:	4b2b      	ldr	r3, [pc, #172]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002dee:	2200      	movs	r2, #0
90002df0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
90002df2:	6878      	ldr	r0, [r7, #4]
90002df4:	f000 f997 	bl	90003126 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
90002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90002dfa:	0a5b      	lsrs	r3, r3, #9
90002dfc:	f003 0301 	and.w	r3, r3, #1
90002e00:	2b00      	cmp	r3, #0
90002e02:	d01d      	beq.n	90002e40 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
90002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002e06:	0a5b      	lsrs	r3, r3, #9
90002e08:	f003 0301 	and.w	r3, r3, #1
90002e0c:	2b00      	cmp	r3, #0
90002e0e:	d017      	beq.n	90002e40 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
90002e10:	687b      	ldr	r3, [r7, #4]
90002e12:	681b      	ldr	r3, [r3, #0]
90002e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
90002e18:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
90002e1a:	687b      	ldr	r3, [r7, #4]
90002e1c:	681b      	ldr	r3, [r3, #0]
90002e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90002e24:	4013      	ands	r3, r2
90002e26:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
90002e28:	687b      	ldr	r3, [r7, #4]
90002e2a:	681b      	ldr	r3, [r3, #0]
90002e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
90002e30:	651a      	str	r2, [r3, #80]	; 0x50
90002e32:	4b1a      	ldr	r3, [pc, #104]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002e34:	2200      	movs	r2, #0
90002e36:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
90002e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
90002e3a:	6878      	ldr	r0, [r7, #4]
90002e3c:	f000 f97d 	bl	9000313a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
90002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90002e42:	0cdb      	lsrs	r3, r3, #19
90002e44:	f003 0301 	and.w	r3, r3, #1
90002e48:	2b00      	cmp	r3, #0
90002e4a:	d010      	beq.n	90002e6e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
90002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002e4e:	0cdb      	lsrs	r3, r3, #19
90002e50:	f003 0301 	and.w	r3, r3, #1
90002e54:	2b00      	cmp	r3, #0
90002e56:	d00a      	beq.n	90002e6e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
90002e58:	687b      	ldr	r3, [r7, #4]
90002e5a:	681b      	ldr	r3, [r3, #0]
90002e5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
90002e60:	651a      	str	r2, [r3, #80]	; 0x50
90002e62:	4b0e      	ldr	r3, [pc, #56]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002e64:	2200      	movs	r2, #0
90002e66:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
90002e68:	6878      	ldr	r0, [r7, #4]
90002e6a:	f000 f97c 	bl	90003166 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
90002e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90002e70:	0c1b      	lsrs	r3, r3, #16
90002e72:	f003 0301 	and.w	r3, r3, #1
90002e76:	2b00      	cmp	r3, #0
90002e78:	d016      	beq.n	90002ea8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
90002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002e7c:	0c1b      	lsrs	r3, r3, #16
90002e7e:	f003 0301 	and.w	r3, r3, #1
90002e82:	2b00      	cmp	r3, #0
90002e84:	d010      	beq.n	90002ea8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
90002e86:	687b      	ldr	r3, [r7, #4]
90002e88:	681b      	ldr	r3, [r3, #0]
90002e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90002e8e:	651a      	str	r2, [r3, #80]	; 0x50
90002e90:	4b02      	ldr	r3, [pc, #8]	; (90002e9c <HAL_FDCAN_IRQHandler+0x274>)
90002e92:	2200      	movs	r2, #0
90002e94:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
90002e96:	6878      	ldr	r0, [r7, #4]
90002e98:	e004      	b.n	90002ea4 <HAL_FDCAN_IRQHandler+0x27c>
90002e9a:	bf00      	nop
90002e9c:	4000a800 	.word	0x4000a800
90002ea0:	3fcfffff 	.word	0x3fcfffff
90002ea4:	f000 f969 	bl	9000317a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
90002ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90002eaa:	0c9b      	lsrs	r3, r3, #18
90002eac:	f003 0301 	and.w	r3, r3, #1
90002eb0:	2b00      	cmp	r3, #0
90002eb2:	d010      	beq.n	90002ed6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
90002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002eb6:	0c9b      	lsrs	r3, r3, #18
90002eb8:	f003 0301 	and.w	r3, r3, #1
90002ebc:	2b00      	cmp	r3, #0
90002ebe:	d00a      	beq.n	90002ed6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
90002ec0:	687b      	ldr	r3, [r7, #4]
90002ec2:	681b      	ldr	r3, [r3, #0]
90002ec4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
90002ec8:	651a      	str	r2, [r3, #80]	; 0x50
90002eca:	4b83      	ldr	r3, [pc, #524]	; (900030d8 <HAL_FDCAN_IRQHandler+0x4b0>)
90002ecc:	2200      	movs	r2, #0
90002ece:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
90002ed0:	6878      	ldr	r0, [r7, #4]
90002ed2:	f000 f95c 	bl	9000318e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
90002ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90002ed8:	0c5b      	lsrs	r3, r3, #17
90002eda:	f003 0301 	and.w	r3, r3, #1
90002ede:	2b00      	cmp	r3, #0
90002ee0:	d015      	beq.n	90002f0e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
90002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90002ee4:	0c5b      	lsrs	r3, r3, #17
90002ee6:	f003 0301 	and.w	r3, r3, #1
90002eea:	2b00      	cmp	r3, #0
90002eec:	d00f      	beq.n	90002f0e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
90002eee:	687b      	ldr	r3, [r7, #4]
90002ef0:	681b      	ldr	r3, [r3, #0]
90002ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
90002ef6:	651a      	str	r2, [r3, #80]	; 0x50
90002ef8:	4b77      	ldr	r3, [pc, #476]	; (900030d8 <HAL_FDCAN_IRQHandler+0x4b0>)
90002efa:	2200      	movs	r2, #0
90002efc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
90002efe:	687b      	ldr	r3, [r7, #4]
90002f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90002f04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
90002f08:	687b      	ldr	r3, [r7, #4]
90002f0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
90002f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90002f10:	2b00      	cmp	r3, #0
90002f12:	d00d      	beq.n	90002f30 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
90002f14:	687b      	ldr	r3, [r7, #4]
90002f16:	681a      	ldr	r2, [r3, #0]
90002f18:	6c39      	ldr	r1, [r7, #64]	; 0x40
90002f1a:	4b70      	ldr	r3, [pc, #448]	; (900030dc <HAL_FDCAN_IRQHandler+0x4b4>)
90002f1c:	400b      	ands	r3, r1
90002f1e:	6513      	str	r3, [r2, #80]	; 0x50
90002f20:	4a6d      	ldr	r2, [pc, #436]	; (900030d8 <HAL_FDCAN_IRQHandler+0x4b0>)
90002f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90002f24:	0f9b      	lsrs	r3, r3, #30
90002f26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
90002f28:	6c39      	ldr	r1, [r7, #64]	; 0x40
90002f2a:	6878      	ldr	r0, [r7, #4]
90002f2c:	f00c f870 	bl	9000f010 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
90002f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90002f32:	2b00      	cmp	r3, #0
90002f34:	d011      	beq.n	90002f5a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
90002f36:	687b      	ldr	r3, [r7, #4]
90002f38:	681a      	ldr	r2, [r3, #0]
90002f3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
90002f3c:	4b67      	ldr	r3, [pc, #412]	; (900030dc <HAL_FDCAN_IRQHandler+0x4b4>)
90002f3e:	400b      	ands	r3, r1
90002f40:	6513      	str	r3, [r2, #80]	; 0x50
90002f42:	4a65      	ldr	r2, [pc, #404]	; (900030d8 <HAL_FDCAN_IRQHandler+0x4b0>)
90002f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90002f46:	0f9b      	lsrs	r3, r3, #30
90002f48:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
90002f4a:	687b      	ldr	r3, [r7, #4]
90002f4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
90002f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90002f52:	431a      	orrs	r2, r3
90002f54:	687b      	ldr	r3, [r7, #4]
90002f56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
90002f5a:	687b      	ldr	r3, [r7, #4]
90002f5c:	681b      	ldr	r3, [r3, #0]
90002f5e:	4a60      	ldr	r2, [pc, #384]	; (900030e0 <HAL_FDCAN_IRQHandler+0x4b8>)
90002f60:	4293      	cmp	r3, r2
90002f62:	f040 80ac 	bne.w	900030be <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
90002f66:	687b      	ldr	r3, [r7, #4]
90002f68:	685b      	ldr	r3, [r3, #4]
90002f6a:	689b      	ldr	r3, [r3, #8]
90002f6c:	f003 0303 	and.w	r3, r3, #3
90002f70:	2b00      	cmp	r3, #0
90002f72:	f000 80a4 	beq.w	900030be <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
90002f76:	687b      	ldr	r3, [r7, #4]
90002f78:	685b      	ldr	r3, [r3, #4]
90002f7a:	6a1b      	ldr	r3, [r3, #32]
90002f7c:	f003 030f 	and.w	r3, r3, #15
90002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
90002f82:	687b      	ldr	r3, [r7, #4]
90002f84:	685b      	ldr	r3, [r3, #4]
90002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002f8a:	4013      	ands	r3, r2
90002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
90002f8e:	687b      	ldr	r3, [r7, #4]
90002f90:	685b      	ldr	r3, [r3, #4]
90002f92:	6a1b      	ldr	r3, [r3, #32]
90002f94:	f003 0330 	and.w	r3, r3, #48	; 0x30
90002f98:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
90002f9a:	687b      	ldr	r3, [r7, #4]
90002f9c:	685b      	ldr	r3, [r3, #4]
90002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
90002fa2:	4013      	ands	r3, r2
90002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
90002fa6:	687b      	ldr	r3, [r7, #4]
90002fa8:	685b      	ldr	r3, [r3, #4]
90002faa:	6a1b      	ldr	r3, [r3, #32]
90002fac:	f403 73c0 	and.w	r3, r3, #384	; 0x180
90002fb0:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
90002fb2:	687b      	ldr	r3, [r7, #4]
90002fb4:	685b      	ldr	r3, [r3, #4]
90002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90002fba:	4013      	ands	r3, r2
90002fbc:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
90002fbe:	687b      	ldr	r3, [r7, #4]
90002fc0:	685b      	ldr	r3, [r3, #4]
90002fc2:	6a1b      	ldr	r3, [r3, #32]
90002fc4:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
90002fc8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
90002fca:	687b      	ldr	r3, [r7, #4]
90002fcc:	685b      	ldr	r3, [r3, #4]
90002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002fd0:	6a3a      	ldr	r2, [r7, #32]
90002fd2:	4013      	ands	r3, r2
90002fd4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
90002fd6:	687b      	ldr	r3, [r7, #4]
90002fd8:	685b      	ldr	r3, [r3, #4]
90002fda:	6a1b      	ldr	r3, [r3, #32]
90002fdc:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
90002fe0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
90002fe2:	687b      	ldr	r3, [r7, #4]
90002fe4:	685b      	ldr	r3, [r3, #4]
90002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002fe8:	69fa      	ldr	r2, [r7, #28]
90002fea:	4013      	ands	r3, r2
90002fec:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
90002fee:	687b      	ldr	r3, [r7, #4]
90002ff0:	685b      	ldr	r3, [r3, #4]
90002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002ff4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
90002ff6:	687b      	ldr	r3, [r7, #4]
90002ff8:	685b      	ldr	r3, [r3, #4]
90002ffa:	6a1b      	ldr	r3, [r3, #32]
90002ffc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
90002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90003000:	2b00      	cmp	r3, #0
90003002:	d007      	beq.n	90003014 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
90003004:	687b      	ldr	r3, [r7, #4]
90003006:	685b      	ldr	r3, [r3, #4]
90003008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000300a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
9000300c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000300e:	6878      	ldr	r0, [r7, #4]
90003010:	f000 f8db 	bl	900031ca <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
90003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
90003016:	2b00      	cmp	r3, #0
90003018:	d007      	beq.n	9000302a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
9000301a:	687b      	ldr	r3, [r7, #4]
9000301c:	685b      	ldr	r3, [r3, #4]
9000301e:	6aba      	ldr	r2, [r7, #40]	; 0x28
90003020:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
90003022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90003024:	6878      	ldr	r0, [r7, #4]
90003026:	f000 f8db 	bl	900031e0 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
9000302a:	69bb      	ldr	r3, [r7, #24]
9000302c:	099b      	lsrs	r3, r3, #6
9000302e:	f003 0301 	and.w	r3, r3, #1
90003032:	2b00      	cmp	r3, #0
90003034:	d01a      	beq.n	9000306c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
90003036:	697b      	ldr	r3, [r7, #20]
90003038:	099b      	lsrs	r3, r3, #6
9000303a:	f003 0301 	and.w	r3, r3, #1
9000303e:	2b00      	cmp	r3, #0
90003040:	d014      	beq.n	9000306c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
90003042:	687b      	ldr	r3, [r7, #4]
90003044:	685b      	ldr	r3, [r3, #4]
90003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003048:	0c1b      	lsrs	r3, r3, #16
9000304a:	b29b      	uxth	r3, r3
9000304c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
9000304e:	687b      	ldr	r3, [r7, #4]
90003050:	685b      	ldr	r3, [r3, #4]
90003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90003058:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
9000305a:	687b      	ldr	r3, [r7, #4]
9000305c:	685b      	ldr	r3, [r3, #4]
9000305e:	2240      	movs	r2, #64	; 0x40
90003060:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
90003062:	68fa      	ldr	r2, [r7, #12]
90003064:	6939      	ldr	r1, [r7, #16]
90003066:	6878      	ldr	r0, [r7, #4]
90003068:	f000 f8c5 	bl	900031f6 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
9000306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000306e:	2b00      	cmp	r3, #0
90003070:	d007      	beq.n	90003082 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
90003072:	687b      	ldr	r3, [r7, #4]
90003074:	685b      	ldr	r3, [r3, #4]
90003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90003078:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
9000307a:	6a79      	ldr	r1, [r7, #36]	; 0x24
9000307c:	6878      	ldr	r0, [r7, #4]
9000307e:	f000 f8c6 	bl	9000320e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
90003082:	6a3b      	ldr	r3, [r7, #32]
90003084:	2b00      	cmp	r3, #0
90003086:	d00b      	beq.n	900030a0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
90003088:	687b      	ldr	r3, [r7, #4]
9000308a:	685b      	ldr	r3, [r3, #4]
9000308c:	6a3a      	ldr	r2, [r7, #32]
9000308e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
90003090:	687b      	ldr	r3, [r7, #4]
90003092:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
90003096:	6a3b      	ldr	r3, [r7, #32]
90003098:	431a      	orrs	r2, r3
9000309a:	687b      	ldr	r3, [r7, #4]
9000309c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
900030a0:	69fb      	ldr	r3, [r7, #28]
900030a2:	2b00      	cmp	r3, #0
900030a4:	d00b      	beq.n	900030be <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
900030a6:	687b      	ldr	r3, [r7, #4]
900030a8:	685b      	ldr	r3, [r3, #4]
900030aa:	69fa      	ldr	r2, [r7, #28]
900030ac:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
900030ae:	687b      	ldr	r3, [r7, #4]
900030b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
900030b4:	69fb      	ldr	r3, [r7, #28]
900030b6:	431a      	orrs	r2, r3
900030b8:	687b      	ldr	r3, [r7, #4]
900030ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
900030be:	687b      	ldr	r3, [r7, #4]
900030c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900030c4:	2b00      	cmp	r3, #0
900030c6:	d002      	beq.n	900030ce <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
900030c8:	6878      	ldr	r0, [r7, #4]
900030ca:	f000 f874 	bl	900031b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
900030ce:	bf00      	nop
900030d0:	3758      	adds	r7, #88	; 0x58
900030d2:	46bd      	mov	sp, r7
900030d4:	bd80      	pop	{r7, pc}
900030d6:	bf00      	nop
900030d8:	4000a800 	.word	0x4000a800
900030dc:	3fcfffff 	.word	0x3fcfffff
900030e0:	4000a000 	.word	0x4000a000

900030e4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
900030e4:	b480      	push	{r7}
900030e6:	b083      	sub	sp, #12
900030e8:	af00      	add	r7, sp, #0
900030ea:	6078      	str	r0, [r7, #4]
900030ec:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
900030ee:	bf00      	nop
900030f0:	370c      	adds	r7, #12
900030f2:	46bd      	mov	sp, r7
900030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
900030f8:	4770      	bx	lr

900030fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
900030fa:	b480      	push	{r7}
900030fc:	b083      	sub	sp, #12
900030fe:	af00      	add	r7, sp, #0
90003100:	6078      	str	r0, [r7, #4]
90003102:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
90003104:	bf00      	nop
90003106:	370c      	adds	r7, #12
90003108:	46bd      	mov	sp, r7
9000310a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000310e:	4770      	bx	lr

90003110 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
90003110:	b480      	push	{r7}
90003112:	b083      	sub	sp, #12
90003114:	af00      	add	r7, sp, #0
90003116:	6078      	str	r0, [r7, #4]
90003118:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
9000311a:	bf00      	nop
9000311c:	370c      	adds	r7, #12
9000311e:	46bd      	mov	sp, r7
90003120:	f85d 7b04 	ldr.w	r7, [sp], #4
90003124:	4770      	bx	lr

90003126 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
90003126:	b480      	push	{r7}
90003128:	b083      	sub	sp, #12
9000312a:	af00      	add	r7, sp, #0
9000312c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
9000312e:	bf00      	nop
90003130:	370c      	adds	r7, #12
90003132:	46bd      	mov	sp, r7
90003134:	f85d 7b04 	ldr.w	r7, [sp], #4
90003138:	4770      	bx	lr

9000313a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
9000313a:	b480      	push	{r7}
9000313c:	b083      	sub	sp, #12
9000313e:	af00      	add	r7, sp, #0
90003140:	6078      	str	r0, [r7, #4]
90003142:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
90003144:	bf00      	nop
90003146:	370c      	adds	r7, #12
90003148:	46bd      	mov	sp, r7
9000314a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000314e:	4770      	bx	lr

90003150 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
90003150:	b480      	push	{r7}
90003152:	b083      	sub	sp, #12
90003154:	af00      	add	r7, sp, #0
90003156:	6078      	str	r0, [r7, #4]
90003158:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
9000315a:	bf00      	nop
9000315c:	370c      	adds	r7, #12
9000315e:	46bd      	mov	sp, r7
90003160:	f85d 7b04 	ldr.w	r7, [sp], #4
90003164:	4770      	bx	lr

90003166 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
90003166:	b480      	push	{r7}
90003168:	b083      	sub	sp, #12
9000316a:	af00      	add	r7, sp, #0
9000316c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
9000316e:	bf00      	nop
90003170:	370c      	adds	r7, #12
90003172:	46bd      	mov	sp, r7
90003174:	f85d 7b04 	ldr.w	r7, [sp], #4
90003178:	4770      	bx	lr

9000317a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
9000317a:	b480      	push	{r7}
9000317c:	b083      	sub	sp, #12
9000317e:	af00      	add	r7, sp, #0
90003180:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
90003182:	bf00      	nop
90003184:	370c      	adds	r7, #12
90003186:	46bd      	mov	sp, r7
90003188:	f85d 7b04 	ldr.w	r7, [sp], #4
9000318c:	4770      	bx	lr

9000318e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
9000318e:	b480      	push	{r7}
90003190:	b083      	sub	sp, #12
90003192:	af00      	add	r7, sp, #0
90003194:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
90003196:	bf00      	nop
90003198:	370c      	adds	r7, #12
9000319a:	46bd      	mov	sp, r7
9000319c:	f85d 7b04 	ldr.w	r7, [sp], #4
900031a0:	4770      	bx	lr

900031a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
900031a2:	b480      	push	{r7}
900031a4:	b083      	sub	sp, #12
900031a6:	af00      	add	r7, sp, #0
900031a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
900031aa:	bf00      	nop
900031ac:	370c      	adds	r7, #12
900031ae:	46bd      	mov	sp, r7
900031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900031b4:	4770      	bx	lr

900031b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
900031b6:	b480      	push	{r7}
900031b8:	b083      	sub	sp, #12
900031ba:	af00      	add	r7, sp, #0
900031bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
900031be:	bf00      	nop
900031c0:	370c      	adds	r7, #12
900031c2:	46bd      	mov	sp, r7
900031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900031c8:	4770      	bx	lr

900031ca <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
900031ca:	b480      	push	{r7}
900031cc:	b083      	sub	sp, #12
900031ce:	af00      	add	r7, sp, #0
900031d0:	6078      	str	r0, [r7, #4]
900031d2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
900031d4:	bf00      	nop
900031d6:	370c      	adds	r7, #12
900031d8:	46bd      	mov	sp, r7
900031da:	f85d 7b04 	ldr.w	r7, [sp], #4
900031de:	4770      	bx	lr

900031e0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
900031e0:	b480      	push	{r7}
900031e2:	b083      	sub	sp, #12
900031e4:	af00      	add	r7, sp, #0
900031e6:	6078      	str	r0, [r7, #4]
900031e8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
900031ea:	bf00      	nop
900031ec:	370c      	adds	r7, #12
900031ee:	46bd      	mov	sp, r7
900031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900031f4:	4770      	bx	lr

900031f6 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
900031f6:	b480      	push	{r7}
900031f8:	b085      	sub	sp, #20
900031fa:	af00      	add	r7, sp, #0
900031fc:	60f8      	str	r0, [r7, #12]
900031fe:	60b9      	str	r1, [r7, #8]
90003200:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
90003202:	bf00      	nop
90003204:	3714      	adds	r7, #20
90003206:	46bd      	mov	sp, r7
90003208:	f85d 7b04 	ldr.w	r7, [sp], #4
9000320c:	4770      	bx	lr

9000320e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
9000320e:	b480      	push	{r7}
90003210:	b083      	sub	sp, #12
90003212:	af00      	add	r7, sp, #0
90003214:	6078      	str	r0, [r7, #4]
90003216:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
90003218:	bf00      	nop
9000321a:	370c      	adds	r7, #12
9000321c:	46bd      	mov	sp, r7
9000321e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003222:	4770      	bx	lr

90003224 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
90003224:	b480      	push	{r7}
90003226:	b085      	sub	sp, #20
90003228:	af00      	add	r7, sp, #0
9000322a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
9000322c:	687b      	ldr	r3, [r7, #4]
9000322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90003230:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
90003232:	687b      	ldr	r3, [r7, #4]
90003234:	681b      	ldr	r3, [r3, #0]
90003236:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
9000323a:	4ba7      	ldr	r3, [pc, #668]	; (900034d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
9000323c:	4013      	ands	r3, r2
9000323e:	68ba      	ldr	r2, [r7, #8]
90003240:	0091      	lsls	r1, r2, #2
90003242:	687a      	ldr	r2, [r7, #4]
90003244:	6812      	ldr	r2, [r2, #0]
90003246:	430b      	orrs	r3, r1
90003248:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
9000324c:	687b      	ldr	r3, [r7, #4]
9000324e:	681b      	ldr	r3, [r3, #0]
90003250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003254:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
90003258:	687b      	ldr	r3, [r7, #4]
9000325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000325c:	041a      	lsls	r2, r3, #16
9000325e:	687b      	ldr	r3, [r7, #4]
90003260:	681b      	ldr	r3, [r3, #0]
90003262:	430a      	orrs	r2, r1
90003264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
90003268:	687b      	ldr	r3, [r7, #4]
9000326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000326c:	68ba      	ldr	r2, [r7, #8]
9000326e:	4413      	add	r3, r2
90003270:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
90003272:	687b      	ldr	r3, [r7, #4]
90003274:	681b      	ldr	r3, [r3, #0]
90003276:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
9000327a:	4b97      	ldr	r3, [pc, #604]	; (900034d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
9000327c:	4013      	ands	r3, r2
9000327e:	68ba      	ldr	r2, [r7, #8]
90003280:	0091      	lsls	r1, r2, #2
90003282:	687a      	ldr	r2, [r7, #4]
90003284:	6812      	ldr	r2, [r2, #0]
90003286:	430b      	orrs	r3, r1
90003288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
9000328c:	687b      	ldr	r3, [r7, #4]
9000328e:	681b      	ldr	r3, [r3, #0]
90003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003294:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
90003298:	687b      	ldr	r3, [r7, #4]
9000329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000329c:	041a      	lsls	r2, r3, #16
9000329e:	687b      	ldr	r3, [r7, #4]
900032a0:	681b      	ldr	r3, [r3, #0]
900032a2:	430a      	orrs	r2, r1
900032a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
900032a8:	687b      	ldr	r3, [r7, #4]
900032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900032ac:	005b      	lsls	r3, r3, #1
900032ae:	68ba      	ldr	r2, [r7, #8]
900032b0:	4413      	add	r3, r2
900032b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
900032b4:	687b      	ldr	r3, [r7, #4]
900032b6:	681b      	ldr	r3, [r3, #0]
900032b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
900032bc:	4b86      	ldr	r3, [pc, #536]	; (900034d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
900032be:	4013      	ands	r3, r2
900032c0:	68ba      	ldr	r2, [r7, #8]
900032c2:	0091      	lsls	r1, r2, #2
900032c4:	687a      	ldr	r2, [r7, #4]
900032c6:	6812      	ldr	r2, [r2, #0]
900032c8:	430b      	orrs	r3, r1
900032ca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
900032ce:	687b      	ldr	r3, [r7, #4]
900032d0:	681b      	ldr	r3, [r3, #0]
900032d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
900032d6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
900032da:	687b      	ldr	r3, [r7, #4]
900032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900032de:	041a      	lsls	r2, r3, #16
900032e0:	687b      	ldr	r3, [r7, #4]
900032e2:	681b      	ldr	r3, [r3, #0]
900032e4:	430a      	orrs	r2, r1
900032e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
900032ea:	687b      	ldr	r3, [r7, #4]
900032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900032ee:	687a      	ldr	r2, [r7, #4]
900032f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
900032f2:	fb02 f303 	mul.w	r3, r2, r3
900032f6:	68ba      	ldr	r2, [r7, #8]
900032f8:	4413      	add	r3, r2
900032fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
900032fc:	687b      	ldr	r3, [r7, #4]
900032fe:	681b      	ldr	r3, [r3, #0]
90003300:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
90003304:	4b74      	ldr	r3, [pc, #464]	; (900034d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
90003306:	4013      	ands	r3, r2
90003308:	68ba      	ldr	r2, [r7, #8]
9000330a:	0091      	lsls	r1, r2, #2
9000330c:	687a      	ldr	r2, [r7, #4]
9000330e:	6812      	ldr	r2, [r2, #0]
90003310:	430b      	orrs	r3, r1
90003312:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
90003316:	687b      	ldr	r3, [r7, #4]
90003318:	681b      	ldr	r3, [r3, #0]
9000331a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000331e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
90003322:	687b      	ldr	r3, [r7, #4]
90003324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90003326:	041a      	lsls	r2, r3, #16
90003328:	687b      	ldr	r3, [r7, #4]
9000332a:	681b      	ldr	r3, [r3, #0]
9000332c:	430a      	orrs	r2, r1
9000332e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
90003332:	687b      	ldr	r3, [r7, #4]
90003334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90003336:	687a      	ldr	r2, [r7, #4]
90003338:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
9000333a:	fb02 f303 	mul.w	r3, r2, r3
9000333e:	68ba      	ldr	r2, [r7, #8]
90003340:	4413      	add	r3, r2
90003342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
90003344:	687b      	ldr	r3, [r7, #4]
90003346:	681b      	ldr	r3, [r3, #0]
90003348:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
9000334c:	4b62      	ldr	r3, [pc, #392]	; (900034d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
9000334e:	4013      	ands	r3, r2
90003350:	68ba      	ldr	r2, [r7, #8]
90003352:	0091      	lsls	r1, r2, #2
90003354:	687a      	ldr	r2, [r7, #4]
90003356:	6812      	ldr	r2, [r2, #0]
90003358:	430b      	orrs	r3, r1
9000335a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
9000335e:	687b      	ldr	r3, [r7, #4]
90003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90003362:	687a      	ldr	r2, [r7, #4]
90003364:	6d52      	ldr	r2, [r2, #84]	; 0x54
90003366:	fb02 f303 	mul.w	r3, r2, r3
9000336a:	68ba      	ldr	r2, [r7, #8]
9000336c:	4413      	add	r3, r2
9000336e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
90003370:	687b      	ldr	r3, [r7, #4]
90003372:	681b      	ldr	r3, [r3, #0]
90003374:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
90003378:	4b57      	ldr	r3, [pc, #348]	; (900034d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
9000337a:	4013      	ands	r3, r2
9000337c:	68ba      	ldr	r2, [r7, #8]
9000337e:	0091      	lsls	r1, r2, #2
90003380:	687a      	ldr	r2, [r7, #4]
90003382:	6812      	ldr	r2, [r2, #0]
90003384:	430b      	orrs	r3, r1
90003386:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
9000338a:	687b      	ldr	r3, [r7, #4]
9000338c:	681b      	ldr	r3, [r3, #0]
9000338e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90003392:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
90003396:	687b      	ldr	r3, [r7, #4]
90003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000339a:	041a      	lsls	r2, r3, #16
9000339c:	687b      	ldr	r3, [r7, #4]
9000339e:	681b      	ldr	r3, [r3, #0]
900033a0:	430a      	orrs	r2, r1
900033a2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
900033a6:	687b      	ldr	r3, [r7, #4]
900033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900033aa:	005b      	lsls	r3, r3, #1
900033ac:	68ba      	ldr	r2, [r7, #8]
900033ae:	4413      	add	r3, r2
900033b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
900033b2:	687b      	ldr	r3, [r7, #4]
900033b4:	681b      	ldr	r3, [r3, #0]
900033b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
900033ba:	4b47      	ldr	r3, [pc, #284]	; (900034d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
900033bc:	4013      	ands	r3, r2
900033be:	68ba      	ldr	r2, [r7, #8]
900033c0:	0091      	lsls	r1, r2, #2
900033c2:	687a      	ldr	r2, [r7, #4]
900033c4:	6812      	ldr	r2, [r2, #0]
900033c6:	430b      	orrs	r3, r1
900033c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
900033cc:	687b      	ldr	r3, [r7, #4]
900033ce:	681b      	ldr	r3, [r3, #0]
900033d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900033d4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
900033d8:	687b      	ldr	r3, [r7, #4]
900033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900033dc:	041a      	lsls	r2, r3, #16
900033de:	687b      	ldr	r3, [r7, #4]
900033e0:	681b      	ldr	r3, [r3, #0]
900033e2:	430a      	orrs	r2, r1
900033e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
900033e8:	687b      	ldr	r3, [r7, #4]
900033ea:	681b      	ldr	r3, [r3, #0]
900033ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900033f0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
900033f4:	687b      	ldr	r3, [r7, #4]
900033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900033f8:	061a      	lsls	r2, r3, #24
900033fa:	687b      	ldr	r3, [r7, #4]
900033fc:	681b      	ldr	r3, [r3, #0]
900033fe:	430a      	orrs	r2, r1
90003400:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
90003404:	687b      	ldr	r3, [r7, #4]
90003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003408:	4b34      	ldr	r3, [pc, #208]	; (900034dc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
9000340a:	4413      	add	r3, r2
9000340c:	009a      	lsls	r2, r3, #2
9000340e:	687b      	ldr	r3, [r7, #4]
90003410:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
90003412:	687b      	ldr	r3, [r7, #4]
90003414:	6eda      	ldr	r2, [r3, #108]	; 0x6c
90003416:	687b      	ldr	r3, [r7, #4]
90003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000341a:	009b      	lsls	r3, r3, #2
9000341c:	441a      	add	r2, r3
9000341e:	687b      	ldr	r3, [r7, #4]
90003420:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
90003422:	687b      	ldr	r3, [r7, #4]
90003424:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90003426:	687b      	ldr	r3, [r7, #4]
90003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000342a:	00db      	lsls	r3, r3, #3
9000342c:	441a      	add	r2, r3
9000342e:	687b      	ldr	r3, [r7, #4]
90003430:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
90003432:	687b      	ldr	r3, [r7, #4]
90003434:	6f5a      	ldr	r2, [r3, #116]	; 0x74
90003436:	687b      	ldr	r3, [r7, #4]
90003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000343a:	6879      	ldr	r1, [r7, #4]
9000343c:	6c49      	ldr	r1, [r1, #68]	; 0x44
9000343e:	fb01 f303 	mul.w	r3, r1, r3
90003442:	009b      	lsls	r3, r3, #2
90003444:	441a      	add	r2, r3
90003446:	687b      	ldr	r3, [r7, #4]
90003448:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
9000344a:	687b      	ldr	r3, [r7, #4]
9000344c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
9000344e:	687b      	ldr	r3, [r7, #4]
90003450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90003452:	6879      	ldr	r1, [r7, #4]
90003454:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
90003456:	fb01 f303 	mul.w	r3, r1, r3
9000345a:	009b      	lsls	r3, r3, #2
9000345c:	441a      	add	r2, r3
9000345e:	687b      	ldr	r3, [r7, #4]
90003460:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
90003462:	687b      	ldr	r3, [r7, #4]
90003464:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90003466:	687b      	ldr	r3, [r7, #4]
90003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000346a:	6879      	ldr	r1, [r7, #4]
9000346c:	6d49      	ldr	r1, [r1, #84]	; 0x54
9000346e:	fb01 f303 	mul.w	r3, r1, r3
90003472:	009b      	lsls	r3, r3, #2
90003474:	441a      	add	r2, r3
90003476:	687b      	ldr	r3, [r7, #4]
90003478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
9000347c:	687b      	ldr	r3, [r7, #4]
9000347e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
90003482:	687b      	ldr	r3, [r7, #4]
90003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90003486:	00db      	lsls	r3, r3, #3
90003488:	441a      	add	r2, r3
9000348a:	687b      	ldr	r3, [r7, #4]
9000348c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
90003490:	687b      	ldr	r3, [r7, #4]
90003492:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90003496:	687b      	ldr	r3, [r7, #4]
90003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000349a:	6879      	ldr	r1, [r7, #4]
9000349c:	6e89      	ldr	r1, [r1, #104]	; 0x68
9000349e:	fb01 f303 	mul.w	r3, r1, r3
900034a2:	009b      	lsls	r3, r3, #2
900034a4:	441a      	add	r2, r3
900034a6:	687b      	ldr	r3, [r7, #4]
900034a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
900034ac:	687b      	ldr	r3, [r7, #4]
900034ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
900034b2:	687b      	ldr	r3, [r7, #4]
900034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900034b6:	6879      	ldr	r1, [r7, #4]
900034b8:	6e89      	ldr	r1, [r1, #104]	; 0x68
900034ba:	fb01 f303 	mul.w	r3, r1, r3
900034be:	009b      	lsls	r3, r3, #2
900034c0:	441a      	add	r2, r3
900034c2:	687b      	ldr	r3, [r7, #4]
900034c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
900034c8:	687b      	ldr	r3, [r7, #4]
900034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900034ce:	4a04      	ldr	r2, [pc, #16]	; (900034e0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
900034d0:	4293      	cmp	r3, r2
900034d2:	d915      	bls.n	90003500 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
900034d4:	e006      	b.n	900034e4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
900034d6:	bf00      	nop
900034d8:	ffff0003 	.word	0xffff0003
900034dc:	10002b00 	.word	0x10002b00
900034e0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
900034e4:	687b      	ldr	r3, [r7, #4]
900034e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900034ea:	f043 0220 	orr.w	r2, r3, #32
900034ee:	687b      	ldr	r3, [r7, #4]
900034f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
900034f4:	687b      	ldr	r3, [r7, #4]
900034f6:	2203      	movs	r2, #3
900034f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
900034fc:	2301      	movs	r3, #1
900034fe:	e010      	b.n	90003522 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
90003500:	687b      	ldr	r3, [r7, #4]
90003502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90003504:	60fb      	str	r3, [r7, #12]
90003506:	e005      	b.n	90003514 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
90003508:	68fb      	ldr	r3, [r7, #12]
9000350a:	2200      	movs	r2, #0
9000350c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
9000350e:	68fb      	ldr	r3, [r7, #12]
90003510:	3304      	adds	r3, #4
90003512:	60fb      	str	r3, [r7, #12]
90003514:	687b      	ldr	r3, [r7, #4]
90003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000351a:	68fa      	ldr	r2, [r7, #12]
9000351c:	429a      	cmp	r2, r3
9000351e:	d3f3      	bcc.n	90003508 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
90003520:	2300      	movs	r3, #0
}
90003522:	4618      	mov	r0, r3
90003524:	3714      	adds	r7, #20
90003526:	46bd      	mov	sp, r7
90003528:	f85d 7b04 	ldr.w	r7, [sp], #4
9000352c:	4770      	bx	lr
9000352e:	bf00      	nop

90003530 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
90003530:	b480      	push	{r7}
90003532:	b089      	sub	sp, #36	; 0x24
90003534:	af00      	add	r7, sp, #0
90003536:	60f8      	str	r0, [r7, #12]
90003538:	60b9      	str	r1, [r7, #8]
9000353a:	607a      	str	r2, [r7, #4]
9000353c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
9000353e:	68bb      	ldr	r3, [r7, #8]
90003540:	685b      	ldr	r3, [r3, #4]
90003542:	2b00      	cmp	r3, #0
90003544:	d10a      	bne.n	9000355c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
90003546:	68bb      	ldr	r3, [r7, #8]
90003548:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
9000354a:	68bb      	ldr	r3, [r7, #8]
9000354c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
9000354e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
90003550:	68bb      	ldr	r3, [r7, #8]
90003552:	681b      	ldr	r3, [r3, #0]
90003554:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
90003556:	4313      	orrs	r3, r2
90003558:	61fb      	str	r3, [r7, #28]
9000355a:	e00a      	b.n	90003572 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
9000355c:	68bb      	ldr	r3, [r7, #8]
9000355e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
90003560:	68bb      	ldr	r3, [r7, #8]
90003562:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
90003564:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
90003566:	68bb      	ldr	r3, [r7, #8]
90003568:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
9000356a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
9000356c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90003570:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
90003572:	68bb      	ldr	r3, [r7, #8]
90003574:	6a1b      	ldr	r3, [r3, #32]
90003576:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
90003578:	68bb      	ldr	r3, [r7, #8]
9000357a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
9000357c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
9000357e:	68bb      	ldr	r3, [r7, #8]
90003580:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
90003582:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
90003584:	68bb      	ldr	r3, [r7, #8]
90003586:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
90003588:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
9000358a:	68bb      	ldr	r3, [r7, #8]
9000358c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
9000358e:	4313      	orrs	r3, r2
90003590:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
90003592:	68fb      	ldr	r3, [r7, #12]
90003594:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
90003598:	68fb      	ldr	r3, [r7, #12]
9000359a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
9000359c:	6839      	ldr	r1, [r7, #0]
9000359e:	fb01 f303 	mul.w	r3, r1, r3
900035a2:	009b      	lsls	r3, r3, #2
900035a4:	4413      	add	r3, r2
900035a6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
900035a8:	69bb      	ldr	r3, [r7, #24]
900035aa:	69fa      	ldr	r2, [r7, #28]
900035ac:	601a      	str	r2, [r3, #0]
  TxAddress++;
900035ae:	69bb      	ldr	r3, [r7, #24]
900035b0:	3304      	adds	r3, #4
900035b2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
900035b4:	69bb      	ldr	r3, [r7, #24]
900035b6:	693a      	ldr	r2, [r7, #16]
900035b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
900035ba:	69bb      	ldr	r3, [r7, #24]
900035bc:	3304      	adds	r3, #4
900035be:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
900035c0:	2300      	movs	r3, #0
900035c2:	617b      	str	r3, [r7, #20]
900035c4:	e020      	b.n	90003608 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
900035c6:	697b      	ldr	r3, [r7, #20]
900035c8:	3303      	adds	r3, #3
900035ca:	687a      	ldr	r2, [r7, #4]
900035cc:	4413      	add	r3, r2
900035ce:	781b      	ldrb	r3, [r3, #0]
900035d0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
900035d2:	697b      	ldr	r3, [r7, #20]
900035d4:	3302      	adds	r3, #2
900035d6:	6879      	ldr	r1, [r7, #4]
900035d8:	440b      	add	r3, r1
900035da:	781b      	ldrb	r3, [r3, #0]
900035dc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
900035de:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
900035e0:	697b      	ldr	r3, [r7, #20]
900035e2:	3301      	adds	r3, #1
900035e4:	6879      	ldr	r1, [r7, #4]
900035e6:	440b      	add	r3, r1
900035e8:	781b      	ldrb	r3, [r3, #0]
900035ea:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
900035ec:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
900035ee:	6879      	ldr	r1, [r7, #4]
900035f0:	697a      	ldr	r2, [r7, #20]
900035f2:	440a      	add	r2, r1
900035f4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
900035f6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
900035f8:	69bb      	ldr	r3, [r7, #24]
900035fa:	601a      	str	r2, [r3, #0]
    TxAddress++;
900035fc:	69bb      	ldr	r3, [r7, #24]
900035fe:	3304      	adds	r3, #4
90003600:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
90003602:	697b      	ldr	r3, [r7, #20]
90003604:	3304      	adds	r3, #4
90003606:	617b      	str	r3, [r7, #20]
90003608:	68bb      	ldr	r3, [r7, #8]
9000360a:	68db      	ldr	r3, [r3, #12]
9000360c:	0c1b      	lsrs	r3, r3, #16
9000360e:	4a06      	ldr	r2, [pc, #24]	; (90003628 <FDCAN_CopyMessageToRAM+0xf8>)
90003610:	5cd3      	ldrb	r3, [r2, r3]
90003612:	461a      	mov	r2, r3
90003614:	697b      	ldr	r3, [r7, #20]
90003616:	4293      	cmp	r3, r2
90003618:	d3d5      	bcc.n	900035c6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
9000361a:	bf00      	nop
9000361c:	bf00      	nop
9000361e:	3724      	adds	r7, #36	; 0x24
90003620:	46bd      	mov	sp, r7
90003622:	f85d 7b04 	ldr.w	r7, [sp], #4
90003626:	4770      	bx	lr
90003628:	90014078 	.word	0x90014078

9000362c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
9000362c:	b480      	push	{r7}
9000362e:	b089      	sub	sp, #36	; 0x24
90003630:	af00      	add	r7, sp, #0
90003632:	6078      	str	r0, [r7, #4]
90003634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003636:	2300      	movs	r3, #0
90003638:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
9000363a:	4b89      	ldr	r3, [pc, #548]	; (90003860 <HAL_GPIO_Init+0x234>)
9000363c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000363e:	e194      	b.n	9000396a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003640:	683b      	ldr	r3, [r7, #0]
90003642:	681a      	ldr	r2, [r3, #0]
90003644:	2101      	movs	r1, #1
90003646:	69fb      	ldr	r3, [r7, #28]
90003648:	fa01 f303 	lsl.w	r3, r1, r3
9000364c:	4013      	ands	r3, r2
9000364e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003650:	693b      	ldr	r3, [r7, #16]
90003652:	2b00      	cmp	r3, #0
90003654:	f000 8186 	beq.w	90003964 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003658:	683b      	ldr	r3, [r7, #0]
9000365a:	685b      	ldr	r3, [r3, #4]
9000365c:	f003 0303 	and.w	r3, r3, #3
90003660:	2b01      	cmp	r3, #1
90003662:	d005      	beq.n	90003670 <HAL_GPIO_Init+0x44>
90003664:	683b      	ldr	r3, [r7, #0]
90003666:	685b      	ldr	r3, [r3, #4]
90003668:	f003 0303 	and.w	r3, r3, #3
9000366c:	2b02      	cmp	r3, #2
9000366e:	d130      	bne.n	900036d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003670:	687b      	ldr	r3, [r7, #4]
90003672:	689b      	ldr	r3, [r3, #8]
90003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003676:	69fb      	ldr	r3, [r7, #28]
90003678:	005b      	lsls	r3, r3, #1
9000367a:	2203      	movs	r2, #3
9000367c:	fa02 f303 	lsl.w	r3, r2, r3
90003680:	43db      	mvns	r3, r3
90003682:	69ba      	ldr	r2, [r7, #24]
90003684:	4013      	ands	r3, r2
90003686:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003688:	683b      	ldr	r3, [r7, #0]
9000368a:	68da      	ldr	r2, [r3, #12]
9000368c:	69fb      	ldr	r3, [r7, #28]
9000368e:	005b      	lsls	r3, r3, #1
90003690:	fa02 f303 	lsl.w	r3, r2, r3
90003694:	69ba      	ldr	r2, [r7, #24]
90003696:	4313      	orrs	r3, r2
90003698:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
9000369a:	687b      	ldr	r3, [r7, #4]
9000369c:	69ba      	ldr	r2, [r7, #24]
9000369e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
900036a0:	687b      	ldr	r3, [r7, #4]
900036a2:	685b      	ldr	r3, [r3, #4]
900036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
900036a6:	2201      	movs	r2, #1
900036a8:	69fb      	ldr	r3, [r7, #28]
900036aa:	fa02 f303 	lsl.w	r3, r2, r3
900036ae:	43db      	mvns	r3, r3
900036b0:	69ba      	ldr	r2, [r7, #24]
900036b2:	4013      	ands	r3, r2
900036b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
900036b6:	683b      	ldr	r3, [r7, #0]
900036b8:	685b      	ldr	r3, [r3, #4]
900036ba:	091b      	lsrs	r3, r3, #4
900036bc:	f003 0201 	and.w	r2, r3, #1
900036c0:	69fb      	ldr	r3, [r7, #28]
900036c2:	fa02 f303 	lsl.w	r3, r2, r3
900036c6:	69ba      	ldr	r2, [r7, #24]
900036c8:	4313      	orrs	r3, r2
900036ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900036cc:	687b      	ldr	r3, [r7, #4]
900036ce:	69ba      	ldr	r2, [r7, #24]
900036d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900036d2:	683b      	ldr	r3, [r7, #0]
900036d4:	685b      	ldr	r3, [r3, #4]
900036d6:	f003 0303 	and.w	r3, r3, #3
900036da:	2b03      	cmp	r3, #3
900036dc:	d017      	beq.n	9000370e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
900036de:	687b      	ldr	r3, [r7, #4]
900036e0:	68db      	ldr	r3, [r3, #12]
900036e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900036e4:	69fb      	ldr	r3, [r7, #28]
900036e6:	005b      	lsls	r3, r3, #1
900036e8:	2203      	movs	r2, #3
900036ea:	fa02 f303 	lsl.w	r3, r2, r3
900036ee:	43db      	mvns	r3, r3
900036f0:	69ba      	ldr	r2, [r7, #24]
900036f2:	4013      	ands	r3, r2
900036f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
900036f6:	683b      	ldr	r3, [r7, #0]
900036f8:	689a      	ldr	r2, [r3, #8]
900036fa:	69fb      	ldr	r3, [r7, #28]
900036fc:	005b      	lsls	r3, r3, #1
900036fe:	fa02 f303 	lsl.w	r3, r2, r3
90003702:	69ba      	ldr	r2, [r7, #24]
90003704:	4313      	orrs	r3, r2
90003706:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003708:	687b      	ldr	r3, [r7, #4]
9000370a:	69ba      	ldr	r2, [r7, #24]
9000370c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000370e:	683b      	ldr	r3, [r7, #0]
90003710:	685b      	ldr	r3, [r3, #4]
90003712:	f003 0303 	and.w	r3, r3, #3
90003716:	2b02      	cmp	r3, #2
90003718:	d123      	bne.n	90003762 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
9000371a:	69fb      	ldr	r3, [r7, #28]
9000371c:	08da      	lsrs	r2, r3, #3
9000371e:	687b      	ldr	r3, [r7, #4]
90003720:	3208      	adds	r2, #8
90003722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003728:	69fb      	ldr	r3, [r7, #28]
9000372a:	f003 0307 	and.w	r3, r3, #7
9000372e:	009b      	lsls	r3, r3, #2
90003730:	220f      	movs	r2, #15
90003732:	fa02 f303 	lsl.w	r3, r2, r3
90003736:	43db      	mvns	r3, r3
90003738:	69ba      	ldr	r2, [r7, #24]
9000373a:	4013      	ands	r3, r2
9000373c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000373e:	683b      	ldr	r3, [r7, #0]
90003740:	691a      	ldr	r2, [r3, #16]
90003742:	69fb      	ldr	r3, [r7, #28]
90003744:	f003 0307 	and.w	r3, r3, #7
90003748:	009b      	lsls	r3, r3, #2
9000374a:	fa02 f303 	lsl.w	r3, r2, r3
9000374e:	69ba      	ldr	r2, [r7, #24]
90003750:	4313      	orrs	r3, r2
90003752:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003754:	69fb      	ldr	r3, [r7, #28]
90003756:	08da      	lsrs	r2, r3, #3
90003758:	687b      	ldr	r3, [r7, #4]
9000375a:	3208      	adds	r2, #8
9000375c:	69b9      	ldr	r1, [r7, #24]
9000375e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003762:	687b      	ldr	r3, [r7, #4]
90003764:	681b      	ldr	r3, [r3, #0]
90003766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003768:	69fb      	ldr	r3, [r7, #28]
9000376a:	005b      	lsls	r3, r3, #1
9000376c:	2203      	movs	r2, #3
9000376e:	fa02 f303 	lsl.w	r3, r2, r3
90003772:	43db      	mvns	r3, r3
90003774:	69ba      	ldr	r2, [r7, #24]
90003776:	4013      	ands	r3, r2
90003778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
9000377a:	683b      	ldr	r3, [r7, #0]
9000377c:	685b      	ldr	r3, [r3, #4]
9000377e:	f003 0203 	and.w	r2, r3, #3
90003782:	69fb      	ldr	r3, [r7, #28]
90003784:	005b      	lsls	r3, r3, #1
90003786:	fa02 f303 	lsl.w	r3, r2, r3
9000378a:	69ba      	ldr	r2, [r7, #24]
9000378c:	4313      	orrs	r3, r2
9000378e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003790:	687b      	ldr	r3, [r7, #4]
90003792:	69ba      	ldr	r2, [r7, #24]
90003794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003796:	683b      	ldr	r3, [r7, #0]
90003798:	685b      	ldr	r3, [r3, #4]
9000379a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
9000379e:	2b00      	cmp	r3, #0
900037a0:	f000 80e0 	beq.w	90003964 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900037a4:	4b2f      	ldr	r3, [pc, #188]	; (90003864 <HAL_GPIO_Init+0x238>)
900037a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900037aa:	4a2e      	ldr	r2, [pc, #184]	; (90003864 <HAL_GPIO_Init+0x238>)
900037ac:	f043 0302 	orr.w	r3, r3, #2
900037b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
900037b4:	4b2b      	ldr	r3, [pc, #172]	; (90003864 <HAL_GPIO_Init+0x238>)
900037b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900037ba:	f003 0302 	and.w	r3, r3, #2
900037be:	60fb      	str	r3, [r7, #12]
900037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
900037c2:	4a29      	ldr	r2, [pc, #164]	; (90003868 <HAL_GPIO_Init+0x23c>)
900037c4:	69fb      	ldr	r3, [r7, #28]
900037c6:	089b      	lsrs	r3, r3, #2
900037c8:	3302      	adds	r3, #2
900037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900037d0:	69fb      	ldr	r3, [r7, #28]
900037d2:	f003 0303 	and.w	r3, r3, #3
900037d6:	009b      	lsls	r3, r3, #2
900037d8:	220f      	movs	r2, #15
900037da:	fa02 f303 	lsl.w	r3, r2, r3
900037de:	43db      	mvns	r3, r3
900037e0:	69ba      	ldr	r2, [r7, #24]
900037e2:	4013      	ands	r3, r2
900037e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
900037e6:	687b      	ldr	r3, [r7, #4]
900037e8:	4a20      	ldr	r2, [pc, #128]	; (9000386c <HAL_GPIO_Init+0x240>)
900037ea:	4293      	cmp	r3, r2
900037ec:	d052      	beq.n	90003894 <HAL_GPIO_Init+0x268>
900037ee:	687b      	ldr	r3, [r7, #4]
900037f0:	4a1f      	ldr	r2, [pc, #124]	; (90003870 <HAL_GPIO_Init+0x244>)
900037f2:	4293      	cmp	r3, r2
900037f4:	d031      	beq.n	9000385a <HAL_GPIO_Init+0x22e>
900037f6:	687b      	ldr	r3, [r7, #4]
900037f8:	4a1e      	ldr	r2, [pc, #120]	; (90003874 <HAL_GPIO_Init+0x248>)
900037fa:	4293      	cmp	r3, r2
900037fc:	d02b      	beq.n	90003856 <HAL_GPIO_Init+0x22a>
900037fe:	687b      	ldr	r3, [r7, #4]
90003800:	4a1d      	ldr	r2, [pc, #116]	; (90003878 <HAL_GPIO_Init+0x24c>)
90003802:	4293      	cmp	r3, r2
90003804:	d025      	beq.n	90003852 <HAL_GPIO_Init+0x226>
90003806:	687b      	ldr	r3, [r7, #4]
90003808:	4a1c      	ldr	r2, [pc, #112]	; (9000387c <HAL_GPIO_Init+0x250>)
9000380a:	4293      	cmp	r3, r2
9000380c:	d01f      	beq.n	9000384e <HAL_GPIO_Init+0x222>
9000380e:	687b      	ldr	r3, [r7, #4]
90003810:	4a1b      	ldr	r2, [pc, #108]	; (90003880 <HAL_GPIO_Init+0x254>)
90003812:	4293      	cmp	r3, r2
90003814:	d019      	beq.n	9000384a <HAL_GPIO_Init+0x21e>
90003816:	687b      	ldr	r3, [r7, #4]
90003818:	4a1a      	ldr	r2, [pc, #104]	; (90003884 <HAL_GPIO_Init+0x258>)
9000381a:	4293      	cmp	r3, r2
9000381c:	d013      	beq.n	90003846 <HAL_GPIO_Init+0x21a>
9000381e:	687b      	ldr	r3, [r7, #4]
90003820:	4a19      	ldr	r2, [pc, #100]	; (90003888 <HAL_GPIO_Init+0x25c>)
90003822:	4293      	cmp	r3, r2
90003824:	d00d      	beq.n	90003842 <HAL_GPIO_Init+0x216>
90003826:	687b      	ldr	r3, [r7, #4]
90003828:	4a18      	ldr	r2, [pc, #96]	; (9000388c <HAL_GPIO_Init+0x260>)
9000382a:	4293      	cmp	r3, r2
9000382c:	d007      	beq.n	9000383e <HAL_GPIO_Init+0x212>
9000382e:	687b      	ldr	r3, [r7, #4]
90003830:	4a17      	ldr	r2, [pc, #92]	; (90003890 <HAL_GPIO_Init+0x264>)
90003832:	4293      	cmp	r3, r2
90003834:	d101      	bne.n	9000383a <HAL_GPIO_Init+0x20e>
90003836:	2309      	movs	r3, #9
90003838:	e02d      	b.n	90003896 <HAL_GPIO_Init+0x26a>
9000383a:	230a      	movs	r3, #10
9000383c:	e02b      	b.n	90003896 <HAL_GPIO_Init+0x26a>
9000383e:	2308      	movs	r3, #8
90003840:	e029      	b.n	90003896 <HAL_GPIO_Init+0x26a>
90003842:	2307      	movs	r3, #7
90003844:	e027      	b.n	90003896 <HAL_GPIO_Init+0x26a>
90003846:	2306      	movs	r3, #6
90003848:	e025      	b.n	90003896 <HAL_GPIO_Init+0x26a>
9000384a:	2305      	movs	r3, #5
9000384c:	e023      	b.n	90003896 <HAL_GPIO_Init+0x26a>
9000384e:	2304      	movs	r3, #4
90003850:	e021      	b.n	90003896 <HAL_GPIO_Init+0x26a>
90003852:	2303      	movs	r3, #3
90003854:	e01f      	b.n	90003896 <HAL_GPIO_Init+0x26a>
90003856:	2302      	movs	r3, #2
90003858:	e01d      	b.n	90003896 <HAL_GPIO_Init+0x26a>
9000385a:	2301      	movs	r3, #1
9000385c:	e01b      	b.n	90003896 <HAL_GPIO_Init+0x26a>
9000385e:	bf00      	nop
90003860:	58000080 	.word	0x58000080
90003864:	58024400 	.word	0x58024400
90003868:	58000400 	.word	0x58000400
9000386c:	58020000 	.word	0x58020000
90003870:	58020400 	.word	0x58020400
90003874:	58020800 	.word	0x58020800
90003878:	58020c00 	.word	0x58020c00
9000387c:	58021000 	.word	0x58021000
90003880:	58021400 	.word	0x58021400
90003884:	58021800 	.word	0x58021800
90003888:	58021c00 	.word	0x58021c00
9000388c:	58022000 	.word	0x58022000
90003890:	58022400 	.word	0x58022400
90003894:	2300      	movs	r3, #0
90003896:	69fa      	ldr	r2, [r7, #28]
90003898:	f002 0203 	and.w	r2, r2, #3
9000389c:	0092      	lsls	r2, r2, #2
9000389e:	4093      	lsls	r3, r2
900038a0:	69ba      	ldr	r2, [r7, #24]
900038a2:	4313      	orrs	r3, r2
900038a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
900038a6:	4938      	ldr	r1, [pc, #224]	; (90003988 <HAL_GPIO_Init+0x35c>)
900038a8:	69fb      	ldr	r3, [r7, #28]
900038aa:	089b      	lsrs	r3, r3, #2
900038ac:	3302      	adds	r3, #2
900038ae:	69ba      	ldr	r2, [r7, #24]
900038b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
900038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
900038b8:	681b      	ldr	r3, [r3, #0]
900038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900038bc:	693b      	ldr	r3, [r7, #16]
900038be:	43db      	mvns	r3, r3
900038c0:	69ba      	ldr	r2, [r7, #24]
900038c2:	4013      	ands	r3, r2
900038c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
900038c6:	683b      	ldr	r3, [r7, #0]
900038c8:	685b      	ldr	r3, [r3, #4]
900038ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900038ce:	2b00      	cmp	r3, #0
900038d0:	d003      	beq.n	900038da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
900038d2:	69ba      	ldr	r2, [r7, #24]
900038d4:	693b      	ldr	r3, [r7, #16]
900038d6:	4313      	orrs	r3, r2
900038d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
900038da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
900038de:	69bb      	ldr	r3, [r7, #24]
900038e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
900038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
900038e6:	685b      	ldr	r3, [r3, #4]
900038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900038ea:	693b      	ldr	r3, [r7, #16]
900038ec:	43db      	mvns	r3, r3
900038ee:	69ba      	ldr	r2, [r7, #24]
900038f0:	4013      	ands	r3, r2
900038f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
900038f4:	683b      	ldr	r3, [r7, #0]
900038f6:	685b      	ldr	r3, [r3, #4]
900038f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900038fc:	2b00      	cmp	r3, #0
900038fe:	d003      	beq.n	90003908 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003900:	69ba      	ldr	r2, [r7, #24]
90003902:	693b      	ldr	r3, [r7, #16]
90003904:	4313      	orrs	r3, r2
90003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
9000390c:	69bb      	ldr	r3, [r7, #24]
9000390e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003910:	697b      	ldr	r3, [r7, #20]
90003912:	685b      	ldr	r3, [r3, #4]
90003914:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003916:	693b      	ldr	r3, [r7, #16]
90003918:	43db      	mvns	r3, r3
9000391a:	69ba      	ldr	r2, [r7, #24]
9000391c:	4013      	ands	r3, r2
9000391e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003920:	683b      	ldr	r3, [r7, #0]
90003922:	685b      	ldr	r3, [r3, #4]
90003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003928:	2b00      	cmp	r3, #0
9000392a:	d003      	beq.n	90003934 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
9000392c:	69ba      	ldr	r2, [r7, #24]
9000392e:	693b      	ldr	r3, [r7, #16]
90003930:	4313      	orrs	r3, r2
90003932:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003934:	697b      	ldr	r3, [r7, #20]
90003936:	69ba      	ldr	r2, [r7, #24]
90003938:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
9000393a:	697b      	ldr	r3, [r7, #20]
9000393c:	681b      	ldr	r3, [r3, #0]
9000393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003940:	693b      	ldr	r3, [r7, #16]
90003942:	43db      	mvns	r3, r3
90003944:	69ba      	ldr	r2, [r7, #24]
90003946:	4013      	ands	r3, r2
90003948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
9000394a:	683b      	ldr	r3, [r7, #0]
9000394c:	685b      	ldr	r3, [r3, #4]
9000394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90003952:	2b00      	cmp	r3, #0
90003954:	d003      	beq.n	9000395e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90003956:	69ba      	ldr	r2, [r7, #24]
90003958:	693b      	ldr	r3, [r7, #16]
9000395a:	4313      	orrs	r3, r2
9000395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
9000395e:	697b      	ldr	r3, [r7, #20]
90003960:	69ba      	ldr	r2, [r7, #24]
90003962:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90003964:	69fb      	ldr	r3, [r7, #28]
90003966:	3301      	adds	r3, #1
90003968:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000396a:	683b      	ldr	r3, [r7, #0]
9000396c:	681a      	ldr	r2, [r3, #0]
9000396e:	69fb      	ldr	r3, [r7, #28]
90003970:	fa22 f303 	lsr.w	r3, r2, r3
90003974:	2b00      	cmp	r3, #0
90003976:	f47f ae63 	bne.w	90003640 <HAL_GPIO_Init+0x14>
  }
}
9000397a:	bf00      	nop
9000397c:	bf00      	nop
9000397e:	3724      	adds	r7, #36	; 0x24
90003980:	46bd      	mov	sp, r7
90003982:	f85d 7b04 	ldr.w	r7, [sp], #4
90003986:	4770      	bx	lr
90003988:	58000400 	.word	0x58000400

9000398c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
9000398c:	b480      	push	{r7}
9000398e:	b087      	sub	sp, #28
90003990:	af00      	add	r7, sp, #0
90003992:	6078      	str	r0, [r7, #4]
90003994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003996:	2300      	movs	r3, #0
90003998:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
9000399a:	4b75      	ldr	r3, [pc, #468]	; (90003b70 <HAL_GPIO_DeInit+0x1e4>)
9000399c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
9000399e:	e0d9      	b.n	90003b54 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
900039a0:	2201      	movs	r2, #1
900039a2:	697b      	ldr	r3, [r7, #20]
900039a4:	fa02 f303 	lsl.w	r3, r2, r3
900039a8:	683a      	ldr	r2, [r7, #0]
900039aa:	4013      	ands	r3, r2
900039ac:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
900039ae:	68fb      	ldr	r3, [r7, #12]
900039b0:	2b00      	cmp	r3, #0
900039b2:	f000 80cc 	beq.w	90003b4e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
900039b6:	4a6f      	ldr	r2, [pc, #444]	; (90003b74 <HAL_GPIO_DeInit+0x1e8>)
900039b8:	697b      	ldr	r3, [r7, #20]
900039ba:	089b      	lsrs	r3, r3, #2
900039bc:	3302      	adds	r3, #2
900039be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900039c2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
900039c4:	697b      	ldr	r3, [r7, #20]
900039c6:	f003 0303 	and.w	r3, r3, #3
900039ca:	009b      	lsls	r3, r3, #2
900039cc:	220f      	movs	r2, #15
900039ce:	fa02 f303 	lsl.w	r3, r2, r3
900039d2:	68ba      	ldr	r2, [r7, #8]
900039d4:	4013      	ands	r3, r2
900039d6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900039d8:	687b      	ldr	r3, [r7, #4]
900039da:	4a67      	ldr	r2, [pc, #412]	; (90003b78 <HAL_GPIO_DeInit+0x1ec>)
900039dc:	4293      	cmp	r3, r2
900039de:	d037      	beq.n	90003a50 <HAL_GPIO_DeInit+0xc4>
900039e0:	687b      	ldr	r3, [r7, #4]
900039e2:	4a66      	ldr	r2, [pc, #408]	; (90003b7c <HAL_GPIO_DeInit+0x1f0>)
900039e4:	4293      	cmp	r3, r2
900039e6:	d031      	beq.n	90003a4c <HAL_GPIO_DeInit+0xc0>
900039e8:	687b      	ldr	r3, [r7, #4]
900039ea:	4a65      	ldr	r2, [pc, #404]	; (90003b80 <HAL_GPIO_DeInit+0x1f4>)
900039ec:	4293      	cmp	r3, r2
900039ee:	d02b      	beq.n	90003a48 <HAL_GPIO_DeInit+0xbc>
900039f0:	687b      	ldr	r3, [r7, #4]
900039f2:	4a64      	ldr	r2, [pc, #400]	; (90003b84 <HAL_GPIO_DeInit+0x1f8>)
900039f4:	4293      	cmp	r3, r2
900039f6:	d025      	beq.n	90003a44 <HAL_GPIO_DeInit+0xb8>
900039f8:	687b      	ldr	r3, [r7, #4]
900039fa:	4a63      	ldr	r2, [pc, #396]	; (90003b88 <HAL_GPIO_DeInit+0x1fc>)
900039fc:	4293      	cmp	r3, r2
900039fe:	d01f      	beq.n	90003a40 <HAL_GPIO_DeInit+0xb4>
90003a00:	687b      	ldr	r3, [r7, #4]
90003a02:	4a62      	ldr	r2, [pc, #392]	; (90003b8c <HAL_GPIO_DeInit+0x200>)
90003a04:	4293      	cmp	r3, r2
90003a06:	d019      	beq.n	90003a3c <HAL_GPIO_DeInit+0xb0>
90003a08:	687b      	ldr	r3, [r7, #4]
90003a0a:	4a61      	ldr	r2, [pc, #388]	; (90003b90 <HAL_GPIO_DeInit+0x204>)
90003a0c:	4293      	cmp	r3, r2
90003a0e:	d013      	beq.n	90003a38 <HAL_GPIO_DeInit+0xac>
90003a10:	687b      	ldr	r3, [r7, #4]
90003a12:	4a60      	ldr	r2, [pc, #384]	; (90003b94 <HAL_GPIO_DeInit+0x208>)
90003a14:	4293      	cmp	r3, r2
90003a16:	d00d      	beq.n	90003a34 <HAL_GPIO_DeInit+0xa8>
90003a18:	687b      	ldr	r3, [r7, #4]
90003a1a:	4a5f      	ldr	r2, [pc, #380]	; (90003b98 <HAL_GPIO_DeInit+0x20c>)
90003a1c:	4293      	cmp	r3, r2
90003a1e:	d007      	beq.n	90003a30 <HAL_GPIO_DeInit+0xa4>
90003a20:	687b      	ldr	r3, [r7, #4]
90003a22:	4a5e      	ldr	r2, [pc, #376]	; (90003b9c <HAL_GPIO_DeInit+0x210>)
90003a24:	4293      	cmp	r3, r2
90003a26:	d101      	bne.n	90003a2c <HAL_GPIO_DeInit+0xa0>
90003a28:	2309      	movs	r3, #9
90003a2a:	e012      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a2c:	230a      	movs	r3, #10
90003a2e:	e010      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a30:	2308      	movs	r3, #8
90003a32:	e00e      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a34:	2307      	movs	r3, #7
90003a36:	e00c      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a38:	2306      	movs	r3, #6
90003a3a:	e00a      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a3c:	2305      	movs	r3, #5
90003a3e:	e008      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a40:	2304      	movs	r3, #4
90003a42:	e006      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a44:	2303      	movs	r3, #3
90003a46:	e004      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a48:	2302      	movs	r3, #2
90003a4a:	e002      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a4c:	2301      	movs	r3, #1
90003a4e:	e000      	b.n	90003a52 <HAL_GPIO_DeInit+0xc6>
90003a50:	2300      	movs	r3, #0
90003a52:	697a      	ldr	r2, [r7, #20]
90003a54:	f002 0203 	and.w	r2, r2, #3
90003a58:	0092      	lsls	r2, r2, #2
90003a5a:	4093      	lsls	r3, r2
90003a5c:	68ba      	ldr	r2, [r7, #8]
90003a5e:	429a      	cmp	r2, r3
90003a60:	d136      	bne.n	90003ad0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90003a62:	693b      	ldr	r3, [r7, #16]
90003a64:	681a      	ldr	r2, [r3, #0]
90003a66:	68fb      	ldr	r3, [r7, #12]
90003a68:	43db      	mvns	r3, r3
90003a6a:	401a      	ands	r2, r3
90003a6c:	693b      	ldr	r3, [r7, #16]
90003a6e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90003a70:	693b      	ldr	r3, [r7, #16]
90003a72:	685a      	ldr	r2, [r3, #4]
90003a74:	68fb      	ldr	r3, [r7, #12]
90003a76:	43db      	mvns	r3, r3
90003a78:	401a      	ands	r2, r3
90003a7a:	693b      	ldr	r3, [r7, #16]
90003a7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003a82:	685a      	ldr	r2, [r3, #4]
90003a84:	68fb      	ldr	r3, [r7, #12]
90003a86:	43db      	mvns	r3, r3
90003a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
90003a8c:	4013      	ands	r3, r2
90003a8e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003a94:	681a      	ldr	r2, [r3, #0]
90003a96:	68fb      	ldr	r3, [r7, #12]
90003a98:	43db      	mvns	r3, r3
90003a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
90003a9e:	4013      	ands	r3, r2
90003aa0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
90003aa2:	697b      	ldr	r3, [r7, #20]
90003aa4:	f003 0303 	and.w	r3, r3, #3
90003aa8:	009b      	lsls	r3, r3, #2
90003aaa:	220f      	movs	r2, #15
90003aac:	fa02 f303 	lsl.w	r3, r2, r3
90003ab0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90003ab2:	4a30      	ldr	r2, [pc, #192]	; (90003b74 <HAL_GPIO_DeInit+0x1e8>)
90003ab4:	697b      	ldr	r3, [r7, #20]
90003ab6:	089b      	lsrs	r3, r3, #2
90003ab8:	3302      	adds	r3, #2
90003aba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90003abe:	68bb      	ldr	r3, [r7, #8]
90003ac0:	43da      	mvns	r2, r3
90003ac2:	482c      	ldr	r0, [pc, #176]	; (90003b74 <HAL_GPIO_DeInit+0x1e8>)
90003ac4:	697b      	ldr	r3, [r7, #20]
90003ac6:	089b      	lsrs	r3, r3, #2
90003ac8:	400a      	ands	r2, r1
90003aca:	3302      	adds	r3, #2
90003acc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90003ad0:	687b      	ldr	r3, [r7, #4]
90003ad2:	681a      	ldr	r2, [r3, #0]
90003ad4:	697b      	ldr	r3, [r7, #20]
90003ad6:	005b      	lsls	r3, r3, #1
90003ad8:	2103      	movs	r1, #3
90003ada:	fa01 f303 	lsl.w	r3, r1, r3
90003ade:	431a      	orrs	r2, r3
90003ae0:	687b      	ldr	r3, [r7, #4]
90003ae2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90003ae4:	697b      	ldr	r3, [r7, #20]
90003ae6:	08da      	lsrs	r2, r3, #3
90003ae8:	687b      	ldr	r3, [r7, #4]
90003aea:	3208      	adds	r2, #8
90003aec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90003af0:	697b      	ldr	r3, [r7, #20]
90003af2:	f003 0307 	and.w	r3, r3, #7
90003af6:	009b      	lsls	r3, r3, #2
90003af8:	220f      	movs	r2, #15
90003afa:	fa02 f303 	lsl.w	r3, r2, r3
90003afe:	43db      	mvns	r3, r3
90003b00:	697a      	ldr	r2, [r7, #20]
90003b02:	08d2      	lsrs	r2, r2, #3
90003b04:	4019      	ands	r1, r3
90003b06:	687b      	ldr	r3, [r7, #4]
90003b08:	3208      	adds	r2, #8
90003b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003b0e:	687b      	ldr	r3, [r7, #4]
90003b10:	68da      	ldr	r2, [r3, #12]
90003b12:	697b      	ldr	r3, [r7, #20]
90003b14:	005b      	lsls	r3, r3, #1
90003b16:	2103      	movs	r1, #3
90003b18:	fa01 f303 	lsl.w	r3, r1, r3
90003b1c:	43db      	mvns	r3, r3
90003b1e:	401a      	ands	r2, r3
90003b20:	687b      	ldr	r3, [r7, #4]
90003b22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90003b24:	687b      	ldr	r3, [r7, #4]
90003b26:	685a      	ldr	r2, [r3, #4]
90003b28:	2101      	movs	r1, #1
90003b2a:	697b      	ldr	r3, [r7, #20]
90003b2c:	fa01 f303 	lsl.w	r3, r1, r3
90003b30:	43db      	mvns	r3, r3
90003b32:	401a      	ands	r2, r3
90003b34:	687b      	ldr	r3, [r7, #4]
90003b36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003b38:	687b      	ldr	r3, [r7, #4]
90003b3a:	689a      	ldr	r2, [r3, #8]
90003b3c:	697b      	ldr	r3, [r7, #20]
90003b3e:	005b      	lsls	r3, r3, #1
90003b40:	2103      	movs	r1, #3
90003b42:	fa01 f303 	lsl.w	r3, r1, r3
90003b46:	43db      	mvns	r3, r3
90003b48:	401a      	ands	r2, r3
90003b4a:	687b      	ldr	r3, [r7, #4]
90003b4c:	609a      	str	r2, [r3, #8]
    }

    position++;
90003b4e:	697b      	ldr	r3, [r7, #20]
90003b50:	3301      	adds	r3, #1
90003b52:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
90003b54:	683a      	ldr	r2, [r7, #0]
90003b56:	697b      	ldr	r3, [r7, #20]
90003b58:	fa22 f303 	lsr.w	r3, r2, r3
90003b5c:	2b00      	cmp	r3, #0
90003b5e:	f47f af1f 	bne.w	900039a0 <HAL_GPIO_DeInit+0x14>
  }
}
90003b62:	bf00      	nop
90003b64:	bf00      	nop
90003b66:	371c      	adds	r7, #28
90003b68:	46bd      	mov	sp, r7
90003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b6e:	4770      	bx	lr
90003b70:	58000080 	.word	0x58000080
90003b74:	58000400 	.word	0x58000400
90003b78:	58020000 	.word	0x58020000
90003b7c:	58020400 	.word	0x58020400
90003b80:	58020800 	.word	0x58020800
90003b84:	58020c00 	.word	0x58020c00
90003b88:	58021000 	.word	0x58021000
90003b8c:	58021400 	.word	0x58021400
90003b90:	58021800 	.word	0x58021800
90003b94:	58021c00 	.word	0x58021c00
90003b98:	58022000 	.word	0x58022000
90003b9c:	58022400 	.word	0x58022400

90003ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90003ba0:	b480      	push	{r7}
90003ba2:	b083      	sub	sp, #12
90003ba4:	af00      	add	r7, sp, #0
90003ba6:	6078      	str	r0, [r7, #4]
90003ba8:	460b      	mov	r3, r1
90003baa:	807b      	strh	r3, [r7, #2]
90003bac:	4613      	mov	r3, r2
90003bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90003bb0:	787b      	ldrb	r3, [r7, #1]
90003bb2:	2b00      	cmp	r3, #0
90003bb4:	d003      	beq.n	90003bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90003bb6:	887a      	ldrh	r2, [r7, #2]
90003bb8:	687b      	ldr	r3, [r7, #4]
90003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90003bbc:	e003      	b.n	90003bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90003bbe:	887b      	ldrh	r3, [r7, #2]
90003bc0:	041a      	lsls	r2, r3, #16
90003bc2:	687b      	ldr	r3, [r7, #4]
90003bc4:	619a      	str	r2, [r3, #24]
}
90003bc6:	bf00      	nop
90003bc8:	370c      	adds	r7, #12
90003bca:	46bd      	mov	sp, r7
90003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
90003bd0:	4770      	bx	lr
	...

90003bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
90003bd4:	b580      	push	{r7, lr}
90003bd6:	b082      	sub	sp, #8
90003bd8:	af00      	add	r7, sp, #0
90003bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90003bdc:	687b      	ldr	r3, [r7, #4]
90003bde:	2b00      	cmp	r3, #0
90003be0:	d101      	bne.n	90003be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
90003be2:	2301      	movs	r3, #1
90003be4:	e07f      	b.n	90003ce6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
90003be6:	687b      	ldr	r3, [r7, #4]
90003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90003bec:	b2db      	uxtb	r3, r3
90003bee:	2b00      	cmp	r3, #0
90003bf0:	d106      	bne.n	90003c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
90003bf2:	687b      	ldr	r3, [r7, #4]
90003bf4:	2200      	movs	r2, #0
90003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90003bfa:	6878      	ldr	r0, [r7, #4]
90003bfc:	f7fc ff9c 	bl	90000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90003c00:	687b      	ldr	r3, [r7, #4]
90003c02:	2224      	movs	r2, #36	; 0x24
90003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90003c08:	687b      	ldr	r3, [r7, #4]
90003c0a:	681b      	ldr	r3, [r3, #0]
90003c0c:	681a      	ldr	r2, [r3, #0]
90003c0e:	687b      	ldr	r3, [r7, #4]
90003c10:	681b      	ldr	r3, [r3, #0]
90003c12:	f022 0201 	bic.w	r2, r2, #1
90003c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90003c18:	687b      	ldr	r3, [r7, #4]
90003c1a:	685a      	ldr	r2, [r3, #4]
90003c1c:	687b      	ldr	r3, [r7, #4]
90003c1e:	681b      	ldr	r3, [r3, #0]
90003c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
90003c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90003c26:	687b      	ldr	r3, [r7, #4]
90003c28:	681b      	ldr	r3, [r3, #0]
90003c2a:	689a      	ldr	r2, [r3, #8]
90003c2c:	687b      	ldr	r3, [r7, #4]
90003c2e:	681b      	ldr	r3, [r3, #0]
90003c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90003c36:	687b      	ldr	r3, [r7, #4]
90003c38:	68db      	ldr	r3, [r3, #12]
90003c3a:	2b01      	cmp	r3, #1
90003c3c:	d107      	bne.n	90003c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90003c3e:	687b      	ldr	r3, [r7, #4]
90003c40:	689a      	ldr	r2, [r3, #8]
90003c42:	687b      	ldr	r3, [r7, #4]
90003c44:	681b      	ldr	r3, [r3, #0]
90003c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90003c4a:	609a      	str	r2, [r3, #8]
90003c4c:	e006      	b.n	90003c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90003c4e:	687b      	ldr	r3, [r7, #4]
90003c50:	689a      	ldr	r2, [r3, #8]
90003c52:	687b      	ldr	r3, [r7, #4]
90003c54:	681b      	ldr	r3, [r3, #0]
90003c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
90003c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90003c5c:	687b      	ldr	r3, [r7, #4]
90003c5e:	68db      	ldr	r3, [r3, #12]
90003c60:	2b02      	cmp	r3, #2
90003c62:	d104      	bne.n	90003c6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90003c64:	687b      	ldr	r3, [r7, #4]
90003c66:	681b      	ldr	r3, [r3, #0]
90003c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
90003c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90003c6e:	687b      	ldr	r3, [r7, #4]
90003c70:	681b      	ldr	r3, [r3, #0]
90003c72:	6859      	ldr	r1, [r3, #4]
90003c74:	687b      	ldr	r3, [r7, #4]
90003c76:	681a      	ldr	r2, [r3, #0]
90003c78:	4b1d      	ldr	r3, [pc, #116]	; (90003cf0 <HAL_I2C_Init+0x11c>)
90003c7a:	430b      	orrs	r3, r1
90003c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90003c7e:	687b      	ldr	r3, [r7, #4]
90003c80:	681b      	ldr	r3, [r3, #0]
90003c82:	68da      	ldr	r2, [r3, #12]
90003c84:	687b      	ldr	r3, [r7, #4]
90003c86:	681b      	ldr	r3, [r3, #0]
90003c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90003c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90003c8e:	687b      	ldr	r3, [r7, #4]
90003c90:	691a      	ldr	r2, [r3, #16]
90003c92:	687b      	ldr	r3, [r7, #4]
90003c94:	695b      	ldr	r3, [r3, #20]
90003c96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90003c9a:	687b      	ldr	r3, [r7, #4]
90003c9c:	699b      	ldr	r3, [r3, #24]
90003c9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90003ca0:	687b      	ldr	r3, [r7, #4]
90003ca2:	681b      	ldr	r3, [r3, #0]
90003ca4:	430a      	orrs	r2, r1
90003ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90003ca8:	687b      	ldr	r3, [r7, #4]
90003caa:	69d9      	ldr	r1, [r3, #28]
90003cac:	687b      	ldr	r3, [r7, #4]
90003cae:	6a1a      	ldr	r2, [r3, #32]
90003cb0:	687b      	ldr	r3, [r7, #4]
90003cb2:	681b      	ldr	r3, [r3, #0]
90003cb4:	430a      	orrs	r2, r1
90003cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90003cb8:	687b      	ldr	r3, [r7, #4]
90003cba:	681b      	ldr	r3, [r3, #0]
90003cbc:	681a      	ldr	r2, [r3, #0]
90003cbe:	687b      	ldr	r3, [r7, #4]
90003cc0:	681b      	ldr	r3, [r3, #0]
90003cc2:	f042 0201 	orr.w	r2, r2, #1
90003cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003cc8:	687b      	ldr	r3, [r7, #4]
90003cca:	2200      	movs	r2, #0
90003ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90003cce:	687b      	ldr	r3, [r7, #4]
90003cd0:	2220      	movs	r2, #32
90003cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90003cd6:	687b      	ldr	r3, [r7, #4]
90003cd8:	2200      	movs	r2, #0
90003cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90003cdc:	687b      	ldr	r3, [r7, #4]
90003cde:	2200      	movs	r2, #0
90003ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
90003ce4:	2300      	movs	r3, #0
}
90003ce6:	4618      	mov	r0, r3
90003ce8:	3708      	adds	r7, #8
90003cea:	46bd      	mov	sp, r7
90003cec:	bd80      	pop	{r7, pc}
90003cee:	bf00      	nop
90003cf0:	02008000 	.word	0x02008000

90003cf4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
90003cf4:	b580      	push	{r7, lr}
90003cf6:	b082      	sub	sp, #8
90003cf8:	af00      	add	r7, sp, #0
90003cfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90003cfc:	687b      	ldr	r3, [r7, #4]
90003cfe:	2b00      	cmp	r3, #0
90003d00:	d101      	bne.n	90003d06 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
90003d02:	2301      	movs	r3, #1
90003d04:	e021      	b.n	90003d4a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
90003d06:	687b      	ldr	r3, [r7, #4]
90003d08:	2224      	movs	r2, #36	; 0x24
90003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
90003d0e:	687b      	ldr	r3, [r7, #4]
90003d10:	681b      	ldr	r3, [r3, #0]
90003d12:	681a      	ldr	r2, [r3, #0]
90003d14:	687b      	ldr	r3, [r7, #4]
90003d16:	681b      	ldr	r3, [r3, #0]
90003d18:	f022 0201 	bic.w	r2, r2, #1
90003d1c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
90003d1e:	6878      	ldr	r0, [r7, #4]
90003d20:	f7fd f83c 	bl	90000d9c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003d24:	687b      	ldr	r3, [r7, #4]
90003d26:	2200      	movs	r2, #0
90003d28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
90003d2a:	687b      	ldr	r3, [r7, #4]
90003d2c:	2200      	movs	r2, #0
90003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90003d32:	687b      	ldr	r3, [r7, #4]
90003d34:	2200      	movs	r2, #0
90003d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90003d38:	687b      	ldr	r3, [r7, #4]
90003d3a:	2200      	movs	r2, #0
90003d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
90003d40:	687b      	ldr	r3, [r7, #4]
90003d42:	2200      	movs	r2, #0
90003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
90003d48:	2300      	movs	r3, #0
}
90003d4a:	4618      	mov	r0, r3
90003d4c:	3708      	adds	r7, #8
90003d4e:	46bd      	mov	sp, r7
90003d50:	bd80      	pop	{r7, pc}
	...

90003d54 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
90003d54:	b580      	push	{r7, lr}
90003d56:	b08a      	sub	sp, #40	; 0x28
90003d58:	af02      	add	r7, sp, #8
90003d5a:	60f8      	str	r0, [r7, #12]
90003d5c:	607a      	str	r2, [r7, #4]
90003d5e:	603b      	str	r3, [r7, #0]
90003d60:	460b      	mov	r3, r1
90003d62:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
90003d64:	2300      	movs	r3, #0
90003d66:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
90003d68:	68fb      	ldr	r3, [r7, #12]
90003d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90003d6e:	b2db      	uxtb	r3, r3
90003d70:	2b20      	cmp	r3, #32
90003d72:	f040 80ef 	bne.w	90003f54 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
90003d76:	68fb      	ldr	r3, [r7, #12]
90003d78:	681b      	ldr	r3, [r3, #0]
90003d7a:	699b      	ldr	r3, [r3, #24]
90003d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90003d84:	d101      	bne.n	90003d8a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
90003d86:	2302      	movs	r3, #2
90003d88:	e0e5      	b.n	90003f56 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90003d8a:	68fb      	ldr	r3, [r7, #12]
90003d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90003d90:	2b01      	cmp	r3, #1
90003d92:	d101      	bne.n	90003d98 <HAL_I2C_IsDeviceReady+0x44>
90003d94:	2302      	movs	r3, #2
90003d96:	e0de      	b.n	90003f56 <HAL_I2C_IsDeviceReady+0x202>
90003d98:	68fb      	ldr	r3, [r7, #12]
90003d9a:	2201      	movs	r2, #1
90003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90003da0:	68fb      	ldr	r3, [r7, #12]
90003da2:	2224      	movs	r2, #36	; 0x24
90003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90003da8:	68fb      	ldr	r3, [r7, #12]
90003daa:	2200      	movs	r2, #0
90003dac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
90003dae:	68fb      	ldr	r3, [r7, #12]
90003db0:	68db      	ldr	r3, [r3, #12]
90003db2:	2b01      	cmp	r3, #1
90003db4:	d105      	bne.n	90003dc2 <HAL_I2C_IsDeviceReady+0x6e>
90003db6:	897b      	ldrh	r3, [r7, #10]
90003db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
90003dbc:	4b68      	ldr	r3, [pc, #416]	; (90003f60 <HAL_I2C_IsDeviceReady+0x20c>)
90003dbe:	4313      	orrs	r3, r2
90003dc0:	e004      	b.n	90003dcc <HAL_I2C_IsDeviceReady+0x78>
90003dc2:	897b      	ldrh	r3, [r7, #10]
90003dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
90003dc8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
90003dcc:	68fa      	ldr	r2, [r7, #12]
90003dce:	6812      	ldr	r2, [r2, #0]
90003dd0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
90003dd2:	f7fe f8fb 	bl	90001fcc <HAL_GetTick>
90003dd6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
90003dd8:	68fb      	ldr	r3, [r7, #12]
90003dda:	681b      	ldr	r3, [r3, #0]
90003ddc:	699b      	ldr	r3, [r3, #24]
90003dde:	f003 0320 	and.w	r3, r3, #32
90003de2:	2b20      	cmp	r3, #32
90003de4:	bf0c      	ite	eq
90003de6:	2301      	moveq	r3, #1
90003de8:	2300      	movne	r3, #0
90003dea:	b2db      	uxtb	r3, r3
90003dec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
90003dee:	68fb      	ldr	r3, [r7, #12]
90003df0:	681b      	ldr	r3, [r3, #0]
90003df2:	699b      	ldr	r3, [r3, #24]
90003df4:	f003 0310 	and.w	r3, r3, #16
90003df8:	2b10      	cmp	r3, #16
90003dfa:	bf0c      	ite	eq
90003dfc:	2301      	moveq	r3, #1
90003dfe:	2300      	movne	r3, #0
90003e00:	b2db      	uxtb	r3, r3
90003e02:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
90003e04:	e034      	b.n	90003e70 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
90003e06:	683b      	ldr	r3, [r7, #0]
90003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
90003e0c:	d01a      	beq.n	90003e44 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90003e0e:	f7fe f8dd 	bl	90001fcc <HAL_GetTick>
90003e12:	4602      	mov	r2, r0
90003e14:	69bb      	ldr	r3, [r7, #24]
90003e16:	1ad3      	subs	r3, r2, r3
90003e18:	683a      	ldr	r2, [r7, #0]
90003e1a:	429a      	cmp	r2, r3
90003e1c:	d302      	bcc.n	90003e24 <HAL_I2C_IsDeviceReady+0xd0>
90003e1e:	683b      	ldr	r3, [r7, #0]
90003e20:	2b00      	cmp	r3, #0
90003e22:	d10f      	bne.n	90003e44 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
90003e24:	68fb      	ldr	r3, [r7, #12]
90003e26:	2220      	movs	r2, #32
90003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003e2c:	68fb      	ldr	r3, [r7, #12]
90003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003e30:	f043 0220 	orr.w	r2, r3, #32
90003e34:	68fb      	ldr	r3, [r7, #12]
90003e36:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
90003e38:	68fb      	ldr	r3, [r7, #12]
90003e3a:	2200      	movs	r2, #0
90003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
90003e40:	2301      	movs	r3, #1
90003e42:	e088      	b.n	90003f56 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
90003e44:	68fb      	ldr	r3, [r7, #12]
90003e46:	681b      	ldr	r3, [r3, #0]
90003e48:	699b      	ldr	r3, [r3, #24]
90003e4a:	f003 0320 	and.w	r3, r3, #32
90003e4e:	2b20      	cmp	r3, #32
90003e50:	bf0c      	ite	eq
90003e52:	2301      	moveq	r3, #1
90003e54:	2300      	movne	r3, #0
90003e56:	b2db      	uxtb	r3, r3
90003e58:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
90003e5a:	68fb      	ldr	r3, [r7, #12]
90003e5c:	681b      	ldr	r3, [r3, #0]
90003e5e:	699b      	ldr	r3, [r3, #24]
90003e60:	f003 0310 	and.w	r3, r3, #16
90003e64:	2b10      	cmp	r3, #16
90003e66:	bf0c      	ite	eq
90003e68:	2301      	moveq	r3, #1
90003e6a:	2300      	movne	r3, #0
90003e6c:	b2db      	uxtb	r3, r3
90003e6e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
90003e70:	7ffb      	ldrb	r3, [r7, #31]
90003e72:	2b00      	cmp	r3, #0
90003e74:	d102      	bne.n	90003e7c <HAL_I2C_IsDeviceReady+0x128>
90003e76:	7fbb      	ldrb	r3, [r7, #30]
90003e78:	2b00      	cmp	r3, #0
90003e7a:	d0c4      	beq.n	90003e06 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
90003e7c:	68fb      	ldr	r3, [r7, #12]
90003e7e:	681b      	ldr	r3, [r3, #0]
90003e80:	699b      	ldr	r3, [r3, #24]
90003e82:	f003 0310 	and.w	r3, r3, #16
90003e86:	2b10      	cmp	r3, #16
90003e88:	d01a      	beq.n	90003ec0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
90003e8a:	69bb      	ldr	r3, [r7, #24]
90003e8c:	9300      	str	r3, [sp, #0]
90003e8e:	683b      	ldr	r3, [r7, #0]
90003e90:	2200      	movs	r2, #0
90003e92:	2120      	movs	r1, #32
90003e94:	68f8      	ldr	r0, [r7, #12]
90003e96:	f000 f865 	bl	90003f64 <I2C_WaitOnFlagUntilTimeout>
90003e9a:	4603      	mov	r3, r0
90003e9c:	2b00      	cmp	r3, #0
90003e9e:	d001      	beq.n	90003ea4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
90003ea0:	2301      	movs	r3, #1
90003ea2:	e058      	b.n	90003f56 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003ea4:	68fb      	ldr	r3, [r7, #12]
90003ea6:	681b      	ldr	r3, [r3, #0]
90003ea8:	2220      	movs	r2, #32
90003eaa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
90003eac:	68fb      	ldr	r3, [r7, #12]
90003eae:	2220      	movs	r2, #32
90003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90003eb4:	68fb      	ldr	r3, [r7, #12]
90003eb6:	2200      	movs	r2, #0
90003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
90003ebc:	2300      	movs	r3, #0
90003ebe:	e04a      	b.n	90003f56 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
90003ec0:	69bb      	ldr	r3, [r7, #24]
90003ec2:	9300      	str	r3, [sp, #0]
90003ec4:	683b      	ldr	r3, [r7, #0]
90003ec6:	2200      	movs	r2, #0
90003ec8:	2120      	movs	r1, #32
90003eca:	68f8      	ldr	r0, [r7, #12]
90003ecc:	f000 f84a 	bl	90003f64 <I2C_WaitOnFlagUntilTimeout>
90003ed0:	4603      	mov	r3, r0
90003ed2:	2b00      	cmp	r3, #0
90003ed4:	d001      	beq.n	90003eda <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
90003ed6:	2301      	movs	r3, #1
90003ed8:	e03d      	b.n	90003f56 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90003eda:	68fb      	ldr	r3, [r7, #12]
90003edc:	681b      	ldr	r3, [r3, #0]
90003ede:	2210      	movs	r2, #16
90003ee0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003ee2:	68fb      	ldr	r3, [r7, #12]
90003ee4:	681b      	ldr	r3, [r3, #0]
90003ee6:	2220      	movs	r2, #32
90003ee8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
90003eea:	697b      	ldr	r3, [r7, #20]
90003eec:	687a      	ldr	r2, [r7, #4]
90003eee:	429a      	cmp	r2, r3
90003ef0:	d118      	bne.n	90003f24 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
90003ef2:	68fb      	ldr	r3, [r7, #12]
90003ef4:	681b      	ldr	r3, [r3, #0]
90003ef6:	685a      	ldr	r2, [r3, #4]
90003ef8:	68fb      	ldr	r3, [r7, #12]
90003efa:	681b      	ldr	r3, [r3, #0]
90003efc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90003f00:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
90003f02:	69bb      	ldr	r3, [r7, #24]
90003f04:	9300      	str	r3, [sp, #0]
90003f06:	683b      	ldr	r3, [r7, #0]
90003f08:	2200      	movs	r2, #0
90003f0a:	2120      	movs	r1, #32
90003f0c:	68f8      	ldr	r0, [r7, #12]
90003f0e:	f000 f829 	bl	90003f64 <I2C_WaitOnFlagUntilTimeout>
90003f12:	4603      	mov	r3, r0
90003f14:	2b00      	cmp	r3, #0
90003f16:	d001      	beq.n	90003f1c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
90003f18:	2301      	movs	r3, #1
90003f1a:	e01c      	b.n	90003f56 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90003f1c:	68fb      	ldr	r3, [r7, #12]
90003f1e:	681b      	ldr	r3, [r3, #0]
90003f20:	2220      	movs	r2, #32
90003f22:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
90003f24:	697b      	ldr	r3, [r7, #20]
90003f26:	3301      	adds	r3, #1
90003f28:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
90003f2a:	697b      	ldr	r3, [r7, #20]
90003f2c:	687a      	ldr	r2, [r7, #4]
90003f2e:	429a      	cmp	r2, r3
90003f30:	f63f af3d 	bhi.w	90003dae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
90003f34:	68fb      	ldr	r3, [r7, #12]
90003f36:	2220      	movs	r2, #32
90003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003f3c:	68fb      	ldr	r3, [r7, #12]
90003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003f40:	f043 0220 	orr.w	r2, r3, #32
90003f44:	68fb      	ldr	r3, [r7, #12]
90003f46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90003f48:	68fb      	ldr	r3, [r7, #12]
90003f4a:	2200      	movs	r2, #0
90003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
90003f50:	2301      	movs	r3, #1
90003f52:	e000      	b.n	90003f56 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
90003f54:	2302      	movs	r3, #2
  }
}
90003f56:	4618      	mov	r0, r3
90003f58:	3720      	adds	r7, #32
90003f5a:	46bd      	mov	sp, r7
90003f5c:	bd80      	pop	{r7, pc}
90003f5e:	bf00      	nop
90003f60:	02002000 	.word	0x02002000

90003f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90003f64:	b580      	push	{r7, lr}
90003f66:	b084      	sub	sp, #16
90003f68:	af00      	add	r7, sp, #0
90003f6a:	60f8      	str	r0, [r7, #12]
90003f6c:	60b9      	str	r1, [r7, #8]
90003f6e:	603b      	str	r3, [r7, #0]
90003f70:	4613      	mov	r3, r2
90003f72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90003f74:	e031      	b.n	90003fda <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90003f76:	683b      	ldr	r3, [r7, #0]
90003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
90003f7c:	d02d      	beq.n	90003fda <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90003f7e:	f7fe f825 	bl	90001fcc <HAL_GetTick>
90003f82:	4602      	mov	r2, r0
90003f84:	69bb      	ldr	r3, [r7, #24]
90003f86:	1ad3      	subs	r3, r2, r3
90003f88:	683a      	ldr	r2, [r7, #0]
90003f8a:	429a      	cmp	r2, r3
90003f8c:	d302      	bcc.n	90003f94 <I2C_WaitOnFlagUntilTimeout+0x30>
90003f8e:	683b      	ldr	r3, [r7, #0]
90003f90:	2b00      	cmp	r3, #0
90003f92:	d122      	bne.n	90003fda <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90003f94:	68fb      	ldr	r3, [r7, #12]
90003f96:	681b      	ldr	r3, [r3, #0]
90003f98:	699a      	ldr	r2, [r3, #24]
90003f9a:	68bb      	ldr	r3, [r7, #8]
90003f9c:	4013      	ands	r3, r2
90003f9e:	68ba      	ldr	r2, [r7, #8]
90003fa0:	429a      	cmp	r2, r3
90003fa2:	bf0c      	ite	eq
90003fa4:	2301      	moveq	r3, #1
90003fa6:	2300      	movne	r3, #0
90003fa8:	b2db      	uxtb	r3, r3
90003faa:	461a      	mov	r2, r3
90003fac:	79fb      	ldrb	r3, [r7, #7]
90003fae:	429a      	cmp	r2, r3
90003fb0:	d113      	bne.n	90003fda <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90003fb2:	68fb      	ldr	r3, [r7, #12]
90003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003fb6:	f043 0220 	orr.w	r2, r3, #32
90003fba:	68fb      	ldr	r3, [r7, #12]
90003fbc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90003fbe:	68fb      	ldr	r3, [r7, #12]
90003fc0:	2220      	movs	r2, #32
90003fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90003fc6:	68fb      	ldr	r3, [r7, #12]
90003fc8:	2200      	movs	r2, #0
90003fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90003fce:	68fb      	ldr	r3, [r7, #12]
90003fd0:	2200      	movs	r2, #0
90003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
90003fd6:	2301      	movs	r3, #1
90003fd8:	e00f      	b.n	90003ffa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90003fda:	68fb      	ldr	r3, [r7, #12]
90003fdc:	681b      	ldr	r3, [r3, #0]
90003fde:	699a      	ldr	r2, [r3, #24]
90003fe0:	68bb      	ldr	r3, [r7, #8]
90003fe2:	4013      	ands	r3, r2
90003fe4:	68ba      	ldr	r2, [r7, #8]
90003fe6:	429a      	cmp	r2, r3
90003fe8:	bf0c      	ite	eq
90003fea:	2301      	moveq	r3, #1
90003fec:	2300      	movne	r3, #0
90003fee:	b2db      	uxtb	r3, r3
90003ff0:	461a      	mov	r2, r3
90003ff2:	79fb      	ldrb	r3, [r7, #7]
90003ff4:	429a      	cmp	r2, r3
90003ff6:	d0be      	beq.n	90003f76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90003ff8:	2300      	movs	r3, #0
}
90003ffa:	4618      	mov	r0, r3
90003ffc:	3710      	adds	r7, #16
90003ffe:	46bd      	mov	sp, r7
90004000:	bd80      	pop	{r7, pc}

90004002 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90004002:	b480      	push	{r7}
90004004:	b083      	sub	sp, #12
90004006:	af00      	add	r7, sp, #0
90004008:	6078      	str	r0, [r7, #4]
9000400a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000400c:	687b      	ldr	r3, [r7, #4]
9000400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90004012:	b2db      	uxtb	r3, r3
90004014:	2b20      	cmp	r3, #32
90004016:	d138      	bne.n	9000408a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90004018:	687b      	ldr	r3, [r7, #4]
9000401a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
9000401e:	2b01      	cmp	r3, #1
90004020:	d101      	bne.n	90004026 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90004022:	2302      	movs	r3, #2
90004024:	e032      	b.n	9000408c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90004026:	687b      	ldr	r3, [r7, #4]
90004028:	2201      	movs	r2, #1
9000402a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
9000402e:	687b      	ldr	r3, [r7, #4]
90004030:	2224      	movs	r2, #36	; 0x24
90004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90004036:	687b      	ldr	r3, [r7, #4]
90004038:	681b      	ldr	r3, [r3, #0]
9000403a:	681a      	ldr	r2, [r3, #0]
9000403c:	687b      	ldr	r3, [r7, #4]
9000403e:	681b      	ldr	r3, [r3, #0]
90004040:	f022 0201 	bic.w	r2, r2, #1
90004044:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90004046:	687b      	ldr	r3, [r7, #4]
90004048:	681b      	ldr	r3, [r3, #0]
9000404a:	681a      	ldr	r2, [r3, #0]
9000404c:	687b      	ldr	r3, [r7, #4]
9000404e:	681b      	ldr	r3, [r3, #0]
90004050:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90004054:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90004056:	687b      	ldr	r3, [r7, #4]
90004058:	681b      	ldr	r3, [r3, #0]
9000405a:	6819      	ldr	r1, [r3, #0]
9000405c:	687b      	ldr	r3, [r7, #4]
9000405e:	681b      	ldr	r3, [r3, #0]
90004060:	683a      	ldr	r2, [r7, #0]
90004062:	430a      	orrs	r2, r1
90004064:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90004066:	687b      	ldr	r3, [r7, #4]
90004068:	681b      	ldr	r3, [r3, #0]
9000406a:	681a      	ldr	r2, [r3, #0]
9000406c:	687b      	ldr	r3, [r7, #4]
9000406e:	681b      	ldr	r3, [r3, #0]
90004070:	f042 0201 	orr.w	r2, r2, #1
90004074:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90004076:	687b      	ldr	r3, [r7, #4]
90004078:	2220      	movs	r2, #32
9000407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000407e:	687b      	ldr	r3, [r7, #4]
90004080:	2200      	movs	r2, #0
90004082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90004086:	2300      	movs	r3, #0
90004088:	e000      	b.n	9000408c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
9000408a:	2302      	movs	r3, #2
  }
}
9000408c:	4618      	mov	r0, r3
9000408e:	370c      	adds	r7, #12
90004090:	46bd      	mov	sp, r7
90004092:	f85d 7b04 	ldr.w	r7, [sp], #4
90004096:	4770      	bx	lr

90004098 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90004098:	b480      	push	{r7}
9000409a:	b085      	sub	sp, #20
9000409c:	af00      	add	r7, sp, #0
9000409e:	6078      	str	r0, [r7, #4]
900040a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900040a2:	687b      	ldr	r3, [r7, #4]
900040a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
900040a8:	b2db      	uxtb	r3, r3
900040aa:	2b20      	cmp	r3, #32
900040ac:	d139      	bne.n	90004122 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900040ae:	687b      	ldr	r3, [r7, #4]
900040b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
900040b4:	2b01      	cmp	r3, #1
900040b6:	d101      	bne.n	900040bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
900040b8:	2302      	movs	r3, #2
900040ba:	e033      	b.n	90004124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
900040bc:	687b      	ldr	r3, [r7, #4]
900040be:	2201      	movs	r2, #1
900040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900040c4:	687b      	ldr	r3, [r7, #4]
900040c6:	2224      	movs	r2, #36	; 0x24
900040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900040cc:	687b      	ldr	r3, [r7, #4]
900040ce:	681b      	ldr	r3, [r3, #0]
900040d0:	681a      	ldr	r2, [r3, #0]
900040d2:	687b      	ldr	r3, [r7, #4]
900040d4:	681b      	ldr	r3, [r3, #0]
900040d6:	f022 0201 	bic.w	r2, r2, #1
900040da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900040dc:	687b      	ldr	r3, [r7, #4]
900040de:	681b      	ldr	r3, [r3, #0]
900040e0:	681b      	ldr	r3, [r3, #0]
900040e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
900040e4:	68fb      	ldr	r3, [r7, #12]
900040e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
900040ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
900040ec:	683b      	ldr	r3, [r7, #0]
900040ee:	021b      	lsls	r3, r3, #8
900040f0:	68fa      	ldr	r2, [r7, #12]
900040f2:	4313      	orrs	r3, r2
900040f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900040f6:	687b      	ldr	r3, [r7, #4]
900040f8:	681b      	ldr	r3, [r3, #0]
900040fa:	68fa      	ldr	r2, [r7, #12]
900040fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900040fe:	687b      	ldr	r3, [r7, #4]
90004100:	681b      	ldr	r3, [r3, #0]
90004102:	681a      	ldr	r2, [r3, #0]
90004104:	687b      	ldr	r3, [r7, #4]
90004106:	681b      	ldr	r3, [r3, #0]
90004108:	f042 0201 	orr.w	r2, r2, #1
9000410c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
9000410e:	687b      	ldr	r3, [r7, #4]
90004110:	2220      	movs	r2, #32
90004112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90004116:	687b      	ldr	r3, [r7, #4]
90004118:	2200      	movs	r2, #0
9000411a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
9000411e:	2300      	movs	r3, #0
90004120:	e000      	b.n	90004124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
90004122:	2302      	movs	r3, #2
  }
}
90004124:	4618      	mov	r0, r3
90004126:	3714      	adds	r7, #20
90004128:	46bd      	mov	sp, r7
9000412a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000412e:	4770      	bx	lr

90004130 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90004130:	b580      	push	{r7, lr}
90004132:	b084      	sub	sp, #16
90004134:	af00      	add	r7, sp, #0
90004136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90004138:	4b19      	ldr	r3, [pc, #100]	; (900041a0 <HAL_PWREx_ConfigSupply+0x70>)
9000413a:	68db      	ldr	r3, [r3, #12]
9000413c:	f003 0304 	and.w	r3, r3, #4
90004140:	2b04      	cmp	r3, #4
90004142:	d00a      	beq.n	9000415a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90004144:	4b16      	ldr	r3, [pc, #88]	; (900041a0 <HAL_PWREx_ConfigSupply+0x70>)
90004146:	68db      	ldr	r3, [r3, #12]
90004148:	f003 0307 	and.w	r3, r3, #7
9000414c:	687a      	ldr	r2, [r7, #4]
9000414e:	429a      	cmp	r2, r3
90004150:	d001      	beq.n	90004156 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
90004152:	2301      	movs	r3, #1
90004154:	e01f      	b.n	90004196 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
90004156:	2300      	movs	r3, #0
90004158:	e01d      	b.n	90004196 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000415a:	4b11      	ldr	r3, [pc, #68]	; (900041a0 <HAL_PWREx_ConfigSupply+0x70>)
9000415c:	68db      	ldr	r3, [r3, #12]
9000415e:	f023 0207 	bic.w	r2, r3, #7
90004162:	490f      	ldr	r1, [pc, #60]	; (900041a0 <HAL_PWREx_ConfigSupply+0x70>)
90004164:	687b      	ldr	r3, [r7, #4]
90004166:	4313      	orrs	r3, r2
90004168:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
9000416a:	f7fd ff2f 	bl	90001fcc <HAL_GetTick>
9000416e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90004170:	e009      	b.n	90004186 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
90004172:	f7fd ff2b 	bl	90001fcc <HAL_GetTick>
90004176:	4602      	mov	r2, r0
90004178:	68fb      	ldr	r3, [r7, #12]
9000417a:	1ad3      	subs	r3, r2, r3
9000417c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90004180:	d901      	bls.n	90004186 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
90004182:	2301      	movs	r3, #1
90004184:	e007      	b.n	90004196 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90004186:	4b06      	ldr	r3, [pc, #24]	; (900041a0 <HAL_PWREx_ConfigSupply+0x70>)
90004188:	685b      	ldr	r3, [r3, #4]
9000418a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
9000418e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90004192:	d1ee      	bne.n	90004172 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
90004194:	2300      	movs	r3, #0
}
90004196:	4618      	mov	r0, r3
90004198:	3710      	adds	r7, #16
9000419a:	46bd      	mov	sp, r7
9000419c:	bd80      	pop	{r7, pc}
9000419e:	bf00      	nop
900041a0:	58024800 	.word	0x58024800

900041a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900041a4:	b580      	push	{r7, lr}
900041a6:	b08c      	sub	sp, #48	; 0x30
900041a8:	af00      	add	r7, sp, #0
900041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
900041ac:	687b      	ldr	r3, [r7, #4]
900041ae:	2b00      	cmp	r3, #0
900041b0:	d102      	bne.n	900041b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
900041b2:	2301      	movs	r3, #1
900041b4:	f000 bc48 	b.w	90004a48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900041b8:	687b      	ldr	r3, [r7, #4]
900041ba:	681b      	ldr	r3, [r3, #0]
900041bc:	f003 0301 	and.w	r3, r3, #1
900041c0:	2b00      	cmp	r3, #0
900041c2:	f000 8088 	beq.w	900042d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900041c6:	4b99      	ldr	r3, [pc, #612]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900041c8:	691b      	ldr	r3, [r3, #16]
900041ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
900041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900041d0:	4b96      	ldr	r3, [pc, #600]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900041d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
900041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900041d8:	2b10      	cmp	r3, #16
900041da:	d007      	beq.n	900041ec <HAL_RCC_OscConfig+0x48>
900041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900041de:	2b18      	cmp	r3, #24
900041e0:	d111      	bne.n	90004206 <HAL_RCC_OscConfig+0x62>
900041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900041e4:	f003 0303 	and.w	r3, r3, #3
900041e8:	2b02      	cmp	r3, #2
900041ea:	d10c      	bne.n	90004206 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900041ec:	4b8f      	ldr	r3, [pc, #572]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900041ee:	681b      	ldr	r3, [r3, #0]
900041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900041f4:	2b00      	cmp	r3, #0
900041f6:	d06d      	beq.n	900042d4 <HAL_RCC_OscConfig+0x130>
900041f8:	687b      	ldr	r3, [r7, #4]
900041fa:	685b      	ldr	r3, [r3, #4]
900041fc:	2b00      	cmp	r3, #0
900041fe:	d169      	bne.n	900042d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90004200:	2301      	movs	r3, #1
90004202:	f000 bc21 	b.w	90004a48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90004206:	687b      	ldr	r3, [r7, #4]
90004208:	685b      	ldr	r3, [r3, #4]
9000420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000420e:	d106      	bne.n	9000421e <HAL_RCC_OscConfig+0x7a>
90004210:	4b86      	ldr	r3, [pc, #536]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004212:	681b      	ldr	r3, [r3, #0]
90004214:	4a85      	ldr	r2, [pc, #532]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000421a:	6013      	str	r3, [r2, #0]
9000421c:	e02e      	b.n	9000427c <HAL_RCC_OscConfig+0xd8>
9000421e:	687b      	ldr	r3, [r7, #4]
90004220:	685b      	ldr	r3, [r3, #4]
90004222:	2b00      	cmp	r3, #0
90004224:	d10c      	bne.n	90004240 <HAL_RCC_OscConfig+0x9c>
90004226:	4b81      	ldr	r3, [pc, #516]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004228:	681b      	ldr	r3, [r3, #0]
9000422a:	4a80      	ldr	r2, [pc, #512]	; (9000442c <HAL_RCC_OscConfig+0x288>)
9000422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90004230:	6013      	str	r3, [r2, #0]
90004232:	4b7e      	ldr	r3, [pc, #504]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004234:	681b      	ldr	r3, [r3, #0]
90004236:	4a7d      	ldr	r2, [pc, #500]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000423c:	6013      	str	r3, [r2, #0]
9000423e:	e01d      	b.n	9000427c <HAL_RCC_OscConfig+0xd8>
90004240:	687b      	ldr	r3, [r7, #4]
90004242:	685b      	ldr	r3, [r3, #4]
90004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90004248:	d10c      	bne.n	90004264 <HAL_RCC_OscConfig+0xc0>
9000424a:	4b78      	ldr	r3, [pc, #480]	; (9000442c <HAL_RCC_OscConfig+0x288>)
9000424c:	681b      	ldr	r3, [r3, #0]
9000424e:	4a77      	ldr	r2, [pc, #476]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90004254:	6013      	str	r3, [r2, #0]
90004256:	4b75      	ldr	r3, [pc, #468]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004258:	681b      	ldr	r3, [r3, #0]
9000425a:	4a74      	ldr	r2, [pc, #464]	; (9000442c <HAL_RCC_OscConfig+0x288>)
9000425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004260:	6013      	str	r3, [r2, #0]
90004262:	e00b      	b.n	9000427c <HAL_RCC_OscConfig+0xd8>
90004264:	4b71      	ldr	r3, [pc, #452]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004266:	681b      	ldr	r3, [r3, #0]
90004268:	4a70      	ldr	r2, [pc, #448]	; (9000442c <HAL_RCC_OscConfig+0x288>)
9000426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000426e:	6013      	str	r3, [r2, #0]
90004270:	4b6e      	ldr	r3, [pc, #440]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004272:	681b      	ldr	r3, [r3, #0]
90004274:	4a6d      	ldr	r2, [pc, #436]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000427c:	687b      	ldr	r3, [r7, #4]
9000427e:	685b      	ldr	r3, [r3, #4]
90004280:	2b00      	cmp	r3, #0
90004282:	d013      	beq.n	900042ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004284:	f7fd fea2 	bl	90001fcc <HAL_GetTick>
90004288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000428a:	e008      	b.n	9000429e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000428c:	f7fd fe9e 	bl	90001fcc <HAL_GetTick>
90004290:	4602      	mov	r2, r0
90004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004294:	1ad3      	subs	r3, r2, r3
90004296:	2b64      	cmp	r3, #100	; 0x64
90004298:	d901      	bls.n	9000429e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
9000429a:	2303      	movs	r3, #3
9000429c:	e3d4      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000429e:	4b63      	ldr	r3, [pc, #396]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900042a0:	681b      	ldr	r3, [r3, #0]
900042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900042a6:	2b00      	cmp	r3, #0
900042a8:	d0f0      	beq.n	9000428c <HAL_RCC_OscConfig+0xe8>
900042aa:	e014      	b.n	900042d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900042ac:	f7fd fe8e 	bl	90001fcc <HAL_GetTick>
900042b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900042b2:	e008      	b.n	900042c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900042b4:	f7fd fe8a 	bl	90001fcc <HAL_GetTick>
900042b8:	4602      	mov	r2, r0
900042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900042bc:	1ad3      	subs	r3, r2, r3
900042be:	2b64      	cmp	r3, #100	; 0x64
900042c0:	d901      	bls.n	900042c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
900042c2:	2303      	movs	r3, #3
900042c4:	e3c0      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900042c6:	4b59      	ldr	r3, [pc, #356]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900042c8:	681b      	ldr	r3, [r3, #0]
900042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900042ce:	2b00      	cmp	r3, #0
900042d0:	d1f0      	bne.n	900042b4 <HAL_RCC_OscConfig+0x110>
900042d2:	e000      	b.n	900042d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900042d6:	687b      	ldr	r3, [r7, #4]
900042d8:	681b      	ldr	r3, [r3, #0]
900042da:	f003 0302 	and.w	r3, r3, #2
900042de:	2b00      	cmp	r3, #0
900042e0:	f000 80ca 	beq.w	90004478 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900042e4:	4b51      	ldr	r3, [pc, #324]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900042e6:	691b      	ldr	r3, [r3, #16]
900042e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
900042ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900042ee:	4b4f      	ldr	r3, [pc, #316]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900042f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
900042f4:	6a3b      	ldr	r3, [r7, #32]
900042f6:	2b00      	cmp	r3, #0
900042f8:	d007      	beq.n	9000430a <HAL_RCC_OscConfig+0x166>
900042fa:	6a3b      	ldr	r3, [r7, #32]
900042fc:	2b18      	cmp	r3, #24
900042fe:	d156      	bne.n	900043ae <HAL_RCC_OscConfig+0x20a>
90004300:	69fb      	ldr	r3, [r7, #28]
90004302:	f003 0303 	and.w	r3, r3, #3
90004306:	2b00      	cmp	r3, #0
90004308:	d151      	bne.n	900043ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000430a:	4b48      	ldr	r3, [pc, #288]	; (9000442c <HAL_RCC_OscConfig+0x288>)
9000430c:	681b      	ldr	r3, [r3, #0]
9000430e:	f003 0304 	and.w	r3, r3, #4
90004312:	2b00      	cmp	r3, #0
90004314:	d005      	beq.n	90004322 <HAL_RCC_OscConfig+0x17e>
90004316:	687b      	ldr	r3, [r7, #4]
90004318:	68db      	ldr	r3, [r3, #12]
9000431a:	2b00      	cmp	r3, #0
9000431c:	d101      	bne.n	90004322 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
9000431e:	2301      	movs	r3, #1
90004320:	e392      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90004322:	4b42      	ldr	r3, [pc, #264]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004324:	681b      	ldr	r3, [r3, #0]
90004326:	f023 0219 	bic.w	r2, r3, #25
9000432a:	687b      	ldr	r3, [r7, #4]
9000432c:	68db      	ldr	r3, [r3, #12]
9000432e:	493f      	ldr	r1, [pc, #252]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004330:	4313      	orrs	r3, r2
90004332:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004334:	f7fd fe4a 	bl	90001fcc <HAL_GetTick>
90004338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000433a:	e008      	b.n	9000434e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000433c:	f7fd fe46 	bl	90001fcc <HAL_GetTick>
90004340:	4602      	mov	r2, r0
90004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004344:	1ad3      	subs	r3, r2, r3
90004346:	2b02      	cmp	r3, #2
90004348:	d901      	bls.n	9000434e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
9000434a:	2303      	movs	r3, #3
9000434c:	e37c      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000434e:	4b37      	ldr	r3, [pc, #220]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004350:	681b      	ldr	r3, [r3, #0]
90004352:	f003 0304 	and.w	r3, r3, #4
90004356:	2b00      	cmp	r3, #0
90004358:	d0f0      	beq.n	9000433c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000435a:	f7fd fe43 	bl	90001fe4 <HAL_GetREVID>
9000435e:	4603      	mov	r3, r0
90004360:	f241 0203 	movw	r2, #4099	; 0x1003
90004364:	4293      	cmp	r3, r2
90004366:	d817      	bhi.n	90004398 <HAL_RCC_OscConfig+0x1f4>
90004368:	687b      	ldr	r3, [r7, #4]
9000436a:	691b      	ldr	r3, [r3, #16]
9000436c:	2b40      	cmp	r3, #64	; 0x40
9000436e:	d108      	bne.n	90004382 <HAL_RCC_OscConfig+0x1de>
90004370:	4b2e      	ldr	r3, [pc, #184]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004372:	685b      	ldr	r3, [r3, #4]
90004374:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90004378:	4a2c      	ldr	r2, [pc, #176]	; (9000442c <HAL_RCC_OscConfig+0x288>)
9000437a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000437e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90004380:	e07a      	b.n	90004478 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90004382:	4b2a      	ldr	r3, [pc, #168]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004384:	685b      	ldr	r3, [r3, #4]
90004386:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
9000438a:	687b      	ldr	r3, [r7, #4]
9000438c:	691b      	ldr	r3, [r3, #16]
9000438e:	031b      	lsls	r3, r3, #12
90004390:	4926      	ldr	r1, [pc, #152]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004392:	4313      	orrs	r3, r2
90004394:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90004396:	e06f      	b.n	90004478 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90004398:	4b24      	ldr	r3, [pc, #144]	; (9000442c <HAL_RCC_OscConfig+0x288>)
9000439a:	685b      	ldr	r3, [r3, #4]
9000439c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
900043a0:	687b      	ldr	r3, [r7, #4]
900043a2:	691b      	ldr	r3, [r3, #16]
900043a4:	061b      	lsls	r3, r3, #24
900043a6:	4921      	ldr	r1, [pc, #132]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900043a8:	4313      	orrs	r3, r2
900043aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900043ac:	e064      	b.n	90004478 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
900043ae:	687b      	ldr	r3, [r7, #4]
900043b0:	68db      	ldr	r3, [r3, #12]
900043b2:	2b00      	cmp	r3, #0
900043b4:	d047      	beq.n	90004446 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900043b6:	4b1d      	ldr	r3, [pc, #116]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900043b8:	681b      	ldr	r3, [r3, #0]
900043ba:	f023 0219 	bic.w	r2, r3, #25
900043be:	687b      	ldr	r3, [r7, #4]
900043c0:	68db      	ldr	r3, [r3, #12]
900043c2:	491a      	ldr	r1, [pc, #104]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900043c4:	4313      	orrs	r3, r2
900043c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900043c8:	f7fd fe00 	bl	90001fcc <HAL_GetTick>
900043cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900043ce:	e008      	b.n	900043e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
900043d0:	f7fd fdfc 	bl	90001fcc <HAL_GetTick>
900043d4:	4602      	mov	r2, r0
900043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900043d8:	1ad3      	subs	r3, r2, r3
900043da:	2b02      	cmp	r3, #2
900043dc:	d901      	bls.n	900043e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
900043de:	2303      	movs	r3, #3
900043e0:	e332      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900043e2:	4b12      	ldr	r3, [pc, #72]	; (9000442c <HAL_RCC_OscConfig+0x288>)
900043e4:	681b      	ldr	r3, [r3, #0]
900043e6:	f003 0304 	and.w	r3, r3, #4
900043ea:	2b00      	cmp	r3, #0
900043ec:	d0f0      	beq.n	900043d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900043ee:	f7fd fdf9 	bl	90001fe4 <HAL_GetREVID>
900043f2:	4603      	mov	r3, r0
900043f4:	f241 0203 	movw	r2, #4099	; 0x1003
900043f8:	4293      	cmp	r3, r2
900043fa:	d819      	bhi.n	90004430 <HAL_RCC_OscConfig+0x28c>
900043fc:	687b      	ldr	r3, [r7, #4]
900043fe:	691b      	ldr	r3, [r3, #16]
90004400:	2b40      	cmp	r3, #64	; 0x40
90004402:	d108      	bne.n	90004416 <HAL_RCC_OscConfig+0x272>
90004404:	4b09      	ldr	r3, [pc, #36]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004406:	685b      	ldr	r3, [r3, #4]
90004408:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000440c:	4a07      	ldr	r2, [pc, #28]	; (9000442c <HAL_RCC_OscConfig+0x288>)
9000440e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90004412:	6053      	str	r3, [r2, #4]
90004414:	e030      	b.n	90004478 <HAL_RCC_OscConfig+0x2d4>
90004416:	4b05      	ldr	r3, [pc, #20]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004418:	685b      	ldr	r3, [r3, #4]
9000441a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
9000441e:	687b      	ldr	r3, [r7, #4]
90004420:	691b      	ldr	r3, [r3, #16]
90004422:	031b      	lsls	r3, r3, #12
90004424:	4901      	ldr	r1, [pc, #4]	; (9000442c <HAL_RCC_OscConfig+0x288>)
90004426:	4313      	orrs	r3, r2
90004428:	604b      	str	r3, [r1, #4]
9000442a:	e025      	b.n	90004478 <HAL_RCC_OscConfig+0x2d4>
9000442c:	58024400 	.word	0x58024400
90004430:	4b9a      	ldr	r3, [pc, #616]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004432:	685b      	ldr	r3, [r3, #4]
90004434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90004438:	687b      	ldr	r3, [r7, #4]
9000443a:	691b      	ldr	r3, [r3, #16]
9000443c:	061b      	lsls	r3, r3, #24
9000443e:	4997      	ldr	r1, [pc, #604]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004440:	4313      	orrs	r3, r2
90004442:	604b      	str	r3, [r1, #4]
90004444:	e018      	b.n	90004478 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90004446:	4b95      	ldr	r3, [pc, #596]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004448:	681b      	ldr	r3, [r3, #0]
9000444a:	4a94      	ldr	r2, [pc, #592]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
9000444c:	f023 0301 	bic.w	r3, r3, #1
90004450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004452:	f7fd fdbb 	bl	90001fcc <HAL_GetTick>
90004456:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90004458:	e008      	b.n	9000446c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000445a:	f7fd fdb7 	bl	90001fcc <HAL_GetTick>
9000445e:	4602      	mov	r2, r0
90004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004462:	1ad3      	subs	r3, r2, r3
90004464:	2b02      	cmp	r3, #2
90004466:	d901      	bls.n	9000446c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90004468:	2303      	movs	r3, #3
9000446a:	e2ed      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000446c:	4b8b      	ldr	r3, [pc, #556]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
9000446e:	681b      	ldr	r3, [r3, #0]
90004470:	f003 0304 	and.w	r3, r3, #4
90004474:	2b00      	cmp	r3, #0
90004476:	d1f0      	bne.n	9000445a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90004478:	687b      	ldr	r3, [r7, #4]
9000447a:	681b      	ldr	r3, [r3, #0]
9000447c:	f003 0310 	and.w	r3, r3, #16
90004480:	2b00      	cmp	r3, #0
90004482:	f000 80a9 	beq.w	900045d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90004486:	4b85      	ldr	r3, [pc, #532]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004488:	691b      	ldr	r3, [r3, #16]
9000448a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000448e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90004490:	4b82      	ldr	r3, [pc, #520]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004494:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90004496:	69bb      	ldr	r3, [r7, #24]
90004498:	2b08      	cmp	r3, #8
9000449a:	d007      	beq.n	900044ac <HAL_RCC_OscConfig+0x308>
9000449c:	69bb      	ldr	r3, [r7, #24]
9000449e:	2b18      	cmp	r3, #24
900044a0:	d13a      	bne.n	90004518 <HAL_RCC_OscConfig+0x374>
900044a2:	697b      	ldr	r3, [r7, #20]
900044a4:	f003 0303 	and.w	r3, r3, #3
900044a8:	2b01      	cmp	r3, #1
900044aa:	d135      	bne.n	90004518 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900044ac:	4b7b      	ldr	r3, [pc, #492]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900044ae:	681b      	ldr	r3, [r3, #0]
900044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
900044b4:	2b00      	cmp	r3, #0
900044b6:	d005      	beq.n	900044c4 <HAL_RCC_OscConfig+0x320>
900044b8:	687b      	ldr	r3, [r7, #4]
900044ba:	69db      	ldr	r3, [r3, #28]
900044bc:	2b80      	cmp	r3, #128	; 0x80
900044be:	d001      	beq.n	900044c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
900044c0:	2301      	movs	r3, #1
900044c2:	e2c1      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900044c4:	f7fd fd8e 	bl	90001fe4 <HAL_GetREVID>
900044c8:	4603      	mov	r3, r0
900044ca:	f241 0203 	movw	r2, #4099	; 0x1003
900044ce:	4293      	cmp	r3, r2
900044d0:	d817      	bhi.n	90004502 <HAL_RCC_OscConfig+0x35e>
900044d2:	687b      	ldr	r3, [r7, #4]
900044d4:	6a1b      	ldr	r3, [r3, #32]
900044d6:	2b20      	cmp	r3, #32
900044d8:	d108      	bne.n	900044ec <HAL_RCC_OscConfig+0x348>
900044da:	4b70      	ldr	r3, [pc, #448]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900044dc:	685b      	ldr	r3, [r3, #4]
900044de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
900044e2:	4a6e      	ldr	r2, [pc, #440]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900044e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
900044e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900044ea:	e075      	b.n	900045d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900044ec:	4b6b      	ldr	r3, [pc, #428]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900044ee:	685b      	ldr	r3, [r3, #4]
900044f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
900044f4:	687b      	ldr	r3, [r7, #4]
900044f6:	6a1b      	ldr	r3, [r3, #32]
900044f8:	069b      	lsls	r3, r3, #26
900044fa:	4968      	ldr	r1, [pc, #416]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900044fc:	4313      	orrs	r3, r2
900044fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90004500:	e06a      	b.n	900045d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90004502:	4b66      	ldr	r3, [pc, #408]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004504:	68db      	ldr	r3, [r3, #12]
90004506:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
9000450a:	687b      	ldr	r3, [r7, #4]
9000450c:	6a1b      	ldr	r3, [r3, #32]
9000450e:	061b      	lsls	r3, r3, #24
90004510:	4962      	ldr	r1, [pc, #392]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004512:	4313      	orrs	r3, r2
90004514:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90004516:	e05f      	b.n	900045d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90004518:	687b      	ldr	r3, [r7, #4]
9000451a:	69db      	ldr	r3, [r3, #28]
9000451c:	2b00      	cmp	r3, #0
9000451e:	d042      	beq.n	900045a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90004520:	4b5e      	ldr	r3, [pc, #376]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004522:	681b      	ldr	r3, [r3, #0]
90004524:	4a5d      	ldr	r2, [pc, #372]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000452c:	f7fd fd4e 	bl	90001fcc <HAL_GetTick>
90004530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90004532:	e008      	b.n	90004546 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90004534:	f7fd fd4a 	bl	90001fcc <HAL_GetTick>
90004538:	4602      	mov	r2, r0
9000453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000453c:	1ad3      	subs	r3, r2, r3
9000453e:	2b02      	cmp	r3, #2
90004540:	d901      	bls.n	90004546 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90004542:	2303      	movs	r3, #3
90004544:	e280      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90004546:	4b55      	ldr	r3, [pc, #340]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004548:	681b      	ldr	r3, [r3, #0]
9000454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000454e:	2b00      	cmp	r3, #0
90004550:	d0f0      	beq.n	90004534 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90004552:	f7fd fd47 	bl	90001fe4 <HAL_GetREVID>
90004556:	4603      	mov	r3, r0
90004558:	f241 0203 	movw	r2, #4099	; 0x1003
9000455c:	4293      	cmp	r3, r2
9000455e:	d817      	bhi.n	90004590 <HAL_RCC_OscConfig+0x3ec>
90004560:	687b      	ldr	r3, [r7, #4]
90004562:	6a1b      	ldr	r3, [r3, #32]
90004564:	2b20      	cmp	r3, #32
90004566:	d108      	bne.n	9000457a <HAL_RCC_OscConfig+0x3d6>
90004568:	4b4c      	ldr	r3, [pc, #304]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
9000456a:	685b      	ldr	r3, [r3, #4]
9000456c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90004570:	4a4a      	ldr	r2, [pc, #296]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90004576:	6053      	str	r3, [r2, #4]
90004578:	e02e      	b.n	900045d8 <HAL_RCC_OscConfig+0x434>
9000457a:	4b48      	ldr	r3, [pc, #288]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
9000457c:	685b      	ldr	r3, [r3, #4]
9000457e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90004582:	687b      	ldr	r3, [r7, #4]
90004584:	6a1b      	ldr	r3, [r3, #32]
90004586:	069b      	lsls	r3, r3, #26
90004588:	4944      	ldr	r1, [pc, #272]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
9000458a:	4313      	orrs	r3, r2
9000458c:	604b      	str	r3, [r1, #4]
9000458e:	e023      	b.n	900045d8 <HAL_RCC_OscConfig+0x434>
90004590:	4b42      	ldr	r3, [pc, #264]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004592:	68db      	ldr	r3, [r3, #12]
90004594:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90004598:	687b      	ldr	r3, [r7, #4]
9000459a:	6a1b      	ldr	r3, [r3, #32]
9000459c:	061b      	lsls	r3, r3, #24
9000459e:	493f      	ldr	r1, [pc, #252]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900045a0:	4313      	orrs	r3, r2
900045a2:	60cb      	str	r3, [r1, #12]
900045a4:	e018      	b.n	900045d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
900045a6:	4b3d      	ldr	r3, [pc, #244]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900045a8:	681b      	ldr	r3, [r3, #0]
900045aa:	4a3c      	ldr	r2, [pc, #240]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900045ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900045b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900045b2:	f7fd fd0b 	bl	90001fcc <HAL_GetTick>
900045b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900045b8:	e008      	b.n	900045cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
900045ba:	f7fd fd07 	bl	90001fcc <HAL_GetTick>
900045be:	4602      	mov	r2, r0
900045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900045c2:	1ad3      	subs	r3, r2, r3
900045c4:	2b02      	cmp	r3, #2
900045c6:	d901      	bls.n	900045cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
900045c8:	2303      	movs	r3, #3
900045ca:	e23d      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900045cc:	4b33      	ldr	r3, [pc, #204]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900045ce:	681b      	ldr	r3, [r3, #0]
900045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
900045d4:	2b00      	cmp	r3, #0
900045d6:	d1f0      	bne.n	900045ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900045d8:	687b      	ldr	r3, [r7, #4]
900045da:	681b      	ldr	r3, [r3, #0]
900045dc:	f003 0308 	and.w	r3, r3, #8
900045e0:	2b00      	cmp	r3, #0
900045e2:	d036      	beq.n	90004652 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
900045e4:	687b      	ldr	r3, [r7, #4]
900045e6:	695b      	ldr	r3, [r3, #20]
900045e8:	2b00      	cmp	r3, #0
900045ea:	d019      	beq.n	90004620 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
900045ec:	4b2b      	ldr	r3, [pc, #172]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900045ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900045f0:	4a2a      	ldr	r2, [pc, #168]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
900045f2:	f043 0301 	orr.w	r3, r3, #1
900045f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900045f8:	f7fd fce8 	bl	90001fcc <HAL_GetTick>
900045fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
900045fe:	e008      	b.n	90004612 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90004600:	f7fd fce4 	bl	90001fcc <HAL_GetTick>
90004604:	4602      	mov	r2, r0
90004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004608:	1ad3      	subs	r3, r2, r3
9000460a:	2b02      	cmp	r3, #2
9000460c:	d901      	bls.n	90004612 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
9000460e:	2303      	movs	r3, #3
90004610:	e21a      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90004612:	4b22      	ldr	r3, [pc, #136]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004616:	f003 0302 	and.w	r3, r3, #2
9000461a:	2b00      	cmp	r3, #0
9000461c:	d0f0      	beq.n	90004600 <HAL_RCC_OscConfig+0x45c>
9000461e:	e018      	b.n	90004652 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90004620:	4b1e      	ldr	r3, [pc, #120]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90004624:	4a1d      	ldr	r2, [pc, #116]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004626:	f023 0301 	bic.w	r3, r3, #1
9000462a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000462c:	f7fd fcce 	bl	90001fcc <HAL_GetTick>
90004630:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90004632:	e008      	b.n	90004646 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90004634:	f7fd fcca 	bl	90001fcc <HAL_GetTick>
90004638:	4602      	mov	r2, r0
9000463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000463c:	1ad3      	subs	r3, r2, r3
9000463e:	2b02      	cmp	r3, #2
90004640:	d901      	bls.n	90004646 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90004642:	2303      	movs	r3, #3
90004644:	e200      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90004646:	4b15      	ldr	r3, [pc, #84]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000464a:	f003 0302 	and.w	r3, r3, #2
9000464e:	2b00      	cmp	r3, #0
90004650:	d1f0      	bne.n	90004634 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90004652:	687b      	ldr	r3, [r7, #4]
90004654:	681b      	ldr	r3, [r3, #0]
90004656:	f003 0320 	and.w	r3, r3, #32
9000465a:	2b00      	cmp	r3, #0
9000465c:	d039      	beq.n	900046d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000465e:	687b      	ldr	r3, [r7, #4]
90004660:	699b      	ldr	r3, [r3, #24]
90004662:	2b00      	cmp	r3, #0
90004664:	d01c      	beq.n	900046a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90004666:	4b0d      	ldr	r3, [pc, #52]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
90004668:	681b      	ldr	r3, [r3, #0]
9000466a:	4a0c      	ldr	r2, [pc, #48]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
9000466c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90004670:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90004672:	f7fd fcab 	bl	90001fcc <HAL_GetTick>
90004676:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90004678:	e008      	b.n	9000468c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000467a:	f7fd fca7 	bl	90001fcc <HAL_GetTick>
9000467e:	4602      	mov	r2, r0
90004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004682:	1ad3      	subs	r3, r2, r3
90004684:	2b02      	cmp	r3, #2
90004686:	d901      	bls.n	9000468c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90004688:	2303      	movs	r3, #3
9000468a:	e1dd      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000468c:	4b03      	ldr	r3, [pc, #12]	; (9000469c <HAL_RCC_OscConfig+0x4f8>)
9000468e:	681b      	ldr	r3, [r3, #0]
90004690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90004694:	2b00      	cmp	r3, #0
90004696:	d0f0      	beq.n	9000467a <HAL_RCC_OscConfig+0x4d6>
90004698:	e01b      	b.n	900046d2 <HAL_RCC_OscConfig+0x52e>
9000469a:	bf00      	nop
9000469c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
900046a0:	4b9b      	ldr	r3, [pc, #620]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900046a2:	681b      	ldr	r3, [r3, #0]
900046a4:	4a9a      	ldr	r2, [pc, #616]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900046a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
900046aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900046ac:	f7fd fc8e 	bl	90001fcc <HAL_GetTick>
900046b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900046b2:	e008      	b.n	900046c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
900046b4:	f7fd fc8a 	bl	90001fcc <HAL_GetTick>
900046b8:	4602      	mov	r2, r0
900046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900046bc:	1ad3      	subs	r3, r2, r3
900046be:	2b02      	cmp	r3, #2
900046c0:	d901      	bls.n	900046c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
900046c2:	2303      	movs	r3, #3
900046c4:	e1c0      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900046c6:	4b92      	ldr	r3, [pc, #584]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900046c8:	681b      	ldr	r3, [r3, #0]
900046ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900046ce:	2b00      	cmp	r3, #0
900046d0:	d1f0      	bne.n	900046b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900046d2:	687b      	ldr	r3, [r7, #4]
900046d4:	681b      	ldr	r3, [r3, #0]
900046d6:	f003 0304 	and.w	r3, r3, #4
900046da:	2b00      	cmp	r3, #0
900046dc:	f000 8081 	beq.w	900047e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900046e0:	4b8c      	ldr	r3, [pc, #560]	; (90004914 <HAL_RCC_OscConfig+0x770>)
900046e2:	681b      	ldr	r3, [r3, #0]
900046e4:	4a8b      	ldr	r2, [pc, #556]	; (90004914 <HAL_RCC_OscConfig+0x770>)
900046e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900046ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900046ec:	f7fd fc6e 	bl	90001fcc <HAL_GetTick>
900046f0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900046f2:	e008      	b.n	90004706 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900046f4:	f7fd fc6a 	bl	90001fcc <HAL_GetTick>
900046f8:	4602      	mov	r2, r0
900046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900046fc:	1ad3      	subs	r3, r2, r3
900046fe:	2b64      	cmp	r3, #100	; 0x64
90004700:	d901      	bls.n	90004706 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90004702:	2303      	movs	r3, #3
90004704:	e1a0      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90004706:	4b83      	ldr	r3, [pc, #524]	; (90004914 <HAL_RCC_OscConfig+0x770>)
90004708:	681b      	ldr	r3, [r3, #0]
9000470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000470e:	2b00      	cmp	r3, #0
90004710:	d0f0      	beq.n	900046f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90004712:	687b      	ldr	r3, [r7, #4]
90004714:	689b      	ldr	r3, [r3, #8]
90004716:	2b01      	cmp	r3, #1
90004718:	d106      	bne.n	90004728 <HAL_RCC_OscConfig+0x584>
9000471a:	4b7d      	ldr	r3, [pc, #500]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000471e:	4a7c      	ldr	r2, [pc, #496]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004720:	f043 0301 	orr.w	r3, r3, #1
90004724:	6713      	str	r3, [r2, #112]	; 0x70
90004726:	e02d      	b.n	90004784 <HAL_RCC_OscConfig+0x5e0>
90004728:	687b      	ldr	r3, [r7, #4]
9000472a:	689b      	ldr	r3, [r3, #8]
9000472c:	2b00      	cmp	r3, #0
9000472e:	d10c      	bne.n	9000474a <HAL_RCC_OscConfig+0x5a6>
90004730:	4b77      	ldr	r3, [pc, #476]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004734:	4a76      	ldr	r2, [pc, #472]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004736:	f023 0301 	bic.w	r3, r3, #1
9000473a:	6713      	str	r3, [r2, #112]	; 0x70
9000473c:	4b74      	ldr	r3, [pc, #464]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004740:	4a73      	ldr	r2, [pc, #460]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004742:	f023 0304 	bic.w	r3, r3, #4
90004746:	6713      	str	r3, [r2, #112]	; 0x70
90004748:	e01c      	b.n	90004784 <HAL_RCC_OscConfig+0x5e0>
9000474a:	687b      	ldr	r3, [r7, #4]
9000474c:	689b      	ldr	r3, [r3, #8]
9000474e:	2b05      	cmp	r3, #5
90004750:	d10c      	bne.n	9000476c <HAL_RCC_OscConfig+0x5c8>
90004752:	4b6f      	ldr	r3, [pc, #444]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004756:	4a6e      	ldr	r2, [pc, #440]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004758:	f043 0304 	orr.w	r3, r3, #4
9000475c:	6713      	str	r3, [r2, #112]	; 0x70
9000475e:	4b6c      	ldr	r3, [pc, #432]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004762:	4a6b      	ldr	r2, [pc, #428]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004764:	f043 0301 	orr.w	r3, r3, #1
90004768:	6713      	str	r3, [r2, #112]	; 0x70
9000476a:	e00b      	b.n	90004784 <HAL_RCC_OscConfig+0x5e0>
9000476c:	4b68      	ldr	r3, [pc, #416]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004770:	4a67      	ldr	r2, [pc, #412]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004772:	f023 0301 	bic.w	r3, r3, #1
90004776:	6713      	str	r3, [r2, #112]	; 0x70
90004778:	4b65      	ldr	r3, [pc, #404]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000477c:	4a64      	ldr	r2, [pc, #400]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000477e:	f023 0304 	bic.w	r3, r3, #4
90004782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90004784:	687b      	ldr	r3, [r7, #4]
90004786:	689b      	ldr	r3, [r3, #8]
90004788:	2b00      	cmp	r3, #0
9000478a:	d015      	beq.n	900047b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000478c:	f7fd fc1e 	bl	90001fcc <HAL_GetTick>
90004790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90004792:	e00a      	b.n	900047aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90004794:	f7fd fc1a 	bl	90001fcc <HAL_GetTick>
90004798:	4602      	mov	r2, r0
9000479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000479c:	1ad3      	subs	r3, r2, r3
9000479e:	f241 3288 	movw	r2, #5000	; 0x1388
900047a2:	4293      	cmp	r3, r2
900047a4:	d901      	bls.n	900047aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
900047a6:	2303      	movs	r3, #3
900047a8:	e14e      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900047aa:	4b59      	ldr	r3, [pc, #356]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900047ae:	f003 0302 	and.w	r3, r3, #2
900047b2:	2b00      	cmp	r3, #0
900047b4:	d0ee      	beq.n	90004794 <HAL_RCC_OscConfig+0x5f0>
900047b6:	e014      	b.n	900047e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900047b8:	f7fd fc08 	bl	90001fcc <HAL_GetTick>
900047bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900047be:	e00a      	b.n	900047d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
900047c0:	f7fd fc04 	bl	90001fcc <HAL_GetTick>
900047c4:	4602      	mov	r2, r0
900047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900047c8:	1ad3      	subs	r3, r2, r3
900047ca:	f241 3288 	movw	r2, #5000	; 0x1388
900047ce:	4293      	cmp	r3, r2
900047d0:	d901      	bls.n	900047d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
900047d2:	2303      	movs	r3, #3
900047d4:	e138      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900047d6:	4b4e      	ldr	r3, [pc, #312]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900047da:	f003 0302 	and.w	r3, r3, #2
900047de:	2b00      	cmp	r3, #0
900047e0:	d1ee      	bne.n	900047c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900047e2:	687b      	ldr	r3, [r7, #4]
900047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900047e6:	2b00      	cmp	r3, #0
900047e8:	f000 812d 	beq.w	90004a46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
900047ec:	4b48      	ldr	r3, [pc, #288]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900047ee:	691b      	ldr	r3, [r3, #16]
900047f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
900047f4:	2b18      	cmp	r3, #24
900047f6:	f000 80bd 	beq.w	90004974 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
900047fa:	687b      	ldr	r3, [r7, #4]
900047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900047fe:	2b02      	cmp	r3, #2
90004800:	f040 809e 	bne.w	90004940 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90004804:	4b42      	ldr	r3, [pc, #264]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004806:	681b      	ldr	r3, [r3, #0]
90004808:	4a41      	ldr	r2, [pc, #260]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000480a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000480e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004810:	f7fd fbdc 	bl	90001fcc <HAL_GetTick>
90004814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90004816:	e008      	b.n	9000482a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004818:	f7fd fbd8 	bl	90001fcc <HAL_GetTick>
9000481c:	4602      	mov	r2, r0
9000481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004820:	1ad3      	subs	r3, r2, r3
90004822:	2b02      	cmp	r3, #2
90004824:	d901      	bls.n	9000482a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90004826:	2303      	movs	r3, #3
90004828:	e10e      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000482a:	4b39      	ldr	r3, [pc, #228]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000482c:	681b      	ldr	r3, [r3, #0]
9000482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004832:	2b00      	cmp	r3, #0
90004834:	d1f0      	bne.n	90004818 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90004836:	4b36      	ldr	r3, [pc, #216]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000483a:	4b37      	ldr	r3, [pc, #220]	; (90004918 <HAL_RCC_OscConfig+0x774>)
9000483c:	4013      	ands	r3, r2
9000483e:	687a      	ldr	r2, [r7, #4]
90004840:	6a91      	ldr	r1, [r2, #40]	; 0x28
90004842:	687a      	ldr	r2, [r7, #4]
90004844:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90004846:	0112      	lsls	r2, r2, #4
90004848:	430a      	orrs	r2, r1
9000484a:	4931      	ldr	r1, [pc, #196]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000484c:	4313      	orrs	r3, r2
9000484e:	628b      	str	r3, [r1, #40]	; 0x28
90004850:	687b      	ldr	r3, [r7, #4]
90004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004854:	3b01      	subs	r3, #1
90004856:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000485a:	687b      	ldr	r3, [r7, #4]
9000485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000485e:	3b01      	subs	r3, #1
90004860:	025b      	lsls	r3, r3, #9
90004862:	b29b      	uxth	r3, r3
90004864:	431a      	orrs	r2, r3
90004866:	687b      	ldr	r3, [r7, #4]
90004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000486a:	3b01      	subs	r3, #1
9000486c:	041b      	lsls	r3, r3, #16
9000486e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90004872:	431a      	orrs	r2, r3
90004874:	687b      	ldr	r3, [r7, #4]
90004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90004878:	3b01      	subs	r3, #1
9000487a:	061b      	lsls	r3, r3, #24
9000487c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90004880:	4923      	ldr	r1, [pc, #140]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004882:	4313      	orrs	r3, r2
90004884:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90004886:	4b22      	ldr	r3, [pc, #136]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000488a:	4a21      	ldr	r2, [pc, #132]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
9000488c:	f023 0301 	bic.w	r3, r3, #1
90004890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90004892:	4b1f      	ldr	r3, [pc, #124]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90004896:	4b21      	ldr	r3, [pc, #132]	; (9000491c <HAL_RCC_OscConfig+0x778>)
90004898:	4013      	ands	r3, r2
9000489a:	687a      	ldr	r2, [r7, #4]
9000489c:	6c92      	ldr	r2, [r2, #72]	; 0x48
9000489e:	00d2      	lsls	r2, r2, #3
900048a0:	491b      	ldr	r1, [pc, #108]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048a2:	4313      	orrs	r3, r2
900048a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
900048a6:	4b1a      	ldr	r3, [pc, #104]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900048aa:	f023 020c 	bic.w	r2, r3, #12
900048ae:	687b      	ldr	r3, [r7, #4]
900048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900048b2:	4917      	ldr	r1, [pc, #92]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048b4:	4313      	orrs	r3, r2
900048b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
900048b8:	4b15      	ldr	r3, [pc, #84]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900048bc:	f023 0202 	bic.w	r2, r3, #2
900048c0:	687b      	ldr	r3, [r7, #4]
900048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900048c4:	4912      	ldr	r1, [pc, #72]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048c6:	4313      	orrs	r3, r2
900048c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
900048ca:	4b11      	ldr	r3, [pc, #68]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900048ce:	4a10      	ldr	r2, [pc, #64]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900048d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900048d6:	4b0e      	ldr	r3, [pc, #56]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900048da:	4a0d      	ldr	r2, [pc, #52]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900048e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
900048e2:	4b0b      	ldr	r3, [pc, #44]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900048e6:	4a0a      	ldr	r2, [pc, #40]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900048ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
900048ee:	4b08      	ldr	r3, [pc, #32]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900048f2:	4a07      	ldr	r2, [pc, #28]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048f4:	f043 0301 	orr.w	r3, r3, #1
900048f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
900048fa:	4b05      	ldr	r3, [pc, #20]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
900048fc:	681b      	ldr	r3, [r3, #0]
900048fe:	4a04      	ldr	r2, [pc, #16]	; (90004910 <HAL_RCC_OscConfig+0x76c>)
90004900:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90004904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90004906:	f7fd fb61 	bl	90001fcc <HAL_GetTick>
9000490a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000490c:	e011      	b.n	90004932 <HAL_RCC_OscConfig+0x78e>
9000490e:	bf00      	nop
90004910:	58024400 	.word	0x58024400
90004914:	58024800 	.word	0x58024800
90004918:	fffffc0c 	.word	0xfffffc0c
9000491c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004920:	f7fd fb54 	bl	90001fcc <HAL_GetTick>
90004924:	4602      	mov	r2, r0
90004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004928:	1ad3      	subs	r3, r2, r3
9000492a:	2b02      	cmp	r3, #2
9000492c:	d901      	bls.n	90004932 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
9000492e:	2303      	movs	r3, #3
90004930:	e08a      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90004932:	4b47      	ldr	r3, [pc, #284]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004934:	681b      	ldr	r3, [r3, #0]
90004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000493a:	2b00      	cmp	r3, #0
9000493c:	d0f0      	beq.n	90004920 <HAL_RCC_OscConfig+0x77c>
9000493e:	e082      	b.n	90004a46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90004940:	4b43      	ldr	r3, [pc, #268]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004942:	681b      	ldr	r3, [r3, #0]
90004944:	4a42      	ldr	r2, [pc, #264]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000494a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000494c:	f7fd fb3e 	bl	90001fcc <HAL_GetTick>
90004950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90004952:	e008      	b.n	90004966 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90004954:	f7fd fb3a 	bl	90001fcc <HAL_GetTick>
90004958:	4602      	mov	r2, r0
9000495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000495c:	1ad3      	subs	r3, r2, r3
9000495e:	2b02      	cmp	r3, #2
90004960:	d901      	bls.n	90004966 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90004962:	2303      	movs	r3, #3
90004964:	e070      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90004966:	4b3a      	ldr	r3, [pc, #232]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004968:	681b      	ldr	r3, [r3, #0]
9000496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000496e:	2b00      	cmp	r3, #0
90004970:	d1f0      	bne.n	90004954 <HAL_RCC_OscConfig+0x7b0>
90004972:	e068      	b.n	90004a46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90004974:	4b36      	ldr	r3, [pc, #216]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004978:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
9000497a:	4b35      	ldr	r3, [pc, #212]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
9000497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000497e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004980:	687b      	ldr	r3, [r7, #4]
90004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004984:	2b01      	cmp	r3, #1
90004986:	d031      	beq.n	900049ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90004988:	693b      	ldr	r3, [r7, #16]
9000498a:	f003 0203 	and.w	r2, r3, #3
9000498e:	687b      	ldr	r3, [r7, #4]
90004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90004992:	429a      	cmp	r2, r3
90004994:	d12a      	bne.n	900049ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90004996:	693b      	ldr	r3, [r7, #16]
90004998:	091b      	lsrs	r3, r3, #4
9000499a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000499e:	687b      	ldr	r3, [r7, #4]
900049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900049a2:	429a      	cmp	r2, r3
900049a4:	d122      	bne.n	900049ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900049a6:	68fb      	ldr	r3, [r7, #12]
900049a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
900049ac:	687b      	ldr	r3, [r7, #4]
900049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900049b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900049b2:	429a      	cmp	r2, r3
900049b4:	d11a      	bne.n	900049ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900049b6:	68fb      	ldr	r3, [r7, #12]
900049b8:	0a5b      	lsrs	r3, r3, #9
900049ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900049be:	687b      	ldr	r3, [r7, #4]
900049c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900049c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900049c4:	429a      	cmp	r2, r3
900049c6:	d111      	bne.n	900049ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900049c8:	68fb      	ldr	r3, [r7, #12]
900049ca:	0c1b      	lsrs	r3, r3, #16
900049cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900049d0:	687b      	ldr	r3, [r7, #4]
900049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900049d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900049d6:	429a      	cmp	r2, r3
900049d8:	d108      	bne.n	900049ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
900049da:	68fb      	ldr	r3, [r7, #12]
900049dc:	0e1b      	lsrs	r3, r3, #24
900049de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900049e2:	687b      	ldr	r3, [r7, #4]
900049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900049e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900049e8:	429a      	cmp	r2, r3
900049ea:	d001      	beq.n	900049f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
900049ec:	2301      	movs	r3, #1
900049ee:	e02b      	b.n	90004a48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
900049f0:	4b17      	ldr	r3, [pc, #92]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
900049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900049f4:	08db      	lsrs	r3, r3, #3
900049f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
900049fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
900049fc:	687b      	ldr	r3, [r7, #4]
900049fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90004a00:	693a      	ldr	r2, [r7, #16]
90004a02:	429a      	cmp	r2, r3
90004a04:	d01f      	beq.n	90004a46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90004a06:	4b12      	ldr	r3, [pc, #72]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004a0a:	4a11      	ldr	r2, [pc, #68]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004a0c:	f023 0301 	bic.w	r3, r3, #1
90004a10:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90004a12:	f7fd fadb 	bl	90001fcc <HAL_GetTick>
90004a16:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90004a18:	bf00      	nop
90004a1a:	f7fd fad7 	bl	90001fcc <HAL_GetTick>
90004a1e:	4602      	mov	r2, r0
90004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004a22:	4293      	cmp	r3, r2
90004a24:	d0f9      	beq.n	90004a1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90004a26:	4b0a      	ldr	r3, [pc, #40]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90004a2a:	4b0a      	ldr	r3, [pc, #40]	; (90004a54 <HAL_RCC_OscConfig+0x8b0>)
90004a2c:	4013      	ands	r3, r2
90004a2e:	687a      	ldr	r2, [r7, #4]
90004a30:	6c92      	ldr	r2, [r2, #72]	; 0x48
90004a32:	00d2      	lsls	r2, r2, #3
90004a34:	4906      	ldr	r1, [pc, #24]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004a36:	4313      	orrs	r3, r2
90004a38:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
90004a3a:	4b05      	ldr	r3, [pc, #20]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004a3e:	4a04      	ldr	r2, [pc, #16]	; (90004a50 <HAL_RCC_OscConfig+0x8ac>)
90004a40:	f043 0301 	orr.w	r3, r3, #1
90004a44:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
90004a46:	2300      	movs	r3, #0
}
90004a48:	4618      	mov	r0, r3
90004a4a:	3730      	adds	r7, #48	; 0x30
90004a4c:	46bd      	mov	sp, r7
90004a4e:	bd80      	pop	{r7, pc}
90004a50:	58024400 	.word	0x58024400
90004a54:	ffff0007 	.word	0xffff0007

90004a58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90004a58:	b580      	push	{r7, lr}
90004a5a:	b086      	sub	sp, #24
90004a5c:	af00      	add	r7, sp, #0
90004a5e:	6078      	str	r0, [r7, #4]
90004a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90004a62:	687b      	ldr	r3, [r7, #4]
90004a64:	2b00      	cmp	r3, #0
90004a66:	d101      	bne.n	90004a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90004a68:	2301      	movs	r3, #1
90004a6a:	e19c      	b.n	90004da6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90004a6c:	4b8a      	ldr	r3, [pc, #552]	; (90004c98 <HAL_RCC_ClockConfig+0x240>)
90004a6e:	681b      	ldr	r3, [r3, #0]
90004a70:	f003 030f 	and.w	r3, r3, #15
90004a74:	683a      	ldr	r2, [r7, #0]
90004a76:	429a      	cmp	r2, r3
90004a78:	d910      	bls.n	90004a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90004a7a:	4b87      	ldr	r3, [pc, #540]	; (90004c98 <HAL_RCC_ClockConfig+0x240>)
90004a7c:	681b      	ldr	r3, [r3, #0]
90004a7e:	f023 020f 	bic.w	r2, r3, #15
90004a82:	4985      	ldr	r1, [pc, #532]	; (90004c98 <HAL_RCC_ClockConfig+0x240>)
90004a84:	683b      	ldr	r3, [r7, #0]
90004a86:	4313      	orrs	r3, r2
90004a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004a8a:	4b83      	ldr	r3, [pc, #524]	; (90004c98 <HAL_RCC_ClockConfig+0x240>)
90004a8c:	681b      	ldr	r3, [r3, #0]
90004a8e:	f003 030f 	and.w	r3, r3, #15
90004a92:	683a      	ldr	r2, [r7, #0]
90004a94:	429a      	cmp	r2, r3
90004a96:	d001      	beq.n	90004a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90004a98:	2301      	movs	r3, #1
90004a9a:	e184      	b.n	90004da6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90004a9c:	687b      	ldr	r3, [r7, #4]
90004a9e:	681b      	ldr	r3, [r3, #0]
90004aa0:	f003 0304 	and.w	r3, r3, #4
90004aa4:	2b00      	cmp	r3, #0
90004aa6:	d010      	beq.n	90004aca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90004aa8:	687b      	ldr	r3, [r7, #4]
90004aaa:	691a      	ldr	r2, [r3, #16]
90004aac:	4b7b      	ldr	r3, [pc, #492]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004aae:	699b      	ldr	r3, [r3, #24]
90004ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004ab4:	429a      	cmp	r2, r3
90004ab6:	d908      	bls.n	90004aca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90004ab8:	4b78      	ldr	r3, [pc, #480]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004aba:	699b      	ldr	r3, [r3, #24]
90004abc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004ac0:	687b      	ldr	r3, [r7, #4]
90004ac2:	691b      	ldr	r3, [r3, #16]
90004ac4:	4975      	ldr	r1, [pc, #468]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004ac6:	4313      	orrs	r3, r2
90004ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004aca:	687b      	ldr	r3, [r7, #4]
90004acc:	681b      	ldr	r3, [r3, #0]
90004ace:	f003 0308 	and.w	r3, r3, #8
90004ad2:	2b00      	cmp	r3, #0
90004ad4:	d010      	beq.n	90004af8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90004ad6:	687b      	ldr	r3, [r7, #4]
90004ad8:	695a      	ldr	r2, [r3, #20]
90004ada:	4b70      	ldr	r3, [pc, #448]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004adc:	69db      	ldr	r3, [r3, #28]
90004ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004ae2:	429a      	cmp	r2, r3
90004ae4:	d908      	bls.n	90004af8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90004ae6:	4b6d      	ldr	r3, [pc, #436]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004ae8:	69db      	ldr	r3, [r3, #28]
90004aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004aee:	687b      	ldr	r3, [r7, #4]
90004af0:	695b      	ldr	r3, [r3, #20]
90004af2:	496a      	ldr	r1, [pc, #424]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004af4:	4313      	orrs	r3, r2
90004af6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004af8:	687b      	ldr	r3, [r7, #4]
90004afa:	681b      	ldr	r3, [r3, #0]
90004afc:	f003 0310 	and.w	r3, r3, #16
90004b00:	2b00      	cmp	r3, #0
90004b02:	d010      	beq.n	90004b26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90004b04:	687b      	ldr	r3, [r7, #4]
90004b06:	699a      	ldr	r2, [r3, #24]
90004b08:	4b64      	ldr	r3, [pc, #400]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b0a:	69db      	ldr	r3, [r3, #28]
90004b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90004b10:	429a      	cmp	r2, r3
90004b12:	d908      	bls.n	90004b26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90004b14:	4b61      	ldr	r3, [pc, #388]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b16:	69db      	ldr	r3, [r3, #28]
90004b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90004b1c:	687b      	ldr	r3, [r7, #4]
90004b1e:	699b      	ldr	r3, [r3, #24]
90004b20:	495e      	ldr	r1, [pc, #376]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b22:	4313      	orrs	r3, r2
90004b24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90004b26:	687b      	ldr	r3, [r7, #4]
90004b28:	681b      	ldr	r3, [r3, #0]
90004b2a:	f003 0320 	and.w	r3, r3, #32
90004b2e:	2b00      	cmp	r3, #0
90004b30:	d010      	beq.n	90004b54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90004b32:	687b      	ldr	r3, [r7, #4]
90004b34:	69da      	ldr	r2, [r3, #28]
90004b36:	4b59      	ldr	r3, [pc, #356]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b38:	6a1b      	ldr	r3, [r3, #32]
90004b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004b3e:	429a      	cmp	r2, r3
90004b40:	d908      	bls.n	90004b54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90004b42:	4b56      	ldr	r3, [pc, #344]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b44:	6a1b      	ldr	r3, [r3, #32]
90004b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004b4a:	687b      	ldr	r3, [r7, #4]
90004b4c:	69db      	ldr	r3, [r3, #28]
90004b4e:	4953      	ldr	r1, [pc, #332]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b50:	4313      	orrs	r3, r2
90004b52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004b54:	687b      	ldr	r3, [r7, #4]
90004b56:	681b      	ldr	r3, [r3, #0]
90004b58:	f003 0302 	and.w	r3, r3, #2
90004b5c:	2b00      	cmp	r3, #0
90004b5e:	d010      	beq.n	90004b82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90004b60:	687b      	ldr	r3, [r7, #4]
90004b62:	68da      	ldr	r2, [r3, #12]
90004b64:	4b4d      	ldr	r3, [pc, #308]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b66:	699b      	ldr	r3, [r3, #24]
90004b68:	f003 030f 	and.w	r3, r3, #15
90004b6c:	429a      	cmp	r2, r3
90004b6e:	d908      	bls.n	90004b82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004b70:	4b4a      	ldr	r3, [pc, #296]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b72:	699b      	ldr	r3, [r3, #24]
90004b74:	f023 020f 	bic.w	r2, r3, #15
90004b78:	687b      	ldr	r3, [r7, #4]
90004b7a:	68db      	ldr	r3, [r3, #12]
90004b7c:	4947      	ldr	r1, [pc, #284]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b7e:	4313      	orrs	r3, r2
90004b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90004b82:	687b      	ldr	r3, [r7, #4]
90004b84:	681b      	ldr	r3, [r3, #0]
90004b86:	f003 0301 	and.w	r3, r3, #1
90004b8a:	2b00      	cmp	r3, #0
90004b8c:	d055      	beq.n	90004c3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90004b8e:	4b43      	ldr	r3, [pc, #268]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b90:	699b      	ldr	r3, [r3, #24]
90004b92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
90004b96:	687b      	ldr	r3, [r7, #4]
90004b98:	689b      	ldr	r3, [r3, #8]
90004b9a:	4940      	ldr	r1, [pc, #256]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004b9c:	4313      	orrs	r3, r2
90004b9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90004ba0:	687b      	ldr	r3, [r7, #4]
90004ba2:	685b      	ldr	r3, [r3, #4]
90004ba4:	2b02      	cmp	r3, #2
90004ba6:	d107      	bne.n	90004bb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90004ba8:	4b3c      	ldr	r3, [pc, #240]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004baa:	681b      	ldr	r3, [r3, #0]
90004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004bb0:	2b00      	cmp	r3, #0
90004bb2:	d121      	bne.n	90004bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90004bb4:	2301      	movs	r3, #1
90004bb6:	e0f6      	b.n	90004da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90004bb8:	687b      	ldr	r3, [r7, #4]
90004bba:	685b      	ldr	r3, [r3, #4]
90004bbc:	2b03      	cmp	r3, #3
90004bbe:	d107      	bne.n	90004bd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90004bc0:	4b36      	ldr	r3, [pc, #216]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004bc2:	681b      	ldr	r3, [r3, #0]
90004bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90004bc8:	2b00      	cmp	r3, #0
90004bca:	d115      	bne.n	90004bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90004bcc:	2301      	movs	r3, #1
90004bce:	e0ea      	b.n	90004da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90004bd0:	687b      	ldr	r3, [r7, #4]
90004bd2:	685b      	ldr	r3, [r3, #4]
90004bd4:	2b01      	cmp	r3, #1
90004bd6:	d107      	bne.n	90004be8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90004bd8:	4b30      	ldr	r3, [pc, #192]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004bda:	681b      	ldr	r3, [r3, #0]
90004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004be0:	2b00      	cmp	r3, #0
90004be2:	d109      	bne.n	90004bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90004be4:	2301      	movs	r3, #1
90004be6:	e0de      	b.n	90004da6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90004be8:	4b2c      	ldr	r3, [pc, #176]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004bea:	681b      	ldr	r3, [r3, #0]
90004bec:	f003 0304 	and.w	r3, r3, #4
90004bf0:	2b00      	cmp	r3, #0
90004bf2:	d101      	bne.n	90004bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90004bf4:	2301      	movs	r3, #1
90004bf6:	e0d6      	b.n	90004da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90004bf8:	4b28      	ldr	r3, [pc, #160]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004bfa:	691b      	ldr	r3, [r3, #16]
90004bfc:	f023 0207 	bic.w	r2, r3, #7
90004c00:	687b      	ldr	r3, [r7, #4]
90004c02:	685b      	ldr	r3, [r3, #4]
90004c04:	4925      	ldr	r1, [pc, #148]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004c06:	4313      	orrs	r3, r2
90004c08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90004c0a:	f7fd f9df 	bl	90001fcc <HAL_GetTick>
90004c0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004c10:	e00a      	b.n	90004c28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90004c12:	f7fd f9db 	bl	90001fcc <HAL_GetTick>
90004c16:	4602      	mov	r2, r0
90004c18:	697b      	ldr	r3, [r7, #20]
90004c1a:	1ad3      	subs	r3, r2, r3
90004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
90004c20:	4293      	cmp	r3, r2
90004c22:	d901      	bls.n	90004c28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90004c24:	2303      	movs	r3, #3
90004c26:	e0be      	b.n	90004da6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90004c28:	4b1c      	ldr	r3, [pc, #112]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004c2a:	691b      	ldr	r3, [r3, #16]
90004c2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
90004c30:	687b      	ldr	r3, [r7, #4]
90004c32:	685b      	ldr	r3, [r3, #4]
90004c34:	00db      	lsls	r3, r3, #3
90004c36:	429a      	cmp	r2, r3
90004c38:	d1eb      	bne.n	90004c12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90004c3a:	687b      	ldr	r3, [r7, #4]
90004c3c:	681b      	ldr	r3, [r3, #0]
90004c3e:	f003 0302 	and.w	r3, r3, #2
90004c42:	2b00      	cmp	r3, #0
90004c44:	d010      	beq.n	90004c68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90004c46:	687b      	ldr	r3, [r7, #4]
90004c48:	68da      	ldr	r2, [r3, #12]
90004c4a:	4b14      	ldr	r3, [pc, #80]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004c4c:	699b      	ldr	r3, [r3, #24]
90004c4e:	f003 030f 	and.w	r3, r3, #15
90004c52:	429a      	cmp	r2, r3
90004c54:	d208      	bcs.n	90004c68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90004c56:	4b11      	ldr	r3, [pc, #68]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004c58:	699b      	ldr	r3, [r3, #24]
90004c5a:	f023 020f 	bic.w	r2, r3, #15
90004c5e:	687b      	ldr	r3, [r7, #4]
90004c60:	68db      	ldr	r3, [r3, #12]
90004c62:	490e      	ldr	r1, [pc, #56]	; (90004c9c <HAL_RCC_ClockConfig+0x244>)
90004c64:	4313      	orrs	r3, r2
90004c66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90004c68:	4b0b      	ldr	r3, [pc, #44]	; (90004c98 <HAL_RCC_ClockConfig+0x240>)
90004c6a:	681b      	ldr	r3, [r3, #0]
90004c6c:	f003 030f 	and.w	r3, r3, #15
90004c70:	683a      	ldr	r2, [r7, #0]
90004c72:	429a      	cmp	r2, r3
90004c74:	d214      	bcs.n	90004ca0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90004c76:	4b08      	ldr	r3, [pc, #32]	; (90004c98 <HAL_RCC_ClockConfig+0x240>)
90004c78:	681b      	ldr	r3, [r3, #0]
90004c7a:	f023 020f 	bic.w	r2, r3, #15
90004c7e:	4906      	ldr	r1, [pc, #24]	; (90004c98 <HAL_RCC_ClockConfig+0x240>)
90004c80:	683b      	ldr	r3, [r7, #0]
90004c82:	4313      	orrs	r3, r2
90004c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90004c86:	4b04      	ldr	r3, [pc, #16]	; (90004c98 <HAL_RCC_ClockConfig+0x240>)
90004c88:	681b      	ldr	r3, [r3, #0]
90004c8a:	f003 030f 	and.w	r3, r3, #15
90004c8e:	683a      	ldr	r2, [r7, #0]
90004c90:	429a      	cmp	r2, r3
90004c92:	d005      	beq.n	90004ca0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90004c94:	2301      	movs	r3, #1
90004c96:	e086      	b.n	90004da6 <HAL_RCC_ClockConfig+0x34e>
90004c98:	52002000 	.word	0x52002000
90004c9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90004ca0:	687b      	ldr	r3, [r7, #4]
90004ca2:	681b      	ldr	r3, [r3, #0]
90004ca4:	f003 0304 	and.w	r3, r3, #4
90004ca8:	2b00      	cmp	r3, #0
90004caa:	d010      	beq.n	90004cce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90004cac:	687b      	ldr	r3, [r7, #4]
90004cae:	691a      	ldr	r2, [r3, #16]
90004cb0:	4b3f      	ldr	r3, [pc, #252]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004cb2:	699b      	ldr	r3, [r3, #24]
90004cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004cb8:	429a      	cmp	r2, r3
90004cba:	d208      	bcs.n	90004cce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90004cbc:	4b3c      	ldr	r3, [pc, #240]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004cbe:	699b      	ldr	r3, [r3, #24]
90004cc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004cc4:	687b      	ldr	r3, [r7, #4]
90004cc6:	691b      	ldr	r3, [r3, #16]
90004cc8:	4939      	ldr	r1, [pc, #228]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004cca:	4313      	orrs	r3, r2
90004ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90004cce:	687b      	ldr	r3, [r7, #4]
90004cd0:	681b      	ldr	r3, [r3, #0]
90004cd2:	f003 0308 	and.w	r3, r3, #8
90004cd6:	2b00      	cmp	r3, #0
90004cd8:	d010      	beq.n	90004cfc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90004cda:	687b      	ldr	r3, [r7, #4]
90004cdc:	695a      	ldr	r2, [r3, #20]
90004cde:	4b34      	ldr	r3, [pc, #208]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004ce0:	69db      	ldr	r3, [r3, #28]
90004ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004ce6:	429a      	cmp	r2, r3
90004ce8:	d208      	bcs.n	90004cfc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90004cea:	4b31      	ldr	r3, [pc, #196]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004cec:	69db      	ldr	r3, [r3, #28]
90004cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004cf2:	687b      	ldr	r3, [r7, #4]
90004cf4:	695b      	ldr	r3, [r3, #20]
90004cf6:	492e      	ldr	r1, [pc, #184]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004cf8:	4313      	orrs	r3, r2
90004cfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90004cfc:	687b      	ldr	r3, [r7, #4]
90004cfe:	681b      	ldr	r3, [r3, #0]
90004d00:	f003 0310 	and.w	r3, r3, #16
90004d04:	2b00      	cmp	r3, #0
90004d06:	d010      	beq.n	90004d2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90004d08:	687b      	ldr	r3, [r7, #4]
90004d0a:	699a      	ldr	r2, [r3, #24]
90004d0c:	4b28      	ldr	r3, [pc, #160]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004d0e:	69db      	ldr	r3, [r3, #28]
90004d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90004d14:	429a      	cmp	r2, r3
90004d16:	d208      	bcs.n	90004d2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90004d18:	4b25      	ldr	r3, [pc, #148]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004d1a:	69db      	ldr	r3, [r3, #28]
90004d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90004d20:	687b      	ldr	r3, [r7, #4]
90004d22:	699b      	ldr	r3, [r3, #24]
90004d24:	4922      	ldr	r1, [pc, #136]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004d26:	4313      	orrs	r3, r2
90004d28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90004d2a:	687b      	ldr	r3, [r7, #4]
90004d2c:	681b      	ldr	r3, [r3, #0]
90004d2e:	f003 0320 	and.w	r3, r3, #32
90004d32:	2b00      	cmp	r3, #0
90004d34:	d010      	beq.n	90004d58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90004d36:	687b      	ldr	r3, [r7, #4]
90004d38:	69da      	ldr	r2, [r3, #28]
90004d3a:	4b1d      	ldr	r3, [pc, #116]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004d3c:	6a1b      	ldr	r3, [r3, #32]
90004d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
90004d42:	429a      	cmp	r2, r3
90004d44:	d208      	bcs.n	90004d58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
90004d46:	4b1a      	ldr	r3, [pc, #104]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004d48:	6a1b      	ldr	r3, [r3, #32]
90004d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90004d4e:	687b      	ldr	r3, [r7, #4]
90004d50:	69db      	ldr	r3, [r3, #28]
90004d52:	4917      	ldr	r1, [pc, #92]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004d54:	4313      	orrs	r3, r2
90004d56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90004d58:	f000 f834 	bl	90004dc4 <HAL_RCC_GetSysClockFreq>
90004d5c:	4602      	mov	r2, r0
90004d5e:	4b14      	ldr	r3, [pc, #80]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004d60:	699b      	ldr	r3, [r3, #24]
90004d62:	0a1b      	lsrs	r3, r3, #8
90004d64:	f003 030f 	and.w	r3, r3, #15
90004d68:	4912      	ldr	r1, [pc, #72]	; (90004db4 <HAL_RCC_ClockConfig+0x35c>)
90004d6a:	5ccb      	ldrb	r3, [r1, r3]
90004d6c:	f003 031f 	and.w	r3, r3, #31
90004d70:	fa22 f303 	lsr.w	r3, r2, r3
90004d74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90004d76:	4b0e      	ldr	r3, [pc, #56]	; (90004db0 <HAL_RCC_ClockConfig+0x358>)
90004d78:	699b      	ldr	r3, [r3, #24]
90004d7a:	f003 030f 	and.w	r3, r3, #15
90004d7e:	4a0d      	ldr	r2, [pc, #52]	; (90004db4 <HAL_RCC_ClockConfig+0x35c>)
90004d80:	5cd3      	ldrb	r3, [r2, r3]
90004d82:	f003 031f 	and.w	r3, r3, #31
90004d86:	693a      	ldr	r2, [r7, #16]
90004d88:	fa22 f303 	lsr.w	r3, r2, r3
90004d8c:	4a0a      	ldr	r2, [pc, #40]	; (90004db8 <HAL_RCC_ClockConfig+0x360>)
90004d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90004d90:	4a0a      	ldr	r2, [pc, #40]	; (90004dbc <HAL_RCC_ClockConfig+0x364>)
90004d92:	693b      	ldr	r3, [r7, #16]
90004d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90004d96:	4b0a      	ldr	r3, [pc, #40]	; (90004dc0 <HAL_RCC_ClockConfig+0x368>)
90004d98:	681b      	ldr	r3, [r3, #0]
90004d9a:	4618      	mov	r0, r3
90004d9c:	f7fc fc12 	bl	900015c4 <HAL_InitTick>
90004da0:	4603      	mov	r3, r0
90004da2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90004da4:	7bfb      	ldrb	r3, [r7, #15]
}
90004da6:	4618      	mov	r0, r3
90004da8:	3718      	adds	r7, #24
90004daa:	46bd      	mov	sp, r7
90004dac:	bd80      	pop	{r7, pc}
90004dae:	bf00      	nop
90004db0:	58024400 	.word	0x58024400
90004db4:	90014068 	.word	0x90014068
90004db8:	24000004 	.word	0x24000004
90004dbc:	24000000 	.word	0x24000000
90004dc0:	24000008 	.word	0x24000008

90004dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90004dc4:	b480      	push	{r7}
90004dc6:	b089      	sub	sp, #36	; 0x24
90004dc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90004dca:	4bb3      	ldr	r3, [pc, #716]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004dcc:	691b      	ldr	r3, [r3, #16]
90004dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004dd2:	2b18      	cmp	r3, #24
90004dd4:	f200 8155 	bhi.w	90005082 <HAL_RCC_GetSysClockFreq+0x2be>
90004dd8:	a201      	add	r2, pc, #4	; (adr r2, 90004de0 <HAL_RCC_GetSysClockFreq+0x1c>)
90004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004dde:	bf00      	nop
90004de0:	90004e45 	.word	0x90004e45
90004de4:	90005083 	.word	0x90005083
90004de8:	90005083 	.word	0x90005083
90004dec:	90005083 	.word	0x90005083
90004df0:	90005083 	.word	0x90005083
90004df4:	90005083 	.word	0x90005083
90004df8:	90005083 	.word	0x90005083
90004dfc:	90005083 	.word	0x90005083
90004e00:	90004e6b 	.word	0x90004e6b
90004e04:	90005083 	.word	0x90005083
90004e08:	90005083 	.word	0x90005083
90004e0c:	90005083 	.word	0x90005083
90004e10:	90005083 	.word	0x90005083
90004e14:	90005083 	.word	0x90005083
90004e18:	90005083 	.word	0x90005083
90004e1c:	90005083 	.word	0x90005083
90004e20:	90004e71 	.word	0x90004e71
90004e24:	90005083 	.word	0x90005083
90004e28:	90005083 	.word	0x90005083
90004e2c:	90005083 	.word	0x90005083
90004e30:	90005083 	.word	0x90005083
90004e34:	90005083 	.word	0x90005083
90004e38:	90005083 	.word	0x90005083
90004e3c:	90005083 	.word	0x90005083
90004e40:	90004e77 	.word	0x90004e77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004e44:	4b94      	ldr	r3, [pc, #592]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e46:	681b      	ldr	r3, [r3, #0]
90004e48:	f003 0320 	and.w	r3, r3, #32
90004e4c:	2b00      	cmp	r3, #0
90004e4e:	d009      	beq.n	90004e64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90004e50:	4b91      	ldr	r3, [pc, #580]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e52:	681b      	ldr	r3, [r3, #0]
90004e54:	08db      	lsrs	r3, r3, #3
90004e56:	f003 0303 	and.w	r3, r3, #3
90004e5a:	4a90      	ldr	r2, [pc, #576]	; (9000509c <HAL_RCC_GetSysClockFreq+0x2d8>)
90004e5c:	fa22 f303 	lsr.w	r3, r2, r3
90004e60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
90004e62:	e111      	b.n	90005088 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90004e64:	4b8d      	ldr	r3, [pc, #564]	; (9000509c <HAL_RCC_GetSysClockFreq+0x2d8>)
90004e66:	61bb      	str	r3, [r7, #24]
      break;
90004e68:	e10e      	b.n	90005088 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
90004e6a:	4b8d      	ldr	r3, [pc, #564]	; (900050a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
90004e6c:	61bb      	str	r3, [r7, #24]
      break;
90004e6e:	e10b      	b.n	90005088 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
90004e70:	4b8c      	ldr	r3, [pc, #560]	; (900050a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
90004e72:	61bb      	str	r3, [r7, #24]
      break;
90004e74:	e108      	b.n	90005088 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90004e76:	4b88      	ldr	r3, [pc, #544]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004e7a:	f003 0303 	and.w	r3, r3, #3
90004e7e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90004e80:	4b85      	ldr	r3, [pc, #532]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004e84:	091b      	lsrs	r3, r3, #4
90004e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90004e8a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
90004e8c:	4b82      	ldr	r3, [pc, #520]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004e90:	f003 0301 	and.w	r3, r3, #1
90004e94:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90004e96:	4b80      	ldr	r3, [pc, #512]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90004e9a:	08db      	lsrs	r3, r3, #3
90004e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90004ea0:	68fa      	ldr	r2, [r7, #12]
90004ea2:	fb02 f303 	mul.w	r3, r2, r3
90004ea6:	ee07 3a90 	vmov	s15, r3
90004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004eae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90004eb2:	693b      	ldr	r3, [r7, #16]
90004eb4:	2b00      	cmp	r3, #0
90004eb6:	f000 80e1 	beq.w	9000507c <HAL_RCC_GetSysClockFreq+0x2b8>
90004eba:	697b      	ldr	r3, [r7, #20]
90004ebc:	2b02      	cmp	r3, #2
90004ebe:	f000 8083 	beq.w	90004fc8 <HAL_RCC_GetSysClockFreq+0x204>
90004ec2:	697b      	ldr	r3, [r7, #20]
90004ec4:	2b02      	cmp	r3, #2
90004ec6:	f200 80a1 	bhi.w	9000500c <HAL_RCC_GetSysClockFreq+0x248>
90004eca:	697b      	ldr	r3, [r7, #20]
90004ecc:	2b00      	cmp	r3, #0
90004ece:	d003      	beq.n	90004ed8 <HAL_RCC_GetSysClockFreq+0x114>
90004ed0:	697b      	ldr	r3, [r7, #20]
90004ed2:	2b01      	cmp	r3, #1
90004ed4:	d056      	beq.n	90004f84 <HAL_RCC_GetSysClockFreq+0x1c0>
90004ed6:	e099      	b.n	9000500c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004ed8:	4b6f      	ldr	r3, [pc, #444]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004eda:	681b      	ldr	r3, [r3, #0]
90004edc:	f003 0320 	and.w	r3, r3, #32
90004ee0:	2b00      	cmp	r3, #0
90004ee2:	d02d      	beq.n	90004f40 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90004ee4:	4b6c      	ldr	r3, [pc, #432]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004ee6:	681b      	ldr	r3, [r3, #0]
90004ee8:	08db      	lsrs	r3, r3, #3
90004eea:	f003 0303 	and.w	r3, r3, #3
90004eee:	4a6b      	ldr	r2, [pc, #428]	; (9000509c <HAL_RCC_GetSysClockFreq+0x2d8>)
90004ef0:	fa22 f303 	lsr.w	r3, r2, r3
90004ef4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90004ef6:	687b      	ldr	r3, [r7, #4]
90004ef8:	ee07 3a90 	vmov	s15, r3
90004efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004f00:	693b      	ldr	r3, [r7, #16]
90004f02:	ee07 3a90 	vmov	s15, r3
90004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004f0e:	4b62      	ldr	r3, [pc, #392]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004f16:	ee07 3a90 	vmov	s15, r3
90004f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004f1e:	ed97 6a02 	vldr	s12, [r7, #8]
90004f22:	eddf 5a61 	vldr	s11, [pc, #388]	; 900050a8 <HAL_RCC_GetSysClockFreq+0x2e4>
90004f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
90004f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
90004f3e:	e087      	b.n	90005050 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90004f40:	693b      	ldr	r3, [r7, #16]
90004f42:	ee07 3a90 	vmov	s15, r3
90004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004f4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 900050ac <HAL_RCC_GetSysClockFreq+0x2e8>
90004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004f52:	4b51      	ldr	r3, [pc, #324]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004f5a:	ee07 3a90 	vmov	s15, r3
90004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004f62:	ed97 6a02 	vldr	s12, [r7, #8]
90004f66:	eddf 5a50 	vldr	s11, [pc, #320]	; 900050a8 <HAL_RCC_GetSysClockFreq+0x2e4>
90004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
90004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90004f82:	e065      	b.n	90005050 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90004f84:	693b      	ldr	r3, [r7, #16]
90004f86:	ee07 3a90 	vmov	s15, r3
90004f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004f8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 900050b0 <HAL_RCC_GetSysClockFreq+0x2ec>
90004f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004f96:	4b40      	ldr	r3, [pc, #256]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004f9e:	ee07 3a90 	vmov	s15, r3
90004fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004fa6:	ed97 6a02 	vldr	s12, [r7, #8]
90004faa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 900050a8 <HAL_RCC_GetSysClockFreq+0x2e4>
90004fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
90004fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90004fc6:	e043      	b.n	90005050 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90004fc8:	693b      	ldr	r3, [r7, #16]
90004fca:	ee07 3a90 	vmov	s15, r3
90004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004fd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 900050b4 <HAL_RCC_GetSysClockFreq+0x2f0>
90004fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004fda:	4b2f      	ldr	r3, [pc, #188]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004fe2:	ee07 3a90 	vmov	s15, r3
90004fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004fea:	ed97 6a02 	vldr	s12, [r7, #8]
90004fee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 900050a8 <HAL_RCC_GetSysClockFreq+0x2e4>
90004ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90004ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90005002:	ee67 7a27 	vmul.f32	s15, s14, s15
90005006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000500a:	e021      	b.n	90005050 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000500c:	693b      	ldr	r3, [r7, #16]
9000500e:	ee07 3a90 	vmov	s15, r3
90005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
90005016:	eddf 6a26 	vldr	s13, [pc, #152]	; 900050b0 <HAL_RCC_GetSysClockFreq+0x2ec>
9000501a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000501e:	4b1e      	ldr	r3, [pc, #120]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005022:	f3c3 0308 	ubfx	r3, r3, #0, #9
90005026:	ee07 3a90 	vmov	s15, r3
9000502a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000502e:	ed97 6a02 	vldr	s12, [r7, #8]
90005032:	eddf 5a1d 	vldr	s11, [pc, #116]	; 900050a8 <HAL_RCC_GetSysClockFreq+0x2e4>
90005036:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000503a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000503e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90005042:	ee77 7aa6 	vadd.f32	s15, s15, s13
90005046:	ee67 7a27 	vmul.f32	s15, s14, s15
9000504a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
9000504e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90005050:	4b11      	ldr	r3, [pc, #68]	; (90005098 <HAL_RCC_GetSysClockFreq+0x2d4>)
90005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005054:	0a5b      	lsrs	r3, r3, #9
90005056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000505a:	3301      	adds	r3, #1
9000505c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000505e:	683b      	ldr	r3, [r7, #0]
90005060:	ee07 3a90 	vmov	s15, r3
90005064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90005068:	edd7 6a07 	vldr	s13, [r7, #28]
9000506c:	eec6 7a87 	vdiv.f32	s15, s13, s14
90005070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90005074:	ee17 3a90 	vmov	r3, s15
90005078:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
9000507a:	e005      	b.n	90005088 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
9000507c:	2300      	movs	r3, #0
9000507e:	61bb      	str	r3, [r7, #24]
      break;
90005080:	e002      	b.n	90005088 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90005082:	4b07      	ldr	r3, [pc, #28]	; (900050a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
90005084:	61bb      	str	r3, [r7, #24]
      break;
90005086:	bf00      	nop
  }

  return sysclockfreq;
90005088:	69bb      	ldr	r3, [r7, #24]
}
9000508a:	4618      	mov	r0, r3
9000508c:	3724      	adds	r7, #36	; 0x24
9000508e:	46bd      	mov	sp, r7
90005090:	f85d 7b04 	ldr.w	r7, [sp], #4
90005094:	4770      	bx	lr
90005096:	bf00      	nop
90005098:	58024400 	.word	0x58024400
9000509c:	03d09000 	.word	0x03d09000
900050a0:	003d0900 	.word	0x003d0900
900050a4:	02dc6c00 	.word	0x02dc6c00
900050a8:	46000000 	.word	0x46000000
900050ac:	4c742400 	.word	0x4c742400
900050b0:	4a742400 	.word	0x4a742400
900050b4:	4c371b00 	.word	0x4c371b00

900050b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
900050b8:	b580      	push	{r7, lr}
900050ba:	b082      	sub	sp, #8
900050bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
900050be:	f7ff fe81 	bl	90004dc4 <HAL_RCC_GetSysClockFreq>
900050c2:	4602      	mov	r2, r0
900050c4:	4b10      	ldr	r3, [pc, #64]	; (90005108 <HAL_RCC_GetHCLKFreq+0x50>)
900050c6:	699b      	ldr	r3, [r3, #24]
900050c8:	0a1b      	lsrs	r3, r3, #8
900050ca:	f003 030f 	and.w	r3, r3, #15
900050ce:	490f      	ldr	r1, [pc, #60]	; (9000510c <HAL_RCC_GetHCLKFreq+0x54>)
900050d0:	5ccb      	ldrb	r3, [r1, r3]
900050d2:	f003 031f 	and.w	r3, r3, #31
900050d6:	fa22 f303 	lsr.w	r3, r2, r3
900050da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900050dc:	4b0a      	ldr	r3, [pc, #40]	; (90005108 <HAL_RCC_GetHCLKFreq+0x50>)
900050de:	699b      	ldr	r3, [r3, #24]
900050e0:	f003 030f 	and.w	r3, r3, #15
900050e4:	4a09      	ldr	r2, [pc, #36]	; (9000510c <HAL_RCC_GetHCLKFreq+0x54>)
900050e6:	5cd3      	ldrb	r3, [r2, r3]
900050e8:	f003 031f 	and.w	r3, r3, #31
900050ec:	687a      	ldr	r2, [r7, #4]
900050ee:	fa22 f303 	lsr.w	r3, r2, r3
900050f2:	4a07      	ldr	r2, [pc, #28]	; (90005110 <HAL_RCC_GetHCLKFreq+0x58>)
900050f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900050f6:	4a07      	ldr	r2, [pc, #28]	; (90005114 <HAL_RCC_GetHCLKFreq+0x5c>)
900050f8:	687b      	ldr	r3, [r7, #4]
900050fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
900050fc:	4b04      	ldr	r3, [pc, #16]	; (90005110 <HAL_RCC_GetHCLKFreq+0x58>)
900050fe:	681b      	ldr	r3, [r3, #0]
}
90005100:	4618      	mov	r0, r3
90005102:	3708      	adds	r7, #8
90005104:	46bd      	mov	sp, r7
90005106:	bd80      	pop	{r7, pc}
90005108:	58024400 	.word	0x58024400
9000510c:	90014068 	.word	0x90014068
90005110:	24000004 	.word	0x24000004
90005114:	24000000 	.word	0x24000000

90005118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
90005118:	b580      	push	{r7, lr}
9000511a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000511c:	f7ff ffcc 	bl	900050b8 <HAL_RCC_GetHCLKFreq>
90005120:	4602      	mov	r2, r0
90005122:	4b06      	ldr	r3, [pc, #24]	; (9000513c <HAL_RCC_GetPCLK1Freq+0x24>)
90005124:	69db      	ldr	r3, [r3, #28]
90005126:	091b      	lsrs	r3, r3, #4
90005128:	f003 0307 	and.w	r3, r3, #7
9000512c:	4904      	ldr	r1, [pc, #16]	; (90005140 <HAL_RCC_GetPCLK1Freq+0x28>)
9000512e:	5ccb      	ldrb	r3, [r1, r3]
90005130:	f003 031f 	and.w	r3, r3, #31
90005134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90005138:	4618      	mov	r0, r3
9000513a:	bd80      	pop	{r7, pc}
9000513c:	58024400 	.word	0x58024400
90005140:	90014068 	.word	0x90014068

90005144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90005144:	b580      	push	{r7, lr}
90005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90005148:	f7ff ffb6 	bl	900050b8 <HAL_RCC_GetHCLKFreq>
9000514c:	4602      	mov	r2, r0
9000514e:	4b06      	ldr	r3, [pc, #24]	; (90005168 <HAL_RCC_GetPCLK2Freq+0x24>)
90005150:	69db      	ldr	r3, [r3, #28]
90005152:	0a1b      	lsrs	r3, r3, #8
90005154:	f003 0307 	and.w	r3, r3, #7
90005158:	4904      	ldr	r1, [pc, #16]	; (9000516c <HAL_RCC_GetPCLK2Freq+0x28>)
9000515a:	5ccb      	ldrb	r3, [r1, r3]
9000515c:	f003 031f 	and.w	r3, r3, #31
90005160:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90005164:	4618      	mov	r0, r3
90005166:	bd80      	pop	{r7, pc}
90005168:	58024400 	.word	0x58024400
9000516c:	90014068 	.word	0x90014068

90005170 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
90005170:	b480      	push	{r7}
90005172:	b083      	sub	sp, #12
90005174:	af00      	add	r7, sp, #0
90005176:	6078      	str	r0, [r7, #4]
90005178:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000517a:	687b      	ldr	r3, [r7, #4]
9000517c:	223f      	movs	r2, #63	; 0x3f
9000517e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
90005180:	4b1a      	ldr	r3, [pc, #104]	; (900051ec <HAL_RCC_GetClockConfig+0x7c>)
90005182:	691b      	ldr	r3, [r3, #16]
90005184:	f003 0207 	and.w	r2, r3, #7
90005188:	687b      	ldr	r3, [r7, #4]
9000518a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000518c:	4b17      	ldr	r3, [pc, #92]	; (900051ec <HAL_RCC_GetClockConfig+0x7c>)
9000518e:	699b      	ldr	r3, [r3, #24]
90005190:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
90005194:	687b      	ldr	r3, [r7, #4]
90005196:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
90005198:	4b14      	ldr	r3, [pc, #80]	; (900051ec <HAL_RCC_GetClockConfig+0x7c>)
9000519a:	699b      	ldr	r3, [r3, #24]
9000519c:	f003 020f 	and.w	r2, r3, #15
900051a0:	687b      	ldr	r3, [r7, #4]
900051a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
900051a4:	4b11      	ldr	r3, [pc, #68]	; (900051ec <HAL_RCC_GetClockConfig+0x7c>)
900051a6:	699b      	ldr	r3, [r3, #24]
900051a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
900051ac:	687b      	ldr	r3, [r7, #4]
900051ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
900051b0:	4b0e      	ldr	r3, [pc, #56]	; (900051ec <HAL_RCC_GetClockConfig+0x7c>)
900051b2:	69db      	ldr	r3, [r3, #28]
900051b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
900051b8:	687b      	ldr	r3, [r7, #4]
900051ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
900051bc:	4b0b      	ldr	r3, [pc, #44]	; (900051ec <HAL_RCC_GetClockConfig+0x7c>)
900051be:	69db      	ldr	r3, [r3, #28]
900051c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
900051c4:	687b      	ldr	r3, [r7, #4]
900051c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
900051c8:	4b08      	ldr	r3, [pc, #32]	; (900051ec <HAL_RCC_GetClockConfig+0x7c>)
900051ca:	6a1b      	ldr	r3, [r3, #32]
900051cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
900051d0:	687b      	ldr	r3, [r7, #4]
900051d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
900051d4:	4b06      	ldr	r3, [pc, #24]	; (900051f0 <HAL_RCC_GetClockConfig+0x80>)
900051d6:	681b      	ldr	r3, [r3, #0]
900051d8:	f003 020f 	and.w	r2, r3, #15
900051dc:	683b      	ldr	r3, [r7, #0]
900051de:	601a      	str	r2, [r3, #0]
}
900051e0:	bf00      	nop
900051e2:	370c      	adds	r7, #12
900051e4:	46bd      	mov	sp, r7
900051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900051ea:	4770      	bx	lr
900051ec:	58024400 	.word	0x58024400
900051f0:	52002000 	.word	0x52002000

900051f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
900051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
900051f8:	b0ca      	sub	sp, #296	; 0x128
900051fa:	af00      	add	r7, sp, #0
900051fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90005200:	2300      	movs	r3, #0
90005202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90005206:	2300      	movs	r3, #0
90005208:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005210:	e9d3 2300 	ldrd	r2, r3, [r3]
90005214:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
90005218:	2500      	movs	r5, #0
9000521a:	ea54 0305 	orrs.w	r3, r4, r5
9000521e:	d049      	beq.n	900052b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90005220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90005226:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
9000522a:	d02f      	beq.n	9000528c <HAL_RCCEx_PeriphCLKConfig+0x98>
9000522c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90005230:	d828      	bhi.n	90005284 <HAL_RCCEx_PeriphCLKConfig+0x90>
90005232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90005236:	d01a      	beq.n	9000526e <HAL_RCCEx_PeriphCLKConfig+0x7a>
90005238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000523c:	d822      	bhi.n	90005284 <HAL_RCCEx_PeriphCLKConfig+0x90>
9000523e:	2b00      	cmp	r3, #0
90005240:	d003      	beq.n	9000524a <HAL_RCCEx_PeriphCLKConfig+0x56>
90005242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90005246:	d007      	beq.n	90005258 <HAL_RCCEx_PeriphCLKConfig+0x64>
90005248:	e01c      	b.n	90005284 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000524a:	4bb8      	ldr	r3, [pc, #736]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000524e:	4ab7      	ldr	r2, [pc, #732]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90005250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005254:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90005256:	e01a      	b.n	9000528e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000525c:	3308      	adds	r3, #8
9000525e:	2102      	movs	r1, #2
90005260:	4618      	mov	r0, r3
90005262:	f001 fc8f 	bl	90006b84 <RCCEx_PLL2_Config>
90005266:	4603      	mov	r3, r0
90005268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
9000526c:	e00f      	b.n	9000528e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005272:	3328      	adds	r3, #40	; 0x28
90005274:	2102      	movs	r1, #2
90005276:	4618      	mov	r0, r3
90005278:	f001 fd36 	bl	90006ce8 <RCCEx_PLL3_Config>
9000527c:	4603      	mov	r3, r0
9000527e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90005282:	e004      	b.n	9000528e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90005284:	2301      	movs	r3, #1
90005286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000528a:	e000      	b.n	9000528e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
9000528c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000528e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005292:	2b00      	cmp	r3, #0
90005294:	d10a      	bne.n	900052ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90005296:	4ba5      	ldr	r3, [pc, #660]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90005298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000529a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
9000529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900052a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
900052a4:	4aa1      	ldr	r2, [pc, #644]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
900052a6:	430b      	orrs	r3, r1
900052a8:	6513      	str	r3, [r2, #80]	; 0x50
900052aa:	e003      	b.n	900052b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
900052ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900052b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
900052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
900052bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
900052c0:	f04f 0900 	mov.w	r9, #0
900052c4:	ea58 0309 	orrs.w	r3, r8, r9
900052c8:	d047      	beq.n	9000535a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
900052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900052d0:	2b04      	cmp	r3, #4
900052d2:	d82a      	bhi.n	9000532a <HAL_RCCEx_PeriphCLKConfig+0x136>
900052d4:	a201      	add	r2, pc, #4	; (adr r2, 900052dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
900052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900052da:	bf00      	nop
900052dc:	900052f1 	.word	0x900052f1
900052e0:	900052ff 	.word	0x900052ff
900052e4:	90005315 	.word	0x90005315
900052e8:	90005333 	.word	0x90005333
900052ec:	90005333 	.word	0x90005333
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900052f0:	4b8e      	ldr	r3, [pc, #568]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
900052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900052f4:	4a8d      	ldr	r2, [pc, #564]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
900052f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900052fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
900052fc:	e01a      	b.n	90005334 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005302:	3308      	adds	r3, #8
90005304:	2100      	movs	r1, #0
90005306:	4618      	mov	r0, r3
90005308:	f001 fc3c 	bl	90006b84 <RCCEx_PLL2_Config>
9000530c:	4603      	mov	r3, r0
9000530e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90005312:	e00f      	b.n	90005334 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005318:	3328      	adds	r3, #40	; 0x28
9000531a:	2100      	movs	r1, #0
9000531c:	4618      	mov	r0, r3
9000531e:	f001 fce3 	bl	90006ce8 <RCCEx_PLL3_Config>
90005322:	4603      	mov	r3, r0
90005324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90005328:	e004      	b.n	90005334 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000532a:	2301      	movs	r3, #1
9000532c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005330:	e000      	b.n	90005334 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90005332:	bf00      	nop
    }

    if (ret == HAL_OK)
90005334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005338:	2b00      	cmp	r3, #0
9000533a:	d10a      	bne.n	90005352 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000533c:	4b7b      	ldr	r3, [pc, #492]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000533e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005340:	f023 0107 	bic.w	r1, r3, #7
90005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000534a:	4a78      	ldr	r2, [pc, #480]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000534c:	430b      	orrs	r3, r1
9000534e:	6513      	str	r3, [r2, #80]	; 0x50
90005350:	e003      	b.n	9000535a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000535e:	e9d3 2300 	ldrd	r2, r3, [r3]
90005362:	f402 7a00 	and.w	sl, r2, #512	; 0x200
90005366:	f04f 0b00 	mov.w	fp, #0
9000536a:	ea5a 030b 	orrs.w	r3, sl, fp
9000536e:	d04c      	beq.n	9000540a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000537a:	d030      	beq.n	900053de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
9000537c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005380:	d829      	bhi.n	900053d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90005382:	2bc0      	cmp	r3, #192	; 0xc0
90005384:	d02d      	beq.n	900053e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90005386:	2bc0      	cmp	r3, #192	; 0xc0
90005388:	d825      	bhi.n	900053d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
9000538a:	2b80      	cmp	r3, #128	; 0x80
9000538c:	d018      	beq.n	900053c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
9000538e:	2b80      	cmp	r3, #128	; 0x80
90005390:	d821      	bhi.n	900053d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90005392:	2b00      	cmp	r3, #0
90005394:	d002      	beq.n	9000539c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90005396:	2b40      	cmp	r3, #64	; 0x40
90005398:	d007      	beq.n	900053aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
9000539a:	e01c      	b.n	900053d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000539c:	4b63      	ldr	r3, [pc, #396]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
9000539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900053a0:	4a62      	ldr	r2, [pc, #392]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
900053a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900053a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
900053a8:	e01c      	b.n	900053e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900053ae:	3308      	adds	r3, #8
900053b0:	2100      	movs	r1, #0
900053b2:	4618      	mov	r0, r3
900053b4:	f001 fbe6 	bl	90006b84 <RCCEx_PLL2_Config>
900053b8:	4603      	mov	r3, r0
900053ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
900053be:	e011      	b.n	900053e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900053c4:	3328      	adds	r3, #40	; 0x28
900053c6:	2100      	movs	r1, #0
900053c8:	4618      	mov	r0, r3
900053ca:	f001 fc8d 	bl	90006ce8 <RCCEx_PLL3_Config>
900053ce:	4603      	mov	r3, r0
900053d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
900053d4:	e006      	b.n	900053e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900053d6:	2301      	movs	r3, #1
900053d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900053dc:	e002      	b.n	900053e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
900053de:	bf00      	nop
900053e0:	e000      	b.n	900053e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
900053e2:	bf00      	nop
    }

    if (ret == HAL_OK)
900053e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900053e8:	2b00      	cmp	r3, #0
900053ea:	d10a      	bne.n	90005402 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
900053ec:	4b4f      	ldr	r3, [pc, #316]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
900053ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900053f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
900053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900053f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900053fa:	4a4c      	ldr	r2, [pc, #304]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
900053fc:	430b      	orrs	r3, r1
900053fe:	6513      	str	r3, [r2, #80]	; 0x50
90005400:	e003      	b.n	9000540a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000540e:	e9d3 2300 	ldrd	r2, r3, [r3]
90005412:	f402 6380 	and.w	r3, r2, #1024	; 0x400
90005416:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
9000541a:	2300      	movs	r3, #0
9000541c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
90005420:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
90005424:	460b      	mov	r3, r1
90005426:	4313      	orrs	r3, r2
90005428:	d053      	beq.n	900054d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
9000542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000542e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90005432:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90005436:	d035      	beq.n	900054a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90005438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
9000543c:	d82e      	bhi.n	9000549c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000543e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90005442:	d031      	beq.n	900054a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90005444:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90005448:	d828      	bhi.n	9000549c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
9000544a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000544e:	d01a      	beq.n	90005486 <HAL_RCCEx_PeriphCLKConfig+0x292>
90005450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90005454:	d822      	bhi.n	9000549c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90005456:	2b00      	cmp	r3, #0
90005458:	d003      	beq.n	90005462 <HAL_RCCEx_PeriphCLKConfig+0x26e>
9000545a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000545e:	d007      	beq.n	90005470 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90005460:	e01c      	b.n	9000549c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005462:	4b32      	ldr	r3, [pc, #200]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005466:	4a31      	ldr	r2, [pc, #196]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
90005468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000546c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000546e:	e01c      	b.n	900054aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005474:	3308      	adds	r3, #8
90005476:	2100      	movs	r1, #0
90005478:	4618      	mov	r0, r3
9000547a:	f001 fb83 	bl	90006b84 <RCCEx_PLL2_Config>
9000547e:	4603      	mov	r3, r0
90005480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90005484:	e011      	b.n	900054aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000548a:	3328      	adds	r3, #40	; 0x28
9000548c:	2100      	movs	r1, #0
9000548e:	4618      	mov	r0, r3
90005490:	f001 fc2a 	bl	90006ce8 <RCCEx_PLL3_Config>
90005494:	4603      	mov	r3, r0
90005496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000549a:	e006      	b.n	900054aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
9000549c:	2301      	movs	r3, #1
9000549e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900054a2:	e002      	b.n	900054aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900054a4:	bf00      	nop
900054a6:	e000      	b.n	900054aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
900054a8:	bf00      	nop
    }

    if (ret == HAL_OK)
900054aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900054ae:	2b00      	cmp	r3, #0
900054b0:	d10b      	bne.n	900054ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
900054b2:	4b1e      	ldr	r3, [pc, #120]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
900054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900054b6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
900054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900054be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
900054c2:	4a1a      	ldr	r2, [pc, #104]	; (9000552c <HAL_RCCEx_PeriphCLKConfig+0x338>)
900054c4:	430b      	orrs	r3, r1
900054c6:	6593      	str	r3, [r2, #88]	; 0x58
900054c8:	e003      	b.n	900054d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
900054ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900054ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
900054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
900054da:	f402 6300 	and.w	r3, r2, #2048	; 0x800
900054de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
900054e2:	2300      	movs	r3, #0
900054e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
900054e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
900054ec:	460b      	mov	r3, r1
900054ee:	4313      	orrs	r3, r2
900054f0:	d056      	beq.n	900055a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
900054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900054f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900054fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
900054fe:	d038      	beq.n	90005572 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90005500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90005504:	d831      	bhi.n	9000556a <HAL_RCCEx_PeriphCLKConfig+0x376>
90005506:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
9000550a:	d034      	beq.n	90005576 <HAL_RCCEx_PeriphCLKConfig+0x382>
9000550c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90005510:	d82b      	bhi.n	9000556a <HAL_RCCEx_PeriphCLKConfig+0x376>
90005512:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90005516:	d01d      	beq.n	90005554 <HAL_RCCEx_PeriphCLKConfig+0x360>
90005518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000551c:	d825      	bhi.n	9000556a <HAL_RCCEx_PeriphCLKConfig+0x376>
9000551e:	2b00      	cmp	r3, #0
90005520:	d006      	beq.n	90005530 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90005522:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90005526:	d00a      	beq.n	9000553e <HAL_RCCEx_PeriphCLKConfig+0x34a>
90005528:	e01f      	b.n	9000556a <HAL_RCCEx_PeriphCLKConfig+0x376>
9000552a:	bf00      	nop
9000552c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005530:	4ba2      	ldr	r3, [pc, #648]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005534:	4aa1      	ldr	r2, [pc, #644]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90005536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000553a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
9000553c:	e01c      	b.n	90005578 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005542:	3308      	adds	r3, #8
90005544:	2100      	movs	r1, #0
90005546:	4618      	mov	r0, r3
90005548:	f001 fb1c 	bl	90006b84 <RCCEx_PLL2_Config>
9000554c:	4603      	mov	r3, r0
9000554e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90005552:	e011      	b.n	90005578 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005558:	3328      	adds	r3, #40	; 0x28
9000555a:	2100      	movs	r1, #0
9000555c:	4618      	mov	r0, r3
9000555e:	f001 fbc3 	bl	90006ce8 <RCCEx_PLL3_Config>
90005562:	4603      	mov	r3, r0
90005564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90005568:	e006      	b.n	90005578 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
9000556a:	2301      	movs	r3, #1
9000556c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005570:	e002      	b.n	90005578 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90005572:	bf00      	nop
90005574:	e000      	b.n	90005578 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90005576:	bf00      	nop
    }

    if (ret == HAL_OK)
90005578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000557c:	2b00      	cmp	r3, #0
9000557e:	d10b      	bne.n	90005598 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90005580:	4b8e      	ldr	r3, [pc, #568]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005584:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
90005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000558c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90005590:	4a8a      	ldr	r2, [pc, #552]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90005592:	430b      	orrs	r3, r1
90005594:	6593      	str	r3, [r2, #88]	; 0x58
90005596:	e003      	b.n	900055a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000559c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
900055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
900055a8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
900055ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
900055b0:	2300      	movs	r3, #0
900055b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
900055b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
900055ba:	460b      	mov	r3, r1
900055bc:	4313      	orrs	r3, r2
900055be:	d03a      	beq.n	90005636 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
900055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900055c6:	2b30      	cmp	r3, #48	; 0x30
900055c8:	d01f      	beq.n	9000560a <HAL_RCCEx_PeriphCLKConfig+0x416>
900055ca:	2b30      	cmp	r3, #48	; 0x30
900055cc:	d819      	bhi.n	90005602 <HAL_RCCEx_PeriphCLKConfig+0x40e>
900055ce:	2b20      	cmp	r3, #32
900055d0:	d00c      	beq.n	900055ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
900055d2:	2b20      	cmp	r3, #32
900055d4:	d815      	bhi.n	90005602 <HAL_RCCEx_PeriphCLKConfig+0x40e>
900055d6:	2b00      	cmp	r3, #0
900055d8:	d019      	beq.n	9000560e <HAL_RCCEx_PeriphCLKConfig+0x41a>
900055da:	2b10      	cmp	r3, #16
900055dc:	d111      	bne.n	90005602 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900055de:	4b77      	ldr	r3, [pc, #476]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900055e2:	4a76      	ldr	r2, [pc, #472]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900055e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900055e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
900055ea:	e011      	b.n	90005610 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
900055ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900055f0:	3308      	adds	r3, #8
900055f2:	2102      	movs	r1, #2
900055f4:	4618      	mov	r0, r3
900055f6:	f001 fac5 	bl	90006b84 <RCCEx_PLL2_Config>
900055fa:	4603      	mov	r3, r0
900055fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90005600:	e006      	b.n	90005610 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90005602:	2301      	movs	r3, #1
90005604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005608:	e002      	b.n	90005610 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000560a:	bf00      	nop
9000560c:	e000      	b.n	90005610 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
9000560e:	bf00      	nop
    }

    if (ret == HAL_OK)
90005610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005614:	2b00      	cmp	r3, #0
90005616:	d10a      	bne.n	9000562e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90005618:	4b68      	ldr	r3, [pc, #416]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000561a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000561c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
90005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005626:	4a65      	ldr	r2, [pc, #404]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90005628:	430b      	orrs	r3, r1
9000562a:	64d3      	str	r3, [r2, #76]	; 0x4c
9000562c:	e003      	b.n	90005636 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000562e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000563a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000563e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
90005642:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
90005646:	2300      	movs	r3, #0
90005648:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
9000564c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
90005650:	460b      	mov	r3, r1
90005652:	4313      	orrs	r3, r2
90005654:	d051      	beq.n	900056fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000565a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000565c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005660:	d035      	beq.n	900056ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
90005662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005666:	d82e      	bhi.n	900056c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90005668:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
9000566c:	d031      	beq.n	900056d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
9000566e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90005672:	d828      	bhi.n	900056c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90005674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90005678:	d01a      	beq.n	900056b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
9000567a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000567e:	d822      	bhi.n	900056c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90005680:	2b00      	cmp	r3, #0
90005682:	d003      	beq.n	9000568c <HAL_RCCEx_PeriphCLKConfig+0x498>
90005684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005688:	d007      	beq.n	9000569a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000568a:	e01c      	b.n	900056c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000568c:	4b4b      	ldr	r3, [pc, #300]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005690:	4a4a      	ldr	r2, [pc, #296]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90005692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90005698:	e01c      	b.n	900056d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000569e:	3308      	adds	r3, #8
900056a0:	2100      	movs	r1, #0
900056a2:	4618      	mov	r0, r3
900056a4:	f001 fa6e 	bl	90006b84 <RCCEx_PLL2_Config>
900056a8:	4603      	mov	r3, r0
900056aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900056ae:	e011      	b.n	900056d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900056b4:	3328      	adds	r3, #40	; 0x28
900056b6:	2100      	movs	r1, #0
900056b8:	4618      	mov	r0, r3
900056ba:	f001 fb15 	bl	90006ce8 <RCCEx_PLL3_Config>
900056be:	4603      	mov	r3, r0
900056c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
900056c4:	e006      	b.n	900056d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900056c6:	2301      	movs	r3, #1
900056c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900056cc:	e002      	b.n	900056d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900056ce:	bf00      	nop
900056d0:	e000      	b.n	900056d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900056d2:	bf00      	nop
    }

    if (ret == HAL_OK)
900056d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900056d8:	2b00      	cmp	r3, #0
900056da:	d10a      	bne.n	900056f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
900056dc:	4b37      	ldr	r3, [pc, #220]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900056e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
900056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900056e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900056ea:	4a34      	ldr	r2, [pc, #208]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900056ec:	430b      	orrs	r3, r1
900056ee:	6513      	str	r3, [r2, #80]	; 0x50
900056f0:	e003      	b.n	900056fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
900056f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900056f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
900056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
90005702:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
90005706:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
9000570a:	2300      	movs	r3, #0
9000570c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
90005710:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
90005714:	460b      	mov	r3, r1
90005716:	4313      	orrs	r3, r2
90005718:	d056      	beq.n	900057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
9000571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000571e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90005720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90005724:	d033      	beq.n	9000578e <HAL_RCCEx_PeriphCLKConfig+0x59a>
90005726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000572a:	d82c      	bhi.n	90005786 <HAL_RCCEx_PeriphCLKConfig+0x592>
9000572c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90005730:	d02f      	beq.n	90005792 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90005732:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90005736:	d826      	bhi.n	90005786 <HAL_RCCEx_PeriphCLKConfig+0x592>
90005738:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000573c:	d02b      	beq.n	90005796 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
9000573e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90005742:	d820      	bhi.n	90005786 <HAL_RCCEx_PeriphCLKConfig+0x592>
90005744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90005748:	d012      	beq.n	90005770 <HAL_RCCEx_PeriphCLKConfig+0x57c>
9000574a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000574e:	d81a      	bhi.n	90005786 <HAL_RCCEx_PeriphCLKConfig+0x592>
90005750:	2b00      	cmp	r3, #0
90005752:	d022      	beq.n	9000579a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90005754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90005758:	d115      	bne.n	90005786 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000575e:	3308      	adds	r3, #8
90005760:	2101      	movs	r1, #1
90005762:	4618      	mov	r0, r3
90005764:	f001 fa0e 	bl	90006b84 <RCCEx_PLL2_Config>
90005768:	4603      	mov	r3, r0
9000576a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000576e:	e015      	b.n	9000579c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005774:	3328      	adds	r3, #40	; 0x28
90005776:	2101      	movs	r1, #1
90005778:	4618      	mov	r0, r3
9000577a:	f001 fab5 	bl	90006ce8 <RCCEx_PLL3_Config>
9000577e:	4603      	mov	r3, r0
90005780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90005784:	e00a      	b.n	9000579c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90005786:	2301      	movs	r3, #1
90005788:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000578c:	e006      	b.n	9000579c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000578e:	bf00      	nop
90005790:	e004      	b.n	9000579c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90005792:	bf00      	nop
90005794:	e002      	b.n	9000579c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90005796:	bf00      	nop
90005798:	e000      	b.n	9000579c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000579a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000579c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900057a0:	2b00      	cmp	r3, #0
900057a2:	d10d      	bne.n	900057c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900057a4:	4b05      	ldr	r3, [pc, #20]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900057a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900057a8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
900057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900057b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900057b2:	4a02      	ldr	r2, [pc, #8]	; (900057bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900057b4:	430b      	orrs	r3, r1
900057b6:	6513      	str	r3, [r2, #80]	; 0x50
900057b8:	e006      	b.n	900057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
900057ba:	bf00      	nop
900057bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900057c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900057c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
900057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
900057d0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
900057d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
900057d8:	2300      	movs	r3, #0
900057da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
900057de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
900057e2:	460b      	mov	r3, r1
900057e4:	4313      	orrs	r3, r2
900057e6:	d055      	beq.n	90005894 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
900057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900057ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900057f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900057f4:	d033      	beq.n	9000585e <HAL_RCCEx_PeriphCLKConfig+0x66a>
900057f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900057fa:	d82c      	bhi.n	90005856 <HAL_RCCEx_PeriphCLKConfig+0x662>
900057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90005800:	d02f      	beq.n	90005862 <HAL_RCCEx_PeriphCLKConfig+0x66e>
90005802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90005806:	d826      	bhi.n	90005856 <HAL_RCCEx_PeriphCLKConfig+0x662>
90005808:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
9000580c:	d02b      	beq.n	90005866 <HAL_RCCEx_PeriphCLKConfig+0x672>
9000580e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90005812:	d820      	bhi.n	90005856 <HAL_RCCEx_PeriphCLKConfig+0x662>
90005814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005818:	d012      	beq.n	90005840 <HAL_RCCEx_PeriphCLKConfig+0x64c>
9000581a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000581e:	d81a      	bhi.n	90005856 <HAL_RCCEx_PeriphCLKConfig+0x662>
90005820:	2b00      	cmp	r3, #0
90005822:	d022      	beq.n	9000586a <HAL_RCCEx_PeriphCLKConfig+0x676>
90005824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90005828:	d115      	bne.n	90005856 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000582e:	3308      	adds	r3, #8
90005830:	2101      	movs	r1, #1
90005832:	4618      	mov	r0, r3
90005834:	f001 f9a6 	bl	90006b84 <RCCEx_PLL2_Config>
90005838:	4603      	mov	r3, r0
9000583a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000583e:	e015      	b.n	9000586c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005844:	3328      	adds	r3, #40	; 0x28
90005846:	2101      	movs	r1, #1
90005848:	4618      	mov	r0, r3
9000584a:	f001 fa4d 	bl	90006ce8 <RCCEx_PLL3_Config>
9000584e:	4603      	mov	r3, r0
90005850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90005854:	e00a      	b.n	9000586c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
90005856:	2301      	movs	r3, #1
90005858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000585c:	e006      	b.n	9000586c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000585e:	bf00      	nop
90005860:	e004      	b.n	9000586c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90005862:	bf00      	nop
90005864:	e002      	b.n	9000586c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90005866:	bf00      	nop
90005868:	e000      	b.n	9000586c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000586a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000586c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005870:	2b00      	cmp	r3, #0
90005872:	d10b      	bne.n	9000588c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90005874:	4ba3      	ldr	r3, [pc, #652]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005878:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
9000587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90005884:	4a9f      	ldr	r2, [pc, #636]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005886:	430b      	orrs	r3, r1
90005888:	6593      	str	r3, [r2, #88]	; 0x58
9000588a:	e003      	b.n	90005894 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000588c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005890:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005898:	e9d3 2300 	ldrd	r2, r3, [r3]
9000589c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
900058a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
900058a4:	2300      	movs	r3, #0
900058a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
900058aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
900058ae:	460b      	mov	r3, r1
900058b0:	4313      	orrs	r3, r2
900058b2:	d037      	beq.n	90005924 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
900058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900058ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900058be:	d00e      	beq.n	900058de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
900058c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900058c4:	d816      	bhi.n	900058f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
900058c6:	2b00      	cmp	r3, #0
900058c8:	d018      	beq.n	900058fc <HAL_RCCEx_PeriphCLKConfig+0x708>
900058ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900058ce:	d111      	bne.n	900058f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900058d0:	4b8c      	ldr	r3, [pc, #560]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900058d4:	4a8b      	ldr	r2, [pc, #556]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900058d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900058da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900058dc:	e00f      	b.n	900058fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900058e2:	3308      	adds	r3, #8
900058e4:	2101      	movs	r1, #1
900058e6:	4618      	mov	r0, r3
900058e8:	f001 f94c 	bl	90006b84 <RCCEx_PLL2_Config>
900058ec:	4603      	mov	r3, r0
900058ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900058f2:	e004      	b.n	900058fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900058f4:	2301      	movs	r3, #1
900058f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900058fa:	e000      	b.n	900058fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
900058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
900058fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005902:	2b00      	cmp	r3, #0
90005904:	d10a      	bne.n	9000591c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90005906:	4b7f      	ldr	r3, [pc, #508]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000590a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
9000590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005914:	4a7b      	ldr	r2, [pc, #492]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005916:	430b      	orrs	r3, r1
90005918:	6513      	str	r3, [r2, #80]	; 0x50
9000591a:	e003      	b.n	90005924 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000591c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005928:	e9d3 2300 	ldrd	r2, r3, [r3]
9000592c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
90005930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
90005934:	2300      	movs	r3, #0
90005936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
9000593a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
9000593e:	460b      	mov	r3, r1
90005940:	4313      	orrs	r3, r2
90005942:	d039      	beq.n	900059b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000594a:	2b03      	cmp	r3, #3
9000594c:	d81c      	bhi.n	90005988 <HAL_RCCEx_PeriphCLKConfig+0x794>
9000594e:	a201      	add	r2, pc, #4	; (adr r2, 90005954 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005954:	90005991 	.word	0x90005991
90005958:	90005965 	.word	0x90005965
9000595c:	90005973 	.word	0x90005973
90005960:	90005991 	.word	0x90005991
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90005964:	4b67      	ldr	r3, [pc, #412]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90005968:	4a66      	ldr	r2, [pc, #408]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000596a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000596e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90005970:	e00f      	b.n	90005992 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005976:	3308      	adds	r3, #8
90005978:	2102      	movs	r1, #2
9000597a:	4618      	mov	r0, r3
9000597c:	f001 f902 	bl	90006b84 <RCCEx_PLL2_Config>
90005980:	4603      	mov	r3, r0
90005982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
90005986:	e004      	b.n	90005992 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90005988:	2301      	movs	r3, #1
9000598a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000598e:	e000      	b.n	90005992 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90005990:	bf00      	nop
    }

    if (ret == HAL_OK)
90005992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005996:	2b00      	cmp	r3, #0
90005998:	d10a      	bne.n	900059b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000599a:	4b5a      	ldr	r3, [pc, #360]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000599e:	f023 0103 	bic.w	r1, r3, #3
900059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900059a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900059a8:	4a56      	ldr	r2, [pc, #344]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900059aa:	430b      	orrs	r3, r1
900059ac:	64d3      	str	r3, [r2, #76]	; 0x4c
900059ae:	e003      	b.n	900059b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
900059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900059b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
900059c0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
900059c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
900059c8:	2300      	movs	r3, #0
900059ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
900059ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
900059d2:	460b      	mov	r3, r1
900059d4:	4313      	orrs	r3, r2
900059d6:	f000 809f 	beq.w	90005b18 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900059da:	4b4b      	ldr	r3, [pc, #300]	; (90005b08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900059dc:	681b      	ldr	r3, [r3, #0]
900059de:	4a4a      	ldr	r2, [pc, #296]	; (90005b08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900059e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900059e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900059e6:	f7fc faf1 	bl	90001fcc <HAL_GetTick>
900059ea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900059ee:	e00b      	b.n	90005a08 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900059f0:	f7fc faec 	bl	90001fcc <HAL_GetTick>
900059f4:	4602      	mov	r2, r0
900059f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
900059fa:	1ad3      	subs	r3, r2, r3
900059fc:	2b64      	cmp	r3, #100	; 0x64
900059fe:	d903      	bls.n	90005a08 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
90005a00:	2303      	movs	r3, #3
90005a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005a06:	e005      	b.n	90005a14 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90005a08:	4b3f      	ldr	r3, [pc, #252]	; (90005b08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
90005a0a:	681b      	ldr	r3, [r3, #0]
90005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90005a10:	2b00      	cmp	r3, #0
90005a12:	d0ed      	beq.n	900059f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
90005a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005a18:	2b00      	cmp	r3, #0
90005a1a:	d179      	bne.n	90005b10 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90005a1c:	4b39      	ldr	r3, [pc, #228]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005a1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005a24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90005a28:	4053      	eors	r3, r2
90005a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
90005a2e:	2b00      	cmp	r3, #0
90005a30:	d015      	beq.n	90005a5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90005a32:	4b34      	ldr	r3, [pc, #208]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90005a3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90005a3e:	4b31      	ldr	r3, [pc, #196]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005a42:	4a30      	ldr	r2, [pc, #192]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90005a48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90005a4a:	4b2e      	ldr	r3, [pc, #184]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005a4e:	4a2d      	ldr	r2, [pc, #180]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90005a54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90005a56:	4a2b      	ldr	r2, [pc, #172]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
90005a5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005a62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90005a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90005a6a:	d118      	bne.n	90005a9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90005a6c:	f7fc faae 	bl	90001fcc <HAL_GetTick>
90005a70:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90005a74:	e00d      	b.n	90005a92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90005a76:	f7fc faa9 	bl	90001fcc <HAL_GetTick>
90005a7a:	4602      	mov	r2, r0
90005a7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
90005a80:	1ad2      	subs	r2, r2, r3
90005a82:	f241 3388 	movw	r3, #5000	; 0x1388
90005a86:	429a      	cmp	r2, r3
90005a88:	d903      	bls.n	90005a92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
90005a8a:	2303      	movs	r3, #3
90005a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
90005a90:	e005      	b.n	90005a9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90005a92:	4b1c      	ldr	r3, [pc, #112]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90005a96:	f003 0302 	and.w	r3, r3, #2
90005a9a:	2b00      	cmp	r3, #0
90005a9c:	d0eb      	beq.n	90005a76 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
90005a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005aa2:	2b00      	cmp	r3, #0
90005aa4:	d129      	bne.n	90005afa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005aaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
90005ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90005ab6:	d10e      	bne.n	90005ad6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90005ab8:	4b12      	ldr	r3, [pc, #72]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005aba:	691b      	ldr	r3, [r3, #16]
90005abc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
90005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005ac4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90005ac8:	091a      	lsrs	r2, r3, #4
90005aca:	4b10      	ldr	r3, [pc, #64]	; (90005b0c <HAL_RCCEx_PeriphCLKConfig+0x918>)
90005acc:	4013      	ands	r3, r2
90005ace:	4a0d      	ldr	r2, [pc, #52]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005ad0:	430b      	orrs	r3, r1
90005ad2:	6113      	str	r3, [r2, #16]
90005ad4:	e005      	b.n	90005ae2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
90005ad6:	4b0b      	ldr	r3, [pc, #44]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005ad8:	691b      	ldr	r3, [r3, #16]
90005ada:	4a0a      	ldr	r2, [pc, #40]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005adc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
90005ae0:	6113      	str	r3, [r2, #16]
90005ae2:	4b08      	ldr	r3, [pc, #32]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005ae4:	6f19      	ldr	r1, [r3, #112]	; 0x70
90005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90005aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
90005af2:	4a04      	ldr	r2, [pc, #16]	; (90005b04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90005af4:	430b      	orrs	r3, r1
90005af6:	6713      	str	r3, [r2, #112]	; 0x70
90005af8:	e00e      	b.n	90005b18 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
90005afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005afe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
90005b02:	e009      	b.n	90005b18 <HAL_RCCEx_PeriphCLKConfig+0x924>
90005b04:	58024400 	.word	0x58024400
90005b08:	58024800 	.word	0x58024800
90005b0c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90005b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
90005b20:	f002 0301 	and.w	r3, r2, #1
90005b24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
90005b28:	2300      	movs	r3, #0
90005b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
90005b2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
90005b32:	460b      	mov	r3, r1
90005b34:	4313      	orrs	r3, r2
90005b36:	f000 8089 	beq.w	90005c4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
90005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005b40:	2b28      	cmp	r3, #40	; 0x28
90005b42:	d86b      	bhi.n	90005c1c <HAL_RCCEx_PeriphCLKConfig+0xa28>
90005b44:	a201      	add	r2, pc, #4	; (adr r2, 90005b4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
90005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005b4a:	bf00      	nop
90005b4c:	90005c25 	.word	0x90005c25
90005b50:	90005c1d 	.word	0x90005c1d
90005b54:	90005c1d 	.word	0x90005c1d
90005b58:	90005c1d 	.word	0x90005c1d
90005b5c:	90005c1d 	.word	0x90005c1d
90005b60:	90005c1d 	.word	0x90005c1d
90005b64:	90005c1d 	.word	0x90005c1d
90005b68:	90005c1d 	.word	0x90005c1d
90005b6c:	90005bf1 	.word	0x90005bf1
90005b70:	90005c1d 	.word	0x90005c1d
90005b74:	90005c1d 	.word	0x90005c1d
90005b78:	90005c1d 	.word	0x90005c1d
90005b7c:	90005c1d 	.word	0x90005c1d
90005b80:	90005c1d 	.word	0x90005c1d
90005b84:	90005c1d 	.word	0x90005c1d
90005b88:	90005c1d 	.word	0x90005c1d
90005b8c:	90005c07 	.word	0x90005c07
90005b90:	90005c1d 	.word	0x90005c1d
90005b94:	90005c1d 	.word	0x90005c1d
90005b98:	90005c1d 	.word	0x90005c1d
90005b9c:	90005c1d 	.word	0x90005c1d
90005ba0:	90005c1d 	.word	0x90005c1d
90005ba4:	90005c1d 	.word	0x90005c1d
90005ba8:	90005c1d 	.word	0x90005c1d
90005bac:	90005c25 	.word	0x90005c25
90005bb0:	90005c1d 	.word	0x90005c1d
90005bb4:	90005c1d 	.word	0x90005c1d
90005bb8:	90005c1d 	.word	0x90005c1d
90005bbc:	90005c1d 	.word	0x90005c1d
90005bc0:	90005c1d 	.word	0x90005c1d
90005bc4:	90005c1d 	.word	0x90005c1d
90005bc8:	90005c1d 	.word	0x90005c1d
90005bcc:	90005c25 	.word	0x90005c25
90005bd0:	90005c1d 	.word	0x90005c1d
90005bd4:	90005c1d 	.word	0x90005c1d
90005bd8:	90005c1d 	.word	0x90005c1d
90005bdc:	90005c1d 	.word	0x90005c1d
90005be0:	90005c1d 	.word	0x90005c1d
90005be4:	90005c1d 	.word	0x90005c1d
90005be8:	90005c1d 	.word	0x90005c1d
90005bec:	90005c25 	.word	0x90005c25
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005bf4:	3308      	adds	r3, #8
90005bf6:	2101      	movs	r1, #1
90005bf8:	4618      	mov	r0, r3
90005bfa:	f000 ffc3 	bl	90006b84 <RCCEx_PLL2_Config>
90005bfe:	4603      	mov	r3, r0
90005c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90005c04:	e00f      	b.n	90005c26 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005c0a:	3328      	adds	r3, #40	; 0x28
90005c0c:	2101      	movs	r1, #1
90005c0e:	4618      	mov	r0, r3
90005c10:	f001 f86a 	bl	90006ce8 <RCCEx_PLL3_Config>
90005c14:	4603      	mov	r3, r0
90005c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
90005c1a:	e004      	b.n	90005c26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90005c1c:	2301      	movs	r3, #1
90005c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005c22:	e000      	b.n	90005c26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
90005c24:	bf00      	nop
    }

    if (ret == HAL_OK)
90005c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005c2a:	2b00      	cmp	r3, #0
90005c2c:	d10a      	bne.n	90005c44 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90005c2e:	4bbf      	ldr	r3, [pc, #764]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005c32:	f023 0138 	bic.w	r1, r3, #56	; 0x38
90005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90005c3c:	4abb      	ldr	r2, [pc, #748]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005c3e:	430b      	orrs	r3, r1
90005c40:	6553      	str	r3, [r2, #84]	; 0x54
90005c42:	e003      	b.n	90005c4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005c44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005c48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90005c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
90005c54:	f002 0302 	and.w	r3, r2, #2
90005c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
90005c5c:	2300      	movs	r3, #0
90005c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
90005c62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
90005c66:	460b      	mov	r3, r1
90005c68:	4313      	orrs	r3, r2
90005c6a:	d041      	beq.n	90005cf0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
90005c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90005c72:	2b05      	cmp	r3, #5
90005c74:	d824      	bhi.n	90005cc0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
90005c76:	a201      	add	r2, pc, #4	; (adr r2, 90005c7c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005c7c:	90005cc9 	.word	0x90005cc9
90005c80:	90005c95 	.word	0x90005c95
90005c84:	90005cab 	.word	0x90005cab
90005c88:	90005cc9 	.word	0x90005cc9
90005c8c:	90005cc9 	.word	0x90005cc9
90005c90:	90005cc9 	.word	0x90005cc9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005c98:	3308      	adds	r3, #8
90005c9a:	2101      	movs	r1, #1
90005c9c:	4618      	mov	r0, r3
90005c9e:	f000 ff71 	bl	90006b84 <RCCEx_PLL2_Config>
90005ca2:	4603      	mov	r3, r0
90005ca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90005ca8:	e00f      	b.n	90005cca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005cae:	3328      	adds	r3, #40	; 0x28
90005cb0:	2101      	movs	r1, #1
90005cb2:	4618      	mov	r0, r3
90005cb4:	f001 f818 	bl	90006ce8 <RCCEx_PLL3_Config>
90005cb8:	4603      	mov	r3, r0
90005cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90005cbe:	e004      	b.n	90005cca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90005cc0:	2301      	movs	r3, #1
90005cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005cc6:	e000      	b.n	90005cca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
90005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005cce:	2b00      	cmp	r3, #0
90005cd0:	d10a      	bne.n	90005ce8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90005cd2:	4b96      	ldr	r3, [pc, #600]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005cd6:	f023 0107 	bic.w	r1, r3, #7
90005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90005ce0:	4a92      	ldr	r2, [pc, #584]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005ce2:	430b      	orrs	r3, r1
90005ce4:	6553      	str	r3, [r2, #84]	; 0x54
90005ce6:	e003      	b.n	90005cf0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005cec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
90005cf8:	f002 0304 	and.w	r3, r2, #4
90005cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
90005d00:	2300      	movs	r3, #0
90005d02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
90005d06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
90005d0a:	460b      	mov	r3, r1
90005d0c:	4313      	orrs	r3, r2
90005d0e:	d044      	beq.n	90005d9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
90005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90005d18:	2b05      	cmp	r3, #5
90005d1a:	d825      	bhi.n	90005d68 <HAL_RCCEx_PeriphCLKConfig+0xb74>
90005d1c:	a201      	add	r2, pc, #4	; (adr r2, 90005d24 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
90005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005d22:	bf00      	nop
90005d24:	90005d71 	.word	0x90005d71
90005d28:	90005d3d 	.word	0x90005d3d
90005d2c:	90005d53 	.word	0x90005d53
90005d30:	90005d71 	.word	0x90005d71
90005d34:	90005d71 	.word	0x90005d71
90005d38:	90005d71 	.word	0x90005d71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005d40:	3308      	adds	r3, #8
90005d42:	2101      	movs	r1, #1
90005d44:	4618      	mov	r0, r3
90005d46:	f000 ff1d 	bl	90006b84 <RCCEx_PLL2_Config>
90005d4a:	4603      	mov	r3, r0
90005d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90005d50:	e00f      	b.n	90005d72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005d56:	3328      	adds	r3, #40	; 0x28
90005d58:	2101      	movs	r1, #1
90005d5a:	4618      	mov	r0, r3
90005d5c:	f000 ffc4 	bl	90006ce8 <RCCEx_PLL3_Config>
90005d60:	4603      	mov	r3, r0
90005d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90005d66:	e004      	b.n	90005d72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90005d68:	2301      	movs	r3, #1
90005d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005d6e:	e000      	b.n	90005d72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90005d70:	bf00      	nop
    }

    if (ret == HAL_OK)
90005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005d76:	2b00      	cmp	r3, #0
90005d78:	d10b      	bne.n	90005d92 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90005d7a:	4b6c      	ldr	r3, [pc, #432]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005d7e:	f023 0107 	bic.w	r1, r3, #7
90005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90005d8a:	4a68      	ldr	r2, [pc, #416]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005d8c:	430b      	orrs	r3, r1
90005d8e:	6593      	str	r3, [r2, #88]	; 0x58
90005d90:	e003      	b.n	90005d9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
90005da2:	f002 0320 	and.w	r3, r2, #32
90005da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
90005daa:	2300      	movs	r3, #0
90005dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
90005db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
90005db4:	460b      	mov	r3, r1
90005db6:	4313      	orrs	r3, r2
90005db8:	d055      	beq.n	90005e66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
90005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90005dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90005dc6:	d033      	beq.n	90005e30 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90005dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90005dcc:	d82c      	bhi.n	90005e28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90005dd2:	d02f      	beq.n	90005e34 <HAL_RCCEx_PeriphCLKConfig+0xc40>
90005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90005dd8:	d826      	bhi.n	90005e28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90005dda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90005dde:	d02b      	beq.n	90005e38 <HAL_RCCEx_PeriphCLKConfig+0xc44>
90005de0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90005de4:	d820      	bhi.n	90005e28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90005de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005dea:	d012      	beq.n	90005e12 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
90005dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90005df0:	d81a      	bhi.n	90005e28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
90005df2:	2b00      	cmp	r3, #0
90005df4:	d022      	beq.n	90005e3c <HAL_RCCEx_PeriphCLKConfig+0xc48>
90005df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90005dfa:	d115      	bne.n	90005e28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005e00:	3308      	adds	r3, #8
90005e02:	2100      	movs	r1, #0
90005e04:	4618      	mov	r0, r3
90005e06:	f000 febd 	bl	90006b84 <RCCEx_PLL2_Config>
90005e0a:	4603      	mov	r3, r0
90005e0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90005e10:	e015      	b.n	90005e3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005e16:	3328      	adds	r3, #40	; 0x28
90005e18:	2102      	movs	r1, #2
90005e1a:	4618      	mov	r0, r3
90005e1c:	f000 ff64 	bl	90006ce8 <RCCEx_PLL3_Config>
90005e20:	4603      	mov	r3, r0
90005e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
90005e26:	e00a      	b.n	90005e3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90005e28:	2301      	movs	r3, #1
90005e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005e2e:	e006      	b.n	90005e3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90005e30:	bf00      	nop
90005e32:	e004      	b.n	90005e3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90005e34:	bf00      	nop
90005e36:	e002      	b.n	90005e3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90005e38:	bf00      	nop
90005e3a:	e000      	b.n	90005e3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90005e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
90005e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005e42:	2b00      	cmp	r3, #0
90005e44:	d10b      	bne.n	90005e5e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90005e46:	4b39      	ldr	r3, [pc, #228]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005e4a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
90005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90005e56:	4a35      	ldr	r2, [pc, #212]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005e58:	430b      	orrs	r3, r1
90005e5a:	6553      	str	r3, [r2, #84]	; 0x54
90005e5c:	e003      	b.n	90005e66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
90005e6e:	f002 0340 	and.w	r3, r2, #64	; 0x40
90005e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
90005e76:	2300      	movs	r3, #0
90005e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
90005e7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
90005e80:	460b      	mov	r3, r1
90005e82:	4313      	orrs	r3, r2
90005e84:	d058      	beq.n	90005f38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90005e8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90005e92:	d033      	beq.n	90005efc <HAL_RCCEx_PeriphCLKConfig+0xd08>
90005e94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90005e98:	d82c      	bhi.n	90005ef4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005e9e:	d02f      	beq.n	90005f00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90005ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90005ea4:	d826      	bhi.n	90005ef4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90005ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90005eaa:	d02b      	beq.n	90005f04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
90005eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90005eb0:	d820      	bhi.n	90005ef4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90005eb6:	d012      	beq.n	90005ede <HAL_RCCEx_PeriphCLKConfig+0xcea>
90005eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90005ebc:	d81a      	bhi.n	90005ef4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90005ebe:	2b00      	cmp	r3, #0
90005ec0:	d022      	beq.n	90005f08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
90005ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90005ec6:	d115      	bne.n	90005ef4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005ecc:	3308      	adds	r3, #8
90005ece:	2100      	movs	r1, #0
90005ed0:	4618      	mov	r0, r3
90005ed2:	f000 fe57 	bl	90006b84 <RCCEx_PLL2_Config>
90005ed6:	4603      	mov	r3, r0
90005ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90005edc:	e015      	b.n	90005f0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005ee2:	3328      	adds	r3, #40	; 0x28
90005ee4:	2102      	movs	r1, #2
90005ee6:	4618      	mov	r0, r3
90005ee8:	f000 fefe 	bl	90006ce8 <RCCEx_PLL3_Config>
90005eec:	4603      	mov	r3, r0
90005eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
90005ef2:	e00a      	b.n	90005f0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90005ef4:	2301      	movs	r3, #1
90005ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005efa:	e006      	b.n	90005f0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90005efc:	bf00      	nop
90005efe:	e004      	b.n	90005f0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90005f00:	bf00      	nop
90005f02:	e002      	b.n	90005f0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90005f04:	bf00      	nop
90005f06:	e000      	b.n	90005f0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
90005f08:	bf00      	nop
    }

    if (ret == HAL_OK)
90005f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005f0e:	2b00      	cmp	r3, #0
90005f10:	d10e      	bne.n	90005f30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90005f12:	4b06      	ldr	r3, [pc, #24]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005f16:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
90005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90005f22:	4a02      	ldr	r2, [pc, #8]	; (90005f2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90005f24:	430b      	orrs	r3, r1
90005f26:	6593      	str	r3, [r2, #88]	; 0x58
90005f28:	e006      	b.n	90005f38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
90005f2a:	bf00      	nop
90005f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90005f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005f34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
90005f40:	f002 0380 	and.w	r3, r2, #128	; 0x80
90005f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
90005f48:	2300      	movs	r3, #0
90005f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
90005f4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
90005f52:	460b      	mov	r3, r1
90005f54:	4313      	orrs	r3, r2
90005f56:	d055      	beq.n	90006004 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005f5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90005f60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90005f64:	d033      	beq.n	90005fce <HAL_RCCEx_PeriphCLKConfig+0xdda>
90005f66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90005f6a:	d82c      	bhi.n	90005fc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90005f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90005f70:	d02f      	beq.n	90005fd2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
90005f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90005f76:	d826      	bhi.n	90005fc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90005f78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90005f7c:	d02b      	beq.n	90005fd6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
90005f7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90005f82:	d820      	bhi.n	90005fc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90005f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005f88:	d012      	beq.n	90005fb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
90005f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90005f8e:	d81a      	bhi.n	90005fc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90005f90:	2b00      	cmp	r3, #0
90005f92:	d022      	beq.n	90005fda <HAL_RCCEx_PeriphCLKConfig+0xde6>
90005f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90005f98:	d115      	bne.n	90005fc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005f9e:	3308      	adds	r3, #8
90005fa0:	2100      	movs	r1, #0
90005fa2:	4618      	mov	r0, r3
90005fa4:	f000 fdee 	bl	90006b84 <RCCEx_PLL2_Config>
90005fa8:	4603      	mov	r3, r0
90005faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90005fae:	e015      	b.n	90005fdc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005fb4:	3328      	adds	r3, #40	; 0x28
90005fb6:	2102      	movs	r1, #2
90005fb8:	4618      	mov	r0, r3
90005fba:	f000 fe95 	bl	90006ce8 <RCCEx_PLL3_Config>
90005fbe:	4603      	mov	r3, r0
90005fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90005fc4:	e00a      	b.n	90005fdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90005fc6:	2301      	movs	r3, #1
90005fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90005fcc:	e006      	b.n	90005fdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90005fce:	bf00      	nop
90005fd0:	e004      	b.n	90005fdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90005fd2:	bf00      	nop
90005fd4:	e002      	b.n	90005fdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90005fd6:	bf00      	nop
90005fd8:	e000      	b.n	90005fdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90005fda:	bf00      	nop
    }

    if (ret == HAL_OK)
90005fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90005fe0:	2b00      	cmp	r3, #0
90005fe2:	d10b      	bne.n	90005ffc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90005fe4:	4ba1      	ldr	r3, [pc, #644]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90005fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005fe8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
90005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90005ff0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90005ff4:	4a9d      	ldr	r2, [pc, #628]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90005ff6:	430b      	orrs	r3, r1
90005ff8:	6593      	str	r3, [r2, #88]	; 0x58
90005ffa:	e003      	b.n	90006004 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
90005ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90006000:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90006004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006008:	e9d3 2300 	ldrd	r2, r3, [r3]
9000600c:	f002 0308 	and.w	r3, r2, #8
90006010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
90006014:	2300      	movs	r3, #0
90006016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
9000601a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
9000601e:	460b      	mov	r3, r1
90006020:	4313      	orrs	r3, r2
90006022:	d01e      	beq.n	90006062 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
90006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000602c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90006030:	d10c      	bne.n	9000604c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006036:	3328      	adds	r3, #40	; 0x28
90006038:	2102      	movs	r1, #2
9000603a:	4618      	mov	r0, r3
9000603c:	f000 fe54 	bl	90006ce8 <RCCEx_PLL3_Config>
90006040:	4603      	mov	r3, r0
90006042:	2b00      	cmp	r3, #0
90006044:	d002      	beq.n	9000604c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90006046:	2301      	movs	r3, #1
90006048:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000604c:	4b87      	ldr	r3, [pc, #540]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90006050:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
90006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000605c:	4a83      	ldr	r2, [pc, #524]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000605e:	430b      	orrs	r3, r1
90006060:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90006062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006066:	e9d3 2300 	ldrd	r2, r3, [r3]
9000606a:	f002 0310 	and.w	r3, r2, #16
9000606e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
90006072:	2300      	movs	r3, #0
90006074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
90006078:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
9000607c:	460b      	mov	r3, r1
9000607e:	4313      	orrs	r3, r2
90006080:	d01e      	beq.n	900060c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
9000608a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000608e:	d10c      	bne.n	900060aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006094:	3328      	adds	r3, #40	; 0x28
90006096:	2102      	movs	r1, #2
90006098:	4618      	mov	r0, r3
9000609a:	f000 fe25 	bl	90006ce8 <RCCEx_PLL3_Config>
9000609e:	4603      	mov	r3, r0
900060a0:	2b00      	cmp	r3, #0
900060a2:	d002      	beq.n	900060aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
900060a4:	2301      	movs	r3, #1
900060a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
900060aa:	4b70      	ldr	r3, [pc, #448]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900060ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900060ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
900060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900060b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
900060ba:	4a6c      	ldr	r2, [pc, #432]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900060bc:	430b      	orrs	r3, r1
900060be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
900060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
900060c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
900060cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
900060d0:	2300      	movs	r3, #0
900060d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
900060d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
900060da:	460b      	mov	r3, r1
900060dc:	4313      	orrs	r3, r2
900060de:	d03e      	beq.n	9000615e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
900060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900060e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900060e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900060ec:	d022      	beq.n	90006134 <HAL_RCCEx_PeriphCLKConfig+0xf40>
900060ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900060f2:	d81b      	bhi.n	9000612c <HAL_RCCEx_PeriphCLKConfig+0xf38>
900060f4:	2b00      	cmp	r3, #0
900060f6:	d003      	beq.n	90006100 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
900060f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900060fc:	d00b      	beq.n	90006116 <HAL_RCCEx_PeriphCLKConfig+0xf22>
900060fe:	e015      	b.n	9000612c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006104:	3308      	adds	r3, #8
90006106:	2100      	movs	r1, #0
90006108:	4618      	mov	r0, r3
9000610a:	f000 fd3b 	bl	90006b84 <RCCEx_PLL2_Config>
9000610e:	4603      	mov	r3, r0
90006110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90006114:	e00f      	b.n	90006136 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000611a:	3328      	adds	r3, #40	; 0x28
9000611c:	2102      	movs	r1, #2
9000611e:	4618      	mov	r0, r3
90006120:	f000 fde2 	bl	90006ce8 <RCCEx_PLL3_Config>
90006124:	4603      	mov	r3, r0
90006126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
9000612a:	e004      	b.n	90006136 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
9000612c:	2301      	movs	r3, #1
9000612e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90006132:	e000      	b.n	90006136 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90006134:	bf00      	nop
    }

    if (ret == HAL_OK)
90006136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000613a:	2b00      	cmp	r3, #0
9000613c:	d10b      	bne.n	90006156 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000613e:	4b4b      	ldr	r3, [pc, #300]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90006142:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
90006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000614a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
9000614e:	4a47      	ldr	r2, [pc, #284]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90006150:	430b      	orrs	r3, r1
90006152:	6593      	str	r3, [r2, #88]	; 0x58
90006154:	e003      	b.n	9000615e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000615a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006162:	e9d3 2300 	ldrd	r2, r3, [r3]
90006166:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
9000616a:	67bb      	str	r3, [r7, #120]	; 0x78
9000616c:	2300      	movs	r3, #0
9000616e:	67fb      	str	r3, [r7, #124]	; 0x7c
90006170:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
90006174:	460b      	mov	r3, r1
90006176:	4313      	orrs	r3, r2
90006178:	d03b      	beq.n	900061f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
9000617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90006182:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90006186:	d01f      	beq.n	900061c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90006188:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
9000618c:	d818      	bhi.n	900061c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
9000618e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90006192:	d003      	beq.n	9000619c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90006194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90006198:	d007      	beq.n	900061aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
9000619a:	e011      	b.n	900061c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000619c:	4b33      	ldr	r3, [pc, #204]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
9000619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900061a0:	4a32      	ldr	r2, [pc, #200]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900061a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900061a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
900061a8:	e00f      	b.n	900061ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900061ae:	3328      	adds	r3, #40	; 0x28
900061b0:	2101      	movs	r1, #1
900061b2:	4618      	mov	r0, r3
900061b4:	f000 fd98 	bl	90006ce8 <RCCEx_PLL3_Config>
900061b8:	4603      	mov	r3, r0
900061ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
900061be:	e004      	b.n	900061ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900061c0:	2301      	movs	r3, #1
900061c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900061c6:	e000      	b.n	900061ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
900061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
900061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900061ce:	2b00      	cmp	r3, #0
900061d0:	d10b      	bne.n	900061ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
900061d2:	4b26      	ldr	r3, [pc, #152]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900061d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900061d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
900061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900061e2:	4a22      	ldr	r2, [pc, #136]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900061e4:	430b      	orrs	r3, r1
900061e6:	6553      	str	r3, [r2, #84]	; 0x54
900061e8:	e003      	b.n	900061f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
900061ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900061ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
900061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
900061fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
900061fe:	673b      	str	r3, [r7, #112]	; 0x70
90006200:	2300      	movs	r3, #0
90006202:	677b      	str	r3, [r7, #116]	; 0x74
90006204:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
90006208:	460b      	mov	r3, r1
9000620a:	4313      	orrs	r3, r2
9000620c:	d034      	beq.n	90006278 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
9000620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90006214:	2b00      	cmp	r3, #0
90006216:	d003      	beq.n	90006220 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90006218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000621c:	d007      	beq.n	9000622e <HAL_RCCEx_PeriphCLKConfig+0x103a>
9000621e:	e011      	b.n	90006244 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90006220:	4b12      	ldr	r3, [pc, #72]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006224:	4a11      	ldr	r2, [pc, #68]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90006226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000622a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
9000622c:	e00e      	b.n	9000624c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006232:	3308      	adds	r3, #8
90006234:	2102      	movs	r1, #2
90006236:	4618      	mov	r0, r3
90006238:	f000 fca4 	bl	90006b84 <RCCEx_PLL2_Config>
9000623c:	4603      	mov	r3, r0
9000623e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90006242:	e003      	b.n	9000624c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90006244:	2301      	movs	r3, #1
90006246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000624a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000624c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90006250:	2b00      	cmp	r3, #0
90006252:	d10d      	bne.n	90006270 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90006254:	4b05      	ldr	r3, [pc, #20]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90006256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90006258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
9000625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90006262:	4a02      	ldr	r2, [pc, #8]	; (9000626c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90006264:	430b      	orrs	r3, r1
90006266:	64d3      	str	r3, [r2, #76]	; 0x4c
90006268:	e006      	b.n	90006278 <HAL_RCCEx_PeriphCLKConfig+0x1084>
9000626a:	bf00      	nop
9000626c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90006270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90006274:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000627c:	e9d3 2300 	ldrd	r2, r3, [r3]
90006280:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
90006284:	66bb      	str	r3, [r7, #104]	; 0x68
90006286:	2300      	movs	r3, #0
90006288:	66fb      	str	r3, [r7, #108]	; 0x6c
9000628a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
9000628e:	460b      	mov	r3, r1
90006290:	4313      	orrs	r3, r2
90006292:	d00c      	beq.n	900062ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006298:	3328      	adds	r3, #40	; 0x28
9000629a:	2102      	movs	r1, #2
9000629c:	4618      	mov	r0, r3
9000629e:	f000 fd23 	bl	90006ce8 <RCCEx_PLL3_Config>
900062a2:	4603      	mov	r3, r0
900062a4:	2b00      	cmp	r3, #0
900062a6:	d002      	beq.n	900062ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
900062a8:	2301      	movs	r3, #1
900062aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
900062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
900062b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
900062ba:	663b      	str	r3, [r7, #96]	; 0x60
900062bc:	2300      	movs	r3, #0
900062be:	667b      	str	r3, [r7, #100]	; 0x64
900062c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
900062c4:	460b      	mov	r3, r1
900062c6:	4313      	orrs	r3, r2
900062c8:	d038      	beq.n	9000633c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
900062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900062ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900062d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900062d6:	d018      	beq.n	9000630a <HAL_RCCEx_PeriphCLKConfig+0x1116>
900062d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900062dc:	d811      	bhi.n	90006302 <HAL_RCCEx_PeriphCLKConfig+0x110e>
900062de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900062e2:	d014      	beq.n	9000630e <HAL_RCCEx_PeriphCLKConfig+0x111a>
900062e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900062e8:	d80b      	bhi.n	90006302 <HAL_RCCEx_PeriphCLKConfig+0x110e>
900062ea:	2b00      	cmp	r3, #0
900062ec:	d011      	beq.n	90006312 <HAL_RCCEx_PeriphCLKConfig+0x111e>
900062ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900062f2:	d106      	bne.n	90006302 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900062f4:	4bc3      	ldr	r3, [pc, #780]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900062f8:	4ac2      	ldr	r2, [pc, #776]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900062fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900062fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90006300:	e008      	b.n	90006314 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90006302:	2301      	movs	r3, #1
90006304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90006308:	e004      	b.n	90006314 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000630a:	bf00      	nop
9000630c:	e002      	b.n	90006314 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
9000630e:	bf00      	nop
90006310:	e000      	b.n	90006314 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90006312:	bf00      	nop
    }

    if (ret == HAL_OK)
90006314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90006318:	2b00      	cmp	r3, #0
9000631a:	d10b      	bne.n	90006334 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000631c:	4bb9      	ldr	r3, [pc, #740]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000631e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90006320:	f423 7140 	bic.w	r1, r3, #768	; 0x300
90006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9000632c:	4ab5      	ldr	r2, [pc, #724]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000632e:	430b      	orrs	r3, r1
90006330:	6553      	str	r3, [r2, #84]	; 0x54
90006332:	e003      	b.n	9000633c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90006334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90006338:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006340:	e9d3 2300 	ldrd	r2, r3, [r3]
90006344:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
90006348:	65bb      	str	r3, [r7, #88]	; 0x58
9000634a:	2300      	movs	r3, #0
9000634c:	65fb      	str	r3, [r7, #92]	; 0x5c
9000634e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
90006352:	460b      	mov	r3, r1
90006354:	4313      	orrs	r3, r2
90006356:	d009      	beq.n	9000636c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90006358:	4baa      	ldr	r3, [pc, #680]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000635a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000635c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
90006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90006366:	4aa7      	ldr	r2, [pc, #668]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90006368:	430b      	orrs	r3, r1
9000636a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006370:	e9d3 2300 	ldrd	r2, r3, [r3]
90006374:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
90006378:	653b      	str	r3, [r7, #80]	; 0x50
9000637a:	2300      	movs	r3, #0
9000637c:	657b      	str	r3, [r7, #84]	; 0x54
9000637e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
90006382:	460b      	mov	r3, r1
90006384:	4313      	orrs	r3, r2
90006386:	d00a      	beq.n	9000639e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90006388:	4b9e      	ldr	r3, [pc, #632]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000638a:	691b      	ldr	r3, [r3, #16]
9000638c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
90006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006394:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90006398:	4a9a      	ldr	r2, [pc, #616]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
9000639a:	430b      	orrs	r3, r1
9000639c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
900063a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
900063aa:	64bb      	str	r3, [r7, #72]	; 0x48
900063ac:	2300      	movs	r3, #0
900063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
900063b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
900063b4:	460b      	mov	r3, r1
900063b6:	4313      	orrs	r3, r2
900063b8:	d009      	beq.n	900063ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
900063ba:	4b92      	ldr	r3, [pc, #584]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900063bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900063be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
900063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900063c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900063c8:	4a8e      	ldr	r2, [pc, #568]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900063ca:	430b      	orrs	r3, r1
900063cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
900063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
900063d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
900063da:	643b      	str	r3, [r7, #64]	; 0x40
900063dc:	2300      	movs	r3, #0
900063de:	647b      	str	r3, [r7, #68]	; 0x44
900063e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
900063e4:	460b      	mov	r3, r1
900063e6:	4313      	orrs	r3, r2
900063e8:	d00e      	beq.n	90006408 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
900063ea:	4b86      	ldr	r3, [pc, #536]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900063ec:	691b      	ldr	r3, [r3, #16]
900063ee:	4a85      	ldr	r2, [pc, #532]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900063f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
900063f4:	6113      	str	r3, [r2, #16]
900063f6:	4b83      	ldr	r3, [pc, #524]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
900063f8:	6919      	ldr	r1, [r3, #16]
900063fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900063fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90006402:	4a80      	ldr	r2, [pc, #512]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90006404:	430b      	orrs	r3, r1
90006406:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90006408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000640c:	e9d3 2300 	ldrd	r2, r3, [r3]
90006410:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
90006414:	63bb      	str	r3, [r7, #56]	; 0x38
90006416:	2300      	movs	r3, #0
90006418:	63fb      	str	r3, [r7, #60]	; 0x3c
9000641a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
9000641e:	460b      	mov	r3, r1
90006420:	4313      	orrs	r3, r2
90006422:	d009      	beq.n	90006438 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90006424:	4b77      	ldr	r3, [pc, #476]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90006426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90006428:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
9000642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90006432:	4a74      	ldr	r2, [pc, #464]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90006434:	430b      	orrs	r3, r1
90006436:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000643c:	e9d3 2300 	ldrd	r2, r3, [r3]
90006440:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
90006444:	633b      	str	r3, [r7, #48]	; 0x30
90006446:	2300      	movs	r3, #0
90006448:	637b      	str	r3, [r7, #52]	; 0x34
9000644a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
9000644e:	460b      	mov	r3, r1
90006450:	4313      	orrs	r3, r2
90006452:	d00a      	beq.n	9000646a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90006454:	4b6b      	ldr	r3, [pc, #428]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90006456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90006458:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
9000645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90006460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90006464:	4a67      	ldr	r2, [pc, #412]	; (90006604 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90006466:	430b      	orrs	r3, r1
90006468:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000646e:	e9d3 2300 	ldrd	r2, r3, [r3]
90006472:	2100      	movs	r1, #0
90006474:	62b9      	str	r1, [r7, #40]	; 0x28
90006476:	f003 0301 	and.w	r3, r3, #1
9000647a:	62fb      	str	r3, [r7, #44]	; 0x2c
9000647c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
90006480:	460b      	mov	r3, r1
90006482:	4313      	orrs	r3, r2
90006484:	d011      	beq.n	900064aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000648a:	3308      	adds	r3, #8
9000648c:	2100      	movs	r1, #0
9000648e:	4618      	mov	r0, r3
90006490:	f000 fb78 	bl	90006b84 <RCCEx_PLL2_Config>
90006494:	4603      	mov	r3, r0
90006496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
9000649a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000649e:	2b00      	cmp	r3, #0
900064a0:	d003      	beq.n	900064aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900064a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900064a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
900064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
900064b2:	2100      	movs	r1, #0
900064b4:	6239      	str	r1, [r7, #32]
900064b6:	f003 0302 	and.w	r3, r3, #2
900064ba:	627b      	str	r3, [r7, #36]	; 0x24
900064bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
900064c0:	460b      	mov	r3, r1
900064c2:	4313      	orrs	r3, r2
900064c4:	d011      	beq.n	900064ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900064ca:	3308      	adds	r3, #8
900064cc:	2101      	movs	r1, #1
900064ce:	4618      	mov	r0, r3
900064d0:	f000 fb58 	bl	90006b84 <RCCEx_PLL2_Config>
900064d4:	4603      	mov	r3, r0
900064d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
900064da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900064de:	2b00      	cmp	r3, #0
900064e0:	d003      	beq.n	900064ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900064e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900064e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
900064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
900064f2:	2100      	movs	r1, #0
900064f4:	61b9      	str	r1, [r7, #24]
900064f6:	f003 0304 	and.w	r3, r3, #4
900064fa:	61fb      	str	r3, [r7, #28]
900064fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90006500:	460b      	mov	r3, r1
90006502:	4313      	orrs	r3, r2
90006504:	d011      	beq.n	9000652a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000650a:	3308      	adds	r3, #8
9000650c:	2102      	movs	r1, #2
9000650e:	4618      	mov	r0, r3
90006510:	f000 fb38 	bl	90006b84 <RCCEx_PLL2_Config>
90006514:	4603      	mov	r3, r0
90006516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
9000651a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000651e:	2b00      	cmp	r3, #0
90006520:	d003      	beq.n	9000652a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90006522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90006526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000652e:	e9d3 2300 	ldrd	r2, r3, [r3]
90006532:	2100      	movs	r1, #0
90006534:	6139      	str	r1, [r7, #16]
90006536:	f003 0308 	and.w	r3, r3, #8
9000653a:	617b      	str	r3, [r7, #20]
9000653c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90006540:	460b      	mov	r3, r1
90006542:	4313      	orrs	r3, r2
90006544:	d011      	beq.n	9000656a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000654a:	3328      	adds	r3, #40	; 0x28
9000654c:	2100      	movs	r1, #0
9000654e:	4618      	mov	r0, r3
90006550:	f000 fbca 	bl	90006ce8 <RCCEx_PLL3_Config>
90006554:	4603      	mov	r3, r0
90006556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
9000655a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000655e:	2b00      	cmp	r3, #0
90006560:	d003      	beq.n	9000656a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90006562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90006566:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000656e:	e9d3 2300 	ldrd	r2, r3, [r3]
90006572:	2100      	movs	r1, #0
90006574:	60b9      	str	r1, [r7, #8]
90006576:	f003 0310 	and.w	r3, r3, #16
9000657a:	60fb      	str	r3, [r7, #12]
9000657c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90006580:	460b      	mov	r3, r1
90006582:	4313      	orrs	r3, r2
90006584:	d011      	beq.n	900065aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90006586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000658a:	3328      	adds	r3, #40	; 0x28
9000658c:	2101      	movs	r1, #1
9000658e:	4618      	mov	r0, r3
90006590:	f000 fbaa 	bl	90006ce8 <RCCEx_PLL3_Config>
90006594:	4603      	mov	r3, r0
90006596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
9000659a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000659e:	2b00      	cmp	r3, #0
900065a0:	d003      	beq.n	900065aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900065a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900065a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
900065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
900065b2:	2100      	movs	r1, #0
900065b4:	6039      	str	r1, [r7, #0]
900065b6:	f003 0320 	and.w	r3, r3, #32
900065ba:	607b      	str	r3, [r7, #4]
900065bc:	e9d7 1200 	ldrd	r1, r2, [r7]
900065c0:	460b      	mov	r3, r1
900065c2:	4313      	orrs	r3, r2
900065c4:	d011      	beq.n	900065ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900065ca:	3328      	adds	r3, #40	; 0x28
900065cc:	2102      	movs	r1, #2
900065ce:	4618      	mov	r0, r3
900065d0:	f000 fb8a 	bl	90006ce8 <RCCEx_PLL3_Config>
900065d4:	4603      	mov	r3, r0
900065d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
900065da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900065de:	2b00      	cmp	r3, #0
900065e0:	d003      	beq.n	900065ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
900065e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900065e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
900065ea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
900065ee:	2b00      	cmp	r3, #0
900065f0:	d101      	bne.n	900065f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
900065f2:	2300      	movs	r3, #0
900065f4:	e000      	b.n	900065f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
900065f6:	2301      	movs	r3, #1
}
900065f8:	4618      	mov	r0, r3
900065fa:	f507 7794 	add.w	r7, r7, #296	; 0x128
900065fe:	46bd      	mov	sp, r7
90006600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90006604:	58024400 	.word	0x58024400

90006608 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90006608:	b580      	push	{r7, lr}
9000660a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000660c:	f7fe fd54 	bl	900050b8 <HAL_RCC_GetHCLKFreq>
90006610:	4602      	mov	r2, r0
90006612:	4b06      	ldr	r3, [pc, #24]	; (9000662c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90006614:	6a1b      	ldr	r3, [r3, #32]
90006616:	091b      	lsrs	r3, r3, #4
90006618:	f003 0307 	and.w	r3, r3, #7
9000661c:	4904      	ldr	r1, [pc, #16]	; (90006630 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
9000661e:	5ccb      	ldrb	r3, [r1, r3]
90006620:	f003 031f 	and.w	r3, r3, #31
90006624:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90006628:	4618      	mov	r0, r3
9000662a:	bd80      	pop	{r7, pc}
9000662c:	58024400 	.word	0x58024400
90006630:	90014068 	.word	0x90014068

90006634 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
90006634:	b480      	push	{r7}
90006636:	b089      	sub	sp, #36	; 0x24
90006638:	af00      	add	r7, sp, #0
9000663a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000663c:	4ba1      	ldr	r3, [pc, #644]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006640:	f003 0303 	and.w	r3, r3, #3
90006644:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
90006646:	4b9f      	ldr	r3, [pc, #636]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000664a:	0b1b      	lsrs	r3, r3, #12
9000664c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90006650:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
90006652:	4b9c      	ldr	r3, [pc, #624]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006656:	091b      	lsrs	r3, r3, #4
90006658:	f003 0301 	and.w	r3, r3, #1
9000665c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000665e:	4b99      	ldr	r3, [pc, #612]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006662:	08db      	lsrs	r3, r3, #3
90006664:	f3c3 030c 	ubfx	r3, r3, #0, #13
90006668:	693a      	ldr	r2, [r7, #16]
9000666a:	fb02 f303 	mul.w	r3, r2, r3
9000666e:	ee07 3a90 	vmov	s15, r3
90006672:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006676:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
9000667a:	697b      	ldr	r3, [r7, #20]
9000667c:	2b00      	cmp	r3, #0
9000667e:	f000 8111 	beq.w	900068a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
90006682:	69bb      	ldr	r3, [r7, #24]
90006684:	2b02      	cmp	r3, #2
90006686:	f000 8083 	beq.w	90006790 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
9000668a:	69bb      	ldr	r3, [r7, #24]
9000668c:	2b02      	cmp	r3, #2
9000668e:	f200 80a1 	bhi.w	900067d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
90006692:	69bb      	ldr	r3, [r7, #24]
90006694:	2b00      	cmp	r3, #0
90006696:	d003      	beq.n	900066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90006698:	69bb      	ldr	r3, [r7, #24]
9000669a:	2b01      	cmp	r3, #1
9000669c:	d056      	beq.n	9000674c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
9000669e:	e099      	b.n	900067d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900066a0:	4b88      	ldr	r3, [pc, #544]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900066a2:	681b      	ldr	r3, [r3, #0]
900066a4:	f003 0320 	and.w	r3, r3, #32
900066a8:	2b00      	cmp	r3, #0
900066aa:	d02d      	beq.n	90006708 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900066ac:	4b85      	ldr	r3, [pc, #532]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900066ae:	681b      	ldr	r3, [r3, #0]
900066b0:	08db      	lsrs	r3, r3, #3
900066b2:	f003 0303 	and.w	r3, r3, #3
900066b6:	4a84      	ldr	r2, [pc, #528]	; (900068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
900066b8:	fa22 f303 	lsr.w	r3, r2, r3
900066bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900066be:	68bb      	ldr	r3, [r7, #8]
900066c0:	ee07 3a90 	vmov	s15, r3
900066c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
900066c8:	697b      	ldr	r3, [r7, #20]
900066ca:	ee07 3a90 	vmov	s15, r3
900066ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
900066d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900066d6:	4b7b      	ldr	r3, [pc, #492]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
900066de:	ee07 3a90 	vmov	s15, r3
900066e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900066e6:	ed97 6a03 	vldr	s12, [r7, #12]
900066ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 900068cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900066ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
900066f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900066f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900066fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
900066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
90006702:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
90006706:	e087      	b.n	90006818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90006708:	697b      	ldr	r3, [r7, #20]
9000670a:	ee07 3a90 	vmov	s15, r3
9000670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006712:	eddf 6a6f 	vldr	s13, [pc, #444]	; 900068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000671a:	4b6a      	ldr	r3, [pc, #424]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006722:	ee07 3a90 	vmov	s15, r3
90006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000672a:	ed97 6a03 	vldr	s12, [r7, #12]
9000672e:	eddf 5a67 	vldr	s11, [pc, #412]	; 900068cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000673a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006742:	ee67 7a27 	vmul.f32	s15, s14, s15
90006746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000674a:	e065      	b.n	90006818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000674c:	697b      	ldr	r3, [r7, #20]
9000674e:	ee07 3a90 	vmov	s15, r3
90006752:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006756:	eddf 6a5f 	vldr	s13, [pc, #380]	; 900068d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000675e:	4b59      	ldr	r3, [pc, #356]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006766:	ee07 3a90 	vmov	s15, r3
9000676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000676e:	ed97 6a03 	vldr	s12, [r7, #12]
90006772:	eddf 5a56 	vldr	s11, [pc, #344]	; 900068cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90006776:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000677a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000677e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006782:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006786:	ee67 7a27 	vmul.f32	s15, s14, s15
9000678a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000678e:	e043      	b.n	90006818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
90006790:	697b      	ldr	r3, [r7, #20]
90006792:	ee07 3a90 	vmov	s15, r3
90006796:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000679a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 900068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
9000679e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900067a2:	4b48      	ldr	r3, [pc, #288]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900067a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900067aa:	ee07 3a90 	vmov	s15, r3
900067ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
900067b2:	ed97 6a03 	vldr	s12, [r7, #12]
900067b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 900068cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900067ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
900067be:	ee76 7aa7 	vadd.f32	s15, s13, s15
900067c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900067c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900067ca:	ee67 7a27 	vmul.f32	s15, s14, s15
900067ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900067d2:	e021      	b.n	90006818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
900067d4:	697b      	ldr	r3, [r7, #20]
900067d6:	ee07 3a90 	vmov	s15, r3
900067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
900067de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 900068d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
900067e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900067e6:	4b37      	ldr	r3, [pc, #220]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900067ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
900067ee:	ee07 3a90 	vmov	s15, r3
900067f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900067f6:	ed97 6a03 	vldr	s12, [r7, #12]
900067fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 900068cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900067fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006802:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000680a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000680e:	ee67 7a27 	vmul.f32	s15, s14, s15
90006812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90006816:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
90006818:	4b2a      	ldr	r3, [pc, #168]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000681c:	0a5b      	lsrs	r3, r3, #9
9000681e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006822:	ee07 3a90 	vmov	s15, r3
90006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000682a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000682e:	ee37 7a87 	vadd.f32	s14, s15, s14
90006832:	edd7 6a07 	vldr	s13, [r7, #28]
90006836:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000683a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000683e:	ee17 2a90 	vmov	r2, s15
90006842:	687b      	ldr	r3, [r7, #4]
90006844:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
90006846:	4b1f      	ldr	r3, [pc, #124]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000684a:	0c1b      	lsrs	r3, r3, #16
9000684c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006850:	ee07 3a90 	vmov	s15, r3
90006854:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000685c:	ee37 7a87 	vadd.f32	s14, s15, s14
90006860:	edd7 6a07 	vldr	s13, [r7, #28]
90006864:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000686c:	ee17 2a90 	vmov	r2, s15
90006870:	687b      	ldr	r3, [r7, #4]
90006872:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
90006874:	4b13      	ldr	r3, [pc, #76]	; (900068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006878:	0e1b      	lsrs	r3, r3, #24
9000687a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000687e:	ee07 3a90 	vmov	s15, r3
90006882:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000688a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000688e:	edd7 6a07 	vldr	s13, [r7, #28]
90006892:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000689a:	ee17 2a90 	vmov	r2, s15
9000689e:	687b      	ldr	r3, [r7, #4]
900068a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
900068a2:	e008      	b.n	900068b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900068a4:	687b      	ldr	r3, [r7, #4]
900068a6:	2200      	movs	r2, #0
900068a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
900068aa:	687b      	ldr	r3, [r7, #4]
900068ac:	2200      	movs	r2, #0
900068ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
900068b0:	687b      	ldr	r3, [r7, #4]
900068b2:	2200      	movs	r2, #0
900068b4:	609a      	str	r2, [r3, #8]
}
900068b6:	bf00      	nop
900068b8:	3724      	adds	r7, #36	; 0x24
900068ba:	46bd      	mov	sp, r7
900068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900068c0:	4770      	bx	lr
900068c2:	bf00      	nop
900068c4:	58024400 	.word	0x58024400
900068c8:	03d09000 	.word	0x03d09000
900068cc:	46000000 	.word	0x46000000
900068d0:	4c742400 	.word	0x4c742400
900068d4:	4a742400 	.word	0x4a742400
900068d8:	4c371b00 	.word	0x4c371b00

900068dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
900068dc:	b480      	push	{r7}
900068de:	b089      	sub	sp, #36	; 0x24
900068e0:	af00      	add	r7, sp, #0
900068e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900068e4:	4ba1      	ldr	r3, [pc, #644]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900068e8:	f003 0303 	and.w	r3, r3, #3
900068ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
900068ee:	4b9f      	ldr	r3, [pc, #636]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900068f2:	0d1b      	lsrs	r3, r3, #20
900068f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900068f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
900068fa:	4b9c      	ldr	r3, [pc, #624]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900068fe:	0a1b      	lsrs	r3, r3, #8
90006900:	f003 0301 	and.w	r3, r3, #1
90006904:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
90006906:	4b99      	ldr	r3, [pc, #612]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000690a:	08db      	lsrs	r3, r3, #3
9000690c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90006910:	693a      	ldr	r2, [r7, #16]
90006912:	fb02 f303 	mul.w	r3, r2, r3
90006916:	ee07 3a90 	vmov	s15, r3
9000691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000691e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
90006922:	697b      	ldr	r3, [r7, #20]
90006924:	2b00      	cmp	r3, #0
90006926:	f000 8111 	beq.w	90006b4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
9000692a:	69bb      	ldr	r3, [r7, #24]
9000692c:	2b02      	cmp	r3, #2
9000692e:	f000 8083 	beq.w	90006a38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
90006932:	69bb      	ldr	r3, [r7, #24]
90006934:	2b02      	cmp	r3, #2
90006936:	f200 80a1 	bhi.w	90006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
9000693a:	69bb      	ldr	r3, [r7, #24]
9000693c:	2b00      	cmp	r3, #0
9000693e:	d003      	beq.n	90006948 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
90006940:	69bb      	ldr	r3, [r7, #24]
90006942:	2b01      	cmp	r3, #1
90006944:	d056      	beq.n	900069f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90006946:	e099      	b.n	90006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90006948:	4b88      	ldr	r3, [pc, #544]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000694a:	681b      	ldr	r3, [r3, #0]
9000694c:	f003 0320 	and.w	r3, r3, #32
90006950:	2b00      	cmp	r3, #0
90006952:	d02d      	beq.n	900069b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90006954:	4b85      	ldr	r3, [pc, #532]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006956:	681b      	ldr	r3, [r3, #0]
90006958:	08db      	lsrs	r3, r3, #3
9000695a:	f003 0303 	and.w	r3, r3, #3
9000695e:	4a84      	ldr	r2, [pc, #528]	; (90006b70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
90006960:	fa22 f303 	lsr.w	r3, r2, r3
90006964:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90006966:	68bb      	ldr	r3, [r7, #8]
90006968:	ee07 3a90 	vmov	s15, r3
9000696c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006970:	697b      	ldr	r3, [r7, #20]
90006972:	ee07 3a90 	vmov	s15, r3
90006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000697a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000697e:	4b7b      	ldr	r3, [pc, #492]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006982:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006986:	ee07 3a90 	vmov	s15, r3
9000698a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000698e:	ed97 6a03 	vldr	s12, [r7, #12]
90006992:	eddf 5a78 	vldr	s11, [pc, #480]	; 90006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006996:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000699a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000699e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900069a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900069a6:	ee67 7a27 	vmul.f32	s15, s14, s15
900069aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
900069ae:	e087      	b.n	90006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900069b0:	697b      	ldr	r3, [r7, #20]
900069b2:	ee07 3a90 	vmov	s15, r3
900069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900069ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 90006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
900069be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900069c2:	4b6a      	ldr	r3, [pc, #424]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900069ca:	ee07 3a90 	vmov	s15, r3
900069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
900069d2:	ed97 6a03 	vldr	s12, [r7, #12]
900069d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 90006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900069da:	eec6 7a25 	vdiv.f32	s15, s12, s11
900069de:	ee76 7aa7 	vadd.f32	s15, s13, s15
900069e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900069e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900069ea:	ee67 7a27 	vmul.f32	s15, s14, s15
900069ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900069f2:	e065      	b.n	90006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
900069f4:	697b      	ldr	r3, [r7, #20]
900069f6:	ee07 3a90 	vmov	s15, r3
900069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
900069fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 90006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90006a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006a06:	4b59      	ldr	r3, [pc, #356]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006a0e:	ee07 3a90 	vmov	s15, r3
90006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006a16:	ed97 6a03 	vldr	s12, [r7, #12]
90006a1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 90006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
90006a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90006a36:	e043      	b.n	90006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90006a38:	697b      	ldr	r3, [r7, #20]
90006a3a:	ee07 3a90 	vmov	s15, r3
90006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006a42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 90006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006a4a:	4b48      	ldr	r3, [pc, #288]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006a52:	ee07 3a90 	vmov	s15, r3
90006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006a5a:	ed97 6a03 	vldr	s12, [r7, #12]
90006a5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 90006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
90006a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90006a7a:	e021      	b.n	90006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
90006a7c:	697b      	ldr	r3, [r7, #20]
90006a7e:	ee07 3a90 	vmov	s15, r3
90006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006a86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 90006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90006a8e:	4b37      	ldr	r3, [pc, #220]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
90006a96:	ee07 3a90 	vmov	s15, r3
90006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90006a9e:	ed97 6a03 	vldr	s12, [r7, #12]
90006aa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 90006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
90006aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
90006aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90006abe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
90006ac0:	4b2a      	ldr	r3, [pc, #168]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006ac4:	0a5b      	lsrs	r3, r3, #9
90006ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006aca:	ee07 3a90 	vmov	s15, r3
90006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
90006ada:	edd7 6a07 	vldr	s13, [r7, #28]
90006ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006ae6:	ee17 2a90 	vmov	r2, s15
90006aea:	687b      	ldr	r3, [r7, #4]
90006aec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
90006aee:	4b1f      	ldr	r3, [pc, #124]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006af2:	0c1b      	lsrs	r3, r3, #16
90006af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006af8:	ee07 3a90 	vmov	s15, r3
90006afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006b04:	ee37 7a87 	vadd.f32	s14, s15, s14
90006b08:	edd7 6a07 	vldr	s13, [r7, #28]
90006b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006b14:	ee17 2a90 	vmov	r2, s15
90006b18:	687b      	ldr	r3, [r7, #4]
90006b1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
90006b1c:	4b13      	ldr	r3, [pc, #76]	; (90006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006b20:	0e1b      	lsrs	r3, r3, #24
90006b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90006b26:	ee07 3a90 	vmov	s15, r3
90006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90006b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90006b32:	ee37 7a87 	vadd.f32	s14, s15, s14
90006b36:	edd7 6a07 	vldr	s13, [r7, #28]
90006b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
90006b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90006b42:	ee17 2a90 	vmov	r2, s15
90006b46:	687b      	ldr	r3, [r7, #4]
90006b48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90006b4a:	e008      	b.n	90006b5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90006b4c:	687b      	ldr	r3, [r7, #4]
90006b4e:	2200      	movs	r2, #0
90006b50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90006b52:	687b      	ldr	r3, [r7, #4]
90006b54:	2200      	movs	r2, #0
90006b56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90006b58:	687b      	ldr	r3, [r7, #4]
90006b5a:	2200      	movs	r2, #0
90006b5c:	609a      	str	r2, [r3, #8]
}
90006b5e:	bf00      	nop
90006b60:	3724      	adds	r7, #36	; 0x24
90006b62:	46bd      	mov	sp, r7
90006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
90006b68:	4770      	bx	lr
90006b6a:	bf00      	nop
90006b6c:	58024400 	.word	0x58024400
90006b70:	03d09000 	.word	0x03d09000
90006b74:	46000000 	.word	0x46000000
90006b78:	4c742400 	.word	0x4c742400
90006b7c:	4a742400 	.word	0x4a742400
90006b80:	4c371b00 	.word	0x4c371b00

90006b84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90006b84:	b580      	push	{r7, lr}
90006b86:	b084      	sub	sp, #16
90006b88:	af00      	add	r7, sp, #0
90006b8a:	6078      	str	r0, [r7, #4]
90006b8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90006b8e:	2300      	movs	r3, #0
90006b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90006b92:	4b53      	ldr	r3, [pc, #332]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006b96:	f003 0303 	and.w	r3, r3, #3
90006b9a:	2b03      	cmp	r3, #3
90006b9c:	d101      	bne.n	90006ba2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90006b9e:	2301      	movs	r3, #1
90006ba0:	e099      	b.n	90006cd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
90006ba2:	4b4f      	ldr	r3, [pc, #316]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006ba4:	681b      	ldr	r3, [r3, #0]
90006ba6:	4a4e      	ldr	r2, [pc, #312]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006ba8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90006bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006bae:	f7fb fa0d 	bl	90001fcc <HAL_GetTick>
90006bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90006bb4:	e008      	b.n	90006bc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90006bb6:	f7fb fa09 	bl	90001fcc <HAL_GetTick>
90006bba:	4602      	mov	r2, r0
90006bbc:	68bb      	ldr	r3, [r7, #8]
90006bbe:	1ad3      	subs	r3, r2, r3
90006bc0:	2b02      	cmp	r3, #2
90006bc2:	d901      	bls.n	90006bc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90006bc4:	2303      	movs	r3, #3
90006bc6:	e086      	b.n	90006cd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90006bc8:	4b45      	ldr	r3, [pc, #276]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006bca:	681b      	ldr	r3, [r3, #0]
90006bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90006bd0:	2b00      	cmp	r3, #0
90006bd2:	d1f0      	bne.n	90006bb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90006bd4:	4b42      	ldr	r3, [pc, #264]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006bd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90006bdc:	687b      	ldr	r3, [r7, #4]
90006bde:	681b      	ldr	r3, [r3, #0]
90006be0:	031b      	lsls	r3, r3, #12
90006be2:	493f      	ldr	r1, [pc, #252]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006be4:	4313      	orrs	r3, r2
90006be6:	628b      	str	r3, [r1, #40]	; 0x28
90006be8:	687b      	ldr	r3, [r7, #4]
90006bea:	685b      	ldr	r3, [r3, #4]
90006bec:	3b01      	subs	r3, #1
90006bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
90006bf2:	687b      	ldr	r3, [r7, #4]
90006bf4:	689b      	ldr	r3, [r3, #8]
90006bf6:	3b01      	subs	r3, #1
90006bf8:	025b      	lsls	r3, r3, #9
90006bfa:	b29b      	uxth	r3, r3
90006bfc:	431a      	orrs	r2, r3
90006bfe:	687b      	ldr	r3, [r7, #4]
90006c00:	68db      	ldr	r3, [r3, #12]
90006c02:	3b01      	subs	r3, #1
90006c04:	041b      	lsls	r3, r3, #16
90006c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90006c0a:	431a      	orrs	r2, r3
90006c0c:	687b      	ldr	r3, [r7, #4]
90006c0e:	691b      	ldr	r3, [r3, #16]
90006c10:	3b01      	subs	r3, #1
90006c12:	061b      	lsls	r3, r3, #24
90006c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90006c18:	4931      	ldr	r1, [pc, #196]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c1a:	4313      	orrs	r3, r2
90006c1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90006c1e:	4b30      	ldr	r3, [pc, #192]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
90006c26:	687b      	ldr	r3, [r7, #4]
90006c28:	695b      	ldr	r3, [r3, #20]
90006c2a:	492d      	ldr	r1, [pc, #180]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c2c:	4313      	orrs	r3, r2
90006c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90006c30:	4b2b      	ldr	r3, [pc, #172]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c34:	f023 0220 	bic.w	r2, r3, #32
90006c38:	687b      	ldr	r3, [r7, #4]
90006c3a:	699b      	ldr	r3, [r3, #24]
90006c3c:	4928      	ldr	r1, [pc, #160]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c3e:	4313      	orrs	r3, r2
90006c40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90006c42:	4b27      	ldr	r3, [pc, #156]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c46:	4a26      	ldr	r2, [pc, #152]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c48:	f023 0310 	bic.w	r3, r3, #16
90006c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90006c4e:	4b24      	ldr	r3, [pc, #144]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90006c52:	4b24      	ldr	r3, [pc, #144]	; (90006ce4 <RCCEx_PLL2_Config+0x160>)
90006c54:	4013      	ands	r3, r2
90006c56:	687a      	ldr	r2, [r7, #4]
90006c58:	69d2      	ldr	r2, [r2, #28]
90006c5a:	00d2      	lsls	r2, r2, #3
90006c5c:	4920      	ldr	r1, [pc, #128]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c5e:	4313      	orrs	r3, r2
90006c60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90006c62:	4b1f      	ldr	r3, [pc, #124]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c66:	4a1e      	ldr	r2, [pc, #120]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c68:	f043 0310 	orr.w	r3, r3, #16
90006c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90006c6e:	683b      	ldr	r3, [r7, #0]
90006c70:	2b00      	cmp	r3, #0
90006c72:	d106      	bne.n	90006c82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90006c74:	4b1a      	ldr	r3, [pc, #104]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c78:	4a19      	ldr	r2, [pc, #100]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90006c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
90006c80:	e00f      	b.n	90006ca2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90006c82:	683b      	ldr	r3, [r7, #0]
90006c84:	2b01      	cmp	r3, #1
90006c86:	d106      	bne.n	90006c96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90006c88:	4b15      	ldr	r3, [pc, #84]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c8c:	4a14      	ldr	r2, [pc, #80]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90006c92:	62d3      	str	r3, [r2, #44]	; 0x2c
90006c94:	e005      	b.n	90006ca2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
90006c96:	4b12      	ldr	r3, [pc, #72]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006c9a:	4a11      	ldr	r2, [pc, #68]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90006ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
90006ca2:	4b0f      	ldr	r3, [pc, #60]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006ca4:	681b      	ldr	r3, [r3, #0]
90006ca6:	4a0e      	ldr	r2, [pc, #56]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90006cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006cae:	f7fb f98d 	bl	90001fcc <HAL_GetTick>
90006cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90006cb4:	e008      	b.n	90006cc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90006cb6:	f7fb f989 	bl	90001fcc <HAL_GetTick>
90006cba:	4602      	mov	r2, r0
90006cbc:	68bb      	ldr	r3, [r7, #8]
90006cbe:	1ad3      	subs	r3, r2, r3
90006cc0:	2b02      	cmp	r3, #2
90006cc2:	d901      	bls.n	90006cc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90006cc4:	2303      	movs	r3, #3
90006cc6:	e006      	b.n	90006cd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90006cc8:	4b05      	ldr	r3, [pc, #20]	; (90006ce0 <RCCEx_PLL2_Config+0x15c>)
90006cca:	681b      	ldr	r3, [r3, #0]
90006ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90006cd0:	2b00      	cmp	r3, #0
90006cd2:	d0f0      	beq.n	90006cb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
90006cd6:	4618      	mov	r0, r3
90006cd8:	3710      	adds	r7, #16
90006cda:	46bd      	mov	sp, r7
90006cdc:	bd80      	pop	{r7, pc}
90006cde:	bf00      	nop
90006ce0:	58024400 	.word	0x58024400
90006ce4:	ffff0007 	.word	0xffff0007

90006ce8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90006ce8:	b580      	push	{r7, lr}
90006cea:	b084      	sub	sp, #16
90006cec:	af00      	add	r7, sp, #0
90006cee:	6078      	str	r0, [r7, #4]
90006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90006cf2:	2300      	movs	r3, #0
90006cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90006cf6:	4b53      	ldr	r3, [pc, #332]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006cfa:	f003 0303 	and.w	r3, r3, #3
90006cfe:	2b03      	cmp	r3, #3
90006d00:	d101      	bne.n	90006d06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90006d02:	2301      	movs	r3, #1
90006d04:	e099      	b.n	90006e3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
90006d06:	4b4f      	ldr	r3, [pc, #316]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d08:	681b      	ldr	r3, [r3, #0]
90006d0a:	4a4e      	ldr	r2, [pc, #312]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90006d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006d12:	f7fb f95b 	bl	90001fcc <HAL_GetTick>
90006d16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90006d18:	e008      	b.n	90006d2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90006d1a:	f7fb f957 	bl	90001fcc <HAL_GetTick>
90006d1e:	4602      	mov	r2, r0
90006d20:	68bb      	ldr	r3, [r7, #8]
90006d22:	1ad3      	subs	r3, r2, r3
90006d24:	2b02      	cmp	r3, #2
90006d26:	d901      	bls.n	90006d2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90006d28:	2303      	movs	r3, #3
90006d2a:	e086      	b.n	90006e3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90006d2c:	4b45      	ldr	r3, [pc, #276]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d2e:	681b      	ldr	r3, [r3, #0]
90006d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006d34:	2b00      	cmp	r3, #0
90006d36:	d1f0      	bne.n	90006d1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90006d38:	4b42      	ldr	r3, [pc, #264]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006d3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
90006d40:	687b      	ldr	r3, [r7, #4]
90006d42:	681b      	ldr	r3, [r3, #0]
90006d44:	051b      	lsls	r3, r3, #20
90006d46:	493f      	ldr	r1, [pc, #252]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d48:	4313      	orrs	r3, r2
90006d4a:	628b      	str	r3, [r1, #40]	; 0x28
90006d4c:	687b      	ldr	r3, [r7, #4]
90006d4e:	685b      	ldr	r3, [r3, #4]
90006d50:	3b01      	subs	r3, #1
90006d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
90006d56:	687b      	ldr	r3, [r7, #4]
90006d58:	689b      	ldr	r3, [r3, #8]
90006d5a:	3b01      	subs	r3, #1
90006d5c:	025b      	lsls	r3, r3, #9
90006d5e:	b29b      	uxth	r3, r3
90006d60:	431a      	orrs	r2, r3
90006d62:	687b      	ldr	r3, [r7, #4]
90006d64:	68db      	ldr	r3, [r3, #12]
90006d66:	3b01      	subs	r3, #1
90006d68:	041b      	lsls	r3, r3, #16
90006d6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90006d6e:	431a      	orrs	r2, r3
90006d70:	687b      	ldr	r3, [r7, #4]
90006d72:	691b      	ldr	r3, [r3, #16]
90006d74:	3b01      	subs	r3, #1
90006d76:	061b      	lsls	r3, r3, #24
90006d78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90006d7c:	4931      	ldr	r1, [pc, #196]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d7e:	4313      	orrs	r3, r2
90006d80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
90006d82:	4b30      	ldr	r3, [pc, #192]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
90006d8a:	687b      	ldr	r3, [r7, #4]
90006d8c:	695b      	ldr	r3, [r3, #20]
90006d8e:	492d      	ldr	r1, [pc, #180]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d90:	4313      	orrs	r3, r2
90006d92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90006d94:	4b2b      	ldr	r3, [pc, #172]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006d98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
90006d9c:	687b      	ldr	r3, [r7, #4]
90006d9e:	699b      	ldr	r3, [r3, #24]
90006da0:	4928      	ldr	r1, [pc, #160]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006da2:	4313      	orrs	r3, r2
90006da4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
90006da6:	4b27      	ldr	r3, [pc, #156]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006daa:	4a26      	ldr	r2, [pc, #152]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90006db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
90006db2:	4b24      	ldr	r3, [pc, #144]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90006db6:	4b24      	ldr	r3, [pc, #144]	; (90006e48 <RCCEx_PLL3_Config+0x160>)
90006db8:	4013      	ands	r3, r2
90006dba:	687a      	ldr	r2, [r7, #4]
90006dbc:	69d2      	ldr	r2, [r2, #28]
90006dbe:	00d2      	lsls	r2, r2, #3
90006dc0:	4920      	ldr	r1, [pc, #128]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006dc2:	4313      	orrs	r3, r2
90006dc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
90006dc6:	4b1f      	ldr	r3, [pc, #124]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006dca:	4a1e      	ldr	r2, [pc, #120]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90006dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90006dd2:	683b      	ldr	r3, [r7, #0]
90006dd4:	2b00      	cmp	r3, #0
90006dd6:	d106      	bne.n	90006de6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90006dd8:	4b1a      	ldr	r3, [pc, #104]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006ddc:	4a19      	ldr	r2, [pc, #100]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90006de2:	62d3      	str	r3, [r2, #44]	; 0x2c
90006de4:	e00f      	b.n	90006e06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
90006de6:	683b      	ldr	r3, [r7, #0]
90006de8:	2b01      	cmp	r3, #1
90006dea:	d106      	bne.n	90006dfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90006dec:	4b15      	ldr	r3, [pc, #84]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006df0:	4a14      	ldr	r2, [pc, #80]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90006df6:	62d3      	str	r3, [r2, #44]	; 0x2c
90006df8:	e005      	b.n	90006e06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90006dfa:	4b12      	ldr	r3, [pc, #72]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006dfe:	4a11      	ldr	r2, [pc, #68]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90006e04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90006e06:	4b0f      	ldr	r3, [pc, #60]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006e08:	681b      	ldr	r3, [r3, #0]
90006e0a:	4a0e      	ldr	r2, [pc, #56]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90006e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006e12:	f7fb f8db 	bl	90001fcc <HAL_GetTick>
90006e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90006e18:	e008      	b.n	90006e2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
90006e1a:	f7fb f8d7 	bl	90001fcc <HAL_GetTick>
90006e1e:	4602      	mov	r2, r0
90006e20:	68bb      	ldr	r3, [r7, #8]
90006e22:	1ad3      	subs	r3, r2, r3
90006e24:	2b02      	cmp	r3, #2
90006e26:	d901      	bls.n	90006e2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90006e28:	2303      	movs	r3, #3
90006e2a:	e006      	b.n	90006e3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90006e2c:	4b05      	ldr	r3, [pc, #20]	; (90006e44 <RCCEx_PLL3_Config+0x15c>)
90006e2e:	681b      	ldr	r3, [r3, #0]
90006e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90006e34:	2b00      	cmp	r3, #0
90006e36:	d0f0      	beq.n	90006e1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90006e38:	7bfb      	ldrb	r3, [r7, #15]
}
90006e3a:	4618      	mov	r0, r3
90006e3c:	3710      	adds	r7, #16
90006e3e:	46bd      	mov	sp, r7
90006e40:	bd80      	pop	{r7, pc}
90006e42:	bf00      	nop
90006e44:	58024400 	.word	0x58024400
90006e48:	ffff0007 	.word	0xffff0007

90006e4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
90006e4c:	b580      	push	{r7, lr}
90006e4e:	b084      	sub	sp, #16
90006e50:	af00      	add	r7, sp, #0
90006e52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
90006e54:	687b      	ldr	r3, [r7, #4]
90006e56:	2b00      	cmp	r3, #0
90006e58:	d101      	bne.n	90006e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
90006e5a:	2301      	movs	r3, #1
90006e5c:	e10f      	b.n	9000707e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
90006e5e:	687b      	ldr	r3, [r7, #4]
90006e60:	2200      	movs	r2, #0
90006e62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
90006e64:	687b      	ldr	r3, [r7, #4]
90006e66:	681b      	ldr	r3, [r3, #0]
90006e68:	4a87      	ldr	r2, [pc, #540]	; (90007088 <HAL_SPI_Init+0x23c>)
90006e6a:	4293      	cmp	r3, r2
90006e6c:	d00f      	beq.n	90006e8e <HAL_SPI_Init+0x42>
90006e6e:	687b      	ldr	r3, [r7, #4]
90006e70:	681b      	ldr	r3, [r3, #0]
90006e72:	4a86      	ldr	r2, [pc, #536]	; (9000708c <HAL_SPI_Init+0x240>)
90006e74:	4293      	cmp	r3, r2
90006e76:	d00a      	beq.n	90006e8e <HAL_SPI_Init+0x42>
90006e78:	687b      	ldr	r3, [r7, #4]
90006e7a:	681b      	ldr	r3, [r3, #0]
90006e7c:	4a84      	ldr	r2, [pc, #528]	; (90007090 <HAL_SPI_Init+0x244>)
90006e7e:	4293      	cmp	r3, r2
90006e80:	d005      	beq.n	90006e8e <HAL_SPI_Init+0x42>
90006e82:	687b      	ldr	r3, [r7, #4]
90006e84:	68db      	ldr	r3, [r3, #12]
90006e86:	2b0f      	cmp	r3, #15
90006e88:	d901      	bls.n	90006e8e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
90006e8a:	2301      	movs	r3, #1
90006e8c:	e0f7      	b.n	9000707e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
90006e8e:	6878      	ldr	r0, [r7, #4]
90006e90:	f000 f900 	bl	90007094 <SPI_GetPacketSize>
90006e94:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
90006e96:	687b      	ldr	r3, [r7, #4]
90006e98:	681b      	ldr	r3, [r3, #0]
90006e9a:	4a7b      	ldr	r2, [pc, #492]	; (90007088 <HAL_SPI_Init+0x23c>)
90006e9c:	4293      	cmp	r3, r2
90006e9e:	d00c      	beq.n	90006eba <HAL_SPI_Init+0x6e>
90006ea0:	687b      	ldr	r3, [r7, #4]
90006ea2:	681b      	ldr	r3, [r3, #0]
90006ea4:	4a79      	ldr	r2, [pc, #484]	; (9000708c <HAL_SPI_Init+0x240>)
90006ea6:	4293      	cmp	r3, r2
90006ea8:	d007      	beq.n	90006eba <HAL_SPI_Init+0x6e>
90006eaa:	687b      	ldr	r3, [r7, #4]
90006eac:	681b      	ldr	r3, [r3, #0]
90006eae:	4a78      	ldr	r2, [pc, #480]	; (90007090 <HAL_SPI_Init+0x244>)
90006eb0:	4293      	cmp	r3, r2
90006eb2:	d002      	beq.n	90006eba <HAL_SPI_Init+0x6e>
90006eb4:	68fb      	ldr	r3, [r7, #12]
90006eb6:	2b08      	cmp	r3, #8
90006eb8:	d811      	bhi.n	90006ede <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
90006eba:	687b      	ldr	r3, [r7, #4]
90006ebc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
90006ebe:	4a72      	ldr	r2, [pc, #456]	; (90007088 <HAL_SPI_Init+0x23c>)
90006ec0:	4293      	cmp	r3, r2
90006ec2:	d009      	beq.n	90006ed8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
90006ec4:	687b      	ldr	r3, [r7, #4]
90006ec6:	681b      	ldr	r3, [r3, #0]
90006ec8:	4a70      	ldr	r2, [pc, #448]	; (9000708c <HAL_SPI_Init+0x240>)
90006eca:	4293      	cmp	r3, r2
90006ecc:	d004      	beq.n	90006ed8 <HAL_SPI_Init+0x8c>
90006ece:	687b      	ldr	r3, [r7, #4]
90006ed0:	681b      	ldr	r3, [r3, #0]
90006ed2:	4a6f      	ldr	r2, [pc, #444]	; (90007090 <HAL_SPI_Init+0x244>)
90006ed4:	4293      	cmp	r3, r2
90006ed6:	d104      	bne.n	90006ee2 <HAL_SPI_Init+0x96>
90006ed8:	68fb      	ldr	r3, [r7, #12]
90006eda:	2b10      	cmp	r3, #16
90006edc:	d901      	bls.n	90006ee2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
90006ede:	2301      	movs	r3, #1
90006ee0:	e0cd      	b.n	9000707e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
90006ee2:	687b      	ldr	r3, [r7, #4]
90006ee4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
90006ee8:	b2db      	uxtb	r3, r3
90006eea:	2b00      	cmp	r3, #0
90006eec:	d106      	bne.n	90006efc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
90006eee:	687b      	ldr	r3, [r7, #4]
90006ef0:	2200      	movs	r2, #0
90006ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
90006ef6:	6878      	ldr	r0, [r7, #4]
90006ef8:	f7fa f9d8 	bl	900012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
90006efc:	687b      	ldr	r3, [r7, #4]
90006efe:	2202      	movs	r2, #2
90006f00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
90006f04:	687b      	ldr	r3, [r7, #4]
90006f06:	681b      	ldr	r3, [r3, #0]
90006f08:	681a      	ldr	r2, [r3, #0]
90006f0a:	687b      	ldr	r3, [r7, #4]
90006f0c:	681b      	ldr	r3, [r3, #0]
90006f0e:	f022 0201 	bic.w	r2, r2, #1
90006f12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
90006f14:	687b      	ldr	r3, [r7, #4]
90006f16:	681b      	ldr	r3, [r3, #0]
90006f18:	689b      	ldr	r3, [r3, #8]
90006f1a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
90006f1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
90006f20:	687b      	ldr	r3, [r7, #4]
90006f22:	699b      	ldr	r3, [r3, #24]
90006f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90006f28:	d119      	bne.n	90006f5e <HAL_SPI_Init+0x112>
90006f2a:	687b      	ldr	r3, [r7, #4]
90006f2c:	685b      	ldr	r3, [r3, #4]
90006f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90006f32:	d103      	bne.n	90006f3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
90006f34:	687b      	ldr	r3, [r7, #4]
90006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
90006f38:	2b00      	cmp	r3, #0
90006f3a:	d008      	beq.n	90006f4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
90006f3c:	687b      	ldr	r3, [r7, #4]
90006f3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
90006f40:	2b00      	cmp	r3, #0
90006f42:	d10c      	bne.n	90006f5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
90006f44:	687b      	ldr	r3, [r7, #4]
90006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
90006f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90006f4c:	d107      	bne.n	90006f5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
90006f4e:	687b      	ldr	r3, [r7, #4]
90006f50:	681b      	ldr	r3, [r3, #0]
90006f52:	681a      	ldr	r2, [r3, #0]
90006f54:	687b      	ldr	r3, [r7, #4]
90006f56:	681b      	ldr	r3, [r3, #0]
90006f58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90006f5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
90006f5e:	687b      	ldr	r3, [r7, #4]
90006f60:	685b      	ldr	r3, [r3, #4]
90006f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90006f66:	2b00      	cmp	r3, #0
90006f68:	d00f      	beq.n	90006f8a <HAL_SPI_Init+0x13e>
90006f6a:	687b      	ldr	r3, [r7, #4]
90006f6c:	68db      	ldr	r3, [r3, #12]
90006f6e:	2b06      	cmp	r3, #6
90006f70:	d90b      	bls.n	90006f8a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
90006f72:	687b      	ldr	r3, [r7, #4]
90006f74:	681b      	ldr	r3, [r3, #0]
90006f76:	681b      	ldr	r3, [r3, #0]
90006f78:	f423 7180 	bic.w	r1, r3, #256	; 0x100
90006f7c:	687b      	ldr	r3, [r7, #4]
90006f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
90006f80:	687b      	ldr	r3, [r7, #4]
90006f82:	681b      	ldr	r3, [r3, #0]
90006f84:	430a      	orrs	r2, r1
90006f86:	601a      	str	r2, [r3, #0]
90006f88:	e007      	b.n	90006f9a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
90006f8a:	687b      	ldr	r3, [r7, #4]
90006f8c:	681b      	ldr	r3, [r3, #0]
90006f8e:	681a      	ldr	r2, [r3, #0]
90006f90:	687b      	ldr	r3, [r7, #4]
90006f92:	681b      	ldr	r3, [r3, #0]
90006f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90006f98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
90006f9a:	687b      	ldr	r3, [r7, #4]
90006f9c:	69da      	ldr	r2, [r3, #28]
90006f9e:	687b      	ldr	r3, [r7, #4]
90006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006fa2:	431a      	orrs	r2, r3
90006fa4:	68bb      	ldr	r3, [r7, #8]
90006fa6:	431a      	orrs	r2, r3
90006fa8:	687b      	ldr	r3, [r7, #4]
90006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006fac:	ea42 0103 	orr.w	r1, r2, r3
90006fb0:	687b      	ldr	r3, [r7, #4]
90006fb2:	68da      	ldr	r2, [r3, #12]
90006fb4:	687b      	ldr	r3, [r7, #4]
90006fb6:	681b      	ldr	r3, [r3, #0]
90006fb8:	430a      	orrs	r2, r1
90006fba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
90006fbc:	687b      	ldr	r3, [r7, #4]
90006fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90006fc0:	687b      	ldr	r3, [r7, #4]
90006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006fc4:	431a      	orrs	r2, r3
90006fc6:	687b      	ldr	r3, [r7, #4]
90006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006fca:	431a      	orrs	r2, r3
90006fcc:	687b      	ldr	r3, [r7, #4]
90006fce:	699b      	ldr	r3, [r3, #24]
90006fd0:	431a      	orrs	r2, r3
90006fd2:	687b      	ldr	r3, [r7, #4]
90006fd4:	691b      	ldr	r3, [r3, #16]
90006fd6:	431a      	orrs	r2, r3
90006fd8:	687b      	ldr	r3, [r7, #4]
90006fda:	695b      	ldr	r3, [r3, #20]
90006fdc:	431a      	orrs	r2, r3
90006fde:	687b      	ldr	r3, [r7, #4]
90006fe0:	6a1b      	ldr	r3, [r3, #32]
90006fe2:	431a      	orrs	r2, r3
90006fe4:	687b      	ldr	r3, [r7, #4]
90006fe6:	685b      	ldr	r3, [r3, #4]
90006fe8:	431a      	orrs	r2, r3
90006fea:	687b      	ldr	r3, [r7, #4]
90006fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90006fee:	431a      	orrs	r2, r3
90006ff0:	687b      	ldr	r3, [r7, #4]
90006ff2:	689b      	ldr	r3, [r3, #8]
90006ff4:	431a      	orrs	r2, r3
90006ff6:	687b      	ldr	r3, [r7, #4]
90006ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90006ffa:	ea42 0103 	orr.w	r1, r2, r3
90006ffe:	687b      	ldr	r3, [r7, #4]
90007000:	6d9a      	ldr	r2, [r3, #88]	; 0x58
90007002:	687b      	ldr	r3, [r7, #4]
90007004:	681b      	ldr	r3, [r3, #0]
90007006:	430a      	orrs	r2, r1
90007008:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
9000700a:	687b      	ldr	r3, [r7, #4]
9000700c:	685b      	ldr	r3, [r3, #4]
9000700e:	2b00      	cmp	r3, #0
90007010:	d113      	bne.n	9000703a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
90007012:	687b      	ldr	r3, [r7, #4]
90007014:	681b      	ldr	r3, [r3, #0]
90007016:	689b      	ldr	r3, [r3, #8]
90007018:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
9000701c:	687b      	ldr	r3, [r7, #4]
9000701e:	681b      	ldr	r3, [r3, #0]
90007020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
90007024:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
90007026:	687b      	ldr	r3, [r7, #4]
90007028:	681b      	ldr	r3, [r3, #0]
9000702a:	689b      	ldr	r3, [r3, #8]
9000702c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
90007030:	687b      	ldr	r3, [r7, #4]
90007032:	681b      	ldr	r3, [r3, #0]
90007034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90007038:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
9000703a:	687b      	ldr	r3, [r7, #4]
9000703c:	681b      	ldr	r3, [r3, #0]
9000703e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
90007040:	687b      	ldr	r3, [r7, #4]
90007042:	681b      	ldr	r3, [r3, #0]
90007044:	f022 0201 	bic.w	r2, r2, #1
90007048:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
9000704a:	687b      	ldr	r3, [r7, #4]
9000704c:	685b      	ldr	r3, [r3, #4]
9000704e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90007052:	2b00      	cmp	r3, #0
90007054:	d00a      	beq.n	9000706c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
90007056:	687b      	ldr	r3, [r7, #4]
90007058:	681b      	ldr	r3, [r3, #0]
9000705a:	68db      	ldr	r3, [r3, #12]
9000705c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
90007060:	687b      	ldr	r3, [r7, #4]
90007062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
90007064:	687b      	ldr	r3, [r7, #4]
90007066:	681b      	ldr	r3, [r3, #0]
90007068:	430a      	orrs	r2, r1
9000706a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
9000706c:	687b      	ldr	r3, [r7, #4]
9000706e:	2200      	movs	r2, #0
90007070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
90007074:	687b      	ldr	r3, [r7, #4]
90007076:	2201      	movs	r2, #1
90007078:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
9000707c:	2300      	movs	r3, #0
}
9000707e:	4618      	mov	r0, r3
90007080:	3710      	adds	r7, #16
90007082:	46bd      	mov	sp, r7
90007084:	bd80      	pop	{r7, pc}
90007086:	bf00      	nop
90007088:	40013000 	.word	0x40013000
9000708c:	40003800 	.word	0x40003800
90007090:	40003c00 	.word	0x40003c00

90007094 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
90007094:	b480      	push	{r7}
90007096:	b085      	sub	sp, #20
90007098:	af00      	add	r7, sp, #0
9000709a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
9000709c:	687b      	ldr	r3, [r7, #4]
9000709e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900070a0:	095b      	lsrs	r3, r3, #5
900070a2:	3301      	adds	r3, #1
900070a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
900070a6:	687b      	ldr	r3, [r7, #4]
900070a8:	68db      	ldr	r3, [r3, #12]
900070aa:	3301      	adds	r3, #1
900070ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
900070ae:	68bb      	ldr	r3, [r7, #8]
900070b0:	3307      	adds	r3, #7
900070b2:	08db      	lsrs	r3, r3, #3
900070b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
900070b6:	68bb      	ldr	r3, [r7, #8]
900070b8:	68fa      	ldr	r2, [r7, #12]
900070ba:	fb02 f303 	mul.w	r3, r2, r3
}
900070be:	4618      	mov	r0, r3
900070c0:	3714      	adds	r7, #20
900070c2:	46bd      	mov	sp, r7
900070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900070c8:	4770      	bx	lr

900070ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
900070ca:	b580      	push	{r7, lr}
900070cc:	b082      	sub	sp, #8
900070ce:	af00      	add	r7, sp, #0
900070d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
900070d2:	687b      	ldr	r3, [r7, #4]
900070d4:	2b00      	cmp	r3, #0
900070d6:	d101      	bne.n	900070dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
900070d8:	2301      	movs	r3, #1
900070da:	e049      	b.n	90007170 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900070dc:	687b      	ldr	r3, [r7, #4]
900070de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
900070e2:	b2db      	uxtb	r3, r3
900070e4:	2b00      	cmp	r3, #0
900070e6:	d106      	bne.n	900070f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
900070e8:	687b      	ldr	r3, [r7, #4]
900070ea:	2200      	movs	r2, #0
900070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
900070f0:	6878      	ldr	r0, [r7, #4]
900070f2:	f7fa fc53 	bl	9000199c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
900070f6:	687b      	ldr	r3, [r7, #4]
900070f8:	2202      	movs	r2, #2
900070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
900070fe:	687b      	ldr	r3, [r7, #4]
90007100:	681a      	ldr	r2, [r3, #0]
90007102:	687b      	ldr	r3, [r7, #4]
90007104:	3304      	adds	r3, #4
90007106:	4619      	mov	r1, r3
90007108:	4610      	mov	r0, r2
9000710a:	f000 f9f5 	bl	900074f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000710e:	687b      	ldr	r3, [r7, #4]
90007110:	2201      	movs	r2, #1
90007112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90007116:	687b      	ldr	r3, [r7, #4]
90007118:	2201      	movs	r2, #1
9000711a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
9000711e:	687b      	ldr	r3, [r7, #4]
90007120:	2201      	movs	r2, #1
90007122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
90007126:	687b      	ldr	r3, [r7, #4]
90007128:	2201      	movs	r2, #1
9000712a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
9000712e:	687b      	ldr	r3, [r7, #4]
90007130:	2201      	movs	r2, #1
90007132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
90007136:	687b      	ldr	r3, [r7, #4]
90007138:	2201      	movs	r2, #1
9000713a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
9000713e:	687b      	ldr	r3, [r7, #4]
90007140:	2201      	movs	r2, #1
90007142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90007146:	687b      	ldr	r3, [r7, #4]
90007148:	2201      	movs	r2, #1
9000714a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000714e:	687b      	ldr	r3, [r7, #4]
90007150:	2201      	movs	r2, #1
90007152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90007156:	687b      	ldr	r3, [r7, #4]
90007158:	2201      	movs	r2, #1
9000715a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
9000715e:	687b      	ldr	r3, [r7, #4]
90007160:	2201      	movs	r2, #1
90007162:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90007166:	687b      	ldr	r3, [r7, #4]
90007168:	2201      	movs	r2, #1
9000716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
9000716e:	2300      	movs	r3, #0
}
90007170:	4618      	mov	r0, r3
90007172:	3708      	adds	r7, #8
90007174:	46bd      	mov	sp, r7
90007176:	bd80      	pop	{r7, pc}

90007178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
90007178:	b480      	push	{r7}
9000717a:	b085      	sub	sp, #20
9000717c:	af00      	add	r7, sp, #0
9000717e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
90007180:	687b      	ldr	r3, [r7, #4]
90007182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
90007186:	b2db      	uxtb	r3, r3
90007188:	2b01      	cmp	r3, #1
9000718a:	d001      	beq.n	90007190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
9000718c:	2301      	movs	r3, #1
9000718e:	e054      	b.n	9000723a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90007190:	687b      	ldr	r3, [r7, #4]
90007192:	2202      	movs	r2, #2
90007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
90007198:	687b      	ldr	r3, [r7, #4]
9000719a:	681b      	ldr	r3, [r3, #0]
9000719c:	68da      	ldr	r2, [r3, #12]
9000719e:	687b      	ldr	r3, [r7, #4]
900071a0:	681b      	ldr	r3, [r3, #0]
900071a2:	f042 0201 	orr.w	r2, r2, #1
900071a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
900071a8:	687b      	ldr	r3, [r7, #4]
900071aa:	681b      	ldr	r3, [r3, #0]
900071ac:	4a26      	ldr	r2, [pc, #152]	; (90007248 <HAL_TIM_Base_Start_IT+0xd0>)
900071ae:	4293      	cmp	r3, r2
900071b0:	d022      	beq.n	900071f8 <HAL_TIM_Base_Start_IT+0x80>
900071b2:	687b      	ldr	r3, [r7, #4]
900071b4:	681b      	ldr	r3, [r3, #0]
900071b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900071ba:	d01d      	beq.n	900071f8 <HAL_TIM_Base_Start_IT+0x80>
900071bc:	687b      	ldr	r3, [r7, #4]
900071be:	681b      	ldr	r3, [r3, #0]
900071c0:	4a22      	ldr	r2, [pc, #136]	; (9000724c <HAL_TIM_Base_Start_IT+0xd4>)
900071c2:	4293      	cmp	r3, r2
900071c4:	d018      	beq.n	900071f8 <HAL_TIM_Base_Start_IT+0x80>
900071c6:	687b      	ldr	r3, [r7, #4]
900071c8:	681b      	ldr	r3, [r3, #0]
900071ca:	4a21      	ldr	r2, [pc, #132]	; (90007250 <HAL_TIM_Base_Start_IT+0xd8>)
900071cc:	4293      	cmp	r3, r2
900071ce:	d013      	beq.n	900071f8 <HAL_TIM_Base_Start_IT+0x80>
900071d0:	687b      	ldr	r3, [r7, #4]
900071d2:	681b      	ldr	r3, [r3, #0]
900071d4:	4a1f      	ldr	r2, [pc, #124]	; (90007254 <HAL_TIM_Base_Start_IT+0xdc>)
900071d6:	4293      	cmp	r3, r2
900071d8:	d00e      	beq.n	900071f8 <HAL_TIM_Base_Start_IT+0x80>
900071da:	687b      	ldr	r3, [r7, #4]
900071dc:	681b      	ldr	r3, [r3, #0]
900071de:	4a1e      	ldr	r2, [pc, #120]	; (90007258 <HAL_TIM_Base_Start_IT+0xe0>)
900071e0:	4293      	cmp	r3, r2
900071e2:	d009      	beq.n	900071f8 <HAL_TIM_Base_Start_IT+0x80>
900071e4:	687b      	ldr	r3, [r7, #4]
900071e6:	681b      	ldr	r3, [r3, #0]
900071e8:	4a1c      	ldr	r2, [pc, #112]	; (9000725c <HAL_TIM_Base_Start_IT+0xe4>)
900071ea:	4293      	cmp	r3, r2
900071ec:	d004      	beq.n	900071f8 <HAL_TIM_Base_Start_IT+0x80>
900071ee:	687b      	ldr	r3, [r7, #4]
900071f0:	681b      	ldr	r3, [r3, #0]
900071f2:	4a1b      	ldr	r2, [pc, #108]	; (90007260 <HAL_TIM_Base_Start_IT+0xe8>)
900071f4:	4293      	cmp	r3, r2
900071f6:	d115      	bne.n	90007224 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
900071f8:	687b      	ldr	r3, [r7, #4]
900071fa:	681b      	ldr	r3, [r3, #0]
900071fc:	689a      	ldr	r2, [r3, #8]
900071fe:	4b19      	ldr	r3, [pc, #100]	; (90007264 <HAL_TIM_Base_Start_IT+0xec>)
90007200:	4013      	ands	r3, r2
90007202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90007204:	68fb      	ldr	r3, [r7, #12]
90007206:	2b06      	cmp	r3, #6
90007208:	d015      	beq.n	90007236 <HAL_TIM_Base_Start_IT+0xbe>
9000720a:	68fb      	ldr	r3, [r7, #12]
9000720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90007210:	d011      	beq.n	90007236 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
90007212:	687b      	ldr	r3, [r7, #4]
90007214:	681b      	ldr	r3, [r3, #0]
90007216:	681a      	ldr	r2, [r3, #0]
90007218:	687b      	ldr	r3, [r7, #4]
9000721a:	681b      	ldr	r3, [r3, #0]
9000721c:	f042 0201 	orr.w	r2, r2, #1
90007220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90007222:	e008      	b.n	90007236 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
90007224:	687b      	ldr	r3, [r7, #4]
90007226:	681b      	ldr	r3, [r3, #0]
90007228:	681a      	ldr	r2, [r3, #0]
9000722a:	687b      	ldr	r3, [r7, #4]
9000722c:	681b      	ldr	r3, [r3, #0]
9000722e:	f042 0201 	orr.w	r2, r2, #1
90007232:	601a      	str	r2, [r3, #0]
90007234:	e000      	b.n	90007238 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90007236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
90007238:	2300      	movs	r3, #0
}
9000723a:	4618      	mov	r0, r3
9000723c:	3714      	adds	r7, #20
9000723e:	46bd      	mov	sp, r7
90007240:	f85d 7b04 	ldr.w	r7, [sp], #4
90007244:	4770      	bx	lr
90007246:	bf00      	nop
90007248:	40010000 	.word	0x40010000
9000724c:	40000400 	.word	0x40000400
90007250:	40000800 	.word	0x40000800
90007254:	40000c00 	.word	0x40000c00
90007258:	40010400 	.word	0x40010400
9000725c:	40001800 	.word	0x40001800
90007260:	40014000 	.word	0x40014000
90007264:	00010007 	.word	0x00010007

90007268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
90007268:	b580      	push	{r7, lr}
9000726a:	b082      	sub	sp, #8
9000726c:	af00      	add	r7, sp, #0
9000726e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
90007270:	687b      	ldr	r3, [r7, #4]
90007272:	681b      	ldr	r3, [r3, #0]
90007274:	691b      	ldr	r3, [r3, #16]
90007276:	f003 0302 	and.w	r3, r3, #2
9000727a:	2b02      	cmp	r3, #2
9000727c:	d122      	bne.n	900072c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000727e:	687b      	ldr	r3, [r7, #4]
90007280:	681b      	ldr	r3, [r3, #0]
90007282:	68db      	ldr	r3, [r3, #12]
90007284:	f003 0302 	and.w	r3, r3, #2
90007288:	2b02      	cmp	r3, #2
9000728a:	d11b      	bne.n	900072c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000728c:	687b      	ldr	r3, [r7, #4]
9000728e:	681b      	ldr	r3, [r3, #0]
90007290:	f06f 0202 	mvn.w	r2, #2
90007294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
90007296:	687b      	ldr	r3, [r7, #4]
90007298:	2201      	movs	r2, #1
9000729a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000729c:	687b      	ldr	r3, [r7, #4]
9000729e:	681b      	ldr	r3, [r3, #0]
900072a0:	699b      	ldr	r3, [r3, #24]
900072a2:	f003 0303 	and.w	r3, r3, #3
900072a6:	2b00      	cmp	r3, #0
900072a8:	d003      	beq.n	900072b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
900072aa:	6878      	ldr	r0, [r7, #4]
900072ac:	f000 f905 	bl	900074ba <HAL_TIM_IC_CaptureCallback>
900072b0:	e005      	b.n	900072be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
900072b2:	6878      	ldr	r0, [r7, #4]
900072b4:	f000 f8f7 	bl	900074a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
900072b8:	6878      	ldr	r0, [r7, #4]
900072ba:	f000 f908 	bl	900074ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
900072be:	687b      	ldr	r3, [r7, #4]
900072c0:	2200      	movs	r2, #0
900072c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
900072c4:	687b      	ldr	r3, [r7, #4]
900072c6:	681b      	ldr	r3, [r3, #0]
900072c8:	691b      	ldr	r3, [r3, #16]
900072ca:	f003 0304 	and.w	r3, r3, #4
900072ce:	2b04      	cmp	r3, #4
900072d0:	d122      	bne.n	90007318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
900072d2:	687b      	ldr	r3, [r7, #4]
900072d4:	681b      	ldr	r3, [r3, #0]
900072d6:	68db      	ldr	r3, [r3, #12]
900072d8:	f003 0304 	and.w	r3, r3, #4
900072dc:	2b04      	cmp	r3, #4
900072de:	d11b      	bne.n	90007318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
900072e0:	687b      	ldr	r3, [r7, #4]
900072e2:	681b      	ldr	r3, [r3, #0]
900072e4:	f06f 0204 	mvn.w	r2, #4
900072e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
900072ea:	687b      	ldr	r3, [r7, #4]
900072ec:	2202      	movs	r2, #2
900072ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
900072f0:	687b      	ldr	r3, [r7, #4]
900072f2:	681b      	ldr	r3, [r3, #0]
900072f4:	699b      	ldr	r3, [r3, #24]
900072f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
900072fa:	2b00      	cmp	r3, #0
900072fc:	d003      	beq.n	90007306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
900072fe:	6878      	ldr	r0, [r7, #4]
90007300:	f000 f8db 	bl	900074ba <HAL_TIM_IC_CaptureCallback>
90007304:	e005      	b.n	90007312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
90007306:	6878      	ldr	r0, [r7, #4]
90007308:	f000 f8cd 	bl	900074a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000730c:	6878      	ldr	r0, [r7, #4]
9000730e:	f000 f8de 	bl	900074ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90007312:	687b      	ldr	r3, [r7, #4]
90007314:	2200      	movs	r2, #0
90007316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
90007318:	687b      	ldr	r3, [r7, #4]
9000731a:	681b      	ldr	r3, [r3, #0]
9000731c:	691b      	ldr	r3, [r3, #16]
9000731e:	f003 0308 	and.w	r3, r3, #8
90007322:	2b08      	cmp	r3, #8
90007324:	d122      	bne.n	9000736c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
90007326:	687b      	ldr	r3, [r7, #4]
90007328:	681b      	ldr	r3, [r3, #0]
9000732a:	68db      	ldr	r3, [r3, #12]
9000732c:	f003 0308 	and.w	r3, r3, #8
90007330:	2b08      	cmp	r3, #8
90007332:	d11b      	bne.n	9000736c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
90007334:	687b      	ldr	r3, [r7, #4]
90007336:	681b      	ldr	r3, [r3, #0]
90007338:	f06f 0208 	mvn.w	r2, #8
9000733c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000733e:	687b      	ldr	r3, [r7, #4]
90007340:	2204      	movs	r2, #4
90007342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
90007344:	687b      	ldr	r3, [r7, #4]
90007346:	681b      	ldr	r3, [r3, #0]
90007348:	69db      	ldr	r3, [r3, #28]
9000734a:	f003 0303 	and.w	r3, r3, #3
9000734e:	2b00      	cmp	r3, #0
90007350:	d003      	beq.n	9000735a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90007352:	6878      	ldr	r0, [r7, #4]
90007354:	f000 f8b1 	bl	900074ba <HAL_TIM_IC_CaptureCallback>
90007358:	e005      	b.n	90007366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000735a:	6878      	ldr	r0, [r7, #4]
9000735c:	f000 f8a3 	bl	900074a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90007360:	6878      	ldr	r0, [r7, #4]
90007362:	f000 f8b4 	bl	900074ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90007366:	687b      	ldr	r3, [r7, #4]
90007368:	2200      	movs	r2, #0
9000736a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000736c:	687b      	ldr	r3, [r7, #4]
9000736e:	681b      	ldr	r3, [r3, #0]
90007370:	691b      	ldr	r3, [r3, #16]
90007372:	f003 0310 	and.w	r3, r3, #16
90007376:	2b10      	cmp	r3, #16
90007378:	d122      	bne.n	900073c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000737a:	687b      	ldr	r3, [r7, #4]
9000737c:	681b      	ldr	r3, [r3, #0]
9000737e:	68db      	ldr	r3, [r3, #12]
90007380:	f003 0310 	and.w	r3, r3, #16
90007384:	2b10      	cmp	r3, #16
90007386:	d11b      	bne.n	900073c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
90007388:	687b      	ldr	r3, [r7, #4]
9000738a:	681b      	ldr	r3, [r3, #0]
9000738c:	f06f 0210 	mvn.w	r2, #16
90007390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
90007392:	687b      	ldr	r3, [r7, #4]
90007394:	2208      	movs	r2, #8
90007396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
90007398:	687b      	ldr	r3, [r7, #4]
9000739a:	681b      	ldr	r3, [r3, #0]
9000739c:	69db      	ldr	r3, [r3, #28]
9000739e:	f403 7340 	and.w	r3, r3, #768	; 0x300
900073a2:	2b00      	cmp	r3, #0
900073a4:	d003      	beq.n	900073ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
900073a6:	6878      	ldr	r0, [r7, #4]
900073a8:	f000 f887 	bl	900074ba <HAL_TIM_IC_CaptureCallback>
900073ac:	e005      	b.n	900073ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
900073ae:	6878      	ldr	r0, [r7, #4]
900073b0:	f000 f879 	bl	900074a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
900073b4:	6878      	ldr	r0, [r7, #4]
900073b6:	f000 f88a 	bl	900074ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
900073ba:	687b      	ldr	r3, [r7, #4]
900073bc:	2200      	movs	r2, #0
900073be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
900073c0:	687b      	ldr	r3, [r7, #4]
900073c2:	681b      	ldr	r3, [r3, #0]
900073c4:	691b      	ldr	r3, [r3, #16]
900073c6:	f003 0301 	and.w	r3, r3, #1
900073ca:	2b01      	cmp	r3, #1
900073cc:	d10e      	bne.n	900073ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
900073ce:	687b      	ldr	r3, [r7, #4]
900073d0:	681b      	ldr	r3, [r3, #0]
900073d2:	68db      	ldr	r3, [r3, #12]
900073d4:	f003 0301 	and.w	r3, r3, #1
900073d8:	2b01      	cmp	r3, #1
900073da:	d107      	bne.n	900073ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
900073dc:	687b      	ldr	r3, [r7, #4]
900073de:	681b      	ldr	r3, [r3, #0]
900073e0:	f06f 0201 	mvn.w	r2, #1
900073e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
900073e6:	6878      	ldr	r0, [r7, #4]
900073e8:	f7f9 fe40 	bl	9000106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
900073ec:	687b      	ldr	r3, [r7, #4]
900073ee:	681b      	ldr	r3, [r3, #0]
900073f0:	691b      	ldr	r3, [r3, #16]
900073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
900073f6:	2b80      	cmp	r3, #128	; 0x80
900073f8:	d10e      	bne.n	90007418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
900073fa:	687b      	ldr	r3, [r7, #4]
900073fc:	681b      	ldr	r3, [r3, #0]
900073fe:	68db      	ldr	r3, [r3, #12]
90007400:	f003 0380 	and.w	r3, r3, #128	; 0x80
90007404:	2b80      	cmp	r3, #128	; 0x80
90007406:	d107      	bne.n	90007418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
90007408:	687b      	ldr	r3, [r7, #4]
9000740a:	681b      	ldr	r3, [r3, #0]
9000740c:	f06f 0280 	mvn.w	r2, #128	; 0x80
90007410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
90007412:	6878      	ldr	r0, [r7, #4]
90007414:	f000 f914 	bl	90007640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
90007418:	687b      	ldr	r3, [r7, #4]
9000741a:	681b      	ldr	r3, [r3, #0]
9000741c:	691b      	ldr	r3, [r3, #16]
9000741e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90007422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90007426:	d10e      	bne.n	90007446 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
90007428:	687b      	ldr	r3, [r7, #4]
9000742a:	681b      	ldr	r3, [r3, #0]
9000742c:	68db      	ldr	r3, [r3, #12]
9000742e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90007432:	2b80      	cmp	r3, #128	; 0x80
90007434:	d107      	bne.n	90007446 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
90007436:	687b      	ldr	r3, [r7, #4]
90007438:	681b      	ldr	r3, [r3, #0]
9000743a:	f46f 7280 	mvn.w	r2, #256	; 0x100
9000743e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
90007440:	6878      	ldr	r0, [r7, #4]
90007442:	f000 f907 	bl	90007654 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
90007446:	687b      	ldr	r3, [r7, #4]
90007448:	681b      	ldr	r3, [r3, #0]
9000744a:	691b      	ldr	r3, [r3, #16]
9000744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90007450:	2b40      	cmp	r3, #64	; 0x40
90007452:	d10e      	bne.n	90007472 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
90007454:	687b      	ldr	r3, [r7, #4]
90007456:	681b      	ldr	r3, [r3, #0]
90007458:	68db      	ldr	r3, [r3, #12]
9000745a:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000745e:	2b40      	cmp	r3, #64	; 0x40
90007460:	d107      	bne.n	90007472 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
90007462:	687b      	ldr	r3, [r7, #4]
90007464:	681b      	ldr	r3, [r3, #0]
90007466:	f06f 0240 	mvn.w	r2, #64	; 0x40
9000746a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
9000746c:	6878      	ldr	r0, [r7, #4]
9000746e:	f000 f838 	bl	900074e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
90007472:	687b      	ldr	r3, [r7, #4]
90007474:	681b      	ldr	r3, [r3, #0]
90007476:	691b      	ldr	r3, [r3, #16]
90007478:	f003 0320 	and.w	r3, r3, #32
9000747c:	2b20      	cmp	r3, #32
9000747e:	d10e      	bne.n	9000749e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
90007480:	687b      	ldr	r3, [r7, #4]
90007482:	681b      	ldr	r3, [r3, #0]
90007484:	68db      	ldr	r3, [r3, #12]
90007486:	f003 0320 	and.w	r3, r3, #32
9000748a:	2b20      	cmp	r3, #32
9000748c:	d107      	bne.n	9000749e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000748e:	687b      	ldr	r3, [r7, #4]
90007490:	681b      	ldr	r3, [r3, #0]
90007492:	f06f 0220 	mvn.w	r2, #32
90007496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
90007498:	6878      	ldr	r0, [r7, #4]
9000749a:	f000 f8c7 	bl	9000762c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
9000749e:	bf00      	nop
900074a0:	3708      	adds	r7, #8
900074a2:	46bd      	mov	sp, r7
900074a4:	bd80      	pop	{r7, pc}

900074a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
900074a6:	b480      	push	{r7}
900074a8:	b083      	sub	sp, #12
900074aa:	af00      	add	r7, sp, #0
900074ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
900074ae:	bf00      	nop
900074b0:	370c      	adds	r7, #12
900074b2:	46bd      	mov	sp, r7
900074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900074b8:	4770      	bx	lr

900074ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
900074ba:	b480      	push	{r7}
900074bc:	b083      	sub	sp, #12
900074be:	af00      	add	r7, sp, #0
900074c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
900074c2:	bf00      	nop
900074c4:	370c      	adds	r7, #12
900074c6:	46bd      	mov	sp, r7
900074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900074cc:	4770      	bx	lr

900074ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
900074ce:	b480      	push	{r7}
900074d0:	b083      	sub	sp, #12
900074d2:	af00      	add	r7, sp, #0
900074d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
900074d6:	bf00      	nop
900074d8:	370c      	adds	r7, #12
900074da:	46bd      	mov	sp, r7
900074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900074e0:	4770      	bx	lr

900074e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
900074e2:	b480      	push	{r7}
900074e4:	b083      	sub	sp, #12
900074e6:	af00      	add	r7, sp, #0
900074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
900074ea:	bf00      	nop
900074ec:	370c      	adds	r7, #12
900074ee:	46bd      	mov	sp, r7
900074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900074f4:	4770      	bx	lr
	...

900074f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
900074f8:	b480      	push	{r7}
900074fa:	b085      	sub	sp, #20
900074fc:	af00      	add	r7, sp, #0
900074fe:	6078      	str	r0, [r7, #4]
90007500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90007502:	687b      	ldr	r3, [r7, #4]
90007504:	681b      	ldr	r3, [r3, #0]
90007506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90007508:	687b      	ldr	r3, [r7, #4]
9000750a:	4a40      	ldr	r2, [pc, #256]	; (9000760c <TIM_Base_SetConfig+0x114>)
9000750c:	4293      	cmp	r3, r2
9000750e:	d013      	beq.n	90007538 <TIM_Base_SetConfig+0x40>
90007510:	687b      	ldr	r3, [r7, #4]
90007512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90007516:	d00f      	beq.n	90007538 <TIM_Base_SetConfig+0x40>
90007518:	687b      	ldr	r3, [r7, #4]
9000751a:	4a3d      	ldr	r2, [pc, #244]	; (90007610 <TIM_Base_SetConfig+0x118>)
9000751c:	4293      	cmp	r3, r2
9000751e:	d00b      	beq.n	90007538 <TIM_Base_SetConfig+0x40>
90007520:	687b      	ldr	r3, [r7, #4]
90007522:	4a3c      	ldr	r2, [pc, #240]	; (90007614 <TIM_Base_SetConfig+0x11c>)
90007524:	4293      	cmp	r3, r2
90007526:	d007      	beq.n	90007538 <TIM_Base_SetConfig+0x40>
90007528:	687b      	ldr	r3, [r7, #4]
9000752a:	4a3b      	ldr	r2, [pc, #236]	; (90007618 <TIM_Base_SetConfig+0x120>)
9000752c:	4293      	cmp	r3, r2
9000752e:	d003      	beq.n	90007538 <TIM_Base_SetConfig+0x40>
90007530:	687b      	ldr	r3, [r7, #4]
90007532:	4a3a      	ldr	r2, [pc, #232]	; (9000761c <TIM_Base_SetConfig+0x124>)
90007534:	4293      	cmp	r3, r2
90007536:	d108      	bne.n	9000754a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90007538:	68fb      	ldr	r3, [r7, #12]
9000753a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000753e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90007540:	683b      	ldr	r3, [r7, #0]
90007542:	685b      	ldr	r3, [r3, #4]
90007544:	68fa      	ldr	r2, [r7, #12]
90007546:	4313      	orrs	r3, r2
90007548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000754a:	687b      	ldr	r3, [r7, #4]
9000754c:	4a2f      	ldr	r2, [pc, #188]	; (9000760c <TIM_Base_SetConfig+0x114>)
9000754e:	4293      	cmp	r3, r2
90007550:	d01f      	beq.n	90007592 <TIM_Base_SetConfig+0x9a>
90007552:	687b      	ldr	r3, [r7, #4]
90007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90007558:	d01b      	beq.n	90007592 <TIM_Base_SetConfig+0x9a>
9000755a:	687b      	ldr	r3, [r7, #4]
9000755c:	4a2c      	ldr	r2, [pc, #176]	; (90007610 <TIM_Base_SetConfig+0x118>)
9000755e:	4293      	cmp	r3, r2
90007560:	d017      	beq.n	90007592 <TIM_Base_SetConfig+0x9a>
90007562:	687b      	ldr	r3, [r7, #4]
90007564:	4a2b      	ldr	r2, [pc, #172]	; (90007614 <TIM_Base_SetConfig+0x11c>)
90007566:	4293      	cmp	r3, r2
90007568:	d013      	beq.n	90007592 <TIM_Base_SetConfig+0x9a>
9000756a:	687b      	ldr	r3, [r7, #4]
9000756c:	4a2a      	ldr	r2, [pc, #168]	; (90007618 <TIM_Base_SetConfig+0x120>)
9000756e:	4293      	cmp	r3, r2
90007570:	d00f      	beq.n	90007592 <TIM_Base_SetConfig+0x9a>
90007572:	687b      	ldr	r3, [r7, #4]
90007574:	4a29      	ldr	r2, [pc, #164]	; (9000761c <TIM_Base_SetConfig+0x124>)
90007576:	4293      	cmp	r3, r2
90007578:	d00b      	beq.n	90007592 <TIM_Base_SetConfig+0x9a>
9000757a:	687b      	ldr	r3, [r7, #4]
9000757c:	4a28      	ldr	r2, [pc, #160]	; (90007620 <TIM_Base_SetConfig+0x128>)
9000757e:	4293      	cmp	r3, r2
90007580:	d007      	beq.n	90007592 <TIM_Base_SetConfig+0x9a>
90007582:	687b      	ldr	r3, [r7, #4]
90007584:	4a27      	ldr	r2, [pc, #156]	; (90007624 <TIM_Base_SetConfig+0x12c>)
90007586:	4293      	cmp	r3, r2
90007588:	d003      	beq.n	90007592 <TIM_Base_SetConfig+0x9a>
9000758a:	687b      	ldr	r3, [r7, #4]
9000758c:	4a26      	ldr	r2, [pc, #152]	; (90007628 <TIM_Base_SetConfig+0x130>)
9000758e:	4293      	cmp	r3, r2
90007590:	d108      	bne.n	900075a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90007592:	68fb      	ldr	r3, [r7, #12]
90007594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90007598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000759a:	683b      	ldr	r3, [r7, #0]
9000759c:	68db      	ldr	r3, [r3, #12]
9000759e:	68fa      	ldr	r2, [r7, #12]
900075a0:	4313      	orrs	r3, r2
900075a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
900075a4:	68fb      	ldr	r3, [r7, #12]
900075a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
900075aa:	683b      	ldr	r3, [r7, #0]
900075ac:	695b      	ldr	r3, [r3, #20]
900075ae:	4313      	orrs	r3, r2
900075b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
900075b2:	687b      	ldr	r3, [r7, #4]
900075b4:	68fa      	ldr	r2, [r7, #12]
900075b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
900075b8:	683b      	ldr	r3, [r7, #0]
900075ba:	689a      	ldr	r2, [r3, #8]
900075bc:	687b      	ldr	r3, [r7, #4]
900075be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
900075c0:	683b      	ldr	r3, [r7, #0]
900075c2:	681a      	ldr	r2, [r3, #0]
900075c4:	687b      	ldr	r3, [r7, #4]
900075c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
900075c8:	687b      	ldr	r3, [r7, #4]
900075ca:	4a10      	ldr	r2, [pc, #64]	; (9000760c <TIM_Base_SetConfig+0x114>)
900075cc:	4293      	cmp	r3, r2
900075ce:	d00f      	beq.n	900075f0 <TIM_Base_SetConfig+0xf8>
900075d0:	687b      	ldr	r3, [r7, #4]
900075d2:	4a12      	ldr	r2, [pc, #72]	; (9000761c <TIM_Base_SetConfig+0x124>)
900075d4:	4293      	cmp	r3, r2
900075d6:	d00b      	beq.n	900075f0 <TIM_Base_SetConfig+0xf8>
900075d8:	687b      	ldr	r3, [r7, #4]
900075da:	4a11      	ldr	r2, [pc, #68]	; (90007620 <TIM_Base_SetConfig+0x128>)
900075dc:	4293      	cmp	r3, r2
900075de:	d007      	beq.n	900075f0 <TIM_Base_SetConfig+0xf8>
900075e0:	687b      	ldr	r3, [r7, #4]
900075e2:	4a10      	ldr	r2, [pc, #64]	; (90007624 <TIM_Base_SetConfig+0x12c>)
900075e4:	4293      	cmp	r3, r2
900075e6:	d003      	beq.n	900075f0 <TIM_Base_SetConfig+0xf8>
900075e8:	687b      	ldr	r3, [r7, #4]
900075ea:	4a0f      	ldr	r2, [pc, #60]	; (90007628 <TIM_Base_SetConfig+0x130>)
900075ec:	4293      	cmp	r3, r2
900075ee:	d103      	bne.n	900075f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
900075f0:	683b      	ldr	r3, [r7, #0]
900075f2:	691a      	ldr	r2, [r3, #16]
900075f4:	687b      	ldr	r3, [r7, #4]
900075f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
900075f8:	687b      	ldr	r3, [r7, #4]
900075fa:	2201      	movs	r2, #1
900075fc:	615a      	str	r2, [r3, #20]
}
900075fe:	bf00      	nop
90007600:	3714      	adds	r7, #20
90007602:	46bd      	mov	sp, r7
90007604:	f85d 7b04 	ldr.w	r7, [sp], #4
90007608:	4770      	bx	lr
9000760a:	bf00      	nop
9000760c:	40010000 	.word	0x40010000
90007610:	40000400 	.word	0x40000400
90007614:	40000800 	.word	0x40000800
90007618:	40000c00 	.word	0x40000c00
9000761c:	40010400 	.word	0x40010400
90007620:	40014000 	.word	0x40014000
90007624:	40014400 	.word	0x40014400
90007628:	40014800 	.word	0x40014800

9000762c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
9000762c:	b480      	push	{r7}
9000762e:	b083      	sub	sp, #12
90007630:	af00      	add	r7, sp, #0
90007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
90007634:	bf00      	nop
90007636:	370c      	adds	r7, #12
90007638:	46bd      	mov	sp, r7
9000763a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000763e:	4770      	bx	lr

90007640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
90007640:	b480      	push	{r7}
90007642:	b083      	sub	sp, #12
90007644:	af00      	add	r7, sp, #0
90007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
90007648:	bf00      	nop
9000764a:	370c      	adds	r7, #12
9000764c:	46bd      	mov	sp, r7
9000764e:	f85d 7b04 	ldr.w	r7, [sp], #4
90007652:	4770      	bx	lr

90007654 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
90007654:	b480      	push	{r7}
90007656:	b083      	sub	sp, #12
90007658:	af00      	add	r7, sp, #0
9000765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
9000765c:	bf00      	nop
9000765e:	370c      	adds	r7, #12
90007660:	46bd      	mov	sp, r7
90007662:	f85d 7b04 	ldr.w	r7, [sp], #4
90007666:	4770      	bx	lr

90007668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90007668:	b580      	push	{r7, lr}
9000766a:	b082      	sub	sp, #8
9000766c:	af00      	add	r7, sp, #0
9000766e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90007670:	687b      	ldr	r3, [r7, #4]
90007672:	2b00      	cmp	r3, #0
90007674:	d101      	bne.n	9000767a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90007676:	2301      	movs	r3, #1
90007678:	e042      	b.n	90007700 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
9000767a:	687b      	ldr	r3, [r7, #4]
9000767c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90007680:	2b00      	cmp	r3, #0
90007682:	d106      	bne.n	90007692 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90007684:	687b      	ldr	r3, [r7, #4]
90007686:	2200      	movs	r2, #0
90007688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
9000768c:	6878      	ldr	r0, [r7, #4]
9000768e:	f7fa f9f3 	bl	90001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90007692:	687b      	ldr	r3, [r7, #4]
90007694:	2224      	movs	r2, #36	; 0x24
90007696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
9000769a:	687b      	ldr	r3, [r7, #4]
9000769c:	681b      	ldr	r3, [r3, #0]
9000769e:	681a      	ldr	r2, [r3, #0]
900076a0:	687b      	ldr	r3, [r7, #4]
900076a2:	681b      	ldr	r3, [r3, #0]
900076a4:	f022 0201 	bic.w	r2, r2, #1
900076a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
900076aa:	6878      	ldr	r0, [r7, #4]
900076ac:	f000 f82c 	bl	90007708 <UART_SetConfig>
900076b0:	4603      	mov	r3, r0
900076b2:	2b01      	cmp	r3, #1
900076b4:	d101      	bne.n	900076ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
900076b6:	2301      	movs	r3, #1
900076b8:	e022      	b.n	90007700 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
900076ba:	687b      	ldr	r3, [r7, #4]
900076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900076be:	2b00      	cmp	r3, #0
900076c0:	d002      	beq.n	900076c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
900076c2:	6878      	ldr	r0, [r7, #4]
900076c4:	f000 fd88 	bl	900081d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
900076c8:	687b      	ldr	r3, [r7, #4]
900076ca:	681b      	ldr	r3, [r3, #0]
900076cc:	685a      	ldr	r2, [r3, #4]
900076ce:	687b      	ldr	r3, [r7, #4]
900076d0:	681b      	ldr	r3, [r3, #0]
900076d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
900076d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
900076d8:	687b      	ldr	r3, [r7, #4]
900076da:	681b      	ldr	r3, [r3, #0]
900076dc:	689a      	ldr	r2, [r3, #8]
900076de:	687b      	ldr	r3, [r7, #4]
900076e0:	681b      	ldr	r3, [r3, #0]
900076e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
900076e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
900076e8:	687b      	ldr	r3, [r7, #4]
900076ea:	681b      	ldr	r3, [r3, #0]
900076ec:	681a      	ldr	r2, [r3, #0]
900076ee:	687b      	ldr	r3, [r7, #4]
900076f0:	681b      	ldr	r3, [r3, #0]
900076f2:	f042 0201 	orr.w	r2, r2, #1
900076f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
900076f8:	6878      	ldr	r0, [r7, #4]
900076fa:	f000 fe0f 	bl	9000831c <UART_CheckIdleState>
900076fe:	4603      	mov	r3, r0
}
90007700:	4618      	mov	r0, r3
90007702:	3708      	adds	r7, #8
90007704:	46bd      	mov	sp, r7
90007706:	bd80      	pop	{r7, pc}

90007708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90007708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
9000770c:	b092      	sub	sp, #72	; 0x48
9000770e:	af00      	add	r7, sp, #0
90007710:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90007712:	2300      	movs	r3, #0
90007714:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90007718:	697b      	ldr	r3, [r7, #20]
9000771a:	689a      	ldr	r2, [r3, #8]
9000771c:	697b      	ldr	r3, [r7, #20]
9000771e:	691b      	ldr	r3, [r3, #16]
90007720:	431a      	orrs	r2, r3
90007722:	697b      	ldr	r3, [r7, #20]
90007724:	695b      	ldr	r3, [r3, #20]
90007726:	431a      	orrs	r2, r3
90007728:	697b      	ldr	r3, [r7, #20]
9000772a:	69db      	ldr	r3, [r3, #28]
9000772c:	4313      	orrs	r3, r2
9000772e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90007730:	697b      	ldr	r3, [r7, #20]
90007732:	681b      	ldr	r3, [r3, #0]
90007734:	681a      	ldr	r2, [r3, #0]
90007736:	4bbe      	ldr	r3, [pc, #760]	; (90007a30 <UART_SetConfig+0x328>)
90007738:	4013      	ands	r3, r2
9000773a:	697a      	ldr	r2, [r7, #20]
9000773c:	6812      	ldr	r2, [r2, #0]
9000773e:	6c79      	ldr	r1, [r7, #68]	; 0x44
90007740:	430b      	orrs	r3, r1
90007742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90007744:	697b      	ldr	r3, [r7, #20]
90007746:	681b      	ldr	r3, [r3, #0]
90007748:	685b      	ldr	r3, [r3, #4]
9000774a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
9000774e:	697b      	ldr	r3, [r7, #20]
90007750:	68da      	ldr	r2, [r3, #12]
90007752:	697b      	ldr	r3, [r7, #20]
90007754:	681b      	ldr	r3, [r3, #0]
90007756:	430a      	orrs	r2, r1
90007758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000775a:	697b      	ldr	r3, [r7, #20]
9000775c:	699b      	ldr	r3, [r3, #24]
9000775e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90007760:	697b      	ldr	r3, [r7, #20]
90007762:	681b      	ldr	r3, [r3, #0]
90007764:	4ab3      	ldr	r2, [pc, #716]	; (90007a34 <UART_SetConfig+0x32c>)
90007766:	4293      	cmp	r3, r2
90007768:	d004      	beq.n	90007774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
9000776a:	697b      	ldr	r3, [r7, #20]
9000776c:	6a1b      	ldr	r3, [r3, #32]
9000776e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90007770:	4313      	orrs	r3, r2
90007772:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90007774:	697b      	ldr	r3, [r7, #20]
90007776:	681b      	ldr	r3, [r3, #0]
90007778:	689a      	ldr	r2, [r3, #8]
9000777a:	4baf      	ldr	r3, [pc, #700]	; (90007a38 <UART_SetConfig+0x330>)
9000777c:	4013      	ands	r3, r2
9000777e:	697a      	ldr	r2, [r7, #20]
90007780:	6812      	ldr	r2, [r2, #0]
90007782:	6c79      	ldr	r1, [r7, #68]	; 0x44
90007784:	430b      	orrs	r3, r1
90007786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90007788:	697b      	ldr	r3, [r7, #20]
9000778a:	681b      	ldr	r3, [r3, #0]
9000778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000778e:	f023 010f 	bic.w	r1, r3, #15
90007792:	697b      	ldr	r3, [r7, #20]
90007794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007796:	697b      	ldr	r3, [r7, #20]
90007798:	681b      	ldr	r3, [r3, #0]
9000779a:	430a      	orrs	r2, r1
9000779c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000779e:	697b      	ldr	r3, [r7, #20]
900077a0:	681b      	ldr	r3, [r3, #0]
900077a2:	4aa6      	ldr	r2, [pc, #664]	; (90007a3c <UART_SetConfig+0x334>)
900077a4:	4293      	cmp	r3, r2
900077a6:	d177      	bne.n	90007898 <UART_SetConfig+0x190>
900077a8:	4ba5      	ldr	r3, [pc, #660]	; (90007a40 <UART_SetConfig+0x338>)
900077aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900077ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
900077b0:	2b28      	cmp	r3, #40	; 0x28
900077b2:	d86d      	bhi.n	90007890 <UART_SetConfig+0x188>
900077b4:	a201      	add	r2, pc, #4	; (adr r2, 900077bc <UART_SetConfig+0xb4>)
900077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900077ba:	bf00      	nop
900077bc:	90007861 	.word	0x90007861
900077c0:	90007891 	.word	0x90007891
900077c4:	90007891 	.word	0x90007891
900077c8:	90007891 	.word	0x90007891
900077cc:	90007891 	.word	0x90007891
900077d0:	90007891 	.word	0x90007891
900077d4:	90007891 	.word	0x90007891
900077d8:	90007891 	.word	0x90007891
900077dc:	90007869 	.word	0x90007869
900077e0:	90007891 	.word	0x90007891
900077e4:	90007891 	.word	0x90007891
900077e8:	90007891 	.word	0x90007891
900077ec:	90007891 	.word	0x90007891
900077f0:	90007891 	.word	0x90007891
900077f4:	90007891 	.word	0x90007891
900077f8:	90007891 	.word	0x90007891
900077fc:	90007871 	.word	0x90007871
90007800:	90007891 	.word	0x90007891
90007804:	90007891 	.word	0x90007891
90007808:	90007891 	.word	0x90007891
9000780c:	90007891 	.word	0x90007891
90007810:	90007891 	.word	0x90007891
90007814:	90007891 	.word	0x90007891
90007818:	90007891 	.word	0x90007891
9000781c:	90007879 	.word	0x90007879
90007820:	90007891 	.word	0x90007891
90007824:	90007891 	.word	0x90007891
90007828:	90007891 	.word	0x90007891
9000782c:	90007891 	.word	0x90007891
90007830:	90007891 	.word	0x90007891
90007834:	90007891 	.word	0x90007891
90007838:	90007891 	.word	0x90007891
9000783c:	90007881 	.word	0x90007881
90007840:	90007891 	.word	0x90007891
90007844:	90007891 	.word	0x90007891
90007848:	90007891 	.word	0x90007891
9000784c:	90007891 	.word	0x90007891
90007850:	90007891 	.word	0x90007891
90007854:	90007891 	.word	0x90007891
90007858:	90007891 	.word	0x90007891
9000785c:	90007889 	.word	0x90007889
90007860:	2301      	movs	r3, #1
90007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007866:	e222      	b.n	90007cae <UART_SetConfig+0x5a6>
90007868:	2304      	movs	r3, #4
9000786a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000786e:	e21e      	b.n	90007cae <UART_SetConfig+0x5a6>
90007870:	2308      	movs	r3, #8
90007872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007876:	e21a      	b.n	90007cae <UART_SetConfig+0x5a6>
90007878:	2310      	movs	r3, #16
9000787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000787e:	e216      	b.n	90007cae <UART_SetConfig+0x5a6>
90007880:	2320      	movs	r3, #32
90007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007886:	e212      	b.n	90007cae <UART_SetConfig+0x5a6>
90007888:	2340      	movs	r3, #64	; 0x40
9000788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000788e:	e20e      	b.n	90007cae <UART_SetConfig+0x5a6>
90007890:	2380      	movs	r3, #128	; 0x80
90007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007896:	e20a      	b.n	90007cae <UART_SetConfig+0x5a6>
90007898:	697b      	ldr	r3, [r7, #20]
9000789a:	681b      	ldr	r3, [r3, #0]
9000789c:	4a69      	ldr	r2, [pc, #420]	; (90007a44 <UART_SetConfig+0x33c>)
9000789e:	4293      	cmp	r3, r2
900078a0:	d130      	bne.n	90007904 <UART_SetConfig+0x1fc>
900078a2:	4b67      	ldr	r3, [pc, #412]	; (90007a40 <UART_SetConfig+0x338>)
900078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900078a6:	f003 0307 	and.w	r3, r3, #7
900078aa:	2b05      	cmp	r3, #5
900078ac:	d826      	bhi.n	900078fc <UART_SetConfig+0x1f4>
900078ae:	a201      	add	r2, pc, #4	; (adr r2, 900078b4 <UART_SetConfig+0x1ac>)
900078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900078b4:	900078cd 	.word	0x900078cd
900078b8:	900078d5 	.word	0x900078d5
900078bc:	900078dd 	.word	0x900078dd
900078c0:	900078e5 	.word	0x900078e5
900078c4:	900078ed 	.word	0x900078ed
900078c8:	900078f5 	.word	0x900078f5
900078cc:	2300      	movs	r3, #0
900078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900078d2:	e1ec      	b.n	90007cae <UART_SetConfig+0x5a6>
900078d4:	2304      	movs	r3, #4
900078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900078da:	e1e8      	b.n	90007cae <UART_SetConfig+0x5a6>
900078dc:	2308      	movs	r3, #8
900078de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900078e2:	e1e4      	b.n	90007cae <UART_SetConfig+0x5a6>
900078e4:	2310      	movs	r3, #16
900078e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900078ea:	e1e0      	b.n	90007cae <UART_SetConfig+0x5a6>
900078ec:	2320      	movs	r3, #32
900078ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900078f2:	e1dc      	b.n	90007cae <UART_SetConfig+0x5a6>
900078f4:	2340      	movs	r3, #64	; 0x40
900078f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900078fa:	e1d8      	b.n	90007cae <UART_SetConfig+0x5a6>
900078fc:	2380      	movs	r3, #128	; 0x80
900078fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007902:	e1d4      	b.n	90007cae <UART_SetConfig+0x5a6>
90007904:	697b      	ldr	r3, [r7, #20]
90007906:	681b      	ldr	r3, [r3, #0]
90007908:	4a4f      	ldr	r2, [pc, #316]	; (90007a48 <UART_SetConfig+0x340>)
9000790a:	4293      	cmp	r3, r2
9000790c:	d130      	bne.n	90007970 <UART_SetConfig+0x268>
9000790e:	4b4c      	ldr	r3, [pc, #304]	; (90007a40 <UART_SetConfig+0x338>)
90007910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007912:	f003 0307 	and.w	r3, r3, #7
90007916:	2b05      	cmp	r3, #5
90007918:	d826      	bhi.n	90007968 <UART_SetConfig+0x260>
9000791a:	a201      	add	r2, pc, #4	; (adr r2, 90007920 <UART_SetConfig+0x218>)
9000791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007920:	90007939 	.word	0x90007939
90007924:	90007941 	.word	0x90007941
90007928:	90007949 	.word	0x90007949
9000792c:	90007951 	.word	0x90007951
90007930:	90007959 	.word	0x90007959
90007934:	90007961 	.word	0x90007961
90007938:	2300      	movs	r3, #0
9000793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000793e:	e1b6      	b.n	90007cae <UART_SetConfig+0x5a6>
90007940:	2304      	movs	r3, #4
90007942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007946:	e1b2      	b.n	90007cae <UART_SetConfig+0x5a6>
90007948:	2308      	movs	r3, #8
9000794a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000794e:	e1ae      	b.n	90007cae <UART_SetConfig+0x5a6>
90007950:	2310      	movs	r3, #16
90007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007956:	e1aa      	b.n	90007cae <UART_SetConfig+0x5a6>
90007958:	2320      	movs	r3, #32
9000795a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000795e:	e1a6      	b.n	90007cae <UART_SetConfig+0x5a6>
90007960:	2340      	movs	r3, #64	; 0x40
90007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007966:	e1a2      	b.n	90007cae <UART_SetConfig+0x5a6>
90007968:	2380      	movs	r3, #128	; 0x80
9000796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000796e:	e19e      	b.n	90007cae <UART_SetConfig+0x5a6>
90007970:	697b      	ldr	r3, [r7, #20]
90007972:	681b      	ldr	r3, [r3, #0]
90007974:	4a35      	ldr	r2, [pc, #212]	; (90007a4c <UART_SetConfig+0x344>)
90007976:	4293      	cmp	r3, r2
90007978:	d130      	bne.n	900079dc <UART_SetConfig+0x2d4>
9000797a:	4b31      	ldr	r3, [pc, #196]	; (90007a40 <UART_SetConfig+0x338>)
9000797c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000797e:	f003 0307 	and.w	r3, r3, #7
90007982:	2b05      	cmp	r3, #5
90007984:	d826      	bhi.n	900079d4 <UART_SetConfig+0x2cc>
90007986:	a201      	add	r2, pc, #4	; (adr r2, 9000798c <UART_SetConfig+0x284>)
90007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000798c:	900079a5 	.word	0x900079a5
90007990:	900079ad 	.word	0x900079ad
90007994:	900079b5 	.word	0x900079b5
90007998:	900079bd 	.word	0x900079bd
9000799c:	900079c5 	.word	0x900079c5
900079a0:	900079cd 	.word	0x900079cd
900079a4:	2300      	movs	r3, #0
900079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079aa:	e180      	b.n	90007cae <UART_SetConfig+0x5a6>
900079ac:	2304      	movs	r3, #4
900079ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079b2:	e17c      	b.n	90007cae <UART_SetConfig+0x5a6>
900079b4:	2308      	movs	r3, #8
900079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079ba:	e178      	b.n	90007cae <UART_SetConfig+0x5a6>
900079bc:	2310      	movs	r3, #16
900079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079c2:	e174      	b.n	90007cae <UART_SetConfig+0x5a6>
900079c4:	2320      	movs	r3, #32
900079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079ca:	e170      	b.n	90007cae <UART_SetConfig+0x5a6>
900079cc:	2340      	movs	r3, #64	; 0x40
900079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079d2:	e16c      	b.n	90007cae <UART_SetConfig+0x5a6>
900079d4:	2380      	movs	r3, #128	; 0x80
900079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900079da:	e168      	b.n	90007cae <UART_SetConfig+0x5a6>
900079dc:	697b      	ldr	r3, [r7, #20]
900079de:	681b      	ldr	r3, [r3, #0]
900079e0:	4a1b      	ldr	r2, [pc, #108]	; (90007a50 <UART_SetConfig+0x348>)
900079e2:	4293      	cmp	r3, r2
900079e4:	d142      	bne.n	90007a6c <UART_SetConfig+0x364>
900079e6:	4b16      	ldr	r3, [pc, #88]	; (90007a40 <UART_SetConfig+0x338>)
900079e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900079ea:	f003 0307 	and.w	r3, r3, #7
900079ee:	2b05      	cmp	r3, #5
900079f0:	d838      	bhi.n	90007a64 <UART_SetConfig+0x35c>
900079f2:	a201      	add	r2, pc, #4	; (adr r2, 900079f8 <UART_SetConfig+0x2f0>)
900079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900079f8:	90007a11 	.word	0x90007a11
900079fc:	90007a19 	.word	0x90007a19
90007a00:	90007a21 	.word	0x90007a21
90007a04:	90007a29 	.word	0x90007a29
90007a08:	90007a55 	.word	0x90007a55
90007a0c:	90007a5d 	.word	0x90007a5d
90007a10:	2300      	movs	r3, #0
90007a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a16:	e14a      	b.n	90007cae <UART_SetConfig+0x5a6>
90007a18:	2304      	movs	r3, #4
90007a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a1e:	e146      	b.n	90007cae <UART_SetConfig+0x5a6>
90007a20:	2308      	movs	r3, #8
90007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a26:	e142      	b.n	90007cae <UART_SetConfig+0x5a6>
90007a28:	2310      	movs	r3, #16
90007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a2e:	e13e      	b.n	90007cae <UART_SetConfig+0x5a6>
90007a30:	cfff69f3 	.word	0xcfff69f3
90007a34:	58000c00 	.word	0x58000c00
90007a38:	11fff4ff 	.word	0x11fff4ff
90007a3c:	40011000 	.word	0x40011000
90007a40:	58024400 	.word	0x58024400
90007a44:	40004400 	.word	0x40004400
90007a48:	40004800 	.word	0x40004800
90007a4c:	40004c00 	.word	0x40004c00
90007a50:	40005000 	.word	0x40005000
90007a54:	2320      	movs	r3, #32
90007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a5a:	e128      	b.n	90007cae <UART_SetConfig+0x5a6>
90007a5c:	2340      	movs	r3, #64	; 0x40
90007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a62:	e124      	b.n	90007cae <UART_SetConfig+0x5a6>
90007a64:	2380      	movs	r3, #128	; 0x80
90007a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007a6a:	e120      	b.n	90007cae <UART_SetConfig+0x5a6>
90007a6c:	697b      	ldr	r3, [r7, #20]
90007a6e:	681b      	ldr	r3, [r3, #0]
90007a70:	4acb      	ldr	r2, [pc, #812]	; (90007da0 <UART_SetConfig+0x698>)
90007a72:	4293      	cmp	r3, r2
90007a74:	d176      	bne.n	90007b64 <UART_SetConfig+0x45c>
90007a76:	4bcb      	ldr	r3, [pc, #812]	; (90007da4 <UART_SetConfig+0x69c>)
90007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
90007a7e:	2b28      	cmp	r3, #40	; 0x28
90007a80:	d86c      	bhi.n	90007b5c <UART_SetConfig+0x454>
90007a82:	a201      	add	r2, pc, #4	; (adr r2, 90007a88 <UART_SetConfig+0x380>)
90007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007a88:	90007b2d 	.word	0x90007b2d
90007a8c:	90007b5d 	.word	0x90007b5d
90007a90:	90007b5d 	.word	0x90007b5d
90007a94:	90007b5d 	.word	0x90007b5d
90007a98:	90007b5d 	.word	0x90007b5d
90007a9c:	90007b5d 	.word	0x90007b5d
90007aa0:	90007b5d 	.word	0x90007b5d
90007aa4:	90007b5d 	.word	0x90007b5d
90007aa8:	90007b35 	.word	0x90007b35
90007aac:	90007b5d 	.word	0x90007b5d
90007ab0:	90007b5d 	.word	0x90007b5d
90007ab4:	90007b5d 	.word	0x90007b5d
90007ab8:	90007b5d 	.word	0x90007b5d
90007abc:	90007b5d 	.word	0x90007b5d
90007ac0:	90007b5d 	.word	0x90007b5d
90007ac4:	90007b5d 	.word	0x90007b5d
90007ac8:	90007b3d 	.word	0x90007b3d
90007acc:	90007b5d 	.word	0x90007b5d
90007ad0:	90007b5d 	.word	0x90007b5d
90007ad4:	90007b5d 	.word	0x90007b5d
90007ad8:	90007b5d 	.word	0x90007b5d
90007adc:	90007b5d 	.word	0x90007b5d
90007ae0:	90007b5d 	.word	0x90007b5d
90007ae4:	90007b5d 	.word	0x90007b5d
90007ae8:	90007b45 	.word	0x90007b45
90007aec:	90007b5d 	.word	0x90007b5d
90007af0:	90007b5d 	.word	0x90007b5d
90007af4:	90007b5d 	.word	0x90007b5d
90007af8:	90007b5d 	.word	0x90007b5d
90007afc:	90007b5d 	.word	0x90007b5d
90007b00:	90007b5d 	.word	0x90007b5d
90007b04:	90007b5d 	.word	0x90007b5d
90007b08:	90007b4d 	.word	0x90007b4d
90007b0c:	90007b5d 	.word	0x90007b5d
90007b10:	90007b5d 	.word	0x90007b5d
90007b14:	90007b5d 	.word	0x90007b5d
90007b18:	90007b5d 	.word	0x90007b5d
90007b1c:	90007b5d 	.word	0x90007b5d
90007b20:	90007b5d 	.word	0x90007b5d
90007b24:	90007b5d 	.word	0x90007b5d
90007b28:	90007b55 	.word	0x90007b55
90007b2c:	2301      	movs	r3, #1
90007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b32:	e0bc      	b.n	90007cae <UART_SetConfig+0x5a6>
90007b34:	2304      	movs	r3, #4
90007b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b3a:	e0b8      	b.n	90007cae <UART_SetConfig+0x5a6>
90007b3c:	2308      	movs	r3, #8
90007b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b42:	e0b4      	b.n	90007cae <UART_SetConfig+0x5a6>
90007b44:	2310      	movs	r3, #16
90007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b4a:	e0b0      	b.n	90007cae <UART_SetConfig+0x5a6>
90007b4c:	2320      	movs	r3, #32
90007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b52:	e0ac      	b.n	90007cae <UART_SetConfig+0x5a6>
90007b54:	2340      	movs	r3, #64	; 0x40
90007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b5a:	e0a8      	b.n	90007cae <UART_SetConfig+0x5a6>
90007b5c:	2380      	movs	r3, #128	; 0x80
90007b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b62:	e0a4      	b.n	90007cae <UART_SetConfig+0x5a6>
90007b64:	697b      	ldr	r3, [r7, #20]
90007b66:	681b      	ldr	r3, [r3, #0]
90007b68:	4a8f      	ldr	r2, [pc, #572]	; (90007da8 <UART_SetConfig+0x6a0>)
90007b6a:	4293      	cmp	r3, r2
90007b6c:	d130      	bne.n	90007bd0 <UART_SetConfig+0x4c8>
90007b6e:	4b8d      	ldr	r3, [pc, #564]	; (90007da4 <UART_SetConfig+0x69c>)
90007b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007b72:	f003 0307 	and.w	r3, r3, #7
90007b76:	2b05      	cmp	r3, #5
90007b78:	d826      	bhi.n	90007bc8 <UART_SetConfig+0x4c0>
90007b7a:	a201      	add	r2, pc, #4	; (adr r2, 90007b80 <UART_SetConfig+0x478>)
90007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007b80:	90007b99 	.word	0x90007b99
90007b84:	90007ba1 	.word	0x90007ba1
90007b88:	90007ba9 	.word	0x90007ba9
90007b8c:	90007bb1 	.word	0x90007bb1
90007b90:	90007bb9 	.word	0x90007bb9
90007b94:	90007bc1 	.word	0x90007bc1
90007b98:	2300      	movs	r3, #0
90007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007b9e:	e086      	b.n	90007cae <UART_SetConfig+0x5a6>
90007ba0:	2304      	movs	r3, #4
90007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007ba6:	e082      	b.n	90007cae <UART_SetConfig+0x5a6>
90007ba8:	2308      	movs	r3, #8
90007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007bae:	e07e      	b.n	90007cae <UART_SetConfig+0x5a6>
90007bb0:	2310      	movs	r3, #16
90007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007bb6:	e07a      	b.n	90007cae <UART_SetConfig+0x5a6>
90007bb8:	2320      	movs	r3, #32
90007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007bbe:	e076      	b.n	90007cae <UART_SetConfig+0x5a6>
90007bc0:	2340      	movs	r3, #64	; 0x40
90007bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007bc6:	e072      	b.n	90007cae <UART_SetConfig+0x5a6>
90007bc8:	2380      	movs	r3, #128	; 0x80
90007bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007bce:	e06e      	b.n	90007cae <UART_SetConfig+0x5a6>
90007bd0:	697b      	ldr	r3, [r7, #20]
90007bd2:	681b      	ldr	r3, [r3, #0]
90007bd4:	4a75      	ldr	r2, [pc, #468]	; (90007dac <UART_SetConfig+0x6a4>)
90007bd6:	4293      	cmp	r3, r2
90007bd8:	d130      	bne.n	90007c3c <UART_SetConfig+0x534>
90007bda:	4b72      	ldr	r3, [pc, #456]	; (90007da4 <UART_SetConfig+0x69c>)
90007bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007bde:	f003 0307 	and.w	r3, r3, #7
90007be2:	2b05      	cmp	r3, #5
90007be4:	d826      	bhi.n	90007c34 <UART_SetConfig+0x52c>
90007be6:	a201      	add	r2, pc, #4	; (adr r2, 90007bec <UART_SetConfig+0x4e4>)
90007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007bec:	90007c05 	.word	0x90007c05
90007bf0:	90007c0d 	.word	0x90007c0d
90007bf4:	90007c15 	.word	0x90007c15
90007bf8:	90007c1d 	.word	0x90007c1d
90007bfc:	90007c25 	.word	0x90007c25
90007c00:	90007c2d 	.word	0x90007c2d
90007c04:	2300      	movs	r3, #0
90007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c0a:	e050      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c0c:	2304      	movs	r3, #4
90007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c12:	e04c      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c14:	2308      	movs	r3, #8
90007c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c1a:	e048      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c1c:	2310      	movs	r3, #16
90007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c22:	e044      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c24:	2320      	movs	r3, #32
90007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c2a:	e040      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c2c:	2340      	movs	r3, #64	; 0x40
90007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c32:	e03c      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c34:	2380      	movs	r3, #128	; 0x80
90007c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c3a:	e038      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c3c:	697b      	ldr	r3, [r7, #20]
90007c3e:	681b      	ldr	r3, [r3, #0]
90007c40:	4a5b      	ldr	r2, [pc, #364]	; (90007db0 <UART_SetConfig+0x6a8>)
90007c42:	4293      	cmp	r3, r2
90007c44:	d130      	bne.n	90007ca8 <UART_SetConfig+0x5a0>
90007c46:	4b57      	ldr	r3, [pc, #348]	; (90007da4 <UART_SetConfig+0x69c>)
90007c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007c4a:	f003 0307 	and.w	r3, r3, #7
90007c4e:	2b05      	cmp	r3, #5
90007c50:	d826      	bhi.n	90007ca0 <UART_SetConfig+0x598>
90007c52:	a201      	add	r2, pc, #4	; (adr r2, 90007c58 <UART_SetConfig+0x550>)
90007c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007c58:	90007c71 	.word	0x90007c71
90007c5c:	90007c79 	.word	0x90007c79
90007c60:	90007c81 	.word	0x90007c81
90007c64:	90007c89 	.word	0x90007c89
90007c68:	90007c91 	.word	0x90007c91
90007c6c:	90007c99 	.word	0x90007c99
90007c70:	2302      	movs	r3, #2
90007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c76:	e01a      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c78:	2304      	movs	r3, #4
90007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c7e:	e016      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c80:	2308      	movs	r3, #8
90007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c86:	e012      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c88:	2310      	movs	r3, #16
90007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c8e:	e00e      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c90:	2320      	movs	r3, #32
90007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c96:	e00a      	b.n	90007cae <UART_SetConfig+0x5a6>
90007c98:	2340      	movs	r3, #64	; 0x40
90007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007c9e:	e006      	b.n	90007cae <UART_SetConfig+0x5a6>
90007ca0:	2380      	movs	r3, #128	; 0x80
90007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90007ca6:	e002      	b.n	90007cae <UART_SetConfig+0x5a6>
90007ca8:	2380      	movs	r3, #128	; 0x80
90007caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
90007cae:	697b      	ldr	r3, [r7, #20]
90007cb0:	681b      	ldr	r3, [r3, #0]
90007cb2:	4a3f      	ldr	r2, [pc, #252]	; (90007db0 <UART_SetConfig+0x6a8>)
90007cb4:	4293      	cmp	r3, r2
90007cb6:	f040 80f8 	bne.w	90007eaa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
90007cba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90007cbe:	2b20      	cmp	r3, #32
90007cc0:	dc46      	bgt.n	90007d50 <UART_SetConfig+0x648>
90007cc2:	2b02      	cmp	r3, #2
90007cc4:	f2c0 8082 	blt.w	90007dcc <UART_SetConfig+0x6c4>
90007cc8:	3b02      	subs	r3, #2
90007cca:	2b1e      	cmp	r3, #30
90007ccc:	d87e      	bhi.n	90007dcc <UART_SetConfig+0x6c4>
90007cce:	a201      	add	r2, pc, #4	; (adr r2, 90007cd4 <UART_SetConfig+0x5cc>)
90007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007cd4:	90007d57 	.word	0x90007d57
90007cd8:	90007dcd 	.word	0x90007dcd
90007cdc:	90007d5f 	.word	0x90007d5f
90007ce0:	90007dcd 	.word	0x90007dcd
90007ce4:	90007dcd 	.word	0x90007dcd
90007ce8:	90007dcd 	.word	0x90007dcd
90007cec:	90007d6f 	.word	0x90007d6f
90007cf0:	90007dcd 	.word	0x90007dcd
90007cf4:	90007dcd 	.word	0x90007dcd
90007cf8:	90007dcd 	.word	0x90007dcd
90007cfc:	90007dcd 	.word	0x90007dcd
90007d00:	90007dcd 	.word	0x90007dcd
90007d04:	90007dcd 	.word	0x90007dcd
90007d08:	90007dcd 	.word	0x90007dcd
90007d0c:	90007d7f 	.word	0x90007d7f
90007d10:	90007dcd 	.word	0x90007dcd
90007d14:	90007dcd 	.word	0x90007dcd
90007d18:	90007dcd 	.word	0x90007dcd
90007d1c:	90007dcd 	.word	0x90007dcd
90007d20:	90007dcd 	.word	0x90007dcd
90007d24:	90007dcd 	.word	0x90007dcd
90007d28:	90007dcd 	.word	0x90007dcd
90007d2c:	90007dcd 	.word	0x90007dcd
90007d30:	90007dcd 	.word	0x90007dcd
90007d34:	90007dcd 	.word	0x90007dcd
90007d38:	90007dcd 	.word	0x90007dcd
90007d3c:	90007dcd 	.word	0x90007dcd
90007d40:	90007dcd 	.word	0x90007dcd
90007d44:	90007dcd 	.word	0x90007dcd
90007d48:	90007dcd 	.word	0x90007dcd
90007d4c:	90007dbf 	.word	0x90007dbf
90007d50:	2b40      	cmp	r3, #64	; 0x40
90007d52:	d037      	beq.n	90007dc4 <UART_SetConfig+0x6bc>
90007d54:	e03a      	b.n	90007dcc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
90007d56:	f7fe fc57 	bl	90006608 <HAL_RCCEx_GetD3PCLK1Freq>
90007d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90007d5c:	e03c      	b.n	90007dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90007d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
90007d62:	4618      	mov	r0, r3
90007d64:	f7fe fc66 	bl	90006634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007d6c:	e034      	b.n	90007dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90007d6e:	f107 0318 	add.w	r3, r7, #24
90007d72:	4618      	mov	r0, r3
90007d74:	f7fe fdb2 	bl	900068dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90007d78:	69fb      	ldr	r3, [r7, #28]
90007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007d7c:	e02c      	b.n	90007dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007d7e:	4b09      	ldr	r3, [pc, #36]	; (90007da4 <UART_SetConfig+0x69c>)
90007d80:	681b      	ldr	r3, [r3, #0]
90007d82:	f003 0320 	and.w	r3, r3, #32
90007d86:	2b00      	cmp	r3, #0
90007d88:	d016      	beq.n	90007db8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90007d8a:	4b06      	ldr	r3, [pc, #24]	; (90007da4 <UART_SetConfig+0x69c>)
90007d8c:	681b      	ldr	r3, [r3, #0]
90007d8e:	08db      	lsrs	r3, r3, #3
90007d90:	f003 0303 	and.w	r3, r3, #3
90007d94:	4a07      	ldr	r2, [pc, #28]	; (90007db4 <UART_SetConfig+0x6ac>)
90007d96:	fa22 f303 	lsr.w	r3, r2, r3
90007d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90007d9c:	e01c      	b.n	90007dd8 <UART_SetConfig+0x6d0>
90007d9e:	bf00      	nop
90007da0:	40011400 	.word	0x40011400
90007da4:	58024400 	.word	0x58024400
90007da8:	40007800 	.word	0x40007800
90007dac:	40007c00 	.word	0x40007c00
90007db0:	58000c00 	.word	0x58000c00
90007db4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
90007db8:	4b9d      	ldr	r3, [pc, #628]	; (90008030 <UART_SetConfig+0x928>)
90007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007dbc:	e00c      	b.n	90007dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90007dbe:	4b9d      	ldr	r3, [pc, #628]	; (90008034 <UART_SetConfig+0x92c>)
90007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007dc2:	e009      	b.n	90007dd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90007dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007dca:	e005      	b.n	90007dd8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
90007dcc:	2300      	movs	r3, #0
90007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
90007dd0:	2301      	movs	r3, #1
90007dd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
90007dd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
90007dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007dda:	2b00      	cmp	r3, #0
90007ddc:	f000 81de 	beq.w	9000819c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
90007de0:	697b      	ldr	r3, [r7, #20]
90007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007de4:	4a94      	ldr	r2, [pc, #592]	; (90008038 <UART_SetConfig+0x930>)
90007de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90007dea:	461a      	mov	r2, r3
90007dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007dee:	fbb3 f3f2 	udiv	r3, r3, r2
90007df2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90007df4:	697b      	ldr	r3, [r7, #20]
90007df6:	685a      	ldr	r2, [r3, #4]
90007df8:	4613      	mov	r3, r2
90007dfa:	005b      	lsls	r3, r3, #1
90007dfc:	4413      	add	r3, r2
90007dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90007e00:	429a      	cmp	r2, r3
90007e02:	d305      	bcc.n	90007e10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
90007e04:	697b      	ldr	r3, [r7, #20]
90007e06:	685b      	ldr	r3, [r3, #4]
90007e08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90007e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90007e0c:	429a      	cmp	r2, r3
90007e0e:	d903      	bls.n	90007e18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
90007e10:	2301      	movs	r3, #1
90007e12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
90007e16:	e1c1      	b.n	9000819c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007e1a:	2200      	movs	r2, #0
90007e1c:	60bb      	str	r3, [r7, #8]
90007e1e:	60fa      	str	r2, [r7, #12]
90007e20:	697b      	ldr	r3, [r7, #20]
90007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007e24:	4a84      	ldr	r2, [pc, #528]	; (90008038 <UART_SetConfig+0x930>)
90007e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90007e2a:	b29b      	uxth	r3, r3
90007e2c:	2200      	movs	r2, #0
90007e2e:	603b      	str	r3, [r7, #0]
90007e30:	607a      	str	r2, [r7, #4]
90007e32:	e9d7 2300 	ldrd	r2, r3, [r7]
90007e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
90007e3a:	f7f8 fab9 	bl	900003b0 <__aeabi_uldivmod>
90007e3e:	4602      	mov	r2, r0
90007e40:	460b      	mov	r3, r1
90007e42:	4610      	mov	r0, r2
90007e44:	4619      	mov	r1, r3
90007e46:	f04f 0200 	mov.w	r2, #0
90007e4a:	f04f 0300 	mov.w	r3, #0
90007e4e:	020b      	lsls	r3, r1, #8
90007e50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
90007e54:	0202      	lsls	r2, r0, #8
90007e56:	6979      	ldr	r1, [r7, #20]
90007e58:	6849      	ldr	r1, [r1, #4]
90007e5a:	0849      	lsrs	r1, r1, #1
90007e5c:	2000      	movs	r0, #0
90007e5e:	460c      	mov	r4, r1
90007e60:	4605      	mov	r5, r0
90007e62:	eb12 0804 	adds.w	r8, r2, r4
90007e66:	eb43 0905 	adc.w	r9, r3, r5
90007e6a:	697b      	ldr	r3, [r7, #20]
90007e6c:	685b      	ldr	r3, [r3, #4]
90007e6e:	2200      	movs	r2, #0
90007e70:	469a      	mov	sl, r3
90007e72:	4693      	mov	fp, r2
90007e74:	4652      	mov	r2, sl
90007e76:	465b      	mov	r3, fp
90007e78:	4640      	mov	r0, r8
90007e7a:	4649      	mov	r1, r9
90007e7c:	f7f8 fa98 	bl	900003b0 <__aeabi_uldivmod>
90007e80:	4602      	mov	r2, r0
90007e82:	460b      	mov	r3, r1
90007e84:	4613      	mov	r3, r2
90007e86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
90007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90007e8e:	d308      	bcc.n	90007ea2 <UART_SetConfig+0x79a>
90007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90007e96:	d204      	bcs.n	90007ea2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
90007e98:	697b      	ldr	r3, [r7, #20]
90007e9a:	681b      	ldr	r3, [r3, #0]
90007e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
90007e9e:	60da      	str	r2, [r3, #12]
90007ea0:	e17c      	b.n	9000819c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
90007ea2:	2301      	movs	r3, #1
90007ea4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
90007ea8:	e178      	b.n	9000819c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90007eaa:	697b      	ldr	r3, [r7, #20]
90007eac:	69db      	ldr	r3, [r3, #28]
90007eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90007eb2:	f040 80c5 	bne.w	90008040 <UART_SetConfig+0x938>
  {
    switch (clocksource)
90007eb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90007eba:	2b20      	cmp	r3, #32
90007ebc:	dc48      	bgt.n	90007f50 <UART_SetConfig+0x848>
90007ebe:	2b00      	cmp	r3, #0
90007ec0:	db7b      	blt.n	90007fba <UART_SetConfig+0x8b2>
90007ec2:	2b20      	cmp	r3, #32
90007ec4:	d879      	bhi.n	90007fba <UART_SetConfig+0x8b2>
90007ec6:	a201      	add	r2, pc, #4	; (adr r2, 90007ecc <UART_SetConfig+0x7c4>)
90007ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007ecc:	90007f57 	.word	0x90007f57
90007ed0:	90007f5f 	.word	0x90007f5f
90007ed4:	90007fbb 	.word	0x90007fbb
90007ed8:	90007fbb 	.word	0x90007fbb
90007edc:	90007f67 	.word	0x90007f67
90007ee0:	90007fbb 	.word	0x90007fbb
90007ee4:	90007fbb 	.word	0x90007fbb
90007ee8:	90007fbb 	.word	0x90007fbb
90007eec:	90007f77 	.word	0x90007f77
90007ef0:	90007fbb 	.word	0x90007fbb
90007ef4:	90007fbb 	.word	0x90007fbb
90007ef8:	90007fbb 	.word	0x90007fbb
90007efc:	90007fbb 	.word	0x90007fbb
90007f00:	90007fbb 	.word	0x90007fbb
90007f04:	90007fbb 	.word	0x90007fbb
90007f08:	90007fbb 	.word	0x90007fbb
90007f0c:	90007f87 	.word	0x90007f87
90007f10:	90007fbb 	.word	0x90007fbb
90007f14:	90007fbb 	.word	0x90007fbb
90007f18:	90007fbb 	.word	0x90007fbb
90007f1c:	90007fbb 	.word	0x90007fbb
90007f20:	90007fbb 	.word	0x90007fbb
90007f24:	90007fbb 	.word	0x90007fbb
90007f28:	90007fbb 	.word	0x90007fbb
90007f2c:	90007fbb 	.word	0x90007fbb
90007f30:	90007fbb 	.word	0x90007fbb
90007f34:	90007fbb 	.word	0x90007fbb
90007f38:	90007fbb 	.word	0x90007fbb
90007f3c:	90007fbb 	.word	0x90007fbb
90007f40:	90007fbb 	.word	0x90007fbb
90007f44:	90007fbb 	.word	0x90007fbb
90007f48:	90007fbb 	.word	0x90007fbb
90007f4c:	90007fad 	.word	0x90007fad
90007f50:	2b40      	cmp	r3, #64	; 0x40
90007f52:	d02e      	beq.n	90007fb2 <UART_SetConfig+0x8aa>
90007f54:	e031      	b.n	90007fba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90007f56:	f7fd f8df 	bl	90005118 <HAL_RCC_GetPCLK1Freq>
90007f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90007f5c:	e033      	b.n	90007fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
90007f5e:	f7fd f8f1 	bl	90005144 <HAL_RCC_GetPCLK2Freq>
90007f62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90007f64:	e02f      	b.n	90007fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90007f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
90007f6a:	4618      	mov	r0, r3
90007f6c:	f7fe fb62 	bl	90006634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007f74:	e027      	b.n	90007fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90007f76:	f107 0318 	add.w	r3, r7, #24
90007f7a:	4618      	mov	r0, r3
90007f7c:	f7fe fcae 	bl	900068dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90007f80:	69fb      	ldr	r3, [r7, #28]
90007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007f84:	e01f      	b.n	90007fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007f86:	4b2d      	ldr	r3, [pc, #180]	; (9000803c <UART_SetConfig+0x934>)
90007f88:	681b      	ldr	r3, [r3, #0]
90007f8a:	f003 0320 	and.w	r3, r3, #32
90007f8e:	2b00      	cmp	r3, #0
90007f90:	d009      	beq.n	90007fa6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90007f92:	4b2a      	ldr	r3, [pc, #168]	; (9000803c <UART_SetConfig+0x934>)
90007f94:	681b      	ldr	r3, [r3, #0]
90007f96:	08db      	lsrs	r3, r3, #3
90007f98:	f003 0303 	and.w	r3, r3, #3
90007f9c:	4a24      	ldr	r2, [pc, #144]	; (90008030 <UART_SetConfig+0x928>)
90007f9e:	fa22 f303 	lsr.w	r3, r2, r3
90007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90007fa4:	e00f      	b.n	90007fc6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
90007fa6:	4b22      	ldr	r3, [pc, #136]	; (90008030 <UART_SetConfig+0x928>)
90007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007faa:	e00c      	b.n	90007fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90007fac:	4b21      	ldr	r3, [pc, #132]	; (90008034 <UART_SetConfig+0x92c>)
90007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007fb0:	e009      	b.n	90007fc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90007fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90007fb8:	e005      	b.n	90007fc6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
90007fba:	2300      	movs	r3, #0
90007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
90007fbe:	2301      	movs	r3, #1
90007fc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
90007fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
90007fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007fc8:	2b00      	cmp	r3, #0
90007fca:	f000 80e7 	beq.w	9000819c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90007fce:	697b      	ldr	r3, [r7, #20]
90007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007fd2:	4a19      	ldr	r2, [pc, #100]	; (90008038 <UART_SetConfig+0x930>)
90007fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90007fd8:	461a      	mov	r2, r3
90007fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90007fdc:	fbb3 f3f2 	udiv	r3, r3, r2
90007fe0:	005a      	lsls	r2, r3, #1
90007fe2:	697b      	ldr	r3, [r7, #20]
90007fe4:	685b      	ldr	r3, [r3, #4]
90007fe6:	085b      	lsrs	r3, r3, #1
90007fe8:	441a      	add	r2, r3
90007fea:	697b      	ldr	r3, [r7, #20]
90007fec:	685b      	ldr	r3, [r3, #4]
90007fee:	fbb2 f3f3 	udiv	r3, r2, r3
90007ff2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007ff6:	2b0f      	cmp	r3, #15
90007ff8:	d916      	bls.n	90008028 <UART_SetConfig+0x920>
90007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008000:	d212      	bcs.n	90008028 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
90008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90008004:	b29b      	uxth	r3, r3
90008006:	f023 030f 	bic.w	r3, r3, #15
9000800a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000800e:	085b      	lsrs	r3, r3, #1
90008010:	b29b      	uxth	r3, r3
90008012:	f003 0307 	and.w	r3, r3, #7
90008016:	b29a      	uxth	r2, r3
90008018:	8efb      	ldrh	r3, [r7, #54]	; 0x36
9000801a:	4313      	orrs	r3, r2
9000801c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
9000801e:	697b      	ldr	r3, [r7, #20]
90008020:	681b      	ldr	r3, [r3, #0]
90008022:	8efa      	ldrh	r2, [r7, #54]	; 0x36
90008024:	60da      	str	r2, [r3, #12]
90008026:	e0b9      	b.n	9000819c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
90008028:	2301      	movs	r3, #1
9000802a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
9000802e:	e0b5      	b.n	9000819c <UART_SetConfig+0xa94>
90008030:	03d09000 	.word	0x03d09000
90008034:	003d0900 	.word	0x003d0900
90008038:	90014088 	.word	0x90014088
9000803c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
90008040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90008044:	2b20      	cmp	r3, #32
90008046:	dc49      	bgt.n	900080dc <UART_SetConfig+0x9d4>
90008048:	2b00      	cmp	r3, #0
9000804a:	db7c      	blt.n	90008146 <UART_SetConfig+0xa3e>
9000804c:	2b20      	cmp	r3, #32
9000804e:	d87a      	bhi.n	90008146 <UART_SetConfig+0xa3e>
90008050:	a201      	add	r2, pc, #4	; (adr r2, 90008058 <UART_SetConfig+0x950>)
90008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008056:	bf00      	nop
90008058:	900080e3 	.word	0x900080e3
9000805c:	900080eb 	.word	0x900080eb
90008060:	90008147 	.word	0x90008147
90008064:	90008147 	.word	0x90008147
90008068:	900080f3 	.word	0x900080f3
9000806c:	90008147 	.word	0x90008147
90008070:	90008147 	.word	0x90008147
90008074:	90008147 	.word	0x90008147
90008078:	90008103 	.word	0x90008103
9000807c:	90008147 	.word	0x90008147
90008080:	90008147 	.word	0x90008147
90008084:	90008147 	.word	0x90008147
90008088:	90008147 	.word	0x90008147
9000808c:	90008147 	.word	0x90008147
90008090:	90008147 	.word	0x90008147
90008094:	90008147 	.word	0x90008147
90008098:	90008113 	.word	0x90008113
9000809c:	90008147 	.word	0x90008147
900080a0:	90008147 	.word	0x90008147
900080a4:	90008147 	.word	0x90008147
900080a8:	90008147 	.word	0x90008147
900080ac:	90008147 	.word	0x90008147
900080b0:	90008147 	.word	0x90008147
900080b4:	90008147 	.word	0x90008147
900080b8:	90008147 	.word	0x90008147
900080bc:	90008147 	.word	0x90008147
900080c0:	90008147 	.word	0x90008147
900080c4:	90008147 	.word	0x90008147
900080c8:	90008147 	.word	0x90008147
900080cc:	90008147 	.word	0x90008147
900080d0:	90008147 	.word	0x90008147
900080d4:	90008147 	.word	0x90008147
900080d8:	90008139 	.word	0x90008139
900080dc:	2b40      	cmp	r3, #64	; 0x40
900080de:	d02e      	beq.n	9000813e <UART_SetConfig+0xa36>
900080e0:	e031      	b.n	90008146 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
900080e2:	f7fd f819 	bl	90005118 <HAL_RCC_GetPCLK1Freq>
900080e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
900080e8:	e033      	b.n	90008152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
900080ea:	f7fd f82b 	bl	90005144 <HAL_RCC_GetPCLK2Freq>
900080ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
900080f0:	e02f      	b.n	90008152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900080f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
900080f6:	4618      	mov	r0, r3
900080f8:	f7fe fa9c 	bl	90006634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
900080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
900080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008100:	e027      	b.n	90008152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90008102:	f107 0318 	add.w	r3, r7, #24
90008106:	4618      	mov	r0, r3
90008108:	f7fe fbe8 	bl	900068dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000810c:	69fb      	ldr	r3, [r7, #28]
9000810e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008110:	e01f      	b.n	90008152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008112:	4b2d      	ldr	r3, [pc, #180]	; (900081c8 <UART_SetConfig+0xac0>)
90008114:	681b      	ldr	r3, [r3, #0]
90008116:	f003 0320 	and.w	r3, r3, #32
9000811a:	2b00      	cmp	r3, #0
9000811c:	d009      	beq.n	90008132 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000811e:	4b2a      	ldr	r3, [pc, #168]	; (900081c8 <UART_SetConfig+0xac0>)
90008120:	681b      	ldr	r3, [r3, #0]
90008122:	08db      	lsrs	r3, r3, #3
90008124:	f003 0303 	and.w	r3, r3, #3
90008128:	4a28      	ldr	r2, [pc, #160]	; (900081cc <UART_SetConfig+0xac4>)
9000812a:	fa22 f303 	lsr.w	r3, r2, r3
9000812e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90008130:	e00f      	b.n	90008152 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
90008132:	4b26      	ldr	r3, [pc, #152]	; (900081cc <UART_SetConfig+0xac4>)
90008134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008136:	e00c      	b.n	90008152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90008138:	4b25      	ldr	r3, [pc, #148]	; (900081d0 <UART_SetConfig+0xac8>)
9000813a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000813c:	e009      	b.n	90008152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000813e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90008142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90008144:	e005      	b.n	90008152 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
90008146:	2300      	movs	r3, #0
90008148:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
9000814a:	2301      	movs	r3, #1
9000814c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
90008150:	bf00      	nop
    }

    if (pclk != 0U)
90008152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90008154:	2b00      	cmp	r3, #0
90008156:	d021      	beq.n	9000819c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90008158:	697b      	ldr	r3, [r7, #20]
9000815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000815c:	4a1d      	ldr	r2, [pc, #116]	; (900081d4 <UART_SetConfig+0xacc>)
9000815e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90008162:	461a      	mov	r2, r3
90008164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90008166:	fbb3 f2f2 	udiv	r2, r3, r2
9000816a:	697b      	ldr	r3, [r7, #20]
9000816c:	685b      	ldr	r3, [r3, #4]
9000816e:	085b      	lsrs	r3, r3, #1
90008170:	441a      	add	r2, r3
90008172:	697b      	ldr	r3, [r7, #20]
90008174:	685b      	ldr	r3, [r3, #4]
90008176:	fbb2 f3f3 	udiv	r3, r2, r3
9000817a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000817e:	2b0f      	cmp	r3, #15
90008180:	d909      	bls.n	90008196 <UART_SetConfig+0xa8e>
90008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90008184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008188:	d205      	bcs.n	90008196 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000818c:	b29a      	uxth	r2, r3
9000818e:	697b      	ldr	r3, [r7, #20]
90008190:	681b      	ldr	r3, [r3, #0]
90008192:	60da      	str	r2, [r3, #12]
90008194:	e002      	b.n	9000819c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
90008196:	2301      	movs	r3, #1
90008198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000819c:	697b      	ldr	r3, [r7, #20]
9000819e:	2201      	movs	r2, #1
900081a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
900081a4:	697b      	ldr	r3, [r7, #20]
900081a6:	2201      	movs	r2, #1
900081a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
900081ac:	697b      	ldr	r3, [r7, #20]
900081ae:	2200      	movs	r2, #0
900081b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
900081b2:	697b      	ldr	r3, [r7, #20]
900081b4:	2200      	movs	r2, #0
900081b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
900081b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
900081bc:	4618      	mov	r0, r3
900081be:	3748      	adds	r7, #72	; 0x48
900081c0:	46bd      	mov	sp, r7
900081c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
900081c6:	bf00      	nop
900081c8:	58024400 	.word	0x58024400
900081cc:	03d09000 	.word	0x03d09000
900081d0:	003d0900 	.word	0x003d0900
900081d4:	90014088 	.word	0x90014088

900081d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
900081d8:	b480      	push	{r7}
900081da:	b083      	sub	sp, #12
900081dc:	af00      	add	r7, sp, #0
900081de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
900081e0:	687b      	ldr	r3, [r7, #4]
900081e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900081e4:	f003 0301 	and.w	r3, r3, #1
900081e8:	2b00      	cmp	r3, #0
900081ea:	d00a      	beq.n	90008202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
900081ec:	687b      	ldr	r3, [r7, #4]
900081ee:	681b      	ldr	r3, [r3, #0]
900081f0:	685b      	ldr	r3, [r3, #4]
900081f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
900081f6:	687b      	ldr	r3, [r7, #4]
900081f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900081fa:	687b      	ldr	r3, [r7, #4]
900081fc:	681b      	ldr	r3, [r3, #0]
900081fe:	430a      	orrs	r2, r1
90008200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
90008202:	687b      	ldr	r3, [r7, #4]
90008204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008206:	f003 0302 	and.w	r3, r3, #2
9000820a:	2b00      	cmp	r3, #0
9000820c:	d00a      	beq.n	90008224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000820e:	687b      	ldr	r3, [r7, #4]
90008210:	681b      	ldr	r3, [r3, #0]
90008212:	685b      	ldr	r3, [r3, #4]
90008214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
90008218:	687b      	ldr	r3, [r7, #4]
9000821a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000821c:	687b      	ldr	r3, [r7, #4]
9000821e:	681b      	ldr	r3, [r3, #0]
90008220:	430a      	orrs	r2, r1
90008222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
90008224:	687b      	ldr	r3, [r7, #4]
90008226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008228:	f003 0304 	and.w	r3, r3, #4
9000822c:	2b00      	cmp	r3, #0
9000822e:	d00a      	beq.n	90008246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
90008230:	687b      	ldr	r3, [r7, #4]
90008232:	681b      	ldr	r3, [r3, #0]
90008234:	685b      	ldr	r3, [r3, #4]
90008236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
9000823a:	687b      	ldr	r3, [r7, #4]
9000823c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000823e:	687b      	ldr	r3, [r7, #4]
90008240:	681b      	ldr	r3, [r3, #0]
90008242:	430a      	orrs	r2, r1
90008244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90008246:	687b      	ldr	r3, [r7, #4]
90008248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000824a:	f003 0308 	and.w	r3, r3, #8
9000824e:	2b00      	cmp	r3, #0
90008250:	d00a      	beq.n	90008268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
90008252:	687b      	ldr	r3, [r7, #4]
90008254:	681b      	ldr	r3, [r3, #0]
90008256:	685b      	ldr	r3, [r3, #4]
90008258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
9000825c:	687b      	ldr	r3, [r7, #4]
9000825e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008260:	687b      	ldr	r3, [r7, #4]
90008262:	681b      	ldr	r3, [r3, #0]
90008264:	430a      	orrs	r2, r1
90008266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90008268:	687b      	ldr	r3, [r7, #4]
9000826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000826c:	f003 0310 	and.w	r3, r3, #16
90008270:	2b00      	cmp	r3, #0
90008272:	d00a      	beq.n	9000828a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
90008274:	687b      	ldr	r3, [r7, #4]
90008276:	681b      	ldr	r3, [r3, #0]
90008278:	689b      	ldr	r3, [r3, #8]
9000827a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
9000827e:	687b      	ldr	r3, [r7, #4]
90008280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90008282:	687b      	ldr	r3, [r7, #4]
90008284:	681b      	ldr	r3, [r3, #0]
90008286:	430a      	orrs	r2, r1
90008288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000828a:	687b      	ldr	r3, [r7, #4]
9000828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000828e:	f003 0320 	and.w	r3, r3, #32
90008292:	2b00      	cmp	r3, #0
90008294:	d00a      	beq.n	900082ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
90008296:	687b      	ldr	r3, [r7, #4]
90008298:	681b      	ldr	r3, [r3, #0]
9000829a:	689b      	ldr	r3, [r3, #8]
9000829c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
900082a0:	687b      	ldr	r3, [r7, #4]
900082a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900082a4:	687b      	ldr	r3, [r7, #4]
900082a6:	681b      	ldr	r3, [r3, #0]
900082a8:	430a      	orrs	r2, r1
900082aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
900082ac:	687b      	ldr	r3, [r7, #4]
900082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
900082b4:	2b00      	cmp	r3, #0
900082b6:	d01a      	beq.n	900082ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
900082b8:	687b      	ldr	r3, [r7, #4]
900082ba:	681b      	ldr	r3, [r3, #0]
900082bc:	685b      	ldr	r3, [r3, #4]
900082be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
900082c2:	687b      	ldr	r3, [r7, #4]
900082c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
900082c6:	687b      	ldr	r3, [r7, #4]
900082c8:	681b      	ldr	r3, [r3, #0]
900082ca:	430a      	orrs	r2, r1
900082cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
900082ce:	687b      	ldr	r3, [r7, #4]
900082d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900082d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900082d6:	d10a      	bne.n	900082ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
900082d8:	687b      	ldr	r3, [r7, #4]
900082da:	681b      	ldr	r3, [r3, #0]
900082dc:	685b      	ldr	r3, [r3, #4]
900082de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
900082e2:	687b      	ldr	r3, [r7, #4]
900082e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
900082e6:	687b      	ldr	r3, [r7, #4]
900082e8:	681b      	ldr	r3, [r3, #0]
900082ea:	430a      	orrs	r2, r1
900082ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
900082ee:	687b      	ldr	r3, [r7, #4]
900082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900082f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
900082f6:	2b00      	cmp	r3, #0
900082f8:	d00a      	beq.n	90008310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
900082fa:	687b      	ldr	r3, [r7, #4]
900082fc:	681b      	ldr	r3, [r3, #0]
900082fe:	685b      	ldr	r3, [r3, #4]
90008300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
90008304:	687b      	ldr	r3, [r7, #4]
90008306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
90008308:	687b      	ldr	r3, [r7, #4]
9000830a:	681b      	ldr	r3, [r3, #0]
9000830c:	430a      	orrs	r2, r1
9000830e:	605a      	str	r2, [r3, #4]
  }
}
90008310:	bf00      	nop
90008312:	370c      	adds	r7, #12
90008314:	46bd      	mov	sp, r7
90008316:	f85d 7b04 	ldr.w	r7, [sp], #4
9000831a:	4770      	bx	lr

9000831c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000831c:	b580      	push	{r7, lr}
9000831e:	b098      	sub	sp, #96	; 0x60
90008320:	af02      	add	r7, sp, #8
90008322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
90008324:	687b      	ldr	r3, [r7, #4]
90008326:	2200      	movs	r2, #0
90008328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000832c:	f7f9 fe4e 	bl	90001fcc <HAL_GetTick>
90008330:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
90008332:	687b      	ldr	r3, [r7, #4]
90008334:	681b      	ldr	r3, [r3, #0]
90008336:	681b      	ldr	r3, [r3, #0]
90008338:	f003 0308 	and.w	r3, r3, #8
9000833c:	2b08      	cmp	r3, #8
9000833e:	d12f      	bne.n	900083a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90008340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
90008344:	9300      	str	r3, [sp, #0]
90008346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90008348:	2200      	movs	r2, #0
9000834a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
9000834e:	6878      	ldr	r0, [r7, #4]
90008350:	f000 f88e 	bl	90008470 <UART_WaitOnFlagUntilTimeout>
90008354:	4603      	mov	r3, r0
90008356:	2b00      	cmp	r3, #0
90008358:	d022      	beq.n	900083a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
9000835a:	687b      	ldr	r3, [r7, #4]
9000835c:	681b      	ldr	r3, [r3, #0]
9000835e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90008362:	e853 3f00 	ldrex	r3, [r3]
90008366:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
90008368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000836a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000836e:	653b      	str	r3, [r7, #80]	; 0x50
90008370:	687b      	ldr	r3, [r7, #4]
90008372:	681b      	ldr	r3, [r3, #0]
90008374:	461a      	mov	r2, r3
90008376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90008378:	647b      	str	r3, [r7, #68]	; 0x44
9000837a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000837c:	6c39      	ldr	r1, [r7, #64]	; 0x40
9000837e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90008380:	e841 2300 	strex	r3, r2, [r1]
90008384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
90008386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90008388:	2b00      	cmp	r3, #0
9000838a:	d1e6      	bne.n	9000835a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
9000838c:	687b      	ldr	r3, [r7, #4]
9000838e:	2220      	movs	r2, #32
90008390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
90008394:	687b      	ldr	r3, [r7, #4]
90008396:	2200      	movs	r2, #0
90008398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000839c:	2303      	movs	r3, #3
9000839e:	e063      	b.n	90008468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
900083a0:	687b      	ldr	r3, [r7, #4]
900083a2:	681b      	ldr	r3, [r3, #0]
900083a4:	681b      	ldr	r3, [r3, #0]
900083a6:	f003 0304 	and.w	r3, r3, #4
900083aa:	2b04      	cmp	r3, #4
900083ac:	d149      	bne.n	90008442 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
900083ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
900083b2:	9300      	str	r3, [sp, #0]
900083b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
900083b6:	2200      	movs	r2, #0
900083b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
900083bc:	6878      	ldr	r0, [r7, #4]
900083be:	f000 f857 	bl	90008470 <UART_WaitOnFlagUntilTimeout>
900083c2:	4603      	mov	r3, r0
900083c4:	2b00      	cmp	r3, #0
900083c6:	d03c      	beq.n	90008442 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
900083c8:	687b      	ldr	r3, [r7, #4]
900083ca:	681b      	ldr	r3, [r3, #0]
900083cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900083d0:	e853 3f00 	ldrex	r3, [r3]
900083d4:	623b      	str	r3, [r7, #32]
   return(result);
900083d6:	6a3b      	ldr	r3, [r7, #32]
900083d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
900083dc:	64fb      	str	r3, [r7, #76]	; 0x4c
900083de:	687b      	ldr	r3, [r7, #4]
900083e0:	681b      	ldr	r3, [r3, #0]
900083e2:	461a      	mov	r2, r3
900083e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
900083e6:	633b      	str	r3, [r7, #48]	; 0x30
900083e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900083ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
900083ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900083ee:	e841 2300 	strex	r3, r2, [r1]
900083f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
900083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900083f6:	2b00      	cmp	r3, #0
900083f8:	d1e6      	bne.n	900083c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
900083fa:	687b      	ldr	r3, [r7, #4]
900083fc:	681b      	ldr	r3, [r3, #0]
900083fe:	3308      	adds	r3, #8
90008400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90008402:	693b      	ldr	r3, [r7, #16]
90008404:	e853 3f00 	ldrex	r3, [r3]
90008408:	60fb      	str	r3, [r7, #12]
   return(result);
9000840a:	68fb      	ldr	r3, [r7, #12]
9000840c:	f023 0301 	bic.w	r3, r3, #1
90008410:	64bb      	str	r3, [r7, #72]	; 0x48
90008412:	687b      	ldr	r3, [r7, #4]
90008414:	681b      	ldr	r3, [r3, #0]
90008416:	3308      	adds	r3, #8
90008418:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000841a:	61fa      	str	r2, [r7, #28]
9000841c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000841e:	69b9      	ldr	r1, [r7, #24]
90008420:	69fa      	ldr	r2, [r7, #28]
90008422:	e841 2300 	strex	r3, r2, [r1]
90008426:	617b      	str	r3, [r7, #20]
   return(result);
90008428:	697b      	ldr	r3, [r7, #20]
9000842a:	2b00      	cmp	r3, #0
9000842c:	d1e5      	bne.n	900083fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
9000842e:	687b      	ldr	r3, [r7, #4]
90008430:	2220      	movs	r2, #32
90008432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
90008436:	687b      	ldr	r3, [r7, #4]
90008438:	2200      	movs	r2, #0
9000843a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
9000843e:	2303      	movs	r3, #3
90008440:	e012      	b.n	90008468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
90008442:	687b      	ldr	r3, [r7, #4]
90008444:	2220      	movs	r2, #32
90008446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
9000844a:	687b      	ldr	r3, [r7, #4]
9000844c:	2220      	movs	r2, #32
9000844e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90008452:	687b      	ldr	r3, [r7, #4]
90008454:	2200      	movs	r2, #0
90008456:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
90008458:	687b      	ldr	r3, [r7, #4]
9000845a:	2200      	movs	r2, #0
9000845c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
9000845e:	687b      	ldr	r3, [r7, #4]
90008460:	2200      	movs	r2, #0
90008462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
90008466:	2300      	movs	r3, #0
}
90008468:	4618      	mov	r0, r3
9000846a:	3758      	adds	r7, #88	; 0x58
9000846c:	46bd      	mov	sp, r7
9000846e:	bd80      	pop	{r7, pc}

90008470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
90008470:	b580      	push	{r7, lr}
90008472:	b084      	sub	sp, #16
90008474:	af00      	add	r7, sp, #0
90008476:	60f8      	str	r0, [r7, #12]
90008478:	60b9      	str	r1, [r7, #8]
9000847a:	603b      	str	r3, [r7, #0]
9000847c:	4613      	mov	r3, r2
9000847e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90008480:	e049      	b.n	90008516 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90008482:	69bb      	ldr	r3, [r7, #24]
90008484:	f1b3 3fff 	cmp.w	r3, #4294967295
90008488:	d045      	beq.n	90008516 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000848a:	f7f9 fd9f 	bl	90001fcc <HAL_GetTick>
9000848e:	4602      	mov	r2, r0
90008490:	683b      	ldr	r3, [r7, #0]
90008492:	1ad3      	subs	r3, r2, r3
90008494:	69ba      	ldr	r2, [r7, #24]
90008496:	429a      	cmp	r2, r3
90008498:	d302      	bcc.n	900084a0 <UART_WaitOnFlagUntilTimeout+0x30>
9000849a:	69bb      	ldr	r3, [r7, #24]
9000849c:	2b00      	cmp	r3, #0
9000849e:	d101      	bne.n	900084a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
900084a0:	2303      	movs	r3, #3
900084a2:	e048      	b.n	90008536 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
900084a4:	68fb      	ldr	r3, [r7, #12]
900084a6:	681b      	ldr	r3, [r3, #0]
900084a8:	681b      	ldr	r3, [r3, #0]
900084aa:	f003 0304 	and.w	r3, r3, #4
900084ae:	2b00      	cmp	r3, #0
900084b0:	d031      	beq.n	90008516 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
900084b2:	68fb      	ldr	r3, [r7, #12]
900084b4:	681b      	ldr	r3, [r3, #0]
900084b6:	69db      	ldr	r3, [r3, #28]
900084b8:	f003 0308 	and.w	r3, r3, #8
900084bc:	2b08      	cmp	r3, #8
900084be:	d110      	bne.n	900084e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
900084c0:	68fb      	ldr	r3, [r7, #12]
900084c2:	681b      	ldr	r3, [r3, #0]
900084c4:	2208      	movs	r2, #8
900084c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
900084c8:	68f8      	ldr	r0, [r7, #12]
900084ca:	f000 f839 	bl	90008540 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
900084ce:	68fb      	ldr	r3, [r7, #12]
900084d0:	2208      	movs	r2, #8
900084d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
900084d6:	68fb      	ldr	r3, [r7, #12]
900084d8:	2200      	movs	r2, #0
900084da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
900084de:	2301      	movs	r3, #1
900084e0:	e029      	b.n	90008536 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
900084e2:	68fb      	ldr	r3, [r7, #12]
900084e4:	681b      	ldr	r3, [r3, #0]
900084e6:	69db      	ldr	r3, [r3, #28]
900084e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
900084ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
900084f0:	d111      	bne.n	90008516 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
900084f2:	68fb      	ldr	r3, [r7, #12]
900084f4:	681b      	ldr	r3, [r3, #0]
900084f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
900084fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
900084fc:	68f8      	ldr	r0, [r7, #12]
900084fe:	f000 f81f 	bl	90008540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
90008502:	68fb      	ldr	r3, [r7, #12]
90008504:	2220      	movs	r2, #32
90008506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000850a:	68fb      	ldr	r3, [r7, #12]
9000850c:	2200      	movs	r2, #0
9000850e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
90008512:	2303      	movs	r3, #3
90008514:	e00f      	b.n	90008536 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90008516:	68fb      	ldr	r3, [r7, #12]
90008518:	681b      	ldr	r3, [r3, #0]
9000851a:	69da      	ldr	r2, [r3, #28]
9000851c:	68bb      	ldr	r3, [r7, #8]
9000851e:	4013      	ands	r3, r2
90008520:	68ba      	ldr	r2, [r7, #8]
90008522:	429a      	cmp	r2, r3
90008524:	bf0c      	ite	eq
90008526:	2301      	moveq	r3, #1
90008528:	2300      	movne	r3, #0
9000852a:	b2db      	uxtb	r3, r3
9000852c:	461a      	mov	r2, r3
9000852e:	79fb      	ldrb	r3, [r7, #7]
90008530:	429a      	cmp	r2, r3
90008532:	d0a6      	beq.n	90008482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90008534:	2300      	movs	r3, #0
}
90008536:	4618      	mov	r0, r3
90008538:	3710      	adds	r7, #16
9000853a:	46bd      	mov	sp, r7
9000853c:	bd80      	pop	{r7, pc}
	...

90008540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
90008540:	b480      	push	{r7}
90008542:	b095      	sub	sp, #84	; 0x54
90008544:	af00      	add	r7, sp, #0
90008546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
90008548:	687b      	ldr	r3, [r7, #4]
9000854a:	681b      	ldr	r3, [r3, #0]
9000854c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90008550:	e853 3f00 	ldrex	r3, [r3]
90008554:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
90008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90008558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
9000855c:	64fb      	str	r3, [r7, #76]	; 0x4c
9000855e:	687b      	ldr	r3, [r7, #4]
90008560:	681b      	ldr	r3, [r3, #0]
90008562:	461a      	mov	r2, r3
90008564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90008566:	643b      	str	r3, [r7, #64]	; 0x40
90008568:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000856a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
9000856c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
9000856e:	e841 2300 	strex	r3, r2, [r1]
90008572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
90008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90008576:	2b00      	cmp	r3, #0
90008578:	d1e6      	bne.n	90008548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000857a:	687b      	ldr	r3, [r7, #4]
9000857c:	681b      	ldr	r3, [r3, #0]
9000857e:	3308      	adds	r3, #8
90008580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90008582:	6a3b      	ldr	r3, [r7, #32]
90008584:	e853 3f00 	ldrex	r3, [r3]
90008588:	61fb      	str	r3, [r7, #28]
   return(result);
9000858a:	69fa      	ldr	r2, [r7, #28]
9000858c:	4b1e      	ldr	r3, [pc, #120]	; (90008608 <UART_EndRxTransfer+0xc8>)
9000858e:	4013      	ands	r3, r2
90008590:	64bb      	str	r3, [r7, #72]	; 0x48
90008592:	687b      	ldr	r3, [r7, #4]
90008594:	681b      	ldr	r3, [r3, #0]
90008596:	3308      	adds	r3, #8
90008598:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000859a:	62fa      	str	r2, [r7, #44]	; 0x2c
9000859c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000859e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
900085a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900085a2:	e841 2300 	strex	r3, r2, [r1]
900085a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
900085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900085aa:	2b00      	cmp	r3, #0
900085ac:	d1e5      	bne.n	9000857a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
900085ae:	687b      	ldr	r3, [r7, #4]
900085b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900085b2:	2b01      	cmp	r3, #1
900085b4:	d118      	bne.n	900085e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
900085b6:	687b      	ldr	r3, [r7, #4]
900085b8:	681b      	ldr	r3, [r3, #0]
900085ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900085bc:	68fb      	ldr	r3, [r7, #12]
900085be:	e853 3f00 	ldrex	r3, [r3]
900085c2:	60bb      	str	r3, [r7, #8]
   return(result);
900085c4:	68bb      	ldr	r3, [r7, #8]
900085c6:	f023 0310 	bic.w	r3, r3, #16
900085ca:	647b      	str	r3, [r7, #68]	; 0x44
900085cc:	687b      	ldr	r3, [r7, #4]
900085ce:	681b      	ldr	r3, [r3, #0]
900085d0:	461a      	mov	r2, r3
900085d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900085d4:	61bb      	str	r3, [r7, #24]
900085d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900085d8:	6979      	ldr	r1, [r7, #20]
900085da:	69ba      	ldr	r2, [r7, #24]
900085dc:	e841 2300 	strex	r3, r2, [r1]
900085e0:	613b      	str	r3, [r7, #16]
   return(result);
900085e2:	693b      	ldr	r3, [r7, #16]
900085e4:	2b00      	cmp	r3, #0
900085e6:	d1e6      	bne.n	900085b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
900085e8:	687b      	ldr	r3, [r7, #4]
900085ea:	2220      	movs	r2, #32
900085ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900085f0:	687b      	ldr	r3, [r7, #4]
900085f2:	2200      	movs	r2, #0
900085f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
900085f6:	687b      	ldr	r3, [r7, #4]
900085f8:	2200      	movs	r2, #0
900085fa:	675a      	str	r2, [r3, #116]	; 0x74
}
900085fc:	bf00      	nop
900085fe:	3754      	adds	r7, #84	; 0x54
90008600:	46bd      	mov	sp, r7
90008602:	f85d 7b04 	ldr.w	r7, [sp], #4
90008606:	4770      	bx	lr
90008608:	effffffe 	.word	0xeffffffe

9000860c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000860c:	b480      	push	{r7}
9000860e:	b085      	sub	sp, #20
90008610:	af00      	add	r7, sp, #0
90008612:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
90008614:	687b      	ldr	r3, [r7, #4]
90008616:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
9000861a:	2b01      	cmp	r3, #1
9000861c:	d101      	bne.n	90008622 <HAL_UARTEx_DisableFifoMode+0x16>
9000861e:	2302      	movs	r3, #2
90008620:	e027      	b.n	90008672 <HAL_UARTEx_DisableFifoMode+0x66>
90008622:	687b      	ldr	r3, [r7, #4]
90008624:	2201      	movs	r2, #1
90008626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000862a:	687b      	ldr	r3, [r7, #4]
9000862c:	2224      	movs	r2, #36	; 0x24
9000862e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90008632:	687b      	ldr	r3, [r7, #4]
90008634:	681b      	ldr	r3, [r3, #0]
90008636:	681b      	ldr	r3, [r3, #0]
90008638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000863a:	687b      	ldr	r3, [r7, #4]
9000863c:	681b      	ldr	r3, [r3, #0]
9000863e:	681a      	ldr	r2, [r3, #0]
90008640:	687b      	ldr	r3, [r7, #4]
90008642:	681b      	ldr	r3, [r3, #0]
90008644:	f022 0201 	bic.w	r2, r2, #1
90008648:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000864a:	68fb      	ldr	r3, [r7, #12]
9000864c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
90008650:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
90008652:	687b      	ldr	r3, [r7, #4]
90008654:	2200      	movs	r2, #0
90008656:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90008658:	687b      	ldr	r3, [r7, #4]
9000865a:	681b      	ldr	r3, [r3, #0]
9000865c:	68fa      	ldr	r2, [r7, #12]
9000865e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90008660:	687b      	ldr	r3, [r7, #4]
90008662:	2220      	movs	r2, #32
90008664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
90008668:	687b      	ldr	r3, [r7, #4]
9000866a:	2200      	movs	r2, #0
9000866c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
90008670:	2300      	movs	r3, #0
}
90008672:	4618      	mov	r0, r3
90008674:	3714      	adds	r7, #20
90008676:	46bd      	mov	sp, r7
90008678:	f85d 7b04 	ldr.w	r7, [sp], #4
9000867c:	4770      	bx	lr

9000867e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000867e:	b580      	push	{r7, lr}
90008680:	b084      	sub	sp, #16
90008682:	af00      	add	r7, sp, #0
90008684:	6078      	str	r0, [r7, #4]
90008686:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
90008688:	687b      	ldr	r3, [r7, #4]
9000868a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
9000868e:	2b01      	cmp	r3, #1
90008690:	d101      	bne.n	90008696 <HAL_UARTEx_SetTxFifoThreshold+0x18>
90008692:	2302      	movs	r3, #2
90008694:	e02d      	b.n	900086f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
90008696:	687b      	ldr	r3, [r7, #4]
90008698:	2201      	movs	r2, #1
9000869a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000869e:	687b      	ldr	r3, [r7, #4]
900086a0:	2224      	movs	r2, #36	; 0x24
900086a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
900086a6:	687b      	ldr	r3, [r7, #4]
900086a8:	681b      	ldr	r3, [r3, #0]
900086aa:	681b      	ldr	r3, [r3, #0]
900086ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
900086ae:	687b      	ldr	r3, [r7, #4]
900086b0:	681b      	ldr	r3, [r3, #0]
900086b2:	681a      	ldr	r2, [r3, #0]
900086b4:	687b      	ldr	r3, [r7, #4]
900086b6:	681b      	ldr	r3, [r3, #0]
900086b8:	f022 0201 	bic.w	r2, r2, #1
900086bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
900086be:	687b      	ldr	r3, [r7, #4]
900086c0:	681b      	ldr	r3, [r3, #0]
900086c2:	689b      	ldr	r3, [r3, #8]
900086c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
900086c8:	687b      	ldr	r3, [r7, #4]
900086ca:	681b      	ldr	r3, [r3, #0]
900086cc:	683a      	ldr	r2, [r7, #0]
900086ce:	430a      	orrs	r2, r1
900086d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
900086d2:	6878      	ldr	r0, [r7, #4]
900086d4:	f000 f850 	bl	90008778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
900086d8:	687b      	ldr	r3, [r7, #4]
900086da:	681b      	ldr	r3, [r3, #0]
900086dc:	68fa      	ldr	r2, [r7, #12]
900086de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
900086e0:	687b      	ldr	r3, [r7, #4]
900086e2:	2220      	movs	r2, #32
900086e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
900086e8:	687b      	ldr	r3, [r7, #4]
900086ea:	2200      	movs	r2, #0
900086ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
900086f0:	2300      	movs	r3, #0
}
900086f2:	4618      	mov	r0, r3
900086f4:	3710      	adds	r7, #16
900086f6:	46bd      	mov	sp, r7
900086f8:	bd80      	pop	{r7, pc}

900086fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
900086fa:	b580      	push	{r7, lr}
900086fc:	b084      	sub	sp, #16
900086fe:	af00      	add	r7, sp, #0
90008700:	6078      	str	r0, [r7, #4]
90008702:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
90008704:	687b      	ldr	r3, [r7, #4]
90008706:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
9000870a:	2b01      	cmp	r3, #1
9000870c:	d101      	bne.n	90008712 <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000870e:	2302      	movs	r3, #2
90008710:	e02d      	b.n	9000876e <HAL_UARTEx_SetRxFifoThreshold+0x74>
90008712:	687b      	ldr	r3, [r7, #4]
90008714:	2201      	movs	r2, #1
90008716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
9000871a:	687b      	ldr	r3, [r7, #4]
9000871c:	2224      	movs	r2, #36	; 0x24
9000871e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90008722:	687b      	ldr	r3, [r7, #4]
90008724:	681b      	ldr	r3, [r3, #0]
90008726:	681b      	ldr	r3, [r3, #0]
90008728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000872a:	687b      	ldr	r3, [r7, #4]
9000872c:	681b      	ldr	r3, [r3, #0]
9000872e:	681a      	ldr	r2, [r3, #0]
90008730:	687b      	ldr	r3, [r7, #4]
90008732:	681b      	ldr	r3, [r3, #0]
90008734:	f022 0201 	bic.w	r2, r2, #1
90008738:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000873a:	687b      	ldr	r3, [r7, #4]
9000873c:	681b      	ldr	r3, [r3, #0]
9000873e:	689b      	ldr	r3, [r3, #8]
90008740:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
90008744:	687b      	ldr	r3, [r7, #4]
90008746:	681b      	ldr	r3, [r3, #0]
90008748:	683a      	ldr	r2, [r7, #0]
9000874a:	430a      	orrs	r2, r1
9000874c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000874e:	6878      	ldr	r0, [r7, #4]
90008750:	f000 f812 	bl	90008778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90008754:	687b      	ldr	r3, [r7, #4]
90008756:	681b      	ldr	r3, [r3, #0]
90008758:	68fa      	ldr	r2, [r7, #12]
9000875a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000875c:	687b      	ldr	r3, [r7, #4]
9000875e:	2220      	movs	r2, #32
90008760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
90008764:	687b      	ldr	r3, [r7, #4]
90008766:	2200      	movs	r2, #0
90008768:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
9000876c:	2300      	movs	r3, #0
}
9000876e:	4618      	mov	r0, r3
90008770:	3710      	adds	r7, #16
90008772:	46bd      	mov	sp, r7
90008774:	bd80      	pop	{r7, pc}
	...

90008778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
90008778:	b480      	push	{r7}
9000877a:	b085      	sub	sp, #20
9000877c:	af00      	add	r7, sp, #0
9000877e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
90008780:	687b      	ldr	r3, [r7, #4]
90008782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90008784:	2b00      	cmp	r3, #0
90008786:	d108      	bne.n	9000879a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
90008788:	687b      	ldr	r3, [r7, #4]
9000878a:	2201      	movs	r2, #1
9000878c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
90008790:	687b      	ldr	r3, [r7, #4]
90008792:	2201      	movs	r2, #1
90008794:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
90008798:	e031      	b.n	900087fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000879a:	2310      	movs	r3, #16
9000879c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000879e:	2310      	movs	r3, #16
900087a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
900087a2:	687b      	ldr	r3, [r7, #4]
900087a4:	681b      	ldr	r3, [r3, #0]
900087a6:	689b      	ldr	r3, [r3, #8]
900087a8:	0e5b      	lsrs	r3, r3, #25
900087aa:	b2db      	uxtb	r3, r3
900087ac:	f003 0307 	and.w	r3, r3, #7
900087b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
900087b2:	687b      	ldr	r3, [r7, #4]
900087b4:	681b      	ldr	r3, [r3, #0]
900087b6:	689b      	ldr	r3, [r3, #8]
900087b8:	0f5b      	lsrs	r3, r3, #29
900087ba:	b2db      	uxtb	r3, r3
900087bc:	f003 0307 	and.w	r3, r3, #7
900087c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900087c2:	7bbb      	ldrb	r3, [r7, #14]
900087c4:	7b3a      	ldrb	r2, [r7, #12]
900087c6:	4911      	ldr	r1, [pc, #68]	; (9000880c <UARTEx_SetNbDataToProcess+0x94>)
900087c8:	5c8a      	ldrb	r2, [r1, r2]
900087ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
900087ce:	7b3a      	ldrb	r2, [r7, #12]
900087d0:	490f      	ldr	r1, [pc, #60]	; (90008810 <UARTEx_SetNbDataToProcess+0x98>)
900087d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900087d4:	fb93 f3f2 	sdiv	r3, r3, r2
900087d8:	b29a      	uxth	r2, r3
900087da:	687b      	ldr	r3, [r7, #4]
900087dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
900087e0:	7bfb      	ldrb	r3, [r7, #15]
900087e2:	7b7a      	ldrb	r2, [r7, #13]
900087e4:	4909      	ldr	r1, [pc, #36]	; (9000880c <UARTEx_SetNbDataToProcess+0x94>)
900087e6:	5c8a      	ldrb	r2, [r1, r2]
900087e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
900087ec:	7b7a      	ldrb	r2, [r7, #13]
900087ee:	4908      	ldr	r1, [pc, #32]	; (90008810 <UARTEx_SetNbDataToProcess+0x98>)
900087f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
900087f2:	fb93 f3f2 	sdiv	r3, r3, r2
900087f6:	b29a      	uxth	r2, r3
900087f8:	687b      	ldr	r3, [r7, #4]
900087fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
900087fe:	bf00      	nop
90008800:	3714      	adds	r7, #20
90008802:	46bd      	mov	sp, r7
90008804:	f85d 7b04 	ldr.w	r7, [sp], #4
90008808:	4770      	bx	lr
9000880a:	bf00      	nop
9000880c:	900140a0 	.word	0x900140a0
90008810:	900140a8 	.word	0x900140a8

90008814 <__NVIC_SetPriority>:
{
90008814:	b480      	push	{r7}
90008816:	b083      	sub	sp, #12
90008818:	af00      	add	r7, sp, #0
9000881a:	4603      	mov	r3, r0
9000881c:	6039      	str	r1, [r7, #0]
9000881e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90008820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90008824:	2b00      	cmp	r3, #0
90008826:	db0a      	blt.n	9000883e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90008828:	683b      	ldr	r3, [r7, #0]
9000882a:	b2da      	uxtb	r2, r3
9000882c:	490c      	ldr	r1, [pc, #48]	; (90008860 <__NVIC_SetPriority+0x4c>)
9000882e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90008832:	0112      	lsls	r2, r2, #4
90008834:	b2d2      	uxtb	r2, r2
90008836:	440b      	add	r3, r1
90008838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
9000883c:	e00a      	b.n	90008854 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000883e:	683b      	ldr	r3, [r7, #0]
90008840:	b2da      	uxtb	r2, r3
90008842:	4908      	ldr	r1, [pc, #32]	; (90008864 <__NVIC_SetPriority+0x50>)
90008844:	88fb      	ldrh	r3, [r7, #6]
90008846:	f003 030f 	and.w	r3, r3, #15
9000884a:	3b04      	subs	r3, #4
9000884c:	0112      	lsls	r2, r2, #4
9000884e:	b2d2      	uxtb	r2, r2
90008850:	440b      	add	r3, r1
90008852:	761a      	strb	r2, [r3, #24]
}
90008854:	bf00      	nop
90008856:	370c      	adds	r7, #12
90008858:	46bd      	mov	sp, r7
9000885a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000885e:	4770      	bx	lr
90008860:	e000e100 	.word	0xe000e100
90008864:	e000ed00 	.word	0xe000ed00

90008868 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
90008868:	b580      	push	{r7, lr}
9000886a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
9000886c:	4b05      	ldr	r3, [pc, #20]	; (90008884 <SysTick_Handler+0x1c>)
9000886e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
90008870:	f002 f836 	bl	9000a8e0 <xTaskGetSchedulerState>
90008874:	4603      	mov	r3, r0
90008876:	2b01      	cmp	r3, #1
90008878:	d001      	beq.n	9000887e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
9000887a:	f002 ff1d 	bl	9000b6b8 <xPortSysTickHandler>
  }
}
9000887e:	bf00      	nop
90008880:	bd80      	pop	{r7, pc}
90008882:	bf00      	nop
90008884:	e000e010 	.word	0xe000e010

90008888 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
90008888:	b580      	push	{r7, lr}
9000888a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
9000888c:	2100      	movs	r1, #0
9000888e:	f06f 0004 	mvn.w	r0, #4
90008892:	f7ff ffbf 	bl	90008814 <__NVIC_SetPriority>
#endif
}
90008896:	bf00      	nop
90008898:	bd80      	pop	{r7, pc}
	...

9000889c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
9000889c:	b480      	push	{r7}
9000889e:	b083      	sub	sp, #12
900088a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900088a2:	f3ef 8305 	mrs	r3, IPSR
900088a6:	603b      	str	r3, [r7, #0]
  return(result);
900088a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
900088aa:	2b00      	cmp	r3, #0
900088ac:	d003      	beq.n	900088b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
900088ae:	f06f 0305 	mvn.w	r3, #5
900088b2:	607b      	str	r3, [r7, #4]
900088b4:	e00c      	b.n	900088d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
900088b6:	4b0a      	ldr	r3, [pc, #40]	; (900088e0 <osKernelInitialize+0x44>)
900088b8:	681b      	ldr	r3, [r3, #0]
900088ba:	2b00      	cmp	r3, #0
900088bc:	d105      	bne.n	900088ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
900088be:	4b08      	ldr	r3, [pc, #32]	; (900088e0 <osKernelInitialize+0x44>)
900088c0:	2201      	movs	r2, #1
900088c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
900088c4:	2300      	movs	r3, #0
900088c6:	607b      	str	r3, [r7, #4]
900088c8:	e002      	b.n	900088d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
900088ca:	f04f 33ff 	mov.w	r3, #4294967295
900088ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
900088d0:	687b      	ldr	r3, [r7, #4]
}
900088d2:	4618      	mov	r0, r3
900088d4:	370c      	adds	r7, #12
900088d6:	46bd      	mov	sp, r7
900088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900088dc:	4770      	bx	lr
900088de:	bf00      	nop
900088e0:	24000628 	.word	0x24000628

900088e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
900088e4:	b580      	push	{r7, lr}
900088e6:	b082      	sub	sp, #8
900088e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900088ea:	f3ef 8305 	mrs	r3, IPSR
900088ee:	603b      	str	r3, [r7, #0]
  return(result);
900088f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
900088f2:	2b00      	cmp	r3, #0
900088f4:	d003      	beq.n	900088fe <osKernelStart+0x1a>
    stat = osErrorISR;
900088f6:	f06f 0305 	mvn.w	r3, #5
900088fa:	607b      	str	r3, [r7, #4]
900088fc:	e010      	b.n	90008920 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
900088fe:	4b0b      	ldr	r3, [pc, #44]	; (9000892c <osKernelStart+0x48>)
90008900:	681b      	ldr	r3, [r3, #0]
90008902:	2b01      	cmp	r3, #1
90008904:	d109      	bne.n	9000891a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
90008906:	f7ff ffbf 	bl	90008888 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000890a:	4b08      	ldr	r3, [pc, #32]	; (9000892c <osKernelStart+0x48>)
9000890c:	2202      	movs	r2, #2
9000890e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
90008910:	f001 fb8a 	bl	9000a028 <vTaskStartScheduler>
      stat = osOK;
90008914:	2300      	movs	r3, #0
90008916:	607b      	str	r3, [r7, #4]
90008918:	e002      	b.n	90008920 <osKernelStart+0x3c>
    } else {
      stat = osError;
9000891a:	f04f 33ff 	mov.w	r3, #4294967295
9000891e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
90008920:	687b      	ldr	r3, [r7, #4]
}
90008922:	4618      	mov	r0, r3
90008924:	3708      	adds	r7, #8
90008926:	46bd      	mov	sp, r7
90008928:	bd80      	pop	{r7, pc}
9000892a:	bf00      	nop
9000892c:	24000628 	.word	0x24000628

90008930 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
90008930:	b580      	push	{r7, lr}
90008932:	b08e      	sub	sp, #56	; 0x38
90008934:	af04      	add	r7, sp, #16
90008936:	60f8      	str	r0, [r7, #12]
90008938:	60b9      	str	r1, [r7, #8]
9000893a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000893c:	2300      	movs	r3, #0
9000893e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90008940:	f3ef 8305 	mrs	r3, IPSR
90008944:	617b      	str	r3, [r7, #20]
  return(result);
90008946:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
90008948:	2b00      	cmp	r3, #0
9000894a:	d17e      	bne.n	90008a4a <osThreadNew+0x11a>
9000894c:	68fb      	ldr	r3, [r7, #12]
9000894e:	2b00      	cmp	r3, #0
90008950:	d07b      	beq.n	90008a4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
90008952:	2380      	movs	r3, #128	; 0x80
90008954:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
90008956:	2318      	movs	r3, #24
90008958:	61fb      	str	r3, [r7, #28]

    name = NULL;
9000895a:	2300      	movs	r3, #0
9000895c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
9000895e:	f04f 33ff 	mov.w	r3, #4294967295
90008962:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
90008964:	687b      	ldr	r3, [r7, #4]
90008966:	2b00      	cmp	r3, #0
90008968:	d045      	beq.n	900089f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
9000896a:	687b      	ldr	r3, [r7, #4]
9000896c:	681b      	ldr	r3, [r3, #0]
9000896e:	2b00      	cmp	r3, #0
90008970:	d002      	beq.n	90008978 <osThreadNew+0x48>
        name = attr->name;
90008972:	687b      	ldr	r3, [r7, #4]
90008974:	681b      	ldr	r3, [r3, #0]
90008976:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
90008978:	687b      	ldr	r3, [r7, #4]
9000897a:	699b      	ldr	r3, [r3, #24]
9000897c:	2b00      	cmp	r3, #0
9000897e:	d002      	beq.n	90008986 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
90008980:	687b      	ldr	r3, [r7, #4]
90008982:	699b      	ldr	r3, [r3, #24]
90008984:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
90008986:	69fb      	ldr	r3, [r7, #28]
90008988:	2b00      	cmp	r3, #0
9000898a:	d008      	beq.n	9000899e <osThreadNew+0x6e>
9000898c:	69fb      	ldr	r3, [r7, #28]
9000898e:	2b38      	cmp	r3, #56	; 0x38
90008990:	d805      	bhi.n	9000899e <osThreadNew+0x6e>
90008992:	687b      	ldr	r3, [r7, #4]
90008994:	685b      	ldr	r3, [r3, #4]
90008996:	f003 0301 	and.w	r3, r3, #1
9000899a:	2b00      	cmp	r3, #0
9000899c:	d001      	beq.n	900089a2 <osThreadNew+0x72>
        return (NULL);
9000899e:	2300      	movs	r3, #0
900089a0:	e054      	b.n	90008a4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
900089a2:	687b      	ldr	r3, [r7, #4]
900089a4:	695b      	ldr	r3, [r3, #20]
900089a6:	2b00      	cmp	r3, #0
900089a8:	d003      	beq.n	900089b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
900089aa:	687b      	ldr	r3, [r7, #4]
900089ac:	695b      	ldr	r3, [r3, #20]
900089ae:	089b      	lsrs	r3, r3, #2
900089b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
900089b2:	687b      	ldr	r3, [r7, #4]
900089b4:	689b      	ldr	r3, [r3, #8]
900089b6:	2b00      	cmp	r3, #0
900089b8:	d00e      	beq.n	900089d8 <osThreadNew+0xa8>
900089ba:	687b      	ldr	r3, [r7, #4]
900089bc:	68db      	ldr	r3, [r3, #12]
900089be:	2bbb      	cmp	r3, #187	; 0xbb
900089c0:	d90a      	bls.n	900089d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
900089c2:	687b      	ldr	r3, [r7, #4]
900089c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
900089c6:	2b00      	cmp	r3, #0
900089c8:	d006      	beq.n	900089d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
900089ca:	687b      	ldr	r3, [r7, #4]
900089cc:	695b      	ldr	r3, [r3, #20]
900089ce:	2b00      	cmp	r3, #0
900089d0:	d002      	beq.n	900089d8 <osThreadNew+0xa8>
        mem = 1;
900089d2:	2301      	movs	r3, #1
900089d4:	61bb      	str	r3, [r7, #24]
900089d6:	e010      	b.n	900089fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
900089d8:	687b      	ldr	r3, [r7, #4]
900089da:	689b      	ldr	r3, [r3, #8]
900089dc:	2b00      	cmp	r3, #0
900089de:	d10c      	bne.n	900089fa <osThreadNew+0xca>
900089e0:	687b      	ldr	r3, [r7, #4]
900089e2:	68db      	ldr	r3, [r3, #12]
900089e4:	2b00      	cmp	r3, #0
900089e6:	d108      	bne.n	900089fa <osThreadNew+0xca>
900089e8:	687b      	ldr	r3, [r7, #4]
900089ea:	691b      	ldr	r3, [r3, #16]
900089ec:	2b00      	cmp	r3, #0
900089ee:	d104      	bne.n	900089fa <osThreadNew+0xca>
          mem = 0;
900089f0:	2300      	movs	r3, #0
900089f2:	61bb      	str	r3, [r7, #24]
900089f4:	e001      	b.n	900089fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
900089f6:	2300      	movs	r3, #0
900089f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
900089fa:	69bb      	ldr	r3, [r7, #24]
900089fc:	2b01      	cmp	r3, #1
900089fe:	d110      	bne.n	90008a22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
90008a00:	687b      	ldr	r3, [r7, #4]
90008a02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
90008a04:	687a      	ldr	r2, [r7, #4]
90008a06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
90008a08:	9202      	str	r2, [sp, #8]
90008a0a:	9301      	str	r3, [sp, #4]
90008a0c:	69fb      	ldr	r3, [r7, #28]
90008a0e:	9300      	str	r3, [sp, #0]
90008a10:	68bb      	ldr	r3, [r7, #8]
90008a12:	6a3a      	ldr	r2, [r7, #32]
90008a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
90008a16:	68f8      	ldr	r0, [r7, #12]
90008a18:	f001 f8a8 	bl	90009b6c <xTaskCreateStatic>
90008a1c:	4603      	mov	r3, r0
90008a1e:	613b      	str	r3, [r7, #16]
90008a20:	e013      	b.n	90008a4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
90008a22:	69bb      	ldr	r3, [r7, #24]
90008a24:	2b00      	cmp	r3, #0
90008a26:	d110      	bne.n	90008a4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
90008a28:	6a3b      	ldr	r3, [r7, #32]
90008a2a:	b29a      	uxth	r2, r3
90008a2c:	f107 0310 	add.w	r3, r7, #16
90008a30:	9301      	str	r3, [sp, #4]
90008a32:	69fb      	ldr	r3, [r7, #28]
90008a34:	9300      	str	r3, [sp, #0]
90008a36:	68bb      	ldr	r3, [r7, #8]
90008a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
90008a3a:	68f8      	ldr	r0, [r7, #12]
90008a3c:	f001 f8f3 	bl	90009c26 <xTaskCreate>
90008a40:	4603      	mov	r3, r0
90008a42:	2b01      	cmp	r3, #1
90008a44:	d001      	beq.n	90008a4a <osThreadNew+0x11a>
            hTask = NULL;
90008a46:	2300      	movs	r3, #0
90008a48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
90008a4a:	693b      	ldr	r3, [r7, #16]
}
90008a4c:	4618      	mov	r0, r3
90008a4e:	3728      	adds	r7, #40	; 0x28
90008a50:	46bd      	mov	sp, r7
90008a52:	bd80      	pop	{r7, pc}

90008a54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
90008a54:	b580      	push	{r7, lr}
90008a56:	b084      	sub	sp, #16
90008a58:	af00      	add	r7, sp, #0
90008a5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90008a5c:	f3ef 8305 	mrs	r3, IPSR
90008a60:	60bb      	str	r3, [r7, #8]
  return(result);
90008a62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
90008a64:	2b00      	cmp	r3, #0
90008a66:	d003      	beq.n	90008a70 <osDelay+0x1c>
    stat = osErrorISR;
90008a68:	f06f 0305 	mvn.w	r3, #5
90008a6c:	60fb      	str	r3, [r7, #12]
90008a6e:	e007      	b.n	90008a80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
90008a70:	2300      	movs	r3, #0
90008a72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
90008a74:	687b      	ldr	r3, [r7, #4]
90008a76:	2b00      	cmp	r3, #0
90008a78:	d002      	beq.n	90008a80 <osDelay+0x2c>
      vTaskDelay(ticks);
90008a7a:	6878      	ldr	r0, [r7, #4]
90008a7c:	f001 faa0 	bl	90009fc0 <vTaskDelay>
    }
  }

  return (stat);
90008a80:	68fb      	ldr	r3, [r7, #12]
}
90008a82:	4618      	mov	r0, r3
90008a84:	3710      	adds	r7, #16
90008a86:	46bd      	mov	sp, r7
90008a88:	bd80      	pop	{r7, pc}
	...

90008a8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
90008a8c:	b480      	push	{r7}
90008a8e:	b085      	sub	sp, #20
90008a90:	af00      	add	r7, sp, #0
90008a92:	60f8      	str	r0, [r7, #12]
90008a94:	60b9      	str	r1, [r7, #8]
90008a96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
90008a98:	68fb      	ldr	r3, [r7, #12]
90008a9a:	4a07      	ldr	r2, [pc, #28]	; (90008ab8 <vApplicationGetIdleTaskMemory+0x2c>)
90008a9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
90008a9e:	68bb      	ldr	r3, [r7, #8]
90008aa0:	4a06      	ldr	r2, [pc, #24]	; (90008abc <vApplicationGetIdleTaskMemory+0x30>)
90008aa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
90008aa4:	687b      	ldr	r3, [r7, #4]
90008aa6:	2280      	movs	r2, #128	; 0x80
90008aa8:	601a      	str	r2, [r3, #0]
}
90008aaa:	bf00      	nop
90008aac:	3714      	adds	r7, #20
90008aae:	46bd      	mov	sp, r7
90008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
90008ab4:	4770      	bx	lr
90008ab6:	bf00      	nop
90008ab8:	2400062c 	.word	0x2400062c
90008abc:	240006e8 	.word	0x240006e8

90008ac0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
90008ac0:	b480      	push	{r7}
90008ac2:	b085      	sub	sp, #20
90008ac4:	af00      	add	r7, sp, #0
90008ac6:	60f8      	str	r0, [r7, #12]
90008ac8:	60b9      	str	r1, [r7, #8]
90008aca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
90008acc:	68fb      	ldr	r3, [r7, #12]
90008ace:	4a07      	ldr	r2, [pc, #28]	; (90008aec <vApplicationGetTimerTaskMemory+0x2c>)
90008ad0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
90008ad2:	68bb      	ldr	r3, [r7, #8]
90008ad4:	4a06      	ldr	r2, [pc, #24]	; (90008af0 <vApplicationGetTimerTaskMemory+0x30>)
90008ad6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
90008ad8:	687b      	ldr	r3, [r7, #4]
90008ada:	f44f 7280 	mov.w	r2, #256	; 0x100
90008ade:	601a      	str	r2, [r3, #0]
}
90008ae0:	bf00      	nop
90008ae2:	3714      	adds	r7, #20
90008ae4:	46bd      	mov	sp, r7
90008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
90008aea:	4770      	bx	lr
90008aec:	240008e8 	.word	0x240008e8
90008af0:	240009a4 	.word	0x240009a4

90008af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
90008af4:	b480      	push	{r7}
90008af6:	b083      	sub	sp, #12
90008af8:	af00      	add	r7, sp, #0
90008afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90008afc:	687b      	ldr	r3, [r7, #4]
90008afe:	f103 0208 	add.w	r2, r3, #8
90008b02:	687b      	ldr	r3, [r7, #4]
90008b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
90008b06:	687b      	ldr	r3, [r7, #4]
90008b08:	f04f 32ff 	mov.w	r2, #4294967295
90008b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90008b0e:	687b      	ldr	r3, [r7, #4]
90008b10:	f103 0208 	add.w	r2, r3, #8
90008b14:	687b      	ldr	r3, [r7, #4]
90008b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90008b18:	687b      	ldr	r3, [r7, #4]
90008b1a:	f103 0208 	add.w	r2, r3, #8
90008b1e:	687b      	ldr	r3, [r7, #4]
90008b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
90008b22:	687b      	ldr	r3, [r7, #4]
90008b24:	2200      	movs	r2, #0
90008b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
90008b28:	bf00      	nop
90008b2a:	370c      	adds	r7, #12
90008b2c:	46bd      	mov	sp, r7
90008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b32:	4770      	bx	lr

90008b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
90008b34:	b480      	push	{r7}
90008b36:	b083      	sub	sp, #12
90008b38:	af00      	add	r7, sp, #0
90008b3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
90008b3c:	687b      	ldr	r3, [r7, #4]
90008b3e:	2200      	movs	r2, #0
90008b40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
90008b42:	bf00      	nop
90008b44:	370c      	adds	r7, #12
90008b46:	46bd      	mov	sp, r7
90008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b4c:	4770      	bx	lr

90008b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90008b4e:	b480      	push	{r7}
90008b50:	b085      	sub	sp, #20
90008b52:	af00      	add	r7, sp, #0
90008b54:	6078      	str	r0, [r7, #4]
90008b56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
90008b58:	687b      	ldr	r3, [r7, #4]
90008b5a:	685b      	ldr	r3, [r3, #4]
90008b5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
90008b5e:	683b      	ldr	r3, [r7, #0]
90008b60:	68fa      	ldr	r2, [r7, #12]
90008b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
90008b64:	68fb      	ldr	r3, [r7, #12]
90008b66:	689a      	ldr	r2, [r3, #8]
90008b68:	683b      	ldr	r3, [r7, #0]
90008b6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
90008b6c:	68fb      	ldr	r3, [r7, #12]
90008b6e:	689b      	ldr	r3, [r3, #8]
90008b70:	683a      	ldr	r2, [r7, #0]
90008b72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
90008b74:	68fb      	ldr	r3, [r7, #12]
90008b76:	683a      	ldr	r2, [r7, #0]
90008b78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
90008b7a:	683b      	ldr	r3, [r7, #0]
90008b7c:	687a      	ldr	r2, [r7, #4]
90008b7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
90008b80:	687b      	ldr	r3, [r7, #4]
90008b82:	681b      	ldr	r3, [r3, #0]
90008b84:	1c5a      	adds	r2, r3, #1
90008b86:	687b      	ldr	r3, [r7, #4]
90008b88:	601a      	str	r2, [r3, #0]
}
90008b8a:	bf00      	nop
90008b8c:	3714      	adds	r7, #20
90008b8e:	46bd      	mov	sp, r7
90008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
90008b94:	4770      	bx	lr

90008b96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90008b96:	b480      	push	{r7}
90008b98:	b085      	sub	sp, #20
90008b9a:	af00      	add	r7, sp, #0
90008b9c:	6078      	str	r0, [r7, #4]
90008b9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
90008ba0:	683b      	ldr	r3, [r7, #0]
90008ba2:	681b      	ldr	r3, [r3, #0]
90008ba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
90008ba6:	68bb      	ldr	r3, [r7, #8]
90008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
90008bac:	d103      	bne.n	90008bb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
90008bae:	687b      	ldr	r3, [r7, #4]
90008bb0:	691b      	ldr	r3, [r3, #16]
90008bb2:	60fb      	str	r3, [r7, #12]
90008bb4:	e00c      	b.n	90008bd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
90008bb6:	687b      	ldr	r3, [r7, #4]
90008bb8:	3308      	adds	r3, #8
90008bba:	60fb      	str	r3, [r7, #12]
90008bbc:	e002      	b.n	90008bc4 <vListInsert+0x2e>
90008bbe:	68fb      	ldr	r3, [r7, #12]
90008bc0:	685b      	ldr	r3, [r3, #4]
90008bc2:	60fb      	str	r3, [r7, #12]
90008bc4:	68fb      	ldr	r3, [r7, #12]
90008bc6:	685b      	ldr	r3, [r3, #4]
90008bc8:	681b      	ldr	r3, [r3, #0]
90008bca:	68ba      	ldr	r2, [r7, #8]
90008bcc:	429a      	cmp	r2, r3
90008bce:	d2f6      	bcs.n	90008bbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
90008bd0:	68fb      	ldr	r3, [r7, #12]
90008bd2:	685a      	ldr	r2, [r3, #4]
90008bd4:	683b      	ldr	r3, [r7, #0]
90008bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
90008bd8:	683b      	ldr	r3, [r7, #0]
90008bda:	685b      	ldr	r3, [r3, #4]
90008bdc:	683a      	ldr	r2, [r7, #0]
90008bde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
90008be0:	683b      	ldr	r3, [r7, #0]
90008be2:	68fa      	ldr	r2, [r7, #12]
90008be4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
90008be6:	68fb      	ldr	r3, [r7, #12]
90008be8:	683a      	ldr	r2, [r7, #0]
90008bea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
90008bec:	683b      	ldr	r3, [r7, #0]
90008bee:	687a      	ldr	r2, [r7, #4]
90008bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
90008bf2:	687b      	ldr	r3, [r7, #4]
90008bf4:	681b      	ldr	r3, [r3, #0]
90008bf6:	1c5a      	adds	r2, r3, #1
90008bf8:	687b      	ldr	r3, [r7, #4]
90008bfa:	601a      	str	r2, [r3, #0]
}
90008bfc:	bf00      	nop
90008bfe:	3714      	adds	r7, #20
90008c00:	46bd      	mov	sp, r7
90008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
90008c06:	4770      	bx	lr

90008c08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
90008c08:	b480      	push	{r7}
90008c0a:	b085      	sub	sp, #20
90008c0c:	af00      	add	r7, sp, #0
90008c0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
90008c10:	687b      	ldr	r3, [r7, #4]
90008c12:	691b      	ldr	r3, [r3, #16]
90008c14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
90008c16:	687b      	ldr	r3, [r7, #4]
90008c18:	685b      	ldr	r3, [r3, #4]
90008c1a:	687a      	ldr	r2, [r7, #4]
90008c1c:	6892      	ldr	r2, [r2, #8]
90008c1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
90008c20:	687b      	ldr	r3, [r7, #4]
90008c22:	689b      	ldr	r3, [r3, #8]
90008c24:	687a      	ldr	r2, [r7, #4]
90008c26:	6852      	ldr	r2, [r2, #4]
90008c28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
90008c2a:	68fb      	ldr	r3, [r7, #12]
90008c2c:	685b      	ldr	r3, [r3, #4]
90008c2e:	687a      	ldr	r2, [r7, #4]
90008c30:	429a      	cmp	r2, r3
90008c32:	d103      	bne.n	90008c3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
90008c34:	687b      	ldr	r3, [r7, #4]
90008c36:	689a      	ldr	r2, [r3, #8]
90008c38:	68fb      	ldr	r3, [r7, #12]
90008c3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
90008c3c:	687b      	ldr	r3, [r7, #4]
90008c3e:	2200      	movs	r2, #0
90008c40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
90008c42:	68fb      	ldr	r3, [r7, #12]
90008c44:	681b      	ldr	r3, [r3, #0]
90008c46:	1e5a      	subs	r2, r3, #1
90008c48:	68fb      	ldr	r3, [r7, #12]
90008c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
90008c4c:	68fb      	ldr	r3, [r7, #12]
90008c4e:	681b      	ldr	r3, [r3, #0]
}
90008c50:	4618      	mov	r0, r3
90008c52:	3714      	adds	r7, #20
90008c54:	46bd      	mov	sp, r7
90008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
90008c5a:	4770      	bx	lr

90008c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
90008c5c:	b580      	push	{r7, lr}
90008c5e:	b084      	sub	sp, #16
90008c60:	af00      	add	r7, sp, #0
90008c62:	6078      	str	r0, [r7, #4]
90008c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
90008c66:	687b      	ldr	r3, [r7, #4]
90008c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
90008c6a:	68fb      	ldr	r3, [r7, #12]
90008c6c:	2b00      	cmp	r3, #0
90008c6e:	d10a      	bne.n	90008c86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
90008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
90008c74:	f383 8811 	msr	BASEPRI, r3
90008c78:	f3bf 8f6f 	isb	sy
90008c7c:	f3bf 8f4f 	dsb	sy
90008c80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
90008c82:	bf00      	nop
90008c84:	e7fe      	b.n	90008c84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
90008c86:	f002 fc85 	bl	9000b594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90008c8a:	68fb      	ldr	r3, [r7, #12]
90008c8c:	681a      	ldr	r2, [r3, #0]
90008c8e:	68fb      	ldr	r3, [r7, #12]
90008c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90008c92:	68f9      	ldr	r1, [r7, #12]
90008c94:	6c09      	ldr	r1, [r1, #64]	; 0x40
90008c96:	fb01 f303 	mul.w	r3, r1, r3
90008c9a:	441a      	add	r2, r3
90008c9c:	68fb      	ldr	r3, [r7, #12]
90008c9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
90008ca0:	68fb      	ldr	r3, [r7, #12]
90008ca2:	2200      	movs	r2, #0
90008ca4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
90008ca6:	68fb      	ldr	r3, [r7, #12]
90008ca8:	681a      	ldr	r2, [r3, #0]
90008caa:	68fb      	ldr	r3, [r7, #12]
90008cac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90008cae:	68fb      	ldr	r3, [r7, #12]
90008cb0:	681a      	ldr	r2, [r3, #0]
90008cb2:	68fb      	ldr	r3, [r7, #12]
90008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90008cb6:	3b01      	subs	r3, #1
90008cb8:	68f9      	ldr	r1, [r7, #12]
90008cba:	6c09      	ldr	r1, [r1, #64]	; 0x40
90008cbc:	fb01 f303 	mul.w	r3, r1, r3
90008cc0:	441a      	add	r2, r3
90008cc2:	68fb      	ldr	r3, [r7, #12]
90008cc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
90008cc6:	68fb      	ldr	r3, [r7, #12]
90008cc8:	22ff      	movs	r2, #255	; 0xff
90008cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90008cce:	68fb      	ldr	r3, [r7, #12]
90008cd0:	22ff      	movs	r2, #255	; 0xff
90008cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
90008cd6:	683b      	ldr	r3, [r7, #0]
90008cd8:	2b00      	cmp	r3, #0
90008cda:	d114      	bne.n	90008d06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90008cdc:	68fb      	ldr	r3, [r7, #12]
90008cde:	691b      	ldr	r3, [r3, #16]
90008ce0:	2b00      	cmp	r3, #0
90008ce2:	d01a      	beq.n	90008d1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90008ce4:	68fb      	ldr	r3, [r7, #12]
90008ce6:	3310      	adds	r3, #16
90008ce8:	4618      	mov	r0, r3
90008cea:	f001 fc37 	bl	9000a55c <xTaskRemoveFromEventList>
90008cee:	4603      	mov	r3, r0
90008cf0:	2b00      	cmp	r3, #0
90008cf2:	d012      	beq.n	90008d1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
90008cf4:	4b0c      	ldr	r3, [pc, #48]	; (90008d28 <xQueueGenericReset+0xcc>)
90008cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90008cfa:	601a      	str	r2, [r3, #0]
90008cfc:	f3bf 8f4f 	dsb	sy
90008d00:	f3bf 8f6f 	isb	sy
90008d04:	e009      	b.n	90008d1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90008d06:	68fb      	ldr	r3, [r7, #12]
90008d08:	3310      	adds	r3, #16
90008d0a:	4618      	mov	r0, r3
90008d0c:	f7ff fef2 	bl	90008af4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90008d10:	68fb      	ldr	r3, [r7, #12]
90008d12:	3324      	adds	r3, #36	; 0x24
90008d14:	4618      	mov	r0, r3
90008d16:	f7ff feed 	bl	90008af4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
90008d1a:	f002 fc6b 	bl	9000b5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
90008d1e:	2301      	movs	r3, #1
}
90008d20:	4618      	mov	r0, r3
90008d22:	3710      	adds	r7, #16
90008d24:	46bd      	mov	sp, r7
90008d26:	bd80      	pop	{r7, pc}
90008d28:	e000ed04 	.word	0xe000ed04

90008d2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
90008d2c:	b580      	push	{r7, lr}
90008d2e:	b08e      	sub	sp, #56	; 0x38
90008d30:	af02      	add	r7, sp, #8
90008d32:	60f8      	str	r0, [r7, #12]
90008d34:	60b9      	str	r1, [r7, #8]
90008d36:	607a      	str	r2, [r7, #4]
90008d38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90008d3a:	68fb      	ldr	r3, [r7, #12]
90008d3c:	2b00      	cmp	r3, #0
90008d3e:	d10a      	bne.n	90008d56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
90008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
90008d44:	f383 8811 	msr	BASEPRI, r3
90008d48:	f3bf 8f6f 	isb	sy
90008d4c:	f3bf 8f4f 	dsb	sy
90008d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
90008d52:	bf00      	nop
90008d54:	e7fe      	b.n	90008d54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
90008d56:	683b      	ldr	r3, [r7, #0]
90008d58:	2b00      	cmp	r3, #0
90008d5a:	d10a      	bne.n	90008d72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
90008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
90008d60:	f383 8811 	msr	BASEPRI, r3
90008d64:	f3bf 8f6f 	isb	sy
90008d68:	f3bf 8f4f 	dsb	sy
90008d6c:	627b      	str	r3, [r7, #36]	; 0x24
}
90008d6e:	bf00      	nop
90008d70:	e7fe      	b.n	90008d70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
90008d72:	687b      	ldr	r3, [r7, #4]
90008d74:	2b00      	cmp	r3, #0
90008d76:	d002      	beq.n	90008d7e <xQueueGenericCreateStatic+0x52>
90008d78:	68bb      	ldr	r3, [r7, #8]
90008d7a:	2b00      	cmp	r3, #0
90008d7c:	d001      	beq.n	90008d82 <xQueueGenericCreateStatic+0x56>
90008d7e:	2301      	movs	r3, #1
90008d80:	e000      	b.n	90008d84 <xQueueGenericCreateStatic+0x58>
90008d82:	2300      	movs	r3, #0
90008d84:	2b00      	cmp	r3, #0
90008d86:	d10a      	bne.n	90008d9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
90008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
90008d8c:	f383 8811 	msr	BASEPRI, r3
90008d90:	f3bf 8f6f 	isb	sy
90008d94:	f3bf 8f4f 	dsb	sy
90008d98:	623b      	str	r3, [r7, #32]
}
90008d9a:	bf00      	nop
90008d9c:	e7fe      	b.n	90008d9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
90008d9e:	687b      	ldr	r3, [r7, #4]
90008da0:	2b00      	cmp	r3, #0
90008da2:	d102      	bne.n	90008daa <xQueueGenericCreateStatic+0x7e>
90008da4:	68bb      	ldr	r3, [r7, #8]
90008da6:	2b00      	cmp	r3, #0
90008da8:	d101      	bne.n	90008dae <xQueueGenericCreateStatic+0x82>
90008daa:	2301      	movs	r3, #1
90008dac:	e000      	b.n	90008db0 <xQueueGenericCreateStatic+0x84>
90008dae:	2300      	movs	r3, #0
90008db0:	2b00      	cmp	r3, #0
90008db2:	d10a      	bne.n	90008dca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
90008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
90008db8:	f383 8811 	msr	BASEPRI, r3
90008dbc:	f3bf 8f6f 	isb	sy
90008dc0:	f3bf 8f4f 	dsb	sy
90008dc4:	61fb      	str	r3, [r7, #28]
}
90008dc6:	bf00      	nop
90008dc8:	e7fe      	b.n	90008dc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
90008dca:	2350      	movs	r3, #80	; 0x50
90008dcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
90008dce:	697b      	ldr	r3, [r7, #20]
90008dd0:	2b50      	cmp	r3, #80	; 0x50
90008dd2:	d00a      	beq.n	90008dea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
90008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
90008dd8:	f383 8811 	msr	BASEPRI, r3
90008ddc:	f3bf 8f6f 	isb	sy
90008de0:	f3bf 8f4f 	dsb	sy
90008de4:	61bb      	str	r3, [r7, #24]
}
90008de6:	bf00      	nop
90008de8:	e7fe      	b.n	90008de8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90008dea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
90008dec:	683b      	ldr	r3, [r7, #0]
90008dee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
90008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008df2:	2b00      	cmp	r3, #0
90008df4:	d00d      	beq.n	90008e12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
90008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008df8:	2201      	movs	r2, #1
90008dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
90008dfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
90008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90008e04:	9300      	str	r3, [sp, #0]
90008e06:	4613      	mov	r3, r2
90008e08:	687a      	ldr	r2, [r7, #4]
90008e0a:	68b9      	ldr	r1, [r7, #8]
90008e0c:	68f8      	ldr	r0, [r7, #12]
90008e0e:	f000 f83f 	bl	90008e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
90008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
90008e14:	4618      	mov	r0, r3
90008e16:	3730      	adds	r7, #48	; 0x30
90008e18:	46bd      	mov	sp, r7
90008e1a:	bd80      	pop	{r7, pc}

90008e1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
90008e1c:	b580      	push	{r7, lr}
90008e1e:	b08a      	sub	sp, #40	; 0x28
90008e20:	af02      	add	r7, sp, #8
90008e22:	60f8      	str	r0, [r7, #12]
90008e24:	60b9      	str	r1, [r7, #8]
90008e26:	4613      	mov	r3, r2
90008e28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90008e2a:	68fb      	ldr	r3, [r7, #12]
90008e2c:	2b00      	cmp	r3, #0
90008e2e:	d10a      	bne.n	90008e46 <xQueueGenericCreate+0x2a>
	__asm volatile
90008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
90008e34:	f383 8811 	msr	BASEPRI, r3
90008e38:	f3bf 8f6f 	isb	sy
90008e3c:	f3bf 8f4f 	dsb	sy
90008e40:	613b      	str	r3, [r7, #16]
}
90008e42:	bf00      	nop
90008e44:	e7fe      	b.n	90008e44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90008e46:	68fb      	ldr	r3, [r7, #12]
90008e48:	68ba      	ldr	r2, [r7, #8]
90008e4a:	fb02 f303 	mul.w	r3, r2, r3
90008e4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
90008e50:	69fb      	ldr	r3, [r7, #28]
90008e52:	3350      	adds	r3, #80	; 0x50
90008e54:	4618      	mov	r0, r3
90008e56:	f002 fcbf 	bl	9000b7d8 <pvPortMalloc>
90008e5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
90008e5c:	69bb      	ldr	r3, [r7, #24]
90008e5e:	2b00      	cmp	r3, #0
90008e60:	d011      	beq.n	90008e86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
90008e62:	69bb      	ldr	r3, [r7, #24]
90008e64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90008e66:	697b      	ldr	r3, [r7, #20]
90008e68:	3350      	adds	r3, #80	; 0x50
90008e6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
90008e6c:	69bb      	ldr	r3, [r7, #24]
90008e6e:	2200      	movs	r2, #0
90008e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
90008e74:	79fa      	ldrb	r2, [r7, #7]
90008e76:	69bb      	ldr	r3, [r7, #24]
90008e78:	9300      	str	r3, [sp, #0]
90008e7a:	4613      	mov	r3, r2
90008e7c:	697a      	ldr	r2, [r7, #20]
90008e7e:	68b9      	ldr	r1, [r7, #8]
90008e80:	68f8      	ldr	r0, [r7, #12]
90008e82:	f000 f805 	bl	90008e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
90008e86:	69bb      	ldr	r3, [r7, #24]
	}
90008e88:	4618      	mov	r0, r3
90008e8a:	3720      	adds	r7, #32
90008e8c:	46bd      	mov	sp, r7
90008e8e:	bd80      	pop	{r7, pc}

90008e90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
90008e90:	b580      	push	{r7, lr}
90008e92:	b084      	sub	sp, #16
90008e94:	af00      	add	r7, sp, #0
90008e96:	60f8      	str	r0, [r7, #12]
90008e98:	60b9      	str	r1, [r7, #8]
90008e9a:	607a      	str	r2, [r7, #4]
90008e9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
90008e9e:	68bb      	ldr	r3, [r7, #8]
90008ea0:	2b00      	cmp	r3, #0
90008ea2:	d103      	bne.n	90008eac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
90008ea4:	69bb      	ldr	r3, [r7, #24]
90008ea6:	69ba      	ldr	r2, [r7, #24]
90008ea8:	601a      	str	r2, [r3, #0]
90008eaa:	e002      	b.n	90008eb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
90008eac:	69bb      	ldr	r3, [r7, #24]
90008eae:	687a      	ldr	r2, [r7, #4]
90008eb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
90008eb2:	69bb      	ldr	r3, [r7, #24]
90008eb4:	68fa      	ldr	r2, [r7, #12]
90008eb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
90008eb8:	69bb      	ldr	r3, [r7, #24]
90008eba:	68ba      	ldr	r2, [r7, #8]
90008ebc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
90008ebe:	2101      	movs	r1, #1
90008ec0:	69b8      	ldr	r0, [r7, #24]
90008ec2:	f7ff fecb 	bl	90008c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
90008ec6:	69bb      	ldr	r3, [r7, #24]
90008ec8:	78fa      	ldrb	r2, [r7, #3]
90008eca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
90008ece:	bf00      	nop
90008ed0:	3710      	adds	r7, #16
90008ed2:	46bd      	mov	sp, r7
90008ed4:	bd80      	pop	{r7, pc}

90008ed6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
90008ed6:	b580      	push	{r7, lr}
90008ed8:	b086      	sub	sp, #24
90008eda:	af00      	add	r7, sp, #0
90008edc:	6078      	str	r0, [r7, #4]
90008ede:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
90008ee0:	687b      	ldr	r3, [r7, #4]
90008ee2:	2b00      	cmp	r3, #0
90008ee4:	d10a      	bne.n	90008efc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
90008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
90008eea:	f383 8811 	msr	BASEPRI, r3
90008eee:	f3bf 8f6f 	isb	sy
90008ef2:	f3bf 8f4f 	dsb	sy
90008ef6:	613b      	str	r3, [r7, #16]
}
90008ef8:	bf00      	nop
90008efa:	e7fe      	b.n	90008efa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
90008efc:	683a      	ldr	r2, [r7, #0]
90008efe:	687b      	ldr	r3, [r7, #4]
90008f00:	429a      	cmp	r2, r3
90008f02:	d90a      	bls.n	90008f1a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
90008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
90008f08:	f383 8811 	msr	BASEPRI, r3
90008f0c:	f3bf 8f6f 	isb	sy
90008f10:	f3bf 8f4f 	dsb	sy
90008f14:	60fb      	str	r3, [r7, #12]
}
90008f16:	bf00      	nop
90008f18:	e7fe      	b.n	90008f18 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
90008f1a:	2202      	movs	r2, #2
90008f1c:	2100      	movs	r1, #0
90008f1e:	6878      	ldr	r0, [r7, #4]
90008f20:	f7ff ff7c 	bl	90008e1c <xQueueGenericCreate>
90008f24:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
90008f26:	697b      	ldr	r3, [r7, #20]
90008f28:	2b00      	cmp	r3, #0
90008f2a:	d002      	beq.n	90008f32 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
90008f2c:	697b      	ldr	r3, [r7, #20]
90008f2e:	683a      	ldr	r2, [r7, #0]
90008f30:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
90008f32:	697b      	ldr	r3, [r7, #20]
	}
90008f34:	4618      	mov	r0, r3
90008f36:	3718      	adds	r7, #24
90008f38:	46bd      	mov	sp, r7
90008f3a:	bd80      	pop	{r7, pc}

90008f3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
90008f3c:	b580      	push	{r7, lr}
90008f3e:	b08e      	sub	sp, #56	; 0x38
90008f40:	af00      	add	r7, sp, #0
90008f42:	60f8      	str	r0, [r7, #12]
90008f44:	60b9      	str	r1, [r7, #8]
90008f46:	607a      	str	r2, [r7, #4]
90008f48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
90008f4a:	2300      	movs	r3, #0
90008f4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90008f4e:	68fb      	ldr	r3, [r7, #12]
90008f50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
90008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90008f54:	2b00      	cmp	r3, #0
90008f56:	d10a      	bne.n	90008f6e <xQueueGenericSend+0x32>
	__asm volatile
90008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
90008f5c:	f383 8811 	msr	BASEPRI, r3
90008f60:	f3bf 8f6f 	isb	sy
90008f64:	f3bf 8f4f 	dsb	sy
90008f68:	62bb      	str	r3, [r7, #40]	; 0x28
}
90008f6a:	bf00      	nop
90008f6c:	e7fe      	b.n	90008f6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90008f6e:	68bb      	ldr	r3, [r7, #8]
90008f70:	2b00      	cmp	r3, #0
90008f72:	d103      	bne.n	90008f7c <xQueueGenericSend+0x40>
90008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90008f78:	2b00      	cmp	r3, #0
90008f7a:	d101      	bne.n	90008f80 <xQueueGenericSend+0x44>
90008f7c:	2301      	movs	r3, #1
90008f7e:	e000      	b.n	90008f82 <xQueueGenericSend+0x46>
90008f80:	2300      	movs	r3, #0
90008f82:	2b00      	cmp	r3, #0
90008f84:	d10a      	bne.n	90008f9c <xQueueGenericSend+0x60>
	__asm volatile
90008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
90008f8a:	f383 8811 	msr	BASEPRI, r3
90008f8e:	f3bf 8f6f 	isb	sy
90008f92:	f3bf 8f4f 	dsb	sy
90008f96:	627b      	str	r3, [r7, #36]	; 0x24
}
90008f98:	bf00      	nop
90008f9a:	e7fe      	b.n	90008f9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
90008f9c:	683b      	ldr	r3, [r7, #0]
90008f9e:	2b02      	cmp	r3, #2
90008fa0:	d103      	bne.n	90008faa <xQueueGenericSend+0x6e>
90008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90008fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90008fa6:	2b01      	cmp	r3, #1
90008fa8:	d101      	bne.n	90008fae <xQueueGenericSend+0x72>
90008faa:	2301      	movs	r3, #1
90008fac:	e000      	b.n	90008fb0 <xQueueGenericSend+0x74>
90008fae:	2300      	movs	r3, #0
90008fb0:	2b00      	cmp	r3, #0
90008fb2:	d10a      	bne.n	90008fca <xQueueGenericSend+0x8e>
	__asm volatile
90008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
90008fb8:	f383 8811 	msr	BASEPRI, r3
90008fbc:	f3bf 8f6f 	isb	sy
90008fc0:	f3bf 8f4f 	dsb	sy
90008fc4:	623b      	str	r3, [r7, #32]
}
90008fc6:	bf00      	nop
90008fc8:	e7fe      	b.n	90008fc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90008fca:	f001 fc89 	bl	9000a8e0 <xTaskGetSchedulerState>
90008fce:	4603      	mov	r3, r0
90008fd0:	2b00      	cmp	r3, #0
90008fd2:	d102      	bne.n	90008fda <xQueueGenericSend+0x9e>
90008fd4:	687b      	ldr	r3, [r7, #4]
90008fd6:	2b00      	cmp	r3, #0
90008fd8:	d101      	bne.n	90008fde <xQueueGenericSend+0xa2>
90008fda:	2301      	movs	r3, #1
90008fdc:	e000      	b.n	90008fe0 <xQueueGenericSend+0xa4>
90008fde:	2300      	movs	r3, #0
90008fe0:	2b00      	cmp	r3, #0
90008fe2:	d10a      	bne.n	90008ffa <xQueueGenericSend+0xbe>
	__asm volatile
90008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
90008fe8:	f383 8811 	msr	BASEPRI, r3
90008fec:	f3bf 8f6f 	isb	sy
90008ff0:	f3bf 8f4f 	dsb	sy
90008ff4:	61fb      	str	r3, [r7, #28]
}
90008ff6:	bf00      	nop
90008ff8:	e7fe      	b.n	90008ff8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
90008ffa:	f002 facb 	bl	9000b594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90009006:	429a      	cmp	r2, r3
90009008:	d302      	bcc.n	90009010 <xQueueGenericSend+0xd4>
9000900a:	683b      	ldr	r3, [r7, #0]
9000900c:	2b02      	cmp	r3, #2
9000900e:	d129      	bne.n	90009064 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90009010:	683a      	ldr	r2, [r7, #0]
90009012:	68b9      	ldr	r1, [r7, #8]
90009014:	6b38      	ldr	r0, [r7, #48]	; 0x30
90009016:	f000 fc3b 	bl	90009890 <prvCopyDataToQueue>
9000901a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009020:	2b00      	cmp	r3, #0
90009022:	d010      	beq.n	90009046 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009026:	3324      	adds	r3, #36	; 0x24
90009028:	4618      	mov	r0, r3
9000902a:	f001 fa97 	bl	9000a55c <xTaskRemoveFromEventList>
9000902e:	4603      	mov	r3, r0
90009030:	2b00      	cmp	r3, #0
90009032:	d013      	beq.n	9000905c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
90009034:	4b3f      	ldr	r3, [pc, #252]	; (90009134 <xQueueGenericSend+0x1f8>)
90009036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000903a:	601a      	str	r2, [r3, #0]
9000903c:	f3bf 8f4f 	dsb	sy
90009040:	f3bf 8f6f 	isb	sy
90009044:	e00a      	b.n	9000905c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
90009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009048:	2b00      	cmp	r3, #0
9000904a:	d007      	beq.n	9000905c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
9000904c:	4b39      	ldr	r3, [pc, #228]	; (90009134 <xQueueGenericSend+0x1f8>)
9000904e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90009052:	601a      	str	r2, [r3, #0]
90009054:	f3bf 8f4f 	dsb	sy
90009058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
9000905c:	f002 faca 	bl	9000b5f4 <vPortExitCritical>
				return pdPASS;
90009060:	2301      	movs	r3, #1
90009062:	e063      	b.n	9000912c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
90009064:	687b      	ldr	r3, [r7, #4]
90009066:	2b00      	cmp	r3, #0
90009068:	d103      	bne.n	90009072 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
9000906a:	f002 fac3 	bl	9000b5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
9000906e:	2300      	movs	r3, #0
90009070:	e05c      	b.n	9000912c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
90009072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90009074:	2b00      	cmp	r3, #0
90009076:	d106      	bne.n	90009086 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
90009078:	f107 0314 	add.w	r3, r7, #20
9000907c:	4618      	mov	r0, r3
9000907e:	f001 fad1 	bl	9000a624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90009082:	2301      	movs	r3, #1
90009084:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
90009086:	f002 fab5 	bl	9000b5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
9000908a:	f001 f83d 	bl	9000a108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000908e:	f002 fa81 	bl	9000b594 <vPortEnterCritical>
90009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90009098:	b25b      	sxtb	r3, r3
9000909a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000909e:	d103      	bne.n	900090a8 <xQueueGenericSend+0x16c>
900090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900090a2:	2200      	movs	r2, #0
900090a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
900090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900090aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
900090ae:	b25b      	sxtb	r3, r3
900090b0:	f1b3 3fff 	cmp.w	r3, #4294967295
900090b4:	d103      	bne.n	900090be <xQueueGenericSend+0x182>
900090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900090b8:	2200      	movs	r2, #0
900090ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
900090be:	f002 fa99 	bl	9000b5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900090c2:	1d3a      	adds	r2, r7, #4
900090c4:	f107 0314 	add.w	r3, r7, #20
900090c8:	4611      	mov	r1, r2
900090ca:	4618      	mov	r0, r3
900090cc:	f001 fac0 	bl	9000a650 <xTaskCheckForTimeOut>
900090d0:	4603      	mov	r3, r0
900090d2:	2b00      	cmp	r3, #0
900090d4:	d124      	bne.n	90009120 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
900090d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
900090d8:	f000 fcd2 	bl	90009a80 <prvIsQueueFull>
900090dc:	4603      	mov	r3, r0
900090de:	2b00      	cmp	r3, #0
900090e0:	d018      	beq.n	90009114 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
900090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900090e4:	3310      	adds	r3, #16
900090e6:	687a      	ldr	r2, [r7, #4]
900090e8:	4611      	mov	r1, r2
900090ea:	4618      	mov	r0, r3
900090ec:	f001 f9e6 	bl	9000a4bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
900090f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
900090f2:	f000 fc5d 	bl	900099b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
900090f6:	f001 f815 	bl	9000a124 <xTaskResumeAll>
900090fa:	4603      	mov	r3, r0
900090fc:	2b00      	cmp	r3, #0
900090fe:	f47f af7c 	bne.w	90008ffa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
90009102:	4b0c      	ldr	r3, [pc, #48]	; (90009134 <xQueueGenericSend+0x1f8>)
90009104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90009108:	601a      	str	r2, [r3, #0]
9000910a:	f3bf 8f4f 	dsb	sy
9000910e:	f3bf 8f6f 	isb	sy
90009112:	e772      	b.n	90008ffa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
90009114:	6b38      	ldr	r0, [r7, #48]	; 0x30
90009116:	f000 fc4b 	bl	900099b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
9000911a:	f001 f803 	bl	9000a124 <xTaskResumeAll>
9000911e:	e76c      	b.n	90008ffa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
90009120:	6b38      	ldr	r0, [r7, #48]	; 0x30
90009122:	f000 fc45 	bl	900099b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
90009126:	f000 fffd 	bl	9000a124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
9000912a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
9000912c:	4618      	mov	r0, r3
9000912e:	3738      	adds	r7, #56	; 0x38
90009130:	46bd      	mov	sp, r7
90009132:	bd80      	pop	{r7, pc}
90009134:	e000ed04 	.word	0xe000ed04

90009138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
90009138:	b580      	push	{r7, lr}
9000913a:	b090      	sub	sp, #64	; 0x40
9000913c:	af00      	add	r7, sp, #0
9000913e:	60f8      	str	r0, [r7, #12]
90009140:	60b9      	str	r1, [r7, #8]
90009142:	607a      	str	r2, [r7, #4]
90009144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
90009146:	68fb      	ldr	r3, [r7, #12]
90009148:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
9000914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000914c:	2b00      	cmp	r3, #0
9000914e:	d10a      	bne.n	90009166 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
90009150:	f04f 0350 	mov.w	r3, #80	; 0x50
90009154:	f383 8811 	msr	BASEPRI, r3
90009158:	f3bf 8f6f 	isb	sy
9000915c:	f3bf 8f4f 	dsb	sy
90009160:	62bb      	str	r3, [r7, #40]	; 0x28
}
90009162:	bf00      	nop
90009164:	e7fe      	b.n	90009164 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90009166:	68bb      	ldr	r3, [r7, #8]
90009168:	2b00      	cmp	r3, #0
9000916a:	d103      	bne.n	90009174 <xQueueGenericSendFromISR+0x3c>
9000916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90009170:	2b00      	cmp	r3, #0
90009172:	d101      	bne.n	90009178 <xQueueGenericSendFromISR+0x40>
90009174:	2301      	movs	r3, #1
90009176:	e000      	b.n	9000917a <xQueueGenericSendFromISR+0x42>
90009178:	2300      	movs	r3, #0
9000917a:	2b00      	cmp	r3, #0
9000917c:	d10a      	bne.n	90009194 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
9000917e:	f04f 0350 	mov.w	r3, #80	; 0x50
90009182:	f383 8811 	msr	BASEPRI, r3
90009186:	f3bf 8f6f 	isb	sy
9000918a:	f3bf 8f4f 	dsb	sy
9000918e:	627b      	str	r3, [r7, #36]	; 0x24
}
90009190:	bf00      	nop
90009192:	e7fe      	b.n	90009192 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
90009194:	683b      	ldr	r3, [r7, #0]
90009196:	2b02      	cmp	r3, #2
90009198:	d103      	bne.n	900091a2 <xQueueGenericSendFromISR+0x6a>
9000919a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000919e:	2b01      	cmp	r3, #1
900091a0:	d101      	bne.n	900091a6 <xQueueGenericSendFromISR+0x6e>
900091a2:	2301      	movs	r3, #1
900091a4:	e000      	b.n	900091a8 <xQueueGenericSendFromISR+0x70>
900091a6:	2300      	movs	r3, #0
900091a8:	2b00      	cmp	r3, #0
900091aa:	d10a      	bne.n	900091c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
900091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
900091b0:	f383 8811 	msr	BASEPRI, r3
900091b4:	f3bf 8f6f 	isb	sy
900091b8:	f3bf 8f4f 	dsb	sy
900091bc:	623b      	str	r3, [r7, #32]
}
900091be:	bf00      	nop
900091c0:	e7fe      	b.n	900091c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
900091c2:	f002 fac9 	bl	9000b758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
900091c6:	f3ef 8211 	mrs	r2, BASEPRI
900091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
900091ce:	f383 8811 	msr	BASEPRI, r3
900091d2:	f3bf 8f6f 	isb	sy
900091d6:	f3bf 8f4f 	dsb	sy
900091da:	61fa      	str	r2, [r7, #28]
900091dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
900091de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
900091e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
900091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900091e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900091e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900091ea:	429a      	cmp	r2, r3
900091ec:	d302      	bcc.n	900091f4 <xQueueGenericSendFromISR+0xbc>
900091ee:	683b      	ldr	r3, [r7, #0]
900091f0:	2b02      	cmp	r3, #2
900091f2:	d12f      	bne.n	90009254 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
900091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900091f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
900091fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
900091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90009200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90009202:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90009204:	683a      	ldr	r2, [r7, #0]
90009206:	68b9      	ldr	r1, [r7, #8]
90009208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
9000920a:	f000 fb41 	bl	90009890 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
9000920e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
90009212:	f1b3 3fff 	cmp.w	r3, #4294967295
90009216:	d112      	bne.n	9000923e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000921c:	2b00      	cmp	r3, #0
9000921e:	d016      	beq.n	9000924e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90009222:	3324      	adds	r3, #36	; 0x24
90009224:	4618      	mov	r0, r3
90009226:	f001 f999 	bl	9000a55c <xTaskRemoveFromEventList>
9000922a:	4603      	mov	r3, r0
9000922c:	2b00      	cmp	r3, #0
9000922e:	d00e      	beq.n	9000924e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
90009230:	687b      	ldr	r3, [r7, #4]
90009232:	2b00      	cmp	r3, #0
90009234:	d00b      	beq.n	9000924e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
90009236:	687b      	ldr	r3, [r7, #4]
90009238:	2201      	movs	r2, #1
9000923a:	601a      	str	r2, [r3, #0]
9000923c:	e007      	b.n	9000924e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000923e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
90009242:	3301      	adds	r3, #1
90009244:	b2db      	uxtb	r3, r3
90009246:	b25a      	sxtb	r2, r3
90009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000924a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
9000924e:	2301      	movs	r3, #1
90009250:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
90009252:	e001      	b.n	90009258 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
90009254:	2300      	movs	r3, #0
90009256:	63fb      	str	r3, [r7, #60]	; 0x3c
90009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000925a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000925c:	697b      	ldr	r3, [r7, #20]
9000925e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
90009262:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
90009264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
90009266:	4618      	mov	r0, r3
90009268:	3740      	adds	r7, #64	; 0x40
9000926a:	46bd      	mov	sp, r7
9000926c:	bd80      	pop	{r7, pc}

9000926e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
9000926e:	b580      	push	{r7, lr}
90009270:	b08e      	sub	sp, #56	; 0x38
90009272:	af00      	add	r7, sp, #0
90009274:	6078      	str	r0, [r7, #4]
90009276:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
90009278:	687b      	ldr	r3, [r7, #4]
9000927a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
9000927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000927e:	2b00      	cmp	r3, #0
90009280:	d10a      	bne.n	90009298 <xQueueGiveFromISR+0x2a>
	__asm volatile
90009282:	f04f 0350 	mov.w	r3, #80	; 0x50
90009286:	f383 8811 	msr	BASEPRI, r3
9000928a:	f3bf 8f6f 	isb	sy
9000928e:	f3bf 8f4f 	dsb	sy
90009292:	623b      	str	r3, [r7, #32]
}
90009294:	bf00      	nop
90009296:	e7fe      	b.n	90009296 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
90009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000929a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000929c:	2b00      	cmp	r3, #0
9000929e:	d00a      	beq.n	900092b6 <xQueueGiveFromISR+0x48>
	__asm volatile
900092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
900092a4:	f383 8811 	msr	BASEPRI, r3
900092a8:	f3bf 8f6f 	isb	sy
900092ac:	f3bf 8f4f 	dsb	sy
900092b0:	61fb      	str	r3, [r7, #28]
}
900092b2:	bf00      	nop
900092b4:	e7fe      	b.n	900092b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
900092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900092b8:	681b      	ldr	r3, [r3, #0]
900092ba:	2b00      	cmp	r3, #0
900092bc:	d103      	bne.n	900092c6 <xQueueGiveFromISR+0x58>
900092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900092c0:	689b      	ldr	r3, [r3, #8]
900092c2:	2b00      	cmp	r3, #0
900092c4:	d101      	bne.n	900092ca <xQueueGiveFromISR+0x5c>
900092c6:	2301      	movs	r3, #1
900092c8:	e000      	b.n	900092cc <xQueueGiveFromISR+0x5e>
900092ca:	2300      	movs	r3, #0
900092cc:	2b00      	cmp	r3, #0
900092ce:	d10a      	bne.n	900092e6 <xQueueGiveFromISR+0x78>
	__asm volatile
900092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
900092d4:	f383 8811 	msr	BASEPRI, r3
900092d8:	f3bf 8f6f 	isb	sy
900092dc:	f3bf 8f4f 	dsb	sy
900092e0:	61bb      	str	r3, [r7, #24]
}
900092e2:	bf00      	nop
900092e4:	e7fe      	b.n	900092e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
900092e6:	f002 fa37 	bl	9000b758 <vPortValidateInterruptPriority>
	__asm volatile
900092ea:	f3ef 8211 	mrs	r2, BASEPRI
900092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
900092f2:	f383 8811 	msr	BASEPRI, r3
900092f6:	f3bf 8f6f 	isb	sy
900092fa:	f3bf 8f4f 	dsb	sy
900092fe:	617a      	str	r2, [r7, #20]
90009300:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
90009302:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90009304:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000930a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
9000930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000930e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90009310:	6aba      	ldr	r2, [r7, #40]	; 0x28
90009312:	429a      	cmp	r2, r3
90009314:	d22b      	bcs.n	9000936e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
90009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000931c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009322:	1c5a      	adds	r2, r3, #1
90009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009326:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
90009328:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
9000932c:	f1b3 3fff 	cmp.w	r3, #4294967295
90009330:	d112      	bne.n	90009358 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009336:	2b00      	cmp	r3, #0
90009338:	d016      	beq.n	90009368 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000933c:	3324      	adds	r3, #36	; 0x24
9000933e:	4618      	mov	r0, r3
90009340:	f001 f90c 	bl	9000a55c <xTaskRemoveFromEventList>
90009344:	4603      	mov	r3, r0
90009346:	2b00      	cmp	r3, #0
90009348:	d00e      	beq.n	90009368 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
9000934a:	683b      	ldr	r3, [r7, #0]
9000934c:	2b00      	cmp	r3, #0
9000934e:	d00b      	beq.n	90009368 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
90009350:	683b      	ldr	r3, [r7, #0]
90009352:	2201      	movs	r2, #1
90009354:	601a      	str	r2, [r3, #0]
90009356:	e007      	b.n	90009368 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90009358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000935c:	3301      	adds	r3, #1
9000935e:	b2db      	uxtb	r3, r3
90009360:	b25a      	sxtb	r2, r3
90009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
90009368:	2301      	movs	r3, #1
9000936a:	637b      	str	r3, [r7, #52]	; 0x34
9000936c:	e001      	b.n	90009372 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
9000936e:	2300      	movs	r3, #0
90009370:	637b      	str	r3, [r7, #52]	; 0x34
90009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009374:	60fb      	str	r3, [r7, #12]
	__asm volatile
90009376:	68fb      	ldr	r3, [r7, #12]
90009378:	f383 8811 	msr	BASEPRI, r3
}
9000937c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
9000937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
90009380:	4618      	mov	r0, r3
90009382:	3738      	adds	r7, #56	; 0x38
90009384:	46bd      	mov	sp, r7
90009386:	bd80      	pop	{r7, pc}

90009388 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
90009388:	b580      	push	{r7, lr}
9000938a:	b08c      	sub	sp, #48	; 0x30
9000938c:	af00      	add	r7, sp, #0
9000938e:	60f8      	str	r0, [r7, #12]
90009390:	60b9      	str	r1, [r7, #8]
90009392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
90009394:	2300      	movs	r3, #0
90009396:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90009398:	68fb      	ldr	r3, [r7, #12]
9000939a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
9000939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000939e:	2b00      	cmp	r3, #0
900093a0:	d10a      	bne.n	900093b8 <xQueueReceive+0x30>
	__asm volatile
900093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
900093a6:	f383 8811 	msr	BASEPRI, r3
900093aa:	f3bf 8f6f 	isb	sy
900093ae:	f3bf 8f4f 	dsb	sy
900093b2:	623b      	str	r3, [r7, #32]
}
900093b4:	bf00      	nop
900093b6:	e7fe      	b.n	900093b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
900093b8:	68bb      	ldr	r3, [r7, #8]
900093ba:	2b00      	cmp	r3, #0
900093bc:	d103      	bne.n	900093c6 <xQueueReceive+0x3e>
900093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
900093c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900093c2:	2b00      	cmp	r3, #0
900093c4:	d101      	bne.n	900093ca <xQueueReceive+0x42>
900093c6:	2301      	movs	r3, #1
900093c8:	e000      	b.n	900093cc <xQueueReceive+0x44>
900093ca:	2300      	movs	r3, #0
900093cc:	2b00      	cmp	r3, #0
900093ce:	d10a      	bne.n	900093e6 <xQueueReceive+0x5e>
	__asm volatile
900093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
900093d4:	f383 8811 	msr	BASEPRI, r3
900093d8:	f3bf 8f6f 	isb	sy
900093dc:	f3bf 8f4f 	dsb	sy
900093e0:	61fb      	str	r3, [r7, #28]
}
900093e2:	bf00      	nop
900093e4:	e7fe      	b.n	900093e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
900093e6:	f001 fa7b 	bl	9000a8e0 <xTaskGetSchedulerState>
900093ea:	4603      	mov	r3, r0
900093ec:	2b00      	cmp	r3, #0
900093ee:	d102      	bne.n	900093f6 <xQueueReceive+0x6e>
900093f0:	687b      	ldr	r3, [r7, #4]
900093f2:	2b00      	cmp	r3, #0
900093f4:	d101      	bne.n	900093fa <xQueueReceive+0x72>
900093f6:	2301      	movs	r3, #1
900093f8:	e000      	b.n	900093fc <xQueueReceive+0x74>
900093fa:	2300      	movs	r3, #0
900093fc:	2b00      	cmp	r3, #0
900093fe:	d10a      	bne.n	90009416 <xQueueReceive+0x8e>
	__asm volatile
90009400:	f04f 0350 	mov.w	r3, #80	; 0x50
90009404:	f383 8811 	msr	BASEPRI, r3
90009408:	f3bf 8f6f 	isb	sy
9000940c:	f3bf 8f4f 	dsb	sy
90009410:	61bb      	str	r3, [r7, #24]
}
90009412:	bf00      	nop
90009414:	e7fe      	b.n	90009414 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
90009416:	f002 f8bd 	bl	9000b594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000941e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009422:	2b00      	cmp	r3, #0
90009424:	d01f      	beq.n	90009466 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
90009426:	68b9      	ldr	r1, [r7, #8]
90009428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000942a:	f000 fa9b 	bl	90009964 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009430:	1e5a      	subs	r2, r3, #1
90009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009434:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009438:	691b      	ldr	r3, [r3, #16]
9000943a:	2b00      	cmp	r3, #0
9000943c:	d00f      	beq.n	9000945e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009440:	3310      	adds	r3, #16
90009442:	4618      	mov	r0, r3
90009444:	f001 f88a 	bl	9000a55c <xTaskRemoveFromEventList>
90009448:	4603      	mov	r3, r0
9000944a:	2b00      	cmp	r3, #0
9000944c:	d007      	beq.n	9000945e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
9000944e:	4b3d      	ldr	r3, [pc, #244]	; (90009544 <xQueueReceive+0x1bc>)
90009450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90009454:	601a      	str	r2, [r3, #0]
90009456:	f3bf 8f4f 	dsb	sy
9000945a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
9000945e:	f002 f8c9 	bl	9000b5f4 <vPortExitCritical>
				return pdPASS;
90009462:	2301      	movs	r3, #1
90009464:	e069      	b.n	9000953a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
90009466:	687b      	ldr	r3, [r7, #4]
90009468:	2b00      	cmp	r3, #0
9000946a:	d103      	bne.n	90009474 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
9000946c:	f002 f8c2 	bl	9000b5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
90009470:	2300      	movs	r3, #0
90009472:	e062      	b.n	9000953a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
90009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009476:	2b00      	cmp	r3, #0
90009478:	d106      	bne.n	90009488 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
9000947a:	f107 0310 	add.w	r3, r7, #16
9000947e:	4618      	mov	r0, r3
90009480:	f001 f8d0 	bl	9000a624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90009484:	2301      	movs	r3, #1
90009486:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
90009488:	f002 f8b4 	bl	9000b5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
9000948c:	f000 fe3c 	bl	9000a108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90009490:	f002 f880 	bl	9000b594 <vPortEnterCritical>
90009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
9000949a:	b25b      	sxtb	r3, r3
9000949c:	f1b3 3fff 	cmp.w	r3, #4294967295
900094a0:	d103      	bne.n	900094aa <xQueueReceive+0x122>
900094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900094a4:	2200      	movs	r2, #0
900094a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
900094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
900094ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
900094b0:	b25b      	sxtb	r3, r3
900094b2:	f1b3 3fff 	cmp.w	r3, #4294967295
900094b6:	d103      	bne.n	900094c0 <xQueueReceive+0x138>
900094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900094ba:	2200      	movs	r2, #0
900094bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
900094c0:	f002 f898 	bl	9000b5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900094c4:	1d3a      	adds	r2, r7, #4
900094c6:	f107 0310 	add.w	r3, r7, #16
900094ca:	4611      	mov	r1, r2
900094cc:	4618      	mov	r0, r3
900094ce:	f001 f8bf 	bl	9000a650 <xTaskCheckForTimeOut>
900094d2:	4603      	mov	r3, r0
900094d4:	2b00      	cmp	r3, #0
900094d6:	d123      	bne.n	90009520 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
900094d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
900094da:	f000 fabb 	bl	90009a54 <prvIsQueueEmpty>
900094de:	4603      	mov	r3, r0
900094e0:	2b00      	cmp	r3, #0
900094e2:	d017      	beq.n	90009514 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
900094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900094e6:	3324      	adds	r3, #36	; 0x24
900094e8:	687a      	ldr	r2, [r7, #4]
900094ea:	4611      	mov	r1, r2
900094ec:	4618      	mov	r0, r3
900094ee:	f000 ffe5 	bl	9000a4bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
900094f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
900094f4:	f000 fa5c 	bl	900099b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
900094f8:	f000 fe14 	bl	9000a124 <xTaskResumeAll>
900094fc:	4603      	mov	r3, r0
900094fe:	2b00      	cmp	r3, #0
90009500:	d189      	bne.n	90009416 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
90009502:	4b10      	ldr	r3, [pc, #64]	; (90009544 <xQueueReceive+0x1bc>)
90009504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90009508:	601a      	str	r2, [r3, #0]
9000950a:	f3bf 8f4f 	dsb	sy
9000950e:	f3bf 8f6f 	isb	sy
90009512:	e780      	b.n	90009416 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
90009514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90009516:	f000 fa4b 	bl	900099b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
9000951a:	f000 fe03 	bl	9000a124 <xTaskResumeAll>
9000951e:	e77a      	b.n	90009416 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
90009520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90009522:	f000 fa45 	bl	900099b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
90009526:	f000 fdfd 	bl	9000a124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
9000952a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000952c:	f000 fa92 	bl	90009a54 <prvIsQueueEmpty>
90009530:	4603      	mov	r3, r0
90009532:	2b00      	cmp	r3, #0
90009534:	f43f af6f 	beq.w	90009416 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
90009538:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
9000953a:	4618      	mov	r0, r3
9000953c:	3730      	adds	r7, #48	; 0x30
9000953e:	46bd      	mov	sp, r7
90009540:	bd80      	pop	{r7, pc}
90009542:	bf00      	nop
90009544:	e000ed04 	.word	0xe000ed04

90009548 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
90009548:	b580      	push	{r7, lr}
9000954a:	b08e      	sub	sp, #56	; 0x38
9000954c:	af00      	add	r7, sp, #0
9000954e:	6078      	str	r0, [r7, #4]
90009550:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
90009552:	2300      	movs	r3, #0
90009554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90009556:	687b      	ldr	r3, [r7, #4]
90009558:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
9000955a:	2300      	movs	r3, #0
9000955c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
9000955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009560:	2b00      	cmp	r3, #0
90009562:	d10a      	bne.n	9000957a <xQueueSemaphoreTake+0x32>
	__asm volatile
90009564:	f04f 0350 	mov.w	r3, #80	; 0x50
90009568:	f383 8811 	msr	BASEPRI, r3
9000956c:	f3bf 8f6f 	isb	sy
90009570:	f3bf 8f4f 	dsb	sy
90009574:	623b      	str	r3, [r7, #32]
}
90009576:	bf00      	nop
90009578:	e7fe      	b.n	90009578 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
9000957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000957e:	2b00      	cmp	r3, #0
90009580:	d00a      	beq.n	90009598 <xQueueSemaphoreTake+0x50>
	__asm volatile
90009582:	f04f 0350 	mov.w	r3, #80	; 0x50
90009586:	f383 8811 	msr	BASEPRI, r3
9000958a:	f3bf 8f6f 	isb	sy
9000958e:	f3bf 8f4f 	dsb	sy
90009592:	61fb      	str	r3, [r7, #28]
}
90009594:	bf00      	nop
90009596:	e7fe      	b.n	90009596 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90009598:	f001 f9a2 	bl	9000a8e0 <xTaskGetSchedulerState>
9000959c:	4603      	mov	r3, r0
9000959e:	2b00      	cmp	r3, #0
900095a0:	d102      	bne.n	900095a8 <xQueueSemaphoreTake+0x60>
900095a2:	683b      	ldr	r3, [r7, #0]
900095a4:	2b00      	cmp	r3, #0
900095a6:	d101      	bne.n	900095ac <xQueueSemaphoreTake+0x64>
900095a8:	2301      	movs	r3, #1
900095aa:	e000      	b.n	900095ae <xQueueSemaphoreTake+0x66>
900095ac:	2300      	movs	r3, #0
900095ae:	2b00      	cmp	r3, #0
900095b0:	d10a      	bne.n	900095c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
900095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
900095b6:	f383 8811 	msr	BASEPRI, r3
900095ba:	f3bf 8f6f 	isb	sy
900095be:	f3bf 8f4f 	dsb	sy
900095c2:	61bb      	str	r3, [r7, #24]
}
900095c4:	bf00      	nop
900095c6:	e7fe      	b.n	900095c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
900095c8:	f001 ffe4 	bl	9000b594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
900095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900095d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
900095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900095d4:	2b00      	cmp	r3, #0
900095d6:	d024      	beq.n	90009622 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
900095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900095da:	1e5a      	subs	r2, r3, #1
900095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900095de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900095e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900095e2:	681b      	ldr	r3, [r3, #0]
900095e4:	2b00      	cmp	r3, #0
900095e6:	d104      	bne.n	900095f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
900095e8:	f001 faf0 	bl	9000abcc <pvTaskIncrementMutexHeldCount>
900095ec:	4602      	mov	r2, r0
900095ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900095f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900095f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900095f4:	691b      	ldr	r3, [r3, #16]
900095f6:	2b00      	cmp	r3, #0
900095f8:	d00f      	beq.n	9000961a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900095fc:	3310      	adds	r3, #16
900095fe:	4618      	mov	r0, r3
90009600:	f000 ffac 	bl	9000a55c <xTaskRemoveFromEventList>
90009604:	4603      	mov	r3, r0
90009606:	2b00      	cmp	r3, #0
90009608:	d007      	beq.n	9000961a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
9000960a:	4b54      	ldr	r3, [pc, #336]	; (9000975c <xQueueSemaphoreTake+0x214>)
9000960c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90009610:	601a      	str	r2, [r3, #0]
90009612:	f3bf 8f4f 	dsb	sy
90009616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
9000961a:	f001 ffeb 	bl	9000b5f4 <vPortExitCritical>
				return pdPASS;
9000961e:	2301      	movs	r3, #1
90009620:	e097      	b.n	90009752 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
90009622:	683b      	ldr	r3, [r7, #0]
90009624:	2b00      	cmp	r3, #0
90009626:	d111      	bne.n	9000964c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
90009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000962a:	2b00      	cmp	r3, #0
9000962c:	d00a      	beq.n	90009644 <xQueueSemaphoreTake+0xfc>
	__asm volatile
9000962e:	f04f 0350 	mov.w	r3, #80	; 0x50
90009632:	f383 8811 	msr	BASEPRI, r3
90009636:	f3bf 8f6f 	isb	sy
9000963a:	f3bf 8f4f 	dsb	sy
9000963e:	617b      	str	r3, [r7, #20]
}
90009640:	bf00      	nop
90009642:	e7fe      	b.n	90009642 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
90009644:	f001 ffd6 	bl	9000b5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
90009648:	2300      	movs	r3, #0
9000964a:	e082      	b.n	90009752 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
9000964c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000964e:	2b00      	cmp	r3, #0
90009650:	d106      	bne.n	90009660 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
90009652:	f107 030c 	add.w	r3, r7, #12
90009656:	4618      	mov	r0, r3
90009658:	f000 ffe4 	bl	9000a624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000965c:	2301      	movs	r3, #1
9000965e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
90009660:	f001 ffc8 	bl	9000b5f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
90009664:	f000 fd50 	bl	9000a108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90009668:	f001 ff94 	bl	9000b594 <vPortEnterCritical>
9000966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000966e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90009672:	b25b      	sxtb	r3, r3
90009674:	f1b3 3fff 	cmp.w	r3, #4294967295
90009678:	d103      	bne.n	90009682 <xQueueSemaphoreTake+0x13a>
9000967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000967c:	2200      	movs	r2, #0
9000967e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90009682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90009688:	b25b      	sxtb	r3, r3
9000968a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000968e:	d103      	bne.n	90009698 <xQueueSemaphoreTake+0x150>
90009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009692:	2200      	movs	r2, #0
90009694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90009698:	f001 ffac 	bl	9000b5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000969c:	463a      	mov	r2, r7
9000969e:	f107 030c 	add.w	r3, r7, #12
900096a2:	4611      	mov	r1, r2
900096a4:	4618      	mov	r0, r3
900096a6:	f000 ffd3 	bl	9000a650 <xTaskCheckForTimeOut>
900096aa:	4603      	mov	r3, r0
900096ac:	2b00      	cmp	r3, #0
900096ae:	d132      	bne.n	90009716 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
900096b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
900096b2:	f000 f9cf 	bl	90009a54 <prvIsQueueEmpty>
900096b6:	4603      	mov	r3, r0
900096b8:	2b00      	cmp	r3, #0
900096ba:	d026      	beq.n	9000970a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900096be:	681b      	ldr	r3, [r3, #0]
900096c0:	2b00      	cmp	r3, #0
900096c2:	d109      	bne.n	900096d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
900096c4:	f001 ff66 	bl	9000b594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
900096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900096ca:	689b      	ldr	r3, [r3, #8]
900096cc:	4618      	mov	r0, r3
900096ce:	f001 f925 	bl	9000a91c <xTaskPriorityInherit>
900096d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
900096d4:	f001 ff8e 	bl	9000b5f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
900096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900096da:	3324      	adds	r3, #36	; 0x24
900096dc:	683a      	ldr	r2, [r7, #0]
900096de:	4611      	mov	r1, r2
900096e0:	4618      	mov	r0, r3
900096e2:	f000 feeb 	bl	9000a4bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
900096e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
900096e8:	f000 f962 	bl	900099b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
900096ec:	f000 fd1a 	bl	9000a124 <xTaskResumeAll>
900096f0:	4603      	mov	r3, r0
900096f2:	2b00      	cmp	r3, #0
900096f4:	f47f af68 	bne.w	900095c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
900096f8:	4b18      	ldr	r3, [pc, #96]	; (9000975c <xQueueSemaphoreTake+0x214>)
900096fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900096fe:	601a      	str	r2, [r3, #0]
90009700:	f3bf 8f4f 	dsb	sy
90009704:	f3bf 8f6f 	isb	sy
90009708:	e75e      	b.n	900095c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
9000970a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000970c:	f000 f950 	bl	900099b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
90009710:	f000 fd08 	bl	9000a124 <xTaskResumeAll>
90009714:	e758      	b.n	900095c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
90009716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90009718:	f000 f94a 	bl	900099b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
9000971c:	f000 fd02 	bl	9000a124 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90009720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90009722:	f000 f997 	bl	90009a54 <prvIsQueueEmpty>
90009726:	4603      	mov	r3, r0
90009728:	2b00      	cmp	r3, #0
9000972a:	f43f af4d 	beq.w	900095c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
9000972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009730:	2b00      	cmp	r3, #0
90009732:	d00d      	beq.n	90009750 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
90009734:	f001 ff2e 	bl	9000b594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
90009738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000973a:	f000 f891 	bl	90009860 <prvGetDisinheritPriorityAfterTimeout>
9000973e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90009740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009742:	689b      	ldr	r3, [r3, #8]
90009744:	6a79      	ldr	r1, [r7, #36]	; 0x24
90009746:	4618      	mov	r0, r3
90009748:	f001 f9be 	bl	9000aac8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
9000974c:	f001 ff52 	bl	9000b5f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
90009750:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
90009752:	4618      	mov	r0, r3
90009754:	3738      	adds	r7, #56	; 0x38
90009756:	46bd      	mov	sp, r7
90009758:	bd80      	pop	{r7, pc}
9000975a:	bf00      	nop
9000975c:	e000ed04 	.word	0xe000ed04

90009760 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
90009760:	b580      	push	{r7, lr}
90009762:	b08e      	sub	sp, #56	; 0x38
90009764:	af00      	add	r7, sp, #0
90009766:	60f8      	str	r0, [r7, #12]
90009768:	60b9      	str	r1, [r7, #8]
9000976a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
9000976c:	68fb      	ldr	r3, [r7, #12]
9000976e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
90009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009772:	2b00      	cmp	r3, #0
90009774:	d10a      	bne.n	9000978c <xQueueReceiveFromISR+0x2c>
	__asm volatile
90009776:	f04f 0350 	mov.w	r3, #80	; 0x50
9000977a:	f383 8811 	msr	BASEPRI, r3
9000977e:	f3bf 8f6f 	isb	sy
90009782:	f3bf 8f4f 	dsb	sy
90009786:	623b      	str	r3, [r7, #32]
}
90009788:	bf00      	nop
9000978a:	e7fe      	b.n	9000978a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000978c:	68bb      	ldr	r3, [r7, #8]
9000978e:	2b00      	cmp	r3, #0
90009790:	d103      	bne.n	9000979a <xQueueReceiveFromISR+0x3a>
90009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90009796:	2b00      	cmp	r3, #0
90009798:	d101      	bne.n	9000979e <xQueueReceiveFromISR+0x3e>
9000979a:	2301      	movs	r3, #1
9000979c:	e000      	b.n	900097a0 <xQueueReceiveFromISR+0x40>
9000979e:	2300      	movs	r3, #0
900097a0:	2b00      	cmp	r3, #0
900097a2:	d10a      	bne.n	900097ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
900097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
900097a8:	f383 8811 	msr	BASEPRI, r3
900097ac:	f3bf 8f6f 	isb	sy
900097b0:	f3bf 8f4f 	dsb	sy
900097b4:	61fb      	str	r3, [r7, #28]
}
900097b6:	bf00      	nop
900097b8:	e7fe      	b.n	900097b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
900097ba:	f001 ffcd 	bl	9000b758 <vPortValidateInterruptPriority>
	__asm volatile
900097be:	f3ef 8211 	mrs	r2, BASEPRI
900097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900097c6:	f383 8811 	msr	BASEPRI, r3
900097ca:	f3bf 8f6f 	isb	sy
900097ce:	f3bf 8f4f 	dsb	sy
900097d2:	61ba      	str	r2, [r7, #24]
900097d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
900097d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
900097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900097dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900097de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
900097e2:	2b00      	cmp	r3, #0
900097e4:	d02f      	beq.n	90009846 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
900097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900097e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900097ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
900097f0:	68b9      	ldr	r1, [r7, #8]
900097f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
900097f4:	f000 f8b6 	bl	90009964 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900097fa:	1e5a      	subs	r2, r3, #1
900097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900097fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
90009800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
90009804:	f1b3 3fff 	cmp.w	r3, #4294967295
90009808:	d112      	bne.n	90009830 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000980c:	691b      	ldr	r3, [r3, #16]
9000980e:	2b00      	cmp	r3, #0
90009810:	d016      	beq.n	90009840 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009814:	3310      	adds	r3, #16
90009816:	4618      	mov	r0, r3
90009818:	f000 fea0 	bl	9000a55c <xTaskRemoveFromEventList>
9000981c:	4603      	mov	r3, r0
9000981e:	2b00      	cmp	r3, #0
90009820:	d00e      	beq.n	90009840 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
90009822:	687b      	ldr	r3, [r7, #4]
90009824:	2b00      	cmp	r3, #0
90009826:	d00b      	beq.n	90009840 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
90009828:	687b      	ldr	r3, [r7, #4]
9000982a:	2201      	movs	r2, #1
9000982c:	601a      	str	r2, [r3, #0]
9000982e:	e007      	b.n	90009840 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
90009830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90009834:	3301      	adds	r3, #1
90009836:	b2db      	uxtb	r3, r3
90009838:	b25a      	sxtb	r2, r3
9000983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000983c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
90009840:	2301      	movs	r3, #1
90009842:	637b      	str	r3, [r7, #52]	; 0x34
90009844:	e001      	b.n	9000984a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
90009846:	2300      	movs	r3, #0
90009848:	637b      	str	r3, [r7, #52]	; 0x34
9000984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000984c:	613b      	str	r3, [r7, #16]
	__asm volatile
9000984e:	693b      	ldr	r3, [r7, #16]
90009850:	f383 8811 	msr	BASEPRI, r3
}
90009854:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
90009856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
90009858:	4618      	mov	r0, r3
9000985a:	3738      	adds	r7, #56	; 0x38
9000985c:	46bd      	mov	sp, r7
9000985e:	bd80      	pop	{r7, pc}

90009860 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
90009860:	b480      	push	{r7}
90009862:	b085      	sub	sp, #20
90009864:	af00      	add	r7, sp, #0
90009866:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
90009868:	687b      	ldr	r3, [r7, #4]
9000986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000986c:	2b00      	cmp	r3, #0
9000986e:	d006      	beq.n	9000987e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
90009870:	687b      	ldr	r3, [r7, #4]
90009872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009874:	681b      	ldr	r3, [r3, #0]
90009876:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
9000987a:	60fb      	str	r3, [r7, #12]
9000987c:	e001      	b.n	90009882 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
9000987e:	2300      	movs	r3, #0
90009880:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
90009882:	68fb      	ldr	r3, [r7, #12]
	}
90009884:	4618      	mov	r0, r3
90009886:	3714      	adds	r7, #20
90009888:	46bd      	mov	sp, r7
9000988a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000988e:	4770      	bx	lr

90009890 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
90009890:	b580      	push	{r7, lr}
90009892:	b086      	sub	sp, #24
90009894:	af00      	add	r7, sp, #0
90009896:	60f8      	str	r0, [r7, #12]
90009898:	60b9      	str	r1, [r7, #8]
9000989a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
9000989c:	2300      	movs	r3, #0
9000989e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900098a0:	68fb      	ldr	r3, [r7, #12]
900098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900098a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
900098a6:	68fb      	ldr	r3, [r7, #12]
900098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900098aa:	2b00      	cmp	r3, #0
900098ac:	d10d      	bne.n	900098ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900098ae:	68fb      	ldr	r3, [r7, #12]
900098b0:	681b      	ldr	r3, [r3, #0]
900098b2:	2b00      	cmp	r3, #0
900098b4:	d14d      	bne.n	90009952 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
900098b6:	68fb      	ldr	r3, [r7, #12]
900098b8:	689b      	ldr	r3, [r3, #8]
900098ba:	4618      	mov	r0, r3
900098bc:	f001 f896 	bl	9000a9ec <xTaskPriorityDisinherit>
900098c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
900098c2:	68fb      	ldr	r3, [r7, #12]
900098c4:	2200      	movs	r2, #0
900098c6:	609a      	str	r2, [r3, #8]
900098c8:	e043      	b.n	90009952 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
900098ca:	687b      	ldr	r3, [r7, #4]
900098cc:	2b00      	cmp	r3, #0
900098ce:	d119      	bne.n	90009904 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
900098d0:	68fb      	ldr	r3, [r7, #12]
900098d2:	6858      	ldr	r0, [r3, #4]
900098d4:	68fb      	ldr	r3, [r7, #12]
900098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900098d8:	461a      	mov	r2, r3
900098da:	68b9      	ldr	r1, [r7, #8]
900098dc:	f007 fbb0 	bl	90011040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900098e0:	68fb      	ldr	r3, [r7, #12]
900098e2:	685a      	ldr	r2, [r3, #4]
900098e4:	68fb      	ldr	r3, [r7, #12]
900098e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900098e8:	441a      	add	r2, r3
900098ea:	68fb      	ldr	r3, [r7, #12]
900098ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
900098ee:	68fb      	ldr	r3, [r7, #12]
900098f0:	685a      	ldr	r2, [r3, #4]
900098f2:	68fb      	ldr	r3, [r7, #12]
900098f4:	689b      	ldr	r3, [r3, #8]
900098f6:	429a      	cmp	r2, r3
900098f8:	d32b      	bcc.n	90009952 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
900098fa:	68fb      	ldr	r3, [r7, #12]
900098fc:	681a      	ldr	r2, [r3, #0]
900098fe:	68fb      	ldr	r3, [r7, #12]
90009900:	605a      	str	r2, [r3, #4]
90009902:	e026      	b.n	90009952 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
90009904:	68fb      	ldr	r3, [r7, #12]
90009906:	68d8      	ldr	r0, [r3, #12]
90009908:	68fb      	ldr	r3, [r7, #12]
9000990a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000990c:	461a      	mov	r2, r3
9000990e:	68b9      	ldr	r1, [r7, #8]
90009910:	f007 fb96 	bl	90011040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
90009914:	68fb      	ldr	r3, [r7, #12]
90009916:	68da      	ldr	r2, [r3, #12]
90009918:	68fb      	ldr	r3, [r7, #12]
9000991a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000991c:	425b      	negs	r3, r3
9000991e:	441a      	add	r2, r3
90009920:	68fb      	ldr	r3, [r7, #12]
90009922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90009924:	68fb      	ldr	r3, [r7, #12]
90009926:	68da      	ldr	r2, [r3, #12]
90009928:	68fb      	ldr	r3, [r7, #12]
9000992a:	681b      	ldr	r3, [r3, #0]
9000992c:	429a      	cmp	r2, r3
9000992e:	d207      	bcs.n	90009940 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
90009930:	68fb      	ldr	r3, [r7, #12]
90009932:	689a      	ldr	r2, [r3, #8]
90009934:	68fb      	ldr	r3, [r7, #12]
90009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90009938:	425b      	negs	r3, r3
9000993a:	441a      	add	r2, r3
9000993c:	68fb      	ldr	r3, [r7, #12]
9000993e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
90009940:	687b      	ldr	r3, [r7, #4]
90009942:	2b02      	cmp	r3, #2
90009944:	d105      	bne.n	90009952 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90009946:	693b      	ldr	r3, [r7, #16]
90009948:	2b00      	cmp	r3, #0
9000994a:	d002      	beq.n	90009952 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
9000994c:	693b      	ldr	r3, [r7, #16]
9000994e:	3b01      	subs	r3, #1
90009950:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90009952:	693b      	ldr	r3, [r7, #16]
90009954:	1c5a      	adds	r2, r3, #1
90009956:	68fb      	ldr	r3, [r7, #12]
90009958:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
9000995a:	697b      	ldr	r3, [r7, #20]
}
9000995c:	4618      	mov	r0, r3
9000995e:	3718      	adds	r7, #24
90009960:	46bd      	mov	sp, r7
90009962:	bd80      	pop	{r7, pc}

90009964 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
90009964:	b580      	push	{r7, lr}
90009966:	b082      	sub	sp, #8
90009968:	af00      	add	r7, sp, #0
9000996a:	6078      	str	r0, [r7, #4]
9000996c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000996e:	687b      	ldr	r3, [r7, #4]
90009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90009972:	2b00      	cmp	r3, #0
90009974:	d018      	beq.n	900099a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90009976:	687b      	ldr	r3, [r7, #4]
90009978:	68da      	ldr	r2, [r3, #12]
9000997a:	687b      	ldr	r3, [r7, #4]
9000997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000997e:	441a      	add	r2, r3
90009980:	687b      	ldr	r3, [r7, #4]
90009982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90009984:	687b      	ldr	r3, [r7, #4]
90009986:	68da      	ldr	r2, [r3, #12]
90009988:	687b      	ldr	r3, [r7, #4]
9000998a:	689b      	ldr	r3, [r3, #8]
9000998c:	429a      	cmp	r2, r3
9000998e:	d303      	bcc.n	90009998 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
90009990:	687b      	ldr	r3, [r7, #4]
90009992:	681a      	ldr	r2, [r3, #0]
90009994:	687b      	ldr	r3, [r7, #4]
90009996:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90009998:	687b      	ldr	r3, [r7, #4]
9000999a:	68d9      	ldr	r1, [r3, #12]
9000999c:	687b      	ldr	r3, [r7, #4]
9000999e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900099a0:	461a      	mov	r2, r3
900099a2:	6838      	ldr	r0, [r7, #0]
900099a4:	f007 fb4c 	bl	90011040 <memcpy>
	}
}
900099a8:	bf00      	nop
900099aa:	3708      	adds	r7, #8
900099ac:	46bd      	mov	sp, r7
900099ae:	bd80      	pop	{r7, pc}

900099b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
900099b0:	b580      	push	{r7, lr}
900099b2:	b084      	sub	sp, #16
900099b4:	af00      	add	r7, sp, #0
900099b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
900099b8:	f001 fdec 	bl	9000b594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
900099bc:	687b      	ldr	r3, [r7, #4]
900099be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
900099c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
900099c4:	e011      	b.n	900099ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900099c6:	687b      	ldr	r3, [r7, #4]
900099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900099ca:	2b00      	cmp	r3, #0
900099cc:	d012      	beq.n	900099f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900099ce:	687b      	ldr	r3, [r7, #4]
900099d0:	3324      	adds	r3, #36	; 0x24
900099d2:	4618      	mov	r0, r3
900099d4:	f000 fdc2 	bl	9000a55c <xTaskRemoveFromEventList>
900099d8:	4603      	mov	r3, r0
900099da:	2b00      	cmp	r3, #0
900099dc:	d001      	beq.n	900099e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
900099de:	f000 fe99 	bl	9000a714 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
900099e2:	7bfb      	ldrb	r3, [r7, #15]
900099e4:	3b01      	subs	r3, #1
900099e6:	b2db      	uxtb	r3, r3
900099e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
900099ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
900099ee:	2b00      	cmp	r3, #0
900099f0:	dce9      	bgt.n	900099c6 <prvUnlockQueue+0x16>
900099f2:	e000      	b.n	900099f6 <prvUnlockQueue+0x46>
					break;
900099f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
900099f6:	687b      	ldr	r3, [r7, #4]
900099f8:	22ff      	movs	r2, #255	; 0xff
900099fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
900099fe:	f001 fdf9 	bl	9000b5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
90009a02:	f001 fdc7 	bl	9000b594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
90009a06:	687b      	ldr	r3, [r7, #4]
90009a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90009a0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
90009a0e:	e011      	b.n	90009a34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90009a10:	687b      	ldr	r3, [r7, #4]
90009a12:	691b      	ldr	r3, [r3, #16]
90009a14:	2b00      	cmp	r3, #0
90009a16:	d012      	beq.n	90009a3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90009a18:	687b      	ldr	r3, [r7, #4]
90009a1a:	3310      	adds	r3, #16
90009a1c:	4618      	mov	r0, r3
90009a1e:	f000 fd9d 	bl	9000a55c <xTaskRemoveFromEventList>
90009a22:	4603      	mov	r3, r0
90009a24:	2b00      	cmp	r3, #0
90009a26:	d001      	beq.n	90009a2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
90009a28:	f000 fe74 	bl	9000a714 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
90009a2c:	7bbb      	ldrb	r3, [r7, #14]
90009a2e:	3b01      	subs	r3, #1
90009a30:	b2db      	uxtb	r3, r3
90009a32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
90009a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
90009a38:	2b00      	cmp	r3, #0
90009a3a:	dce9      	bgt.n	90009a10 <prvUnlockQueue+0x60>
90009a3c:	e000      	b.n	90009a40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
90009a3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
90009a40:	687b      	ldr	r3, [r7, #4]
90009a42:	22ff      	movs	r2, #255	; 0xff
90009a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
90009a48:	f001 fdd4 	bl	9000b5f4 <vPortExitCritical>
}
90009a4c:	bf00      	nop
90009a4e:	3710      	adds	r7, #16
90009a50:	46bd      	mov	sp, r7
90009a52:	bd80      	pop	{r7, pc}

90009a54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
90009a54:	b580      	push	{r7, lr}
90009a56:	b084      	sub	sp, #16
90009a58:	af00      	add	r7, sp, #0
90009a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
90009a5c:	f001 fd9a 	bl	9000b594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
90009a60:	687b      	ldr	r3, [r7, #4]
90009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90009a64:	2b00      	cmp	r3, #0
90009a66:	d102      	bne.n	90009a6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
90009a68:	2301      	movs	r3, #1
90009a6a:	60fb      	str	r3, [r7, #12]
90009a6c:	e001      	b.n	90009a72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
90009a6e:	2300      	movs	r3, #0
90009a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
90009a72:	f001 fdbf 	bl	9000b5f4 <vPortExitCritical>

	return xReturn;
90009a76:	68fb      	ldr	r3, [r7, #12]
}
90009a78:	4618      	mov	r0, r3
90009a7a:	3710      	adds	r7, #16
90009a7c:	46bd      	mov	sp, r7
90009a7e:	bd80      	pop	{r7, pc}

90009a80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
90009a80:	b580      	push	{r7, lr}
90009a82:	b084      	sub	sp, #16
90009a84:	af00      	add	r7, sp, #0
90009a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
90009a88:	f001 fd84 	bl	9000b594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
90009a8c:	687b      	ldr	r3, [r7, #4]
90009a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009a90:	687b      	ldr	r3, [r7, #4]
90009a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90009a94:	429a      	cmp	r2, r3
90009a96:	d102      	bne.n	90009a9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
90009a98:	2301      	movs	r3, #1
90009a9a:	60fb      	str	r3, [r7, #12]
90009a9c:	e001      	b.n	90009aa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
90009a9e:	2300      	movs	r3, #0
90009aa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
90009aa2:	f001 fda7 	bl	9000b5f4 <vPortExitCritical>

	return xReturn;
90009aa6:	68fb      	ldr	r3, [r7, #12]
}
90009aa8:	4618      	mov	r0, r3
90009aaa:	3710      	adds	r7, #16
90009aac:	46bd      	mov	sp, r7
90009aae:	bd80      	pop	{r7, pc}

90009ab0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
90009ab0:	b480      	push	{r7}
90009ab2:	b085      	sub	sp, #20
90009ab4:	af00      	add	r7, sp, #0
90009ab6:	6078      	str	r0, [r7, #4]
90009ab8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90009aba:	2300      	movs	r3, #0
90009abc:	60fb      	str	r3, [r7, #12]
90009abe:	e014      	b.n	90009aea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
90009ac0:	4a0f      	ldr	r2, [pc, #60]	; (90009b00 <vQueueAddToRegistry+0x50>)
90009ac2:	68fb      	ldr	r3, [r7, #12]
90009ac4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90009ac8:	2b00      	cmp	r3, #0
90009aca:	d10b      	bne.n	90009ae4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
90009acc:	490c      	ldr	r1, [pc, #48]	; (90009b00 <vQueueAddToRegistry+0x50>)
90009ace:	68fb      	ldr	r3, [r7, #12]
90009ad0:	683a      	ldr	r2, [r7, #0]
90009ad2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
90009ad6:	4a0a      	ldr	r2, [pc, #40]	; (90009b00 <vQueueAddToRegistry+0x50>)
90009ad8:	68fb      	ldr	r3, [r7, #12]
90009ada:	00db      	lsls	r3, r3, #3
90009adc:	4413      	add	r3, r2
90009ade:	687a      	ldr	r2, [r7, #4]
90009ae0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
90009ae2:	e006      	b.n	90009af2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90009ae4:	68fb      	ldr	r3, [r7, #12]
90009ae6:	3301      	adds	r3, #1
90009ae8:	60fb      	str	r3, [r7, #12]
90009aea:	68fb      	ldr	r3, [r7, #12]
90009aec:	2b07      	cmp	r3, #7
90009aee:	d9e7      	bls.n	90009ac0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
90009af0:	bf00      	nop
90009af2:	bf00      	nop
90009af4:	3714      	adds	r7, #20
90009af6:	46bd      	mov	sp, r7
90009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
90009afc:	4770      	bx	lr
90009afe:	bf00      	nop
90009b00:	24000da4 	.word	0x24000da4

90009b04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
90009b04:	b580      	push	{r7, lr}
90009b06:	b086      	sub	sp, #24
90009b08:	af00      	add	r7, sp, #0
90009b0a:	60f8      	str	r0, [r7, #12]
90009b0c:	60b9      	str	r1, [r7, #8]
90009b0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
90009b10:	68fb      	ldr	r3, [r7, #12]
90009b12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
90009b14:	f001 fd3e 	bl	9000b594 <vPortEnterCritical>
90009b18:	697b      	ldr	r3, [r7, #20]
90009b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90009b1e:	b25b      	sxtb	r3, r3
90009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
90009b24:	d103      	bne.n	90009b2e <vQueueWaitForMessageRestricted+0x2a>
90009b26:	697b      	ldr	r3, [r7, #20]
90009b28:	2200      	movs	r2, #0
90009b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90009b2e:	697b      	ldr	r3, [r7, #20]
90009b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90009b34:	b25b      	sxtb	r3, r3
90009b36:	f1b3 3fff 	cmp.w	r3, #4294967295
90009b3a:	d103      	bne.n	90009b44 <vQueueWaitForMessageRestricted+0x40>
90009b3c:	697b      	ldr	r3, [r7, #20]
90009b3e:	2200      	movs	r2, #0
90009b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90009b44:	f001 fd56 	bl	9000b5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
90009b48:	697b      	ldr	r3, [r7, #20]
90009b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90009b4c:	2b00      	cmp	r3, #0
90009b4e:	d106      	bne.n	90009b5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
90009b50:	697b      	ldr	r3, [r7, #20]
90009b52:	3324      	adds	r3, #36	; 0x24
90009b54:	687a      	ldr	r2, [r7, #4]
90009b56:	68b9      	ldr	r1, [r7, #8]
90009b58:	4618      	mov	r0, r3
90009b5a:	f000 fcd3 	bl	9000a504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
90009b5e:	6978      	ldr	r0, [r7, #20]
90009b60:	f7ff ff26 	bl	900099b0 <prvUnlockQueue>
	}
90009b64:	bf00      	nop
90009b66:	3718      	adds	r7, #24
90009b68:	46bd      	mov	sp, r7
90009b6a:	bd80      	pop	{r7, pc}

90009b6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
90009b6c:	b580      	push	{r7, lr}
90009b6e:	b08e      	sub	sp, #56	; 0x38
90009b70:	af04      	add	r7, sp, #16
90009b72:	60f8      	str	r0, [r7, #12]
90009b74:	60b9      	str	r1, [r7, #8]
90009b76:	607a      	str	r2, [r7, #4]
90009b78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
90009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90009b7c:	2b00      	cmp	r3, #0
90009b7e:	d10a      	bne.n	90009b96 <xTaskCreateStatic+0x2a>
	__asm volatile
90009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
90009b84:	f383 8811 	msr	BASEPRI, r3
90009b88:	f3bf 8f6f 	isb	sy
90009b8c:	f3bf 8f4f 	dsb	sy
90009b90:	623b      	str	r3, [r7, #32]
}
90009b92:	bf00      	nop
90009b94:	e7fe      	b.n	90009b94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
90009b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90009b98:	2b00      	cmp	r3, #0
90009b9a:	d10a      	bne.n	90009bb2 <xTaskCreateStatic+0x46>
	__asm volatile
90009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
90009ba0:	f383 8811 	msr	BASEPRI, r3
90009ba4:	f3bf 8f6f 	isb	sy
90009ba8:	f3bf 8f4f 	dsb	sy
90009bac:	61fb      	str	r3, [r7, #28]
}
90009bae:	bf00      	nop
90009bb0:	e7fe      	b.n	90009bb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
90009bb2:	23bc      	movs	r3, #188	; 0xbc
90009bb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
90009bb6:	693b      	ldr	r3, [r7, #16]
90009bb8:	2bbc      	cmp	r3, #188	; 0xbc
90009bba:	d00a      	beq.n	90009bd2 <xTaskCreateStatic+0x66>
	__asm volatile
90009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
90009bc0:	f383 8811 	msr	BASEPRI, r3
90009bc4:	f3bf 8f6f 	isb	sy
90009bc8:	f3bf 8f4f 	dsb	sy
90009bcc:	61bb      	str	r3, [r7, #24]
}
90009bce:	bf00      	nop
90009bd0:	e7fe      	b.n	90009bd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90009bd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
90009bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90009bd6:	2b00      	cmp	r3, #0
90009bd8:	d01e      	beq.n	90009c18 <xTaskCreateStatic+0xac>
90009bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90009bdc:	2b00      	cmp	r3, #0
90009bde:	d01b      	beq.n	90009c18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
90009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90009be2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90009be8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009bec:	2202      	movs	r2, #2
90009bee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
90009bf2:	2300      	movs	r3, #0
90009bf4:	9303      	str	r3, [sp, #12]
90009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009bf8:	9302      	str	r3, [sp, #8]
90009bfa:	f107 0314 	add.w	r3, r7, #20
90009bfe:	9301      	str	r3, [sp, #4]
90009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009c02:	9300      	str	r3, [sp, #0]
90009c04:	683b      	ldr	r3, [r7, #0]
90009c06:	687a      	ldr	r2, [r7, #4]
90009c08:	68b9      	ldr	r1, [r7, #8]
90009c0a:	68f8      	ldr	r0, [r7, #12]
90009c0c:	f000 f850 	bl	90009cb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
90009c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
90009c12:	f000 f8f3 	bl	90009dfc <prvAddNewTaskToReadyList>
90009c16:	e001      	b.n	90009c1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
90009c18:	2300      	movs	r3, #0
90009c1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
90009c1c:	697b      	ldr	r3, [r7, #20]
	}
90009c1e:	4618      	mov	r0, r3
90009c20:	3728      	adds	r7, #40	; 0x28
90009c22:	46bd      	mov	sp, r7
90009c24:	bd80      	pop	{r7, pc}

90009c26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
90009c26:	b580      	push	{r7, lr}
90009c28:	b08c      	sub	sp, #48	; 0x30
90009c2a:	af04      	add	r7, sp, #16
90009c2c:	60f8      	str	r0, [r7, #12]
90009c2e:	60b9      	str	r1, [r7, #8]
90009c30:	603b      	str	r3, [r7, #0]
90009c32:	4613      	mov	r3, r2
90009c34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90009c36:	88fb      	ldrh	r3, [r7, #6]
90009c38:	009b      	lsls	r3, r3, #2
90009c3a:	4618      	mov	r0, r3
90009c3c:	f001 fdcc 	bl	9000b7d8 <pvPortMalloc>
90009c40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
90009c42:	697b      	ldr	r3, [r7, #20]
90009c44:	2b00      	cmp	r3, #0
90009c46:	d00e      	beq.n	90009c66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90009c48:	20bc      	movs	r0, #188	; 0xbc
90009c4a:	f001 fdc5 	bl	9000b7d8 <pvPortMalloc>
90009c4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
90009c50:	69fb      	ldr	r3, [r7, #28]
90009c52:	2b00      	cmp	r3, #0
90009c54:	d003      	beq.n	90009c5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
90009c56:	69fb      	ldr	r3, [r7, #28]
90009c58:	697a      	ldr	r2, [r7, #20]
90009c5a:	631a      	str	r2, [r3, #48]	; 0x30
90009c5c:	e005      	b.n	90009c6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
90009c5e:	6978      	ldr	r0, [r7, #20]
90009c60:	f001 fe86 	bl	9000b970 <vPortFree>
90009c64:	e001      	b.n	90009c6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
90009c66:	2300      	movs	r3, #0
90009c68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
90009c6a:	69fb      	ldr	r3, [r7, #28]
90009c6c:	2b00      	cmp	r3, #0
90009c6e:	d017      	beq.n	90009ca0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90009c70:	69fb      	ldr	r3, [r7, #28]
90009c72:	2200      	movs	r2, #0
90009c74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90009c78:	88fa      	ldrh	r2, [r7, #6]
90009c7a:	2300      	movs	r3, #0
90009c7c:	9303      	str	r3, [sp, #12]
90009c7e:	69fb      	ldr	r3, [r7, #28]
90009c80:	9302      	str	r3, [sp, #8]
90009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009c84:	9301      	str	r3, [sp, #4]
90009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009c88:	9300      	str	r3, [sp, #0]
90009c8a:	683b      	ldr	r3, [r7, #0]
90009c8c:	68b9      	ldr	r1, [r7, #8]
90009c8e:	68f8      	ldr	r0, [r7, #12]
90009c90:	f000 f80e 	bl	90009cb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
90009c94:	69f8      	ldr	r0, [r7, #28]
90009c96:	f000 f8b1 	bl	90009dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90009c9a:	2301      	movs	r3, #1
90009c9c:	61bb      	str	r3, [r7, #24]
90009c9e:	e002      	b.n	90009ca6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90009ca0:	f04f 33ff 	mov.w	r3, #4294967295
90009ca4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
90009ca6:	69bb      	ldr	r3, [r7, #24]
	}
90009ca8:	4618      	mov	r0, r3
90009caa:	3720      	adds	r7, #32
90009cac:	46bd      	mov	sp, r7
90009cae:	bd80      	pop	{r7, pc}

90009cb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
90009cb0:	b580      	push	{r7, lr}
90009cb2:	b088      	sub	sp, #32
90009cb4:	af00      	add	r7, sp, #0
90009cb6:	60f8      	str	r0, [r7, #12]
90009cb8:	60b9      	str	r1, [r7, #8]
90009cba:	607a      	str	r2, [r7, #4]
90009cbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009cc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
90009cc2:	687b      	ldr	r3, [r7, #4]
90009cc4:	009b      	lsls	r3, r3, #2
90009cc6:	461a      	mov	r2, r3
90009cc8:	21a5      	movs	r1, #165	; 0xa5
90009cca:	f007 f9e1 	bl	90011090 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009cd2:	6879      	ldr	r1, [r7, #4]
90009cd4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
90009cd8:	440b      	add	r3, r1
90009cda:	009b      	lsls	r3, r3, #2
90009cdc:	4413      	add	r3, r2
90009cde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90009ce0:	69bb      	ldr	r3, [r7, #24]
90009ce2:	f023 0307 	bic.w	r3, r3, #7
90009ce6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
90009ce8:	69bb      	ldr	r3, [r7, #24]
90009cea:	f003 0307 	and.w	r3, r3, #7
90009cee:	2b00      	cmp	r3, #0
90009cf0:	d00a      	beq.n	90009d08 <prvInitialiseNewTask+0x58>
	__asm volatile
90009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
90009cf6:	f383 8811 	msr	BASEPRI, r3
90009cfa:	f3bf 8f6f 	isb	sy
90009cfe:	f3bf 8f4f 	dsb	sy
90009d02:	617b      	str	r3, [r7, #20]
}
90009d04:	bf00      	nop
90009d06:	e7fe      	b.n	90009d06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
90009d08:	68bb      	ldr	r3, [r7, #8]
90009d0a:	2b00      	cmp	r3, #0
90009d0c:	d01f      	beq.n	90009d4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
90009d0e:	2300      	movs	r3, #0
90009d10:	61fb      	str	r3, [r7, #28]
90009d12:	e012      	b.n	90009d3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90009d14:	68ba      	ldr	r2, [r7, #8]
90009d16:	69fb      	ldr	r3, [r7, #28]
90009d18:	4413      	add	r3, r2
90009d1a:	7819      	ldrb	r1, [r3, #0]
90009d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90009d1e:	69fb      	ldr	r3, [r7, #28]
90009d20:	4413      	add	r3, r2
90009d22:	3334      	adds	r3, #52	; 0x34
90009d24:	460a      	mov	r2, r1
90009d26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
90009d28:	68ba      	ldr	r2, [r7, #8]
90009d2a:	69fb      	ldr	r3, [r7, #28]
90009d2c:	4413      	add	r3, r2
90009d2e:	781b      	ldrb	r3, [r3, #0]
90009d30:	2b00      	cmp	r3, #0
90009d32:	d006      	beq.n	90009d42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
90009d34:	69fb      	ldr	r3, [r7, #28]
90009d36:	3301      	adds	r3, #1
90009d38:	61fb      	str	r3, [r7, #28]
90009d3a:	69fb      	ldr	r3, [r7, #28]
90009d3c:	2b0f      	cmp	r3, #15
90009d3e:	d9e9      	bls.n	90009d14 <prvInitialiseNewTask+0x64>
90009d40:	e000      	b.n	90009d44 <prvInitialiseNewTask+0x94>
			{
				break;
90009d42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d46:	2200      	movs	r2, #0
90009d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
90009d4c:	e003      	b.n	90009d56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d50:	2200      	movs	r2, #0
90009d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009d58:	2b37      	cmp	r3, #55	; 0x37
90009d5a:	d901      	bls.n	90009d60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
90009d5c:	2337      	movs	r3, #55	; 0x37
90009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
90009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
90009d64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
90009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
90009d6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
90009d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d6e:	2200      	movs	r2, #0
90009d70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d74:	3304      	adds	r3, #4
90009d76:	4618      	mov	r0, r3
90009d78:	f7fe fedc 	bl	90008b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d7e:	3318      	adds	r3, #24
90009d80:	4618      	mov	r0, r3
90009d82:	f7fe fed7 	bl	90008b34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90009d8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009d8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
90009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90009d9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
90009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009d9e:	2200      	movs	r2, #0
90009da0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009da6:	2200      	movs	r2, #0
90009da8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
90009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009dae:	3354      	adds	r3, #84	; 0x54
90009db0:	2260      	movs	r2, #96	; 0x60
90009db2:	2100      	movs	r1, #0
90009db4:	4618      	mov	r0, r3
90009db6:	f007 f96b 	bl	90011090 <memset>
90009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009dbc:	4a0c      	ldr	r2, [pc, #48]	; (90009df0 <prvInitialiseNewTask+0x140>)
90009dbe:	659a      	str	r2, [r3, #88]	; 0x58
90009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009dc2:	4a0c      	ldr	r2, [pc, #48]	; (90009df4 <prvInitialiseNewTask+0x144>)
90009dc4:	65da      	str	r2, [r3, #92]	; 0x5c
90009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009dc8:	4a0b      	ldr	r2, [pc, #44]	; (90009df8 <prvInitialiseNewTask+0x148>)
90009dca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90009dcc:	683a      	ldr	r2, [r7, #0]
90009dce:	68f9      	ldr	r1, [r7, #12]
90009dd0:	69b8      	ldr	r0, [r7, #24]
90009dd2:	f001 fab1 	bl	9000b338 <pxPortInitialiseStack>
90009dd6:	4602      	mov	r2, r0
90009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009dda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
90009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009dde:	2b00      	cmp	r3, #0
90009de0:	d002      	beq.n	90009de8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
90009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90009de6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90009de8:	bf00      	nop
90009dea:	3720      	adds	r7, #32
90009dec:	46bd      	mov	sp, r7
90009dee:	bd80      	pop	{r7, pc}
90009df0:	90014848 	.word	0x90014848
90009df4:	90014868 	.word	0x90014868
90009df8:	90014828 	.word	0x90014828

90009dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
90009dfc:	b580      	push	{r7, lr}
90009dfe:	b082      	sub	sp, #8
90009e00:	af00      	add	r7, sp, #0
90009e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
90009e04:	f001 fbc6 	bl	9000b594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
90009e08:	4b2d      	ldr	r3, [pc, #180]	; (90009ec0 <prvAddNewTaskToReadyList+0xc4>)
90009e0a:	681b      	ldr	r3, [r3, #0]
90009e0c:	3301      	adds	r3, #1
90009e0e:	4a2c      	ldr	r2, [pc, #176]	; (90009ec0 <prvAddNewTaskToReadyList+0xc4>)
90009e10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
90009e12:	4b2c      	ldr	r3, [pc, #176]	; (90009ec4 <prvAddNewTaskToReadyList+0xc8>)
90009e14:	681b      	ldr	r3, [r3, #0]
90009e16:	2b00      	cmp	r3, #0
90009e18:	d109      	bne.n	90009e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
90009e1a:	4a2a      	ldr	r2, [pc, #168]	; (90009ec4 <prvAddNewTaskToReadyList+0xc8>)
90009e1c:	687b      	ldr	r3, [r7, #4]
90009e1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
90009e20:	4b27      	ldr	r3, [pc, #156]	; (90009ec0 <prvAddNewTaskToReadyList+0xc4>)
90009e22:	681b      	ldr	r3, [r3, #0]
90009e24:	2b01      	cmp	r3, #1
90009e26:	d110      	bne.n	90009e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
90009e28:	f000 fc98 	bl	9000a75c <prvInitialiseTaskLists>
90009e2c:	e00d      	b.n	90009e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
90009e2e:	4b26      	ldr	r3, [pc, #152]	; (90009ec8 <prvAddNewTaskToReadyList+0xcc>)
90009e30:	681b      	ldr	r3, [r3, #0]
90009e32:	2b00      	cmp	r3, #0
90009e34:	d109      	bne.n	90009e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
90009e36:	4b23      	ldr	r3, [pc, #140]	; (90009ec4 <prvAddNewTaskToReadyList+0xc8>)
90009e38:	681b      	ldr	r3, [r3, #0]
90009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90009e3c:	687b      	ldr	r3, [r7, #4]
90009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009e40:	429a      	cmp	r2, r3
90009e42:	d802      	bhi.n	90009e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
90009e44:	4a1f      	ldr	r2, [pc, #124]	; (90009ec4 <prvAddNewTaskToReadyList+0xc8>)
90009e46:	687b      	ldr	r3, [r7, #4]
90009e48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
90009e4a:	4b20      	ldr	r3, [pc, #128]	; (90009ecc <prvAddNewTaskToReadyList+0xd0>)
90009e4c:	681b      	ldr	r3, [r3, #0]
90009e4e:	3301      	adds	r3, #1
90009e50:	4a1e      	ldr	r2, [pc, #120]	; (90009ecc <prvAddNewTaskToReadyList+0xd0>)
90009e52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
90009e54:	4b1d      	ldr	r3, [pc, #116]	; (90009ecc <prvAddNewTaskToReadyList+0xd0>)
90009e56:	681a      	ldr	r2, [r3, #0]
90009e58:	687b      	ldr	r3, [r7, #4]
90009e5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
90009e5c:	687b      	ldr	r3, [r7, #4]
90009e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90009e60:	4b1b      	ldr	r3, [pc, #108]	; (90009ed0 <prvAddNewTaskToReadyList+0xd4>)
90009e62:	681b      	ldr	r3, [r3, #0]
90009e64:	429a      	cmp	r2, r3
90009e66:	d903      	bls.n	90009e70 <prvAddNewTaskToReadyList+0x74>
90009e68:	687b      	ldr	r3, [r7, #4]
90009e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009e6c:	4a18      	ldr	r2, [pc, #96]	; (90009ed0 <prvAddNewTaskToReadyList+0xd4>)
90009e6e:	6013      	str	r3, [r2, #0]
90009e70:	687b      	ldr	r3, [r7, #4]
90009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90009e74:	4613      	mov	r3, r2
90009e76:	009b      	lsls	r3, r3, #2
90009e78:	4413      	add	r3, r2
90009e7a:	009b      	lsls	r3, r3, #2
90009e7c:	4a15      	ldr	r2, [pc, #84]	; (90009ed4 <prvAddNewTaskToReadyList+0xd8>)
90009e7e:	441a      	add	r2, r3
90009e80:	687b      	ldr	r3, [r7, #4]
90009e82:	3304      	adds	r3, #4
90009e84:	4619      	mov	r1, r3
90009e86:	4610      	mov	r0, r2
90009e88:	f7fe fe61 	bl	90008b4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
90009e8c:	f001 fbb2 	bl	9000b5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
90009e90:	4b0d      	ldr	r3, [pc, #52]	; (90009ec8 <prvAddNewTaskToReadyList+0xcc>)
90009e92:	681b      	ldr	r3, [r3, #0]
90009e94:	2b00      	cmp	r3, #0
90009e96:	d00e      	beq.n	90009eb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
90009e98:	4b0a      	ldr	r3, [pc, #40]	; (90009ec4 <prvAddNewTaskToReadyList+0xc8>)
90009e9a:	681b      	ldr	r3, [r3, #0]
90009e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90009e9e:	687b      	ldr	r3, [r7, #4]
90009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009ea2:	429a      	cmp	r2, r3
90009ea4:	d207      	bcs.n	90009eb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
90009ea6:	4b0c      	ldr	r3, [pc, #48]	; (90009ed8 <prvAddNewTaskToReadyList+0xdc>)
90009ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90009eac:	601a      	str	r2, [r3, #0]
90009eae:	f3bf 8f4f 	dsb	sy
90009eb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90009eb6:	bf00      	nop
90009eb8:	3708      	adds	r7, #8
90009eba:	46bd      	mov	sp, r7
90009ebc:	bd80      	pop	{r7, pc}
90009ebe:	bf00      	nop
90009ec0:	240012b8 	.word	0x240012b8
90009ec4:	24000de4 	.word	0x24000de4
90009ec8:	240012c4 	.word	0x240012c4
90009ecc:	240012d4 	.word	0x240012d4
90009ed0:	240012c0 	.word	0x240012c0
90009ed4:	24000de8 	.word	0x24000de8
90009ed8:	e000ed04 	.word	0xe000ed04

90009edc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
90009edc:	b580      	push	{r7, lr}
90009ede:	b084      	sub	sp, #16
90009ee0:	af00      	add	r7, sp, #0
90009ee2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
90009ee4:	f001 fb56 	bl	9000b594 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
90009ee8:	687b      	ldr	r3, [r7, #4]
90009eea:	2b00      	cmp	r3, #0
90009eec:	d102      	bne.n	90009ef4 <vTaskDelete+0x18>
90009eee:	4b2c      	ldr	r3, [pc, #176]	; (90009fa0 <vTaskDelete+0xc4>)
90009ef0:	681b      	ldr	r3, [r3, #0]
90009ef2:	e000      	b.n	90009ef6 <vTaskDelete+0x1a>
90009ef4:	687b      	ldr	r3, [r7, #4]
90009ef6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90009ef8:	68fb      	ldr	r3, [r7, #12]
90009efa:	3304      	adds	r3, #4
90009efc:	4618      	mov	r0, r3
90009efe:	f7fe fe83 	bl	90008c08 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90009f02:	68fb      	ldr	r3, [r7, #12]
90009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009f06:	2b00      	cmp	r3, #0
90009f08:	d004      	beq.n	90009f14 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90009f0a:	68fb      	ldr	r3, [r7, #12]
90009f0c:	3318      	adds	r3, #24
90009f0e:	4618      	mov	r0, r3
90009f10:	f7fe fe7a 	bl	90008c08 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
90009f14:	4b23      	ldr	r3, [pc, #140]	; (90009fa4 <vTaskDelete+0xc8>)
90009f16:	681b      	ldr	r3, [r3, #0]
90009f18:	3301      	adds	r3, #1
90009f1a:	4a22      	ldr	r2, [pc, #136]	; (90009fa4 <vTaskDelete+0xc8>)
90009f1c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
90009f1e:	4b20      	ldr	r3, [pc, #128]	; (90009fa0 <vTaskDelete+0xc4>)
90009f20:	681b      	ldr	r3, [r3, #0]
90009f22:	68fa      	ldr	r2, [r7, #12]
90009f24:	429a      	cmp	r2, r3
90009f26:	d10b      	bne.n	90009f40 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
90009f28:	68fb      	ldr	r3, [r7, #12]
90009f2a:	3304      	adds	r3, #4
90009f2c:	4619      	mov	r1, r3
90009f2e:	481e      	ldr	r0, [pc, #120]	; (90009fa8 <vTaskDelete+0xcc>)
90009f30:	f7fe fe0d 	bl	90008b4e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
90009f34:	4b1d      	ldr	r3, [pc, #116]	; (90009fac <vTaskDelete+0xd0>)
90009f36:	681b      	ldr	r3, [r3, #0]
90009f38:	3301      	adds	r3, #1
90009f3a:	4a1c      	ldr	r2, [pc, #112]	; (90009fac <vTaskDelete+0xd0>)
90009f3c:	6013      	str	r3, [r2, #0]
90009f3e:	e009      	b.n	90009f54 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
90009f40:	4b1b      	ldr	r3, [pc, #108]	; (90009fb0 <vTaskDelete+0xd4>)
90009f42:	681b      	ldr	r3, [r3, #0]
90009f44:	3b01      	subs	r3, #1
90009f46:	4a1a      	ldr	r2, [pc, #104]	; (90009fb0 <vTaskDelete+0xd4>)
90009f48:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
90009f4a:	68f8      	ldr	r0, [r7, #12]
90009f4c:	f000 fc74 	bl	9000a838 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
90009f50:	f000 fca6 	bl	9000a8a0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
90009f54:	f001 fb4e 	bl	9000b5f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
90009f58:	4b16      	ldr	r3, [pc, #88]	; (90009fb4 <vTaskDelete+0xd8>)
90009f5a:	681b      	ldr	r3, [r3, #0]
90009f5c:	2b00      	cmp	r3, #0
90009f5e:	d01b      	beq.n	90009f98 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
90009f60:	4b0f      	ldr	r3, [pc, #60]	; (90009fa0 <vTaskDelete+0xc4>)
90009f62:	681b      	ldr	r3, [r3, #0]
90009f64:	68fa      	ldr	r2, [r7, #12]
90009f66:	429a      	cmp	r2, r3
90009f68:	d116      	bne.n	90009f98 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
90009f6a:	4b13      	ldr	r3, [pc, #76]	; (90009fb8 <vTaskDelete+0xdc>)
90009f6c:	681b      	ldr	r3, [r3, #0]
90009f6e:	2b00      	cmp	r3, #0
90009f70:	d00a      	beq.n	90009f88 <vTaskDelete+0xac>
	__asm volatile
90009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
90009f76:	f383 8811 	msr	BASEPRI, r3
90009f7a:	f3bf 8f6f 	isb	sy
90009f7e:	f3bf 8f4f 	dsb	sy
90009f82:	60bb      	str	r3, [r7, #8]
}
90009f84:	bf00      	nop
90009f86:	e7fe      	b.n	90009f86 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
90009f88:	4b0c      	ldr	r3, [pc, #48]	; (90009fbc <vTaskDelete+0xe0>)
90009f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90009f8e:	601a      	str	r2, [r3, #0]
90009f90:	f3bf 8f4f 	dsb	sy
90009f94:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
90009f98:	bf00      	nop
90009f9a:	3710      	adds	r7, #16
90009f9c:	46bd      	mov	sp, r7
90009f9e:	bd80      	pop	{r7, pc}
90009fa0:	24000de4 	.word	0x24000de4
90009fa4:	240012d4 	.word	0x240012d4
90009fa8:	2400128c 	.word	0x2400128c
90009fac:	240012a0 	.word	0x240012a0
90009fb0:	240012b8 	.word	0x240012b8
90009fb4:	240012c4 	.word	0x240012c4
90009fb8:	240012e0 	.word	0x240012e0
90009fbc:	e000ed04 	.word	0xe000ed04

90009fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
90009fc0:	b580      	push	{r7, lr}
90009fc2:	b084      	sub	sp, #16
90009fc4:	af00      	add	r7, sp, #0
90009fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
90009fc8:	2300      	movs	r3, #0
90009fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
90009fcc:	687b      	ldr	r3, [r7, #4]
90009fce:	2b00      	cmp	r3, #0
90009fd0:	d017      	beq.n	9000a002 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
90009fd2:	4b13      	ldr	r3, [pc, #76]	; (9000a020 <vTaskDelay+0x60>)
90009fd4:	681b      	ldr	r3, [r3, #0]
90009fd6:	2b00      	cmp	r3, #0
90009fd8:	d00a      	beq.n	90009ff0 <vTaskDelay+0x30>
	__asm volatile
90009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
90009fde:	f383 8811 	msr	BASEPRI, r3
90009fe2:	f3bf 8f6f 	isb	sy
90009fe6:	f3bf 8f4f 	dsb	sy
90009fea:	60bb      	str	r3, [r7, #8]
}
90009fec:	bf00      	nop
90009fee:	e7fe      	b.n	90009fee <vTaskDelay+0x2e>
			vTaskSuspendAll();
90009ff0:	f000 f88a 	bl	9000a108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
90009ff4:	2100      	movs	r1, #0
90009ff6:	6878      	ldr	r0, [r7, #4]
90009ff8:	f000 fdfc 	bl	9000abf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
90009ffc:	f000 f892 	bl	9000a124 <xTaskResumeAll>
9000a000:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
9000a002:	68fb      	ldr	r3, [r7, #12]
9000a004:	2b00      	cmp	r3, #0
9000a006:	d107      	bne.n	9000a018 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
9000a008:	4b06      	ldr	r3, [pc, #24]	; (9000a024 <vTaskDelay+0x64>)
9000a00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000a00e:	601a      	str	r2, [r3, #0]
9000a010:	f3bf 8f4f 	dsb	sy
9000a014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
9000a018:	bf00      	nop
9000a01a:	3710      	adds	r7, #16
9000a01c:	46bd      	mov	sp, r7
9000a01e:	bd80      	pop	{r7, pc}
9000a020:	240012e0 	.word	0x240012e0
9000a024:	e000ed04 	.word	0xe000ed04

9000a028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
9000a028:	b580      	push	{r7, lr}
9000a02a:	b08a      	sub	sp, #40	; 0x28
9000a02c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000a02e:	2300      	movs	r3, #0
9000a030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000a032:	2300      	movs	r3, #0
9000a034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000a036:	463a      	mov	r2, r7
9000a038:	1d39      	adds	r1, r7, #4
9000a03a:	f107 0308 	add.w	r3, r7, #8
9000a03e:	4618      	mov	r0, r3
9000a040:	f7fe fd24 	bl	90008a8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000a044:	6839      	ldr	r1, [r7, #0]
9000a046:	687b      	ldr	r3, [r7, #4]
9000a048:	68ba      	ldr	r2, [r7, #8]
9000a04a:	9202      	str	r2, [sp, #8]
9000a04c:	9301      	str	r3, [sp, #4]
9000a04e:	2300      	movs	r3, #0
9000a050:	9300      	str	r3, [sp, #0]
9000a052:	2300      	movs	r3, #0
9000a054:	460a      	mov	r2, r1
9000a056:	4924      	ldr	r1, [pc, #144]	; (9000a0e8 <vTaskStartScheduler+0xc0>)
9000a058:	4824      	ldr	r0, [pc, #144]	; (9000a0ec <vTaskStartScheduler+0xc4>)
9000a05a:	f7ff fd87 	bl	90009b6c <xTaskCreateStatic>
9000a05e:	4603      	mov	r3, r0
9000a060:	4a23      	ldr	r2, [pc, #140]	; (9000a0f0 <vTaskStartScheduler+0xc8>)
9000a062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
9000a064:	4b22      	ldr	r3, [pc, #136]	; (9000a0f0 <vTaskStartScheduler+0xc8>)
9000a066:	681b      	ldr	r3, [r3, #0]
9000a068:	2b00      	cmp	r3, #0
9000a06a:	d002      	beq.n	9000a072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
9000a06c:	2301      	movs	r3, #1
9000a06e:	617b      	str	r3, [r7, #20]
9000a070:	e001      	b.n	9000a076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
9000a072:	2300      	movs	r3, #0
9000a074:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
9000a076:	697b      	ldr	r3, [r7, #20]
9000a078:	2b01      	cmp	r3, #1
9000a07a:	d102      	bne.n	9000a082 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
9000a07c:	f000 fe0e 	bl	9000ac9c <xTimerCreateTimerTask>
9000a080:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
9000a082:	697b      	ldr	r3, [r7, #20]
9000a084:	2b01      	cmp	r3, #1
9000a086:	d11b      	bne.n	9000a0c0 <vTaskStartScheduler+0x98>
	__asm volatile
9000a088:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a08c:	f383 8811 	msr	BASEPRI, r3
9000a090:	f3bf 8f6f 	isb	sy
9000a094:	f3bf 8f4f 	dsb	sy
9000a098:	613b      	str	r3, [r7, #16]
}
9000a09a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
9000a09c:	4b15      	ldr	r3, [pc, #84]	; (9000a0f4 <vTaskStartScheduler+0xcc>)
9000a09e:	681b      	ldr	r3, [r3, #0]
9000a0a0:	3354      	adds	r3, #84	; 0x54
9000a0a2:	4a15      	ldr	r2, [pc, #84]	; (9000a0f8 <vTaskStartScheduler+0xd0>)
9000a0a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
9000a0a6:	4b15      	ldr	r3, [pc, #84]	; (9000a0fc <vTaskStartScheduler+0xd4>)
9000a0a8:	f04f 32ff 	mov.w	r2, #4294967295
9000a0ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
9000a0ae:	4b14      	ldr	r3, [pc, #80]	; (9000a100 <vTaskStartScheduler+0xd8>)
9000a0b0:	2201      	movs	r2, #1
9000a0b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000a0b4:	4b13      	ldr	r3, [pc, #76]	; (9000a104 <vTaskStartScheduler+0xdc>)
9000a0b6:	2200      	movs	r2, #0
9000a0b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
9000a0ba:	f001 f9c9 	bl	9000b450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
9000a0be:	e00e      	b.n	9000a0de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000a0c0:	697b      	ldr	r3, [r7, #20]
9000a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
9000a0c6:	d10a      	bne.n	9000a0de <vTaskStartScheduler+0xb6>
	__asm volatile
9000a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a0cc:	f383 8811 	msr	BASEPRI, r3
9000a0d0:	f3bf 8f6f 	isb	sy
9000a0d4:	f3bf 8f4f 	dsb	sy
9000a0d8:	60fb      	str	r3, [r7, #12]
}
9000a0da:	bf00      	nop
9000a0dc:	e7fe      	b.n	9000a0dc <vTaskStartScheduler+0xb4>
}
9000a0de:	bf00      	nop
9000a0e0:	3718      	adds	r7, #24
9000a0e2:	46bd      	mov	sp, r7
9000a0e4:	bd80      	pop	{r7, pc}
9000a0e6:	bf00      	nop
9000a0e8:	90013de4 	.word	0x90013de4
9000a0ec:	9000a72d 	.word	0x9000a72d
9000a0f0:	240012dc 	.word	0x240012dc
9000a0f4:	24000de4 	.word	0x24000de4
9000a0f8:	2400001c 	.word	0x2400001c
9000a0fc:	240012d8 	.word	0x240012d8
9000a100:	240012c4 	.word	0x240012c4
9000a104:	240012bc 	.word	0x240012bc

9000a108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
9000a108:	b480      	push	{r7}
9000a10a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
9000a10c:	4b04      	ldr	r3, [pc, #16]	; (9000a120 <vTaskSuspendAll+0x18>)
9000a10e:	681b      	ldr	r3, [r3, #0]
9000a110:	3301      	adds	r3, #1
9000a112:	4a03      	ldr	r2, [pc, #12]	; (9000a120 <vTaskSuspendAll+0x18>)
9000a114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
9000a116:	bf00      	nop
9000a118:	46bd      	mov	sp, r7
9000a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a11e:	4770      	bx	lr
9000a120:	240012e0 	.word	0x240012e0

9000a124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
9000a124:	b580      	push	{r7, lr}
9000a126:	b084      	sub	sp, #16
9000a128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
9000a12a:	2300      	movs	r3, #0
9000a12c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
9000a12e:	2300      	movs	r3, #0
9000a130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
9000a132:	4b42      	ldr	r3, [pc, #264]	; (9000a23c <xTaskResumeAll+0x118>)
9000a134:	681b      	ldr	r3, [r3, #0]
9000a136:	2b00      	cmp	r3, #0
9000a138:	d10a      	bne.n	9000a150 <xTaskResumeAll+0x2c>
	__asm volatile
9000a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a13e:	f383 8811 	msr	BASEPRI, r3
9000a142:	f3bf 8f6f 	isb	sy
9000a146:	f3bf 8f4f 	dsb	sy
9000a14a:	603b      	str	r3, [r7, #0]
}
9000a14c:	bf00      	nop
9000a14e:	e7fe      	b.n	9000a14e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
9000a150:	f001 fa20 	bl	9000b594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
9000a154:	4b39      	ldr	r3, [pc, #228]	; (9000a23c <xTaskResumeAll+0x118>)
9000a156:	681b      	ldr	r3, [r3, #0]
9000a158:	3b01      	subs	r3, #1
9000a15a:	4a38      	ldr	r2, [pc, #224]	; (9000a23c <xTaskResumeAll+0x118>)
9000a15c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000a15e:	4b37      	ldr	r3, [pc, #220]	; (9000a23c <xTaskResumeAll+0x118>)
9000a160:	681b      	ldr	r3, [r3, #0]
9000a162:	2b00      	cmp	r3, #0
9000a164:	d162      	bne.n	9000a22c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000a166:	4b36      	ldr	r3, [pc, #216]	; (9000a240 <xTaskResumeAll+0x11c>)
9000a168:	681b      	ldr	r3, [r3, #0]
9000a16a:	2b00      	cmp	r3, #0
9000a16c:	d05e      	beq.n	9000a22c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000a16e:	e02f      	b.n	9000a1d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000a170:	4b34      	ldr	r3, [pc, #208]	; (9000a244 <xTaskResumeAll+0x120>)
9000a172:	68db      	ldr	r3, [r3, #12]
9000a174:	68db      	ldr	r3, [r3, #12]
9000a176:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000a178:	68fb      	ldr	r3, [r7, #12]
9000a17a:	3318      	adds	r3, #24
9000a17c:	4618      	mov	r0, r3
9000a17e:	f7fe fd43 	bl	90008c08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000a182:	68fb      	ldr	r3, [r7, #12]
9000a184:	3304      	adds	r3, #4
9000a186:	4618      	mov	r0, r3
9000a188:	f7fe fd3e 	bl	90008c08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000a18c:	68fb      	ldr	r3, [r7, #12]
9000a18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a190:	4b2d      	ldr	r3, [pc, #180]	; (9000a248 <xTaskResumeAll+0x124>)
9000a192:	681b      	ldr	r3, [r3, #0]
9000a194:	429a      	cmp	r2, r3
9000a196:	d903      	bls.n	9000a1a0 <xTaskResumeAll+0x7c>
9000a198:	68fb      	ldr	r3, [r7, #12]
9000a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a19c:	4a2a      	ldr	r2, [pc, #168]	; (9000a248 <xTaskResumeAll+0x124>)
9000a19e:	6013      	str	r3, [r2, #0]
9000a1a0:	68fb      	ldr	r3, [r7, #12]
9000a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a1a4:	4613      	mov	r3, r2
9000a1a6:	009b      	lsls	r3, r3, #2
9000a1a8:	4413      	add	r3, r2
9000a1aa:	009b      	lsls	r3, r3, #2
9000a1ac:	4a27      	ldr	r2, [pc, #156]	; (9000a24c <xTaskResumeAll+0x128>)
9000a1ae:	441a      	add	r2, r3
9000a1b0:	68fb      	ldr	r3, [r7, #12]
9000a1b2:	3304      	adds	r3, #4
9000a1b4:	4619      	mov	r1, r3
9000a1b6:	4610      	mov	r0, r2
9000a1b8:	f7fe fcc9 	bl	90008b4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000a1bc:	68fb      	ldr	r3, [r7, #12]
9000a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a1c0:	4b23      	ldr	r3, [pc, #140]	; (9000a250 <xTaskResumeAll+0x12c>)
9000a1c2:	681b      	ldr	r3, [r3, #0]
9000a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a1c6:	429a      	cmp	r2, r3
9000a1c8:	d302      	bcc.n	9000a1d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
9000a1ca:	4b22      	ldr	r3, [pc, #136]	; (9000a254 <xTaskResumeAll+0x130>)
9000a1cc:	2201      	movs	r2, #1
9000a1ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000a1d0:	4b1c      	ldr	r3, [pc, #112]	; (9000a244 <xTaskResumeAll+0x120>)
9000a1d2:	681b      	ldr	r3, [r3, #0]
9000a1d4:	2b00      	cmp	r3, #0
9000a1d6:	d1cb      	bne.n	9000a170 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
9000a1d8:	68fb      	ldr	r3, [r7, #12]
9000a1da:	2b00      	cmp	r3, #0
9000a1dc:	d001      	beq.n	9000a1e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
9000a1de:	f000 fb5f 	bl	9000a8a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000a1e2:	4b1d      	ldr	r3, [pc, #116]	; (9000a258 <xTaskResumeAll+0x134>)
9000a1e4:	681b      	ldr	r3, [r3, #0]
9000a1e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
9000a1e8:	687b      	ldr	r3, [r7, #4]
9000a1ea:	2b00      	cmp	r3, #0
9000a1ec:	d010      	beq.n	9000a210 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
9000a1ee:	f000 f847 	bl	9000a280 <xTaskIncrementTick>
9000a1f2:	4603      	mov	r3, r0
9000a1f4:	2b00      	cmp	r3, #0
9000a1f6:	d002      	beq.n	9000a1fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
9000a1f8:	4b16      	ldr	r3, [pc, #88]	; (9000a254 <xTaskResumeAll+0x130>)
9000a1fa:	2201      	movs	r2, #1
9000a1fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
9000a1fe:	687b      	ldr	r3, [r7, #4]
9000a200:	3b01      	subs	r3, #1
9000a202:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000a204:	687b      	ldr	r3, [r7, #4]
9000a206:	2b00      	cmp	r3, #0
9000a208:	d1f1      	bne.n	9000a1ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
9000a20a:	4b13      	ldr	r3, [pc, #76]	; (9000a258 <xTaskResumeAll+0x134>)
9000a20c:	2200      	movs	r2, #0
9000a20e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
9000a210:	4b10      	ldr	r3, [pc, #64]	; (9000a254 <xTaskResumeAll+0x130>)
9000a212:	681b      	ldr	r3, [r3, #0]
9000a214:	2b00      	cmp	r3, #0
9000a216:	d009      	beq.n	9000a22c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
9000a218:	2301      	movs	r3, #1
9000a21a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
9000a21c:	4b0f      	ldr	r3, [pc, #60]	; (9000a25c <xTaskResumeAll+0x138>)
9000a21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000a222:	601a      	str	r2, [r3, #0]
9000a224:	f3bf 8f4f 	dsb	sy
9000a228:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000a22c:	f001 f9e2 	bl	9000b5f4 <vPortExitCritical>

	return xAlreadyYielded;
9000a230:	68bb      	ldr	r3, [r7, #8]
}
9000a232:	4618      	mov	r0, r3
9000a234:	3710      	adds	r7, #16
9000a236:	46bd      	mov	sp, r7
9000a238:	bd80      	pop	{r7, pc}
9000a23a:	bf00      	nop
9000a23c:	240012e0 	.word	0x240012e0
9000a240:	240012b8 	.word	0x240012b8
9000a244:	24001278 	.word	0x24001278
9000a248:	240012c0 	.word	0x240012c0
9000a24c:	24000de8 	.word	0x24000de8
9000a250:	24000de4 	.word	0x24000de4
9000a254:	240012cc 	.word	0x240012cc
9000a258:	240012c8 	.word	0x240012c8
9000a25c:	e000ed04 	.word	0xe000ed04

9000a260 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
9000a260:	b480      	push	{r7}
9000a262:	b083      	sub	sp, #12
9000a264:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
9000a266:	4b05      	ldr	r3, [pc, #20]	; (9000a27c <xTaskGetTickCount+0x1c>)
9000a268:	681b      	ldr	r3, [r3, #0]
9000a26a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
9000a26c:	687b      	ldr	r3, [r7, #4]
}
9000a26e:	4618      	mov	r0, r3
9000a270:	370c      	adds	r7, #12
9000a272:	46bd      	mov	sp, r7
9000a274:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a278:	4770      	bx	lr
9000a27a:	bf00      	nop
9000a27c:	240012bc 	.word	0x240012bc

9000a280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
9000a280:	b580      	push	{r7, lr}
9000a282:	b086      	sub	sp, #24
9000a284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
9000a286:	2300      	movs	r3, #0
9000a288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000a28a:	4b4f      	ldr	r3, [pc, #316]	; (9000a3c8 <xTaskIncrementTick+0x148>)
9000a28c:	681b      	ldr	r3, [r3, #0]
9000a28e:	2b00      	cmp	r3, #0
9000a290:	f040 808f 	bne.w	9000a3b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000a294:	4b4d      	ldr	r3, [pc, #308]	; (9000a3cc <xTaskIncrementTick+0x14c>)
9000a296:	681b      	ldr	r3, [r3, #0]
9000a298:	3301      	adds	r3, #1
9000a29a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
9000a29c:	4a4b      	ldr	r2, [pc, #300]	; (9000a3cc <xTaskIncrementTick+0x14c>)
9000a29e:	693b      	ldr	r3, [r7, #16]
9000a2a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000a2a2:	693b      	ldr	r3, [r7, #16]
9000a2a4:	2b00      	cmp	r3, #0
9000a2a6:	d120      	bne.n	9000a2ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
9000a2a8:	4b49      	ldr	r3, [pc, #292]	; (9000a3d0 <xTaskIncrementTick+0x150>)
9000a2aa:	681b      	ldr	r3, [r3, #0]
9000a2ac:	681b      	ldr	r3, [r3, #0]
9000a2ae:	2b00      	cmp	r3, #0
9000a2b0:	d00a      	beq.n	9000a2c8 <xTaskIncrementTick+0x48>
	__asm volatile
9000a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a2b6:	f383 8811 	msr	BASEPRI, r3
9000a2ba:	f3bf 8f6f 	isb	sy
9000a2be:	f3bf 8f4f 	dsb	sy
9000a2c2:	603b      	str	r3, [r7, #0]
}
9000a2c4:	bf00      	nop
9000a2c6:	e7fe      	b.n	9000a2c6 <xTaskIncrementTick+0x46>
9000a2c8:	4b41      	ldr	r3, [pc, #260]	; (9000a3d0 <xTaskIncrementTick+0x150>)
9000a2ca:	681b      	ldr	r3, [r3, #0]
9000a2cc:	60fb      	str	r3, [r7, #12]
9000a2ce:	4b41      	ldr	r3, [pc, #260]	; (9000a3d4 <xTaskIncrementTick+0x154>)
9000a2d0:	681b      	ldr	r3, [r3, #0]
9000a2d2:	4a3f      	ldr	r2, [pc, #252]	; (9000a3d0 <xTaskIncrementTick+0x150>)
9000a2d4:	6013      	str	r3, [r2, #0]
9000a2d6:	4a3f      	ldr	r2, [pc, #252]	; (9000a3d4 <xTaskIncrementTick+0x154>)
9000a2d8:	68fb      	ldr	r3, [r7, #12]
9000a2da:	6013      	str	r3, [r2, #0]
9000a2dc:	4b3e      	ldr	r3, [pc, #248]	; (9000a3d8 <xTaskIncrementTick+0x158>)
9000a2de:	681b      	ldr	r3, [r3, #0]
9000a2e0:	3301      	adds	r3, #1
9000a2e2:	4a3d      	ldr	r2, [pc, #244]	; (9000a3d8 <xTaskIncrementTick+0x158>)
9000a2e4:	6013      	str	r3, [r2, #0]
9000a2e6:	f000 fadb 	bl	9000a8a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
9000a2ea:	4b3c      	ldr	r3, [pc, #240]	; (9000a3dc <xTaskIncrementTick+0x15c>)
9000a2ec:	681b      	ldr	r3, [r3, #0]
9000a2ee:	693a      	ldr	r2, [r7, #16]
9000a2f0:	429a      	cmp	r2, r3
9000a2f2:	d349      	bcc.n	9000a388 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000a2f4:	4b36      	ldr	r3, [pc, #216]	; (9000a3d0 <xTaskIncrementTick+0x150>)
9000a2f6:	681b      	ldr	r3, [r3, #0]
9000a2f8:	681b      	ldr	r3, [r3, #0]
9000a2fa:	2b00      	cmp	r3, #0
9000a2fc:	d104      	bne.n	9000a308 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000a2fe:	4b37      	ldr	r3, [pc, #220]	; (9000a3dc <xTaskIncrementTick+0x15c>)
9000a300:	f04f 32ff 	mov.w	r2, #4294967295
9000a304:	601a      	str	r2, [r3, #0]
					break;
9000a306:	e03f      	b.n	9000a388 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000a308:	4b31      	ldr	r3, [pc, #196]	; (9000a3d0 <xTaskIncrementTick+0x150>)
9000a30a:	681b      	ldr	r3, [r3, #0]
9000a30c:	68db      	ldr	r3, [r3, #12]
9000a30e:	68db      	ldr	r3, [r3, #12]
9000a310:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000a312:	68bb      	ldr	r3, [r7, #8]
9000a314:	685b      	ldr	r3, [r3, #4]
9000a316:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
9000a318:	693a      	ldr	r2, [r7, #16]
9000a31a:	687b      	ldr	r3, [r7, #4]
9000a31c:	429a      	cmp	r2, r3
9000a31e:	d203      	bcs.n	9000a328 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
9000a320:	4a2e      	ldr	r2, [pc, #184]	; (9000a3dc <xTaskIncrementTick+0x15c>)
9000a322:	687b      	ldr	r3, [r7, #4]
9000a324:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000a326:	e02f      	b.n	9000a388 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000a328:	68bb      	ldr	r3, [r7, #8]
9000a32a:	3304      	adds	r3, #4
9000a32c:	4618      	mov	r0, r3
9000a32e:	f7fe fc6b 	bl	90008c08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000a332:	68bb      	ldr	r3, [r7, #8]
9000a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a336:	2b00      	cmp	r3, #0
9000a338:	d004      	beq.n	9000a344 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000a33a:	68bb      	ldr	r3, [r7, #8]
9000a33c:	3318      	adds	r3, #24
9000a33e:	4618      	mov	r0, r3
9000a340:	f7fe fc62 	bl	90008c08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
9000a344:	68bb      	ldr	r3, [r7, #8]
9000a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a348:	4b25      	ldr	r3, [pc, #148]	; (9000a3e0 <xTaskIncrementTick+0x160>)
9000a34a:	681b      	ldr	r3, [r3, #0]
9000a34c:	429a      	cmp	r2, r3
9000a34e:	d903      	bls.n	9000a358 <xTaskIncrementTick+0xd8>
9000a350:	68bb      	ldr	r3, [r7, #8]
9000a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a354:	4a22      	ldr	r2, [pc, #136]	; (9000a3e0 <xTaskIncrementTick+0x160>)
9000a356:	6013      	str	r3, [r2, #0]
9000a358:	68bb      	ldr	r3, [r7, #8]
9000a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a35c:	4613      	mov	r3, r2
9000a35e:	009b      	lsls	r3, r3, #2
9000a360:	4413      	add	r3, r2
9000a362:	009b      	lsls	r3, r3, #2
9000a364:	4a1f      	ldr	r2, [pc, #124]	; (9000a3e4 <xTaskIncrementTick+0x164>)
9000a366:	441a      	add	r2, r3
9000a368:	68bb      	ldr	r3, [r7, #8]
9000a36a:	3304      	adds	r3, #4
9000a36c:	4619      	mov	r1, r3
9000a36e:	4610      	mov	r0, r2
9000a370:	f7fe fbed 	bl	90008b4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000a374:	68bb      	ldr	r3, [r7, #8]
9000a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a378:	4b1b      	ldr	r3, [pc, #108]	; (9000a3e8 <xTaskIncrementTick+0x168>)
9000a37a:	681b      	ldr	r3, [r3, #0]
9000a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a37e:	429a      	cmp	r2, r3
9000a380:	d3b8      	bcc.n	9000a2f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
9000a382:	2301      	movs	r3, #1
9000a384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000a386:	e7b5      	b.n	9000a2f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000a388:	4b17      	ldr	r3, [pc, #92]	; (9000a3e8 <xTaskIncrementTick+0x168>)
9000a38a:	681b      	ldr	r3, [r3, #0]
9000a38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a38e:	4915      	ldr	r1, [pc, #84]	; (9000a3e4 <xTaskIncrementTick+0x164>)
9000a390:	4613      	mov	r3, r2
9000a392:	009b      	lsls	r3, r3, #2
9000a394:	4413      	add	r3, r2
9000a396:	009b      	lsls	r3, r3, #2
9000a398:	440b      	add	r3, r1
9000a39a:	681b      	ldr	r3, [r3, #0]
9000a39c:	2b01      	cmp	r3, #1
9000a39e:	d901      	bls.n	9000a3a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
9000a3a0:	2301      	movs	r3, #1
9000a3a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
9000a3a4:	4b11      	ldr	r3, [pc, #68]	; (9000a3ec <xTaskIncrementTick+0x16c>)
9000a3a6:	681b      	ldr	r3, [r3, #0]
9000a3a8:	2b00      	cmp	r3, #0
9000a3aa:	d007      	beq.n	9000a3bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
9000a3ac:	2301      	movs	r3, #1
9000a3ae:	617b      	str	r3, [r7, #20]
9000a3b0:	e004      	b.n	9000a3bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
9000a3b2:	4b0f      	ldr	r3, [pc, #60]	; (9000a3f0 <xTaskIncrementTick+0x170>)
9000a3b4:	681b      	ldr	r3, [r3, #0]
9000a3b6:	3301      	adds	r3, #1
9000a3b8:	4a0d      	ldr	r2, [pc, #52]	; (9000a3f0 <xTaskIncrementTick+0x170>)
9000a3ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
9000a3bc:	697b      	ldr	r3, [r7, #20]
}
9000a3be:	4618      	mov	r0, r3
9000a3c0:	3718      	adds	r7, #24
9000a3c2:	46bd      	mov	sp, r7
9000a3c4:	bd80      	pop	{r7, pc}
9000a3c6:	bf00      	nop
9000a3c8:	240012e0 	.word	0x240012e0
9000a3cc:	240012bc 	.word	0x240012bc
9000a3d0:	24001270 	.word	0x24001270
9000a3d4:	24001274 	.word	0x24001274
9000a3d8:	240012d0 	.word	0x240012d0
9000a3dc:	240012d8 	.word	0x240012d8
9000a3e0:	240012c0 	.word	0x240012c0
9000a3e4:	24000de8 	.word	0x24000de8
9000a3e8:	24000de4 	.word	0x24000de4
9000a3ec:	240012cc 	.word	0x240012cc
9000a3f0:	240012c8 	.word	0x240012c8

9000a3f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
9000a3f4:	b480      	push	{r7}
9000a3f6:	b085      	sub	sp, #20
9000a3f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000a3fa:	4b2a      	ldr	r3, [pc, #168]	; (9000a4a4 <vTaskSwitchContext+0xb0>)
9000a3fc:	681b      	ldr	r3, [r3, #0]
9000a3fe:	2b00      	cmp	r3, #0
9000a400:	d003      	beq.n	9000a40a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
9000a402:	4b29      	ldr	r3, [pc, #164]	; (9000a4a8 <vTaskSwitchContext+0xb4>)
9000a404:	2201      	movs	r2, #1
9000a406:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
9000a408:	e046      	b.n	9000a498 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
9000a40a:	4b27      	ldr	r3, [pc, #156]	; (9000a4a8 <vTaskSwitchContext+0xb4>)
9000a40c:	2200      	movs	r2, #0
9000a40e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000a410:	4b26      	ldr	r3, [pc, #152]	; (9000a4ac <vTaskSwitchContext+0xb8>)
9000a412:	681b      	ldr	r3, [r3, #0]
9000a414:	60fb      	str	r3, [r7, #12]
9000a416:	e010      	b.n	9000a43a <vTaskSwitchContext+0x46>
9000a418:	68fb      	ldr	r3, [r7, #12]
9000a41a:	2b00      	cmp	r3, #0
9000a41c:	d10a      	bne.n	9000a434 <vTaskSwitchContext+0x40>
	__asm volatile
9000a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a422:	f383 8811 	msr	BASEPRI, r3
9000a426:	f3bf 8f6f 	isb	sy
9000a42a:	f3bf 8f4f 	dsb	sy
9000a42e:	607b      	str	r3, [r7, #4]
}
9000a430:	bf00      	nop
9000a432:	e7fe      	b.n	9000a432 <vTaskSwitchContext+0x3e>
9000a434:	68fb      	ldr	r3, [r7, #12]
9000a436:	3b01      	subs	r3, #1
9000a438:	60fb      	str	r3, [r7, #12]
9000a43a:	491d      	ldr	r1, [pc, #116]	; (9000a4b0 <vTaskSwitchContext+0xbc>)
9000a43c:	68fa      	ldr	r2, [r7, #12]
9000a43e:	4613      	mov	r3, r2
9000a440:	009b      	lsls	r3, r3, #2
9000a442:	4413      	add	r3, r2
9000a444:	009b      	lsls	r3, r3, #2
9000a446:	440b      	add	r3, r1
9000a448:	681b      	ldr	r3, [r3, #0]
9000a44a:	2b00      	cmp	r3, #0
9000a44c:	d0e4      	beq.n	9000a418 <vTaskSwitchContext+0x24>
9000a44e:	68fa      	ldr	r2, [r7, #12]
9000a450:	4613      	mov	r3, r2
9000a452:	009b      	lsls	r3, r3, #2
9000a454:	4413      	add	r3, r2
9000a456:	009b      	lsls	r3, r3, #2
9000a458:	4a15      	ldr	r2, [pc, #84]	; (9000a4b0 <vTaskSwitchContext+0xbc>)
9000a45a:	4413      	add	r3, r2
9000a45c:	60bb      	str	r3, [r7, #8]
9000a45e:	68bb      	ldr	r3, [r7, #8]
9000a460:	685b      	ldr	r3, [r3, #4]
9000a462:	685a      	ldr	r2, [r3, #4]
9000a464:	68bb      	ldr	r3, [r7, #8]
9000a466:	605a      	str	r2, [r3, #4]
9000a468:	68bb      	ldr	r3, [r7, #8]
9000a46a:	685a      	ldr	r2, [r3, #4]
9000a46c:	68bb      	ldr	r3, [r7, #8]
9000a46e:	3308      	adds	r3, #8
9000a470:	429a      	cmp	r2, r3
9000a472:	d104      	bne.n	9000a47e <vTaskSwitchContext+0x8a>
9000a474:	68bb      	ldr	r3, [r7, #8]
9000a476:	685b      	ldr	r3, [r3, #4]
9000a478:	685a      	ldr	r2, [r3, #4]
9000a47a:	68bb      	ldr	r3, [r7, #8]
9000a47c:	605a      	str	r2, [r3, #4]
9000a47e:	68bb      	ldr	r3, [r7, #8]
9000a480:	685b      	ldr	r3, [r3, #4]
9000a482:	68db      	ldr	r3, [r3, #12]
9000a484:	4a0b      	ldr	r2, [pc, #44]	; (9000a4b4 <vTaskSwitchContext+0xc0>)
9000a486:	6013      	str	r3, [r2, #0]
9000a488:	4a08      	ldr	r2, [pc, #32]	; (9000a4ac <vTaskSwitchContext+0xb8>)
9000a48a:	68fb      	ldr	r3, [r7, #12]
9000a48c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
9000a48e:	4b09      	ldr	r3, [pc, #36]	; (9000a4b4 <vTaskSwitchContext+0xc0>)
9000a490:	681b      	ldr	r3, [r3, #0]
9000a492:	3354      	adds	r3, #84	; 0x54
9000a494:	4a08      	ldr	r2, [pc, #32]	; (9000a4b8 <vTaskSwitchContext+0xc4>)
9000a496:	6013      	str	r3, [r2, #0]
}
9000a498:	bf00      	nop
9000a49a:	3714      	adds	r7, #20
9000a49c:	46bd      	mov	sp, r7
9000a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a4a2:	4770      	bx	lr
9000a4a4:	240012e0 	.word	0x240012e0
9000a4a8:	240012cc 	.word	0x240012cc
9000a4ac:	240012c0 	.word	0x240012c0
9000a4b0:	24000de8 	.word	0x24000de8
9000a4b4:	24000de4 	.word	0x24000de4
9000a4b8:	2400001c 	.word	0x2400001c

9000a4bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
9000a4bc:	b580      	push	{r7, lr}
9000a4be:	b084      	sub	sp, #16
9000a4c0:	af00      	add	r7, sp, #0
9000a4c2:	6078      	str	r0, [r7, #4]
9000a4c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
9000a4c6:	687b      	ldr	r3, [r7, #4]
9000a4c8:	2b00      	cmp	r3, #0
9000a4ca:	d10a      	bne.n	9000a4e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
9000a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a4d0:	f383 8811 	msr	BASEPRI, r3
9000a4d4:	f3bf 8f6f 	isb	sy
9000a4d8:	f3bf 8f4f 	dsb	sy
9000a4dc:	60fb      	str	r3, [r7, #12]
}
9000a4de:	bf00      	nop
9000a4e0:	e7fe      	b.n	9000a4e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000a4e2:	4b07      	ldr	r3, [pc, #28]	; (9000a500 <vTaskPlaceOnEventList+0x44>)
9000a4e4:	681b      	ldr	r3, [r3, #0]
9000a4e6:	3318      	adds	r3, #24
9000a4e8:	4619      	mov	r1, r3
9000a4ea:	6878      	ldr	r0, [r7, #4]
9000a4ec:	f7fe fb53 	bl	90008b96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
9000a4f0:	2101      	movs	r1, #1
9000a4f2:	6838      	ldr	r0, [r7, #0]
9000a4f4:	f000 fb7e 	bl	9000abf4 <prvAddCurrentTaskToDelayedList>
}
9000a4f8:	bf00      	nop
9000a4fa:	3710      	adds	r7, #16
9000a4fc:	46bd      	mov	sp, r7
9000a4fe:	bd80      	pop	{r7, pc}
9000a500:	24000de4 	.word	0x24000de4

9000a504 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000a504:	b580      	push	{r7, lr}
9000a506:	b086      	sub	sp, #24
9000a508:	af00      	add	r7, sp, #0
9000a50a:	60f8      	str	r0, [r7, #12]
9000a50c:	60b9      	str	r1, [r7, #8]
9000a50e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
9000a510:	68fb      	ldr	r3, [r7, #12]
9000a512:	2b00      	cmp	r3, #0
9000a514:	d10a      	bne.n	9000a52c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
9000a516:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a51a:	f383 8811 	msr	BASEPRI, r3
9000a51e:	f3bf 8f6f 	isb	sy
9000a522:	f3bf 8f4f 	dsb	sy
9000a526:	617b      	str	r3, [r7, #20]
}
9000a528:	bf00      	nop
9000a52a:	e7fe      	b.n	9000a52a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000a52c:	4b0a      	ldr	r3, [pc, #40]	; (9000a558 <vTaskPlaceOnEventListRestricted+0x54>)
9000a52e:	681b      	ldr	r3, [r3, #0]
9000a530:	3318      	adds	r3, #24
9000a532:	4619      	mov	r1, r3
9000a534:	68f8      	ldr	r0, [r7, #12]
9000a536:	f7fe fb0a 	bl	90008b4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
9000a53a:	687b      	ldr	r3, [r7, #4]
9000a53c:	2b00      	cmp	r3, #0
9000a53e:	d002      	beq.n	9000a546 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
9000a540:	f04f 33ff 	mov.w	r3, #4294967295
9000a544:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
9000a546:	6879      	ldr	r1, [r7, #4]
9000a548:	68b8      	ldr	r0, [r7, #8]
9000a54a:	f000 fb53 	bl	9000abf4 <prvAddCurrentTaskToDelayedList>
	}
9000a54e:	bf00      	nop
9000a550:	3718      	adds	r7, #24
9000a552:	46bd      	mov	sp, r7
9000a554:	bd80      	pop	{r7, pc}
9000a556:	bf00      	nop
9000a558:	24000de4 	.word	0x24000de4

9000a55c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
9000a55c:	b580      	push	{r7, lr}
9000a55e:	b086      	sub	sp, #24
9000a560:	af00      	add	r7, sp, #0
9000a562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000a564:	687b      	ldr	r3, [r7, #4]
9000a566:	68db      	ldr	r3, [r3, #12]
9000a568:	68db      	ldr	r3, [r3, #12]
9000a56a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
9000a56c:	693b      	ldr	r3, [r7, #16]
9000a56e:	2b00      	cmp	r3, #0
9000a570:	d10a      	bne.n	9000a588 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
9000a572:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a576:	f383 8811 	msr	BASEPRI, r3
9000a57a:	f3bf 8f6f 	isb	sy
9000a57e:	f3bf 8f4f 	dsb	sy
9000a582:	60fb      	str	r3, [r7, #12]
}
9000a584:	bf00      	nop
9000a586:	e7fe      	b.n	9000a586 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000a588:	693b      	ldr	r3, [r7, #16]
9000a58a:	3318      	adds	r3, #24
9000a58c:	4618      	mov	r0, r3
9000a58e:	f7fe fb3b 	bl	90008c08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000a592:	4b1e      	ldr	r3, [pc, #120]	; (9000a60c <xTaskRemoveFromEventList+0xb0>)
9000a594:	681b      	ldr	r3, [r3, #0]
9000a596:	2b00      	cmp	r3, #0
9000a598:	d11d      	bne.n	9000a5d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000a59a:	693b      	ldr	r3, [r7, #16]
9000a59c:	3304      	adds	r3, #4
9000a59e:	4618      	mov	r0, r3
9000a5a0:	f7fe fb32 	bl	90008c08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000a5a4:	693b      	ldr	r3, [r7, #16]
9000a5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a5a8:	4b19      	ldr	r3, [pc, #100]	; (9000a610 <xTaskRemoveFromEventList+0xb4>)
9000a5aa:	681b      	ldr	r3, [r3, #0]
9000a5ac:	429a      	cmp	r2, r3
9000a5ae:	d903      	bls.n	9000a5b8 <xTaskRemoveFromEventList+0x5c>
9000a5b0:	693b      	ldr	r3, [r7, #16]
9000a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a5b4:	4a16      	ldr	r2, [pc, #88]	; (9000a610 <xTaskRemoveFromEventList+0xb4>)
9000a5b6:	6013      	str	r3, [r2, #0]
9000a5b8:	693b      	ldr	r3, [r7, #16]
9000a5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a5bc:	4613      	mov	r3, r2
9000a5be:	009b      	lsls	r3, r3, #2
9000a5c0:	4413      	add	r3, r2
9000a5c2:	009b      	lsls	r3, r3, #2
9000a5c4:	4a13      	ldr	r2, [pc, #76]	; (9000a614 <xTaskRemoveFromEventList+0xb8>)
9000a5c6:	441a      	add	r2, r3
9000a5c8:	693b      	ldr	r3, [r7, #16]
9000a5ca:	3304      	adds	r3, #4
9000a5cc:	4619      	mov	r1, r3
9000a5ce:	4610      	mov	r0, r2
9000a5d0:	f7fe fabd 	bl	90008b4e <vListInsertEnd>
9000a5d4:	e005      	b.n	9000a5e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000a5d6:	693b      	ldr	r3, [r7, #16]
9000a5d8:	3318      	adds	r3, #24
9000a5da:	4619      	mov	r1, r3
9000a5dc:	480e      	ldr	r0, [pc, #56]	; (9000a618 <xTaskRemoveFromEventList+0xbc>)
9000a5de:	f7fe fab6 	bl	90008b4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000a5e2:	693b      	ldr	r3, [r7, #16]
9000a5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a5e6:	4b0d      	ldr	r3, [pc, #52]	; (9000a61c <xTaskRemoveFromEventList+0xc0>)
9000a5e8:	681b      	ldr	r3, [r3, #0]
9000a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a5ec:	429a      	cmp	r2, r3
9000a5ee:	d905      	bls.n	9000a5fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
9000a5f0:	2301      	movs	r3, #1
9000a5f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
9000a5f4:	4b0a      	ldr	r3, [pc, #40]	; (9000a620 <xTaskRemoveFromEventList+0xc4>)
9000a5f6:	2201      	movs	r2, #1
9000a5f8:	601a      	str	r2, [r3, #0]
9000a5fa:	e001      	b.n	9000a600 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
9000a5fc:	2300      	movs	r3, #0
9000a5fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
9000a600:	697b      	ldr	r3, [r7, #20]
}
9000a602:	4618      	mov	r0, r3
9000a604:	3718      	adds	r7, #24
9000a606:	46bd      	mov	sp, r7
9000a608:	bd80      	pop	{r7, pc}
9000a60a:	bf00      	nop
9000a60c:	240012e0 	.word	0x240012e0
9000a610:	240012c0 	.word	0x240012c0
9000a614:	24000de8 	.word	0x24000de8
9000a618:	24001278 	.word	0x24001278
9000a61c:	24000de4 	.word	0x24000de4
9000a620:	240012cc 	.word	0x240012cc

9000a624 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
9000a624:	b480      	push	{r7}
9000a626:	b083      	sub	sp, #12
9000a628:	af00      	add	r7, sp, #0
9000a62a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000a62c:	4b06      	ldr	r3, [pc, #24]	; (9000a648 <vTaskInternalSetTimeOutState+0x24>)
9000a62e:	681a      	ldr	r2, [r3, #0]
9000a630:	687b      	ldr	r3, [r7, #4]
9000a632:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000a634:	4b05      	ldr	r3, [pc, #20]	; (9000a64c <vTaskInternalSetTimeOutState+0x28>)
9000a636:	681a      	ldr	r2, [r3, #0]
9000a638:	687b      	ldr	r3, [r7, #4]
9000a63a:	605a      	str	r2, [r3, #4]
}
9000a63c:	bf00      	nop
9000a63e:	370c      	adds	r7, #12
9000a640:	46bd      	mov	sp, r7
9000a642:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a646:	4770      	bx	lr
9000a648:	240012d0 	.word	0x240012d0
9000a64c:	240012bc 	.word	0x240012bc

9000a650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
9000a650:	b580      	push	{r7, lr}
9000a652:	b088      	sub	sp, #32
9000a654:	af00      	add	r7, sp, #0
9000a656:	6078      	str	r0, [r7, #4]
9000a658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
9000a65a:	687b      	ldr	r3, [r7, #4]
9000a65c:	2b00      	cmp	r3, #0
9000a65e:	d10a      	bne.n	9000a676 <xTaskCheckForTimeOut+0x26>
	__asm volatile
9000a660:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a664:	f383 8811 	msr	BASEPRI, r3
9000a668:	f3bf 8f6f 	isb	sy
9000a66c:	f3bf 8f4f 	dsb	sy
9000a670:	613b      	str	r3, [r7, #16]
}
9000a672:	bf00      	nop
9000a674:	e7fe      	b.n	9000a674 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
9000a676:	683b      	ldr	r3, [r7, #0]
9000a678:	2b00      	cmp	r3, #0
9000a67a:	d10a      	bne.n	9000a692 <xTaskCheckForTimeOut+0x42>
	__asm volatile
9000a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a680:	f383 8811 	msr	BASEPRI, r3
9000a684:	f3bf 8f6f 	isb	sy
9000a688:	f3bf 8f4f 	dsb	sy
9000a68c:	60fb      	str	r3, [r7, #12]
}
9000a68e:	bf00      	nop
9000a690:	e7fe      	b.n	9000a690 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
9000a692:	f000 ff7f 	bl	9000b594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
9000a696:	4b1d      	ldr	r3, [pc, #116]	; (9000a70c <xTaskCheckForTimeOut+0xbc>)
9000a698:	681b      	ldr	r3, [r3, #0]
9000a69a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000a69c:	687b      	ldr	r3, [r7, #4]
9000a69e:	685b      	ldr	r3, [r3, #4]
9000a6a0:	69ba      	ldr	r2, [r7, #24]
9000a6a2:	1ad3      	subs	r3, r2, r3
9000a6a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
9000a6a6:	683b      	ldr	r3, [r7, #0]
9000a6a8:	681b      	ldr	r3, [r3, #0]
9000a6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
9000a6ae:	d102      	bne.n	9000a6b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
9000a6b0:	2300      	movs	r3, #0
9000a6b2:	61fb      	str	r3, [r7, #28]
9000a6b4:	e023      	b.n	9000a6fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000a6b6:	687b      	ldr	r3, [r7, #4]
9000a6b8:	681a      	ldr	r2, [r3, #0]
9000a6ba:	4b15      	ldr	r3, [pc, #84]	; (9000a710 <xTaskCheckForTimeOut+0xc0>)
9000a6bc:	681b      	ldr	r3, [r3, #0]
9000a6be:	429a      	cmp	r2, r3
9000a6c0:	d007      	beq.n	9000a6d2 <xTaskCheckForTimeOut+0x82>
9000a6c2:	687b      	ldr	r3, [r7, #4]
9000a6c4:	685b      	ldr	r3, [r3, #4]
9000a6c6:	69ba      	ldr	r2, [r7, #24]
9000a6c8:	429a      	cmp	r2, r3
9000a6ca:	d302      	bcc.n	9000a6d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
9000a6cc:	2301      	movs	r3, #1
9000a6ce:	61fb      	str	r3, [r7, #28]
9000a6d0:	e015      	b.n	9000a6fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000a6d2:	683b      	ldr	r3, [r7, #0]
9000a6d4:	681b      	ldr	r3, [r3, #0]
9000a6d6:	697a      	ldr	r2, [r7, #20]
9000a6d8:	429a      	cmp	r2, r3
9000a6da:	d20b      	bcs.n	9000a6f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
9000a6dc:	683b      	ldr	r3, [r7, #0]
9000a6de:	681a      	ldr	r2, [r3, #0]
9000a6e0:	697b      	ldr	r3, [r7, #20]
9000a6e2:	1ad2      	subs	r2, r2, r3
9000a6e4:	683b      	ldr	r3, [r7, #0]
9000a6e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
9000a6e8:	6878      	ldr	r0, [r7, #4]
9000a6ea:	f7ff ff9b 	bl	9000a624 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
9000a6ee:	2300      	movs	r3, #0
9000a6f0:	61fb      	str	r3, [r7, #28]
9000a6f2:	e004      	b.n	9000a6fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
9000a6f4:	683b      	ldr	r3, [r7, #0]
9000a6f6:	2200      	movs	r2, #0
9000a6f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
9000a6fa:	2301      	movs	r3, #1
9000a6fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
9000a6fe:	f000 ff79 	bl	9000b5f4 <vPortExitCritical>

	return xReturn;
9000a702:	69fb      	ldr	r3, [r7, #28]
}
9000a704:	4618      	mov	r0, r3
9000a706:	3720      	adds	r7, #32
9000a708:	46bd      	mov	sp, r7
9000a70a:	bd80      	pop	{r7, pc}
9000a70c:	240012bc 	.word	0x240012bc
9000a710:	240012d0 	.word	0x240012d0

9000a714 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
9000a714:	b480      	push	{r7}
9000a716:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
9000a718:	4b03      	ldr	r3, [pc, #12]	; (9000a728 <vTaskMissedYield+0x14>)
9000a71a:	2201      	movs	r2, #1
9000a71c:	601a      	str	r2, [r3, #0]
}
9000a71e:	bf00      	nop
9000a720:	46bd      	mov	sp, r7
9000a722:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a726:	4770      	bx	lr
9000a728:	240012cc 	.word	0x240012cc

9000a72c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
9000a72c:	b580      	push	{r7, lr}
9000a72e:	b082      	sub	sp, #8
9000a730:	af00      	add	r7, sp, #0
9000a732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
9000a734:	f000 f852 	bl	9000a7dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000a738:	4b06      	ldr	r3, [pc, #24]	; (9000a754 <prvIdleTask+0x28>)
9000a73a:	681b      	ldr	r3, [r3, #0]
9000a73c:	2b01      	cmp	r3, #1
9000a73e:	d9f9      	bls.n	9000a734 <prvIdleTask+0x8>
			{
				taskYIELD();
9000a740:	4b05      	ldr	r3, [pc, #20]	; (9000a758 <prvIdleTask+0x2c>)
9000a742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000a746:	601a      	str	r2, [r3, #0]
9000a748:	f3bf 8f4f 	dsb	sy
9000a74c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
9000a750:	e7f0      	b.n	9000a734 <prvIdleTask+0x8>
9000a752:	bf00      	nop
9000a754:	24000de8 	.word	0x24000de8
9000a758:	e000ed04 	.word	0xe000ed04

9000a75c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
9000a75c:	b580      	push	{r7, lr}
9000a75e:	b082      	sub	sp, #8
9000a760:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000a762:	2300      	movs	r3, #0
9000a764:	607b      	str	r3, [r7, #4]
9000a766:	e00c      	b.n	9000a782 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000a768:	687a      	ldr	r2, [r7, #4]
9000a76a:	4613      	mov	r3, r2
9000a76c:	009b      	lsls	r3, r3, #2
9000a76e:	4413      	add	r3, r2
9000a770:	009b      	lsls	r3, r3, #2
9000a772:	4a12      	ldr	r2, [pc, #72]	; (9000a7bc <prvInitialiseTaskLists+0x60>)
9000a774:	4413      	add	r3, r2
9000a776:	4618      	mov	r0, r3
9000a778:	f7fe f9bc 	bl	90008af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000a77c:	687b      	ldr	r3, [r7, #4]
9000a77e:	3301      	adds	r3, #1
9000a780:	607b      	str	r3, [r7, #4]
9000a782:	687b      	ldr	r3, [r7, #4]
9000a784:	2b37      	cmp	r3, #55	; 0x37
9000a786:	d9ef      	bls.n	9000a768 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
9000a788:	480d      	ldr	r0, [pc, #52]	; (9000a7c0 <prvInitialiseTaskLists+0x64>)
9000a78a:	f7fe f9b3 	bl	90008af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000a78e:	480d      	ldr	r0, [pc, #52]	; (9000a7c4 <prvInitialiseTaskLists+0x68>)
9000a790:	f7fe f9b0 	bl	90008af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000a794:	480c      	ldr	r0, [pc, #48]	; (9000a7c8 <prvInitialiseTaskLists+0x6c>)
9000a796:	f7fe f9ad 	bl	90008af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000a79a:	480c      	ldr	r0, [pc, #48]	; (9000a7cc <prvInitialiseTaskLists+0x70>)
9000a79c:	f7fe f9aa 	bl	90008af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000a7a0:	480b      	ldr	r0, [pc, #44]	; (9000a7d0 <prvInitialiseTaskLists+0x74>)
9000a7a2:	f7fe f9a7 	bl	90008af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000a7a6:	4b0b      	ldr	r3, [pc, #44]	; (9000a7d4 <prvInitialiseTaskLists+0x78>)
9000a7a8:	4a05      	ldr	r2, [pc, #20]	; (9000a7c0 <prvInitialiseTaskLists+0x64>)
9000a7aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000a7ac:	4b0a      	ldr	r3, [pc, #40]	; (9000a7d8 <prvInitialiseTaskLists+0x7c>)
9000a7ae:	4a05      	ldr	r2, [pc, #20]	; (9000a7c4 <prvInitialiseTaskLists+0x68>)
9000a7b0:	601a      	str	r2, [r3, #0]
}
9000a7b2:	bf00      	nop
9000a7b4:	3708      	adds	r7, #8
9000a7b6:	46bd      	mov	sp, r7
9000a7b8:	bd80      	pop	{r7, pc}
9000a7ba:	bf00      	nop
9000a7bc:	24000de8 	.word	0x24000de8
9000a7c0:	24001248 	.word	0x24001248
9000a7c4:	2400125c 	.word	0x2400125c
9000a7c8:	24001278 	.word	0x24001278
9000a7cc:	2400128c 	.word	0x2400128c
9000a7d0:	240012a4 	.word	0x240012a4
9000a7d4:	24001270 	.word	0x24001270
9000a7d8:	24001274 	.word	0x24001274

9000a7dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
9000a7dc:	b580      	push	{r7, lr}
9000a7de:	b082      	sub	sp, #8
9000a7e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000a7e2:	e019      	b.n	9000a818 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
9000a7e4:	f000 fed6 	bl	9000b594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000a7e8:	4b10      	ldr	r3, [pc, #64]	; (9000a82c <prvCheckTasksWaitingTermination+0x50>)
9000a7ea:	68db      	ldr	r3, [r3, #12]
9000a7ec:	68db      	ldr	r3, [r3, #12]
9000a7ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000a7f0:	687b      	ldr	r3, [r7, #4]
9000a7f2:	3304      	adds	r3, #4
9000a7f4:	4618      	mov	r0, r3
9000a7f6:	f7fe fa07 	bl	90008c08 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000a7fa:	4b0d      	ldr	r3, [pc, #52]	; (9000a830 <prvCheckTasksWaitingTermination+0x54>)
9000a7fc:	681b      	ldr	r3, [r3, #0]
9000a7fe:	3b01      	subs	r3, #1
9000a800:	4a0b      	ldr	r2, [pc, #44]	; (9000a830 <prvCheckTasksWaitingTermination+0x54>)
9000a802:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
9000a804:	4b0b      	ldr	r3, [pc, #44]	; (9000a834 <prvCheckTasksWaitingTermination+0x58>)
9000a806:	681b      	ldr	r3, [r3, #0]
9000a808:	3b01      	subs	r3, #1
9000a80a:	4a0a      	ldr	r2, [pc, #40]	; (9000a834 <prvCheckTasksWaitingTermination+0x58>)
9000a80c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
9000a80e:	f000 fef1 	bl	9000b5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
9000a812:	6878      	ldr	r0, [r7, #4]
9000a814:	f000 f810 	bl	9000a838 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000a818:	4b06      	ldr	r3, [pc, #24]	; (9000a834 <prvCheckTasksWaitingTermination+0x58>)
9000a81a:	681b      	ldr	r3, [r3, #0]
9000a81c:	2b00      	cmp	r3, #0
9000a81e:	d1e1      	bne.n	9000a7e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
9000a820:	bf00      	nop
9000a822:	bf00      	nop
9000a824:	3708      	adds	r7, #8
9000a826:	46bd      	mov	sp, r7
9000a828:	bd80      	pop	{r7, pc}
9000a82a:	bf00      	nop
9000a82c:	2400128c 	.word	0x2400128c
9000a830:	240012b8 	.word	0x240012b8
9000a834:	240012a0 	.word	0x240012a0

9000a838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
9000a838:	b580      	push	{r7, lr}
9000a83a:	b084      	sub	sp, #16
9000a83c:	af00      	add	r7, sp, #0
9000a83e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
9000a840:	687b      	ldr	r3, [r7, #4]
9000a842:	3354      	adds	r3, #84	; 0x54
9000a844:	4618      	mov	r0, r3
9000a846:	f007 f99d 	bl	90011b84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000a84a:	687b      	ldr	r3, [r7, #4]
9000a84c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
9000a850:	2b00      	cmp	r3, #0
9000a852:	d108      	bne.n	9000a866 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
9000a854:	687b      	ldr	r3, [r7, #4]
9000a856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000a858:	4618      	mov	r0, r3
9000a85a:	f001 f889 	bl	9000b970 <vPortFree>
				vPortFree( pxTCB );
9000a85e:	6878      	ldr	r0, [r7, #4]
9000a860:	f001 f886 	bl	9000b970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
9000a864:	e018      	b.n	9000a898 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000a866:	687b      	ldr	r3, [r7, #4]
9000a868:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
9000a86c:	2b01      	cmp	r3, #1
9000a86e:	d103      	bne.n	9000a878 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
9000a870:	6878      	ldr	r0, [r7, #4]
9000a872:	f001 f87d 	bl	9000b970 <vPortFree>
	}
9000a876:	e00f      	b.n	9000a898 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000a878:	687b      	ldr	r3, [r7, #4]
9000a87a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
9000a87e:	2b02      	cmp	r3, #2
9000a880:	d00a      	beq.n	9000a898 <prvDeleteTCB+0x60>
	__asm volatile
9000a882:	f04f 0350 	mov.w	r3, #80	; 0x50
9000a886:	f383 8811 	msr	BASEPRI, r3
9000a88a:	f3bf 8f6f 	isb	sy
9000a88e:	f3bf 8f4f 	dsb	sy
9000a892:	60fb      	str	r3, [r7, #12]
}
9000a894:	bf00      	nop
9000a896:	e7fe      	b.n	9000a896 <prvDeleteTCB+0x5e>
	}
9000a898:	bf00      	nop
9000a89a:	3710      	adds	r7, #16
9000a89c:	46bd      	mov	sp, r7
9000a89e:	bd80      	pop	{r7, pc}

9000a8a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
9000a8a0:	b480      	push	{r7}
9000a8a2:	b083      	sub	sp, #12
9000a8a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000a8a6:	4b0c      	ldr	r3, [pc, #48]	; (9000a8d8 <prvResetNextTaskUnblockTime+0x38>)
9000a8a8:	681b      	ldr	r3, [r3, #0]
9000a8aa:	681b      	ldr	r3, [r3, #0]
9000a8ac:	2b00      	cmp	r3, #0
9000a8ae:	d104      	bne.n	9000a8ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000a8b0:	4b0a      	ldr	r3, [pc, #40]	; (9000a8dc <prvResetNextTaskUnblockTime+0x3c>)
9000a8b2:	f04f 32ff 	mov.w	r2, #4294967295
9000a8b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
9000a8b8:	e008      	b.n	9000a8cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000a8ba:	4b07      	ldr	r3, [pc, #28]	; (9000a8d8 <prvResetNextTaskUnblockTime+0x38>)
9000a8bc:	681b      	ldr	r3, [r3, #0]
9000a8be:	68db      	ldr	r3, [r3, #12]
9000a8c0:	68db      	ldr	r3, [r3, #12]
9000a8c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000a8c4:	687b      	ldr	r3, [r7, #4]
9000a8c6:	685b      	ldr	r3, [r3, #4]
9000a8c8:	4a04      	ldr	r2, [pc, #16]	; (9000a8dc <prvResetNextTaskUnblockTime+0x3c>)
9000a8ca:	6013      	str	r3, [r2, #0]
}
9000a8cc:	bf00      	nop
9000a8ce:	370c      	adds	r7, #12
9000a8d0:	46bd      	mov	sp, r7
9000a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a8d6:	4770      	bx	lr
9000a8d8:	24001270 	.word	0x24001270
9000a8dc:	240012d8 	.word	0x240012d8

9000a8e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
9000a8e0:	b480      	push	{r7}
9000a8e2:	b083      	sub	sp, #12
9000a8e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
9000a8e6:	4b0b      	ldr	r3, [pc, #44]	; (9000a914 <xTaskGetSchedulerState+0x34>)
9000a8e8:	681b      	ldr	r3, [r3, #0]
9000a8ea:	2b00      	cmp	r3, #0
9000a8ec:	d102      	bne.n	9000a8f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
9000a8ee:	2301      	movs	r3, #1
9000a8f0:	607b      	str	r3, [r7, #4]
9000a8f2:	e008      	b.n	9000a906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000a8f4:	4b08      	ldr	r3, [pc, #32]	; (9000a918 <xTaskGetSchedulerState+0x38>)
9000a8f6:	681b      	ldr	r3, [r3, #0]
9000a8f8:	2b00      	cmp	r3, #0
9000a8fa:	d102      	bne.n	9000a902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
9000a8fc:	2302      	movs	r3, #2
9000a8fe:	607b      	str	r3, [r7, #4]
9000a900:	e001      	b.n	9000a906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
9000a902:	2300      	movs	r3, #0
9000a904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
9000a906:	687b      	ldr	r3, [r7, #4]
	}
9000a908:	4618      	mov	r0, r3
9000a90a:	370c      	adds	r7, #12
9000a90c:	46bd      	mov	sp, r7
9000a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a912:	4770      	bx	lr
9000a914:	240012c4 	.word	0x240012c4
9000a918:	240012e0 	.word	0x240012e0

9000a91c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
9000a91c:	b580      	push	{r7, lr}
9000a91e:	b084      	sub	sp, #16
9000a920:	af00      	add	r7, sp, #0
9000a922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
9000a924:	687b      	ldr	r3, [r7, #4]
9000a926:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
9000a928:	2300      	movs	r3, #0
9000a92a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
9000a92c:	687b      	ldr	r3, [r7, #4]
9000a92e:	2b00      	cmp	r3, #0
9000a930:	d051      	beq.n	9000a9d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000a932:	68bb      	ldr	r3, [r7, #8]
9000a934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a936:	4b2a      	ldr	r3, [pc, #168]	; (9000a9e0 <xTaskPriorityInherit+0xc4>)
9000a938:	681b      	ldr	r3, [r3, #0]
9000a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a93c:	429a      	cmp	r2, r3
9000a93e:	d241      	bcs.n	9000a9c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000a940:	68bb      	ldr	r3, [r7, #8]
9000a942:	699b      	ldr	r3, [r3, #24]
9000a944:	2b00      	cmp	r3, #0
9000a946:	db06      	blt.n	9000a956 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000a948:	4b25      	ldr	r3, [pc, #148]	; (9000a9e0 <xTaskPriorityInherit+0xc4>)
9000a94a:	681b      	ldr	r3, [r3, #0]
9000a94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a94e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
9000a952:	68bb      	ldr	r3, [r7, #8]
9000a954:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9000a956:	68bb      	ldr	r3, [r7, #8]
9000a958:	6959      	ldr	r1, [r3, #20]
9000a95a:	68bb      	ldr	r3, [r7, #8]
9000a95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a95e:	4613      	mov	r3, r2
9000a960:	009b      	lsls	r3, r3, #2
9000a962:	4413      	add	r3, r2
9000a964:	009b      	lsls	r3, r3, #2
9000a966:	4a1f      	ldr	r2, [pc, #124]	; (9000a9e4 <xTaskPriorityInherit+0xc8>)
9000a968:	4413      	add	r3, r2
9000a96a:	4299      	cmp	r1, r3
9000a96c:	d122      	bne.n	9000a9b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000a96e:	68bb      	ldr	r3, [r7, #8]
9000a970:	3304      	adds	r3, #4
9000a972:	4618      	mov	r0, r3
9000a974:	f7fe f948 	bl	90008c08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000a978:	4b19      	ldr	r3, [pc, #100]	; (9000a9e0 <xTaskPriorityInherit+0xc4>)
9000a97a:	681b      	ldr	r3, [r3, #0]
9000a97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a97e:	68bb      	ldr	r3, [r7, #8]
9000a980:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000a982:	68bb      	ldr	r3, [r7, #8]
9000a984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a986:	4b18      	ldr	r3, [pc, #96]	; (9000a9e8 <xTaskPriorityInherit+0xcc>)
9000a988:	681b      	ldr	r3, [r3, #0]
9000a98a:	429a      	cmp	r2, r3
9000a98c:	d903      	bls.n	9000a996 <xTaskPriorityInherit+0x7a>
9000a98e:	68bb      	ldr	r3, [r7, #8]
9000a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a992:	4a15      	ldr	r2, [pc, #84]	; (9000a9e8 <xTaskPriorityInherit+0xcc>)
9000a994:	6013      	str	r3, [r2, #0]
9000a996:	68bb      	ldr	r3, [r7, #8]
9000a998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a99a:	4613      	mov	r3, r2
9000a99c:	009b      	lsls	r3, r3, #2
9000a99e:	4413      	add	r3, r2
9000a9a0:	009b      	lsls	r3, r3, #2
9000a9a2:	4a10      	ldr	r2, [pc, #64]	; (9000a9e4 <xTaskPriorityInherit+0xc8>)
9000a9a4:	441a      	add	r2, r3
9000a9a6:	68bb      	ldr	r3, [r7, #8]
9000a9a8:	3304      	adds	r3, #4
9000a9aa:	4619      	mov	r1, r3
9000a9ac:	4610      	mov	r0, r2
9000a9ae:	f7fe f8ce 	bl	90008b4e <vListInsertEnd>
9000a9b2:	e004      	b.n	9000a9be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000a9b4:	4b0a      	ldr	r3, [pc, #40]	; (9000a9e0 <xTaskPriorityInherit+0xc4>)
9000a9b6:	681b      	ldr	r3, [r3, #0]
9000a9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000a9ba:	68bb      	ldr	r3, [r7, #8]
9000a9bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
9000a9be:	2301      	movs	r3, #1
9000a9c0:	60fb      	str	r3, [r7, #12]
9000a9c2:	e008      	b.n	9000a9d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000a9c4:	68bb      	ldr	r3, [r7, #8]
9000a9c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
9000a9c8:	4b05      	ldr	r3, [pc, #20]	; (9000a9e0 <xTaskPriorityInherit+0xc4>)
9000a9ca:	681b      	ldr	r3, [r3, #0]
9000a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a9ce:	429a      	cmp	r2, r3
9000a9d0:	d201      	bcs.n	9000a9d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
9000a9d2:	2301      	movs	r3, #1
9000a9d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
9000a9d6:	68fb      	ldr	r3, [r7, #12]
	}
9000a9d8:	4618      	mov	r0, r3
9000a9da:	3710      	adds	r7, #16
9000a9dc:	46bd      	mov	sp, r7
9000a9de:	bd80      	pop	{r7, pc}
9000a9e0:	24000de4 	.word	0x24000de4
9000a9e4:	24000de8 	.word	0x24000de8
9000a9e8:	240012c0 	.word	0x240012c0

9000a9ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
9000a9ec:	b580      	push	{r7, lr}
9000a9ee:	b086      	sub	sp, #24
9000a9f0:	af00      	add	r7, sp, #0
9000a9f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
9000a9f4:	687b      	ldr	r3, [r7, #4]
9000a9f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
9000a9f8:	2300      	movs	r3, #0
9000a9fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
9000a9fc:	687b      	ldr	r3, [r7, #4]
9000a9fe:	2b00      	cmp	r3, #0
9000aa00:	d056      	beq.n	9000aab0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
9000aa02:	4b2e      	ldr	r3, [pc, #184]	; (9000aabc <xTaskPriorityDisinherit+0xd0>)
9000aa04:	681b      	ldr	r3, [r3, #0]
9000aa06:	693a      	ldr	r2, [r7, #16]
9000aa08:	429a      	cmp	r2, r3
9000aa0a:	d00a      	beq.n	9000aa22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
9000aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000aa10:	f383 8811 	msr	BASEPRI, r3
9000aa14:	f3bf 8f6f 	isb	sy
9000aa18:	f3bf 8f4f 	dsb	sy
9000aa1c:	60fb      	str	r3, [r7, #12]
}
9000aa1e:	bf00      	nop
9000aa20:	e7fe      	b.n	9000aa20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
9000aa22:	693b      	ldr	r3, [r7, #16]
9000aa24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000aa26:	2b00      	cmp	r3, #0
9000aa28:	d10a      	bne.n	9000aa40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
9000aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000aa2e:	f383 8811 	msr	BASEPRI, r3
9000aa32:	f3bf 8f6f 	isb	sy
9000aa36:	f3bf 8f4f 	dsb	sy
9000aa3a:	60bb      	str	r3, [r7, #8]
}
9000aa3c:	bf00      	nop
9000aa3e:	e7fe      	b.n	9000aa3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
9000aa40:	693b      	ldr	r3, [r7, #16]
9000aa42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000aa44:	1e5a      	subs	r2, r3, #1
9000aa46:	693b      	ldr	r3, [r7, #16]
9000aa48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000aa4a:	693b      	ldr	r3, [r7, #16]
9000aa4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000aa4e:	693b      	ldr	r3, [r7, #16]
9000aa50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000aa52:	429a      	cmp	r2, r3
9000aa54:	d02c      	beq.n	9000aab0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000aa56:	693b      	ldr	r3, [r7, #16]
9000aa58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000aa5a:	2b00      	cmp	r3, #0
9000aa5c:	d128      	bne.n	9000aab0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000aa5e:	693b      	ldr	r3, [r7, #16]
9000aa60:	3304      	adds	r3, #4
9000aa62:	4618      	mov	r0, r3
9000aa64:	f7fe f8d0 	bl	90008c08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000aa68:	693b      	ldr	r3, [r7, #16]
9000aa6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
9000aa6c:	693b      	ldr	r3, [r7, #16]
9000aa6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000aa70:	693b      	ldr	r3, [r7, #16]
9000aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000aa74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
9000aa78:	693b      	ldr	r3, [r7, #16]
9000aa7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
9000aa7c:	693b      	ldr	r3, [r7, #16]
9000aa7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000aa80:	4b0f      	ldr	r3, [pc, #60]	; (9000aac0 <xTaskPriorityDisinherit+0xd4>)
9000aa82:	681b      	ldr	r3, [r3, #0]
9000aa84:	429a      	cmp	r2, r3
9000aa86:	d903      	bls.n	9000aa90 <xTaskPriorityDisinherit+0xa4>
9000aa88:	693b      	ldr	r3, [r7, #16]
9000aa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000aa8c:	4a0c      	ldr	r2, [pc, #48]	; (9000aac0 <xTaskPriorityDisinherit+0xd4>)
9000aa8e:	6013      	str	r3, [r2, #0]
9000aa90:	693b      	ldr	r3, [r7, #16]
9000aa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000aa94:	4613      	mov	r3, r2
9000aa96:	009b      	lsls	r3, r3, #2
9000aa98:	4413      	add	r3, r2
9000aa9a:	009b      	lsls	r3, r3, #2
9000aa9c:	4a09      	ldr	r2, [pc, #36]	; (9000aac4 <xTaskPriorityDisinherit+0xd8>)
9000aa9e:	441a      	add	r2, r3
9000aaa0:	693b      	ldr	r3, [r7, #16]
9000aaa2:	3304      	adds	r3, #4
9000aaa4:	4619      	mov	r1, r3
9000aaa6:	4610      	mov	r0, r2
9000aaa8:	f7fe f851 	bl	90008b4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
9000aaac:	2301      	movs	r3, #1
9000aaae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
9000aab0:	697b      	ldr	r3, [r7, #20]
	}
9000aab2:	4618      	mov	r0, r3
9000aab4:	3718      	adds	r7, #24
9000aab6:	46bd      	mov	sp, r7
9000aab8:	bd80      	pop	{r7, pc}
9000aaba:	bf00      	nop
9000aabc:	24000de4 	.word	0x24000de4
9000aac0:	240012c0 	.word	0x240012c0
9000aac4:	24000de8 	.word	0x24000de8

9000aac8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
9000aac8:	b580      	push	{r7, lr}
9000aaca:	b088      	sub	sp, #32
9000aacc:	af00      	add	r7, sp, #0
9000aace:	6078      	str	r0, [r7, #4]
9000aad0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
9000aad2:	687b      	ldr	r3, [r7, #4]
9000aad4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
9000aad6:	2301      	movs	r3, #1
9000aad8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
9000aada:	687b      	ldr	r3, [r7, #4]
9000aadc:	2b00      	cmp	r3, #0
9000aade:	d06a      	beq.n	9000abb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
9000aae0:	69bb      	ldr	r3, [r7, #24]
9000aae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000aae4:	2b00      	cmp	r3, #0
9000aae6:	d10a      	bne.n	9000aafe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
9000aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000aaec:	f383 8811 	msr	BASEPRI, r3
9000aaf0:	f3bf 8f6f 	isb	sy
9000aaf4:	f3bf 8f4f 	dsb	sy
9000aaf8:	60fb      	str	r3, [r7, #12]
}
9000aafa:	bf00      	nop
9000aafc:	e7fe      	b.n	9000aafc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000aafe:	69bb      	ldr	r3, [r7, #24]
9000ab00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000ab02:	683a      	ldr	r2, [r7, #0]
9000ab04:	429a      	cmp	r2, r3
9000ab06:	d902      	bls.n	9000ab0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
9000ab08:	683b      	ldr	r3, [r7, #0]
9000ab0a:	61fb      	str	r3, [r7, #28]
9000ab0c:	e002      	b.n	9000ab14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
9000ab0e:	69bb      	ldr	r3, [r7, #24]
9000ab10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000ab12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
9000ab14:	69bb      	ldr	r3, [r7, #24]
9000ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000ab18:	69fa      	ldr	r2, [r7, #28]
9000ab1a:	429a      	cmp	r2, r3
9000ab1c:	d04b      	beq.n	9000abb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000ab1e:	69bb      	ldr	r3, [r7, #24]
9000ab20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000ab22:	697a      	ldr	r2, [r7, #20]
9000ab24:	429a      	cmp	r2, r3
9000ab26:	d146      	bne.n	9000abb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
9000ab28:	4b25      	ldr	r3, [pc, #148]	; (9000abc0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
9000ab2a:	681b      	ldr	r3, [r3, #0]
9000ab2c:	69ba      	ldr	r2, [r7, #24]
9000ab2e:	429a      	cmp	r2, r3
9000ab30:	d10a      	bne.n	9000ab48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
9000ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ab36:	f383 8811 	msr	BASEPRI, r3
9000ab3a:	f3bf 8f6f 	isb	sy
9000ab3e:	f3bf 8f4f 	dsb	sy
9000ab42:	60bb      	str	r3, [r7, #8]
}
9000ab44:	bf00      	nop
9000ab46:	e7fe      	b.n	9000ab46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
9000ab48:	69bb      	ldr	r3, [r7, #24]
9000ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000ab4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
9000ab4e:	69bb      	ldr	r3, [r7, #24]
9000ab50:	69fa      	ldr	r2, [r7, #28]
9000ab52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000ab54:	69bb      	ldr	r3, [r7, #24]
9000ab56:	699b      	ldr	r3, [r3, #24]
9000ab58:	2b00      	cmp	r3, #0
9000ab5a:	db04      	blt.n	9000ab66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ab5c:	69fb      	ldr	r3, [r7, #28]
9000ab5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
9000ab62:	69bb      	ldr	r3, [r7, #24]
9000ab64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000ab66:	69bb      	ldr	r3, [r7, #24]
9000ab68:	6959      	ldr	r1, [r3, #20]
9000ab6a:	693a      	ldr	r2, [r7, #16]
9000ab6c:	4613      	mov	r3, r2
9000ab6e:	009b      	lsls	r3, r3, #2
9000ab70:	4413      	add	r3, r2
9000ab72:	009b      	lsls	r3, r3, #2
9000ab74:	4a13      	ldr	r2, [pc, #76]	; (9000abc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
9000ab76:	4413      	add	r3, r2
9000ab78:	4299      	cmp	r1, r3
9000ab7a:	d11c      	bne.n	9000abb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ab7c:	69bb      	ldr	r3, [r7, #24]
9000ab7e:	3304      	adds	r3, #4
9000ab80:	4618      	mov	r0, r3
9000ab82:	f7fe f841 	bl	90008c08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
9000ab86:	69bb      	ldr	r3, [r7, #24]
9000ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000ab8a:	4b0f      	ldr	r3, [pc, #60]	; (9000abc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
9000ab8c:	681b      	ldr	r3, [r3, #0]
9000ab8e:	429a      	cmp	r2, r3
9000ab90:	d903      	bls.n	9000ab9a <vTaskPriorityDisinheritAfterTimeout+0xd2>
9000ab92:	69bb      	ldr	r3, [r7, #24]
9000ab94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000ab96:	4a0c      	ldr	r2, [pc, #48]	; (9000abc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
9000ab98:	6013      	str	r3, [r2, #0]
9000ab9a:	69bb      	ldr	r3, [r7, #24]
9000ab9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000ab9e:	4613      	mov	r3, r2
9000aba0:	009b      	lsls	r3, r3, #2
9000aba2:	4413      	add	r3, r2
9000aba4:	009b      	lsls	r3, r3, #2
9000aba6:	4a07      	ldr	r2, [pc, #28]	; (9000abc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
9000aba8:	441a      	add	r2, r3
9000abaa:	69bb      	ldr	r3, [r7, #24]
9000abac:	3304      	adds	r3, #4
9000abae:	4619      	mov	r1, r3
9000abb0:	4610      	mov	r0, r2
9000abb2:	f7fd ffcc 	bl	90008b4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
9000abb6:	bf00      	nop
9000abb8:	3720      	adds	r7, #32
9000abba:	46bd      	mov	sp, r7
9000abbc:	bd80      	pop	{r7, pc}
9000abbe:	bf00      	nop
9000abc0:	24000de4 	.word	0x24000de4
9000abc4:	24000de8 	.word	0x24000de8
9000abc8:	240012c0 	.word	0x240012c0

9000abcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
9000abcc:	b480      	push	{r7}
9000abce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
9000abd0:	4b07      	ldr	r3, [pc, #28]	; (9000abf0 <pvTaskIncrementMutexHeldCount+0x24>)
9000abd2:	681b      	ldr	r3, [r3, #0]
9000abd4:	2b00      	cmp	r3, #0
9000abd6:	d004      	beq.n	9000abe2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
9000abd8:	4b05      	ldr	r3, [pc, #20]	; (9000abf0 <pvTaskIncrementMutexHeldCount+0x24>)
9000abda:	681b      	ldr	r3, [r3, #0]
9000abdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000abde:	3201      	adds	r2, #1
9000abe0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
9000abe2:	4b03      	ldr	r3, [pc, #12]	; (9000abf0 <pvTaskIncrementMutexHeldCount+0x24>)
9000abe4:	681b      	ldr	r3, [r3, #0]
	}
9000abe6:	4618      	mov	r0, r3
9000abe8:	46bd      	mov	sp, r7
9000abea:	f85d 7b04 	ldr.w	r7, [sp], #4
9000abee:	4770      	bx	lr
9000abf0:	24000de4 	.word	0x24000de4

9000abf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
9000abf4:	b580      	push	{r7, lr}
9000abf6:	b084      	sub	sp, #16
9000abf8:	af00      	add	r7, sp, #0
9000abfa:	6078      	str	r0, [r7, #4]
9000abfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000abfe:	4b21      	ldr	r3, [pc, #132]	; (9000ac84 <prvAddCurrentTaskToDelayedList+0x90>)
9000ac00:	681b      	ldr	r3, [r3, #0]
9000ac02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ac04:	4b20      	ldr	r3, [pc, #128]	; (9000ac88 <prvAddCurrentTaskToDelayedList+0x94>)
9000ac06:	681b      	ldr	r3, [r3, #0]
9000ac08:	3304      	adds	r3, #4
9000ac0a:	4618      	mov	r0, r3
9000ac0c:	f7fd fffc 	bl	90008c08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000ac10:	687b      	ldr	r3, [r7, #4]
9000ac12:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ac16:	d10a      	bne.n	9000ac2e <prvAddCurrentTaskToDelayedList+0x3a>
9000ac18:	683b      	ldr	r3, [r7, #0]
9000ac1a:	2b00      	cmp	r3, #0
9000ac1c:	d007      	beq.n	9000ac2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ac1e:	4b1a      	ldr	r3, [pc, #104]	; (9000ac88 <prvAddCurrentTaskToDelayedList+0x94>)
9000ac20:	681b      	ldr	r3, [r3, #0]
9000ac22:	3304      	adds	r3, #4
9000ac24:	4619      	mov	r1, r3
9000ac26:	4819      	ldr	r0, [pc, #100]	; (9000ac8c <prvAddCurrentTaskToDelayedList+0x98>)
9000ac28:	f7fd ff91 	bl	90008b4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
9000ac2c:	e026      	b.n	9000ac7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000ac2e:	68fa      	ldr	r2, [r7, #12]
9000ac30:	687b      	ldr	r3, [r7, #4]
9000ac32:	4413      	add	r3, r2
9000ac34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000ac36:	4b14      	ldr	r3, [pc, #80]	; (9000ac88 <prvAddCurrentTaskToDelayedList+0x94>)
9000ac38:	681b      	ldr	r3, [r3, #0]
9000ac3a:	68ba      	ldr	r2, [r7, #8]
9000ac3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000ac3e:	68ba      	ldr	r2, [r7, #8]
9000ac40:	68fb      	ldr	r3, [r7, #12]
9000ac42:	429a      	cmp	r2, r3
9000ac44:	d209      	bcs.n	9000ac5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ac46:	4b12      	ldr	r3, [pc, #72]	; (9000ac90 <prvAddCurrentTaskToDelayedList+0x9c>)
9000ac48:	681a      	ldr	r2, [r3, #0]
9000ac4a:	4b0f      	ldr	r3, [pc, #60]	; (9000ac88 <prvAddCurrentTaskToDelayedList+0x94>)
9000ac4c:	681b      	ldr	r3, [r3, #0]
9000ac4e:	3304      	adds	r3, #4
9000ac50:	4619      	mov	r1, r3
9000ac52:	4610      	mov	r0, r2
9000ac54:	f7fd ff9f 	bl	90008b96 <vListInsert>
}
9000ac58:	e010      	b.n	9000ac7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ac5a:	4b0e      	ldr	r3, [pc, #56]	; (9000ac94 <prvAddCurrentTaskToDelayedList+0xa0>)
9000ac5c:	681a      	ldr	r2, [r3, #0]
9000ac5e:	4b0a      	ldr	r3, [pc, #40]	; (9000ac88 <prvAddCurrentTaskToDelayedList+0x94>)
9000ac60:	681b      	ldr	r3, [r3, #0]
9000ac62:	3304      	adds	r3, #4
9000ac64:	4619      	mov	r1, r3
9000ac66:	4610      	mov	r0, r2
9000ac68:	f7fd ff95 	bl	90008b96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000ac6c:	4b0a      	ldr	r3, [pc, #40]	; (9000ac98 <prvAddCurrentTaskToDelayedList+0xa4>)
9000ac6e:	681b      	ldr	r3, [r3, #0]
9000ac70:	68ba      	ldr	r2, [r7, #8]
9000ac72:	429a      	cmp	r2, r3
9000ac74:	d202      	bcs.n	9000ac7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
9000ac76:	4a08      	ldr	r2, [pc, #32]	; (9000ac98 <prvAddCurrentTaskToDelayedList+0xa4>)
9000ac78:	68bb      	ldr	r3, [r7, #8]
9000ac7a:	6013      	str	r3, [r2, #0]
}
9000ac7c:	bf00      	nop
9000ac7e:	3710      	adds	r7, #16
9000ac80:	46bd      	mov	sp, r7
9000ac82:	bd80      	pop	{r7, pc}
9000ac84:	240012bc 	.word	0x240012bc
9000ac88:	24000de4 	.word	0x24000de4
9000ac8c:	240012a4 	.word	0x240012a4
9000ac90:	24001274 	.word	0x24001274
9000ac94:	24001270 	.word	0x24001270
9000ac98:	240012d8 	.word	0x240012d8

9000ac9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
9000ac9c:	b580      	push	{r7, lr}
9000ac9e:	b08a      	sub	sp, #40	; 0x28
9000aca0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
9000aca2:	2300      	movs	r3, #0
9000aca4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
9000aca6:	f000 fb07 	bl	9000b2b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
9000acaa:	4b1c      	ldr	r3, [pc, #112]	; (9000ad1c <xTimerCreateTimerTask+0x80>)
9000acac:	681b      	ldr	r3, [r3, #0]
9000acae:	2b00      	cmp	r3, #0
9000acb0:	d021      	beq.n	9000acf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
9000acb2:	2300      	movs	r3, #0
9000acb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
9000acb6:	2300      	movs	r3, #0
9000acb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000acba:	1d3a      	adds	r2, r7, #4
9000acbc:	f107 0108 	add.w	r1, r7, #8
9000acc0:	f107 030c 	add.w	r3, r7, #12
9000acc4:	4618      	mov	r0, r3
9000acc6:	f7fd fefb 	bl	90008ac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000acca:	6879      	ldr	r1, [r7, #4]
9000accc:	68bb      	ldr	r3, [r7, #8]
9000acce:	68fa      	ldr	r2, [r7, #12]
9000acd0:	9202      	str	r2, [sp, #8]
9000acd2:	9301      	str	r3, [sp, #4]
9000acd4:	2302      	movs	r3, #2
9000acd6:	9300      	str	r3, [sp, #0]
9000acd8:	2300      	movs	r3, #0
9000acda:	460a      	mov	r2, r1
9000acdc:	4910      	ldr	r1, [pc, #64]	; (9000ad20 <xTimerCreateTimerTask+0x84>)
9000acde:	4811      	ldr	r0, [pc, #68]	; (9000ad24 <xTimerCreateTimerTask+0x88>)
9000ace0:	f7fe ff44 	bl	90009b6c <xTaskCreateStatic>
9000ace4:	4603      	mov	r3, r0
9000ace6:	4a10      	ldr	r2, [pc, #64]	; (9000ad28 <xTimerCreateTimerTask+0x8c>)
9000ace8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
9000acea:	4b0f      	ldr	r3, [pc, #60]	; (9000ad28 <xTimerCreateTimerTask+0x8c>)
9000acec:	681b      	ldr	r3, [r3, #0]
9000acee:	2b00      	cmp	r3, #0
9000acf0:	d001      	beq.n	9000acf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
9000acf2:	2301      	movs	r3, #1
9000acf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
9000acf6:	697b      	ldr	r3, [r7, #20]
9000acf8:	2b00      	cmp	r3, #0
9000acfa:	d10a      	bne.n	9000ad12 <xTimerCreateTimerTask+0x76>
	__asm volatile
9000acfc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ad00:	f383 8811 	msr	BASEPRI, r3
9000ad04:	f3bf 8f6f 	isb	sy
9000ad08:	f3bf 8f4f 	dsb	sy
9000ad0c:	613b      	str	r3, [r7, #16]
}
9000ad0e:	bf00      	nop
9000ad10:	e7fe      	b.n	9000ad10 <xTimerCreateTimerTask+0x74>
	return xReturn;
9000ad12:	697b      	ldr	r3, [r7, #20]
}
9000ad14:	4618      	mov	r0, r3
9000ad16:	3718      	adds	r7, #24
9000ad18:	46bd      	mov	sp, r7
9000ad1a:	bd80      	pop	{r7, pc}
9000ad1c:	24001314 	.word	0x24001314
9000ad20:	90013dec 	.word	0x90013dec
9000ad24:	9000ae61 	.word	0x9000ae61
9000ad28:	24001318 	.word	0x24001318

9000ad2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
9000ad2c:	b580      	push	{r7, lr}
9000ad2e:	b08a      	sub	sp, #40	; 0x28
9000ad30:	af00      	add	r7, sp, #0
9000ad32:	60f8      	str	r0, [r7, #12]
9000ad34:	60b9      	str	r1, [r7, #8]
9000ad36:	607a      	str	r2, [r7, #4]
9000ad38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
9000ad3a:	2300      	movs	r3, #0
9000ad3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
9000ad3e:	68fb      	ldr	r3, [r7, #12]
9000ad40:	2b00      	cmp	r3, #0
9000ad42:	d10a      	bne.n	9000ad5a <xTimerGenericCommand+0x2e>
	__asm volatile
9000ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ad48:	f383 8811 	msr	BASEPRI, r3
9000ad4c:	f3bf 8f6f 	isb	sy
9000ad50:	f3bf 8f4f 	dsb	sy
9000ad54:	623b      	str	r3, [r7, #32]
}
9000ad56:	bf00      	nop
9000ad58:	e7fe      	b.n	9000ad58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
9000ad5a:	4b1a      	ldr	r3, [pc, #104]	; (9000adc4 <xTimerGenericCommand+0x98>)
9000ad5c:	681b      	ldr	r3, [r3, #0]
9000ad5e:	2b00      	cmp	r3, #0
9000ad60:	d02a      	beq.n	9000adb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
9000ad62:	68bb      	ldr	r3, [r7, #8]
9000ad64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000ad66:	687b      	ldr	r3, [r7, #4]
9000ad68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000ad6a:	68fb      	ldr	r3, [r7, #12]
9000ad6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
9000ad6e:	68bb      	ldr	r3, [r7, #8]
9000ad70:	2b05      	cmp	r3, #5
9000ad72:	dc18      	bgt.n	9000ada6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000ad74:	f7ff fdb4 	bl	9000a8e0 <xTaskGetSchedulerState>
9000ad78:	4603      	mov	r3, r0
9000ad7a:	2b02      	cmp	r3, #2
9000ad7c:	d109      	bne.n	9000ad92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000ad7e:	4b11      	ldr	r3, [pc, #68]	; (9000adc4 <xTimerGenericCommand+0x98>)
9000ad80:	6818      	ldr	r0, [r3, #0]
9000ad82:	f107 0110 	add.w	r1, r7, #16
9000ad86:	2300      	movs	r3, #0
9000ad88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ad8a:	f7fe f8d7 	bl	90008f3c <xQueueGenericSend>
9000ad8e:	6278      	str	r0, [r7, #36]	; 0x24
9000ad90:	e012      	b.n	9000adb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
9000ad92:	4b0c      	ldr	r3, [pc, #48]	; (9000adc4 <xTimerGenericCommand+0x98>)
9000ad94:	6818      	ldr	r0, [r3, #0]
9000ad96:	f107 0110 	add.w	r1, r7, #16
9000ad9a:	2300      	movs	r3, #0
9000ad9c:	2200      	movs	r2, #0
9000ad9e:	f7fe f8cd 	bl	90008f3c <xQueueGenericSend>
9000ada2:	6278      	str	r0, [r7, #36]	; 0x24
9000ada4:	e008      	b.n	9000adb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
9000ada6:	4b07      	ldr	r3, [pc, #28]	; (9000adc4 <xTimerGenericCommand+0x98>)
9000ada8:	6818      	ldr	r0, [r3, #0]
9000adaa:	f107 0110 	add.w	r1, r7, #16
9000adae:	2300      	movs	r3, #0
9000adb0:	683a      	ldr	r2, [r7, #0]
9000adb2:	f7fe f9c1 	bl	90009138 <xQueueGenericSendFromISR>
9000adb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
9000adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000adba:	4618      	mov	r0, r3
9000adbc:	3728      	adds	r7, #40	; 0x28
9000adbe:	46bd      	mov	sp, r7
9000adc0:	bd80      	pop	{r7, pc}
9000adc2:	bf00      	nop
9000adc4:	24001314 	.word	0x24001314

9000adc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
9000adc8:	b580      	push	{r7, lr}
9000adca:	b088      	sub	sp, #32
9000adcc:	af02      	add	r7, sp, #8
9000adce:	6078      	str	r0, [r7, #4]
9000add0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000add2:	4b22      	ldr	r3, [pc, #136]	; (9000ae5c <prvProcessExpiredTimer+0x94>)
9000add4:	681b      	ldr	r3, [r3, #0]
9000add6:	68db      	ldr	r3, [r3, #12]
9000add8:	68db      	ldr	r3, [r3, #12]
9000adda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000addc:	697b      	ldr	r3, [r7, #20]
9000adde:	3304      	adds	r3, #4
9000ade0:	4618      	mov	r0, r3
9000ade2:	f7fd ff11 	bl	90008c08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000ade6:	697b      	ldr	r3, [r7, #20]
9000ade8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000adec:	f003 0304 	and.w	r3, r3, #4
9000adf0:	2b00      	cmp	r3, #0
9000adf2:	d022      	beq.n	9000ae3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000adf4:	697b      	ldr	r3, [r7, #20]
9000adf6:	699a      	ldr	r2, [r3, #24]
9000adf8:	687b      	ldr	r3, [r7, #4]
9000adfa:	18d1      	adds	r1, r2, r3
9000adfc:	687b      	ldr	r3, [r7, #4]
9000adfe:	683a      	ldr	r2, [r7, #0]
9000ae00:	6978      	ldr	r0, [r7, #20]
9000ae02:	f000 f8d1 	bl	9000afa8 <prvInsertTimerInActiveList>
9000ae06:	4603      	mov	r3, r0
9000ae08:	2b00      	cmp	r3, #0
9000ae0a:	d01f      	beq.n	9000ae4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
9000ae0c:	2300      	movs	r3, #0
9000ae0e:	9300      	str	r3, [sp, #0]
9000ae10:	2300      	movs	r3, #0
9000ae12:	687a      	ldr	r2, [r7, #4]
9000ae14:	2100      	movs	r1, #0
9000ae16:	6978      	ldr	r0, [r7, #20]
9000ae18:	f7ff ff88 	bl	9000ad2c <xTimerGenericCommand>
9000ae1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
9000ae1e:	693b      	ldr	r3, [r7, #16]
9000ae20:	2b00      	cmp	r3, #0
9000ae22:	d113      	bne.n	9000ae4c <prvProcessExpiredTimer+0x84>
	__asm volatile
9000ae24:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ae28:	f383 8811 	msr	BASEPRI, r3
9000ae2c:	f3bf 8f6f 	isb	sy
9000ae30:	f3bf 8f4f 	dsb	sy
9000ae34:	60fb      	str	r3, [r7, #12]
}
9000ae36:	bf00      	nop
9000ae38:	e7fe      	b.n	9000ae38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000ae3a:	697b      	ldr	r3, [r7, #20]
9000ae3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000ae40:	f023 0301 	bic.w	r3, r3, #1
9000ae44:	b2da      	uxtb	r2, r3
9000ae46:	697b      	ldr	r3, [r7, #20]
9000ae48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000ae4c:	697b      	ldr	r3, [r7, #20]
9000ae4e:	6a1b      	ldr	r3, [r3, #32]
9000ae50:	6978      	ldr	r0, [r7, #20]
9000ae52:	4798      	blx	r3
}
9000ae54:	bf00      	nop
9000ae56:	3718      	adds	r7, #24
9000ae58:	46bd      	mov	sp, r7
9000ae5a:	bd80      	pop	{r7, pc}
9000ae5c:	2400130c 	.word	0x2400130c

9000ae60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
9000ae60:	b580      	push	{r7, lr}
9000ae62:	b084      	sub	sp, #16
9000ae64:	af00      	add	r7, sp, #0
9000ae66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
9000ae68:	f107 0308 	add.w	r3, r7, #8
9000ae6c:	4618      	mov	r0, r3
9000ae6e:	f000 f857 	bl	9000af20 <prvGetNextExpireTime>
9000ae72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
9000ae74:	68bb      	ldr	r3, [r7, #8]
9000ae76:	4619      	mov	r1, r3
9000ae78:	68f8      	ldr	r0, [r7, #12]
9000ae7a:	f000 f803 	bl	9000ae84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
9000ae7e:	f000 f8d5 	bl	9000b02c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
9000ae82:	e7f1      	b.n	9000ae68 <prvTimerTask+0x8>

9000ae84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
9000ae84:	b580      	push	{r7, lr}
9000ae86:	b084      	sub	sp, #16
9000ae88:	af00      	add	r7, sp, #0
9000ae8a:	6078      	str	r0, [r7, #4]
9000ae8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
9000ae8e:	f7ff f93b 	bl	9000a108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
9000ae92:	f107 0308 	add.w	r3, r7, #8
9000ae96:	4618      	mov	r0, r3
9000ae98:	f000 f866 	bl	9000af68 <prvSampleTimeNow>
9000ae9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
9000ae9e:	68bb      	ldr	r3, [r7, #8]
9000aea0:	2b00      	cmp	r3, #0
9000aea2:	d130      	bne.n	9000af06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000aea4:	683b      	ldr	r3, [r7, #0]
9000aea6:	2b00      	cmp	r3, #0
9000aea8:	d10a      	bne.n	9000aec0 <prvProcessTimerOrBlockTask+0x3c>
9000aeaa:	687a      	ldr	r2, [r7, #4]
9000aeac:	68fb      	ldr	r3, [r7, #12]
9000aeae:	429a      	cmp	r2, r3
9000aeb0:	d806      	bhi.n	9000aec0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
9000aeb2:	f7ff f937 	bl	9000a124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
9000aeb6:	68f9      	ldr	r1, [r7, #12]
9000aeb8:	6878      	ldr	r0, [r7, #4]
9000aeba:	f7ff ff85 	bl	9000adc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
9000aebe:	e024      	b.n	9000af0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
9000aec0:	683b      	ldr	r3, [r7, #0]
9000aec2:	2b00      	cmp	r3, #0
9000aec4:	d008      	beq.n	9000aed8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000aec6:	4b13      	ldr	r3, [pc, #76]	; (9000af14 <prvProcessTimerOrBlockTask+0x90>)
9000aec8:	681b      	ldr	r3, [r3, #0]
9000aeca:	681b      	ldr	r3, [r3, #0]
9000aecc:	2b00      	cmp	r3, #0
9000aece:	d101      	bne.n	9000aed4 <prvProcessTimerOrBlockTask+0x50>
9000aed0:	2301      	movs	r3, #1
9000aed2:	e000      	b.n	9000aed6 <prvProcessTimerOrBlockTask+0x52>
9000aed4:	2300      	movs	r3, #0
9000aed6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9000aed8:	4b0f      	ldr	r3, [pc, #60]	; (9000af18 <prvProcessTimerOrBlockTask+0x94>)
9000aeda:	6818      	ldr	r0, [r3, #0]
9000aedc:	687a      	ldr	r2, [r7, #4]
9000aede:	68fb      	ldr	r3, [r7, #12]
9000aee0:	1ad3      	subs	r3, r2, r3
9000aee2:	683a      	ldr	r2, [r7, #0]
9000aee4:	4619      	mov	r1, r3
9000aee6:	f7fe fe0d 	bl	90009b04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
9000aeea:	f7ff f91b 	bl	9000a124 <xTaskResumeAll>
9000aeee:	4603      	mov	r3, r0
9000aef0:	2b00      	cmp	r3, #0
9000aef2:	d10a      	bne.n	9000af0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
9000aef4:	4b09      	ldr	r3, [pc, #36]	; (9000af1c <prvProcessTimerOrBlockTask+0x98>)
9000aef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000aefa:	601a      	str	r2, [r3, #0]
9000aefc:	f3bf 8f4f 	dsb	sy
9000af00:	f3bf 8f6f 	isb	sy
}
9000af04:	e001      	b.n	9000af0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
9000af06:	f7ff f90d 	bl	9000a124 <xTaskResumeAll>
}
9000af0a:	bf00      	nop
9000af0c:	3710      	adds	r7, #16
9000af0e:	46bd      	mov	sp, r7
9000af10:	bd80      	pop	{r7, pc}
9000af12:	bf00      	nop
9000af14:	24001310 	.word	0x24001310
9000af18:	24001314 	.word	0x24001314
9000af1c:	e000ed04 	.word	0xe000ed04

9000af20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
9000af20:	b480      	push	{r7}
9000af22:	b085      	sub	sp, #20
9000af24:	af00      	add	r7, sp, #0
9000af26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000af28:	4b0e      	ldr	r3, [pc, #56]	; (9000af64 <prvGetNextExpireTime+0x44>)
9000af2a:	681b      	ldr	r3, [r3, #0]
9000af2c:	681b      	ldr	r3, [r3, #0]
9000af2e:	2b00      	cmp	r3, #0
9000af30:	d101      	bne.n	9000af36 <prvGetNextExpireTime+0x16>
9000af32:	2201      	movs	r2, #1
9000af34:	e000      	b.n	9000af38 <prvGetNextExpireTime+0x18>
9000af36:	2200      	movs	r2, #0
9000af38:	687b      	ldr	r3, [r7, #4]
9000af3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
9000af3c:	687b      	ldr	r3, [r7, #4]
9000af3e:	681b      	ldr	r3, [r3, #0]
9000af40:	2b00      	cmp	r3, #0
9000af42:	d105      	bne.n	9000af50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000af44:	4b07      	ldr	r3, [pc, #28]	; (9000af64 <prvGetNextExpireTime+0x44>)
9000af46:	681b      	ldr	r3, [r3, #0]
9000af48:	68db      	ldr	r3, [r3, #12]
9000af4a:	681b      	ldr	r3, [r3, #0]
9000af4c:	60fb      	str	r3, [r7, #12]
9000af4e:	e001      	b.n	9000af54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
9000af50:	2300      	movs	r3, #0
9000af52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
9000af54:	68fb      	ldr	r3, [r7, #12]
}
9000af56:	4618      	mov	r0, r3
9000af58:	3714      	adds	r7, #20
9000af5a:	46bd      	mov	sp, r7
9000af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000af60:	4770      	bx	lr
9000af62:	bf00      	nop
9000af64:	2400130c 	.word	0x2400130c

9000af68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
9000af68:	b580      	push	{r7, lr}
9000af6a:	b084      	sub	sp, #16
9000af6c:	af00      	add	r7, sp, #0
9000af6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
9000af70:	f7ff f976 	bl	9000a260 <xTaskGetTickCount>
9000af74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
9000af76:	4b0b      	ldr	r3, [pc, #44]	; (9000afa4 <prvSampleTimeNow+0x3c>)
9000af78:	681b      	ldr	r3, [r3, #0]
9000af7a:	68fa      	ldr	r2, [r7, #12]
9000af7c:	429a      	cmp	r2, r3
9000af7e:	d205      	bcs.n	9000af8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
9000af80:	f000 f936 	bl	9000b1f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9000af84:	687b      	ldr	r3, [r7, #4]
9000af86:	2201      	movs	r2, #1
9000af88:	601a      	str	r2, [r3, #0]
9000af8a:	e002      	b.n	9000af92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
9000af8c:	687b      	ldr	r3, [r7, #4]
9000af8e:	2200      	movs	r2, #0
9000af90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
9000af92:	4a04      	ldr	r2, [pc, #16]	; (9000afa4 <prvSampleTimeNow+0x3c>)
9000af94:	68fb      	ldr	r3, [r7, #12]
9000af96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
9000af98:	68fb      	ldr	r3, [r7, #12]
}
9000af9a:	4618      	mov	r0, r3
9000af9c:	3710      	adds	r7, #16
9000af9e:	46bd      	mov	sp, r7
9000afa0:	bd80      	pop	{r7, pc}
9000afa2:	bf00      	nop
9000afa4:	2400131c 	.word	0x2400131c

9000afa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
9000afa8:	b580      	push	{r7, lr}
9000afaa:	b086      	sub	sp, #24
9000afac:	af00      	add	r7, sp, #0
9000afae:	60f8      	str	r0, [r7, #12]
9000afb0:	60b9      	str	r1, [r7, #8]
9000afb2:	607a      	str	r2, [r7, #4]
9000afb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
9000afb6:	2300      	movs	r3, #0
9000afb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000afba:	68fb      	ldr	r3, [r7, #12]
9000afbc:	68ba      	ldr	r2, [r7, #8]
9000afbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000afc0:	68fb      	ldr	r3, [r7, #12]
9000afc2:	68fa      	ldr	r2, [r7, #12]
9000afc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
9000afc6:	68ba      	ldr	r2, [r7, #8]
9000afc8:	687b      	ldr	r3, [r7, #4]
9000afca:	429a      	cmp	r2, r3
9000afcc:	d812      	bhi.n	9000aff4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000afce:	687a      	ldr	r2, [r7, #4]
9000afd0:	683b      	ldr	r3, [r7, #0]
9000afd2:	1ad2      	subs	r2, r2, r3
9000afd4:	68fb      	ldr	r3, [r7, #12]
9000afd6:	699b      	ldr	r3, [r3, #24]
9000afd8:	429a      	cmp	r2, r3
9000afda:	d302      	bcc.n	9000afe2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
9000afdc:	2301      	movs	r3, #1
9000afde:	617b      	str	r3, [r7, #20]
9000afe0:	e01b      	b.n	9000b01a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000afe2:	4b10      	ldr	r3, [pc, #64]	; (9000b024 <prvInsertTimerInActiveList+0x7c>)
9000afe4:	681a      	ldr	r2, [r3, #0]
9000afe6:	68fb      	ldr	r3, [r7, #12]
9000afe8:	3304      	adds	r3, #4
9000afea:	4619      	mov	r1, r3
9000afec:	4610      	mov	r0, r2
9000afee:	f7fd fdd2 	bl	90008b96 <vListInsert>
9000aff2:	e012      	b.n	9000b01a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
9000aff4:	687a      	ldr	r2, [r7, #4]
9000aff6:	683b      	ldr	r3, [r7, #0]
9000aff8:	429a      	cmp	r2, r3
9000affa:	d206      	bcs.n	9000b00a <prvInsertTimerInActiveList+0x62>
9000affc:	68ba      	ldr	r2, [r7, #8]
9000affe:	683b      	ldr	r3, [r7, #0]
9000b000:	429a      	cmp	r2, r3
9000b002:	d302      	bcc.n	9000b00a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
9000b004:	2301      	movs	r3, #1
9000b006:	617b      	str	r3, [r7, #20]
9000b008:	e007      	b.n	9000b01a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000b00a:	4b07      	ldr	r3, [pc, #28]	; (9000b028 <prvInsertTimerInActiveList+0x80>)
9000b00c:	681a      	ldr	r2, [r3, #0]
9000b00e:	68fb      	ldr	r3, [r7, #12]
9000b010:	3304      	adds	r3, #4
9000b012:	4619      	mov	r1, r3
9000b014:	4610      	mov	r0, r2
9000b016:	f7fd fdbe 	bl	90008b96 <vListInsert>
		}
	}

	return xProcessTimerNow;
9000b01a:	697b      	ldr	r3, [r7, #20]
}
9000b01c:	4618      	mov	r0, r3
9000b01e:	3718      	adds	r7, #24
9000b020:	46bd      	mov	sp, r7
9000b022:	bd80      	pop	{r7, pc}
9000b024:	24001310 	.word	0x24001310
9000b028:	2400130c 	.word	0x2400130c

9000b02c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
9000b02c:	b580      	push	{r7, lr}
9000b02e:	b08e      	sub	sp, #56	; 0x38
9000b030:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000b032:	e0ca      	b.n	9000b1ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
9000b034:	687b      	ldr	r3, [r7, #4]
9000b036:	2b00      	cmp	r3, #0
9000b038:	da18      	bge.n	9000b06c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
9000b03a:	1d3b      	adds	r3, r7, #4
9000b03c:	3304      	adds	r3, #4
9000b03e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
9000b040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b042:	2b00      	cmp	r3, #0
9000b044:	d10a      	bne.n	9000b05c <prvProcessReceivedCommands+0x30>
	__asm volatile
9000b046:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b04a:	f383 8811 	msr	BASEPRI, r3
9000b04e:	f3bf 8f6f 	isb	sy
9000b052:	f3bf 8f4f 	dsb	sy
9000b056:	61fb      	str	r3, [r7, #28]
}
9000b058:	bf00      	nop
9000b05a:	e7fe      	b.n	9000b05a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
9000b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000b05e:	681b      	ldr	r3, [r3, #0]
9000b060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000b062:	6850      	ldr	r0, [r2, #4]
9000b064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000b066:	6892      	ldr	r2, [r2, #8]
9000b068:	4611      	mov	r1, r2
9000b06a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
9000b06c:	687b      	ldr	r3, [r7, #4]
9000b06e:	2b00      	cmp	r3, #0
9000b070:	f2c0 80aa 	blt.w	9000b1c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
9000b074:	68fb      	ldr	r3, [r7, #12]
9000b076:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9000b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b07a:	695b      	ldr	r3, [r3, #20]
9000b07c:	2b00      	cmp	r3, #0
9000b07e:	d004      	beq.n	9000b08a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b082:	3304      	adds	r3, #4
9000b084:	4618      	mov	r0, r3
9000b086:	f7fd fdbf 	bl	90008c08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
9000b08a:	463b      	mov	r3, r7
9000b08c:	4618      	mov	r0, r3
9000b08e:	f7ff ff6b 	bl	9000af68 <prvSampleTimeNow>
9000b092:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
9000b094:	687b      	ldr	r3, [r7, #4]
9000b096:	2b09      	cmp	r3, #9
9000b098:	f200 8097 	bhi.w	9000b1ca <prvProcessReceivedCommands+0x19e>
9000b09c:	a201      	add	r2, pc, #4	; (adr r2, 9000b0a4 <prvProcessReceivedCommands+0x78>)
9000b09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000b0a2:	bf00      	nop
9000b0a4:	9000b0cd 	.word	0x9000b0cd
9000b0a8:	9000b0cd 	.word	0x9000b0cd
9000b0ac:	9000b0cd 	.word	0x9000b0cd
9000b0b0:	9000b141 	.word	0x9000b141
9000b0b4:	9000b155 	.word	0x9000b155
9000b0b8:	9000b19f 	.word	0x9000b19f
9000b0bc:	9000b0cd 	.word	0x9000b0cd
9000b0c0:	9000b0cd 	.word	0x9000b0cd
9000b0c4:	9000b141 	.word	0x9000b141
9000b0c8:	9000b155 	.word	0x9000b155
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b0ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000b0d2:	f043 0301 	orr.w	r3, r3, #1
9000b0d6:	b2da      	uxtb	r2, r3
9000b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b0da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000b0de:	68ba      	ldr	r2, [r7, #8]
9000b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b0e2:	699b      	ldr	r3, [r3, #24]
9000b0e4:	18d1      	adds	r1, r2, r3
9000b0e6:	68bb      	ldr	r3, [r7, #8]
9000b0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000b0ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000b0ec:	f7ff ff5c 	bl	9000afa8 <prvInsertTimerInActiveList>
9000b0f0:	4603      	mov	r3, r0
9000b0f2:	2b00      	cmp	r3, #0
9000b0f4:	d069      	beq.n	9000b1ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b0f8:	6a1b      	ldr	r3, [r3, #32]
9000b0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000b0fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000b104:	f003 0304 	and.w	r3, r3, #4
9000b108:	2b00      	cmp	r3, #0
9000b10a:	d05e      	beq.n	9000b1ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000b10c:	68ba      	ldr	r2, [r7, #8]
9000b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b110:	699b      	ldr	r3, [r3, #24]
9000b112:	441a      	add	r2, r3
9000b114:	2300      	movs	r3, #0
9000b116:	9300      	str	r3, [sp, #0]
9000b118:	2300      	movs	r3, #0
9000b11a:	2100      	movs	r1, #0
9000b11c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000b11e:	f7ff fe05 	bl	9000ad2c <xTimerGenericCommand>
9000b122:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
9000b124:	6a3b      	ldr	r3, [r7, #32]
9000b126:	2b00      	cmp	r3, #0
9000b128:	d14f      	bne.n	9000b1ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
9000b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b12e:	f383 8811 	msr	BASEPRI, r3
9000b132:	f3bf 8f6f 	isb	sy
9000b136:	f3bf 8f4f 	dsb	sy
9000b13a:	61bb      	str	r3, [r7, #24]
}
9000b13c:	bf00      	nop
9000b13e:	e7fe      	b.n	9000b13e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000b146:	f023 0301 	bic.w	r3, r3, #1
9000b14a:	b2da      	uxtb	r2, r3
9000b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b14e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
9000b152:	e03a      	b.n	9000b1ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000b15a:	f043 0301 	orr.w	r3, r3, #1
9000b15e:	b2da      	uxtb	r2, r3
9000b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
9000b166:	68ba      	ldr	r2, [r7, #8]
9000b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b16a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b16e:	699b      	ldr	r3, [r3, #24]
9000b170:	2b00      	cmp	r3, #0
9000b172:	d10a      	bne.n	9000b18a <prvProcessReceivedCommands+0x15e>
	__asm volatile
9000b174:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b178:	f383 8811 	msr	BASEPRI, r3
9000b17c:	f3bf 8f6f 	isb	sy
9000b180:	f3bf 8f4f 	dsb	sy
9000b184:	617b      	str	r3, [r7, #20]
}
9000b186:	bf00      	nop
9000b188:	e7fe      	b.n	9000b188 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
9000b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b18c:	699a      	ldr	r2, [r3, #24]
9000b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b190:	18d1      	adds	r1, r2, r3
9000b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000b196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000b198:	f7ff ff06 	bl	9000afa8 <prvInsertTimerInActiveList>
					break;
9000b19c:	e015      	b.n	9000b1ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
9000b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b1a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000b1a4:	f003 0302 	and.w	r3, r3, #2
9000b1a8:	2b00      	cmp	r3, #0
9000b1aa:	d103      	bne.n	9000b1b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
9000b1ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000b1ae:	f000 fbdf 	bl	9000b970 <vPortFree>
9000b1b2:	e00a      	b.n	9000b1ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b1b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000b1ba:	f023 0301 	bic.w	r3, r3, #1
9000b1be:	b2da      	uxtb	r2, r3
9000b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000b1c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
9000b1c6:	e000      	b.n	9000b1ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
9000b1c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000b1ca:	4b08      	ldr	r3, [pc, #32]	; (9000b1ec <prvProcessReceivedCommands+0x1c0>)
9000b1cc:	681b      	ldr	r3, [r3, #0]
9000b1ce:	1d39      	adds	r1, r7, #4
9000b1d0:	2200      	movs	r2, #0
9000b1d2:	4618      	mov	r0, r3
9000b1d4:	f7fe f8d8 	bl	90009388 <xQueueReceive>
9000b1d8:	4603      	mov	r3, r0
9000b1da:	2b00      	cmp	r3, #0
9000b1dc:	f47f af2a 	bne.w	9000b034 <prvProcessReceivedCommands+0x8>
	}
}
9000b1e0:	bf00      	nop
9000b1e2:	bf00      	nop
9000b1e4:	3730      	adds	r7, #48	; 0x30
9000b1e6:	46bd      	mov	sp, r7
9000b1e8:	bd80      	pop	{r7, pc}
9000b1ea:	bf00      	nop
9000b1ec:	24001314 	.word	0x24001314

9000b1f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000b1f0:	b580      	push	{r7, lr}
9000b1f2:	b088      	sub	sp, #32
9000b1f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000b1f6:	e048      	b.n	9000b28a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000b1f8:	4b2d      	ldr	r3, [pc, #180]	; (9000b2b0 <prvSwitchTimerLists+0xc0>)
9000b1fa:	681b      	ldr	r3, [r3, #0]
9000b1fc:	68db      	ldr	r3, [r3, #12]
9000b1fe:	681b      	ldr	r3, [r3, #0]
9000b200:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000b202:	4b2b      	ldr	r3, [pc, #172]	; (9000b2b0 <prvSwitchTimerLists+0xc0>)
9000b204:	681b      	ldr	r3, [r3, #0]
9000b206:	68db      	ldr	r3, [r3, #12]
9000b208:	68db      	ldr	r3, [r3, #12]
9000b20a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000b20c:	68fb      	ldr	r3, [r7, #12]
9000b20e:	3304      	adds	r3, #4
9000b210:	4618      	mov	r0, r3
9000b212:	f7fd fcf9 	bl	90008c08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000b216:	68fb      	ldr	r3, [r7, #12]
9000b218:	6a1b      	ldr	r3, [r3, #32]
9000b21a:	68f8      	ldr	r0, [r7, #12]
9000b21c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000b21e:	68fb      	ldr	r3, [r7, #12]
9000b220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000b224:	f003 0304 	and.w	r3, r3, #4
9000b228:	2b00      	cmp	r3, #0
9000b22a:	d02e      	beq.n	9000b28a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000b22c:	68fb      	ldr	r3, [r7, #12]
9000b22e:	699b      	ldr	r3, [r3, #24]
9000b230:	693a      	ldr	r2, [r7, #16]
9000b232:	4413      	add	r3, r2
9000b234:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
9000b236:	68ba      	ldr	r2, [r7, #8]
9000b238:	693b      	ldr	r3, [r7, #16]
9000b23a:	429a      	cmp	r2, r3
9000b23c:	d90e      	bls.n	9000b25c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9000b23e:	68fb      	ldr	r3, [r7, #12]
9000b240:	68ba      	ldr	r2, [r7, #8]
9000b242:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000b244:	68fb      	ldr	r3, [r7, #12]
9000b246:	68fa      	ldr	r2, [r7, #12]
9000b248:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000b24a:	4b19      	ldr	r3, [pc, #100]	; (9000b2b0 <prvSwitchTimerLists+0xc0>)
9000b24c:	681a      	ldr	r2, [r3, #0]
9000b24e:	68fb      	ldr	r3, [r7, #12]
9000b250:	3304      	adds	r3, #4
9000b252:	4619      	mov	r1, r3
9000b254:	4610      	mov	r0, r2
9000b256:	f7fd fc9e 	bl	90008b96 <vListInsert>
9000b25a:	e016      	b.n	9000b28a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
9000b25c:	2300      	movs	r3, #0
9000b25e:	9300      	str	r3, [sp, #0]
9000b260:	2300      	movs	r3, #0
9000b262:	693a      	ldr	r2, [r7, #16]
9000b264:	2100      	movs	r1, #0
9000b266:	68f8      	ldr	r0, [r7, #12]
9000b268:	f7ff fd60 	bl	9000ad2c <xTimerGenericCommand>
9000b26c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
9000b26e:	687b      	ldr	r3, [r7, #4]
9000b270:	2b00      	cmp	r3, #0
9000b272:	d10a      	bne.n	9000b28a <prvSwitchTimerLists+0x9a>
	__asm volatile
9000b274:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b278:	f383 8811 	msr	BASEPRI, r3
9000b27c:	f3bf 8f6f 	isb	sy
9000b280:	f3bf 8f4f 	dsb	sy
9000b284:	603b      	str	r3, [r7, #0]
}
9000b286:	bf00      	nop
9000b288:	e7fe      	b.n	9000b288 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000b28a:	4b09      	ldr	r3, [pc, #36]	; (9000b2b0 <prvSwitchTimerLists+0xc0>)
9000b28c:	681b      	ldr	r3, [r3, #0]
9000b28e:	681b      	ldr	r3, [r3, #0]
9000b290:	2b00      	cmp	r3, #0
9000b292:	d1b1      	bne.n	9000b1f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
9000b294:	4b06      	ldr	r3, [pc, #24]	; (9000b2b0 <prvSwitchTimerLists+0xc0>)
9000b296:	681b      	ldr	r3, [r3, #0]
9000b298:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
9000b29a:	4b06      	ldr	r3, [pc, #24]	; (9000b2b4 <prvSwitchTimerLists+0xc4>)
9000b29c:	681b      	ldr	r3, [r3, #0]
9000b29e:	4a04      	ldr	r2, [pc, #16]	; (9000b2b0 <prvSwitchTimerLists+0xc0>)
9000b2a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000b2a2:	4a04      	ldr	r2, [pc, #16]	; (9000b2b4 <prvSwitchTimerLists+0xc4>)
9000b2a4:	697b      	ldr	r3, [r7, #20]
9000b2a6:	6013      	str	r3, [r2, #0]
}
9000b2a8:	bf00      	nop
9000b2aa:	3718      	adds	r7, #24
9000b2ac:	46bd      	mov	sp, r7
9000b2ae:	bd80      	pop	{r7, pc}
9000b2b0:	2400130c 	.word	0x2400130c
9000b2b4:	24001310 	.word	0x24001310

9000b2b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
9000b2b8:	b580      	push	{r7, lr}
9000b2ba:	b082      	sub	sp, #8
9000b2bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
9000b2be:	f000 f969 	bl	9000b594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
9000b2c2:	4b15      	ldr	r3, [pc, #84]	; (9000b318 <prvCheckForValidListAndQueue+0x60>)
9000b2c4:	681b      	ldr	r3, [r3, #0]
9000b2c6:	2b00      	cmp	r3, #0
9000b2c8:	d120      	bne.n	9000b30c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
9000b2ca:	4814      	ldr	r0, [pc, #80]	; (9000b31c <prvCheckForValidListAndQueue+0x64>)
9000b2cc:	f7fd fc12 	bl	90008af4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9000b2d0:	4813      	ldr	r0, [pc, #76]	; (9000b320 <prvCheckForValidListAndQueue+0x68>)
9000b2d2:	f7fd fc0f 	bl	90008af4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9000b2d6:	4b13      	ldr	r3, [pc, #76]	; (9000b324 <prvCheckForValidListAndQueue+0x6c>)
9000b2d8:	4a10      	ldr	r2, [pc, #64]	; (9000b31c <prvCheckForValidListAndQueue+0x64>)
9000b2da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
9000b2dc:	4b12      	ldr	r3, [pc, #72]	; (9000b328 <prvCheckForValidListAndQueue+0x70>)
9000b2de:	4a10      	ldr	r2, [pc, #64]	; (9000b320 <prvCheckForValidListAndQueue+0x68>)
9000b2e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000b2e2:	2300      	movs	r3, #0
9000b2e4:	9300      	str	r3, [sp, #0]
9000b2e6:	4b11      	ldr	r3, [pc, #68]	; (9000b32c <prvCheckForValidListAndQueue+0x74>)
9000b2e8:	4a11      	ldr	r2, [pc, #68]	; (9000b330 <prvCheckForValidListAndQueue+0x78>)
9000b2ea:	2110      	movs	r1, #16
9000b2ec:	200a      	movs	r0, #10
9000b2ee:	f7fd fd1d 	bl	90008d2c <xQueueGenericCreateStatic>
9000b2f2:	4603      	mov	r3, r0
9000b2f4:	4a08      	ldr	r2, [pc, #32]	; (9000b318 <prvCheckForValidListAndQueue+0x60>)
9000b2f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
9000b2f8:	4b07      	ldr	r3, [pc, #28]	; (9000b318 <prvCheckForValidListAndQueue+0x60>)
9000b2fa:	681b      	ldr	r3, [r3, #0]
9000b2fc:	2b00      	cmp	r3, #0
9000b2fe:	d005      	beq.n	9000b30c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
9000b300:	4b05      	ldr	r3, [pc, #20]	; (9000b318 <prvCheckForValidListAndQueue+0x60>)
9000b302:	681b      	ldr	r3, [r3, #0]
9000b304:	490b      	ldr	r1, [pc, #44]	; (9000b334 <prvCheckForValidListAndQueue+0x7c>)
9000b306:	4618      	mov	r0, r3
9000b308:	f7fe fbd2 	bl	90009ab0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000b30c:	f000 f972 	bl	9000b5f4 <vPortExitCritical>
}
9000b310:	bf00      	nop
9000b312:	46bd      	mov	sp, r7
9000b314:	bd80      	pop	{r7, pc}
9000b316:	bf00      	nop
9000b318:	24001314 	.word	0x24001314
9000b31c:	240012e4 	.word	0x240012e4
9000b320:	240012f8 	.word	0x240012f8
9000b324:	2400130c 	.word	0x2400130c
9000b328:	24001310 	.word	0x24001310
9000b32c:	240013c0 	.word	0x240013c0
9000b330:	24001320 	.word	0x24001320
9000b334:	90013df4 	.word	0x90013df4

9000b338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
9000b338:	b480      	push	{r7}
9000b33a:	b085      	sub	sp, #20
9000b33c:	af00      	add	r7, sp, #0
9000b33e:	60f8      	str	r0, [r7, #12]
9000b340:	60b9      	str	r1, [r7, #8]
9000b342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
9000b344:	68fb      	ldr	r3, [r7, #12]
9000b346:	3b04      	subs	r3, #4
9000b348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000b34a:	68fb      	ldr	r3, [r7, #12]
9000b34c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000b350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
9000b352:	68fb      	ldr	r3, [r7, #12]
9000b354:	3b04      	subs	r3, #4
9000b356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000b358:	68bb      	ldr	r3, [r7, #8]
9000b35a:	f023 0201 	bic.w	r2, r3, #1
9000b35e:	68fb      	ldr	r3, [r7, #12]
9000b360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
9000b362:	68fb      	ldr	r3, [r7, #12]
9000b364:	3b04      	subs	r3, #4
9000b366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000b368:	4a0c      	ldr	r2, [pc, #48]	; (9000b39c <pxPortInitialiseStack+0x64>)
9000b36a:	68fb      	ldr	r3, [r7, #12]
9000b36c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
9000b36e:	68fb      	ldr	r3, [r7, #12]
9000b370:	3b14      	subs	r3, #20
9000b372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000b374:	687a      	ldr	r2, [r7, #4]
9000b376:	68fb      	ldr	r3, [r7, #12]
9000b378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
9000b37a:	68fb      	ldr	r3, [r7, #12]
9000b37c:	3b04      	subs	r3, #4
9000b37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000b380:	68fb      	ldr	r3, [r7, #12]
9000b382:	f06f 0202 	mvn.w	r2, #2
9000b386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
9000b388:	68fb      	ldr	r3, [r7, #12]
9000b38a:	3b20      	subs	r3, #32
9000b38c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
9000b38e:	68fb      	ldr	r3, [r7, #12]
}
9000b390:	4618      	mov	r0, r3
9000b392:	3714      	adds	r7, #20
9000b394:	46bd      	mov	sp, r7
9000b396:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b39a:	4770      	bx	lr
9000b39c:	9000b3a1 	.word	0x9000b3a1

9000b3a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
9000b3a0:	b480      	push	{r7}
9000b3a2:	b085      	sub	sp, #20
9000b3a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
9000b3a6:	2300      	movs	r3, #0
9000b3a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
9000b3aa:	4b12      	ldr	r3, [pc, #72]	; (9000b3f4 <prvTaskExitError+0x54>)
9000b3ac:	681b      	ldr	r3, [r3, #0]
9000b3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
9000b3b2:	d00a      	beq.n	9000b3ca <prvTaskExitError+0x2a>
	__asm volatile
9000b3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b3b8:	f383 8811 	msr	BASEPRI, r3
9000b3bc:	f3bf 8f6f 	isb	sy
9000b3c0:	f3bf 8f4f 	dsb	sy
9000b3c4:	60fb      	str	r3, [r7, #12]
}
9000b3c6:	bf00      	nop
9000b3c8:	e7fe      	b.n	9000b3c8 <prvTaskExitError+0x28>
	__asm volatile
9000b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b3ce:	f383 8811 	msr	BASEPRI, r3
9000b3d2:	f3bf 8f6f 	isb	sy
9000b3d6:	f3bf 8f4f 	dsb	sy
9000b3da:	60bb      	str	r3, [r7, #8]
}
9000b3dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
9000b3de:	bf00      	nop
9000b3e0:	687b      	ldr	r3, [r7, #4]
9000b3e2:	2b00      	cmp	r3, #0
9000b3e4:	d0fc      	beq.n	9000b3e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
9000b3e6:	bf00      	nop
9000b3e8:	bf00      	nop
9000b3ea:	3714      	adds	r7, #20
9000b3ec:	46bd      	mov	sp, r7
9000b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b3f2:	4770      	bx	lr
9000b3f4:	24000010 	.word	0x24000010
	...

9000b400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
9000b400:	4b07      	ldr	r3, [pc, #28]	; (9000b420 <pxCurrentTCBConst2>)
9000b402:	6819      	ldr	r1, [r3, #0]
9000b404:	6808      	ldr	r0, [r1, #0]
9000b406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000b40a:	f380 8809 	msr	PSP, r0
9000b40e:	f3bf 8f6f 	isb	sy
9000b412:	f04f 0000 	mov.w	r0, #0
9000b416:	f380 8811 	msr	BASEPRI, r0
9000b41a:	4770      	bx	lr
9000b41c:	f3af 8000 	nop.w

9000b420 <pxCurrentTCBConst2>:
9000b420:	24000de4 	.word	0x24000de4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
9000b424:	bf00      	nop
9000b426:	bf00      	nop

9000b428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000b428:	4808      	ldr	r0, [pc, #32]	; (9000b44c <prvPortStartFirstTask+0x24>)
9000b42a:	6800      	ldr	r0, [r0, #0]
9000b42c:	6800      	ldr	r0, [r0, #0]
9000b42e:	f380 8808 	msr	MSP, r0
9000b432:	f04f 0000 	mov.w	r0, #0
9000b436:	f380 8814 	msr	CONTROL, r0
9000b43a:	b662      	cpsie	i
9000b43c:	b661      	cpsie	f
9000b43e:	f3bf 8f4f 	dsb	sy
9000b442:	f3bf 8f6f 	isb	sy
9000b446:	df00      	svc	0
9000b448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000b44a:	bf00      	nop
9000b44c:	e000ed08 	.word	0xe000ed08

9000b450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
9000b450:	b580      	push	{r7, lr}
9000b452:	b086      	sub	sp, #24
9000b454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000b456:	4b46      	ldr	r3, [pc, #280]	; (9000b570 <xPortStartScheduler+0x120>)
9000b458:	681b      	ldr	r3, [r3, #0]
9000b45a:	4a46      	ldr	r2, [pc, #280]	; (9000b574 <xPortStartScheduler+0x124>)
9000b45c:	4293      	cmp	r3, r2
9000b45e:	d10a      	bne.n	9000b476 <xPortStartScheduler+0x26>
	__asm volatile
9000b460:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b464:	f383 8811 	msr	BASEPRI, r3
9000b468:	f3bf 8f6f 	isb	sy
9000b46c:	f3bf 8f4f 	dsb	sy
9000b470:	613b      	str	r3, [r7, #16]
}
9000b472:	bf00      	nop
9000b474:	e7fe      	b.n	9000b474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000b476:	4b3e      	ldr	r3, [pc, #248]	; (9000b570 <xPortStartScheduler+0x120>)
9000b478:	681b      	ldr	r3, [r3, #0]
9000b47a:	4a3f      	ldr	r2, [pc, #252]	; (9000b578 <xPortStartScheduler+0x128>)
9000b47c:	4293      	cmp	r3, r2
9000b47e:	d10a      	bne.n	9000b496 <xPortStartScheduler+0x46>
	__asm volatile
9000b480:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b484:	f383 8811 	msr	BASEPRI, r3
9000b488:	f3bf 8f6f 	isb	sy
9000b48c:	f3bf 8f4f 	dsb	sy
9000b490:	60fb      	str	r3, [r7, #12]
}
9000b492:	bf00      	nop
9000b494:	e7fe      	b.n	9000b494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
9000b496:	4b39      	ldr	r3, [pc, #228]	; (9000b57c <xPortStartScheduler+0x12c>)
9000b498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000b49a:	697b      	ldr	r3, [r7, #20]
9000b49c:	781b      	ldrb	r3, [r3, #0]
9000b49e:	b2db      	uxtb	r3, r3
9000b4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000b4a2:	697b      	ldr	r3, [r7, #20]
9000b4a4:	22ff      	movs	r2, #255	; 0xff
9000b4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000b4a8:	697b      	ldr	r3, [r7, #20]
9000b4aa:	781b      	ldrb	r3, [r3, #0]
9000b4ac:	b2db      	uxtb	r3, r3
9000b4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000b4b0:	78fb      	ldrb	r3, [r7, #3]
9000b4b2:	b2db      	uxtb	r3, r3
9000b4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
9000b4b8:	b2da      	uxtb	r2, r3
9000b4ba:	4b31      	ldr	r3, [pc, #196]	; (9000b580 <xPortStartScheduler+0x130>)
9000b4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000b4be:	4b31      	ldr	r3, [pc, #196]	; (9000b584 <xPortStartScheduler+0x134>)
9000b4c0:	2207      	movs	r2, #7
9000b4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000b4c4:	e009      	b.n	9000b4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
9000b4c6:	4b2f      	ldr	r3, [pc, #188]	; (9000b584 <xPortStartScheduler+0x134>)
9000b4c8:	681b      	ldr	r3, [r3, #0]
9000b4ca:	3b01      	subs	r3, #1
9000b4cc:	4a2d      	ldr	r2, [pc, #180]	; (9000b584 <xPortStartScheduler+0x134>)
9000b4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000b4d0:	78fb      	ldrb	r3, [r7, #3]
9000b4d2:	b2db      	uxtb	r3, r3
9000b4d4:	005b      	lsls	r3, r3, #1
9000b4d6:	b2db      	uxtb	r3, r3
9000b4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000b4da:	78fb      	ldrb	r3, [r7, #3]
9000b4dc:	b2db      	uxtb	r3, r3
9000b4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000b4e2:	2b80      	cmp	r3, #128	; 0x80
9000b4e4:	d0ef      	beq.n	9000b4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000b4e6:	4b27      	ldr	r3, [pc, #156]	; (9000b584 <xPortStartScheduler+0x134>)
9000b4e8:	681b      	ldr	r3, [r3, #0]
9000b4ea:	f1c3 0307 	rsb	r3, r3, #7
9000b4ee:	2b04      	cmp	r3, #4
9000b4f0:	d00a      	beq.n	9000b508 <xPortStartScheduler+0xb8>
	__asm volatile
9000b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b4f6:	f383 8811 	msr	BASEPRI, r3
9000b4fa:	f3bf 8f6f 	isb	sy
9000b4fe:	f3bf 8f4f 	dsb	sy
9000b502:	60bb      	str	r3, [r7, #8]
}
9000b504:	bf00      	nop
9000b506:	e7fe      	b.n	9000b506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
9000b508:	4b1e      	ldr	r3, [pc, #120]	; (9000b584 <xPortStartScheduler+0x134>)
9000b50a:	681b      	ldr	r3, [r3, #0]
9000b50c:	021b      	lsls	r3, r3, #8
9000b50e:	4a1d      	ldr	r2, [pc, #116]	; (9000b584 <xPortStartScheduler+0x134>)
9000b510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000b512:	4b1c      	ldr	r3, [pc, #112]	; (9000b584 <xPortStartScheduler+0x134>)
9000b514:	681b      	ldr	r3, [r3, #0]
9000b516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000b51a:	4a1a      	ldr	r2, [pc, #104]	; (9000b584 <xPortStartScheduler+0x134>)
9000b51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000b51e:	687b      	ldr	r3, [r7, #4]
9000b520:	b2da      	uxtb	r2, r3
9000b522:	697b      	ldr	r3, [r7, #20]
9000b524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000b526:	4b18      	ldr	r3, [pc, #96]	; (9000b588 <xPortStartScheduler+0x138>)
9000b528:	681b      	ldr	r3, [r3, #0]
9000b52a:	4a17      	ldr	r2, [pc, #92]	; (9000b588 <xPortStartScheduler+0x138>)
9000b52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000b530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000b532:	4b15      	ldr	r3, [pc, #84]	; (9000b588 <xPortStartScheduler+0x138>)
9000b534:	681b      	ldr	r3, [r3, #0]
9000b536:	4a14      	ldr	r2, [pc, #80]	; (9000b588 <xPortStartScheduler+0x138>)
9000b538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000b53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
9000b53e:	f000 f8dd 	bl	9000b6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
9000b542:	4b12      	ldr	r3, [pc, #72]	; (9000b58c <xPortStartScheduler+0x13c>)
9000b544:	2200      	movs	r2, #0
9000b546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
9000b548:	f000 f8fc 	bl	9000b744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000b54c:	4b10      	ldr	r3, [pc, #64]	; (9000b590 <xPortStartScheduler+0x140>)
9000b54e:	681b      	ldr	r3, [r3, #0]
9000b550:	4a0f      	ldr	r2, [pc, #60]	; (9000b590 <xPortStartScheduler+0x140>)
9000b552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000b556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
9000b558:	f7ff ff66 	bl	9000b428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
9000b55c:	f7fe ff4a 	bl	9000a3f4 <vTaskSwitchContext>
	prvTaskExitError();
9000b560:	f7ff ff1e 	bl	9000b3a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
9000b564:	2300      	movs	r3, #0
}
9000b566:	4618      	mov	r0, r3
9000b568:	3718      	adds	r7, #24
9000b56a:	46bd      	mov	sp, r7
9000b56c:	bd80      	pop	{r7, pc}
9000b56e:	bf00      	nop
9000b570:	e000ed00 	.word	0xe000ed00
9000b574:	410fc271 	.word	0x410fc271
9000b578:	410fc270 	.word	0x410fc270
9000b57c:	e000e400 	.word	0xe000e400
9000b580:	24001410 	.word	0x24001410
9000b584:	24001414 	.word	0x24001414
9000b588:	e000ed20 	.word	0xe000ed20
9000b58c:	24000010 	.word	0x24000010
9000b590:	e000ef34 	.word	0xe000ef34

9000b594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
9000b594:	b480      	push	{r7}
9000b596:	b083      	sub	sp, #12
9000b598:	af00      	add	r7, sp, #0
	__asm volatile
9000b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b59e:	f383 8811 	msr	BASEPRI, r3
9000b5a2:	f3bf 8f6f 	isb	sy
9000b5a6:	f3bf 8f4f 	dsb	sy
9000b5aa:	607b      	str	r3, [r7, #4]
}
9000b5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
9000b5ae:	4b0f      	ldr	r3, [pc, #60]	; (9000b5ec <vPortEnterCritical+0x58>)
9000b5b0:	681b      	ldr	r3, [r3, #0]
9000b5b2:	3301      	adds	r3, #1
9000b5b4:	4a0d      	ldr	r2, [pc, #52]	; (9000b5ec <vPortEnterCritical+0x58>)
9000b5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
9000b5b8:	4b0c      	ldr	r3, [pc, #48]	; (9000b5ec <vPortEnterCritical+0x58>)
9000b5ba:	681b      	ldr	r3, [r3, #0]
9000b5bc:	2b01      	cmp	r3, #1
9000b5be:	d10f      	bne.n	9000b5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000b5c0:	4b0b      	ldr	r3, [pc, #44]	; (9000b5f0 <vPortEnterCritical+0x5c>)
9000b5c2:	681b      	ldr	r3, [r3, #0]
9000b5c4:	b2db      	uxtb	r3, r3
9000b5c6:	2b00      	cmp	r3, #0
9000b5c8:	d00a      	beq.n	9000b5e0 <vPortEnterCritical+0x4c>
	__asm volatile
9000b5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b5ce:	f383 8811 	msr	BASEPRI, r3
9000b5d2:	f3bf 8f6f 	isb	sy
9000b5d6:	f3bf 8f4f 	dsb	sy
9000b5da:	603b      	str	r3, [r7, #0]
}
9000b5dc:	bf00      	nop
9000b5de:	e7fe      	b.n	9000b5de <vPortEnterCritical+0x4a>
	}
}
9000b5e0:	bf00      	nop
9000b5e2:	370c      	adds	r7, #12
9000b5e4:	46bd      	mov	sp, r7
9000b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b5ea:	4770      	bx	lr
9000b5ec:	24000010 	.word	0x24000010
9000b5f0:	e000ed04 	.word	0xe000ed04

9000b5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
9000b5f4:	b480      	push	{r7}
9000b5f6:	b083      	sub	sp, #12
9000b5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
9000b5fa:	4b12      	ldr	r3, [pc, #72]	; (9000b644 <vPortExitCritical+0x50>)
9000b5fc:	681b      	ldr	r3, [r3, #0]
9000b5fe:	2b00      	cmp	r3, #0
9000b600:	d10a      	bne.n	9000b618 <vPortExitCritical+0x24>
	__asm volatile
9000b602:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b606:	f383 8811 	msr	BASEPRI, r3
9000b60a:	f3bf 8f6f 	isb	sy
9000b60e:	f3bf 8f4f 	dsb	sy
9000b612:	607b      	str	r3, [r7, #4]
}
9000b614:	bf00      	nop
9000b616:	e7fe      	b.n	9000b616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
9000b618:	4b0a      	ldr	r3, [pc, #40]	; (9000b644 <vPortExitCritical+0x50>)
9000b61a:	681b      	ldr	r3, [r3, #0]
9000b61c:	3b01      	subs	r3, #1
9000b61e:	4a09      	ldr	r2, [pc, #36]	; (9000b644 <vPortExitCritical+0x50>)
9000b620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000b622:	4b08      	ldr	r3, [pc, #32]	; (9000b644 <vPortExitCritical+0x50>)
9000b624:	681b      	ldr	r3, [r3, #0]
9000b626:	2b00      	cmp	r3, #0
9000b628:	d105      	bne.n	9000b636 <vPortExitCritical+0x42>
9000b62a:	2300      	movs	r3, #0
9000b62c:	603b      	str	r3, [r7, #0]
	__asm volatile
9000b62e:	683b      	ldr	r3, [r7, #0]
9000b630:	f383 8811 	msr	BASEPRI, r3
}
9000b634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
9000b636:	bf00      	nop
9000b638:	370c      	adds	r7, #12
9000b63a:	46bd      	mov	sp, r7
9000b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b640:	4770      	bx	lr
9000b642:	bf00      	nop
9000b644:	24000010 	.word	0x24000010
	...

9000b650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
9000b650:	f3ef 8009 	mrs	r0, PSP
9000b654:	f3bf 8f6f 	isb	sy
9000b658:	4b15      	ldr	r3, [pc, #84]	; (9000b6b0 <pxCurrentTCBConst>)
9000b65a:	681a      	ldr	r2, [r3, #0]
9000b65c:	f01e 0f10 	tst.w	lr, #16
9000b660:	bf08      	it	eq
9000b662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000b666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000b66a:	6010      	str	r0, [r2, #0]
9000b66c:	e92d 0009 	stmdb	sp!, {r0, r3}
9000b670:	f04f 0050 	mov.w	r0, #80	; 0x50
9000b674:	f380 8811 	msr	BASEPRI, r0
9000b678:	f3bf 8f4f 	dsb	sy
9000b67c:	f3bf 8f6f 	isb	sy
9000b680:	f7fe feb8 	bl	9000a3f4 <vTaskSwitchContext>
9000b684:	f04f 0000 	mov.w	r0, #0
9000b688:	f380 8811 	msr	BASEPRI, r0
9000b68c:	bc09      	pop	{r0, r3}
9000b68e:	6819      	ldr	r1, [r3, #0]
9000b690:	6808      	ldr	r0, [r1, #0]
9000b692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000b696:	f01e 0f10 	tst.w	lr, #16
9000b69a:	bf08      	it	eq
9000b69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000b6a0:	f380 8809 	msr	PSP, r0
9000b6a4:	f3bf 8f6f 	isb	sy
9000b6a8:	4770      	bx	lr
9000b6aa:	bf00      	nop
9000b6ac:	f3af 8000 	nop.w

9000b6b0 <pxCurrentTCBConst>:
9000b6b0:	24000de4 	.word	0x24000de4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
9000b6b4:	bf00      	nop
9000b6b6:	bf00      	nop

9000b6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
9000b6b8:	b580      	push	{r7, lr}
9000b6ba:	b082      	sub	sp, #8
9000b6bc:	af00      	add	r7, sp, #0
	__asm volatile
9000b6be:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b6c2:	f383 8811 	msr	BASEPRI, r3
9000b6c6:	f3bf 8f6f 	isb	sy
9000b6ca:	f3bf 8f4f 	dsb	sy
9000b6ce:	607b      	str	r3, [r7, #4]
}
9000b6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
9000b6d2:	f7fe fdd5 	bl	9000a280 <xTaskIncrementTick>
9000b6d6:	4603      	mov	r3, r0
9000b6d8:	2b00      	cmp	r3, #0
9000b6da:	d003      	beq.n	9000b6e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000b6dc:	4b06      	ldr	r3, [pc, #24]	; (9000b6f8 <xPortSysTickHandler+0x40>)
9000b6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000b6e2:	601a      	str	r2, [r3, #0]
9000b6e4:	2300      	movs	r3, #0
9000b6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
9000b6e8:	683b      	ldr	r3, [r7, #0]
9000b6ea:	f383 8811 	msr	BASEPRI, r3
}
9000b6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
9000b6f0:	bf00      	nop
9000b6f2:	3708      	adds	r7, #8
9000b6f4:	46bd      	mov	sp, r7
9000b6f6:	bd80      	pop	{r7, pc}
9000b6f8:	e000ed04 	.word	0xe000ed04

9000b6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
9000b6fc:	b480      	push	{r7}
9000b6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000b700:	4b0b      	ldr	r3, [pc, #44]	; (9000b730 <vPortSetupTimerInterrupt+0x34>)
9000b702:	2200      	movs	r2, #0
9000b704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000b706:	4b0b      	ldr	r3, [pc, #44]	; (9000b734 <vPortSetupTimerInterrupt+0x38>)
9000b708:	2200      	movs	r2, #0
9000b70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000b70c:	4b0a      	ldr	r3, [pc, #40]	; (9000b738 <vPortSetupTimerInterrupt+0x3c>)
9000b70e:	681b      	ldr	r3, [r3, #0]
9000b710:	4a0a      	ldr	r2, [pc, #40]	; (9000b73c <vPortSetupTimerInterrupt+0x40>)
9000b712:	fba2 2303 	umull	r2, r3, r2, r3
9000b716:	099b      	lsrs	r3, r3, #6
9000b718:	4a09      	ldr	r2, [pc, #36]	; (9000b740 <vPortSetupTimerInterrupt+0x44>)
9000b71a:	3b01      	subs	r3, #1
9000b71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000b71e:	4b04      	ldr	r3, [pc, #16]	; (9000b730 <vPortSetupTimerInterrupt+0x34>)
9000b720:	2207      	movs	r2, #7
9000b722:	601a      	str	r2, [r3, #0]
}
9000b724:	bf00      	nop
9000b726:	46bd      	mov	sp, r7
9000b728:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b72c:	4770      	bx	lr
9000b72e:	bf00      	nop
9000b730:	e000e010 	.word	0xe000e010
9000b734:	e000e018 	.word	0xe000e018
9000b738:	24000000 	.word	0x24000000
9000b73c:	10624dd3 	.word	0x10624dd3
9000b740:	e000e014 	.word	0xe000e014

9000b744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000b744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000b754 <vPortEnableVFP+0x10>
9000b748:	6801      	ldr	r1, [r0, #0]
9000b74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000b74e:	6001      	str	r1, [r0, #0]
9000b750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000b752:	bf00      	nop
9000b754:	e000ed88 	.word	0xe000ed88

9000b758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
9000b758:	b480      	push	{r7}
9000b75a:	b085      	sub	sp, #20
9000b75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000b75e:	f3ef 8305 	mrs	r3, IPSR
9000b762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000b764:	68fb      	ldr	r3, [r7, #12]
9000b766:	2b0f      	cmp	r3, #15
9000b768:	d914      	bls.n	9000b794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000b76a:	4a17      	ldr	r2, [pc, #92]	; (9000b7c8 <vPortValidateInterruptPriority+0x70>)
9000b76c:	68fb      	ldr	r3, [r7, #12]
9000b76e:	4413      	add	r3, r2
9000b770:	781b      	ldrb	r3, [r3, #0]
9000b772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000b774:	4b15      	ldr	r3, [pc, #84]	; (9000b7cc <vPortValidateInterruptPriority+0x74>)
9000b776:	781b      	ldrb	r3, [r3, #0]
9000b778:	7afa      	ldrb	r2, [r7, #11]
9000b77a:	429a      	cmp	r2, r3
9000b77c:	d20a      	bcs.n	9000b794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
9000b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b782:	f383 8811 	msr	BASEPRI, r3
9000b786:	f3bf 8f6f 	isb	sy
9000b78a:	f3bf 8f4f 	dsb	sy
9000b78e:	607b      	str	r3, [r7, #4]
}
9000b790:	bf00      	nop
9000b792:	e7fe      	b.n	9000b792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000b794:	4b0e      	ldr	r3, [pc, #56]	; (9000b7d0 <vPortValidateInterruptPriority+0x78>)
9000b796:	681b      	ldr	r3, [r3, #0]
9000b798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
9000b79c:	4b0d      	ldr	r3, [pc, #52]	; (9000b7d4 <vPortValidateInterruptPriority+0x7c>)
9000b79e:	681b      	ldr	r3, [r3, #0]
9000b7a0:	429a      	cmp	r2, r3
9000b7a2:	d90a      	bls.n	9000b7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
9000b7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b7a8:	f383 8811 	msr	BASEPRI, r3
9000b7ac:	f3bf 8f6f 	isb	sy
9000b7b0:	f3bf 8f4f 	dsb	sy
9000b7b4:	603b      	str	r3, [r7, #0]
}
9000b7b6:	bf00      	nop
9000b7b8:	e7fe      	b.n	9000b7b8 <vPortValidateInterruptPriority+0x60>
	}
9000b7ba:	bf00      	nop
9000b7bc:	3714      	adds	r7, #20
9000b7be:	46bd      	mov	sp, r7
9000b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b7c4:	4770      	bx	lr
9000b7c6:	bf00      	nop
9000b7c8:	e000e3f0 	.word	0xe000e3f0
9000b7cc:	24001410 	.word	0x24001410
9000b7d0:	e000ed0c 	.word	0xe000ed0c
9000b7d4:	24001414 	.word	0x24001414

9000b7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000b7d8:	b580      	push	{r7, lr}
9000b7da:	b08a      	sub	sp, #40	; 0x28
9000b7dc:	af00      	add	r7, sp, #0
9000b7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
9000b7e0:	2300      	movs	r3, #0
9000b7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
9000b7e4:	f7fe fc90 	bl	9000a108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000b7e8:	4b5b      	ldr	r3, [pc, #364]	; (9000b958 <pvPortMalloc+0x180>)
9000b7ea:	681b      	ldr	r3, [r3, #0]
9000b7ec:	2b00      	cmp	r3, #0
9000b7ee:	d101      	bne.n	9000b7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
9000b7f0:	f000 f920 	bl	9000ba34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000b7f4:	4b59      	ldr	r3, [pc, #356]	; (9000b95c <pvPortMalloc+0x184>)
9000b7f6:	681a      	ldr	r2, [r3, #0]
9000b7f8:	687b      	ldr	r3, [r7, #4]
9000b7fa:	4013      	ands	r3, r2
9000b7fc:	2b00      	cmp	r3, #0
9000b7fe:	f040 8093 	bne.w	9000b928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000b802:	687b      	ldr	r3, [r7, #4]
9000b804:	2b00      	cmp	r3, #0
9000b806:	d01d      	beq.n	9000b844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
9000b808:	2208      	movs	r2, #8
9000b80a:	687b      	ldr	r3, [r7, #4]
9000b80c:	4413      	add	r3, r2
9000b80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000b810:	687b      	ldr	r3, [r7, #4]
9000b812:	f003 0307 	and.w	r3, r3, #7
9000b816:	2b00      	cmp	r3, #0
9000b818:	d014      	beq.n	9000b844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000b81a:	687b      	ldr	r3, [r7, #4]
9000b81c:	f023 0307 	bic.w	r3, r3, #7
9000b820:	3308      	adds	r3, #8
9000b822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
9000b824:	687b      	ldr	r3, [r7, #4]
9000b826:	f003 0307 	and.w	r3, r3, #7
9000b82a:	2b00      	cmp	r3, #0
9000b82c:	d00a      	beq.n	9000b844 <pvPortMalloc+0x6c>
	__asm volatile
9000b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b832:	f383 8811 	msr	BASEPRI, r3
9000b836:	f3bf 8f6f 	isb	sy
9000b83a:	f3bf 8f4f 	dsb	sy
9000b83e:	617b      	str	r3, [r7, #20]
}
9000b840:	bf00      	nop
9000b842:	e7fe      	b.n	9000b842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000b844:	687b      	ldr	r3, [r7, #4]
9000b846:	2b00      	cmp	r3, #0
9000b848:	d06e      	beq.n	9000b928 <pvPortMalloc+0x150>
9000b84a:	4b45      	ldr	r3, [pc, #276]	; (9000b960 <pvPortMalloc+0x188>)
9000b84c:	681b      	ldr	r3, [r3, #0]
9000b84e:	687a      	ldr	r2, [r7, #4]
9000b850:	429a      	cmp	r2, r3
9000b852:	d869      	bhi.n	9000b928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
9000b854:	4b43      	ldr	r3, [pc, #268]	; (9000b964 <pvPortMalloc+0x18c>)
9000b856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
9000b858:	4b42      	ldr	r3, [pc, #264]	; (9000b964 <pvPortMalloc+0x18c>)
9000b85a:	681b      	ldr	r3, [r3, #0]
9000b85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000b85e:	e004      	b.n	9000b86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
9000b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
9000b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b866:	681b      	ldr	r3, [r3, #0]
9000b868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b86c:	685b      	ldr	r3, [r3, #4]
9000b86e:	687a      	ldr	r2, [r7, #4]
9000b870:	429a      	cmp	r2, r3
9000b872:	d903      	bls.n	9000b87c <pvPortMalloc+0xa4>
9000b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b876:	681b      	ldr	r3, [r3, #0]
9000b878:	2b00      	cmp	r3, #0
9000b87a:	d1f1      	bne.n	9000b860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000b87c:	4b36      	ldr	r3, [pc, #216]	; (9000b958 <pvPortMalloc+0x180>)
9000b87e:	681b      	ldr	r3, [r3, #0]
9000b880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000b882:	429a      	cmp	r2, r3
9000b884:	d050      	beq.n	9000b928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000b886:	6a3b      	ldr	r3, [r7, #32]
9000b888:	681b      	ldr	r3, [r3, #0]
9000b88a:	2208      	movs	r2, #8
9000b88c:	4413      	add	r3, r2
9000b88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b892:	681a      	ldr	r2, [r3, #0]
9000b894:	6a3b      	ldr	r3, [r7, #32]
9000b896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b89a:	685a      	ldr	r2, [r3, #4]
9000b89c:	687b      	ldr	r3, [r7, #4]
9000b89e:	1ad2      	subs	r2, r2, r3
9000b8a0:	2308      	movs	r3, #8
9000b8a2:	005b      	lsls	r3, r3, #1
9000b8a4:	429a      	cmp	r2, r3
9000b8a6:	d91f      	bls.n	9000b8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000b8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000b8aa:	687b      	ldr	r3, [r7, #4]
9000b8ac:	4413      	add	r3, r2
9000b8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000b8b0:	69bb      	ldr	r3, [r7, #24]
9000b8b2:	f003 0307 	and.w	r3, r3, #7
9000b8b6:	2b00      	cmp	r3, #0
9000b8b8:	d00a      	beq.n	9000b8d0 <pvPortMalloc+0xf8>
	__asm volatile
9000b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b8be:	f383 8811 	msr	BASEPRI, r3
9000b8c2:	f3bf 8f6f 	isb	sy
9000b8c6:	f3bf 8f4f 	dsb	sy
9000b8ca:	613b      	str	r3, [r7, #16]
}
9000b8cc:	bf00      	nop
9000b8ce:	e7fe      	b.n	9000b8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b8d2:	685a      	ldr	r2, [r3, #4]
9000b8d4:	687b      	ldr	r3, [r7, #4]
9000b8d6:	1ad2      	subs	r2, r2, r3
9000b8d8:	69bb      	ldr	r3, [r7, #24]
9000b8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
9000b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b8de:	687a      	ldr	r2, [r7, #4]
9000b8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
9000b8e2:	69b8      	ldr	r0, [r7, #24]
9000b8e4:	f000 f908 	bl	9000baf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000b8e8:	4b1d      	ldr	r3, [pc, #116]	; (9000b960 <pvPortMalloc+0x188>)
9000b8ea:	681a      	ldr	r2, [r3, #0]
9000b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b8ee:	685b      	ldr	r3, [r3, #4]
9000b8f0:	1ad3      	subs	r3, r2, r3
9000b8f2:	4a1b      	ldr	r2, [pc, #108]	; (9000b960 <pvPortMalloc+0x188>)
9000b8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000b8f6:	4b1a      	ldr	r3, [pc, #104]	; (9000b960 <pvPortMalloc+0x188>)
9000b8f8:	681a      	ldr	r2, [r3, #0]
9000b8fa:	4b1b      	ldr	r3, [pc, #108]	; (9000b968 <pvPortMalloc+0x190>)
9000b8fc:	681b      	ldr	r3, [r3, #0]
9000b8fe:	429a      	cmp	r2, r3
9000b900:	d203      	bcs.n	9000b90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000b902:	4b17      	ldr	r3, [pc, #92]	; (9000b960 <pvPortMalloc+0x188>)
9000b904:	681b      	ldr	r3, [r3, #0]
9000b906:	4a18      	ldr	r2, [pc, #96]	; (9000b968 <pvPortMalloc+0x190>)
9000b908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b90c:	685a      	ldr	r2, [r3, #4]
9000b90e:	4b13      	ldr	r3, [pc, #76]	; (9000b95c <pvPortMalloc+0x184>)
9000b910:	681b      	ldr	r3, [r3, #0]
9000b912:	431a      	orrs	r2, r3
9000b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
9000b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b91a:	2200      	movs	r2, #0
9000b91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
9000b91e:	4b13      	ldr	r3, [pc, #76]	; (9000b96c <pvPortMalloc+0x194>)
9000b920:	681b      	ldr	r3, [r3, #0]
9000b922:	3301      	adds	r3, #1
9000b924:	4a11      	ldr	r2, [pc, #68]	; (9000b96c <pvPortMalloc+0x194>)
9000b926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000b928:	f7fe fbfc 	bl	9000a124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000b92c:	69fb      	ldr	r3, [r7, #28]
9000b92e:	f003 0307 	and.w	r3, r3, #7
9000b932:	2b00      	cmp	r3, #0
9000b934:	d00a      	beq.n	9000b94c <pvPortMalloc+0x174>
	__asm volatile
9000b936:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b93a:	f383 8811 	msr	BASEPRI, r3
9000b93e:	f3bf 8f6f 	isb	sy
9000b942:	f3bf 8f4f 	dsb	sy
9000b946:	60fb      	str	r3, [r7, #12]
}
9000b948:	bf00      	nop
9000b94a:	e7fe      	b.n	9000b94a <pvPortMalloc+0x172>
	return pvReturn;
9000b94c:	69fb      	ldr	r3, [r7, #28]
}
9000b94e:	4618      	mov	r0, r3
9000b950:	3728      	adds	r7, #40	; 0x28
9000b952:	46bd      	mov	sp, r7
9000b954:	bd80      	pop	{r7, pc}
9000b956:	bf00      	nop
9000b958:	24010420 	.word	0x24010420
9000b95c:	24010434 	.word	0x24010434
9000b960:	24010424 	.word	0x24010424
9000b964:	24010418 	.word	0x24010418
9000b968:	24010428 	.word	0x24010428
9000b96c:	2401042c 	.word	0x2401042c

9000b970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
9000b970:	b580      	push	{r7, lr}
9000b972:	b086      	sub	sp, #24
9000b974:	af00      	add	r7, sp, #0
9000b976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
9000b978:	687b      	ldr	r3, [r7, #4]
9000b97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
9000b97c:	687b      	ldr	r3, [r7, #4]
9000b97e:	2b00      	cmp	r3, #0
9000b980:	d04d      	beq.n	9000ba1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
9000b982:	2308      	movs	r3, #8
9000b984:	425b      	negs	r3, r3
9000b986:	697a      	ldr	r2, [r7, #20]
9000b988:	4413      	add	r3, r2
9000b98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
9000b98c:	697b      	ldr	r3, [r7, #20]
9000b98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000b990:	693b      	ldr	r3, [r7, #16]
9000b992:	685a      	ldr	r2, [r3, #4]
9000b994:	4b24      	ldr	r3, [pc, #144]	; (9000ba28 <vPortFree+0xb8>)
9000b996:	681b      	ldr	r3, [r3, #0]
9000b998:	4013      	ands	r3, r2
9000b99a:	2b00      	cmp	r3, #0
9000b99c:	d10a      	bne.n	9000b9b4 <vPortFree+0x44>
	__asm volatile
9000b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b9a2:	f383 8811 	msr	BASEPRI, r3
9000b9a6:	f3bf 8f6f 	isb	sy
9000b9aa:	f3bf 8f4f 	dsb	sy
9000b9ae:	60fb      	str	r3, [r7, #12]
}
9000b9b0:	bf00      	nop
9000b9b2:	e7fe      	b.n	9000b9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000b9b4:	693b      	ldr	r3, [r7, #16]
9000b9b6:	681b      	ldr	r3, [r3, #0]
9000b9b8:	2b00      	cmp	r3, #0
9000b9ba:	d00a      	beq.n	9000b9d2 <vPortFree+0x62>
	__asm volatile
9000b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000b9c0:	f383 8811 	msr	BASEPRI, r3
9000b9c4:	f3bf 8f6f 	isb	sy
9000b9c8:	f3bf 8f4f 	dsb	sy
9000b9cc:	60bb      	str	r3, [r7, #8]
}
9000b9ce:	bf00      	nop
9000b9d0:	e7fe      	b.n	9000b9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
9000b9d2:	693b      	ldr	r3, [r7, #16]
9000b9d4:	685a      	ldr	r2, [r3, #4]
9000b9d6:	4b14      	ldr	r3, [pc, #80]	; (9000ba28 <vPortFree+0xb8>)
9000b9d8:	681b      	ldr	r3, [r3, #0]
9000b9da:	4013      	ands	r3, r2
9000b9dc:	2b00      	cmp	r3, #0
9000b9de:	d01e      	beq.n	9000ba1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
9000b9e0:	693b      	ldr	r3, [r7, #16]
9000b9e2:	681b      	ldr	r3, [r3, #0]
9000b9e4:	2b00      	cmp	r3, #0
9000b9e6:	d11a      	bne.n	9000ba1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000b9e8:	693b      	ldr	r3, [r7, #16]
9000b9ea:	685a      	ldr	r2, [r3, #4]
9000b9ec:	4b0e      	ldr	r3, [pc, #56]	; (9000ba28 <vPortFree+0xb8>)
9000b9ee:	681b      	ldr	r3, [r3, #0]
9000b9f0:	43db      	mvns	r3, r3
9000b9f2:	401a      	ands	r2, r3
9000b9f4:	693b      	ldr	r3, [r7, #16]
9000b9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
9000b9f8:	f7fe fb86 	bl	9000a108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
9000b9fc:	693b      	ldr	r3, [r7, #16]
9000b9fe:	685a      	ldr	r2, [r3, #4]
9000ba00:	4b0a      	ldr	r3, [pc, #40]	; (9000ba2c <vPortFree+0xbc>)
9000ba02:	681b      	ldr	r3, [r3, #0]
9000ba04:	4413      	add	r3, r2
9000ba06:	4a09      	ldr	r2, [pc, #36]	; (9000ba2c <vPortFree+0xbc>)
9000ba08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
9000ba0a:	6938      	ldr	r0, [r7, #16]
9000ba0c:	f000 f874 	bl	9000baf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
9000ba10:	4b07      	ldr	r3, [pc, #28]	; (9000ba30 <vPortFree+0xc0>)
9000ba12:	681b      	ldr	r3, [r3, #0]
9000ba14:	3301      	adds	r3, #1
9000ba16:	4a06      	ldr	r2, [pc, #24]	; (9000ba30 <vPortFree+0xc0>)
9000ba18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
9000ba1a:	f7fe fb83 	bl	9000a124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
9000ba1e:	bf00      	nop
9000ba20:	3718      	adds	r7, #24
9000ba22:	46bd      	mov	sp, r7
9000ba24:	bd80      	pop	{r7, pc}
9000ba26:	bf00      	nop
9000ba28:	24010434 	.word	0x24010434
9000ba2c:	24010424 	.word	0x24010424
9000ba30:	24010430 	.word	0x24010430

9000ba34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
9000ba34:	b480      	push	{r7}
9000ba36:	b085      	sub	sp, #20
9000ba38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
9000ba3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
9000ba3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
9000ba40:	4b27      	ldr	r3, [pc, #156]	; (9000bae0 <prvHeapInit+0xac>)
9000ba42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000ba44:	68fb      	ldr	r3, [r7, #12]
9000ba46:	f003 0307 	and.w	r3, r3, #7
9000ba4a:	2b00      	cmp	r3, #0
9000ba4c:	d00c      	beq.n	9000ba68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000ba4e:	68fb      	ldr	r3, [r7, #12]
9000ba50:	3307      	adds	r3, #7
9000ba52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000ba54:	68fb      	ldr	r3, [r7, #12]
9000ba56:	f023 0307 	bic.w	r3, r3, #7
9000ba5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000ba5c:	68ba      	ldr	r2, [r7, #8]
9000ba5e:	68fb      	ldr	r3, [r7, #12]
9000ba60:	1ad3      	subs	r3, r2, r3
9000ba62:	4a1f      	ldr	r2, [pc, #124]	; (9000bae0 <prvHeapInit+0xac>)
9000ba64:	4413      	add	r3, r2
9000ba66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000ba68:	68fb      	ldr	r3, [r7, #12]
9000ba6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000ba6c:	4a1d      	ldr	r2, [pc, #116]	; (9000bae4 <prvHeapInit+0xb0>)
9000ba6e:	687b      	ldr	r3, [r7, #4]
9000ba70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000ba72:	4b1c      	ldr	r3, [pc, #112]	; (9000bae4 <prvHeapInit+0xb0>)
9000ba74:	2200      	movs	r2, #0
9000ba76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
9000ba78:	687b      	ldr	r3, [r7, #4]
9000ba7a:	68ba      	ldr	r2, [r7, #8]
9000ba7c:	4413      	add	r3, r2
9000ba7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
9000ba80:	2208      	movs	r2, #8
9000ba82:	68fb      	ldr	r3, [r7, #12]
9000ba84:	1a9b      	subs	r3, r3, r2
9000ba86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000ba88:	68fb      	ldr	r3, [r7, #12]
9000ba8a:	f023 0307 	bic.w	r3, r3, #7
9000ba8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
9000ba90:	68fb      	ldr	r3, [r7, #12]
9000ba92:	4a15      	ldr	r2, [pc, #84]	; (9000bae8 <prvHeapInit+0xb4>)
9000ba94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
9000ba96:	4b14      	ldr	r3, [pc, #80]	; (9000bae8 <prvHeapInit+0xb4>)
9000ba98:	681b      	ldr	r3, [r3, #0]
9000ba9a:	2200      	movs	r2, #0
9000ba9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
9000ba9e:	4b12      	ldr	r3, [pc, #72]	; (9000bae8 <prvHeapInit+0xb4>)
9000baa0:	681b      	ldr	r3, [r3, #0]
9000baa2:	2200      	movs	r2, #0
9000baa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
9000baa6:	687b      	ldr	r3, [r7, #4]
9000baa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000baaa:	683b      	ldr	r3, [r7, #0]
9000baac:	68fa      	ldr	r2, [r7, #12]
9000baae:	1ad2      	subs	r2, r2, r3
9000bab0:	683b      	ldr	r3, [r7, #0]
9000bab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000bab4:	4b0c      	ldr	r3, [pc, #48]	; (9000bae8 <prvHeapInit+0xb4>)
9000bab6:	681a      	ldr	r2, [r3, #0]
9000bab8:	683b      	ldr	r3, [r7, #0]
9000baba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000babc:	683b      	ldr	r3, [r7, #0]
9000babe:	685b      	ldr	r3, [r3, #4]
9000bac0:	4a0a      	ldr	r2, [pc, #40]	; (9000baec <prvHeapInit+0xb8>)
9000bac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000bac4:	683b      	ldr	r3, [r7, #0]
9000bac6:	685b      	ldr	r3, [r3, #4]
9000bac8:	4a09      	ldr	r2, [pc, #36]	; (9000baf0 <prvHeapInit+0xbc>)
9000baca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000bacc:	4b09      	ldr	r3, [pc, #36]	; (9000baf4 <prvHeapInit+0xc0>)
9000bace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
9000bad2:	601a      	str	r2, [r3, #0]
}
9000bad4:	bf00      	nop
9000bad6:	3714      	adds	r7, #20
9000bad8:	46bd      	mov	sp, r7
9000bada:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bade:	4770      	bx	lr
9000bae0:	24001418 	.word	0x24001418
9000bae4:	24010418 	.word	0x24010418
9000bae8:	24010420 	.word	0x24010420
9000baec:	24010428 	.word	0x24010428
9000baf0:	24010424 	.word	0x24010424
9000baf4:	24010434 	.word	0x24010434

9000baf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
9000baf8:	b480      	push	{r7}
9000bafa:	b085      	sub	sp, #20
9000bafc:	af00      	add	r7, sp, #0
9000bafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000bb00:	4b28      	ldr	r3, [pc, #160]	; (9000bba4 <prvInsertBlockIntoFreeList+0xac>)
9000bb02:	60fb      	str	r3, [r7, #12]
9000bb04:	e002      	b.n	9000bb0c <prvInsertBlockIntoFreeList+0x14>
9000bb06:	68fb      	ldr	r3, [r7, #12]
9000bb08:	681b      	ldr	r3, [r3, #0]
9000bb0a:	60fb      	str	r3, [r7, #12]
9000bb0c:	68fb      	ldr	r3, [r7, #12]
9000bb0e:	681b      	ldr	r3, [r3, #0]
9000bb10:	687a      	ldr	r2, [r7, #4]
9000bb12:	429a      	cmp	r2, r3
9000bb14:	d8f7      	bhi.n	9000bb06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
9000bb16:	68fb      	ldr	r3, [r7, #12]
9000bb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000bb1a:	68fb      	ldr	r3, [r7, #12]
9000bb1c:	685b      	ldr	r3, [r3, #4]
9000bb1e:	68ba      	ldr	r2, [r7, #8]
9000bb20:	4413      	add	r3, r2
9000bb22:	687a      	ldr	r2, [r7, #4]
9000bb24:	429a      	cmp	r2, r3
9000bb26:	d108      	bne.n	9000bb3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000bb28:	68fb      	ldr	r3, [r7, #12]
9000bb2a:	685a      	ldr	r2, [r3, #4]
9000bb2c:	687b      	ldr	r3, [r7, #4]
9000bb2e:	685b      	ldr	r3, [r3, #4]
9000bb30:	441a      	add	r2, r3
9000bb32:	68fb      	ldr	r3, [r7, #12]
9000bb34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
9000bb36:	68fb      	ldr	r3, [r7, #12]
9000bb38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
9000bb3a:	687b      	ldr	r3, [r7, #4]
9000bb3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000bb3e:	687b      	ldr	r3, [r7, #4]
9000bb40:	685b      	ldr	r3, [r3, #4]
9000bb42:	68ba      	ldr	r2, [r7, #8]
9000bb44:	441a      	add	r2, r3
9000bb46:	68fb      	ldr	r3, [r7, #12]
9000bb48:	681b      	ldr	r3, [r3, #0]
9000bb4a:	429a      	cmp	r2, r3
9000bb4c:	d118      	bne.n	9000bb80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000bb4e:	68fb      	ldr	r3, [r7, #12]
9000bb50:	681a      	ldr	r2, [r3, #0]
9000bb52:	4b15      	ldr	r3, [pc, #84]	; (9000bba8 <prvInsertBlockIntoFreeList+0xb0>)
9000bb54:	681b      	ldr	r3, [r3, #0]
9000bb56:	429a      	cmp	r2, r3
9000bb58:	d00d      	beq.n	9000bb76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000bb5a:	687b      	ldr	r3, [r7, #4]
9000bb5c:	685a      	ldr	r2, [r3, #4]
9000bb5e:	68fb      	ldr	r3, [r7, #12]
9000bb60:	681b      	ldr	r3, [r3, #0]
9000bb62:	685b      	ldr	r3, [r3, #4]
9000bb64:	441a      	add	r2, r3
9000bb66:	687b      	ldr	r3, [r7, #4]
9000bb68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000bb6a:	68fb      	ldr	r3, [r7, #12]
9000bb6c:	681b      	ldr	r3, [r3, #0]
9000bb6e:	681a      	ldr	r2, [r3, #0]
9000bb70:	687b      	ldr	r3, [r7, #4]
9000bb72:	601a      	str	r2, [r3, #0]
9000bb74:	e008      	b.n	9000bb88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
9000bb76:	4b0c      	ldr	r3, [pc, #48]	; (9000bba8 <prvInsertBlockIntoFreeList+0xb0>)
9000bb78:	681a      	ldr	r2, [r3, #0]
9000bb7a:	687b      	ldr	r3, [r7, #4]
9000bb7c:	601a      	str	r2, [r3, #0]
9000bb7e:	e003      	b.n	9000bb88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9000bb80:	68fb      	ldr	r3, [r7, #12]
9000bb82:	681a      	ldr	r2, [r3, #0]
9000bb84:	687b      	ldr	r3, [r7, #4]
9000bb86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000bb88:	68fa      	ldr	r2, [r7, #12]
9000bb8a:	687b      	ldr	r3, [r7, #4]
9000bb8c:	429a      	cmp	r2, r3
9000bb8e:	d002      	beq.n	9000bb96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000bb90:	68fb      	ldr	r3, [r7, #12]
9000bb92:	687a      	ldr	r2, [r7, #4]
9000bb94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000bb96:	bf00      	nop
9000bb98:	3714      	adds	r7, #20
9000bb9a:	46bd      	mov	sp, r7
9000bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bba0:	4770      	bx	lr
9000bba2:	bf00      	nop
9000bba4:	24010418 	.word	0x24010418
9000bba8:	24010420 	.word	0x24010420

9000bbac <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
9000bbac:	b480      	push	{r7}
9000bbae:	b083      	sub	sp, #12
9000bbb0:	af00      	add	r7, sp, #0
9000bbb2:	6078      	str	r0, [r7, #4]
9000bbb4:	687b      	ldr	r3, [r7, #4]
9000bbb6:	2200      	movs	r2, #0
9000bbb8:	609a      	str	r2, [r3, #8]
9000bbba:	687b      	ldr	r3, [r7, #4]
9000bbbc:	4618      	mov	r0, r3
9000bbbe:	370c      	adds	r7, #12
9000bbc0:	46bd      	mov	sp, r7
9000bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bbc6:	4770      	bx	lr

9000bbc8 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
9000bbc8:	b580      	push	{r7, lr}
9000bbca:	b082      	sub	sp, #8
9000bbcc:	af00      	add	r7, sp, #0
9000bbce:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
9000bbd0:	687b      	ldr	r3, [r7, #4]
9000bbd2:	689b      	ldr	r3, [r3, #8]
9000bbd4:	2b00      	cmp	r3, #0
9000bbd6:	d005      	beq.n	9000bbe4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
9000bbd8:	687b      	ldr	r3, [r7, #4]
9000bbda:	689b      	ldr	r3, [r3, #8]
9000bbdc:	6878      	ldr	r0, [r7, #4]
9000bbde:	6879      	ldr	r1, [r7, #4]
9000bbe0:	2203      	movs	r2, #3
9000bbe2:	4798      	blx	r3
    }
9000bbe4:	687b      	ldr	r3, [r7, #4]
9000bbe6:	4618      	mov	r0, r3
9000bbe8:	3708      	adds	r7, #8
9000bbea:	46bd      	mov	sp, r7
9000bbec:	bd80      	pop	{r7, pc}

9000bbee <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
9000bbee:	b480      	push	{r7}
9000bbf0:	b083      	sub	sp, #12
9000bbf2:	af00      	add	r7, sp, #0
9000bbf4:	6078      	str	r0, [r7, #4]
9000bbf6:	687b      	ldr	r3, [r7, #4]
9000bbf8:	689b      	ldr	r3, [r3, #8]
9000bbfa:	2b00      	cmp	r3, #0
9000bbfc:	bf0c      	ite	eq
9000bbfe:	2301      	moveq	r3, #1
9000bc00:	2300      	movne	r3, #0
9000bc02:	b2db      	uxtb	r3, r3
9000bc04:	4618      	mov	r0, r3
9000bc06:	370c      	adds	r7, #12
9000bc08:	46bd      	mov	sp, r7
9000bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc0e:	4770      	bx	lr

9000bc10 <_ZN8IODriverD1Ev>:
#include <functional>


class IODriver {
public:
	virtual ~IODriver() {}
9000bc10:	b480      	push	{r7}
9000bc12:	b083      	sub	sp, #12
9000bc14:	af00      	add	r7, sp, #0
9000bc16:	6078      	str	r0, [r7, #4]
9000bc18:	4a04      	ldr	r2, [pc, #16]	; (9000bc2c <_ZN8IODriverD1Ev+0x1c>)
9000bc1a:	687b      	ldr	r3, [r7, #4]
9000bc1c:	601a      	str	r2, [r3, #0]
9000bc1e:	687b      	ldr	r3, [r7, #4]
9000bc20:	4618      	mov	r0, r3
9000bc22:	370c      	adds	r7, #12
9000bc24:	46bd      	mov	sp, r7
9000bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc2a:	4770      	bx	lr
9000bc2c:	900140b8 	.word	0x900140b8

9000bc30 <_ZN8IODriverD0Ev>:
9000bc30:	b580      	push	{r7, lr}
9000bc32:	b082      	sub	sp, #8
9000bc34:	af00      	add	r7, sp, #0
9000bc36:	6078      	str	r0, [r7, #4]
9000bc38:	6878      	ldr	r0, [r7, #4]
9000bc3a:	f7ff ffe9 	bl	9000bc10 <_ZN8IODriverD1Ev>
9000bc3e:	2104      	movs	r1, #4
9000bc40:	6878      	ldr	r0, [r7, #4]
9000bc42:	f004 fcb1 	bl	900105a8 <_ZdlPvj>
9000bc46:	687b      	ldr	r3, [r7, #4]
9000bc48:	4618      	mov	r0, r3
9000bc4a:	3708      	adds	r7, #8
9000bc4c:	46bd      	mov	sp, r7
9000bc4e:	bd80      	pop	{r7, pc}

9000bc50 <_ZN8IODriverC1Ev>:
class IODriver {
9000bc50:	b480      	push	{r7}
9000bc52:	b083      	sub	sp, #12
9000bc54:	af00      	add	r7, sp, #0
9000bc56:	6078      	str	r0, [r7, #4]
9000bc58:	4a04      	ldr	r2, [pc, #16]	; (9000bc6c <_ZN8IODriverC1Ev+0x1c>)
9000bc5a:	687b      	ldr	r3, [r7, #4]
9000bc5c:	601a      	str	r2, [r3, #0]
9000bc5e:	687b      	ldr	r3, [r7, #4]
9000bc60:	4618      	mov	r0, r3
9000bc62:	370c      	adds	r7, #12
9000bc64:	46bd      	mov	sp, r7
9000bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc6a:	4770      	bx	lr
9000bc6c:	900140b8 	.word	0x900140b8

9000bc70 <_ZNSt8functionIFvhPhmEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
9000bc70:	b580      	push	{r7, lr}
9000bc72:	b082      	sub	sp, #8
9000bc74:	af00      	add	r7, sp, #0
9000bc76:	6078      	str	r0, [r7, #4]
9000bc78:	687b      	ldr	r3, [r7, #4]
9000bc7a:	4618      	mov	r0, r3
9000bc7c:	f7ff ffa4 	bl	9000bbc8 <_ZNSt14_Function_baseD1Ev>
9000bc80:	687b      	ldr	r3, [r7, #4]
9000bc82:	4618      	mov	r0, r3
9000bc84:	3708      	adds	r7, #8
9000bc86:	46bd      	mov	sp, r7
9000bc88:	bd80      	pop	{r7, pc}

9000bc8a <_ZNSt8functionIFvhPhmEEaSERKS2_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
9000bc8a:	b580      	push	{r7, lr}
9000bc8c:	b086      	sub	sp, #24
9000bc8e:	af00      	add	r7, sp, #0
9000bc90:	6078      	str	r0, [r7, #4]
9000bc92:	6039      	str	r1, [r7, #0]
      {
	function(__x).swap(*this);
9000bc94:	f107 0308 	add.w	r3, r7, #8
9000bc98:	6839      	ldr	r1, [r7, #0]
9000bc9a:	4618      	mov	r0, r3
9000bc9c:	f000 f83e 	bl	9000bd1c <_ZNSt8functionIFvhPhmEEC1ERKS2_>
9000bca0:	f107 0308 	add.w	r3, r7, #8
9000bca4:	6879      	ldr	r1, [r7, #4]
9000bca6:	4618      	mov	r0, r3
9000bca8:	f000 f85a 	bl	9000bd60 <_ZNSt8functionIFvhPhmEE4swapERS2_>
9000bcac:	f107 0308 	add.w	r3, r7, #8
9000bcb0:	4618      	mov	r0, r3
9000bcb2:	f7ff ffdd 	bl	9000bc70 <_ZNSt8functionIFvhPhmEED1Ev>
	return *this;
9000bcb6:	687b      	ldr	r3, [r7, #4]
      }
9000bcb8:	4618      	mov	r0, r3
9000bcba:	3718      	adds	r7, #24
9000bcbc:	46bd      	mov	sp, r7
9000bcbe:	bd80      	pop	{r7, pc}

9000bcc0 <_ZNKSt8functionIFvhPhmEEclEhS0_m>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
9000bcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000bcc4:	b084      	sub	sp, #16
9000bcc6:	af00      	add	r7, sp, #0
9000bcc8:	60f8      	str	r0, [r7, #12]
9000bcca:	607a      	str	r2, [r7, #4]
9000bccc:	603b      	str	r3, [r7, #0]
9000bcce:	460b      	mov	r3, r1
9000bcd0:	72fb      	strb	r3, [r7, #11]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
9000bcd2:	68fb      	ldr	r3, [r7, #12]
9000bcd4:	4618      	mov	r0, r3
9000bcd6:	f7ff ff8a 	bl	9000bbee <_ZNKSt14_Function_base8_M_emptyEv>
9000bcda:	4603      	mov	r3, r0
9000bcdc:	2b00      	cmp	r3, #0
9000bcde:	d001      	beq.n	9000bce4 <_ZNKSt8functionIFvhPhmEEclEhS0_m+0x24>
	__throw_bad_function_call();
9000bce0:	f004 ffca 	bl	90010c78 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
9000bce4:	68fb      	ldr	r3, [r7, #12]
9000bce6:	68dc      	ldr	r4, [r3, #12]
9000bce8:	68fd      	ldr	r5, [r7, #12]
9000bcea:	f107 030b 	add.w	r3, r7, #11
9000bcee:	4618      	mov	r0, r3
9000bcf0:	f000 f857 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000bcf4:	4606      	mov	r6, r0
9000bcf6:	1d3b      	adds	r3, r7, #4
9000bcf8:	4618      	mov	r0, r3
9000bcfa:	f000 f85d 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000bcfe:	4680      	mov	r8, r0
9000bd00:	463b      	mov	r3, r7
9000bd02:	4618      	mov	r0, r3
9000bd04:	f000 f863 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000bd08:	4603      	mov	r3, r0
9000bd0a:	4642      	mov	r2, r8
9000bd0c:	4631      	mov	r1, r6
9000bd0e:	4628      	mov	r0, r5
9000bd10:	47a0      	blx	r4
9000bd12:	bf00      	nop
    }
9000bd14:	3710      	adds	r7, #16
9000bd16:	46bd      	mov	sp, r7
9000bd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000bd1c <_ZNSt8functionIFvhPhmEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
9000bd1c:	b580      	push	{r7, lr}
9000bd1e:	b082      	sub	sp, #8
9000bd20:	af00      	add	r7, sp, #0
9000bd22:	6078      	str	r0, [r7, #4]
9000bd24:	6039      	str	r1, [r7, #0]
    : _Function_base()
9000bd26:	687b      	ldr	r3, [r7, #4]
9000bd28:	4618      	mov	r0, r3
9000bd2a:	f7ff ff3f 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
9000bd2e:	6838      	ldr	r0, [r7, #0]
9000bd30:	f000 f858 	bl	9000bde4 <_ZNKSt8functionIFvhPhmEEcvbEv>
9000bd34:	4603      	mov	r3, r0
9000bd36:	2b00      	cmp	r3, #0
9000bd38:	d00d      	beq.n	9000bd56 <_ZNSt8functionIFvhPhmEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
9000bd3a:	683b      	ldr	r3, [r7, #0]
9000bd3c:	689b      	ldr	r3, [r3, #8]
9000bd3e:	6878      	ldr	r0, [r7, #4]
9000bd40:	6839      	ldr	r1, [r7, #0]
9000bd42:	2202      	movs	r2, #2
9000bd44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
9000bd46:	683b      	ldr	r3, [r7, #0]
9000bd48:	68da      	ldr	r2, [r3, #12]
9000bd4a:	687b      	ldr	r3, [r7, #4]
9000bd4c:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
9000bd4e:	683b      	ldr	r3, [r7, #0]
9000bd50:	689a      	ldr	r2, [r3, #8]
9000bd52:	687b      	ldr	r3, [r7, #4]
9000bd54:	609a      	str	r2, [r3, #8]
    }
9000bd56:	687b      	ldr	r3, [r7, #4]
9000bd58:	4618      	mov	r0, r3
9000bd5a:	3708      	adds	r7, #8
9000bd5c:	46bd      	mov	sp, r7
9000bd5e:	bd80      	pop	{r7, pc}

9000bd60 <_ZNSt8functionIFvhPhmEE4swapERS2_>:
      void swap(function& __x) noexcept
9000bd60:	b580      	push	{r7, lr}
9000bd62:	b082      	sub	sp, #8
9000bd64:	af00      	add	r7, sp, #0
9000bd66:	6078      	str	r0, [r7, #4]
9000bd68:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
9000bd6a:	687b      	ldr	r3, [r7, #4]
9000bd6c:	683a      	ldr	r2, [r7, #0]
9000bd6e:	4611      	mov	r1, r2
9000bd70:	4618      	mov	r0, r3
9000bd72:	f000 f852 	bl	9000be1a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
9000bd76:	687b      	ldr	r3, [r7, #4]
9000bd78:	f103 0208 	add.w	r2, r3, #8
9000bd7c:	683b      	ldr	r3, [r7, #0]
9000bd7e:	3308      	adds	r3, #8
9000bd80:	4619      	mov	r1, r3
9000bd82:	4610      	mov	r0, r2
9000bd84:	f000 f87b 	bl	9000be7e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
9000bd88:	687b      	ldr	r3, [r7, #4]
9000bd8a:	f103 020c 	add.w	r2, r3, #12
9000bd8e:	683b      	ldr	r3, [r7, #0]
9000bd90:	330c      	adds	r3, #12
9000bd92:	4619      	mov	r1, r3
9000bd94:	4610      	mov	r0, r2
9000bd96:	f000 f89c 	bl	9000bed2 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
9000bd9a:	bf00      	nop
9000bd9c:	3708      	adds	r7, #8
9000bd9e:	46bd      	mov	sp, r7
9000bda0:	bd80      	pop	{r7, pc}

9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000bda2:	b480      	push	{r7}
9000bda4:	b083      	sub	sp, #12
9000bda6:	af00      	add	r7, sp, #0
9000bda8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000bdaa:	687b      	ldr	r3, [r7, #4]
9000bdac:	4618      	mov	r0, r3
9000bdae:	370c      	adds	r7, #12
9000bdb0:	46bd      	mov	sp, r7
9000bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bdb6:	4770      	bx	lr

9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000bdb8:	b480      	push	{r7}
9000bdba:	b083      	sub	sp, #12
9000bdbc:	af00      	add	r7, sp, #0
9000bdbe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000bdc0:	687b      	ldr	r3, [r7, #4]
9000bdc2:	4618      	mov	r0, r3
9000bdc4:	370c      	adds	r7, #12
9000bdc6:	46bd      	mov	sp, r7
9000bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bdcc:	4770      	bx	lr

9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000bdce:	b480      	push	{r7}
9000bdd0:	b083      	sub	sp, #12
9000bdd2:	af00      	add	r7, sp, #0
9000bdd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000bdd6:	687b      	ldr	r3, [r7, #4]
9000bdd8:	4618      	mov	r0, r3
9000bdda:	370c      	adds	r7, #12
9000bddc:	46bd      	mov	sp, r7
9000bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bde2:	4770      	bx	lr

9000bde4 <_ZNKSt8functionIFvhPhmEEcvbEv>:
      explicit operator bool() const noexcept
9000bde4:	b580      	push	{r7, lr}
9000bde6:	b082      	sub	sp, #8
9000bde8:	af00      	add	r7, sp, #0
9000bdea:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
9000bdec:	687b      	ldr	r3, [r7, #4]
9000bdee:	4618      	mov	r0, r3
9000bdf0:	f7ff fefd 	bl	9000bbee <_ZNKSt14_Function_base8_M_emptyEv>
9000bdf4:	4603      	mov	r3, r0
9000bdf6:	f083 0301 	eor.w	r3, r3, #1
9000bdfa:	b2db      	uxtb	r3, r3
9000bdfc:	4618      	mov	r0, r3
9000bdfe:	3708      	adds	r7, #8
9000be00:	46bd      	mov	sp, r7
9000be02:	bd80      	pop	{r7, pc}

9000be04 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
9000be04:	b480      	push	{r7}
9000be06:	b083      	sub	sp, #12
9000be08:	af00      	add	r7, sp, #0
9000be0a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000be0c:	687b      	ldr	r3, [r7, #4]
9000be0e:	4618      	mov	r0, r3
9000be10:	370c      	adds	r7, #12
9000be12:	46bd      	mov	sp, r7
9000be14:	f85d 7b04 	ldr.w	r7, [sp], #4
9000be18:	4770      	bx	lr

9000be1a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
9000be1a:	b580      	push	{r7, lr}
9000be1c:	b084      	sub	sp, #16
9000be1e:	af00      	add	r7, sp, #0
9000be20:	6078      	str	r0, [r7, #4]
9000be22:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
9000be24:	6878      	ldr	r0, [r7, #4]
9000be26:	f7ff ffed 	bl	9000be04 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
9000be2a:	4602      	mov	r2, r0
9000be2c:	f107 0308 	add.w	r3, r7, #8
9000be30:	e892 0003 	ldmia.w	r2, {r0, r1}
9000be34:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
9000be38:	6838      	ldr	r0, [r7, #0]
9000be3a:	f7ff ffe3 	bl	9000be04 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
9000be3e:	4602      	mov	r2, r0
9000be40:	687b      	ldr	r3, [r7, #4]
9000be42:	e892 0003 	ldmia.w	r2, {r0, r1}
9000be46:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
9000be4a:	f107 0308 	add.w	r3, r7, #8
9000be4e:	4618      	mov	r0, r3
9000be50:	f7ff ffd8 	bl	9000be04 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
9000be54:	4602      	mov	r2, r0
9000be56:	683b      	ldr	r3, [r7, #0]
9000be58:	e892 0003 	ldmia.w	r2, {r0, r1}
9000be5c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
9000be60:	bf00      	nop
9000be62:	3710      	adds	r7, #16
9000be64:	46bd      	mov	sp, r7
9000be66:	bd80      	pop	{r7, pc}

9000be68 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
9000be68:	b480      	push	{r7}
9000be6a:	b083      	sub	sp, #12
9000be6c:	af00      	add	r7, sp, #0
9000be6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000be70:	687b      	ldr	r3, [r7, #4]
9000be72:	4618      	mov	r0, r3
9000be74:	370c      	adds	r7, #12
9000be76:	46bd      	mov	sp, r7
9000be78:	f85d 7b04 	ldr.w	r7, [sp], #4
9000be7c:	4770      	bx	lr

9000be7e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
9000be7e:	b580      	push	{r7, lr}
9000be80:	b084      	sub	sp, #16
9000be82:	af00      	add	r7, sp, #0
9000be84:	6078      	str	r0, [r7, #4]
9000be86:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
9000be88:	6878      	ldr	r0, [r7, #4]
9000be8a:	f7ff ffed 	bl	9000be68 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
9000be8e:	4603      	mov	r3, r0
9000be90:	681b      	ldr	r3, [r3, #0]
9000be92:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
9000be94:	6838      	ldr	r0, [r7, #0]
9000be96:	f7ff ffe7 	bl	9000be68 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
9000be9a:	4603      	mov	r3, r0
9000be9c:	681a      	ldr	r2, [r3, #0]
9000be9e:	687b      	ldr	r3, [r7, #4]
9000bea0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
9000bea2:	f107 030c 	add.w	r3, r7, #12
9000bea6:	4618      	mov	r0, r3
9000bea8:	f7ff ffde 	bl	9000be68 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
9000beac:	4603      	mov	r3, r0
9000beae:	681a      	ldr	r2, [r3, #0]
9000beb0:	683b      	ldr	r3, [r7, #0]
9000beb2:	601a      	str	r2, [r3, #0]
    }
9000beb4:	bf00      	nop
9000beb6:	3710      	adds	r7, #16
9000beb8:	46bd      	mov	sp, r7
9000beba:	bd80      	pop	{r7, pc}

9000bebc <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
9000bebc:	b480      	push	{r7}
9000bebe:	b083      	sub	sp, #12
9000bec0:	af00      	add	r7, sp, #0
9000bec2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000bec4:	687b      	ldr	r3, [r7, #4]
9000bec6:	4618      	mov	r0, r3
9000bec8:	370c      	adds	r7, #12
9000beca:	46bd      	mov	sp, r7
9000becc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bed0:	4770      	bx	lr

9000bed2 <_ZSt4swapIPFvRKSt9_Any_dataOhOPhOmEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
9000bed2:	b580      	push	{r7, lr}
9000bed4:	b084      	sub	sp, #16
9000bed6:	af00      	add	r7, sp, #0
9000bed8:	6078      	str	r0, [r7, #4]
9000beda:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
9000bedc:	6878      	ldr	r0, [r7, #4]
9000bede:	f7ff ffed 	bl	9000bebc <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
9000bee2:	4603      	mov	r3, r0
9000bee4:	681b      	ldr	r3, [r3, #0]
9000bee6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
9000bee8:	6838      	ldr	r0, [r7, #0]
9000beea:	f7ff ffe7 	bl	9000bebc <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
9000beee:	4603      	mov	r3, r0
9000bef0:	681a      	ldr	r2, [r3, #0]
9000bef2:	687b      	ldr	r3, [r7, #4]
9000bef4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
9000bef6:	f107 030c 	add.w	r3, r7, #12
9000befa:	4618      	mov	r0, r3
9000befc:	f7ff ffde 	bl	9000bebc <_ZSt4moveIRPFvRKSt9_Any_dataOhOPhOmEEONSt16remove_referenceIT_E4typeEOSB_>
9000bf00:	4603      	mov	r3, r0
9000bf02:	681a      	ldr	r2, [r3, #0]
9000bf04:	683b      	ldr	r3, [r7, #0]
9000bf06:	601a      	str	r2, [r3, #0]
    }
9000bf08:	bf00      	nop
9000bf0a:	3710      	adds	r7, #16
9000bf0c:	46bd      	mov	sp, r7
9000bf0e:	bd80      	pop	{r7, pc}

9000bf10 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
9000bf10:	b480      	push	{r7}
9000bf12:	b083      	sub	sp, #12
9000bf14:	af00      	add	r7, sp, #0
9000bf16:	6078      	str	r0, [r7, #4]
9000bf18:	687b      	ldr	r3, [r7, #4]
9000bf1a:	4618      	mov	r0, r3
9000bf1c:	370c      	adds	r7, #12
9000bf1e:	46bd      	mov	sp, r7
9000bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf24:	4770      	bx	lr

9000bf26 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
9000bf26:	b480      	push	{r7}
9000bf28:	b083      	sub	sp, #12
9000bf2a:	af00      	add	r7, sp, #0
9000bf2c:	6078      	str	r0, [r7, #4]
9000bf2e:	687b      	ldr	r3, [r7, #4]
9000bf30:	4618      	mov	r0, r3
9000bf32:	370c      	adds	r7, #12
9000bf34:	46bd      	mov	sp, r7
9000bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bf3a:	4770      	bx	lr

9000bf3c <_ZNSt8functionIFvhPvEED1Ev>:
    class function<_Res(_ArgTypes...)>
9000bf3c:	b580      	push	{r7, lr}
9000bf3e:	b082      	sub	sp, #8
9000bf40:	af00      	add	r7, sp, #0
9000bf42:	6078      	str	r0, [r7, #4]
9000bf44:	687b      	ldr	r3, [r7, #4]
9000bf46:	4618      	mov	r0, r3
9000bf48:	f7ff fe3e 	bl	9000bbc8 <_ZNSt14_Function_baseD1Ev>
9000bf4c:	687b      	ldr	r3, [r7, #4]
9000bf4e:	4618      	mov	r0, r3
9000bf50:	3708      	adds	r7, #8
9000bf52:	46bd      	mov	sp, r7
9000bf54:	bd80      	pop	{r7, pc}
	...

9000bf58 <_ZN10MessageBusD1Ev>:
	size_t hash;
};

class MessageBus {
public:
	virtual ~MessageBus() {}
9000bf58:	b590      	push	{r4, r7, lr}
9000bf5a:	b083      	sub	sp, #12
9000bf5c:	af00      	add	r7, sp, #0
9000bf5e:	6078      	str	r0, [r7, #4]
9000bf60:	4a0f      	ldr	r2, [pc, #60]	; (9000bfa0 <_ZN10MessageBusD1Ev+0x48>)
9000bf62:	687b      	ldr	r3, [r7, #4]
9000bf64:	601a      	str	r2, [r3, #0]
9000bf66:	687a      	ldr	r2, [r7, #4]
9000bf68:	f241 7314 	movw	r3, #5908	; 0x1714
9000bf6c:	4413      	add	r3, r2
9000bf6e:	2b00      	cmp	r3, #0
9000bf70:	d010      	beq.n	9000bf94 <_ZN10MessageBusD1Ev+0x3c>
9000bf72:	687a      	ldr	r2, [r7, #4]
9000bf74:	f241 7314 	movw	r3, #5908	; 0x1714
9000bf78:	4413      	add	r3, r2
9000bf7a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
9000bf7e:	687a      	ldr	r2, [r7, #4]
9000bf80:	f241 7314 	movw	r3, #5908	; 0x1714
9000bf84:	4413      	add	r3, r2
9000bf86:	429c      	cmp	r4, r3
9000bf88:	d004      	beq.n	9000bf94 <_ZN10MessageBusD1Ev+0x3c>
9000bf8a:	3c10      	subs	r4, #16
9000bf8c:	4620      	mov	r0, r4
9000bf8e:	f7ff ffd5 	bl	9000bf3c <_ZNSt8functionIFvhPvEED1Ev>
9000bf92:	e7f4      	b.n	9000bf7e <_ZN10MessageBusD1Ev+0x26>
9000bf94:	687b      	ldr	r3, [r7, #4]
9000bf96:	4618      	mov	r0, r3
9000bf98:	370c      	adds	r7, #12
9000bf9a:	46bd      	mov	sp, r7
9000bf9c:	bd90      	pop	{r4, r7, pc}
9000bf9e:	bf00      	nop
9000bfa0:	900141dc 	.word	0x900141dc

9000bfa4 <_ZN10MessageBusD0Ev>:
9000bfa4:	b580      	push	{r7, lr}
9000bfa6:	b082      	sub	sp, #8
9000bfa8:	af00      	add	r7, sp, #0
9000bfaa:	6078      	str	r0, [r7, #4]
9000bfac:	6878      	ldr	r0, [r7, #4]
9000bfae:	f7ff ffd3 	bl	9000bf58 <_ZN10MessageBusD1Ev>
9000bfb2:	f641 4114 	movw	r1, #7188	; 0x1c14
9000bfb6:	6878      	ldr	r0, [r7, #4]
9000bfb8:	f004 faf6 	bl	900105a8 <_ZdlPvj>
9000bfbc:	687b      	ldr	r3, [r7, #4]
9000bfbe:	4618      	mov	r0, r3
9000bfc0:	3708      	adds	r7, #8
9000bfc2:	46bd      	mov	sp, r7
9000bfc4:	bd80      	pop	{r7, pc}
	...

9000bfc8 <_ZN10MessageBusC1Ev>:
class MessageBus {
9000bfc8:	b5b0      	push	{r4, r5, r7, lr}
9000bfca:	b082      	sub	sp, #8
9000bfcc:	af00      	add	r7, sp, #0
9000bfce:	6078      	str	r0, [r7, #4]
9000bfd0:	4a1a      	ldr	r2, [pc, #104]	; (9000c03c <_ZN10MessageBusC1Ev+0x74>)
9000bfd2:	687b      	ldr	r3, [r7, #4]
9000bfd4:	601a      	str	r2, [r3, #0]
9000bfd6:	687b      	ldr	r3, [r7, #4]
9000bfd8:	3304      	adds	r3, #4
9000bfda:	f44f 7240 	mov.w	r2, #768	; 0x300
9000bfde:	2100      	movs	r1, #0
9000bfe0:	4618      	mov	r0, r3
9000bfe2:	f005 f855 	bl	90011090 <memset>
9000bfe6:	2201      	movs	r2, #1
9000bfe8:	6879      	ldr	r1, [r7, #4]
9000bfea:	4613      	mov	r3, r2
9000bfec:	005b      	lsls	r3, r3, #1
9000bfee:	4413      	add	r3, r2
9000bff0:	009b      	lsls	r3, r3, #2
9000bff2:	440b      	add	r3, r1
9000bff4:	3304      	adds	r3, #4
9000bff6:	21ff      	movs	r1, #255	; 0xff
9000bff8:	7019      	strb	r1, [r3, #0]
9000bffa:	2a3f      	cmp	r2, #63	; 0x3f
9000bffc:	d001      	beq.n	9000c002 <_ZN10MessageBusC1Ev+0x3a>
9000bffe:	3201      	adds	r2, #1
9000c000:	e7f2      	b.n	9000bfe8 <_ZN10MessageBusC1Ev+0x20>
9000c002:	687b      	ldr	r3, [r7, #4]
9000c004:	f503 7341 	add.w	r3, r3, #772	; 0x304
9000c008:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000c00c:	2100      	movs	r1, #0
9000c00e:	4618      	mov	r0, r3
9000c010:	f005 f83e 	bl	90011090 <memset>
9000c014:	687a      	ldr	r2, [r7, #4]
9000c016:	f241 7314 	movw	r3, #5908	; 0x1714
9000c01a:	4413      	add	r3, r2
9000c01c:	243f      	movs	r4, #63	; 0x3f
9000c01e:	461d      	mov	r5, r3
9000c020:	2c00      	cmp	r4, #0
9000c022:	db05      	blt.n	9000c030 <_ZN10MessageBusC1Ev+0x68>
9000c024:	4628      	mov	r0, r5
9000c026:	f000 f92c 	bl	9000c282 <_ZNSt8functionIFvhPvEEC1Ev>
9000c02a:	3510      	adds	r5, #16
9000c02c:	3c01      	subs	r4, #1
9000c02e:	e7f7      	b.n	9000c020 <_ZN10MessageBusC1Ev+0x58>
9000c030:	687b      	ldr	r3, [r7, #4]
9000c032:	4618      	mov	r0, r3
9000c034:	3708      	adds	r7, #8
9000c036:	46bd      	mov	sp, r7
9000c038:	bdb0      	pop	{r4, r5, r7, pc}
9000c03a:	bf00      	nop
9000c03c:	900141dc 	.word	0x900141dc

9000c040 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
9000c040:	b580      	push	{r7, lr}
9000c042:	b082      	sub	sp, #8
9000c044:	af00      	add	r7, sp, #0
9000c046:	6078      	str	r0, [r7, #4]
9000c048:	6039      	str	r1, [r7, #0]
9000c04a:	687b      	ldr	r3, [r7, #4]
9000c04c:	683a      	ldr	r2, [r7, #0]
9000c04e:	4611      	mov	r1, r2
9000c050:	4618      	mov	r0, r3
9000c052:	f000 f94c 	bl	9000c2ee <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
9000c056:	687b      	ldr	r3, [r7, #4]
9000c058:	4618      	mov	r0, r3
9000c05a:	3708      	adds	r7, #8
9000c05c:	46bd      	mov	sp, r7
9000c05e:	bd80      	pop	{r7, pc}

9000c060 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>:
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
9000c060:	b580      	push	{r7, lr}
9000c062:	b082      	sub	sp, #8
9000c064:	af00      	add	r7, sp, #0
9000c066:	6078      	str	r0, [r7, #4]
9000c068:	6039      	str	r1, [r7, #0]
9000c06a:	687b      	ldr	r3, [r7, #4]
9000c06c:	683a      	ldr	r2, [r7, #0]
9000c06e:	e892 0003 	ldmia.w	r2, {r0, r1}
9000c072:	e883 0003 	stmia.w	r3, {r0, r1}
9000c076:	687b      	ldr	r3, [r7, #4]
9000c078:	f103 0208 	add.w	r2, r3, #8
9000c07c:	683b      	ldr	r3, [r7, #0]
9000c07e:	3308      	adds	r3, #8
9000c080:	4619      	mov	r1, r3
9000c082:	4610      	mov	r0, r2
9000c084:	f7ff ffdc 	bl	9000c040 <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>
9000c088:	687b      	ldr	r3, [r7, #4]
9000c08a:	4618      	mov	r0, r3
9000c08c:	3708      	adds	r7, #8
9000c08e:	46bd      	mov	sp, r7
9000c090:	bd80      	pop	{r7, pc}
	...

9000c094 <_ZN5IOBusC1EP8IODriverPhm>:

#include "IOBus.h"

#include <cstring>

IOBus::IOBus(IODriver* driver, uint8_t* buffer, uint32_t length) {
9000c094:	b590      	push	{r4, r7, lr}
9000c096:	b091      	sub	sp, #68	; 0x44
9000c098:	af02      	add	r7, sp, #8
9000c09a:	60f8      	str	r0, [r7, #12]
9000c09c:	60b9      	str	r1, [r7, #8]
9000c09e:	607a      	str	r2, [r7, #4]
9000c0a0:	603b      	str	r3, [r7, #0]
9000c0a2:	68fb      	ldr	r3, [r7, #12]
9000c0a4:	4618      	mov	r0, r3
9000c0a6:	f7ff ff8f 	bl	9000bfc8 <_ZN10MessageBusC1Ev>
9000c0aa:	4a26      	ldr	r2, [pc, #152]	; (9000c144 <_ZN5IOBusC1EP8IODriverPhm+0xb0>)
9000c0ac:	68fb      	ldr	r3, [r7, #12]
9000c0ae:	601a      	str	r2, [r3, #0]
	this->driver = driver;
9000c0b0:	68fb      	ldr	r3, [r7, #12]
9000c0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c0b6:	461a      	mov	r2, r3
9000c0b8:	68bb      	ldr	r3, [r7, #8]
9000c0ba:	f8c2 3c14 	str.w	r3, [r2, #3092]	; 0xc14
	this->packet_buffer = buffer;
9000c0be:	68fb      	ldr	r3, [r7, #12]
9000c0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c0c4:	461a      	mov	r2, r3
9000c0c6:	687b      	ldr	r3, [r7, #4]
9000c0c8:	f8c2 3c18 	str.w	r3, [r2, #3096]	; 0xc18
	this->buffer_length = length;
9000c0cc:	68fb      	ldr	r3, [r7, #12]
9000c0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c0d2:	461a      	mov	r2, r3
9000c0d4:	683b      	ldr	r3, [r7, #0]
9000c0d6:	f8c2 3c1c 	str.w	r3, [r2, #3100]	; 0xc1c
	this->buffer_index = 0;
9000c0da:	68fb      	ldr	r3, [r7, #12]
9000c0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c0e0:	461a      	mov	r2, r3
9000c0e2:	2300      	movs	r3, #0
9000c0e4:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20

	using namespace std::placeholders;
	driver->receive(std::bind(&IOBus::receive, this, _1, _2, _3));
9000c0e8:	68bb      	ldr	r3, [r7, #8]
9000c0ea:	681b      	ldr	r3, [r3, #0]
9000c0ec:	3308      	adds	r3, #8
9000c0ee:	681c      	ldr	r4, [r3, #0]
9000c0f0:	4b15      	ldr	r3, [pc, #84]	; (9000c148 <_ZN5IOBusC1EP8IODriverPhm+0xb4>)
9000c0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
9000c0f4:	2300      	movs	r3, #0
9000c0f6:	633b      	str	r3, [r7, #48]	; 0x30
9000c0f8:	68fb      	ldr	r3, [r7, #12]
9000c0fa:	637b      	str	r3, [r7, #52]	; 0x34
9000c0fc:	f107 0020 	add.w	r0, r7, #32
9000c100:	f107 0234 	add.w	r2, r7, #52	; 0x34
9000c104:	f107 012c 	add.w	r1, r7, #44	; 0x2c
9000c108:	4b10      	ldr	r3, [pc, #64]	; (9000c14c <_ZN5IOBusC1EP8IODriverPhm+0xb8>)
9000c10a:	9301      	str	r3, [sp, #4]
9000c10c:	4b10      	ldr	r3, [pc, #64]	; (9000c150 <_ZN5IOBusC1EP8IODriverPhm+0xbc>)
9000c10e:	9300      	str	r3, [sp, #0]
9000c110:	4b10      	ldr	r3, [pc, #64]	; (9000c154 <_ZN5IOBusC1EP8IODriverPhm+0xc0>)
9000c112:	f000 f8c3 	bl	9000c29c <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>
9000c116:	f107 0220 	add.w	r2, r7, #32
9000c11a:	f107 0310 	add.w	r3, r7, #16
9000c11e:	4611      	mov	r1, r2
9000c120:	4618      	mov	r0, r3
9000c122:	f000 f907 	bl	9000c334 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>
9000c126:	f107 0310 	add.w	r3, r7, #16
9000c12a:	4619      	mov	r1, r3
9000c12c:	68b8      	ldr	r0, [r7, #8]
9000c12e:	47a0      	blx	r4
9000c130:	f107 0310 	add.w	r3, r7, #16
9000c134:	4618      	mov	r0, r3
9000c136:	f7ff fd9b 	bl	9000bc70 <_ZNSt8functionIFvhPhmEED1Ev>
}
9000c13a:	68fb      	ldr	r3, [r7, #12]
9000c13c:	4618      	mov	r0, r3
9000c13e:	373c      	adds	r7, #60	; 0x3c
9000c140:	46bd      	mov	sp, r7
9000c142:	bd90      	pop	{r4, r7, pc}
9000c144:	900140e4 	.word	0x900140e4
9000c148:	9000c159 	.word	0x9000c159
9000c14c:	90014722 	.word	0x90014722
9000c150:	90014721 	.word	0x90014721
9000c154:	90014720 	.word	0x90014720

9000c158 <_ZN5IOBus7receiveEhPhm>:

void IOBus::receive(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
9000c158:	b580      	push	{r7, lr}
9000c15a:	b084      	sub	sp, #16
9000c15c:	af00      	add	r7, sp, #0
9000c15e:	60f8      	str	r0, [r7, #12]
9000c160:	607a      	str	r2, [r7, #4]
9000c162:	603b      	str	r3, [r7, #0]
9000c164:	460b      	mov	r3, r1
9000c166:	72fb      	strb	r3, [r7, #11]
	while(length > buffer_length) {
9000c168:	68fb      	ldr	r3, [r7, #12]
9000c16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c16e:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
9000c172:	683a      	ldr	r2, [r7, #0]
9000c174:	429a      	cmp	r2, r3
9000c176:	d91a      	bls.n	9000c1ae <_ZN5IOBus7receiveEhPhm+0x56>
		MessageBus::receive(sender_id, buffer, buffer_length);
9000c178:	68f8      	ldr	r0, [r7, #12]
9000c17a:	68fb      	ldr	r3, [r7, #12]
9000c17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c180:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
9000c184:	7af9      	ldrb	r1, [r7, #11]
9000c186:	687a      	ldr	r2, [r7, #4]
9000c188:	f001 fcd0 	bl	9000db2c <_ZN10MessageBus7receiveEhPhm>
		length -= buffer_length;
9000c18c:	68fb      	ldr	r3, [r7, #12]
9000c18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c192:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
9000c196:	683a      	ldr	r2, [r7, #0]
9000c198:	1ad3      	subs	r3, r2, r3
9000c19a:	603b      	str	r3, [r7, #0]
		buffer += buffer_length;
9000c19c:	68fb      	ldr	r3, [r7, #12]
9000c19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c1a2:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
9000c1a6:	687a      	ldr	r2, [r7, #4]
9000c1a8:	4413      	add	r3, r2
9000c1aa:	607b      	str	r3, [r7, #4]
	while(length > buffer_length) {
9000c1ac:	e7dc      	b.n	9000c168 <_ZN5IOBus7receiveEhPhm+0x10>
	}

	MessageBus::receive(sender_id, buffer, length);
9000c1ae:	68f8      	ldr	r0, [r7, #12]
9000c1b0:	7af9      	ldrb	r1, [r7, #11]
9000c1b2:	683b      	ldr	r3, [r7, #0]
9000c1b4:	687a      	ldr	r2, [r7, #4]
9000c1b6:	f001 fcb9 	bl	9000db2c <_ZN10MessageBus7receiveEhPhm>
}
9000c1ba:	bf00      	nop
9000c1bc:	3710      	adds	r7, #16
9000c1be:	46bd      	mov	sp, r7
9000c1c0:	bd80      	pop	{r7, pc}

9000c1c2 <_ZN5IOBus6appendEPhm>:

uint32_t IOBus::append(uint8_t* buffer, uint32_t length) {
9000c1c2:	b580      	push	{r7, lr}
9000c1c4:	b086      	sub	sp, #24
9000c1c6:	af00      	add	r7, sp, #0
9000c1c8:	60f8      	str	r0, [r7, #12]
9000c1ca:	60b9      	str	r1, [r7, #8]
9000c1cc:	607a      	str	r2, [r7, #4]
	uint32_t remaining_length = buffer_length - buffer_index;
9000c1ce:	68fb      	ldr	r3, [r7, #12]
9000c1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c1d4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
9000c1d8:	68fb      	ldr	r3, [r7, #12]
9000c1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c1de:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
9000c1e2:	1ad3      	subs	r3, r2, r3
9000c1e4:	617b      	str	r3, [r7, #20]

	if(length > remaining_length) {
9000c1e6:	687a      	ldr	r2, [r7, #4]
9000c1e8:	697b      	ldr	r3, [r7, #20]
9000c1ea:	429a      	cmp	r2, r3
9000c1ec:	d901      	bls.n	9000c1f2 <_ZN5IOBus6appendEPhm+0x30>
		length = remaining_length;
9000c1ee:	697b      	ldr	r3, [r7, #20]
9000c1f0:	607b      	str	r3, [r7, #4]
	}

	memcpy(packet_buffer + buffer_index, buffer, length);
9000c1f2:	68fb      	ldr	r3, [r7, #12]
9000c1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c1f8:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
9000c1fc:	68fb      	ldr	r3, [r7, #12]
9000c1fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c202:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
9000c206:	4413      	add	r3, r2
9000c208:	687a      	ldr	r2, [r7, #4]
9000c20a:	68b9      	ldr	r1, [r7, #8]
9000c20c:	4618      	mov	r0, r3
9000c20e:	f004 ff17 	bl	90011040 <memcpy>

	buffer_index += length;
9000c212:	68fb      	ldr	r3, [r7, #12]
9000c214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c218:	f8d3 2c20 	ldr.w	r2, [r3, #3104]	; 0xc20
9000c21c:	687b      	ldr	r3, [r7, #4]
9000c21e:	4413      	add	r3, r2
9000c220:	68fa      	ldr	r2, [r7, #12]
9000c222:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000c226:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20

	return length;
9000c22a:	687b      	ldr	r3, [r7, #4]
}
9000c22c:	4618      	mov	r0, r3
9000c22e:	3718      	adds	r7, #24
9000c230:	46bd      	mov	sp, r7
9000c232:	bd80      	pop	{r7, pc}

9000c234 <_ZN5IOBus8transmitEv>:

void IOBus::transmit() {
9000c234:	b580      	push	{r7, lr}
9000c236:	b082      	sub	sp, #8
9000c238:	af00      	add	r7, sp, #0
9000c23a:	6078      	str	r0, [r7, #4]
	driver->transmit(packet_buffer, buffer_index);
9000c23c:	687b      	ldr	r3, [r7, #4]
9000c23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c242:	f8d3 0c14 	ldr.w	r0, [r3, #3092]	; 0xc14
9000c246:	687b      	ldr	r3, [r7, #4]
9000c248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c24c:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
9000c250:	681b      	ldr	r3, [r3, #0]
9000c252:	330c      	adds	r3, #12
9000c254:	681b      	ldr	r3, [r3, #0]
9000c256:	687a      	ldr	r2, [r7, #4]
9000c258:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000c25c:	f8d2 1c18 	ldr.w	r1, [r2, #3096]	; 0xc18
9000c260:	687a      	ldr	r2, [r7, #4]
9000c262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000c266:	f8d2 2c20 	ldr.w	r2, [r2, #3104]	; 0xc20
9000c26a:	4798      	blx	r3
	buffer_index = 0;
9000c26c:	687b      	ldr	r3, [r7, #4]
9000c26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000c272:	461a      	mov	r2, r3
9000c274:	2300      	movs	r3, #0
9000c276:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
}
9000c27a:	bf00      	nop
9000c27c:	3708      	adds	r7, #8
9000c27e:	46bd      	mov	sp, r7
9000c280:	bd80      	pop	{r7, pc}

9000c282 <_ZNSt8functionIFvhPvEEC1Ev>:
      function() noexcept
9000c282:	b580      	push	{r7, lr}
9000c284:	b082      	sub	sp, #8
9000c286:	af00      	add	r7, sp, #0
9000c288:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
9000c28a:	687b      	ldr	r3, [r7, #4]
9000c28c:	4618      	mov	r0, r3
9000c28e:	f7ff fc8d 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
9000c292:	687b      	ldr	r3, [r7, #4]
9000c294:	4618      	mov	r0, r3
9000c296:	3708      	adds	r7, #8
9000c298:	46bd      	mov	sp, r7
9000c29a:	bd80      	pop	{r7, pc}

9000c29c <_ZSt4bindIM5IOBusFvhPhmEJPS0_RKSt12_PlaceholderILi1EERKS5_ILi2EERKS5_ILi3EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISL_EEE5valueESJ_JDpT0_EE4typeEOSJ_DpOSQ_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline _GLIBCXX20_CONSTEXPR typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
9000c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c2a0:	b086      	sub	sp, #24
9000c2a2:	af02      	add	r7, sp, #8
9000c2a4:	60f8      	str	r0, [r7, #12]
9000c2a6:	60b9      	str	r1, [r7, #8]
9000c2a8:	607a      	str	r2, [r7, #4]
9000c2aa:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
9000c2ac:	68b8      	ldr	r0, [r7, #8]
9000c2ae:	f000 f869 	bl	9000c384 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c2b2:	4605      	mov	r5, r0
9000c2b4:	6878      	ldr	r0, [r7, #4]
9000c2b6:	f000 f870 	bl	9000c39a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
9000c2ba:	4606      	mov	r6, r0
9000c2bc:	6838      	ldr	r0, [r7, #0]
9000c2be:	f000 f877 	bl	9000c3b0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c2c2:	4680      	mov	r8, r0
9000c2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000c2c6:	f000 f87e 	bl	9000c3c6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c2ca:	4604      	mov	r4, r0
9000c2cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000c2ce:	f000 f885 	bl	9000c3dc <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c2d2:	4603      	mov	r3, r0
9000c2d4:	9301      	str	r3, [sp, #4]
9000c2d6:	9400      	str	r4, [sp, #0]
9000c2d8:	4643      	mov	r3, r8
9000c2da:	4632      	mov	r2, r6
9000c2dc:	4629      	mov	r1, r5
9000c2de:	68f8      	ldr	r0, [r7, #12]
9000c2e0:	f000 f887 	bl	9000c3f2 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>
    }
9000c2e4:	68f8      	ldr	r0, [r7, #12]
9000c2e6:	3710      	adds	r7, #16
9000c2e8:	46bd      	mov	sp, r7
9000c2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000c2ee <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1EOS6_>:
      _Tuple_impl(_Tuple_impl&& __in)
9000c2ee:	b590      	push	{r4, r7, lr}
9000c2f0:	b083      	sub	sp, #12
9000c2f2:	af00      	add	r7, sp, #0
9000c2f4:	6078      	str	r0, [r7, #4]
9000c2f6:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
9000c2f8:	6838      	ldr	r0, [r7, #0]
9000c2fa:	f000 f8ab 	bl	9000c454 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>
9000c2fe:	4603      	mov	r3, r0
9000c300:	4618      	mov	r0, r3
9000c302:	f000 f8b2 	bl	9000c46a <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>
9000c306:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
9000c308:	4619      	mov	r1, r3
9000c30a:	6878      	ldr	r0, [r7, #4]
9000c30c:	f000 f8c5 	bl	9000c49a <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>
9000c310:	687c      	ldr	r4, [r7, #4]
9000c312:	6838      	ldr	r0, [r7, #0]
9000c314:	f000 f8b4 	bl	9000c480 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
9000c318:	4603      	mov	r3, r0
9000c31a:	4618      	mov	r0, r3
9000c31c:	f000 f83d 	bl	9000c39a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
9000c320:	4603      	mov	r3, r0
9000c322:	4619      	mov	r1, r3
9000c324:	4620      	mov	r0, r4
9000c326:	f000 f8da 	bl	9000c4de <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
9000c32a:	687b      	ldr	r3, [r7, #4]
9000c32c:	4618      	mov	r0, r3
9000c32e:	370c      	adds	r7, #12
9000c330:	46bd      	mov	sp, r7
9000c332:	bd90      	pop	{r4, r7, pc}

9000c334 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_>:
      function<_Res(_ArgTypes...)>::
9000c334:	b590      	push	{r4, r7, lr}
9000c336:	b083      	sub	sp, #12
9000c338:	af00      	add	r7, sp, #0
9000c33a:	6078      	str	r0, [r7, #4]
9000c33c:	6039      	str	r1, [r7, #0]
      : _Function_base()
9000c33e:	687b      	ldr	r3, [r7, #4]
9000c340:	4618      	mov	r0, r3
9000c342:	f7ff fc33 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
9000c346:	6838      	ldr	r0, [r7, #0]
9000c348:	f000 f8da 	bl	9000c500 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>
9000c34c:	4603      	mov	r3, r0
9000c34e:	2b00      	cmp	r3, #0
9000c350:	d00e      	beq.n	9000c370 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x3c>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
9000c352:	687c      	ldr	r4, [r7, #4]
9000c354:	6838      	ldr	r0, [r7, #0]
9000c356:	f000 f8de 	bl	9000c516 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
9000c35a:	4603      	mov	r3, r0
9000c35c:	4619      	mov	r1, r3
9000c35e:	4620      	mov	r0, r4
9000c360:	f000 f8e4 	bl	9000c52c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>
	    _M_invoker = &_My_handler::_M_invoke;
9000c364:	687b      	ldr	r3, [r7, #4]
9000c366:	4a05      	ldr	r2, [pc, #20]	; (9000c37c <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x48>)
9000c368:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
9000c36a:	687b      	ldr	r3, [r7, #4]
9000c36c:	4a04      	ldr	r2, [pc, #16]	; (9000c380 <_ZNSt8functionIFvhPhmEEC1ISt5_BindIFM5IOBusFvhS0_mEPS5_St12_PlaceholderILi1EES9_ILi2EES9_ILi3EEEEvvEET_+0x4c>)
9000c36e:	609a      	str	r2, [r3, #8]
      }
9000c370:	687b      	ldr	r3, [r7, #4]
9000c372:	4618      	mov	r0, r3
9000c374:	370c      	adds	r7, #12
9000c376:	46bd      	mov	sp, r7
9000c378:	bd90      	pop	{r4, r7, pc}
9000c37a:	bf00      	nop
9000c37c:	9000c551 	.word	0x9000c551
9000c380:	9000c591 	.word	0x9000c591

9000c384 <_ZSt7forwardIM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000c384:	b480      	push	{r7}
9000c386:	b083      	sub	sp, #12
9000c388:	af00      	add	r7, sp, #0
9000c38a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000c38c:	687b      	ldr	r3, [r7, #4]
9000c38e:	4618      	mov	r0, r3
9000c390:	370c      	adds	r7, #12
9000c392:	46bd      	mov	sp, r7
9000c394:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c398:	4770      	bx	lr

9000c39a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000c39a:	b480      	push	{r7}
9000c39c:	b083      	sub	sp, #12
9000c39e:	af00      	add	r7, sp, #0
9000c3a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000c3a2:	687b      	ldr	r3, [r7, #4]
9000c3a4:	4618      	mov	r0, r3
9000c3a6:	370c      	adds	r7, #12
9000c3a8:	46bd      	mov	sp, r7
9000c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c3ae:	4770      	bx	lr

9000c3b0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000c3b0:	b480      	push	{r7}
9000c3b2:	b083      	sub	sp, #12
9000c3b4:	af00      	add	r7, sp, #0
9000c3b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000c3b8:	687b      	ldr	r3, [r7, #4]
9000c3ba:	4618      	mov	r0, r3
9000c3bc:	370c      	adds	r7, #12
9000c3be:	46bd      	mov	sp, r7
9000c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c3c4:	4770      	bx	lr

9000c3c6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000c3c6:	b480      	push	{r7}
9000c3c8:	b083      	sub	sp, #12
9000c3ca:	af00      	add	r7, sp, #0
9000c3cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000c3ce:	687b      	ldr	r3, [r7, #4]
9000c3d0:	4618      	mov	r0, r3
9000c3d2:	370c      	adds	r7, #12
9000c3d4:	46bd      	mov	sp, r7
9000c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c3da:	4770      	bx	lr

9000c3dc <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000c3dc:	b480      	push	{r7}
9000c3de:	b083      	sub	sp, #12
9000c3e0:	af00      	add	r7, sp, #0
9000c3e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000c3e4:	687b      	ldr	r3, [r7, #4]
9000c3e6:	4618      	mov	r0, r3
9000c3e8:	370c      	adds	r7, #12
9000c3ea:	46bd      	mov	sp, r7
9000c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c3f0:	4770      	bx	lr

9000c3f2 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1IJS4_RKS6_RKS7_RKS8_EEEOS3_DpOT_>:
	_Bind(_Functor&& __f, _Args&&... __args)
9000c3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c3f6:	b086      	sub	sp, #24
9000c3f8:	af02      	add	r7, sp, #8
9000c3fa:	60f8      	str	r0, [r7, #12]
9000c3fc:	60b9      	str	r1, [r7, #8]
9000c3fe:	607a      	str	r2, [r7, #4]
9000c400:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
9000c402:	68b8      	ldr	r0, [r7, #8]
9000c404:	f000 f8f0 	bl	9000c5e8 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>
9000c408:	4602      	mov	r2, r0
9000c40a:	68fb      	ldr	r3, [r7, #12]
9000c40c:	e892 0003 	ldmia.w	r2, {r0, r1}
9000c410:	e883 0003 	stmia.w	r3, {r0, r1}
9000c414:	68fb      	ldr	r3, [r7, #12]
9000c416:	f103 0408 	add.w	r4, r3, #8
9000c41a:	6878      	ldr	r0, [r7, #4]
9000c41c:	f7ff ffbd 	bl	9000c39a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
9000c420:	4605      	mov	r5, r0
9000c422:	6838      	ldr	r0, [r7, #0]
9000c424:	f7ff ffc4 	bl	9000c3b0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c428:	4606      	mov	r6, r0
9000c42a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000c42c:	f7ff ffcb 	bl	9000c3c6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c430:	4680      	mov	r8, r0
9000c432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000c434:	f7ff ffd2 	bl	9000c3dc <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c438:	4603      	mov	r3, r0
9000c43a:	9300      	str	r3, [sp, #0]
9000c43c:	4643      	mov	r3, r8
9000c43e:	4632      	mov	r2, r6
9000c440:	4629      	mov	r1, r5
9000c442:	4620      	mov	r0, r4
9000c444:	f000 f8db 	bl	9000c5fe <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1ELb1EEEDpOT_>
	{ }
9000c448:	68fb      	ldr	r3, [r7, #12]
9000c44a:	4618      	mov	r0, r3
9000c44c:	3710      	adds	r7, #16
9000c44e:	46bd      	mov	sp, r7
9000c450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000c454 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_tailERS6_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
9000c454:	b480      	push	{r7}
9000c456:	b083      	sub	sp, #12
9000c458:	af00      	add	r7, sp, #0
9000c45a:	6078      	str	r0, [r7, #4]
9000c45c:	687b      	ldr	r3, [r7, #4]
9000c45e:	4618      	mov	r0, r3
9000c460:	370c      	adds	r7, #12
9000c462:	46bd      	mov	sp, r7
9000c464:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c468:	4770      	bx	lr

9000c46a <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
9000c46a:	b480      	push	{r7}
9000c46c:	b083      	sub	sp, #12
9000c46e:	af00      	add	r7, sp, #0
9000c470:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000c472:	687b      	ldr	r3, [r7, #4]
9000c474:	4618      	mov	r0, r3
9000c476:	370c      	adds	r7, #12
9000c478:	46bd      	mov	sp, r7
9000c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c47e:	4770      	bx	lr

9000c480 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
9000c480:	b580      	push	{r7, lr}
9000c482:	b082      	sub	sp, #8
9000c484:	af00      	add	r7, sp, #0
9000c486:	6078      	str	r0, [r7, #4]
9000c488:	687b      	ldr	r3, [r7, #4]
9000c48a:	4618      	mov	r0, r3
9000c48c:	f000 f8dd 	bl	9000c64a <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>
9000c490:	4603      	mov	r3, r0
9000c492:	4618      	mov	r0, r3
9000c494:	3708      	adds	r7, #8
9000c496:	46bd      	mov	sp, r7
9000c498:	bd80      	pop	{r7, pc}

9000c49a <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
9000c49a:	b580      	push	{r7, lr}
9000c49c:	b082      	sub	sp, #8
9000c49e:	af00      	add	r7, sp, #0
9000c4a0:	6078      	str	r0, [r7, #4]
9000c4a2:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
9000c4a4:	6838      	ldr	r0, [r7, #0]
9000c4a6:	f000 f8db 	bl	9000c660 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>
9000c4aa:	4603      	mov	r3, r0
9000c4ac:	4618      	mov	r0, r3
9000c4ae:	f000 f8e2 	bl	9000c676 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>
9000c4b2:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
9000c4b4:	4619      	mov	r1, r3
9000c4b6:	6878      	ldr	r0, [r7, #4]
9000c4b8:	f000 f8ff 	bl	9000c6ba <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>
9000c4bc:	6838      	ldr	r0, [r7, #0]
9000c4be:	f000 f8e5 	bl	9000c68c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
9000c4c2:	4603      	mov	r3, r0
9000c4c4:	4618      	mov	r0, r3
9000c4c6:	f000 f8ed 	bl	9000c6a4 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
9000c4ca:	4603      	mov	r3, r0
9000c4cc:	4619      	mov	r1, r3
9000c4ce:	6878      	ldr	r0, [r7, #4]
9000c4d0:	f000 f915 	bl	9000c6fe <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
9000c4d4:	687b      	ldr	r3, [r7, #4]
9000c4d6:	4618      	mov	r0, r3
9000c4d8:	3708      	adds	r7, #8
9000c4da:	46bd      	mov	sp, r7
9000c4dc:	bd80      	pop	{r7, pc}

9000c4de <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
9000c4de:	b580      	push	{r7, lr}
9000c4e0:	b082      	sub	sp, #8
9000c4e2:	af00      	add	r7, sp, #0
9000c4e4:	6078      	str	r0, [r7, #4]
9000c4e6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
9000c4e8:	6838      	ldr	r0, [r7, #0]
9000c4ea:	f7ff ff56 	bl	9000c39a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
9000c4ee:	4603      	mov	r3, r0
9000c4f0:	681a      	ldr	r2, [r3, #0]
9000c4f2:	687b      	ldr	r3, [r7, #4]
9000c4f4:	601a      	str	r2, [r3, #0]
9000c4f6:	687b      	ldr	r3, [r7, #4]
9000c4f8:	4618      	mov	r0, r3
9000c4fa:	3708      	adds	r7, #8
9000c4fc:	46bd      	mov	sp, r7
9000c4fe:	bd80      	pop	{r7, pc}

9000c500 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE21_M_not_empty_functionISC_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
9000c500:	b480      	push	{r7}
9000c502:	b083      	sub	sp, #12
9000c504:	af00      	add	r7, sp, #0
9000c506:	6078      	str	r0, [r7, #4]
	  { return true; }
9000c508:	2301      	movs	r3, #1
9000c50a:	4618      	mov	r0, r3
9000c50c:	370c      	adds	r7, #12
9000c50e:	46bd      	mov	sp, r7
9000c510:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c514:	4770      	bx	lr

9000c516 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>:
    move(_Tp&& __t) noexcept
9000c516:	b480      	push	{r7}
9000c518:	b083      	sub	sp, #12
9000c51a:	af00      	add	r7, sp, #0
9000c51c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000c51e:	687b      	ldr	r3, [r7, #4]
9000c520:	4618      	mov	r0, r3
9000c522:	370c      	adds	r7, #12
9000c524:	46bd      	mov	sp, r7
9000c526:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c52a:	4770      	bx	lr

9000c52c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
9000c52c:	b590      	push	{r4, r7, lr}
9000c52e:	b083      	sub	sp, #12
9000c530:	af00      	add	r7, sp, #0
9000c532:	6078      	str	r0, [r7, #4]
9000c534:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
9000c536:	6838      	ldr	r0, [r7, #0]
9000c538:	f7ff ffed 	bl	9000c516 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
9000c53c:	4603      	mov	r3, r0
9000c53e:	4622      	mov	r2, r4
9000c540:	4619      	mov	r1, r3
9000c542:	6878      	ldr	r0, [r7, #4]
9000c544:	f000 f8e8 	bl	9000c718 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>
9000c548:	bf00      	nop
9000c54a:	370c      	adds	r7, #12
9000c54c:	46bd      	mov	sp, r7
9000c54e:	bd90      	pop	{r4, r7, pc}

9000c550 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE9_M_invokeERKSt9_Any_dataOhOS0_Om>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
9000c550:	b5f0      	push	{r4, r5, r6, r7, lr}
9000c552:	b085      	sub	sp, #20
9000c554:	af00      	add	r7, sp, #0
9000c556:	60f8      	str	r0, [r7, #12]
9000c558:	60b9      	str	r1, [r7, #8]
9000c55a:	607a      	str	r2, [r7, #4]
9000c55c:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
9000c55e:	68f8      	ldr	r0, [r7, #12]
9000c560:	f000 f8f6 	bl	9000c750 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
9000c564:	4604      	mov	r4, r0
9000c566:	68b8      	ldr	r0, [r7, #8]
9000c568:	f7ff fc1b 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000c56c:	4605      	mov	r5, r0
9000c56e:	6878      	ldr	r0, [r7, #4]
9000c570:	f7ff fc22 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000c574:	4606      	mov	r6, r0
9000c576:	6838      	ldr	r0, [r7, #0]
9000c578:	f7ff fc29 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000c57c:	4603      	mov	r3, r0
9000c57e:	4632      	mov	r2, r6
9000c580:	4629      	mov	r1, r5
9000c582:	4620      	mov	r0, r4
9000c584:	f000 f8f1 	bl	9000c76a <_ZSt10__invoke_rIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESG_E4typeEOSJ_DpOSK_>
				     std::forward<_ArgTypes>(__args)...);
9000c588:	bf00      	nop
      }
9000c58a:	3714      	adds	r7, #20
9000c58c:	46bd      	mov	sp, r7
9000c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000c590 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
9000c590:	b590      	push	{r4, r7, lr}
9000c592:	b085      	sub	sp, #20
9000c594:	af00      	add	r7, sp, #0
9000c596:	60f8      	str	r0, [r7, #12]
9000c598:	60b9      	str	r1, [r7, #8]
9000c59a:	4613      	mov	r3, r2
9000c59c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
9000c59e:	79fb      	ldrb	r3, [r7, #7]
9000c5a0:	2b00      	cmp	r3, #0
9000c5a2:	d002      	beq.n	9000c5aa <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
9000c5a4:	2b01      	cmp	r3, #1
9000c5a6:	d007      	beq.n	9000c5b8 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x28>
9000c5a8:	e010      	b.n	9000c5cc <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
9000c5aa:	68f8      	ldr	r0, [r7, #12]
9000c5ac:	f000 f901 	bl	9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
9000c5b0:	4603      	mov	r3, r0
9000c5b2:	4a0c      	ldr	r2, [pc, #48]	; (9000c5e4 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x54>)
9000c5b4:	601a      	str	r2, [r3, #0]
	    break;
9000c5b6:	e00f      	b.n	9000c5d8 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
9000c5b8:	68f8      	ldr	r0, [r7, #12]
9000c5ba:	f000 f906 	bl	9000c7ca <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
9000c5be:	4604      	mov	r4, r0
9000c5c0:	68b8      	ldr	r0, [r7, #8]
9000c5c2:	f000 f8c5 	bl	9000c750 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
9000c5c6:	4603      	mov	r3, r0
9000c5c8:	6023      	str	r3, [r4, #0]
	    break;
9000c5ca:	e005      	b.n	9000c5d8 <_ZNSt17_Function_handlerIFvhPhmESt5_BindIFM5IOBusFvhS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
9000c5cc:	79fb      	ldrb	r3, [r7, #7]
9000c5ce:	461a      	mov	r2, r3
9000c5d0:	68b9      	ldr	r1, [r7, #8]
9000c5d2:	68f8      	ldr	r0, [r7, #12]
9000c5d4:	f000 f906 	bl	9000c7e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>
	return false;
9000c5d8:	2300      	movs	r3, #0
      }
9000c5da:	4618      	mov	r0, r3
9000c5dc:	3714      	adds	r7, #20
9000c5de:	46bd      	mov	sp, r7
9000c5e0:	bd90      	pop	{r4, r7, pc}
9000c5e2:	bf00      	nop
9000c5e4:	900140fc 	.word	0x900140fc

9000c5e8 <_ZSt4moveIRM5IOBusFvhPhmEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
9000c5e8:	b480      	push	{r7}
9000c5ea:	b083      	sub	sp, #12
9000c5ec:	af00      	add	r7, sp, #0
9000c5ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000c5f0:	687b      	ldr	r3, [r7, #4]
9000c5f2:	4618      	mov	r0, r3
9000c5f4:	370c      	adds	r7, #12
9000c5f6:	46bd      	mov	sp, r7
9000c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c5fc:	4770      	bx	lr

9000c5fe <_ZNSt5tupleIJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IJS1_RKS3_RKS4_RKS5_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
9000c5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c602:	b086      	sub	sp, #24
9000c604:	af02      	add	r7, sp, #8
9000c606:	60f8      	str	r0, [r7, #12]
9000c608:	60b9      	str	r1, [r7, #8]
9000c60a:	607a      	str	r2, [r7, #4]
9000c60c:	603b      	str	r3, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
9000c60e:	68fc      	ldr	r4, [r7, #12]
9000c610:	68b8      	ldr	r0, [r7, #8]
9000c612:	f7ff fec2 	bl	9000c39a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
9000c616:	4605      	mov	r5, r0
9000c618:	6878      	ldr	r0, [r7, #4]
9000c61a:	f7ff fec9 	bl	9000c3b0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c61e:	4606      	mov	r6, r0
9000c620:	6838      	ldr	r0, [r7, #0]
9000c622:	f7ff fed0 	bl	9000c3c6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c626:	4680      	mov	r8, r0
9000c628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000c62a:	f7ff fed7 	bl	9000c3dc <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c62e:	4603      	mov	r3, r0
9000c630:	9300      	str	r3, [sp, #0]
9000c632:	4643      	mov	r3, r8
9000c634:	4632      	mov	r2, r6
9000c636:	4629      	mov	r1, r5
9000c638:	4620      	mov	r0, r4
9000c63a:	f000 f90d 	bl	9000c858 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>
9000c63e:	68fb      	ldr	r3, [r7, #12]
9000c640:	4618      	mov	r0, r3
9000c642:	3710      	adds	r7, #16
9000c644:	46bd      	mov	sp, r7
9000c646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000c64a <_ZNSt10_Head_baseILj0EP5IOBusLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
9000c64a:	b480      	push	{r7}
9000c64c:	b083      	sub	sp, #12
9000c64e:	af00      	add	r7, sp, #0
9000c650:	6078      	str	r0, [r7, #4]
9000c652:	687b      	ldr	r3, [r7, #4]
9000c654:	4618      	mov	r0, r3
9000c656:	370c      	adds	r7, #12
9000c658:	46bd      	mov	sp, r7
9000c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c65e:	4770      	bx	lr

9000c660 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
9000c660:	b480      	push	{r7}
9000c662:	b083      	sub	sp, #12
9000c664:	af00      	add	r7, sp, #0
9000c666:	6078      	str	r0, [r7, #4]
9000c668:	687b      	ldr	r3, [r7, #4]
9000c66a:	4618      	mov	r0, r3
9000c66c:	370c      	adds	r7, #12
9000c66e:	46bd      	mov	sp, r7
9000c670:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c674:	4770      	bx	lr

9000c676 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
9000c676:	b480      	push	{r7}
9000c678:	b083      	sub	sp, #12
9000c67a:	af00      	add	r7, sp, #0
9000c67c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000c67e:	687b      	ldr	r3, [r7, #4]
9000c680:	4618      	mov	r0, r3
9000c682:	370c      	adds	r7, #12
9000c684:	46bd      	mov	sp, r7
9000c686:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c68a:	4770      	bx	lr

9000c68c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
9000c68c:	b580      	push	{r7, lr}
9000c68e:	b082      	sub	sp, #8
9000c690:	af00      	add	r7, sp, #0
9000c692:	6078      	str	r0, [r7, #4]
9000c694:	6878      	ldr	r0, [r7, #4]
9000c696:	f000 f905 	bl	9000c8a4 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
9000c69a:	4603      	mov	r3, r0
9000c69c:	4618      	mov	r0, r3
9000c69e:	3708      	adds	r7, #8
9000c6a0:	46bd      	mov	sp, r7
9000c6a2:	bd80      	pop	{r7, pc}

9000c6a4 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000c6a4:	b480      	push	{r7}
9000c6a6:	b083      	sub	sp, #12
9000c6a8:	af00      	add	r7, sp, #0
9000c6aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000c6ac:	687b      	ldr	r3, [r7, #4]
9000c6ae:	4618      	mov	r0, r3
9000c6b0:	370c      	adds	r7, #12
9000c6b2:	46bd      	mov	sp, r7
9000c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c6b8:	4770      	bx	lr

9000c6ba <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
9000c6ba:	b580      	push	{r7, lr}
9000c6bc:	b082      	sub	sp, #8
9000c6be:	af00      	add	r7, sp, #0
9000c6c0:	6078      	str	r0, [r7, #4]
9000c6c2:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
9000c6c4:	6838      	ldr	r0, [r7, #0]
9000c6c6:	f000 f8f8 	bl	9000c8ba <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>
9000c6ca:	4603      	mov	r3, r0
9000c6cc:	4618      	mov	r0, r3
9000c6ce:	f000 f8ff 	bl	9000c8d0 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>
9000c6d2:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
9000c6d4:	4619      	mov	r1, r3
9000c6d6:	6878      	ldr	r0, [r7, #4]
9000c6d8:	f000 f91c 	bl	9000c914 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>
9000c6dc:	6838      	ldr	r0, [r7, #0]
9000c6de:	f000 f902 	bl	9000c8e6 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
9000c6e2:	4603      	mov	r3, r0
9000c6e4:	4618      	mov	r0, r3
9000c6e6:	f000 f90a 	bl	9000c8fe <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
9000c6ea:	4603      	mov	r3, r0
9000c6ec:	4619      	mov	r1, r3
9000c6ee:	6878      	ldr	r0, [r7, #4]
9000c6f0:	f000 f926 	bl	9000c940 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
9000c6f4:	687b      	ldr	r3, [r7, #4]
9000c6f6:	4618      	mov	r0, r3
9000c6f8:	3708      	adds	r7, #8
9000c6fa:	46bd      	mov	sp, r7
9000c6fc:	bd80      	pop	{r7, pc}

9000c6fe <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
9000c6fe:	b580      	push	{r7, lr}
9000c700:	b082      	sub	sp, #8
9000c702:	af00      	add	r7, sp, #0
9000c704:	6078      	str	r0, [r7, #4]
9000c706:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
9000c708:	6838      	ldr	r0, [r7, #0]
9000c70a:	f7ff ffcb 	bl	9000c6a4 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
9000c70e:	687b      	ldr	r3, [r7, #4]
9000c710:	4618      	mov	r0, r3
9000c712:	3708      	adds	r7, #8
9000c714:	46bd      	mov	sp, r7
9000c716:	bd80      	pop	{r7, pc}

9000c718 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE15_M_init_functorERSt9_Any_dataOSC_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
9000c718:	b5b0      	push	{r4, r5, r7, lr}
9000c71a:	b084      	sub	sp, #16
9000c71c:	af00      	add	r7, sp, #0
9000c71e:	60f8      	str	r0, [r7, #12]
9000c720:	60b9      	str	r1, [r7, #8]
9000c722:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
9000c724:	68b8      	ldr	r0, [r7, #8]
9000c726:	f7ff fef6 	bl	9000c516 <_ZSt4moveIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEONSt16remove_referenceIT_E4typeEOSE_>
9000c72a:	4605      	mov	r5, r0
9000c72c:	200c      	movs	r0, #12
9000c72e:	f003 fd57 	bl	900101e0 <_Znwj>
9000c732:	4603      	mov	r3, r0
9000c734:	461c      	mov	r4, r3
9000c736:	4629      	mov	r1, r5
9000c738:	4620      	mov	r0, r4
9000c73a:	f7ff fc91 	bl	9000c060 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEC1EOSA_>
9000c73e:	68f8      	ldr	r0, [r7, #12]
9000c740:	f000 f843 	bl	9000c7ca <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
9000c744:	4603      	mov	r3, r0
9000c746:	601c      	str	r4, [r3, #0]
9000c748:	bf00      	nop
9000c74a:	3710      	adds	r7, #16
9000c74c:	46bd      	mov	sp, r7
9000c74e:	bdb0      	pop	{r4, r5, r7, pc}

9000c750 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
9000c750:	b580      	push	{r7, lr}
9000c752:	b082      	sub	sp, #8
9000c754:	af00      	add	r7, sp, #0
9000c756:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
9000c758:	6878      	ldr	r0, [r7, #4]
9000c75a:	f000 f8fe 	bl	9000c95a <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
9000c75e:	4603      	mov	r3, r0
9000c760:	681b      	ldr	r3, [r3, #0]
	}
9000c762:	4618      	mov	r0, r3
9000c764:	3708      	adds	r7, #8
9000c766:	46bd      	mov	sp, r7
9000c768:	bd80      	pop	{r7, pc}

9000c76a <_ZSt10__invoke_rIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueESG_E4typeEOSJ_DpOSK_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
9000c76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c76e:	b086      	sub	sp, #24
9000c770:	af02      	add	r7, sp, #8
9000c772:	60f8      	str	r0, [r7, #12]
9000c774:	60b9      	str	r1, [r7, #8]
9000c776:	607a      	str	r2, [r7, #4]
9000c778:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
9000c77a:	68f8      	ldr	r0, [r7, #12]
9000c77c:	f000 f8f9 	bl	9000c972 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>
9000c780:	4604      	mov	r4, r0
9000c782:	68b8      	ldr	r0, [r7, #8]
9000c784:	f7ff fb0d 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000c788:	4605      	mov	r5, r0
9000c78a:	6878      	ldr	r0, [r7, #4]
9000c78c:	f7ff fb14 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000c790:	4606      	mov	r6, r0
9000c792:	6838      	ldr	r0, [r7, #0]
9000c794:	f7ff fb1b 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000c798:	4603      	mov	r3, r0
9000c79a:	9300      	str	r3, [sp, #0]
9000c79c:	4633      	mov	r3, r6
9000c79e:	462a      	mov	r2, r5
9000c7a0:	4621      	mov	r1, r4
9000c7a2:	4640      	mov	r0, r8
9000c7a4:	f000 f8f0 	bl	9000c988 <_ZSt13__invoke_implIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
9000c7a8:	bf00      	nop
9000c7aa:	3710      	adds	r7, #16
9000c7ac:	46bd      	mov	sp, r7
9000c7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
9000c7b2:	b580      	push	{r7, lr}
9000c7b4:	b082      	sub	sp, #8
9000c7b6:	af00      	add	r7, sp, #0
9000c7b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
9000c7ba:	6878      	ldr	r0, [r7, #4]
9000c7bc:	f7ff fba8 	bl	9000bf10 <_ZNSt9_Any_data9_M_accessEv>
9000c7c0:	4603      	mov	r3, r0
9000c7c2:	4618      	mov	r0, r3
9000c7c4:	3708      	adds	r7, #8
9000c7c6:	46bd      	mov	sp, r7
9000c7c8:	bd80      	pop	{r7, pc}

9000c7ca <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>:
      _M_access()
9000c7ca:	b580      	push	{r7, lr}
9000c7cc:	b082      	sub	sp, #8
9000c7ce:	af00      	add	r7, sp, #0
9000c7d0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
9000c7d2:	6878      	ldr	r0, [r7, #4]
9000c7d4:	f7ff fb9c 	bl	9000bf10 <_ZNSt9_Any_data9_M_accessEv>
9000c7d8:	4603      	mov	r3, r0
9000c7da:	4618      	mov	r0, r3
9000c7dc:	3708      	adds	r7, #8
9000c7de:	46bd      	mov	sp, r7
9000c7e0:	bd80      	pop	{r7, pc}
	...

9000c7e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
9000c7e4:	b5b0      	push	{r4, r5, r7, lr}
9000c7e6:	b084      	sub	sp, #16
9000c7e8:	af00      	add	r7, sp, #0
9000c7ea:	60f8      	str	r0, [r7, #12]
9000c7ec:	60b9      	str	r1, [r7, #8]
9000c7ee:	4613      	mov	r3, r2
9000c7f0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
9000c7f2:	79fb      	ldrb	r3, [r7, #7]
9000c7f4:	2b03      	cmp	r3, #3
9000c7f6:	d827      	bhi.n	9000c848 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
9000c7f8:	a201      	add	r2, pc, #4	; (adr r2, 9000c800 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1c>)
9000c7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000c7fe:	bf00      	nop
9000c800:	9000c811 	.word	0x9000c811
9000c804:	9000c81f 	.word	0x9000c81f
9000c808:	9000c833 	.word	0x9000c833
9000c80c:	9000c83f 	.word	0x9000c83f
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
9000c810:	68f8      	ldr	r0, [r7, #12]
9000c812:	f7ff ffce 	bl	9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
9000c816:	4603      	mov	r3, r0
9000c818:	4a0e      	ldr	r2, [pc, #56]	; (9000c854 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x70>)
9000c81a:	601a      	str	r2, [r3, #0]
	      break;
9000c81c:	e014      	b.n	9000c848 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
9000c81e:	68f8      	ldr	r0, [r7, #12]
9000c820:	f7ff ffd3 	bl	9000c7ca <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
9000c824:	4604      	mov	r4, r0
9000c826:	68b8      	ldr	r0, [r7, #8]
9000c828:	f7ff ff92 	bl	9000c750 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE14_M_get_pointerERKSt9_Any_data>
9000c82c:	4603      	mov	r3, r0
9000c82e:	6023      	str	r3, [r4, #0]
	      break;
9000c830:	e00a      	b.n	9000c848 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
9000c832:	462a      	mov	r2, r5
9000c834:	68b9      	ldr	r1, [r7, #8]
9000c836:	68f8      	ldr	r0, [r7, #12]
9000c838:	f000 f8c6 	bl	9000c9c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>
	      break;
9000c83c:	e004      	b.n	9000c848 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
9000c83e:	4621      	mov	r1, r4
9000c840:	68f8      	ldr	r0, [r7, #12]
9000c842:	f000 f8df 	bl	9000ca04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
9000c846:	bf00      	nop
	  return false;
9000c848:	2300      	movs	r3, #0
	}
9000c84a:	4618      	mov	r0, r3
9000c84c:	3710      	adds	r7, #16
9000c84e:	46bd      	mov	sp, r7
9000c850:	bdb0      	pop	{r4, r5, r7, pc}
9000c852:	bf00      	nop
9000c854:	900140fc 	.word	0x900140fc

9000c858 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEEC1IS1_JRKS3_RKS4_RKS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
9000c858:	b5b0      	push	{r4, r5, r7, lr}
9000c85a:	b084      	sub	sp, #16
9000c85c:	af00      	add	r7, sp, #0
9000c85e:	60f8      	str	r0, [r7, #12]
9000c860:	60b9      	str	r1, [r7, #8]
9000c862:	607a      	str	r2, [r7, #4]
9000c864:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
9000c866:	6878      	ldr	r0, [r7, #4]
9000c868:	f7ff fda2 	bl	9000c3b0 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c86c:	4604      	mov	r4, r0
9000c86e:	6838      	ldr	r0, [r7, #0]
9000c870:	f7ff fda9 	bl	9000c3c6 <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c874:	4605      	mov	r5, r0
9000c876:	6a38      	ldr	r0, [r7, #32]
9000c878:	f7ff fdb0 	bl	9000c3dc <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
9000c87c:	4603      	mov	r3, r0
9000c87e:	462a      	mov	r2, r5
9000c880:	4621      	mov	r1, r4
9000c882:	68f8      	ldr	r0, [r7, #12]
9000c884:	f000 f8d2 	bl	9000ca2c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>
9000c888:	68fc      	ldr	r4, [r7, #12]
9000c88a:	68b8      	ldr	r0, [r7, #8]
9000c88c:	f7ff fd85 	bl	9000c39a <_ZSt7forwardIP5IOBusEOT_RNSt16remove_referenceIS2_E4typeE>
9000c890:	4603      	mov	r3, r0
9000c892:	4619      	mov	r1, r3
9000c894:	4620      	mov	r0, r4
9000c896:	f7ff fe22 	bl	9000c4de <_ZNSt10_Head_baseILj0EP5IOBusLb0EEC1IS1_EEOT_>
9000c89a:	68fb      	ldr	r3, [r7, #12]
9000c89c:	4618      	mov	r0, r3
9000c89e:	3710      	adds	r7, #16
9000c8a0:	46bd      	mov	sp, r7
9000c8a2:	bdb0      	pop	{r4, r5, r7, pc}

9000c8a4 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
9000c8a4:	b480      	push	{r7}
9000c8a6:	b083      	sub	sp, #12
9000c8a8:	af00      	add	r7, sp, #0
9000c8aa:	6078      	str	r0, [r7, #4]
9000c8ac:	687b      	ldr	r3, [r7, #4]
9000c8ae:	4618      	mov	r0, r3
9000c8b0:	370c      	adds	r7, #12
9000c8b2:	46bd      	mov	sp, r7
9000c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c8b8:	4770      	bx	lr

9000c8ba <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
9000c8ba:	b480      	push	{r7}
9000c8bc:	b083      	sub	sp, #12
9000c8be:	af00      	add	r7, sp, #0
9000c8c0:	6078      	str	r0, [r7, #4]
9000c8c2:	687b      	ldr	r3, [r7, #4]
9000c8c4:	4618      	mov	r0, r3
9000c8c6:	370c      	adds	r7, #12
9000c8c8:	46bd      	mov	sp, r7
9000c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c8ce:	4770      	bx	lr

9000c8d0 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
9000c8d0:	b480      	push	{r7}
9000c8d2:	b083      	sub	sp, #12
9000c8d4:	af00      	add	r7, sp, #0
9000c8d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000c8d8:	687b      	ldr	r3, [r7, #4]
9000c8da:	4618      	mov	r0, r3
9000c8dc:	370c      	adds	r7, #12
9000c8de:	46bd      	mov	sp, r7
9000c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c8e4:	4770      	bx	lr

9000c8e6 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
9000c8e6:	b580      	push	{r7, lr}
9000c8e8:	b082      	sub	sp, #8
9000c8ea:	af00      	add	r7, sp, #0
9000c8ec:	6078      	str	r0, [r7, #4]
9000c8ee:	6878      	ldr	r0, [r7, #4]
9000c8f0:	f000 f8b1 	bl	9000ca56 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
9000c8f4:	4603      	mov	r3, r0
9000c8f6:	4618      	mov	r0, r3
9000c8f8:	3708      	adds	r7, #8
9000c8fa:	46bd      	mov	sp, r7
9000c8fc:	bd80      	pop	{r7, pc}

9000c8fe <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000c8fe:	b480      	push	{r7}
9000c900:	b083      	sub	sp, #12
9000c902:	af00      	add	r7, sp, #0
9000c904:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000c906:	687b      	ldr	r3, [r7, #4]
9000c908:	4618      	mov	r0, r3
9000c90a:	370c      	adds	r7, #12
9000c90c:	46bd      	mov	sp, r7
9000c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c912:	4770      	bx	lr

9000c914 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
9000c914:	b580      	push	{r7, lr}
9000c916:	b082      	sub	sp, #8
9000c918:	af00      	add	r7, sp, #0
9000c91a:	6078      	str	r0, [r7, #4]
9000c91c:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
9000c91e:	6838      	ldr	r0, [r7, #0]
9000c920:	f000 f8a4 	bl	9000ca6c <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
9000c924:	4603      	mov	r3, r0
9000c926:	4618      	mov	r0, r3
9000c928:	f000 f8ac 	bl	9000ca84 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
9000c92c:	4603      	mov	r3, r0
9000c92e:	4619      	mov	r1, r3
9000c930:	6878      	ldr	r0, [r7, #4]
9000c932:	f000 f8b2 	bl	9000ca9a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
9000c936:	687b      	ldr	r3, [r7, #4]
9000c938:	4618      	mov	r0, r3
9000c93a:	3708      	adds	r7, #8
9000c93c:	46bd      	mov	sp, r7
9000c93e:	bd80      	pop	{r7, pc}

9000c940 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
9000c940:	b580      	push	{r7, lr}
9000c942:	b082      	sub	sp, #8
9000c944:	af00      	add	r7, sp, #0
9000c946:	6078      	str	r0, [r7, #4]
9000c948:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
9000c94a:	6838      	ldr	r0, [r7, #0]
9000c94c:	f7ff ffd7 	bl	9000c8fe <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
9000c950:	687b      	ldr	r3, [r7, #4]
9000c952:	4618      	mov	r0, r3
9000c954:	3708      	adds	r7, #8
9000c956:	46bd      	mov	sp, r7
9000c958:	bd80      	pop	{r7, pc}

9000c95a <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
9000c95a:	b580      	push	{r7, lr}
9000c95c:	b082      	sub	sp, #8
9000c95e:	af00      	add	r7, sp, #0
9000c960:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
9000c962:	6878      	ldr	r0, [r7, #4]
9000c964:	f7ff fadf 	bl	9000bf26 <_ZNKSt9_Any_data9_M_accessEv>
9000c968:	4603      	mov	r3, r0
9000c96a:	4618      	mov	r0, r3
9000c96c:	3708      	adds	r7, #8
9000c96e:	46bd      	mov	sp, r7
9000c970:	bd80      	pop	{r7, pc}

9000c972 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000c972:	b480      	push	{r7}
9000c974:	b083      	sub	sp, #12
9000c976:	af00      	add	r7, sp, #0
9000c978:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000c97a:	687b      	ldr	r3, [r7, #4]
9000c97c:	4618      	mov	r0, r3
9000c97e:	370c      	adds	r7, #12
9000c980:	46bd      	mov	sp, r7
9000c982:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c986:	4770      	bx	lr

9000c988 <_ZSt13__invoke_implIvRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEJhS2_mEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
9000c988:	b5f0      	push	{r4, r5, r6, r7, lr}
9000c98a:	b085      	sub	sp, #20
9000c98c:	af00      	add	r7, sp, #0
9000c98e:	7338      	strb	r0, [r7, #12]
9000c990:	60b9      	str	r1, [r7, #8]
9000c992:	607a      	str	r2, [r7, #4]
9000c994:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
9000c996:	68b8      	ldr	r0, [r7, #8]
9000c998:	f7ff ffeb 	bl	9000c972 <_ZSt7forwardIRSt5_BindIFM5IOBusFvhPhmEPS1_St12_PlaceholderILi1EES6_ILi2EES6_ILi3EEEEEOT_RNSt16remove_referenceISD_E4typeE>
9000c99c:	4604      	mov	r4, r0
9000c99e:	6878      	ldr	r0, [r7, #4]
9000c9a0:	f7ff f9ff 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000c9a4:	4605      	mov	r5, r0
9000c9a6:	6838      	ldr	r0, [r7, #0]
9000c9a8:	f7ff fa06 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000c9ac:	4606      	mov	r6, r0
9000c9ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000c9b0:	f7ff fa0d 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000c9b4:	4603      	mov	r3, r0
9000c9b6:	4632      	mov	r2, r6
9000c9b8:	4629      	mov	r1, r5
9000c9ba:	4620      	mov	r0, r4
9000c9bc:	f000 f87a 	bl	9000cab4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>
9000c9c0:	bf00      	nop
9000c9c2:	3714      	adds	r7, #20
9000c9c4:	46bd      	mov	sp, r7
9000c9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000c9c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE8_M_cloneERSt9_Any_dataRKSE_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
9000c9c8:	b5b0      	push	{r4, r5, r7, lr}
9000c9ca:	b084      	sub	sp, #16
9000c9cc:	af00      	add	r7, sp, #0
9000c9ce:	60f8      	str	r0, [r7, #12]
9000c9d0:	60b9      	str	r1, [r7, #8]
9000c9d2:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
9000c9d4:	68b8      	ldr	r0, [r7, #8]
9000c9d6:	f000 f891 	bl	9000cafc <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>
9000c9da:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
9000c9dc:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
9000c9de:	200c      	movs	r0, #12
9000c9e0:	f003 fbfe 	bl	900101e0 <_Znwj>
9000c9e4:	4603      	mov	r3, r0
9000c9e6:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
9000c9e8:	4623      	mov	r3, r4
9000c9ea:	462a      	mov	r2, r5
9000c9ec:	ca07      	ldmia	r2, {r0, r1, r2}
9000c9ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
9000c9f2:	68f8      	ldr	r0, [r7, #12]
9000c9f4:	f7ff fee9 	bl	9000c7ca <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
9000c9f8:	4603      	mov	r3, r0
9000c9fa:	601c      	str	r4, [r3, #0]
	}
9000c9fc:	bf00      	nop
9000c9fe:	3710      	adds	r7, #16
9000ca00:	46bd      	mov	sp, r7
9000ca02:	bdb0      	pop	{r4, r5, r7, pc}

9000ca04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
9000ca04:	b580      	push	{r7, lr}
9000ca06:	b082      	sub	sp, #8
9000ca08:	af00      	add	r7, sp, #0
9000ca0a:	6078      	str	r0, [r7, #4]
9000ca0c:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
9000ca0e:	6878      	ldr	r0, [r7, #4]
9000ca10:	f7ff fedb 	bl	9000c7ca <_ZNSt9_Any_data9_M_accessIPSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERT_v>
9000ca14:	4603      	mov	r3, r0
9000ca16:	681b      	ldr	r3, [r3, #0]
9000ca18:	2b00      	cmp	r3, #0
9000ca1a:	d003      	beq.n	9000ca24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
9000ca1c:	210c      	movs	r1, #12
9000ca1e:	4618      	mov	r0, r3
9000ca20:	f003 fdc2 	bl	900105a8 <_ZdlPvj>
	}
9000ca24:	bf00      	nop
9000ca26:	3708      	adds	r7, #8
9000ca28:	46bd      	mov	sp, r7
9000ca2a:	bd80      	pop	{r7, pc}

9000ca2c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
9000ca2c:	b580      	push	{r7, lr}
9000ca2e:	b084      	sub	sp, #16
9000ca30:	af00      	add	r7, sp, #0
9000ca32:	60f8      	str	r0, [r7, #12]
9000ca34:	60b9      	str	r1, [r7, #8]
9000ca36:	607a      	str	r2, [r7, #4]
9000ca38:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
9000ca3a:	683a      	ldr	r2, [r7, #0]
9000ca3c:	6879      	ldr	r1, [r7, #4]
9000ca3e:	68f8      	ldr	r0, [r7, #12]
9000ca40:	f000 f868 	bl	9000cb14 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>
9000ca44:	68b9      	ldr	r1, [r7, #8]
9000ca46:	68f8      	ldr	r0, [r7, #12]
9000ca48:	f000 f877 	bl	9000cb3a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
9000ca4c:	68fb      	ldr	r3, [r7, #12]
9000ca4e:	4618      	mov	r0, r3
9000ca50:	3710      	adds	r7, #16
9000ca52:	46bd      	mov	sp, r7
9000ca54:	bd80      	pop	{r7, pc}

9000ca56 <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
9000ca56:	b480      	push	{r7}
9000ca58:	b083      	sub	sp, #12
9000ca5a:	af00      	add	r7, sp, #0
9000ca5c:	6078      	str	r0, [r7, #4]
9000ca5e:	687b      	ldr	r3, [r7, #4]
9000ca60:	4618      	mov	r0, r3
9000ca62:	370c      	adds	r7, #12
9000ca64:	46bd      	mov	sp, r7
9000ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ca6a:	4770      	bx	lr

9000ca6c <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
9000ca6c:	b580      	push	{r7, lr}
9000ca6e:	b082      	sub	sp, #8
9000ca70:	af00      	add	r7, sp, #0
9000ca72:	6078      	str	r0, [r7, #4]
9000ca74:	6878      	ldr	r0, [r7, #4]
9000ca76:	f000 f86c 	bl	9000cb52 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
9000ca7a:	4603      	mov	r3, r0
9000ca7c:	4618      	mov	r0, r3
9000ca7e:	3708      	adds	r7, #8
9000ca80:	46bd      	mov	sp, r7
9000ca82:	bd80      	pop	{r7, pc}

9000ca84 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000ca84:	b480      	push	{r7}
9000ca86:	b083      	sub	sp, #12
9000ca88:	af00      	add	r7, sp, #0
9000ca8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000ca8c:	687b      	ldr	r3, [r7, #4]
9000ca8e:	4618      	mov	r0, r3
9000ca90:	370c      	adds	r7, #12
9000ca92:	46bd      	mov	sp, r7
9000ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ca98:	4770      	bx	lr

9000ca9a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
9000ca9a:	b580      	push	{r7, lr}
9000ca9c:	b082      	sub	sp, #8
9000ca9e:	af00      	add	r7, sp, #0
9000caa0:	6078      	str	r0, [r7, #4]
9000caa2:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
9000caa4:	6838      	ldr	r0, [r7, #0]
9000caa6:	f7ff ffed 	bl	9000ca84 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
9000caaa:	687b      	ldr	r3, [r7, #4]
9000caac:	4618      	mov	r0, r3
9000caae:	3708      	adds	r7, #8
9000cab0:	46bd      	mov	sp, r7
9000cab2:	bd80      	pop	{r7, pc}

9000cab4 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEEclIJhS1_mEvEET0_DpOT_>:
	operator()(_Args&&... __args)
9000cab4:	b5f0      	push	{r4, r5, r6, r7, lr}
9000cab6:	b089      	sub	sp, #36	; 0x24
9000cab8:	af00      	add	r7, sp, #0
9000caba:	60f8      	str	r0, [r7, #12]
9000cabc:	60b9      	str	r1, [r7, #8]
9000cabe:	607a      	str	r2, [r7, #4]
9000cac0:	603b      	str	r3, [r7, #0]
	  return this->__call<_Result>(
9000cac2:	68b8      	ldr	r0, [r7, #8]
9000cac4:	f7ff f96d 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000cac8:	4604      	mov	r4, r0
9000caca:	6878      	ldr	r0, [r7, #4]
9000cacc:	f7ff f974 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000cad0:	4605      	mov	r5, r0
9000cad2:	6838      	ldr	r0, [r7, #0]
9000cad4:	f7ff f97b 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000cad8:	4603      	mov	r3, r0
9000cada:	f107 0014 	add.w	r0, r7, #20
9000cade:	462a      	mov	r2, r5
9000cae0:	4621      	mov	r1, r4
9000cae2:	f000 f841 	bl	9000cb68 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>
9000cae6:	f107 0314 	add.w	r3, r7, #20
9000caea:	4632      	mov	r2, r6
9000caec:	4619      	mov	r1, r3
9000caee:	68f8      	ldr	r0, [r7, #12]
9000caf0:	f000 f856 	bl	9000cba0 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	      _Bound_indexes());
9000caf4:	bf00      	nop
	}
9000caf6:	3724      	adds	r7, #36	; 0x24
9000caf8:	46bd      	mov	sp, r7
9000cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000cafc <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFM5IOBusFvhPhmEPS2_St12_PlaceholderILi1EES7_ILi2EES7_ILi3EEEEEERKT_v>:
      _M_access() const
9000cafc:	b580      	push	{r7, lr}
9000cafe:	b082      	sub	sp, #8
9000cb00:	af00      	add	r7, sp, #0
9000cb02:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
9000cb04:	6878      	ldr	r0, [r7, #4]
9000cb06:	f7ff fa0e 	bl	9000bf26 <_ZNKSt9_Any_data9_M_accessEv>
9000cb0a:	4603      	mov	r3, r0
9000cb0c:	4618      	mov	r0, r3
9000cb0e:	3708      	adds	r7, #8
9000cb10:	46bd      	mov	sp, r7
9000cb12:	bd80      	pop	{r7, pc}

9000cb14 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
9000cb14:	b580      	push	{r7, lr}
9000cb16:	b084      	sub	sp, #16
9000cb18:	af00      	add	r7, sp, #0
9000cb1a:	60f8      	str	r0, [r7, #12]
9000cb1c:	60b9      	str	r1, [r7, #8]
9000cb1e:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
9000cb20:	6879      	ldr	r1, [r7, #4]
9000cb22:	68f8      	ldr	r0, [r7, #12]
9000cb24:	f000 f884 	bl	9000cc30 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>
9000cb28:	68b9      	ldr	r1, [r7, #8]
9000cb2a:	68f8      	ldr	r0, [r7, #12]
9000cb2c:	f000 f88e 	bl	9000cc4c <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
9000cb30:	68fb      	ldr	r3, [r7, #12]
9000cb32:	4618      	mov	r0, r3
9000cb34:	3710      	adds	r7, #16
9000cb36:	46bd      	mov	sp, r7
9000cb38:	bd80      	pop	{r7, pc}

9000cb3a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
9000cb3a:	b480      	push	{r7}
9000cb3c:	b083      	sub	sp, #12
9000cb3e:	af00      	add	r7, sp, #0
9000cb40:	6078      	str	r0, [r7, #4]
9000cb42:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
9000cb44:	687b      	ldr	r3, [r7, #4]
9000cb46:	4618      	mov	r0, r3
9000cb48:	370c      	adds	r7, #12
9000cb4a:	46bd      	mov	sp, r7
9000cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000cb50:	4770      	bx	lr

9000cb52 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
9000cb52:	b480      	push	{r7}
9000cb54:	b083      	sub	sp, #12
9000cb56:	af00      	add	r7, sp, #0
9000cb58:	6078      	str	r0, [r7, #4]
9000cb5a:	687b      	ldr	r3, [r7, #4]
9000cb5c:	4618      	mov	r0, r3
9000cb5e:	370c      	adds	r7, #12
9000cb60:	46bd      	mov	sp, r7
9000cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
9000cb66:	4770      	bx	lr

9000cb68 <_ZSt16forward_as_tupleIJhPhmEESt5tupleIJDpOT_EES4_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
9000cb68:	b5b0      	push	{r4, r5, r7, lr}
9000cb6a:	b084      	sub	sp, #16
9000cb6c:	af00      	add	r7, sp, #0
9000cb6e:	60f8      	str	r0, [r7, #12]
9000cb70:	60b9      	str	r1, [r7, #8]
9000cb72:	607a      	str	r2, [r7, #4]
9000cb74:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
9000cb76:	68b8      	ldr	r0, [r7, #8]
9000cb78:	f7ff f913 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000cb7c:	4604      	mov	r4, r0
9000cb7e:	6878      	ldr	r0, [r7, #4]
9000cb80:	f7ff f91a 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000cb84:	4605      	mov	r5, r0
9000cb86:	6838      	ldr	r0, [r7, #0]
9000cb88:	f7ff f921 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000cb8c:	4603      	mov	r3, r0
9000cb8e:	462a      	mov	r2, r5
9000cb90:	4621      	mov	r1, r4
9000cb92:	68f8      	ldr	r0, [r7, #12]
9000cb94:	f000 f866 	bl	9000cc64 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1ELb1EEEDpOT_>
9000cb98:	68f8      	ldr	r0, [r7, #12]
9000cb9a:	3710      	adds	r7, #16
9000cb9c:	46bd      	mov	sp, r7
9000cb9e:	bdb0      	pop	{r4, r5, r7, pc}

9000cba0 <_ZNSt5_BindIFM5IOBusFvhPhmEPS0_St12_PlaceholderILi1EES5_ILi2EES5_ILi3EEEE6__callIvJOhOS1_OmEJLj0ELj1ELj2ELj3EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
9000cba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cba4:	b08a      	sub	sp, #40	; 0x28
9000cba6:	af02      	add	r7, sp, #8
9000cba8:	60f8      	str	r0, [r7, #12]
9000cbaa:	60b9      	str	r1, [r7, #8]
9000cbac:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
9000cbae:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
9000cbb0:	68fb      	ldr	r3, [r7, #12]
9000cbb2:	3308      	adds	r3, #8
9000cbb4:	4618      	mov	r0, r3
9000cbb6:	f000 f873 	bl	9000cca0 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
9000cbba:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
9000cbbc:	f107 0310 	add.w	r3, r7, #16
9000cbc0:	68ba      	ldr	r2, [r7, #8]
9000cbc2:	4618      	mov	r0, r3
9000cbc4:	f000 f879 	bl	9000ccba <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>
9000cbc8:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
9000cbca:	68fb      	ldr	r3, [r7, #12]
9000cbcc:	3308      	adds	r3, #8
9000cbce:	4618      	mov	r0, r3
9000cbd0:	f000 f881 	bl	9000ccd6 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
9000cbd4:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
9000cbd6:	f107 0314 	add.w	r3, r7, #20
9000cbda:	68ba      	ldr	r2, [r7, #8]
9000cbdc:	4618      	mov	r0, r3
9000cbde:	f000 f886 	bl	9000ccee <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>
9000cbe2:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
9000cbe4:	68fb      	ldr	r3, [r7, #12]
9000cbe6:	3308      	adds	r3, #8
9000cbe8:	4618      	mov	r0, r3
9000cbea:	f000 f892 	bl	9000cd12 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
9000cbee:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
9000cbf0:	f107 0318 	add.w	r3, r7, #24
9000cbf4:	68ba      	ldr	r2, [r7, #8]
9000cbf6:	4618      	mov	r0, r3
9000cbf8:	f000 f897 	bl	9000cd2a <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>
9000cbfc:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
9000cbfe:	68fb      	ldr	r3, [r7, #12]
9000cc00:	3308      	adds	r3, #8
9000cc02:	4618      	mov	r0, r3
9000cc04:	f000 f8a3 	bl	9000cd4e <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
9000cc08:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
9000cc0a:	f107 031c 	add.w	r3, r7, #28
9000cc0e:	68ba      	ldr	r2, [r7, #8]
9000cc10:	4618      	mov	r0, r3
9000cc12:	f000 f8a8 	bl	9000cd66 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>
9000cc16:	4603      	mov	r3, r0
9000cc18:	9300      	str	r3, [sp, #0]
9000cc1a:	4643      	mov	r3, r8
9000cc1c:	4632      	mov	r2, r6
9000cc1e:	4629      	mov	r1, r5
9000cc20:	4620      	mov	r0, r4
9000cc22:	f000 f8b2 	bl	9000cd8a <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>
	      );
9000cc26:	bf00      	nop
	}
9000cc28:	3720      	adds	r7, #32
9000cc2a:	46bd      	mov	sp, r7
9000cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9000cc30 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
9000cc30:	b580      	push	{r7, lr}
9000cc32:	b082      	sub	sp, #8
9000cc34:	af00      	add	r7, sp, #0
9000cc36:	6078      	str	r0, [r7, #4]
9000cc38:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
9000cc3a:	6839      	ldr	r1, [r7, #0]
9000cc3c:	6878      	ldr	r0, [r7, #4]
9000cc3e:	f000 f8cd 	bl	9000cddc <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
9000cc42:	687b      	ldr	r3, [r7, #4]
9000cc44:	4618      	mov	r0, r3
9000cc46:	3708      	adds	r7, #8
9000cc48:	46bd      	mov	sp, r7
9000cc4a:	bd80      	pop	{r7, pc}

9000cc4c <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
9000cc4c:	b480      	push	{r7}
9000cc4e:	b083      	sub	sp, #12
9000cc50:	af00      	add	r7, sp, #0
9000cc52:	6078      	str	r0, [r7, #4]
9000cc54:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
9000cc56:	687b      	ldr	r3, [r7, #4]
9000cc58:	4618      	mov	r0, r3
9000cc5a:	370c      	adds	r7, #12
9000cc5c:	46bd      	mov	sp, r7
9000cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000cc62:	4770      	bx	lr

9000cc64 <_ZNSt5tupleIJOhOPhOmEEC1IJhS1_mELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
9000cc64:	b5f0      	push	{r4, r5, r6, r7, lr}
9000cc66:	b085      	sub	sp, #20
9000cc68:	af00      	add	r7, sp, #0
9000cc6a:	60f8      	str	r0, [r7, #12]
9000cc6c:	60b9      	str	r1, [r7, #8]
9000cc6e:	607a      	str	r2, [r7, #4]
9000cc70:	603b      	str	r3, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
9000cc72:	68fc      	ldr	r4, [r7, #12]
9000cc74:	68b8      	ldr	r0, [r7, #8]
9000cc76:	f7ff f894 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000cc7a:	4605      	mov	r5, r0
9000cc7c:	6878      	ldr	r0, [r7, #4]
9000cc7e:	f7ff f89b 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000cc82:	4606      	mov	r6, r0
9000cc84:	6838      	ldr	r0, [r7, #0]
9000cc86:	f7ff f8a2 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000cc8a:	4603      	mov	r3, r0
9000cc8c:	4632      	mov	r2, r6
9000cc8e:	4629      	mov	r1, r5
9000cc90:	4620      	mov	r0, r4
9000cc92:	f000 f8af 	bl	9000cdf4 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>
9000cc96:	68fb      	ldr	r3, [r7, #12]
9000cc98:	4618      	mov	r0, r3
9000cc9a:	3714      	adds	r7, #20
9000cc9c:	46bd      	mov	sp, r7
9000cc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000cca0 <_ZSt3getILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
9000cca0:	b580      	push	{r7, lr}
9000cca2:	b082      	sub	sp, #8
9000cca4:	af00      	add	r7, sp, #0
9000cca6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
9000cca8:	687b      	ldr	r3, [r7, #4]
9000ccaa:	4618      	mov	r0, r3
9000ccac:	f000 f8f0 	bl	9000ce90 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
9000ccb0:	4603      	mov	r3, r0
9000ccb2:	4618      	mov	r0, r3
9000ccb4:	3708      	adds	r7, #8
9000ccb6:	46bd      	mov	sp, r7
9000ccb8:	bd80      	pop	{r7, pc}

9000ccba <_ZNVKSt3_MuIP5IOBusLb0ELb0EEclIRS1_St5tupleIJOhOPhOmEEEEOT_SC_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
9000ccba:	b580      	push	{r7, lr}
9000ccbc:	b084      	sub	sp, #16
9000ccbe:	af00      	add	r7, sp, #0
9000ccc0:	60f8      	str	r0, [r7, #12]
9000ccc2:	60b9      	str	r1, [r7, #8]
9000ccc4:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
9000ccc6:	68b8      	ldr	r0, [r7, #8]
9000ccc8:	f000 f8ee 	bl	9000cea8 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
9000cccc:	4603      	mov	r3, r0
9000ccce:	4618      	mov	r0, r3
9000ccd0:	3710      	adds	r7, #16
9000ccd2:	46bd      	mov	sp, r7
9000ccd4:	bd80      	pop	{r7, pc}

9000ccd6 <_ZSt3getILj1EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
9000ccd6:	b580      	push	{r7, lr}
9000ccd8:	b082      	sub	sp, #8
9000ccda:	af00      	add	r7, sp, #0
9000ccdc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
9000ccde:	6878      	ldr	r0, [r7, #4]
9000cce0:	f000 f8ed 	bl	9000cebe <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
9000cce4:	4603      	mov	r3, r0
9000cce6:	4618      	mov	r0, r3
9000cce8:	3708      	adds	r7, #8
9000ccea:	46bd      	mov	sp, r7
9000ccec:	bd80      	pop	{r7, pc}

9000ccee <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
9000ccee:	b580      	push	{r7, lr}
9000ccf0:	b084      	sub	sp, #16
9000ccf2:	af00      	add	r7, sp, #0
9000ccf4:	60f8      	str	r0, [r7, #12]
9000ccf6:	60b9      	str	r1, [r7, #8]
9000ccf8:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
9000ccfa:	6878      	ldr	r0, [r7, #4]
9000ccfc:	f000 f8eb 	bl	9000ced6 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
9000cd00:	4603      	mov	r3, r0
9000cd02:	4618      	mov	r0, r3
9000cd04:	f000 f8f2 	bl	9000ceec <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
9000cd08:	4603      	mov	r3, r0
	}
9000cd0a:	4618      	mov	r0, r3
9000cd0c:	3710      	adds	r7, #16
9000cd0e:	46bd      	mov	sp, r7
9000cd10:	bd80      	pop	{r7, pc}

9000cd12 <_ZSt3getILj2EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
9000cd12:	b580      	push	{r7, lr}
9000cd14:	b082      	sub	sp, #8
9000cd16:	af00      	add	r7, sp, #0
9000cd18:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
9000cd1a:	6878      	ldr	r0, [r7, #4]
9000cd1c:	f000 f8f6 	bl	9000cf0c <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
9000cd20:	4603      	mov	r3, r0
9000cd22:	4618      	mov	r0, r3
9000cd24:	3708      	adds	r7, #8
9000cd26:	46bd      	mov	sp, r7
9000cd28:	bd80      	pop	{r7, pc}

9000cd2a <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
9000cd2a:	b580      	push	{r7, lr}
9000cd2c:	b084      	sub	sp, #16
9000cd2e:	af00      	add	r7, sp, #0
9000cd30:	60f8      	str	r0, [r7, #12]
9000cd32:	60b9      	str	r1, [r7, #8]
9000cd34:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
9000cd36:	6878      	ldr	r0, [r7, #4]
9000cd38:	f000 f8cd 	bl	9000ced6 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
9000cd3c:	4603      	mov	r3, r0
9000cd3e:	4618      	mov	r0, r3
9000cd40:	f000 f8f0 	bl	9000cf24 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
9000cd44:	4603      	mov	r3, r0
	}
9000cd46:	4618      	mov	r0, r3
9000cd48:	3710      	adds	r7, #16
9000cd4a:	46bd      	mov	sp, r7
9000cd4c:	bd80      	pop	{r7, pc}

9000cd4e <_ZSt3getILj3EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
9000cd4e:	b580      	push	{r7, lr}
9000cd50:	b082      	sub	sp, #8
9000cd52:	af00      	add	r7, sp, #0
9000cd54:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
9000cd56:	6878      	ldr	r0, [r7, #4]
9000cd58:	f000 f8f4 	bl	9000cf44 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
9000cd5c:	4603      	mov	r3, r0
9000cd5e:	4618      	mov	r0, r3
9000cd60:	3708      	adds	r7, #8
9000cd62:	46bd      	mov	sp, r7
9000cd64:	bd80      	pop	{r7, pc}

9000cd66 <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJOhOPhOmEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESC_EE4type4typeERVKS1_RSC_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
9000cd66:	b580      	push	{r7, lr}
9000cd68:	b084      	sub	sp, #16
9000cd6a:	af00      	add	r7, sp, #0
9000cd6c:	60f8      	str	r0, [r7, #12]
9000cd6e:	60b9      	str	r1, [r7, #8]
9000cd70:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
9000cd72:	6878      	ldr	r0, [r7, #4]
9000cd74:	f000 f8af 	bl	9000ced6 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>
9000cd78:	4603      	mov	r3, r0
9000cd7a:	4618      	mov	r0, r3
9000cd7c:	f000 f8ee 	bl	9000cf5c <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>
9000cd80:	4603      	mov	r3, r0
	}
9000cd82:	4618      	mov	r0, r3
9000cd84:	3710      	adds	r7, #16
9000cd86:	46bd      	mov	sp, r7
9000cd88:	bd80      	pop	{r7, pc}

9000cd8a <_ZSt8__invokeIRM5IOBusFvhPhmEJRPS0_hS1_mEENSt15__invoke_resultIT_JDpT0_EE4typeEOS8_DpOS9_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
9000cd8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000cd8e:	b087      	sub	sp, #28
9000cd90:	af02      	add	r7, sp, #8
9000cd92:	60f8      	str	r0, [r7, #12]
9000cd94:	60b9      	str	r1, [r7, #8]
9000cd96:	607a      	str	r2, [r7, #4]
9000cd98:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
9000cd9a:	68f8      	ldr	r0, [r7, #12]
9000cd9c:	f000 f8ee 	bl	9000cf7c <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>
9000cda0:	4605      	mov	r5, r0
9000cda2:	68b8      	ldr	r0, [r7, #8]
9000cda4:	f000 f880 	bl	9000cea8 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
9000cda8:	4606      	mov	r6, r0
9000cdaa:	6878      	ldr	r0, [r7, #4]
9000cdac:	f7fe fff9 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000cdb0:	4680      	mov	r8, r0
9000cdb2:	6838      	ldr	r0, [r7, #0]
9000cdb4:	f7ff f800 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000cdb8:	4604      	mov	r4, r0
9000cdba:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000cdbc:	f7ff f807 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000cdc0:	4603      	mov	r3, r0
9000cdc2:	9301      	str	r3, [sp, #4]
9000cdc4:	9400      	str	r4, [sp, #0]
9000cdc6:	4643      	mov	r3, r8
9000cdc8:	4632      	mov	r2, r6
9000cdca:	4629      	mov	r1, r5
9000cdcc:	4648      	mov	r0, r9
9000cdce:	f000 f8e0 	bl	9000cf92 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
9000cdd2:	bf00      	nop
    }
9000cdd4:	3714      	adds	r7, #20
9000cdd6:	46bd      	mov	sp, r7
9000cdd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

9000cddc <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
9000cddc:	b480      	push	{r7}
9000cdde:	b083      	sub	sp, #12
9000cde0:	af00      	add	r7, sp, #0
9000cde2:	6078      	str	r0, [r7, #4]
9000cde4:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
9000cde6:	687b      	ldr	r3, [r7, #4]
9000cde8:	4618      	mov	r0, r3
9000cdea:	370c      	adds	r7, #12
9000cdec:	46bd      	mov	sp, r7
9000cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
9000cdf2:	4770      	bx	lr

9000cdf4 <_ZNSt11_Tuple_implILj0EJOhOPhOmEEC1IhJS1_mEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
9000cdf4:	b5b0      	push	{r4, r5, r7, lr}
9000cdf6:	b084      	sub	sp, #16
9000cdf8:	af00      	add	r7, sp, #0
9000cdfa:	60f8      	str	r0, [r7, #12]
9000cdfc:	60b9      	str	r1, [r7, #8]
9000cdfe:	607a      	str	r2, [r7, #4]
9000ce00:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
9000ce02:	68fc      	ldr	r4, [r7, #12]
9000ce04:	6878      	ldr	r0, [r7, #4]
9000ce06:	f7fe ffd7 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000ce0a:	4605      	mov	r5, r0
9000ce0c:	6838      	ldr	r0, [r7, #0]
9000ce0e:	f7fe ffde 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000ce12:	4603      	mov	r3, r0
9000ce14:	461a      	mov	r2, r3
9000ce16:	4629      	mov	r1, r5
9000ce18:	4620      	mov	r0, r4
9000ce1a:	f000 f8f4 	bl	9000d006 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>
9000ce1e:	68fb      	ldr	r3, [r7, #12]
9000ce20:	f103 0408 	add.w	r4, r3, #8
9000ce24:	68b8      	ldr	r0, [r7, #8]
9000ce26:	f7fe ffbc 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000ce2a:	4603      	mov	r3, r0
9000ce2c:	4619      	mov	r1, r3
9000ce2e:	4620      	mov	r0, r4
9000ce30:	f000 f81e 	bl	9000ce70 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
9000ce34:	68fb      	ldr	r3, [r7, #12]
9000ce36:	4618      	mov	r0, r3
9000ce38:	3710      	adds	r7, #16
9000ce3a:	46bd      	mov	sp, r7
9000ce3c:	bdb0      	pop	{r4, r5, r7, pc}

9000ce3e <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
9000ce3e:	b580      	push	{r7, lr}
9000ce40:	b082      	sub	sp, #8
9000ce42:	af00      	add	r7, sp, #0
9000ce44:	6078      	str	r0, [r7, #4]
9000ce46:	687b      	ldr	r3, [r7, #4]
9000ce48:	3308      	adds	r3, #8
9000ce4a:	4618      	mov	r0, r3
9000ce4c:	f000 f8f9 	bl	9000d042 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
9000ce50:	4603      	mov	r3, r0
9000ce52:	4618      	mov	r0, r3
9000ce54:	3708      	adds	r7, #8
9000ce56:	46bd      	mov	sp, r7
9000ce58:	bd80      	pop	{r7, pc}

9000ce5a <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000ce5a:	b480      	push	{r7}
9000ce5c:	b083      	sub	sp, #12
9000ce5e:	af00      	add	r7, sp, #0
9000ce60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000ce62:	687b      	ldr	r3, [r7, #4]
9000ce64:	4618      	mov	r0, r3
9000ce66:	370c      	adds	r7, #12
9000ce68:	46bd      	mov	sp, r7
9000ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ce6e:	4770      	bx	lr

9000ce70 <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
9000ce70:	b580      	push	{r7, lr}
9000ce72:	b082      	sub	sp, #8
9000ce74:	af00      	add	r7, sp, #0
9000ce76:	6078      	str	r0, [r7, #4]
9000ce78:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
9000ce7a:	6838      	ldr	r0, [r7, #0]
9000ce7c:	f7fe ff91 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000ce80:	4602      	mov	r2, r0
9000ce82:	687b      	ldr	r3, [r7, #4]
9000ce84:	601a      	str	r2, [r3, #0]
9000ce86:	687b      	ldr	r3, [r7, #4]
9000ce88:	4618      	mov	r0, r3
9000ce8a:	3708      	adds	r7, #8
9000ce8c:	46bd      	mov	sp, r7
9000ce8e:	bd80      	pop	{r7, pc}

9000ce90 <_ZSt12__get_helperILj0EP5IOBusJSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
9000ce90:	b580      	push	{r7, lr}
9000ce92:	b082      	sub	sp, #8
9000ce94:	af00      	add	r7, sp, #0
9000ce96:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
9000ce98:	6878      	ldr	r0, [r7, #4]
9000ce9a:	f7ff faf1 	bl	9000c480 <_ZNSt11_Tuple_implILj0EJP5IOBusSt12_PlaceholderILi1EES2_ILi2EES2_ILi3EEEE7_M_headERS6_>
9000ce9e:	4603      	mov	r3, r0
9000cea0:	4618      	mov	r0, r3
9000cea2:	3708      	adds	r7, #8
9000cea4:	46bd      	mov	sp, r7
9000cea6:	bd80      	pop	{r7, pc}

9000cea8 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000cea8:	b480      	push	{r7}
9000ceaa:	b083      	sub	sp, #12
9000ceac:	af00      	add	r7, sp, #0
9000ceae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000ceb0:	687b      	ldr	r3, [r7, #4]
9000ceb2:	4618      	mov	r0, r3
9000ceb4:	370c      	adds	r7, #12
9000ceb6:	46bd      	mov	sp, r7
9000ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000cebc:	4770      	bx	lr

9000cebe <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
9000cebe:	b580      	push	{r7, lr}
9000cec0:	b082      	sub	sp, #8
9000cec2:	af00      	add	r7, sp, #0
9000cec4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
9000cec6:	6878      	ldr	r0, [r7, #4]
9000cec8:	f7ff fbe0 	bl	9000c68c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EEEE7_M_headERS4_>
9000cecc:	4603      	mov	r3, r0
9000cece:	4618      	mov	r0, r3
9000ced0:	3708      	adds	r7, #8
9000ced2:	46bd      	mov	sp, r7
9000ced4:	bd80      	pop	{r7, pc}

9000ced6 <_ZSt4moveIRSt5tupleIJOhOPhOmEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
9000ced6:	b480      	push	{r7}
9000ced8:	b083      	sub	sp, #12
9000ceda:	af00      	add	r7, sp, #0
9000cedc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000cede:	687b      	ldr	r3, [r7, #4]
9000cee0:	4618      	mov	r0, r3
9000cee2:	370c      	adds	r7, #12
9000cee4:	46bd      	mov	sp, r7
9000cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ceea:	4770      	bx	lr

9000ceec <_ZSt3getILj0EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
9000ceec:	b580      	push	{r7, lr}
9000ceee:	b082      	sub	sp, #8
9000cef0:	af00      	add	r7, sp, #0
9000cef2:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
9000cef4:	6878      	ldr	r0, [r7, #4]
9000cef6:	f000 f8d9 	bl	9000d0ac <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
9000cefa:	4603      	mov	r3, r0
9000cefc:	4618      	mov	r0, r3
9000cefe:	f7ff ffac 	bl	9000ce5a <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
9000cf02:	4603      	mov	r3, r0
    }
9000cf04:	4618      	mov	r0, r3
9000cf06:	3708      	adds	r7, #8
9000cf08:	46bd      	mov	sp, r7
9000cf0a:	bd80      	pop	{r7, pc}

9000cf0c <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
9000cf0c:	b580      	push	{r7, lr}
9000cf0e:	b082      	sub	sp, #8
9000cf10:	af00      	add	r7, sp, #0
9000cf12:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
9000cf14:	6878      	ldr	r0, [r7, #4]
9000cf16:	f7ff fce6 	bl	9000c8e6 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EEEE7_M_headERS3_>
9000cf1a:	4603      	mov	r3, r0
9000cf1c:	4618      	mov	r0, r3
9000cf1e:	3708      	adds	r7, #8
9000cf20:	46bd      	mov	sp, r7
9000cf22:	bd80      	pop	{r7, pc}

9000cf24 <_ZSt3getILj1EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
9000cf24:	b580      	push	{r7, lr}
9000cf26:	b082      	sub	sp, #8
9000cf28:	af00      	add	r7, sp, #0
9000cf2a:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
9000cf2c:	6878      	ldr	r0, [r7, #4]
9000cf2e:	f000 f8ca 	bl	9000d0c6 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
9000cf32:	4603      	mov	r3, r0
9000cf34:	4618      	mov	r0, r3
9000cf36:	f000 f89e 	bl	9000d076 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>
9000cf3a:	4603      	mov	r3, r0
    }
9000cf3c:	4618      	mov	r0, r3
9000cf3e:	3708      	adds	r7, #8
9000cf40:	46bd      	mov	sp, r7
9000cf42:	bd80      	pop	{r7, pc}

9000cf44 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
9000cf44:	b580      	push	{r7, lr}
9000cf46:	b082      	sub	sp, #8
9000cf48:	af00      	add	r7, sp, #0
9000cf4a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
9000cf4c:	6878      	ldr	r0, [r7, #4]
9000cf4e:	f7ff fd8d 	bl	9000ca6c <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EEEE7_M_headERS2_>
9000cf52:	4603      	mov	r3, r0
9000cf54:	4618      	mov	r0, r3
9000cf56:	3708      	adds	r7, #8
9000cf58:	46bd      	mov	sp, r7
9000cf5a:	bd80      	pop	{r7, pc}

9000cf5c <_ZSt3getILj2EJOhOPhOmEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOS8_>:
    get(tuple<_Elements...>&& __t) noexcept
9000cf5c:	b580      	push	{r7, lr}
9000cf5e:	b082      	sub	sp, #8
9000cf60:	af00      	add	r7, sp, #0
9000cf62:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
9000cf64:	6878      	ldr	r0, [r7, #4]
9000cf66:	f000 f8bb 	bl	9000d0e0 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
9000cf6a:	4603      	mov	r3, r0
9000cf6c:	4618      	mov	r0, r3
9000cf6e:	f000 f8c4 	bl	9000d0fa <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
9000cf72:	4603      	mov	r3, r0
    }
9000cf74:	4618      	mov	r0, r3
9000cf76:	3708      	adds	r7, #8
9000cf78:	46bd      	mov	sp, r7
9000cf7a:	bd80      	pop	{r7, pc}

9000cf7c <_ZSt7forwardIRM5IOBusFvhPhmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000cf7c:	b480      	push	{r7}
9000cf7e:	b083      	sub	sp, #12
9000cf80:	af00      	add	r7, sp, #0
9000cf82:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000cf84:	687b      	ldr	r3, [r7, #4]
9000cf86:	4618      	mov	r0, r3
9000cf88:	370c      	adds	r7, #12
9000cf8a:	46bd      	mov	sp, r7
9000cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000cf90:	4770      	bx	lr

9000cf92 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
9000cf92:	b5f0      	push	{r4, r5, r6, r7, lr}
9000cf94:	b087      	sub	sp, #28
9000cf96:	af00      	add	r7, sp, #0
9000cf98:	7538      	strb	r0, [r7, #20]
9000cf9a:	6139      	str	r1, [r7, #16]
9000cf9c:	60fa      	str	r2, [r7, #12]
9000cf9e:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
9000cfa0:	68f8      	ldr	r0, [r7, #12]
9000cfa2:	f7ff ff81 	bl	9000cea8 <_ZSt7forwardIRP5IOBusEOT_RNSt16remove_referenceIS3_E4typeE>
9000cfa6:	4603      	mov	r3, r0
9000cfa8:	681b      	ldr	r3, [r3, #0]
9000cfaa:	693a      	ldr	r2, [r7, #16]
9000cfac:	6852      	ldr	r2, [r2, #4]
9000cfae:	1052      	asrs	r2, r2, #1
9000cfb0:	189d      	adds	r5, r3, r2
9000cfb2:	693a      	ldr	r2, [r7, #16]
9000cfb4:	6852      	ldr	r2, [r2, #4]
9000cfb6:	f002 0201 	and.w	r2, r2, #1
9000cfba:	2a00      	cmp	r2, #0
9000cfbc:	d102      	bne.n	9000cfc4 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x32>
9000cfbe:	693b      	ldr	r3, [r7, #16]
9000cfc0:	681c      	ldr	r4, [r3, #0]
9000cfc2:	e008      	b.n	9000cfd6 <_ZSt13__invoke_implIvRM5IOBusFvhPhmERPS0_JhS1_mEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x44>
9000cfc4:	693a      	ldr	r2, [r7, #16]
9000cfc6:	6852      	ldr	r2, [r2, #4]
9000cfc8:	1052      	asrs	r2, r2, #1
9000cfca:	4413      	add	r3, r2
9000cfcc:	681b      	ldr	r3, [r3, #0]
9000cfce:	693a      	ldr	r2, [r7, #16]
9000cfd0:	6812      	ldr	r2, [r2, #0]
9000cfd2:	4413      	add	r3, r2
9000cfd4:	681c      	ldr	r4, [r3, #0]
9000cfd6:	68b8      	ldr	r0, [r7, #8]
9000cfd8:	f7fe fee3 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000cfdc:	4603      	mov	r3, r0
9000cfde:	781e      	ldrb	r6, [r3, #0]
9000cfe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000cfe2:	f7fe fee9 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000cfe6:	4603      	mov	r3, r0
9000cfe8:	681b      	ldr	r3, [r3, #0]
9000cfea:	607b      	str	r3, [r7, #4]
9000cfec:	6b78      	ldr	r0, [r7, #52]	; 0x34
9000cfee:	f7fe feee 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000cff2:	4603      	mov	r3, r0
9000cff4:	681b      	ldr	r3, [r3, #0]
9000cff6:	687a      	ldr	r2, [r7, #4]
9000cff8:	4631      	mov	r1, r6
9000cffa:	4628      	mov	r0, r5
9000cffc:	47a0      	blx	r4
9000cffe:	bf00      	nop
    }
9000d000:	371c      	adds	r7, #28
9000d002:	46bd      	mov	sp, r7
9000d004:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000d006 <_ZNSt11_Tuple_implILj1EJOPhOmEEC1IS0_JmEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
9000d006:	b590      	push	{r4, r7, lr}
9000d008:	b085      	sub	sp, #20
9000d00a:	af00      	add	r7, sp, #0
9000d00c:	60f8      	str	r0, [r7, #12]
9000d00e:	60b9      	str	r1, [r7, #8]
9000d010:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
9000d012:	68fc      	ldr	r4, [r7, #12]
9000d014:	6878      	ldr	r0, [r7, #4]
9000d016:	f7fe feda 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000d01a:	4603      	mov	r3, r0
9000d01c:	4619      	mov	r1, r3
9000d01e:	4620      	mov	r0, r4
9000d020:	f000 f876 	bl	9000d110 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>
9000d024:	68fb      	ldr	r3, [r7, #12]
9000d026:	1d1c      	adds	r4, r3, #4
9000d028:	68b8      	ldr	r0, [r7, #8]
9000d02a:	f7fe fec5 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000d02e:	4603      	mov	r3, r0
9000d030:	4619      	mov	r1, r3
9000d032:	4620      	mov	r0, r4
9000d034:	f000 f82a 	bl	9000d08c <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>
9000d038:	68fb      	ldr	r3, [r7, #12]
9000d03a:	4618      	mov	r0, r3
9000d03c:	3714      	adds	r7, #20
9000d03e:	46bd      	mov	sp, r7
9000d040:	bd90      	pop	{r4, r7, pc}

9000d042 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
9000d042:	b480      	push	{r7}
9000d044:	b083      	sub	sp, #12
9000d046:	af00      	add	r7, sp, #0
9000d048:	6078      	str	r0, [r7, #4]
9000d04a:	687b      	ldr	r3, [r7, #4]
9000d04c:	681b      	ldr	r3, [r3, #0]
9000d04e:	4618      	mov	r0, r3
9000d050:	370c      	adds	r7, #12
9000d052:	46bd      	mov	sp, r7
9000d054:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d058:	4770      	bx	lr

9000d05a <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
9000d05a:	b580      	push	{r7, lr}
9000d05c:	b082      	sub	sp, #8
9000d05e:	af00      	add	r7, sp, #0
9000d060:	6078      	str	r0, [r7, #4]
9000d062:	687b      	ldr	r3, [r7, #4]
9000d064:	3304      	adds	r3, #4
9000d066:	4618      	mov	r0, r3
9000d068:	f000 f865 	bl	9000d136 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>
9000d06c:	4603      	mov	r3, r0
9000d06e:	4618      	mov	r0, r3
9000d070:	3708      	adds	r7, #8
9000d072:	46bd      	mov	sp, r7
9000d074:	bd80      	pop	{r7, pc}

9000d076 <_ZSt7forwardIOPhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000d076:	b480      	push	{r7}
9000d078:	b083      	sub	sp, #12
9000d07a:	af00      	add	r7, sp, #0
9000d07c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000d07e:	687b      	ldr	r3, [r7, #4]
9000d080:	4618      	mov	r0, r3
9000d082:	370c      	adds	r7, #12
9000d084:	46bd      	mov	sp, r7
9000d086:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d08a:	4770      	bx	lr

9000d08c <_ZNSt10_Head_baseILj1EOPhLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
9000d08c:	b580      	push	{r7, lr}
9000d08e:	b082      	sub	sp, #8
9000d090:	af00      	add	r7, sp, #0
9000d092:	6078      	str	r0, [r7, #4]
9000d094:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
9000d096:	6838      	ldr	r0, [r7, #0]
9000d098:	f7fe fe8e 	bl	9000bdb8 <_ZSt7forwardIPhEOT_RNSt16remove_referenceIS1_E4typeE>
9000d09c:	4602      	mov	r2, r0
9000d09e:	687b      	ldr	r3, [r7, #4]
9000d0a0:	601a      	str	r2, [r3, #0]
9000d0a2:	687b      	ldr	r3, [r7, #4]
9000d0a4:	4618      	mov	r0, r3
9000d0a6:	3708      	adds	r7, #8
9000d0a8:	46bd      	mov	sp, r7
9000d0aa:	bd80      	pop	{r7, pc}

9000d0ac <_ZSt3getILj0EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
9000d0ac:	b580      	push	{r7, lr}
9000d0ae:	b082      	sub	sp, #8
9000d0b0:	af00      	add	r7, sp, #0
9000d0b2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
9000d0b4:	687b      	ldr	r3, [r7, #4]
9000d0b6:	4618      	mov	r0, r3
9000d0b8:	f000 f866 	bl	9000d188 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
9000d0bc:	4603      	mov	r3, r0
9000d0be:	4618      	mov	r0, r3
9000d0c0:	3708      	adds	r7, #8
9000d0c2:	46bd      	mov	sp, r7
9000d0c4:	bd80      	pop	{r7, pc}

9000d0c6 <_ZSt3getILj1EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
9000d0c6:	b580      	push	{r7, lr}
9000d0c8:	b082      	sub	sp, #8
9000d0ca:	af00      	add	r7, sp, #0
9000d0cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
9000d0ce:	687b      	ldr	r3, [r7, #4]
9000d0d0:	4618      	mov	r0, r3
9000d0d2:	f000 f865 	bl	9000d1a0 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
9000d0d6:	4603      	mov	r3, r0
9000d0d8:	4618      	mov	r0, r3
9000d0da:	3708      	adds	r7, #8
9000d0dc:	46bd      	mov	sp, r7
9000d0de:	bd80      	pop	{r7, pc}

9000d0e0 <_ZSt3getILj2EJOhOPhOmEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
9000d0e0:	b580      	push	{r7, lr}
9000d0e2:	b082      	sub	sp, #8
9000d0e4:	af00      	add	r7, sp, #0
9000d0e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
9000d0e8:	687b      	ldr	r3, [r7, #4]
9000d0ea:	4618      	mov	r0, r3
9000d0ec:	f000 f864 	bl	9000d1b8 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
9000d0f0:	4603      	mov	r3, r0
9000d0f2:	4618      	mov	r0, r3
9000d0f4:	3708      	adds	r7, #8
9000d0f6:	46bd      	mov	sp, r7
9000d0f8:	bd80      	pop	{r7, pc}

9000d0fa <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000d0fa:	b480      	push	{r7}
9000d0fc:	b083      	sub	sp, #12
9000d0fe:	af00      	add	r7, sp, #0
9000d100:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000d102:	687b      	ldr	r3, [r7, #4]
9000d104:	4618      	mov	r0, r3
9000d106:	370c      	adds	r7, #12
9000d108:	46bd      	mov	sp, r7
9000d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d10e:	4770      	bx	lr

9000d110 <_ZNSt11_Tuple_implILj2EJOmEEC1ImEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
9000d110:	b590      	push	{r4, r7, lr}
9000d112:	b083      	sub	sp, #12
9000d114:	af00      	add	r7, sp, #0
9000d116:	6078      	str	r0, [r7, #4]
9000d118:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
9000d11a:	687c      	ldr	r4, [r7, #4]
9000d11c:	6838      	ldr	r0, [r7, #0]
9000d11e:	f7fe fe56 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000d122:	4603      	mov	r3, r0
9000d124:	4619      	mov	r1, r3
9000d126:	4620      	mov	r0, r4
9000d128:	f000 f81e 	bl	9000d168 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>
9000d12c:	687b      	ldr	r3, [r7, #4]
9000d12e:	4618      	mov	r0, r3
9000d130:	370c      	adds	r7, #12
9000d132:	46bd      	mov	sp, r7
9000d134:	bd90      	pop	{r4, r7, pc}

9000d136 <_ZNSt10_Head_baseILj1EOPhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
9000d136:	b480      	push	{r7}
9000d138:	b083      	sub	sp, #12
9000d13a:	af00      	add	r7, sp, #0
9000d13c:	6078      	str	r0, [r7, #4]
9000d13e:	687b      	ldr	r3, [r7, #4]
9000d140:	681b      	ldr	r3, [r3, #0]
9000d142:	4618      	mov	r0, r3
9000d144:	370c      	adds	r7, #12
9000d146:	46bd      	mov	sp, r7
9000d148:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d14c:	4770      	bx	lr

9000d14e <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
9000d14e:	b580      	push	{r7, lr}
9000d150:	b082      	sub	sp, #8
9000d152:	af00      	add	r7, sp, #0
9000d154:	6078      	str	r0, [r7, #4]
9000d156:	687b      	ldr	r3, [r7, #4]
9000d158:	4618      	mov	r0, r3
9000d15a:	f000 f839 	bl	9000d1d0 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>
9000d15e:	4603      	mov	r3, r0
9000d160:	4618      	mov	r0, r3
9000d162:	3708      	adds	r7, #8
9000d164:	46bd      	mov	sp, r7
9000d166:	bd80      	pop	{r7, pc}

9000d168 <_ZNSt10_Head_baseILj2EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
9000d168:	b580      	push	{r7, lr}
9000d16a:	b082      	sub	sp, #8
9000d16c:	af00      	add	r7, sp, #0
9000d16e:	6078      	str	r0, [r7, #4]
9000d170:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
9000d172:	6838      	ldr	r0, [r7, #0]
9000d174:	f7fe fe2b 	bl	9000bdce <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
9000d178:	4602      	mov	r2, r0
9000d17a:	687b      	ldr	r3, [r7, #4]
9000d17c:	601a      	str	r2, [r3, #0]
9000d17e:	687b      	ldr	r3, [r7, #4]
9000d180:	4618      	mov	r0, r3
9000d182:	3708      	adds	r7, #8
9000d184:	46bd      	mov	sp, r7
9000d186:	bd80      	pop	{r7, pc}

9000d188 <_ZSt12__get_helperILj0EOhJOPhOmEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
9000d188:	b580      	push	{r7, lr}
9000d18a:	b082      	sub	sp, #8
9000d18c:	af00      	add	r7, sp, #0
9000d18e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
9000d190:	6878      	ldr	r0, [r7, #4]
9000d192:	f7ff fe54 	bl	9000ce3e <_ZNSt11_Tuple_implILj0EJOhOPhOmEE7_M_headERS4_>
9000d196:	4603      	mov	r3, r0
9000d198:	4618      	mov	r0, r3
9000d19a:	3708      	adds	r7, #8
9000d19c:	46bd      	mov	sp, r7
9000d19e:	bd80      	pop	{r7, pc}

9000d1a0 <_ZSt12__get_helperILj1EOPhJOmEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
9000d1a0:	b580      	push	{r7, lr}
9000d1a2:	b082      	sub	sp, #8
9000d1a4:	af00      	add	r7, sp, #0
9000d1a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
9000d1a8:	6878      	ldr	r0, [r7, #4]
9000d1aa:	f7ff ff56 	bl	9000d05a <_ZNSt11_Tuple_implILj1EJOPhOmEE7_M_headERS3_>
9000d1ae:	4603      	mov	r3, r0
9000d1b0:	4618      	mov	r0, r3
9000d1b2:	3708      	adds	r7, #8
9000d1b4:	46bd      	mov	sp, r7
9000d1b6:	bd80      	pop	{r7, pc}

9000d1b8 <_ZSt12__get_helperILj2EOmJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
9000d1b8:	b580      	push	{r7, lr}
9000d1ba:	b082      	sub	sp, #8
9000d1bc:	af00      	add	r7, sp, #0
9000d1be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
9000d1c0:	6878      	ldr	r0, [r7, #4]
9000d1c2:	f7ff ffc4 	bl	9000d14e <_ZNSt11_Tuple_implILj2EJOmEE7_M_headERS1_>
9000d1c6:	4603      	mov	r3, r0
9000d1c8:	4618      	mov	r0, r3
9000d1ca:	3708      	adds	r7, #8
9000d1cc:	46bd      	mov	sp, r7
9000d1ce:	bd80      	pop	{r7, pc}

9000d1d0 <_ZNSt10_Head_baseILj2EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
9000d1d0:	b480      	push	{r7}
9000d1d2:	b083      	sub	sp, #12
9000d1d4:	af00      	add	r7, sp, #0
9000d1d6:	6078      	str	r0, [r7, #4]
9000d1d8:	687b      	ldr	r3, [r7, #4]
9000d1da:	681b      	ldr	r3, [r3, #0]
9000d1dc:	4618      	mov	r0, r3
9000d1de:	370c      	adds	r7, #12
9000d1e0:	46bd      	mov	sp, r7
9000d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d1e6:	4770      	bx	lr

9000d1e8 <_ZN5IOBusD1Ev>:

#include "MessageBus.h"
#include "IODriver.h"


class IOBus : public MessageBus {
9000d1e8:	b580      	push	{r7, lr}
9000d1ea:	b082      	sub	sp, #8
9000d1ec:	af00      	add	r7, sp, #0
9000d1ee:	6078      	str	r0, [r7, #4]
9000d1f0:	4a05      	ldr	r2, [pc, #20]	; (9000d208 <_ZN5IOBusD1Ev+0x20>)
9000d1f2:	687b      	ldr	r3, [r7, #4]
9000d1f4:	601a      	str	r2, [r3, #0]
9000d1f6:	687b      	ldr	r3, [r7, #4]
9000d1f8:	4618      	mov	r0, r3
9000d1fa:	f7fe fead 	bl	9000bf58 <_ZN10MessageBusD1Ev>
9000d1fe:	687b      	ldr	r3, [r7, #4]
9000d200:	4618      	mov	r0, r3
9000d202:	3708      	adds	r7, #8
9000d204:	46bd      	mov	sp, r7
9000d206:	bd80      	pop	{r7, pc}
9000d208:	900140e4 	.word	0x900140e4

9000d20c <_ZN5IOBusD0Ev>:
9000d20c:	b580      	push	{r7, lr}
9000d20e:	b082      	sub	sp, #8
9000d210:	af00      	add	r7, sp, #0
9000d212:	6078      	str	r0, [r7, #4]
9000d214:	6878      	ldr	r0, [r7, #4]
9000d216:	f7ff ffe7 	bl	9000d1e8 <_ZN5IOBusD1Ev>
9000d21a:	f641 4124 	movw	r1, #7204	; 0x1c24
9000d21e:	6878      	ldr	r0, [r7, #4]
9000d220:	f003 f9c2 	bl	900105a8 <_ZdlPvj>
9000d224:	687b      	ldr	r3, [r7, #4]
9000d226:	4618      	mov	r0, r3
9000d228:	3708      	adds	r7, #8
9000d22a:	46bd      	mov	sp, r7
9000d22c:	bd80      	pop	{r7, pc}

9000d22e <_ZNKSt9type_info4nameEv>:
     *  the runtime-mandated type_info structures in the new-abi.  */
    virtual ~type_info();

    /** Returns an @e implementation-defined byte string; this is not
     *  portable between compilers!  */
    const char* name() const _GLIBCXX_NOEXCEPT
9000d22e:	b480      	push	{r7}
9000d230:	b083      	sub	sp, #12
9000d232:	af00      	add	r7, sp, #0
9000d234:	6078      	str	r0, [r7, #4]
    { return __name[0] == '*' ? __name + 1 : __name; }
9000d236:	687b      	ldr	r3, [r7, #4]
9000d238:	685b      	ldr	r3, [r3, #4]
9000d23a:	781b      	ldrb	r3, [r3, #0]
9000d23c:	2b2a      	cmp	r3, #42	; 0x2a
9000d23e:	d103      	bne.n	9000d248 <_ZNKSt9type_info4nameEv+0x1a>
9000d240:	687b      	ldr	r3, [r7, #4]
9000d242:	685b      	ldr	r3, [r3, #4]
9000d244:	3301      	adds	r3, #1
9000d246:	e001      	b.n	9000d24c <_ZNKSt9type_info4nameEv+0x1e>
9000d248:	687b      	ldr	r3, [r7, #4]
9000d24a:	685b      	ldr	r3, [r3, #4]
9000d24c:	4618      	mov	r0, r3
9000d24e:	370c      	adds	r7, #12
9000d250:	46bd      	mov	sp, r7
9000d252:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d256:	4770      	bx	lr

9000d258 <_ZNKSt9type_info9hash_codeEv>:
    bool operator!=(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return !operator==(__arg); }
#endif

#if __cplusplus >= 201103L
    size_t hash_code() const noexcept
9000d258:	b590      	push	{r4, r7, lr}
9000d25a:	b083      	sub	sp, #12
9000d25c:	af00      	add	r7, sp, #0
9000d25e:	6078      	str	r0, [r7, #4]
    {
#  if !__GXX_MERGED_TYPEINFO_NAMES
      return _Hash_bytes(name(), __builtin_strlen(name()),
9000d260:	6878      	ldr	r0, [r7, #4]
9000d262:	f7ff ffe4 	bl	9000d22e <_ZNKSt9type_info4nameEv>
9000d266:	4604      	mov	r4, r0
9000d268:	6878      	ldr	r0, [r7, #4]
9000d26a:	f7ff ffe0 	bl	9000d22e <_ZNKSt9type_info4nameEv>
9000d26e:	4603      	mov	r3, r0
9000d270:	4618      	mov	r0, r3
9000d272:	f7f3 f83f 	bl	900002f4 <strlen>
9000d276:	4603      	mov	r3, r0
9000d278:	4a04      	ldr	r2, [pc, #16]	; (9000d28c <_ZNKSt9type_info9hash_codeEv+0x34>)
9000d27a:	4619      	mov	r1, r3
9000d27c:	4620      	mov	r0, r4
9000d27e:	f003 f9bb 	bl	900105f8 <_ZSt11_Hash_bytesPKvjj>
9000d282:	4603      	mov	r3, r0
			 static_cast<size_t>(0xc70f6907UL));
#  else
      return reinterpret_cast<size_t>(__name);
#  endif
    }
9000d284:	4618      	mov	r0, r3
9000d286:	370c      	adds	r7, #12
9000d288:	46bd      	mov	sp, r7
9000d28a:	bd90      	pop	{r4, r7, pc}
9000d28c:	c70f6907 	.word	0xc70f6907

9000d290 <_ZN10MessageBus6defineI10DataPacketEEbh>:
 * Warning: this method is not thread-safe.
 */


// WARNING: using a hash as a UUID is a bad idea in general but it was to only way to get SWIG working.
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d290:	b580      	push	{r7, lr}
9000d292:	b086      	sub	sp, #24
9000d294:	af00      	add	r7, sp, #0
9000d296:	6078      	str	r0, [r7, #4]
9000d298:	460b      	mov	r3, r1
9000d29a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d29c:	2304      	movs	r3, #4
9000d29e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d2a0:	482c      	ldr	r0, [pc, #176]	; (9000d354 <_ZN10MessageBus6defineI10DataPacketEEbh+0xc4>)
9000d2a2:	f7ff ffd9 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d2a6:	60f8      	str	r0, [r7, #12]

	uint32_t insertion_point = hash % 256;
9000d2a8:	68fb      	ldr	r3, [r7, #12]
9000d2aa:	b2db      	uxtb	r3, r3
9000d2ac:	617b      	str	r3, [r7, #20]

	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d2ae:	78fb      	ldrb	r3, [r7, #3]
9000d2b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d2b4:	6879      	ldr	r1, [r7, #4]
9000d2b6:	4613      	mov	r3, r2
9000d2b8:	005b      	lsls	r3, r3, #1
9000d2ba:	4413      	add	r3, r2
9000d2bc:	009b      	lsls	r3, r3, #2
9000d2be:	440b      	add	r3, r1
9000d2c0:	330c      	adds	r3, #12
9000d2c2:	681b      	ldr	r3, [r3, #0]
9000d2c4:	2b00      	cmp	r3, #0
9000d2c6:	d001      	beq.n	9000d2cc <_ZN10MessageBus6defineI10DataPacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d2c8:	2300      	movs	r3, #0
9000d2ca:	e03f      	b.n	9000d34c <_ZN10MessageBus6defineI10DataPacketEEbh+0xbc>
	}

	if(struct_size > max_packet_size) {
9000d2cc:	693b      	ldr	r3, [r7, #16]
9000d2ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d2d2:	d301      	bcc.n	9000d2d8 <_ZN10MessageBus6defineI10DataPacketEEbh+0x48>
		return false; // Packet size too large
9000d2d4:	2300      	movs	r3, #0
9000d2d6:	e039      	b.n	9000d34c <_ZN10MessageBus6defineI10DataPacketEEbh+0xbc>
	}

	while(definitions_by_type[insertion_point] != nullptr) {
9000d2d8:	687a      	ldr	r2, [r7, #4]
9000d2da:	697b      	ldr	r3, [r7, #20]
9000d2dc:	33c0      	adds	r3, #192	; 0xc0
9000d2de:	009b      	lsls	r3, r3, #2
9000d2e0:	4413      	add	r3, r2
9000d2e2:	685b      	ldr	r3, [r3, #4]
9000d2e4:	2b00      	cmp	r3, #0
9000d2e6:	d015      	beq.n	9000d314 <_ZN10MessageBus6defineI10DataPacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d2e8:	687a      	ldr	r2, [r7, #4]
9000d2ea:	697b      	ldr	r3, [r7, #20]
9000d2ec:	33c0      	adds	r3, #192	; 0xc0
9000d2ee:	009b      	lsls	r3, r3, #2
9000d2f0:	4413      	add	r3, r2
9000d2f2:	685b      	ldr	r3, [r3, #4]
9000d2f4:	689b      	ldr	r3, [r3, #8]
9000d2f6:	68fa      	ldr	r2, [r7, #12]
9000d2f8:	429a      	cmp	r2, r3
9000d2fa:	d101      	bne.n	9000d300 <_ZN10MessageBus6defineI10DataPacketEEbh+0x70>
			return false; // Packet type already defined
9000d2fc:	2300      	movs	r3, #0
9000d2fe:	e025      	b.n	9000d34c <_ZN10MessageBus6defineI10DataPacketEEbh+0xbc>
		}

		insertion_point++;
9000d300:	697b      	ldr	r3, [r7, #20]
9000d302:	3301      	adds	r3, #1
9000d304:	617b      	str	r3, [r7, #20]

		if(insertion_point == 256) {
9000d306:	697b      	ldr	r3, [r7, #20]
9000d308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d30c:	d1e4      	bne.n	9000d2d8 <_ZN10MessageBus6defineI10DataPacketEEbh+0x48>
			insertion_point = 0;
9000d30e:	2300      	movs	r3, #0
9000d310:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d312:	e7e1      	b.n	9000d2d8 <_ZN10MessageBus6defineI10DataPacketEEbh+0x48>
		}
	}

	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d314:	78fb      	ldrb	r3, [r7, #3]
9000d316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d31a:	4613      	mov	r3, r2
9000d31c:	005b      	lsls	r3, r3, #1
9000d31e:	4413      	add	r3, r2
9000d320:	009b      	lsls	r3, r3, #2
9000d322:	687a      	ldr	r2, [r7, #4]
9000d324:	4413      	add	r3, r2
9000d326:	3304      	adds	r3, #4
9000d328:	60bb      	str	r3, [r7, #8]

	def->id = identifier;
9000d32a:	68bb      	ldr	r3, [r7, #8]
9000d32c:	78fa      	ldrb	r2, [r7, #3]
9000d32e:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d330:	68bb      	ldr	r3, [r7, #8]
9000d332:	693a      	ldr	r2, [r7, #16]
9000d334:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d336:	68bb      	ldr	r3, [r7, #8]
9000d338:	68fa      	ldr	r2, [r7, #12]
9000d33a:	609a      	str	r2, [r3, #8]

	definitions_by_type[insertion_point] = def;
9000d33c:	687a      	ldr	r2, [r7, #4]
9000d33e:	697b      	ldr	r3, [r7, #20]
9000d340:	33c0      	adds	r3, #192	; 0xc0
9000d342:	009b      	lsls	r3, r3, #2
9000d344:	4413      	add	r3, r2
9000d346:	68ba      	ldr	r2, [r7, #8]
9000d348:	605a      	str	r2, [r3, #4]

	return true;
9000d34a:	2301      	movs	r3, #1
}
9000d34c:	4618      	mov	r0, r3
9000d34e:	3718      	adds	r7, #24
9000d350:	46bd      	mov	sp, r7
9000d352:	bd80      	pop	{r7, pc}
9000d354:	9001437c 	.word	0x9001437c

9000d358 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d358:	b580      	push	{r7, lr}
9000d35a:	b086      	sub	sp, #24
9000d35c:	af00      	add	r7, sp, #0
9000d35e:	6078      	str	r0, [r7, #4]
9000d360:	460b      	mov	r3, r1
9000d362:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d364:	2310      	movs	r3, #16
9000d366:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d368:	482c      	ldr	r0, [pc, #176]	; (9000d41c <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0xc4>)
9000d36a:	f7ff ff75 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d36e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
9000d370:	68fb      	ldr	r3, [r7, #12]
9000d372:	b2db      	uxtb	r3, r3
9000d374:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d376:	78fb      	ldrb	r3, [r7, #3]
9000d378:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d37c:	6879      	ldr	r1, [r7, #4]
9000d37e:	4613      	mov	r3, r2
9000d380:	005b      	lsls	r3, r3, #1
9000d382:	4413      	add	r3, r2
9000d384:	009b      	lsls	r3, r3, #2
9000d386:	440b      	add	r3, r1
9000d388:	330c      	adds	r3, #12
9000d38a:	681b      	ldr	r3, [r3, #0]
9000d38c:	2b00      	cmp	r3, #0
9000d38e:	d001      	beq.n	9000d394 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d390:	2300      	movs	r3, #0
9000d392:	e03f      	b.n	9000d414 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0xbc>
	if(struct_size > max_packet_size) {
9000d394:	693b      	ldr	r3, [r7, #16]
9000d396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d39a:	d301      	bcc.n	9000d3a0 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0x48>
		return false; // Packet size too large
9000d39c:	2300      	movs	r3, #0
9000d39e:	e039      	b.n	9000d414 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0xbc>
	while(definitions_by_type[insertion_point] != nullptr) {
9000d3a0:	687a      	ldr	r2, [r7, #4]
9000d3a2:	697b      	ldr	r3, [r7, #20]
9000d3a4:	33c0      	adds	r3, #192	; 0xc0
9000d3a6:	009b      	lsls	r3, r3, #2
9000d3a8:	4413      	add	r3, r2
9000d3aa:	685b      	ldr	r3, [r3, #4]
9000d3ac:	2b00      	cmp	r3, #0
9000d3ae:	d015      	beq.n	9000d3dc <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d3b0:	687a      	ldr	r2, [r7, #4]
9000d3b2:	697b      	ldr	r3, [r7, #20]
9000d3b4:	33c0      	adds	r3, #192	; 0xc0
9000d3b6:	009b      	lsls	r3, r3, #2
9000d3b8:	4413      	add	r3, r2
9000d3ba:	685b      	ldr	r3, [r3, #4]
9000d3bc:	689b      	ldr	r3, [r3, #8]
9000d3be:	68fa      	ldr	r2, [r7, #12]
9000d3c0:	429a      	cmp	r2, r3
9000d3c2:	d101      	bne.n	9000d3c8 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0x70>
			return false; // Packet type already defined
9000d3c4:	2300      	movs	r3, #0
9000d3c6:	e025      	b.n	9000d414 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0xbc>
		insertion_point++;
9000d3c8:	697b      	ldr	r3, [r7, #20]
9000d3ca:	3301      	adds	r3, #1
9000d3cc:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
9000d3ce:	697b      	ldr	r3, [r7, #20]
9000d3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d3d4:	d1e4      	bne.n	9000d3a0 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0x48>
			insertion_point = 0;
9000d3d6:	2300      	movs	r3, #0
9000d3d8:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d3da:	e7e1      	b.n	9000d3a0 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d3dc:	78fb      	ldrb	r3, [r7, #3]
9000d3de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d3e2:	4613      	mov	r3, r2
9000d3e4:	005b      	lsls	r3, r3, #1
9000d3e6:	4413      	add	r3, r2
9000d3e8:	009b      	lsls	r3, r3, #2
9000d3ea:	687a      	ldr	r2, [r7, #4]
9000d3ec:	4413      	add	r3, r2
9000d3ee:	3304      	adds	r3, #4
9000d3f0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
9000d3f2:	68bb      	ldr	r3, [r7, #8]
9000d3f4:	78fa      	ldrb	r2, [r7, #3]
9000d3f6:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d3f8:	68bb      	ldr	r3, [r7, #8]
9000d3fa:	693a      	ldr	r2, [r7, #16]
9000d3fc:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d3fe:	68bb      	ldr	r3, [r7, #8]
9000d400:	68fa      	ldr	r2, [r7, #12]
9000d402:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
9000d404:	687a      	ldr	r2, [r7, #4]
9000d406:	697b      	ldr	r3, [r7, #20]
9000d408:	33c0      	adds	r3, #192	; 0xc0
9000d40a:	009b      	lsls	r3, r3, #2
9000d40c:	4413      	add	r3, r2
9000d40e:	68ba      	ldr	r2, [r7, #8]
9000d410:	605a      	str	r2, [r3, #4]
	return true;
9000d412:	2301      	movs	r3, #1
}
9000d414:	4618      	mov	r0, r3
9000d416:	3718      	adds	r7, #24
9000d418:	46bd      	mov	sp, r7
9000d41a:	bd80      	pop	{r7, pc}
9000d41c:	90014360 	.word	0x90014360

9000d420 <_ZN10MessageBus6defineI10MassPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d420:	b580      	push	{r7, lr}
9000d422:	b086      	sub	sp, #24
9000d424:	af00      	add	r7, sp, #0
9000d426:	6078      	str	r0, [r7, #4]
9000d428:	460b      	mov	r3, r1
9000d42a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d42c:	2304      	movs	r3, #4
9000d42e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d430:	482c      	ldr	r0, [pc, #176]	; (9000d4e4 <_ZN10MessageBus6defineI10MassPacketEEbh+0xc4>)
9000d432:	f7ff ff11 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d436:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
9000d438:	68fb      	ldr	r3, [r7, #12]
9000d43a:	b2db      	uxtb	r3, r3
9000d43c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d43e:	78fb      	ldrb	r3, [r7, #3]
9000d440:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d444:	6879      	ldr	r1, [r7, #4]
9000d446:	4613      	mov	r3, r2
9000d448:	005b      	lsls	r3, r3, #1
9000d44a:	4413      	add	r3, r2
9000d44c:	009b      	lsls	r3, r3, #2
9000d44e:	440b      	add	r3, r1
9000d450:	330c      	adds	r3, #12
9000d452:	681b      	ldr	r3, [r3, #0]
9000d454:	2b00      	cmp	r3, #0
9000d456:	d001      	beq.n	9000d45c <_ZN10MessageBus6defineI10MassPacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d458:	2300      	movs	r3, #0
9000d45a:	e03f      	b.n	9000d4dc <_ZN10MessageBus6defineI10MassPacketEEbh+0xbc>
	if(struct_size > max_packet_size) {
9000d45c:	693b      	ldr	r3, [r7, #16]
9000d45e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d462:	d301      	bcc.n	9000d468 <_ZN10MessageBus6defineI10MassPacketEEbh+0x48>
		return false; // Packet size too large
9000d464:	2300      	movs	r3, #0
9000d466:	e039      	b.n	9000d4dc <_ZN10MessageBus6defineI10MassPacketEEbh+0xbc>
	while(definitions_by_type[insertion_point] != nullptr) {
9000d468:	687a      	ldr	r2, [r7, #4]
9000d46a:	697b      	ldr	r3, [r7, #20]
9000d46c:	33c0      	adds	r3, #192	; 0xc0
9000d46e:	009b      	lsls	r3, r3, #2
9000d470:	4413      	add	r3, r2
9000d472:	685b      	ldr	r3, [r3, #4]
9000d474:	2b00      	cmp	r3, #0
9000d476:	d015      	beq.n	9000d4a4 <_ZN10MessageBus6defineI10MassPacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d478:	687a      	ldr	r2, [r7, #4]
9000d47a:	697b      	ldr	r3, [r7, #20]
9000d47c:	33c0      	adds	r3, #192	; 0xc0
9000d47e:	009b      	lsls	r3, r3, #2
9000d480:	4413      	add	r3, r2
9000d482:	685b      	ldr	r3, [r3, #4]
9000d484:	689b      	ldr	r3, [r3, #8]
9000d486:	68fa      	ldr	r2, [r7, #12]
9000d488:	429a      	cmp	r2, r3
9000d48a:	d101      	bne.n	9000d490 <_ZN10MessageBus6defineI10MassPacketEEbh+0x70>
			return false; // Packet type already defined
9000d48c:	2300      	movs	r3, #0
9000d48e:	e025      	b.n	9000d4dc <_ZN10MessageBus6defineI10MassPacketEEbh+0xbc>
		insertion_point++;
9000d490:	697b      	ldr	r3, [r7, #20]
9000d492:	3301      	adds	r3, #1
9000d494:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
9000d496:	697b      	ldr	r3, [r7, #20]
9000d498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d49c:	d1e4      	bne.n	9000d468 <_ZN10MessageBus6defineI10MassPacketEEbh+0x48>
			insertion_point = 0;
9000d49e:	2300      	movs	r3, #0
9000d4a0:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d4a2:	e7e1      	b.n	9000d468 <_ZN10MessageBus6defineI10MassPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d4a4:	78fb      	ldrb	r3, [r7, #3]
9000d4a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d4aa:	4613      	mov	r3, r2
9000d4ac:	005b      	lsls	r3, r3, #1
9000d4ae:	4413      	add	r3, r2
9000d4b0:	009b      	lsls	r3, r3, #2
9000d4b2:	687a      	ldr	r2, [r7, #4]
9000d4b4:	4413      	add	r3, r2
9000d4b6:	3304      	adds	r3, #4
9000d4b8:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
9000d4ba:	68bb      	ldr	r3, [r7, #8]
9000d4bc:	78fa      	ldrb	r2, [r7, #3]
9000d4be:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d4c0:	68bb      	ldr	r3, [r7, #8]
9000d4c2:	693a      	ldr	r2, [r7, #16]
9000d4c4:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d4c6:	68bb      	ldr	r3, [r7, #8]
9000d4c8:	68fa      	ldr	r2, [r7, #12]
9000d4ca:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
9000d4cc:	687a      	ldr	r2, [r7, #4]
9000d4ce:	697b      	ldr	r3, [r7, #20]
9000d4d0:	33c0      	adds	r3, #192	; 0xc0
9000d4d2:	009b      	lsls	r3, r3, #2
9000d4d4:	4413      	add	r3, r2
9000d4d6:	68ba      	ldr	r2, [r7, #8]
9000d4d8:	605a      	str	r2, [r3, #4]
	return true;
9000d4da:	2301      	movs	r3, #1
}
9000d4dc:	4618      	mov	r0, r3
9000d4de:	3718      	adds	r7, #24
9000d4e0:	46bd      	mov	sp, r7
9000d4e2:	bd80      	pop	{r7, pc}
9000d4e4:	90014348 	.word	0x90014348

9000d4e8 <_ZN10MessageBus6defineI10PingPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d4e8:	b580      	push	{r7, lr}
9000d4ea:	b086      	sub	sp, #24
9000d4ec:	af00      	add	r7, sp, #0
9000d4ee:	6078      	str	r0, [r7, #4]
9000d4f0:	460b      	mov	r3, r1
9000d4f2:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d4f4:	230a      	movs	r3, #10
9000d4f6:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d4f8:	482c      	ldr	r0, [pc, #176]	; (9000d5ac <_ZN10MessageBus6defineI10PingPacketEEbh+0xc4>)
9000d4fa:	f7ff fead 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d4fe:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
9000d500:	68fb      	ldr	r3, [r7, #12]
9000d502:	b2db      	uxtb	r3, r3
9000d504:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d506:	78fb      	ldrb	r3, [r7, #3]
9000d508:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d50c:	6879      	ldr	r1, [r7, #4]
9000d50e:	4613      	mov	r3, r2
9000d510:	005b      	lsls	r3, r3, #1
9000d512:	4413      	add	r3, r2
9000d514:	009b      	lsls	r3, r3, #2
9000d516:	440b      	add	r3, r1
9000d518:	330c      	adds	r3, #12
9000d51a:	681b      	ldr	r3, [r3, #0]
9000d51c:	2b00      	cmp	r3, #0
9000d51e:	d001      	beq.n	9000d524 <_ZN10MessageBus6defineI10PingPacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d520:	2300      	movs	r3, #0
9000d522:	e03f      	b.n	9000d5a4 <_ZN10MessageBus6defineI10PingPacketEEbh+0xbc>
	if(struct_size > max_packet_size) {
9000d524:	693b      	ldr	r3, [r7, #16]
9000d526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d52a:	d301      	bcc.n	9000d530 <_ZN10MessageBus6defineI10PingPacketEEbh+0x48>
		return false; // Packet size too large
9000d52c:	2300      	movs	r3, #0
9000d52e:	e039      	b.n	9000d5a4 <_ZN10MessageBus6defineI10PingPacketEEbh+0xbc>
	while(definitions_by_type[insertion_point] != nullptr) {
9000d530:	687a      	ldr	r2, [r7, #4]
9000d532:	697b      	ldr	r3, [r7, #20]
9000d534:	33c0      	adds	r3, #192	; 0xc0
9000d536:	009b      	lsls	r3, r3, #2
9000d538:	4413      	add	r3, r2
9000d53a:	685b      	ldr	r3, [r3, #4]
9000d53c:	2b00      	cmp	r3, #0
9000d53e:	d015      	beq.n	9000d56c <_ZN10MessageBus6defineI10PingPacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d540:	687a      	ldr	r2, [r7, #4]
9000d542:	697b      	ldr	r3, [r7, #20]
9000d544:	33c0      	adds	r3, #192	; 0xc0
9000d546:	009b      	lsls	r3, r3, #2
9000d548:	4413      	add	r3, r2
9000d54a:	685b      	ldr	r3, [r3, #4]
9000d54c:	689b      	ldr	r3, [r3, #8]
9000d54e:	68fa      	ldr	r2, [r7, #12]
9000d550:	429a      	cmp	r2, r3
9000d552:	d101      	bne.n	9000d558 <_ZN10MessageBus6defineI10PingPacketEEbh+0x70>
			return false; // Packet type already defined
9000d554:	2300      	movs	r3, #0
9000d556:	e025      	b.n	9000d5a4 <_ZN10MessageBus6defineI10PingPacketEEbh+0xbc>
		insertion_point++;
9000d558:	697b      	ldr	r3, [r7, #20]
9000d55a:	3301      	adds	r3, #1
9000d55c:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
9000d55e:	697b      	ldr	r3, [r7, #20]
9000d560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d564:	d1e4      	bne.n	9000d530 <_ZN10MessageBus6defineI10PingPacketEEbh+0x48>
			insertion_point = 0;
9000d566:	2300      	movs	r3, #0
9000d568:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d56a:	e7e1      	b.n	9000d530 <_ZN10MessageBus6defineI10PingPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d56c:	78fb      	ldrb	r3, [r7, #3]
9000d56e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d572:	4613      	mov	r3, r2
9000d574:	005b      	lsls	r3, r3, #1
9000d576:	4413      	add	r3, r2
9000d578:	009b      	lsls	r3, r3, #2
9000d57a:	687a      	ldr	r2, [r7, #4]
9000d57c:	4413      	add	r3, r2
9000d57e:	3304      	adds	r3, #4
9000d580:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
9000d582:	68bb      	ldr	r3, [r7, #8]
9000d584:	78fa      	ldrb	r2, [r7, #3]
9000d586:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d588:	68bb      	ldr	r3, [r7, #8]
9000d58a:	693a      	ldr	r2, [r7, #16]
9000d58c:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d58e:	68bb      	ldr	r3, [r7, #8]
9000d590:	68fa      	ldr	r2, [r7, #12]
9000d592:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
9000d594:	687a      	ldr	r2, [r7, #4]
9000d596:	697b      	ldr	r3, [r7, #20]
9000d598:	33c0      	adds	r3, #192	; 0xc0
9000d59a:	009b      	lsls	r3, r3, #2
9000d59c:	4413      	add	r3, r2
9000d59e:	68ba      	ldr	r2, [r7, #8]
9000d5a0:	605a      	str	r2, [r3, #4]
	return true;
9000d5a2:	2301      	movs	r3, #1
}
9000d5a4:	4618      	mov	r0, r3
9000d5a6:	3718      	adds	r7, #24
9000d5a8:	46bd      	mov	sp, r7
9000d5aa:	bd80      	pop	{r7, pc}
9000d5ac:	90014330 	.word	0x90014330

9000d5b0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d5b0:	b580      	push	{r7, lr}
9000d5b2:	b086      	sub	sp, #24
9000d5b4:	af00      	add	r7, sp, #0
9000d5b6:	6078      	str	r0, [r7, #4]
9000d5b8:	460b      	mov	r3, r1
9000d5ba:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d5bc:	2303      	movs	r3, #3
9000d5be:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d5c0:	482c      	ldr	r0, [pc, #176]	; (9000d674 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xc4>)
9000d5c2:	f7ff fe49 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d5c6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
9000d5c8:	68fb      	ldr	r3, [r7, #12]
9000d5ca:	b2db      	uxtb	r3, r3
9000d5cc:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d5ce:	78fb      	ldrb	r3, [r7, #3]
9000d5d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d5d4:	6879      	ldr	r1, [r7, #4]
9000d5d6:	4613      	mov	r3, r2
9000d5d8:	005b      	lsls	r3, r3, #1
9000d5da:	4413      	add	r3, r2
9000d5dc:	009b      	lsls	r3, r3, #2
9000d5de:	440b      	add	r3, r1
9000d5e0:	330c      	adds	r3, #12
9000d5e2:	681b      	ldr	r3, [r3, #0]
9000d5e4:	2b00      	cmp	r3, #0
9000d5e6:	d001      	beq.n	9000d5ec <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d5e8:	2300      	movs	r3, #0
9000d5ea:	e03f      	b.n	9000d66c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xbc>
	if(struct_size > max_packet_size) {
9000d5ec:	693b      	ldr	r3, [r7, #16]
9000d5ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d5f2:	d301      	bcc.n	9000d5f8 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x48>
		return false; // Packet size too large
9000d5f4:	2300      	movs	r3, #0
9000d5f6:	e039      	b.n	9000d66c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xbc>
	while(definitions_by_type[insertion_point] != nullptr) {
9000d5f8:	687a      	ldr	r2, [r7, #4]
9000d5fa:	697b      	ldr	r3, [r7, #20]
9000d5fc:	33c0      	adds	r3, #192	; 0xc0
9000d5fe:	009b      	lsls	r3, r3, #2
9000d600:	4413      	add	r3, r2
9000d602:	685b      	ldr	r3, [r3, #4]
9000d604:	2b00      	cmp	r3, #0
9000d606:	d015      	beq.n	9000d634 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d608:	687a      	ldr	r2, [r7, #4]
9000d60a:	697b      	ldr	r3, [r7, #20]
9000d60c:	33c0      	adds	r3, #192	; 0xc0
9000d60e:	009b      	lsls	r3, r3, #2
9000d610:	4413      	add	r3, r2
9000d612:	685b      	ldr	r3, [r3, #4]
9000d614:	689b      	ldr	r3, [r3, #8]
9000d616:	68fa      	ldr	r2, [r7, #12]
9000d618:	429a      	cmp	r2, r3
9000d61a:	d101      	bne.n	9000d620 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x70>
			return false; // Packet type already defined
9000d61c:	2300      	movs	r3, #0
9000d61e:	e025      	b.n	9000d66c <_ZN10MessageBus6defineI11ErrorPacketEEbh+0xbc>
		insertion_point++;
9000d620:	697b      	ldr	r3, [r7, #20]
9000d622:	3301      	adds	r3, #1
9000d624:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
9000d626:	697b      	ldr	r3, [r7, #20]
9000d628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d62c:	d1e4      	bne.n	9000d5f8 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x48>
			insertion_point = 0;
9000d62e:	2300      	movs	r3, #0
9000d630:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d632:	e7e1      	b.n	9000d5f8 <_ZN10MessageBus6defineI11ErrorPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d634:	78fb      	ldrb	r3, [r7, #3]
9000d636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d63a:	4613      	mov	r3, r2
9000d63c:	005b      	lsls	r3, r3, #1
9000d63e:	4413      	add	r3, r2
9000d640:	009b      	lsls	r3, r3, #2
9000d642:	687a      	ldr	r2, [r7, #4]
9000d644:	4413      	add	r3, r2
9000d646:	3304      	adds	r3, #4
9000d648:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
9000d64a:	68bb      	ldr	r3, [r7, #8]
9000d64c:	78fa      	ldrb	r2, [r7, #3]
9000d64e:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d650:	68bb      	ldr	r3, [r7, #8]
9000d652:	693a      	ldr	r2, [r7, #16]
9000d654:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d656:	68bb      	ldr	r3, [r7, #8]
9000d658:	68fa      	ldr	r2, [r7, #12]
9000d65a:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
9000d65c:	687a      	ldr	r2, [r7, #4]
9000d65e:	697b      	ldr	r3, [r7, #20]
9000d660:	33c0      	adds	r3, #192	; 0xc0
9000d662:	009b      	lsls	r3, r3, #2
9000d664:	4413      	add	r3, r2
9000d666:	68ba      	ldr	r2, [r7, #8]
9000d668:	605a      	str	r2, [r3, #4]
	return true;
9000d66a:	2301      	movs	r3, #1
}
9000d66c:	4618      	mov	r0, r3
9000d66e:	3718      	adds	r7, #24
9000d670:	46bd      	mov	sp, r7
9000d672:	bd80      	pop	{r7, pc}
9000d674:	90014318 	.word	0x90014318

9000d678 <_ZN10MessageBus6defineI13RequestPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d678:	b580      	push	{r7, lr}
9000d67a:	b086      	sub	sp, #24
9000d67c:	af00      	add	r7, sp, #0
9000d67e:	6078      	str	r0, [r7, #4]
9000d680:	460b      	mov	r3, r1
9000d682:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d684:	230a      	movs	r3, #10
9000d686:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d688:	482c      	ldr	r0, [pc, #176]	; (9000d73c <_ZN10MessageBus6defineI13RequestPacketEEbh+0xc4>)
9000d68a:	f7ff fde5 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d68e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
9000d690:	68fb      	ldr	r3, [r7, #12]
9000d692:	b2db      	uxtb	r3, r3
9000d694:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d696:	78fb      	ldrb	r3, [r7, #3]
9000d698:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d69c:	6879      	ldr	r1, [r7, #4]
9000d69e:	4613      	mov	r3, r2
9000d6a0:	005b      	lsls	r3, r3, #1
9000d6a2:	4413      	add	r3, r2
9000d6a4:	009b      	lsls	r3, r3, #2
9000d6a6:	440b      	add	r3, r1
9000d6a8:	330c      	adds	r3, #12
9000d6aa:	681b      	ldr	r3, [r3, #0]
9000d6ac:	2b00      	cmp	r3, #0
9000d6ae:	d001      	beq.n	9000d6b4 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d6b0:	2300      	movs	r3, #0
9000d6b2:	e03f      	b.n	9000d734 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xbc>
	if(struct_size > max_packet_size) {
9000d6b4:	693b      	ldr	r3, [r7, #16]
9000d6b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d6ba:	d301      	bcc.n	9000d6c0 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x48>
		return false; // Packet size too large
9000d6bc:	2300      	movs	r3, #0
9000d6be:	e039      	b.n	9000d734 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xbc>
	while(definitions_by_type[insertion_point] != nullptr) {
9000d6c0:	687a      	ldr	r2, [r7, #4]
9000d6c2:	697b      	ldr	r3, [r7, #20]
9000d6c4:	33c0      	adds	r3, #192	; 0xc0
9000d6c6:	009b      	lsls	r3, r3, #2
9000d6c8:	4413      	add	r3, r2
9000d6ca:	685b      	ldr	r3, [r3, #4]
9000d6cc:	2b00      	cmp	r3, #0
9000d6ce:	d015      	beq.n	9000d6fc <_ZN10MessageBus6defineI13RequestPacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d6d0:	687a      	ldr	r2, [r7, #4]
9000d6d2:	697b      	ldr	r3, [r7, #20]
9000d6d4:	33c0      	adds	r3, #192	; 0xc0
9000d6d6:	009b      	lsls	r3, r3, #2
9000d6d8:	4413      	add	r3, r2
9000d6da:	685b      	ldr	r3, [r3, #4]
9000d6dc:	689b      	ldr	r3, [r3, #8]
9000d6de:	68fa      	ldr	r2, [r7, #12]
9000d6e0:	429a      	cmp	r2, r3
9000d6e2:	d101      	bne.n	9000d6e8 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x70>
			return false; // Packet type already defined
9000d6e4:	2300      	movs	r3, #0
9000d6e6:	e025      	b.n	9000d734 <_ZN10MessageBus6defineI13RequestPacketEEbh+0xbc>
		insertion_point++;
9000d6e8:	697b      	ldr	r3, [r7, #20]
9000d6ea:	3301      	adds	r3, #1
9000d6ec:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
9000d6ee:	697b      	ldr	r3, [r7, #20]
9000d6f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d6f4:	d1e4      	bne.n	9000d6c0 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x48>
			insertion_point = 0;
9000d6f6:	2300      	movs	r3, #0
9000d6f8:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d6fa:	e7e1      	b.n	9000d6c0 <_ZN10MessageBus6defineI13RequestPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d6fc:	78fb      	ldrb	r3, [r7, #3]
9000d6fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d702:	4613      	mov	r3, r2
9000d704:	005b      	lsls	r3, r3, #1
9000d706:	4413      	add	r3, r2
9000d708:	009b      	lsls	r3, r3, #2
9000d70a:	687a      	ldr	r2, [r7, #4]
9000d70c:	4413      	add	r3, r2
9000d70e:	3304      	adds	r3, #4
9000d710:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
9000d712:	68bb      	ldr	r3, [r7, #8]
9000d714:	78fa      	ldrb	r2, [r7, #3]
9000d716:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d718:	68bb      	ldr	r3, [r7, #8]
9000d71a:	693a      	ldr	r2, [r7, #16]
9000d71c:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d71e:	68bb      	ldr	r3, [r7, #8]
9000d720:	68fa      	ldr	r2, [r7, #12]
9000d722:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
9000d724:	687a      	ldr	r2, [r7, #4]
9000d726:	697b      	ldr	r3, [r7, #20]
9000d728:	33c0      	adds	r3, #192	; 0xc0
9000d72a:	009b      	lsls	r3, r3, #2
9000d72c:	4413      	add	r3, r2
9000d72e:	68ba      	ldr	r2, [r7, #8]
9000d730:	605a      	str	r2, [r3, #4]
	return true;
9000d732:	2301      	movs	r3, #1
}
9000d734:	4618      	mov	r0, r3
9000d736:	3718      	adds	r7, #24
9000d738:	46bd      	mov	sp, r7
9000d73a:	bd80      	pop	{r7, pc}
9000d73c:	90014300 	.word	0x90014300

9000d740 <_ZN10MessageBus6defineI14ResponsePacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d740:	b580      	push	{r7, lr}
9000d742:	b086      	sub	sp, #24
9000d744:	af00      	add	r7, sp, #0
9000d746:	6078      	str	r0, [r7, #4]
9000d748:	460b      	mov	r3, r1
9000d74a:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d74c:	230a      	movs	r3, #10
9000d74e:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d750:	482c      	ldr	r0, [pc, #176]	; (9000d804 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xc4>)
9000d752:	f7ff fd81 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d756:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
9000d758:	68fb      	ldr	r3, [r7, #12]
9000d75a:	b2db      	uxtb	r3, r3
9000d75c:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d75e:	78fb      	ldrb	r3, [r7, #3]
9000d760:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d764:	6879      	ldr	r1, [r7, #4]
9000d766:	4613      	mov	r3, r2
9000d768:	005b      	lsls	r3, r3, #1
9000d76a:	4413      	add	r3, r2
9000d76c:	009b      	lsls	r3, r3, #2
9000d76e:	440b      	add	r3, r1
9000d770:	330c      	adds	r3, #12
9000d772:	681b      	ldr	r3, [r3, #0]
9000d774:	2b00      	cmp	r3, #0
9000d776:	d001      	beq.n	9000d77c <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d778:	2300      	movs	r3, #0
9000d77a:	e03f      	b.n	9000d7fc <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xbc>
	if(struct_size > max_packet_size) {
9000d77c:	693b      	ldr	r3, [r7, #16]
9000d77e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d782:	d301      	bcc.n	9000d788 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x48>
		return false; // Packet size too large
9000d784:	2300      	movs	r3, #0
9000d786:	e039      	b.n	9000d7fc <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xbc>
	while(definitions_by_type[insertion_point] != nullptr) {
9000d788:	687a      	ldr	r2, [r7, #4]
9000d78a:	697b      	ldr	r3, [r7, #20]
9000d78c:	33c0      	adds	r3, #192	; 0xc0
9000d78e:	009b      	lsls	r3, r3, #2
9000d790:	4413      	add	r3, r2
9000d792:	685b      	ldr	r3, [r3, #4]
9000d794:	2b00      	cmp	r3, #0
9000d796:	d015      	beq.n	9000d7c4 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d798:	687a      	ldr	r2, [r7, #4]
9000d79a:	697b      	ldr	r3, [r7, #20]
9000d79c:	33c0      	adds	r3, #192	; 0xc0
9000d79e:	009b      	lsls	r3, r3, #2
9000d7a0:	4413      	add	r3, r2
9000d7a2:	685b      	ldr	r3, [r3, #4]
9000d7a4:	689b      	ldr	r3, [r3, #8]
9000d7a6:	68fa      	ldr	r2, [r7, #12]
9000d7a8:	429a      	cmp	r2, r3
9000d7aa:	d101      	bne.n	9000d7b0 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x70>
			return false; // Packet type already defined
9000d7ac:	2300      	movs	r3, #0
9000d7ae:	e025      	b.n	9000d7fc <_ZN10MessageBus6defineI14ResponsePacketEEbh+0xbc>
		insertion_point++;
9000d7b0:	697b      	ldr	r3, [r7, #20]
9000d7b2:	3301      	adds	r3, #1
9000d7b4:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
9000d7b6:	697b      	ldr	r3, [r7, #20]
9000d7b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d7bc:	d1e4      	bne.n	9000d788 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x48>
			insertion_point = 0;
9000d7be:	2300      	movs	r3, #0
9000d7c0:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d7c2:	e7e1      	b.n	9000d788 <_ZN10MessageBus6defineI14ResponsePacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d7c4:	78fb      	ldrb	r3, [r7, #3]
9000d7c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d7ca:	4613      	mov	r3, r2
9000d7cc:	005b      	lsls	r3, r3, #1
9000d7ce:	4413      	add	r3, r2
9000d7d0:	009b      	lsls	r3, r3, #2
9000d7d2:	687a      	ldr	r2, [r7, #4]
9000d7d4:	4413      	add	r3, r2
9000d7d6:	3304      	adds	r3, #4
9000d7d8:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
9000d7da:	68bb      	ldr	r3, [r7, #8]
9000d7dc:	78fa      	ldrb	r2, [r7, #3]
9000d7de:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d7e0:	68bb      	ldr	r3, [r7, #8]
9000d7e2:	693a      	ldr	r2, [r7, #16]
9000d7e4:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d7e6:	68bb      	ldr	r3, [r7, #8]
9000d7e8:	68fa      	ldr	r2, [r7, #12]
9000d7ea:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
9000d7ec:	687a      	ldr	r2, [r7, #4]
9000d7ee:	697b      	ldr	r3, [r7, #20]
9000d7f0:	33c0      	adds	r3, #192	; 0xc0
9000d7f2:	009b      	lsls	r3, r3, #2
9000d7f4:	4413      	add	r3, r2
9000d7f6:	68ba      	ldr	r2, [r7, #8]
9000d7f8:	605a      	str	r2, [r3, #4]
	return true;
9000d7fa:	2301      	movs	r3, #1
}
9000d7fc:	4618      	mov	r0, r3
9000d7fe:	3718      	adds	r7, #24
9000d800:	46bd      	mov	sp, r7
9000d802:	bd80      	pop	{r7, pc}
9000d804:	900142e4 	.word	0x900142e4

9000d808 <_ZN10MessageBus6defineI14ProgressPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d808:	b580      	push	{r7, lr}
9000d80a:	b086      	sub	sp, #24
9000d80c:	af00      	add	r7, sp, #0
9000d80e:	6078      	str	r0, [r7, #4]
9000d810:	460b      	mov	r3, r1
9000d812:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d814:	2307      	movs	r3, #7
9000d816:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d818:	482c      	ldr	r0, [pc, #176]	; (9000d8cc <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xc4>)
9000d81a:	f7ff fd1d 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d81e:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
9000d820:	68fb      	ldr	r3, [r7, #12]
9000d822:	b2db      	uxtb	r3, r3
9000d824:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d826:	78fb      	ldrb	r3, [r7, #3]
9000d828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d82c:	6879      	ldr	r1, [r7, #4]
9000d82e:	4613      	mov	r3, r2
9000d830:	005b      	lsls	r3, r3, #1
9000d832:	4413      	add	r3, r2
9000d834:	009b      	lsls	r3, r3, #2
9000d836:	440b      	add	r3, r1
9000d838:	330c      	adds	r3, #12
9000d83a:	681b      	ldr	r3, [r3, #0]
9000d83c:	2b00      	cmp	r3, #0
9000d83e:	d001      	beq.n	9000d844 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d840:	2300      	movs	r3, #0
9000d842:	e03f      	b.n	9000d8c4 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xbc>
	if(struct_size > max_packet_size) {
9000d844:	693b      	ldr	r3, [r7, #16]
9000d846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d84a:	d301      	bcc.n	9000d850 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x48>
		return false; // Packet size too large
9000d84c:	2300      	movs	r3, #0
9000d84e:	e039      	b.n	9000d8c4 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xbc>
	while(definitions_by_type[insertion_point] != nullptr) {
9000d850:	687a      	ldr	r2, [r7, #4]
9000d852:	697b      	ldr	r3, [r7, #20]
9000d854:	33c0      	adds	r3, #192	; 0xc0
9000d856:	009b      	lsls	r3, r3, #2
9000d858:	4413      	add	r3, r2
9000d85a:	685b      	ldr	r3, [r3, #4]
9000d85c:	2b00      	cmp	r3, #0
9000d85e:	d015      	beq.n	9000d88c <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d860:	687a      	ldr	r2, [r7, #4]
9000d862:	697b      	ldr	r3, [r7, #20]
9000d864:	33c0      	adds	r3, #192	; 0xc0
9000d866:	009b      	lsls	r3, r3, #2
9000d868:	4413      	add	r3, r2
9000d86a:	685b      	ldr	r3, [r3, #4]
9000d86c:	689b      	ldr	r3, [r3, #8]
9000d86e:	68fa      	ldr	r2, [r7, #12]
9000d870:	429a      	cmp	r2, r3
9000d872:	d101      	bne.n	9000d878 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x70>
			return false; // Packet type already defined
9000d874:	2300      	movs	r3, #0
9000d876:	e025      	b.n	9000d8c4 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0xbc>
		insertion_point++;
9000d878:	697b      	ldr	r3, [r7, #20]
9000d87a:	3301      	adds	r3, #1
9000d87c:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
9000d87e:	697b      	ldr	r3, [r7, #20]
9000d880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d884:	d1e4      	bne.n	9000d850 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x48>
			insertion_point = 0;
9000d886:	2300      	movs	r3, #0
9000d888:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d88a:	e7e1      	b.n	9000d850 <_ZN10MessageBus6defineI14ProgressPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d88c:	78fb      	ldrb	r3, [r7, #3]
9000d88e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d892:	4613      	mov	r3, r2
9000d894:	005b      	lsls	r3, r3, #1
9000d896:	4413      	add	r3, r2
9000d898:	009b      	lsls	r3, r3, #2
9000d89a:	687a      	ldr	r2, [r7, #4]
9000d89c:	4413      	add	r3, r2
9000d89e:	3304      	adds	r3, #4
9000d8a0:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
9000d8a2:	68bb      	ldr	r3, [r7, #8]
9000d8a4:	78fa      	ldrb	r2, [r7, #3]
9000d8a6:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d8a8:	68bb      	ldr	r3, [r7, #8]
9000d8aa:	693a      	ldr	r2, [r7, #16]
9000d8ac:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d8ae:	68bb      	ldr	r3, [r7, #8]
9000d8b0:	68fa      	ldr	r2, [r7, #12]
9000d8b2:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
9000d8b4:	687a      	ldr	r2, [r7, #4]
9000d8b6:	697b      	ldr	r3, [r7, #20]
9000d8b8:	33c0      	adds	r3, #192	; 0xc0
9000d8ba:	009b      	lsls	r3, r3, #2
9000d8bc:	4413      	add	r3, r2
9000d8be:	68ba      	ldr	r2, [r7, #8]
9000d8c0:	605a      	str	r2, [r3, #4]
	return true;
9000d8c2:	2301      	movs	r3, #1
}
9000d8c4:	4618      	mov	r0, r3
9000d8c6:	3718      	adds	r7, #24
9000d8c8:	46bd      	mov	sp, r7
9000d8ca:	bd80      	pop	{r7, pc}
9000d8cc:	900142c8 	.word	0x900142c8

9000d8d0 <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh>:
template<typename T> bool MessageBus::define(uint8_t identifier) {
9000d8d0:	b580      	push	{r7, lr}
9000d8d2:	b086      	sub	sp, #24
9000d8d4:	af00      	add	r7, sp, #0
9000d8d6:	6078      	str	r0, [r7, #4]
9000d8d8:	460b      	mov	r3, r1
9000d8da:	70fb      	strb	r3, [r7, #3]
	size_t struct_size = sizeof(T);
9000d8dc:	2304      	movs	r3, #4
9000d8de:	613b      	str	r3, [r7, #16]
	size_t hash = typeid(T).hash_code();
9000d8e0:	482c      	ldr	r0, [pc, #176]	; (9000d994 <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0xc4>)
9000d8e2:	f7ff fcb9 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d8e6:	60f8      	str	r0, [r7, #12]
	uint32_t insertion_point = hash % 256;
9000d8e8:	68fb      	ldr	r3, [r7, #12]
9000d8ea:	b2db      	uxtb	r3, r3
9000d8ec:	617b      	str	r3, [r7, #20]
	if(definitions_by_id[identifier & 0b00111111].hash != 0) {
9000d8ee:	78fb      	ldrb	r3, [r7, #3]
9000d8f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d8f4:	6879      	ldr	r1, [r7, #4]
9000d8f6:	4613      	mov	r3, r2
9000d8f8:	005b      	lsls	r3, r3, #1
9000d8fa:	4413      	add	r3, r2
9000d8fc:	009b      	lsls	r3, r3, #2
9000d8fe:	440b      	add	r3, r1
9000d900:	330c      	adds	r3, #12
9000d902:	681b      	ldr	r3, [r3, #0]
9000d904:	2b00      	cmp	r3, #0
9000d906:	d001      	beq.n	9000d90c <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0x3c>
		return false; // Packet ID already in use
9000d908:	2300      	movs	r3, #0
9000d90a:	e03f      	b.n	9000d98c <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0xbc>
	if(struct_size > max_packet_size) {
9000d90c:	693b      	ldr	r3, [r7, #16]
9000d90e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000d912:	d301      	bcc.n	9000d918 <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0x48>
		return false; // Packet size too large
9000d914:	2300      	movs	r3, #0
9000d916:	e039      	b.n	9000d98c <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0xbc>
	while(definitions_by_type[insertion_point] != nullptr) {
9000d918:	687a      	ldr	r2, [r7, #4]
9000d91a:	697b      	ldr	r3, [r7, #20]
9000d91c:	33c0      	adds	r3, #192	; 0xc0
9000d91e:	009b      	lsls	r3, r3, #2
9000d920:	4413      	add	r3, r2
9000d922:	685b      	ldr	r3, [r3, #4]
9000d924:	2b00      	cmp	r3, #0
9000d926:	d015      	beq.n	9000d954 <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0x84>
		if(definitions_by_type[insertion_point]->hash == hash) {
9000d928:	687a      	ldr	r2, [r7, #4]
9000d92a:	697b      	ldr	r3, [r7, #20]
9000d92c:	33c0      	adds	r3, #192	; 0xc0
9000d92e:	009b      	lsls	r3, r3, #2
9000d930:	4413      	add	r3, r2
9000d932:	685b      	ldr	r3, [r3, #4]
9000d934:	689b      	ldr	r3, [r3, #8]
9000d936:	68fa      	ldr	r2, [r7, #12]
9000d938:	429a      	cmp	r2, r3
9000d93a:	d101      	bne.n	9000d940 <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0x70>
			return false; // Packet type already defined
9000d93c:	2300      	movs	r3, #0
9000d93e:	e025      	b.n	9000d98c <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0xbc>
		insertion_point++;
9000d940:	697b      	ldr	r3, [r7, #20]
9000d942:	3301      	adds	r3, #1
9000d944:	617b      	str	r3, [r7, #20]
		if(insertion_point == 256) {
9000d946:	697b      	ldr	r3, [r7, #20]
9000d948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d94c:	d1e4      	bne.n	9000d918 <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0x48>
			insertion_point = 0;
9000d94e:	2300      	movs	r3, #0
9000d950:	617b      	str	r3, [r7, #20]
	while(definitions_by_type[insertion_point] != nullptr) {
9000d952:	e7e1      	b.n	9000d918 <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh+0x48>
	PacketDefinition* def = &definitions_by_id[identifier & 0b00111111];
9000d954:	78fb      	ldrb	r3, [r7, #3]
9000d956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000d95a:	4613      	mov	r3, r2
9000d95c:	005b      	lsls	r3, r3, #1
9000d95e:	4413      	add	r3, r2
9000d960:	009b      	lsls	r3, r3, #2
9000d962:	687a      	ldr	r2, [r7, #4]
9000d964:	4413      	add	r3, r2
9000d966:	3304      	adds	r3, #4
9000d968:	60bb      	str	r3, [r7, #8]
	def->id = identifier;
9000d96a:	68bb      	ldr	r3, [r7, #8]
9000d96c:	78fa      	ldrb	r2, [r7, #3]
9000d96e:	701a      	strb	r2, [r3, #0]
	def->size = struct_size;
9000d970:	68bb      	ldr	r3, [r7, #8]
9000d972:	693a      	ldr	r2, [r7, #16]
9000d974:	605a      	str	r2, [r3, #4]
	def->hash = hash;
9000d976:	68bb      	ldr	r3, [r7, #8]
9000d978:	68fa      	ldr	r2, [r7, #12]
9000d97a:	609a      	str	r2, [r3, #8]
	definitions_by_type[insertion_point] = def;
9000d97c:	687a      	ldr	r2, [r7, #4]
9000d97e:	697b      	ldr	r3, [r7, #20]
9000d980:	33c0      	adds	r3, #192	; 0xc0
9000d982:	009b      	lsls	r3, r3, #2
9000d984:	4413      	add	r3, r2
9000d986:	68ba      	ldr	r2, [r7, #8]
9000d988:	605a      	str	r2, [r3, #4]
	return true;
9000d98a:	2301      	movs	r3, #1
}
9000d98c:	4618      	mov	r0, r3
9000d98e:	3718      	adds	r7, #24
9000d990:	46bd      	mov	sp, r7
9000d992:	bd80      	pop	{r7, pc}
9000d994:	900142a4 	.word	0x900142a4

9000d998 <_ZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EE>:
 *
 * Accepts a function reference as message handler.
 *
 * Warning: this method is not thread-safe.
 */
template<typename T> bool MessageBus::handle(std::function<void(uint8_t, T*)> handler) {
9000d998:	b590      	push	{r4, r7, lr}
9000d99a:	b08d      	sub	sp, #52	; 0x34
9000d99c:	af00      	add	r7, sp, #0
9000d99e:	6078      	str	r0, [r7, #4]
9000d9a0:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
9000d9a2:	482c      	ldr	r0, [pc, #176]	; (9000da54 <_ZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EE+0xbc>)
9000d9a4:	f7ff fc58 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000d9a8:	62f8      	str	r0, [r7, #44]	; 0x2c

	PacketDefinition* def = retrieve(hash);
9000d9aa:	687b      	ldr	r3, [r7, #4]
9000d9ac:	681b      	ldr	r3, [r3, #0]
9000d9ae:	3314      	adds	r3, #20
9000d9b0:	681b      	ldr	r3, [r3, #0]
9000d9b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000d9b4:	6878      	ldr	r0, [r7, #4]
9000d9b6:	4798      	blx	r3
9000d9b8:	62b8      	str	r0, [r7, #40]	; 0x28

	if(def != nullptr) {
9000d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d9bc:	2b00      	cmp	r3, #0
9000d9be:	d043      	beq.n	9000da48 <_ZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EE+0xb0>
		uint8_t packetID = def->id;
9000d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d9c2:	781b      	ldrb	r3, [r3, #0]
9000d9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(handlers[packetID] != nullptr) {
9000d9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d9cc:	f203 1371 	addw	r3, r3, #369	; 0x171
9000d9d0:	011b      	lsls	r3, r3, #4
9000d9d2:	687a      	ldr	r2, [r7, #4]
9000d9d4:	4413      	add	r3, r2
9000d9d6:	3304      	adds	r3, #4
9000d9d8:	2100      	movs	r1, #0
9000d9da:	4618      	mov	r0, r3
9000d9dc:	f000 fa68 	bl	9000deb0 <_ZStneIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>
9000d9e0:	4603      	mov	r3, r0
9000d9e2:	2b00      	cmp	r3, #0
9000d9e4:	d015      	beq.n	9000da12 <_ZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EE+0x7a>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
9000d9e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d9ea:	f203 1371 	addw	r3, r3, #369	; 0x171
9000d9ee:	011b      	lsls	r3, r3, #4
9000d9f0:	687a      	ldr	r2, [r7, #4]
9000d9f2:	4413      	add	r3, r2
9000d9f4:	1d1a      	adds	r2, r3, #4
9000d9f6:	687b      	ldr	r3, [r7, #4]
9000d9f8:	60bb      	str	r3, [r7, #8]
9000d9fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d9fe:	733b      	strb	r3, [r7, #12]
9000da00:	683b      	ldr	r3, [r7, #0]
9000da02:	613b      	str	r3, [r7, #16]
9000da04:	f107 0308 	add.w	r3, r7, #8
9000da08:	4619      	mov	r1, r3
9000da0a:	4610      	mov	r0, r2
9000da0c:	f000 faa9 	bl	9000df62 <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIS7_E4typeESt15__invoke_resultIRSG_JhS0_EEEE5valueERS2_E4typeEOS7_>
9000da10:	e018      	b.n	9000da44 <_ZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EE+0xac>
				handlers[packetID](sender, (T*) packet);
				handler(sender, (T*) packet);
			};
		} else {
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
9000da12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000da16:	f203 1371 	addw	r3, r3, #369	; 0x171
9000da1a:	011b      	lsls	r3, r3, #4
9000da1c:	687a      	ldr	r2, [r7, #4]
9000da1e:	4413      	add	r3, r2
9000da20:	1d1c      	adds	r4, r3, #4
9000da22:	f107 0314 	add.w	r3, r7, #20
9000da26:	6839      	ldr	r1, [r7, #0]
9000da28:	4618      	mov	r0, r3
9000da2a:	f000 fab8 	bl	9000df9e <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1ERKS3_>
9000da2e:	f107 0314 	add.w	r3, r7, #20
9000da32:	4619      	mov	r1, r3
9000da34:	4620      	mov	r0, r4
9000da36:	f000 fae4 	bl	9000e002 <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E0_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIS7_E4typeESt15__invoke_resultIRSG_JhS0_EEEE5valueERS2_E4typeEOS7_>
9000da3a:	f107 0314 	add.w	r3, r7, #20
9000da3e:	4618      	mov	r0, r3
9000da40:	f000 fa29 	bl	9000de96 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
		}

		return true;
9000da44:	2301      	movs	r3, #1
9000da46:	e000      	b.n	9000da4a <_ZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EE+0xb2>
	}

	return false;
9000da48:	2300      	movs	r3, #0
}
9000da4a:	4618      	mov	r0, r3
9000da4c:	3734      	adds	r7, #52	; 0x34
9000da4e:	46bd      	mov	sp, r7
9000da50:	bd90      	pop	{r4, r7, pc}
9000da52:	bf00      	nop
9000da54:	900142a4 	.word	0x900142a4

9000da58 <_ZN10MessageBus4sendI23DummySystem_DummyPacketEEbPT_>:
}

/*
 * Sends the given message using the implemented transmission protocol.
 */
template<typename T> bool MessageBus::send(T *message) {
9000da58:	b580      	push	{r7, lr}
9000da5a:	b084      	sub	sp, #16
9000da5c:	af00      	add	r7, sp, #0
9000da5e:	6078      	str	r0, [r7, #4]
9000da60:	6039      	str	r1, [r7, #0]
	size_t hash = typeid(T).hash_code();
9000da62:	480c      	ldr	r0, [pc, #48]	; (9000da94 <_ZN10MessageBus4sendI23DummySystem_DummyPacketEEbPT_+0x3c>)
9000da64:	f7ff fbf8 	bl	9000d258 <_ZNKSt9type_info9hash_codeEv>
9000da68:	60f8      	str	r0, [r7, #12]

	PacketDefinition* def = retrieve(hash);
9000da6a:	687b      	ldr	r3, [r7, #4]
9000da6c:	681b      	ldr	r3, [r3, #0]
9000da6e:	3314      	adds	r3, #20
9000da70:	681b      	ldr	r3, [r3, #0]
9000da72:	68f9      	ldr	r1, [r7, #12]
9000da74:	6878      	ldr	r0, [r7, #4]
9000da76:	4798      	blx	r3
9000da78:	60b8      	str	r0, [r7, #8]

	return internal_send(def, (uint8_t*) message);
9000da7a:	687b      	ldr	r3, [r7, #4]
9000da7c:	681b      	ldr	r3, [r3, #0]
9000da7e:	3310      	adds	r3, #16
9000da80:	681b      	ldr	r3, [r3, #0]
9000da82:	683a      	ldr	r2, [r7, #0]
9000da84:	68b9      	ldr	r1, [r7, #8]
9000da86:	6878      	ldr	r0, [r7, #4]
9000da88:	4798      	blx	r3
9000da8a:	4603      	mov	r3, r0
}
9000da8c:	4618      	mov	r0, r3
9000da8e:	3710      	adds	r7, #16
9000da90:	46bd      	mov	sp, r7
9000da92:	bd80      	pop	{r7, pc}
9000da94:	900142a4 	.word	0x900142a4

9000da98 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh>:

bool MessageBus::internal_send(PacketDefinition* def, uint8_t* data) {
9000da98:	b580      	push	{r7, lr}
9000da9a:	b088      	sub	sp, #32
9000da9c:	af00      	add	r7, sp, #0
9000da9e:	60f8      	str	r0, [r7, #12]
9000daa0:	60b9      	str	r1, [r7, #8]
9000daa2:	607a      	str	r2, [r7, #4]
	if(def != nullptr) {
9000daa4:	68bb      	ldr	r3, [r7, #8]
9000daa6:	2b00      	cmp	r3, #0
9000daa8:	d03a      	beq.n	9000db20 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x88>
		uint32_t data_bytes_written = 0;
9000daaa:	2300      	movs	r3, #0
9000daac:	61fb      	str	r3, [r7, #28]

		while(data_bytes_written < def->size) {
9000daae:	68bb      	ldr	r3, [r7, #8]
9000dab0:	685b      	ldr	r3, [r3, #4]
9000dab2:	69fa      	ldr	r2, [r7, #28]
9000dab4:	429a      	cmp	r2, r3
9000dab6:	d22b      	bcs.n	9000db10 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x78>
			uint8_t header = PREAMBLE;
9000dab8:	237f      	movs	r3, #127	; 0x7f
9000daba:	75fb      	strb	r3, [r7, #23]
			append(&header, 1); // Write the packet ID for each transmission frame.
9000dabc:	68fb      	ldr	r3, [r7, #12]
9000dabe:	681b      	ldr	r3, [r3, #0]
9000dac0:	3308      	adds	r3, #8
9000dac2:	681b      	ldr	r3, [r3, #0]
9000dac4:	f107 0117 	add.w	r1, r7, #23
9000dac8:	2201      	movs	r2, #1
9000daca:	68f8      	ldr	r0, [r7, #12]
9000dacc:	4798      	blx	r3

			append(&def->id, 1); // Write the packet ID for each transmission frame.
9000dace:	68fb      	ldr	r3, [r7, #12]
9000dad0:	681b      	ldr	r3, [r3, #0]
9000dad2:	3308      	adds	r3, #8
9000dad4:	681b      	ldr	r3, [r3, #0]
9000dad6:	68b9      	ldr	r1, [r7, #8]
9000dad8:	2201      	movs	r2, #1
9000dada:	68f8      	ldr	r0, [r7, #12]
9000dadc:	4798      	blx	r3
							     // This is only to facilitate the packet reconstruction and should not increment data_bytes_written.

			uint32_t new_bytes = append(data + data_bytes_written, def->size - data_bytes_written); // Send the data
9000dade:	68fb      	ldr	r3, [r7, #12]
9000dae0:	681b      	ldr	r3, [r3, #0]
9000dae2:	3308      	adds	r3, #8
9000dae4:	681b      	ldr	r3, [r3, #0]
9000dae6:	6879      	ldr	r1, [r7, #4]
9000dae8:	69fa      	ldr	r2, [r7, #28]
9000daea:	1888      	adds	r0, r1, r2
9000daec:	68ba      	ldr	r2, [r7, #8]
9000daee:	6851      	ldr	r1, [r2, #4]
9000daf0:	69fa      	ldr	r2, [r7, #28]
9000daf2:	1a8a      	subs	r2, r1, r2
9000daf4:	4601      	mov	r1, r0
9000daf6:	68f8      	ldr	r0, [r7, #12]
9000daf8:	4798      	blx	r3
9000dafa:	61b8      	str	r0, [r7, #24]

			if(new_bytes == 0) {
9000dafc:	69bb      	ldr	r3, [r7, #24]
9000dafe:	2b00      	cmp	r3, #0
9000db00:	d101      	bne.n	9000db06 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x6e>
				return false;
9000db02:	2300      	movs	r3, #0
9000db04:	e00d      	b.n	9000db22 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x8a>
			} else {
				data_bytes_written += new_bytes;
9000db06:	69fa      	ldr	r2, [r7, #28]
9000db08:	69bb      	ldr	r3, [r7, #24]
9000db0a:	4413      	add	r3, r2
9000db0c:	61fb      	str	r3, [r7, #28]
		while(data_bytes_written < def->size) {
9000db0e:	e7ce      	b.n	9000daae <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x16>
			}
		}

		transmit();
9000db10:	68fb      	ldr	r3, [r7, #12]
9000db12:	681b      	ldr	r3, [r3, #0]
9000db14:	330c      	adds	r3, #12
9000db16:	681b      	ldr	r3, [r3, #0]
9000db18:	68f8      	ldr	r0, [r7, #12]
9000db1a:	4798      	blx	r3

		return true;
9000db1c:	2301      	movs	r3, #1
9000db1e:	e000      	b.n	9000db22 <_ZN10MessageBus13internal_sendEP16PacketDefinitionPh+0x8a>
	}

	return false;
9000db20:	2300      	movs	r3, #0
}
9000db22:	4618      	mov	r0, r3
9000db24:	3720      	adds	r7, #32
9000db26:	46bd      	mov	sp, r7
9000db28:	bd80      	pop	{r7, pc}
	...

9000db2c <_ZN10MessageBus7receiveEhPhm>:
 * Handles the reception of a message.
 *
 * Provided an external thread calls this method with a buffer to the next incoming message,
 * dispatches the message to the appropriate message handlers.
 */
void MessageBus::receive(uint8_t sender_id, uint8_t *pointer, uint32_t length) {
9000db2c:	b580      	push	{r7, lr}
9000db2e:	b08a      	sub	sp, #40	; 0x28
9000db30:	af00      	add	r7, sp, #0
9000db32:	60f8      	str	r0, [r7, #12]
9000db34:	607a      	str	r2, [r7, #4]
9000db36:	603b      	str	r3, [r7, #0]
9000db38:	460b      	mov	r3, r1
9000db3a:	72fb      	strb	r3, [r7, #11]
	ReconstructionBuffer* indexable_buffer = &reconstruction_buffers[sender_id & 0b00111111];
9000db3c:	7afb      	ldrb	r3, [r7, #11]
9000db3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000db42:	4613      	mov	r3, r2
9000db44:	021b      	lsls	r3, r3, #8
9000db46:	4413      	add	r3, r2
9000db48:	009b      	lsls	r3, r3, #2
9000db4a:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
9000db4e:	68fa      	ldr	r2, [r7, #12]
9000db50:	4413      	add	r3, r2
9000db52:	3304      	adds	r3, #4
9000db54:	61fb      	str	r3, [r7, #28]
	uint8_t header;
	uint8_t packet_id;
	PacketDefinition* def;

	 printf("Processing %d bytes\r\n", length);
9000db56:	6839      	ldr	r1, [r7, #0]
9000db58:	488b      	ldr	r0, [pc, #556]	; (9000dd88 <_ZN10MessageBus7receiveEhPhm+0x25c>)
9000db5a:	f003 ff77 	bl	90011a4c <iprintf>

	while(length > 0) {
9000db5e:	683b      	ldr	r3, [r7, #0]
9000db60:	2b00      	cmp	r3, #0
9000db62:	f000 810d 	beq.w	9000dd80 <_ZN10MessageBus7receiveEhPhm+0x254>
		if(indexable_buffer->index == 0) { // New packet incoming
9000db66:	69fb      	ldr	r3, [r7, #28]
9000db68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
9000db6c:	2b00      	cmp	r3, #0
9000db6e:	d119      	bne.n	9000dba4 <_ZN10MessageBus7receiveEhPhm+0x78>
			do {
				if(length == 0) {
9000db70:	683b      	ldr	r3, [r7, #0]
9000db72:	2b00      	cmp	r3, #0
9000db74:	f000 8101 	beq.w	9000dd7a <_ZN10MessageBus7receiveEhPhm+0x24e>
					return; // Nothing useful in this frame
				}

				header = *pointer++;
9000db78:	687b      	ldr	r3, [r7, #4]
9000db7a:	1c5a      	adds	r2, r3, #1
9000db7c:	607a      	str	r2, [r7, #4]
9000db7e:	781b      	ldrb	r3, [r3, #0]
9000db80:	76fb      	strb	r3, [r7, #27]
				length--;
9000db82:	683b      	ldr	r3, [r7, #0]
9000db84:	3b01      	subs	r3, #1
9000db86:	603b      	str	r3, [r7, #0]
			} while(header != PREAMBLE);
9000db88:	7efb      	ldrb	r3, [r7, #27]
9000db8a:	2b7f      	cmp	r3, #127	; 0x7f
9000db8c:	d000      	beq.n	9000db90 <_ZN10MessageBus7receiveEhPhm+0x64>
			do {
9000db8e:	e7ef      	b.n	9000db70 <_ZN10MessageBus7receiveEhPhm+0x44>

			indexable_buffer->buffer[0] = PREAMBLE;
9000db90:	69fb      	ldr	r3, [r7, #28]
9000db92:	227f      	movs	r2, #127	; 0x7f
9000db94:	705a      	strb	r2, [r3, #1]
			indexable_buffer->index = 1; // Got the preamble!
9000db96:	69fb      	ldr	r3, [r7, #28]
9000db98:	2201      	movs	r2, #1
9000db9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

			 printf("Valid preamble\r\n");
9000db9e:	487b      	ldr	r0, [pc, #492]	; (9000dd8c <_ZN10MessageBus7receiveEhPhm+0x260>)
9000dba0:	f003 ffda 	bl	90011b58 <puts>
		}

		if(indexable_buffer->index == 1) {
9000dba4:	69fb      	ldr	r3, [r7, #28]
9000dba6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
9000dbaa:	2b01      	cmp	r3, #1
9000dbac:	d13e      	bne.n	9000dc2c <_ZN10MessageBus7receiveEhPhm+0x100>
			do { // First lock to a valid packet
				if(length == 0) {
9000dbae:	683b      	ldr	r3, [r7, #0]
9000dbb0:	2b00      	cmp	r3, #0
9000dbb2:	f000 80e4 	beq.w	9000dd7e <_ZN10MessageBus7receiveEhPhm+0x252>
					return; // Nothing useful in this frame
				}

				packet_id = *pointer++; // Packet ID is the first element in a frame
9000dbb6:	687b      	ldr	r3, [r7, #4]
9000dbb8:	1c5a      	adds	r2, r3, #1
9000dbba:	607a      	str	r2, [r7, #4]
9000dbbc:	781b      	ldrb	r3, [r3, #0]
9000dbbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				length--;
9000dbc2:	683b      	ldr	r3, [r7, #0]
9000dbc4:	3b01      	subs	r3, #1
9000dbc6:	603b      	str	r3, [r7, #0]

				def = &definitions_by_id[packet_id & 0b00111111];
9000dbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dbcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000dbd0:	4613      	mov	r3, r2
9000dbd2:	005b      	lsls	r3, r3, #1
9000dbd4:	4413      	add	r3, r2
9000dbd6:	009b      	lsls	r3, r3, #2
9000dbd8:	68fa      	ldr	r2, [r7, #12]
9000dbda:	4413      	add	r3, r2
9000dbdc:	3304      	adds	r3, #4
9000dbde:	623b      	str	r3, [r7, #32]

				if(packet_id != def->id) {
9000dbe0:	6a3b      	ldr	r3, [r7, #32]
9000dbe2:	781b      	ldrb	r3, [r3, #0]
9000dbe4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
9000dbe8:	429a      	cmp	r2, r3
9000dbea:	d005      	beq.n	9000dbf8 <_ZN10MessageBus7receiveEhPhm+0xcc>
					printf("Corrupt packet: %d\r\n", packet_id);
9000dbec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dbf0:	4619      	mov	r1, r3
9000dbf2:	4867      	ldr	r0, [pc, #412]	; (9000dd90 <_ZN10MessageBus7receiveEhPhm+0x264>)
9000dbf4:	f003 ff2a 	bl	90011a4c <iprintf>
				}
			} while(def->id != packet_id);
9000dbf8:	6a3b      	ldr	r3, [r7, #32]
9000dbfa:	781b      	ldrb	r3, [r3, #0]
9000dbfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
9000dc00:	429a      	cmp	r2, r3
9000dc02:	d000      	beq.n	9000dc06 <_ZN10MessageBus7receiveEhPhm+0xda>
			do { // First lock to a valid packet
9000dc04:	e7d3      	b.n	9000dbae <_ZN10MessageBus7receiveEhPhm+0x82>

			 printf("Valid packet ID %d\r\n", packet_id);
9000dc06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dc0a:	4619      	mov	r1, r3
9000dc0c:	4861      	ldr	r0, [pc, #388]	; (9000dd94 <_ZN10MessageBus7receiveEhPhm+0x268>)
9000dc0e:	f003 ff1d 	bl	90011a4c <iprintf>

			indexable_buffer->buffer[1] = packet_id;
9000dc12:	69fb      	ldr	r3, [r7, #28]
9000dc14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
9000dc18:	709a      	strb	r2, [r3, #2]
			indexable_buffer->index = 2;
9000dc1a:	69fb      	ldr	r3, [r7, #28]
9000dc1c:	2202      	movs	r2, #2
9000dc1e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			indexable_buffer->current_packet_id = packet_id;
9000dc22:	69fb      	ldr	r3, [r7, #28]
9000dc24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
9000dc28:	701a      	strb	r2, [r3, #0]
9000dc2a:	e00f      	b.n	9000dc4c <_ZN10MessageBus7receiveEhPhm+0x120>
		} else {
			packet_id = indexable_buffer->current_packet_id;
9000dc2c:	69fb      	ldr	r3, [r7, #28]
9000dc2e:	781b      	ldrb	r3, [r3, #0]
9000dc30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			def = &definitions_by_id[packet_id & 0b00111111];
9000dc34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dc38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000dc3c:	4613      	mov	r3, r2
9000dc3e:	005b      	lsls	r3, r3, #1
9000dc40:	4413      	add	r3, r2
9000dc42:	009b      	lsls	r3, r3, #2
9000dc44:	68fa      	ldr	r2, [r7, #12]
9000dc46:	4413      	add	r3, r2
9000dc48:	3304      	adds	r3, #4
9000dc4a:	623b      	str	r3, [r7, #32]
		}

		 printf("Buffer: %d\r\n", indexable_buffer->index);
9000dc4c:	69fb      	ldr	r3, [r7, #28]
9000dc4e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
9000dc52:	4619      	mov	r1, r3
9000dc54:	4850      	ldr	r0, [pc, #320]	; (9000dd98 <_ZN10MessageBus7receiveEhPhm+0x26c>)
9000dc56:	f003 fef9 	bl	90011a4c <iprintf>

		size_t remaining_size = def->size + 2 - indexable_buffer->index;
9000dc5a:	6a3b      	ldr	r3, [r7, #32]
9000dc5c:	685a      	ldr	r2, [r3, #4]
9000dc5e:	69fb      	ldr	r3, [r7, #28]
9000dc60:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
9000dc64:	1ad3      	subs	r3, r2, r3
9000dc66:	3302      	adds	r3, #2
9000dc68:	617b      	str	r3, [r7, #20]
		size_t copy_length = length < remaining_size ? length : remaining_size;
9000dc6a:	683a      	ldr	r2, [r7, #0]
9000dc6c:	697b      	ldr	r3, [r7, #20]
9000dc6e:	429a      	cmp	r2, r3
9000dc70:	d201      	bcs.n	9000dc76 <_ZN10MessageBus7receiveEhPhm+0x14a>
9000dc72:	683b      	ldr	r3, [r7, #0]
9000dc74:	e000      	b.n	9000dc78 <_ZN10MessageBus7receiveEhPhm+0x14c>
9000dc76:	697b      	ldr	r3, [r7, #20]
9000dc78:	613b      	str	r3, [r7, #16]

		memcpy(indexable_buffer->buffer + indexable_buffer->index, pointer, copy_length);
9000dc7a:	69fb      	ldr	r3, [r7, #28]
9000dc7c:	1c5a      	adds	r2, r3, #1
9000dc7e:	69fb      	ldr	r3, [r7, #28]
9000dc80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
9000dc84:	4413      	add	r3, r2
9000dc86:	693a      	ldr	r2, [r7, #16]
9000dc88:	6879      	ldr	r1, [r7, #4]
9000dc8a:	4618      	mov	r0, r3
9000dc8c:	f003 f9d8 	bl	90011040 <memcpy>
		indexable_buffer->index += copy_length;
9000dc90:	69fb      	ldr	r3, [r7, #28]
9000dc92:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
9000dc96:	693b      	ldr	r3, [r7, #16]
9000dc98:	441a      	add	r2, r3
9000dc9a:	69fb      	ldr	r3, [r7, #28]
9000dc9c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		pointer += copy_length;
9000dca0:	687a      	ldr	r2, [r7, #4]
9000dca2:	693b      	ldr	r3, [r7, #16]
9000dca4:	4413      	add	r3, r2
9000dca6:	607b      	str	r3, [r7, #4]
		length -= copy_length;
9000dca8:	683a      	ldr	r2, [r7, #0]
9000dcaa:	693b      	ldr	r3, [r7, #16]
9000dcac:	1ad3      	subs	r3, r2, r3
9000dcae:	603b      	str	r3, [r7, #0]

		 printf("Got %d out of %d\r\n", copy_length, remaining_size);
9000dcb0:	697a      	ldr	r2, [r7, #20]
9000dcb2:	6939      	ldr	r1, [r7, #16]
9000dcb4:	4839      	ldr	r0, [pc, #228]	; (9000dd9c <_ZN10MessageBus7receiveEhPhm+0x270>)
9000dcb6:	f003 fec9 	bl	90011a4c <iprintf>


		if(copy_length == remaining_size) { // Packet is complete
9000dcba:	693a      	ldr	r2, [r7, #16]
9000dcbc:	697b      	ldr	r3, [r7, #20]
9000dcbe:	429a      	cmp	r2, r3
9000dcc0:	d154      	bne.n	9000dd6c <_ZN10MessageBus7receiveEhPhm+0x240>
			 printf("Full packet: %d\r\n", packet_id);
9000dcc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dcc6:	4619      	mov	r1, r3
9000dcc8:	4835      	ldr	r0, [pc, #212]	; (9000dda0 <_ZN10MessageBus7receiveEhPhm+0x274>)
9000dcca:	f003 febf 	bl	90011a4c <iprintf>

			if(handlers[packet_id & 0b00111111] != nullptr) {
9000dcce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dcd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000dcd6:	f203 1371 	addw	r3, r3, #369	; 0x171
9000dcda:	011b      	lsls	r3, r3, #4
9000dcdc:	68fa      	ldr	r2, [r7, #12]
9000dcde:	4413      	add	r3, r2
9000dce0:	3304      	adds	r3, #4
9000dce2:	2100      	movs	r1, #0
9000dce4:	4618      	mov	r0, r3
9000dce6:	f000 f8e3 	bl	9000deb0 <_ZStneIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>
9000dcea:	4603      	mov	r3, r0
9000dcec:	2b00      	cmp	r3, #0
9000dcee:	d010      	beq.n	9000dd12 <_ZN10MessageBus7receiveEhPhm+0x1e6>
				handlers[packet_id & 0b00111111](sender_id, indexable_buffer->buffer + 2);
9000dcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dcf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000dcf8:	f203 1371 	addw	r3, r3, #369	; 0x171
9000dcfc:	011b      	lsls	r3, r3, #4
9000dcfe:	68fa      	ldr	r2, [r7, #12]
9000dd00:	4413      	add	r3, r2
9000dd02:	1d18      	adds	r0, r3, #4
9000dd04:	69fb      	ldr	r3, [r7, #28]
9000dd06:	3301      	adds	r3, #1
9000dd08:	1c9a      	adds	r2, r3, #2
9000dd0a:	7afb      	ldrb	r3, [r7, #11]
9000dd0c:	4619      	mov	r1, r3
9000dd0e:	f000 f8dc 	bl	9000deca <_ZNKSt8functionIFvhPvEEclEhS0_>
			}


			if(forwarders[packet_id & 0b00111111] != nullptr) {
9000dd12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dd16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000dd1a:	68fa      	ldr	r2, [r7, #12]
9000dd1c:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
9000dd20:	009b      	lsls	r3, r3, #2
9000dd22:	4413      	add	r3, r2
9000dd24:	685b      	ldr	r3, [r3, #4]
9000dd26:	2b00      	cmp	r3, #0
9000dd28:	d01b      	beq.n	9000dd62 <_ZN10MessageBus7receiveEhPhm+0x236>
				forwarders[packet_id & 0b00111111]->internal_send(def, indexable_buffer->buffer + 2);
9000dd2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dd2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000dd32:	68fa      	ldr	r2, [r7, #12]
9000dd34:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
9000dd38:	009b      	lsls	r3, r3, #2
9000dd3a:	4413      	add	r3, r2
9000dd3c:	6858      	ldr	r0, [r3, #4]
9000dd3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dd42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000dd46:	68fa      	ldr	r2, [r7, #12]
9000dd48:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
9000dd4c:	009b      	lsls	r3, r3, #2
9000dd4e:	4413      	add	r3, r2
9000dd50:	685b      	ldr	r3, [r3, #4]
9000dd52:	681b      	ldr	r3, [r3, #0]
9000dd54:	3310      	adds	r3, #16
9000dd56:	681b      	ldr	r3, [r3, #0]
9000dd58:	69fa      	ldr	r2, [r7, #28]
9000dd5a:	3201      	adds	r2, #1
9000dd5c:	3202      	adds	r2, #2
9000dd5e:	6a39      	ldr	r1, [r7, #32]
9000dd60:	4798      	blx	r3
			}

			indexable_buffer->index = 0;
9000dd62:	69fb      	ldr	r3, [r7, #28]
9000dd64:	2200      	movs	r2, #0
9000dd66:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
9000dd6a:	e6f8      	b.n	9000db5e <_ZN10MessageBus7receiveEhPhm+0x32>
		} else {
			 printf("Incomplete packet: %d\r\n", packet_id);
9000dd6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000dd70:	4619      	mov	r1, r3
9000dd72:	480c      	ldr	r0, [pc, #48]	; (9000dda4 <_ZN10MessageBus7receiveEhPhm+0x278>)
9000dd74:	f003 fe6a 	bl	90011a4c <iprintf>
	while(length > 0) {
9000dd78:	e6f1      	b.n	9000db5e <_ZN10MessageBus7receiveEhPhm+0x32>
					return; // Nothing useful in this frame
9000dd7a:	bf00      	nop
9000dd7c:	e000      	b.n	9000dd80 <_ZN10MessageBus7receiveEhPhm+0x254>
					return; // Nothing useful in this frame
9000dd7e:	bf00      	nop
		}
	}
}
9000dd80:	3728      	adds	r7, #40	; 0x28
9000dd82:	46bd      	mov	sp, r7
9000dd84:	bd80      	pop	{r7, pc}
9000dd86:	bf00      	nop
9000dd88:	90013dfc 	.word	0x90013dfc
9000dd8c:	90013e14 	.word	0x90013e14
9000dd90:	90013e24 	.word	0x90013e24
9000dd94:	90013e3c 	.word	0x90013e3c
9000dd98:	90013e54 	.word	0x90013e54
9000dd9c:	90013e64 	.word	0x90013e64
9000dda0:	90013e78 	.word	0x90013e78
9000dda4:	90013e8c 	.word	0x90013e8c

9000dda8 <_ZN10MessageBus8retrieveEj>:

/*
 * Searches a packet definition matching the given type in the hash table.
 */
PacketDefinition* MessageBus::retrieve(size_t hash) {
9000dda8:	b480      	push	{r7}
9000ddaa:	b085      	sub	sp, #20
9000ddac:	af00      	add	r7, sp, #0
9000ddae:	6078      	str	r0, [r7, #4]
9000ddb0:	6039      	str	r1, [r7, #0]
	uint32_t searchPoint = hash % 256;
9000ddb2:	683b      	ldr	r3, [r7, #0]
9000ddb4:	b2db      	uxtb	r3, r3
9000ddb6:	60fb      	str	r3, [r7, #12]
	uint32_t searchStart = searchPoint;
9000ddb8:	68fb      	ldr	r3, [r7, #12]
9000ddba:	60bb      	str	r3, [r7, #8]

	while(definitions_by_type[searchPoint] != nullptr) {
9000ddbc:	687a      	ldr	r2, [r7, #4]
9000ddbe:	68fb      	ldr	r3, [r7, #12]
9000ddc0:	33c0      	adds	r3, #192	; 0xc0
9000ddc2:	009b      	lsls	r3, r3, #2
9000ddc4:	4413      	add	r3, r2
9000ddc6:	685b      	ldr	r3, [r3, #4]
9000ddc8:	2b00      	cmp	r3, #0
9000ddca:	d01f      	beq.n	9000de0c <_ZN10MessageBus8retrieveEj+0x64>
		if(definitions_by_type[searchPoint]->hash == hash) {
9000ddcc:	687a      	ldr	r2, [r7, #4]
9000ddce:	68fb      	ldr	r3, [r7, #12]
9000ddd0:	33c0      	adds	r3, #192	; 0xc0
9000ddd2:	009b      	lsls	r3, r3, #2
9000ddd4:	4413      	add	r3, r2
9000ddd6:	685b      	ldr	r3, [r3, #4]
9000ddd8:	689b      	ldr	r3, [r3, #8]
9000ddda:	683a      	ldr	r2, [r7, #0]
9000dddc:	429a      	cmp	r2, r3
9000ddde:	d106      	bne.n	9000ddee <_ZN10MessageBus8retrieveEj+0x46>
			return definitions_by_type[searchPoint];
9000dde0:	687a      	ldr	r2, [r7, #4]
9000dde2:	68fb      	ldr	r3, [r7, #12]
9000dde4:	33c0      	adds	r3, #192	; 0xc0
9000dde6:	009b      	lsls	r3, r3, #2
9000dde8:	4413      	add	r3, r2
9000ddea:	685b      	ldr	r3, [r3, #4]
9000ddec:	e00f      	b.n	9000de0e <_ZN10MessageBus8retrieveEj+0x66>
		}

		searchPoint++;
9000ddee:	68fb      	ldr	r3, [r7, #12]
9000ddf0:	3301      	adds	r3, #1
9000ddf2:	60fb      	str	r3, [r7, #12]

		if(searchPoint == 256) {
9000ddf4:	68fb      	ldr	r3, [r7, #12]
9000ddf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000ddfa:	d101      	bne.n	9000de00 <_ZN10MessageBus8retrieveEj+0x58>
			searchPoint = 0;
9000ddfc:	2300      	movs	r3, #0
9000ddfe:	60fb      	str	r3, [r7, #12]
		}

		if(searchStart == searchPoint) {
9000de00:	68ba      	ldr	r2, [r7, #8]
9000de02:	68fb      	ldr	r3, [r7, #12]
9000de04:	429a      	cmp	r2, r3
9000de06:	d000      	beq.n	9000de0a <_ZN10MessageBus8retrieveEj+0x62>
	while(definitions_by_type[searchPoint] != nullptr) {
9000de08:	e7d8      	b.n	9000ddbc <_ZN10MessageBus8retrieveEj+0x14>
			break; // No packet definition matching the given template type
9000de0a:	bf00      	nop
		}
	}

	return nullptr;
9000de0c:	2300      	movs	r3, #0
}
9000de0e:	4618      	mov	r0, r3
9000de10:	3714      	adds	r7, #20
9000de12:	46bd      	mov	sp, r7
9000de14:	f85d 7b04 	ldr.w	r7, [sp], #4
9000de18:	4770      	bx	lr

9000de1a <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENKUlhPvE_clEhS7_>:
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
9000de1a:	b580      	push	{r7, lr}
9000de1c:	b084      	sub	sp, #16
9000de1e:	af00      	add	r7, sp, #0
9000de20:	60f8      	str	r0, [r7, #12]
9000de22:	460b      	mov	r3, r1
9000de24:	607a      	str	r2, [r7, #4]
9000de26:	72fb      	strb	r3, [r7, #11]
9000de28:	68fb      	ldr	r3, [r7, #12]
9000de2a:	681a      	ldr	r2, [r3, #0]
9000de2c:	68fb      	ldr	r3, [r7, #12]
9000de2e:	791b      	ldrb	r3, [r3, #4]
				handlers[packetID](sender, (T*) packet);
9000de30:	f203 1371 	addw	r3, r3, #369	; 0x171
9000de34:	011b      	lsls	r3, r3, #4
9000de36:	4413      	add	r3, r2
9000de38:	3304      	adds	r3, #4
9000de3a:	7af9      	ldrb	r1, [r7, #11]
9000de3c:	687a      	ldr	r2, [r7, #4]
9000de3e:	4618      	mov	r0, r3
9000de40:	f000 f843 	bl	9000deca <_ZNKSt8functionIFvhPvEEclEhS0_>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
9000de44:	68fb      	ldr	r3, [r7, #12]
9000de46:	689b      	ldr	r3, [r3, #8]
				handler(sender, (T*) packet);
9000de48:	7af9      	ldrb	r1, [r7, #11]
9000de4a:	687a      	ldr	r2, [r7, #4]
9000de4c:	4618      	mov	r0, r3
9000de4e:	f000 f862 	bl	9000df16 <_ZNKSt8functionIFvhP23DummySystem_DummyPacketEEclEhS1_>
			handlers[packetID] = [this, packetID, &handler](uint8_t sender, void* packet) {
9000de52:	bf00      	nop
9000de54:	3710      	adds	r7, #16
9000de56:	46bd      	mov	sp, r7
9000de58:	bd80      	pop	{r7, pc}

9000de5a <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENKUlhPvE0_clEhS7_>:
			handlers[packetID] = [handler](uint8_t sender, void* packet) { handler(sender, (T*) packet); };
9000de5a:	b580      	push	{r7, lr}
9000de5c:	b084      	sub	sp, #16
9000de5e:	af00      	add	r7, sp, #0
9000de60:	60f8      	str	r0, [r7, #12]
9000de62:	460b      	mov	r3, r1
9000de64:	607a      	str	r2, [r7, #4]
9000de66:	72fb      	strb	r3, [r7, #11]
9000de68:	68fb      	ldr	r3, [r7, #12]
9000de6a:	7af9      	ldrb	r1, [r7, #11]
9000de6c:	687a      	ldr	r2, [r7, #4]
9000de6e:	4618      	mov	r0, r3
9000de70:	f000 f851 	bl	9000df16 <_ZNKSt8functionIFvhP23DummySystem_DummyPacketEEclEhS1_>
9000de74:	bf00      	nop
9000de76:	3710      	adds	r7, #16
9000de78:	46bd      	mov	sp, r7
9000de7a:	bd80      	pop	{r7, pc}

9000de7c <_ZNSt8functionIFvhP23DummySystem_DummyPacketEED1Ev>:
    class function<_Res(_ArgTypes...)>
9000de7c:	b580      	push	{r7, lr}
9000de7e:	b082      	sub	sp, #8
9000de80:	af00      	add	r7, sp, #0
9000de82:	6078      	str	r0, [r7, #4]
9000de84:	687b      	ldr	r3, [r7, #4]
9000de86:	4618      	mov	r0, r3
9000de88:	f7fd fe9e 	bl	9000bbc8 <_ZNSt14_Function_baseD1Ev>
9000de8c:	687b      	ldr	r3, [r7, #4]
9000de8e:	4618      	mov	r0, r3
9000de90:	3708      	adds	r7, #8
9000de92:	46bd      	mov	sp, r7
9000de94:	bd80      	pop	{r7, pc}

9000de96 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>:
9000de96:	b580      	push	{r7, lr}
9000de98:	b082      	sub	sp, #8
9000de9a:	af00      	add	r7, sp, #0
9000de9c:	6078      	str	r0, [r7, #4]
9000de9e:	687b      	ldr	r3, [r7, #4]
9000dea0:	4618      	mov	r0, r3
9000dea2:	f7ff ffeb 	bl	9000de7c <_ZNSt8functionIFvhP23DummySystem_DummyPacketEED1Ev>
9000dea6:	687b      	ldr	r3, [r7, #4]
9000dea8:	4618      	mov	r0, r3
9000deaa:	3708      	adds	r7, #8
9000deac:	46bd      	mov	sp, r7
9000deae:	bd80      	pop	{r7, pc}

9000deb0 <_ZStneIvJhPvEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
9000deb0:	b580      	push	{r7, lr}
9000deb2:	b082      	sub	sp, #8
9000deb4:	af00      	add	r7, sp, #0
9000deb6:	6078      	str	r0, [r7, #4]
9000deb8:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
9000deba:	6878      	ldr	r0, [r7, #4]
9000debc:	f000 f8cd 	bl	9000e05a <_ZNKSt8functionIFvhPvEEcvbEv>
9000dec0:	4603      	mov	r3, r0
9000dec2:	4618      	mov	r0, r3
9000dec4:	3708      	adds	r7, #8
9000dec6:	46bd      	mov	sp, r7
9000dec8:	bd80      	pop	{r7, pc}

9000deca <_ZNKSt8functionIFvhPvEEclEhS0_>:
    function<_Res(_ArgTypes...)>::
9000deca:	b5f0      	push	{r4, r5, r6, r7, lr}
9000decc:	b085      	sub	sp, #20
9000dece:	af00      	add	r7, sp, #0
9000ded0:	60f8      	str	r0, [r7, #12]
9000ded2:	460b      	mov	r3, r1
9000ded4:	607a      	str	r2, [r7, #4]
9000ded6:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
9000ded8:	68fb      	ldr	r3, [r7, #12]
9000deda:	4618      	mov	r0, r3
9000dedc:	f7fd fe87 	bl	9000bbee <_ZNKSt14_Function_base8_M_emptyEv>
9000dee0:	4603      	mov	r3, r0
9000dee2:	2b00      	cmp	r3, #0
9000dee4:	d001      	beq.n	9000deea <_ZNKSt8functionIFvhPvEEclEhS0_+0x20>
	__throw_bad_function_call();
9000dee6:	f002 fec7 	bl	90010c78 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
9000deea:	68fb      	ldr	r3, [r7, #12]
9000deec:	68dc      	ldr	r4, [r3, #12]
9000deee:	68fd      	ldr	r5, [r7, #12]
9000def0:	f107 030b 	add.w	r3, r7, #11
9000def4:	4618      	mov	r0, r3
9000def6:	f7fd ff54 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000defa:	4606      	mov	r6, r0
9000defc:	1d3b      	adds	r3, r7, #4
9000defe:	4618      	mov	r0, r3
9000df00:	f000 f8bb 	bl	9000e07a <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
9000df04:	4603      	mov	r3, r0
9000df06:	461a      	mov	r2, r3
9000df08:	4631      	mov	r1, r6
9000df0a:	4628      	mov	r0, r5
9000df0c:	47a0      	blx	r4
9000df0e:	bf00      	nop
    }
9000df10:	3714      	adds	r7, #20
9000df12:	46bd      	mov	sp, r7
9000df14:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000df16 <_ZNKSt8functionIFvhP23DummySystem_DummyPacketEEclEhS1_>:
    function<_Res(_ArgTypes...)>::
9000df16:	b5f0      	push	{r4, r5, r6, r7, lr}
9000df18:	b085      	sub	sp, #20
9000df1a:	af00      	add	r7, sp, #0
9000df1c:	60f8      	str	r0, [r7, #12]
9000df1e:	460b      	mov	r3, r1
9000df20:	607a      	str	r2, [r7, #4]
9000df22:	72fb      	strb	r3, [r7, #11]
      if (_M_empty())
9000df24:	68fb      	ldr	r3, [r7, #12]
9000df26:	4618      	mov	r0, r3
9000df28:	f7fd fe61 	bl	9000bbee <_ZNKSt14_Function_base8_M_emptyEv>
9000df2c:	4603      	mov	r3, r0
9000df2e:	2b00      	cmp	r3, #0
9000df30:	d001      	beq.n	9000df36 <_ZNKSt8functionIFvhP23DummySystem_DummyPacketEEclEhS1_+0x20>
	__throw_bad_function_call();
9000df32:	f002 fea1 	bl	90010c78 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
9000df36:	68fb      	ldr	r3, [r7, #12]
9000df38:	68dc      	ldr	r4, [r3, #12]
9000df3a:	68fd      	ldr	r5, [r7, #12]
9000df3c:	f107 030b 	add.w	r3, r7, #11
9000df40:	4618      	mov	r0, r3
9000df42:	f7fd ff2e 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000df46:	4606      	mov	r6, r0
9000df48:	1d3b      	adds	r3, r7, #4
9000df4a:	4618      	mov	r0, r3
9000df4c:	f000 f8c1 	bl	9000e0d2 <_ZSt7forwardIP23DummySystem_DummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>
9000df50:	4603      	mov	r3, r0
9000df52:	461a      	mov	r2, r3
9000df54:	4631      	mov	r1, r6
9000df56:	4628      	mov	r0, r5
9000df58:	47a0      	blx	r4
9000df5a:	bf00      	nop
    }
9000df5c:	3714      	adds	r7, #20
9000df5e:	46bd      	mov	sp, r7
9000df60:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000df62 <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIS7_E4typeESt15__invoke_resultIRSG_JhS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
9000df62:	b580      	push	{r7, lr}
9000df64:	b086      	sub	sp, #24
9000df66:	af00      	add	r7, sp, #0
9000df68:	6078      	str	r0, [r7, #4]
9000df6a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
9000df6c:	6838      	ldr	r0, [r7, #0]
9000df6e:	f000 f8bb 	bl	9000e0e8 <_ZSt7forwardIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
9000df72:	4603      	mov	r3, r0
9000df74:	f107 0008 	add.w	r0, r7, #8
9000df78:	cb0e      	ldmia	r3, {r1, r2, r3}
9000df7a:	f000 f8c1 	bl	9000e100 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E_vvEES7_>
9000df7e:	f107 0308 	add.w	r3, r7, #8
9000df82:	6879      	ldr	r1, [r7, #4]
9000df84:	4618      	mov	r0, r3
9000df86:	f000 f883 	bl	9000e090 <_ZNSt8functionIFvhPvEE4swapERS2_>
9000df8a:	f107 0308 	add.w	r3, r7, #8
9000df8e:	4618      	mov	r0, r3
9000df90:	f7fd ffd4 	bl	9000bf3c <_ZNSt8functionIFvhPvEED1Ev>
	  return *this;
9000df94:	687b      	ldr	r3, [r7, #4]
	}
9000df96:	4618      	mov	r0, r3
9000df98:	3718      	adds	r7, #24
9000df9a:	46bd      	mov	sp, r7
9000df9c:	bd80      	pop	{r7, pc}

9000df9e <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
9000df9e:	b580      	push	{r7, lr}
9000dfa0:	b082      	sub	sp, #8
9000dfa2:	af00      	add	r7, sp, #0
9000dfa4:	6078      	str	r0, [r7, #4]
9000dfa6:	6039      	str	r1, [r7, #0]
    : _Function_base()
9000dfa8:	687b      	ldr	r3, [r7, #4]
9000dfaa:	4618      	mov	r0, r3
9000dfac:	f7fd fdfe 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
9000dfb0:	6838      	ldr	r0, [r7, #0]
9000dfb2:	f000 f8d1 	bl	9000e158 <_ZNKSt8functionIFvhP23DummySystem_DummyPacketEEcvbEv>
9000dfb6:	4603      	mov	r3, r0
9000dfb8:	2b00      	cmp	r3, #0
9000dfba:	d00d      	beq.n	9000dfd8 <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
9000dfbc:	683b      	ldr	r3, [r7, #0]
9000dfbe:	689b      	ldr	r3, [r3, #8]
9000dfc0:	6878      	ldr	r0, [r7, #4]
9000dfc2:	6839      	ldr	r1, [r7, #0]
9000dfc4:	2202      	movs	r2, #2
9000dfc6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
9000dfc8:	683b      	ldr	r3, [r7, #0]
9000dfca:	68da      	ldr	r2, [r3, #12]
9000dfcc:	687b      	ldr	r3, [r7, #4]
9000dfce:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
9000dfd0:	683b      	ldr	r3, [r7, #0]
9000dfd2:	689a      	ldr	r2, [r3, #8]
9000dfd4:	687b      	ldr	r3, [r7, #4]
9000dfd6:	609a      	str	r2, [r3, #8]
    }
9000dfd8:	687b      	ldr	r3, [r7, #4]
9000dfda:	4618      	mov	r0, r3
9000dfdc:	3708      	adds	r7, #8
9000dfde:	46bd      	mov	sp, r7
9000dfe0:	bd80      	pop	{r7, pc}

9000dfe2 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>:
9000dfe2:	b580      	push	{r7, lr}
9000dfe4:	b082      	sub	sp, #8
9000dfe6:	af00      	add	r7, sp, #0
9000dfe8:	6078      	str	r0, [r7, #4]
9000dfea:	6039      	str	r1, [r7, #0]
9000dfec:	687b      	ldr	r3, [r7, #4]
9000dfee:	683a      	ldr	r2, [r7, #0]
9000dff0:	4611      	mov	r1, r2
9000dff2:	4618      	mov	r0, r3
9000dff4:	f000 f8cb 	bl	9000e18e <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1EOS3_>
9000dff8:	687b      	ldr	r3, [r7, #4]
9000dffa:	4618      	mov	r0, r3
9000dffc:	3708      	adds	r7, #8
9000dffe:	46bd      	mov	sp, r7
9000e000:	bd80      	pop	{r7, pc}

9000e002 <_ZNSt8functionIFvhPvEEaSIZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E0_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIS7_E4typeESt15__invoke_resultIRSG_JhS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
9000e002:	b580      	push	{r7, lr}
9000e004:	b08a      	sub	sp, #40	; 0x28
9000e006:	af00      	add	r7, sp, #0
9000e008:	6078      	str	r0, [r7, #4]
9000e00a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
9000e00c:	6838      	ldr	r0, [r7, #0]
9000e00e:	f000 f8b3 	bl	9000e178 <_ZSt7forwardIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
9000e012:	4602      	mov	r2, r0
9000e014:	f107 0318 	add.w	r3, r7, #24
9000e018:	4611      	mov	r1, r2
9000e01a:	4618      	mov	r0, r3
9000e01c:	f7ff ffe1 	bl	9000dfe2 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>
9000e020:	f107 0218 	add.w	r2, r7, #24
9000e024:	f107 0308 	add.w	r3, r7, #8
9000e028:	4611      	mov	r1, r2
9000e02a:	4618      	mov	r0, r3
9000e02c:	f000 f8c2 	bl	9000e1b4 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_>
9000e030:	f107 0308 	add.w	r3, r7, #8
9000e034:	6879      	ldr	r1, [r7, #4]
9000e036:	4618      	mov	r0, r3
9000e038:	f000 f82a 	bl	9000e090 <_ZNSt8functionIFvhPvEE4swapERS2_>
9000e03c:	f107 0308 	add.w	r3, r7, #8
9000e040:	4618      	mov	r0, r3
9000e042:	f7fd ff7b 	bl	9000bf3c <_ZNSt8functionIFvhPvEED1Ev>
9000e046:	f107 0318 	add.w	r3, r7, #24
9000e04a:	4618      	mov	r0, r3
9000e04c:	f7ff ff23 	bl	9000de96 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
	  return *this;
9000e050:	687b      	ldr	r3, [r7, #4]
	}
9000e052:	4618      	mov	r0, r3
9000e054:	3728      	adds	r7, #40	; 0x28
9000e056:	46bd      	mov	sp, r7
9000e058:	bd80      	pop	{r7, pc}

9000e05a <_ZNKSt8functionIFvhPvEEcvbEv>:
      explicit operator bool() const noexcept
9000e05a:	b580      	push	{r7, lr}
9000e05c:	b082      	sub	sp, #8
9000e05e:	af00      	add	r7, sp, #0
9000e060:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
9000e062:	687b      	ldr	r3, [r7, #4]
9000e064:	4618      	mov	r0, r3
9000e066:	f7fd fdc2 	bl	9000bbee <_ZNKSt14_Function_base8_M_emptyEv>
9000e06a:	4603      	mov	r3, r0
9000e06c:	f083 0301 	eor.w	r3, r3, #1
9000e070:	b2db      	uxtb	r3, r3
9000e072:	4618      	mov	r0, r3
9000e074:	3708      	adds	r7, #8
9000e076:	46bd      	mov	sp, r7
9000e078:	bd80      	pop	{r7, pc}

9000e07a <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000e07a:	b480      	push	{r7}
9000e07c:	b083      	sub	sp, #12
9000e07e:	af00      	add	r7, sp, #0
9000e080:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000e082:	687b      	ldr	r3, [r7, #4]
9000e084:	4618      	mov	r0, r3
9000e086:	370c      	adds	r7, #12
9000e088:	46bd      	mov	sp, r7
9000e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e08e:	4770      	bx	lr

9000e090 <_ZNSt8functionIFvhPvEE4swapERS2_>:
      void swap(function& __x) noexcept
9000e090:	b580      	push	{r7, lr}
9000e092:	b082      	sub	sp, #8
9000e094:	af00      	add	r7, sp, #0
9000e096:	6078      	str	r0, [r7, #4]
9000e098:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
9000e09a:	687b      	ldr	r3, [r7, #4]
9000e09c:	683a      	ldr	r2, [r7, #0]
9000e09e:	4611      	mov	r1, r2
9000e0a0:	4618      	mov	r0, r3
9000e0a2:	f7fd feba 	bl	9000be1a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
9000e0a6:	687b      	ldr	r3, [r7, #4]
9000e0a8:	f103 0208 	add.w	r2, r3, #8
9000e0ac:	683b      	ldr	r3, [r7, #0]
9000e0ae:	3308      	adds	r3, #8
9000e0b0:	4619      	mov	r1, r3
9000e0b2:	4610      	mov	r0, r2
9000e0b4:	f7fd fee3 	bl	9000be7e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
9000e0b8:	687b      	ldr	r3, [r7, #4]
9000e0ba:	f103 020c 	add.w	r2, r3, #12
9000e0be:	683b      	ldr	r3, [r7, #0]
9000e0c0:	330c      	adds	r3, #12
9000e0c2:	4619      	mov	r1, r3
9000e0c4:	4610      	mov	r0, r2
9000e0c6:	f000 f8a8 	bl	9000e21a <_ZSt4swapIPFvRKSt9_Any_dataOhOPvEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
9000e0ca:	bf00      	nop
9000e0cc:	3708      	adds	r7, #8
9000e0ce:	46bd      	mov	sp, r7
9000e0d0:	bd80      	pop	{r7, pc}

9000e0d2 <_ZSt7forwardIP23DummySystem_DummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000e0d2:	b480      	push	{r7}
9000e0d4:	b083      	sub	sp, #12
9000e0d6:	af00      	add	r7, sp, #0
9000e0d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000e0da:	687b      	ldr	r3, [r7, #4]
9000e0dc:	4618      	mov	r0, r3
9000e0de:	370c      	adds	r7, #12
9000e0e0:	46bd      	mov	sp, r7
9000e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e0e6:	4770      	bx	lr

9000e0e8 <_ZSt7forwardIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000e0e8:	b480      	push	{r7}
9000e0ea:	b083      	sub	sp, #12
9000e0ec:	af00      	add	r7, sp, #0
9000e0ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000e0f0:	687b      	ldr	r3, [r7, #4]
9000e0f2:	4618      	mov	r0, r3
9000e0f4:	370c      	adds	r7, #12
9000e0f6:	46bd      	mov	sp, r7
9000e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e0fc:	4770      	bx	lr
	...

9000e100 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E_vvEES7_>:
      function<_Res(_ArgTypes...)>::
9000e100:	b590      	push	{r4, r7, lr}
9000e102:	b085      	sub	sp, #20
9000e104:	af00      	add	r7, sp, #0
9000e106:	60f8      	str	r0, [r7, #12]
9000e108:	4638      	mov	r0, r7
9000e10a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      : _Function_base()
9000e10e:	68fb      	ldr	r3, [r7, #12]
9000e110:	4618      	mov	r0, r3
9000e112:	f7fd fd4b 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
9000e116:	463b      	mov	r3, r7
9000e118:	4618      	mov	r0, r3
9000e11a:	f000 f89d 	bl	9000e258 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E21_M_not_empty_functionISA_EEbRKS5_>
9000e11e:	4603      	mov	r3, r0
9000e120:	2b00      	cmp	r3, #0
9000e122:	d00f      	beq.n	9000e144 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E_vvEES7_+0x44>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
9000e124:	68fc      	ldr	r4, [r7, #12]
9000e126:	463b      	mov	r3, r7
9000e128:	4618      	mov	r0, r3
9000e12a:	f000 f8a0 	bl	9000e26e <_ZSt4moveIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EONSt16remove_referenceIS4_E4typeEOS4_>
9000e12e:	4603      	mov	r3, r0
9000e130:	4619      	mov	r1, r3
9000e132:	4620      	mov	r0, r4
9000e134:	f000 f8a6 	bl	9000e284 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorERSt9_Any_dataOSA_>
	    _M_invoker = &_My_handler::_M_invoke;
9000e138:	68fb      	ldr	r3, [r7, #12]
9000e13a:	4a05      	ldr	r2, [pc, #20]	; (9000e150 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E_vvEES7_+0x50>)
9000e13c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
9000e13e:	68fb      	ldr	r3, [r7, #12]
9000e140:	4a04      	ldr	r2, [pc, #16]	; (9000e154 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E_vvEES7_+0x54>)
9000e142:	609a      	str	r2, [r3, #8]
      }
9000e144:	68fb      	ldr	r3, [r7, #12]
9000e146:	4618      	mov	r0, r3
9000e148:	3714      	adds	r7, #20
9000e14a:	46bd      	mov	sp, r7
9000e14c:	bd90      	pop	{r4, r7, pc}
9000e14e:	bf00      	nop
9000e150:	9000e2a9 	.word	0x9000e2a9
9000e154:	9000e2e1 	.word	0x9000e2e1

9000e158 <_ZNKSt8functionIFvhP23DummySystem_DummyPacketEEcvbEv>:
      explicit operator bool() const noexcept
9000e158:	b580      	push	{r7, lr}
9000e15a:	b082      	sub	sp, #8
9000e15c:	af00      	add	r7, sp, #0
9000e15e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
9000e160:	687b      	ldr	r3, [r7, #4]
9000e162:	4618      	mov	r0, r3
9000e164:	f7fd fd43 	bl	9000bbee <_ZNKSt14_Function_base8_M_emptyEv>
9000e168:	4603      	mov	r3, r0
9000e16a:	f083 0301 	eor.w	r3, r3, #1
9000e16e:	b2db      	uxtb	r3, r3
9000e170:	4618      	mov	r0, r3
9000e172:	3708      	adds	r7, #8
9000e174:	46bd      	mov	sp, r7
9000e176:	bd80      	pop	{r7, pc}

9000e178 <_ZSt7forwardIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000e178:	b480      	push	{r7}
9000e17a:	b083      	sub	sp, #12
9000e17c:	af00      	add	r7, sp, #0
9000e17e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000e180:	687b      	ldr	r3, [r7, #4]
9000e182:	4618      	mov	r0, r3
9000e184:	370c      	adds	r7, #12
9000e186:	46bd      	mov	sp, r7
9000e188:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e18c:	4770      	bx	lr

9000e18e <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1EOS3_>:
      function(function&& __x) noexcept : _Function_base()
9000e18e:	b580      	push	{r7, lr}
9000e190:	b082      	sub	sp, #8
9000e192:	af00      	add	r7, sp, #0
9000e194:	6078      	str	r0, [r7, #4]
9000e196:	6039      	str	r1, [r7, #0]
9000e198:	687b      	ldr	r3, [r7, #4]
9000e19a:	4618      	mov	r0, r3
9000e19c:	f7fd fd06 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
9000e1a0:	6879      	ldr	r1, [r7, #4]
9000e1a2:	6838      	ldr	r0, [r7, #0]
9000e1a4:	f000 f8c8 	bl	9000e338 <_ZNSt8functionIFvhP23DummySystem_DummyPacketEE4swapERS3_>
      }
9000e1a8:	687b      	ldr	r3, [r7, #4]
9000e1aa:	4618      	mov	r0, r3
9000e1ac:	3708      	adds	r7, #8
9000e1ae:	46bd      	mov	sp, r7
9000e1b0:	bd80      	pop	{r7, pc}
	...

9000e1b4 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_>:
      function<_Res(_ArgTypes...)>::
9000e1b4:	b590      	push	{r4, r7, lr}
9000e1b6:	b083      	sub	sp, #12
9000e1b8:	af00      	add	r7, sp, #0
9000e1ba:	6078      	str	r0, [r7, #4]
9000e1bc:	6039      	str	r1, [r7, #0]
      : _Function_base()
9000e1be:	687b      	ldr	r3, [r7, #4]
9000e1c0:	4618      	mov	r0, r3
9000e1c2:	f7fd fcf3 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
9000e1c6:	6838      	ldr	r0, [r7, #0]
9000e1c8:	f000 f8d7 	bl	9000e37a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E21_M_not_empty_functionISA_EEbRKS5_>
9000e1cc:	4603      	mov	r3, r0
9000e1ce:	2b00      	cmp	r3, #0
9000e1d0:	d00e      	beq.n	9000e1f0 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_+0x3c>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
9000e1d2:	687c      	ldr	r4, [r7, #4]
9000e1d4:	6838      	ldr	r0, [r7, #0]
9000e1d6:	f000 f8db 	bl	9000e390 <_ZSt4moveIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EONSt16remove_referenceIS4_E4typeEOS4_>
9000e1da:	4603      	mov	r3, r0
9000e1dc:	4619      	mov	r1, r3
9000e1de:	4620      	mov	r0, r4
9000e1e0:	f000 f8e1 	bl	9000e3a6 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorERSt9_Any_dataOSA_>
	    _M_invoker = &_My_handler::_M_invoke;
9000e1e4:	687b      	ldr	r3, [r7, #4]
9000e1e6:	4a05      	ldr	r2, [pc, #20]	; (9000e1fc <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_+0x48>)
9000e1e8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
9000e1ea:	687b      	ldr	r3, [r7, #4]
9000e1ec:	4a04      	ldr	r2, [pc, #16]	; (9000e200 <_ZNSt8functionIFvhPvEEC1IZN10MessageBus6handleI23DummySystem_DummyPacketEEbS_IFvhPT_EEEUlhS0_E0_vvEES7_+0x4c>)
9000e1ee:	609a      	str	r2, [r3, #8]
      }
9000e1f0:	687b      	ldr	r3, [r7, #4]
9000e1f2:	4618      	mov	r0, r3
9000e1f4:	370c      	adds	r7, #12
9000e1f6:	46bd      	mov	sp, r7
9000e1f8:	bd90      	pop	{r4, r7, pc}
9000e1fa:	bf00      	nop
9000e1fc:	9000e3cb 	.word	0x9000e3cb
9000e200:	9000e401 	.word	0x9000e401

9000e204 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
9000e204:	b480      	push	{r7}
9000e206:	b083      	sub	sp, #12
9000e208:	af00      	add	r7, sp, #0
9000e20a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000e20c:	687b      	ldr	r3, [r7, #4]
9000e20e:	4618      	mov	r0, r3
9000e210:	370c      	adds	r7, #12
9000e212:	46bd      	mov	sp, r7
9000e214:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e218:	4770      	bx	lr

9000e21a <_ZSt4swapIPFvRKSt9_Any_dataOhOPvEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
9000e21a:	b580      	push	{r7, lr}
9000e21c:	b084      	sub	sp, #16
9000e21e:	af00      	add	r7, sp, #0
9000e220:	6078      	str	r0, [r7, #4]
9000e222:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
9000e224:	6878      	ldr	r0, [r7, #4]
9000e226:	f7ff ffed 	bl	9000e204 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
9000e22a:	4603      	mov	r3, r0
9000e22c:	681b      	ldr	r3, [r3, #0]
9000e22e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
9000e230:	6838      	ldr	r0, [r7, #0]
9000e232:	f7ff ffe7 	bl	9000e204 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
9000e236:	4603      	mov	r3, r0
9000e238:	681a      	ldr	r2, [r3, #0]
9000e23a:	687b      	ldr	r3, [r7, #4]
9000e23c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
9000e23e:	f107 030c 	add.w	r3, r7, #12
9000e242:	4618      	mov	r0, r3
9000e244:	f7ff ffde 	bl	9000e204 <_ZSt4moveIRPFvRKSt9_Any_dataOhOPvEEONSt16remove_referenceIT_E4typeEOSA_>
9000e248:	4603      	mov	r3, r0
9000e24a:	681a      	ldr	r2, [r3, #0]
9000e24c:	683b      	ldr	r3, [r7, #0]
9000e24e:	601a      	str	r2, [r3, #0]
    }
9000e250:	bf00      	nop
9000e252:	3710      	adds	r7, #16
9000e254:	46bd      	mov	sp, r7
9000e256:	bd80      	pop	{r7, pc}

9000e258 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E21_M_not_empty_functionISA_EEbRKS5_>:
	  _M_not_empty_function(const _Tp&)
9000e258:	b480      	push	{r7}
9000e25a:	b083      	sub	sp, #12
9000e25c:	af00      	add	r7, sp, #0
9000e25e:	6078      	str	r0, [r7, #4]
	  { return true; }
9000e260:	2301      	movs	r3, #1
9000e262:	4618      	mov	r0, r3
9000e264:	370c      	adds	r7, #12
9000e266:	46bd      	mov	sp, r7
9000e268:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e26c:	4770      	bx	lr

9000e26e <_ZSt4moveIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EONSt16remove_referenceIS4_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
9000e26e:	b480      	push	{r7}
9000e270:	b083      	sub	sp, #12
9000e272:	af00      	add	r7, sp, #0
9000e274:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000e276:	687b      	ldr	r3, [r7, #4]
9000e278:	4618      	mov	r0, r3
9000e27a:	370c      	adds	r7, #12
9000e27c:	46bd      	mov	sp, r7
9000e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e282:	4770      	bx	lr

9000e284 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorERSt9_Any_dataOSA_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
9000e284:	b590      	push	{r4, r7, lr}
9000e286:	b083      	sub	sp, #12
9000e288:	af00      	add	r7, sp, #0
9000e28a:	6078      	str	r0, [r7, #4]
9000e28c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
9000e28e:	6838      	ldr	r0, [r7, #0]
9000e290:	f7ff ffed 	bl	9000e26e <_ZSt4moveIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EONSt16remove_referenceIS4_E4typeEOS4_>
9000e294:	4603      	mov	r3, r0
9000e296:	4622      	mov	r2, r4
9000e298:	4619      	mov	r1, r3
9000e29a:	6878      	ldr	r0, [r7, #4]
9000e29c:	f000 f8dc 	bl	9000e458 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorERSt9_Any_dataOSA_St17integral_constantIbLb0EE>
9000e2a0:	bf00      	nop
9000e2a2:	370c      	adds	r7, #12
9000e2a4:	46bd      	mov	sp, r7
9000e2a6:	bd90      	pop	{r4, r7, pc}

9000e2a8 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
9000e2a8:	b5b0      	push	{r4, r5, r7, lr}
9000e2aa:	b084      	sub	sp, #16
9000e2ac:	af00      	add	r7, sp, #0
9000e2ae:	60f8      	str	r0, [r7, #12]
9000e2b0:	60b9      	str	r1, [r7, #8]
9000e2b2:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
9000e2b4:	68f8      	ldr	r0, [r7, #12]
9000e2b6:	f000 f8ec 	bl	9000e492 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
9000e2ba:	4604      	mov	r4, r0
9000e2bc:	68b8      	ldr	r0, [r7, #8]
9000e2be:	f7fd fd70 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000e2c2:	4605      	mov	r5, r0
9000e2c4:	6878      	ldr	r0, [r7, #4]
9000e2c6:	f7ff fed8 	bl	9000e07a <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
9000e2ca:	4603      	mov	r3, r0
9000e2cc:	461a      	mov	r2, r3
9000e2ce:	4629      	mov	r1, r5
9000e2d0:	4620      	mov	r0, r4
9000e2d2:	f000 f8eb 	bl	9000e4ac <_ZSt10__invoke_rIvRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIS4_ESt14__is_invocableIT0_JDpT1_EEEE5valueES4_E4typeEOSG_DpOSH_>
				     std::forward<_ArgTypes>(__args)...);
9000e2d6:	bf00      	nop
      }
9000e2d8:	3710      	adds	r7, #16
9000e2da:	46bd      	mov	sp, r7
9000e2dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

9000e2e0 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
9000e2e0:	b590      	push	{r4, r7, lr}
9000e2e2:	b085      	sub	sp, #20
9000e2e4:	af00      	add	r7, sp, #0
9000e2e6:	60f8      	str	r0, [r7, #12]
9000e2e8:	60b9      	str	r1, [r7, #8]
9000e2ea:	4613      	mov	r3, r2
9000e2ec:	71fb      	strb	r3, [r7, #7]
	switch (__op)
9000e2ee:	79fb      	ldrb	r3, [r7, #7]
9000e2f0:	2b00      	cmp	r3, #0
9000e2f2:	d002      	beq.n	9000e2fa <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
9000e2f4:	2b01      	cmp	r3, #1
9000e2f6:	d007      	beq.n	9000e308 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
9000e2f8:	e010      	b.n	9000e31c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
9000e2fa:	68f8      	ldr	r0, [r7, #12]
9000e2fc:	f7fe fa59 	bl	9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
9000e300:	4603      	mov	r3, r0
9000e302:	4a0c      	ldr	r2, [pc, #48]	; (9000e334 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>)
9000e304:	601a      	str	r2, [r3, #0]
	    break;
9000e306:	e00f      	b.n	9000e328 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
9000e308:	68f8      	ldr	r0, [r7, #12]
9000e30a:	f000 f8ea 	bl	9000e4e2 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
9000e30e:	4604      	mov	r4, r0
9000e310:	68b8      	ldr	r0, [r7, #8]
9000e312:	f000 f8be 	bl	9000e492 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
9000e316:	4603      	mov	r3, r0
9000e318:	6023      	str	r3, [r4, #0]
	    break;
9000e31a:	e005      	b.n	9000e328 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
9000e31c:	79fb      	ldrb	r3, [r7, #7]
9000e31e:	461a      	mov	r2, r3
9000e320:	68b9      	ldr	r1, [r7, #8]
9000e322:	68f8      	ldr	r0, [r7, #12]
9000e324:	f000 f8ea 	bl	9000e4fc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>
	return false;
9000e328:	2300      	movs	r3, #0
      }
9000e32a:	4618      	mov	r0, r3
9000e32c:	3714      	adds	r7, #20
9000e32e:	46bd      	mov	sp, r7
9000e330:	bd90      	pop	{r4, r7, pc}
9000e332:	bf00      	nop
9000e334:	9001424c 	.word	0x9001424c

9000e338 <_ZNSt8functionIFvhP23DummySystem_DummyPacketEE4swapERS3_>:
      void swap(function& __x) noexcept
9000e338:	b580      	push	{r7, lr}
9000e33a:	b082      	sub	sp, #8
9000e33c:	af00      	add	r7, sp, #0
9000e33e:	6078      	str	r0, [r7, #4]
9000e340:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
9000e342:	687b      	ldr	r3, [r7, #4]
9000e344:	683a      	ldr	r2, [r7, #0]
9000e346:	4611      	mov	r1, r2
9000e348:	4618      	mov	r0, r3
9000e34a:	f7fd fd66 	bl	9000be1a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
9000e34e:	687b      	ldr	r3, [r7, #4]
9000e350:	f103 0208 	add.w	r2, r3, #8
9000e354:	683b      	ldr	r3, [r7, #0]
9000e356:	3308      	adds	r3, #8
9000e358:	4619      	mov	r1, r3
9000e35a:	4610      	mov	r0, r2
9000e35c:	f7fd fd8f 	bl	9000be7e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
9000e360:	687b      	ldr	r3, [r7, #4]
9000e362:	f103 020c 	add.w	r2, r3, #12
9000e366:	683b      	ldr	r3, [r7, #0]
9000e368:	330c      	adds	r3, #12
9000e36a:	4619      	mov	r1, r3
9000e36c:	4610      	mov	r0, r2
9000e36e:	f000 f90a 	bl	9000e586 <_ZSt4swapIPFvRKSt9_Any_dataOhOP23DummySystem_DummyPacketEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
9000e372:	bf00      	nop
9000e374:	3708      	adds	r7, #8
9000e376:	46bd      	mov	sp, r7
9000e378:	bd80      	pop	{r7, pc}

9000e37a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E21_M_not_empty_functionISA_EEbRKS5_>:
	  _M_not_empty_function(const _Tp&)
9000e37a:	b480      	push	{r7}
9000e37c:	b083      	sub	sp, #12
9000e37e:	af00      	add	r7, sp, #0
9000e380:	6078      	str	r0, [r7, #4]
	  { return true; }
9000e382:	2301      	movs	r3, #1
9000e384:	4618      	mov	r0, r3
9000e386:	370c      	adds	r7, #12
9000e388:	46bd      	mov	sp, r7
9000e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e38e:	4770      	bx	lr

9000e390 <_ZSt4moveIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EONSt16remove_referenceIS4_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
9000e390:	b480      	push	{r7}
9000e392:	b083      	sub	sp, #12
9000e394:	af00      	add	r7, sp, #0
9000e396:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000e398:	687b      	ldr	r3, [r7, #4]
9000e39a:	4618      	mov	r0, r3
9000e39c:	370c      	adds	r7, #12
9000e39e:	46bd      	mov	sp, r7
9000e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e3a4:	4770      	bx	lr

9000e3a6 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorERSt9_Any_dataOSA_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
9000e3a6:	b590      	push	{r4, r7, lr}
9000e3a8:	b083      	sub	sp, #12
9000e3aa:	af00      	add	r7, sp, #0
9000e3ac:	6078      	str	r0, [r7, #4]
9000e3ae:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
9000e3b0:	6838      	ldr	r0, [r7, #0]
9000e3b2:	f7ff ffed 	bl	9000e390 <_ZSt4moveIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EONSt16remove_referenceIS4_E4typeEOS4_>
9000e3b6:	4603      	mov	r3, r0
9000e3b8:	4622      	mov	r2, r4
9000e3ba:	4619      	mov	r1, r3
9000e3bc:	6878      	ldr	r0, [r7, #4]
9000e3be:	f000 f901 	bl	9000e5c4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorERSt9_Any_dataOSA_St17integral_constantIbLb0EE>
9000e3c2:	bf00      	nop
9000e3c4:	370c      	adds	r7, #12
9000e3c6:	46bd      	mov	sp, r7
9000e3c8:	bd90      	pop	{r4, r7, pc}

9000e3ca <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E9_M_invokeERKSt9_Any_dataOhOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
9000e3ca:	b5b0      	push	{r4, r5, r7, lr}
9000e3cc:	b084      	sub	sp, #16
9000e3ce:	af00      	add	r7, sp, #0
9000e3d0:	60f8      	str	r0, [r7, #12]
9000e3d2:	60b9      	str	r1, [r7, #8]
9000e3d4:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
9000e3d6:	68f8      	ldr	r0, [r7, #12]
9000e3d8:	f000 f910 	bl	9000e5fc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
9000e3dc:	4604      	mov	r4, r0
9000e3de:	68b8      	ldr	r0, [r7, #8]
9000e3e0:	f7fd fcdf 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000e3e4:	4605      	mov	r5, r0
9000e3e6:	6878      	ldr	r0, [r7, #4]
9000e3e8:	f7ff fe47 	bl	9000e07a <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
9000e3ec:	4603      	mov	r3, r0
9000e3ee:	461a      	mov	r2, r3
9000e3f0:	4629      	mov	r1, r5
9000e3f2:	4620      	mov	r0, r4
9000e3f4:	f000 f90f 	bl	9000e616 <_ZSt10__invoke_rIvRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIS4_ESt14__is_invocableIT0_JDpT1_EEEE5valueES4_E4typeEOSG_DpOSH_>
				     std::forward<_ArgTypes>(__args)...);
9000e3f8:	bf00      	nop
      }
9000e3fa:	3710      	adds	r7, #16
9000e3fc:	46bd      	mov	sp, r7
9000e3fe:	bdb0      	pop	{r4, r5, r7, pc}

9000e400 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
9000e400:	b590      	push	{r4, r7, lr}
9000e402:	b085      	sub	sp, #20
9000e404:	af00      	add	r7, sp, #0
9000e406:	60f8      	str	r0, [r7, #12]
9000e408:	60b9      	str	r1, [r7, #8]
9000e40a:	4613      	mov	r3, r2
9000e40c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
9000e40e:	79fb      	ldrb	r3, [r7, #7]
9000e410:	2b00      	cmp	r3, #0
9000e412:	d002      	beq.n	9000e41a <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
9000e414:	2b01      	cmp	r3, #1
9000e416:	d007      	beq.n	9000e428 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x28>
9000e418:	e010      	b.n	9000e43c <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
9000e41a:	68f8      	ldr	r0, [r7, #12]
9000e41c:	f7fe f9c9 	bl	9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
9000e420:	4603      	mov	r3, r0
9000e422:	4a0c      	ldr	r2, [pc, #48]	; (9000e454 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>)
9000e424:	601a      	str	r2, [r3, #0]
	    break;
9000e426:	e00f      	b.n	9000e448 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
9000e428:	68f8      	ldr	r0, [r7, #12]
9000e42a:	f000 f90f 	bl	9000e64c <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
9000e42e:	4604      	mov	r4, r0
9000e430:	68b8      	ldr	r0, [r7, #8]
9000e432:	f000 f8e3 	bl	9000e5fc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
9000e436:	4603      	mov	r3, r0
9000e438:	6023      	str	r3, [r4, #0]
	    break;
9000e43a:	e005      	b.n	9000e448 <_ZNSt17_Function_handlerIFvhPvEZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhS0_E0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
9000e43c:	79fb      	ldrb	r3, [r7, #7]
9000e43e:	461a      	mov	r2, r3
9000e440:	68b9      	ldr	r1, [r7, #8]
9000e442:	68f8      	ldr	r0, [r7, #12]
9000e444:	f000 f90e 	bl	9000e664 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>
	return false;
9000e448:	2300      	movs	r3, #0
      }
9000e44a:	4618      	mov	r0, r3
9000e44c:	3714      	adds	r7, #20
9000e44e:	46bd      	mov	sp, r7
9000e450:	bd90      	pop	{r4, r7, pc}
9000e452:	bf00      	nop
9000e454:	900141f4 	.word	0x900141f4

9000e458 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E15_M_init_functorERSt9_Any_dataOSA_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
9000e458:	b5b0      	push	{r4, r5, r7, lr}
9000e45a:	b084      	sub	sp, #16
9000e45c:	af00      	add	r7, sp, #0
9000e45e:	60f8      	str	r0, [r7, #12]
9000e460:	60b9      	str	r1, [r7, #8]
9000e462:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
9000e464:	68b8      	ldr	r0, [r7, #8]
9000e466:	f7ff ff02 	bl	9000e26e <_ZSt4moveIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EONSt16remove_referenceIS4_E4typeEOS4_>
9000e46a:	4605      	mov	r5, r0
9000e46c:	200c      	movs	r0, #12
9000e46e:	f001 feb7 	bl	900101e0 <_Znwj>
9000e472:	4603      	mov	r3, r0
9000e474:	461c      	mov	r4, r3
9000e476:	4623      	mov	r3, r4
9000e478:	462a      	mov	r2, r5
9000e47a:	ca07      	ldmia	r2, {r0, r1, r2}
9000e47c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
9000e480:	68f8      	ldr	r0, [r7, #12]
9000e482:	f000 f82e 	bl	9000e4e2 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
9000e486:	4603      	mov	r3, r0
9000e488:	601c      	str	r4, [r3, #0]
9000e48a:	bf00      	nop
9000e48c:	3710      	adds	r7, #16
9000e48e:	46bd      	mov	sp, r7
9000e490:	bdb0      	pop	{r4, r5, r7, pc}

9000e492 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
9000e492:	b580      	push	{r7, lr}
9000e494:	b082      	sub	sp, #8
9000e496:	af00      	add	r7, sp, #0
9000e498:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
9000e49a:	6878      	ldr	r0, [r7, #4]
9000e49c:	f000 f91c 	bl	9000e6d8 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>
9000e4a0:	4603      	mov	r3, r0
9000e4a2:	681b      	ldr	r3, [r3, #0]
	}
9000e4a4:	4618      	mov	r0, r3
9000e4a6:	3708      	adds	r7, #8
9000e4a8:	46bd      	mov	sp, r7
9000e4aa:	bd80      	pop	{r7, pc}

9000e4ac <_ZSt10__invoke_rIvRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIS4_ESt14__is_invocableIT0_JDpT1_EEEE5valueES4_E4typeEOSG_DpOSH_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
9000e4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
9000e4ae:	b085      	sub	sp, #20
9000e4b0:	af00      	add	r7, sp, #0
9000e4b2:	60f8      	str	r0, [r7, #12]
9000e4b4:	60b9      	str	r1, [r7, #8]
9000e4b6:	607a      	str	r2, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
9000e4b8:	68f8      	ldr	r0, [r7, #12]
9000e4ba:	f000 f919 	bl	9000e6f0 <_ZSt7forwardIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
9000e4be:	4604      	mov	r4, r0
9000e4c0:	68b8      	ldr	r0, [r7, #8]
9000e4c2:	f7fd fc6e 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000e4c6:	4605      	mov	r5, r0
9000e4c8:	6878      	ldr	r0, [r7, #4]
9000e4ca:	f7ff fdd6 	bl	9000e07a <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
9000e4ce:	4603      	mov	r3, r0
9000e4d0:	462a      	mov	r2, r5
9000e4d2:	4621      	mov	r1, r4
9000e4d4:	4630      	mov	r0, r6
9000e4d6:	f000 f916 	bl	9000e706 <_ZSt13__invoke_implIvRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>
    }
9000e4da:	bf00      	nop
9000e4dc:	3714      	adds	r7, #20
9000e4de:	46bd      	mov	sp, r7
9000e4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000e4e2 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>:
      _M_access()
9000e4e2:	b580      	push	{r7, lr}
9000e4e4:	b082      	sub	sp, #8
9000e4e6:	af00      	add	r7, sp, #0
9000e4e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
9000e4ea:	6878      	ldr	r0, [r7, #4]
9000e4ec:	f7fd fd10 	bl	9000bf10 <_ZNSt9_Any_data9_M_accessEv>
9000e4f0:	4603      	mov	r3, r0
9000e4f2:	4618      	mov	r0, r3
9000e4f4:	3708      	adds	r7, #8
9000e4f6:	46bd      	mov	sp, r7
9000e4f8:	bd80      	pop	{r7, pc}
	...

9000e4fc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
9000e4fc:	b5b0      	push	{r4, r5, r7, lr}
9000e4fe:	b084      	sub	sp, #16
9000e500:	af00      	add	r7, sp, #0
9000e502:	60f8      	str	r0, [r7, #12]
9000e504:	60b9      	str	r1, [r7, #8]
9000e506:	4613      	mov	r3, r2
9000e508:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
9000e50a:	79fb      	ldrb	r3, [r7, #7]
9000e50c:	2b03      	cmp	r3, #3
9000e50e:	d827      	bhi.n	9000e560 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
9000e510:	a201      	add	r2, pc, #4	; (adr r2, 9000e518 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>)
9000e512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000e516:	bf00      	nop
9000e518:	9000e529 	.word	0x9000e529
9000e51c:	9000e537 	.word	0x9000e537
9000e520:	9000e54b 	.word	0x9000e54b
9000e524:	9000e557 	.word	0x9000e557
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
9000e528:	68f8      	ldr	r0, [r7, #12]
9000e52a:	f7fe f942 	bl	9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
9000e52e:	4603      	mov	r3, r0
9000e530:	4a0e      	ldr	r2, [pc, #56]	; (9000e56c <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x70>)
9000e532:	601a      	str	r2, [r3, #0]
	      break;
9000e534:	e014      	b.n	9000e560 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
9000e536:	68f8      	ldr	r0, [r7, #12]
9000e538:	f7ff ffd3 	bl	9000e4e2 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
9000e53c:	4604      	mov	r4, r0
9000e53e:	68b8      	ldr	r0, [r7, #8]
9000e540:	f7ff ffa7 	bl	9000e492 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E14_M_get_pointerERKSt9_Any_data>
9000e544:	4603      	mov	r3, r0
9000e546:	6023      	str	r3, [r4, #0]
	      break;
9000e548:	e00a      	b.n	9000e560 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
9000e54a:	462a      	mov	r2, r5
9000e54c:	68b9      	ldr	r1, [r7, #8]
9000e54e:	68f8      	ldr	r0, [r7, #12]
9000e550:	f000 f8f7 	bl	9000e742 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E8_M_cloneERSt9_Any_dataRKSC_St17integral_constantIbLb0EE>
	      break;
9000e554:	e004      	b.n	9000e560 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
9000e556:	4621      	mov	r1, r4
9000e558:	68f8      	ldr	r0, [r7, #12]
9000e55a:	f000 f910 	bl	9000e77e <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
9000e55e:	bf00      	nop
	  return false;
9000e560:	2300      	movs	r3, #0
	}
9000e562:	4618      	mov	r0, r3
9000e564:	3710      	adds	r7, #16
9000e566:	46bd      	mov	sp, r7
9000e568:	bdb0      	pop	{r4, r5, r7, pc}
9000e56a:	bf00      	nop
9000e56c:	9001424c 	.word	0x9001424c

9000e570 <_ZSt4moveIRPFvRKSt9_Any_dataOhOP23DummySystem_DummyPacketEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
9000e570:	b480      	push	{r7}
9000e572:	b083      	sub	sp, #12
9000e574:	af00      	add	r7, sp, #0
9000e576:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000e578:	687b      	ldr	r3, [r7, #4]
9000e57a:	4618      	mov	r0, r3
9000e57c:	370c      	adds	r7, #12
9000e57e:	46bd      	mov	sp, r7
9000e580:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e584:	4770      	bx	lr

9000e586 <_ZSt4swapIPFvRKSt9_Any_dataOhOP23DummySystem_DummyPacketEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
9000e586:	b580      	push	{r7, lr}
9000e588:	b084      	sub	sp, #16
9000e58a:	af00      	add	r7, sp, #0
9000e58c:	6078      	str	r0, [r7, #4]
9000e58e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
9000e590:	6878      	ldr	r0, [r7, #4]
9000e592:	f7ff ffed 	bl	9000e570 <_ZSt4moveIRPFvRKSt9_Any_dataOhOP23DummySystem_DummyPacketEEONSt16remove_referenceIT_E4typeEOSB_>
9000e596:	4603      	mov	r3, r0
9000e598:	681b      	ldr	r3, [r3, #0]
9000e59a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
9000e59c:	6838      	ldr	r0, [r7, #0]
9000e59e:	f7ff ffe7 	bl	9000e570 <_ZSt4moveIRPFvRKSt9_Any_dataOhOP23DummySystem_DummyPacketEEONSt16remove_referenceIT_E4typeEOSB_>
9000e5a2:	4603      	mov	r3, r0
9000e5a4:	681a      	ldr	r2, [r3, #0]
9000e5a6:	687b      	ldr	r3, [r7, #4]
9000e5a8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
9000e5aa:	f107 030c 	add.w	r3, r7, #12
9000e5ae:	4618      	mov	r0, r3
9000e5b0:	f7ff ffde 	bl	9000e570 <_ZSt4moveIRPFvRKSt9_Any_dataOhOP23DummySystem_DummyPacketEEONSt16remove_referenceIT_E4typeEOSB_>
9000e5b4:	4603      	mov	r3, r0
9000e5b6:	681a      	ldr	r2, [r3, #0]
9000e5b8:	683b      	ldr	r3, [r7, #0]
9000e5ba:	601a      	str	r2, [r3, #0]
    }
9000e5bc:	bf00      	nop
9000e5be:	3710      	adds	r7, #16
9000e5c0:	46bd      	mov	sp, r7
9000e5c2:	bd80      	pop	{r7, pc}

9000e5c4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E15_M_init_functorERSt9_Any_dataOSA_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
9000e5c4:	b5b0      	push	{r4, r5, r7, lr}
9000e5c6:	b084      	sub	sp, #16
9000e5c8:	af00      	add	r7, sp, #0
9000e5ca:	60f8      	str	r0, [r7, #12]
9000e5cc:	60b9      	str	r1, [r7, #8]
9000e5ce:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
9000e5d0:	68b8      	ldr	r0, [r7, #8]
9000e5d2:	f7ff fedd 	bl	9000e390 <_ZSt4moveIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EONSt16remove_referenceIS4_E4typeEOS4_>
9000e5d6:	4605      	mov	r5, r0
9000e5d8:	2010      	movs	r0, #16
9000e5da:	f001 fe01 	bl	900101e0 <_Znwj>
9000e5de:	4603      	mov	r3, r0
9000e5e0:	461c      	mov	r4, r3
9000e5e2:	4629      	mov	r1, r5
9000e5e4:	4620      	mov	r0, r4
9000e5e6:	f7ff fcfc 	bl	9000dfe2 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1EOS8_>
9000e5ea:	68f8      	ldr	r0, [r7, #12]
9000e5ec:	f000 f82e 	bl	9000e64c <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
9000e5f0:	4603      	mov	r3, r0
9000e5f2:	601c      	str	r4, [r3, #0]
9000e5f4:	bf00      	nop
9000e5f6:	3710      	adds	r7, #16
9000e5f8:	46bd      	mov	sp, r7
9000e5fa:	bdb0      	pop	{r4, r5, r7, pc}

9000e5fc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
9000e5fc:	b580      	push	{r7, lr}
9000e5fe:	b082      	sub	sp, #8
9000e600:	af00      	add	r7, sp, #0
9000e602:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
9000e604:	6878      	ldr	r0, [r7, #4]
9000e606:	f000 f8ce 	bl	9000e7a6 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>
9000e60a:	4603      	mov	r3, r0
9000e60c:	681b      	ldr	r3, [r3, #0]
	}
9000e60e:	4618      	mov	r0, r3
9000e610:	3708      	adds	r7, #8
9000e612:	46bd      	mov	sp, r7
9000e614:	bd80      	pop	{r7, pc}

9000e616 <_ZSt10__invoke_rIvRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIS4_ESt14__is_invocableIT0_JDpT1_EEEE5valueES4_E4typeEOSG_DpOSH_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
9000e616:	b5f0      	push	{r4, r5, r6, r7, lr}
9000e618:	b085      	sub	sp, #20
9000e61a:	af00      	add	r7, sp, #0
9000e61c:	60f8      	str	r0, [r7, #12]
9000e61e:	60b9      	str	r1, [r7, #8]
9000e620:	607a      	str	r2, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
9000e622:	68f8      	ldr	r0, [r7, #12]
9000e624:	f000 f8cb 	bl	9000e7be <_ZSt7forwardIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
9000e628:	4604      	mov	r4, r0
9000e62a:	68b8      	ldr	r0, [r7, #8]
9000e62c:	f7fd fbb9 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000e630:	4605      	mov	r5, r0
9000e632:	6878      	ldr	r0, [r7, #4]
9000e634:	f7ff fd21 	bl	9000e07a <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
9000e638:	4603      	mov	r3, r0
9000e63a:	462a      	mov	r2, r5
9000e63c:	4621      	mov	r1, r4
9000e63e:	4630      	mov	r0, r6
9000e640:	f000 f8c8 	bl	9000e7d4 <_ZSt13__invoke_implIvRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>
    }
9000e644:	bf00      	nop
9000e646:	3714      	adds	r7, #20
9000e648:	46bd      	mov	sp, r7
9000e64a:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000e64c <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>:
      _M_access()
9000e64c:	b580      	push	{r7, lr}
9000e64e:	b082      	sub	sp, #8
9000e650:	af00      	add	r7, sp, #0
9000e652:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
9000e654:	6878      	ldr	r0, [r7, #4]
9000e656:	f7fd fc5b 	bl	9000bf10 <_ZNSt9_Any_data9_M_accessEv>
9000e65a:	4603      	mov	r3, r0
9000e65c:	4618      	mov	r0, r3
9000e65e:	3708      	adds	r7, #8
9000e660:	46bd      	mov	sp, r7
9000e662:	bd80      	pop	{r7, pc}

9000e664 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
9000e664:	b5b0      	push	{r4, r5, r7, lr}
9000e666:	b084      	sub	sp, #16
9000e668:	af00      	add	r7, sp, #0
9000e66a:	60f8      	str	r0, [r7, #12]
9000e66c:	60b9      	str	r1, [r7, #8]
9000e66e:	4613      	mov	r3, r2
9000e670:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
9000e672:	79fb      	ldrb	r3, [r7, #7]
9000e674:	2b03      	cmp	r3, #3
9000e676:	d827      	bhi.n	9000e6c8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
9000e678:	a201      	add	r2, pc, #4	; (adr r2, 9000e680 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1c>)
9000e67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000e67e:	bf00      	nop
9000e680:	9000e691 	.word	0x9000e691
9000e684:	9000e69f 	.word	0x9000e69f
9000e688:	9000e6b3 	.word	0x9000e6b3
9000e68c:	9000e6bf 	.word	0x9000e6bf
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
9000e690:	68f8      	ldr	r0, [r7, #12]
9000e692:	f7fe f88e 	bl	9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
9000e696:	4603      	mov	r3, r0
9000e698:	4a0e      	ldr	r2, [pc, #56]	; (9000e6d4 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x70>)
9000e69a:	601a      	str	r2, [r3, #0]
	      break;
9000e69c:	e014      	b.n	9000e6c8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
9000e69e:	68f8      	ldr	r0, [r7, #12]
9000e6a0:	f7ff ffd4 	bl	9000e64c <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
9000e6a4:	4604      	mov	r4, r0
9000e6a6:	68b8      	ldr	r0, [r7, #8]
9000e6a8:	f7ff ffa8 	bl	9000e5fc <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E14_M_get_pointerERKSt9_Any_data>
9000e6ac:	4603      	mov	r3, r0
9000e6ae:	6023      	str	r3, [r4, #0]
	      break;
9000e6b0:	e00a      	b.n	9000e6c8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
9000e6b2:	462a      	mov	r2, r5
9000e6b4:	68b9      	ldr	r1, [r7, #8]
9000e6b6:	68f8      	ldr	r0, [r7, #12]
9000e6b8:	f000 f8ba 	bl	9000e830 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E8_M_cloneERSt9_Any_dataRKSC_St17integral_constantIbLb0EE>
	      break;
9000e6bc:	e004      	b.n	9000e6c8 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
9000e6be:	4621      	mov	r1, r4
9000e6c0:	68f8      	ldr	r0, [r7, #12]
9000e6c2:	f000 f8d2 	bl	9000e86a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
9000e6c6:	bf00      	nop
	  return false;
9000e6c8:	2300      	movs	r3, #0
	}
9000e6ca:	4618      	mov	r0, r3
9000e6cc:	3710      	adds	r7, #16
9000e6ce:	46bd      	mov	sp, r7
9000e6d0:	bdb0      	pop	{r4, r5, r7, pc}
9000e6d2:	bf00      	nop
9000e6d4:	900141f4 	.word	0x900141f4

9000e6d8 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>:
      _M_access() const
9000e6d8:	b580      	push	{r7, lr}
9000e6da:	b082      	sub	sp, #8
9000e6dc:	af00      	add	r7, sp, #0
9000e6de:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
9000e6e0:	6878      	ldr	r0, [r7, #4]
9000e6e2:	f7fd fc20 	bl	9000bf26 <_ZNKSt9_Any_data9_M_accessEv>
9000e6e6:	4603      	mov	r3, r0
9000e6e8:	4618      	mov	r0, r3
9000e6ea:	3708      	adds	r7, #8
9000e6ec:	46bd      	mov	sp, r7
9000e6ee:	bd80      	pop	{r7, pc}

9000e6f0 <_ZSt7forwardIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000e6f0:	b480      	push	{r7}
9000e6f2:	b083      	sub	sp, #12
9000e6f4:	af00      	add	r7, sp, #0
9000e6f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000e6f8:	687b      	ldr	r3, [r7, #4]
9000e6fa:	4618      	mov	r0, r3
9000e6fc:	370c      	adds	r7, #12
9000e6fe:	46bd      	mov	sp, r7
9000e700:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e704:	4770      	bx	lr

9000e706 <_ZSt13__invoke_implIvRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
9000e706:	b5b0      	push	{r4, r5, r7, lr}
9000e708:	b084      	sub	sp, #16
9000e70a:	af00      	add	r7, sp, #0
9000e70c:	7338      	strb	r0, [r7, #12]
9000e70e:	60b9      	str	r1, [r7, #8]
9000e710:	607a      	str	r2, [r7, #4]
9000e712:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
9000e714:	68b8      	ldr	r0, [r7, #8]
9000e716:	f7ff ffeb 	bl	9000e6f0 <_ZSt7forwardIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EOS4_RNSt16remove_referenceIS4_E4typeE>
9000e71a:	4605      	mov	r5, r0
9000e71c:	6878      	ldr	r0, [r7, #4]
9000e71e:	f7fd fb40 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000e722:	4603      	mov	r3, r0
9000e724:	781c      	ldrb	r4, [r3, #0]
9000e726:	6838      	ldr	r0, [r7, #0]
9000e728:	f7ff fca7 	bl	9000e07a <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
9000e72c:	4603      	mov	r3, r0
9000e72e:	681b      	ldr	r3, [r3, #0]
9000e730:	461a      	mov	r2, r3
9000e732:	4621      	mov	r1, r4
9000e734:	4628      	mov	r0, r5
9000e736:	f7ff fb70 	bl	9000de1a <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENKUlhPvE_clEhS7_>
9000e73a:	bf00      	nop
9000e73c:	3710      	adds	r7, #16
9000e73e:	46bd      	mov	sp, r7
9000e740:	bdb0      	pop	{r4, r5, r7, pc}

9000e742 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E8_M_cloneERSt9_Any_dataRKSC_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
9000e742:	b5b0      	push	{r4, r5, r7, lr}
9000e744:	b084      	sub	sp, #16
9000e746:	af00      	add	r7, sp, #0
9000e748:	60f8      	str	r0, [r7, #12]
9000e74a:	60b9      	str	r1, [r7, #8]
9000e74c:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
9000e74e:	68b8      	ldr	r0, [r7, #8]
9000e750:	f000 f8a2 	bl	9000e898 <_ZNKSt9_Any_data9_M_accessIPKZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>
9000e754:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
9000e756:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
9000e758:	200c      	movs	r0, #12
9000e75a:	f001 fd41 	bl	900101e0 <_Znwj>
9000e75e:	4603      	mov	r3, r0
9000e760:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
9000e762:	4623      	mov	r3, r4
9000e764:	462a      	mov	r2, r5
9000e766:	ca07      	ldmia	r2, {r0, r1, r2}
9000e768:	e883 0007 	stmia.w	r3, {r0, r1, r2}
9000e76c:	68f8      	ldr	r0, [r7, #12]
9000e76e:	f7ff feb8 	bl	9000e4e2 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
9000e772:	4603      	mov	r3, r0
9000e774:	601c      	str	r4, [r3, #0]
	}
9000e776:	bf00      	nop
9000e778:	3710      	adds	r7, #16
9000e77a:	46bd      	mov	sp, r7
9000e77c:	bdb0      	pop	{r4, r5, r7, pc}

9000e77e <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
9000e77e:	b580      	push	{r7, lr}
9000e780:	b082      	sub	sp, #8
9000e782:	af00      	add	r7, sp, #0
9000e784:	6078      	str	r0, [r7, #4]
9000e786:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
9000e788:	6878      	ldr	r0, [r7, #4]
9000e78a:	f7ff feaa 	bl	9000e4e2 <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERS5_v>
9000e78e:	4603      	mov	r3, r0
9000e790:	681b      	ldr	r3, [r3, #0]
9000e792:	2b00      	cmp	r3, #0
9000e794:	d003      	beq.n	9000e79e <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
9000e796:	210c      	movs	r1, #12
9000e798:	4618      	mov	r0, r3
9000e79a:	f001 ff05 	bl	900105a8 <_ZdlPvj>
	}
9000e79e:	bf00      	nop
9000e7a0:	3708      	adds	r7, #8
9000e7a2:	46bd      	mov	sp, r7
9000e7a4:	bd80      	pop	{r7, pc}

9000e7a6 <_ZNKSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>:
      _M_access() const
9000e7a6:	b580      	push	{r7, lr}
9000e7a8:	b082      	sub	sp, #8
9000e7aa:	af00      	add	r7, sp, #0
9000e7ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
9000e7ae:	6878      	ldr	r0, [r7, #4]
9000e7b0:	f7fd fbb9 	bl	9000bf26 <_ZNKSt9_Any_data9_M_accessEv>
9000e7b4:	4603      	mov	r3, r0
9000e7b6:	4618      	mov	r0, r3
9000e7b8:	3708      	adds	r7, #8
9000e7ba:	46bd      	mov	sp, r7
9000e7bc:	bd80      	pop	{r7, pc}

9000e7be <_ZSt7forwardIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000e7be:	b480      	push	{r7}
9000e7c0:	b083      	sub	sp, #12
9000e7c2:	af00      	add	r7, sp, #0
9000e7c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000e7c6:	687b      	ldr	r3, [r7, #4]
9000e7c8:	4618      	mov	r0, r3
9000e7ca:	370c      	adds	r7, #12
9000e7cc:	46bd      	mov	sp, r7
9000e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e7d2:	4770      	bx	lr

9000e7d4 <_ZSt13__invoke_implIvRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_JhS8_EES4_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
9000e7d4:	b5b0      	push	{r4, r5, r7, lr}
9000e7d6:	b084      	sub	sp, #16
9000e7d8:	af00      	add	r7, sp, #0
9000e7da:	7338      	strb	r0, [r7, #12]
9000e7dc:	60b9      	str	r1, [r7, #8]
9000e7de:	607a      	str	r2, [r7, #4]
9000e7e0:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
9000e7e2:	68b8      	ldr	r0, [r7, #8]
9000e7e4:	f7ff ffeb 	bl	9000e7be <_ZSt7forwardIRZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EOS4_RNSt16remove_referenceIS4_E4typeE>
9000e7e8:	4605      	mov	r5, r0
9000e7ea:	6878      	ldr	r0, [r7, #4]
9000e7ec:	f7fd fad9 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000e7f0:	4603      	mov	r3, r0
9000e7f2:	781c      	ldrb	r4, [r3, #0]
9000e7f4:	6838      	ldr	r0, [r7, #0]
9000e7f6:	f7ff fc40 	bl	9000e07a <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
9000e7fa:	4603      	mov	r3, r0
9000e7fc:	681b      	ldr	r3, [r3, #0]
9000e7fe:	461a      	mov	r2, r3
9000e800:	4621      	mov	r1, r4
9000e802:	4628      	mov	r0, r5
9000e804:	f7ff fb29 	bl	9000de5a <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENKUlhPvE0_clEhS7_>
9000e808:	bf00      	nop
9000e80a:	3710      	adds	r7, #16
9000e80c:	46bd      	mov	sp, r7
9000e80e:	bdb0      	pop	{r4, r5, r7, pc}

9000e810 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1ERKS8_>:
9000e810:	b580      	push	{r7, lr}
9000e812:	b082      	sub	sp, #8
9000e814:	af00      	add	r7, sp, #0
9000e816:	6078      	str	r0, [r7, #4]
9000e818:	6039      	str	r1, [r7, #0]
9000e81a:	687b      	ldr	r3, [r7, #4]
9000e81c:	683a      	ldr	r2, [r7, #0]
9000e81e:	4611      	mov	r1, r2
9000e820:	4618      	mov	r0, r3
9000e822:	f7ff fbbc 	bl	9000df9e <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1ERKS3_>
9000e826:	687b      	ldr	r3, [r7, #4]
9000e828:	4618      	mov	r0, r3
9000e82a:	3708      	adds	r7, #8
9000e82c:	46bd      	mov	sp, r7
9000e82e:	bd80      	pop	{r7, pc}

9000e830 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E8_M_cloneERSt9_Any_dataRKSC_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
9000e830:	b5b0      	push	{r4, r5, r7, lr}
9000e832:	b084      	sub	sp, #16
9000e834:	af00      	add	r7, sp, #0
9000e836:	60f8      	str	r0, [r7, #12]
9000e838:	60b9      	str	r1, [r7, #8]
9000e83a:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
9000e83c:	68b8      	ldr	r0, [r7, #8]
9000e83e:	f000 f837 	bl	9000e8b0 <_ZNKSt9_Any_data9_M_accessIPKZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>
9000e842:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
9000e844:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
9000e846:	2010      	movs	r0, #16
9000e848:	f001 fcca 	bl	900101e0 <_Znwj>
9000e84c:	4603      	mov	r3, r0
9000e84e:	461c      	mov	r4, r3
9000e850:	4629      	mov	r1, r5
9000e852:	4620      	mov	r0, r4
9000e854:	f7ff ffdc 	bl	9000e810 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_C1ERKS8_>
	  __dest._M_access<_Functor*>() =
9000e858:	68f8      	ldr	r0, [r7, #12]
9000e85a:	f7ff fef7 	bl	9000e64c <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
9000e85e:	4603      	mov	r3, r0
9000e860:	601c      	str	r4, [r3, #0]
	}
9000e862:	bf00      	nop
9000e864:	3710      	adds	r7, #16
9000e866:	46bd      	mov	sp, r7
9000e868:	bdb0      	pop	{r4, r5, r7, pc}

9000e86a <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
9000e86a:	b590      	push	{r4, r7, lr}
9000e86c:	b083      	sub	sp, #12
9000e86e:	af00      	add	r7, sp, #0
9000e870:	6078      	str	r0, [r7, #4]
9000e872:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
9000e874:	6878      	ldr	r0, [r7, #4]
9000e876:	f7ff fee9 	bl	9000e64c <_ZNSt9_Any_data9_M_accessIPZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERS5_v>
9000e87a:	4603      	mov	r3, r0
9000e87c:	681c      	ldr	r4, [r3, #0]
9000e87e:	2c00      	cmp	r4, #0
9000e880:	d006      	beq.n	9000e890 <_ZNSt14_Function_base13_Base_managerIZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x26>
9000e882:	4620      	mov	r0, r4
9000e884:	f7ff fb07 	bl	9000de96 <_ZZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEENUlhPvE0_D1Ev>
9000e888:	2110      	movs	r1, #16
9000e88a:	4620      	mov	r0, r4
9000e88c:	f001 fe8c 	bl	900105a8 <_ZdlPvj>
	}
9000e890:	bf00      	nop
9000e892:	370c      	adds	r7, #12
9000e894:	46bd      	mov	sp, r7
9000e896:	bd90      	pop	{r4, r7, pc}

9000e898 <_ZNKSt9_Any_data9_M_accessIPKZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE_EERKS5_v>:
      _M_access() const
9000e898:	b580      	push	{r7, lr}
9000e89a:	b082      	sub	sp, #8
9000e89c:	af00      	add	r7, sp, #0
9000e89e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
9000e8a0:	6878      	ldr	r0, [r7, #4]
9000e8a2:	f7fd fb40 	bl	9000bf26 <_ZNKSt9_Any_data9_M_accessEv>
9000e8a6:	4603      	mov	r3, r0
9000e8a8:	4618      	mov	r0, r3
9000e8aa:	3708      	adds	r7, #8
9000e8ac:	46bd      	mov	sp, r7
9000e8ae:	bd80      	pop	{r7, pc}

9000e8b0 <_ZNKSt9_Any_data9_M_accessIPKZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EEEUlhPvE0_EERKS5_v>:
      _M_access() const
9000e8b0:	b580      	push	{r7, lr}
9000e8b2:	b082      	sub	sp, #8
9000e8b4:	af00      	add	r7, sp, #0
9000e8b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
9000e8b8:	6878      	ldr	r0, [r7, #4]
9000e8ba:	f7fd fb34 	bl	9000bf26 <_ZNKSt9_Any_data9_M_accessEv>
9000e8be:	4603      	mov	r3, r0
9000e8c0:	4618      	mov	r0, r3
9000e8c2:	3708      	adds	r7, #8
9000e8c4:	46bd      	mov	sp, r7
9000e8c6:	bd80      	pop	{r7, pc}

9000e8c8 <_ZN10NetworkBusC1EP8IODriver>:


#include "NetworkBus.h"
#include "Protocol/Protocol.h"

NetworkBus::NetworkBus(IODriver* driver) : IOBus(driver, network_frame, sizeof(network_frame)) {
9000e8c8:	b580      	push	{r7, lr}
9000e8ca:	b082      	sub	sp, #8
9000e8cc:	af00      	add	r7, sp, #0
9000e8ce:	6078      	str	r0, [r7, #4]
9000e8d0:	6039      	str	r1, [r7, #0]
9000e8d2:	6878      	ldr	r0, [r7, #4]
9000e8d4:	687b      	ldr	r3, [r7, #4]
9000e8d6:	f641 4224 	movw	r2, #7204	; 0x1c24
9000e8da:	441a      	add	r2, r3
9000e8dc:	f44f 7380 	mov.w	r3, #256	; 0x100
9000e8e0:	6839      	ldr	r1, [r7, #0]
9000e8e2:	f7fd fbd7 	bl	9000c094 <_ZN5IOBusC1EP8IODriverPhm>
9000e8e6:	4a1a      	ldr	r2, [pc, #104]	; (9000e950 <_ZN10NetworkBusC1EP8IODriver+0x88>)
9000e8e8:	687b      	ldr	r3, [r7, #4]
9000e8ea:	601a      	str	r2, [r3, #0]

	// avionics
	define<DummySystem_DummyPacket>(0);
9000e8ec:	687b      	ldr	r3, [r7, #4]
9000e8ee:	2100      	movs	r1, #0
9000e8f0:	4618      	mov	r0, r3
9000e8f2:	f7fe ffed 	bl	9000d8d0 <_ZN10MessageBus6defineI23DummySystem_DummyPacketEEbh>
	define<MassPacket>(1);
9000e8f6:	687b      	ldr	r3, [r7, #4]
9000e8f8:	2101      	movs	r1, #1
9000e8fa:	4618      	mov	r0, r3
9000e8fc:	f7fe fd90 	bl	9000d420 <_ZN10MessageBus6defineI10MassPacketEEbh>
	define<ALLINONE_Packet>(2);
9000e900:	687b      	ldr	r3, [r7, #4]
9000e902:	2102      	movs	r1, #2
9000e904:	4618      	mov	r0, r3
9000e906:	f7fe fd27 	bl	9000d358 <_ZN10MessageBus6defineI15ALLINONE_PacketEEbh>

	// general packets
	define<DataPacket>(58);
9000e90a:	687b      	ldr	r3, [r7, #4]
9000e90c:	213a      	movs	r1, #58	; 0x3a
9000e90e:	4618      	mov	r0, r3
9000e910:	f7fe fcbe 	bl	9000d290 <_ZN10MessageBus6defineI10DataPacketEEbh>
	define<PingPacket>(59);
9000e914:	687b      	ldr	r3, [r7, #4]
9000e916:	213b      	movs	r1, #59	; 0x3b
9000e918:	4618      	mov	r0, r3
9000e91a:	f7fe fde5 	bl	9000d4e8 <_ZN10MessageBus6defineI10PingPacketEEbh>
	define<ErrorPacket>(60);
9000e91e:	687b      	ldr	r3, [r7, #4]
9000e920:	213c      	movs	r1, #60	; 0x3c
9000e922:	4618      	mov	r0, r3
9000e924:	f7fe fe44 	bl	9000d5b0 <_ZN10MessageBus6defineI11ErrorPacketEEbh>
	define<RequestPacket>(61);
9000e928:	687b      	ldr	r3, [r7, #4]
9000e92a:	213d      	movs	r1, #61	; 0x3d
9000e92c:	4618      	mov	r0, r3
9000e92e:	f7fe fea3 	bl	9000d678 <_ZN10MessageBus6defineI13RequestPacketEEbh>
	define<ResponsePacket>(62);
9000e932:	687b      	ldr	r3, [r7, #4]
9000e934:	213e      	movs	r1, #62	; 0x3e
9000e936:	4618      	mov	r0, r3
9000e938:	f7fe ff02 	bl	9000d740 <_ZN10MessageBus6defineI14ResponsePacketEEbh>
	define<ProgressPacket>(63);
9000e93c:	687b      	ldr	r3, [r7, #4]
9000e93e:	213f      	movs	r1, #63	; 0x3f
9000e940:	4618      	mov	r0, r3
9000e942:	f7fe ff61 	bl	9000d808 <_ZN10MessageBus6defineI14ProgressPacketEEbh>
}
9000e946:	687b      	ldr	r3, [r7, #4]
9000e948:	4618      	mov	r0, r3
9000e94a:	3708      	adds	r7, #8
9000e94c:	46bd      	mov	sp, r7
9000e94e:	bd80      	pop	{r7, pc}
9000e950:	900143b4 	.word	0x900143b4

9000e954 <_ZN10NetworkBusD1Ev>:
#include "IOBus.h"

#define NETWORK_FRAME_SIZE 256


class NetworkBus : public IOBus {
9000e954:	b580      	push	{r7, lr}
9000e956:	b082      	sub	sp, #8
9000e958:	af00      	add	r7, sp, #0
9000e95a:	6078      	str	r0, [r7, #4]
9000e95c:	4a05      	ldr	r2, [pc, #20]	; (9000e974 <_ZN10NetworkBusD1Ev+0x20>)
9000e95e:	687b      	ldr	r3, [r7, #4]
9000e960:	601a      	str	r2, [r3, #0]
9000e962:	687b      	ldr	r3, [r7, #4]
9000e964:	4618      	mov	r0, r3
9000e966:	f7fe fc3f 	bl	9000d1e8 <_ZN5IOBusD1Ev>
9000e96a:	687b      	ldr	r3, [r7, #4]
9000e96c:	4618      	mov	r0, r3
9000e96e:	3708      	adds	r7, #8
9000e970:	46bd      	mov	sp, r7
9000e972:	bd80      	pop	{r7, pc}
9000e974:	900143b4 	.word	0x900143b4

9000e978 <_ZN10NetworkBusD0Ev>:
9000e978:	b580      	push	{r7, lr}
9000e97a:	b082      	sub	sp, #8
9000e97c:	af00      	add	r7, sp, #0
9000e97e:	6078      	str	r0, [r7, #4]
9000e980:	6878      	ldr	r0, [r7, #4]
9000e982:	f7ff ffe7 	bl	9000e954 <_ZN10NetworkBusD1Ev>
9000e986:	f641 5124 	movw	r1, #7460	; 0x1d24
9000e98a:	6878      	ldr	r0, [r7, #4]
9000e98c:	f001 fe0c 	bl	900105a8 <_ZdlPvj>
9000e990:	687b      	ldr	r3, [r7, #4]
9000e992:	4618      	mov	r0, r3
9000e994:	3708      	adds	r7, #8
9000e996:	46bd      	mov	sp, r7
9000e998:	bd80      	pop	{r7, pc}
	...

9000e99c <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority priority);
	Thread(const char* name, uint32_t stackSize);
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
9000e99c:	b480      	push	{r7}
9000e99e:	b083      	sub	sp, #12
9000e9a0:	af00      	add	r7, sp, #0
9000e9a2:	6078      	str	r0, [r7, #4]
9000e9a4:	4a04      	ldr	r2, [pc, #16]	; (9000e9b8 <_ZN6ThreadD1Ev+0x1c>)
9000e9a6:	687b      	ldr	r3, [r7, #4]
9000e9a8:	601a      	str	r2, [r3, #0]
9000e9aa:	687b      	ldr	r3, [r7, #4]
9000e9ac:	4618      	mov	r0, r3
9000e9ae:	370c      	adds	r7, #12
9000e9b0:	46bd      	mov	sp, r7
9000e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e9b6:	4770      	bx	lr
9000e9b8:	90014428 	.word	0x90014428

9000e9bc <_ZN6ThreadD0Ev>:
9000e9bc:	b580      	push	{r7, lr}
9000e9be:	b082      	sub	sp, #8
9000e9c0:	af00      	add	r7, sp, #0
9000e9c2:	6078      	str	r0, [r7, #4]
9000e9c4:	6878      	ldr	r0, [r7, #4]
9000e9c6:	f7ff ffe9 	bl	9000e99c <_ZN6ThreadD1Ev>
9000e9ca:	2138      	movs	r1, #56	; 0x38
9000e9cc:	6878      	ldr	r0, [r7, #4]
9000e9ce:	f001 fdeb 	bl	900105a8 <_ZdlPvj>
9000e9d2:	687b      	ldr	r3, [r7, #4]
9000e9d4:	4618      	mov	r0, r3
9000e9d6:	3708      	adds	r7, #8
9000e9d8:	46bd      	mov	sp, r7
9000e9da:	bd80      	pop	{r7, pc}

9000e9dc <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm>:
uint8_t can_dlc2len(uint32_t RxHeader_DataLength)
{
	return dlc2len[RxHeader_DataLength>>16];
}

ROCANDriver::ROCANDriver(FDCAN_HandleTypeDef* fdcan, uint32_t can_id): Thread("ROCANDriver", osPriorityRealtime), fdcan(fdcan), can_id(can_id){
9000e9dc:	b580      	push	{r7, lr}
9000e9de:	b084      	sub	sp, #16
9000e9e0:	af00      	add	r7, sp, #0
9000e9e2:	60f8      	str	r0, [r7, #12]
9000e9e4:	60b9      	str	r1, [r7, #8]
9000e9e6:	607a      	str	r2, [r7, #4]
9000e9e8:	68fb      	ldr	r3, [r7, #12]
9000e9ea:	4618      	mov	r0, r3
9000e9ec:	f7fd f930 	bl	9000bc50 <_ZN8IODriverC1Ev>
9000e9f0:	68fb      	ldr	r3, [r7, #12]
9000e9f2:	3304      	adds	r3, #4
9000e9f4:	2230      	movs	r2, #48	; 0x30
9000e9f6:	4934      	ldr	r1, [pc, #208]	; (9000eac8 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xec>)
9000e9f8:	4618      	mov	r0, r3
9000e9fa:	f001 fb91 	bl	90010120 <_ZN6ThreadC1EPKc12osPriority_t>
9000e9fe:	4a33      	ldr	r2, [pc, #204]	; (9000eacc <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xf0>)
9000ea00:	68fb      	ldr	r3, [r7, #12]
9000ea02:	601a      	str	r2, [r3, #0]
9000ea04:	4a32      	ldr	r2, [pc, #200]	; (9000ead0 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xf4>)
9000ea06:	68fb      	ldr	r3, [r7, #12]
9000ea08:	605a      	str	r2, [r3, #4]
9000ea0a:	68fb      	ldr	r3, [r7, #12]
9000ea0c:	68ba      	ldr	r2, [r7, #8]
9000ea0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
9000ea12:	68fb      	ldr	r3, [r7, #12]
9000ea14:	4a2f      	ldr	r2, [pc, #188]	; (9000ead4 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xf8>)
9000ea16:	3394      	adds	r3, #148	; 0x94
9000ea18:	e892 0003 	ldmia.w	r2, {r0, r1}
9000ea1c:	e883 0003 	stmia.w	r3, {r0, r1}
9000ea20:	68fb      	ldr	r3, [r7, #12]
9000ea22:	687a      	ldr	r2, [r7, #4]
9000ea24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
9000ea28:	68fb      	ldr	r3, [r7, #12]
9000ea2a:	33c0      	adds	r3, #192	; 0xc0
9000ea2c:	f240 6244 	movw	r2, #1604	; 0x644
9000ea30:	2100      	movs	r1, #0
9000ea32:	4618      	mov	r0, r3
9000ea34:	f002 fb2c 	bl	90011090 <memset>
9000ea38:	68fb      	ldr	r3, [r7, #12]
9000ea3a:	f203 7304 	addw	r3, r3, #1796	; 0x704
9000ea3e:	4618      	mov	r0, r3
9000ea40:	f000 fbb0 	bl	9000f1a4 <_ZNSt8functionIFvhPhmEEC1Ev>
	instance = this;
9000ea44:	4a24      	ldr	r2, [pc, #144]	; (9000ead8 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xfc>)
9000ea46:	68fb      	ldr	r3, [r7, #12]
9000ea48:	6013      	str	r3, [r2, #0]
//	STMUARTDriver_list.push_back(this);
	this->RxData = (uint8_t*) pvPortMalloc(RX_BUFFER_SIZE);
9000ea4a:	2040      	movs	r0, #64	; 0x40
9000ea4c:	f7fc fec4 	bl	9000b7d8 <pvPortMalloc>
9000ea50:	4602      	mov	r2, r0
9000ea52:	68fb      	ldr	r3, [r7, #12]
9000ea54:	665a      	str	r2, [r3, #100]	; 0x64
	this->TxData = (uint8_t*) pvPortMalloc(TX_BUFFER_SIZE);
9000ea56:	2040      	movs	r0, #64	; 0x40
9000ea58:	f7fc febe 	bl	9000b7d8 <pvPortMalloc>
9000ea5c:	4602      	mov	r2, r0
9000ea5e:	68fb      	ldr	r3, [r7, #12]
9000ea60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if((TxData == nullptr) || (RxData == nullptr)){
9000ea64:	68fb      	ldr	r3, [r7, #12]
9000ea66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000ea6a:	2b00      	cmp	r3, #0
9000ea6c:	d003      	beq.n	9000ea76 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0x9a>
9000ea6e:	68fb      	ldr	r3, [r7, #12]
9000ea70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ea72:	2b00      	cmp	r3, #0
9000ea74:	d108      	bne.n	9000ea88 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xac>
        printf("[RoCo] [ROCANDriver] Unable to allocate Rx/Tx buffers for MCU#%" PRIu32 "\r\n", getSenderID(fdcan));
9000ea76:	68b9      	ldr	r1, [r7, #8]
9000ea78:	68f8      	ldr	r0, [r7, #12]
9000ea7a:	f000 fb3b 	bl	9000f0f4 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef>
9000ea7e:	4603      	mov	r3, r0
9000ea80:	4619      	mov	r1, r3
9000ea82:	4816      	ldr	r0, [pc, #88]	; (9000eadc <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0x100>)
9000ea84:	f002 ffe2 	bl	90011a4c <iprintf>
    }

    semaphore = xSemaphoreCreateCounting(16, 0);
9000ea88:	2100      	movs	r1, #0
9000ea8a:	2010      	movs	r0, #16
9000ea8c:	f7fa fa23 	bl	90008ed6 <xQueueCreateCountingSemaphore>
9000ea90:	4603      	mov	r3, r0
9000ea92:	4a13      	ldr	r2, [pc, #76]	; (9000eae0 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0x104>)
9000ea94:	6013      	str	r3, [r2, #0]

    if(semaphore == nullptr) {
9000ea96:	4b12      	ldr	r3, [pc, #72]	; (9000eae0 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0x104>)
9000ea98:	681b      	ldr	r3, [r3, #0]
9000ea9a:	2b00      	cmp	r3, #0
9000ea9c:	d108      	bne.n	9000eab0 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0xd4>
        printf("[RoCo] [ROCANDriver] Unable to allocate semaphore for MCU#%" PRIu32 "\r\n", getSenderID(fdcan));
9000ea9e:	68b9      	ldr	r1, [r7, #8]
9000eaa0:	68f8      	ldr	r0, [r7, #12]
9000eaa2:	f000 fb27 	bl	9000f0f4 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef>
9000eaa6:	4603      	mov	r3, r0
9000eaa8:	4619      	mov	r1, r3
9000eaaa:	480e      	ldr	r0, [pc, #56]	; (9000eae4 <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm+0x108>)
9000eaac:	f002 ffce 	bl	90011a4c <iprintf>
    }
    setTickDelay(0);
9000eab0:	68fb      	ldr	r3, [r7, #12]
9000eab2:	3304      	adds	r3, #4
9000eab4:	2100      	movs	r1, #0
9000eab6:	4618      	mov	r0, r3
9000eab8:	f001 fb78 	bl	900101ac <_ZN6Thread12setTickDelayEm>
}
9000eabc:	68fb      	ldr	r3, [r7, #12]
9000eabe:	4618      	mov	r0, r3
9000eac0:	3710      	adds	r7, #16
9000eac2:	46bd      	mov	sp, r7
9000eac4:	bd80      	pop	{r7, pc}
9000eac6:	bf00      	nop
9000eac8:	90013ea4 	.word	0x90013ea4
9000eacc:	900143f0 	.word	0x900143f0
9000ead0:	90014410 	.word	0x90014410
9000ead4:	90013f34 	.word	0x90013f34
9000ead8:	24010438 	.word	0x24010438
9000eadc:	90013eb0 	.word	0x90013eb0
9000eae0:	2401043c 	.word	0x2401043c
9000eae4:	90013ef4 	.word	0x90013ef4

9000eae8 <_ZN11ROCANDriverD1Ev>:

ROCANDriver::~ROCANDriver() {
9000eae8:	b590      	push	{r4, r7, lr}
9000eaea:	b089      	sub	sp, #36	; 0x24
9000eaec:	af00      	add	r7, sp, #0
9000eaee:	6078      	str	r0, [r7, #4]
9000eaf0:	4a28      	ldr	r2, [pc, #160]	; (9000eb94 <_ZN11ROCANDriverD1Ev+0xac>)
9000eaf2:	687b      	ldr	r3, [r7, #4]
9000eaf4:	601a      	str	r2, [r3, #0]
9000eaf6:	4a28      	ldr	r2, [pc, #160]	; (9000eb98 <_ZN11ROCANDriverD1Ev+0xb0>)
9000eaf8:	687b      	ldr	r3, [r7, #4]
9000eafa:	605a      	str	r2, [r3, #4]
    vPortFree(TxData);
9000eafc:	687b      	ldr	r3, [r7, #4]
9000eafe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000eb02:	4618      	mov	r0, r3
9000eb04:	f7fc ff34 	bl	9000b970 <vPortFree>
    vPortFree(RxData);
9000eb08:	687b      	ldr	r3, [r7, #4]
9000eb0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000eb0c:	4618      	mov	r0, r3
9000eb0e:	f7fc ff2f 	bl	9000b970 <vPortFree>
    FDCANDriver_list.erase(std::remove(FDCANDriver_list.begin(), FDCANDriver_list.end(), this), FDCANDriver_list.end());
9000eb12:	4822      	ldr	r0, [pc, #136]	; (9000eb9c <_ZN11ROCANDriverD1Ev+0xb4>)
9000eb14:	f000 fb53 	bl	9000f1be <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>
9000eb18:	4604      	mov	r4, r0
9000eb1a:	4820      	ldr	r0, [pc, #128]	; (9000eb9c <_ZN11ROCANDriverD1Ev+0xb4>)
9000eb1c:	f000 fb5f 	bl	9000f1de <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
9000eb20:	4601      	mov	r1, r0
9000eb22:	687b      	ldr	r3, [r7, #4]
9000eb24:	617b      	str	r3, [r7, #20]
9000eb26:	f107 0314 	add.w	r3, r7, #20
9000eb2a:	461a      	mov	r2, r3
9000eb2c:	4620      	mov	r0, r4
9000eb2e:	f000 fb67 	bl	9000f200 <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_>
9000eb32:	4603      	mov	r3, r0
9000eb34:	613b      	str	r3, [r7, #16]
9000eb36:	f107 0210 	add.w	r2, r7, #16
9000eb3a:	f107 030c 	add.w	r3, r7, #12
9000eb3e:	4611      	mov	r1, r2
9000eb40:	4618      	mov	r0, r3
9000eb42:	f000 fb71 	bl	9000f228 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
9000eb46:	4815      	ldr	r0, [pc, #84]	; (9000eb9c <_ZN11ROCANDriverD1Ev+0xb4>)
9000eb48:	f000 fb49 	bl	9000f1de <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
9000eb4c:	4603      	mov	r3, r0
9000eb4e:	61fb      	str	r3, [r7, #28]
9000eb50:	f107 021c 	add.w	r2, r7, #28
9000eb54:	f107 0318 	add.w	r3, r7, #24
9000eb58:	4611      	mov	r1, r2
9000eb5a:	4618      	mov	r0, r3
9000eb5c:	f000 fb64 	bl	9000f228 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>
9000eb60:	69ba      	ldr	r2, [r7, #24]
9000eb62:	68f9      	ldr	r1, [r7, #12]
9000eb64:	480d      	ldr	r0, [pc, #52]	; (9000eb9c <_ZN11ROCANDriverD1Ev+0xb4>)
9000eb66:	f000 fb70 	bl	9000f24a <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_>
ROCANDriver::~ROCANDriver() {
9000eb6a:	687b      	ldr	r3, [r7, #4]
9000eb6c:	f203 7304 	addw	r3, r3, #1796	; 0x704
9000eb70:	4618      	mov	r0, r3
9000eb72:	f7fd f87d 	bl	9000bc70 <_ZNSt8functionIFvhPhmEED1Ev>
9000eb76:	687b      	ldr	r3, [r7, #4]
9000eb78:	3304      	adds	r3, #4
9000eb7a:	4618      	mov	r0, r3
9000eb7c:	f7ff ff0e 	bl	9000e99c <_ZN6ThreadD1Ev>
9000eb80:	687b      	ldr	r3, [r7, #4]
9000eb82:	4618      	mov	r0, r3
9000eb84:	f7fd f844 	bl	9000bc10 <_ZN8IODriverD1Ev>
}
9000eb88:	687b      	ldr	r3, [r7, #4]
9000eb8a:	4618      	mov	r0, r3
9000eb8c:	3724      	adds	r7, #36	; 0x24
9000eb8e:	46bd      	mov	sp, r7
9000eb90:	bd90      	pop	{r4, r7, pc}
9000eb92:	bf00      	nop
9000eb94:	900143f0 	.word	0x900143f0
9000eb98:	90014410 	.word	0x90014410
9000eb9c:	24010440 	.word	0x24010440

9000eba0 <_ZThn4_N11ROCANDriverD1Ev>:
//#define NB_UART_PORTS       8                   // CHANGE ONLY IF NEEDED

class ROCANDriver: public IODriver,  public Thread{
    public:
		ROCANDriver(FDCAN_HandleTypeDef* fdcan, uint32_t can_id); // Constructor
        virtual ~ROCANDriver(); // Destructor
9000eba0:	f1a0 0004 	sub.w	r0, r0, #4
9000eba4:	f7ff bfa0 	b.w	9000eae8 <_ZN11ROCANDriverD1Ev>

9000eba8 <_ZN11ROCANDriverD0Ev>:
ROCANDriver::~ROCANDriver() {
9000eba8:	b580      	push	{r7, lr}
9000ebaa:	b082      	sub	sp, #8
9000ebac:	af00      	add	r7, sp, #0
9000ebae:	6078      	str	r0, [r7, #4]
}
9000ebb0:	6878      	ldr	r0, [r7, #4]
9000ebb2:	f7ff ff99 	bl	9000eae8 <_ZN11ROCANDriverD1Ev>
9000ebb6:	f240 7114 	movw	r1, #1812	; 0x714
9000ebba:	6878      	ldr	r0, [r7, #4]
9000ebbc:	f001 fcf4 	bl	900105a8 <_ZdlPvj>
9000ebc0:	687b      	ldr	r3, [r7, #4]
9000ebc2:	4618      	mov	r0, r3
9000ebc4:	3708      	adds	r7, #8
9000ebc6:	46bd      	mov	sp, r7
9000ebc8:	bd80      	pop	{r7, pc}

9000ebca <_ZThn4_N11ROCANDriverD0Ev>:
9000ebca:	f1a0 0004 	sub.w	r0, r0, #4
9000ebce:	f7ff bfeb 	b.w	9000eba8 <_ZN11ROCANDriverD0Ev>
	...

9000ebd4 <_ZN11ROCANDriver4initEv>:

void ROCANDriver::init() {
9000ebd4:	b580      	push	{r7, lr}
9000ebd6:	b082      	sub	sp, #8
9000ebd8:	af00      	add	r7, sp, #0
9000ebda:	6078      	str	r0, [r7, #4]

	/* Configure Rx filter */
	if(fdcan == &hfdcan1){
9000ebdc:	687b      	ldr	r3, [r7, #4]
9000ebde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000ebe2:	4a07      	ldr	r2, [pc, #28]	; (9000ec00 <_ZN11ROCANDriver4initEv+0x2c>)
9000ebe4:	4293      	cmp	r3, r2
9000ebe6:	d101      	bne.n	9000ebec <_ZN11ROCANDriver4initEv+0x18>
			MX_FDCAN1_Init();
9000ebe8:	f7f1 fd64 	bl	900006b4 <MX_FDCAN1_Init>
	}
	filterConfig();
9000ebec:	6878      	ldr	r0, [r7, #4]
9000ebee:	f000 f80d 	bl	9000ec0c <_ZN11ROCANDriver12filterConfigEv>
	/* Start the FDCan line */
	start();
9000ebf2:	6878      	ldr	r0, [r7, #4]
9000ebf4:	f000 f8a8 	bl	9000ed48 <_ZN11ROCANDriver5startEv>
}
9000ebf8:	bf00      	nop
9000ebfa:	3708      	adds	r7, #8
9000ebfc:	46bd      	mov	sp, r7
9000ebfe:	bd80      	pop	{r7, pc}
9000ec00:	2400020c 	.word	0x2400020c

9000ec04 <_ZThn4_N11ROCANDriver4initEv>:
        uint8_t* getTxBuffer();

        xSemaphoreHandle getSemaphore();
        uint8_t getSenderID(FDCAN_HandleTypeDef* fdcan);

        void init();
9000ec04:	f1a0 0004 	sub.w	r0, r0, #4
9000ec08:	f7ff bfe4 	b.w	9000ebd4 <_ZN11ROCANDriver4initEv>

9000ec0c <_ZN11ROCANDriver12filterConfigEv>:

void ROCANDriver::filterConfig(){
9000ec0c:	b580      	push	{r7, lr}
9000ec0e:	b084      	sub	sp, #16
9000ec10:	af02      	add	r7, sp, #8
9000ec12:	6078      	str	r0, [r7, #4]

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
9000ec14:	687b      	ldr	r3, [r7, #4]
9000ec16:	2200      	movs	r2, #0
9000ec18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	sFilterConfig.FilterIndex = 0;
9000ec1c:	687b      	ldr	r3, [r7, #4]
9000ec1e:	2200      	movs	r2, #0
9000ec20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
9000ec24:	687b      	ldr	r3, [r7, #4]
9000ec26:	2202      	movs	r2, #2
9000ec28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
9000ec2c:	687b      	ldr	r3, [r7, #4]
9000ec2e:	2201      	movs	r2, #1
9000ec30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	sFilterConfig.FilterID1 = 0x0;
9000ec34:	687b      	ldr	r3, [r7, #4]
9000ec36:	2200      	movs	r2, #0
9000ec38:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	sFilterConfig.FilterID2 = 0x0;
9000ec3c:	687b      	ldr	r3, [r7, #4]
9000ec3e:	2200      	movs	r2, #0
9000ec40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	if(HAL_FDCAN_ConfigFilter(fdcan, &sFilterConfig) != HAL_OK)
9000ec44:	687b      	ldr	r3, [r7, #4]
9000ec46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
9000ec4a:	687b      	ldr	r3, [r7, #4]
9000ec4c:	339c      	adds	r3, #156	; 0x9c
9000ec4e:	4619      	mov	r1, r3
9000ec50:	4610      	mov	r0, r2
9000ec52:	f7f3 fc91 	bl	90002578 <HAL_FDCAN_ConfigFilter>
9000ec56:	4603      	mov	r3, r0
9000ec58:	2b00      	cmp	r3, #0
9000ec5a:	bf14      	ite	ne
9000ec5c:	2301      	movne	r3, #1
9000ec5e:	2300      	moveq	r3, #0
9000ec60:	b2db      	uxtb	r3, r3
9000ec62:	2b00      	cmp	r3, #0
9000ec64:	d002      	beq.n	9000ec6c <_ZN11ROCANDriver12filterConfigEv+0x60>
		printf("[RoCo] [ROCANDriverFilterConf] Unable to configure CAN RX filters");
9000ec66:	481c      	ldr	r0, [pc, #112]	; (9000ecd8 <_ZN11ROCANDriver12filterConfigEv+0xcc>)
9000ec68:	f002 fef0 	bl	90011a4c <iprintf>


	HAL_FDCAN_ConfigGlobalFilter(fdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
9000ec6c:	687b      	ldr	r3, [r7, #4]
9000ec6e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
9000ec72:	2300      	movs	r3, #0
9000ec74:	9300      	str	r3, [sp, #0]
9000ec76:	2300      	movs	r3, #0
9000ec78:	2202      	movs	r2, #2
9000ec7a:	2102      	movs	r1, #2
9000ec7c:	f7f3 fcf2 	bl	90002664 <HAL_FDCAN_ConfigGlobalFilter>
	HAL_FDCAN_ActivateNotification(fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
9000ec80:	687b      	ldr	r3, [r7, #4]
9000ec82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000ec86:	2200      	movs	r2, #0
9000ec88:	2101      	movs	r1, #1
9000ec8a:	4618      	mov	r0, r3
9000ec8c:	f7f3 ff52 	bl	90002b34 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(fdcan, FDCAN_IT_BUS_OFF, 0);
9000ec90:	687b      	ldr	r3, [r7, #4]
9000ec92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000ec96:	2200      	movs	r2, #0
9000ec98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
9000ec9c:	4618      	mov	r0, r3
9000ec9e:	f7f3 ff49 	bl	90002b34 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ConfigTxDelayCompensation(fdcan, fdcan->Init.DataPrescaler * fdcan->Init.DataTimeSeg1, 0);
9000eca2:	687b      	ldr	r3, [r7, #4]
9000eca4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
9000eca8:	687b      	ldr	r3, [r7, #4]
9000ecaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000ecae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ecb0:	687a      	ldr	r2, [r7, #4]
9000ecb2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
9000ecb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000ecb8:	fb02 f303 	mul.w	r3, r2, r3
9000ecbc:	2200      	movs	r2, #0
9000ecbe:	4619      	mov	r1, r3
9000ecc0:	f7f3 fcfd 	bl	900026be <HAL_FDCAN_ConfigTxDelayCompensation>
	HAL_FDCAN_EnableTxDelayCompensation(fdcan);
9000ecc4:	687b      	ldr	r3, [r7, #4]
9000ecc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000ecca:	4618      	mov	r0, r3
9000eccc:	f7f3 fd1b 	bl	90002706 <HAL_FDCAN_EnableTxDelayCompensation>

}
9000ecd0:	bf00      	nop
9000ecd2:	3708      	adds	r7, #8
9000ecd4:	46bd      	mov	sp, r7
9000ecd6:	bd80      	pop	{r7, pc}
9000ecd8:	90013f3c 	.word	0x90013f3c

9000ecdc <_ZN11ROCANDriver14TxHeaderConfigEmm>:

void ROCANDriver::TxHeaderConfig(uint32_t can_id, uint32_t DataLength){
9000ecdc:	b480      	push	{r7}
9000ecde:	b085      	sub	sp, #20
9000ece0:	af00      	add	r7, sp, #0
9000ece2:	60f8      	str	r0, [r7, #12]
9000ece4:	60b9      	str	r1, [r7, #8]
9000ece6:	607a      	str	r2, [r7, #4]
	TxHeader.Identifier = can_id;
9000ece8:	68fb      	ldr	r3, [r7, #12]
9000ecea:	68ba      	ldr	r2, [r7, #8]
9000ecec:	669a      	str	r2, [r3, #104]	; 0x68
	TxHeader.IdType = FDCAN_EXTENDED_ID;
9000ecee:	68fb      	ldr	r3, [r7, #12]
9000ecf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
9000ecf4:	66da      	str	r2, [r3, #108]	; 0x6c
	if(can_id < 0x800) {
9000ecf6:	68bb      	ldr	r3, [r7, #8]
9000ecf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9000ecfc:	d202      	bcs.n	9000ed04 <_ZN11ROCANDriver14TxHeaderConfigEmm+0x28>
		TxHeader.IdType = FDCAN_STANDARD_ID;
9000ecfe:	68fb      	ldr	r3, [r7, #12]
9000ed00:	2200      	movs	r2, #0
9000ed02:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
9000ed04:	68fb      	ldr	r3, [r7, #12]
9000ed06:	2200      	movs	r2, #0
9000ed08:	671a      	str	r2, [r3, #112]	; 0x70
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
9000ed0a:	68fb      	ldr	r3, [r7, #12]
9000ed0c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
9000ed10:	675a      	str	r2, [r3, #116]	; 0x74
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
9000ed12:	68fb      	ldr	r3, [r7, #12]
9000ed14:	2200      	movs	r2, #0
9000ed16:	679a      	str	r2, [r3, #120]	; 0x78
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
9000ed18:	68fb      	ldr	r3, [r7, #12]
9000ed1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
9000ed1e:	67da      	str	r2, [r3, #124]	; 0x7c
	TxHeader.FDFormat = FDCAN_FD_CAN;
9000ed20:	68fb      	ldr	r3, [r7, #12]
9000ed22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
9000ed26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
9000ed2a:	68fb      	ldr	r3, [r7, #12]
9000ed2c:	2200      	movs	r2, #0
9000ed2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TxHeader.MessageMarker = 0;
9000ed32:	68fb      	ldr	r3, [r7, #12]
9000ed34:	2200      	movs	r2, #0
9000ed36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
9000ed3a:	bf00      	nop
9000ed3c:	3714      	adds	r7, #20
9000ed3e:	46bd      	mov	sp, r7
9000ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ed44:	4770      	bx	lr
	...

9000ed48 <_ZN11ROCANDriver5startEv>:

void ROCANDriver::start(){
9000ed48:	b580      	push	{r7, lr}
9000ed4a:	b082      	sub	sp, #8
9000ed4c:	af00      	add	r7, sp, #0
9000ed4e:	6078      	str	r0, [r7, #4]
	if(HAL_FDCAN_Start(fdcan) != HAL_OK)
9000ed50:	687b      	ldr	r3, [r7, #4]
9000ed52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000ed56:	4618      	mov	r0, r3
9000ed58:	f7f3 fcf8 	bl	9000274c <HAL_FDCAN_Start>
9000ed5c:	4603      	mov	r3, r0
9000ed5e:	2b00      	cmp	r3, #0
9000ed60:	bf14      	ite	ne
9000ed62:	2301      	movne	r3, #1
9000ed64:	2300      	moveq	r3, #0
9000ed66:	b2db      	uxtb	r3, r3
9000ed68:	2b00      	cmp	r3, #0
9000ed6a:	d002      	beq.n	9000ed72 <_ZN11ROCANDriver5startEv+0x2a>
		printf("[RoCo] [ROCANDriverStart] Couldn't start FDCAN module");
9000ed6c:	4803      	ldr	r0, [pc, #12]	; (9000ed7c <_ZN11ROCANDriver5startEv+0x34>)
9000ed6e:	f002 fe6d 	bl	90011a4c <iprintf>

}
9000ed72:	bf00      	nop
9000ed74:	3708      	adds	r7, #8
9000ed76:	46bd      	mov	sp, r7
9000ed78:	bd80      	pop	{r7, pc}
9000ed7a:	bf00      	nop
9000ed7c:	90013f80 	.word	0x90013f80

9000ed80 <_ZN11ROCANDriver4loopEv>:


void ROCANDriver::loop() {
9000ed80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000ed84:	b087      	sub	sp, #28
9000ed86:	af00      	add	r7, sp, #0
9000ed88:	6078      	str	r0, [r7, #4]
	if(xSemaphoreTake(semaphore, portMAX_DELAY)) {
9000ed8a:	4b3c      	ldr	r3, [pc, #240]	; (9000ee7c <_ZN11ROCANDriver4loopEv+0xfc>)
9000ed8c:	681b      	ldr	r3, [r3, #0]
9000ed8e:	f04f 31ff 	mov.w	r1, #4294967295
9000ed92:	4618      	mov	r0, r3
9000ed94:	f7fa fbd8 	bl	90009548 <xQueueSemaphoreTake>
9000ed98:	4603      	mov	r3, r0
9000ed9a:	2b00      	cmp	r3, #0
9000ed9c:	bf14      	ite	ne
9000ed9e:	2301      	movne	r3, #1
9000eda0:	2300      	moveq	r3, #0
9000eda2:	b2db      	uxtb	r3, r3
9000eda4:	2b00      	cmp	r3, #0
9000eda6:	d064      	beq.n	9000ee72 <_ZN11ROCANDriver4loopEv+0xf2>
//		uint32_t end_dma_index = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);

		uint8_t sender = getSenderID(fdcan);
9000eda8:	687b      	ldr	r3, [r7, #4]
9000edaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000edae:	4619      	mov	r1, r3
9000edb0:	6878      	ldr	r0, [r7, #4]
9000edb2:	f000 f99f 	bl	9000f0f4 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef>
9000edb6:	4603      	mov	r3, r0
9000edb8:	74fb      	strb	r3, [r7, #19]
			HAL_FDCAN_GetRxMessage(fdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
			uint8_t buffer2[RxData[0]];
			for(int i = 0; i < (RxData[0]); ++i)
				buffer2[i] = RxData[i+1];
			receiveFDCan(sender, buffer2, RxData[0]);
			printf("nothing of interest");
9000edba:	466b      	mov	r3, sp
9000edbc:	461e      	mov	r6, r3
			HAL_FDCAN_GetRxMessage(fdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
9000edbe:	687b      	ldr	r3, [r7, #4]
9000edc0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
9000edc4:	687b      	ldr	r3, [r7, #4]
9000edc6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
9000edca:	687b      	ldr	r3, [r7, #4]
9000edcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000edce:	2140      	movs	r1, #64	; 0x40
9000edd0:	f7f3 fd42 	bl	90002858 <HAL_FDCAN_GetRxMessage>
			uint8_t buffer2[RxData[0]];
9000edd4:	687b      	ldr	r3, [r7, #4]
9000edd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000edd8:	781b      	ldrb	r3, [r3, #0]
9000edda:	1e59      	subs	r1, r3, #1
9000eddc:	60f9      	str	r1, [r7, #12]
9000edde:	460b      	mov	r3, r1
9000ede0:	3301      	adds	r3, #1
9000ede2:	2200      	movs	r2, #0
9000ede4:	4698      	mov	r8, r3
9000ede6:	4691      	mov	r9, r2
9000ede8:	f04f 0200 	mov.w	r2, #0
9000edec:	f04f 0300 	mov.w	r3, #0
9000edf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
9000edf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
9000edf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
9000edfc:	460b      	mov	r3, r1
9000edfe:	3301      	adds	r3, #1
9000ee00:	2200      	movs	r2, #0
9000ee02:	461c      	mov	r4, r3
9000ee04:	4615      	mov	r5, r2
9000ee06:	f04f 0200 	mov.w	r2, #0
9000ee0a:	f04f 0300 	mov.w	r3, #0
9000ee0e:	00eb      	lsls	r3, r5, #3
9000ee10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
9000ee14:	00e2      	lsls	r2, r4, #3
9000ee16:	460b      	mov	r3, r1
9000ee18:	3301      	adds	r3, #1
9000ee1a:	3307      	adds	r3, #7
9000ee1c:	08db      	lsrs	r3, r3, #3
9000ee1e:	00db      	lsls	r3, r3, #3
9000ee20:	ebad 0d03 	sub.w	sp, sp, r3
9000ee24:	466b      	mov	r3, sp
9000ee26:	3300      	adds	r3, #0
9000ee28:	60bb      	str	r3, [r7, #8]
			for(int i = 0; i < (RxData[0]); ++i)
9000ee2a:	2300      	movs	r3, #0
9000ee2c:	617b      	str	r3, [r7, #20]
9000ee2e:	687b      	ldr	r3, [r7, #4]
9000ee30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ee32:	781b      	ldrb	r3, [r3, #0]
9000ee34:	461a      	mov	r2, r3
9000ee36:	697b      	ldr	r3, [r7, #20]
9000ee38:	4293      	cmp	r3, r2
9000ee3a:	da0e      	bge.n	9000ee5a <_ZN11ROCANDriver4loopEv+0xda>
				buffer2[i] = RxData[i+1];
9000ee3c:	687b      	ldr	r3, [r7, #4]
9000ee3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
9000ee40:	697b      	ldr	r3, [r7, #20]
9000ee42:	3301      	adds	r3, #1
9000ee44:	4413      	add	r3, r2
9000ee46:	7819      	ldrb	r1, [r3, #0]
9000ee48:	68ba      	ldr	r2, [r7, #8]
9000ee4a:	697b      	ldr	r3, [r7, #20]
9000ee4c:	4413      	add	r3, r2
9000ee4e:	460a      	mov	r2, r1
9000ee50:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < (RxData[0]); ++i)
9000ee52:	697b      	ldr	r3, [r7, #20]
9000ee54:	3301      	adds	r3, #1
9000ee56:	617b      	str	r3, [r7, #20]
9000ee58:	e7e9      	b.n	9000ee2e <_ZN11ROCANDriver4loopEv+0xae>
			receiveFDCan(sender, buffer2, RxData[0]);
9000ee5a:	687b      	ldr	r3, [r7, #4]
9000ee5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ee5e:	781b      	ldrb	r3, [r3, #0]
9000ee60:	7cf9      	ldrb	r1, [r7, #19]
9000ee62:	68ba      	ldr	r2, [r7, #8]
9000ee64:	6878      	ldr	r0, [r7, #4]
9000ee66:	f000 f897 	bl	9000ef98 <_ZN11ROCANDriver12receiveFDCanEhPhm>
			printf("nothing of interest");
9000ee6a:	4805      	ldr	r0, [pc, #20]	; (9000ee80 <_ZN11ROCANDriver4loopEv+0x100>)
9000ee6c:	f002 fdee 	bl	90011a4c <iprintf>
9000ee70:	46b5      	mov	sp, r6
		}
	}
}
9000ee72:	bf00      	nop
9000ee74:	371c      	adds	r7, #28
9000ee76:	46bd      	mov	sp, r7
9000ee78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000ee7c:	2401043c 	.word	0x2401043c
9000ee80:	90013fb8 	.word	0x90013fb8

9000ee84 <_ZThn4_N11ROCANDriver4loopEv>:
        void loop();
9000ee84:	f1a0 0004 	sub.w	r0, r0, #4
9000ee88:	f7ff bf7a 	b.w	9000ed80 <_ZN11ROCANDriver4loopEv>

9000ee8c <_ZN11ROCANDriver7receiveERKSt8functionIFvhPhmEE>:

void ROCANDriver::receive(const std::function<void (uint8_t sender_id, uint8_t* buffer, uint32_t length)> &receiver) {
9000ee8c:	b580      	push	{r7, lr}
9000ee8e:	b082      	sub	sp, #8
9000ee90:	af00      	add	r7, sp, #0
9000ee92:	6078      	str	r0, [r7, #4]
9000ee94:	6039      	str	r1, [r7, #0]
    this->receiver_func = receiver;
9000ee96:	687b      	ldr	r3, [r7, #4]
9000ee98:	f203 7304 	addw	r3, r3, #1796	; 0x704
9000ee9c:	6839      	ldr	r1, [r7, #0]
9000ee9e:	4618      	mov	r0, r3
9000eea0:	f7fc fef3 	bl	9000bc8a <_ZNSt8functionIFvhPhmEEaSERKS2_>
}
9000eea4:	bf00      	nop
9000eea6:	3708      	adds	r7, #8
9000eea8:	46bd      	mov	sp, r7
9000eeaa:	bd80      	pop	{r7, pc}

9000eeac <_ZN11ROCANDriver8transmitEPhm>:

void ROCANDriver::transmit(uint8_t* buffer, uint32_t length) {
9000eeac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000eeb0:	b089      	sub	sp, #36	; 0x24
9000eeb2:	af00      	add	r7, sp, #0
9000eeb4:	60f8      	str	r0, [r7, #12]
9000eeb6:	60b9      	str	r1, [r7, #8]
9000eeb8:	607a      	str	r2, [r7, #4]
        printf("[RoCo] [ROCANDriverTransmit] Transmission failed for MCU#%" PRIu32 "\r\n", getSenderID(fdcan));
//		memcpy(&fdcan1_send_fail.TxHeader[fdcan_send_fail.index], &TxHeader, sizeof(FDCAN_TxHeaderTypeDef));
//		memcpy(&fdcan1_send_fail.TxHeader[TX_BUFFER_SIZE*fdcan_send_fail.index], tx_data, can_dlc2len(DataLength));
//		fdcan1_send_fail.index = (fdcan1_send_fail.index + 1) & 0x0F;
//		fdcan1_send_fail.flag = 1;
	}
9000eeba:	466b      	mov	r3, sp
9000eebc:	461e      	mov	r6, r3
	TxHeaderConfig(0x123, length);
9000eebe:	687a      	ldr	r2, [r7, #4]
9000eec0:	f240 1123 	movw	r1, #291	; 0x123
9000eec4:	68f8      	ldr	r0, [r7, #12]
9000eec6:	f7ff ff09 	bl	9000ecdc <_ZN11ROCANDriver14TxHeaderConfigEmm>
	uint8_t buffer2[RxData[0]];
9000eeca:	68fb      	ldr	r3, [r7, #12]
9000eecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000eece:	781b      	ldrb	r3, [r3, #0]
9000eed0:	1e59      	subs	r1, r3, #1
9000eed2:	61b9      	str	r1, [r7, #24]
9000eed4:	460b      	mov	r3, r1
9000eed6:	3301      	adds	r3, #1
9000eed8:	2200      	movs	r2, #0
9000eeda:	4698      	mov	r8, r3
9000eedc:	4691      	mov	r9, r2
9000eede:	f04f 0200 	mov.w	r2, #0
9000eee2:	f04f 0300 	mov.w	r3, #0
9000eee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
9000eeea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
9000eeee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
9000eef2:	460b      	mov	r3, r1
9000eef4:	3301      	adds	r3, #1
9000eef6:	2200      	movs	r2, #0
9000eef8:	461c      	mov	r4, r3
9000eefa:	4615      	mov	r5, r2
9000eefc:	f04f 0200 	mov.w	r2, #0
9000ef00:	f04f 0300 	mov.w	r3, #0
9000ef04:	00eb      	lsls	r3, r5, #3
9000ef06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
9000ef0a:	00e2      	lsls	r2, r4, #3
9000ef0c:	460b      	mov	r3, r1
9000ef0e:	3301      	adds	r3, #1
9000ef10:	3307      	adds	r3, #7
9000ef12:	08db      	lsrs	r3, r3, #3
9000ef14:	00db      	lsls	r3, r3, #3
9000ef16:	ebad 0d03 	sub.w	sp, sp, r3
9000ef1a:	466b      	mov	r3, sp
9000ef1c:	3300      	adds	r3, #0
9000ef1e:	617b      	str	r3, [r7, #20]
	buffer2[0] = length;
9000ef20:	687b      	ldr	r3, [r7, #4]
9000ef22:	b2da      	uxtb	r2, r3
9000ef24:	697b      	ldr	r3, [r7, #20]
9000ef26:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; ++i)
9000ef28:	2300      	movs	r3, #0
9000ef2a:	61fb      	str	r3, [r7, #28]
9000ef2c:	69fb      	ldr	r3, [r7, #28]
9000ef2e:	687a      	ldr	r2, [r7, #4]
9000ef30:	429a      	cmp	r2, r3
9000ef32:	d90b      	bls.n	9000ef4c <_ZN11ROCANDriver8transmitEPhm+0xa0>
		buffer2[i+1] = buffer[i];
9000ef34:	69fb      	ldr	r3, [r7, #28]
9000ef36:	68ba      	ldr	r2, [r7, #8]
9000ef38:	441a      	add	r2, r3
9000ef3a:	69fb      	ldr	r3, [r7, #28]
9000ef3c:	3301      	adds	r3, #1
9000ef3e:	7811      	ldrb	r1, [r2, #0]
9000ef40:	697a      	ldr	r2, [r7, #20]
9000ef42:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; ++i)
9000ef44:	69fb      	ldr	r3, [r7, #28]
9000ef46:	3301      	adds	r3, #1
9000ef48:	61fb      	str	r3, [r7, #28]
9000ef4a:	e7ef      	b.n	9000ef2c <_ZN11ROCANDriver8transmitEPhm+0x80>
	if(HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &TxHeader, buffer2) != HAL_OK) {
9000ef4c:	68fb      	ldr	r3, [r7, #12]
9000ef4e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
9000ef52:	68fb      	ldr	r3, [r7, #12]
9000ef54:	3368      	adds	r3, #104	; 0x68
9000ef56:	697a      	ldr	r2, [r7, #20]
9000ef58:	4619      	mov	r1, r3
9000ef5a:	f7f3 fc22 	bl	900027a2 <HAL_FDCAN_AddMessageToTxFifoQ>
9000ef5e:	4603      	mov	r3, r0
9000ef60:	2b00      	cmp	r3, #0
9000ef62:	bf14      	ite	ne
9000ef64:	2301      	movne	r3, #1
9000ef66:	2300      	moveq	r3, #0
9000ef68:	b2db      	uxtb	r3, r3
9000ef6a:	2b00      	cmp	r3, #0
9000ef6c:	d00b      	beq.n	9000ef86 <_ZN11ROCANDriver8transmitEPhm+0xda>
        printf("[RoCo] [ROCANDriverTransmit] Transmission failed for MCU#%" PRIu32 "\r\n", getSenderID(fdcan));
9000ef6e:	68fb      	ldr	r3, [r7, #12]
9000ef70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000ef74:	4619      	mov	r1, r3
9000ef76:	68f8      	ldr	r0, [r7, #12]
9000ef78:	f000 f8bc 	bl	9000f0f4 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef>
9000ef7c:	4603      	mov	r3, r0
9000ef7e:	4619      	mov	r1, r3
9000ef80:	4804      	ldr	r0, [pc, #16]	; (9000ef94 <_ZN11ROCANDriver8transmitEPhm+0xe8>)
9000ef82:	f002 fd63 	bl	90011a4c <iprintf>
9000ef86:	46b5      	mov	sp, r6
//        printf("[RoCo] [STMUARTDriverTransmit] Transmission failed for MCU#%" PRIu32 "\r\n", getSenderID(huart));
//    }
//	#ifdef BUILD_WITH_CACHES
//		SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)buffer) & ~(uint32_t)0x1F), UART_BUFFER_SIZE+32);
//	#endif
}
9000ef88:	bf00      	nop
9000ef8a:	3724      	adds	r7, #36	; 0x24
9000ef8c:	46bd      	mov	sp, r7
9000ef8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000ef92:	bf00      	nop
9000ef94:	90013fcc 	.word	0x90013fcc

9000ef98 <_ZN11ROCANDriver12receiveFDCanEhPhm>:
 *
 * @param sender_id the ID of the MCU
 * @param buffer the buffer to provide to the user-defined callback function
 * @param length the size of the data in the buffer to provide
 */
void ROCANDriver::receiveFDCan(uint8_t sender_id, uint8_t* buffer, uint32_t length) {
9000ef98:	b580      	push	{r7, lr}
9000ef9a:	b084      	sub	sp, #16
9000ef9c:	af00      	add	r7, sp, #0
9000ef9e:	60f8      	str	r0, [r7, #12]
9000efa0:	607a      	str	r2, [r7, #4]
9000efa2:	603b      	str	r3, [r7, #0]
9000efa4:	460b      	mov	r3, r1
9000efa6:	72fb      	strb	r3, [r7, #11]
	this->receiver_func(sender_id, buffer, length);
9000efa8:	68fb      	ldr	r3, [r7, #12]
9000efaa:	f203 7004 	addw	r0, r3, #1796	; 0x704
9000efae:	7af9      	ldrb	r1, [r7, #11]
9000efb0:	683b      	ldr	r3, [r7, #0]
9000efb2:	687a      	ldr	r2, [r7, #4]
9000efb4:	f7fc fe84 	bl	9000bcc0 <_ZNKSt8functionIFvhPhmEEclEhS0_m>
}
9000efb8:	bf00      	nop
9000efba:	3710      	adds	r7, #16
9000efbc:	46bd      	mov	sp, r7
9000efbe:	bd80      	pop	{r7, pc}

9000efc0 <_ZN11ROCANDriver8getFDCanEv>:

FDCAN_HandleTypeDef* ROCANDriver::getFDCan() {
9000efc0:	b480      	push	{r7}
9000efc2:	b083      	sub	sp, #12
9000efc4:	af00      	add	r7, sp, #0
9000efc6:	6078      	str	r0, [r7, #4]
	return this->fdcan;
9000efc8:	687b      	ldr	r3, [r7, #4]
9000efca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
9000efce:	4618      	mov	r0, r3
9000efd0:	370c      	adds	r7, #12
9000efd2:	46bd      	mov	sp, r7
9000efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000efd8:	4770      	bx	lr
	...

9000efdc <HAL_FDCAN_RxFifo0Callback>:

//
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
9000efdc:	b580      	push	{r7, lr}
9000efde:	b084      	sub	sp, #16
9000efe0:	af00      	add	r7, sp, #0
9000efe2:	6078      	str	r0, [r7, #4]
9000efe4:	6039      	str	r1, [r7, #0]
	ROCANDriver* driver = instance->getInstance(hfdcan);
9000efe6:	4b09      	ldr	r3, [pc, #36]	; (9000f00c <HAL_FDCAN_RxFifo0Callback+0x30>)
9000efe8:	681b      	ldr	r3, [r3, #0]
9000efea:	6879      	ldr	r1, [r7, #4]
9000efec:	4618      	mov	r0, r3
9000efee:	f000 f841 	bl	9000f074 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef>
9000eff2:	60f8      	str	r0, [r7, #12]
	xSemaphoreGiveFromISR(driver->getSemaphore(), nullptr);
9000eff4:	68f8      	ldr	r0, [r7, #12]
9000eff6:	f000 f8a1 	bl	9000f13c <_ZN11ROCANDriver12getSemaphoreEv>
9000effa:	4603      	mov	r3, r0
9000effc:	2100      	movs	r1, #0
9000effe:	4618      	mov	r0, r3
9000f000:	f7fa f935 	bl	9000926e <xQueueGiveFromISR>
}
9000f004:	bf00      	nop
9000f006:	3710      	adds	r7, #16
9000f008:	46bd      	mov	sp, r7
9000f00a:	bd80      	pop	{r7, pc}
9000f00c:	24010438 	.word	0x24010438

9000f010 <HAL_FDCAN_ErrorStatusCallback>:
//	xSemaphoreGiveFromISR(driver->getSemaphore(), nullptr);
//}
//

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
9000f010:	b580      	push	{r7, lr}
9000f012:	b084      	sub	sp, #16
9000f014:	af00      	add	r7, sp, #0
9000f016:	6078      	str	r0, [r7, #4]
9000f018:	6039      	str	r1, [r7, #0]
	if(hfdcan == &hfdcan1){
9000f01a:	687b      	ldr	r3, [r7, #4]
9000f01c:	4a13      	ldr	r2, [pc, #76]	; (9000f06c <HAL_FDCAN_ErrorStatusCallback+0x5c>)
9000f01e:	4293      	cmp	r3, r2
9000f020:	d11f      	bne.n	9000f062 <HAL_FDCAN_ErrorStatusCallback+0x52>
		MX_FDCAN1_Init();
9000f022:	f7f1 fb47 	bl	900006b4 <MX_FDCAN1_Init>
		ROCANDriver* driver = instance->getInstance(hfdcan);
9000f026:	4b12      	ldr	r3, [pc, #72]	; (9000f070 <HAL_FDCAN_ErrorStatusCallback+0x60>)
9000f028:	681b      	ldr	r3, [r3, #0]
9000f02a:	6879      	ldr	r1, [r7, #4]
9000f02c:	4618      	mov	r0, r3
9000f02e:	f000 f821 	bl	9000f074 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef>
9000f032:	60f8      	str	r0, [r7, #12]
		while(xSemaphoreTakeFromISR(driver->getSemaphore(), nullptr)); // Clear semaphore
9000f034:	68f8      	ldr	r0, [r7, #12]
9000f036:	f000 f881 	bl	9000f13c <_ZN11ROCANDriver12getSemaphoreEv>
9000f03a:	4603      	mov	r3, r0
9000f03c:	2200      	movs	r2, #0
9000f03e:	2100      	movs	r1, #0
9000f040:	4618      	mov	r0, r3
9000f042:	f7fa fb8d 	bl	90009760 <xQueueReceiveFromISR>
9000f046:	4603      	mov	r3, r0
9000f048:	2b00      	cmp	r3, #0
9000f04a:	bf14      	ite	ne
9000f04c:	2301      	movne	r3, #1
9000f04e:	2300      	moveq	r3, #0
9000f050:	b2db      	uxtb	r3, r3
9000f052:	2b00      	cmp	r3, #0
9000f054:	d000      	beq.n	9000f058 <HAL_FDCAN_ErrorStatusCallback+0x48>
9000f056:	e7ed      	b.n	9000f034 <HAL_FDCAN_ErrorStatusCallback+0x24>
		instance->filterConfig();
9000f058:	4b05      	ldr	r3, [pc, #20]	; (9000f070 <HAL_FDCAN_ErrorStatusCallback+0x60>)
9000f05a:	681b      	ldr	r3, [r3, #0]
9000f05c:	4618      	mov	r0, r3
9000f05e:	f7ff fdd5 	bl	9000ec0c <_ZN11ROCANDriver12filterConfigEv>
	} else {
//		MX_FDCAN2_Init();
//		filterConfig();
	}
}
9000f062:	bf00      	nop
9000f064:	3710      	adds	r7, #16
9000f066:	46bd      	mov	sp, r7
9000f068:	bd80      	pop	{r7, pc}
9000f06a:	bf00      	nop
9000f06c:	2400020c 	.word	0x2400020c
9000f070:	24010438 	.word	0x24010438

9000f074 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef>:

ROCANDriver* ROCANDriver::getInstance(FDCAN_HandleTypeDef* fdcan) {
9000f074:	b580      	push	{r7, lr}
9000f076:	b086      	sub	sp, #24
9000f078:	af00      	add	r7, sp, #0
9000f07a:	6078      	str	r0, [r7, #4]
9000f07c:	6039      	str	r1, [r7, #0]
	for (auto & driver : FDCANDriver_list) {
9000f07e:	4b1c      	ldr	r3, [pc, #112]	; (9000f0f0 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x7c>)
9000f080:	617b      	str	r3, [r7, #20]
9000f082:	6978      	ldr	r0, [r7, #20]
9000f084:	f000 f89b 	bl	9000f1be <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>
9000f088:	4603      	mov	r3, r0
9000f08a:	60fb      	str	r3, [r7, #12]
9000f08c:	6978      	ldr	r0, [r7, #20]
9000f08e:	f000 f8a6 	bl	9000f1de <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
9000f092:	4603      	mov	r3, r0
9000f094:	60bb      	str	r3, [r7, #8]
9000f096:	f107 0208 	add.w	r2, r7, #8
9000f09a:	f107 030c 	add.w	r3, r7, #12
9000f09e:	4611      	mov	r1, r2
9000f0a0:	4618      	mov	r0, r3
9000f0a2:	f000 f90b 	bl	9000f2bc <_ZN9__gnu_cxxneIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
9000f0a6:	4603      	mov	r3, r0
9000f0a8:	2b00      	cmp	r3, #0
9000f0aa:	d01c      	beq.n	9000f0e6 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x72>
9000f0ac:	f107 030c 	add.w	r3, r7, #12
9000f0b0:	4618      	mov	r0, r3
9000f0b2:	f000 f92b 	bl	9000f30c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
9000f0b6:	6138      	str	r0, [r7, #16]
		if (driver->getFDCan() == fdcan)
9000f0b8:	693b      	ldr	r3, [r7, #16]
9000f0ba:	681b      	ldr	r3, [r3, #0]
9000f0bc:	4618      	mov	r0, r3
9000f0be:	f7ff ff7f 	bl	9000efc0 <_ZN11ROCANDriver8getFDCanEv>
9000f0c2:	4602      	mov	r2, r0
9000f0c4:	683b      	ldr	r3, [r7, #0]
9000f0c6:	4293      	cmp	r3, r2
9000f0c8:	bf0c      	ite	eq
9000f0ca:	2301      	moveq	r3, #1
9000f0cc:	2300      	movne	r3, #0
9000f0ce:	b2db      	uxtb	r3, r3
9000f0d0:	2b00      	cmp	r3, #0
9000f0d2:	d002      	beq.n	9000f0da <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x66>
			return driver;
9000f0d4:	693b      	ldr	r3, [r7, #16]
9000f0d6:	681b      	ldr	r3, [r3, #0]
9000f0d8:	e005      	b.n	9000f0e6 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x72>
	for (auto & driver : FDCANDriver_list) {
9000f0da:	f107 030c 	add.w	r3, r7, #12
9000f0de:	4618      	mov	r0, r3
9000f0e0:	f000 f904 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
9000f0e4:	e7d7      	b.n	9000f096 <_ZN11ROCANDriver11getInstanceEP19FDCAN_HandleTypeDef+0x22>
	}
}
9000f0e6:	4618      	mov	r0, r3
9000f0e8:	3718      	adds	r7, #24
9000f0ea:	46bd      	mov	sp, r7
9000f0ec:	bd80      	pop	{r7, pc}
9000f0ee:	bf00      	nop
9000f0f0:	24010440 	.word	0x24010440

9000f0f4 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef>:
 * @brief Get the sender id from the USART port ID
 *
 * @param huart the USART port to get
 * @return uint8_t the sender_id
 */
uint8_t ROCANDriver::getSenderID(FDCAN_HandleTypeDef* fdcan) {
9000f0f4:	b480      	push	{r7}
9000f0f6:	b085      	sub	sp, #20
9000f0f8:	af00      	add	r7, sp, #0
9000f0fa:	6078      	str	r0, [r7, #4]
9000f0fc:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < NB_CAN_PORTS; ++i){
9000f0fe:	2300      	movs	r3, #0
9000f100:	60fb      	str	r3, [r7, #12]
9000f102:	68fb      	ldr	r3, [r7, #12]
9000f104:	2b01      	cmp	r3, #1
9000f106:	dc12      	bgt.n	9000f12e <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef+0x3a>
        if(this->mapper[i] == fdcan->Instance){
9000f108:	687a      	ldr	r2, [r7, #4]
9000f10a:	68fb      	ldr	r3, [r7, #12]
9000f10c:	3324      	adds	r3, #36	; 0x24
9000f10e:	009b      	lsls	r3, r3, #2
9000f110:	4413      	add	r3, r2
9000f112:	685a      	ldr	r2, [r3, #4]
9000f114:	683b      	ldr	r3, [r7, #0]
9000f116:	681b      	ldr	r3, [r3, #0]
9000f118:	429a      	cmp	r2, r3
9000f11a:	d104      	bne.n	9000f126 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef+0x32>
            return i+1;
9000f11c:	68fb      	ldr	r3, [r7, #12]
9000f11e:	b2db      	uxtb	r3, r3
9000f120:	3301      	adds	r3, #1
9000f122:	b2db      	uxtb	r3, r3
9000f124:	e004      	b.n	9000f130 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef+0x3c>
    for(int i = 0; i < NB_CAN_PORTS; ++i){
9000f126:	68fb      	ldr	r3, [r7, #12]
9000f128:	3301      	adds	r3, #1
9000f12a:	60fb      	str	r3, [r7, #12]
9000f12c:	e7e9      	b.n	9000f102 <_ZN11ROCANDriver11getSenderIDEP19FDCAN_HandleTypeDef+0xe>
        }
    }
    return 0;
9000f12e:	2300      	movs	r3, #0
}
9000f130:	4618      	mov	r0, r3
9000f132:	3714      	adds	r7, #20
9000f134:	46bd      	mov	sp, r7
9000f136:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f13a:	4770      	bx	lr

9000f13c <_ZN11ROCANDriver12getSemaphoreEv>:


xSemaphoreHandle ROCANDriver::getSemaphore() {
9000f13c:	b480      	push	{r7}
9000f13e:	b083      	sub	sp, #12
9000f140:	af00      	add	r7, sp, #0
9000f142:	6078      	str	r0, [r7, #4]
	return semaphore;
9000f144:	4b03      	ldr	r3, [pc, #12]	; (9000f154 <_ZN11ROCANDriver12getSemaphoreEv+0x18>)
9000f146:	681b      	ldr	r3, [r3, #0]
}
9000f148:	4618      	mov	r0, r3
9000f14a:	370c      	adds	r7, #12
9000f14c:	46bd      	mov	sp, r7
9000f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f152:	4770      	bx	lr
9000f154:	2401043c 	.word	0x2401043c

9000f158 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
9000f158:	b580      	push	{r7, lr}
9000f15a:	b082      	sub	sp, #8
9000f15c:	af00      	add	r7, sp, #0
9000f15e:	6078      	str	r0, [r7, #4]
9000f160:	6878      	ldr	r0, [r7, #4]
9000f162:	f000 f8ef 	bl	9000f344 <_ZNSaIP11ROCANDriverED1Ev>
9000f166:	687b      	ldr	r3, [r7, #4]
9000f168:	4618      	mov	r0, r3
9000f16a:	3708      	adds	r7, #8
9000f16c:	46bd      	mov	sp, r7
9000f16e:	bd80      	pop	{r7, pc}

9000f170 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
9000f170:	b580      	push	{r7, lr}
9000f172:	b082      	sub	sp, #8
9000f174:	af00      	add	r7, sp, #0
9000f176:	6078      	str	r0, [r7, #4]
9000f178:	687b      	ldr	r3, [r7, #4]
9000f17a:	4618      	mov	r0, r3
9000f17c:	f000 f8d2 	bl	9000f324 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE12_Vector_implC1Ev>
9000f180:	687b      	ldr	r3, [r7, #4]
9000f182:	4618      	mov	r0, r3
9000f184:	3708      	adds	r7, #8
9000f186:	46bd      	mov	sp, r7
9000f188:	bd80      	pop	{r7, pc}

9000f18a <_ZNSt6vectorIP11ROCANDriverSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
9000f18a:	b580      	push	{r7, lr}
9000f18c:	b082      	sub	sp, #8
9000f18e:	af00      	add	r7, sp, #0
9000f190:	6078      	str	r0, [r7, #4]
9000f192:	687b      	ldr	r3, [r7, #4]
9000f194:	4618      	mov	r0, r3
9000f196:	f7ff ffeb 	bl	9000f170 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EEC1Ev>
9000f19a:	687b      	ldr	r3, [r7, #4]
9000f19c:	4618      	mov	r0, r3
9000f19e:	3708      	adds	r7, #8
9000f1a0:	46bd      	mov	sp, r7
9000f1a2:	bd80      	pop	{r7, pc}

9000f1a4 <_ZNSt8functionIFvhPhmEEC1Ev>:
      function() noexcept
9000f1a4:	b580      	push	{r7, lr}
9000f1a6:	b082      	sub	sp, #8
9000f1a8:	af00      	add	r7, sp, #0
9000f1aa:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
9000f1ac:	687b      	ldr	r3, [r7, #4]
9000f1ae:	4618      	mov	r0, r3
9000f1b0:	f7fc fcfc 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
9000f1b4:	687b      	ldr	r3, [r7, #4]
9000f1b6:	4618      	mov	r0, r3
9000f1b8:	3708      	adds	r7, #8
9000f1ba:	46bd      	mov	sp, r7
9000f1bc:	bd80      	pop	{r7, pc}

9000f1be <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
9000f1be:	b580      	push	{r7, lr}
9000f1c0:	b084      	sub	sp, #16
9000f1c2:	af00      	add	r7, sp, #0
9000f1c4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
9000f1c6:	687a      	ldr	r2, [r7, #4]
9000f1c8:	f107 030c 	add.w	r3, r7, #12
9000f1cc:	4611      	mov	r1, r2
9000f1ce:	4618      	mov	r0, r3
9000f1d0:	f000 f8dd 	bl	9000f38e <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>
9000f1d4:	68fb      	ldr	r3, [r7, #12]
9000f1d6:	4618      	mov	r0, r3
9000f1d8:	3710      	adds	r7, #16
9000f1da:	46bd      	mov	sp, r7
9000f1dc:	bd80      	pop	{r7, pc}

9000f1de <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
9000f1de:	b580      	push	{r7, lr}
9000f1e0:	b084      	sub	sp, #16
9000f1e2:	af00      	add	r7, sp, #0
9000f1e4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
9000f1e6:	687b      	ldr	r3, [r7, #4]
9000f1e8:	1d1a      	adds	r2, r3, #4
9000f1ea:	f107 030c 	add.w	r3, r7, #12
9000f1ee:	4611      	mov	r1, r2
9000f1f0:	4618      	mov	r0, r3
9000f1f2:	f000 f8cc 	bl	9000f38e <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>
9000f1f6:	68fb      	ldr	r3, [r7, #12]
9000f1f8:	4618      	mov	r0, r3
9000f1fa:	3710      	adds	r7, #16
9000f1fc:	46bd      	mov	sp, r7
9000f1fe:	bd80      	pop	{r7, pc}

9000f200 <_ZSt6removeIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES3_ET_S9_S9_RKT0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
9000f200:	b580      	push	{r7, lr}
9000f202:	b084      	sub	sp, #16
9000f204:	af00      	add	r7, sp, #0
9000f206:	60f8      	str	r0, [r7, #12]
9000f208:	60b9      	str	r1, [r7, #8]
9000f20a:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
9000f20c:	6878      	ldr	r0, [r7, #4]
9000f20e:	f000 f8ce 	bl	9000f3ae <_ZN9__gnu_cxx5__ops17__iter_equals_valIKP11ROCANDriverEENS0_16_Iter_equals_valIT_EERS6_>
9000f212:	4603      	mov	r3, r0
9000f214:	461a      	mov	r2, r3
9000f216:	68b9      	ldr	r1, [r7, #8]
9000f218:	68f8      	ldr	r0, [r7, #12]
9000f21a:	f000 f8d7 	bl	9000f3cc <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>
9000f21e:	4603      	mov	r3, r0
		__gnu_cxx::__ops::__iter_equals_val(__value));
    }
9000f220:	4618      	mov	r0, r3
9000f222:	3710      	adds	r7, #16
9000f224:	46bd      	mov	sp, r7
9000f226:	bd80      	pop	{r7, pc}

9000f228 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1IPS2_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISB_SA_E7__valueES7_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
9000f228:	b580      	push	{r7, lr}
9000f22a:	b082      	sub	sp, #8
9000f22c:	af00      	add	r7, sp, #0
9000f22e:	6078      	str	r0, [r7, #4]
9000f230:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
9000f232:	6838      	ldr	r0, [r7, #0]
9000f234:	f000 f923 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f238:	4603      	mov	r3, r0
9000f23a:	681a      	ldr	r2, [r3, #0]
9000f23c:	687b      	ldr	r3, [r7, #4]
9000f23e:	601a      	str	r2, [r3, #0]
9000f240:	687b      	ldr	r3, [r7, #4]
9000f242:	4618      	mov	r0, r3
9000f244:	3708      	adds	r7, #8
9000f246:	46bd      	mov	sp, r7
9000f248:	bd80      	pop	{r7, pc}

9000f24a <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EES8_>:
       *  pointers, the pointed-to memory is not touched in any way.
       *  Managing the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __first, const_iterator __last)
9000f24a:	b590      	push	{r4, r7, lr}
9000f24c:	b087      	sub	sp, #28
9000f24e:	af00      	add	r7, sp, #0
9000f250:	60f8      	str	r0, [r7, #12]
9000f252:	60b9      	str	r1, [r7, #8]
9000f254:	607a      	str	r2, [r7, #4]
      {
	const auto __beg = begin();
9000f256:	68f8      	ldr	r0, [r7, #12]
9000f258:	f7ff ffb1 	bl	9000f1be <_ZNSt6vectorIP11ROCANDriverSaIS1_EE5beginEv>
9000f25c:	4603      	mov	r3, r0
9000f25e:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
9000f260:	68f8      	ldr	r0, [r7, #12]
9000f262:	f000 f917 	bl	9000f494 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE6cbeginEv>
9000f266:	4603      	mov	r3, r0
9000f268:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
9000f26a:	f107 0210 	add.w	r2, r7, #16
9000f26e:	f107 0308 	add.w	r3, r7, #8
9000f272:	4611      	mov	r1, r2
9000f274:	4618      	mov	r0, r3
9000f276:	f000 f91d 	bl	9000f4b4 <_ZN9__gnu_cxxmiIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
9000f27a:	4602      	mov	r2, r0
9000f27c:	f107 0314 	add.w	r3, r7, #20
9000f280:	4611      	mov	r1, r2
9000f282:	4618      	mov	r0, r3
9000f284:	f000 f92b 	bl	9000f4de <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEplEi>
9000f288:	4604      	mov	r4, r0
9000f28a:	f107 0210 	add.w	r2, r7, #16
9000f28e:	1d3b      	adds	r3, r7, #4
9000f290:	4611      	mov	r1, r2
9000f292:	4618      	mov	r0, r3
9000f294:	f000 f90e 	bl	9000f4b4 <_ZN9__gnu_cxxmiIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
9000f298:	4602      	mov	r2, r0
9000f29a:	f107 0314 	add.w	r3, r7, #20
9000f29e:	4611      	mov	r1, r2
9000f2a0:	4618      	mov	r0, r3
9000f2a2:	f000 f91c 	bl	9000f4de <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEplEi>
9000f2a6:	4603      	mov	r3, r0
9000f2a8:	461a      	mov	r2, r3
9000f2aa:	4621      	mov	r1, r4
9000f2ac:	68f8      	ldr	r0, [r7, #12]
9000f2ae:	f000 f92e 	bl	9000f50e <_ZNSt6vectorIP11ROCANDriverSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_>
9000f2b2:	4603      	mov	r3, r0
      }
9000f2b4:	4618      	mov	r0, r3
9000f2b6:	371c      	adds	r7, #28
9000f2b8:	46bd      	mov	sp, r7
9000f2ba:	bd90      	pop	{r4, r7, pc}

9000f2bc <_ZN9__gnu_cxxneIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
9000f2bc:	b590      	push	{r4, r7, lr}
9000f2be:	b083      	sub	sp, #12
9000f2c0:	af00      	add	r7, sp, #0
9000f2c2:	6078      	str	r0, [r7, #4]
9000f2c4:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
9000f2c6:	6878      	ldr	r0, [r7, #4]
9000f2c8:	f000 f8d9 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f2cc:	4603      	mov	r3, r0
9000f2ce:	681c      	ldr	r4, [r3, #0]
9000f2d0:	6838      	ldr	r0, [r7, #0]
9000f2d2:	f000 f8d4 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f2d6:	4603      	mov	r3, r0
9000f2d8:	681b      	ldr	r3, [r3, #0]
9000f2da:	429c      	cmp	r4, r3
9000f2dc:	bf14      	ite	ne
9000f2de:	2301      	movne	r3, #1
9000f2e0:	2300      	moveq	r3, #0
9000f2e2:	b2db      	uxtb	r3, r3
9000f2e4:	4618      	mov	r0, r3
9000f2e6:	370c      	adds	r7, #12
9000f2e8:	46bd      	mov	sp, r7
9000f2ea:	bd90      	pop	{r4, r7, pc}

9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
9000f2ec:	b480      	push	{r7}
9000f2ee:	b083      	sub	sp, #12
9000f2f0:	af00      	add	r7, sp, #0
9000f2f2:	6078      	str	r0, [r7, #4]
	++_M_current;
9000f2f4:	687b      	ldr	r3, [r7, #4]
9000f2f6:	681b      	ldr	r3, [r3, #0]
9000f2f8:	1d1a      	adds	r2, r3, #4
9000f2fa:	687b      	ldr	r3, [r7, #4]
9000f2fc:	601a      	str	r2, [r3, #0]
	return *this;
9000f2fe:	687b      	ldr	r3, [r7, #4]
      }
9000f300:	4618      	mov	r0, r3
9000f302:	370c      	adds	r7, #12
9000f304:	46bd      	mov	sp, r7
9000f306:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f30a:	4770      	bx	lr

9000f30c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
9000f30c:	b480      	push	{r7}
9000f30e:	b083      	sub	sp, #12
9000f310:	af00      	add	r7, sp, #0
9000f312:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
9000f314:	687b      	ldr	r3, [r7, #4]
9000f316:	681b      	ldr	r3, [r3, #0]
9000f318:	4618      	mov	r0, r3
9000f31a:	370c      	adds	r7, #12
9000f31c:	46bd      	mov	sp, r7
9000f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f322:	4770      	bx	lr

9000f324 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
9000f324:	b580      	push	{r7, lr}
9000f326:	b082      	sub	sp, #8
9000f328:	af00      	add	r7, sp, #0
9000f32a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
9000f32c:	6878      	ldr	r0, [r7, #4]
9000f32e:	f000 f935 	bl	9000f59c <_ZNSaIP11ROCANDriverEC1Ev>
9000f332:	687b      	ldr	r3, [r7, #4]
9000f334:	4618      	mov	r0, r3
9000f336:	f000 f93d 	bl	9000f5b4 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
9000f33a:	687b      	ldr	r3, [r7, #4]
9000f33c:	4618      	mov	r0, r3
9000f33e:	3708      	adds	r7, #8
9000f340:	46bd      	mov	sp, r7
9000f342:	bd80      	pop	{r7, pc}

9000f344 <_ZNSaIP11ROCANDriverED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
9000f344:	b580      	push	{r7, lr}
9000f346:	b082      	sub	sp, #8
9000f348:	af00      	add	r7, sp, #0
9000f34a:	6078      	str	r0, [r7, #4]
9000f34c:	6878      	ldr	r0, [r7, #4]
9000f34e:	f000 f945 	bl	9000f5dc <_ZN9__gnu_cxx13new_allocatorIP11ROCANDriverED1Ev>
9000f352:	687b      	ldr	r3, [r7, #4]
9000f354:	4618      	mov	r0, r3
9000f356:	3708      	adds	r7, #8
9000f358:	46bd      	mov	sp, r7
9000f35a:	bd80      	pop	{r7, pc}

9000f35c <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
9000f35c:	b580      	push	{r7, lr}
9000f35e:	b082      	sub	sp, #8
9000f360:	af00      	add	r7, sp, #0
9000f362:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
9000f364:	687b      	ldr	r3, [r7, #4]
9000f366:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
9000f368:	687b      	ldr	r3, [r7, #4]
9000f36a:	689a      	ldr	r2, [r3, #8]
9000f36c:	687b      	ldr	r3, [r7, #4]
9000f36e:	681b      	ldr	r3, [r3, #0]
9000f370:	1ad3      	subs	r3, r2, r3
9000f372:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
9000f374:	461a      	mov	r2, r3
9000f376:	6878      	ldr	r0, [r7, #4]
9000f378:	f000 f93b 	bl	9000f5f2 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE13_M_deallocateEPS1_j>
      }
9000f37c:	687b      	ldr	r3, [r7, #4]
9000f37e:	4618      	mov	r0, r3
9000f380:	f7ff feea 	bl	9000f158 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE12_Vector_implD1Ev>
9000f384:	687b      	ldr	r3, [r7, #4]
9000f386:	4618      	mov	r0, r3
9000f388:	3708      	adds	r7, #8
9000f38a:	46bd      	mov	sp, r7
9000f38c:	bd80      	pop	{r7, pc}

9000f38e <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
9000f38e:	b480      	push	{r7}
9000f390:	b083      	sub	sp, #12
9000f392:	af00      	add	r7, sp, #0
9000f394:	6078      	str	r0, [r7, #4]
9000f396:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
9000f398:	683b      	ldr	r3, [r7, #0]
9000f39a:	681a      	ldr	r2, [r3, #0]
9000f39c:	687b      	ldr	r3, [r7, #4]
9000f39e:	601a      	str	r2, [r3, #0]
9000f3a0:	687b      	ldr	r3, [r7, #4]
9000f3a2:	4618      	mov	r0, r3
9000f3a4:	370c      	adds	r7, #12
9000f3a6:	46bd      	mov	sp, r7
9000f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f3ac:	4770      	bx	lr

9000f3ae <_ZN9__gnu_cxx5__ops17__iter_equals_valIKP11ROCANDriverEENS0_16_Iter_equals_valIT_EERS6_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
9000f3ae:	b580      	push	{r7, lr}
9000f3b0:	b084      	sub	sp, #16
9000f3b2:	af00      	add	r7, sp, #0
9000f3b4:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
9000f3b6:	f107 030c 	add.w	r3, r7, #12
9000f3ba:	6879      	ldr	r1, [r7, #4]
9000f3bc:	4618      	mov	r0, r3
9000f3be:	f000 f92b 	bl	9000f618 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEC1ERS4_>
9000f3c2:	68fb      	ldr	r3, [r7, #12]
9000f3c4:	4618      	mov	r0, r3
9000f3c6:	3710      	adds	r7, #16
9000f3c8:	46bd      	mov	sp, r7
9000f3ca:	bd80      	pop	{r7, pc}

9000f3cc <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>:
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
9000f3cc:	b590      	push	{r4, r7, lr}
9000f3ce:	b087      	sub	sp, #28
9000f3d0:	af00      	add	r7, sp, #0
9000f3d2:	60f8      	str	r0, [r7, #12]
9000f3d4:	60b9      	str	r1, [r7, #8]
9000f3d6:	607a      	str	r2, [r7, #4]
      __first = std::__find_if(__first, __last, __pred);
9000f3d8:	687a      	ldr	r2, [r7, #4]
9000f3da:	68b9      	ldr	r1, [r7, #8]
9000f3dc:	68f8      	ldr	r0, [r7, #12]
9000f3de:	f000 f92a 	bl	9000f636 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>
9000f3e2:	4603      	mov	r3, r0
9000f3e4:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
9000f3e6:	f107 0208 	add.w	r2, r7, #8
9000f3ea:	f107 030c 	add.w	r3, r7, #12
9000f3ee:	4611      	mov	r1, r2
9000f3f0:	4618      	mov	r0, r3
9000f3f2:	f000 f936 	bl	9000f662 <_ZN9__gnu_cxxeqIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
9000f3f6:	4603      	mov	r3, r0
9000f3f8:	2b00      	cmp	r3, #0
9000f3fa:	d001      	beq.n	9000f400 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x34>
	return __first;
9000f3fc:	68fb      	ldr	r3, [r7, #12]
9000f3fe:	e03a      	b.n	9000f476 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xaa>
      _ForwardIterator __result = __first;
9000f400:	68fb      	ldr	r3, [r7, #12]
9000f402:	617b      	str	r3, [r7, #20]
      ++__first;
9000f404:	f107 030c 	add.w	r3, r7, #12
9000f408:	4618      	mov	r0, r3
9000f40a:	f7ff ff6f 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
      for (; __first != __last; ++__first)
9000f40e:	f107 0208 	add.w	r2, r7, #8
9000f412:	f107 030c 	add.w	r3, r7, #12
9000f416:	4611      	mov	r1, r2
9000f418:	4618      	mov	r0, r3
9000f41a:	f7ff ff4f 	bl	9000f2bc <_ZN9__gnu_cxxneIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
9000f41e:	4603      	mov	r3, r0
9000f420:	2b00      	cmp	r3, #0
9000f422:	d027      	beq.n	9000f474 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0xa8>
	if (!__pred(__first))
9000f424:	1d3b      	adds	r3, r7, #4
9000f426:	68f9      	ldr	r1, [r7, #12]
9000f428:	4618      	mov	r0, r3
9000f42a:	f000 f932 	bl	9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
9000f42e:	4603      	mov	r3, r0
9000f430:	f083 0301 	eor.w	r3, r3, #1
9000f434:	b2db      	uxtb	r3, r3
9000f436:	2b00      	cmp	r3, #0
9000f438:	d016      	beq.n	9000f468 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x9c>
	    *__result = _GLIBCXX_MOVE(*__first);
9000f43a:	f107 030c 	add.w	r3, r7, #12
9000f43e:	4618      	mov	r0, r3
9000f440:	f7ff ff64 	bl	9000f30c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
9000f444:	4603      	mov	r3, r0
9000f446:	4618      	mov	r0, r3
9000f448:	f000 f93a 	bl	9000f6c0 <_ZSt4moveIRP11ROCANDriverEONSt16remove_referenceIT_E4typeEOS4_>
9000f44c:	4604      	mov	r4, r0
9000f44e:	f107 0314 	add.w	r3, r7, #20
9000f452:	4618      	mov	r0, r3
9000f454:	f7ff ff5a 	bl	9000f30c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
9000f458:	4602      	mov	r2, r0
9000f45a:	6823      	ldr	r3, [r4, #0]
9000f45c:	6013      	str	r3, [r2, #0]
	    ++__result;
9000f45e:	f107 0314 	add.w	r3, r7, #20
9000f462:	4618      	mov	r0, r3
9000f464:	f7ff ff42 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
      for (; __first != __last; ++__first)
9000f468:	f107 030c 	add.w	r3, r7, #12
9000f46c:	4618      	mov	r0, r3
9000f46e:	f7ff ff3d 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
9000f472:	e7cc      	b.n	9000f40e <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_+0x42>
      return __result;
9000f474:	697b      	ldr	r3, [r7, #20]
    }
9000f476:	4618      	mov	r0, r3
9000f478:	371c      	adds	r7, #28
9000f47a:	46bd      	mov	sp, r7
9000f47c:	bd90      	pop	{r4, r7, pc}

9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
9000f47e:	b480      	push	{r7}
9000f480:	b083      	sub	sp, #12
9000f482:	af00      	add	r7, sp, #0
9000f484:	6078      	str	r0, [r7, #4]
      { return _M_current; }
9000f486:	687b      	ldr	r3, [r7, #4]
9000f488:	4618      	mov	r0, r3
9000f48a:	370c      	adds	r7, #12
9000f48c:	46bd      	mov	sp, r7
9000f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f492:	4770      	bx	lr

9000f494 <_ZNKSt6vectorIP11ROCANDriverSaIS1_EE6cbeginEv>:
      cbegin() const noexcept
9000f494:	b580      	push	{r7, lr}
9000f496:	b084      	sub	sp, #16
9000f498:	af00      	add	r7, sp, #0
9000f49a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
9000f49c:	687a      	ldr	r2, [r7, #4]
9000f49e:	f107 030c 	add.w	r3, r7, #12
9000f4a2:	4611      	mov	r1, r2
9000f4a4:	4618      	mov	r0, r3
9000f4a6:	f000 f916 	bl	9000f6d6 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS4_>
9000f4aa:	68fb      	ldr	r3, [r7, #12]
9000f4ac:	4618      	mov	r0, r3
9000f4ae:	3710      	adds	r7, #16
9000f4b0:	46bd      	mov	sp, r7
9000f4b2:	bd80      	pop	{r7, pc}

9000f4b4 <_ZN9__gnu_cxxmiIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
9000f4b4:	b590      	push	{r4, r7, lr}
9000f4b6:	b083      	sub	sp, #12
9000f4b8:	af00      	add	r7, sp, #0
9000f4ba:	6078      	str	r0, [r7, #4]
9000f4bc:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
9000f4be:	6878      	ldr	r0, [r7, #4]
9000f4c0:	f000 f919 	bl	9000f6f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f4c4:	4603      	mov	r3, r0
9000f4c6:	681c      	ldr	r4, [r3, #0]
9000f4c8:	6838      	ldr	r0, [r7, #0]
9000f4ca:	f000 f914 	bl	9000f6f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f4ce:	4603      	mov	r3, r0
9000f4d0:	681b      	ldr	r3, [r3, #0]
9000f4d2:	1ae3      	subs	r3, r4, r3
9000f4d4:	109b      	asrs	r3, r3, #2
9000f4d6:	4618      	mov	r0, r3
9000f4d8:	370c      	adds	r7, #12
9000f4da:	46bd      	mov	sp, r7
9000f4dc:	bd90      	pop	{r4, r7, pc}

9000f4de <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
9000f4de:	b580      	push	{r7, lr}
9000f4e0:	b084      	sub	sp, #16
9000f4e2:	af00      	add	r7, sp, #0
9000f4e4:	6078      	str	r0, [r7, #4]
9000f4e6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
9000f4e8:	687b      	ldr	r3, [r7, #4]
9000f4ea:	681a      	ldr	r2, [r3, #0]
9000f4ec:	683b      	ldr	r3, [r7, #0]
9000f4ee:	009b      	lsls	r3, r3, #2
9000f4f0:	4413      	add	r3, r2
9000f4f2:	60fb      	str	r3, [r7, #12]
9000f4f4:	f107 020c 	add.w	r2, r7, #12
9000f4f8:	f107 0308 	add.w	r3, r7, #8
9000f4fc:	4611      	mov	r1, r2
9000f4fe:	4618      	mov	r0, r3
9000f500:	f7ff ff45 	bl	9000f38e <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS3_>
9000f504:	68bb      	ldr	r3, [r7, #8]
9000f506:	4618      	mov	r0, r3
9000f508:	3710      	adds	r7, #16
9000f50a:	46bd      	mov	sp, r7
9000f50c:	bd80      	pop	{r7, pc}

9000f50e <_ZNSt6vectorIP11ROCANDriverSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_>:
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
9000f50e:	b590      	push	{r4, r7, lr}
9000f510:	b087      	sub	sp, #28
9000f512:	af00      	add	r7, sp, #0
9000f514:	60f8      	str	r0, [r7, #12]
9000f516:	60b9      	str	r1, [r7, #8]
9000f518:	607a      	str	r2, [r7, #4]
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
9000f51a:	1d3a      	adds	r2, r7, #4
9000f51c:	f107 0308 	add.w	r3, r7, #8
9000f520:	4611      	mov	r1, r2
9000f522:	4618      	mov	r0, r3
9000f524:	f7ff feca 	bl	9000f2bc <_ZN9__gnu_cxxneIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
9000f528:	4603      	mov	r3, r0
9000f52a:	2b00      	cmp	r3, #0
9000f52c:	d031      	beq.n	9000f592 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_+0x84>
	{
	  if (__last != end())
9000f52e:	68f8      	ldr	r0, [r7, #12]
9000f530:	f7ff fe55 	bl	9000f1de <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
9000f534:	4603      	mov	r3, r0
9000f536:	613b      	str	r3, [r7, #16]
9000f538:	f107 0210 	add.w	r2, r7, #16
9000f53c:	1d3b      	adds	r3, r7, #4
9000f53e:	4611      	mov	r1, r2
9000f540:	4618      	mov	r0, r3
9000f542:	f7ff febb 	bl	9000f2bc <_ZN9__gnu_cxxneIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
9000f546:	4603      	mov	r3, r0
9000f548:	2b00      	cmp	r3, #0
9000f54a:	d008      	beq.n	9000f55e <_ZNSt6vectorIP11ROCANDriverSaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
9000f54c:	68f8      	ldr	r0, [r7, #12]
9000f54e:	f7ff fe46 	bl	9000f1de <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
9000f552:	4603      	mov	r3, r0
9000f554:	68ba      	ldr	r2, [r7, #8]
9000f556:	4619      	mov	r1, r3
9000f558:	6878      	ldr	r0, [r7, #4]
9000f55a:	f000 f8d7 	bl	9000f70c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>
	  _M_erase_at_end(__first.base() + (end() - __last));
9000f55e:	f107 0308 	add.w	r3, r7, #8
9000f562:	4618      	mov	r0, r3
9000f564:	f7ff ff8b 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f568:	4603      	mov	r3, r0
9000f56a:	681c      	ldr	r4, [r3, #0]
9000f56c:	68f8      	ldr	r0, [r7, #12]
9000f56e:	f7ff fe36 	bl	9000f1de <_ZNSt6vectorIP11ROCANDriverSaIS1_EE3endEv>
9000f572:	4603      	mov	r3, r0
9000f574:	617b      	str	r3, [r7, #20]
9000f576:	1d3a      	adds	r2, r7, #4
9000f578:	f107 0314 	add.w	r3, r7, #20
9000f57c:	4611      	mov	r1, r2
9000f57e:	4618      	mov	r0, r3
9000f580:	f000 f8fd 	bl	9000f77e <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
9000f584:	4603      	mov	r3, r0
9000f586:	009b      	lsls	r3, r3, #2
9000f588:	4423      	add	r3, r4
9000f58a:	4619      	mov	r1, r3
9000f58c:	68f8      	ldr	r0, [r7, #12]
9000f58e:	f000 f8d5 	bl	9000f73c <_ZNSt6vectorIP11ROCANDriverSaIS1_EE15_M_erase_at_endEPS1_>
	}
      return __first;
9000f592:	68bb      	ldr	r3, [r7, #8]
    }
9000f594:	4618      	mov	r0, r3
9000f596:	371c      	adds	r7, #28
9000f598:	46bd      	mov	sp, r7
9000f59a:	bd90      	pop	{r4, r7, pc}

9000f59c <_ZNSaIP11ROCANDriverEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
9000f59c:	b580      	push	{r7, lr}
9000f59e:	b082      	sub	sp, #8
9000f5a0:	af00      	add	r7, sp, #0
9000f5a2:	6078      	str	r0, [r7, #4]
9000f5a4:	6878      	ldr	r0, [r7, #4]
9000f5a6:	f000 f8ff 	bl	9000f7a8 <_ZN9__gnu_cxx13new_allocatorIP11ROCANDriverEC1Ev>
9000f5aa:	687b      	ldr	r3, [r7, #4]
9000f5ac:	4618      	mov	r0, r3
9000f5ae:	3708      	adds	r7, #8
9000f5b0:	46bd      	mov	sp, r7
9000f5b2:	bd80      	pop	{r7, pc}

9000f5b4 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
9000f5b4:	b480      	push	{r7}
9000f5b6:	b083      	sub	sp, #12
9000f5b8:	af00      	add	r7, sp, #0
9000f5ba:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
9000f5bc:	687b      	ldr	r3, [r7, #4]
9000f5be:	2200      	movs	r2, #0
9000f5c0:	601a      	str	r2, [r3, #0]
9000f5c2:	687b      	ldr	r3, [r7, #4]
9000f5c4:	2200      	movs	r2, #0
9000f5c6:	605a      	str	r2, [r3, #4]
9000f5c8:	687b      	ldr	r3, [r7, #4]
9000f5ca:	2200      	movs	r2, #0
9000f5cc:	609a      	str	r2, [r3, #8]
	{ }
9000f5ce:	687b      	ldr	r3, [r7, #4]
9000f5d0:	4618      	mov	r0, r3
9000f5d2:	370c      	adds	r7, #12
9000f5d4:	46bd      	mov	sp, r7
9000f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f5da:	4770      	bx	lr

9000f5dc <_ZN9__gnu_cxx13new_allocatorIP11ROCANDriverED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
9000f5dc:	b480      	push	{r7}
9000f5de:	b083      	sub	sp, #12
9000f5e0:	af00      	add	r7, sp, #0
9000f5e2:	6078      	str	r0, [r7, #4]
9000f5e4:	687b      	ldr	r3, [r7, #4]
9000f5e6:	4618      	mov	r0, r3
9000f5e8:	370c      	adds	r7, #12
9000f5ea:	46bd      	mov	sp, r7
9000f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f5f0:	4770      	bx	lr

9000f5f2 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
9000f5f2:	b580      	push	{r7, lr}
9000f5f4:	b084      	sub	sp, #16
9000f5f6:	af00      	add	r7, sp, #0
9000f5f8:	60f8      	str	r0, [r7, #12]
9000f5fa:	60b9      	str	r1, [r7, #8]
9000f5fc:	607a      	str	r2, [r7, #4]
	if (__p)
9000f5fe:	68bb      	ldr	r3, [r7, #8]
9000f600:	2b00      	cmp	r3, #0
9000f602:	d005      	beq.n	9000f610 <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
9000f604:	68fb      	ldr	r3, [r7, #12]
9000f606:	687a      	ldr	r2, [r7, #4]
9000f608:	68b9      	ldr	r1, [r7, #8]
9000f60a:	4618      	mov	r0, r3
9000f60c:	f000 f8d7 	bl	9000f7be <_ZNSt16allocator_traitsISaIP11ROCANDriverEE10deallocateERS2_PS1_j>
      }
9000f610:	bf00      	nop
9000f612:	3710      	adds	r7, #16
9000f614:	46bd      	mov	sp, r7
9000f616:	bd80      	pop	{r7, pc}

9000f618 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEC1ERS4_>:
      _Iter_equals_val(_Value& __value)
9000f618:	b480      	push	{r7}
9000f61a:	b083      	sub	sp, #12
9000f61c:	af00      	add	r7, sp, #0
9000f61e:	6078      	str	r0, [r7, #4]
9000f620:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
9000f622:	687b      	ldr	r3, [r7, #4]
9000f624:	683a      	ldr	r2, [r7, #0]
9000f626:	601a      	str	r2, [r3, #0]
      { }
9000f628:	687b      	ldr	r3, [r7, #4]
9000f62a:	4618      	mov	r0, r3
9000f62c:	370c      	adds	r7, #12
9000f62e:	46bd      	mov	sp, r7
9000f630:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f634:	4770      	bx	lr

9000f636 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
9000f636:	b590      	push	{r4, r7, lr}
9000f638:	b085      	sub	sp, #20
9000f63a:	af00      	add	r7, sp, #0
9000f63c:	60f8      	str	r0, [r7, #12]
9000f63e:	60b9      	str	r1, [r7, #8]
9000f640:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
9000f642:	f107 030c 	add.w	r3, r7, #12
9000f646:	4618      	mov	r0, r3
9000f648:	f000 f8c8 	bl	9000f7dc <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return __find_if(__first, __last, __pred,
9000f64c:	4623      	mov	r3, r4
9000f64e:	687a      	ldr	r2, [r7, #4]
9000f650:	68b9      	ldr	r1, [r7, #8]
9000f652:	68f8      	ldr	r0, [r7, #12]
9000f654:	f000 f8cd 	bl	9000f7f2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag>
9000f658:	4603      	mov	r3, r0
    }
9000f65a:	4618      	mov	r0, r3
9000f65c:	3714      	adds	r7, #20
9000f65e:	46bd      	mov	sp, r7
9000f660:	bd90      	pop	{r4, r7, pc}

9000f662 <_ZN9__gnu_cxxeqIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
9000f662:	b590      	push	{r4, r7, lr}
9000f664:	b083      	sub	sp, #12
9000f666:	af00      	add	r7, sp, #0
9000f668:	6078      	str	r0, [r7, #4]
9000f66a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
9000f66c:	6878      	ldr	r0, [r7, #4]
9000f66e:	f7ff ff06 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f672:	4603      	mov	r3, r0
9000f674:	681c      	ldr	r4, [r3, #0]
9000f676:	6838      	ldr	r0, [r7, #0]
9000f678:	f7ff ff01 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f67c:	4603      	mov	r3, r0
9000f67e:	681b      	ldr	r3, [r3, #0]
9000f680:	429c      	cmp	r4, r3
9000f682:	bf0c      	ite	eq
9000f684:	2301      	moveq	r3, #1
9000f686:	2300      	movne	r3, #0
9000f688:	b2db      	uxtb	r3, r3
9000f68a:	4618      	mov	r0, r3
9000f68c:	370c      	adds	r7, #12
9000f68e:	46bd      	mov	sp, r7
9000f690:	bd90      	pop	{r4, r7, pc}

9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>:
	operator()(_Iterator __it)
9000f692:	b580      	push	{r7, lr}
9000f694:	b082      	sub	sp, #8
9000f696:	af00      	add	r7, sp, #0
9000f698:	6078      	str	r0, [r7, #4]
9000f69a:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
9000f69c:	463b      	mov	r3, r7
9000f69e:	4618      	mov	r0, r3
9000f6a0:	f7ff fe34 	bl	9000f30c <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEdeEv>
9000f6a4:	4603      	mov	r3, r0
9000f6a6:	681a      	ldr	r2, [r3, #0]
9000f6a8:	687b      	ldr	r3, [r7, #4]
9000f6aa:	681b      	ldr	r3, [r3, #0]
9000f6ac:	681b      	ldr	r3, [r3, #0]
9000f6ae:	429a      	cmp	r2, r3
9000f6b0:	bf0c      	ite	eq
9000f6b2:	2301      	moveq	r3, #1
9000f6b4:	2300      	movne	r3, #0
9000f6b6:	b2db      	uxtb	r3, r3
9000f6b8:	4618      	mov	r0, r3
9000f6ba:	3708      	adds	r7, #8
9000f6bc:	46bd      	mov	sp, r7
9000f6be:	bd80      	pop	{r7, pc}

9000f6c0 <_ZSt4moveIRP11ROCANDriverEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
9000f6c0:	b480      	push	{r7}
9000f6c2:	b083      	sub	sp, #12
9000f6c4:	af00      	add	r7, sp, #0
9000f6c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000f6c8:	687b      	ldr	r3, [r7, #4]
9000f6ca:	4618      	mov	r0, r3
9000f6cc:	370c      	adds	r7, #12
9000f6ce:	46bd      	mov	sp, r7
9000f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f6d4:	4770      	bx	lr

9000f6d6 <_ZN9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
9000f6d6:	b480      	push	{r7}
9000f6d8:	b083      	sub	sp, #12
9000f6da:	af00      	add	r7, sp, #0
9000f6dc:	6078      	str	r0, [r7, #4]
9000f6de:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
9000f6e0:	683b      	ldr	r3, [r7, #0]
9000f6e2:	681a      	ldr	r2, [r3, #0]
9000f6e4:	687b      	ldr	r3, [r7, #4]
9000f6e6:	601a      	str	r2, [r3, #0]
9000f6e8:	687b      	ldr	r3, [r7, #4]
9000f6ea:	4618      	mov	r0, r3
9000f6ec:	370c      	adds	r7, #12
9000f6ee:	46bd      	mov	sp, r7
9000f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f6f4:	4770      	bx	lr

9000f6f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
9000f6f6:	b480      	push	{r7}
9000f6f8:	b083      	sub	sp, #12
9000f6fa:	af00      	add	r7, sp, #0
9000f6fc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
9000f6fe:	687b      	ldr	r3, [r7, #4]
9000f700:	4618      	mov	r0, r3
9000f702:	370c      	adds	r7, #12
9000f704:	46bd      	mov	sp, r7
9000f706:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f70a:	4770      	bx	lr

9000f70c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_>:
    move(_II __first, _II __last, _OI __result)
9000f70c:	b590      	push	{r4, r7, lr}
9000f70e:	b085      	sub	sp, #20
9000f710:	af00      	add	r7, sp, #0
9000f712:	60f8      	str	r0, [r7, #12]
9000f714:	60b9      	str	r1, [r7, #8]
9000f716:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
9000f718:	68f8      	ldr	r0, [r7, #12]
9000f71a:	f000 f903 	bl	9000f924 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEET_S9_>
9000f71e:	4604      	mov	r4, r0
9000f720:	68b8      	ldr	r0, [r7, #8]
9000f722:	f000 f8ff 	bl	9000f924 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEET_S9_>
9000f726:	4603      	mov	r3, r0
9000f728:	687a      	ldr	r2, [r7, #4]
9000f72a:	4619      	mov	r1, r3
9000f72c:	4620      	mov	r0, r4
9000f72e:	f000 f904 	bl	9000f93a <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>
9000f732:	4603      	mov	r3, r0
    }
9000f734:	4618      	mov	r0, r3
9000f736:	3714      	adds	r7, #20
9000f738:	46bd      	mov	sp, r7
9000f73a:	bd90      	pop	{r4, r7, pc}

9000f73c <_ZNSt6vectorIP11ROCANDriverSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
9000f73c:	b590      	push	{r4, r7, lr}
9000f73e:	b085      	sub	sp, #20
9000f740:	af00      	add	r7, sp, #0
9000f742:	6078      	str	r0, [r7, #4]
9000f744:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
9000f746:	687b      	ldr	r3, [r7, #4]
9000f748:	685a      	ldr	r2, [r3, #4]
9000f74a:	683b      	ldr	r3, [r7, #0]
9000f74c:	1ad3      	subs	r3, r2, r3
9000f74e:	109b      	asrs	r3, r3, #2
9000f750:	60fb      	str	r3, [r7, #12]
9000f752:	68fb      	ldr	r3, [r7, #12]
9000f754:	2b00      	cmp	r3, #0
9000f756:	d00e      	beq.n	9000f776 <_ZNSt6vectorIP11ROCANDriverSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
9000f758:	687b      	ldr	r3, [r7, #4]
9000f75a:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
9000f75c:	687b      	ldr	r3, [r7, #4]
9000f75e:	4618      	mov	r0, r3
9000f760:	f000 f90c 	bl	9000f97c <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>
9000f764:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
9000f766:	461a      	mov	r2, r3
9000f768:	4621      	mov	r1, r4
9000f76a:	6838      	ldr	r0, [r7, #0]
9000f76c:	f000 f911 	bl	9000f992 <_ZSt8_DestroyIPP11ROCANDriverS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
9000f770:	687b      	ldr	r3, [r7, #4]
9000f772:	683a      	ldr	r2, [r7, #0]
9000f774:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
9000f776:	bf00      	nop
9000f778:	3714      	adds	r7, #20
9000f77a:	46bd      	mov	sp, r7
9000f77c:	bd90      	pop	{r4, r7, pc}

9000f77e <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
9000f77e:	b590      	push	{r4, r7, lr}
9000f780:	b083      	sub	sp, #12
9000f782:	af00      	add	r7, sp, #0
9000f784:	6078      	str	r0, [r7, #4]
9000f786:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
9000f788:	6878      	ldr	r0, [r7, #4]
9000f78a:	f7ff fe78 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f78e:	4603      	mov	r3, r0
9000f790:	681c      	ldr	r4, [r3, #0]
9000f792:	6838      	ldr	r0, [r7, #0]
9000f794:	f7ff fe73 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f798:	4603      	mov	r3, r0
9000f79a:	681b      	ldr	r3, [r3, #0]
9000f79c:	1ae3      	subs	r3, r4, r3
9000f79e:	109b      	asrs	r3, r3, #2
9000f7a0:	4618      	mov	r0, r3
9000f7a2:	370c      	adds	r7, #12
9000f7a4:	46bd      	mov	sp, r7
9000f7a6:	bd90      	pop	{r4, r7, pc}

9000f7a8 <_ZN9__gnu_cxx13new_allocatorIP11ROCANDriverEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
9000f7a8:	b480      	push	{r7}
9000f7aa:	b083      	sub	sp, #12
9000f7ac:	af00      	add	r7, sp, #0
9000f7ae:	6078      	str	r0, [r7, #4]
9000f7b0:	687b      	ldr	r3, [r7, #4]
9000f7b2:	4618      	mov	r0, r3
9000f7b4:	370c      	adds	r7, #12
9000f7b6:	46bd      	mov	sp, r7
9000f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f7bc:	4770      	bx	lr

9000f7be <_ZNSt16allocator_traitsISaIP11ROCANDriverEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
9000f7be:	b580      	push	{r7, lr}
9000f7c0:	b084      	sub	sp, #16
9000f7c2:	af00      	add	r7, sp, #0
9000f7c4:	60f8      	str	r0, [r7, #12]
9000f7c6:	60b9      	str	r1, [r7, #8]
9000f7c8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
9000f7ca:	687a      	ldr	r2, [r7, #4]
9000f7cc:	68b9      	ldr	r1, [r7, #8]
9000f7ce:	68f8      	ldr	r0, [r7, #12]
9000f7d0:	f000 f8ed 	bl	9000f9ae <_ZN9__gnu_cxx13new_allocatorIP11ROCANDriverE10deallocateEPS2_j>
9000f7d4:	bf00      	nop
9000f7d6:	3710      	adds	r7, #16
9000f7d8:	46bd      	mov	sp, r7
9000f7da:	bd80      	pop	{r7, pc}

9000f7dc <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
9000f7dc:	b480      	push	{r7}
9000f7de:	b083      	sub	sp, #12
9000f7e0:	af00      	add	r7, sp, #0
9000f7e2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
9000f7e4:	bf00      	nop
9000f7e6:	4618      	mov	r0, r3
9000f7e8:	370c      	adds	r7, #12
9000f7ea:	46bd      	mov	sp, r7
9000f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f7f0:	4770      	bx	lr

9000f7f2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
9000f7f2:	b580      	push	{r7, lr}
9000f7f4:	b086      	sub	sp, #24
9000f7f6:	af00      	add	r7, sp, #0
9000f7f8:	60f8      	str	r0, [r7, #12]
9000f7fa:	60b9      	str	r1, [r7, #8]
9000f7fc:	607a      	str	r2, [r7, #4]
9000f7fe:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
9000f800:	f107 020c 	add.w	r2, r7, #12
9000f804:	f107 0308 	add.w	r3, r7, #8
9000f808:	4611      	mov	r1, r2
9000f80a:	4618      	mov	r0, r3
9000f80c:	f7ff ffb7 	bl	9000f77e <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
9000f810:	4603      	mov	r3, r0
9000f812:	109b      	asrs	r3, r3, #2
9000f814:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
9000f816:	697b      	ldr	r3, [r7, #20]
9000f818:	2b00      	cmp	r3, #0
9000f81a:	dd3f      	ble.n	9000f89c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0xaa>
	  if (__pred(__first))
9000f81c:	1d3b      	adds	r3, r7, #4
9000f81e:	68f9      	ldr	r1, [r7, #12]
9000f820:	4618      	mov	r0, r3
9000f822:	f7ff ff36 	bl	9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
9000f826:	4603      	mov	r3, r0
9000f828:	2b00      	cmp	r3, #0
9000f82a:	d001      	beq.n	9000f830 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x3e>
	    return __first;
9000f82c:	68fb      	ldr	r3, [r7, #12]
9000f82e:	e075      	b.n	9000f91c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
9000f830:	f107 030c 	add.w	r3, r7, #12
9000f834:	4618      	mov	r0, r3
9000f836:	f7ff fd59 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
9000f83a:	1d3b      	adds	r3, r7, #4
9000f83c:	68f9      	ldr	r1, [r7, #12]
9000f83e:	4618      	mov	r0, r3
9000f840:	f7ff ff27 	bl	9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
9000f844:	4603      	mov	r3, r0
9000f846:	2b00      	cmp	r3, #0
9000f848:	d001      	beq.n	9000f84e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x5c>
	    return __first;
9000f84a:	68fb      	ldr	r3, [r7, #12]
9000f84c:	e066      	b.n	9000f91c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
9000f84e:	f107 030c 	add.w	r3, r7, #12
9000f852:	4618      	mov	r0, r3
9000f854:	f7ff fd4a 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
9000f858:	1d3b      	adds	r3, r7, #4
9000f85a:	68f9      	ldr	r1, [r7, #12]
9000f85c:	4618      	mov	r0, r3
9000f85e:	f7ff ff18 	bl	9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
9000f862:	4603      	mov	r3, r0
9000f864:	2b00      	cmp	r3, #0
9000f866:	d001      	beq.n	9000f86c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x7a>
	    return __first;
9000f868:	68fb      	ldr	r3, [r7, #12]
9000f86a:	e057      	b.n	9000f91c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
9000f86c:	f107 030c 	add.w	r3, r7, #12
9000f870:	4618      	mov	r0, r3
9000f872:	f7ff fd3b 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
9000f876:	1d3b      	adds	r3, r7, #4
9000f878:	68f9      	ldr	r1, [r7, #12]
9000f87a:	4618      	mov	r0, r3
9000f87c:	f7ff ff09 	bl	9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
9000f880:	4603      	mov	r3, r0
9000f882:	2b00      	cmp	r3, #0
9000f884:	d001      	beq.n	9000f88a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x98>
	    return __first;
9000f886:	68fb      	ldr	r3, [r7, #12]
9000f888:	e048      	b.n	9000f91c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
9000f88a:	f107 030c 	add.w	r3, r7, #12
9000f88e:	4618      	mov	r0, r3
9000f890:	f7ff fd2c 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
9000f894:	697b      	ldr	r3, [r7, #20]
9000f896:	3b01      	subs	r3, #1
9000f898:	617b      	str	r3, [r7, #20]
9000f89a:	e7bc      	b.n	9000f816 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x24>
      switch (__last - __first)
9000f89c:	f107 020c 	add.w	r2, r7, #12
9000f8a0:	f107 0308 	add.w	r3, r7, #8
9000f8a4:	4611      	mov	r1, r2
9000f8a6:	4618      	mov	r0, r3
9000f8a8:	f7ff ff69 	bl	9000f77e <_ZN9__gnu_cxxmiIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
9000f8ac:	4603      	mov	r3, r0
9000f8ae:	2b03      	cmp	r3, #3
9000f8b0:	d006      	beq.n	9000f8c0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0xce>
9000f8b2:	2b03      	cmp	r3, #3
9000f8b4:	dc31      	bgt.n	9000f91a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x128>
9000f8b6:	2b01      	cmp	r3, #1
9000f8b8:	d020      	beq.n	9000f8fc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x10a>
9000f8ba:	2b02      	cmp	r3, #2
9000f8bc:	d00f      	beq.n	9000f8de <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0xec>
9000f8be:	e02c      	b.n	9000f91a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
9000f8c0:	1d3b      	adds	r3, r7, #4
9000f8c2:	68f9      	ldr	r1, [r7, #12]
9000f8c4:	4618      	mov	r0, r3
9000f8c6:	f7ff fee4 	bl	9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
9000f8ca:	4603      	mov	r3, r0
9000f8cc:	2b00      	cmp	r3, #0
9000f8ce:	d001      	beq.n	9000f8d4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
9000f8d0:	68fb      	ldr	r3, [r7, #12]
9000f8d2:	e023      	b.n	9000f91c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
9000f8d4:	f107 030c 	add.w	r3, r7, #12
9000f8d8:	4618      	mov	r0, r3
9000f8da:	f7ff fd07 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
9000f8de:	1d3b      	adds	r3, r7, #4
9000f8e0:	68f9      	ldr	r1, [r7, #12]
9000f8e2:	4618      	mov	r0, r3
9000f8e4:	f7ff fed5 	bl	9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
9000f8e8:	4603      	mov	r3, r0
9000f8ea:	2b00      	cmp	r3, #0
9000f8ec:	d001      	beq.n	9000f8f2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x100>
	    return __first;
9000f8ee:	68fb      	ldr	r3, [r7, #12]
9000f8f0:	e014      	b.n	9000f91c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
9000f8f2:	f107 030c 	add.w	r3, r7, #12
9000f8f6:	4618      	mov	r0, r3
9000f8f8:	f7ff fcf8 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
9000f8fc:	1d3b      	adds	r3, r7, #4
9000f8fe:	68f9      	ldr	r1, [r7, #12]
9000f900:	4618      	mov	r0, r3
9000f902:	f7ff fec6 	bl	9000f692 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKP11ROCANDriverEclINS_17__normal_iteratorIPS3_St6vectorIS3_SaIS3_EEEEEEbT_>
9000f906:	4603      	mov	r3, r0
9000f908:	2b00      	cmp	r3, #0
9000f90a:	d001      	beq.n	9000f910 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
9000f90c:	68fb      	ldr	r3, [r7, #12]
9000f90e:	e005      	b.n	9000f91c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEENS0_5__ops16_Iter_equals_valIKS3_EEET_SD_SD_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
9000f910:	f107 030c 	add.w	r3, r7, #12
9000f914:	4618      	mov	r0, r3
9000f916:	f7ff fce9 	bl	9000f2ec <_ZN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEppEv>
	  return __last;
9000f91a:	68bb      	ldr	r3, [r7, #8]
    }
9000f91c:	4618      	mov	r0, r3
9000f91e:	3718      	adds	r7, #24
9000f920:	46bd      	mov	sp, r7
9000f922:	bd80      	pop	{r7, pc}

9000f924 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
9000f924:	b480      	push	{r7}
9000f926:	b083      	sub	sp, #12
9000f928:	af00      	add	r7, sp, #0
9000f92a:	6078      	str	r0, [r7, #4]
    { return __it; }
9000f92c:	687b      	ldr	r3, [r7, #4]
9000f92e:	4618      	mov	r0, r3
9000f930:	370c      	adds	r7, #12
9000f932:	46bd      	mov	sp, r7
9000f934:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f938:	4770      	bx	lr

9000f93a <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES8_ET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
9000f93a:	b5b0      	push	{r4, r5, r7, lr}
9000f93c:	b084      	sub	sp, #16
9000f93e:	af00      	add	r7, sp, #0
9000f940:	60f8      	str	r0, [r7, #12]
9000f942:	60b9      	str	r1, [r7, #8]
9000f944:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
9000f946:	68f8      	ldr	r0, [r7, #12]
9000f948:	f000 f841 	bl	9000f9ce <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
9000f94c:	4604      	mov	r4, r0
9000f94e:	68b8      	ldr	r0, [r7, #8]
9000f950:	f000 f83d 	bl	9000f9ce <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
9000f954:	4605      	mov	r5, r0
9000f956:	6878      	ldr	r0, [r7, #4]
9000f958:	f000 f839 	bl	9000f9ce <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
9000f95c:	4603      	mov	r3, r0
9000f95e:	461a      	mov	r2, r3
9000f960:	4629      	mov	r1, r5
9000f962:	4620      	mov	r0, r4
9000f964:	f000 f841 	bl	9000f9ea <_ZSt14__copy_move_a1ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_>
9000f968:	4603      	mov	r3, r0
9000f96a:	4619      	mov	r1, r3
9000f96c:	6878      	ldr	r0, [r7, #4]
9000f96e:	f000 f84c 	bl	9000fa0a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
9000f972:	4603      	mov	r3, r0
    }
9000f974:	4618      	mov	r0, r3
9000f976:	3710      	adds	r7, #16
9000f978:	46bd      	mov	sp, r7
9000f97a:	bdb0      	pop	{r4, r5, r7, pc}

9000f97c <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
9000f97c:	b480      	push	{r7}
9000f97e:	b083      	sub	sp, #12
9000f980:	af00      	add	r7, sp, #0
9000f982:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
9000f984:	687b      	ldr	r3, [r7, #4]
9000f986:	4618      	mov	r0, r3
9000f988:	370c      	adds	r7, #12
9000f98a:	46bd      	mov	sp, r7
9000f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f990:	4770      	bx	lr

9000f992 <_ZSt8_DestroyIPP11ROCANDriverS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
9000f992:	b580      	push	{r7, lr}
9000f994:	b084      	sub	sp, #16
9000f996:	af00      	add	r7, sp, #0
9000f998:	60f8      	str	r0, [r7, #12]
9000f99a:	60b9      	str	r1, [r7, #8]
9000f99c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
9000f99e:	68b9      	ldr	r1, [r7, #8]
9000f9a0:	68f8      	ldr	r0, [r7, #12]
9000f9a2:	f000 f849 	bl	9000fa38 <_ZSt8_DestroyIPP11ROCANDriverEvT_S3_>
    }
9000f9a6:	bf00      	nop
9000f9a8:	3710      	adds	r7, #16
9000f9aa:	46bd      	mov	sp, r7
9000f9ac:	bd80      	pop	{r7, pc}

9000f9ae <_ZN9__gnu_cxx13new_allocatorIP11ROCANDriverE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
9000f9ae:	b580      	push	{r7, lr}
9000f9b0:	b084      	sub	sp, #16
9000f9b2:	af00      	add	r7, sp, #0
9000f9b4:	60f8      	str	r0, [r7, #12]
9000f9b6:	60b9      	str	r1, [r7, #8]
9000f9b8:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
9000f9ba:	687b      	ldr	r3, [r7, #4]
9000f9bc:	009b      	lsls	r3, r3, #2
9000f9be:	4619      	mov	r1, r3
9000f9c0:	68b8      	ldr	r0, [r7, #8]
9000f9c2:	f000 fdf1 	bl	900105a8 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
9000f9c6:	bf00      	nop
9000f9c8:	3710      	adds	r7, #16
9000f9ca:	46bd      	mov	sp, r7
9000f9cc:	bd80      	pop	{r7, pc}

9000f9ce <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
9000f9ce:	b580      	push	{r7, lr}
9000f9d0:	b082      	sub	sp, #8
9000f9d2:	af00      	add	r7, sp, #0
9000f9d4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
9000f9d6:	1d3b      	adds	r3, r7, #4
9000f9d8:	4618      	mov	r0, r3
9000f9da:	f7ff fd50 	bl	9000f47e <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEE4baseEv>
9000f9de:	4603      	mov	r3, r0
9000f9e0:	681b      	ldr	r3, [r3, #0]
9000f9e2:	4618      	mov	r0, r3
9000f9e4:	3708      	adds	r7, #8
9000f9e6:	46bd      	mov	sp, r7
9000f9e8:	bd80      	pop	{r7, pc}

9000f9ea <_ZSt14__copy_move_a1ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
9000f9ea:	b580      	push	{r7, lr}
9000f9ec:	b084      	sub	sp, #16
9000f9ee:	af00      	add	r7, sp, #0
9000f9f0:	60f8      	str	r0, [r7, #12]
9000f9f2:	60b9      	str	r1, [r7, #8]
9000f9f4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
9000f9f6:	687a      	ldr	r2, [r7, #4]
9000f9f8:	68b9      	ldr	r1, [r7, #8]
9000f9fa:	68f8      	ldr	r0, [r7, #12]
9000f9fc:	f000 f829 	bl	9000fa52 <_ZSt14__copy_move_a2ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_>
9000fa00:	4603      	mov	r3, r0
9000fa02:	4618      	mov	r0, r3
9000fa04:	3710      	adds	r7, #16
9000fa06:	46bd      	mov	sp, r7
9000fa08:	bd80      	pop	{r7, pc}

9000fa0a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
9000fa0a:	b580      	push	{r7, lr}
9000fa0c:	b082      	sub	sp, #8
9000fa0e:	af00      	add	r7, sp, #0
9000fa10:	6078      	str	r0, [r7, #4]
9000fa12:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
9000fa14:	6878      	ldr	r0, [r7, #4]
9000fa16:	f7ff ffda 	bl	9000f9ce <_ZSt12__niter_baseIPP11ROCANDriverSt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
9000fa1a:	4602      	mov	r2, r0
9000fa1c:	683b      	ldr	r3, [r7, #0]
9000fa1e:	1a9b      	subs	r3, r3, r2
9000fa20:	109b      	asrs	r3, r3, #2
9000fa22:	461a      	mov	r2, r3
9000fa24:	1d3b      	adds	r3, r7, #4
9000fa26:	4611      	mov	r1, r2
9000fa28:	4618      	mov	r0, r3
9000fa2a:	f7ff fd58 	bl	9000f4de <_ZNK9__gnu_cxx17__normal_iteratorIPP11ROCANDriverSt6vectorIS2_SaIS2_EEEplEi>
9000fa2e:	4603      	mov	r3, r0
9000fa30:	4618      	mov	r0, r3
9000fa32:	3708      	adds	r7, #8
9000fa34:	46bd      	mov	sp, r7
9000fa36:	bd80      	pop	{r7, pc}

9000fa38 <_ZSt8_DestroyIPP11ROCANDriverEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
9000fa38:	b580      	push	{r7, lr}
9000fa3a:	b082      	sub	sp, #8
9000fa3c:	af00      	add	r7, sp, #0
9000fa3e:	6078      	str	r0, [r7, #4]
9000fa40:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
9000fa42:	6839      	ldr	r1, [r7, #0]
9000fa44:	6878      	ldr	r0, [r7, #4]
9000fa46:	f000 f814 	bl	9000fa72 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ROCANDriverEEvT_S5_>
    }
9000fa4a:	bf00      	nop
9000fa4c:	3708      	adds	r7, #8
9000fa4e:	46bd      	mov	sp, r7
9000fa50:	bd80      	pop	{r7, pc}

9000fa52 <_ZSt14__copy_move_a2ILb1EPP11ROCANDriverS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
9000fa52:	b580      	push	{r7, lr}
9000fa54:	b084      	sub	sp, #16
9000fa56:	af00      	add	r7, sp, #0
9000fa58:	60f8      	str	r0, [r7, #12]
9000fa5a:	60b9      	str	r1, [r7, #8]
9000fa5c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
9000fa5e:	687a      	ldr	r2, [r7, #4]
9000fa60:	68b9      	ldr	r1, [r7, #8]
9000fa62:	68f8      	ldr	r0, [r7, #12]
9000fa64:	f000 f810 	bl	9000fa88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ROCANDriverEEPT_PKS5_S8_S6_>
9000fa68:	4603      	mov	r3, r0
    }
9000fa6a:	4618      	mov	r0, r3
9000fa6c:	3710      	adds	r7, #16
9000fa6e:	46bd      	mov	sp, r7
9000fa70:	bd80      	pop	{r7, pc}

9000fa72 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP11ROCANDriverEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
9000fa72:	b480      	push	{r7}
9000fa74:	b083      	sub	sp, #12
9000fa76:	af00      	add	r7, sp, #0
9000fa78:	6078      	str	r0, [r7, #4]
9000fa7a:	6039      	str	r1, [r7, #0]
9000fa7c:	bf00      	nop
9000fa7e:	370c      	adds	r7, #12
9000fa80:	46bd      	mov	sp, r7
9000fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
9000fa86:	4770      	bx	lr

9000fa88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ROCANDriverEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
9000fa88:	b580      	push	{r7, lr}
9000fa8a:	b086      	sub	sp, #24
9000fa8c:	af00      	add	r7, sp, #0
9000fa8e:	60f8      	str	r0, [r7, #12]
9000fa90:	60b9      	str	r1, [r7, #8]
9000fa92:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
9000fa94:	68ba      	ldr	r2, [r7, #8]
9000fa96:	68fb      	ldr	r3, [r7, #12]
9000fa98:	1ad3      	subs	r3, r2, r3
9000fa9a:	109b      	asrs	r3, r3, #2
9000fa9c:	617b      	str	r3, [r7, #20]
	  if (_Num)
9000fa9e:	697b      	ldr	r3, [r7, #20]
9000faa0:	2b00      	cmp	r3, #0
9000faa2:	d006      	beq.n	9000fab2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP11ROCANDriverEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
9000faa4:	697b      	ldr	r3, [r7, #20]
9000faa6:	009b      	lsls	r3, r3, #2
9000faa8:	461a      	mov	r2, r3
9000faaa:	68f9      	ldr	r1, [r7, #12]
9000faac:	6878      	ldr	r0, [r7, #4]
9000faae:	f001 fad5 	bl	9001105c <memmove>
	  return __result + _Num;
9000fab2:	697b      	ldr	r3, [r7, #20]
9000fab4:	009b      	lsls	r3, r3, #2
9000fab6:	687a      	ldr	r2, [r7, #4]
9000fab8:	4413      	add	r3, r2
	}
9000faba:	4618      	mov	r0, r3
9000fabc:	3718      	adds	r7, #24
9000fabe:	46bd      	mov	sp, r7
9000fac0:	bd80      	pop	{r7, pc}
	...

9000fac4 <_Z41__static_initialization_and_destruction_0ii>:

std::vector<ROCANDriver*> ROCANDriver::FDCANDriver_list;
9000fac4:	b580      	push	{r7, lr}
9000fac6:	b082      	sub	sp, #8
9000fac8:	af00      	add	r7, sp, #0
9000faca:	6078      	str	r0, [r7, #4]
9000facc:	6039      	str	r1, [r7, #0]
9000face:	687b      	ldr	r3, [r7, #4]
9000fad0:	2b01      	cmp	r3, #1
9000fad2:	d107      	bne.n	9000fae4 <_Z41__static_initialization_and_destruction_0ii+0x20>
9000fad4:	683b      	ldr	r3, [r7, #0]
9000fad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000fada:	4293      	cmp	r3, r2
9000fadc:	d102      	bne.n	9000fae4 <_Z41__static_initialization_and_destruction_0ii+0x20>
9000fade:	4809      	ldr	r0, [pc, #36]	; (9000fb04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
9000fae0:	f7ff fb53 	bl	9000f18a <_ZNSt6vectorIP11ROCANDriverSaIS1_EEC1Ev>
9000fae4:	687b      	ldr	r3, [r7, #4]
9000fae6:	2b00      	cmp	r3, #0
9000fae8:	d107      	bne.n	9000fafa <_Z41__static_initialization_and_destruction_0ii+0x36>
9000faea:	683b      	ldr	r3, [r7, #0]
9000faec:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000faf0:	4293      	cmp	r3, r2
9000faf2:	d102      	bne.n	9000fafa <_Z41__static_initialization_and_destruction_0ii+0x36>
9000faf4:	4803      	ldr	r0, [pc, #12]	; (9000fb04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
9000faf6:	f000 f807 	bl	9000fb08 <_ZNSt6vectorIP11ROCANDriverSaIS1_EED1Ev>
9000fafa:	bf00      	nop
9000fafc:	3708      	adds	r7, #8
9000fafe:	46bd      	mov	sp, r7
9000fb00:	bd80      	pop	{r7, pc}
9000fb02:	bf00      	nop
9000fb04:	24010440 	.word	0x24010440

9000fb08 <_ZNSt6vectorIP11ROCANDriverSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
9000fb08:	b5b0      	push	{r4, r5, r7, lr}
9000fb0a:	b082      	sub	sp, #8
9000fb0c:	af00      	add	r7, sp, #0
9000fb0e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
9000fb10:	687b      	ldr	r3, [r7, #4]
9000fb12:	681c      	ldr	r4, [r3, #0]
9000fb14:	687b      	ldr	r3, [r7, #4]
9000fb16:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
9000fb18:	687b      	ldr	r3, [r7, #4]
9000fb1a:	4618      	mov	r0, r3
9000fb1c:	f7ff ff2e 	bl	9000f97c <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EE19_M_get_Tp_allocatorEv>
9000fb20:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
9000fb22:	461a      	mov	r2, r3
9000fb24:	4629      	mov	r1, r5
9000fb26:	4620      	mov	r0, r4
9000fb28:	f7ff ff33 	bl	9000f992 <_ZSt8_DestroyIPP11ROCANDriverS1_EvT_S3_RSaIT0_E>
      }
9000fb2c:	687b      	ldr	r3, [r7, #4]
9000fb2e:	4618      	mov	r0, r3
9000fb30:	f7ff fc14 	bl	9000f35c <_ZNSt12_Vector_baseIP11ROCANDriverSaIS1_EED1Ev>
9000fb34:	687b      	ldr	r3, [r7, #4]
9000fb36:	4618      	mov	r0, r3
9000fb38:	3708      	adds	r7, #8
9000fb3a:	46bd      	mov	sp, r7
9000fb3c:	bdb0      	pop	{r4, r5, r7, pc}

9000fb3e <_GLOBAL__sub_I_dlc2len>:
9000fb3e:	b580      	push	{r7, lr}
9000fb40:	af00      	add	r7, sp, #0
9000fb42:	f64f 71ff 	movw	r1, #65535	; 0xffff
9000fb46:	2001      	movs	r0, #1
9000fb48:	f7ff ffbc 	bl	9000fac4 <_Z41__static_initialization_and_destruction_0ii>
9000fb4c:	bd80      	pop	{r7, pc}

9000fb4e <_GLOBAL__sub_D_dlc2len>:
9000fb4e:	b580      	push	{r7, lr}
9000fb50:	af00      	add	r7, sp, #0
9000fb52:	f64f 71ff 	movw	r1, #65535	; 0xffff
9000fb56:	2000      	movs	r0, #0
9000fb58:	f7ff ffb4 	bl	9000fac4 <_Z41__static_initialization_and_destruction_0ii>
9000fb5c:	bd80      	pop	{r7, pc}
	...

9000fb60 <_Z20handle_dummyCallbackhP23DummySystem_DummyPacket>:
#include "Handlers.h"
#include "Telemetry.h"
#include "stdio.h"

void handle_dummyCallback(uint8_t sender_id, DummySystem_DummyPacket* packet) {
9000fb60:	b580      	push	{r7, lr}
9000fb62:	b082      	sub	sp, #8
9000fb64:	af00      	add	r7, sp, #0
9000fb66:	4603      	mov	r3, r0
9000fb68:	6039      	str	r1, [r7, #0]
9000fb6a:	71fb      	strb	r3, [r7, #7]
	printf("Dummy packet received from [%d] with value %d \n", sender_id, packet->data);
9000fb6c:	79f9      	ldrb	r1, [r7, #7]
9000fb6e:	683b      	ldr	r3, [r7, #0]
9000fb70:	681b      	ldr	r3, [r3, #0]
9000fb72:	461a      	mov	r2, r3
9000fb74:	4803      	ldr	r0, [pc, #12]	; (9000fb84 <_Z20handle_dummyCallbackhP23DummySystem_DummyPacket+0x24>)
9000fb76:	f001 ff69 	bl	90011a4c <iprintf>
}
9000fb7a:	bf00      	nop
9000fb7c:	3708      	adds	r7, #8
9000fb7e:	46bd      	mov	sp, r7
9000fb80:	bd80      	pop	{r7, pc}
9000fb82:	bf00      	nop
9000fb84:	9001400c 	.word	0x9001400c

9000fb88 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>:
#include <stdio.h>
#include <string.h>

class ProberThread : Thread {
public:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", osPriorityBelowNormal), hi2c(hi2c), instance(nullptr), i2cNum(0) {}
9000fb88:	b580      	push	{r7, lr}
9000fb8a:	b082      	sub	sp, #8
9000fb8c:	af00      	add	r7, sp, #0
9000fb8e:	6078      	str	r0, [r7, #4]
9000fb90:	6039      	str	r1, [r7, #0]
9000fb92:	687b      	ldr	r3, [r7, #4]
9000fb94:	2210      	movs	r2, #16
9000fb96:	490b      	ldr	r1, [pc, #44]	; (9000fbc4 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef+0x3c>)
9000fb98:	4618      	mov	r0, r3
9000fb9a:	f000 fac1 	bl	90010120 <_ZN6ThreadC1EPKc12osPriority_t>
9000fb9e:	4a0a      	ldr	r2, [pc, #40]	; (9000fbc8 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef+0x40>)
9000fba0:	687b      	ldr	r3, [r7, #4]
9000fba2:	601a      	str	r2, [r3, #0]
9000fba4:	687b      	ldr	r3, [r7, #4]
9000fba6:	683a      	ldr	r2, [r7, #0]
9000fba8:	639a      	str	r2, [r3, #56]	; 0x38
9000fbaa:	687b      	ldr	r3, [r7, #4]
9000fbac:	2200      	movs	r2, #0
9000fbae:	641a      	str	r2, [r3, #64]	; 0x40
9000fbb0:	687b      	ldr	r3, [r7, #4]
9000fbb2:	2200      	movs	r2, #0
9000fbb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000fbb8:	687b      	ldr	r3, [r7, #4]
9000fbba:	4618      	mov	r0, r3
9000fbbc:	3708      	adds	r7, #8
9000fbbe:	46bd      	mov	sp, r7
9000fbc0:	bd80      	pop	{r7, pc}
9000fbc2:	bf00      	nop
9000fbc4:	9001403c 	.word	0x9001403c
9000fbc8:	9001450c 	.word	0x9001450c

9000fbcc <__tcf_0>:
#include "Prober.h"
#include "i2c.h"


void initCortex() {
	static ProberThread prober1(&hi2c1);
9000fbcc:	b580      	push	{r7, lr}
9000fbce:	af00      	add	r7, sp, #0
9000fbd0:	4801      	ldr	r0, [pc, #4]	; (9000fbd8 <__tcf_0+0xc>)
9000fbd2:	f000 f833 	bl	9000fc3c <_ZN12ProberThreadD1Ev>
9000fbd6:	bd80      	pop	{r7, pc}
9000fbd8:	2401044c 	.word	0x2401044c

9000fbdc <_Z10initCortexv>:
void initCortex() {
9000fbdc:	b580      	push	{r7, lr}
9000fbde:	af00      	add	r7, sp, #0
	static ProberThread prober1(&hi2c1);
9000fbe0:	4b12      	ldr	r3, [pc, #72]	; (9000fc2c <_Z10initCortexv+0x50>)
9000fbe2:	781b      	ldrb	r3, [r3, #0]
9000fbe4:	f3bf 8f5b 	dmb	ish
9000fbe8:	b2db      	uxtb	r3, r3
9000fbea:	f003 0301 	and.w	r3, r3, #1
9000fbee:	2b00      	cmp	r3, #0
9000fbf0:	bf0c      	ite	eq
9000fbf2:	2301      	moveq	r3, #1
9000fbf4:	2300      	movne	r3, #0
9000fbf6:	b2db      	uxtb	r3, r3
9000fbf8:	2b00      	cmp	r3, #0
9000fbfa:	d014      	beq.n	9000fc26 <_Z10initCortexv+0x4a>
9000fbfc:	480b      	ldr	r0, [pc, #44]	; (9000fc2c <_Z10initCortexv+0x50>)
9000fbfe:	f000 fceb 	bl	900105d8 <__cxa_guard_acquire>
9000fc02:	4603      	mov	r3, r0
9000fc04:	2b00      	cmp	r3, #0
9000fc06:	bf14      	ite	ne
9000fc08:	2301      	movne	r3, #1
9000fc0a:	2300      	moveq	r3, #0
9000fc0c:	b2db      	uxtb	r3, r3
9000fc0e:	2b00      	cmp	r3, #0
9000fc10:	d009      	beq.n	9000fc26 <_Z10initCortexv+0x4a>
9000fc12:	4907      	ldr	r1, [pc, #28]	; (9000fc30 <_Z10initCortexv+0x54>)
9000fc14:	4807      	ldr	r0, [pc, #28]	; (9000fc34 <_Z10initCortexv+0x58>)
9000fc16:	f7ff ffb7 	bl	9000fb88 <_ZN12ProberThreadC1EP19__I2C_HandleTypeDef>
9000fc1a:	4807      	ldr	r0, [pc, #28]	; (9000fc38 <_Z10initCortexv+0x5c>)
9000fc1c:	f001 f8e6 	bl	90010dec <atexit>
9000fc20:	4802      	ldr	r0, [pc, #8]	; (9000fc2c <_Z10initCortexv+0x50>)
9000fc22:	f000 fce5 	bl	900105f0 <__cxa_guard_release>
//	static ProberThread prober2(&hi2c2);
//	static ProberThread prober3(&hi2c4);
}
9000fc26:	bf00      	nop
9000fc28:	bd80      	pop	{r7, pc}
9000fc2a:	bf00      	nop
9000fc2c:	24010494 	.word	0x24010494
9000fc30:	240002ac 	.word	0x240002ac
9000fc34:	2401044c 	.word	0x2401044c
9000fc38:	9000fbcd 	.word	0x9000fbcd

9000fc3c <_ZN12ProberThreadD1Ev>:
class ProberThread : Thread {
9000fc3c:	b580      	push	{r7, lr}
9000fc3e:	b082      	sub	sp, #8
9000fc40:	af00      	add	r7, sp, #0
9000fc42:	6078      	str	r0, [r7, #4]
9000fc44:	4a05      	ldr	r2, [pc, #20]	; (9000fc5c <_ZN12ProberThreadD1Ev+0x20>)
9000fc46:	687b      	ldr	r3, [r7, #4]
9000fc48:	601a      	str	r2, [r3, #0]
9000fc4a:	687b      	ldr	r3, [r7, #4]
9000fc4c:	4618      	mov	r0, r3
9000fc4e:	f7fe fea5 	bl	9000e99c <_ZN6ThreadD1Ev>
9000fc52:	687b      	ldr	r3, [r7, #4]
9000fc54:	4618      	mov	r0, r3
9000fc56:	3708      	adds	r7, #8
9000fc58:	46bd      	mov	sp, r7
9000fc5a:	bd80      	pop	{r7, pc}
9000fc5c:	9001450c 	.word	0x9001450c

9000fc60 <_ZN12ProberThreadD0Ev>:
9000fc60:	b580      	push	{r7, lr}
9000fc62:	b082      	sub	sp, #8
9000fc64:	af00      	add	r7, sp, #0
9000fc66:	6078      	str	r0, [r7, #4]
9000fc68:	6878      	ldr	r0, [r7, #4]
9000fc6a:	f7ff ffe7 	bl	9000fc3c <_ZN12ProberThreadD1Ev>
9000fc6e:	2148      	movs	r1, #72	; 0x48
9000fc70:	6878      	ldr	r0, [r7, #4]
9000fc72:	f000 fc99 	bl	900105a8 <_ZdlPvj>
9000fc76:	687b      	ldr	r3, [r7, #4]
9000fc78:	4618      	mov	r0, r3
9000fc7a:	3708      	adds	r7, #8
9000fc7c:	46bd      	mov	sp, r7
9000fc7e:	bd80      	pop	{r7, pc}

9000fc80 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
9000fc80:	b480      	push	{r7}
9000fc82:	b083      	sub	sp, #12
9000fc84:	af00      	add	r7, sp, #0
9000fc86:	6078      	str	r0, [r7, #4]
9000fc88:	6039      	str	r1, [r7, #0]
9000fc8a:	683b      	ldr	r3, [r7, #0]
9000fc8c:	4618      	mov	r0, r3
9000fc8e:	370c      	adds	r7, #12
9000fc90:	46bd      	mov	sp, r7
9000fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
9000fc96:	4770      	bx	lr

9000fc98 <_Z14setupTelemetryv>:
//NetworkBus UART3_network(&UART3_driver);
////NetworkBus UART4_network(&UART4_driver);
//NetworkBus UART5_network(&UART5_driver);
//NetworkBus UART8_network(&UART8_driver);

void setupTelemetry() {
9000fc98:	b580      	push	{r7, lr}
9000fc9a:	b084      	sub	sp, #16
9000fc9c:	af00      	add	r7, sp, #0
//	UART8_network.forward<DummySystem_DummyPacket>(&JetsonNetwork);
//

//	STMUARTDriver_list.push_back(&UART3_driver);
//	STMUARTDriver_list.push_back(&UART5_driver);
	FDCAN1_network.handle<DummySystem_DummyPacket>(&handle_dummyCallback);
9000fc9e:	463b      	mov	r3, r7
9000fca0:	4908      	ldr	r1, [pc, #32]	; (9000fcc4 <_Z14setupTelemetryv+0x2c>)
9000fca2:	4618      	mov	r0, r3
9000fca4:	f000 f812 	bl	9000fccc <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1IPS2_vvEET_>
9000fca8:	463b      	mov	r3, r7
9000fcaa:	4619      	mov	r1, r3
9000fcac:	4806      	ldr	r0, [pc, #24]	; (9000fcc8 <_Z14setupTelemetryv+0x30>)
9000fcae:	f7fd fe73 	bl	9000d998 <_ZN10MessageBus6handleI23DummySystem_DummyPacketEEbSt8functionIFvhPT_EE>
9000fcb2:	463b      	mov	r3, r7
9000fcb4:	4618      	mov	r0, r3
9000fcb6:	f7fe f8e1 	bl	9000de7c <_ZNSt8functionIFvhP23DummySystem_DummyPacketEED1Ev>
	network.handle<hd_voltmeter_tare_packet>(&handle_voltmeter_tare);
	//network.handle<avionics_current_packet>(&handle_current)

#endif

}
9000fcba:	bf00      	nop
9000fcbc:	3710      	adds	r7, #16
9000fcbe:	46bd      	mov	sp, r7
9000fcc0:	bd80      	pop	{r7, pc}
9000fcc2:	bf00      	nop
9000fcc4:	9000fb61 	.word	0x9000fb61
9000fcc8:	24010bac 	.word	0x24010bac

9000fccc <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1IPS2_vvEET_>:
      function<_Res(_ArgTypes...)>::
9000fccc:	b590      	push	{r4, r7, lr}
9000fcce:	b083      	sub	sp, #12
9000fcd0:	af00      	add	r7, sp, #0
9000fcd2:	6078      	str	r0, [r7, #4]
9000fcd4:	6039      	str	r1, [r7, #0]
      : _Function_base()
9000fcd6:	687b      	ldr	r3, [r7, #4]
9000fcd8:	4618      	mov	r0, r3
9000fcda:	f7fb ff67 	bl	9000bbac <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
9000fcde:	683b      	ldr	r3, [r7, #0]
9000fce0:	4618      	mov	r0, r3
9000fce2:	f000 f81d 	bl	9000fd20 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE21_M_not_empty_functionIS3_EEbPT_>
9000fce6:	4603      	mov	r3, r0
9000fce8:	2b00      	cmp	r3, #0
9000fcea:	d00f      	beq.n	9000fd0c <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1IPS2_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
9000fcec:	687c      	ldr	r4, [r7, #4]
9000fcee:	463b      	mov	r3, r7
9000fcf0:	4618      	mov	r0, r3
9000fcf2:	f000 f825 	bl	9000fd40 <_ZSt4moveIRPFvhP23DummySystem_DummyPacketEEONSt16remove_referenceIT_E4typeEOS6_>
9000fcf6:	4603      	mov	r3, r0
9000fcf8:	4619      	mov	r1, r3
9000fcfa:	4620      	mov	r0, r4
9000fcfc:	f000 f82b 	bl	9000fd56 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
9000fd00:	687b      	ldr	r3, [r7, #4]
9000fd02:	4a05      	ldr	r2, [pc, #20]	; (9000fd18 <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1IPS2_vvEET_+0x4c>)
9000fd04:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
9000fd06:	687b      	ldr	r3, [r7, #4]
9000fd08:	4a04      	ldr	r2, [pc, #16]	; (9000fd1c <_ZNSt8functionIFvhP23DummySystem_DummyPacketEEC1IPS2_vvEET_+0x50>)
9000fd0a:	609a      	str	r2, [r3, #8]
      }
9000fd0c:	687b      	ldr	r3, [r7, #4]
9000fd0e:	4618      	mov	r0, r3
9000fd10:	370c      	adds	r7, #12
9000fd12:	46bd      	mov	sp, r7
9000fd14:	bd90      	pop	{r4, r7, pc}
9000fd16:	bf00      	nop
9000fd18:	9000fd7b 	.word	0x9000fd7b
9000fd1c:	9000fdb1 	.word	0x9000fdb1

9000fd20 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
9000fd20:	b480      	push	{r7}
9000fd22:	b083      	sub	sp, #12
9000fd24:	af00      	add	r7, sp, #0
9000fd26:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
9000fd28:	687b      	ldr	r3, [r7, #4]
9000fd2a:	2b00      	cmp	r3, #0
9000fd2c:	bf14      	ite	ne
9000fd2e:	2301      	movne	r3, #1
9000fd30:	2300      	moveq	r3, #0
9000fd32:	b2db      	uxtb	r3, r3
9000fd34:	4618      	mov	r0, r3
9000fd36:	370c      	adds	r7, #12
9000fd38:	46bd      	mov	sp, r7
9000fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000fd3e:	4770      	bx	lr

9000fd40 <_ZSt4moveIRPFvhP23DummySystem_DummyPacketEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
9000fd40:	b480      	push	{r7}
9000fd42:	b083      	sub	sp, #12
9000fd44:	af00      	add	r7, sp, #0
9000fd46:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
9000fd48:	687b      	ldr	r3, [r7, #4]
9000fd4a:	4618      	mov	r0, r3
9000fd4c:	370c      	adds	r7, #12
9000fd4e:	46bd      	mov	sp, r7
9000fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
9000fd54:	4770      	bx	lr

9000fd56 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
9000fd56:	b590      	push	{r4, r7, lr}
9000fd58:	b083      	sub	sp, #12
9000fd5a:	af00      	add	r7, sp, #0
9000fd5c:	6078      	str	r0, [r7, #4]
9000fd5e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
9000fd60:	6838      	ldr	r0, [r7, #0]
9000fd62:	f7ff ffed 	bl	9000fd40 <_ZSt4moveIRPFvhP23DummySystem_DummyPacketEEONSt16remove_referenceIT_E4typeEOS6_>
9000fd66:	4603      	mov	r3, r0
9000fd68:	4622      	mov	r2, r4
9000fd6a:	4619      	mov	r1, r3
9000fd6c:	6878      	ldr	r0, [r7, #4]
9000fd6e:	f000 f84b 	bl	9000fe08 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
9000fd72:	bf00      	nop
9000fd74:	370c      	adds	r7, #12
9000fd76:	46bd      	mov	sp, r7
9000fd78:	bd90      	pop	{r4, r7, pc}

9000fd7a <_ZNSt17_Function_handlerIFvhP23DummySystem_DummyPacketEPS2_E9_M_invokeERKSt9_Any_dataOhOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
9000fd7a:	b5b0      	push	{r4, r5, r7, lr}
9000fd7c:	b084      	sub	sp, #16
9000fd7e:	af00      	add	r7, sp, #0
9000fd80:	60f8      	str	r0, [r7, #12]
9000fd82:	60b9      	str	r1, [r7, #8]
9000fd84:	607a      	str	r2, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
9000fd86:	68f8      	ldr	r0, [r7, #12]
9000fd88:	f000 f857 	bl	9000fe3a <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE14_M_get_pointerERKSt9_Any_data>
9000fd8c:	4604      	mov	r4, r0
9000fd8e:	68b8      	ldr	r0, [r7, #8]
9000fd90:	f7fc f807 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000fd94:	4605      	mov	r5, r0
9000fd96:	6878      	ldr	r0, [r7, #4]
9000fd98:	f7fe f99b 	bl	9000e0d2 <_ZSt7forwardIP23DummySystem_DummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>
9000fd9c:	4603      	mov	r3, r0
9000fd9e:	461a      	mov	r2, r3
9000fda0:	4629      	mov	r1, r5
9000fda2:	4620      	mov	r0, r4
9000fda4:	f000 f85a 	bl	9000fe5c <_ZSt10__invoke_rIvRPFvhP23DummySystem_DummyPacketEJhS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
9000fda8:	bf00      	nop
      }
9000fdaa:	3710      	adds	r7, #16
9000fdac:	46bd      	mov	sp, r7
9000fdae:	bdb0      	pop	{r4, r5, r7, pc}

9000fdb0 <_ZNSt17_Function_handlerIFvhP23DummySystem_DummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
9000fdb0:	b590      	push	{r4, r7, lr}
9000fdb2:	b085      	sub	sp, #20
9000fdb4:	af00      	add	r7, sp, #0
9000fdb6:	60f8      	str	r0, [r7, #12]
9000fdb8:	60b9      	str	r1, [r7, #8]
9000fdba:	4613      	mov	r3, r2
9000fdbc:	71fb      	strb	r3, [r7, #7]
	switch (__op)
9000fdbe:	79fb      	ldrb	r3, [r7, #7]
9000fdc0:	2b00      	cmp	r3, #0
9000fdc2:	d002      	beq.n	9000fdca <_ZNSt17_Function_handlerIFvhP23DummySystem_DummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1a>
9000fdc4:	2b01      	cmp	r3, #1
9000fdc6:	d007      	beq.n	9000fdd8 <_ZNSt17_Function_handlerIFvhP23DummySystem_DummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
9000fdc8:	e010      	b.n	9000fdec <_ZNSt17_Function_handlerIFvhP23DummySystem_DummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
9000fdca:	68f8      	ldr	r0, [r7, #12]
9000fdcc:	f7fc fcf1 	bl	9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
9000fdd0:	4603      	mov	r3, r0
9000fdd2:	4a0c      	ldr	r2, [pc, #48]	; (9000fe04 <_ZNSt17_Function_handlerIFvhP23DummySystem_DummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x54>)
9000fdd4:	601a      	str	r2, [r3, #0]
	    break;
9000fdd6:	e00f      	b.n	9000fdf8 <_ZNSt17_Function_handlerIFvhP23DummySystem_DummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x48>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
9000fdd8:	68f8      	ldr	r0, [r7, #12]
9000fdda:	f000 f85a 	bl	9000fe92 <_ZNSt9_Any_data9_M_accessIPPFvhP23DummySystem_DummyPacketEEERT_v>
9000fdde:	4604      	mov	r4, r0
9000fde0:	68b8      	ldr	r0, [r7, #8]
9000fde2:	f000 f82a 	bl	9000fe3a <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE14_M_get_pointerERKSt9_Any_data>
9000fde6:	4603      	mov	r3, r0
9000fde8:	6023      	str	r3, [r4, #0]
	    break;
9000fdea:	e005      	b.n	9000fdf8 <_ZNSt17_Function_handlerIFvhP23DummySystem_DummyPacketEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x48>
	    _Base::_M_manager(__dest, __source, __op);
9000fdec:	79fb      	ldrb	r3, [r7, #7]
9000fdee:	461a      	mov	r2, r3
9000fdf0:	68b9      	ldr	r1, [r7, #8]
9000fdf2:	68f8      	ldr	r0, [r7, #12]
9000fdf4:	f000 f85a 	bl	9000feac <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
9000fdf8:	2300      	movs	r3, #0
      }
9000fdfa:	4618      	mov	r0, r3
9000fdfc:	3714      	adds	r7, #20
9000fdfe:	46bd      	mov	sp, r7
9000fe00:	bd90      	pop	{r4, r7, pc}
9000fe02:	bf00      	nop
9000fe04:	90014478 	.word	0x90014478

9000fe08 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
9000fe08:	b590      	push	{r4, r7, lr}
9000fe0a:	b085      	sub	sp, #20
9000fe0c:	af00      	add	r7, sp, #0
9000fe0e:	60f8      	str	r0, [r7, #12]
9000fe10:	60b9      	str	r1, [r7, #8]
9000fe12:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
9000fe14:	68b8      	ldr	r0, [r7, #8]
9000fe16:	f7ff ff93 	bl	9000fd40 <_ZSt4moveIRPFvhP23DummySystem_DummyPacketEEONSt16remove_referenceIT_E4typeEOS6_>
9000fe1a:	4603      	mov	r3, r0
9000fe1c:	681c      	ldr	r4, [r3, #0]
9000fe1e:	68f8      	ldr	r0, [r7, #12]
9000fe20:	f7fc f876 	bl	9000bf10 <_ZNSt9_Any_data9_M_accessEv>
9000fe24:	4603      	mov	r3, r0
9000fe26:	4619      	mov	r1, r3
9000fe28:	2004      	movs	r0, #4
9000fe2a:	f7ff ff29 	bl	9000fc80 <_ZnwjPv>
9000fe2e:	4603      	mov	r3, r0
9000fe30:	601c      	str	r4, [r3, #0]
9000fe32:	bf00      	nop
9000fe34:	3714      	adds	r7, #20
9000fe36:	46bd      	mov	sp, r7
9000fe38:	bd90      	pop	{r4, r7, pc}

9000fe3a <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
9000fe3a:	b580      	push	{r7, lr}
9000fe3c:	b084      	sub	sp, #16
9000fe3e:	af00      	add	r7, sp, #0
9000fe40:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
9000fe42:	6878      	ldr	r0, [r7, #4]
9000fe44:	f000 f86c 	bl	9000ff20 <_ZNKSt9_Any_data9_M_accessIPFvhP23DummySystem_DummyPacketEEERKT_v>
9000fe48:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
9000fe4a:	68f8      	ldr	r0, [r7, #12]
9000fe4c:	f000 f874 	bl	9000ff38 <_ZSt11__addressofIKPFvhP23DummySystem_DummyPacketEEPT_RS5_>
9000fe50:	4603      	mov	r3, r0
9000fe52:	bf00      	nop
	}
9000fe54:	4618      	mov	r0, r3
9000fe56:	3710      	adds	r7, #16
9000fe58:	46bd      	mov	sp, r7
9000fe5a:	bd80      	pop	{r7, pc}

9000fe5c <_ZSt10__invoke_rIvRPFvhP23DummySystem_DummyPacketEJhS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
9000fe5c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000fe5e:	b085      	sub	sp, #20
9000fe60:	af00      	add	r7, sp, #0
9000fe62:	60f8      	str	r0, [r7, #12]
9000fe64:	60b9      	str	r1, [r7, #8]
9000fe66:	607a      	str	r2, [r7, #4]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
9000fe68:	68f8      	ldr	r0, [r7, #12]
9000fe6a:	f000 f870 	bl	9000ff4e <_ZSt7forwardIRPFvhP23DummySystem_DummyPacketEEOT_RNSt16remove_referenceIS5_E4typeE>
9000fe6e:	4604      	mov	r4, r0
9000fe70:	68b8      	ldr	r0, [r7, #8]
9000fe72:	f7fb ff96 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000fe76:	4605      	mov	r5, r0
9000fe78:	6878      	ldr	r0, [r7, #4]
9000fe7a:	f7fe f92a 	bl	9000e0d2 <_ZSt7forwardIP23DummySystem_DummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>
9000fe7e:	4603      	mov	r3, r0
9000fe80:	462a      	mov	r2, r5
9000fe82:	4621      	mov	r1, r4
9000fe84:	4630      	mov	r0, r6
9000fe86:	f000 f86d 	bl	9000ff64 <_ZSt13__invoke_implIvRPFvhP23DummySystem_DummyPacketEJhS1_EET_St14__invoke_otherOT0_DpOT1_>
    }
9000fe8a:	bf00      	nop
9000fe8c:	3714      	adds	r7, #20
9000fe8e:	46bd      	mov	sp, r7
9000fe90:	bdf0      	pop	{r4, r5, r6, r7, pc}

9000fe92 <_ZNSt9_Any_data9_M_accessIPPFvhP23DummySystem_DummyPacketEEERT_v>:
      _M_access()
9000fe92:	b580      	push	{r7, lr}
9000fe94:	b082      	sub	sp, #8
9000fe96:	af00      	add	r7, sp, #0
9000fe98:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
9000fe9a:	6878      	ldr	r0, [r7, #4]
9000fe9c:	f7fc f838 	bl	9000bf10 <_ZNSt9_Any_data9_M_accessEv>
9000fea0:	4603      	mov	r3, r0
9000fea2:	4618      	mov	r0, r3
9000fea4:	3708      	adds	r7, #8
9000fea6:	46bd      	mov	sp, r7
9000fea8:	bd80      	pop	{r7, pc}
	...

9000feac <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
9000feac:	b5b0      	push	{r4, r5, r7, lr}
9000feae:	b084      	sub	sp, #16
9000feb0:	af00      	add	r7, sp, #0
9000feb2:	60f8      	str	r0, [r7, #12]
9000feb4:	60b9      	str	r1, [r7, #8]
9000feb6:	4613      	mov	r3, r2
9000feb8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
9000feba:	79fb      	ldrb	r3, [r7, #7]
9000febc:	2b03      	cmp	r3, #3
9000febe:	d827      	bhi.n	9000ff10 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x64>
9000fec0:	a201      	add	r2, pc, #4	; (adr r2, 9000fec8 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x1c>)
9000fec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000fec6:	bf00      	nop
9000fec8:	9000fed9 	.word	0x9000fed9
9000fecc:	9000fee7 	.word	0x9000fee7
9000fed0:	9000fefb 	.word	0x9000fefb
9000fed4:	9000ff07 	.word	0x9000ff07
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
9000fed8:	68f8      	ldr	r0, [r7, #12]
9000feda:	f7fc fc6a 	bl	9000c7b2 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
9000fede:	4603      	mov	r3, r0
9000fee0:	4a0e      	ldr	r2, [pc, #56]	; (9000ff1c <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x70>)
9000fee2:	601a      	str	r2, [r3, #0]
	      break;
9000fee4:	e014      	b.n	9000ff10 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x64>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
9000fee6:	68f8      	ldr	r0, [r7, #12]
9000fee8:	f7ff ffd3 	bl	9000fe92 <_ZNSt9_Any_data9_M_accessIPPFvhP23DummySystem_DummyPacketEEERT_v>
9000feec:	4604      	mov	r4, r0
9000feee:	68b8      	ldr	r0, [r7, #8]
9000fef0:	f7ff ffa3 	bl	9000fe3a <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE14_M_get_pointerERKSt9_Any_data>
9000fef4:	4603      	mov	r3, r0
9000fef6:	6023      	str	r3, [r4, #0]
	      break;
9000fef8:	e00a      	b.n	9000ff10 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x64>
	      _M_clone(__dest, __source, _Local_storage());
9000fefa:	462a      	mov	r2, r5
9000fefc:	68b9      	ldr	r1, [r7, #8]
9000fefe:	68f8      	ldr	r0, [r7, #12]
9000ff00:	f000 f84d 	bl	9000ff9e <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
9000ff04:	e004      	b.n	9000ff10 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x64>
	      _M_destroy(__dest, _Local_storage());
9000ff06:	4621      	mov	r1, r4
9000ff08:	68f8      	ldr	r0, [r7, #12]
9000ff0a:	f000 f861 	bl	9000ffd0 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
9000ff0e:	bf00      	nop
	  return false;
9000ff10:	2300      	movs	r3, #0
	}
9000ff12:	4618      	mov	r0, r3
9000ff14:	3710      	adds	r7, #16
9000ff16:	46bd      	mov	sp, r7
9000ff18:	bdb0      	pop	{r4, r5, r7, pc}
9000ff1a:	bf00      	nop
9000ff1c:	90014478 	.word	0x90014478

9000ff20 <_ZNKSt9_Any_data9_M_accessIPFvhP23DummySystem_DummyPacketEEERKT_v>:
      _M_access() const
9000ff20:	b580      	push	{r7, lr}
9000ff22:	b082      	sub	sp, #8
9000ff24:	af00      	add	r7, sp, #0
9000ff26:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
9000ff28:	6878      	ldr	r0, [r7, #4]
9000ff2a:	f7fb fffc 	bl	9000bf26 <_ZNKSt9_Any_data9_M_accessEv>
9000ff2e:	4603      	mov	r3, r0
9000ff30:	4618      	mov	r0, r3
9000ff32:	3708      	adds	r7, #8
9000ff34:	46bd      	mov	sp, r7
9000ff36:	bd80      	pop	{r7, pc}

9000ff38 <_ZSt11__addressofIKPFvhP23DummySystem_DummyPacketEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
9000ff38:	b480      	push	{r7}
9000ff3a:	b083      	sub	sp, #12
9000ff3c:	af00      	add	r7, sp, #0
9000ff3e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
9000ff40:	687b      	ldr	r3, [r7, #4]
9000ff42:	4618      	mov	r0, r3
9000ff44:	370c      	adds	r7, #12
9000ff46:	46bd      	mov	sp, r7
9000ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ff4c:	4770      	bx	lr

9000ff4e <_ZSt7forwardIRPFvhP23DummySystem_DummyPacketEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
9000ff4e:	b480      	push	{r7}
9000ff50:	b083      	sub	sp, #12
9000ff52:	af00      	add	r7, sp, #0
9000ff54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
9000ff56:	687b      	ldr	r3, [r7, #4]
9000ff58:	4618      	mov	r0, r3
9000ff5a:	370c      	adds	r7, #12
9000ff5c:	46bd      	mov	sp, r7
9000ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ff62:	4770      	bx	lr

9000ff64 <_ZSt13__invoke_implIvRPFvhP23DummySystem_DummyPacketEJhS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
9000ff64:	b5b0      	push	{r4, r5, r7, lr}
9000ff66:	b084      	sub	sp, #16
9000ff68:	af00      	add	r7, sp, #0
9000ff6a:	7338      	strb	r0, [r7, #12]
9000ff6c:	60b9      	str	r1, [r7, #8]
9000ff6e:	607a      	str	r2, [r7, #4]
9000ff70:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
9000ff72:	68b8      	ldr	r0, [r7, #8]
9000ff74:	f7ff ffeb 	bl	9000ff4e <_ZSt7forwardIRPFvhP23DummySystem_DummyPacketEEOT_RNSt16remove_referenceIS5_E4typeE>
9000ff78:	4603      	mov	r3, r0
9000ff7a:	681c      	ldr	r4, [r3, #0]
9000ff7c:	6878      	ldr	r0, [r7, #4]
9000ff7e:	f7fb ff10 	bl	9000bda2 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
9000ff82:	4603      	mov	r3, r0
9000ff84:	781d      	ldrb	r5, [r3, #0]
9000ff86:	6838      	ldr	r0, [r7, #0]
9000ff88:	f7fe f8a3 	bl	9000e0d2 <_ZSt7forwardIP23DummySystem_DummyPacketEOT_RNSt16remove_referenceIS2_E4typeE>
9000ff8c:	4603      	mov	r3, r0
9000ff8e:	681b      	ldr	r3, [r3, #0]
9000ff90:	4619      	mov	r1, r3
9000ff92:	4628      	mov	r0, r5
9000ff94:	47a0      	blx	r4
9000ff96:	bf00      	nop
9000ff98:	3710      	adds	r7, #16
9000ff9a:	46bd      	mov	sp, r7
9000ff9c:	bdb0      	pop	{r4, r5, r7, pc}

9000ff9e <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
9000ff9e:	b590      	push	{r4, r7, lr}
9000ffa0:	b085      	sub	sp, #20
9000ffa2:	af00      	add	r7, sp, #0
9000ffa4:	60f8      	str	r0, [r7, #12]
9000ffa6:	60b9      	str	r1, [r7, #8]
9000ffa8:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
9000ffaa:	68b8      	ldr	r0, [r7, #8]
9000ffac:	f7ff ffb8 	bl	9000ff20 <_ZNKSt9_Any_data9_M_accessIPFvhP23DummySystem_DummyPacketEEERKT_v>
9000ffb0:	4603      	mov	r3, r0
9000ffb2:	681c      	ldr	r4, [r3, #0]
9000ffb4:	68f8      	ldr	r0, [r7, #12]
9000ffb6:	f7fb ffab 	bl	9000bf10 <_ZNSt9_Any_data9_M_accessEv>
9000ffba:	4603      	mov	r3, r0
9000ffbc:	4619      	mov	r1, r3
9000ffbe:	2004      	movs	r0, #4
9000ffc0:	f7ff fe5e 	bl	9000fc80 <_ZnwjPv>
9000ffc4:	4603      	mov	r3, r0
9000ffc6:	601c      	str	r4, [r3, #0]
	}
9000ffc8:	bf00      	nop
9000ffca:	3714      	adds	r7, #20
9000ffcc:	46bd      	mov	sp, r7
9000ffce:	bd90      	pop	{r4, r7, pc}

9000ffd0 <_ZNSt14_Function_base13_Base_managerIPFvhP23DummySystem_DummyPacketEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
9000ffd0:	b580      	push	{r7, lr}
9000ffd2:	b082      	sub	sp, #8
9000ffd4:	af00      	add	r7, sp, #0
9000ffd6:	6078      	str	r0, [r7, #4]
9000ffd8:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
9000ffda:	6878      	ldr	r0, [r7, #4]
9000ffdc:	f000 f804 	bl	9000ffe8 <_ZNSt9_Any_data9_M_accessIPFvhP23DummySystem_DummyPacketEEERT_v>
	}
9000ffe0:	bf00      	nop
9000ffe2:	3708      	adds	r7, #8
9000ffe4:	46bd      	mov	sp, r7
9000ffe6:	bd80      	pop	{r7, pc}

9000ffe8 <_ZNSt9_Any_data9_M_accessIPFvhP23DummySystem_DummyPacketEEERT_v>:
      _M_access()
9000ffe8:	b580      	push	{r7, lr}
9000ffea:	b082      	sub	sp, #8
9000ffec:	af00      	add	r7, sp, #0
9000ffee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
9000fff0:	6878      	ldr	r0, [r7, #4]
9000fff2:	f7fb ff8d 	bl	9000bf10 <_ZNSt9_Any_data9_M_accessEv>
9000fff6:	4603      	mov	r3, r0
9000fff8:	4618      	mov	r0, r3
9000fffa:	3708      	adds	r7, #8
9000fffc:	46bd      	mov	sp, r7
9000fffe:	bd80      	pop	{r7, pc}

90010000 <_Z41__static_initialization_and_destruction_0ii>:
90010000:	b580      	push	{r7, lr}
90010002:	b082      	sub	sp, #8
90010004:	af00      	add	r7, sp, #0
90010006:	6078      	str	r0, [r7, #4]
90010008:	6039      	str	r1, [r7, #0]
9001000a:	687b      	ldr	r3, [r7, #4]
9001000c:	2b01      	cmp	r3, #1
9001000e:	d10f      	bne.n	90010030 <_Z41__static_initialization_and_destruction_0ii+0x30>
90010010:	683b      	ldr	r3, [r7, #0]
90010012:	f64f 72ff 	movw	r2, #65535	; 0xffff
90010016:	4293      	cmp	r3, r2
90010018:	d10a      	bne.n	90010030 <_Z41__static_initialization_and_destruction_0ii+0x30>
ROCANDriver FDCAN1_driver(&hfdcan1, can_id1);
9001001a:	4b0e      	ldr	r3, [pc, #56]	; (90010054 <_Z41__static_initialization_and_destruction_0ii+0x54>)
9001001c:	681b      	ldr	r3, [r3, #0]
9001001e:	461a      	mov	r2, r3
90010020:	490d      	ldr	r1, [pc, #52]	; (90010058 <_Z41__static_initialization_and_destruction_0ii+0x58>)
90010022:	480e      	ldr	r0, [pc, #56]	; (9001005c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
90010024:	f7fe fcda 	bl	9000e9dc <_ZN11ROCANDriverC1EP19FDCAN_HandleTypeDefm>
NetworkBus FDCAN1_network(&FDCAN1_driver);
90010028:	490c      	ldr	r1, [pc, #48]	; (9001005c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
9001002a:	480d      	ldr	r0, [pc, #52]	; (90010060 <_Z41__static_initialization_and_destruction_0ii+0x60>)
9001002c:	f7fe fc4c 	bl	9000e8c8 <_ZN10NetworkBusC1EP8IODriver>
90010030:	687b      	ldr	r3, [r7, #4]
90010032:	2b00      	cmp	r3, #0
90010034:	d10a      	bne.n	9001004c <_Z41__static_initialization_and_destruction_0ii+0x4c>
90010036:	683b      	ldr	r3, [r7, #0]
90010038:	f64f 72ff 	movw	r2, #65535	; 0xffff
9001003c:	4293      	cmp	r3, r2
9001003e:	d105      	bne.n	9001004c <_Z41__static_initialization_and_destruction_0ii+0x4c>
90010040:	4807      	ldr	r0, [pc, #28]	; (90010060 <_Z41__static_initialization_and_destruction_0ii+0x60>)
90010042:	f7fe fc87 	bl	9000e954 <_ZN10NetworkBusD1Ev>
ROCANDriver FDCAN1_driver(&hfdcan1, can_id1);
90010046:	4805      	ldr	r0, [pc, #20]	; (9001005c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
90010048:	f7fe fd4e 	bl	9000eae8 <_ZN11ROCANDriverD1Ev>
}
9001004c:	bf00      	nop
9001004e:	3708      	adds	r7, #8
90010050:	46bd      	mov	sp, r7
90010052:	bd80      	pop	{r7, pc}
90010054:	24000014 	.word	0x24000014
90010058:	2400020c 	.word	0x2400020c
9001005c:	24010498 	.word	0x24010498
90010060:	24010bac 	.word	0x24010bac

90010064 <_GLOBAL__sub_I_FDCAN1_driver>:
90010064:	b580      	push	{r7, lr}
90010066:	af00      	add	r7, sp, #0
90010068:	f64f 71ff 	movw	r1, #65535	; 0xffff
9001006c:	2001      	movs	r0, #1
9001006e:	f7ff ffc7 	bl	90010000 <_Z41__static_initialization_and_destruction_0ii>
90010072:	bd80      	pop	{r7, pc}

90010074 <_GLOBAL__sub_D_FDCAN1_driver>:
90010074:	b580      	push	{r7, lr}
90010076:	af00      	add	r7, sp, #0
90010078:	f64f 71ff 	movw	r1, #65535	; 0xffff
9001007c:	2000      	movs	r0, #0
9001007e:	f7ff ffbf 	bl	90010000 <_Z41__static_initialization_and_destruction_0ii>
90010082:	bd80      	pop	{r7, pc}

90010084 <_ZN6Thread9isRunningEv>:
	Thread(const char* name, osPriority priority, uint32_t stackSize);
	virtual ~Thread() {};
	virtual void init() = 0;
	virtual void loop() = 0;
	osThreadId getHandle();
	bool isRunning() { return running; }
90010084:	b480      	push	{r7}
90010086:	b083      	sub	sp, #12
90010088:	af00      	add	r7, sp, #0
9001008a:	6078      	str	r0, [r7, #4]
9001008c:	687b      	ldr	r3, [r7, #4]
9001008e:	7b1b      	ldrb	r3, [r3, #12]
90010090:	4618      	mov	r0, r3
90010092:	370c      	adds	r7, #12
90010094:	46bd      	mov	sp, r7
90010096:	f85d 7b04 	ldr.w	r7, [sp], #4
9001009a:	4770      	bx	lr

9001009c <_Z10__task_runPv>:

#define DEFAULT_STACK_SIZE (4096) // Danger zone: changing the stack size might create very nasty bugs

static char buffer[128];

void __task_run(void* arg) {
9001009c:	b580      	push	{r7, lr}
9001009e:	b084      	sub	sp, #16
900100a0:	af00      	add	r7, sp, #0
900100a2:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
900100a4:	687b      	ldr	r3, [r7, #4]
900100a6:	60fb      	str	r3, [r7, #12]

	osDelay(100 / portTICK_PERIOD_MS);
900100a8:	2064      	movs	r0, #100	; 0x64
900100aa:	f7f8 fcd3 	bl	90008a54 <osDelay>

	thread->init();
900100ae:	68fb      	ldr	r3, [r7, #12]
900100b0:	681b      	ldr	r3, [r3, #0]
900100b2:	3308      	adds	r3, #8
900100b4:	681b      	ldr	r3, [r3, #0]
900100b6:	68f8      	ldr	r0, [r7, #12]
900100b8:	4798      	blx	r3

	while(thread->isRunning()) {
900100ba:	68f8      	ldr	r0, [r7, #12]
900100bc:	f7ff ffe2 	bl	90010084 <_ZN6Thread9isRunningEv>
900100c0:	4603      	mov	r3, r0
900100c2:	2b00      	cmp	r3, #0
900100c4:	d00d      	beq.n	900100e2 <_Z10__task_runPv+0x46>
		thread->loop();
900100c6:	68fb      	ldr	r3, [r7, #12]
900100c8:	681b      	ldr	r3, [r3, #0]
900100ca:	330c      	adds	r3, #12
900100cc:	681b      	ldr	r3, [r3, #0]
900100ce:	68f8      	ldr	r0, [r7, #12]
900100d0:	4798      	blx	r3
//		osDelay(1 / portTICK_PERIOD_MS);
		osDelay(thread->getTickDelay() / portTICK_PERIOD_MS);
900100d2:	68f8      	ldr	r0, [r7, #12]
900100d4:	f000 f878 	bl	900101c8 <_ZN6Thread12getTickDelayEv>
900100d8:	4603      	mov	r3, r0
900100da:	4618      	mov	r0, r3
900100dc:	f7f8 fcba 	bl	90008a54 <osDelay>
	while(thread->isRunning()) {
900100e0:	e7eb      	b.n	900100ba <_Z10__task_runPv+0x1e>
	}

	delete thread;
900100e2:	68fb      	ldr	r3, [r7, #12]
900100e4:	2b00      	cmp	r3, #0
900100e6:	d004      	beq.n	900100f2 <_Z10__task_runPv+0x56>
900100e8:	681a      	ldr	r2, [r3, #0]
900100ea:	3204      	adds	r2, #4
900100ec:	6812      	ldr	r2, [r2, #0]
900100ee:	4618      	mov	r0, r3
900100f0:	4790      	blx	r2

	vTaskDelete(nullptr);
900100f2:	2000      	movs	r0, #0
900100f4:	f7f9 fef2 	bl	90009edc <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
900100f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900100fc:	f7f8 fcaa 	bl	90008a54 <osDelay>
90010100:	e7fa      	b.n	900100f8 <_Z10__task_runPv+0x5c>

90010102 <_ZN6ThreadC1EPKc>:
	}
}

Thread::Thread(const char* name) : Thread(name, (osPriority) osPriorityNormal) {
90010102:	b580      	push	{r7, lr}
90010104:	b082      	sub	sp, #8
90010106:	af00      	add	r7, sp, #0
90010108:	6078      	str	r0, [r7, #4]
9001010a:	6039      	str	r1, [r7, #0]
9001010c:	2218      	movs	r2, #24
9001010e:	6839      	ldr	r1, [r7, #0]
90010110:	6878      	ldr	r0, [r7, #4]
90010112:	f000 f805 	bl	90010120 <_ZN6ThreadC1EPKc12osPriority_t>
	;
}
90010116:	687b      	ldr	r3, [r7, #4]
90010118:	4618      	mov	r0, r3
9001011a:	3708      	adds	r7, #8
9001011c:	46bd      	mov	sp, r7
9001011e:	bd80      	pop	{r7, pc}

90010120 <_ZN6ThreadC1EPKc12osPriority_t>:

Thread::Thread(const char* name, osPriority priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {
90010120:	b580      	push	{r7, lr}
90010122:	b084      	sub	sp, #16
90010124:	af00      	add	r7, sp, #0
90010126:	60f8      	str	r0, [r7, #12]
90010128:	60b9      	str	r1, [r7, #8]
9001012a:	607a      	str	r2, [r7, #4]
9001012c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90010130:	687a      	ldr	r2, [r7, #4]
90010132:	68b9      	ldr	r1, [r7, #8]
90010134:	68f8      	ldr	r0, [r7, #12]
90010136:	f000 f805 	bl	90010144 <_ZN6ThreadC1EPKc12osPriority_tm>
	;
}
9001013a:	68fb      	ldr	r3, [r7, #12]
9001013c:	4618      	mov	r0, r3
9001013e:	3710      	adds	r7, #16
90010140:	46bd      	mov	sp, r7
90010142:	bd80      	pop	{r7, pc}

90010144 <_ZN6ThreadC1EPKc12osPriority_tm>:

Thread::Thread(const char* name, uint32_t stackSize) : Thread(name, (osPriority) osPriorityNormal, stackSize) {
	;
}

Thread::Thread(const char* name, osPriority priority, uint32_t stackSize): delay(10) {
90010144:	b580      	push	{r7, lr}
90010146:	b08e      	sub	sp, #56	; 0x38
90010148:	af00      	add	r7, sp, #0
9001014a:	60f8      	str	r0, [r7, #12]
9001014c:	60b9      	str	r1, [r7, #8]
9001014e:	607a      	str	r2, [r7, #4]
90010150:	603b      	str	r3, [r7, #0]
90010152:	4a14      	ldr	r2, [pc, #80]	; (900101a4 <_ZN6ThreadC1EPKc12osPriority_tm+0x60>)
90010154:	68fb      	ldr	r3, [r7, #12]
90010156:	601a      	str	r2, [r3, #0]
90010158:	68fb      	ldr	r3, [r7, #12]
9001015a:	2201      	movs	r2, #1
9001015c:	731a      	strb	r2, [r3, #12]
9001015e:	68fb      	ldr	r3, [r7, #12]
90010160:	220a      	movs	r2, #10
90010162:	611a      	str	r2, [r3, #16]
	const osThreadAttr_t thread_attributes = {
90010164:	f107 0314 	add.w	r3, r7, #20
90010168:	2224      	movs	r2, #36	; 0x24
9001016a:	2100      	movs	r1, #0
9001016c:	4618      	mov	r0, r3
9001016e:	f000 ff8f 	bl	90011090 <memset>
	  .name = (char*) name,
	  .stack_size = stackSize,
	  .priority = (osPriority_t) priority,
	};
90010172:	68bb      	ldr	r3, [r7, #8]
90010174:	617b      	str	r3, [r7, #20]
90010176:	683b      	ldr	r3, [r7, #0]
90010178:	62bb      	str	r3, [r7, #40]	; 0x28
9001017a:	687b      	ldr	r3, [r7, #4]
9001017c:	62fb      	str	r3, [r7, #44]	; 0x2c
	this->handle = (osThreadId) osThreadNew(&__task_run, this, &thread_attributes);
9001017e:	f107 0314 	add.w	r3, r7, #20
90010182:	461a      	mov	r2, r3
90010184:	68f9      	ldr	r1, [r7, #12]
90010186:	4808      	ldr	r0, [pc, #32]	; (900101a8 <_ZN6ThreadC1EPKc12osPriority_tm+0x64>)
90010188:	f7f8 fbd2 	bl	90008930 <osThreadNew>
9001018c:	4602      	mov	r2, r0
9001018e:	68fb      	ldr	r3, [r7, #12]
90010190:	605a      	str	r2, [r3, #4]
	this->name = name;
90010192:	68fb      	ldr	r3, [r7, #12]
90010194:	68ba      	ldr	r2, [r7, #8]
90010196:	609a      	str	r2, [r3, #8]
}
90010198:	68fb      	ldr	r3, [r7, #12]
9001019a:	4618      	mov	r0, r3
9001019c:	3738      	adds	r7, #56	; 0x38
9001019e:	46bd      	mov	sp, r7
900101a0:	bd80      	pop	{r7, pc}
900101a2:	bf00      	nop
900101a4:	90014428 	.word	0x90014428
900101a8:	9001009d 	.word	0x9001009d

900101ac <_ZN6Thread12setTickDelayEm>:
	va_list args;
	va_start(args, format);
	va_end(args);
}

void Thread::setTickDelay(uint32_t ms) {
900101ac:	b480      	push	{r7}
900101ae:	b083      	sub	sp, #12
900101b0:	af00      	add	r7, sp, #0
900101b2:	6078      	str	r0, [r7, #4]
900101b4:	6039      	str	r1, [r7, #0]
	this->delay = ms;
900101b6:	687b      	ldr	r3, [r7, #4]
900101b8:	683a      	ldr	r2, [r7, #0]
900101ba:	611a      	str	r2, [r3, #16]
}
900101bc:	bf00      	nop
900101be:	370c      	adds	r7, #12
900101c0:	46bd      	mov	sp, r7
900101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
900101c6:	4770      	bx	lr

900101c8 <_ZN6Thread12getTickDelayEv>:

uint32_t Thread::getTickDelay() {
900101c8:	b480      	push	{r7}
900101ca:	b083      	sub	sp, #12
900101cc:	af00      	add	r7, sp, #0
900101ce:	6078      	str	r0, [r7, #4]
	return this->delay;
900101d0:	687b      	ldr	r3, [r7, #4]
900101d2:	691b      	ldr	r3, [r3, #16]
}
900101d4:	4618      	mov	r0, r3
900101d6:	370c      	adds	r7, #12
900101d8:	46bd      	mov	sp, r7
900101da:	f85d 7b04 	ldr.w	r7, [sp], #4
900101de:	4770      	bx	lr

900101e0 <_Znwj>:

#include "Operators.h"

#include "cmsis_os.h"

void * operator new(size_t size) {
900101e0:	b580      	push	{r7, lr}
900101e2:	b082      	sub	sp, #8
900101e4:	af00      	add	r7, sp, #0
900101e6:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
900101e8:	6878      	ldr	r0, [r7, #4]
900101ea:	f7fb faf5 	bl	9000b7d8 <pvPortMalloc>
900101ee:	4603      	mov	r3, r0
}
900101f0:	4618      	mov	r0, r3
900101f2:	3708      	adds	r7, #8
900101f4:	46bd      	mov	sp, r7
900101f6:	bd80      	pop	{r7, pc}

900101f8 <_ZdlPv>:

void * operator new[](size_t size) {
    return pvPortMalloc(size);
}

void operator delete(void* ptr) {
900101f8:	b580      	push	{r7, lr}
900101fa:	b082      	sub	sp, #8
900101fc:	af00      	add	r7, sp, #0
900101fe:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
90010200:	6878      	ldr	r0, [r7, #4]
90010202:	f7fb fbb5 	bl	9000b970 <vPortFree>
}
90010206:	bf00      	nop
90010208:	3708      	adds	r7, #8
9001020a:	46bd      	mov	sp, r7
9001020c:	bd80      	pop	{r7, pc}
	...

90010210 <_ZN9DummyData8toStringEPc>:

};

struct DummyData {
    int data;
    char* toString(char* buffer) {
90010210:	b580      	push	{r7, lr}
90010212:	b082      	sub	sp, #8
90010214:	af00      	add	r7, sp, #0
90010216:	6078      	str	r0, [r7, #4]
90010218:	6039      	str	r1, [r7, #0]
        static char buf[32];
        sprintf(buffer, "Data: %d", data); // beware of the type: (%d, %f, ...)
9001021a:	687b      	ldr	r3, [r7, #4]
9001021c:	681b      	ldr	r3, [r3, #0]
9001021e:	461a      	mov	r2, r3
90010220:	4904      	ldr	r1, [pc, #16]	; (90010234 <_ZN9DummyData8toStringEPc+0x24>)
90010222:	6838      	ldr	r0, [r7, #0]
90010224:	f001 fd5e 	bl	90011ce4 <siprintf>
        return buffer;
90010228:	683b      	ldr	r3, [r7, #0]
    }
9001022a:	4618      	mov	r0, r3
9001022c:	3708      	adds	r7, #8
9001022e:	46bd      	mov	sp, r7
90010230:	bd80      	pop	{r7, pc}
90010232:	bf00      	nop
90010234:	90014044 	.word	0x90014044

90010238 <_ZN9DummyData7toArrayEPh>:

    uint8_t* toArray(uint8_t* buffer){
90010238:	b480      	push	{r7}
9001023a:	b083      	sub	sp, #12
9001023c:	af00      	add	r7, sp, #0
9001023e:	6078      	str	r0, [r7, #4]
90010240:	6039      	str	r1, [r7, #0]
        *(int*)(buffer) = data;
90010242:	687b      	ldr	r3, [r7, #4]
90010244:	681a      	ldr	r2, [r3, #0]
90010246:	683b      	ldr	r3, [r7, #0]
90010248:	601a      	str	r2, [r3, #0]
        return buffer;
9001024a:	683b      	ldr	r3, [r7, #0]
    }
9001024c:	4618      	mov	r0, r3
9001024e:	370c      	adds	r7, #12
90010250:	46bd      	mov	sp, r7
90010252:	f85d 7b04 	ldr.w	r7, [sp], #4
90010256:	4770      	bx	lr

90010258 <_ZN11DummyThread4initEv>:
#include "Telemetry.h"

DummyThread* dummySensorInstance = nullptr;
static char cbuf[256]; // for printf

void DummyThread::init() {
90010258:	b480      	push	{r7}
9001025a:	b083      	sub	sp, #12
9001025c:	af00      	add	r7, sp, #0
9001025e:	6078      	str	r0, [r7, #4]
	dummySensorInstance = this;
90010260:	4a04      	ldr	r2, [pc, #16]	; (90010274 <_ZN11DummyThread4initEv+0x1c>)
90010262:	687b      	ldr	r3, [r7, #4]
90010264:	6013      	str	r3, [r2, #0]
//		dummySensorInstance = nullptr;
//		terminate();
//		parent->resetProber();
//		return;
//	}
}
90010266:	bf00      	nop
90010268:	370c      	adds	r7, #12
9001026a:	46bd      	mov	sp, r7
9001026c:	f85d 7b04 	ldr.w	r7, [sp], #4
90010270:	4770      	bx	lr
90010272:	bf00      	nop
90010274:	240128d0 	.word	0x240128d0

90010278 <_ZN11DummyThread4loopEv>:
static DummyData dummy_data;

// Declare the RoCo packet with the proper data structure defined in RoCo/Src/Protocol/Protocol23
static DummySystem_DummyPacket packet;

void DummyThread::loop() {
90010278:	b580      	push	{r7, lr}
9001027a:	b084      	sub	sp, #16
9001027c:	af00      	add	r7, sp, #0
9001027e:	6078      	str	r0, [r7, #4]
	// Get the sensor data. Here we only read a differential value as an example
	uint16_t value = 1;
90010280:	2301      	movs	r3, #1
90010282:	81fb      	strh	r3, [r7, #14]
//	MAX11615_ADC_Read(&voltmeter, 0, &value);
	dummy_data.data = 1;
90010284:	4b0d      	ldr	r3, [pc, #52]	; (900102bc <_ZN11DummyThread4loopEv+0x44>)
90010286:	2201      	movs	r2, #1
90010288:	601a      	str	r2, [r3, #0]
	// We can print it to SVW console (optional)
	printf("Diff value %s \n", dummy_data.toString(cbuf));
9001028a:	490d      	ldr	r1, [pc, #52]	; (900102c0 <_ZN11DummyThread4loopEv+0x48>)
9001028c:	480b      	ldr	r0, [pc, #44]	; (900102bc <_ZN11DummyThread4loopEv+0x44>)
9001028e:	f7ff ffbf 	bl	90010210 <_ZN9DummyData8toStringEPc>
90010292:	4603      	mov	r3, r0
90010294:	4619      	mov	r1, r3
90010296:	480b      	ldr	r0, [pc, #44]	; (900102c4 <_ZN11DummyThread4loopEv+0x4c>)
90010298:	f001 fbd8 	bl	90011a4c <iprintf>

//	if(HAL_I2C_GetError(parent->getI2C()) == HAL_I2C_ERROR_NONE) {
		// Send data over RoCo network
	dummy_data.toArray((uint8_t*) &packet);
9001029c:	490a      	ldr	r1, [pc, #40]	; (900102c8 <_ZN11DummyThread4loopEv+0x50>)
9001029e:	4807      	ldr	r0, [pc, #28]	; (900102bc <_ZN11DummyThread4loopEv+0x44>)
900102a0:	f7ff ffca 	bl	90010238 <_ZN9DummyData7toArrayEPh>
////	FDCAN1_network
	FDCAN1_network.send(&packet);
900102a4:	4908      	ldr	r1, [pc, #32]	; (900102c8 <_ZN11DummyThread4loopEv+0x50>)
900102a6:	4809      	ldr	r0, [pc, #36]	; (900102cc <_ZN11DummyThread4loopEv+0x54>)
900102a8:	f7fd fbd6 	bl	9000da58 <_ZN10MessageBus4sendI23DummySystem_DummyPacketEEbPT_>
//	} else {
//		dummySensorInstance = nullptr;
//		terminate();
//		parent->resetProber();
//	}
	osDelay(1000);
900102ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900102b0:	f7f8 fbd0 	bl	90008a54 <osDelay>
}
900102b4:	bf00      	nop
900102b6:	3710      	adds	r7, #16
900102b8:	46bd      	mov	sp, r7
900102ba:	bd80      	pop	{r7, pc}
900102bc:	240129d4 	.word	0x240129d4
900102c0:	240128d4 	.word	0x240128d4
900102c4:	90014050 	.word	0x90014050
900102c8:	240129d8 	.word	0x240129d8
900102cc:	24010bac 	.word	0x24010bac

900102d0 <_ZN11DummyThreadD1Ev>:
#include "max11615.h"

#define ADDRESS_MAX11615  0x66


class DummyThread : public Thread {
900102d0:	b580      	push	{r7, lr}
900102d2:	b082      	sub	sp, #8
900102d4:	af00      	add	r7, sp, #0
900102d6:	6078      	str	r0, [r7, #4]
900102d8:	4a05      	ldr	r2, [pc, #20]	; (900102f0 <_ZN11DummyThreadD1Ev+0x20>)
900102da:	687b      	ldr	r3, [r7, #4]
900102dc:	601a      	str	r2, [r3, #0]
900102de:	687b      	ldr	r3, [r7, #4]
900102e0:	4618      	mov	r0, r3
900102e2:	f7fe fb5b 	bl	9000e99c <_ZN6ThreadD1Ev>
900102e6:	687b      	ldr	r3, [r7, #4]
900102e8:	4618      	mov	r0, r3
900102ea:	3708      	adds	r7, #8
900102ec:	46bd      	mov	sp, r7
900102ee:	bd80      	pop	{r7, pc}
900102f0:	900144d8 	.word	0x900144d8

900102f4 <_ZN11DummyThreadD0Ev>:
900102f4:	b580      	push	{r7, lr}
900102f6:	b082      	sub	sp, #8
900102f8:	af00      	add	r7, sp, #0
900102fa:	6078      	str	r0, [r7, #4]
900102fc:	6878      	ldr	r0, [r7, #4]
900102fe:	f7ff ffe7 	bl	900102d0 <_ZN11DummyThreadD1Ev>
90010302:	214c      	movs	r1, #76	; 0x4c
90010304:	6878      	ldr	r0, [r7, #4]
90010306:	f000 f94f 	bl	900105a8 <_ZdlPvj>
9001030a:	687b      	ldr	r3, [r7, #4]
9001030c:	4618      	mov	r0, r3
9001030e:	3708      	adds	r7, #8
90010310:	46bd      	mov	sp, r7
90010312:	bd80      	pop	{r7, pc}

90010314 <_ZN12ProberThread9getI2CNumEv>:
	ProberThread(I2C_HandleTypeDef* hi2c) : Thread("Prober", osPriorityBelowNormal), hi2c(hi2c), instance(nullptr), i2cNum(0) {}
	void init();
	void loop();
	void resetProber();
	I2C_HandleTypeDef* getI2C() { return hi2c; }
	uint8_t getI2CNum() {return i2cNum; }
90010314:	b480      	push	{r7}
90010316:	b083      	sub	sp, #12
90010318:	af00      	add	r7, sp, #0
9001031a:	6078      	str	r0, [r7, #4]
9001031c:	687b      	ldr	r3, [r7, #4]
9001031e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90010322:	4618      	mov	r0, r3
90010324:	370c      	adds	r7, #12
90010326:	46bd      	mov	sp, r7
90010328:	f85d 7b04 	ldr.w	r7, [sp], #4
9001032c:	4770      	bx	lr
	...

90010330 <_ZN11DummyThreadC1EP12ProberThread>:
public:
	DummyThread(ProberThread* parent) :
90010330:	b580      	push	{r7, lr}
90010332:	b082      	sub	sp, #8
90010334:	af00      	add	r7, sp, #0
90010336:	6078      	str	r0, [r7, #4]
90010338:	6039      	str	r1, [r7, #0]
		Thread("Dummy"), parent(parent), portNum(parent->getI2CNum()){};
9001033a:	687b      	ldr	r3, [r7, #4]
9001033c:	490b      	ldr	r1, [pc, #44]	; (9001036c <_ZN11DummyThreadC1EP12ProberThread+0x3c>)
9001033e:	4618      	mov	r0, r3
90010340:	f7ff fedf 	bl	90010102 <_ZN6ThreadC1EPKc>
90010344:	4a0a      	ldr	r2, [pc, #40]	; (90010370 <_ZN11DummyThreadC1EP12ProberThread+0x40>)
90010346:	687b      	ldr	r3, [r7, #4]
90010348:	601a      	str	r2, [r3, #0]
9001034a:	687b      	ldr	r3, [r7, #4]
9001034c:	683a      	ldr	r2, [r7, #0]
9001034e:	641a      	str	r2, [r3, #64]	; 0x40
90010350:	6838      	ldr	r0, [r7, #0]
90010352:	f7ff ffdf 	bl	90010314 <_ZN12ProberThread9getI2CNumEv>
90010356:	4603      	mov	r3, r0
90010358:	461a      	mov	r2, r3
9001035a:	687b      	ldr	r3, [r7, #4]
9001035c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90010360:	687b      	ldr	r3, [r7, #4]
90010362:	4618      	mov	r0, r3
90010364:	3708      	adds	r7, #8
90010366:	46bd      	mov	sp, r7
90010368:	bd80      	pop	{r7, pc}
9001036a:	bf00      	nop
9001036c:	90014060 	.word	0x90014060
90010370:	900144d8 	.word	0x900144d8

90010374 <_ZN12ProberThread4initEv>:

#include "Lang/Operators.h"

#include "Dummy_thread.h"

void ProberThread::init() {
90010374:	b580      	push	{r7, lr}
90010376:	b082      	sub	sp, #8
90010378:	af00      	add	r7, sp, #0
9001037a:	6078      	str	r0, [r7, #4]
	this->semaphore = xSemaphoreCreateBinary();
9001037c:	2203      	movs	r2, #3
9001037e:	2100      	movs	r1, #0
90010380:	2001      	movs	r0, #1
90010382:	f7f8 fd4b 	bl	90008e1c <xQueueGenericCreate>
90010386:	4602      	mov	r2, r0
90010388:	687b      	ldr	r3, [r7, #4]
9001038a:	63da      	str	r2, [r3, #60]	; 0x3c
	vTaskDelay(100 / portTICK_PERIOD_MS);
9001038c:	2064      	movs	r0, #100	; 0x64
9001038e:	f7f9 fe17 	bl	90009fc0 <vTaskDelay>
	this->i2cNum = checkI2CPort(hi2c);
90010392:	687b      	ldr	r3, [r7, #4]
90010394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010396:	4619      	mov	r1, r3
90010398:	6878      	ldr	r0, [r7, #4]
9001039a:	f000 f861 	bl	90010460 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef>
9001039e:	4603      	mov	r3, r0
900103a0:	461a      	mov	r2, r3
900103a2:	687b      	ldr	r3, [r7, #4]
900103a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
900103a8:	bf00      	nop
900103aa:	3708      	adds	r7, #8
900103ac:	46bd      	mov	sp, r7
900103ae:	bd80      	pop	{r7, pc}

900103b0 <_ZN12ProberThread8probeI2CEh>:

bool ProberThread::probeI2C(uint8_t address) {
900103b0:	b580      	push	{r7, lr}
900103b2:	b082      	sub	sp, #8
900103b4:	af00      	add	r7, sp, #0
900103b6:	6078      	str	r0, [r7, #4]
900103b8:	460b      	mov	r3, r1
900103ba:	70fb      	strb	r3, [r7, #3]
	return HAL_I2C_IsDeviceReady(hi2c, address << 1, 3, 100) == HAL_OK;
900103bc:	687b      	ldr	r3, [r7, #4]
900103be:	6b98      	ldr	r0, [r3, #56]	; 0x38
900103c0:	78fb      	ldrb	r3, [r7, #3]
900103c2:	b29b      	uxth	r3, r3
900103c4:	005b      	lsls	r3, r3, #1
900103c6:	b299      	uxth	r1, r3
900103c8:	2364      	movs	r3, #100	; 0x64
900103ca:	2203      	movs	r2, #3
900103cc:	f7f3 fcc2 	bl	90003d54 <HAL_I2C_IsDeviceReady>
900103d0:	4603      	mov	r3, r0
900103d2:	2b00      	cmp	r3, #0
900103d4:	bf0c      	ite	eq
900103d6:	2301      	moveq	r3, #1
900103d8:	2300      	movne	r3, #0
900103da:	b2db      	uxtb	r3, r3
}
900103dc:	4618      	mov	r0, r3
900103de:	3708      	adds	r7, #8
900103e0:	46bd      	mov	sp, r7
900103e2:	bd80      	pop	{r7, pc}

900103e4 <_ZN12ProberThread4loopEv>:

void ProberThread::loop() {
900103e4:	b590      	push	{r4, r7, lr}
900103e6:	b083      	sub	sp, #12
900103e8:	af00      	add	r7, sp, #0
900103ea:	6078      	str	r0, [r7, #4]

//	if(probeI2C(0x33)){
	if(true){
		this->instance = new DummyThread(this);
900103ec:	204c      	movs	r0, #76	; 0x4c
900103ee:	f7ff fef7 	bl	900101e0 <_Znwj>
900103f2:	4603      	mov	r3, r0
900103f4:	461c      	mov	r4, r3
900103f6:	6879      	ldr	r1, [r7, #4]
900103f8:	4620      	mov	r0, r4
900103fa:	f7ff ff99 	bl	90010330 <_ZN11DummyThreadC1EP12ProberThread>
900103fe:	687b      	ldr	r3, [r7, #4]
90010400:	641c      	str	r4, [r3, #64]	; 0x40
		xSemaphoreTake(semaphore, portMAX_DELAY);
90010402:	687b      	ldr	r3, [r7, #4]
90010404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90010406:	f04f 31ff 	mov.w	r1, #4294967295
9001040a:	4618      	mov	r0, r3
9001040c:	f7f9 f89c 	bl	90009548 <xQueueSemaphoreTake>

	}
	if (probeI2C(ADS_ADDR_GND)) {
90010410:	2148      	movs	r1, #72	; 0x48
90010412:	6878      	ldr	r0, [r7, #4]
90010414:	f7ff ffcc 	bl	900103b0 <_ZN12ProberThread8probeI2CEh>
90010418:	4603      	mov	r3, r0
9001041a:	2b00      	cmp	r3, #0
9001041c:	d011      	beq.n	90010442 <_ZN12ProberThread4loopEv+0x5e>
			this->instance = new DummyThread(this);
9001041e:	204c      	movs	r0, #76	; 0x4c
90010420:	f7ff fede 	bl	900101e0 <_Znwj>
90010424:	4603      	mov	r3, r0
90010426:	461c      	mov	r4, r3
90010428:	6879      	ldr	r1, [r7, #4]
9001042a:	4620      	mov	r0, r4
9001042c:	f7ff ff80 	bl	90010330 <_ZN11DummyThreadC1EP12ProberThread>
90010430:	687b      	ldr	r3, [r7, #4]
90010432:	641c      	str	r4, [r3, #64]	; 0x40
			xSemaphoreTake(semaphore, portMAX_DELAY);
90010434:	687b      	ldr	r3, [r7, #4]
90010436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90010438:	f04f 31ff 	mov.w	r1, #4294967295
9001043c:	4618      	mov	r0, r3
9001043e:	f7f9 f883 	bl	90009548 <xQueueSemaphoreTake>
	}

	HAL_I2C_DeInit(hi2c);
90010442:	687b      	ldr	r3, [r7, #4]
90010444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010446:	4618      	mov	r0, r3
90010448:	f7f3 fc54 	bl	90003cf4 <HAL_I2C_DeInit>
	HAL_I2C_Init(hi2c);
9001044c:	687b      	ldr	r3, [r7, #4]
9001044e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010450:	4618      	mov	r0, r3
90010452:	f7f3 fbbf 	bl	90003bd4 <HAL_I2C_Init>
}
90010456:	bf00      	nop
90010458:	370c      	adds	r7, #12
9001045a:	46bd      	mov	sp, r7
9001045c:	bd90      	pop	{r4, r7, pc}
	...

90010460 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef>:
void ProberThread::resetProber() {
	xSemaphoreGive(semaphore);
}


uint8_t ProberThread::checkI2CPort(I2C_HandleTypeDef* hi2c){
90010460:	b480      	push	{r7}
90010462:	b083      	sub	sp, #12
90010464:	af00      	add	r7, sp, #0
90010466:	6078      	str	r0, [r7, #4]
90010468:	6039      	str	r1, [r7, #0]
	if(hi2c->Instance==I2C1)
9001046a:	683b      	ldr	r3, [r7, #0]
9001046c:	681b      	ldr	r3, [r3, #0]
9001046e:	4a10      	ldr	r2, [pc, #64]	; (900104b0 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x50>)
90010470:	4293      	cmp	r3, r2
90010472:	d101      	bne.n	90010478 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x18>
		return 1;
90010474:	2301      	movs	r3, #1
90010476:	e015      	b.n	900104a4 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x44>
	else if(hi2c->Instance==I2C2)
90010478:	683b      	ldr	r3, [r7, #0]
9001047a:	681b      	ldr	r3, [r3, #0]
9001047c:	4a0d      	ldr	r2, [pc, #52]	; (900104b4 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x54>)
9001047e:	4293      	cmp	r3, r2
90010480:	d101      	bne.n	90010486 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x26>
		return 2;
90010482:	2302      	movs	r3, #2
90010484:	e00e      	b.n	900104a4 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x44>
	else if(hi2c->Instance==I2C3)
90010486:	683b      	ldr	r3, [r7, #0]
90010488:	681b      	ldr	r3, [r3, #0]
9001048a:	4a0b      	ldr	r2, [pc, #44]	; (900104b8 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x58>)
9001048c:	4293      	cmp	r3, r2
9001048e:	d101      	bne.n	90010494 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x34>
		return 3;
90010490:	2303      	movs	r3, #3
90010492:	e007      	b.n	900104a4 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x44>
	else if(hi2c->Instance==I2C4)
90010494:	683b      	ldr	r3, [r7, #0]
90010496:	681b      	ldr	r3, [r3, #0]
90010498:	4a08      	ldr	r2, [pc, #32]	; (900104bc <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x5c>)
9001049a:	4293      	cmp	r3, r2
9001049c:	d101      	bne.n	900104a2 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x42>
		return 4;
9001049e:	2304      	movs	r3, #4
900104a0:	e000      	b.n	900104a4 <_ZN12ProberThread12checkI2CPortEP19__I2C_HandleTypeDef+0x44>
	else
		return -1;
900104a2:	23ff      	movs	r3, #255	; 0xff
}
900104a4:	4618      	mov	r0, r3
900104a6:	370c      	adds	r7, #12
900104a8:	46bd      	mov	sp, r7
900104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900104ae:	4770      	bx	lr
900104b0:	40005400 	.word	0x40005400
900104b4:	40005800 	.word	0x40005800
900104b8:	40005c00 	.word	0x40005c00
900104bc:	58001c00 	.word	0x58001c00

900104c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
900104c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
900104c2:	2400      	movs	r4, #0
900104c4:	2310      	movs	r3, #16
900104c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
900104ca:	6803      	ldr	r3, [r0, #0]
900104cc:	4615      	mov	r5, r2
900104ce:	699e      	ldr	r6, [r3, #24]
900104d0:	6812      	ldr	r2, [r2, #0]
900104d2:	466b      	mov	r3, sp
900104d4:	e9cd 4400 	strd	r4, r4, [sp]
900104d8:	47b0      	blx	r6
900104da:	f89d 3004 	ldrb.w	r3, [sp, #4]
900104de:	f003 0306 	and.w	r3, r3, #6
900104e2:	2b06      	cmp	r3, #6
900104e4:	bf03      	ittte	eq
900104e6:	9b00      	ldreq	r3, [sp, #0]
900104e8:	602b      	streq	r3, [r5, #0]
900104ea:	2001      	moveq	r0, #1
900104ec:	4620      	movne	r0, r4
900104ee:	b004      	add	sp, #16
900104f0:	bd70      	pop	{r4, r5, r6, pc}

900104f2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
900104f2:	9800      	ldr	r0, [sp, #0]
900104f4:	4290      	cmp	r0, r2
900104f6:	bf14      	ite	ne
900104f8:	2001      	movne	r0, #1
900104fa:	2006      	moveq	r0, #6
900104fc:	4770      	bx	lr
	...

90010500 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
90010500:	b510      	push	{r4, lr}
90010502:	4b03      	ldr	r3, [pc, #12]	; (90010510 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
90010504:	6003      	str	r3, [r0, #0]
90010506:	4604      	mov	r4, r0
90010508:	f000 f965 	bl	900107d6 <_ZNSt9type_infoD1Ev>
9001050c:	4620      	mov	r0, r4
9001050e:	bd10      	pop	{r4, pc}
90010510:	9001457c 	.word	0x9001457c

90010514 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
90010514:	b510      	push	{r4, lr}
90010516:	4604      	mov	r4, r0
90010518:	f7ff fff2 	bl	90010500 <_ZN10__cxxabiv117__class_type_infoD1Ev>
9001051c:	4620      	mov	r0, r4
9001051e:	2108      	movs	r1, #8
90010520:	f000 f842 	bl	900105a8 <_ZdlPvj>
90010524:	4620      	mov	r0, r4
90010526:	bd10      	pop	{r4, pc}

90010528 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
90010528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001052c:	461f      	mov	r7, r3
9001052e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
90010532:	f8dd 8018 	ldr.w	r8, [sp, #24]
90010536:	4598      	cmp	r8, r3
90010538:	4606      	mov	r6, r0
9001053a:	4615      	mov	r5, r2
9001053c:	d107      	bne.n	9001054e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
9001053e:	9907      	ldr	r1, [sp, #28]
90010540:	f000 f94e 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010544:	b118      	cbz	r0, 9001054e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
90010546:	7165      	strb	r5, [r4, #5]
90010548:	2000      	movs	r0, #0
9001054a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001054e:	4639      	mov	r1, r7
90010550:	4630      	mov	r0, r6
90010552:	f000 f945 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010556:	2800      	cmp	r0, #0
90010558:	d0f6      	beq.n	90010548 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
9001055a:	2301      	movs	r3, #1
9001055c:	f8c4 8000 	str.w	r8, [r4]
90010560:	7125      	strb	r5, [r4, #4]
90010562:	71a3      	strb	r3, [r4, #6]
90010564:	e7f0      	b.n	90010548 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

90010566 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
90010566:	b538      	push	{r3, r4, r5, lr}
90010568:	4615      	mov	r5, r2
9001056a:	461c      	mov	r4, r3
9001056c:	f000 f938 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010570:	b120      	cbz	r0, 9001057c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
90010572:	2308      	movs	r3, #8
90010574:	60e3      	str	r3, [r4, #12]
90010576:	2306      	movs	r3, #6
90010578:	6025      	str	r5, [r4, #0]
9001057a:	7123      	strb	r3, [r4, #4]
9001057c:	bd38      	pop	{r3, r4, r5, pc}

9001057e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
9001057e:	b573      	push	{r0, r1, r4, r5, r6, lr}
90010580:	4605      	mov	r5, r0
90010582:	460c      	mov	r4, r1
90010584:	9201      	str	r2, [sp, #4]
90010586:	461e      	mov	r6, r3
90010588:	f000 f92a 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
9001058c:	b950      	cbnz	r0, 900105a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
9001058e:	2e03      	cmp	r6, #3
90010590:	d808      	bhi.n	900105a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
90010592:	6823      	ldr	r3, [r4, #0]
90010594:	9a01      	ldr	r2, [sp, #4]
90010596:	695b      	ldr	r3, [r3, #20]
90010598:	4629      	mov	r1, r5
9001059a:	4620      	mov	r0, r4
9001059c:	b002      	add	sp, #8
9001059e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900105a2:	4718      	bx	r3
900105a4:	b002      	add	sp, #8
900105a6:	bd70      	pop	{r4, r5, r6, pc}

900105a8 <_ZdlPvj>:
900105a8:	f7ff be26 	b.w	900101f8 <_ZdlPv>

900105ac <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
900105ac:	2001      	movs	r0, #1
900105ae:	4770      	bx	lr

900105b0 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
900105b0:	b510      	push	{r4, lr}
900105b2:	4b03      	ldr	r3, [pc, #12]	; (900105c0 <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
900105b4:	6003      	str	r3, [r0, #0]
900105b6:	4604      	mov	r4, r0
900105b8:	f000 f90d 	bl	900107d6 <_ZNSt9type_infoD1Ev>
900105bc:	4620      	mov	r0, r4
900105be:	bd10      	pop	{r4, pc}
900105c0:	900145dc 	.word	0x900145dc

900105c4 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
900105c4:	b510      	push	{r4, lr}
900105c6:	4604      	mov	r4, r0
900105c8:	f7ff fff2 	bl	900105b0 <_ZN10__cxxabiv120__function_type_infoD1Ev>
900105cc:	4620      	mov	r0, r4
900105ce:	2108      	movs	r1, #8
900105d0:	f7ff ffea 	bl	900105a8 <_ZdlPvj>
900105d4:	4620      	mov	r0, r4
900105d6:	bd10      	pop	{r4, pc}

900105d8 <__cxa_guard_acquire>:
900105d8:	6803      	ldr	r3, [r0, #0]
900105da:	07db      	lsls	r3, r3, #31
900105dc:	d406      	bmi.n	900105ec <__cxa_guard_acquire+0x14>
900105de:	7843      	ldrb	r3, [r0, #1]
900105e0:	b103      	cbz	r3, 900105e4 <__cxa_guard_acquire+0xc>
900105e2:	deff      	udf	#255	; 0xff
900105e4:	2301      	movs	r3, #1
900105e6:	7043      	strb	r3, [r0, #1]
900105e8:	4618      	mov	r0, r3
900105ea:	4770      	bx	lr
900105ec:	2000      	movs	r0, #0
900105ee:	4770      	bx	lr

900105f0 <__cxa_guard_release>:
900105f0:	2301      	movs	r3, #1
900105f2:	6003      	str	r3, [r0, #0]
900105f4:	4770      	bx	lr
	...

900105f8 <_ZSt11_Hash_bytesPKvjj>:
900105f8:	b570      	push	{r4, r5, r6, lr}
900105fa:	4c18      	ldr	r4, [pc, #96]	; (9001065c <_ZSt11_Hash_bytesPKvjj+0x64>)
900105fc:	404a      	eors	r2, r1
900105fe:	460d      	mov	r5, r1
90010600:	1846      	adds	r6, r0, r1
90010602:	2d03      	cmp	r5, #3
90010604:	eba6 0305 	sub.w	r3, r6, r5
90010608:	d908      	bls.n	9001061c <_ZSt11_Hash_bytesPKvjj+0x24>
9001060a:	681b      	ldr	r3, [r3, #0]
9001060c:	4363      	muls	r3, r4
9001060e:	ea83 6313 	eor.w	r3, r3, r3, lsr #24
90010612:	4362      	muls	r2, r4
90010614:	4363      	muls	r3, r4
90010616:	405a      	eors	r2, r3
90010618:	3d04      	subs	r5, #4
9001061a:	e7f2      	b.n	90010602 <_ZSt11_Hash_bytesPKvjj+0xa>
9001061c:	088b      	lsrs	r3, r1, #2
9001061e:	f06f 0503 	mvn.w	r5, #3
90010622:	fb05 1103 	mla	r1, r5, r3, r1
90010626:	2902      	cmp	r1, #2
90010628:	eb00 0583 	add.w	r5, r0, r3, lsl #2
9001062c:	d011      	beq.n	90010652 <_ZSt11_Hash_bytesPKvjj+0x5a>
9001062e:	2903      	cmp	r1, #3
90010630:	d00c      	beq.n	9001064c <_ZSt11_Hash_bytesPKvjj+0x54>
90010632:	2901      	cmp	r1, #1
90010634:	d103      	bne.n	9001063e <_ZSt11_Hash_bytesPKvjj+0x46>
90010636:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
9001063a:	4042      	eors	r2, r0
9001063c:	4362      	muls	r2, r4
9001063e:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
90010642:	fb04 f002 	mul.w	r0, r4, r2
90010646:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
9001064a:	bd70      	pop	{r4, r5, r6, pc}
9001064c:	78a9      	ldrb	r1, [r5, #2]
9001064e:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
90010652:	7869      	ldrb	r1, [r5, #1]
90010654:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
90010658:	e7ed      	b.n	90010636 <_ZSt11_Hash_bytesPKvjj+0x3e>
9001065a:	bf00      	nop
9001065c:	5bd1e995 	.word	0x5bd1e995

90010660 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
90010660:	2001      	movs	r0, #1
90010662:	4770      	bx	lr

90010664 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
90010664:	b510      	push	{r4, lr}
90010666:	4b03      	ldr	r3, [pc, #12]	; (90010674 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
90010668:	6003      	str	r3, [r0, #0]
9001066a:	4604      	mov	r4, r0
9001066c:	f000 fb38 	bl	90010ce0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
90010670:	4620      	mov	r0, r4
90010672:	bd10      	pop	{r4, pc}
90010674:	9001462c 	.word	0x9001462c

90010678 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
90010678:	b510      	push	{r4, lr}
9001067a:	4604      	mov	r4, r0
9001067c:	f7ff fff2 	bl	90010664 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
90010680:	4620      	mov	r0, r4
90010682:	2110      	movs	r1, #16
90010684:	f7ff ff90 	bl	900105a8 <_ZdlPvj>
90010688:	4620      	mov	r0, r4
9001068a:	bd10      	pop	{r4, pc}

9001068c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
9001068c:	2b01      	cmp	r3, #1
9001068e:	b573      	push	{r0, r1, r4, r5, r6, lr}
90010690:	4606      	mov	r6, r0
90010692:	460c      	mov	r4, r1
90010694:	461d      	mov	r5, r3
90010696:	d806      	bhi.n	900106a6 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
90010698:	490c      	ldr	r1, [pc, #48]	; (900106cc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
9001069a:	68c0      	ldr	r0, [r0, #12]
9001069c:	9201      	str	r2, [sp, #4]
9001069e:	f000 f89f 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
900106a2:	9a01      	ldr	r2, [sp, #4]
900106a4:	b948      	cbnz	r0, 900106ba <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2e>
900106a6:	68f0      	ldr	r0, [r6, #12]
900106a8:	68e1      	ldr	r1, [r4, #12]
900106aa:	6803      	ldr	r3, [r0, #0]
900106ac:	691e      	ldr	r6, [r3, #16]
900106ae:	1cab      	adds	r3, r5, #2
900106b0:	46b4      	mov	ip, r6
900106b2:	b002      	add	sp, #8
900106b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900106b8:	4760      	bx	ip
900106ba:	68e0      	ldr	r0, [r4, #12]
900106bc:	6803      	ldr	r3, [r0, #0]
900106be:	68db      	ldr	r3, [r3, #12]
900106c0:	4798      	blx	r3
900106c2:	f080 0001 	eor.w	r0, r0, #1
900106c6:	b2c0      	uxtb	r0, r0
900106c8:	b002      	add	sp, #8
900106ca:	bd70      	pop	{r4, r5, r6, pc}
900106cc:	90014730 	.word	0x90014730

900106d0 <__cxa_pure_virtual>:
900106d0:	b508      	push	{r3, lr}
900106d2:	f000 fae1 	bl	90010c98 <_ZSt9terminatev>
	...

900106d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
900106d8:	b510      	push	{r4, lr}
900106da:	4b03      	ldr	r3, [pc, #12]	; (900106e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
900106dc:	6003      	str	r3, [r0, #0]
900106de:	4604      	mov	r4, r0
900106e0:	f7ff ff0e 	bl	90010500 <_ZN10__cxxabiv117__class_type_infoD1Ev>
900106e4:	4620      	mov	r0, r4
900106e6:	bd10      	pop	{r4, pc}
900106e8:	90014684 	.word	0x90014684

900106ec <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
900106ec:	b510      	push	{r4, lr}
900106ee:	4604      	mov	r4, r0
900106f0:	f7ff fff2 	bl	900106d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
900106f4:	4620      	mov	r0, r4
900106f6:	210c      	movs	r1, #12
900106f8:	f7ff ff56 	bl	900105a8 <_ZdlPvj>
900106fc:	4620      	mov	r0, r4
900106fe:	bd10      	pop	{r4, pc}

90010700 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
90010700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90010702:	9f08      	ldr	r7, [sp, #32]
90010704:	4297      	cmp	r7, r2
90010706:	4605      	mov	r5, r0
90010708:	460e      	mov	r6, r1
9001070a:	4614      	mov	r4, r2
9001070c:	d00a      	beq.n	90010724 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
9001070e:	68a8      	ldr	r0, [r5, #8]
90010710:	6802      	ldr	r2, [r0, #0]
90010712:	9708      	str	r7, [sp, #32]
90010714:	6a15      	ldr	r5, [r2, #32]
90010716:	4631      	mov	r1, r6
90010718:	4622      	mov	r2, r4
9001071a:	46ac      	mov	ip, r5
9001071c:	b003      	add	sp, #12
9001071e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90010722:	4760      	bx	ip
90010724:	4619      	mov	r1, r3
90010726:	9301      	str	r3, [sp, #4]
90010728:	f000 f85a 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
9001072c:	9b01      	ldr	r3, [sp, #4]
9001072e:	2800      	cmp	r0, #0
90010730:	d0ed      	beq.n	9001070e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
90010732:	2006      	movs	r0, #6
90010734:	b003      	add	sp, #12
90010736:	bdf0      	pop	{r4, r5, r6, r7, pc}

90010738 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
90010738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001073c:	460d      	mov	r5, r1
9001073e:	4619      	mov	r1, r3
90010740:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
90010744:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
90010748:	4681      	mov	r9, r0
9001074a:	4617      	mov	r7, r2
9001074c:	4698      	mov	r8, r3
9001074e:	f000 f847 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010752:	b190      	cbz	r0, 9001077a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
90010754:	2d00      	cmp	r5, #0
90010756:	6034      	str	r4, [r6, #0]
90010758:	7137      	strb	r7, [r6, #4]
9001075a:	db09      	blt.n	90010770 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
9001075c:	1961      	adds	r1, r4, r5
9001075e:	458a      	cmp	sl, r1
90010760:	bf0c      	ite	eq
90010762:	2106      	moveq	r1, #6
90010764:	2101      	movne	r1, #1
90010766:	71b1      	strb	r1, [r6, #6]
90010768:	2000      	movs	r0, #0
9001076a:	b001      	add	sp, #4
9001076c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010770:	3502      	adds	r5, #2
90010772:	d1f9      	bne.n	90010768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
90010774:	2301      	movs	r3, #1
90010776:	71b3      	strb	r3, [r6, #6]
90010778:	e7f6      	b.n	90010768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
9001077a:	4554      	cmp	r4, sl
9001077c:	d106      	bne.n	9001078c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
9001077e:	4659      	mov	r1, fp
90010780:	4648      	mov	r0, r9
90010782:	f000 f82d 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010786:	b108      	cbz	r0, 9001078c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
90010788:	7177      	strb	r7, [r6, #5]
9001078a:	e7ed      	b.n	90010768 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
9001078c:	f8d9 0008 	ldr.w	r0, [r9, #8]
90010790:	6803      	ldr	r3, [r0, #0]
90010792:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
90010796:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
9001079a:	69dc      	ldr	r4, [r3, #28]
9001079c:	463a      	mov	r2, r7
9001079e:	4643      	mov	r3, r8
900107a0:	4629      	mov	r1, r5
900107a2:	46a4      	mov	ip, r4
900107a4:	b001      	add	sp, #4
900107a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900107aa:	4760      	bx	ip

900107ac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
900107ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900107b0:	4607      	mov	r7, r0
900107b2:	460c      	mov	r4, r1
900107b4:	4615      	mov	r5, r2
900107b6:	461e      	mov	r6, r3
900107b8:	f7ff fed5 	bl	90010566 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
900107bc:	b948      	cbnz	r0, 900107d2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
900107be:	68b8      	ldr	r0, [r7, #8]
900107c0:	6803      	ldr	r3, [r0, #0]
900107c2:	699f      	ldr	r7, [r3, #24]
900107c4:	462a      	mov	r2, r5
900107c6:	4633      	mov	r3, r6
900107c8:	4621      	mov	r1, r4
900107ca:	46bc      	mov	ip, r7
900107cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
900107d0:	4760      	bx	ip
900107d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900107d6 <_ZNSt9type_infoD1Ev>:
900107d6:	4770      	bx	lr

900107d8 <_ZNKSt9type_info14__is_pointer_pEv>:
900107d8:	2000      	movs	r0, #0
900107da:	4770      	bx	lr

900107dc <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
900107dc:	2000      	movs	r0, #0
900107de:	4770      	bx	lr

900107e0 <_ZNKSt9type_infoeqERKS_>:
900107e0:	4281      	cmp	r1, r0
900107e2:	b508      	push	{r3, lr}
900107e4:	d00e      	beq.n	90010804 <_ZNKSt9type_infoeqERKS_+0x24>
900107e6:	6840      	ldr	r0, [r0, #4]
900107e8:	7803      	ldrb	r3, [r0, #0]
900107ea:	2b2a      	cmp	r3, #42	; 0x2a
900107ec:	d00c      	beq.n	90010808 <_ZNKSt9type_infoeqERKS_+0x28>
900107ee:	6849      	ldr	r1, [r1, #4]
900107f0:	780b      	ldrb	r3, [r1, #0]
900107f2:	2b2a      	cmp	r3, #42	; 0x2a
900107f4:	bf08      	it	eq
900107f6:	3101      	addeq	r1, #1
900107f8:	f7ef fd72 	bl	900002e0 <strcmp>
900107fc:	fab0 f080 	clz	r0, r0
90010800:	0940      	lsrs	r0, r0, #5
90010802:	bd08      	pop	{r3, pc}
90010804:	2001      	movs	r0, #1
90010806:	e7fc      	b.n	90010802 <_ZNKSt9type_infoeqERKS_+0x22>
90010808:	2000      	movs	r0, #0
9001080a:	e7fa      	b.n	90010802 <_ZNKSt9type_infoeqERKS_+0x22>

9001080c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
9001080c:	f7ff bfe8 	b.w	900107e0 <_ZNKSt9type_infoeqERKS_>

90010810 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
90010810:	b510      	push	{r4, lr}
90010812:	4b03      	ldr	r3, [pc, #12]	; (90010820 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
90010814:	6003      	str	r3, [r0, #0]
90010816:	4604      	mov	r4, r0
90010818:	f7ff fe72 	bl	90010500 <_ZN10__cxxabiv117__class_type_infoD1Ev>
9001081c:	4620      	mov	r0, r4
9001081e:	bd10      	pop	{r4, pc}
90010820:	900146fc 	.word	0x900146fc

90010824 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
90010824:	b510      	push	{r4, lr}
90010826:	4604      	mov	r4, r0
90010828:	f7ff fff2 	bl	90010810 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
9001082c:	4620      	mov	r0, r4
9001082e:	2118      	movs	r1, #24
90010830:	f7ff feba 	bl	900105a8 <_ZdlPvj>
90010834:	4620      	mov	r0, r4
90010836:	bd10      	pop	{r4, pc}

90010838 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
90010838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001083c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
90010840:	454a      	cmp	r2, r9
90010842:	4604      	mov	r4, r0
90010844:	460f      	mov	r7, r1
90010846:	4616      	mov	r6, r2
90010848:	469a      	mov	sl, r3
9001084a:	d024      	beq.n	90010896 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
9001084c:	f8d4 800c 	ldr.w	r8, [r4, #12]
90010850:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
90010854:	f1b8 0f00 	cmp.w	r8, #0
90010858:	d028      	beq.n	900108ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
9001085a:	68e5      	ldr	r5, [r4, #12]
9001085c:	07aa      	lsls	r2, r5, #30
9001085e:	d521      	bpl.n	900108a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
90010860:	122a      	asrs	r2, r5, #8
90010862:	f015 0501 	ands.w	r5, r5, #1
90010866:	d003      	beq.n	90010870 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
90010868:	1cfb      	adds	r3, r7, #3
9001086a:	d01b      	beq.n	900108a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
9001086c:	6833      	ldr	r3, [r6, #0]
9001086e:	589a      	ldr	r2, [r3, r2]
90010870:	68a0      	ldr	r0, [r4, #8]
90010872:	6803      	ldr	r3, [r0, #0]
90010874:	f8cd 9000 	str.w	r9, [sp]
90010878:	f8d3 b020 	ldr.w	fp, [r3, #32]
9001087c:	4432      	add	r2, r6
9001087e:	4653      	mov	r3, sl
90010880:	4639      	mov	r1, r7
90010882:	47d8      	blx	fp
90010884:	2803      	cmp	r0, #3
90010886:	d90d      	bls.n	900108a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
90010888:	b115      	cbz	r5, 90010890 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
9001088a:	f040 0001 	orr.w	r0, r0, #1
9001088e:	b2c0      	uxtb	r0, r0
90010890:	b003      	add	sp, #12
90010892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010896:	4619      	mov	r1, r3
90010898:	f7ff ffa2 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
9001089c:	2800      	cmp	r0, #0
9001089e:	d0d5      	beq.n	9001084c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
900108a0:	2006      	movs	r0, #6
900108a2:	e7f5      	b.n	90010890 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
900108a4:	f108 38ff 	add.w	r8, r8, #4294967295
900108a8:	3c08      	subs	r4, #8
900108aa:	e7d3      	b.n	90010854 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
900108ac:	2001      	movs	r0, #1
900108ae:	e7ef      	b.n	90010890 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

900108b0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
900108b0:	b4f0      	push	{r4, r5, r6, r7}
900108b2:	1e0d      	subs	r5, r1, #0
900108b4:	9c04      	ldr	r4, [sp, #16]
900108b6:	db06      	blt.n	900108c6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
900108b8:	1950      	adds	r0, r2, r5
900108ba:	4284      	cmp	r4, r0
900108bc:	bf14      	ite	ne
900108be:	2001      	movne	r0, #1
900108c0:	2006      	moveq	r0, #6
900108c2:	bcf0      	pop	{r4, r5, r6, r7}
900108c4:	4770      	bx	lr
900108c6:	3502      	adds	r5, #2
900108c8:	d005      	beq.n	900108d6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
900108ca:	6805      	ldr	r5, [r0, #0]
900108cc:	9404      	str	r4, [sp, #16]
900108ce:	6a2c      	ldr	r4, [r5, #32]
900108d0:	46a4      	mov	ip, r4
900108d2:	bcf0      	pop	{r4, r5, r6, r7}
900108d4:	4760      	bx	ip
900108d6:	2001      	movs	r0, #1
900108d8:	e7f3      	b.n	900108c2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

900108da <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
900108da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900108de:	b091      	sub	sp, #68	; 0x44
900108e0:	469a      	mov	sl, r3
900108e2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
900108e4:	9206      	str	r2, [sp, #24]
900108e6:	68a3      	ldr	r3, [r4, #8]
900108e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
900108ea:	4688      	mov	r8, r1
900108ec:	06d9      	lsls	r1, r3, #27
900108ee:	bf44      	itt	mi
900108f0:	6883      	ldrmi	r3, [r0, #8]
900108f2:	60a3      	strmi	r3, [r4, #8]
900108f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
900108f6:	4293      	cmp	r3, r2
900108f8:	4681      	mov	r9, r0
900108fa:	d107      	bne.n	9001090c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
900108fc:	991b      	ldr	r1, [sp, #108]	; 0x6c
900108fe:	f7ff ff6f 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010902:	b118      	cbz	r0, 9001090c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x32>
90010904:	9b06      	ldr	r3, [sp, #24]
90010906:	7163      	strb	r3, [r4, #5]
90010908:	2700      	movs	r7, #0
9001090a:	e07f      	b.n	90010a0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
9001090c:	4651      	mov	r1, sl
9001090e:	4648      	mov	r0, r9
90010910:	f7ff ff66 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010914:	b1c0      	cbz	r0, 90010948 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
90010916:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90010918:	6023      	str	r3, [r4, #0]
9001091a:	f1b8 0f00 	cmp.w	r8, #0
9001091e:	9b06      	ldr	r3, [sp, #24]
90010920:	7123      	strb	r3, [r4, #4]
90010922:	db0b      	blt.n	9001093c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x62>
90010924:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90010926:	4498      	add	r8, r3
90010928:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001092a:	4543      	cmp	r3, r8
9001092c:	bf0c      	ite	eq
9001092e:	f04f 0806 	moveq.w	r8, #6
90010932:	f04f 0801 	movne.w	r8, #1
90010936:	f884 8006 	strb.w	r8, [r4, #6]
9001093a:	e7e5      	b.n	90010908 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
9001093c:	f118 0f02 	cmn.w	r8, #2
90010940:	d1e2      	bne.n	90010908 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
90010942:	2301      	movs	r3, #1
90010944:	71a3      	strb	r3, [r4, #6]
90010946:	e7df      	b.n	90010908 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
90010948:	f1b8 0f00 	cmp.w	r8, #0
9001094c:	bfa9      	itett	ge
9001094e:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
90010950:	9007      	strlt	r0, [sp, #28]
90010952:	eba3 0308 	subge.w	r3, r3, r8
90010956:	9307      	strge	r3, [sp, #28]
90010958:	2700      	movs	r7, #0
9001095a:	2302      	movs	r3, #2
9001095c:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
90010960:	2301      	movs	r3, #1
90010962:	9308      	str	r3, [sp, #32]
90010964:	9b06      	ldr	r3, [sp, #24]
90010966:	f043 0301 	orr.w	r3, r3, #1
9001096a:	930b      	str	r3, [sp, #44]	; 0x2c
9001096c:	f8d9 b00c 	ldr.w	fp, [r9, #12]
90010970:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
90010974:	9305      	str	r3, [sp, #20]
90010976:	f1bb 0f00 	cmp.w	fp, #0
9001097a:	f000 80d4 	beq.w	90010b26 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
9001097e:	2300      	movs	r3, #0
90010980:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
90010984:	9b05      	ldr	r3, [sp, #20]
90010986:	68a5      	ldr	r5, [r4, #8]
90010988:	68db      	ldr	r3, [r3, #12]
9001098a:	950f      	str	r5, [sp, #60]	; 0x3c
9001098c:	07da      	lsls	r2, r3, #31
9001098e:	bf43      	ittte	mi
90010990:	981a      	ldrmi	r0, [sp, #104]	; 0x68
90010992:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
90010994:	6800      	ldrmi	r0, [r0, #0]
90010996:	9a06      	ldrpl	r2, [sp, #24]
90010998:	ea4f 2123 	mov.w	r1, r3, asr #8
9001099c:	bf48      	it	mi
9001099e:	5841      	ldrmi	r1, [r0, r1]
900109a0:	981a      	ldr	r0, [sp, #104]	; 0x68
900109a2:	4401      	add	r1, r0
900109a4:	9807      	ldr	r0, [sp, #28]
900109a6:	b138      	cbz	r0, 900109b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xde>
900109a8:	4288      	cmp	r0, r1
900109aa:	9e08      	ldr	r6, [sp, #32]
900109ac:	bf2c      	ite	cs
900109ae:	2000      	movcs	r0, #0
900109b0:	2001      	movcc	r0, #1
900109b2:	42b0      	cmp	r0, r6
900109b4:	f000 80b3 	beq.w	90010b1e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
900109b8:	079b      	lsls	r3, r3, #30
900109ba:	d407      	bmi.n	900109cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xf2>
900109bc:	f118 0f02 	cmn.w	r8, #2
900109c0:	d102      	bne.n	900109c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xee>
900109c2:	07ae      	lsls	r6, r5, #30
900109c4:	f000 80ad 	beq.w	90010b22 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x248>
900109c8:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
900109cc:	9b05      	ldr	r3, [sp, #20]
900109ce:	6898      	ldr	r0, [r3, #8]
900109d0:	ad0d      	add	r5, sp, #52	; 0x34
900109d2:	6803      	ldr	r3, [r0, #0]
900109d4:	9503      	str	r5, [sp, #12]
900109d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
900109d8:	9502      	str	r5, [sp, #8]
900109da:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
900109dc:	e9cd 1500 	strd	r1, r5, [sp]
900109e0:	4641      	mov	r1, r8
900109e2:	69dd      	ldr	r5, [r3, #28]
900109e4:	4653      	mov	r3, sl
900109e6:	47a8      	blx	r5
900109e8:	7963      	ldrb	r3, [r4, #5]
900109ea:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
900109ee:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
900109f2:	990d      	ldr	r1, [sp, #52]	; 0x34
900109f4:	4313      	orrs	r3, r2
900109f6:	2d06      	cmp	r5, #6
900109f8:	7163      	strb	r3, [r4, #5]
900109fa:	d001      	beq.n	90010a00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x126>
900109fc:	2d02      	cmp	r5, #2
900109fe:	d109      	bne.n	90010a14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
90010a00:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
90010a04:	6021      	str	r1, [r4, #0]
90010a06:	7123      	strb	r3, [r4, #4]
90010a08:	71a5      	strb	r5, [r4, #6]
90010a0a:	4607      	mov	r7, r0
90010a0c:	4638      	mov	r0, r7
90010a0e:	b011      	add	sp, #68	; 0x44
90010a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010a14:	6822      	ldr	r2, [r4, #0]
90010a16:	b9a7      	cbnz	r7, 90010a42 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
90010a18:	b9aa      	cbnz	r2, 90010a46 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x16c>
90010a1a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90010a1e:	6021      	str	r1, [r4, #0]
90010a20:	7122      	strb	r2, [r4, #4]
90010a22:	b121      	cbz	r1, 90010a2e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
90010a24:	b11b      	cbz	r3, 90010a2e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
90010a26:	f8d9 3008 	ldr.w	r3, [r9, #8]
90010a2a:	07dd      	lsls	r5, r3, #31
90010a2c:	d5ed      	bpl.n	90010a0a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
90010a2e:	7963      	ldrb	r3, [r4, #5]
90010a30:	2b04      	cmp	r3, #4
90010a32:	d0ea      	beq.n	90010a0a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
90010a34:	9b05      	ldr	r3, [sp, #20]
90010a36:	3b08      	subs	r3, #8
90010a38:	f10b 3bff 	add.w	fp, fp, #4294967295
90010a3c:	9305      	str	r3, [sp, #20]
90010a3e:	4607      	mov	r7, r0
90010a40:	e799      	b.n	90010976 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9c>
90010a42:	2a00      	cmp	r2, #0
90010a44:	d037      	beq.n	90010ab6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1dc>
90010a46:	4291      	cmp	r1, r2
90010a48:	d106      	bne.n	90010a58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17e>
90010a4a:	7923      	ldrb	r3, [r4, #4]
90010a4c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90010a50:	4313      	orrs	r3, r2
90010a52:	7123      	strb	r3, [r4, #4]
90010a54:	4638      	mov	r0, r7
90010a56:	e7ea      	b.n	90010a2e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
90010a58:	b909      	cbnz	r1, 90010a5e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
90010a5a:	2800      	cmp	r0, #0
90010a5c:	d0fa      	beq.n	90010a54 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
90010a5e:	2b03      	cmp	r3, #3
90010a60:	79a6      	ldrb	r6, [r4, #6]
90010a62:	d904      	bls.n	90010a6e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x194>
90010a64:	07d9      	lsls	r1, r3, #31
90010a66:	d529      	bpl.n	90010abc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
90010a68:	68a3      	ldr	r3, [r4, #8]
90010a6a:	079b      	lsls	r3, r3, #30
90010a6c:	d526      	bpl.n	90010abc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1e2>
90010a6e:	b97e      	cbnz	r6, 90010a90 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b6>
90010a70:	2d03      	cmp	r5, #3
90010a72:	d905      	bls.n	90010a80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a6>
90010a74:	07ee      	lsls	r6, r5, #31
90010a76:	d541      	bpl.n	90010afc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
90010a78:	f8d9 3008 	ldr.w	r3, [r9, #8]
90010a7c:	0798      	lsls	r0, r3, #30
90010a7e:	d53d      	bpl.n	90010afc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x222>
90010a80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90010a82:	9300      	str	r3, [sp, #0]
90010a84:	4641      	mov	r1, r8
90010a86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90010a88:	4650      	mov	r0, sl
90010a8a:	f7ff ff11 	bl	900108b0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
90010a8e:	4606      	mov	r6, r0
90010a90:	b9e5      	cbnz	r5, 90010acc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
90010a92:	2e03      	cmp	r6, #3
90010a94:	d905      	bls.n	90010aa2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c8>
90010a96:	07f1      	lsls	r1, r6, #31
90010a98:	d532      	bpl.n	90010b00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
90010a9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
90010a9e:	079a      	lsls	r2, r3, #30
90010aa0:	d52e      	bpl.n	90010b00 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x226>
90010aa2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90010aa4:	9300      	str	r3, [sp, #0]
90010aa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90010aa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90010aaa:	4641      	mov	r1, r8
90010aac:	4650      	mov	r0, sl
90010aae:	f7ff feff 	bl	900108b0 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
90010ab2:	4605      	mov	r5, r0
90010ab4:	e00a      	b.n	90010acc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
90010ab6:	2900      	cmp	r1, #0
90010ab8:	d1d1      	bne.n	90010a5e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x184>
90010aba:	e7cb      	b.n	90010a54 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
90010abc:	2e01      	cmp	r6, #1
90010abe:	bf38      	it	cc
90010ac0:	2601      	movcc	r6, #1
90010ac2:	2d01      	cmp	r5, #1
90010ac4:	bf38      	it	cc
90010ac6:	2501      	movcc	r5, #1
90010ac8:	b2f6      	uxtb	r6, r6
90010aca:	b2ed      	uxtb	r5, r5
90010acc:	ea85 0306 	eor.w	r3, r5, r6
90010ad0:	b2db      	uxtb	r3, r3
90010ad2:	2b03      	cmp	r3, #3
90010ad4:	d916      	bls.n	90010b04 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22a>
90010ad6:	2d03      	cmp	r5, #3
90010ad8:	bf81      	itttt	hi
90010ada:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
90010adc:	6023      	strhi	r3, [r4, #0]
90010ade:	462e      	movhi	r6, r5
90010ae0:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
90010ae4:	bf86      	itte	hi
90010ae6:	7123      	strbhi	r3, [r4, #4]
90010ae8:	2000      	movhi	r0, #0
90010aea:	4638      	movls	r0, r7
90010aec:	07b3      	lsls	r3, r6, #30
90010aee:	71a6      	strb	r6, [r4, #6]
90010af0:	d402      	bmi.n	90010af8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x21e>
90010af2:	f016 0601 	ands.w	r6, r6, #1
90010af6:	d19a      	bne.n	90010a2e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
90010af8:	2000      	movs	r0, #0
90010afa:	e786      	b.n	90010a0a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
90010afc:	2601      	movs	r6, #1
90010afe:	e7e5      	b.n	90010acc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
90010b00:	2501      	movs	r5, #1
90010b02:	e7e3      	b.n	90010acc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f2>
90010b04:	4035      	ands	r5, r6
90010b06:	b2ed      	uxtb	r5, r5
90010b08:	2300      	movs	r3, #0
90010b0a:	2d03      	cmp	r5, #3
90010b0c:	6023      	str	r3, [r4, #0]
90010b0e:	d903      	bls.n	90010b18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x23e>
90010b10:	2302      	movs	r3, #2
90010b12:	71a3      	strb	r3, [r4, #6]
90010b14:	2001      	movs	r0, #1
90010b16:	e778      	b.n	90010a0a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x130>
90010b18:	2001      	movs	r0, #1
90010b1a:	71a0      	strb	r0, [r4, #6]
90010b1c:	e787      	b.n	90010a2e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
90010b1e:	2301      	movs	r3, #1
90010b20:	9309      	str	r3, [sp, #36]	; 0x24
90010b22:	4638      	mov	r0, r7
90010b24:	e786      	b.n	90010a34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15a>
90010b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
90010b28:	2b00      	cmp	r3, #0
90010b2a:	f43f af6f 	beq.w	90010a0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
90010b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90010b30:	2b01      	cmp	r3, #1
90010b32:	f43f af6b 	beq.w	90010a0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x132>
90010b36:	2301      	movs	r3, #1
90010b38:	930a      	str	r3, [sp, #40]	; 0x28
90010b3a:	f8cd b020 	str.w	fp, [sp, #32]
90010b3e:	e715      	b.n	9001096c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x92>

90010b40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
90010b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010b44:	ed2d 8b02 	vpush	{d8}
90010b48:	b089      	sub	sp, #36	; 0x24
90010b4a:	ee08 1a10 	vmov	s16, r1
90010b4e:	4606      	mov	r6, r0
90010b50:	4617      	mov	r7, r2
90010b52:	461c      	mov	r4, r3
90010b54:	f7ff fd07 	bl	90010566 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
90010b58:	4605      	mov	r5, r0
90010b5a:	2800      	cmp	r0, #0
90010b5c:	d15f      	bne.n	90010c1e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
90010b5e:	f8d4 9008 	ldr.w	r9, [r4, #8]
90010b62:	f8d6 a00c 	ldr.w	sl, [r6, #12]
90010b66:	f019 0f10 	tst.w	r9, #16
90010b6a:	bf18      	it	ne
90010b6c:	f8d6 9008 	ldrne.w	r9, [r6, #8]
90010b70:	f009 0301 	and.w	r3, r9, #1
90010b74:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
90010b78:	9303      	str	r3, [sp, #12]
90010b7a:	f10d 0b10 	add.w	fp, sp, #16
90010b7e:	f1ba 0f00 	cmp.w	sl, #0
90010b82:	d074      	beq.n	90010c6e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x12e>
90010b84:	2300      	movs	r3, #0
90010b86:	f8d8 200c 	ldr.w	r2, [r8, #12]
90010b8a:	9304      	str	r3, [sp, #16]
90010b8c:	f88d 3014 	strb.w	r3, [sp, #20]
90010b90:	2300      	movs	r3, #0
90010b92:	9307      	str	r3, [sp, #28]
90010b94:	f002 0301 	and.w	r3, r2, #1
90010b98:	9301      	str	r3, [sp, #4]
90010b9a:	f002 0302 	and.w	r3, r2, #2
90010b9e:	9302      	str	r3, [sp, #8]
90010ba0:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
90010ba4:	430b      	orrs	r3, r1
90010ba6:	f8cd 9018 	str.w	r9, [sp, #24]
90010baa:	d104      	bne.n	90010bb6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
90010bac:	f10a 3aff 	add.w	sl, sl, #4294967295
90010bb0:	f1a8 0808 	sub.w	r8, r8, #8
90010bb4:	e7e3      	b.n	90010b7e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x3e>
90010bb6:	2f00      	cmp	r7, #0
90010bb8:	d037      	beq.n	90010c2a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xea>
90010bba:	9b01      	ldr	r3, [sp, #4]
90010bbc:	1212      	asrs	r2, r2, #8
90010bbe:	b10b      	cbz	r3, 90010bc4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x84>
90010bc0:	683b      	ldr	r3, [r7, #0]
90010bc2:	589a      	ldr	r2, [r3, r2]
90010bc4:	443a      	add	r2, r7
90010bc6:	f8d8 0008 	ldr.w	r0, [r8, #8]
90010bca:	6803      	ldr	r3, [r0, #0]
90010bcc:	ee18 1a10 	vmov	r1, s16
90010bd0:	699d      	ldr	r5, [r3, #24]
90010bd2:	465b      	mov	r3, fp
90010bd4:	47a8      	blx	r5
90010bd6:	4605      	mov	r5, r0
90010bd8:	2800      	cmp	r0, #0
90010bda:	d0e7      	beq.n	90010bac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
90010bdc:	9b07      	ldr	r3, [sp, #28]
90010bde:	2b08      	cmp	r3, #8
90010be0:	d104      	bne.n	90010bec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
90010be2:	9b01      	ldr	r3, [sp, #4]
90010be4:	b113      	cbz	r3, 90010bec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xac>
90010be6:	f8d8 3008 	ldr.w	r3, [r8, #8]
90010bea:	9307      	str	r3, [sp, #28]
90010bec:	f89d 3014 	ldrb.w	r3, [sp, #20]
90010bf0:	2b03      	cmp	r3, #3
90010bf2:	d905      	bls.n	90010c00 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
90010bf4:	9a02      	ldr	r2, [sp, #8]
90010bf6:	b91a      	cbnz	r2, 90010c00 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc0>
90010bf8:	f023 0302 	bic.w	r3, r3, #2
90010bfc:	f88d 3014 	strb.w	r3, [sp, #20]
90010c00:	68e1      	ldr	r1, [r4, #12]
90010c02:	b9d1      	cbnz	r1, 90010c3a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
90010c04:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
90010c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90010c0c:	7923      	ldrb	r3, [r4, #4]
90010c0e:	2b03      	cmp	r3, #3
90010c10:	d905      	bls.n	90010c1e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
90010c12:	079a      	lsls	r2, r3, #30
90010c14:	d50b      	bpl.n	90010c2e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
90010c16:	68b3      	ldr	r3, [r6, #8]
90010c18:	f013 0f01 	tst.w	r3, #1
90010c1c:	d1c6      	bne.n	90010bac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
90010c1e:	4628      	mov	r0, r5
90010c20:	b009      	add	sp, #36	; 0x24
90010c22:	ecbd 8b02 	vpop	{d8}
90010c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010c2a:	463a      	mov	r2, r7
90010c2c:	e7cb      	b.n	90010bc6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x86>
90010c2e:	07db      	lsls	r3, r3, #31
90010c30:	d5f5      	bpl.n	90010c1e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
90010c32:	68b3      	ldr	r3, [r6, #8]
90010c34:	f013 0f02 	tst.w	r3, #2
90010c38:	e7f0      	b.n	90010c1c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
90010c3a:	6823      	ldr	r3, [r4, #0]
90010c3c:	9a04      	ldr	r2, [sp, #16]
90010c3e:	4293      	cmp	r3, r2
90010c40:	d004      	beq.n	90010c4c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10c>
90010c42:	2300      	movs	r3, #0
90010c44:	6023      	str	r3, [r4, #0]
90010c46:	2302      	movs	r3, #2
90010c48:	7123      	strb	r3, [r4, #4]
90010c4a:	e7e8      	b.n	90010c1e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>
90010c4c:	b12b      	cbz	r3, 90010c5a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11a>
90010c4e:	7923      	ldrb	r3, [r4, #4]
90010c50:	f89d 2014 	ldrb.w	r2, [sp, #20]
90010c54:	4313      	orrs	r3, r2
90010c56:	7123      	strb	r3, [r4, #4]
90010c58:	e7a8      	b.n	90010bac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x6c>
90010c5a:	9807      	ldr	r0, [sp, #28]
90010c5c:	2808      	cmp	r0, #8
90010c5e:	d0f2      	beq.n	90010c46 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
90010c60:	2908      	cmp	r1, #8
90010c62:	d0f0      	beq.n	90010c46 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
90010c64:	f7ff fdbc 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010c68:	2800      	cmp	r0, #0
90010c6a:	d1f0      	bne.n	90010c4e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x10e>
90010c6c:	e7eb      	b.n	90010c46 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x106>
90010c6e:	7925      	ldrb	r5, [r4, #4]
90010c70:	3d00      	subs	r5, #0
90010c72:	bf18      	it	ne
90010c74:	2501      	movne	r5, #1
90010c76:	e7d2      	b.n	90010c1e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xde>

90010c78 <_ZSt25__throw_bad_function_callv>:
90010c78:	b508      	push	{r3, lr}
90010c7a:	f000 f8b0 	bl	90010dde <abort>

90010c7e <_ZN10__cxxabiv111__terminateEPFvvE>:
90010c7e:	b508      	push	{r3, lr}
90010c80:	4780      	blx	r0
90010c82:	f000 f8ac 	bl	90010dde <abort>
	...

90010c88 <_ZSt13get_terminatev>:
90010c88:	4b02      	ldr	r3, [pc, #8]	; (90010c94 <_ZSt13get_terminatev+0xc>)
90010c8a:	6818      	ldr	r0, [r3, #0]
90010c8c:	f3bf 8f5b 	dmb	ish
90010c90:	4770      	bx	lr
90010c92:	bf00      	nop
90010c94:	24000018 	.word	0x24000018

90010c98 <_ZSt9terminatev>:
90010c98:	b508      	push	{r3, lr}
90010c9a:	f7ff fff5 	bl	90010c88 <_ZSt13get_terminatev>
90010c9e:	f7ff ffee 	bl	90010c7e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

90010ca4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
90010ca4:	b510      	push	{r4, lr}
90010ca6:	4b03      	ldr	r3, [pc, #12]	; (90010cb4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
90010ca8:	6003      	str	r3, [r0, #0]
90010caa:	4604      	mov	r4, r0
90010cac:	f7ff fd93 	bl	900107d6 <_ZNSt9type_infoD1Ev>
90010cb0:	4620      	mov	r0, r4
90010cb2:	bd10      	pop	{r4, pc}
90010cb4:	90014774 	.word	0x90014774

90010cb8 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
90010cb8:	b510      	push	{r4, lr}
90010cba:	4604      	mov	r4, r0
90010cbc:	f7ff fff2 	bl	90010ca4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
90010cc0:	4620      	mov	r0, r4
90010cc2:	2108      	movs	r1, #8
90010cc4:	f7ff fc70 	bl	900105a8 <_ZdlPvj>
90010cc8:	4620      	mov	r0, r4
90010cca:	bd10      	pop	{r4, pc}

90010ccc <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
90010ccc:	68c0      	ldr	r0, [r0, #12]
90010cce:	68c9      	ldr	r1, [r1, #12]
90010cd0:	b410      	push	{r4}
90010cd2:	6804      	ldr	r4, [r0, #0]
90010cd4:	6924      	ldr	r4, [r4, #16]
90010cd6:	3302      	adds	r3, #2
90010cd8:	46a4      	mov	ip, r4
90010cda:	f85d 4b04 	ldr.w	r4, [sp], #4
90010cde:	4760      	bx	ip

90010ce0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
90010ce0:	b510      	push	{r4, lr}
90010ce2:	4b03      	ldr	r3, [pc, #12]	; (90010cf0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
90010ce4:	6003      	str	r3, [r0, #0]
90010ce6:	4604      	mov	r4, r0
90010ce8:	f7ff fd75 	bl	900107d6 <_ZNSt9type_infoD1Ev>
90010cec:	4620      	mov	r0, r4
90010cee:	bd10      	pop	{r4, pc}
90010cf0:	900147c4 	.word	0x900147c4

90010cf4 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
90010cf4:	b510      	push	{r4, lr}
90010cf6:	4604      	mov	r4, r0
90010cf8:	f7ff fff2 	bl	90010ce0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
90010cfc:	4620      	mov	r0, r4
90010cfe:	2110      	movs	r1, #16
90010d00:	f7ff fc52 	bl	900105a8 <_ZdlPvj>
90010d04:	4620      	mov	r0, r4
90010d06:	bd10      	pop	{r4, pc}

90010d08 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
90010d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010d0c:	4605      	mov	r5, r0
90010d0e:	460e      	mov	r6, r1
90010d10:	4617      	mov	r7, r2
90010d12:	4698      	mov	r8, r3
90010d14:	f7ff fd64 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010d18:	4604      	mov	r4, r0
90010d1a:	b9f0      	cbnz	r0, 90010d5a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
90010d1c:	4929      	ldr	r1, [pc, #164]	; (90010dc4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
90010d1e:	4630      	mov	r0, r6
90010d20:	f7ff fd5e 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010d24:	b300      	cbz	r0, 90010d68 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
90010d26:	682b      	ldr	r3, [r5, #0]
90010d28:	4927      	ldr	r1, [pc, #156]	; (90010dc8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
90010d2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
90010d2e:	f7ff fd57 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010d32:	b110      	cbz	r0, 90010d3a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
90010d34:	603c      	str	r4, [r7, #0]
90010d36:	4604      	mov	r4, r0
90010d38:	e00f      	b.n	90010d5a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
90010d3a:	682b      	ldr	r3, [r5, #0]
90010d3c:	4923      	ldr	r1, [pc, #140]	; (90010dcc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
90010d3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
90010d42:	f7ff fd4d 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010d46:	4681      	mov	r9, r0
90010d48:	b170      	cbz	r0, 90010d68 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
90010d4a:	68e8      	ldr	r0, [r5, #12]
90010d4c:	6803      	ldr	r3, [r0, #0]
90010d4e:	68db      	ldr	r3, [r3, #12]
90010d50:	4798      	blx	r3
90010d52:	4604      	mov	r4, r0
90010d54:	b120      	cbz	r0, 90010d60 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
90010d56:	4b1e      	ldr	r3, [pc, #120]	; (90010dd0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
90010d58:	603b      	str	r3, [r7, #0]
90010d5a:	4620      	mov	r0, r4
90010d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90010d60:	4b1c      	ldr	r3, [pc, #112]	; (90010dd4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xcc>)
90010d62:	603b      	str	r3, [r7, #0]
90010d64:	464c      	mov	r4, r9
90010d66:	e7f8      	b.n	90010d5a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
90010d68:	682b      	ldr	r3, [r5, #0]
90010d6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
90010d6e:	b33e      	cbz	r6, 90010dc0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>
90010d70:	6833      	ldr	r3, [r6, #0]
90010d72:	f853 1c04 	ldr.w	r1, [r3, #-4]
90010d76:	f7ff fd33 	bl	900107e0 <_ZNKSt9type_infoeqERKS_>
90010d7a:	2800      	cmp	r0, #0
90010d7c:	d0db      	beq.n	90010d36 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
90010d7e:	f018 0f01 	tst.w	r8, #1
90010d82:	d0ea      	beq.n	90010d5a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
90010d84:	68b3      	ldr	r3, [r6, #8]
90010d86:	68a9      	ldr	r1, [r5, #8]
90010d88:	f003 0060 	and.w	r0, r3, #96	; 0x60
90010d8c:	f001 0260 	and.w	r2, r1, #96	; 0x60
90010d90:	ea30 0c02 	bics.w	ip, r0, r2
90010d94:	bf18      	it	ne
90010d96:	4013      	andne	r3, r2
90010d98:	ea23 0301 	bic.w	r3, r3, r1
90010d9c:	ea22 0200 	bic.w	r2, r2, r0
90010da0:	4313      	orrs	r3, r2
90010da2:	d1da      	bne.n	90010d5a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
90010da4:	07cb      	lsls	r3, r1, #31
90010da6:	682b      	ldr	r3, [r5, #0]
90010da8:	699c      	ldr	r4, [r3, #24]
90010daa:	bf58      	it	pl
90010dac:	f028 0801 	bicpl.w	r8, r8, #1
90010db0:	4643      	mov	r3, r8
90010db2:	463a      	mov	r2, r7
90010db4:	4631      	mov	r1, r6
90010db6:	4628      	mov	r0, r5
90010db8:	46a4      	mov	ip, r4
90010dba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010dbe:	4760      	bx	ip
90010dc0:	f000 f80a 	bl	90010dd8 <__cxa_bad_typeid>
90010dc4:	90014728 	.word	0x90014728
90010dc8:	900145f4 	.word	0x900145f4
90010dcc:	900147ec 	.word	0x900147ec
90010dd0:	900147e4 	.word	0x900147e4
90010dd4:	900147e0 	.word	0x900147e0

90010dd8 <__cxa_bad_typeid>:
90010dd8:	b508      	push	{r3, lr}
90010dda:	f000 f800 	bl	90010dde <abort>

90010dde <abort>:
90010dde:	b508      	push	{r3, lr}
90010de0:	2006      	movs	r0, #6
90010de2:	f000 ff63 	bl	90011cac <raise>
90010de6:	2001      	movs	r0, #1
90010de8:	f7f0 fc9a 	bl	90001720 <_exit>

90010dec <atexit>:
90010dec:	2300      	movs	r3, #0
90010dee:	4601      	mov	r1, r0
90010df0:	461a      	mov	r2, r3
90010df2:	4618      	mov	r0, r3
90010df4:	f001 b8ac 	b.w	90011f50 <__register_exitproc>

90010df8 <__errno>:
90010df8:	4b01      	ldr	r3, [pc, #4]	; (90010e00 <__errno+0x8>)
90010dfa:	6818      	ldr	r0, [r3, #0]
90010dfc:	4770      	bx	lr
90010dfe:	bf00      	nop
90010e00:	2400001c 	.word	0x2400001c

90010e04 <std>:
90010e04:	2300      	movs	r3, #0
90010e06:	b510      	push	{r4, lr}
90010e08:	4604      	mov	r4, r0
90010e0a:	e9c0 3300 	strd	r3, r3, [r0]
90010e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
90010e12:	6083      	str	r3, [r0, #8]
90010e14:	8181      	strh	r1, [r0, #12]
90010e16:	6643      	str	r3, [r0, #100]	; 0x64
90010e18:	81c2      	strh	r2, [r0, #14]
90010e1a:	6183      	str	r3, [r0, #24]
90010e1c:	4619      	mov	r1, r3
90010e1e:	2208      	movs	r2, #8
90010e20:	305c      	adds	r0, #92	; 0x5c
90010e22:	f000 f935 	bl	90011090 <memset>
90010e26:	4b05      	ldr	r3, [pc, #20]	; (90010e3c <std+0x38>)
90010e28:	6263      	str	r3, [r4, #36]	; 0x24
90010e2a:	4b05      	ldr	r3, [pc, #20]	; (90010e40 <std+0x3c>)
90010e2c:	62a3      	str	r3, [r4, #40]	; 0x28
90010e2e:	4b05      	ldr	r3, [pc, #20]	; (90010e44 <std+0x40>)
90010e30:	62e3      	str	r3, [r4, #44]	; 0x2c
90010e32:	4b05      	ldr	r3, [pc, #20]	; (90010e48 <std+0x44>)
90010e34:	6224      	str	r4, [r4, #32]
90010e36:	6323      	str	r3, [r4, #48]	; 0x30
90010e38:	bd10      	pop	{r4, pc}
90010e3a:	bf00      	nop
90010e3c:	90011d25 	.word	0x90011d25
90010e40:	90011d47 	.word	0x90011d47
90010e44:	90011d7f 	.word	0x90011d7f
90010e48:	90011da3 	.word	0x90011da3

90010e4c <_cleanup_r>:
90010e4c:	4901      	ldr	r1, [pc, #4]	; (90010e54 <_cleanup_r+0x8>)
90010e4e:	f000 b8af 	b.w	90010fb0 <_fwalk_reent>
90010e52:	bf00      	nop
90010e54:	90012d39 	.word	0x90012d39

90010e58 <__sfmoreglue>:
90010e58:	b570      	push	{r4, r5, r6, lr}
90010e5a:	2268      	movs	r2, #104	; 0x68
90010e5c:	1e4d      	subs	r5, r1, #1
90010e5e:	4355      	muls	r5, r2
90010e60:	460e      	mov	r6, r1
90010e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
90010e66:	f000 f93b 	bl	900110e0 <_malloc_r>
90010e6a:	4604      	mov	r4, r0
90010e6c:	b140      	cbz	r0, 90010e80 <__sfmoreglue+0x28>
90010e6e:	2100      	movs	r1, #0
90010e70:	e9c0 1600 	strd	r1, r6, [r0]
90010e74:	300c      	adds	r0, #12
90010e76:	60a0      	str	r0, [r4, #8]
90010e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
90010e7c:	f000 f908 	bl	90011090 <memset>
90010e80:	4620      	mov	r0, r4
90010e82:	bd70      	pop	{r4, r5, r6, pc}

90010e84 <__sfp_lock_acquire>:
90010e84:	4801      	ldr	r0, [pc, #4]	; (90010e8c <__sfp_lock_acquire+0x8>)
90010e86:	f000 b8d8 	b.w	9001103a <__retarget_lock_acquire_recursive>
90010e8a:	bf00      	nop
90010e8c:	240129de 	.word	0x240129de

90010e90 <__sfp_lock_release>:
90010e90:	4801      	ldr	r0, [pc, #4]	; (90010e98 <__sfp_lock_release+0x8>)
90010e92:	f000 b8d4 	b.w	9001103e <__retarget_lock_release_recursive>
90010e96:	bf00      	nop
90010e98:	240129de 	.word	0x240129de

90010e9c <__sinit_lock_acquire>:
90010e9c:	4801      	ldr	r0, [pc, #4]	; (90010ea4 <__sinit_lock_acquire+0x8>)
90010e9e:	f000 b8cc 	b.w	9001103a <__retarget_lock_acquire_recursive>
90010ea2:	bf00      	nop
90010ea4:	240129df 	.word	0x240129df

90010ea8 <__sinit_lock_release>:
90010ea8:	4801      	ldr	r0, [pc, #4]	; (90010eb0 <__sinit_lock_release+0x8>)
90010eaa:	f000 b8c8 	b.w	9001103e <__retarget_lock_release_recursive>
90010eae:	bf00      	nop
90010eb0:	240129df 	.word	0x240129df

90010eb4 <__sinit>:
90010eb4:	b510      	push	{r4, lr}
90010eb6:	4604      	mov	r4, r0
90010eb8:	f7ff fff0 	bl	90010e9c <__sinit_lock_acquire>
90010ebc:	69a3      	ldr	r3, [r4, #24]
90010ebe:	b11b      	cbz	r3, 90010ec8 <__sinit+0x14>
90010ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90010ec4:	f7ff bff0 	b.w	90010ea8 <__sinit_lock_release>
90010ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90010ecc:	6523      	str	r3, [r4, #80]	; 0x50
90010ece:	4b13      	ldr	r3, [pc, #76]	; (90010f1c <__sinit+0x68>)
90010ed0:	4a13      	ldr	r2, [pc, #76]	; (90010f20 <__sinit+0x6c>)
90010ed2:	681b      	ldr	r3, [r3, #0]
90010ed4:	62a2      	str	r2, [r4, #40]	; 0x28
90010ed6:	42a3      	cmp	r3, r4
90010ed8:	bf04      	itt	eq
90010eda:	2301      	moveq	r3, #1
90010edc:	61a3      	streq	r3, [r4, #24]
90010ede:	4620      	mov	r0, r4
90010ee0:	f000 f820 	bl	90010f24 <__sfp>
90010ee4:	6060      	str	r0, [r4, #4]
90010ee6:	4620      	mov	r0, r4
90010ee8:	f000 f81c 	bl	90010f24 <__sfp>
90010eec:	60a0      	str	r0, [r4, #8]
90010eee:	4620      	mov	r0, r4
90010ef0:	f000 f818 	bl	90010f24 <__sfp>
90010ef4:	2200      	movs	r2, #0
90010ef6:	60e0      	str	r0, [r4, #12]
90010ef8:	2104      	movs	r1, #4
90010efa:	6860      	ldr	r0, [r4, #4]
90010efc:	f7ff ff82 	bl	90010e04 <std>
90010f00:	68a0      	ldr	r0, [r4, #8]
90010f02:	2201      	movs	r2, #1
90010f04:	2109      	movs	r1, #9
90010f06:	f7ff ff7d 	bl	90010e04 <std>
90010f0a:	68e0      	ldr	r0, [r4, #12]
90010f0c:	2202      	movs	r2, #2
90010f0e:	2112      	movs	r1, #18
90010f10:	f7ff ff78 	bl	90010e04 <std>
90010f14:	2301      	movs	r3, #1
90010f16:	61a3      	str	r3, [r4, #24]
90010f18:	e7d2      	b.n	90010ec0 <__sinit+0xc>
90010f1a:	bf00      	nop
90010f1c:	90014888 	.word	0x90014888
90010f20:	90010e4d 	.word	0x90010e4d

90010f24 <__sfp>:
90010f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90010f26:	4607      	mov	r7, r0
90010f28:	f7ff ffac 	bl	90010e84 <__sfp_lock_acquire>
90010f2c:	4b1e      	ldr	r3, [pc, #120]	; (90010fa8 <__sfp+0x84>)
90010f2e:	681e      	ldr	r6, [r3, #0]
90010f30:	69b3      	ldr	r3, [r6, #24]
90010f32:	b913      	cbnz	r3, 90010f3a <__sfp+0x16>
90010f34:	4630      	mov	r0, r6
90010f36:	f7ff ffbd 	bl	90010eb4 <__sinit>
90010f3a:	3648      	adds	r6, #72	; 0x48
90010f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90010f40:	3b01      	subs	r3, #1
90010f42:	d503      	bpl.n	90010f4c <__sfp+0x28>
90010f44:	6833      	ldr	r3, [r6, #0]
90010f46:	b30b      	cbz	r3, 90010f8c <__sfp+0x68>
90010f48:	6836      	ldr	r6, [r6, #0]
90010f4a:	e7f7      	b.n	90010f3c <__sfp+0x18>
90010f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90010f50:	b9d5      	cbnz	r5, 90010f88 <__sfp+0x64>
90010f52:	4b16      	ldr	r3, [pc, #88]	; (90010fac <__sfp+0x88>)
90010f54:	60e3      	str	r3, [r4, #12]
90010f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
90010f5a:	6665      	str	r5, [r4, #100]	; 0x64
90010f5c:	f000 f86c 	bl	90011038 <__retarget_lock_init_recursive>
90010f60:	f7ff ff96 	bl	90010e90 <__sfp_lock_release>
90010f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
90010f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
90010f6c:	6025      	str	r5, [r4, #0]
90010f6e:	61a5      	str	r5, [r4, #24]
90010f70:	2208      	movs	r2, #8
90010f72:	4629      	mov	r1, r5
90010f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90010f78:	f000 f88a 	bl	90011090 <memset>
90010f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90010f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90010f84:	4620      	mov	r0, r4
90010f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90010f88:	3468      	adds	r4, #104	; 0x68
90010f8a:	e7d9      	b.n	90010f40 <__sfp+0x1c>
90010f8c:	2104      	movs	r1, #4
90010f8e:	4638      	mov	r0, r7
90010f90:	f7ff ff62 	bl	90010e58 <__sfmoreglue>
90010f94:	4604      	mov	r4, r0
90010f96:	6030      	str	r0, [r6, #0]
90010f98:	2800      	cmp	r0, #0
90010f9a:	d1d5      	bne.n	90010f48 <__sfp+0x24>
90010f9c:	f7ff ff78 	bl	90010e90 <__sfp_lock_release>
90010fa0:	230c      	movs	r3, #12
90010fa2:	603b      	str	r3, [r7, #0]
90010fa4:	e7ee      	b.n	90010f84 <__sfp+0x60>
90010fa6:	bf00      	nop
90010fa8:	90014888 	.word	0x90014888
90010fac:	ffff0001 	.word	0xffff0001

90010fb0 <_fwalk_reent>:
90010fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90010fb4:	4606      	mov	r6, r0
90010fb6:	4688      	mov	r8, r1
90010fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
90010fbc:	2700      	movs	r7, #0
90010fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90010fc2:	f1b9 0901 	subs.w	r9, r9, #1
90010fc6:	d505      	bpl.n	90010fd4 <_fwalk_reent+0x24>
90010fc8:	6824      	ldr	r4, [r4, #0]
90010fca:	2c00      	cmp	r4, #0
90010fcc:	d1f7      	bne.n	90010fbe <_fwalk_reent+0xe>
90010fce:	4638      	mov	r0, r7
90010fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90010fd4:	89ab      	ldrh	r3, [r5, #12]
90010fd6:	2b01      	cmp	r3, #1
90010fd8:	d907      	bls.n	90010fea <_fwalk_reent+0x3a>
90010fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90010fde:	3301      	adds	r3, #1
90010fe0:	d003      	beq.n	90010fea <_fwalk_reent+0x3a>
90010fe2:	4629      	mov	r1, r5
90010fe4:	4630      	mov	r0, r6
90010fe6:	47c0      	blx	r8
90010fe8:	4307      	orrs	r7, r0
90010fea:	3568      	adds	r5, #104	; 0x68
90010fec:	e7e9      	b.n	90010fc2 <_fwalk_reent+0x12>
	...

90010ff0 <__libc_init_array>:
90010ff0:	b570      	push	{r4, r5, r6, lr}
90010ff2:	4d0d      	ldr	r5, [pc, #52]	; (90011028 <__libc_init_array+0x38>)
90010ff4:	4c0d      	ldr	r4, [pc, #52]	; (9001102c <__libc_init_array+0x3c>)
90010ff6:	1b64      	subs	r4, r4, r5
90010ff8:	10a4      	asrs	r4, r4, #2
90010ffa:	2600      	movs	r6, #0
90010ffc:	42a6      	cmp	r6, r4
90010ffe:	d109      	bne.n	90011014 <__libc_init_array+0x24>
90011000:	4d0b      	ldr	r5, [pc, #44]	; (90011030 <__libc_init_array+0x40>)
90011002:	4c0c      	ldr	r4, [pc, #48]	; (90011034 <__libc_init_array+0x44>)
90011004:	f002 feba 	bl	90013d7c <_init>
90011008:	1b64      	subs	r4, r4, r5
9001100a:	10a4      	asrs	r4, r4, #2
9001100c:	2600      	movs	r6, #0
9001100e:	42a6      	cmp	r6, r4
90011010:	d105      	bne.n	9001101e <__libc_init_array+0x2e>
90011012:	bd70      	pop	{r4, r5, r6, pc}
90011014:	f855 3b04 	ldr.w	r3, [r5], #4
90011018:	4798      	blx	r3
9001101a:	3601      	adds	r6, #1
9001101c:	e7ee      	b.n	90010ffc <__libc_init_array+0xc>
9001101e:	f855 3b04 	ldr.w	r3, [r5], #4
90011022:	4798      	blx	r3
90011024:	3601      	adds	r6, #1
90011026:	e7f2      	b.n	9001100e <__libc_init_array+0x1e>
90011028:	90014c0c 	.word	0x90014c0c
9001102c:	90014c0c 	.word	0x90014c0c
90011030:	90014c0c 	.word	0x90014c0c
90011034:	90014c18 	.word	0x90014c18

90011038 <__retarget_lock_init_recursive>:
90011038:	4770      	bx	lr

9001103a <__retarget_lock_acquire_recursive>:
9001103a:	4770      	bx	lr

9001103c <__retarget_lock_release>:
9001103c:	4770      	bx	lr

9001103e <__retarget_lock_release_recursive>:
9001103e:	4770      	bx	lr

90011040 <memcpy>:
90011040:	440a      	add	r2, r1
90011042:	4291      	cmp	r1, r2
90011044:	f100 33ff 	add.w	r3, r0, #4294967295
90011048:	d100      	bne.n	9001104c <memcpy+0xc>
9001104a:	4770      	bx	lr
9001104c:	b510      	push	{r4, lr}
9001104e:	f811 4b01 	ldrb.w	r4, [r1], #1
90011052:	f803 4f01 	strb.w	r4, [r3, #1]!
90011056:	4291      	cmp	r1, r2
90011058:	d1f9      	bne.n	9001104e <memcpy+0xe>
9001105a:	bd10      	pop	{r4, pc}

9001105c <memmove>:
9001105c:	4288      	cmp	r0, r1
9001105e:	b510      	push	{r4, lr}
90011060:	eb01 0402 	add.w	r4, r1, r2
90011064:	d902      	bls.n	9001106c <memmove+0x10>
90011066:	4284      	cmp	r4, r0
90011068:	4623      	mov	r3, r4
9001106a:	d807      	bhi.n	9001107c <memmove+0x20>
9001106c:	1e43      	subs	r3, r0, #1
9001106e:	42a1      	cmp	r1, r4
90011070:	d008      	beq.n	90011084 <memmove+0x28>
90011072:	f811 2b01 	ldrb.w	r2, [r1], #1
90011076:	f803 2f01 	strb.w	r2, [r3, #1]!
9001107a:	e7f8      	b.n	9001106e <memmove+0x12>
9001107c:	4402      	add	r2, r0
9001107e:	4601      	mov	r1, r0
90011080:	428a      	cmp	r2, r1
90011082:	d100      	bne.n	90011086 <memmove+0x2a>
90011084:	bd10      	pop	{r4, pc}
90011086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9001108a:	f802 4d01 	strb.w	r4, [r2, #-1]!
9001108e:	e7f7      	b.n	90011080 <memmove+0x24>

90011090 <memset>:
90011090:	4402      	add	r2, r0
90011092:	4603      	mov	r3, r0
90011094:	4293      	cmp	r3, r2
90011096:	d100      	bne.n	9001109a <memset+0xa>
90011098:	4770      	bx	lr
9001109a:	f803 1b01 	strb.w	r1, [r3], #1
9001109e:	e7f9      	b.n	90011094 <memset+0x4>

900110a0 <sbrk_aligned>:
900110a0:	b570      	push	{r4, r5, r6, lr}
900110a2:	4e0e      	ldr	r6, [pc, #56]	; (900110dc <sbrk_aligned+0x3c>)
900110a4:	460c      	mov	r4, r1
900110a6:	6831      	ldr	r1, [r6, #0]
900110a8:	4605      	mov	r5, r0
900110aa:	b911      	cbnz	r1, 900110b2 <sbrk_aligned+0x12>
900110ac:	f000 fdc6 	bl	90011c3c <_sbrk_r>
900110b0:	6030      	str	r0, [r6, #0]
900110b2:	4621      	mov	r1, r4
900110b4:	4628      	mov	r0, r5
900110b6:	f000 fdc1 	bl	90011c3c <_sbrk_r>
900110ba:	1c43      	adds	r3, r0, #1
900110bc:	d00a      	beq.n	900110d4 <sbrk_aligned+0x34>
900110be:	1cc4      	adds	r4, r0, #3
900110c0:	f024 0403 	bic.w	r4, r4, #3
900110c4:	42a0      	cmp	r0, r4
900110c6:	d007      	beq.n	900110d8 <sbrk_aligned+0x38>
900110c8:	1a21      	subs	r1, r4, r0
900110ca:	4628      	mov	r0, r5
900110cc:	f000 fdb6 	bl	90011c3c <_sbrk_r>
900110d0:	3001      	adds	r0, #1
900110d2:	d101      	bne.n	900110d8 <sbrk_aligned+0x38>
900110d4:	f04f 34ff 	mov.w	r4, #4294967295
900110d8:	4620      	mov	r0, r4
900110da:	bd70      	pop	{r4, r5, r6, pc}
900110dc:	240129e4 	.word	0x240129e4

900110e0 <_malloc_r>:
900110e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900110e4:	1ccd      	adds	r5, r1, #3
900110e6:	f025 0503 	bic.w	r5, r5, #3
900110ea:	3508      	adds	r5, #8
900110ec:	2d0c      	cmp	r5, #12
900110ee:	bf38      	it	cc
900110f0:	250c      	movcc	r5, #12
900110f2:	2d00      	cmp	r5, #0
900110f4:	4607      	mov	r7, r0
900110f6:	db01      	blt.n	900110fc <_malloc_r+0x1c>
900110f8:	42a9      	cmp	r1, r5
900110fa:	d905      	bls.n	90011108 <_malloc_r+0x28>
900110fc:	230c      	movs	r3, #12
900110fe:	603b      	str	r3, [r7, #0]
90011100:	2600      	movs	r6, #0
90011102:	4630      	mov	r0, r6
90011104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011108:	4e2e      	ldr	r6, [pc, #184]	; (900111c4 <_malloc_r+0xe4>)
9001110a:	f001 fed5 	bl	90012eb8 <__malloc_lock>
9001110e:	6833      	ldr	r3, [r6, #0]
90011110:	461c      	mov	r4, r3
90011112:	bb34      	cbnz	r4, 90011162 <_malloc_r+0x82>
90011114:	4629      	mov	r1, r5
90011116:	4638      	mov	r0, r7
90011118:	f7ff ffc2 	bl	900110a0 <sbrk_aligned>
9001111c:	1c43      	adds	r3, r0, #1
9001111e:	4604      	mov	r4, r0
90011120:	d14d      	bne.n	900111be <_malloc_r+0xde>
90011122:	6834      	ldr	r4, [r6, #0]
90011124:	4626      	mov	r6, r4
90011126:	2e00      	cmp	r6, #0
90011128:	d140      	bne.n	900111ac <_malloc_r+0xcc>
9001112a:	6823      	ldr	r3, [r4, #0]
9001112c:	4631      	mov	r1, r6
9001112e:	4638      	mov	r0, r7
90011130:	eb04 0803 	add.w	r8, r4, r3
90011134:	f000 fd82 	bl	90011c3c <_sbrk_r>
90011138:	4580      	cmp	r8, r0
9001113a:	d13a      	bne.n	900111b2 <_malloc_r+0xd2>
9001113c:	6821      	ldr	r1, [r4, #0]
9001113e:	3503      	adds	r5, #3
90011140:	1a6d      	subs	r5, r5, r1
90011142:	f025 0503 	bic.w	r5, r5, #3
90011146:	3508      	adds	r5, #8
90011148:	2d0c      	cmp	r5, #12
9001114a:	bf38      	it	cc
9001114c:	250c      	movcc	r5, #12
9001114e:	4629      	mov	r1, r5
90011150:	4638      	mov	r0, r7
90011152:	f7ff ffa5 	bl	900110a0 <sbrk_aligned>
90011156:	3001      	adds	r0, #1
90011158:	d02b      	beq.n	900111b2 <_malloc_r+0xd2>
9001115a:	6823      	ldr	r3, [r4, #0]
9001115c:	442b      	add	r3, r5
9001115e:	6023      	str	r3, [r4, #0]
90011160:	e00e      	b.n	90011180 <_malloc_r+0xa0>
90011162:	6822      	ldr	r2, [r4, #0]
90011164:	1b52      	subs	r2, r2, r5
90011166:	d41e      	bmi.n	900111a6 <_malloc_r+0xc6>
90011168:	2a0b      	cmp	r2, #11
9001116a:	d916      	bls.n	9001119a <_malloc_r+0xba>
9001116c:	1961      	adds	r1, r4, r5
9001116e:	42a3      	cmp	r3, r4
90011170:	6025      	str	r5, [r4, #0]
90011172:	bf18      	it	ne
90011174:	6059      	strne	r1, [r3, #4]
90011176:	6863      	ldr	r3, [r4, #4]
90011178:	bf08      	it	eq
9001117a:	6031      	streq	r1, [r6, #0]
9001117c:	5162      	str	r2, [r4, r5]
9001117e:	604b      	str	r3, [r1, #4]
90011180:	4638      	mov	r0, r7
90011182:	f104 060b 	add.w	r6, r4, #11
90011186:	f001 fe9d 	bl	90012ec4 <__malloc_unlock>
9001118a:	f026 0607 	bic.w	r6, r6, #7
9001118e:	1d23      	adds	r3, r4, #4
90011190:	1af2      	subs	r2, r6, r3
90011192:	d0b6      	beq.n	90011102 <_malloc_r+0x22>
90011194:	1b9b      	subs	r3, r3, r6
90011196:	50a3      	str	r3, [r4, r2]
90011198:	e7b3      	b.n	90011102 <_malloc_r+0x22>
9001119a:	6862      	ldr	r2, [r4, #4]
9001119c:	42a3      	cmp	r3, r4
9001119e:	bf0c      	ite	eq
900111a0:	6032      	streq	r2, [r6, #0]
900111a2:	605a      	strne	r2, [r3, #4]
900111a4:	e7ec      	b.n	90011180 <_malloc_r+0xa0>
900111a6:	4623      	mov	r3, r4
900111a8:	6864      	ldr	r4, [r4, #4]
900111aa:	e7b2      	b.n	90011112 <_malloc_r+0x32>
900111ac:	4634      	mov	r4, r6
900111ae:	6876      	ldr	r6, [r6, #4]
900111b0:	e7b9      	b.n	90011126 <_malloc_r+0x46>
900111b2:	230c      	movs	r3, #12
900111b4:	603b      	str	r3, [r7, #0]
900111b6:	4638      	mov	r0, r7
900111b8:	f001 fe84 	bl	90012ec4 <__malloc_unlock>
900111bc:	e7a1      	b.n	90011102 <_malloc_r+0x22>
900111be:	6025      	str	r5, [r4, #0]
900111c0:	e7de      	b.n	90011180 <_malloc_r+0xa0>
900111c2:	bf00      	nop
900111c4:	240129e0 	.word	0x240129e0

900111c8 <__cvt>:
900111c8:	b5f0      	push	{r4, r5, r6, r7, lr}
900111ca:	ed2d 8b02 	vpush	{d8}
900111ce:	eeb0 8b40 	vmov.f64	d8, d0
900111d2:	b085      	sub	sp, #20
900111d4:	4617      	mov	r7, r2
900111d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900111d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
900111da:	ee18 2a90 	vmov	r2, s17
900111de:	f025 0520 	bic.w	r5, r5, #32
900111e2:	2a00      	cmp	r2, #0
900111e4:	bfb6      	itet	lt
900111e6:	222d      	movlt	r2, #45	; 0x2d
900111e8:	2200      	movge	r2, #0
900111ea:	eeb1 8b40 	vneglt.f64	d8, d0
900111ee:	2d46      	cmp	r5, #70	; 0x46
900111f0:	460c      	mov	r4, r1
900111f2:	701a      	strb	r2, [r3, #0]
900111f4:	d004      	beq.n	90011200 <__cvt+0x38>
900111f6:	2d45      	cmp	r5, #69	; 0x45
900111f8:	d100      	bne.n	900111fc <__cvt+0x34>
900111fa:	3401      	adds	r4, #1
900111fc:	2102      	movs	r1, #2
900111fe:	e000      	b.n	90011202 <__cvt+0x3a>
90011200:	2103      	movs	r1, #3
90011202:	ab03      	add	r3, sp, #12
90011204:	9301      	str	r3, [sp, #4]
90011206:	ab02      	add	r3, sp, #8
90011208:	9300      	str	r3, [sp, #0]
9001120a:	4622      	mov	r2, r4
9001120c:	4633      	mov	r3, r6
9001120e:	eeb0 0b48 	vmov.f64	d0, d8
90011212:	f000 ff9d 	bl	90012150 <_dtoa_r>
90011216:	2d47      	cmp	r5, #71	; 0x47
90011218:	d101      	bne.n	9001121e <__cvt+0x56>
9001121a:	07fb      	lsls	r3, r7, #31
9001121c:	d51a      	bpl.n	90011254 <__cvt+0x8c>
9001121e:	2d46      	cmp	r5, #70	; 0x46
90011220:	eb00 0204 	add.w	r2, r0, r4
90011224:	d10c      	bne.n	90011240 <__cvt+0x78>
90011226:	7803      	ldrb	r3, [r0, #0]
90011228:	2b30      	cmp	r3, #48	; 0x30
9001122a:	d107      	bne.n	9001123c <__cvt+0x74>
9001122c:	eeb5 8b40 	vcmp.f64	d8, #0.0
90011230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011234:	bf1c      	itt	ne
90011236:	f1c4 0401 	rsbne	r4, r4, #1
9001123a:	6034      	strne	r4, [r6, #0]
9001123c:	6833      	ldr	r3, [r6, #0]
9001123e:	441a      	add	r2, r3
90011240:	eeb5 8b40 	vcmp.f64	d8, #0.0
90011244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011248:	bf08      	it	eq
9001124a:	9203      	streq	r2, [sp, #12]
9001124c:	2130      	movs	r1, #48	; 0x30
9001124e:	9b03      	ldr	r3, [sp, #12]
90011250:	4293      	cmp	r3, r2
90011252:	d307      	bcc.n	90011264 <__cvt+0x9c>
90011254:	9b03      	ldr	r3, [sp, #12]
90011256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90011258:	1a1b      	subs	r3, r3, r0
9001125a:	6013      	str	r3, [r2, #0]
9001125c:	b005      	add	sp, #20
9001125e:	ecbd 8b02 	vpop	{d8}
90011262:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011264:	1c5c      	adds	r4, r3, #1
90011266:	9403      	str	r4, [sp, #12]
90011268:	7019      	strb	r1, [r3, #0]
9001126a:	e7f0      	b.n	9001124e <__cvt+0x86>

9001126c <__exponent>:
9001126c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9001126e:	4603      	mov	r3, r0
90011270:	2900      	cmp	r1, #0
90011272:	bfb8      	it	lt
90011274:	4249      	neglt	r1, r1
90011276:	f803 2b02 	strb.w	r2, [r3], #2
9001127a:	bfb4      	ite	lt
9001127c:	222d      	movlt	r2, #45	; 0x2d
9001127e:	222b      	movge	r2, #43	; 0x2b
90011280:	2909      	cmp	r1, #9
90011282:	7042      	strb	r2, [r0, #1]
90011284:	dd2a      	ble.n	900112dc <__exponent+0x70>
90011286:	f10d 0407 	add.w	r4, sp, #7
9001128a:	46a4      	mov	ip, r4
9001128c:	270a      	movs	r7, #10
9001128e:	46a6      	mov	lr, r4
90011290:	460a      	mov	r2, r1
90011292:	fb91 f6f7 	sdiv	r6, r1, r7
90011296:	fb07 1516 	mls	r5, r7, r6, r1
9001129a:	3530      	adds	r5, #48	; 0x30
9001129c:	2a63      	cmp	r2, #99	; 0x63
9001129e:	f104 34ff 	add.w	r4, r4, #4294967295
900112a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
900112a6:	4631      	mov	r1, r6
900112a8:	dcf1      	bgt.n	9001128e <__exponent+0x22>
900112aa:	3130      	adds	r1, #48	; 0x30
900112ac:	f1ae 0502 	sub.w	r5, lr, #2
900112b0:	f804 1c01 	strb.w	r1, [r4, #-1]
900112b4:	1c44      	adds	r4, r0, #1
900112b6:	4629      	mov	r1, r5
900112b8:	4561      	cmp	r1, ip
900112ba:	d30a      	bcc.n	900112d2 <__exponent+0x66>
900112bc:	f10d 0209 	add.w	r2, sp, #9
900112c0:	eba2 020e 	sub.w	r2, r2, lr
900112c4:	4565      	cmp	r5, ip
900112c6:	bf88      	it	hi
900112c8:	2200      	movhi	r2, #0
900112ca:	4413      	add	r3, r2
900112cc:	1a18      	subs	r0, r3, r0
900112ce:	b003      	add	sp, #12
900112d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
900112d2:	f811 2b01 	ldrb.w	r2, [r1], #1
900112d6:	f804 2f01 	strb.w	r2, [r4, #1]!
900112da:	e7ed      	b.n	900112b8 <__exponent+0x4c>
900112dc:	2330      	movs	r3, #48	; 0x30
900112de:	3130      	adds	r1, #48	; 0x30
900112e0:	7083      	strb	r3, [r0, #2]
900112e2:	70c1      	strb	r1, [r0, #3]
900112e4:	1d03      	adds	r3, r0, #4
900112e6:	e7f1      	b.n	900112cc <__exponent+0x60>

900112e8 <_printf_float>:
900112e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900112ec:	b08b      	sub	sp, #44	; 0x2c
900112ee:	460c      	mov	r4, r1
900112f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
900112f4:	4616      	mov	r6, r2
900112f6:	461f      	mov	r7, r3
900112f8:	4605      	mov	r5, r0
900112fa:	f001 fd59 	bl	90012db0 <_localeconv_r>
900112fe:	f8d0 b000 	ldr.w	fp, [r0]
90011302:	4658      	mov	r0, fp
90011304:	f7ee fff6 	bl	900002f4 <strlen>
90011308:	2300      	movs	r3, #0
9001130a:	9308      	str	r3, [sp, #32]
9001130c:	f8d8 3000 	ldr.w	r3, [r8]
90011310:	f894 9018 	ldrb.w	r9, [r4, #24]
90011314:	6822      	ldr	r2, [r4, #0]
90011316:	3307      	adds	r3, #7
90011318:	f023 0307 	bic.w	r3, r3, #7
9001131c:	f103 0108 	add.w	r1, r3, #8
90011320:	f8c8 1000 	str.w	r1, [r8]
90011324:	4682      	mov	sl, r0
90011326:	e9d3 0100 	ldrd	r0, r1, [r3]
9001132a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
9001132e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 90011590 <_printf_float+0x2a8>
90011332:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
90011336:	eeb0 6bc0 	vabs.f64	d6, d0
9001133a:	eeb4 6b47 	vcmp.f64	d6, d7
9001133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011342:	dd24      	ble.n	9001138e <_printf_float+0xa6>
90011344:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
90011348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001134c:	d502      	bpl.n	90011354 <_printf_float+0x6c>
9001134e:	232d      	movs	r3, #45	; 0x2d
90011350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90011354:	4b90      	ldr	r3, [pc, #576]	; (90011598 <_printf_float+0x2b0>)
90011356:	4891      	ldr	r0, [pc, #580]	; (9001159c <_printf_float+0x2b4>)
90011358:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
9001135c:	bf94      	ite	ls
9001135e:	4698      	movls	r8, r3
90011360:	4680      	movhi	r8, r0
90011362:	2303      	movs	r3, #3
90011364:	6123      	str	r3, [r4, #16]
90011366:	f022 0204 	bic.w	r2, r2, #4
9001136a:	2300      	movs	r3, #0
9001136c:	6022      	str	r2, [r4, #0]
9001136e:	9304      	str	r3, [sp, #16]
90011370:	9700      	str	r7, [sp, #0]
90011372:	4633      	mov	r3, r6
90011374:	aa09      	add	r2, sp, #36	; 0x24
90011376:	4621      	mov	r1, r4
90011378:	4628      	mov	r0, r5
9001137a:	f000 f9d3 	bl	90011724 <_printf_common>
9001137e:	3001      	adds	r0, #1
90011380:	f040 808a 	bne.w	90011498 <_printf_float+0x1b0>
90011384:	f04f 30ff 	mov.w	r0, #4294967295
90011388:	b00b      	add	sp, #44	; 0x2c
9001138a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001138e:	eeb4 0b40 	vcmp.f64	d0, d0
90011392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011396:	d709      	bvc.n	900113ac <_printf_float+0xc4>
90011398:	ee10 3a90 	vmov	r3, s1
9001139c:	2b00      	cmp	r3, #0
9001139e:	bfbc      	itt	lt
900113a0:	232d      	movlt	r3, #45	; 0x2d
900113a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
900113a6:	487e      	ldr	r0, [pc, #504]	; (900115a0 <_printf_float+0x2b8>)
900113a8:	4b7e      	ldr	r3, [pc, #504]	; (900115a4 <_printf_float+0x2bc>)
900113aa:	e7d5      	b.n	90011358 <_printf_float+0x70>
900113ac:	6863      	ldr	r3, [r4, #4]
900113ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
900113b2:	9104      	str	r1, [sp, #16]
900113b4:	1c59      	adds	r1, r3, #1
900113b6:	d13c      	bne.n	90011432 <_printf_float+0x14a>
900113b8:	2306      	movs	r3, #6
900113ba:	6063      	str	r3, [r4, #4]
900113bc:	2300      	movs	r3, #0
900113be:	9303      	str	r3, [sp, #12]
900113c0:	ab08      	add	r3, sp, #32
900113c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
900113c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
900113ca:	ab07      	add	r3, sp, #28
900113cc:	6861      	ldr	r1, [r4, #4]
900113ce:	9300      	str	r3, [sp, #0]
900113d0:	6022      	str	r2, [r4, #0]
900113d2:	f10d 031b 	add.w	r3, sp, #27
900113d6:	4628      	mov	r0, r5
900113d8:	f7ff fef6 	bl	900111c8 <__cvt>
900113dc:	9b04      	ldr	r3, [sp, #16]
900113de:	9907      	ldr	r1, [sp, #28]
900113e0:	2b47      	cmp	r3, #71	; 0x47
900113e2:	4680      	mov	r8, r0
900113e4:	d108      	bne.n	900113f8 <_printf_float+0x110>
900113e6:	1cc8      	adds	r0, r1, #3
900113e8:	db02      	blt.n	900113f0 <_printf_float+0x108>
900113ea:	6863      	ldr	r3, [r4, #4]
900113ec:	4299      	cmp	r1, r3
900113ee:	dd41      	ble.n	90011474 <_printf_float+0x18c>
900113f0:	f1a9 0902 	sub.w	r9, r9, #2
900113f4:	fa5f f989 	uxtb.w	r9, r9
900113f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
900113fc:	d820      	bhi.n	90011440 <_printf_float+0x158>
900113fe:	3901      	subs	r1, #1
90011400:	464a      	mov	r2, r9
90011402:	f104 0050 	add.w	r0, r4, #80	; 0x50
90011406:	9107      	str	r1, [sp, #28]
90011408:	f7ff ff30 	bl	9001126c <__exponent>
9001140c:	9a08      	ldr	r2, [sp, #32]
9001140e:	9004      	str	r0, [sp, #16]
90011410:	1813      	adds	r3, r2, r0
90011412:	2a01      	cmp	r2, #1
90011414:	6123      	str	r3, [r4, #16]
90011416:	dc02      	bgt.n	9001141e <_printf_float+0x136>
90011418:	6822      	ldr	r2, [r4, #0]
9001141a:	07d2      	lsls	r2, r2, #31
9001141c:	d501      	bpl.n	90011422 <_printf_float+0x13a>
9001141e:	3301      	adds	r3, #1
90011420:	6123      	str	r3, [r4, #16]
90011422:	f89d 301b 	ldrb.w	r3, [sp, #27]
90011426:	2b00      	cmp	r3, #0
90011428:	d0a2      	beq.n	90011370 <_printf_float+0x88>
9001142a:	232d      	movs	r3, #45	; 0x2d
9001142c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90011430:	e79e      	b.n	90011370 <_printf_float+0x88>
90011432:	9904      	ldr	r1, [sp, #16]
90011434:	2947      	cmp	r1, #71	; 0x47
90011436:	d1c1      	bne.n	900113bc <_printf_float+0xd4>
90011438:	2b00      	cmp	r3, #0
9001143a:	d1bf      	bne.n	900113bc <_printf_float+0xd4>
9001143c:	2301      	movs	r3, #1
9001143e:	e7bc      	b.n	900113ba <_printf_float+0xd2>
90011440:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
90011444:	d118      	bne.n	90011478 <_printf_float+0x190>
90011446:	2900      	cmp	r1, #0
90011448:	6863      	ldr	r3, [r4, #4]
9001144a:	dd0b      	ble.n	90011464 <_printf_float+0x17c>
9001144c:	6121      	str	r1, [r4, #16]
9001144e:	b913      	cbnz	r3, 90011456 <_printf_float+0x16e>
90011450:	6822      	ldr	r2, [r4, #0]
90011452:	07d0      	lsls	r0, r2, #31
90011454:	d502      	bpl.n	9001145c <_printf_float+0x174>
90011456:	3301      	adds	r3, #1
90011458:	440b      	add	r3, r1
9001145a:	6123      	str	r3, [r4, #16]
9001145c:	2300      	movs	r3, #0
9001145e:	65a1      	str	r1, [r4, #88]	; 0x58
90011460:	9304      	str	r3, [sp, #16]
90011462:	e7de      	b.n	90011422 <_printf_float+0x13a>
90011464:	b913      	cbnz	r3, 9001146c <_printf_float+0x184>
90011466:	6822      	ldr	r2, [r4, #0]
90011468:	07d2      	lsls	r2, r2, #31
9001146a:	d501      	bpl.n	90011470 <_printf_float+0x188>
9001146c:	3302      	adds	r3, #2
9001146e:	e7f4      	b.n	9001145a <_printf_float+0x172>
90011470:	2301      	movs	r3, #1
90011472:	e7f2      	b.n	9001145a <_printf_float+0x172>
90011474:	f04f 0967 	mov.w	r9, #103	; 0x67
90011478:	9b08      	ldr	r3, [sp, #32]
9001147a:	4299      	cmp	r1, r3
9001147c:	db05      	blt.n	9001148a <_printf_float+0x1a2>
9001147e:	6823      	ldr	r3, [r4, #0]
90011480:	6121      	str	r1, [r4, #16]
90011482:	07d8      	lsls	r0, r3, #31
90011484:	d5ea      	bpl.n	9001145c <_printf_float+0x174>
90011486:	1c4b      	adds	r3, r1, #1
90011488:	e7e7      	b.n	9001145a <_printf_float+0x172>
9001148a:	2900      	cmp	r1, #0
9001148c:	bfd4      	ite	le
9001148e:	f1c1 0202 	rsble	r2, r1, #2
90011492:	2201      	movgt	r2, #1
90011494:	4413      	add	r3, r2
90011496:	e7e0      	b.n	9001145a <_printf_float+0x172>
90011498:	6823      	ldr	r3, [r4, #0]
9001149a:	055a      	lsls	r2, r3, #21
9001149c:	d407      	bmi.n	900114ae <_printf_float+0x1c6>
9001149e:	6923      	ldr	r3, [r4, #16]
900114a0:	4642      	mov	r2, r8
900114a2:	4631      	mov	r1, r6
900114a4:	4628      	mov	r0, r5
900114a6:	47b8      	blx	r7
900114a8:	3001      	adds	r0, #1
900114aa:	d12a      	bne.n	90011502 <_printf_float+0x21a>
900114ac:	e76a      	b.n	90011384 <_printf_float+0x9c>
900114ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
900114b2:	f240 80e2 	bls.w	9001167a <_printf_float+0x392>
900114b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
900114ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
900114be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900114c2:	d133      	bne.n	9001152c <_printf_float+0x244>
900114c4:	4a38      	ldr	r2, [pc, #224]	; (900115a8 <_printf_float+0x2c0>)
900114c6:	2301      	movs	r3, #1
900114c8:	4631      	mov	r1, r6
900114ca:	4628      	mov	r0, r5
900114cc:	47b8      	blx	r7
900114ce:	3001      	adds	r0, #1
900114d0:	f43f af58 	beq.w	90011384 <_printf_float+0x9c>
900114d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
900114d8:	429a      	cmp	r2, r3
900114da:	db02      	blt.n	900114e2 <_printf_float+0x1fa>
900114dc:	6823      	ldr	r3, [r4, #0]
900114de:	07d8      	lsls	r0, r3, #31
900114e0:	d50f      	bpl.n	90011502 <_printf_float+0x21a>
900114e2:	4653      	mov	r3, sl
900114e4:	465a      	mov	r2, fp
900114e6:	4631      	mov	r1, r6
900114e8:	4628      	mov	r0, r5
900114ea:	47b8      	blx	r7
900114ec:	3001      	adds	r0, #1
900114ee:	f43f af49 	beq.w	90011384 <_printf_float+0x9c>
900114f2:	f04f 0800 	mov.w	r8, #0
900114f6:	f104 091a 	add.w	r9, r4, #26
900114fa:	9b08      	ldr	r3, [sp, #32]
900114fc:	3b01      	subs	r3, #1
900114fe:	4543      	cmp	r3, r8
90011500:	dc09      	bgt.n	90011516 <_printf_float+0x22e>
90011502:	6823      	ldr	r3, [r4, #0]
90011504:	079b      	lsls	r3, r3, #30
90011506:	f100 8108 	bmi.w	9001171a <_printf_float+0x432>
9001150a:	68e0      	ldr	r0, [r4, #12]
9001150c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001150e:	4298      	cmp	r0, r3
90011510:	bfb8      	it	lt
90011512:	4618      	movlt	r0, r3
90011514:	e738      	b.n	90011388 <_printf_float+0xa0>
90011516:	2301      	movs	r3, #1
90011518:	464a      	mov	r2, r9
9001151a:	4631      	mov	r1, r6
9001151c:	4628      	mov	r0, r5
9001151e:	47b8      	blx	r7
90011520:	3001      	adds	r0, #1
90011522:	f43f af2f 	beq.w	90011384 <_printf_float+0x9c>
90011526:	f108 0801 	add.w	r8, r8, #1
9001152a:	e7e6      	b.n	900114fa <_printf_float+0x212>
9001152c:	9b07      	ldr	r3, [sp, #28]
9001152e:	2b00      	cmp	r3, #0
90011530:	dc3c      	bgt.n	900115ac <_printf_float+0x2c4>
90011532:	4a1d      	ldr	r2, [pc, #116]	; (900115a8 <_printf_float+0x2c0>)
90011534:	2301      	movs	r3, #1
90011536:	4631      	mov	r1, r6
90011538:	4628      	mov	r0, r5
9001153a:	47b8      	blx	r7
9001153c:	3001      	adds	r0, #1
9001153e:	f43f af21 	beq.w	90011384 <_printf_float+0x9c>
90011542:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90011546:	4313      	orrs	r3, r2
90011548:	d102      	bne.n	90011550 <_printf_float+0x268>
9001154a:	6823      	ldr	r3, [r4, #0]
9001154c:	07d9      	lsls	r1, r3, #31
9001154e:	d5d8      	bpl.n	90011502 <_printf_float+0x21a>
90011550:	4653      	mov	r3, sl
90011552:	465a      	mov	r2, fp
90011554:	4631      	mov	r1, r6
90011556:	4628      	mov	r0, r5
90011558:	47b8      	blx	r7
9001155a:	3001      	adds	r0, #1
9001155c:	f43f af12 	beq.w	90011384 <_printf_float+0x9c>
90011560:	f04f 0900 	mov.w	r9, #0
90011564:	f104 0a1a 	add.w	sl, r4, #26
90011568:	9b07      	ldr	r3, [sp, #28]
9001156a:	425b      	negs	r3, r3
9001156c:	454b      	cmp	r3, r9
9001156e:	dc01      	bgt.n	90011574 <_printf_float+0x28c>
90011570:	9b08      	ldr	r3, [sp, #32]
90011572:	e795      	b.n	900114a0 <_printf_float+0x1b8>
90011574:	2301      	movs	r3, #1
90011576:	4652      	mov	r2, sl
90011578:	4631      	mov	r1, r6
9001157a:	4628      	mov	r0, r5
9001157c:	47b8      	blx	r7
9001157e:	3001      	adds	r0, #1
90011580:	f43f af00 	beq.w	90011384 <_printf_float+0x9c>
90011584:	f109 0901 	add.w	r9, r9, #1
90011588:	e7ee      	b.n	90011568 <_printf_float+0x280>
9001158a:	bf00      	nop
9001158c:	f3af 8000 	nop.w
90011590:	ffffffff 	.word	0xffffffff
90011594:	7fefffff 	.word	0x7fefffff
90011598:	9001488c 	.word	0x9001488c
9001159c:	90014890 	.word	0x90014890
900115a0:	90014898 	.word	0x90014898
900115a4:	90014894 	.word	0x90014894
900115a8:	9001489c 	.word	0x9001489c
900115ac:	9a08      	ldr	r2, [sp, #32]
900115ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
900115b0:	429a      	cmp	r2, r3
900115b2:	bfa8      	it	ge
900115b4:	461a      	movge	r2, r3
900115b6:	2a00      	cmp	r2, #0
900115b8:	4691      	mov	r9, r2
900115ba:	dc38      	bgt.n	9001162e <_printf_float+0x346>
900115bc:	2300      	movs	r3, #0
900115be:	9305      	str	r3, [sp, #20]
900115c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
900115c4:	f104 021a 	add.w	r2, r4, #26
900115c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
900115ca:	9905      	ldr	r1, [sp, #20]
900115cc:	9304      	str	r3, [sp, #16]
900115ce:	eba3 0309 	sub.w	r3, r3, r9
900115d2:	428b      	cmp	r3, r1
900115d4:	dc33      	bgt.n	9001163e <_printf_float+0x356>
900115d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
900115da:	429a      	cmp	r2, r3
900115dc:	db3c      	blt.n	90011658 <_printf_float+0x370>
900115de:	6823      	ldr	r3, [r4, #0]
900115e0:	07da      	lsls	r2, r3, #31
900115e2:	d439      	bmi.n	90011658 <_printf_float+0x370>
900115e4:	9b08      	ldr	r3, [sp, #32]
900115e6:	9a04      	ldr	r2, [sp, #16]
900115e8:	9907      	ldr	r1, [sp, #28]
900115ea:	1a9a      	subs	r2, r3, r2
900115ec:	eba3 0901 	sub.w	r9, r3, r1
900115f0:	4591      	cmp	r9, r2
900115f2:	bfa8      	it	ge
900115f4:	4691      	movge	r9, r2
900115f6:	f1b9 0f00 	cmp.w	r9, #0
900115fa:	dc35      	bgt.n	90011668 <_printf_float+0x380>
900115fc:	f04f 0800 	mov.w	r8, #0
90011600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
90011604:	f104 0a1a 	add.w	sl, r4, #26
90011608:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
9001160c:	1a9b      	subs	r3, r3, r2
9001160e:	eba3 0309 	sub.w	r3, r3, r9
90011612:	4543      	cmp	r3, r8
90011614:	f77f af75 	ble.w	90011502 <_printf_float+0x21a>
90011618:	2301      	movs	r3, #1
9001161a:	4652      	mov	r2, sl
9001161c:	4631      	mov	r1, r6
9001161e:	4628      	mov	r0, r5
90011620:	47b8      	blx	r7
90011622:	3001      	adds	r0, #1
90011624:	f43f aeae 	beq.w	90011384 <_printf_float+0x9c>
90011628:	f108 0801 	add.w	r8, r8, #1
9001162c:	e7ec      	b.n	90011608 <_printf_float+0x320>
9001162e:	4613      	mov	r3, r2
90011630:	4631      	mov	r1, r6
90011632:	4642      	mov	r2, r8
90011634:	4628      	mov	r0, r5
90011636:	47b8      	blx	r7
90011638:	3001      	adds	r0, #1
9001163a:	d1bf      	bne.n	900115bc <_printf_float+0x2d4>
9001163c:	e6a2      	b.n	90011384 <_printf_float+0x9c>
9001163e:	2301      	movs	r3, #1
90011640:	4631      	mov	r1, r6
90011642:	4628      	mov	r0, r5
90011644:	9204      	str	r2, [sp, #16]
90011646:	47b8      	blx	r7
90011648:	3001      	adds	r0, #1
9001164a:	f43f ae9b 	beq.w	90011384 <_printf_float+0x9c>
9001164e:	9b05      	ldr	r3, [sp, #20]
90011650:	9a04      	ldr	r2, [sp, #16]
90011652:	3301      	adds	r3, #1
90011654:	9305      	str	r3, [sp, #20]
90011656:	e7b7      	b.n	900115c8 <_printf_float+0x2e0>
90011658:	4653      	mov	r3, sl
9001165a:	465a      	mov	r2, fp
9001165c:	4631      	mov	r1, r6
9001165e:	4628      	mov	r0, r5
90011660:	47b8      	blx	r7
90011662:	3001      	adds	r0, #1
90011664:	d1be      	bne.n	900115e4 <_printf_float+0x2fc>
90011666:	e68d      	b.n	90011384 <_printf_float+0x9c>
90011668:	9a04      	ldr	r2, [sp, #16]
9001166a:	464b      	mov	r3, r9
9001166c:	4442      	add	r2, r8
9001166e:	4631      	mov	r1, r6
90011670:	4628      	mov	r0, r5
90011672:	47b8      	blx	r7
90011674:	3001      	adds	r0, #1
90011676:	d1c1      	bne.n	900115fc <_printf_float+0x314>
90011678:	e684      	b.n	90011384 <_printf_float+0x9c>
9001167a:	9a08      	ldr	r2, [sp, #32]
9001167c:	2a01      	cmp	r2, #1
9001167e:	dc01      	bgt.n	90011684 <_printf_float+0x39c>
90011680:	07db      	lsls	r3, r3, #31
90011682:	d537      	bpl.n	900116f4 <_printf_float+0x40c>
90011684:	2301      	movs	r3, #1
90011686:	4642      	mov	r2, r8
90011688:	4631      	mov	r1, r6
9001168a:	4628      	mov	r0, r5
9001168c:	47b8      	blx	r7
9001168e:	3001      	adds	r0, #1
90011690:	f43f ae78 	beq.w	90011384 <_printf_float+0x9c>
90011694:	4653      	mov	r3, sl
90011696:	465a      	mov	r2, fp
90011698:	4631      	mov	r1, r6
9001169a:	4628      	mov	r0, r5
9001169c:	47b8      	blx	r7
9001169e:	3001      	adds	r0, #1
900116a0:	f43f ae70 	beq.w	90011384 <_printf_float+0x9c>
900116a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
900116a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
900116ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900116b0:	d01b      	beq.n	900116ea <_printf_float+0x402>
900116b2:	9b08      	ldr	r3, [sp, #32]
900116b4:	f108 0201 	add.w	r2, r8, #1
900116b8:	3b01      	subs	r3, #1
900116ba:	4631      	mov	r1, r6
900116bc:	4628      	mov	r0, r5
900116be:	47b8      	blx	r7
900116c0:	3001      	adds	r0, #1
900116c2:	d10e      	bne.n	900116e2 <_printf_float+0x3fa>
900116c4:	e65e      	b.n	90011384 <_printf_float+0x9c>
900116c6:	2301      	movs	r3, #1
900116c8:	464a      	mov	r2, r9
900116ca:	4631      	mov	r1, r6
900116cc:	4628      	mov	r0, r5
900116ce:	47b8      	blx	r7
900116d0:	3001      	adds	r0, #1
900116d2:	f43f ae57 	beq.w	90011384 <_printf_float+0x9c>
900116d6:	f108 0801 	add.w	r8, r8, #1
900116da:	9b08      	ldr	r3, [sp, #32]
900116dc:	3b01      	subs	r3, #1
900116de:	4543      	cmp	r3, r8
900116e0:	dcf1      	bgt.n	900116c6 <_printf_float+0x3de>
900116e2:	9b04      	ldr	r3, [sp, #16]
900116e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
900116e8:	e6db      	b.n	900114a2 <_printf_float+0x1ba>
900116ea:	f04f 0800 	mov.w	r8, #0
900116ee:	f104 091a 	add.w	r9, r4, #26
900116f2:	e7f2      	b.n	900116da <_printf_float+0x3f2>
900116f4:	2301      	movs	r3, #1
900116f6:	4642      	mov	r2, r8
900116f8:	e7df      	b.n	900116ba <_printf_float+0x3d2>
900116fa:	2301      	movs	r3, #1
900116fc:	464a      	mov	r2, r9
900116fe:	4631      	mov	r1, r6
90011700:	4628      	mov	r0, r5
90011702:	47b8      	blx	r7
90011704:	3001      	adds	r0, #1
90011706:	f43f ae3d 	beq.w	90011384 <_printf_float+0x9c>
9001170a:	f108 0801 	add.w	r8, r8, #1
9001170e:	68e3      	ldr	r3, [r4, #12]
90011710:	9909      	ldr	r1, [sp, #36]	; 0x24
90011712:	1a5b      	subs	r3, r3, r1
90011714:	4543      	cmp	r3, r8
90011716:	dcf0      	bgt.n	900116fa <_printf_float+0x412>
90011718:	e6f7      	b.n	9001150a <_printf_float+0x222>
9001171a:	f04f 0800 	mov.w	r8, #0
9001171e:	f104 0919 	add.w	r9, r4, #25
90011722:	e7f4      	b.n	9001170e <_printf_float+0x426>

90011724 <_printf_common>:
90011724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90011728:	4616      	mov	r6, r2
9001172a:	4699      	mov	r9, r3
9001172c:	688a      	ldr	r2, [r1, #8]
9001172e:	690b      	ldr	r3, [r1, #16]
90011730:	f8dd 8020 	ldr.w	r8, [sp, #32]
90011734:	4293      	cmp	r3, r2
90011736:	bfb8      	it	lt
90011738:	4613      	movlt	r3, r2
9001173a:	6033      	str	r3, [r6, #0]
9001173c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90011740:	4607      	mov	r7, r0
90011742:	460c      	mov	r4, r1
90011744:	b10a      	cbz	r2, 9001174a <_printf_common+0x26>
90011746:	3301      	adds	r3, #1
90011748:	6033      	str	r3, [r6, #0]
9001174a:	6823      	ldr	r3, [r4, #0]
9001174c:	0699      	lsls	r1, r3, #26
9001174e:	bf42      	ittt	mi
90011750:	6833      	ldrmi	r3, [r6, #0]
90011752:	3302      	addmi	r3, #2
90011754:	6033      	strmi	r3, [r6, #0]
90011756:	6825      	ldr	r5, [r4, #0]
90011758:	f015 0506 	ands.w	r5, r5, #6
9001175c:	d106      	bne.n	9001176c <_printf_common+0x48>
9001175e:	f104 0a19 	add.w	sl, r4, #25
90011762:	68e3      	ldr	r3, [r4, #12]
90011764:	6832      	ldr	r2, [r6, #0]
90011766:	1a9b      	subs	r3, r3, r2
90011768:	42ab      	cmp	r3, r5
9001176a:	dc26      	bgt.n	900117ba <_printf_common+0x96>
9001176c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90011770:	1e13      	subs	r3, r2, #0
90011772:	6822      	ldr	r2, [r4, #0]
90011774:	bf18      	it	ne
90011776:	2301      	movne	r3, #1
90011778:	0692      	lsls	r2, r2, #26
9001177a:	d42b      	bmi.n	900117d4 <_printf_common+0xb0>
9001177c:	f104 0243 	add.w	r2, r4, #67	; 0x43
90011780:	4649      	mov	r1, r9
90011782:	4638      	mov	r0, r7
90011784:	47c0      	blx	r8
90011786:	3001      	adds	r0, #1
90011788:	d01e      	beq.n	900117c8 <_printf_common+0xa4>
9001178a:	6823      	ldr	r3, [r4, #0]
9001178c:	68e5      	ldr	r5, [r4, #12]
9001178e:	6832      	ldr	r2, [r6, #0]
90011790:	f003 0306 	and.w	r3, r3, #6
90011794:	2b04      	cmp	r3, #4
90011796:	bf08      	it	eq
90011798:	1aad      	subeq	r5, r5, r2
9001179a:	68a3      	ldr	r3, [r4, #8]
9001179c:	6922      	ldr	r2, [r4, #16]
9001179e:	bf0c      	ite	eq
900117a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
900117a4:	2500      	movne	r5, #0
900117a6:	4293      	cmp	r3, r2
900117a8:	bfc4      	itt	gt
900117aa:	1a9b      	subgt	r3, r3, r2
900117ac:	18ed      	addgt	r5, r5, r3
900117ae:	2600      	movs	r6, #0
900117b0:	341a      	adds	r4, #26
900117b2:	42b5      	cmp	r5, r6
900117b4:	d11a      	bne.n	900117ec <_printf_common+0xc8>
900117b6:	2000      	movs	r0, #0
900117b8:	e008      	b.n	900117cc <_printf_common+0xa8>
900117ba:	2301      	movs	r3, #1
900117bc:	4652      	mov	r2, sl
900117be:	4649      	mov	r1, r9
900117c0:	4638      	mov	r0, r7
900117c2:	47c0      	blx	r8
900117c4:	3001      	adds	r0, #1
900117c6:	d103      	bne.n	900117d0 <_printf_common+0xac>
900117c8:	f04f 30ff 	mov.w	r0, #4294967295
900117cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900117d0:	3501      	adds	r5, #1
900117d2:	e7c6      	b.n	90011762 <_printf_common+0x3e>
900117d4:	18e1      	adds	r1, r4, r3
900117d6:	1c5a      	adds	r2, r3, #1
900117d8:	2030      	movs	r0, #48	; 0x30
900117da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
900117de:	4422      	add	r2, r4
900117e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
900117e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
900117e8:	3302      	adds	r3, #2
900117ea:	e7c7      	b.n	9001177c <_printf_common+0x58>
900117ec:	2301      	movs	r3, #1
900117ee:	4622      	mov	r2, r4
900117f0:	4649      	mov	r1, r9
900117f2:	4638      	mov	r0, r7
900117f4:	47c0      	blx	r8
900117f6:	3001      	adds	r0, #1
900117f8:	d0e6      	beq.n	900117c8 <_printf_common+0xa4>
900117fa:	3601      	adds	r6, #1
900117fc:	e7d9      	b.n	900117b2 <_printf_common+0x8e>
	...

90011800 <_printf_i>:
90011800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90011804:	7e0f      	ldrb	r7, [r1, #24]
90011806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90011808:	2f78      	cmp	r7, #120	; 0x78
9001180a:	4691      	mov	r9, r2
9001180c:	4680      	mov	r8, r0
9001180e:	460c      	mov	r4, r1
90011810:	469a      	mov	sl, r3
90011812:	f101 0243 	add.w	r2, r1, #67	; 0x43
90011816:	d807      	bhi.n	90011828 <_printf_i+0x28>
90011818:	2f62      	cmp	r7, #98	; 0x62
9001181a:	d80a      	bhi.n	90011832 <_printf_i+0x32>
9001181c:	2f00      	cmp	r7, #0
9001181e:	f000 80d8 	beq.w	900119d2 <_printf_i+0x1d2>
90011822:	2f58      	cmp	r7, #88	; 0x58
90011824:	f000 80a3 	beq.w	9001196e <_printf_i+0x16e>
90011828:	f104 0542 	add.w	r5, r4, #66	; 0x42
9001182c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90011830:	e03a      	b.n	900118a8 <_printf_i+0xa8>
90011832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
90011836:	2b15      	cmp	r3, #21
90011838:	d8f6      	bhi.n	90011828 <_printf_i+0x28>
9001183a:	a101      	add	r1, pc, #4	; (adr r1, 90011840 <_printf_i+0x40>)
9001183c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90011840:	90011899 	.word	0x90011899
90011844:	900118ad 	.word	0x900118ad
90011848:	90011829 	.word	0x90011829
9001184c:	90011829 	.word	0x90011829
90011850:	90011829 	.word	0x90011829
90011854:	90011829 	.word	0x90011829
90011858:	900118ad 	.word	0x900118ad
9001185c:	90011829 	.word	0x90011829
90011860:	90011829 	.word	0x90011829
90011864:	90011829 	.word	0x90011829
90011868:	90011829 	.word	0x90011829
9001186c:	900119b9 	.word	0x900119b9
90011870:	900118dd 	.word	0x900118dd
90011874:	9001199b 	.word	0x9001199b
90011878:	90011829 	.word	0x90011829
9001187c:	90011829 	.word	0x90011829
90011880:	900119db 	.word	0x900119db
90011884:	90011829 	.word	0x90011829
90011888:	900118dd 	.word	0x900118dd
9001188c:	90011829 	.word	0x90011829
90011890:	90011829 	.word	0x90011829
90011894:	900119a3 	.word	0x900119a3
90011898:	682b      	ldr	r3, [r5, #0]
9001189a:	1d1a      	adds	r2, r3, #4
9001189c:	681b      	ldr	r3, [r3, #0]
9001189e:	602a      	str	r2, [r5, #0]
900118a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
900118a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
900118a8:	2301      	movs	r3, #1
900118aa:	e0a3      	b.n	900119f4 <_printf_i+0x1f4>
900118ac:	6820      	ldr	r0, [r4, #0]
900118ae:	6829      	ldr	r1, [r5, #0]
900118b0:	0606      	lsls	r6, r0, #24
900118b2:	f101 0304 	add.w	r3, r1, #4
900118b6:	d50a      	bpl.n	900118ce <_printf_i+0xce>
900118b8:	680e      	ldr	r6, [r1, #0]
900118ba:	602b      	str	r3, [r5, #0]
900118bc:	2e00      	cmp	r6, #0
900118be:	da03      	bge.n	900118c8 <_printf_i+0xc8>
900118c0:	232d      	movs	r3, #45	; 0x2d
900118c2:	4276      	negs	r6, r6
900118c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900118c8:	485e      	ldr	r0, [pc, #376]	; (90011a44 <_printf_i+0x244>)
900118ca:	230a      	movs	r3, #10
900118cc:	e019      	b.n	90011902 <_printf_i+0x102>
900118ce:	680e      	ldr	r6, [r1, #0]
900118d0:	602b      	str	r3, [r5, #0]
900118d2:	f010 0f40 	tst.w	r0, #64	; 0x40
900118d6:	bf18      	it	ne
900118d8:	b236      	sxthne	r6, r6
900118da:	e7ef      	b.n	900118bc <_printf_i+0xbc>
900118dc:	682b      	ldr	r3, [r5, #0]
900118de:	6820      	ldr	r0, [r4, #0]
900118e0:	1d19      	adds	r1, r3, #4
900118e2:	6029      	str	r1, [r5, #0]
900118e4:	0601      	lsls	r1, r0, #24
900118e6:	d501      	bpl.n	900118ec <_printf_i+0xec>
900118e8:	681e      	ldr	r6, [r3, #0]
900118ea:	e002      	b.n	900118f2 <_printf_i+0xf2>
900118ec:	0646      	lsls	r6, r0, #25
900118ee:	d5fb      	bpl.n	900118e8 <_printf_i+0xe8>
900118f0:	881e      	ldrh	r6, [r3, #0]
900118f2:	4854      	ldr	r0, [pc, #336]	; (90011a44 <_printf_i+0x244>)
900118f4:	2f6f      	cmp	r7, #111	; 0x6f
900118f6:	bf0c      	ite	eq
900118f8:	2308      	moveq	r3, #8
900118fa:	230a      	movne	r3, #10
900118fc:	2100      	movs	r1, #0
900118fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90011902:	6865      	ldr	r5, [r4, #4]
90011904:	60a5      	str	r5, [r4, #8]
90011906:	2d00      	cmp	r5, #0
90011908:	bfa2      	ittt	ge
9001190a:	6821      	ldrge	r1, [r4, #0]
9001190c:	f021 0104 	bicge.w	r1, r1, #4
90011910:	6021      	strge	r1, [r4, #0]
90011912:	b90e      	cbnz	r6, 90011918 <_printf_i+0x118>
90011914:	2d00      	cmp	r5, #0
90011916:	d04d      	beq.n	900119b4 <_printf_i+0x1b4>
90011918:	4615      	mov	r5, r2
9001191a:	fbb6 f1f3 	udiv	r1, r6, r3
9001191e:	fb03 6711 	mls	r7, r3, r1, r6
90011922:	5dc7      	ldrb	r7, [r0, r7]
90011924:	f805 7d01 	strb.w	r7, [r5, #-1]!
90011928:	4637      	mov	r7, r6
9001192a:	42bb      	cmp	r3, r7
9001192c:	460e      	mov	r6, r1
9001192e:	d9f4      	bls.n	9001191a <_printf_i+0x11a>
90011930:	2b08      	cmp	r3, #8
90011932:	d10b      	bne.n	9001194c <_printf_i+0x14c>
90011934:	6823      	ldr	r3, [r4, #0]
90011936:	07de      	lsls	r6, r3, #31
90011938:	d508      	bpl.n	9001194c <_printf_i+0x14c>
9001193a:	6923      	ldr	r3, [r4, #16]
9001193c:	6861      	ldr	r1, [r4, #4]
9001193e:	4299      	cmp	r1, r3
90011940:	bfde      	ittt	le
90011942:	2330      	movle	r3, #48	; 0x30
90011944:	f805 3c01 	strble.w	r3, [r5, #-1]
90011948:	f105 35ff 	addle.w	r5, r5, #4294967295
9001194c:	1b52      	subs	r2, r2, r5
9001194e:	6122      	str	r2, [r4, #16]
90011950:	f8cd a000 	str.w	sl, [sp]
90011954:	464b      	mov	r3, r9
90011956:	aa03      	add	r2, sp, #12
90011958:	4621      	mov	r1, r4
9001195a:	4640      	mov	r0, r8
9001195c:	f7ff fee2 	bl	90011724 <_printf_common>
90011960:	3001      	adds	r0, #1
90011962:	d14c      	bne.n	900119fe <_printf_i+0x1fe>
90011964:	f04f 30ff 	mov.w	r0, #4294967295
90011968:	b004      	add	sp, #16
9001196a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001196e:	4835      	ldr	r0, [pc, #212]	; (90011a44 <_printf_i+0x244>)
90011970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
90011974:	6829      	ldr	r1, [r5, #0]
90011976:	6823      	ldr	r3, [r4, #0]
90011978:	f851 6b04 	ldr.w	r6, [r1], #4
9001197c:	6029      	str	r1, [r5, #0]
9001197e:	061d      	lsls	r5, r3, #24
90011980:	d514      	bpl.n	900119ac <_printf_i+0x1ac>
90011982:	07df      	lsls	r7, r3, #31
90011984:	bf44      	itt	mi
90011986:	f043 0320 	orrmi.w	r3, r3, #32
9001198a:	6023      	strmi	r3, [r4, #0]
9001198c:	b91e      	cbnz	r6, 90011996 <_printf_i+0x196>
9001198e:	6823      	ldr	r3, [r4, #0]
90011990:	f023 0320 	bic.w	r3, r3, #32
90011994:	6023      	str	r3, [r4, #0]
90011996:	2310      	movs	r3, #16
90011998:	e7b0      	b.n	900118fc <_printf_i+0xfc>
9001199a:	6823      	ldr	r3, [r4, #0]
9001199c:	f043 0320 	orr.w	r3, r3, #32
900119a0:	6023      	str	r3, [r4, #0]
900119a2:	2378      	movs	r3, #120	; 0x78
900119a4:	4828      	ldr	r0, [pc, #160]	; (90011a48 <_printf_i+0x248>)
900119a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
900119aa:	e7e3      	b.n	90011974 <_printf_i+0x174>
900119ac:	0659      	lsls	r1, r3, #25
900119ae:	bf48      	it	mi
900119b0:	b2b6      	uxthmi	r6, r6
900119b2:	e7e6      	b.n	90011982 <_printf_i+0x182>
900119b4:	4615      	mov	r5, r2
900119b6:	e7bb      	b.n	90011930 <_printf_i+0x130>
900119b8:	682b      	ldr	r3, [r5, #0]
900119ba:	6826      	ldr	r6, [r4, #0]
900119bc:	6961      	ldr	r1, [r4, #20]
900119be:	1d18      	adds	r0, r3, #4
900119c0:	6028      	str	r0, [r5, #0]
900119c2:	0635      	lsls	r5, r6, #24
900119c4:	681b      	ldr	r3, [r3, #0]
900119c6:	d501      	bpl.n	900119cc <_printf_i+0x1cc>
900119c8:	6019      	str	r1, [r3, #0]
900119ca:	e002      	b.n	900119d2 <_printf_i+0x1d2>
900119cc:	0670      	lsls	r0, r6, #25
900119ce:	d5fb      	bpl.n	900119c8 <_printf_i+0x1c8>
900119d0:	8019      	strh	r1, [r3, #0]
900119d2:	2300      	movs	r3, #0
900119d4:	6123      	str	r3, [r4, #16]
900119d6:	4615      	mov	r5, r2
900119d8:	e7ba      	b.n	90011950 <_printf_i+0x150>
900119da:	682b      	ldr	r3, [r5, #0]
900119dc:	1d1a      	adds	r2, r3, #4
900119de:	602a      	str	r2, [r5, #0]
900119e0:	681d      	ldr	r5, [r3, #0]
900119e2:	6862      	ldr	r2, [r4, #4]
900119e4:	2100      	movs	r1, #0
900119e6:	4628      	mov	r0, r5
900119e8:	f7ee fc92 	bl	90000310 <memchr>
900119ec:	b108      	cbz	r0, 900119f2 <_printf_i+0x1f2>
900119ee:	1b40      	subs	r0, r0, r5
900119f0:	6060      	str	r0, [r4, #4]
900119f2:	6863      	ldr	r3, [r4, #4]
900119f4:	6123      	str	r3, [r4, #16]
900119f6:	2300      	movs	r3, #0
900119f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900119fc:	e7a8      	b.n	90011950 <_printf_i+0x150>
900119fe:	6923      	ldr	r3, [r4, #16]
90011a00:	462a      	mov	r2, r5
90011a02:	4649      	mov	r1, r9
90011a04:	4640      	mov	r0, r8
90011a06:	47d0      	blx	sl
90011a08:	3001      	adds	r0, #1
90011a0a:	d0ab      	beq.n	90011964 <_printf_i+0x164>
90011a0c:	6823      	ldr	r3, [r4, #0]
90011a0e:	079b      	lsls	r3, r3, #30
90011a10:	d413      	bmi.n	90011a3a <_printf_i+0x23a>
90011a12:	68e0      	ldr	r0, [r4, #12]
90011a14:	9b03      	ldr	r3, [sp, #12]
90011a16:	4298      	cmp	r0, r3
90011a18:	bfb8      	it	lt
90011a1a:	4618      	movlt	r0, r3
90011a1c:	e7a4      	b.n	90011968 <_printf_i+0x168>
90011a1e:	2301      	movs	r3, #1
90011a20:	4632      	mov	r2, r6
90011a22:	4649      	mov	r1, r9
90011a24:	4640      	mov	r0, r8
90011a26:	47d0      	blx	sl
90011a28:	3001      	adds	r0, #1
90011a2a:	d09b      	beq.n	90011964 <_printf_i+0x164>
90011a2c:	3501      	adds	r5, #1
90011a2e:	68e3      	ldr	r3, [r4, #12]
90011a30:	9903      	ldr	r1, [sp, #12]
90011a32:	1a5b      	subs	r3, r3, r1
90011a34:	42ab      	cmp	r3, r5
90011a36:	dcf2      	bgt.n	90011a1e <_printf_i+0x21e>
90011a38:	e7eb      	b.n	90011a12 <_printf_i+0x212>
90011a3a:	2500      	movs	r5, #0
90011a3c:	f104 0619 	add.w	r6, r4, #25
90011a40:	e7f5      	b.n	90011a2e <_printf_i+0x22e>
90011a42:	bf00      	nop
90011a44:	9001489e 	.word	0x9001489e
90011a48:	900148af 	.word	0x900148af

90011a4c <iprintf>:
90011a4c:	b40f      	push	{r0, r1, r2, r3}
90011a4e:	4b0a      	ldr	r3, [pc, #40]	; (90011a78 <iprintf+0x2c>)
90011a50:	b513      	push	{r0, r1, r4, lr}
90011a52:	681c      	ldr	r4, [r3, #0]
90011a54:	b124      	cbz	r4, 90011a60 <iprintf+0x14>
90011a56:	69a3      	ldr	r3, [r4, #24]
90011a58:	b913      	cbnz	r3, 90011a60 <iprintf+0x14>
90011a5a:	4620      	mov	r0, r4
90011a5c:	f7ff fa2a 	bl	90010eb4 <__sinit>
90011a60:	ab05      	add	r3, sp, #20
90011a62:	9a04      	ldr	r2, [sp, #16]
90011a64:	68a1      	ldr	r1, [r4, #8]
90011a66:	9301      	str	r3, [sp, #4]
90011a68:	4620      	mov	r0, r4
90011a6a:	f001 ff9d 	bl	900139a8 <_vfiprintf_r>
90011a6e:	b002      	add	sp, #8
90011a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90011a74:	b004      	add	sp, #16
90011a76:	4770      	bx	lr
90011a78:	2400001c 	.word	0x2400001c

90011a7c <_puts_r>:
90011a7c:	b570      	push	{r4, r5, r6, lr}
90011a7e:	460e      	mov	r6, r1
90011a80:	4605      	mov	r5, r0
90011a82:	b118      	cbz	r0, 90011a8c <_puts_r+0x10>
90011a84:	6983      	ldr	r3, [r0, #24]
90011a86:	b90b      	cbnz	r3, 90011a8c <_puts_r+0x10>
90011a88:	f7ff fa14 	bl	90010eb4 <__sinit>
90011a8c:	69ab      	ldr	r3, [r5, #24]
90011a8e:	68ac      	ldr	r4, [r5, #8]
90011a90:	b913      	cbnz	r3, 90011a98 <_puts_r+0x1c>
90011a92:	4628      	mov	r0, r5
90011a94:	f7ff fa0e 	bl	90010eb4 <__sinit>
90011a98:	4b2c      	ldr	r3, [pc, #176]	; (90011b4c <_puts_r+0xd0>)
90011a9a:	429c      	cmp	r4, r3
90011a9c:	d120      	bne.n	90011ae0 <_puts_r+0x64>
90011a9e:	686c      	ldr	r4, [r5, #4]
90011aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
90011aa2:	07db      	lsls	r3, r3, #31
90011aa4:	d405      	bmi.n	90011ab2 <_puts_r+0x36>
90011aa6:	89a3      	ldrh	r3, [r4, #12]
90011aa8:	0598      	lsls	r0, r3, #22
90011aaa:	d402      	bmi.n	90011ab2 <_puts_r+0x36>
90011aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
90011aae:	f7ff fac4 	bl	9001103a <__retarget_lock_acquire_recursive>
90011ab2:	89a3      	ldrh	r3, [r4, #12]
90011ab4:	0719      	lsls	r1, r3, #28
90011ab6:	d51d      	bpl.n	90011af4 <_puts_r+0x78>
90011ab8:	6923      	ldr	r3, [r4, #16]
90011aba:	b1db      	cbz	r3, 90011af4 <_puts_r+0x78>
90011abc:	3e01      	subs	r6, #1
90011abe:	68a3      	ldr	r3, [r4, #8]
90011ac0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
90011ac4:	3b01      	subs	r3, #1
90011ac6:	60a3      	str	r3, [r4, #8]
90011ac8:	bb39      	cbnz	r1, 90011b1a <_puts_r+0x9e>
90011aca:	2b00      	cmp	r3, #0
90011acc:	da38      	bge.n	90011b40 <_puts_r+0xc4>
90011ace:	4622      	mov	r2, r4
90011ad0:	210a      	movs	r1, #10
90011ad2:	4628      	mov	r0, r5
90011ad4:	f000 f96a 	bl	90011dac <__swbuf_r>
90011ad8:	3001      	adds	r0, #1
90011ada:	d011      	beq.n	90011b00 <_puts_r+0x84>
90011adc:	250a      	movs	r5, #10
90011ade:	e011      	b.n	90011b04 <_puts_r+0x88>
90011ae0:	4b1b      	ldr	r3, [pc, #108]	; (90011b50 <_puts_r+0xd4>)
90011ae2:	429c      	cmp	r4, r3
90011ae4:	d101      	bne.n	90011aea <_puts_r+0x6e>
90011ae6:	68ac      	ldr	r4, [r5, #8]
90011ae8:	e7da      	b.n	90011aa0 <_puts_r+0x24>
90011aea:	4b1a      	ldr	r3, [pc, #104]	; (90011b54 <_puts_r+0xd8>)
90011aec:	429c      	cmp	r4, r3
90011aee:	bf08      	it	eq
90011af0:	68ec      	ldreq	r4, [r5, #12]
90011af2:	e7d5      	b.n	90011aa0 <_puts_r+0x24>
90011af4:	4621      	mov	r1, r4
90011af6:	4628      	mov	r0, r5
90011af8:	f000 f9bc 	bl	90011e74 <__swsetup_r>
90011afc:	2800      	cmp	r0, #0
90011afe:	d0dd      	beq.n	90011abc <_puts_r+0x40>
90011b00:	f04f 35ff 	mov.w	r5, #4294967295
90011b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
90011b06:	07da      	lsls	r2, r3, #31
90011b08:	d405      	bmi.n	90011b16 <_puts_r+0x9a>
90011b0a:	89a3      	ldrh	r3, [r4, #12]
90011b0c:	059b      	lsls	r3, r3, #22
90011b0e:	d402      	bmi.n	90011b16 <_puts_r+0x9a>
90011b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
90011b12:	f7ff fa94 	bl	9001103e <__retarget_lock_release_recursive>
90011b16:	4628      	mov	r0, r5
90011b18:	bd70      	pop	{r4, r5, r6, pc}
90011b1a:	2b00      	cmp	r3, #0
90011b1c:	da04      	bge.n	90011b28 <_puts_r+0xac>
90011b1e:	69a2      	ldr	r2, [r4, #24]
90011b20:	429a      	cmp	r2, r3
90011b22:	dc06      	bgt.n	90011b32 <_puts_r+0xb6>
90011b24:	290a      	cmp	r1, #10
90011b26:	d004      	beq.n	90011b32 <_puts_r+0xb6>
90011b28:	6823      	ldr	r3, [r4, #0]
90011b2a:	1c5a      	adds	r2, r3, #1
90011b2c:	6022      	str	r2, [r4, #0]
90011b2e:	7019      	strb	r1, [r3, #0]
90011b30:	e7c5      	b.n	90011abe <_puts_r+0x42>
90011b32:	4622      	mov	r2, r4
90011b34:	4628      	mov	r0, r5
90011b36:	f000 f939 	bl	90011dac <__swbuf_r>
90011b3a:	3001      	adds	r0, #1
90011b3c:	d1bf      	bne.n	90011abe <_puts_r+0x42>
90011b3e:	e7df      	b.n	90011b00 <_puts_r+0x84>
90011b40:	6823      	ldr	r3, [r4, #0]
90011b42:	250a      	movs	r5, #10
90011b44:	1c5a      	adds	r2, r3, #1
90011b46:	6022      	str	r2, [r4, #0]
90011b48:	701d      	strb	r5, [r3, #0]
90011b4a:	e7db      	b.n	90011b04 <_puts_r+0x88>
90011b4c:	90014848 	.word	0x90014848
90011b50:	90014868 	.word	0x90014868
90011b54:	90014828 	.word	0x90014828

90011b58 <puts>:
90011b58:	4b02      	ldr	r3, [pc, #8]	; (90011b64 <puts+0xc>)
90011b5a:	4601      	mov	r1, r0
90011b5c:	6818      	ldr	r0, [r3, #0]
90011b5e:	f7ff bf8d 	b.w	90011a7c <_puts_r>
90011b62:	bf00      	nop
90011b64:	2400001c 	.word	0x2400001c

90011b68 <cleanup_glue>:
90011b68:	b538      	push	{r3, r4, r5, lr}
90011b6a:	460c      	mov	r4, r1
90011b6c:	6809      	ldr	r1, [r1, #0]
90011b6e:	4605      	mov	r5, r0
90011b70:	b109      	cbz	r1, 90011b76 <cleanup_glue+0xe>
90011b72:	f7ff fff9 	bl	90011b68 <cleanup_glue>
90011b76:	4621      	mov	r1, r4
90011b78:	4628      	mov	r0, r5
90011b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90011b7e:	f001 bd41 	b.w	90013604 <_free_r>
	...

90011b84 <_reclaim_reent>:
90011b84:	4b2c      	ldr	r3, [pc, #176]	; (90011c38 <_reclaim_reent+0xb4>)
90011b86:	681b      	ldr	r3, [r3, #0]
90011b88:	4283      	cmp	r3, r0
90011b8a:	b570      	push	{r4, r5, r6, lr}
90011b8c:	4604      	mov	r4, r0
90011b8e:	d051      	beq.n	90011c34 <_reclaim_reent+0xb0>
90011b90:	6a43      	ldr	r3, [r0, #36]	; 0x24
90011b92:	b143      	cbz	r3, 90011ba6 <_reclaim_reent+0x22>
90011b94:	68db      	ldr	r3, [r3, #12]
90011b96:	2b00      	cmp	r3, #0
90011b98:	d14a      	bne.n	90011c30 <_reclaim_reent+0xac>
90011b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011b9c:	6819      	ldr	r1, [r3, #0]
90011b9e:	b111      	cbz	r1, 90011ba6 <_reclaim_reent+0x22>
90011ba0:	4620      	mov	r0, r4
90011ba2:	f001 fd2f 	bl	90013604 <_free_r>
90011ba6:	6961      	ldr	r1, [r4, #20]
90011ba8:	b111      	cbz	r1, 90011bb0 <_reclaim_reent+0x2c>
90011baa:	4620      	mov	r0, r4
90011bac:	f001 fd2a 	bl	90013604 <_free_r>
90011bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90011bb2:	b111      	cbz	r1, 90011bba <_reclaim_reent+0x36>
90011bb4:	4620      	mov	r0, r4
90011bb6:	f001 fd25 	bl	90013604 <_free_r>
90011bba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
90011bbc:	b111      	cbz	r1, 90011bc4 <_reclaim_reent+0x40>
90011bbe:	4620      	mov	r0, r4
90011bc0:	f001 fd20 	bl	90013604 <_free_r>
90011bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
90011bc6:	b111      	cbz	r1, 90011bce <_reclaim_reent+0x4a>
90011bc8:	4620      	mov	r0, r4
90011bca:	f001 fd1b 	bl	90013604 <_free_r>
90011bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
90011bd0:	b111      	cbz	r1, 90011bd8 <_reclaim_reent+0x54>
90011bd2:	4620      	mov	r0, r4
90011bd4:	f001 fd16 	bl	90013604 <_free_r>
90011bd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90011bda:	b111      	cbz	r1, 90011be2 <_reclaim_reent+0x5e>
90011bdc:	4620      	mov	r0, r4
90011bde:	f001 fd11 	bl	90013604 <_free_r>
90011be2:	6da1      	ldr	r1, [r4, #88]	; 0x58
90011be4:	b111      	cbz	r1, 90011bec <_reclaim_reent+0x68>
90011be6:	4620      	mov	r0, r4
90011be8:	f001 fd0c 	bl	90013604 <_free_r>
90011bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
90011bee:	b111      	cbz	r1, 90011bf6 <_reclaim_reent+0x72>
90011bf0:	4620      	mov	r0, r4
90011bf2:	f001 fd07 	bl	90013604 <_free_r>
90011bf6:	69a3      	ldr	r3, [r4, #24]
90011bf8:	b1e3      	cbz	r3, 90011c34 <_reclaim_reent+0xb0>
90011bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90011bfc:	4620      	mov	r0, r4
90011bfe:	4798      	blx	r3
90011c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
90011c02:	b1b9      	cbz	r1, 90011c34 <_reclaim_reent+0xb0>
90011c04:	4620      	mov	r0, r4
90011c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011c0a:	f7ff bfad 	b.w	90011b68 <cleanup_glue>
90011c0e:	5949      	ldr	r1, [r1, r5]
90011c10:	b941      	cbnz	r1, 90011c24 <_reclaim_reent+0xa0>
90011c12:	3504      	adds	r5, #4
90011c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011c16:	2d80      	cmp	r5, #128	; 0x80
90011c18:	68d9      	ldr	r1, [r3, #12]
90011c1a:	d1f8      	bne.n	90011c0e <_reclaim_reent+0x8a>
90011c1c:	4620      	mov	r0, r4
90011c1e:	f001 fcf1 	bl	90013604 <_free_r>
90011c22:	e7ba      	b.n	90011b9a <_reclaim_reent+0x16>
90011c24:	680e      	ldr	r6, [r1, #0]
90011c26:	4620      	mov	r0, r4
90011c28:	f001 fcec 	bl	90013604 <_free_r>
90011c2c:	4631      	mov	r1, r6
90011c2e:	e7ef      	b.n	90011c10 <_reclaim_reent+0x8c>
90011c30:	2500      	movs	r5, #0
90011c32:	e7ef      	b.n	90011c14 <_reclaim_reent+0x90>
90011c34:	bd70      	pop	{r4, r5, r6, pc}
90011c36:	bf00      	nop
90011c38:	2400001c 	.word	0x2400001c

90011c3c <_sbrk_r>:
90011c3c:	b538      	push	{r3, r4, r5, lr}
90011c3e:	4d06      	ldr	r5, [pc, #24]	; (90011c58 <_sbrk_r+0x1c>)
90011c40:	2300      	movs	r3, #0
90011c42:	4604      	mov	r4, r0
90011c44:	4608      	mov	r0, r1
90011c46:	602b      	str	r3, [r5, #0]
90011c48:	f7ef fde2 	bl	90001810 <_sbrk>
90011c4c:	1c43      	adds	r3, r0, #1
90011c4e:	d102      	bne.n	90011c56 <_sbrk_r+0x1a>
90011c50:	682b      	ldr	r3, [r5, #0]
90011c52:	b103      	cbz	r3, 90011c56 <_sbrk_r+0x1a>
90011c54:	6023      	str	r3, [r4, #0]
90011c56:	bd38      	pop	{r3, r4, r5, pc}
90011c58:	240129e8 	.word	0x240129e8

90011c5c <_raise_r>:
90011c5c:	291f      	cmp	r1, #31
90011c5e:	b538      	push	{r3, r4, r5, lr}
90011c60:	4604      	mov	r4, r0
90011c62:	460d      	mov	r5, r1
90011c64:	d904      	bls.n	90011c70 <_raise_r+0x14>
90011c66:	2316      	movs	r3, #22
90011c68:	6003      	str	r3, [r0, #0]
90011c6a:	f04f 30ff 	mov.w	r0, #4294967295
90011c6e:	bd38      	pop	{r3, r4, r5, pc}
90011c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
90011c72:	b112      	cbz	r2, 90011c7a <_raise_r+0x1e>
90011c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90011c78:	b94b      	cbnz	r3, 90011c8e <_raise_r+0x32>
90011c7a:	4620      	mov	r0, r4
90011c7c:	f000 f830 	bl	90011ce0 <_getpid_r>
90011c80:	462a      	mov	r2, r5
90011c82:	4601      	mov	r1, r0
90011c84:	4620      	mov	r0, r4
90011c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90011c8a:	f000 b817 	b.w	90011cbc <_kill_r>
90011c8e:	2b01      	cmp	r3, #1
90011c90:	d00a      	beq.n	90011ca8 <_raise_r+0x4c>
90011c92:	1c59      	adds	r1, r3, #1
90011c94:	d103      	bne.n	90011c9e <_raise_r+0x42>
90011c96:	2316      	movs	r3, #22
90011c98:	6003      	str	r3, [r0, #0]
90011c9a:	2001      	movs	r0, #1
90011c9c:	e7e7      	b.n	90011c6e <_raise_r+0x12>
90011c9e:	2400      	movs	r4, #0
90011ca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90011ca4:	4628      	mov	r0, r5
90011ca6:	4798      	blx	r3
90011ca8:	2000      	movs	r0, #0
90011caa:	e7e0      	b.n	90011c6e <_raise_r+0x12>

90011cac <raise>:
90011cac:	4b02      	ldr	r3, [pc, #8]	; (90011cb8 <raise+0xc>)
90011cae:	4601      	mov	r1, r0
90011cb0:	6818      	ldr	r0, [r3, #0]
90011cb2:	f7ff bfd3 	b.w	90011c5c <_raise_r>
90011cb6:	bf00      	nop
90011cb8:	2400001c 	.word	0x2400001c

90011cbc <_kill_r>:
90011cbc:	b538      	push	{r3, r4, r5, lr}
90011cbe:	4d07      	ldr	r5, [pc, #28]	; (90011cdc <_kill_r+0x20>)
90011cc0:	2300      	movs	r3, #0
90011cc2:	4604      	mov	r4, r0
90011cc4:	4608      	mov	r0, r1
90011cc6:	4611      	mov	r1, r2
90011cc8:	602b      	str	r3, [r5, #0]
90011cca:	f7ef fd19 	bl	90001700 <_kill>
90011cce:	1c43      	adds	r3, r0, #1
90011cd0:	d102      	bne.n	90011cd8 <_kill_r+0x1c>
90011cd2:	682b      	ldr	r3, [r5, #0]
90011cd4:	b103      	cbz	r3, 90011cd8 <_kill_r+0x1c>
90011cd6:	6023      	str	r3, [r4, #0]
90011cd8:	bd38      	pop	{r3, r4, r5, pc}
90011cda:	bf00      	nop
90011cdc:	240129e8 	.word	0x240129e8

90011ce0 <_getpid_r>:
90011ce0:	f7ef bd06 	b.w	900016f0 <_getpid>

90011ce4 <siprintf>:
90011ce4:	b40e      	push	{r1, r2, r3}
90011ce6:	b500      	push	{lr}
90011ce8:	b09c      	sub	sp, #112	; 0x70
90011cea:	ab1d      	add	r3, sp, #116	; 0x74
90011cec:	9002      	str	r0, [sp, #8]
90011cee:	9006      	str	r0, [sp, #24]
90011cf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
90011cf4:	4809      	ldr	r0, [pc, #36]	; (90011d1c <siprintf+0x38>)
90011cf6:	9107      	str	r1, [sp, #28]
90011cf8:	9104      	str	r1, [sp, #16]
90011cfa:	4909      	ldr	r1, [pc, #36]	; (90011d20 <siprintf+0x3c>)
90011cfc:	f853 2b04 	ldr.w	r2, [r3], #4
90011d00:	9105      	str	r1, [sp, #20]
90011d02:	6800      	ldr	r0, [r0, #0]
90011d04:	9301      	str	r3, [sp, #4]
90011d06:	a902      	add	r1, sp, #8
90011d08:	f001 fd24 	bl	90013754 <_svfiprintf_r>
90011d0c:	9b02      	ldr	r3, [sp, #8]
90011d0e:	2200      	movs	r2, #0
90011d10:	701a      	strb	r2, [r3, #0]
90011d12:	b01c      	add	sp, #112	; 0x70
90011d14:	f85d eb04 	ldr.w	lr, [sp], #4
90011d18:	b003      	add	sp, #12
90011d1a:	4770      	bx	lr
90011d1c:	2400001c 	.word	0x2400001c
90011d20:	ffff0208 	.word	0xffff0208

90011d24 <__sread>:
90011d24:	b510      	push	{r4, lr}
90011d26:	460c      	mov	r4, r1
90011d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011d2c:	f001 ff6c 	bl	90013c08 <_read_r>
90011d30:	2800      	cmp	r0, #0
90011d32:	bfab      	itete	ge
90011d34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90011d36:	89a3      	ldrhlt	r3, [r4, #12]
90011d38:	181b      	addge	r3, r3, r0
90011d3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90011d3e:	bfac      	ite	ge
90011d40:	6563      	strge	r3, [r4, #84]	; 0x54
90011d42:	81a3      	strhlt	r3, [r4, #12]
90011d44:	bd10      	pop	{r4, pc}

90011d46 <__swrite>:
90011d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011d4a:	461f      	mov	r7, r3
90011d4c:	898b      	ldrh	r3, [r1, #12]
90011d4e:	05db      	lsls	r3, r3, #23
90011d50:	4605      	mov	r5, r0
90011d52:	460c      	mov	r4, r1
90011d54:	4616      	mov	r6, r2
90011d56:	d505      	bpl.n	90011d64 <__swrite+0x1e>
90011d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011d5c:	2302      	movs	r3, #2
90011d5e:	2200      	movs	r2, #0
90011d60:	f001 f82a 	bl	90012db8 <_lseek_r>
90011d64:	89a3      	ldrh	r3, [r4, #12]
90011d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90011d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90011d6e:	81a3      	strh	r3, [r4, #12]
90011d70:	4632      	mov	r2, r6
90011d72:	463b      	mov	r3, r7
90011d74:	4628      	mov	r0, r5
90011d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90011d7a:	f000 b869 	b.w	90011e50 <_write_r>

90011d7e <__sseek>:
90011d7e:	b510      	push	{r4, lr}
90011d80:	460c      	mov	r4, r1
90011d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011d86:	f001 f817 	bl	90012db8 <_lseek_r>
90011d8a:	1c43      	adds	r3, r0, #1
90011d8c:	89a3      	ldrh	r3, [r4, #12]
90011d8e:	bf15      	itete	ne
90011d90:	6560      	strne	r0, [r4, #84]	; 0x54
90011d92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90011d96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90011d9a:	81a3      	strheq	r3, [r4, #12]
90011d9c:	bf18      	it	ne
90011d9e:	81a3      	strhne	r3, [r4, #12]
90011da0:	bd10      	pop	{r4, pc}

90011da2 <__sclose>:
90011da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011da6:	f000 b935 	b.w	90012014 <_close_r>
	...

90011dac <__swbuf_r>:
90011dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90011dae:	460e      	mov	r6, r1
90011db0:	4614      	mov	r4, r2
90011db2:	4605      	mov	r5, r0
90011db4:	b118      	cbz	r0, 90011dbe <__swbuf_r+0x12>
90011db6:	6983      	ldr	r3, [r0, #24]
90011db8:	b90b      	cbnz	r3, 90011dbe <__swbuf_r+0x12>
90011dba:	f7ff f87b 	bl	90010eb4 <__sinit>
90011dbe:	4b21      	ldr	r3, [pc, #132]	; (90011e44 <__swbuf_r+0x98>)
90011dc0:	429c      	cmp	r4, r3
90011dc2:	d12b      	bne.n	90011e1c <__swbuf_r+0x70>
90011dc4:	686c      	ldr	r4, [r5, #4]
90011dc6:	69a3      	ldr	r3, [r4, #24]
90011dc8:	60a3      	str	r3, [r4, #8]
90011dca:	89a3      	ldrh	r3, [r4, #12]
90011dcc:	071a      	lsls	r2, r3, #28
90011dce:	d52f      	bpl.n	90011e30 <__swbuf_r+0x84>
90011dd0:	6923      	ldr	r3, [r4, #16]
90011dd2:	b36b      	cbz	r3, 90011e30 <__swbuf_r+0x84>
90011dd4:	6923      	ldr	r3, [r4, #16]
90011dd6:	6820      	ldr	r0, [r4, #0]
90011dd8:	1ac0      	subs	r0, r0, r3
90011dda:	6963      	ldr	r3, [r4, #20]
90011ddc:	b2f6      	uxtb	r6, r6
90011dde:	4283      	cmp	r3, r0
90011de0:	4637      	mov	r7, r6
90011de2:	dc04      	bgt.n	90011dee <__swbuf_r+0x42>
90011de4:	4621      	mov	r1, r4
90011de6:	4628      	mov	r0, r5
90011de8:	f000 ffa6 	bl	90012d38 <_fflush_r>
90011dec:	bb30      	cbnz	r0, 90011e3c <__swbuf_r+0x90>
90011dee:	68a3      	ldr	r3, [r4, #8]
90011df0:	3b01      	subs	r3, #1
90011df2:	60a3      	str	r3, [r4, #8]
90011df4:	6823      	ldr	r3, [r4, #0]
90011df6:	1c5a      	adds	r2, r3, #1
90011df8:	6022      	str	r2, [r4, #0]
90011dfa:	701e      	strb	r6, [r3, #0]
90011dfc:	6963      	ldr	r3, [r4, #20]
90011dfe:	3001      	adds	r0, #1
90011e00:	4283      	cmp	r3, r0
90011e02:	d004      	beq.n	90011e0e <__swbuf_r+0x62>
90011e04:	89a3      	ldrh	r3, [r4, #12]
90011e06:	07db      	lsls	r3, r3, #31
90011e08:	d506      	bpl.n	90011e18 <__swbuf_r+0x6c>
90011e0a:	2e0a      	cmp	r6, #10
90011e0c:	d104      	bne.n	90011e18 <__swbuf_r+0x6c>
90011e0e:	4621      	mov	r1, r4
90011e10:	4628      	mov	r0, r5
90011e12:	f000 ff91 	bl	90012d38 <_fflush_r>
90011e16:	b988      	cbnz	r0, 90011e3c <__swbuf_r+0x90>
90011e18:	4638      	mov	r0, r7
90011e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90011e1c:	4b0a      	ldr	r3, [pc, #40]	; (90011e48 <__swbuf_r+0x9c>)
90011e1e:	429c      	cmp	r4, r3
90011e20:	d101      	bne.n	90011e26 <__swbuf_r+0x7a>
90011e22:	68ac      	ldr	r4, [r5, #8]
90011e24:	e7cf      	b.n	90011dc6 <__swbuf_r+0x1a>
90011e26:	4b09      	ldr	r3, [pc, #36]	; (90011e4c <__swbuf_r+0xa0>)
90011e28:	429c      	cmp	r4, r3
90011e2a:	bf08      	it	eq
90011e2c:	68ec      	ldreq	r4, [r5, #12]
90011e2e:	e7ca      	b.n	90011dc6 <__swbuf_r+0x1a>
90011e30:	4621      	mov	r1, r4
90011e32:	4628      	mov	r0, r5
90011e34:	f000 f81e 	bl	90011e74 <__swsetup_r>
90011e38:	2800      	cmp	r0, #0
90011e3a:	d0cb      	beq.n	90011dd4 <__swbuf_r+0x28>
90011e3c:	f04f 37ff 	mov.w	r7, #4294967295
90011e40:	e7ea      	b.n	90011e18 <__swbuf_r+0x6c>
90011e42:	bf00      	nop
90011e44:	90014848 	.word	0x90014848
90011e48:	90014868 	.word	0x90014868
90011e4c:	90014828 	.word	0x90014828

90011e50 <_write_r>:
90011e50:	b538      	push	{r3, r4, r5, lr}
90011e52:	4d07      	ldr	r5, [pc, #28]	; (90011e70 <_write_r+0x20>)
90011e54:	4604      	mov	r4, r0
90011e56:	4608      	mov	r0, r1
90011e58:	4611      	mov	r1, r2
90011e5a:	2200      	movs	r2, #0
90011e5c:	602a      	str	r2, [r5, #0]
90011e5e:	461a      	mov	r2, r3
90011e60:	f7ef fc85 	bl	9000176e <_write>
90011e64:	1c43      	adds	r3, r0, #1
90011e66:	d102      	bne.n	90011e6e <_write_r+0x1e>
90011e68:	682b      	ldr	r3, [r5, #0]
90011e6a:	b103      	cbz	r3, 90011e6e <_write_r+0x1e>
90011e6c:	6023      	str	r3, [r4, #0]
90011e6e:	bd38      	pop	{r3, r4, r5, pc}
90011e70:	240129e8 	.word	0x240129e8

90011e74 <__swsetup_r>:
90011e74:	4b32      	ldr	r3, [pc, #200]	; (90011f40 <__swsetup_r+0xcc>)
90011e76:	b570      	push	{r4, r5, r6, lr}
90011e78:	681d      	ldr	r5, [r3, #0]
90011e7a:	4606      	mov	r6, r0
90011e7c:	460c      	mov	r4, r1
90011e7e:	b125      	cbz	r5, 90011e8a <__swsetup_r+0x16>
90011e80:	69ab      	ldr	r3, [r5, #24]
90011e82:	b913      	cbnz	r3, 90011e8a <__swsetup_r+0x16>
90011e84:	4628      	mov	r0, r5
90011e86:	f7ff f815 	bl	90010eb4 <__sinit>
90011e8a:	4b2e      	ldr	r3, [pc, #184]	; (90011f44 <__swsetup_r+0xd0>)
90011e8c:	429c      	cmp	r4, r3
90011e8e:	d10f      	bne.n	90011eb0 <__swsetup_r+0x3c>
90011e90:	686c      	ldr	r4, [r5, #4]
90011e92:	89a3      	ldrh	r3, [r4, #12]
90011e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90011e98:	0719      	lsls	r1, r3, #28
90011e9a:	d42c      	bmi.n	90011ef6 <__swsetup_r+0x82>
90011e9c:	06dd      	lsls	r5, r3, #27
90011e9e:	d411      	bmi.n	90011ec4 <__swsetup_r+0x50>
90011ea0:	2309      	movs	r3, #9
90011ea2:	6033      	str	r3, [r6, #0]
90011ea4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90011ea8:	81a3      	strh	r3, [r4, #12]
90011eaa:	f04f 30ff 	mov.w	r0, #4294967295
90011eae:	e03e      	b.n	90011f2e <__swsetup_r+0xba>
90011eb0:	4b25      	ldr	r3, [pc, #148]	; (90011f48 <__swsetup_r+0xd4>)
90011eb2:	429c      	cmp	r4, r3
90011eb4:	d101      	bne.n	90011eba <__swsetup_r+0x46>
90011eb6:	68ac      	ldr	r4, [r5, #8]
90011eb8:	e7eb      	b.n	90011e92 <__swsetup_r+0x1e>
90011eba:	4b24      	ldr	r3, [pc, #144]	; (90011f4c <__swsetup_r+0xd8>)
90011ebc:	429c      	cmp	r4, r3
90011ebe:	bf08      	it	eq
90011ec0:	68ec      	ldreq	r4, [r5, #12]
90011ec2:	e7e6      	b.n	90011e92 <__swsetup_r+0x1e>
90011ec4:	0758      	lsls	r0, r3, #29
90011ec6:	d512      	bpl.n	90011eee <__swsetup_r+0x7a>
90011ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
90011eca:	b141      	cbz	r1, 90011ede <__swsetup_r+0x6a>
90011ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
90011ed0:	4299      	cmp	r1, r3
90011ed2:	d002      	beq.n	90011eda <__swsetup_r+0x66>
90011ed4:	4630      	mov	r0, r6
90011ed6:	f001 fb95 	bl	90013604 <_free_r>
90011eda:	2300      	movs	r3, #0
90011edc:	6363      	str	r3, [r4, #52]	; 0x34
90011ede:	89a3      	ldrh	r3, [r4, #12]
90011ee0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90011ee4:	81a3      	strh	r3, [r4, #12]
90011ee6:	2300      	movs	r3, #0
90011ee8:	6063      	str	r3, [r4, #4]
90011eea:	6923      	ldr	r3, [r4, #16]
90011eec:	6023      	str	r3, [r4, #0]
90011eee:	89a3      	ldrh	r3, [r4, #12]
90011ef0:	f043 0308 	orr.w	r3, r3, #8
90011ef4:	81a3      	strh	r3, [r4, #12]
90011ef6:	6923      	ldr	r3, [r4, #16]
90011ef8:	b94b      	cbnz	r3, 90011f0e <__swsetup_r+0x9a>
90011efa:	89a3      	ldrh	r3, [r4, #12]
90011efc:	f403 7320 	and.w	r3, r3, #640	; 0x280
90011f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90011f04:	d003      	beq.n	90011f0e <__swsetup_r+0x9a>
90011f06:	4621      	mov	r1, r4
90011f08:	4630      	mov	r0, r6
90011f0a:	f000 ff8d 	bl	90012e28 <__smakebuf_r>
90011f0e:	89a0      	ldrh	r0, [r4, #12]
90011f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90011f14:	f010 0301 	ands.w	r3, r0, #1
90011f18:	d00a      	beq.n	90011f30 <__swsetup_r+0xbc>
90011f1a:	2300      	movs	r3, #0
90011f1c:	60a3      	str	r3, [r4, #8]
90011f1e:	6963      	ldr	r3, [r4, #20]
90011f20:	425b      	negs	r3, r3
90011f22:	61a3      	str	r3, [r4, #24]
90011f24:	6923      	ldr	r3, [r4, #16]
90011f26:	b943      	cbnz	r3, 90011f3a <__swsetup_r+0xc6>
90011f28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90011f2c:	d1ba      	bne.n	90011ea4 <__swsetup_r+0x30>
90011f2e:	bd70      	pop	{r4, r5, r6, pc}
90011f30:	0781      	lsls	r1, r0, #30
90011f32:	bf58      	it	pl
90011f34:	6963      	ldrpl	r3, [r4, #20]
90011f36:	60a3      	str	r3, [r4, #8]
90011f38:	e7f4      	b.n	90011f24 <__swsetup_r+0xb0>
90011f3a:	2000      	movs	r0, #0
90011f3c:	e7f7      	b.n	90011f2e <__swsetup_r+0xba>
90011f3e:	bf00      	nop
90011f40:	2400001c 	.word	0x2400001c
90011f44:	90014848 	.word	0x90014848
90011f48:	90014868 	.word	0x90014868
90011f4c:	90014828 	.word	0x90014828

90011f50 <__register_exitproc>:
90011f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90011f54:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90012010 <__register_exitproc+0xc0>
90011f58:	4606      	mov	r6, r0
90011f5a:	f8d8 0000 	ldr.w	r0, [r8]
90011f5e:	461f      	mov	r7, r3
90011f60:	460d      	mov	r5, r1
90011f62:	4691      	mov	r9, r2
90011f64:	f7ff f869 	bl	9001103a <__retarget_lock_acquire_recursive>
90011f68:	4b25      	ldr	r3, [pc, #148]	; (90012000 <__register_exitproc+0xb0>)
90011f6a:	681c      	ldr	r4, [r3, #0]
90011f6c:	b934      	cbnz	r4, 90011f7c <__register_exitproc+0x2c>
90011f6e:	4c25      	ldr	r4, [pc, #148]	; (90012004 <__register_exitproc+0xb4>)
90011f70:	601c      	str	r4, [r3, #0]
90011f72:	4b25      	ldr	r3, [pc, #148]	; (90012008 <__register_exitproc+0xb8>)
90011f74:	b113      	cbz	r3, 90011f7c <__register_exitproc+0x2c>
90011f76:	681b      	ldr	r3, [r3, #0]
90011f78:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90011f7c:	6863      	ldr	r3, [r4, #4]
90011f7e:	2b1f      	cmp	r3, #31
90011f80:	dd07      	ble.n	90011f92 <__register_exitproc+0x42>
90011f82:	f8d8 0000 	ldr.w	r0, [r8]
90011f86:	f7ff f85a 	bl	9001103e <__retarget_lock_release_recursive>
90011f8a:	f04f 30ff 	mov.w	r0, #4294967295
90011f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90011f92:	b34e      	cbz	r6, 90011fe8 <__register_exitproc+0x98>
90011f94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
90011f98:	b988      	cbnz	r0, 90011fbe <__register_exitproc+0x6e>
90011f9a:	4b1c      	ldr	r3, [pc, #112]	; (9001200c <__register_exitproc+0xbc>)
90011f9c:	b923      	cbnz	r3, 90011fa8 <__register_exitproc+0x58>
90011f9e:	f8d8 0000 	ldr.w	r0, [r8]
90011fa2:	f7ff f84b 	bl	9001103c <__retarget_lock_release>
90011fa6:	e7f0      	b.n	90011f8a <__register_exitproc+0x3a>
90011fa8:	f44f 7084 	mov.w	r0, #264	; 0x108
90011fac:	f000 ff7c 	bl	90012ea8 <malloc>
90011fb0:	2800      	cmp	r0, #0
90011fb2:	d0f4      	beq.n	90011f9e <__register_exitproc+0x4e>
90011fb4:	2300      	movs	r3, #0
90011fb6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90011fba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90011fbe:	6863      	ldr	r3, [r4, #4]
90011fc0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90011fc4:	2201      	movs	r2, #1
90011fc6:	409a      	lsls	r2, r3
90011fc8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90011fcc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90011fd0:	4313      	orrs	r3, r2
90011fd2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
90011fd6:	2e02      	cmp	r6, #2
90011fd8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90011fdc:	bf02      	ittt	eq
90011fde:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
90011fe2:	4313      	orreq	r3, r2
90011fe4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90011fe8:	6863      	ldr	r3, [r4, #4]
90011fea:	f8d8 0000 	ldr.w	r0, [r8]
90011fee:	1c5a      	adds	r2, r3, #1
90011ff0:	3302      	adds	r3, #2
90011ff2:	6062      	str	r2, [r4, #4]
90011ff4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90011ff8:	f7ff f821 	bl	9001103e <__retarget_lock_release_recursive>
90011ffc:	2000      	movs	r0, #0
90011ffe:	e7c6      	b.n	90011f8e <__register_exitproc+0x3e>
90012000:	24012a78 	.word	0x24012a78
90012004:	240129ec 	.word	0x240129ec
90012008:	00000000 	.word	0x00000000
9001200c:	90012ea9 	.word	0x90012ea9
90012010:	24000080 	.word	0x24000080

90012014 <_close_r>:
90012014:	b538      	push	{r3, r4, r5, lr}
90012016:	4d06      	ldr	r5, [pc, #24]	; (90012030 <_close_r+0x1c>)
90012018:	2300      	movs	r3, #0
9001201a:	4604      	mov	r4, r0
9001201c:	4608      	mov	r0, r1
9001201e:	602b      	str	r3, [r5, #0]
90012020:	f7ef fbc1 	bl	900017a6 <_close>
90012024:	1c43      	adds	r3, r0, #1
90012026:	d102      	bne.n	9001202e <_close_r+0x1a>
90012028:	682b      	ldr	r3, [r5, #0]
9001202a:	b103      	cbz	r3, 9001202e <_close_r+0x1a>
9001202c:	6023      	str	r3, [r4, #0]
9001202e:	bd38      	pop	{r3, r4, r5, pc}
90012030:	240129e8 	.word	0x240129e8

90012034 <quorem>:
90012034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012038:	6903      	ldr	r3, [r0, #16]
9001203a:	690c      	ldr	r4, [r1, #16]
9001203c:	42a3      	cmp	r3, r4
9001203e:	4607      	mov	r7, r0
90012040:	f2c0 8081 	blt.w	90012146 <quorem+0x112>
90012044:	3c01      	subs	r4, #1
90012046:	f101 0814 	add.w	r8, r1, #20
9001204a:	f100 0514 	add.w	r5, r0, #20
9001204e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
90012052:	9301      	str	r3, [sp, #4]
90012054:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
90012058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
9001205c:	3301      	adds	r3, #1
9001205e:	429a      	cmp	r2, r3
90012060:	ea4f 0b84 	mov.w	fp, r4, lsl #2
90012064:	eb08 0984 	add.w	r9, r8, r4, lsl #2
90012068:	fbb2 f6f3 	udiv	r6, r2, r3
9001206c:	d331      	bcc.n	900120d2 <quorem+0x9e>
9001206e:	f04f 0e00 	mov.w	lr, #0
90012072:	4640      	mov	r0, r8
90012074:	46ac      	mov	ip, r5
90012076:	46f2      	mov	sl, lr
90012078:	f850 2b04 	ldr.w	r2, [r0], #4
9001207c:	b293      	uxth	r3, r2
9001207e:	fb06 e303 	mla	r3, r6, r3, lr
90012082:	ea4f 4e13 	mov.w	lr, r3, lsr #16
90012086:	b29b      	uxth	r3, r3
90012088:	ebaa 0303 	sub.w	r3, sl, r3
9001208c:	f8dc a000 	ldr.w	sl, [ip]
90012090:	0c12      	lsrs	r2, r2, #16
90012092:	fa13 f38a 	uxtah	r3, r3, sl
90012096:	fb06 e202 	mla	r2, r6, r2, lr
9001209a:	9300      	str	r3, [sp, #0]
9001209c:	9b00      	ldr	r3, [sp, #0]
9001209e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
900120a2:	b292      	uxth	r2, r2
900120a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
900120a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
900120ac:	f8bd 3000 	ldrh.w	r3, [sp]
900120b0:	4581      	cmp	r9, r0
900120b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900120b6:	f84c 3b04 	str.w	r3, [ip], #4
900120ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
900120be:	d2db      	bcs.n	90012078 <quorem+0x44>
900120c0:	f855 300b 	ldr.w	r3, [r5, fp]
900120c4:	b92b      	cbnz	r3, 900120d2 <quorem+0x9e>
900120c6:	9b01      	ldr	r3, [sp, #4]
900120c8:	3b04      	subs	r3, #4
900120ca:	429d      	cmp	r5, r3
900120cc:	461a      	mov	r2, r3
900120ce:	d32e      	bcc.n	9001212e <quorem+0xfa>
900120d0:	613c      	str	r4, [r7, #16]
900120d2:	4638      	mov	r0, r7
900120d4:	f001 f97e 	bl	900133d4 <__mcmp>
900120d8:	2800      	cmp	r0, #0
900120da:	db24      	blt.n	90012126 <quorem+0xf2>
900120dc:	3601      	adds	r6, #1
900120de:	4628      	mov	r0, r5
900120e0:	f04f 0c00 	mov.w	ip, #0
900120e4:	f858 2b04 	ldr.w	r2, [r8], #4
900120e8:	f8d0 e000 	ldr.w	lr, [r0]
900120ec:	b293      	uxth	r3, r2
900120ee:	ebac 0303 	sub.w	r3, ip, r3
900120f2:	0c12      	lsrs	r2, r2, #16
900120f4:	fa13 f38e 	uxtah	r3, r3, lr
900120f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
900120fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
90012100:	b29b      	uxth	r3, r3
90012102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90012106:	45c1      	cmp	r9, r8
90012108:	f840 3b04 	str.w	r3, [r0], #4
9001210c:	ea4f 4c22 	mov.w	ip, r2, asr #16
90012110:	d2e8      	bcs.n	900120e4 <quorem+0xb0>
90012112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
90012116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
9001211a:	b922      	cbnz	r2, 90012126 <quorem+0xf2>
9001211c:	3b04      	subs	r3, #4
9001211e:	429d      	cmp	r5, r3
90012120:	461a      	mov	r2, r3
90012122:	d30a      	bcc.n	9001213a <quorem+0x106>
90012124:	613c      	str	r4, [r7, #16]
90012126:	4630      	mov	r0, r6
90012128:	b003      	add	sp, #12
9001212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001212e:	6812      	ldr	r2, [r2, #0]
90012130:	3b04      	subs	r3, #4
90012132:	2a00      	cmp	r2, #0
90012134:	d1cc      	bne.n	900120d0 <quorem+0x9c>
90012136:	3c01      	subs	r4, #1
90012138:	e7c7      	b.n	900120ca <quorem+0x96>
9001213a:	6812      	ldr	r2, [r2, #0]
9001213c:	3b04      	subs	r3, #4
9001213e:	2a00      	cmp	r2, #0
90012140:	d1f0      	bne.n	90012124 <quorem+0xf0>
90012142:	3c01      	subs	r4, #1
90012144:	e7eb      	b.n	9001211e <quorem+0xea>
90012146:	2000      	movs	r0, #0
90012148:	e7ee      	b.n	90012128 <quorem+0xf4>
9001214a:	0000      	movs	r0, r0
9001214c:	0000      	movs	r0, r0
	...

90012150 <_dtoa_r>:
90012150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012154:	ed2d 8b02 	vpush	{d8}
90012158:	6a45      	ldr	r5, [r0, #36]	; 0x24
9001215a:	b091      	sub	sp, #68	; 0x44
9001215c:	ed8d 0b02 	vstr	d0, [sp, #8]
90012160:	ec59 8b10 	vmov	r8, r9, d0
90012164:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90012166:	9106      	str	r1, [sp, #24]
90012168:	4606      	mov	r6, r0
9001216a:	9208      	str	r2, [sp, #32]
9001216c:	930c      	str	r3, [sp, #48]	; 0x30
9001216e:	b975      	cbnz	r5, 9001218e <_dtoa_r+0x3e>
90012170:	2010      	movs	r0, #16
90012172:	f000 fe99 	bl	90012ea8 <malloc>
90012176:	4602      	mov	r2, r0
90012178:	6270      	str	r0, [r6, #36]	; 0x24
9001217a:	b920      	cbnz	r0, 90012186 <_dtoa_r+0x36>
9001217c:	4baa      	ldr	r3, [pc, #680]	; (90012428 <_dtoa_r+0x2d8>)
9001217e:	21ea      	movs	r1, #234	; 0xea
90012180:	48aa      	ldr	r0, [pc, #680]	; (9001242c <_dtoa_r+0x2dc>)
90012182:	f001 fd53 	bl	90013c2c <__assert_func>
90012186:	e9c0 5501 	strd	r5, r5, [r0, #4]
9001218a:	6005      	str	r5, [r0, #0]
9001218c:	60c5      	str	r5, [r0, #12]
9001218e:	6a73      	ldr	r3, [r6, #36]	; 0x24
90012190:	6819      	ldr	r1, [r3, #0]
90012192:	b151      	cbz	r1, 900121aa <_dtoa_r+0x5a>
90012194:	685a      	ldr	r2, [r3, #4]
90012196:	604a      	str	r2, [r1, #4]
90012198:	2301      	movs	r3, #1
9001219a:	4093      	lsls	r3, r2
9001219c:	608b      	str	r3, [r1, #8]
9001219e:	4630      	mov	r0, r6
900121a0:	f000 fed6 	bl	90012f50 <_Bfree>
900121a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
900121a6:	2200      	movs	r2, #0
900121a8:	601a      	str	r2, [r3, #0]
900121aa:	f1b9 0300 	subs.w	r3, r9, #0
900121ae:	bfbb      	ittet	lt
900121b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
900121b4:	9303      	strlt	r3, [sp, #12]
900121b6:	2300      	movge	r3, #0
900121b8:	2201      	movlt	r2, #1
900121ba:	bfac      	ite	ge
900121bc:	6023      	strge	r3, [r4, #0]
900121be:	6022      	strlt	r2, [r4, #0]
900121c0:	4b9b      	ldr	r3, [pc, #620]	; (90012430 <_dtoa_r+0x2e0>)
900121c2:	9c03      	ldr	r4, [sp, #12]
900121c4:	43a3      	bics	r3, r4
900121c6:	d11c      	bne.n	90012202 <_dtoa_r+0xb2>
900121c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900121ca:	f242 730f 	movw	r3, #9999	; 0x270f
900121ce:	6013      	str	r3, [r2, #0]
900121d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
900121d4:	ea53 0308 	orrs.w	r3, r3, r8
900121d8:	f000 84fd 	beq.w	90012bd6 <_dtoa_r+0xa86>
900121dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900121de:	b963      	cbnz	r3, 900121fa <_dtoa_r+0xaa>
900121e0:	4b94      	ldr	r3, [pc, #592]	; (90012434 <_dtoa_r+0x2e4>)
900121e2:	e01f      	b.n	90012224 <_dtoa_r+0xd4>
900121e4:	4b94      	ldr	r3, [pc, #592]	; (90012438 <_dtoa_r+0x2e8>)
900121e6:	9301      	str	r3, [sp, #4]
900121e8:	3308      	adds	r3, #8
900121ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
900121ec:	6013      	str	r3, [r2, #0]
900121ee:	9801      	ldr	r0, [sp, #4]
900121f0:	b011      	add	sp, #68	; 0x44
900121f2:	ecbd 8b02 	vpop	{d8}
900121f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900121fa:	4b8e      	ldr	r3, [pc, #568]	; (90012434 <_dtoa_r+0x2e4>)
900121fc:	9301      	str	r3, [sp, #4]
900121fe:	3303      	adds	r3, #3
90012200:	e7f3      	b.n	900121ea <_dtoa_r+0x9a>
90012202:	ed9d 8b02 	vldr	d8, [sp, #8]
90012206:	eeb5 8b40 	vcmp.f64	d8, #0.0
9001220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001220e:	d10b      	bne.n	90012228 <_dtoa_r+0xd8>
90012210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90012212:	2301      	movs	r3, #1
90012214:	6013      	str	r3, [r2, #0]
90012216:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90012218:	2b00      	cmp	r3, #0
9001221a:	f000 84d9 	beq.w	90012bd0 <_dtoa_r+0xa80>
9001221e:	4887      	ldr	r0, [pc, #540]	; (9001243c <_dtoa_r+0x2ec>)
90012220:	6018      	str	r0, [r3, #0]
90012222:	1e43      	subs	r3, r0, #1
90012224:	9301      	str	r3, [sp, #4]
90012226:	e7e2      	b.n	900121ee <_dtoa_r+0x9e>
90012228:	a90f      	add	r1, sp, #60	; 0x3c
9001222a:	aa0e      	add	r2, sp, #56	; 0x38
9001222c:	4630      	mov	r0, r6
9001222e:	eeb0 0b48 	vmov.f64	d0, d8
90012232:	f001 f975 	bl	90013520 <__d2b>
90012236:	f3c4 510a 	ubfx	r1, r4, #20, #11
9001223a:	4605      	mov	r5, r0
9001223c:	980e      	ldr	r0, [sp, #56]	; 0x38
9001223e:	2900      	cmp	r1, #0
90012240:	d046      	beq.n	900122d0 <_dtoa_r+0x180>
90012242:	ee18 4a90 	vmov	r4, s17
90012246:	f3c4 0413 	ubfx	r4, r4, #0, #20
9001224a:	ec53 2b18 	vmov	r2, r3, d8
9001224e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
90012252:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
90012256:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
9001225a:	2400      	movs	r4, #0
9001225c:	ec43 2b16 	vmov	d6, r2, r3
90012260:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
90012264:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 90012410 <_dtoa_r+0x2c0>
90012268:	ee36 7b47 	vsub.f64	d7, d6, d7
9001226c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 90012418 <_dtoa_r+0x2c8>
90012270:	eea7 6b05 	vfma.f64	d6, d7, d5
90012274:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 90012420 <_dtoa_r+0x2d0>
90012278:	ee07 1a90 	vmov	s15, r1
9001227c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
90012280:	eeb0 7b46 	vmov.f64	d7, d6
90012284:	eea4 7b05 	vfma.f64	d7, d4, d5
90012288:	eefd 6bc7 	vcvt.s32.f64	s13, d7
9001228c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
90012290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012294:	ee16 ba90 	vmov	fp, s13
90012298:	940a      	str	r4, [sp, #40]	; 0x28
9001229a:	d508      	bpl.n	900122ae <_dtoa_r+0x15e>
9001229c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
900122a0:	eeb4 6b47 	vcmp.f64	d6, d7
900122a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900122a8:	bf18      	it	ne
900122aa:	f10b 3bff 	addne.w	fp, fp, #4294967295
900122ae:	f1bb 0f16 	cmp.w	fp, #22
900122b2:	d82f      	bhi.n	90012314 <_dtoa_r+0x1c4>
900122b4:	4b62      	ldr	r3, [pc, #392]	; (90012440 <_dtoa_r+0x2f0>)
900122b6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
900122ba:	ed93 7b00 	vldr	d7, [r3]
900122be:	eeb4 8bc7 	vcmpe.f64	d8, d7
900122c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900122c6:	d501      	bpl.n	900122cc <_dtoa_r+0x17c>
900122c8:	f10b 3bff 	add.w	fp, fp, #4294967295
900122cc:	2300      	movs	r3, #0
900122ce:	e022      	b.n	90012316 <_dtoa_r+0x1c6>
900122d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
900122d2:	4401      	add	r1, r0
900122d4:	f201 4332 	addw	r3, r1, #1074	; 0x432
900122d8:	2b20      	cmp	r3, #32
900122da:	bfc1      	itttt	gt
900122dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
900122e0:	fa04 f303 	lslgt.w	r3, r4, r3
900122e4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
900122e8:	fa28 f804 	lsrgt.w	r8, r8, r4
900122ec:	bfd6      	itet	le
900122ee:	f1c3 0320 	rsble	r3, r3, #32
900122f2:	ea43 0808 	orrgt.w	r8, r3, r8
900122f6:	fa08 f803 	lslle.w	r8, r8, r3
900122fa:	ee07 8a90 	vmov	s15, r8
900122fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
90012302:	3901      	subs	r1, #1
90012304:	ee17 4a90 	vmov	r4, s15
90012308:	ec53 2b17 	vmov	r2, r3, d7
9001230c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
90012310:	2401      	movs	r4, #1
90012312:	e7a3      	b.n	9001225c <_dtoa_r+0x10c>
90012314:	2301      	movs	r3, #1
90012316:	930b      	str	r3, [sp, #44]	; 0x2c
90012318:	1a43      	subs	r3, r0, r1
9001231a:	1e5a      	subs	r2, r3, #1
9001231c:	bf45      	ittet	mi
9001231e:	f1c3 0301 	rsbmi	r3, r3, #1
90012322:	9304      	strmi	r3, [sp, #16]
90012324:	2300      	movpl	r3, #0
90012326:	2300      	movmi	r3, #0
90012328:	9205      	str	r2, [sp, #20]
9001232a:	bf54      	ite	pl
9001232c:	9304      	strpl	r3, [sp, #16]
9001232e:	9305      	strmi	r3, [sp, #20]
90012330:	f1bb 0f00 	cmp.w	fp, #0
90012334:	db18      	blt.n	90012368 <_dtoa_r+0x218>
90012336:	9b05      	ldr	r3, [sp, #20]
90012338:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
9001233c:	445b      	add	r3, fp
9001233e:	9305      	str	r3, [sp, #20]
90012340:	2300      	movs	r3, #0
90012342:	9a06      	ldr	r2, [sp, #24]
90012344:	2a09      	cmp	r2, #9
90012346:	d849      	bhi.n	900123dc <_dtoa_r+0x28c>
90012348:	2a05      	cmp	r2, #5
9001234a:	bfc4      	itt	gt
9001234c:	3a04      	subgt	r2, #4
9001234e:	9206      	strgt	r2, [sp, #24]
90012350:	9a06      	ldr	r2, [sp, #24]
90012352:	f1a2 0202 	sub.w	r2, r2, #2
90012356:	bfcc      	ite	gt
90012358:	2400      	movgt	r4, #0
9001235a:	2401      	movle	r4, #1
9001235c:	2a03      	cmp	r2, #3
9001235e:	d848      	bhi.n	900123f2 <_dtoa_r+0x2a2>
90012360:	e8df f002 	tbb	[pc, r2]
90012364:	3a2c2e0b 	.word	0x3a2c2e0b
90012368:	9b04      	ldr	r3, [sp, #16]
9001236a:	2200      	movs	r2, #0
9001236c:	eba3 030b 	sub.w	r3, r3, fp
90012370:	9304      	str	r3, [sp, #16]
90012372:	9209      	str	r2, [sp, #36]	; 0x24
90012374:	f1cb 0300 	rsb	r3, fp, #0
90012378:	e7e3      	b.n	90012342 <_dtoa_r+0x1f2>
9001237a:	2200      	movs	r2, #0
9001237c:	9207      	str	r2, [sp, #28]
9001237e:	9a08      	ldr	r2, [sp, #32]
90012380:	2a00      	cmp	r2, #0
90012382:	dc39      	bgt.n	900123f8 <_dtoa_r+0x2a8>
90012384:	f04f 0a01 	mov.w	sl, #1
90012388:	46d1      	mov	r9, sl
9001238a:	4652      	mov	r2, sl
9001238c:	f8cd a020 	str.w	sl, [sp, #32]
90012390:	6a77      	ldr	r7, [r6, #36]	; 0x24
90012392:	2100      	movs	r1, #0
90012394:	6079      	str	r1, [r7, #4]
90012396:	2004      	movs	r0, #4
90012398:	f100 0c14 	add.w	ip, r0, #20
9001239c:	4594      	cmp	ip, r2
9001239e:	6879      	ldr	r1, [r7, #4]
900123a0:	d92f      	bls.n	90012402 <_dtoa_r+0x2b2>
900123a2:	4630      	mov	r0, r6
900123a4:	930d      	str	r3, [sp, #52]	; 0x34
900123a6:	f000 fd93 	bl	90012ed0 <_Balloc>
900123aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900123ac:	9001      	str	r0, [sp, #4]
900123ae:	4602      	mov	r2, r0
900123b0:	2800      	cmp	r0, #0
900123b2:	d149      	bne.n	90012448 <_dtoa_r+0x2f8>
900123b4:	4b23      	ldr	r3, [pc, #140]	; (90012444 <_dtoa_r+0x2f4>)
900123b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
900123ba:	e6e1      	b.n	90012180 <_dtoa_r+0x30>
900123bc:	2201      	movs	r2, #1
900123be:	e7dd      	b.n	9001237c <_dtoa_r+0x22c>
900123c0:	2200      	movs	r2, #0
900123c2:	9207      	str	r2, [sp, #28]
900123c4:	9a08      	ldr	r2, [sp, #32]
900123c6:	eb0b 0a02 	add.w	sl, fp, r2
900123ca:	f10a 0901 	add.w	r9, sl, #1
900123ce:	464a      	mov	r2, r9
900123d0:	2a01      	cmp	r2, #1
900123d2:	bfb8      	it	lt
900123d4:	2201      	movlt	r2, #1
900123d6:	e7db      	b.n	90012390 <_dtoa_r+0x240>
900123d8:	2201      	movs	r2, #1
900123da:	e7f2      	b.n	900123c2 <_dtoa_r+0x272>
900123dc:	2401      	movs	r4, #1
900123de:	2200      	movs	r2, #0
900123e0:	e9cd 2406 	strd	r2, r4, [sp, #24]
900123e4:	f04f 3aff 	mov.w	sl, #4294967295
900123e8:	2100      	movs	r1, #0
900123ea:	46d1      	mov	r9, sl
900123ec:	2212      	movs	r2, #18
900123ee:	9108      	str	r1, [sp, #32]
900123f0:	e7ce      	b.n	90012390 <_dtoa_r+0x240>
900123f2:	2201      	movs	r2, #1
900123f4:	9207      	str	r2, [sp, #28]
900123f6:	e7f5      	b.n	900123e4 <_dtoa_r+0x294>
900123f8:	f8dd a020 	ldr.w	sl, [sp, #32]
900123fc:	46d1      	mov	r9, sl
900123fe:	4652      	mov	r2, sl
90012400:	e7c6      	b.n	90012390 <_dtoa_r+0x240>
90012402:	3101      	adds	r1, #1
90012404:	6079      	str	r1, [r7, #4]
90012406:	0040      	lsls	r0, r0, #1
90012408:	e7c6      	b.n	90012398 <_dtoa_r+0x248>
9001240a:	bf00      	nop
9001240c:	f3af 8000 	nop.w
90012410:	636f4361 	.word	0x636f4361
90012414:	3fd287a7 	.word	0x3fd287a7
90012418:	8b60c8b3 	.word	0x8b60c8b3
9001241c:	3fc68a28 	.word	0x3fc68a28
90012420:	509f79fb 	.word	0x509f79fb
90012424:	3fd34413 	.word	0x3fd34413
90012428:	900148cd 	.word	0x900148cd
9001242c:	900148e4 	.word	0x900148e4
90012430:	7ff00000 	.word	0x7ff00000
90012434:	900148c9 	.word	0x900148c9
90012438:	900148c0 	.word	0x900148c0
9001243c:	9001489d 	.word	0x9001489d
90012440:	900149d8 	.word	0x900149d8
90012444:	9001493f 	.word	0x9001493f
90012448:	6a72      	ldr	r2, [r6, #36]	; 0x24
9001244a:	9901      	ldr	r1, [sp, #4]
9001244c:	6011      	str	r1, [r2, #0]
9001244e:	f1b9 0f0e 	cmp.w	r9, #14
90012452:	d86c      	bhi.n	9001252e <_dtoa_r+0x3de>
90012454:	2c00      	cmp	r4, #0
90012456:	d06a      	beq.n	9001252e <_dtoa_r+0x3de>
90012458:	f1bb 0f00 	cmp.w	fp, #0
9001245c:	f340 80a0 	ble.w	900125a0 <_dtoa_r+0x450>
90012460:	49c1      	ldr	r1, [pc, #772]	; (90012768 <_dtoa_r+0x618>)
90012462:	f00b 020f 	and.w	r2, fp, #15
90012466:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
9001246a:	f41b 7f80 	tst.w	fp, #256	; 0x100
9001246e:	ed92 7b00 	vldr	d7, [r2]
90012472:	ea4f 112b 	mov.w	r1, fp, asr #4
90012476:	f000 8087 	beq.w	90012588 <_dtoa_r+0x438>
9001247a:	4abc      	ldr	r2, [pc, #752]	; (9001276c <_dtoa_r+0x61c>)
9001247c:	ed92 6b08 	vldr	d6, [r2, #32]
90012480:	ee88 6b06 	vdiv.f64	d6, d8, d6
90012484:	ed8d 6b02 	vstr	d6, [sp, #8]
90012488:	f001 010f 	and.w	r1, r1, #15
9001248c:	2203      	movs	r2, #3
9001248e:	48b7      	ldr	r0, [pc, #732]	; (9001276c <_dtoa_r+0x61c>)
90012490:	2900      	cmp	r1, #0
90012492:	d17b      	bne.n	9001258c <_dtoa_r+0x43c>
90012494:	ed9d 6b02 	vldr	d6, [sp, #8]
90012498:	ee86 7b07 	vdiv.f64	d7, d6, d7
9001249c:	ed8d 7b02 	vstr	d7, [sp, #8]
900124a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
900124a2:	2900      	cmp	r1, #0
900124a4:	f000 80a2 	beq.w	900125ec <_dtoa_r+0x49c>
900124a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
900124ac:	ed9d 7b02 	vldr	d7, [sp, #8]
900124b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
900124b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900124b8:	f140 8098 	bpl.w	900125ec <_dtoa_r+0x49c>
900124bc:	f1b9 0f00 	cmp.w	r9, #0
900124c0:	f000 8094 	beq.w	900125ec <_dtoa_r+0x49c>
900124c4:	f1ba 0f00 	cmp.w	sl, #0
900124c8:	dd2f      	ble.n	9001252a <_dtoa_r+0x3da>
900124ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
900124ce:	ee27 7b06 	vmul.f64	d7, d7, d6
900124d2:	ed8d 7b02 	vstr	d7, [sp, #8]
900124d6:	f10b 37ff 	add.w	r7, fp, #4294967295
900124da:	3201      	adds	r2, #1
900124dc:	4650      	mov	r0, sl
900124de:	ed9d 6b02 	vldr	d6, [sp, #8]
900124e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
900124e6:	ee07 2a90 	vmov	s15, r2
900124ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
900124ee:	eea7 5b06 	vfma.f64	d5, d7, d6
900124f2:	ee15 4a90 	vmov	r4, s11
900124f6:	ec52 1b15 	vmov	r1, r2, d5
900124fa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
900124fe:	2800      	cmp	r0, #0
90012500:	d177      	bne.n	900125f2 <_dtoa_r+0x4a2>
90012502:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
90012506:	ee36 6b47 	vsub.f64	d6, d6, d7
9001250a:	ec42 1b17 	vmov	d7, r1, r2
9001250e:	eeb4 6bc7 	vcmpe.f64	d6, d7
90012512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012516:	f300 8263 	bgt.w	900129e0 <_dtoa_r+0x890>
9001251a:	eeb1 7b47 	vneg.f64	d7, d7
9001251e:	eeb4 6bc7 	vcmpe.f64	d6, d7
90012522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012526:	f100 8258 	bmi.w	900129da <_dtoa_r+0x88a>
9001252a:	ed8d 8b02 	vstr	d8, [sp, #8]
9001252e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90012530:	2a00      	cmp	r2, #0
90012532:	f2c0 811d 	blt.w	90012770 <_dtoa_r+0x620>
90012536:	f1bb 0f0e 	cmp.w	fp, #14
9001253a:	f300 8119 	bgt.w	90012770 <_dtoa_r+0x620>
9001253e:	4b8a      	ldr	r3, [pc, #552]	; (90012768 <_dtoa_r+0x618>)
90012540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
90012544:	ed93 6b00 	vldr	d6, [r3]
90012548:	9b08      	ldr	r3, [sp, #32]
9001254a:	2b00      	cmp	r3, #0
9001254c:	f280 80b7 	bge.w	900126be <_dtoa_r+0x56e>
90012550:	f1b9 0f00 	cmp.w	r9, #0
90012554:	f300 80b3 	bgt.w	900126be <_dtoa_r+0x56e>
90012558:	f040 823f 	bne.w	900129da <_dtoa_r+0x88a>
9001255c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
90012560:	ee26 6b07 	vmul.f64	d6, d6, d7
90012564:	ed9d 7b02 	vldr	d7, [sp, #8]
90012568:	eeb4 6bc7 	vcmpe.f64	d6, d7
9001256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012570:	464c      	mov	r4, r9
90012572:	464f      	mov	r7, r9
90012574:	f280 8215 	bge.w	900129a2 <_dtoa_r+0x852>
90012578:	f8dd 8004 	ldr.w	r8, [sp, #4]
9001257c:	2331      	movs	r3, #49	; 0x31
9001257e:	f808 3b01 	strb.w	r3, [r8], #1
90012582:	f10b 0b01 	add.w	fp, fp, #1
90012586:	e211      	b.n	900129ac <_dtoa_r+0x85c>
90012588:	2202      	movs	r2, #2
9001258a:	e780      	b.n	9001248e <_dtoa_r+0x33e>
9001258c:	07cc      	lsls	r4, r1, #31
9001258e:	d504      	bpl.n	9001259a <_dtoa_r+0x44a>
90012590:	ed90 6b00 	vldr	d6, [r0]
90012594:	3201      	adds	r2, #1
90012596:	ee27 7b06 	vmul.f64	d7, d7, d6
9001259a:	1049      	asrs	r1, r1, #1
9001259c:	3008      	adds	r0, #8
9001259e:	e777      	b.n	90012490 <_dtoa_r+0x340>
900125a0:	d022      	beq.n	900125e8 <_dtoa_r+0x498>
900125a2:	f1cb 0100 	rsb	r1, fp, #0
900125a6:	4a70      	ldr	r2, [pc, #448]	; (90012768 <_dtoa_r+0x618>)
900125a8:	f001 000f 	and.w	r0, r1, #15
900125ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
900125b0:	ed92 7b00 	vldr	d7, [r2]
900125b4:	ee28 7b07 	vmul.f64	d7, d8, d7
900125b8:	ed8d 7b02 	vstr	d7, [sp, #8]
900125bc:	486b      	ldr	r0, [pc, #428]	; (9001276c <_dtoa_r+0x61c>)
900125be:	1109      	asrs	r1, r1, #4
900125c0:	2400      	movs	r4, #0
900125c2:	2202      	movs	r2, #2
900125c4:	b929      	cbnz	r1, 900125d2 <_dtoa_r+0x482>
900125c6:	2c00      	cmp	r4, #0
900125c8:	f43f af6a 	beq.w	900124a0 <_dtoa_r+0x350>
900125cc:	ed8d 7b02 	vstr	d7, [sp, #8]
900125d0:	e766      	b.n	900124a0 <_dtoa_r+0x350>
900125d2:	07cf      	lsls	r7, r1, #31
900125d4:	d505      	bpl.n	900125e2 <_dtoa_r+0x492>
900125d6:	ed90 6b00 	vldr	d6, [r0]
900125da:	3201      	adds	r2, #1
900125dc:	2401      	movs	r4, #1
900125de:	ee27 7b06 	vmul.f64	d7, d7, d6
900125e2:	1049      	asrs	r1, r1, #1
900125e4:	3008      	adds	r0, #8
900125e6:	e7ed      	b.n	900125c4 <_dtoa_r+0x474>
900125e8:	2202      	movs	r2, #2
900125ea:	e759      	b.n	900124a0 <_dtoa_r+0x350>
900125ec:	465f      	mov	r7, fp
900125ee:	4648      	mov	r0, r9
900125f0:	e775      	b.n	900124de <_dtoa_r+0x38e>
900125f2:	ec42 1b17 	vmov	d7, r1, r2
900125f6:	4a5c      	ldr	r2, [pc, #368]	; (90012768 <_dtoa_r+0x618>)
900125f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
900125fc:	ed12 4b02 	vldr	d4, [r2, #-8]
90012600:	9a01      	ldr	r2, [sp, #4]
90012602:	1814      	adds	r4, r2, r0
90012604:	9a07      	ldr	r2, [sp, #28]
90012606:	b352      	cbz	r2, 9001265e <_dtoa_r+0x50e>
90012608:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
9001260c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
90012610:	f8dd 8004 	ldr.w	r8, [sp, #4]
90012614:	ee83 5b04 	vdiv.f64	d5, d3, d4
90012618:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
9001261c:	ee35 7b47 	vsub.f64	d7, d5, d7
90012620:	eefd 4bc6 	vcvt.s32.f64	s9, d6
90012624:	ee14 2a90 	vmov	r2, s9
90012628:	eeb8 5be4 	vcvt.f64.s32	d5, s9
9001262c:	3230      	adds	r2, #48	; 0x30
9001262e:	ee36 6b45 	vsub.f64	d6, d6, d5
90012632:	eeb4 6bc7 	vcmpe.f64	d6, d7
90012636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001263a:	f808 2b01 	strb.w	r2, [r8], #1
9001263e:	d439      	bmi.n	900126b4 <_dtoa_r+0x564>
90012640:	ee32 5b46 	vsub.f64	d5, d2, d6
90012644:	eeb4 5bc7 	vcmpe.f64	d5, d7
90012648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001264c:	d472      	bmi.n	90012734 <_dtoa_r+0x5e4>
9001264e:	45a0      	cmp	r8, r4
90012650:	f43f af6b 	beq.w	9001252a <_dtoa_r+0x3da>
90012654:	ee27 7b03 	vmul.f64	d7, d7, d3
90012658:	ee26 6b03 	vmul.f64	d6, d6, d3
9001265c:	e7e0      	b.n	90012620 <_dtoa_r+0x4d0>
9001265e:	f8dd 8004 	ldr.w	r8, [sp, #4]
90012662:	ee27 7b04 	vmul.f64	d7, d7, d4
90012666:	4621      	mov	r1, r4
90012668:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
9001266c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
90012670:	ee14 2a90 	vmov	r2, s9
90012674:	3230      	adds	r2, #48	; 0x30
90012676:	f808 2b01 	strb.w	r2, [r8], #1
9001267a:	45a0      	cmp	r8, r4
9001267c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
90012680:	ee36 6b45 	vsub.f64	d6, d6, d5
90012684:	d118      	bne.n	900126b8 <_dtoa_r+0x568>
90012686:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
9001268a:	ee37 4b05 	vadd.f64	d4, d7, d5
9001268e:	eeb4 6bc4 	vcmpe.f64	d6, d4
90012692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012696:	dc4d      	bgt.n	90012734 <_dtoa_r+0x5e4>
90012698:	ee35 7b47 	vsub.f64	d7, d5, d7
9001269c:	eeb4 6bc7 	vcmpe.f64	d6, d7
900126a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900126a4:	f57f af41 	bpl.w	9001252a <_dtoa_r+0x3da>
900126a8:	4688      	mov	r8, r1
900126aa:	3901      	subs	r1, #1
900126ac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
900126b0:	2b30      	cmp	r3, #48	; 0x30
900126b2:	d0f9      	beq.n	900126a8 <_dtoa_r+0x558>
900126b4:	46bb      	mov	fp, r7
900126b6:	e02a      	b.n	9001270e <_dtoa_r+0x5be>
900126b8:	ee26 6b03 	vmul.f64	d6, d6, d3
900126bc:	e7d6      	b.n	9001266c <_dtoa_r+0x51c>
900126be:	ed9d 7b02 	vldr	d7, [sp, #8]
900126c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
900126c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
900126ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
900126ce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
900126d2:	ee15 3a10 	vmov	r3, s10
900126d6:	3330      	adds	r3, #48	; 0x30
900126d8:	f808 3b01 	strb.w	r3, [r8], #1
900126dc:	9b01      	ldr	r3, [sp, #4]
900126de:	eba8 0303 	sub.w	r3, r8, r3
900126e2:	4599      	cmp	r9, r3
900126e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
900126e8:	eea3 7b46 	vfms.f64	d7, d3, d6
900126ec:	d133      	bne.n	90012756 <_dtoa_r+0x606>
900126ee:	ee37 7b07 	vadd.f64	d7, d7, d7
900126f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
900126f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900126fa:	dc1a      	bgt.n	90012732 <_dtoa_r+0x5e2>
900126fc:	eeb4 7b46 	vcmp.f64	d7, d6
90012700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012704:	d103      	bne.n	9001270e <_dtoa_r+0x5be>
90012706:	ee15 3a10 	vmov	r3, s10
9001270a:	07d9      	lsls	r1, r3, #31
9001270c:	d411      	bmi.n	90012732 <_dtoa_r+0x5e2>
9001270e:	4629      	mov	r1, r5
90012710:	4630      	mov	r0, r6
90012712:	f000 fc1d 	bl	90012f50 <_Bfree>
90012716:	2300      	movs	r3, #0
90012718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001271a:	f888 3000 	strb.w	r3, [r8]
9001271e:	f10b 0301 	add.w	r3, fp, #1
90012722:	6013      	str	r3, [r2, #0]
90012724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90012726:	2b00      	cmp	r3, #0
90012728:	f43f ad61 	beq.w	900121ee <_dtoa_r+0x9e>
9001272c:	f8c3 8000 	str.w	r8, [r3]
90012730:	e55d      	b.n	900121ee <_dtoa_r+0x9e>
90012732:	465f      	mov	r7, fp
90012734:	4643      	mov	r3, r8
90012736:	4698      	mov	r8, r3
90012738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
9001273c:	2a39      	cmp	r2, #57	; 0x39
9001273e:	d106      	bne.n	9001274e <_dtoa_r+0x5fe>
90012740:	9a01      	ldr	r2, [sp, #4]
90012742:	429a      	cmp	r2, r3
90012744:	d1f7      	bne.n	90012736 <_dtoa_r+0x5e6>
90012746:	9901      	ldr	r1, [sp, #4]
90012748:	2230      	movs	r2, #48	; 0x30
9001274a:	3701      	adds	r7, #1
9001274c:	700a      	strb	r2, [r1, #0]
9001274e:	781a      	ldrb	r2, [r3, #0]
90012750:	3201      	adds	r2, #1
90012752:	701a      	strb	r2, [r3, #0]
90012754:	e7ae      	b.n	900126b4 <_dtoa_r+0x564>
90012756:	ee27 7b04 	vmul.f64	d7, d7, d4
9001275a:	eeb5 7b40 	vcmp.f64	d7, #0.0
9001275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012762:	d1b2      	bne.n	900126ca <_dtoa_r+0x57a>
90012764:	e7d3      	b.n	9001270e <_dtoa_r+0x5be>
90012766:	bf00      	nop
90012768:	900149d8 	.word	0x900149d8
9001276c:	900149b0 	.word	0x900149b0
90012770:	9907      	ldr	r1, [sp, #28]
90012772:	2900      	cmp	r1, #0
90012774:	f000 80d0 	beq.w	90012918 <_dtoa_r+0x7c8>
90012778:	9906      	ldr	r1, [sp, #24]
9001277a:	2901      	cmp	r1, #1
9001277c:	f300 80b4 	bgt.w	900128e8 <_dtoa_r+0x798>
90012780:	990a      	ldr	r1, [sp, #40]	; 0x28
90012782:	2900      	cmp	r1, #0
90012784:	f000 80ac 	beq.w	900128e0 <_dtoa_r+0x790>
90012788:	f202 4233 	addw	r2, r2, #1075	; 0x433
9001278c:	f8dd 8010 	ldr.w	r8, [sp, #16]
90012790:	461c      	mov	r4, r3
90012792:	930a      	str	r3, [sp, #40]	; 0x28
90012794:	9b04      	ldr	r3, [sp, #16]
90012796:	4413      	add	r3, r2
90012798:	9304      	str	r3, [sp, #16]
9001279a:	9b05      	ldr	r3, [sp, #20]
9001279c:	2101      	movs	r1, #1
9001279e:	4413      	add	r3, r2
900127a0:	4630      	mov	r0, r6
900127a2:	9305      	str	r3, [sp, #20]
900127a4:	f000 fc8c 	bl	900130c0 <__i2b>
900127a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900127aa:	4607      	mov	r7, r0
900127ac:	f1b8 0f00 	cmp.w	r8, #0
900127b0:	dd0d      	ble.n	900127ce <_dtoa_r+0x67e>
900127b2:	9a05      	ldr	r2, [sp, #20]
900127b4:	2a00      	cmp	r2, #0
900127b6:	dd0a      	ble.n	900127ce <_dtoa_r+0x67e>
900127b8:	4542      	cmp	r2, r8
900127ba:	9904      	ldr	r1, [sp, #16]
900127bc:	bfa8      	it	ge
900127be:	4642      	movge	r2, r8
900127c0:	1a89      	subs	r1, r1, r2
900127c2:	9104      	str	r1, [sp, #16]
900127c4:	9905      	ldr	r1, [sp, #20]
900127c6:	eba8 0802 	sub.w	r8, r8, r2
900127ca:	1a8a      	subs	r2, r1, r2
900127cc:	9205      	str	r2, [sp, #20]
900127ce:	b303      	cbz	r3, 90012812 <_dtoa_r+0x6c2>
900127d0:	9a07      	ldr	r2, [sp, #28]
900127d2:	2a00      	cmp	r2, #0
900127d4:	f000 80a5 	beq.w	90012922 <_dtoa_r+0x7d2>
900127d8:	2c00      	cmp	r4, #0
900127da:	dd13      	ble.n	90012804 <_dtoa_r+0x6b4>
900127dc:	4639      	mov	r1, r7
900127de:	4622      	mov	r2, r4
900127e0:	4630      	mov	r0, r6
900127e2:	930d      	str	r3, [sp, #52]	; 0x34
900127e4:	f000 fd2c 	bl	90013240 <__pow5mult>
900127e8:	462a      	mov	r2, r5
900127ea:	4601      	mov	r1, r0
900127ec:	4607      	mov	r7, r0
900127ee:	4630      	mov	r0, r6
900127f0:	f000 fc7c 	bl	900130ec <__multiply>
900127f4:	4629      	mov	r1, r5
900127f6:	900a      	str	r0, [sp, #40]	; 0x28
900127f8:	4630      	mov	r0, r6
900127fa:	f000 fba9 	bl	90012f50 <_Bfree>
900127fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90012800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012802:	4615      	mov	r5, r2
90012804:	1b1a      	subs	r2, r3, r4
90012806:	d004      	beq.n	90012812 <_dtoa_r+0x6c2>
90012808:	4629      	mov	r1, r5
9001280a:	4630      	mov	r0, r6
9001280c:	f000 fd18 	bl	90013240 <__pow5mult>
90012810:	4605      	mov	r5, r0
90012812:	2101      	movs	r1, #1
90012814:	4630      	mov	r0, r6
90012816:	f000 fc53 	bl	900130c0 <__i2b>
9001281a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001281c:	2b00      	cmp	r3, #0
9001281e:	4604      	mov	r4, r0
90012820:	f340 8081 	ble.w	90012926 <_dtoa_r+0x7d6>
90012824:	461a      	mov	r2, r3
90012826:	4601      	mov	r1, r0
90012828:	4630      	mov	r0, r6
9001282a:	f000 fd09 	bl	90013240 <__pow5mult>
9001282e:	9b06      	ldr	r3, [sp, #24]
90012830:	2b01      	cmp	r3, #1
90012832:	4604      	mov	r4, r0
90012834:	dd7a      	ble.n	9001292c <_dtoa_r+0x7dc>
90012836:	2300      	movs	r3, #0
90012838:	930a      	str	r3, [sp, #40]	; 0x28
9001283a:	6922      	ldr	r2, [r4, #16]
9001283c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
90012840:	6910      	ldr	r0, [r2, #16]
90012842:	f000 fbed 	bl	90013020 <__hi0bits>
90012846:	f1c0 0020 	rsb	r0, r0, #32
9001284a:	9b05      	ldr	r3, [sp, #20]
9001284c:	4418      	add	r0, r3
9001284e:	f010 001f 	ands.w	r0, r0, #31
90012852:	f000 808c 	beq.w	9001296e <_dtoa_r+0x81e>
90012856:	f1c0 0220 	rsb	r2, r0, #32
9001285a:	2a04      	cmp	r2, #4
9001285c:	f340 8085 	ble.w	9001296a <_dtoa_r+0x81a>
90012860:	f1c0 001c 	rsb	r0, r0, #28
90012864:	9b04      	ldr	r3, [sp, #16]
90012866:	4403      	add	r3, r0
90012868:	9304      	str	r3, [sp, #16]
9001286a:	9b05      	ldr	r3, [sp, #20]
9001286c:	4403      	add	r3, r0
9001286e:	4480      	add	r8, r0
90012870:	9305      	str	r3, [sp, #20]
90012872:	9b04      	ldr	r3, [sp, #16]
90012874:	2b00      	cmp	r3, #0
90012876:	dd05      	ble.n	90012884 <_dtoa_r+0x734>
90012878:	4629      	mov	r1, r5
9001287a:	461a      	mov	r2, r3
9001287c:	4630      	mov	r0, r6
9001287e:	f000 fd39 	bl	900132f4 <__lshift>
90012882:	4605      	mov	r5, r0
90012884:	9b05      	ldr	r3, [sp, #20]
90012886:	2b00      	cmp	r3, #0
90012888:	dd05      	ble.n	90012896 <_dtoa_r+0x746>
9001288a:	4621      	mov	r1, r4
9001288c:	461a      	mov	r2, r3
9001288e:	4630      	mov	r0, r6
90012890:	f000 fd30 	bl	900132f4 <__lshift>
90012894:	4604      	mov	r4, r0
90012896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90012898:	2b00      	cmp	r3, #0
9001289a:	d06a      	beq.n	90012972 <_dtoa_r+0x822>
9001289c:	4621      	mov	r1, r4
9001289e:	4628      	mov	r0, r5
900128a0:	f000 fd98 	bl	900133d4 <__mcmp>
900128a4:	2800      	cmp	r0, #0
900128a6:	da64      	bge.n	90012972 <_dtoa_r+0x822>
900128a8:	2300      	movs	r3, #0
900128aa:	4629      	mov	r1, r5
900128ac:	220a      	movs	r2, #10
900128ae:	4630      	mov	r0, r6
900128b0:	f000 fb70 	bl	90012f94 <__multadd>
900128b4:	9b07      	ldr	r3, [sp, #28]
900128b6:	f10b 3bff 	add.w	fp, fp, #4294967295
900128ba:	4605      	mov	r5, r0
900128bc:	2b00      	cmp	r3, #0
900128be:	f000 8191 	beq.w	90012be4 <_dtoa_r+0xa94>
900128c2:	4639      	mov	r1, r7
900128c4:	2300      	movs	r3, #0
900128c6:	220a      	movs	r2, #10
900128c8:	4630      	mov	r0, r6
900128ca:	f000 fb63 	bl	90012f94 <__multadd>
900128ce:	f1ba 0f00 	cmp.w	sl, #0
900128d2:	4607      	mov	r7, r0
900128d4:	f300 808d 	bgt.w	900129f2 <_dtoa_r+0x8a2>
900128d8:	9b06      	ldr	r3, [sp, #24]
900128da:	2b02      	cmp	r3, #2
900128dc:	dc50      	bgt.n	90012980 <_dtoa_r+0x830>
900128de:	e088      	b.n	900129f2 <_dtoa_r+0x8a2>
900128e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900128e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
900128e6:	e751      	b.n	9001278c <_dtoa_r+0x63c>
900128e8:	f109 34ff 	add.w	r4, r9, #4294967295
900128ec:	42a3      	cmp	r3, r4
900128ee:	bfbf      	itttt	lt
900128f0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
900128f2:	1ae3      	sublt	r3, r4, r3
900128f4:	18d2      	addlt	r2, r2, r3
900128f6:	9209      	strlt	r2, [sp, #36]	; 0x24
900128f8:	bfb6      	itet	lt
900128fa:	4623      	movlt	r3, r4
900128fc:	1b1c      	subge	r4, r3, r4
900128fe:	2400      	movlt	r4, #0
90012900:	f1b9 0f00 	cmp.w	r9, #0
90012904:	bfb5      	itete	lt
90012906:	9a04      	ldrlt	r2, [sp, #16]
90012908:	f8dd 8010 	ldrge.w	r8, [sp, #16]
9001290c:	eba2 0809 	sublt.w	r8, r2, r9
90012910:	464a      	movge	r2, r9
90012912:	bfb8      	it	lt
90012914:	2200      	movlt	r2, #0
90012916:	e73c      	b.n	90012792 <_dtoa_r+0x642>
90012918:	f8dd 8010 	ldr.w	r8, [sp, #16]
9001291c:	9f07      	ldr	r7, [sp, #28]
9001291e:	461c      	mov	r4, r3
90012920:	e744      	b.n	900127ac <_dtoa_r+0x65c>
90012922:	461a      	mov	r2, r3
90012924:	e770      	b.n	90012808 <_dtoa_r+0x6b8>
90012926:	9b06      	ldr	r3, [sp, #24]
90012928:	2b01      	cmp	r3, #1
9001292a:	dc18      	bgt.n	9001295e <_dtoa_r+0x80e>
9001292c:	9b02      	ldr	r3, [sp, #8]
9001292e:	b9b3      	cbnz	r3, 9001295e <_dtoa_r+0x80e>
90012930:	9b03      	ldr	r3, [sp, #12]
90012932:	f3c3 0213 	ubfx	r2, r3, #0, #20
90012936:	b9a2      	cbnz	r2, 90012962 <_dtoa_r+0x812>
90012938:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
9001293c:	0d12      	lsrs	r2, r2, #20
9001293e:	0512      	lsls	r2, r2, #20
90012940:	b18a      	cbz	r2, 90012966 <_dtoa_r+0x816>
90012942:	9b04      	ldr	r3, [sp, #16]
90012944:	3301      	adds	r3, #1
90012946:	9304      	str	r3, [sp, #16]
90012948:	9b05      	ldr	r3, [sp, #20]
9001294a:	3301      	adds	r3, #1
9001294c:	9305      	str	r3, [sp, #20]
9001294e:	2301      	movs	r3, #1
90012950:	930a      	str	r3, [sp, #40]	; 0x28
90012952:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012954:	2b00      	cmp	r3, #0
90012956:	f47f af70 	bne.w	9001283a <_dtoa_r+0x6ea>
9001295a:	2001      	movs	r0, #1
9001295c:	e775      	b.n	9001284a <_dtoa_r+0x6fa>
9001295e:	2300      	movs	r3, #0
90012960:	e7f6      	b.n	90012950 <_dtoa_r+0x800>
90012962:	9b02      	ldr	r3, [sp, #8]
90012964:	e7f4      	b.n	90012950 <_dtoa_r+0x800>
90012966:	920a      	str	r2, [sp, #40]	; 0x28
90012968:	e7f3      	b.n	90012952 <_dtoa_r+0x802>
9001296a:	d082      	beq.n	90012872 <_dtoa_r+0x722>
9001296c:	4610      	mov	r0, r2
9001296e:	301c      	adds	r0, #28
90012970:	e778      	b.n	90012864 <_dtoa_r+0x714>
90012972:	f1b9 0f00 	cmp.w	r9, #0
90012976:	dc37      	bgt.n	900129e8 <_dtoa_r+0x898>
90012978:	9b06      	ldr	r3, [sp, #24]
9001297a:	2b02      	cmp	r3, #2
9001297c:	dd34      	ble.n	900129e8 <_dtoa_r+0x898>
9001297e:	46ca      	mov	sl, r9
90012980:	f1ba 0f00 	cmp.w	sl, #0
90012984:	d10d      	bne.n	900129a2 <_dtoa_r+0x852>
90012986:	4621      	mov	r1, r4
90012988:	4653      	mov	r3, sl
9001298a:	2205      	movs	r2, #5
9001298c:	4630      	mov	r0, r6
9001298e:	f000 fb01 	bl	90012f94 <__multadd>
90012992:	4601      	mov	r1, r0
90012994:	4604      	mov	r4, r0
90012996:	4628      	mov	r0, r5
90012998:	f000 fd1c 	bl	900133d4 <__mcmp>
9001299c:	2800      	cmp	r0, #0
9001299e:	f73f adeb 	bgt.w	90012578 <_dtoa_r+0x428>
900129a2:	9b08      	ldr	r3, [sp, #32]
900129a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
900129a8:	ea6f 0b03 	mvn.w	fp, r3
900129ac:	f04f 0900 	mov.w	r9, #0
900129b0:	4621      	mov	r1, r4
900129b2:	4630      	mov	r0, r6
900129b4:	f000 facc 	bl	90012f50 <_Bfree>
900129b8:	2f00      	cmp	r7, #0
900129ba:	f43f aea8 	beq.w	9001270e <_dtoa_r+0x5be>
900129be:	f1b9 0f00 	cmp.w	r9, #0
900129c2:	d005      	beq.n	900129d0 <_dtoa_r+0x880>
900129c4:	45b9      	cmp	r9, r7
900129c6:	d003      	beq.n	900129d0 <_dtoa_r+0x880>
900129c8:	4649      	mov	r1, r9
900129ca:	4630      	mov	r0, r6
900129cc:	f000 fac0 	bl	90012f50 <_Bfree>
900129d0:	4639      	mov	r1, r7
900129d2:	4630      	mov	r0, r6
900129d4:	f000 fabc 	bl	90012f50 <_Bfree>
900129d8:	e699      	b.n	9001270e <_dtoa_r+0x5be>
900129da:	2400      	movs	r4, #0
900129dc:	4627      	mov	r7, r4
900129de:	e7e0      	b.n	900129a2 <_dtoa_r+0x852>
900129e0:	46bb      	mov	fp, r7
900129e2:	4604      	mov	r4, r0
900129e4:	4607      	mov	r7, r0
900129e6:	e5c7      	b.n	90012578 <_dtoa_r+0x428>
900129e8:	9b07      	ldr	r3, [sp, #28]
900129ea:	46ca      	mov	sl, r9
900129ec:	2b00      	cmp	r3, #0
900129ee:	f000 8100 	beq.w	90012bf2 <_dtoa_r+0xaa2>
900129f2:	f1b8 0f00 	cmp.w	r8, #0
900129f6:	dd05      	ble.n	90012a04 <_dtoa_r+0x8b4>
900129f8:	4639      	mov	r1, r7
900129fa:	4642      	mov	r2, r8
900129fc:	4630      	mov	r0, r6
900129fe:	f000 fc79 	bl	900132f4 <__lshift>
90012a02:	4607      	mov	r7, r0
90012a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90012a06:	2b00      	cmp	r3, #0
90012a08:	d05d      	beq.n	90012ac6 <_dtoa_r+0x976>
90012a0a:	6879      	ldr	r1, [r7, #4]
90012a0c:	4630      	mov	r0, r6
90012a0e:	f000 fa5f 	bl	90012ed0 <_Balloc>
90012a12:	4680      	mov	r8, r0
90012a14:	b928      	cbnz	r0, 90012a22 <_dtoa_r+0x8d2>
90012a16:	4b82      	ldr	r3, [pc, #520]	; (90012c20 <_dtoa_r+0xad0>)
90012a18:	4602      	mov	r2, r0
90012a1a:	f240 21ea 	movw	r1, #746	; 0x2ea
90012a1e:	f7ff bbaf 	b.w	90012180 <_dtoa_r+0x30>
90012a22:	693a      	ldr	r2, [r7, #16]
90012a24:	3202      	adds	r2, #2
90012a26:	0092      	lsls	r2, r2, #2
90012a28:	f107 010c 	add.w	r1, r7, #12
90012a2c:	300c      	adds	r0, #12
90012a2e:	f7fe fb07 	bl	90011040 <memcpy>
90012a32:	2201      	movs	r2, #1
90012a34:	4641      	mov	r1, r8
90012a36:	4630      	mov	r0, r6
90012a38:	f000 fc5c 	bl	900132f4 <__lshift>
90012a3c:	9b01      	ldr	r3, [sp, #4]
90012a3e:	3301      	adds	r3, #1
90012a40:	9304      	str	r3, [sp, #16]
90012a42:	9b01      	ldr	r3, [sp, #4]
90012a44:	4453      	add	r3, sl
90012a46:	9308      	str	r3, [sp, #32]
90012a48:	9b02      	ldr	r3, [sp, #8]
90012a4a:	f003 0301 	and.w	r3, r3, #1
90012a4e:	46b9      	mov	r9, r7
90012a50:	9307      	str	r3, [sp, #28]
90012a52:	4607      	mov	r7, r0
90012a54:	9b04      	ldr	r3, [sp, #16]
90012a56:	4621      	mov	r1, r4
90012a58:	3b01      	subs	r3, #1
90012a5a:	4628      	mov	r0, r5
90012a5c:	9302      	str	r3, [sp, #8]
90012a5e:	f7ff fae9 	bl	90012034 <quorem>
90012a62:	4603      	mov	r3, r0
90012a64:	3330      	adds	r3, #48	; 0x30
90012a66:	9005      	str	r0, [sp, #20]
90012a68:	4649      	mov	r1, r9
90012a6a:	4628      	mov	r0, r5
90012a6c:	9309      	str	r3, [sp, #36]	; 0x24
90012a6e:	f000 fcb1 	bl	900133d4 <__mcmp>
90012a72:	463a      	mov	r2, r7
90012a74:	4682      	mov	sl, r0
90012a76:	4621      	mov	r1, r4
90012a78:	4630      	mov	r0, r6
90012a7a:	f000 fcc7 	bl	9001340c <__mdiff>
90012a7e:	68c2      	ldr	r2, [r0, #12]
90012a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012a82:	4680      	mov	r8, r0
90012a84:	bb0a      	cbnz	r2, 90012aca <_dtoa_r+0x97a>
90012a86:	4601      	mov	r1, r0
90012a88:	4628      	mov	r0, r5
90012a8a:	f000 fca3 	bl	900133d4 <__mcmp>
90012a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012a90:	4602      	mov	r2, r0
90012a92:	4641      	mov	r1, r8
90012a94:	4630      	mov	r0, r6
90012a96:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
90012a9a:	f000 fa59 	bl	90012f50 <_Bfree>
90012a9e:	9b06      	ldr	r3, [sp, #24]
90012aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90012aa2:	f8dd 8010 	ldr.w	r8, [sp, #16]
90012aa6:	ea43 0102 	orr.w	r1, r3, r2
90012aaa:	9b07      	ldr	r3, [sp, #28]
90012aac:	430b      	orrs	r3, r1
90012aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012ab0:	d10d      	bne.n	90012ace <_dtoa_r+0x97e>
90012ab2:	2b39      	cmp	r3, #57	; 0x39
90012ab4:	d029      	beq.n	90012b0a <_dtoa_r+0x9ba>
90012ab6:	f1ba 0f00 	cmp.w	sl, #0
90012aba:	dd01      	ble.n	90012ac0 <_dtoa_r+0x970>
90012abc:	9b05      	ldr	r3, [sp, #20]
90012abe:	3331      	adds	r3, #49	; 0x31
90012ac0:	9a02      	ldr	r2, [sp, #8]
90012ac2:	7013      	strb	r3, [r2, #0]
90012ac4:	e774      	b.n	900129b0 <_dtoa_r+0x860>
90012ac6:	4638      	mov	r0, r7
90012ac8:	e7b8      	b.n	90012a3c <_dtoa_r+0x8ec>
90012aca:	2201      	movs	r2, #1
90012acc:	e7e1      	b.n	90012a92 <_dtoa_r+0x942>
90012ace:	f1ba 0f00 	cmp.w	sl, #0
90012ad2:	db06      	blt.n	90012ae2 <_dtoa_r+0x992>
90012ad4:	9906      	ldr	r1, [sp, #24]
90012ad6:	ea41 0a0a 	orr.w	sl, r1, sl
90012ada:	9907      	ldr	r1, [sp, #28]
90012adc:	ea5a 0101 	orrs.w	r1, sl, r1
90012ae0:	d120      	bne.n	90012b24 <_dtoa_r+0x9d4>
90012ae2:	2a00      	cmp	r2, #0
90012ae4:	ddec      	ble.n	90012ac0 <_dtoa_r+0x970>
90012ae6:	4629      	mov	r1, r5
90012ae8:	2201      	movs	r2, #1
90012aea:	4630      	mov	r0, r6
90012aec:	9304      	str	r3, [sp, #16]
90012aee:	f000 fc01 	bl	900132f4 <__lshift>
90012af2:	4621      	mov	r1, r4
90012af4:	4605      	mov	r5, r0
90012af6:	f000 fc6d 	bl	900133d4 <__mcmp>
90012afa:	2800      	cmp	r0, #0
90012afc:	9b04      	ldr	r3, [sp, #16]
90012afe:	dc02      	bgt.n	90012b06 <_dtoa_r+0x9b6>
90012b00:	d1de      	bne.n	90012ac0 <_dtoa_r+0x970>
90012b02:	07da      	lsls	r2, r3, #31
90012b04:	d5dc      	bpl.n	90012ac0 <_dtoa_r+0x970>
90012b06:	2b39      	cmp	r3, #57	; 0x39
90012b08:	d1d8      	bne.n	90012abc <_dtoa_r+0x96c>
90012b0a:	9a02      	ldr	r2, [sp, #8]
90012b0c:	2339      	movs	r3, #57	; 0x39
90012b0e:	7013      	strb	r3, [r2, #0]
90012b10:	4643      	mov	r3, r8
90012b12:	4698      	mov	r8, r3
90012b14:	3b01      	subs	r3, #1
90012b16:	f818 2c01 	ldrb.w	r2, [r8, #-1]
90012b1a:	2a39      	cmp	r2, #57	; 0x39
90012b1c:	d051      	beq.n	90012bc2 <_dtoa_r+0xa72>
90012b1e:	3201      	adds	r2, #1
90012b20:	701a      	strb	r2, [r3, #0]
90012b22:	e745      	b.n	900129b0 <_dtoa_r+0x860>
90012b24:	2a00      	cmp	r2, #0
90012b26:	dd03      	ble.n	90012b30 <_dtoa_r+0x9e0>
90012b28:	2b39      	cmp	r3, #57	; 0x39
90012b2a:	d0ee      	beq.n	90012b0a <_dtoa_r+0x9ba>
90012b2c:	3301      	adds	r3, #1
90012b2e:	e7c7      	b.n	90012ac0 <_dtoa_r+0x970>
90012b30:	9a04      	ldr	r2, [sp, #16]
90012b32:	9908      	ldr	r1, [sp, #32]
90012b34:	f802 3c01 	strb.w	r3, [r2, #-1]
90012b38:	428a      	cmp	r2, r1
90012b3a:	d02b      	beq.n	90012b94 <_dtoa_r+0xa44>
90012b3c:	4629      	mov	r1, r5
90012b3e:	2300      	movs	r3, #0
90012b40:	220a      	movs	r2, #10
90012b42:	4630      	mov	r0, r6
90012b44:	f000 fa26 	bl	90012f94 <__multadd>
90012b48:	45b9      	cmp	r9, r7
90012b4a:	4605      	mov	r5, r0
90012b4c:	f04f 0300 	mov.w	r3, #0
90012b50:	f04f 020a 	mov.w	r2, #10
90012b54:	4649      	mov	r1, r9
90012b56:	4630      	mov	r0, r6
90012b58:	d107      	bne.n	90012b6a <_dtoa_r+0xa1a>
90012b5a:	f000 fa1b 	bl	90012f94 <__multadd>
90012b5e:	4681      	mov	r9, r0
90012b60:	4607      	mov	r7, r0
90012b62:	9b04      	ldr	r3, [sp, #16]
90012b64:	3301      	adds	r3, #1
90012b66:	9304      	str	r3, [sp, #16]
90012b68:	e774      	b.n	90012a54 <_dtoa_r+0x904>
90012b6a:	f000 fa13 	bl	90012f94 <__multadd>
90012b6e:	4639      	mov	r1, r7
90012b70:	4681      	mov	r9, r0
90012b72:	2300      	movs	r3, #0
90012b74:	220a      	movs	r2, #10
90012b76:	4630      	mov	r0, r6
90012b78:	f000 fa0c 	bl	90012f94 <__multadd>
90012b7c:	4607      	mov	r7, r0
90012b7e:	e7f0      	b.n	90012b62 <_dtoa_r+0xa12>
90012b80:	f1ba 0f00 	cmp.w	sl, #0
90012b84:	9a01      	ldr	r2, [sp, #4]
90012b86:	bfcc      	ite	gt
90012b88:	46d0      	movgt	r8, sl
90012b8a:	f04f 0801 	movle.w	r8, #1
90012b8e:	4490      	add	r8, r2
90012b90:	f04f 0900 	mov.w	r9, #0
90012b94:	4629      	mov	r1, r5
90012b96:	2201      	movs	r2, #1
90012b98:	4630      	mov	r0, r6
90012b9a:	9302      	str	r3, [sp, #8]
90012b9c:	f000 fbaa 	bl	900132f4 <__lshift>
90012ba0:	4621      	mov	r1, r4
90012ba2:	4605      	mov	r5, r0
90012ba4:	f000 fc16 	bl	900133d4 <__mcmp>
90012ba8:	2800      	cmp	r0, #0
90012baa:	dcb1      	bgt.n	90012b10 <_dtoa_r+0x9c0>
90012bac:	d102      	bne.n	90012bb4 <_dtoa_r+0xa64>
90012bae:	9b02      	ldr	r3, [sp, #8]
90012bb0:	07db      	lsls	r3, r3, #31
90012bb2:	d4ad      	bmi.n	90012b10 <_dtoa_r+0x9c0>
90012bb4:	4643      	mov	r3, r8
90012bb6:	4698      	mov	r8, r3
90012bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
90012bbc:	2a30      	cmp	r2, #48	; 0x30
90012bbe:	d0fa      	beq.n	90012bb6 <_dtoa_r+0xa66>
90012bc0:	e6f6      	b.n	900129b0 <_dtoa_r+0x860>
90012bc2:	9a01      	ldr	r2, [sp, #4]
90012bc4:	429a      	cmp	r2, r3
90012bc6:	d1a4      	bne.n	90012b12 <_dtoa_r+0x9c2>
90012bc8:	f10b 0b01 	add.w	fp, fp, #1
90012bcc:	2331      	movs	r3, #49	; 0x31
90012bce:	e778      	b.n	90012ac2 <_dtoa_r+0x972>
90012bd0:	4b14      	ldr	r3, [pc, #80]	; (90012c24 <_dtoa_r+0xad4>)
90012bd2:	f7ff bb27 	b.w	90012224 <_dtoa_r+0xd4>
90012bd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90012bd8:	2b00      	cmp	r3, #0
90012bda:	f47f ab03 	bne.w	900121e4 <_dtoa_r+0x94>
90012bde:	4b12      	ldr	r3, [pc, #72]	; (90012c28 <_dtoa_r+0xad8>)
90012be0:	f7ff bb20 	b.w	90012224 <_dtoa_r+0xd4>
90012be4:	f1ba 0f00 	cmp.w	sl, #0
90012be8:	dc03      	bgt.n	90012bf2 <_dtoa_r+0xaa2>
90012bea:	9b06      	ldr	r3, [sp, #24]
90012bec:	2b02      	cmp	r3, #2
90012bee:	f73f aec7 	bgt.w	90012980 <_dtoa_r+0x830>
90012bf2:	f8dd 8004 	ldr.w	r8, [sp, #4]
90012bf6:	4621      	mov	r1, r4
90012bf8:	4628      	mov	r0, r5
90012bfa:	f7ff fa1b 	bl	90012034 <quorem>
90012bfe:	f100 0330 	add.w	r3, r0, #48	; 0x30
90012c02:	f808 3b01 	strb.w	r3, [r8], #1
90012c06:	9a01      	ldr	r2, [sp, #4]
90012c08:	eba8 0202 	sub.w	r2, r8, r2
90012c0c:	4592      	cmp	sl, r2
90012c0e:	ddb7      	ble.n	90012b80 <_dtoa_r+0xa30>
90012c10:	4629      	mov	r1, r5
90012c12:	2300      	movs	r3, #0
90012c14:	220a      	movs	r2, #10
90012c16:	4630      	mov	r0, r6
90012c18:	f000 f9bc 	bl	90012f94 <__multadd>
90012c1c:	4605      	mov	r5, r0
90012c1e:	e7ea      	b.n	90012bf6 <_dtoa_r+0xaa6>
90012c20:	9001493f 	.word	0x9001493f
90012c24:	9001489c 	.word	0x9001489c
90012c28:	900148c0 	.word	0x900148c0

90012c2c <__sflush_r>:
90012c2c:	898a      	ldrh	r2, [r1, #12]
90012c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012c32:	4605      	mov	r5, r0
90012c34:	0710      	lsls	r0, r2, #28
90012c36:	460c      	mov	r4, r1
90012c38:	d458      	bmi.n	90012cec <__sflush_r+0xc0>
90012c3a:	684b      	ldr	r3, [r1, #4]
90012c3c:	2b00      	cmp	r3, #0
90012c3e:	dc05      	bgt.n	90012c4c <__sflush_r+0x20>
90012c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90012c42:	2b00      	cmp	r3, #0
90012c44:	dc02      	bgt.n	90012c4c <__sflush_r+0x20>
90012c46:	2000      	movs	r0, #0
90012c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90012c4e:	2e00      	cmp	r6, #0
90012c50:	d0f9      	beq.n	90012c46 <__sflush_r+0x1a>
90012c52:	2300      	movs	r3, #0
90012c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90012c58:	682f      	ldr	r7, [r5, #0]
90012c5a:	602b      	str	r3, [r5, #0]
90012c5c:	d032      	beq.n	90012cc4 <__sflush_r+0x98>
90012c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
90012c60:	89a3      	ldrh	r3, [r4, #12]
90012c62:	075a      	lsls	r2, r3, #29
90012c64:	d505      	bpl.n	90012c72 <__sflush_r+0x46>
90012c66:	6863      	ldr	r3, [r4, #4]
90012c68:	1ac0      	subs	r0, r0, r3
90012c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
90012c6c:	b10b      	cbz	r3, 90012c72 <__sflush_r+0x46>
90012c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
90012c70:	1ac0      	subs	r0, r0, r3
90012c72:	2300      	movs	r3, #0
90012c74:	4602      	mov	r2, r0
90012c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90012c78:	6a21      	ldr	r1, [r4, #32]
90012c7a:	4628      	mov	r0, r5
90012c7c:	47b0      	blx	r6
90012c7e:	1c43      	adds	r3, r0, #1
90012c80:	89a3      	ldrh	r3, [r4, #12]
90012c82:	d106      	bne.n	90012c92 <__sflush_r+0x66>
90012c84:	6829      	ldr	r1, [r5, #0]
90012c86:	291d      	cmp	r1, #29
90012c88:	d82c      	bhi.n	90012ce4 <__sflush_r+0xb8>
90012c8a:	4a2a      	ldr	r2, [pc, #168]	; (90012d34 <__sflush_r+0x108>)
90012c8c:	40ca      	lsrs	r2, r1
90012c8e:	07d6      	lsls	r6, r2, #31
90012c90:	d528      	bpl.n	90012ce4 <__sflush_r+0xb8>
90012c92:	2200      	movs	r2, #0
90012c94:	6062      	str	r2, [r4, #4]
90012c96:	04d9      	lsls	r1, r3, #19
90012c98:	6922      	ldr	r2, [r4, #16]
90012c9a:	6022      	str	r2, [r4, #0]
90012c9c:	d504      	bpl.n	90012ca8 <__sflush_r+0x7c>
90012c9e:	1c42      	adds	r2, r0, #1
90012ca0:	d101      	bne.n	90012ca6 <__sflush_r+0x7a>
90012ca2:	682b      	ldr	r3, [r5, #0]
90012ca4:	b903      	cbnz	r3, 90012ca8 <__sflush_r+0x7c>
90012ca6:	6560      	str	r0, [r4, #84]	; 0x54
90012ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
90012caa:	602f      	str	r7, [r5, #0]
90012cac:	2900      	cmp	r1, #0
90012cae:	d0ca      	beq.n	90012c46 <__sflush_r+0x1a>
90012cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
90012cb4:	4299      	cmp	r1, r3
90012cb6:	d002      	beq.n	90012cbe <__sflush_r+0x92>
90012cb8:	4628      	mov	r0, r5
90012cba:	f000 fca3 	bl	90013604 <_free_r>
90012cbe:	2000      	movs	r0, #0
90012cc0:	6360      	str	r0, [r4, #52]	; 0x34
90012cc2:	e7c1      	b.n	90012c48 <__sflush_r+0x1c>
90012cc4:	6a21      	ldr	r1, [r4, #32]
90012cc6:	2301      	movs	r3, #1
90012cc8:	4628      	mov	r0, r5
90012cca:	47b0      	blx	r6
90012ccc:	1c41      	adds	r1, r0, #1
90012cce:	d1c7      	bne.n	90012c60 <__sflush_r+0x34>
90012cd0:	682b      	ldr	r3, [r5, #0]
90012cd2:	2b00      	cmp	r3, #0
90012cd4:	d0c4      	beq.n	90012c60 <__sflush_r+0x34>
90012cd6:	2b1d      	cmp	r3, #29
90012cd8:	d001      	beq.n	90012cde <__sflush_r+0xb2>
90012cda:	2b16      	cmp	r3, #22
90012cdc:	d101      	bne.n	90012ce2 <__sflush_r+0xb6>
90012cde:	602f      	str	r7, [r5, #0]
90012ce0:	e7b1      	b.n	90012c46 <__sflush_r+0x1a>
90012ce2:	89a3      	ldrh	r3, [r4, #12]
90012ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90012ce8:	81a3      	strh	r3, [r4, #12]
90012cea:	e7ad      	b.n	90012c48 <__sflush_r+0x1c>
90012cec:	690f      	ldr	r7, [r1, #16]
90012cee:	2f00      	cmp	r7, #0
90012cf0:	d0a9      	beq.n	90012c46 <__sflush_r+0x1a>
90012cf2:	0793      	lsls	r3, r2, #30
90012cf4:	680e      	ldr	r6, [r1, #0]
90012cf6:	bf08      	it	eq
90012cf8:	694b      	ldreq	r3, [r1, #20]
90012cfa:	600f      	str	r7, [r1, #0]
90012cfc:	bf18      	it	ne
90012cfe:	2300      	movne	r3, #0
90012d00:	eba6 0807 	sub.w	r8, r6, r7
90012d04:	608b      	str	r3, [r1, #8]
90012d06:	f1b8 0f00 	cmp.w	r8, #0
90012d0a:	dd9c      	ble.n	90012c46 <__sflush_r+0x1a>
90012d0c:	6a21      	ldr	r1, [r4, #32]
90012d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90012d10:	4643      	mov	r3, r8
90012d12:	463a      	mov	r2, r7
90012d14:	4628      	mov	r0, r5
90012d16:	47b0      	blx	r6
90012d18:	2800      	cmp	r0, #0
90012d1a:	dc06      	bgt.n	90012d2a <__sflush_r+0xfe>
90012d1c:	89a3      	ldrh	r3, [r4, #12]
90012d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90012d22:	81a3      	strh	r3, [r4, #12]
90012d24:	f04f 30ff 	mov.w	r0, #4294967295
90012d28:	e78e      	b.n	90012c48 <__sflush_r+0x1c>
90012d2a:	4407      	add	r7, r0
90012d2c:	eba8 0800 	sub.w	r8, r8, r0
90012d30:	e7e9      	b.n	90012d06 <__sflush_r+0xda>
90012d32:	bf00      	nop
90012d34:	20400001 	.word	0x20400001

90012d38 <_fflush_r>:
90012d38:	b538      	push	{r3, r4, r5, lr}
90012d3a:	690b      	ldr	r3, [r1, #16]
90012d3c:	4605      	mov	r5, r0
90012d3e:	460c      	mov	r4, r1
90012d40:	b913      	cbnz	r3, 90012d48 <_fflush_r+0x10>
90012d42:	2500      	movs	r5, #0
90012d44:	4628      	mov	r0, r5
90012d46:	bd38      	pop	{r3, r4, r5, pc}
90012d48:	b118      	cbz	r0, 90012d52 <_fflush_r+0x1a>
90012d4a:	6983      	ldr	r3, [r0, #24]
90012d4c:	b90b      	cbnz	r3, 90012d52 <_fflush_r+0x1a>
90012d4e:	f7fe f8b1 	bl	90010eb4 <__sinit>
90012d52:	4b14      	ldr	r3, [pc, #80]	; (90012da4 <_fflush_r+0x6c>)
90012d54:	429c      	cmp	r4, r3
90012d56:	d11b      	bne.n	90012d90 <_fflush_r+0x58>
90012d58:	686c      	ldr	r4, [r5, #4]
90012d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90012d5e:	2b00      	cmp	r3, #0
90012d60:	d0ef      	beq.n	90012d42 <_fflush_r+0xa>
90012d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
90012d64:	07d0      	lsls	r0, r2, #31
90012d66:	d404      	bmi.n	90012d72 <_fflush_r+0x3a>
90012d68:	0599      	lsls	r1, r3, #22
90012d6a:	d402      	bmi.n	90012d72 <_fflush_r+0x3a>
90012d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
90012d6e:	f7fe f964 	bl	9001103a <__retarget_lock_acquire_recursive>
90012d72:	4628      	mov	r0, r5
90012d74:	4621      	mov	r1, r4
90012d76:	f7ff ff59 	bl	90012c2c <__sflush_r>
90012d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
90012d7c:	07da      	lsls	r2, r3, #31
90012d7e:	4605      	mov	r5, r0
90012d80:	d4e0      	bmi.n	90012d44 <_fflush_r+0xc>
90012d82:	89a3      	ldrh	r3, [r4, #12]
90012d84:	059b      	lsls	r3, r3, #22
90012d86:	d4dd      	bmi.n	90012d44 <_fflush_r+0xc>
90012d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
90012d8a:	f7fe f958 	bl	9001103e <__retarget_lock_release_recursive>
90012d8e:	e7d9      	b.n	90012d44 <_fflush_r+0xc>
90012d90:	4b05      	ldr	r3, [pc, #20]	; (90012da8 <_fflush_r+0x70>)
90012d92:	429c      	cmp	r4, r3
90012d94:	d101      	bne.n	90012d9a <_fflush_r+0x62>
90012d96:	68ac      	ldr	r4, [r5, #8]
90012d98:	e7df      	b.n	90012d5a <_fflush_r+0x22>
90012d9a:	4b04      	ldr	r3, [pc, #16]	; (90012dac <_fflush_r+0x74>)
90012d9c:	429c      	cmp	r4, r3
90012d9e:	bf08      	it	eq
90012da0:	68ec      	ldreq	r4, [r5, #12]
90012da2:	e7da      	b.n	90012d5a <_fflush_r+0x22>
90012da4:	90014848 	.word	0x90014848
90012da8:	90014868 	.word	0x90014868
90012dac:	90014828 	.word	0x90014828

90012db0 <_localeconv_r>:
90012db0:	4800      	ldr	r0, [pc, #0]	; (90012db4 <_localeconv_r+0x4>)
90012db2:	4770      	bx	lr
90012db4:	24000174 	.word	0x24000174

90012db8 <_lseek_r>:
90012db8:	b538      	push	{r3, r4, r5, lr}
90012dba:	4d07      	ldr	r5, [pc, #28]	; (90012dd8 <_lseek_r+0x20>)
90012dbc:	4604      	mov	r4, r0
90012dbe:	4608      	mov	r0, r1
90012dc0:	4611      	mov	r1, r2
90012dc2:	2200      	movs	r2, #0
90012dc4:	602a      	str	r2, [r5, #0]
90012dc6:	461a      	mov	r2, r3
90012dc8:	f7ee fd14 	bl	900017f4 <_lseek>
90012dcc:	1c43      	adds	r3, r0, #1
90012dce:	d102      	bne.n	90012dd6 <_lseek_r+0x1e>
90012dd0:	682b      	ldr	r3, [r5, #0]
90012dd2:	b103      	cbz	r3, 90012dd6 <_lseek_r+0x1e>
90012dd4:	6023      	str	r3, [r4, #0]
90012dd6:	bd38      	pop	{r3, r4, r5, pc}
90012dd8:	240129e8 	.word	0x240129e8

90012ddc <__swhatbuf_r>:
90012ddc:	b570      	push	{r4, r5, r6, lr}
90012dde:	460e      	mov	r6, r1
90012de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90012de4:	2900      	cmp	r1, #0
90012de6:	b096      	sub	sp, #88	; 0x58
90012de8:	4614      	mov	r4, r2
90012dea:	461d      	mov	r5, r3
90012dec:	da08      	bge.n	90012e00 <__swhatbuf_r+0x24>
90012dee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90012df2:	2200      	movs	r2, #0
90012df4:	602a      	str	r2, [r5, #0]
90012df6:	061a      	lsls	r2, r3, #24
90012df8:	d410      	bmi.n	90012e1c <__swhatbuf_r+0x40>
90012dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
90012dfe:	e00e      	b.n	90012e1e <__swhatbuf_r+0x42>
90012e00:	466a      	mov	r2, sp
90012e02:	f000 ff43 	bl	90013c8c <_fstat_r>
90012e06:	2800      	cmp	r0, #0
90012e08:	dbf1      	blt.n	90012dee <__swhatbuf_r+0x12>
90012e0a:	9a01      	ldr	r2, [sp, #4]
90012e0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90012e10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90012e14:	425a      	negs	r2, r3
90012e16:	415a      	adcs	r2, r3
90012e18:	602a      	str	r2, [r5, #0]
90012e1a:	e7ee      	b.n	90012dfa <__swhatbuf_r+0x1e>
90012e1c:	2340      	movs	r3, #64	; 0x40
90012e1e:	2000      	movs	r0, #0
90012e20:	6023      	str	r3, [r4, #0]
90012e22:	b016      	add	sp, #88	; 0x58
90012e24:	bd70      	pop	{r4, r5, r6, pc}
	...

90012e28 <__smakebuf_r>:
90012e28:	898b      	ldrh	r3, [r1, #12]
90012e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
90012e2c:	079d      	lsls	r5, r3, #30
90012e2e:	4606      	mov	r6, r0
90012e30:	460c      	mov	r4, r1
90012e32:	d507      	bpl.n	90012e44 <__smakebuf_r+0x1c>
90012e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
90012e38:	6023      	str	r3, [r4, #0]
90012e3a:	6123      	str	r3, [r4, #16]
90012e3c:	2301      	movs	r3, #1
90012e3e:	6163      	str	r3, [r4, #20]
90012e40:	b002      	add	sp, #8
90012e42:	bd70      	pop	{r4, r5, r6, pc}
90012e44:	ab01      	add	r3, sp, #4
90012e46:	466a      	mov	r2, sp
90012e48:	f7ff ffc8 	bl	90012ddc <__swhatbuf_r>
90012e4c:	9900      	ldr	r1, [sp, #0]
90012e4e:	4605      	mov	r5, r0
90012e50:	4630      	mov	r0, r6
90012e52:	f7fe f945 	bl	900110e0 <_malloc_r>
90012e56:	b948      	cbnz	r0, 90012e6c <__smakebuf_r+0x44>
90012e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90012e5c:	059a      	lsls	r2, r3, #22
90012e5e:	d4ef      	bmi.n	90012e40 <__smakebuf_r+0x18>
90012e60:	f023 0303 	bic.w	r3, r3, #3
90012e64:	f043 0302 	orr.w	r3, r3, #2
90012e68:	81a3      	strh	r3, [r4, #12]
90012e6a:	e7e3      	b.n	90012e34 <__smakebuf_r+0xc>
90012e6c:	4b0d      	ldr	r3, [pc, #52]	; (90012ea4 <__smakebuf_r+0x7c>)
90012e6e:	62b3      	str	r3, [r6, #40]	; 0x28
90012e70:	89a3      	ldrh	r3, [r4, #12]
90012e72:	6020      	str	r0, [r4, #0]
90012e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90012e78:	81a3      	strh	r3, [r4, #12]
90012e7a:	9b00      	ldr	r3, [sp, #0]
90012e7c:	6163      	str	r3, [r4, #20]
90012e7e:	9b01      	ldr	r3, [sp, #4]
90012e80:	6120      	str	r0, [r4, #16]
90012e82:	b15b      	cbz	r3, 90012e9c <__smakebuf_r+0x74>
90012e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90012e88:	4630      	mov	r0, r6
90012e8a:	f000 ff11 	bl	90013cb0 <_isatty_r>
90012e8e:	b128      	cbz	r0, 90012e9c <__smakebuf_r+0x74>
90012e90:	89a3      	ldrh	r3, [r4, #12]
90012e92:	f023 0303 	bic.w	r3, r3, #3
90012e96:	f043 0301 	orr.w	r3, r3, #1
90012e9a:	81a3      	strh	r3, [r4, #12]
90012e9c:	89a0      	ldrh	r0, [r4, #12]
90012e9e:	4305      	orrs	r5, r0
90012ea0:	81a5      	strh	r5, [r4, #12]
90012ea2:	e7cd      	b.n	90012e40 <__smakebuf_r+0x18>
90012ea4:	90010e4d 	.word	0x90010e4d

90012ea8 <malloc>:
90012ea8:	4b02      	ldr	r3, [pc, #8]	; (90012eb4 <malloc+0xc>)
90012eaa:	4601      	mov	r1, r0
90012eac:	6818      	ldr	r0, [r3, #0]
90012eae:	f7fe b917 	b.w	900110e0 <_malloc_r>
90012eb2:	bf00      	nop
90012eb4:	2400001c 	.word	0x2400001c

90012eb8 <__malloc_lock>:
90012eb8:	4801      	ldr	r0, [pc, #4]	; (90012ec0 <__malloc_lock+0x8>)
90012eba:	f7fe b8be 	b.w	9001103a <__retarget_lock_acquire_recursive>
90012ebe:	bf00      	nop
90012ec0:	240129dd 	.word	0x240129dd

90012ec4 <__malloc_unlock>:
90012ec4:	4801      	ldr	r0, [pc, #4]	; (90012ecc <__malloc_unlock+0x8>)
90012ec6:	f7fe b8ba 	b.w	9001103e <__retarget_lock_release_recursive>
90012eca:	bf00      	nop
90012ecc:	240129dd 	.word	0x240129dd

90012ed0 <_Balloc>:
90012ed0:	b570      	push	{r4, r5, r6, lr}
90012ed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
90012ed4:	4604      	mov	r4, r0
90012ed6:	460d      	mov	r5, r1
90012ed8:	b976      	cbnz	r6, 90012ef8 <_Balloc+0x28>
90012eda:	2010      	movs	r0, #16
90012edc:	f7ff ffe4 	bl	90012ea8 <malloc>
90012ee0:	4602      	mov	r2, r0
90012ee2:	6260      	str	r0, [r4, #36]	; 0x24
90012ee4:	b920      	cbnz	r0, 90012ef0 <_Balloc+0x20>
90012ee6:	4b18      	ldr	r3, [pc, #96]	; (90012f48 <_Balloc+0x78>)
90012ee8:	4818      	ldr	r0, [pc, #96]	; (90012f4c <_Balloc+0x7c>)
90012eea:	2166      	movs	r1, #102	; 0x66
90012eec:	f000 fe9e 	bl	90013c2c <__assert_func>
90012ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
90012ef4:	6006      	str	r6, [r0, #0]
90012ef6:	60c6      	str	r6, [r0, #12]
90012ef8:	6a66      	ldr	r6, [r4, #36]	; 0x24
90012efa:	68f3      	ldr	r3, [r6, #12]
90012efc:	b183      	cbz	r3, 90012f20 <_Balloc+0x50>
90012efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
90012f00:	68db      	ldr	r3, [r3, #12]
90012f02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
90012f06:	b9b8      	cbnz	r0, 90012f38 <_Balloc+0x68>
90012f08:	2101      	movs	r1, #1
90012f0a:	fa01 f605 	lsl.w	r6, r1, r5
90012f0e:	1d72      	adds	r2, r6, #5
90012f10:	0092      	lsls	r2, r2, #2
90012f12:	4620      	mov	r0, r4
90012f14:	f000 fb60 	bl	900135d8 <_calloc_r>
90012f18:	b160      	cbz	r0, 90012f34 <_Balloc+0x64>
90012f1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
90012f1e:	e00e      	b.n	90012f3e <_Balloc+0x6e>
90012f20:	2221      	movs	r2, #33	; 0x21
90012f22:	2104      	movs	r1, #4
90012f24:	4620      	mov	r0, r4
90012f26:	f000 fb57 	bl	900135d8 <_calloc_r>
90012f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
90012f2c:	60f0      	str	r0, [r6, #12]
90012f2e:	68db      	ldr	r3, [r3, #12]
90012f30:	2b00      	cmp	r3, #0
90012f32:	d1e4      	bne.n	90012efe <_Balloc+0x2e>
90012f34:	2000      	movs	r0, #0
90012f36:	bd70      	pop	{r4, r5, r6, pc}
90012f38:	6802      	ldr	r2, [r0, #0]
90012f3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
90012f3e:	2300      	movs	r3, #0
90012f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
90012f44:	e7f7      	b.n	90012f36 <_Balloc+0x66>
90012f46:	bf00      	nop
90012f48:	900148cd 	.word	0x900148cd
90012f4c:	90014950 	.word	0x90014950

90012f50 <_Bfree>:
90012f50:	b570      	push	{r4, r5, r6, lr}
90012f52:	6a46      	ldr	r6, [r0, #36]	; 0x24
90012f54:	4605      	mov	r5, r0
90012f56:	460c      	mov	r4, r1
90012f58:	b976      	cbnz	r6, 90012f78 <_Bfree+0x28>
90012f5a:	2010      	movs	r0, #16
90012f5c:	f7ff ffa4 	bl	90012ea8 <malloc>
90012f60:	4602      	mov	r2, r0
90012f62:	6268      	str	r0, [r5, #36]	; 0x24
90012f64:	b920      	cbnz	r0, 90012f70 <_Bfree+0x20>
90012f66:	4b09      	ldr	r3, [pc, #36]	; (90012f8c <_Bfree+0x3c>)
90012f68:	4809      	ldr	r0, [pc, #36]	; (90012f90 <_Bfree+0x40>)
90012f6a:	218a      	movs	r1, #138	; 0x8a
90012f6c:	f000 fe5e 	bl	90013c2c <__assert_func>
90012f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
90012f74:	6006      	str	r6, [r0, #0]
90012f76:	60c6      	str	r6, [r0, #12]
90012f78:	b13c      	cbz	r4, 90012f8a <_Bfree+0x3a>
90012f7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
90012f7c:	6862      	ldr	r2, [r4, #4]
90012f7e:	68db      	ldr	r3, [r3, #12]
90012f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90012f84:	6021      	str	r1, [r4, #0]
90012f86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
90012f8a:	bd70      	pop	{r4, r5, r6, pc}
90012f8c:	900148cd 	.word	0x900148cd
90012f90:	90014950 	.word	0x90014950

90012f94 <__multadd>:
90012f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012f98:	690d      	ldr	r5, [r1, #16]
90012f9a:	4607      	mov	r7, r0
90012f9c:	460c      	mov	r4, r1
90012f9e:	461e      	mov	r6, r3
90012fa0:	f101 0c14 	add.w	ip, r1, #20
90012fa4:	2000      	movs	r0, #0
90012fa6:	f8dc 3000 	ldr.w	r3, [ip]
90012faa:	b299      	uxth	r1, r3
90012fac:	fb02 6101 	mla	r1, r2, r1, r6
90012fb0:	0c1e      	lsrs	r6, r3, #16
90012fb2:	0c0b      	lsrs	r3, r1, #16
90012fb4:	fb02 3306 	mla	r3, r2, r6, r3
90012fb8:	b289      	uxth	r1, r1
90012fba:	3001      	adds	r0, #1
90012fbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
90012fc0:	4285      	cmp	r5, r0
90012fc2:	f84c 1b04 	str.w	r1, [ip], #4
90012fc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
90012fca:	dcec      	bgt.n	90012fa6 <__multadd+0x12>
90012fcc:	b30e      	cbz	r6, 90013012 <__multadd+0x7e>
90012fce:	68a3      	ldr	r3, [r4, #8]
90012fd0:	42ab      	cmp	r3, r5
90012fd2:	dc19      	bgt.n	90013008 <__multadd+0x74>
90012fd4:	6861      	ldr	r1, [r4, #4]
90012fd6:	4638      	mov	r0, r7
90012fd8:	3101      	adds	r1, #1
90012fda:	f7ff ff79 	bl	90012ed0 <_Balloc>
90012fde:	4680      	mov	r8, r0
90012fe0:	b928      	cbnz	r0, 90012fee <__multadd+0x5a>
90012fe2:	4602      	mov	r2, r0
90012fe4:	4b0c      	ldr	r3, [pc, #48]	; (90013018 <__multadd+0x84>)
90012fe6:	480d      	ldr	r0, [pc, #52]	; (9001301c <__multadd+0x88>)
90012fe8:	21b5      	movs	r1, #181	; 0xb5
90012fea:	f000 fe1f 	bl	90013c2c <__assert_func>
90012fee:	6922      	ldr	r2, [r4, #16]
90012ff0:	3202      	adds	r2, #2
90012ff2:	f104 010c 	add.w	r1, r4, #12
90012ff6:	0092      	lsls	r2, r2, #2
90012ff8:	300c      	adds	r0, #12
90012ffa:	f7fe f821 	bl	90011040 <memcpy>
90012ffe:	4621      	mov	r1, r4
90013000:	4638      	mov	r0, r7
90013002:	f7ff ffa5 	bl	90012f50 <_Bfree>
90013006:	4644      	mov	r4, r8
90013008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
9001300c:	3501      	adds	r5, #1
9001300e:	615e      	str	r6, [r3, #20]
90013010:	6125      	str	r5, [r4, #16]
90013012:	4620      	mov	r0, r4
90013014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013018:	9001493f 	.word	0x9001493f
9001301c:	90014950 	.word	0x90014950

90013020 <__hi0bits>:
90013020:	0c03      	lsrs	r3, r0, #16
90013022:	041b      	lsls	r3, r3, #16
90013024:	b9d3      	cbnz	r3, 9001305c <__hi0bits+0x3c>
90013026:	0400      	lsls	r0, r0, #16
90013028:	2310      	movs	r3, #16
9001302a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
9001302e:	bf04      	itt	eq
90013030:	0200      	lsleq	r0, r0, #8
90013032:	3308      	addeq	r3, #8
90013034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
90013038:	bf04      	itt	eq
9001303a:	0100      	lsleq	r0, r0, #4
9001303c:	3304      	addeq	r3, #4
9001303e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
90013042:	bf04      	itt	eq
90013044:	0080      	lsleq	r0, r0, #2
90013046:	3302      	addeq	r3, #2
90013048:	2800      	cmp	r0, #0
9001304a:	db05      	blt.n	90013058 <__hi0bits+0x38>
9001304c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
90013050:	f103 0301 	add.w	r3, r3, #1
90013054:	bf08      	it	eq
90013056:	2320      	moveq	r3, #32
90013058:	4618      	mov	r0, r3
9001305a:	4770      	bx	lr
9001305c:	2300      	movs	r3, #0
9001305e:	e7e4      	b.n	9001302a <__hi0bits+0xa>

90013060 <__lo0bits>:
90013060:	6803      	ldr	r3, [r0, #0]
90013062:	f013 0207 	ands.w	r2, r3, #7
90013066:	4601      	mov	r1, r0
90013068:	d00b      	beq.n	90013082 <__lo0bits+0x22>
9001306a:	07da      	lsls	r2, r3, #31
9001306c:	d423      	bmi.n	900130b6 <__lo0bits+0x56>
9001306e:	0798      	lsls	r0, r3, #30
90013070:	bf49      	itett	mi
90013072:	085b      	lsrmi	r3, r3, #1
90013074:	089b      	lsrpl	r3, r3, #2
90013076:	2001      	movmi	r0, #1
90013078:	600b      	strmi	r3, [r1, #0]
9001307a:	bf5c      	itt	pl
9001307c:	600b      	strpl	r3, [r1, #0]
9001307e:	2002      	movpl	r0, #2
90013080:	4770      	bx	lr
90013082:	b298      	uxth	r0, r3
90013084:	b9a8      	cbnz	r0, 900130b2 <__lo0bits+0x52>
90013086:	0c1b      	lsrs	r3, r3, #16
90013088:	2010      	movs	r0, #16
9001308a:	b2da      	uxtb	r2, r3
9001308c:	b90a      	cbnz	r2, 90013092 <__lo0bits+0x32>
9001308e:	3008      	adds	r0, #8
90013090:	0a1b      	lsrs	r3, r3, #8
90013092:	071a      	lsls	r2, r3, #28
90013094:	bf04      	itt	eq
90013096:	091b      	lsreq	r3, r3, #4
90013098:	3004      	addeq	r0, #4
9001309a:	079a      	lsls	r2, r3, #30
9001309c:	bf04      	itt	eq
9001309e:	089b      	lsreq	r3, r3, #2
900130a0:	3002      	addeq	r0, #2
900130a2:	07da      	lsls	r2, r3, #31
900130a4:	d403      	bmi.n	900130ae <__lo0bits+0x4e>
900130a6:	085b      	lsrs	r3, r3, #1
900130a8:	f100 0001 	add.w	r0, r0, #1
900130ac:	d005      	beq.n	900130ba <__lo0bits+0x5a>
900130ae:	600b      	str	r3, [r1, #0]
900130b0:	4770      	bx	lr
900130b2:	4610      	mov	r0, r2
900130b4:	e7e9      	b.n	9001308a <__lo0bits+0x2a>
900130b6:	2000      	movs	r0, #0
900130b8:	4770      	bx	lr
900130ba:	2020      	movs	r0, #32
900130bc:	4770      	bx	lr
	...

900130c0 <__i2b>:
900130c0:	b510      	push	{r4, lr}
900130c2:	460c      	mov	r4, r1
900130c4:	2101      	movs	r1, #1
900130c6:	f7ff ff03 	bl	90012ed0 <_Balloc>
900130ca:	4602      	mov	r2, r0
900130cc:	b928      	cbnz	r0, 900130da <__i2b+0x1a>
900130ce:	4b05      	ldr	r3, [pc, #20]	; (900130e4 <__i2b+0x24>)
900130d0:	4805      	ldr	r0, [pc, #20]	; (900130e8 <__i2b+0x28>)
900130d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
900130d6:	f000 fda9 	bl	90013c2c <__assert_func>
900130da:	2301      	movs	r3, #1
900130dc:	6144      	str	r4, [r0, #20]
900130de:	6103      	str	r3, [r0, #16]
900130e0:	bd10      	pop	{r4, pc}
900130e2:	bf00      	nop
900130e4:	9001493f 	.word	0x9001493f
900130e8:	90014950 	.word	0x90014950

900130ec <__multiply>:
900130ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900130f0:	4691      	mov	r9, r2
900130f2:	690a      	ldr	r2, [r1, #16]
900130f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
900130f8:	429a      	cmp	r2, r3
900130fa:	bfb8      	it	lt
900130fc:	460b      	movlt	r3, r1
900130fe:	460c      	mov	r4, r1
90013100:	bfbc      	itt	lt
90013102:	464c      	movlt	r4, r9
90013104:	4699      	movlt	r9, r3
90013106:	6927      	ldr	r7, [r4, #16]
90013108:	f8d9 a010 	ldr.w	sl, [r9, #16]
9001310c:	68a3      	ldr	r3, [r4, #8]
9001310e:	6861      	ldr	r1, [r4, #4]
90013110:	eb07 060a 	add.w	r6, r7, sl
90013114:	42b3      	cmp	r3, r6
90013116:	b085      	sub	sp, #20
90013118:	bfb8      	it	lt
9001311a:	3101      	addlt	r1, #1
9001311c:	f7ff fed8 	bl	90012ed0 <_Balloc>
90013120:	b930      	cbnz	r0, 90013130 <__multiply+0x44>
90013122:	4602      	mov	r2, r0
90013124:	4b44      	ldr	r3, [pc, #272]	; (90013238 <__multiply+0x14c>)
90013126:	4845      	ldr	r0, [pc, #276]	; (9001323c <__multiply+0x150>)
90013128:	f240 115d 	movw	r1, #349	; 0x15d
9001312c:	f000 fd7e 	bl	90013c2c <__assert_func>
90013130:	f100 0514 	add.w	r5, r0, #20
90013134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
90013138:	462b      	mov	r3, r5
9001313a:	2200      	movs	r2, #0
9001313c:	4543      	cmp	r3, r8
9001313e:	d321      	bcc.n	90013184 <__multiply+0x98>
90013140:	f104 0314 	add.w	r3, r4, #20
90013144:	eb03 0787 	add.w	r7, r3, r7, lsl #2
90013148:	f109 0314 	add.w	r3, r9, #20
9001314c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
90013150:	9202      	str	r2, [sp, #8]
90013152:	1b3a      	subs	r2, r7, r4
90013154:	3a15      	subs	r2, #21
90013156:	f022 0203 	bic.w	r2, r2, #3
9001315a:	3204      	adds	r2, #4
9001315c:	f104 0115 	add.w	r1, r4, #21
90013160:	428f      	cmp	r7, r1
90013162:	bf38      	it	cc
90013164:	2204      	movcc	r2, #4
90013166:	9201      	str	r2, [sp, #4]
90013168:	9a02      	ldr	r2, [sp, #8]
9001316a:	9303      	str	r3, [sp, #12]
9001316c:	429a      	cmp	r2, r3
9001316e:	d80c      	bhi.n	9001318a <__multiply+0x9e>
90013170:	2e00      	cmp	r6, #0
90013172:	dd03      	ble.n	9001317c <__multiply+0x90>
90013174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
90013178:	2b00      	cmp	r3, #0
9001317a:	d05a      	beq.n	90013232 <__multiply+0x146>
9001317c:	6106      	str	r6, [r0, #16]
9001317e:	b005      	add	sp, #20
90013180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013184:	f843 2b04 	str.w	r2, [r3], #4
90013188:	e7d8      	b.n	9001313c <__multiply+0x50>
9001318a:	f8b3 a000 	ldrh.w	sl, [r3]
9001318e:	f1ba 0f00 	cmp.w	sl, #0
90013192:	d024      	beq.n	900131de <__multiply+0xf2>
90013194:	f104 0e14 	add.w	lr, r4, #20
90013198:	46a9      	mov	r9, r5
9001319a:	f04f 0c00 	mov.w	ip, #0
9001319e:	f85e 2b04 	ldr.w	r2, [lr], #4
900131a2:	f8d9 1000 	ldr.w	r1, [r9]
900131a6:	fa1f fb82 	uxth.w	fp, r2
900131aa:	b289      	uxth	r1, r1
900131ac:	fb0a 110b 	mla	r1, sl, fp, r1
900131b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
900131b4:	f8d9 2000 	ldr.w	r2, [r9]
900131b8:	4461      	add	r1, ip
900131ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
900131be:	fb0a c20b 	mla	r2, sl, fp, ip
900131c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
900131c6:	b289      	uxth	r1, r1
900131c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
900131cc:	4577      	cmp	r7, lr
900131ce:	f849 1b04 	str.w	r1, [r9], #4
900131d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
900131d6:	d8e2      	bhi.n	9001319e <__multiply+0xb2>
900131d8:	9a01      	ldr	r2, [sp, #4]
900131da:	f845 c002 	str.w	ip, [r5, r2]
900131de:	9a03      	ldr	r2, [sp, #12]
900131e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
900131e4:	3304      	adds	r3, #4
900131e6:	f1b9 0f00 	cmp.w	r9, #0
900131ea:	d020      	beq.n	9001322e <__multiply+0x142>
900131ec:	6829      	ldr	r1, [r5, #0]
900131ee:	f104 0c14 	add.w	ip, r4, #20
900131f2:	46ae      	mov	lr, r5
900131f4:	f04f 0a00 	mov.w	sl, #0
900131f8:	f8bc b000 	ldrh.w	fp, [ip]
900131fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
90013200:	fb09 220b 	mla	r2, r9, fp, r2
90013204:	4492      	add	sl, r2
90013206:	b289      	uxth	r1, r1
90013208:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
9001320c:	f84e 1b04 	str.w	r1, [lr], #4
90013210:	f85c 2b04 	ldr.w	r2, [ip], #4
90013214:	f8be 1000 	ldrh.w	r1, [lr]
90013218:	0c12      	lsrs	r2, r2, #16
9001321a:	fb09 1102 	mla	r1, r9, r2, r1
9001321e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
90013222:	4567      	cmp	r7, ip
90013224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
90013228:	d8e6      	bhi.n	900131f8 <__multiply+0x10c>
9001322a:	9a01      	ldr	r2, [sp, #4]
9001322c:	50a9      	str	r1, [r5, r2]
9001322e:	3504      	adds	r5, #4
90013230:	e79a      	b.n	90013168 <__multiply+0x7c>
90013232:	3e01      	subs	r6, #1
90013234:	e79c      	b.n	90013170 <__multiply+0x84>
90013236:	bf00      	nop
90013238:	9001493f 	.word	0x9001493f
9001323c:	90014950 	.word	0x90014950

90013240 <__pow5mult>:
90013240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90013244:	4615      	mov	r5, r2
90013246:	f012 0203 	ands.w	r2, r2, #3
9001324a:	4606      	mov	r6, r0
9001324c:	460f      	mov	r7, r1
9001324e:	d007      	beq.n	90013260 <__pow5mult+0x20>
90013250:	4c25      	ldr	r4, [pc, #148]	; (900132e8 <__pow5mult+0xa8>)
90013252:	3a01      	subs	r2, #1
90013254:	2300      	movs	r3, #0
90013256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
9001325a:	f7ff fe9b 	bl	90012f94 <__multadd>
9001325e:	4607      	mov	r7, r0
90013260:	10ad      	asrs	r5, r5, #2
90013262:	d03d      	beq.n	900132e0 <__pow5mult+0xa0>
90013264:	6a74      	ldr	r4, [r6, #36]	; 0x24
90013266:	b97c      	cbnz	r4, 90013288 <__pow5mult+0x48>
90013268:	2010      	movs	r0, #16
9001326a:	f7ff fe1d 	bl	90012ea8 <malloc>
9001326e:	4602      	mov	r2, r0
90013270:	6270      	str	r0, [r6, #36]	; 0x24
90013272:	b928      	cbnz	r0, 90013280 <__pow5mult+0x40>
90013274:	4b1d      	ldr	r3, [pc, #116]	; (900132ec <__pow5mult+0xac>)
90013276:	481e      	ldr	r0, [pc, #120]	; (900132f0 <__pow5mult+0xb0>)
90013278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
9001327c:	f000 fcd6 	bl	90013c2c <__assert_func>
90013280:	e9c0 4401 	strd	r4, r4, [r0, #4]
90013284:	6004      	str	r4, [r0, #0]
90013286:	60c4      	str	r4, [r0, #12]
90013288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
9001328c:	f8d8 4008 	ldr.w	r4, [r8, #8]
90013290:	b94c      	cbnz	r4, 900132a6 <__pow5mult+0x66>
90013292:	f240 2171 	movw	r1, #625	; 0x271
90013296:	4630      	mov	r0, r6
90013298:	f7ff ff12 	bl	900130c0 <__i2b>
9001329c:	2300      	movs	r3, #0
9001329e:	f8c8 0008 	str.w	r0, [r8, #8]
900132a2:	4604      	mov	r4, r0
900132a4:	6003      	str	r3, [r0, #0]
900132a6:	f04f 0900 	mov.w	r9, #0
900132aa:	07eb      	lsls	r3, r5, #31
900132ac:	d50a      	bpl.n	900132c4 <__pow5mult+0x84>
900132ae:	4639      	mov	r1, r7
900132b0:	4622      	mov	r2, r4
900132b2:	4630      	mov	r0, r6
900132b4:	f7ff ff1a 	bl	900130ec <__multiply>
900132b8:	4639      	mov	r1, r7
900132ba:	4680      	mov	r8, r0
900132bc:	4630      	mov	r0, r6
900132be:	f7ff fe47 	bl	90012f50 <_Bfree>
900132c2:	4647      	mov	r7, r8
900132c4:	106d      	asrs	r5, r5, #1
900132c6:	d00b      	beq.n	900132e0 <__pow5mult+0xa0>
900132c8:	6820      	ldr	r0, [r4, #0]
900132ca:	b938      	cbnz	r0, 900132dc <__pow5mult+0x9c>
900132cc:	4622      	mov	r2, r4
900132ce:	4621      	mov	r1, r4
900132d0:	4630      	mov	r0, r6
900132d2:	f7ff ff0b 	bl	900130ec <__multiply>
900132d6:	6020      	str	r0, [r4, #0]
900132d8:	f8c0 9000 	str.w	r9, [r0]
900132dc:	4604      	mov	r4, r0
900132de:	e7e4      	b.n	900132aa <__pow5mult+0x6a>
900132e0:	4638      	mov	r0, r7
900132e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900132e6:	bf00      	nop
900132e8:	90014aa0 	.word	0x90014aa0
900132ec:	900148cd 	.word	0x900148cd
900132f0:	90014950 	.word	0x90014950

900132f4 <__lshift>:
900132f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900132f8:	460c      	mov	r4, r1
900132fa:	6849      	ldr	r1, [r1, #4]
900132fc:	6923      	ldr	r3, [r4, #16]
900132fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
90013302:	68a3      	ldr	r3, [r4, #8]
90013304:	4607      	mov	r7, r0
90013306:	4691      	mov	r9, r2
90013308:	ea4f 1a62 	mov.w	sl, r2, asr #5
9001330c:	f108 0601 	add.w	r6, r8, #1
90013310:	42b3      	cmp	r3, r6
90013312:	db0b      	blt.n	9001332c <__lshift+0x38>
90013314:	4638      	mov	r0, r7
90013316:	f7ff fddb 	bl	90012ed0 <_Balloc>
9001331a:	4605      	mov	r5, r0
9001331c:	b948      	cbnz	r0, 90013332 <__lshift+0x3e>
9001331e:	4602      	mov	r2, r0
90013320:	4b2a      	ldr	r3, [pc, #168]	; (900133cc <__lshift+0xd8>)
90013322:	482b      	ldr	r0, [pc, #172]	; (900133d0 <__lshift+0xdc>)
90013324:	f240 11d9 	movw	r1, #473	; 0x1d9
90013328:	f000 fc80 	bl	90013c2c <__assert_func>
9001332c:	3101      	adds	r1, #1
9001332e:	005b      	lsls	r3, r3, #1
90013330:	e7ee      	b.n	90013310 <__lshift+0x1c>
90013332:	2300      	movs	r3, #0
90013334:	f100 0114 	add.w	r1, r0, #20
90013338:	f100 0210 	add.w	r2, r0, #16
9001333c:	4618      	mov	r0, r3
9001333e:	4553      	cmp	r3, sl
90013340:	db37      	blt.n	900133b2 <__lshift+0xbe>
90013342:	6920      	ldr	r0, [r4, #16]
90013344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
90013348:	f104 0314 	add.w	r3, r4, #20
9001334c:	f019 091f 	ands.w	r9, r9, #31
90013350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
90013354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90013358:	d02f      	beq.n	900133ba <__lshift+0xc6>
9001335a:	f1c9 0e20 	rsb	lr, r9, #32
9001335e:	468a      	mov	sl, r1
90013360:	f04f 0c00 	mov.w	ip, #0
90013364:	681a      	ldr	r2, [r3, #0]
90013366:	fa02 f209 	lsl.w	r2, r2, r9
9001336a:	ea42 020c 	orr.w	r2, r2, ip
9001336e:	f84a 2b04 	str.w	r2, [sl], #4
90013372:	f853 2b04 	ldr.w	r2, [r3], #4
90013376:	4298      	cmp	r0, r3
90013378:	fa22 fc0e 	lsr.w	ip, r2, lr
9001337c:	d8f2      	bhi.n	90013364 <__lshift+0x70>
9001337e:	1b03      	subs	r3, r0, r4
90013380:	3b15      	subs	r3, #21
90013382:	f023 0303 	bic.w	r3, r3, #3
90013386:	3304      	adds	r3, #4
90013388:	f104 0215 	add.w	r2, r4, #21
9001338c:	4290      	cmp	r0, r2
9001338e:	bf38      	it	cc
90013390:	2304      	movcc	r3, #4
90013392:	f841 c003 	str.w	ip, [r1, r3]
90013396:	f1bc 0f00 	cmp.w	ip, #0
9001339a:	d001      	beq.n	900133a0 <__lshift+0xac>
9001339c:	f108 0602 	add.w	r6, r8, #2
900133a0:	3e01      	subs	r6, #1
900133a2:	4638      	mov	r0, r7
900133a4:	612e      	str	r6, [r5, #16]
900133a6:	4621      	mov	r1, r4
900133a8:	f7ff fdd2 	bl	90012f50 <_Bfree>
900133ac:	4628      	mov	r0, r5
900133ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900133b2:	f842 0f04 	str.w	r0, [r2, #4]!
900133b6:	3301      	adds	r3, #1
900133b8:	e7c1      	b.n	9001333e <__lshift+0x4a>
900133ba:	3904      	subs	r1, #4
900133bc:	f853 2b04 	ldr.w	r2, [r3], #4
900133c0:	f841 2f04 	str.w	r2, [r1, #4]!
900133c4:	4298      	cmp	r0, r3
900133c6:	d8f9      	bhi.n	900133bc <__lshift+0xc8>
900133c8:	e7ea      	b.n	900133a0 <__lshift+0xac>
900133ca:	bf00      	nop
900133cc:	9001493f 	.word	0x9001493f
900133d0:	90014950 	.word	0x90014950

900133d4 <__mcmp>:
900133d4:	b530      	push	{r4, r5, lr}
900133d6:	6902      	ldr	r2, [r0, #16]
900133d8:	690c      	ldr	r4, [r1, #16]
900133da:	1b12      	subs	r2, r2, r4
900133dc:	d10e      	bne.n	900133fc <__mcmp+0x28>
900133de:	f100 0314 	add.w	r3, r0, #20
900133e2:	3114      	adds	r1, #20
900133e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
900133e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
900133ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
900133f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
900133f4:	42a5      	cmp	r5, r4
900133f6:	d003      	beq.n	90013400 <__mcmp+0x2c>
900133f8:	d305      	bcc.n	90013406 <__mcmp+0x32>
900133fa:	2201      	movs	r2, #1
900133fc:	4610      	mov	r0, r2
900133fe:	bd30      	pop	{r4, r5, pc}
90013400:	4283      	cmp	r3, r0
90013402:	d3f3      	bcc.n	900133ec <__mcmp+0x18>
90013404:	e7fa      	b.n	900133fc <__mcmp+0x28>
90013406:	f04f 32ff 	mov.w	r2, #4294967295
9001340a:	e7f7      	b.n	900133fc <__mcmp+0x28>

9001340c <__mdiff>:
9001340c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013410:	460c      	mov	r4, r1
90013412:	4606      	mov	r6, r0
90013414:	4611      	mov	r1, r2
90013416:	4620      	mov	r0, r4
90013418:	4690      	mov	r8, r2
9001341a:	f7ff ffdb 	bl	900133d4 <__mcmp>
9001341e:	1e05      	subs	r5, r0, #0
90013420:	d110      	bne.n	90013444 <__mdiff+0x38>
90013422:	4629      	mov	r1, r5
90013424:	4630      	mov	r0, r6
90013426:	f7ff fd53 	bl	90012ed0 <_Balloc>
9001342a:	b930      	cbnz	r0, 9001343a <__mdiff+0x2e>
9001342c:	4b3a      	ldr	r3, [pc, #232]	; (90013518 <__mdiff+0x10c>)
9001342e:	4602      	mov	r2, r0
90013430:	f240 2132 	movw	r1, #562	; 0x232
90013434:	4839      	ldr	r0, [pc, #228]	; (9001351c <__mdiff+0x110>)
90013436:	f000 fbf9 	bl	90013c2c <__assert_func>
9001343a:	2301      	movs	r3, #1
9001343c:	e9c0 3504 	strd	r3, r5, [r0, #16]
90013440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013444:	bfa4      	itt	ge
90013446:	4643      	movge	r3, r8
90013448:	46a0      	movge	r8, r4
9001344a:	4630      	mov	r0, r6
9001344c:	f8d8 1004 	ldr.w	r1, [r8, #4]
90013450:	bfa6      	itte	ge
90013452:	461c      	movge	r4, r3
90013454:	2500      	movge	r5, #0
90013456:	2501      	movlt	r5, #1
90013458:	f7ff fd3a 	bl	90012ed0 <_Balloc>
9001345c:	b920      	cbnz	r0, 90013468 <__mdiff+0x5c>
9001345e:	4b2e      	ldr	r3, [pc, #184]	; (90013518 <__mdiff+0x10c>)
90013460:	4602      	mov	r2, r0
90013462:	f44f 7110 	mov.w	r1, #576	; 0x240
90013466:	e7e5      	b.n	90013434 <__mdiff+0x28>
90013468:	f8d8 7010 	ldr.w	r7, [r8, #16]
9001346c:	6926      	ldr	r6, [r4, #16]
9001346e:	60c5      	str	r5, [r0, #12]
90013470:	f104 0914 	add.w	r9, r4, #20
90013474:	f108 0514 	add.w	r5, r8, #20
90013478:	f100 0e14 	add.w	lr, r0, #20
9001347c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
90013480:	eb09 0686 	add.w	r6, r9, r6, lsl #2
90013484:	f108 0210 	add.w	r2, r8, #16
90013488:	46f2      	mov	sl, lr
9001348a:	2100      	movs	r1, #0
9001348c:	f859 3b04 	ldr.w	r3, [r9], #4
90013490:	f852 bf04 	ldr.w	fp, [r2, #4]!
90013494:	fa1f f883 	uxth.w	r8, r3
90013498:	fa11 f18b 	uxtah	r1, r1, fp
9001349c:	0c1b      	lsrs	r3, r3, #16
9001349e:	eba1 0808 	sub.w	r8, r1, r8
900134a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
900134a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
900134aa:	fa1f f888 	uxth.w	r8, r8
900134ae:	1419      	asrs	r1, r3, #16
900134b0:	454e      	cmp	r6, r9
900134b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
900134b6:	f84a 3b04 	str.w	r3, [sl], #4
900134ba:	d8e7      	bhi.n	9001348c <__mdiff+0x80>
900134bc:	1b33      	subs	r3, r6, r4
900134be:	3b15      	subs	r3, #21
900134c0:	f023 0303 	bic.w	r3, r3, #3
900134c4:	3304      	adds	r3, #4
900134c6:	3415      	adds	r4, #21
900134c8:	42a6      	cmp	r6, r4
900134ca:	bf38      	it	cc
900134cc:	2304      	movcc	r3, #4
900134ce:	441d      	add	r5, r3
900134d0:	4473      	add	r3, lr
900134d2:	469e      	mov	lr, r3
900134d4:	462e      	mov	r6, r5
900134d6:	4566      	cmp	r6, ip
900134d8:	d30e      	bcc.n	900134f8 <__mdiff+0xec>
900134da:	f10c 0203 	add.w	r2, ip, #3
900134de:	1b52      	subs	r2, r2, r5
900134e0:	f022 0203 	bic.w	r2, r2, #3
900134e4:	3d03      	subs	r5, #3
900134e6:	45ac      	cmp	ip, r5
900134e8:	bf38      	it	cc
900134ea:	2200      	movcc	r2, #0
900134ec:	441a      	add	r2, r3
900134ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
900134f2:	b17b      	cbz	r3, 90013514 <__mdiff+0x108>
900134f4:	6107      	str	r7, [r0, #16]
900134f6:	e7a3      	b.n	90013440 <__mdiff+0x34>
900134f8:	f856 8b04 	ldr.w	r8, [r6], #4
900134fc:	fa11 f288 	uxtah	r2, r1, r8
90013500:	1414      	asrs	r4, r2, #16
90013502:	eb04 4418 	add.w	r4, r4, r8, lsr #16
90013506:	b292      	uxth	r2, r2
90013508:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
9001350c:	f84e 2b04 	str.w	r2, [lr], #4
90013510:	1421      	asrs	r1, r4, #16
90013512:	e7e0      	b.n	900134d6 <__mdiff+0xca>
90013514:	3f01      	subs	r7, #1
90013516:	e7ea      	b.n	900134ee <__mdiff+0xe2>
90013518:	9001493f 	.word	0x9001493f
9001351c:	90014950 	.word	0x90014950

90013520 <__d2b>:
90013520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90013524:	4689      	mov	r9, r1
90013526:	2101      	movs	r1, #1
90013528:	ec57 6b10 	vmov	r6, r7, d0
9001352c:	4690      	mov	r8, r2
9001352e:	f7ff fccf 	bl	90012ed0 <_Balloc>
90013532:	4604      	mov	r4, r0
90013534:	b930      	cbnz	r0, 90013544 <__d2b+0x24>
90013536:	4602      	mov	r2, r0
90013538:	4b25      	ldr	r3, [pc, #148]	; (900135d0 <__d2b+0xb0>)
9001353a:	4826      	ldr	r0, [pc, #152]	; (900135d4 <__d2b+0xb4>)
9001353c:	f240 310a 	movw	r1, #778	; 0x30a
90013540:	f000 fb74 	bl	90013c2c <__assert_func>
90013544:	f3c7 550a 	ubfx	r5, r7, #20, #11
90013548:	f3c7 0313 	ubfx	r3, r7, #0, #20
9001354c:	bb35      	cbnz	r5, 9001359c <__d2b+0x7c>
9001354e:	2e00      	cmp	r6, #0
90013550:	9301      	str	r3, [sp, #4]
90013552:	d028      	beq.n	900135a6 <__d2b+0x86>
90013554:	4668      	mov	r0, sp
90013556:	9600      	str	r6, [sp, #0]
90013558:	f7ff fd82 	bl	90013060 <__lo0bits>
9001355c:	9900      	ldr	r1, [sp, #0]
9001355e:	b300      	cbz	r0, 900135a2 <__d2b+0x82>
90013560:	9a01      	ldr	r2, [sp, #4]
90013562:	f1c0 0320 	rsb	r3, r0, #32
90013566:	fa02 f303 	lsl.w	r3, r2, r3
9001356a:	430b      	orrs	r3, r1
9001356c:	40c2      	lsrs	r2, r0
9001356e:	6163      	str	r3, [r4, #20]
90013570:	9201      	str	r2, [sp, #4]
90013572:	9b01      	ldr	r3, [sp, #4]
90013574:	61a3      	str	r3, [r4, #24]
90013576:	2b00      	cmp	r3, #0
90013578:	bf14      	ite	ne
9001357a:	2202      	movne	r2, #2
9001357c:	2201      	moveq	r2, #1
9001357e:	6122      	str	r2, [r4, #16]
90013580:	b1d5      	cbz	r5, 900135b8 <__d2b+0x98>
90013582:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
90013586:	4405      	add	r5, r0
90013588:	f8c9 5000 	str.w	r5, [r9]
9001358c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
90013590:	f8c8 0000 	str.w	r0, [r8]
90013594:	4620      	mov	r0, r4
90013596:	b003      	add	sp, #12
90013598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001359c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
900135a0:	e7d5      	b.n	9001354e <__d2b+0x2e>
900135a2:	6161      	str	r1, [r4, #20]
900135a4:	e7e5      	b.n	90013572 <__d2b+0x52>
900135a6:	a801      	add	r0, sp, #4
900135a8:	f7ff fd5a 	bl	90013060 <__lo0bits>
900135ac:	9b01      	ldr	r3, [sp, #4]
900135ae:	6163      	str	r3, [r4, #20]
900135b0:	2201      	movs	r2, #1
900135b2:	6122      	str	r2, [r4, #16]
900135b4:	3020      	adds	r0, #32
900135b6:	e7e3      	b.n	90013580 <__d2b+0x60>
900135b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
900135bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
900135c0:	f8c9 0000 	str.w	r0, [r9]
900135c4:	6918      	ldr	r0, [r3, #16]
900135c6:	f7ff fd2b 	bl	90013020 <__hi0bits>
900135ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
900135ce:	e7df      	b.n	90013590 <__d2b+0x70>
900135d0:	9001493f 	.word	0x9001493f
900135d4:	90014950 	.word	0x90014950

900135d8 <_calloc_r>:
900135d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
900135da:	fba1 2402 	umull	r2, r4, r1, r2
900135de:	b94c      	cbnz	r4, 900135f4 <_calloc_r+0x1c>
900135e0:	4611      	mov	r1, r2
900135e2:	9201      	str	r2, [sp, #4]
900135e4:	f7fd fd7c 	bl	900110e0 <_malloc_r>
900135e8:	9a01      	ldr	r2, [sp, #4]
900135ea:	4605      	mov	r5, r0
900135ec:	b930      	cbnz	r0, 900135fc <_calloc_r+0x24>
900135ee:	4628      	mov	r0, r5
900135f0:	b003      	add	sp, #12
900135f2:	bd30      	pop	{r4, r5, pc}
900135f4:	220c      	movs	r2, #12
900135f6:	6002      	str	r2, [r0, #0]
900135f8:	2500      	movs	r5, #0
900135fa:	e7f8      	b.n	900135ee <_calloc_r+0x16>
900135fc:	4621      	mov	r1, r4
900135fe:	f7fd fd47 	bl	90011090 <memset>
90013602:	e7f4      	b.n	900135ee <_calloc_r+0x16>

90013604 <_free_r>:
90013604:	b537      	push	{r0, r1, r2, r4, r5, lr}
90013606:	2900      	cmp	r1, #0
90013608:	d044      	beq.n	90013694 <_free_r+0x90>
9001360a:	f851 3c04 	ldr.w	r3, [r1, #-4]
9001360e:	9001      	str	r0, [sp, #4]
90013610:	2b00      	cmp	r3, #0
90013612:	f1a1 0404 	sub.w	r4, r1, #4
90013616:	bfb8      	it	lt
90013618:	18e4      	addlt	r4, r4, r3
9001361a:	f7ff fc4d 	bl	90012eb8 <__malloc_lock>
9001361e:	4a1e      	ldr	r2, [pc, #120]	; (90013698 <_free_r+0x94>)
90013620:	9801      	ldr	r0, [sp, #4]
90013622:	6813      	ldr	r3, [r2, #0]
90013624:	b933      	cbnz	r3, 90013634 <_free_r+0x30>
90013626:	6063      	str	r3, [r4, #4]
90013628:	6014      	str	r4, [r2, #0]
9001362a:	b003      	add	sp, #12
9001362c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90013630:	f7ff bc48 	b.w	90012ec4 <__malloc_unlock>
90013634:	42a3      	cmp	r3, r4
90013636:	d908      	bls.n	9001364a <_free_r+0x46>
90013638:	6825      	ldr	r5, [r4, #0]
9001363a:	1961      	adds	r1, r4, r5
9001363c:	428b      	cmp	r3, r1
9001363e:	bf01      	itttt	eq
90013640:	6819      	ldreq	r1, [r3, #0]
90013642:	685b      	ldreq	r3, [r3, #4]
90013644:	1949      	addeq	r1, r1, r5
90013646:	6021      	streq	r1, [r4, #0]
90013648:	e7ed      	b.n	90013626 <_free_r+0x22>
9001364a:	461a      	mov	r2, r3
9001364c:	685b      	ldr	r3, [r3, #4]
9001364e:	b10b      	cbz	r3, 90013654 <_free_r+0x50>
90013650:	42a3      	cmp	r3, r4
90013652:	d9fa      	bls.n	9001364a <_free_r+0x46>
90013654:	6811      	ldr	r1, [r2, #0]
90013656:	1855      	adds	r5, r2, r1
90013658:	42a5      	cmp	r5, r4
9001365a:	d10b      	bne.n	90013674 <_free_r+0x70>
9001365c:	6824      	ldr	r4, [r4, #0]
9001365e:	4421      	add	r1, r4
90013660:	1854      	adds	r4, r2, r1
90013662:	42a3      	cmp	r3, r4
90013664:	6011      	str	r1, [r2, #0]
90013666:	d1e0      	bne.n	9001362a <_free_r+0x26>
90013668:	681c      	ldr	r4, [r3, #0]
9001366a:	685b      	ldr	r3, [r3, #4]
9001366c:	6053      	str	r3, [r2, #4]
9001366e:	4421      	add	r1, r4
90013670:	6011      	str	r1, [r2, #0]
90013672:	e7da      	b.n	9001362a <_free_r+0x26>
90013674:	d902      	bls.n	9001367c <_free_r+0x78>
90013676:	230c      	movs	r3, #12
90013678:	6003      	str	r3, [r0, #0]
9001367a:	e7d6      	b.n	9001362a <_free_r+0x26>
9001367c:	6825      	ldr	r5, [r4, #0]
9001367e:	1961      	adds	r1, r4, r5
90013680:	428b      	cmp	r3, r1
90013682:	bf04      	itt	eq
90013684:	6819      	ldreq	r1, [r3, #0]
90013686:	685b      	ldreq	r3, [r3, #4]
90013688:	6063      	str	r3, [r4, #4]
9001368a:	bf04      	itt	eq
9001368c:	1949      	addeq	r1, r1, r5
9001368e:	6021      	streq	r1, [r4, #0]
90013690:	6054      	str	r4, [r2, #4]
90013692:	e7ca      	b.n	9001362a <_free_r+0x26>
90013694:	b003      	add	sp, #12
90013696:	bd30      	pop	{r4, r5, pc}
90013698:	240129e0 	.word	0x240129e0

9001369c <__ssputs_r>:
9001369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900136a0:	688e      	ldr	r6, [r1, #8]
900136a2:	429e      	cmp	r6, r3
900136a4:	4682      	mov	sl, r0
900136a6:	460c      	mov	r4, r1
900136a8:	4690      	mov	r8, r2
900136aa:	461f      	mov	r7, r3
900136ac:	d838      	bhi.n	90013720 <__ssputs_r+0x84>
900136ae:	898a      	ldrh	r2, [r1, #12]
900136b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
900136b4:	d032      	beq.n	9001371c <__ssputs_r+0x80>
900136b6:	6825      	ldr	r5, [r4, #0]
900136b8:	6909      	ldr	r1, [r1, #16]
900136ba:	eba5 0901 	sub.w	r9, r5, r1
900136be:	6965      	ldr	r5, [r4, #20]
900136c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
900136c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
900136c8:	3301      	adds	r3, #1
900136ca:	444b      	add	r3, r9
900136cc:	106d      	asrs	r5, r5, #1
900136ce:	429d      	cmp	r5, r3
900136d0:	bf38      	it	cc
900136d2:	461d      	movcc	r5, r3
900136d4:	0553      	lsls	r3, r2, #21
900136d6:	d531      	bpl.n	9001373c <__ssputs_r+0xa0>
900136d8:	4629      	mov	r1, r5
900136da:	f7fd fd01 	bl	900110e0 <_malloc_r>
900136de:	4606      	mov	r6, r0
900136e0:	b950      	cbnz	r0, 900136f8 <__ssputs_r+0x5c>
900136e2:	230c      	movs	r3, #12
900136e4:	f8ca 3000 	str.w	r3, [sl]
900136e8:	89a3      	ldrh	r3, [r4, #12]
900136ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900136ee:	81a3      	strh	r3, [r4, #12]
900136f0:	f04f 30ff 	mov.w	r0, #4294967295
900136f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900136f8:	6921      	ldr	r1, [r4, #16]
900136fa:	464a      	mov	r2, r9
900136fc:	f7fd fca0 	bl	90011040 <memcpy>
90013700:	89a3      	ldrh	r3, [r4, #12]
90013702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
90013706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9001370a:	81a3      	strh	r3, [r4, #12]
9001370c:	6126      	str	r6, [r4, #16]
9001370e:	6165      	str	r5, [r4, #20]
90013710:	444e      	add	r6, r9
90013712:	eba5 0509 	sub.w	r5, r5, r9
90013716:	6026      	str	r6, [r4, #0]
90013718:	60a5      	str	r5, [r4, #8]
9001371a:	463e      	mov	r6, r7
9001371c:	42be      	cmp	r6, r7
9001371e:	d900      	bls.n	90013722 <__ssputs_r+0x86>
90013720:	463e      	mov	r6, r7
90013722:	6820      	ldr	r0, [r4, #0]
90013724:	4632      	mov	r2, r6
90013726:	4641      	mov	r1, r8
90013728:	f7fd fc98 	bl	9001105c <memmove>
9001372c:	68a3      	ldr	r3, [r4, #8]
9001372e:	1b9b      	subs	r3, r3, r6
90013730:	60a3      	str	r3, [r4, #8]
90013732:	6823      	ldr	r3, [r4, #0]
90013734:	4433      	add	r3, r6
90013736:	6023      	str	r3, [r4, #0]
90013738:	2000      	movs	r0, #0
9001373a:	e7db      	b.n	900136f4 <__ssputs_r+0x58>
9001373c:	462a      	mov	r2, r5
9001373e:	f000 fad9 	bl	90013cf4 <_realloc_r>
90013742:	4606      	mov	r6, r0
90013744:	2800      	cmp	r0, #0
90013746:	d1e1      	bne.n	9001370c <__ssputs_r+0x70>
90013748:	6921      	ldr	r1, [r4, #16]
9001374a:	4650      	mov	r0, sl
9001374c:	f7ff ff5a 	bl	90013604 <_free_r>
90013750:	e7c7      	b.n	900136e2 <__ssputs_r+0x46>
	...

90013754 <_svfiprintf_r>:
90013754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013758:	4698      	mov	r8, r3
9001375a:	898b      	ldrh	r3, [r1, #12]
9001375c:	061b      	lsls	r3, r3, #24
9001375e:	b09d      	sub	sp, #116	; 0x74
90013760:	4607      	mov	r7, r0
90013762:	460d      	mov	r5, r1
90013764:	4614      	mov	r4, r2
90013766:	d50e      	bpl.n	90013786 <_svfiprintf_r+0x32>
90013768:	690b      	ldr	r3, [r1, #16]
9001376a:	b963      	cbnz	r3, 90013786 <_svfiprintf_r+0x32>
9001376c:	2140      	movs	r1, #64	; 0x40
9001376e:	f7fd fcb7 	bl	900110e0 <_malloc_r>
90013772:	6028      	str	r0, [r5, #0]
90013774:	6128      	str	r0, [r5, #16]
90013776:	b920      	cbnz	r0, 90013782 <_svfiprintf_r+0x2e>
90013778:	230c      	movs	r3, #12
9001377a:	603b      	str	r3, [r7, #0]
9001377c:	f04f 30ff 	mov.w	r0, #4294967295
90013780:	e0d1      	b.n	90013926 <_svfiprintf_r+0x1d2>
90013782:	2340      	movs	r3, #64	; 0x40
90013784:	616b      	str	r3, [r5, #20]
90013786:	2300      	movs	r3, #0
90013788:	9309      	str	r3, [sp, #36]	; 0x24
9001378a:	2320      	movs	r3, #32
9001378c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90013790:	f8cd 800c 	str.w	r8, [sp, #12]
90013794:	2330      	movs	r3, #48	; 0x30
90013796:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 90013940 <_svfiprintf_r+0x1ec>
9001379a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9001379e:	f04f 0901 	mov.w	r9, #1
900137a2:	4623      	mov	r3, r4
900137a4:	469a      	mov	sl, r3
900137a6:	f813 2b01 	ldrb.w	r2, [r3], #1
900137aa:	b10a      	cbz	r2, 900137b0 <_svfiprintf_r+0x5c>
900137ac:	2a25      	cmp	r2, #37	; 0x25
900137ae:	d1f9      	bne.n	900137a4 <_svfiprintf_r+0x50>
900137b0:	ebba 0b04 	subs.w	fp, sl, r4
900137b4:	d00b      	beq.n	900137ce <_svfiprintf_r+0x7a>
900137b6:	465b      	mov	r3, fp
900137b8:	4622      	mov	r2, r4
900137ba:	4629      	mov	r1, r5
900137bc:	4638      	mov	r0, r7
900137be:	f7ff ff6d 	bl	9001369c <__ssputs_r>
900137c2:	3001      	adds	r0, #1
900137c4:	f000 80aa 	beq.w	9001391c <_svfiprintf_r+0x1c8>
900137c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
900137ca:	445a      	add	r2, fp
900137cc:	9209      	str	r2, [sp, #36]	; 0x24
900137ce:	f89a 3000 	ldrb.w	r3, [sl]
900137d2:	2b00      	cmp	r3, #0
900137d4:	f000 80a2 	beq.w	9001391c <_svfiprintf_r+0x1c8>
900137d8:	2300      	movs	r3, #0
900137da:	f04f 32ff 	mov.w	r2, #4294967295
900137de:	e9cd 2305 	strd	r2, r3, [sp, #20]
900137e2:	f10a 0a01 	add.w	sl, sl, #1
900137e6:	9304      	str	r3, [sp, #16]
900137e8:	9307      	str	r3, [sp, #28]
900137ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
900137ee:	931a      	str	r3, [sp, #104]	; 0x68
900137f0:	4654      	mov	r4, sl
900137f2:	2205      	movs	r2, #5
900137f4:	f814 1b01 	ldrb.w	r1, [r4], #1
900137f8:	4851      	ldr	r0, [pc, #324]	; (90013940 <_svfiprintf_r+0x1ec>)
900137fa:	f7ec fd89 	bl	90000310 <memchr>
900137fe:	9a04      	ldr	r2, [sp, #16]
90013800:	b9d8      	cbnz	r0, 9001383a <_svfiprintf_r+0xe6>
90013802:	06d0      	lsls	r0, r2, #27
90013804:	bf44      	itt	mi
90013806:	2320      	movmi	r3, #32
90013808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9001380c:	0711      	lsls	r1, r2, #28
9001380e:	bf44      	itt	mi
90013810:	232b      	movmi	r3, #43	; 0x2b
90013812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90013816:	f89a 3000 	ldrb.w	r3, [sl]
9001381a:	2b2a      	cmp	r3, #42	; 0x2a
9001381c:	d015      	beq.n	9001384a <_svfiprintf_r+0xf6>
9001381e:	9a07      	ldr	r2, [sp, #28]
90013820:	4654      	mov	r4, sl
90013822:	2000      	movs	r0, #0
90013824:	f04f 0c0a 	mov.w	ip, #10
90013828:	4621      	mov	r1, r4
9001382a:	f811 3b01 	ldrb.w	r3, [r1], #1
9001382e:	3b30      	subs	r3, #48	; 0x30
90013830:	2b09      	cmp	r3, #9
90013832:	d94e      	bls.n	900138d2 <_svfiprintf_r+0x17e>
90013834:	b1b0      	cbz	r0, 90013864 <_svfiprintf_r+0x110>
90013836:	9207      	str	r2, [sp, #28]
90013838:	e014      	b.n	90013864 <_svfiprintf_r+0x110>
9001383a:	eba0 0308 	sub.w	r3, r0, r8
9001383e:	fa09 f303 	lsl.w	r3, r9, r3
90013842:	4313      	orrs	r3, r2
90013844:	9304      	str	r3, [sp, #16]
90013846:	46a2      	mov	sl, r4
90013848:	e7d2      	b.n	900137f0 <_svfiprintf_r+0x9c>
9001384a:	9b03      	ldr	r3, [sp, #12]
9001384c:	1d19      	adds	r1, r3, #4
9001384e:	681b      	ldr	r3, [r3, #0]
90013850:	9103      	str	r1, [sp, #12]
90013852:	2b00      	cmp	r3, #0
90013854:	bfbb      	ittet	lt
90013856:	425b      	neglt	r3, r3
90013858:	f042 0202 	orrlt.w	r2, r2, #2
9001385c:	9307      	strge	r3, [sp, #28]
9001385e:	9307      	strlt	r3, [sp, #28]
90013860:	bfb8      	it	lt
90013862:	9204      	strlt	r2, [sp, #16]
90013864:	7823      	ldrb	r3, [r4, #0]
90013866:	2b2e      	cmp	r3, #46	; 0x2e
90013868:	d10c      	bne.n	90013884 <_svfiprintf_r+0x130>
9001386a:	7863      	ldrb	r3, [r4, #1]
9001386c:	2b2a      	cmp	r3, #42	; 0x2a
9001386e:	d135      	bne.n	900138dc <_svfiprintf_r+0x188>
90013870:	9b03      	ldr	r3, [sp, #12]
90013872:	1d1a      	adds	r2, r3, #4
90013874:	681b      	ldr	r3, [r3, #0]
90013876:	9203      	str	r2, [sp, #12]
90013878:	2b00      	cmp	r3, #0
9001387a:	bfb8      	it	lt
9001387c:	f04f 33ff 	movlt.w	r3, #4294967295
90013880:	3402      	adds	r4, #2
90013882:	9305      	str	r3, [sp, #20]
90013884:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 90013950 <_svfiprintf_r+0x1fc>
90013888:	7821      	ldrb	r1, [r4, #0]
9001388a:	2203      	movs	r2, #3
9001388c:	4650      	mov	r0, sl
9001388e:	f7ec fd3f 	bl	90000310 <memchr>
90013892:	b140      	cbz	r0, 900138a6 <_svfiprintf_r+0x152>
90013894:	2340      	movs	r3, #64	; 0x40
90013896:	eba0 000a 	sub.w	r0, r0, sl
9001389a:	fa03 f000 	lsl.w	r0, r3, r0
9001389e:	9b04      	ldr	r3, [sp, #16]
900138a0:	4303      	orrs	r3, r0
900138a2:	3401      	adds	r4, #1
900138a4:	9304      	str	r3, [sp, #16]
900138a6:	f814 1b01 	ldrb.w	r1, [r4], #1
900138aa:	4826      	ldr	r0, [pc, #152]	; (90013944 <_svfiprintf_r+0x1f0>)
900138ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900138b0:	2206      	movs	r2, #6
900138b2:	f7ec fd2d 	bl	90000310 <memchr>
900138b6:	2800      	cmp	r0, #0
900138b8:	d038      	beq.n	9001392c <_svfiprintf_r+0x1d8>
900138ba:	4b23      	ldr	r3, [pc, #140]	; (90013948 <_svfiprintf_r+0x1f4>)
900138bc:	bb1b      	cbnz	r3, 90013906 <_svfiprintf_r+0x1b2>
900138be:	9b03      	ldr	r3, [sp, #12]
900138c0:	3307      	adds	r3, #7
900138c2:	f023 0307 	bic.w	r3, r3, #7
900138c6:	3308      	adds	r3, #8
900138c8:	9303      	str	r3, [sp, #12]
900138ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
900138cc:	4433      	add	r3, r6
900138ce:	9309      	str	r3, [sp, #36]	; 0x24
900138d0:	e767      	b.n	900137a2 <_svfiprintf_r+0x4e>
900138d2:	fb0c 3202 	mla	r2, ip, r2, r3
900138d6:	460c      	mov	r4, r1
900138d8:	2001      	movs	r0, #1
900138da:	e7a5      	b.n	90013828 <_svfiprintf_r+0xd4>
900138dc:	2300      	movs	r3, #0
900138de:	3401      	adds	r4, #1
900138e0:	9305      	str	r3, [sp, #20]
900138e2:	4619      	mov	r1, r3
900138e4:	f04f 0c0a 	mov.w	ip, #10
900138e8:	4620      	mov	r0, r4
900138ea:	f810 2b01 	ldrb.w	r2, [r0], #1
900138ee:	3a30      	subs	r2, #48	; 0x30
900138f0:	2a09      	cmp	r2, #9
900138f2:	d903      	bls.n	900138fc <_svfiprintf_r+0x1a8>
900138f4:	2b00      	cmp	r3, #0
900138f6:	d0c5      	beq.n	90013884 <_svfiprintf_r+0x130>
900138f8:	9105      	str	r1, [sp, #20]
900138fa:	e7c3      	b.n	90013884 <_svfiprintf_r+0x130>
900138fc:	fb0c 2101 	mla	r1, ip, r1, r2
90013900:	4604      	mov	r4, r0
90013902:	2301      	movs	r3, #1
90013904:	e7f0      	b.n	900138e8 <_svfiprintf_r+0x194>
90013906:	ab03      	add	r3, sp, #12
90013908:	9300      	str	r3, [sp, #0]
9001390a:	462a      	mov	r2, r5
9001390c:	4b0f      	ldr	r3, [pc, #60]	; (9001394c <_svfiprintf_r+0x1f8>)
9001390e:	a904      	add	r1, sp, #16
90013910:	4638      	mov	r0, r7
90013912:	f7fd fce9 	bl	900112e8 <_printf_float>
90013916:	1c42      	adds	r2, r0, #1
90013918:	4606      	mov	r6, r0
9001391a:	d1d6      	bne.n	900138ca <_svfiprintf_r+0x176>
9001391c:	89ab      	ldrh	r3, [r5, #12]
9001391e:	065b      	lsls	r3, r3, #25
90013920:	f53f af2c 	bmi.w	9001377c <_svfiprintf_r+0x28>
90013924:	9809      	ldr	r0, [sp, #36]	; 0x24
90013926:	b01d      	add	sp, #116	; 0x74
90013928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001392c:	ab03      	add	r3, sp, #12
9001392e:	9300      	str	r3, [sp, #0]
90013930:	462a      	mov	r2, r5
90013932:	4b06      	ldr	r3, [pc, #24]	; (9001394c <_svfiprintf_r+0x1f8>)
90013934:	a904      	add	r1, sp, #16
90013936:	4638      	mov	r0, r7
90013938:	f7fd ff62 	bl	90011800 <_printf_i>
9001393c:	e7eb      	b.n	90013916 <_svfiprintf_r+0x1c2>
9001393e:	bf00      	nop
90013940:	90014aac 	.word	0x90014aac
90013944:	90014ab6 	.word	0x90014ab6
90013948:	900112e9 	.word	0x900112e9
9001394c:	9001369d 	.word	0x9001369d
90013950:	90014ab2 	.word	0x90014ab2

90013954 <__sfputc_r>:
90013954:	6893      	ldr	r3, [r2, #8]
90013956:	3b01      	subs	r3, #1
90013958:	2b00      	cmp	r3, #0
9001395a:	b410      	push	{r4}
9001395c:	6093      	str	r3, [r2, #8]
9001395e:	da08      	bge.n	90013972 <__sfputc_r+0x1e>
90013960:	6994      	ldr	r4, [r2, #24]
90013962:	42a3      	cmp	r3, r4
90013964:	db01      	blt.n	9001396a <__sfputc_r+0x16>
90013966:	290a      	cmp	r1, #10
90013968:	d103      	bne.n	90013972 <__sfputc_r+0x1e>
9001396a:	f85d 4b04 	ldr.w	r4, [sp], #4
9001396e:	f7fe ba1d 	b.w	90011dac <__swbuf_r>
90013972:	6813      	ldr	r3, [r2, #0]
90013974:	1c58      	adds	r0, r3, #1
90013976:	6010      	str	r0, [r2, #0]
90013978:	7019      	strb	r1, [r3, #0]
9001397a:	4608      	mov	r0, r1
9001397c:	f85d 4b04 	ldr.w	r4, [sp], #4
90013980:	4770      	bx	lr

90013982 <__sfputs_r>:
90013982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013984:	4606      	mov	r6, r0
90013986:	460f      	mov	r7, r1
90013988:	4614      	mov	r4, r2
9001398a:	18d5      	adds	r5, r2, r3
9001398c:	42ac      	cmp	r4, r5
9001398e:	d101      	bne.n	90013994 <__sfputs_r+0x12>
90013990:	2000      	movs	r0, #0
90013992:	e007      	b.n	900139a4 <__sfputs_r+0x22>
90013994:	f814 1b01 	ldrb.w	r1, [r4], #1
90013998:	463a      	mov	r2, r7
9001399a:	4630      	mov	r0, r6
9001399c:	f7ff ffda 	bl	90013954 <__sfputc_r>
900139a0:	1c43      	adds	r3, r0, #1
900139a2:	d1f3      	bne.n	9001398c <__sfputs_r+0xa>
900139a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

900139a8 <_vfiprintf_r>:
900139a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900139ac:	460d      	mov	r5, r1
900139ae:	b09d      	sub	sp, #116	; 0x74
900139b0:	4614      	mov	r4, r2
900139b2:	4698      	mov	r8, r3
900139b4:	4606      	mov	r6, r0
900139b6:	b118      	cbz	r0, 900139c0 <_vfiprintf_r+0x18>
900139b8:	6983      	ldr	r3, [r0, #24]
900139ba:	b90b      	cbnz	r3, 900139c0 <_vfiprintf_r+0x18>
900139bc:	f7fd fa7a 	bl	90010eb4 <__sinit>
900139c0:	4b89      	ldr	r3, [pc, #548]	; (90013be8 <_vfiprintf_r+0x240>)
900139c2:	429d      	cmp	r5, r3
900139c4:	d11b      	bne.n	900139fe <_vfiprintf_r+0x56>
900139c6:	6875      	ldr	r5, [r6, #4]
900139c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900139ca:	07d9      	lsls	r1, r3, #31
900139cc:	d405      	bmi.n	900139da <_vfiprintf_r+0x32>
900139ce:	89ab      	ldrh	r3, [r5, #12]
900139d0:	059a      	lsls	r2, r3, #22
900139d2:	d402      	bmi.n	900139da <_vfiprintf_r+0x32>
900139d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
900139d6:	f7fd fb30 	bl	9001103a <__retarget_lock_acquire_recursive>
900139da:	89ab      	ldrh	r3, [r5, #12]
900139dc:	071b      	lsls	r3, r3, #28
900139de:	d501      	bpl.n	900139e4 <_vfiprintf_r+0x3c>
900139e0:	692b      	ldr	r3, [r5, #16]
900139e2:	b9eb      	cbnz	r3, 90013a20 <_vfiprintf_r+0x78>
900139e4:	4629      	mov	r1, r5
900139e6:	4630      	mov	r0, r6
900139e8:	f7fe fa44 	bl	90011e74 <__swsetup_r>
900139ec:	b1c0      	cbz	r0, 90013a20 <_vfiprintf_r+0x78>
900139ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900139f0:	07dc      	lsls	r4, r3, #31
900139f2:	d50e      	bpl.n	90013a12 <_vfiprintf_r+0x6a>
900139f4:	f04f 30ff 	mov.w	r0, #4294967295
900139f8:	b01d      	add	sp, #116	; 0x74
900139fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900139fe:	4b7b      	ldr	r3, [pc, #492]	; (90013bec <_vfiprintf_r+0x244>)
90013a00:	429d      	cmp	r5, r3
90013a02:	d101      	bne.n	90013a08 <_vfiprintf_r+0x60>
90013a04:	68b5      	ldr	r5, [r6, #8]
90013a06:	e7df      	b.n	900139c8 <_vfiprintf_r+0x20>
90013a08:	4b79      	ldr	r3, [pc, #484]	; (90013bf0 <_vfiprintf_r+0x248>)
90013a0a:	429d      	cmp	r5, r3
90013a0c:	bf08      	it	eq
90013a0e:	68f5      	ldreq	r5, [r6, #12]
90013a10:	e7da      	b.n	900139c8 <_vfiprintf_r+0x20>
90013a12:	89ab      	ldrh	r3, [r5, #12]
90013a14:	0598      	lsls	r0, r3, #22
90013a16:	d4ed      	bmi.n	900139f4 <_vfiprintf_r+0x4c>
90013a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
90013a1a:	f7fd fb10 	bl	9001103e <__retarget_lock_release_recursive>
90013a1e:	e7e9      	b.n	900139f4 <_vfiprintf_r+0x4c>
90013a20:	2300      	movs	r3, #0
90013a22:	9309      	str	r3, [sp, #36]	; 0x24
90013a24:	2320      	movs	r3, #32
90013a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90013a2a:	f8cd 800c 	str.w	r8, [sp, #12]
90013a2e:	2330      	movs	r3, #48	; 0x30
90013a30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 90013bf4 <_vfiprintf_r+0x24c>
90013a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90013a38:	f04f 0901 	mov.w	r9, #1
90013a3c:	4623      	mov	r3, r4
90013a3e:	469a      	mov	sl, r3
90013a40:	f813 2b01 	ldrb.w	r2, [r3], #1
90013a44:	b10a      	cbz	r2, 90013a4a <_vfiprintf_r+0xa2>
90013a46:	2a25      	cmp	r2, #37	; 0x25
90013a48:	d1f9      	bne.n	90013a3e <_vfiprintf_r+0x96>
90013a4a:	ebba 0b04 	subs.w	fp, sl, r4
90013a4e:	d00b      	beq.n	90013a68 <_vfiprintf_r+0xc0>
90013a50:	465b      	mov	r3, fp
90013a52:	4622      	mov	r2, r4
90013a54:	4629      	mov	r1, r5
90013a56:	4630      	mov	r0, r6
90013a58:	f7ff ff93 	bl	90013982 <__sfputs_r>
90013a5c:	3001      	adds	r0, #1
90013a5e:	f000 80aa 	beq.w	90013bb6 <_vfiprintf_r+0x20e>
90013a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
90013a64:	445a      	add	r2, fp
90013a66:	9209      	str	r2, [sp, #36]	; 0x24
90013a68:	f89a 3000 	ldrb.w	r3, [sl]
90013a6c:	2b00      	cmp	r3, #0
90013a6e:	f000 80a2 	beq.w	90013bb6 <_vfiprintf_r+0x20e>
90013a72:	2300      	movs	r3, #0
90013a74:	f04f 32ff 	mov.w	r2, #4294967295
90013a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
90013a7c:	f10a 0a01 	add.w	sl, sl, #1
90013a80:	9304      	str	r3, [sp, #16]
90013a82:	9307      	str	r3, [sp, #28]
90013a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90013a88:	931a      	str	r3, [sp, #104]	; 0x68
90013a8a:	4654      	mov	r4, sl
90013a8c:	2205      	movs	r2, #5
90013a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
90013a92:	4858      	ldr	r0, [pc, #352]	; (90013bf4 <_vfiprintf_r+0x24c>)
90013a94:	f7ec fc3c 	bl	90000310 <memchr>
90013a98:	9a04      	ldr	r2, [sp, #16]
90013a9a:	b9d8      	cbnz	r0, 90013ad4 <_vfiprintf_r+0x12c>
90013a9c:	06d1      	lsls	r1, r2, #27
90013a9e:	bf44      	itt	mi
90013aa0:	2320      	movmi	r3, #32
90013aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90013aa6:	0713      	lsls	r3, r2, #28
90013aa8:	bf44      	itt	mi
90013aaa:	232b      	movmi	r3, #43	; 0x2b
90013aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90013ab0:	f89a 3000 	ldrb.w	r3, [sl]
90013ab4:	2b2a      	cmp	r3, #42	; 0x2a
90013ab6:	d015      	beq.n	90013ae4 <_vfiprintf_r+0x13c>
90013ab8:	9a07      	ldr	r2, [sp, #28]
90013aba:	4654      	mov	r4, sl
90013abc:	2000      	movs	r0, #0
90013abe:	f04f 0c0a 	mov.w	ip, #10
90013ac2:	4621      	mov	r1, r4
90013ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
90013ac8:	3b30      	subs	r3, #48	; 0x30
90013aca:	2b09      	cmp	r3, #9
90013acc:	d94e      	bls.n	90013b6c <_vfiprintf_r+0x1c4>
90013ace:	b1b0      	cbz	r0, 90013afe <_vfiprintf_r+0x156>
90013ad0:	9207      	str	r2, [sp, #28]
90013ad2:	e014      	b.n	90013afe <_vfiprintf_r+0x156>
90013ad4:	eba0 0308 	sub.w	r3, r0, r8
90013ad8:	fa09 f303 	lsl.w	r3, r9, r3
90013adc:	4313      	orrs	r3, r2
90013ade:	9304      	str	r3, [sp, #16]
90013ae0:	46a2      	mov	sl, r4
90013ae2:	e7d2      	b.n	90013a8a <_vfiprintf_r+0xe2>
90013ae4:	9b03      	ldr	r3, [sp, #12]
90013ae6:	1d19      	adds	r1, r3, #4
90013ae8:	681b      	ldr	r3, [r3, #0]
90013aea:	9103      	str	r1, [sp, #12]
90013aec:	2b00      	cmp	r3, #0
90013aee:	bfbb      	ittet	lt
90013af0:	425b      	neglt	r3, r3
90013af2:	f042 0202 	orrlt.w	r2, r2, #2
90013af6:	9307      	strge	r3, [sp, #28]
90013af8:	9307      	strlt	r3, [sp, #28]
90013afa:	bfb8      	it	lt
90013afc:	9204      	strlt	r2, [sp, #16]
90013afe:	7823      	ldrb	r3, [r4, #0]
90013b00:	2b2e      	cmp	r3, #46	; 0x2e
90013b02:	d10c      	bne.n	90013b1e <_vfiprintf_r+0x176>
90013b04:	7863      	ldrb	r3, [r4, #1]
90013b06:	2b2a      	cmp	r3, #42	; 0x2a
90013b08:	d135      	bne.n	90013b76 <_vfiprintf_r+0x1ce>
90013b0a:	9b03      	ldr	r3, [sp, #12]
90013b0c:	1d1a      	adds	r2, r3, #4
90013b0e:	681b      	ldr	r3, [r3, #0]
90013b10:	9203      	str	r2, [sp, #12]
90013b12:	2b00      	cmp	r3, #0
90013b14:	bfb8      	it	lt
90013b16:	f04f 33ff 	movlt.w	r3, #4294967295
90013b1a:	3402      	adds	r4, #2
90013b1c:	9305      	str	r3, [sp, #20]
90013b1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 90013c04 <_vfiprintf_r+0x25c>
90013b22:	7821      	ldrb	r1, [r4, #0]
90013b24:	2203      	movs	r2, #3
90013b26:	4650      	mov	r0, sl
90013b28:	f7ec fbf2 	bl	90000310 <memchr>
90013b2c:	b140      	cbz	r0, 90013b40 <_vfiprintf_r+0x198>
90013b2e:	2340      	movs	r3, #64	; 0x40
90013b30:	eba0 000a 	sub.w	r0, r0, sl
90013b34:	fa03 f000 	lsl.w	r0, r3, r0
90013b38:	9b04      	ldr	r3, [sp, #16]
90013b3a:	4303      	orrs	r3, r0
90013b3c:	3401      	adds	r4, #1
90013b3e:	9304      	str	r3, [sp, #16]
90013b40:	f814 1b01 	ldrb.w	r1, [r4], #1
90013b44:	482c      	ldr	r0, [pc, #176]	; (90013bf8 <_vfiprintf_r+0x250>)
90013b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90013b4a:	2206      	movs	r2, #6
90013b4c:	f7ec fbe0 	bl	90000310 <memchr>
90013b50:	2800      	cmp	r0, #0
90013b52:	d03f      	beq.n	90013bd4 <_vfiprintf_r+0x22c>
90013b54:	4b29      	ldr	r3, [pc, #164]	; (90013bfc <_vfiprintf_r+0x254>)
90013b56:	bb1b      	cbnz	r3, 90013ba0 <_vfiprintf_r+0x1f8>
90013b58:	9b03      	ldr	r3, [sp, #12]
90013b5a:	3307      	adds	r3, #7
90013b5c:	f023 0307 	bic.w	r3, r3, #7
90013b60:	3308      	adds	r3, #8
90013b62:	9303      	str	r3, [sp, #12]
90013b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013b66:	443b      	add	r3, r7
90013b68:	9309      	str	r3, [sp, #36]	; 0x24
90013b6a:	e767      	b.n	90013a3c <_vfiprintf_r+0x94>
90013b6c:	fb0c 3202 	mla	r2, ip, r2, r3
90013b70:	460c      	mov	r4, r1
90013b72:	2001      	movs	r0, #1
90013b74:	e7a5      	b.n	90013ac2 <_vfiprintf_r+0x11a>
90013b76:	2300      	movs	r3, #0
90013b78:	3401      	adds	r4, #1
90013b7a:	9305      	str	r3, [sp, #20]
90013b7c:	4619      	mov	r1, r3
90013b7e:	f04f 0c0a 	mov.w	ip, #10
90013b82:	4620      	mov	r0, r4
90013b84:	f810 2b01 	ldrb.w	r2, [r0], #1
90013b88:	3a30      	subs	r2, #48	; 0x30
90013b8a:	2a09      	cmp	r2, #9
90013b8c:	d903      	bls.n	90013b96 <_vfiprintf_r+0x1ee>
90013b8e:	2b00      	cmp	r3, #0
90013b90:	d0c5      	beq.n	90013b1e <_vfiprintf_r+0x176>
90013b92:	9105      	str	r1, [sp, #20]
90013b94:	e7c3      	b.n	90013b1e <_vfiprintf_r+0x176>
90013b96:	fb0c 2101 	mla	r1, ip, r1, r2
90013b9a:	4604      	mov	r4, r0
90013b9c:	2301      	movs	r3, #1
90013b9e:	e7f0      	b.n	90013b82 <_vfiprintf_r+0x1da>
90013ba0:	ab03      	add	r3, sp, #12
90013ba2:	9300      	str	r3, [sp, #0]
90013ba4:	462a      	mov	r2, r5
90013ba6:	4b16      	ldr	r3, [pc, #88]	; (90013c00 <_vfiprintf_r+0x258>)
90013ba8:	a904      	add	r1, sp, #16
90013baa:	4630      	mov	r0, r6
90013bac:	f7fd fb9c 	bl	900112e8 <_printf_float>
90013bb0:	4607      	mov	r7, r0
90013bb2:	1c78      	adds	r0, r7, #1
90013bb4:	d1d6      	bne.n	90013b64 <_vfiprintf_r+0x1bc>
90013bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90013bb8:	07d9      	lsls	r1, r3, #31
90013bba:	d405      	bmi.n	90013bc8 <_vfiprintf_r+0x220>
90013bbc:	89ab      	ldrh	r3, [r5, #12]
90013bbe:	059a      	lsls	r2, r3, #22
90013bc0:	d402      	bmi.n	90013bc8 <_vfiprintf_r+0x220>
90013bc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
90013bc4:	f7fd fa3b 	bl	9001103e <__retarget_lock_release_recursive>
90013bc8:	89ab      	ldrh	r3, [r5, #12]
90013bca:	065b      	lsls	r3, r3, #25
90013bcc:	f53f af12 	bmi.w	900139f4 <_vfiprintf_r+0x4c>
90013bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
90013bd2:	e711      	b.n	900139f8 <_vfiprintf_r+0x50>
90013bd4:	ab03      	add	r3, sp, #12
90013bd6:	9300      	str	r3, [sp, #0]
90013bd8:	462a      	mov	r2, r5
90013bda:	4b09      	ldr	r3, [pc, #36]	; (90013c00 <_vfiprintf_r+0x258>)
90013bdc:	a904      	add	r1, sp, #16
90013bde:	4630      	mov	r0, r6
90013be0:	f7fd fe0e 	bl	90011800 <_printf_i>
90013be4:	e7e4      	b.n	90013bb0 <_vfiprintf_r+0x208>
90013be6:	bf00      	nop
90013be8:	90014848 	.word	0x90014848
90013bec:	90014868 	.word	0x90014868
90013bf0:	90014828 	.word	0x90014828
90013bf4:	90014aac 	.word	0x90014aac
90013bf8:	90014ab6 	.word	0x90014ab6
90013bfc:	900112e9 	.word	0x900112e9
90013c00:	90013983 	.word	0x90013983
90013c04:	90014ab2 	.word	0x90014ab2

90013c08 <_read_r>:
90013c08:	b538      	push	{r3, r4, r5, lr}
90013c0a:	4d07      	ldr	r5, [pc, #28]	; (90013c28 <_read_r+0x20>)
90013c0c:	4604      	mov	r4, r0
90013c0e:	4608      	mov	r0, r1
90013c10:	4611      	mov	r1, r2
90013c12:	2200      	movs	r2, #0
90013c14:	602a      	str	r2, [r5, #0]
90013c16:	461a      	mov	r2, r3
90013c18:	f7ed fd8c 	bl	90001734 <_read>
90013c1c:	1c43      	adds	r3, r0, #1
90013c1e:	d102      	bne.n	90013c26 <_read_r+0x1e>
90013c20:	682b      	ldr	r3, [r5, #0]
90013c22:	b103      	cbz	r3, 90013c26 <_read_r+0x1e>
90013c24:	6023      	str	r3, [r4, #0]
90013c26:	bd38      	pop	{r3, r4, r5, pc}
90013c28:	240129e8 	.word	0x240129e8

90013c2c <__assert_func>:
90013c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90013c2e:	4614      	mov	r4, r2
90013c30:	461a      	mov	r2, r3
90013c32:	4b09      	ldr	r3, [pc, #36]	; (90013c58 <__assert_func+0x2c>)
90013c34:	681b      	ldr	r3, [r3, #0]
90013c36:	4605      	mov	r5, r0
90013c38:	68d8      	ldr	r0, [r3, #12]
90013c3a:	b14c      	cbz	r4, 90013c50 <__assert_func+0x24>
90013c3c:	4b07      	ldr	r3, [pc, #28]	; (90013c5c <__assert_func+0x30>)
90013c3e:	9100      	str	r1, [sp, #0]
90013c40:	e9cd 3401 	strd	r3, r4, [sp, #4]
90013c44:	4906      	ldr	r1, [pc, #24]	; (90013c60 <__assert_func+0x34>)
90013c46:	462b      	mov	r3, r5
90013c48:	f000 f80e 	bl	90013c68 <fiprintf>
90013c4c:	f7fd f8c7 	bl	90010dde <abort>
90013c50:	4b04      	ldr	r3, [pc, #16]	; (90013c64 <__assert_func+0x38>)
90013c52:	461c      	mov	r4, r3
90013c54:	e7f3      	b.n	90013c3e <__assert_func+0x12>
90013c56:	bf00      	nop
90013c58:	2400001c 	.word	0x2400001c
90013c5c:	90014abd 	.word	0x90014abd
90013c60:	90014aca 	.word	0x90014aca
90013c64:	90014af8 	.word	0x90014af8

90013c68 <fiprintf>:
90013c68:	b40e      	push	{r1, r2, r3}
90013c6a:	b503      	push	{r0, r1, lr}
90013c6c:	4601      	mov	r1, r0
90013c6e:	ab03      	add	r3, sp, #12
90013c70:	4805      	ldr	r0, [pc, #20]	; (90013c88 <fiprintf+0x20>)
90013c72:	f853 2b04 	ldr.w	r2, [r3], #4
90013c76:	6800      	ldr	r0, [r0, #0]
90013c78:	9301      	str	r3, [sp, #4]
90013c7a:	f7ff fe95 	bl	900139a8 <_vfiprintf_r>
90013c7e:	b002      	add	sp, #8
90013c80:	f85d eb04 	ldr.w	lr, [sp], #4
90013c84:	b003      	add	sp, #12
90013c86:	4770      	bx	lr
90013c88:	2400001c 	.word	0x2400001c

90013c8c <_fstat_r>:
90013c8c:	b538      	push	{r3, r4, r5, lr}
90013c8e:	4d07      	ldr	r5, [pc, #28]	; (90013cac <_fstat_r+0x20>)
90013c90:	2300      	movs	r3, #0
90013c92:	4604      	mov	r4, r0
90013c94:	4608      	mov	r0, r1
90013c96:	4611      	mov	r1, r2
90013c98:	602b      	str	r3, [r5, #0]
90013c9a:	f7ed fd90 	bl	900017be <_fstat>
90013c9e:	1c43      	adds	r3, r0, #1
90013ca0:	d102      	bne.n	90013ca8 <_fstat_r+0x1c>
90013ca2:	682b      	ldr	r3, [r5, #0]
90013ca4:	b103      	cbz	r3, 90013ca8 <_fstat_r+0x1c>
90013ca6:	6023      	str	r3, [r4, #0]
90013ca8:	bd38      	pop	{r3, r4, r5, pc}
90013caa:	bf00      	nop
90013cac:	240129e8 	.word	0x240129e8

90013cb0 <_isatty_r>:
90013cb0:	b538      	push	{r3, r4, r5, lr}
90013cb2:	4d06      	ldr	r5, [pc, #24]	; (90013ccc <_isatty_r+0x1c>)
90013cb4:	2300      	movs	r3, #0
90013cb6:	4604      	mov	r4, r0
90013cb8:	4608      	mov	r0, r1
90013cba:	602b      	str	r3, [r5, #0]
90013cbc:	f7ed fd8f 	bl	900017de <_isatty>
90013cc0:	1c43      	adds	r3, r0, #1
90013cc2:	d102      	bne.n	90013cca <_isatty_r+0x1a>
90013cc4:	682b      	ldr	r3, [r5, #0]
90013cc6:	b103      	cbz	r3, 90013cca <_isatty_r+0x1a>
90013cc8:	6023      	str	r3, [r4, #0]
90013cca:	bd38      	pop	{r3, r4, r5, pc}
90013ccc:	240129e8 	.word	0x240129e8

90013cd0 <__ascii_mbtowc>:
90013cd0:	b082      	sub	sp, #8
90013cd2:	b901      	cbnz	r1, 90013cd6 <__ascii_mbtowc+0x6>
90013cd4:	a901      	add	r1, sp, #4
90013cd6:	b142      	cbz	r2, 90013cea <__ascii_mbtowc+0x1a>
90013cd8:	b14b      	cbz	r3, 90013cee <__ascii_mbtowc+0x1e>
90013cda:	7813      	ldrb	r3, [r2, #0]
90013cdc:	600b      	str	r3, [r1, #0]
90013cde:	7812      	ldrb	r2, [r2, #0]
90013ce0:	1e10      	subs	r0, r2, #0
90013ce2:	bf18      	it	ne
90013ce4:	2001      	movne	r0, #1
90013ce6:	b002      	add	sp, #8
90013ce8:	4770      	bx	lr
90013cea:	4610      	mov	r0, r2
90013cec:	e7fb      	b.n	90013ce6 <__ascii_mbtowc+0x16>
90013cee:	f06f 0001 	mvn.w	r0, #1
90013cf2:	e7f8      	b.n	90013ce6 <__ascii_mbtowc+0x16>

90013cf4 <_realloc_r>:
90013cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013cf8:	4680      	mov	r8, r0
90013cfa:	4614      	mov	r4, r2
90013cfc:	460e      	mov	r6, r1
90013cfe:	b921      	cbnz	r1, 90013d0a <_realloc_r+0x16>
90013d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90013d04:	4611      	mov	r1, r2
90013d06:	f7fd b9eb 	b.w	900110e0 <_malloc_r>
90013d0a:	b92a      	cbnz	r2, 90013d18 <_realloc_r+0x24>
90013d0c:	f7ff fc7a 	bl	90013604 <_free_r>
90013d10:	4625      	mov	r5, r4
90013d12:	4628      	mov	r0, r5
90013d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013d18:	f000 f828 	bl	90013d6c <_malloc_usable_size_r>
90013d1c:	4284      	cmp	r4, r0
90013d1e:	4607      	mov	r7, r0
90013d20:	d802      	bhi.n	90013d28 <_realloc_r+0x34>
90013d22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
90013d26:	d812      	bhi.n	90013d4e <_realloc_r+0x5a>
90013d28:	4621      	mov	r1, r4
90013d2a:	4640      	mov	r0, r8
90013d2c:	f7fd f9d8 	bl	900110e0 <_malloc_r>
90013d30:	4605      	mov	r5, r0
90013d32:	2800      	cmp	r0, #0
90013d34:	d0ed      	beq.n	90013d12 <_realloc_r+0x1e>
90013d36:	42bc      	cmp	r4, r7
90013d38:	4622      	mov	r2, r4
90013d3a:	4631      	mov	r1, r6
90013d3c:	bf28      	it	cs
90013d3e:	463a      	movcs	r2, r7
90013d40:	f7fd f97e 	bl	90011040 <memcpy>
90013d44:	4631      	mov	r1, r6
90013d46:	4640      	mov	r0, r8
90013d48:	f7ff fc5c 	bl	90013604 <_free_r>
90013d4c:	e7e1      	b.n	90013d12 <_realloc_r+0x1e>
90013d4e:	4635      	mov	r5, r6
90013d50:	e7df      	b.n	90013d12 <_realloc_r+0x1e>

90013d52 <__ascii_wctomb>:
90013d52:	b149      	cbz	r1, 90013d68 <__ascii_wctomb+0x16>
90013d54:	2aff      	cmp	r2, #255	; 0xff
90013d56:	bf85      	ittet	hi
90013d58:	238a      	movhi	r3, #138	; 0x8a
90013d5a:	6003      	strhi	r3, [r0, #0]
90013d5c:	700a      	strbls	r2, [r1, #0]
90013d5e:	f04f 30ff 	movhi.w	r0, #4294967295
90013d62:	bf98      	it	ls
90013d64:	2001      	movls	r0, #1
90013d66:	4770      	bx	lr
90013d68:	4608      	mov	r0, r1
90013d6a:	4770      	bx	lr

90013d6c <_malloc_usable_size_r>:
90013d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
90013d70:	1f18      	subs	r0, r3, #4
90013d72:	2b00      	cmp	r3, #0
90013d74:	bfbc      	itt	lt
90013d76:	580b      	ldrlt	r3, [r1, r0]
90013d78:	18c0      	addlt	r0, r0, r3
90013d7a:	4770      	bx	lr

90013d7c <_init>:
90013d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013d7e:	bf00      	nop
90013d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
90013d82:	bc08      	pop	{r3}
90013d84:	469e      	mov	lr, r3
90013d86:	4770      	bx	lr

90013d88 <_fini>:
90013d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013d8a:	bf00      	nop
90013d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
90013d8e:	bc08      	pop	{r3}
90013d90:	469e      	mov	lr, r3
90013d92:	4770      	bx	lr
