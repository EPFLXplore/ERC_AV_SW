
Orion_TestBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013950  900002a0  900002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fd4  90013bf0  90013bf0  00023bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90015bc4  90015bc4  00025bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90015bcc  90015bcc  00025bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90015bd0  90015bd0  00025bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  90015bd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005638  24000210  90015de4  00030210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005848  90015de4  00035848  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039a57  00000000  00000000  0003023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006397  00000000  00000000  00069c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020c8  00000000  00000000  00070030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001e80  00000000  00000000  000720f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000412df  00000000  00000000  00073f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002edd2  00000000  00000000  000b5257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017abea  00000000  00000000  000e4029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025ec13  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009b50  00000000  00000000  0025ec64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24000210 	.word	0x24000210
900002bc:	00000000 	.word	0x00000000
900002c0:	90013bd8 	.word	0x90013bd8

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24000214 	.word	0x24000214
900002dc:	90013bd8 	.word	0x90013bd8

900002e0 <strlen>:
900002e0:	4603      	mov	r3, r0
900002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
900002e6:	2a00      	cmp	r2, #0
900002e8:	d1fb      	bne.n	900002e2 <strlen+0x2>
900002ea:	1a18      	subs	r0, r3, r0
900002ec:	3801      	subs	r0, #1
900002ee:	4770      	bx	lr

900002f0 <memchr>:
900002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002f4:	2a10      	cmp	r2, #16
900002f6:	db2b      	blt.n	90000350 <memchr+0x60>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	d008      	beq.n	90000310 <memchr+0x20>
900002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
90000302:	3a01      	subs	r2, #1
90000304:	428b      	cmp	r3, r1
90000306:	d02d      	beq.n	90000364 <memchr+0x74>
90000308:	f010 0f07 	tst.w	r0, #7
9000030c:	b342      	cbz	r2, 90000360 <memchr+0x70>
9000030e:	d1f6      	bne.n	900002fe <memchr+0xe>
90000310:	b4f0      	push	{r4, r5, r6, r7}
90000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000031a:	f022 0407 	bic.w	r4, r2, #7
9000031e:	f07f 0700 	mvns.w	r7, #0
90000322:	2300      	movs	r3, #0
90000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000328:	3c08      	subs	r4, #8
9000032a:	ea85 0501 	eor.w	r5, r5, r1
9000032e:	ea86 0601 	eor.w	r6, r6, r1
90000332:	fa85 f547 	uadd8	r5, r5, r7
90000336:	faa3 f587 	sel	r5, r3, r7
9000033a:	fa86 f647 	uadd8	r6, r6, r7
9000033e:	faa5 f687 	sel	r6, r5, r7
90000342:	b98e      	cbnz	r6, 90000368 <memchr+0x78>
90000344:	d1ee      	bne.n	90000324 <memchr+0x34>
90000346:	bcf0      	pop	{r4, r5, r6, r7}
90000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000034c:	f002 0207 	and.w	r2, r2, #7
90000350:	b132      	cbz	r2, 90000360 <memchr+0x70>
90000352:	f810 3b01 	ldrb.w	r3, [r0], #1
90000356:	3a01      	subs	r2, #1
90000358:	ea83 0301 	eor.w	r3, r3, r1
9000035c:	b113      	cbz	r3, 90000364 <memchr+0x74>
9000035e:	d1f8      	bne.n	90000352 <memchr+0x62>
90000360:	2000      	movs	r0, #0
90000362:	4770      	bx	lr
90000364:	3801      	subs	r0, #1
90000366:	4770      	bx	lr
90000368:	2d00      	cmp	r5, #0
9000036a:	bf06      	itte	eq
9000036c:	4635      	moveq	r5, r6
9000036e:	3803      	subeq	r0, #3
90000370:	3807      	subne	r0, #7
90000372:	f015 0f01 	tst.w	r5, #1
90000376:	d107      	bne.n	90000388 <memchr+0x98>
90000378:	3001      	adds	r0, #1
9000037a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000037e:	bf02      	ittt	eq
90000380:	3001      	addeq	r0, #1
90000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000386:	3001      	addeq	r0, #1
90000388:	bcf0      	pop	{r4, r5, r6, r7}
9000038a:	3801      	subs	r0, #1
9000038c:	4770      	bx	lr
9000038e:	bf00      	nop

90000390 <__aeabi_ldivmod>:
90000390:	b97b      	cbnz	r3, 900003b2 <__aeabi_ldivmod+0x22>
90000392:	b972      	cbnz	r2, 900003b2 <__aeabi_ldivmod+0x22>
90000394:	2900      	cmp	r1, #0
90000396:	bfbe      	ittt	lt
90000398:	2000      	movlt	r0, #0
9000039a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
9000039e:	e006      	blt.n	900003ae <__aeabi_ldivmod+0x1e>
900003a0:	bf08      	it	eq
900003a2:	2800      	cmpeq	r0, #0
900003a4:	bf1c      	itt	ne
900003a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
900003aa:	f04f 30ff 	movne.w	r0, #4294967295
900003ae:	f000 b9bf 	b.w	90000730 <__aeabi_idiv0>
900003b2:	f1ad 0c08 	sub.w	ip, sp, #8
900003b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003ba:	2900      	cmp	r1, #0
900003bc:	db09      	blt.n	900003d2 <__aeabi_ldivmod+0x42>
900003be:	2b00      	cmp	r3, #0
900003c0:	db1a      	blt.n	900003f8 <__aeabi_ldivmod+0x68>
900003c2:	f000 f84d 	bl	90000460 <__udivmoddi4>
900003c6:	f8dd e004 	ldr.w	lr, [sp, #4]
900003ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003ce:	b004      	add	sp, #16
900003d0:	4770      	bx	lr
900003d2:	4240      	negs	r0, r0
900003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
900003d8:	2b00      	cmp	r3, #0
900003da:	db1b      	blt.n	90000414 <__aeabi_ldivmod+0x84>
900003dc:	f000 f840 	bl	90000460 <__udivmoddi4>
900003e0:	f8dd e004 	ldr.w	lr, [sp, #4]
900003e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003e8:	b004      	add	sp, #16
900003ea:	4240      	negs	r0, r0
900003ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
900003f0:	4252      	negs	r2, r2
900003f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
900003f6:	4770      	bx	lr
900003f8:	4252      	negs	r2, r2
900003fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
900003fe:	f000 f82f 	bl	90000460 <__udivmoddi4>
90000402:	f8dd e004 	ldr.w	lr, [sp, #4]
90000406:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
9000040a:	b004      	add	sp, #16
9000040c:	4240      	negs	r0, r0
9000040e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
90000412:	4770      	bx	lr
90000414:	4252      	negs	r2, r2
90000416:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
9000041a:	f000 f821 	bl	90000460 <__udivmoddi4>
9000041e:	f8dd e004 	ldr.w	lr, [sp, #4]
90000422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000426:	b004      	add	sp, #16
90000428:	4252      	negs	r2, r2
9000042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
9000042e:	4770      	bx	lr

90000430 <__aeabi_uldivmod>:
90000430:	b953      	cbnz	r3, 90000448 <__aeabi_uldivmod+0x18>
90000432:	b94a      	cbnz	r2, 90000448 <__aeabi_uldivmod+0x18>
90000434:	2900      	cmp	r1, #0
90000436:	bf08      	it	eq
90000438:	2800      	cmpeq	r0, #0
9000043a:	bf1c      	itt	ne
9000043c:	f04f 31ff 	movne.w	r1, #4294967295
90000440:	f04f 30ff 	movne.w	r0, #4294967295
90000444:	f000 b974 	b.w	90000730 <__aeabi_idiv0>
90000448:	f1ad 0c08 	sub.w	ip, sp, #8
9000044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000450:	f000 f806 	bl	90000460 <__udivmoddi4>
90000454:	f8dd e004 	ldr.w	lr, [sp, #4]
90000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
9000045c:	b004      	add	sp, #16
9000045e:	4770      	bx	lr

90000460 <__udivmoddi4>:
90000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90000464:	9d08      	ldr	r5, [sp, #32]
90000466:	4604      	mov	r4, r0
90000468:	468e      	mov	lr, r1
9000046a:	2b00      	cmp	r3, #0
9000046c:	d14d      	bne.n	9000050a <__udivmoddi4+0xaa>
9000046e:	428a      	cmp	r2, r1
90000470:	4694      	mov	ip, r2
90000472:	d969      	bls.n	90000548 <__udivmoddi4+0xe8>
90000474:	fab2 f282 	clz	r2, r2
90000478:	b152      	cbz	r2, 90000490 <__udivmoddi4+0x30>
9000047a:	fa01 f302 	lsl.w	r3, r1, r2
9000047e:	f1c2 0120 	rsb	r1, r2, #32
90000482:	fa20 f101 	lsr.w	r1, r0, r1
90000486:	fa0c fc02 	lsl.w	ip, ip, r2
9000048a:	ea41 0e03 	orr.w	lr, r1, r3
9000048e:	4094      	lsls	r4, r2
90000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
90000494:	0c21      	lsrs	r1, r4, #16
90000496:	fbbe f6f8 	udiv	r6, lr, r8
9000049a:	fa1f f78c 	uxth.w	r7, ip
9000049e:	fb08 e316 	mls	r3, r8, r6, lr
900004a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
900004a6:	fb06 f107 	mul.w	r1, r6, r7
900004aa:	4299      	cmp	r1, r3
900004ac:	d90a      	bls.n	900004c4 <__udivmoddi4+0x64>
900004ae:	eb1c 0303 	adds.w	r3, ip, r3
900004b2:	f106 30ff 	add.w	r0, r6, #4294967295
900004b6:	f080 811f 	bcs.w	900006f8 <__udivmoddi4+0x298>
900004ba:	4299      	cmp	r1, r3
900004bc:	f240 811c 	bls.w	900006f8 <__udivmoddi4+0x298>
900004c0:	3e02      	subs	r6, #2
900004c2:	4463      	add	r3, ip
900004c4:	1a5b      	subs	r3, r3, r1
900004c6:	b2a4      	uxth	r4, r4
900004c8:	fbb3 f0f8 	udiv	r0, r3, r8
900004cc:	fb08 3310 	mls	r3, r8, r0, r3
900004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
900004d4:	fb00 f707 	mul.w	r7, r0, r7
900004d8:	42a7      	cmp	r7, r4
900004da:	d90a      	bls.n	900004f2 <__udivmoddi4+0x92>
900004dc:	eb1c 0404 	adds.w	r4, ip, r4
900004e0:	f100 33ff 	add.w	r3, r0, #4294967295
900004e4:	f080 810a 	bcs.w	900006fc <__udivmoddi4+0x29c>
900004e8:	42a7      	cmp	r7, r4
900004ea:	f240 8107 	bls.w	900006fc <__udivmoddi4+0x29c>
900004ee:	4464      	add	r4, ip
900004f0:	3802      	subs	r0, #2
900004f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900004f6:	1be4      	subs	r4, r4, r7
900004f8:	2600      	movs	r6, #0
900004fa:	b11d      	cbz	r5, 90000504 <__udivmoddi4+0xa4>
900004fc:	40d4      	lsrs	r4, r2
900004fe:	2300      	movs	r3, #0
90000500:	e9c5 4300 	strd	r4, r3, [r5]
90000504:	4631      	mov	r1, r6
90000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000050a:	428b      	cmp	r3, r1
9000050c:	d909      	bls.n	90000522 <__udivmoddi4+0xc2>
9000050e:	2d00      	cmp	r5, #0
90000510:	f000 80ef 	beq.w	900006f2 <__udivmoddi4+0x292>
90000514:	2600      	movs	r6, #0
90000516:	e9c5 0100 	strd	r0, r1, [r5]
9000051a:	4630      	mov	r0, r6
9000051c:	4631      	mov	r1, r6
9000051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000522:	fab3 f683 	clz	r6, r3
90000526:	2e00      	cmp	r6, #0
90000528:	d14a      	bne.n	900005c0 <__udivmoddi4+0x160>
9000052a:	428b      	cmp	r3, r1
9000052c:	d302      	bcc.n	90000534 <__udivmoddi4+0xd4>
9000052e:	4282      	cmp	r2, r0
90000530:	f200 80f9 	bhi.w	90000726 <__udivmoddi4+0x2c6>
90000534:	1a84      	subs	r4, r0, r2
90000536:	eb61 0303 	sbc.w	r3, r1, r3
9000053a:	2001      	movs	r0, #1
9000053c:	469e      	mov	lr, r3
9000053e:	2d00      	cmp	r5, #0
90000540:	d0e0      	beq.n	90000504 <__udivmoddi4+0xa4>
90000542:	e9c5 4e00 	strd	r4, lr, [r5]
90000546:	e7dd      	b.n	90000504 <__udivmoddi4+0xa4>
90000548:	b902      	cbnz	r2, 9000054c <__udivmoddi4+0xec>
9000054a:	deff      	udf	#255	; 0xff
9000054c:	fab2 f282 	clz	r2, r2
90000550:	2a00      	cmp	r2, #0
90000552:	f040 8092 	bne.w	9000067a <__udivmoddi4+0x21a>
90000556:	eba1 010c 	sub.w	r1, r1, ip
9000055a:	ea4f 471c 	mov.w	r7, ip, lsr #16
9000055e:	fa1f fe8c 	uxth.w	lr, ip
90000562:	2601      	movs	r6, #1
90000564:	0c20      	lsrs	r0, r4, #16
90000566:	fbb1 f3f7 	udiv	r3, r1, r7
9000056a:	fb07 1113 	mls	r1, r7, r3, r1
9000056e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
90000572:	fb0e f003 	mul.w	r0, lr, r3
90000576:	4288      	cmp	r0, r1
90000578:	d908      	bls.n	9000058c <__udivmoddi4+0x12c>
9000057a:	eb1c 0101 	adds.w	r1, ip, r1
9000057e:	f103 38ff 	add.w	r8, r3, #4294967295
90000582:	d202      	bcs.n	9000058a <__udivmoddi4+0x12a>
90000584:	4288      	cmp	r0, r1
90000586:	f200 80cb 	bhi.w	90000720 <__udivmoddi4+0x2c0>
9000058a:	4643      	mov	r3, r8
9000058c:	1a09      	subs	r1, r1, r0
9000058e:	b2a4      	uxth	r4, r4
90000590:	fbb1 f0f7 	udiv	r0, r1, r7
90000594:	fb07 1110 	mls	r1, r7, r0, r1
90000598:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
9000059c:	fb0e fe00 	mul.w	lr, lr, r0
900005a0:	45a6      	cmp	lr, r4
900005a2:	d908      	bls.n	900005b6 <__udivmoddi4+0x156>
900005a4:	eb1c 0404 	adds.w	r4, ip, r4
900005a8:	f100 31ff 	add.w	r1, r0, #4294967295
900005ac:	d202      	bcs.n	900005b4 <__udivmoddi4+0x154>
900005ae:	45a6      	cmp	lr, r4
900005b0:	f200 80bb 	bhi.w	9000072a <__udivmoddi4+0x2ca>
900005b4:	4608      	mov	r0, r1
900005b6:	eba4 040e 	sub.w	r4, r4, lr
900005ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
900005be:	e79c      	b.n	900004fa <__udivmoddi4+0x9a>
900005c0:	f1c6 0720 	rsb	r7, r6, #32
900005c4:	40b3      	lsls	r3, r6
900005c6:	fa22 fc07 	lsr.w	ip, r2, r7
900005ca:	ea4c 0c03 	orr.w	ip, ip, r3
900005ce:	fa20 f407 	lsr.w	r4, r0, r7
900005d2:	fa01 f306 	lsl.w	r3, r1, r6
900005d6:	431c      	orrs	r4, r3
900005d8:	40f9      	lsrs	r1, r7
900005da:	ea4f 491c 	mov.w	r9, ip, lsr #16
900005de:	fa00 f306 	lsl.w	r3, r0, r6
900005e2:	fbb1 f8f9 	udiv	r8, r1, r9
900005e6:	0c20      	lsrs	r0, r4, #16
900005e8:	fa1f fe8c 	uxth.w	lr, ip
900005ec:	fb09 1118 	mls	r1, r9, r8, r1
900005f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
900005f4:	fb08 f00e 	mul.w	r0, r8, lr
900005f8:	4288      	cmp	r0, r1
900005fa:	fa02 f206 	lsl.w	r2, r2, r6
900005fe:	d90b      	bls.n	90000618 <__udivmoddi4+0x1b8>
90000600:	eb1c 0101 	adds.w	r1, ip, r1
90000604:	f108 3aff 	add.w	sl, r8, #4294967295
90000608:	f080 8088 	bcs.w	9000071c <__udivmoddi4+0x2bc>
9000060c:	4288      	cmp	r0, r1
9000060e:	f240 8085 	bls.w	9000071c <__udivmoddi4+0x2bc>
90000612:	f1a8 0802 	sub.w	r8, r8, #2
90000616:	4461      	add	r1, ip
90000618:	1a09      	subs	r1, r1, r0
9000061a:	b2a4      	uxth	r4, r4
9000061c:	fbb1 f0f9 	udiv	r0, r1, r9
90000620:	fb09 1110 	mls	r1, r9, r0, r1
90000624:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
90000628:	fb00 fe0e 	mul.w	lr, r0, lr
9000062c:	458e      	cmp	lr, r1
9000062e:	d908      	bls.n	90000642 <__udivmoddi4+0x1e2>
90000630:	eb1c 0101 	adds.w	r1, ip, r1
90000634:	f100 34ff 	add.w	r4, r0, #4294967295
90000638:	d26c      	bcs.n	90000714 <__udivmoddi4+0x2b4>
9000063a:	458e      	cmp	lr, r1
9000063c:	d96a      	bls.n	90000714 <__udivmoddi4+0x2b4>
9000063e:	3802      	subs	r0, #2
90000640:	4461      	add	r1, ip
90000642:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
90000646:	fba0 9402 	umull	r9, r4, r0, r2
9000064a:	eba1 010e 	sub.w	r1, r1, lr
9000064e:	42a1      	cmp	r1, r4
90000650:	46c8      	mov	r8, r9
90000652:	46a6      	mov	lr, r4
90000654:	d356      	bcc.n	90000704 <__udivmoddi4+0x2a4>
90000656:	d053      	beq.n	90000700 <__udivmoddi4+0x2a0>
90000658:	b15d      	cbz	r5, 90000672 <__udivmoddi4+0x212>
9000065a:	ebb3 0208 	subs.w	r2, r3, r8
9000065e:	eb61 010e 	sbc.w	r1, r1, lr
90000662:	fa01 f707 	lsl.w	r7, r1, r7
90000666:	fa22 f306 	lsr.w	r3, r2, r6
9000066a:	40f1      	lsrs	r1, r6
9000066c:	431f      	orrs	r7, r3
9000066e:	e9c5 7100 	strd	r7, r1, [r5]
90000672:	2600      	movs	r6, #0
90000674:	4631      	mov	r1, r6
90000676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000067a:	f1c2 0320 	rsb	r3, r2, #32
9000067e:	40d8      	lsrs	r0, r3
90000680:	fa0c fc02 	lsl.w	ip, ip, r2
90000684:	fa21 f303 	lsr.w	r3, r1, r3
90000688:	4091      	lsls	r1, r2
9000068a:	4301      	orrs	r1, r0
9000068c:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000690:	fa1f fe8c 	uxth.w	lr, ip
90000694:	fbb3 f0f7 	udiv	r0, r3, r7
90000698:	fb07 3610 	mls	r6, r7, r0, r3
9000069c:	0c0b      	lsrs	r3, r1, #16
9000069e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
900006a2:	fb00 f60e 	mul.w	r6, r0, lr
900006a6:	429e      	cmp	r6, r3
900006a8:	fa04 f402 	lsl.w	r4, r4, r2
900006ac:	d908      	bls.n	900006c0 <__udivmoddi4+0x260>
900006ae:	eb1c 0303 	adds.w	r3, ip, r3
900006b2:	f100 38ff 	add.w	r8, r0, #4294967295
900006b6:	d22f      	bcs.n	90000718 <__udivmoddi4+0x2b8>
900006b8:	429e      	cmp	r6, r3
900006ba:	d92d      	bls.n	90000718 <__udivmoddi4+0x2b8>
900006bc:	3802      	subs	r0, #2
900006be:	4463      	add	r3, ip
900006c0:	1b9b      	subs	r3, r3, r6
900006c2:	b289      	uxth	r1, r1
900006c4:	fbb3 f6f7 	udiv	r6, r3, r7
900006c8:	fb07 3316 	mls	r3, r7, r6, r3
900006cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900006d0:	fb06 f30e 	mul.w	r3, r6, lr
900006d4:	428b      	cmp	r3, r1
900006d6:	d908      	bls.n	900006ea <__udivmoddi4+0x28a>
900006d8:	eb1c 0101 	adds.w	r1, ip, r1
900006dc:	f106 38ff 	add.w	r8, r6, #4294967295
900006e0:	d216      	bcs.n	90000710 <__udivmoddi4+0x2b0>
900006e2:	428b      	cmp	r3, r1
900006e4:	d914      	bls.n	90000710 <__udivmoddi4+0x2b0>
900006e6:	3e02      	subs	r6, #2
900006e8:	4461      	add	r1, ip
900006ea:	1ac9      	subs	r1, r1, r3
900006ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
900006f0:	e738      	b.n	90000564 <__udivmoddi4+0x104>
900006f2:	462e      	mov	r6, r5
900006f4:	4628      	mov	r0, r5
900006f6:	e705      	b.n	90000504 <__udivmoddi4+0xa4>
900006f8:	4606      	mov	r6, r0
900006fa:	e6e3      	b.n	900004c4 <__udivmoddi4+0x64>
900006fc:	4618      	mov	r0, r3
900006fe:	e6f8      	b.n	900004f2 <__udivmoddi4+0x92>
90000700:	454b      	cmp	r3, r9
90000702:	d2a9      	bcs.n	90000658 <__udivmoddi4+0x1f8>
90000704:	ebb9 0802 	subs.w	r8, r9, r2
90000708:	eb64 0e0c 	sbc.w	lr, r4, ip
9000070c:	3801      	subs	r0, #1
9000070e:	e7a3      	b.n	90000658 <__udivmoddi4+0x1f8>
90000710:	4646      	mov	r6, r8
90000712:	e7ea      	b.n	900006ea <__udivmoddi4+0x28a>
90000714:	4620      	mov	r0, r4
90000716:	e794      	b.n	90000642 <__udivmoddi4+0x1e2>
90000718:	4640      	mov	r0, r8
9000071a:	e7d1      	b.n	900006c0 <__udivmoddi4+0x260>
9000071c:	46d0      	mov	r8, sl
9000071e:	e77b      	b.n	90000618 <__udivmoddi4+0x1b8>
90000720:	3b02      	subs	r3, #2
90000722:	4461      	add	r1, ip
90000724:	e732      	b.n	9000058c <__udivmoddi4+0x12c>
90000726:	4630      	mov	r0, r6
90000728:	e709      	b.n	9000053e <__udivmoddi4+0xde>
9000072a:	4464      	add	r4, ip
9000072c:	3802      	subs	r0, #2
9000072e:	e742      	b.n	900005b6 <__udivmoddi4+0x156>

90000730 <__aeabi_idiv0>:
90000730:	4770      	bx	lr
90000732:	bf00      	nop

90000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
90000734:	b580      	push	{r7, lr}
90000736:	b082      	sub	sp, #8
90000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
9000073a:	4b19      	ldr	r3, [pc, #100]	; (900007a0 <MX_DMA_Init+0x6c>)
9000073c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
90000740:	4a17      	ldr	r2, [pc, #92]	; (900007a0 <MX_DMA_Init+0x6c>)
90000742:	f043 0301 	orr.w	r3, r3, #1
90000746:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
9000074a:	4b15      	ldr	r3, [pc, #84]	; (900007a0 <MX_DMA_Init+0x6c>)
9000074c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
90000750:	f003 0301 	and.w	r3, r3, #1
90000754:	607b      	str	r3, [r7, #4]
90000756:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
90000758:	2200      	movs	r2, #0
9000075a:	2105      	movs	r1, #5
9000075c:	200b      	movs	r0, #11
9000075e:	f003 fad7 	bl	90003d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
90000762:	200b      	movs	r0, #11
90000764:	f003 faee 	bl	90003d44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
90000768:	2200      	movs	r2, #0
9000076a:	2105      	movs	r1, #5
9000076c:	200c      	movs	r0, #12
9000076e:	f003 facf 	bl	90003d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
90000772:	200c      	movs	r0, #12
90000774:	f003 fae6 	bl	90003d44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
90000778:	2200      	movs	r2, #0
9000077a:	2105      	movs	r1, #5
9000077c:	200d      	movs	r0, #13
9000077e:	f003 fac7 	bl	90003d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
90000782:	200d      	movs	r0, #13
90000784:	f003 fade 	bl	90003d44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
90000788:	2200      	movs	r2, #0
9000078a:	2105      	movs	r1, #5
9000078c:	200e      	movs	r0, #14
9000078e:	f003 fabf 	bl	90003d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
90000792:	200e      	movs	r0, #14
90000794:	f003 fad6 	bl	90003d44 <HAL_NVIC_EnableIRQ>

}
90000798:	bf00      	nop
9000079a:	3708      	adds	r7, #8
9000079c:	46bd      	mov	sp, r7
9000079e:	bd80      	pop	{r7, pc}
900007a0:	58024400 	.word	0x58024400

900007a4 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
900007a4:	b580      	push	{r7, lr}
900007a6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
900007a8:	4a14      	ldr	r2, [pc, #80]	; (900007fc <_Z16MX_FREERTOS_Initv+0x58>)
900007aa:	2100      	movs	r1, #0
900007ac:	4814      	ldr	r0, [pc, #80]	; (90000800 <_Z16MX_FREERTOS_Initv+0x5c>)
900007ae:	f00d faf7 	bl	9000dda0 <osThreadNew>
900007b2:	4603      	mov	r3, r0
900007b4:	4a13      	ldr	r2, [pc, #76]	; (90000804 <_Z16MX_FREERTOS_Initv+0x60>)
900007b6:	6013      	str	r3, [r2, #0]

  /* creation of adsTask */
  adsTaskHandle = osThreadNew(StartAdsTask, NULL, &adsTask_attributes);
900007b8:	4a13      	ldr	r2, [pc, #76]	; (90000808 <_Z16MX_FREERTOS_Initv+0x64>)
900007ba:	2100      	movs	r1, #0
900007bc:	4813      	ldr	r0, [pc, #76]	; (9000080c <_Z16MX_FREERTOS_Initv+0x68>)
900007be:	f00d faef 	bl	9000dda0 <osThreadNew>
900007c2:	4603      	mov	r3, r0
900007c4:	4a12      	ldr	r2, [pc, #72]	; (90000810 <_Z16MX_FREERTOS_Initv+0x6c>)
900007c6:	6013      	str	r3, [r2, #0]

  /* creation of gpioTask */
  gpioTaskHandle = osThreadNew(StartGPIOTask, NULL, &gpioTask_attributes);
900007c8:	4a12      	ldr	r2, [pc, #72]	; (90000814 <_Z16MX_FREERTOS_Initv+0x70>)
900007ca:	2100      	movs	r1, #0
900007cc:	4812      	ldr	r0, [pc, #72]	; (90000818 <_Z16MX_FREERTOS_Initv+0x74>)
900007ce:	f00d fae7 	bl	9000dda0 <osThreadNew>
900007d2:	4603      	mov	r3, r0
900007d4:	4a11      	ldr	r2, [pc, #68]	; (9000081c <_Z16MX_FREERTOS_Initv+0x78>)
900007d6:	6013      	str	r3, [r2, #0]

  /* creation of bmpTask */
  bmpTaskHandle = osThreadNew(StartBMPTask, NULL, &bmpTask_attributes);
900007d8:	4a11      	ldr	r2, [pc, #68]	; (90000820 <_Z16MX_FREERTOS_Initv+0x7c>)
900007da:	2100      	movs	r1, #0
900007dc:	4811      	ldr	r0, [pc, #68]	; (90000824 <_Z16MX_FREERTOS_Initv+0x80>)
900007de:	f00d fadf 	bl	9000dda0 <osThreadNew>
900007e2:	4603      	mov	r3, r0
900007e4:	4a10      	ldr	r2, [pc, #64]	; (90000828 <_Z16MX_FREERTOS_Initv+0x84>)
900007e6:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
900007e8:	4a10      	ldr	r2, [pc, #64]	; (9000082c <_Z16MX_FREERTOS_Initv+0x88>)
900007ea:	2100      	movs	r1, #0
900007ec:	4810      	ldr	r0, [pc, #64]	; (90000830 <_Z16MX_FREERTOS_Initv+0x8c>)
900007ee:	f00d fad7 	bl	9000dda0 <osThreadNew>
900007f2:	4603      	mov	r3, r0
900007f4:	4a0f      	ldr	r2, [pc, #60]	; (90000834 <_Z16MX_FREERTOS_Initv+0x90>)
900007f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
900007f8:	bf00      	nop
900007fa:	bd80      	pop	{r7, pc}
900007fc:	90013e3c 	.word	0x90013e3c
90000800:	90000839 	.word	0x90000839
90000804:	24000564 	.word	0x24000564
90000808:	90013e60 	.word	0x90013e60
9000080c:	90000859 	.word	0x90000859
90000810:	24000568 	.word	0x24000568
90000814:	90013e84 	.word	0x90013e84
90000818:	90000959 	.word	0x90000959
9000081c:	2400056c 	.word	0x2400056c
90000820:	90013ea8 	.word	0x90013ea8
90000824:	900009c9 	.word	0x900009c9
90000828:	24000570 	.word	0x24000570
9000082c:	90013ecc 	.word	0x90013ecc
90000830:	90000b3d 	.word	0x90000b3d
90000834:	24000574 	.word	0x24000574

90000838 <_Z12StartBlink01Pv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
90000838:	b580      	push	{r7, lr}
9000083a:	b082      	sub	sp, #8
9000083c:	af00      	add	r7, sp, #0
9000083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
90000840:	2180      	movs	r1, #128	; 0x80
90000842:	4804      	ldr	r0, [pc, #16]	; (90000854 <_Z12StartBlink01Pv+0x1c>)
90000844:	f006 fc17 	bl	90007076 <HAL_GPIO_TogglePin>
    osDelay(1000);
90000848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
9000084c:	f00d fb3a 	bl	9000dec4 <osDelay>
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
90000850:	e7f6      	b.n	90000840 <_Z12StartBlink01Pv+0x8>
90000852:	bf00      	nop
90000854:	58020c00 	.word	0x58020c00

90000858 <_Z12StartAdsTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdsTask */
void StartAdsTask(void *argument)
{
90000858:	b580      	push	{r7, lr}
9000085a:	b084      	sub	sp, #16
9000085c:	af00      	add	r7, sp, #0
9000085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdsTask */
  #if defined(TEST_HAT_1)
	bool success = ADS1113_init(&voltmeter, &hi2c1, ADS_ADDR_GND);
90000860:	2248      	movs	r2, #72	; 0x48
90000862:	492d      	ldr	r1, [pc, #180]	; (90000918 <_Z12StartAdsTaskPv+0xc0>)
90000864:	482d      	ldr	r0, [pc, #180]	; (9000091c <_Z12StartAdsTaskPv+0xc4>)
90000866:	f002 f993 	bl	90002b90 <ADS1113_init>
9000086a:	4603      	mov	r3, r0
9000086c:	73fb      	strb	r3, [r7, #15]
	uint8_t hat_number = 1;
9000086e:	2301      	movs	r3, #1
90000870:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_DeInit(&hi2c3);
	bool success = ADS1113_init(&voltmeter, &hi2c3, ADS_ADDR_GND);
	uint8_t hat_number = 3;
  #endif

	ADSsetGain(&voltmeter, GAIN_ONE);
90000872:	f44f 7100 	mov.w	r1, #512	; 0x200
90000876:	4829      	ldr	r0, [pc, #164]	; (9000091c <_Z12StartAdsTaskPv+0xc4>)
90000878:	f002 fa0c 	bl	90002c94 <ADSsetGain>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
9000087c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90000880:	f00d fb20 	bl	9000dec4 <osDelay>
    if (success) {
90000884:	7bfb      	ldrb	r3, [r7, #15]
90000886:	2b00      	cmp	r3, #0
90000888:	d0f8      	beq.n	9000087c <_Z12StartAdsTaskPv+0x24>
		int16_t val = ADSreadADC_Differential_0_1(&voltmeter);
9000088a:	4824      	ldr	r0, [pc, #144]	; (9000091c <_Z12StartAdsTaskPv+0xc4>)
9000088c:	f002 fa54 	bl	90002d38 <ADSreadADC_Differential_0_1>
90000890:	4603      	mov	r3, r0
90000892:	81bb      	strh	r3, [r7, #12]
		printf("Differential value %d\n", val);
90000894:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
90000898:	4619      	mov	r1, r3
9000089a:	4821      	ldr	r0, [pc, #132]	; (90000920 <_Z12StartAdsTaskPv+0xc8>)
9000089c:	f011 f8ba 	bl	90011a14 <iprintf>
		sprintf((char*)ADS_MSG3, "from UART3 (HAT %d): Differential value %d \n \r", hat_number, val);
900008a0:	7bba      	ldrb	r2, [r7, #14]
900008a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
900008a6:	491f      	ldr	r1, [pc, #124]	; (90000924 <_Z12StartAdsTaskPv+0xcc>)
900008a8:	481f      	ldr	r0, [pc, #124]	; (90000928 <_Z12StartAdsTaskPv+0xd0>)
900008aa:	f011 f945 	bl	90011b38 <siprintf>
		sprintf((char*)ADS_MSG4, "from UART4 (HAT %d): Differential value %d \n \r", hat_number, val);
900008ae:	7bba      	ldrb	r2, [r7, #14]
900008b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
900008b4:	491d      	ldr	r1, [pc, #116]	; (9000092c <_Z12StartAdsTaskPv+0xd4>)
900008b6:	481e      	ldr	r0, [pc, #120]	; (90000930 <_Z12StartAdsTaskPv+0xd8>)
900008b8:	f011 f93e 	bl	90011b38 <siprintf>
		sprintf((char*)ADS_MSG5, "from UART5 (HAT %d): Differential value %d \n \r", hat_number, val);
900008bc:	7bba      	ldrb	r2, [r7, #14]
900008be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
900008c2:	491c      	ldr	r1, [pc, #112]	; (90000934 <_Z12StartAdsTaskPv+0xdc>)
900008c4:	481c      	ldr	r0, [pc, #112]	; (90000938 <_Z12StartAdsTaskPv+0xe0>)
900008c6:	f011 f937 	bl	90011b38 <siprintf>
		sprintf((char*)ADS_MSG8, "from UART8 (HAT %d): Differential value %d \n \r", hat_number, val);
900008ca:	7bba      	ldrb	r2, [r7, #14]
900008cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
900008d0:	491a      	ldr	r1, [pc, #104]	; (9000093c <_Z12StartAdsTaskPv+0xe4>)
900008d2:	481b      	ldr	r0, [pc, #108]	; (90000940 <_Z12StartAdsTaskPv+0xe8>)
900008d4:	f011 f930 	bl	90011b38 <siprintf>
		HAL_UART_Transmit(&huart3, ADS_MSG3, sizeof(ADS_MSG3), 100);
900008d8:	2364      	movs	r3, #100	; 0x64
900008da:	2264      	movs	r2, #100	; 0x64
900008dc:	4912      	ldr	r1, [pc, #72]	; (90000928 <_Z12StartAdsTaskPv+0xd0>)
900008de:	4819      	ldr	r0, [pc, #100]	; (90000944 <_Z12StartAdsTaskPv+0xec>)
900008e0:	f00b fa5e 	bl	9000bda0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, ADS_MSG4, sizeof(ADS_MSG4), 100);
900008e4:	2364      	movs	r3, #100	; 0x64
900008e6:	2264      	movs	r2, #100	; 0x64
900008e8:	4911      	ldr	r1, [pc, #68]	; (90000930 <_Z12StartAdsTaskPv+0xd8>)
900008ea:	4817      	ldr	r0, [pc, #92]	; (90000948 <_Z12StartAdsTaskPv+0xf0>)
900008ec:	f00b fa58 	bl	9000bda0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, ADS_MSG5, sizeof(ADS_MSG5), 100);
900008f0:	2364      	movs	r3, #100	; 0x64
900008f2:	2264      	movs	r2, #100	; 0x64
900008f4:	4910      	ldr	r1, [pc, #64]	; (90000938 <_Z12StartAdsTaskPv+0xe0>)
900008f6:	4815      	ldr	r0, [pc, #84]	; (9000094c <_Z12StartAdsTaskPv+0xf4>)
900008f8:	f00b fa52 	bl	9000bda0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart8, ADS_MSG8, sizeof(ADS_MSG8), 100);
900008fc:	2364      	movs	r3, #100	; 0x64
900008fe:	2264      	movs	r2, #100	; 0x64
90000900:	490f      	ldr	r1, [pc, #60]	; (90000940 <_Z12StartAdsTaskPv+0xe8>)
90000902:	4813      	ldr	r0, [pc, #76]	; (90000950 <_Z12StartAdsTaskPv+0xf8>)
90000904:	f00b fa4c 	bl	9000bda0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, ADS_MSG8, sizeof(ADS_MSG8), 100);
90000908:	2364      	movs	r3, #100	; 0x64
9000090a:	2264      	movs	r2, #100	; 0x64
9000090c:	490c      	ldr	r1, [pc, #48]	; (90000940 <_Z12StartAdsTaskPv+0xe8>)
9000090e:	4811      	ldr	r0, [pc, #68]	; (90000954 <_Z12StartAdsTaskPv+0xfc>)
90000910:	f00b fa46 	bl	9000bda0 <HAL_UART_Transmit>
	}
  }
90000914:	e7b2      	b.n	9000087c <_Z12StartAdsTaskPv+0x24>
90000916:	bf00      	nop
90000918:	24000578 	.word	0x24000578
9000091c:	2400022c 	.word	0x2400022c
90000920:	90013c1c 	.word	0x90013c1c
90000924:	90013c34 	.word	0x90013c34
90000928:	24000244 	.word	0x24000244
9000092c:	90013c64 	.word	0x90013c64
90000930:	240002a8 	.word	0x240002a8
90000934:	90013c94 	.word	0x90013c94
90000938:	2400030c 	.word	0x2400030c
9000093c:	90013cc4 	.word	0x90013cc4
90000940:	24000370 	.word	0x24000370
90000944:	24000bb4 	.word	0x24000bb4
90000948:	24000974 	.word	0x24000974
9000094c:	24000a04 	.word	0x24000a04
90000950:	24000a94 	.word	0x24000a94
90000954:	24000b24 	.word	0x24000b24

90000958 <_Z13StartGPIOTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPIOTask */
void StartGPIOTask(void *argument)
{
90000958:	b580      	push	{r7, lr}
9000095a:	b082      	sub	sp, #8
9000095c:	af00      	add	r7, sp, #0
9000095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGPIOTask */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(HAT_P1_GPIO_Port, HAT_P1_Pin);
90000960:	2140      	movs	r1, #64	; 0x40
90000962:	4817      	ldr	r0, [pc, #92]	; (900009c0 <_Z13StartGPIOTaskPv+0x68>)
90000964:	f006 fb87 	bl	90007076 <HAL_GPIO_TogglePin>
    osDelay(100);
90000968:	2064      	movs	r0, #100	; 0x64
9000096a:	f00d faab 	bl	9000dec4 <osDelay>
    HAL_GPIO_TogglePin(HAT_P2_GPIO_Port, HAT_P2_Pin);
9000096e:	2180      	movs	r1, #128	; 0x80
90000970:	4813      	ldr	r0, [pc, #76]	; (900009c0 <_Z13StartGPIOTaskPv+0x68>)
90000972:	f006 fb80 	bl	90007076 <HAL_GPIO_TogglePin>
    osDelay(100);
90000976:	2064      	movs	r0, #100	; 0x64
90000978:	f00d faa4 	bl	9000dec4 <osDelay>
    HAL_GPIO_TogglePin(HAT_P3_GPIO_Port, HAT_P3_Pin);
9000097c:	f44f 7180 	mov.w	r1, #256	; 0x100
90000980:	480f      	ldr	r0, [pc, #60]	; (900009c0 <_Z13StartGPIOTaskPv+0x68>)
90000982:	f006 fb78 	bl	90007076 <HAL_GPIO_TogglePin>
    osDelay(100);
90000986:	2064      	movs	r0, #100	; 0x64
90000988:	f00d fa9c 	bl	9000dec4 <osDelay>
	HAL_GPIO_TogglePin(HAT_P4_GPIO_Port, HAT_P4_Pin);
9000098c:	f44f 7100 	mov.w	r1, #512	; 0x200
90000990:	480c      	ldr	r0, [pc, #48]	; (900009c4 <_Z13StartGPIOTaskPv+0x6c>)
90000992:	f006 fb70 	bl	90007076 <HAL_GPIO_TogglePin>
    osDelay(100);
90000996:	2064      	movs	r0, #100	; 0x64
90000998:	f00d fa94 	bl	9000dec4 <osDelay>
    HAL_GPIO_TogglePin(HAT_P5_GPIO_Port, HAT_P5_Pin);
9000099c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
900009a0:	4808      	ldr	r0, [pc, #32]	; (900009c4 <_Z13StartGPIOTaskPv+0x6c>)
900009a2:	f006 fb68 	bl	90007076 <HAL_GPIO_TogglePin>
    osDelay(100);
900009a6:	2064      	movs	r0, #100	; 0x64
900009a8:	f00d fa8c 	bl	9000dec4 <osDelay>
    HAL_GPIO_TogglePin(HAT_P6_GPIO_Port, HAT_P6_Pin);
900009ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
900009b0:	4804      	ldr	r0, [pc, #16]	; (900009c4 <_Z13StartGPIOTaskPv+0x6c>)
900009b2:	f006 fb60 	bl	90007076 <HAL_GPIO_TogglePin>
    osDelay(100);
900009b6:	2064      	movs	r0, #100	; 0x64
900009b8:	f00d fa84 	bl	9000dec4 <osDelay>
	HAL_GPIO_TogglePin(HAT_P1_GPIO_Port, HAT_P1_Pin);
900009bc:	e7d0      	b.n	90000960 <_Z13StartGPIOTaskPv+0x8>
900009be:	bf00      	nop
900009c0:	58020800 	.word	0x58020800
900009c4:	58020000 	.word	0x58020000

900009c8 <_Z12StartBMPTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBMPTask */
void StartBMPTask(void *argument)
{
900009c8:	b580      	push	{r7, lr}
900009ca:	b094      	sub	sp, #80	; 0x50
900009cc:	af04      	add	r7, sp, #16
900009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBMPTask */
  osDelay(500);
900009d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
900009d4:	f00d fa76 	bl	9000dec4 <osDelay>

  #if defined(TEST_HAT_1)
	BMP280 bmp(&hspi1);
900009d8:	f107 030c 	add.w	r3, r7, #12
900009dc:	4948      	ldr	r1, [pc, #288]	; (90000b00 <_Z12StartBMPTaskPv+0x138>)
900009de:	4618      	mov	r0, r3
900009e0:	f002 fa02 	bl	90002de8 <_ZN6BMP280C1EP19__SPI_HandleTypeDef>
	uint8_t hat_number = 1;
900009e4:	2301      	movs	r3, #1
900009e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  #elif defined(TEST_HAT_3)
	BMP280 bmp(&hspi3);
	uint8_t hat_number = 3;
  #endif

  uint8_t status = bmp.initialize();
900009ea:	f107 030c 	add.w	r3, r7, #12
900009ee:	4618      	mov	r0, r3
900009f0:	f002 fa12 	bl	90002e18 <_ZN6BMP28010initializeEv>
900009f4:	4603      	mov	r3, r0
900009f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  /* Infinite loop */
  for(;;)
  {
	bmp.measure();
900009fa:	f107 030c 	add.w	r3, r7, #12
900009fe:	4618      	mov	r0, r3
90000a00:	f002 fbb6 	bl	90003170 <_ZN6BMP2807measureEv>
	printf("Pressure = %f \t Temperature = %f \n", bmp.measurement.pressure, bmp.measurement.temperature);
90000a04:	edd7 7a04 	vldr	s15, [r7, #16]
90000a08:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
90000a0c:	edd7 7a03 	vldr	s15, [r7, #12]
90000a10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
90000a14:	ed8d 7b00 	vstr	d7, [sp]
90000a18:	ec53 2b16 	vmov	r2, r3, d6
90000a1c:	4839      	ldr	r0, [pc, #228]	; (90000b04 <_Z12StartBMPTaskPv+0x13c>)
90000a1e:	f010 fff9 	bl	90011a14 <iprintf>
	sprintf((char*)BMP_MSG3, "from UART3 (HAT %d): Pressure = %f \t Temperature = %f \n \r", hat_number, bmp.measurement.pressure, bmp.measurement.temperature);
90000a22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
90000a26:	edd7 7a04 	vldr	s15, [r7, #16]
90000a2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
90000a2e:	edd7 6a03 	vldr	s13, [r7, #12]
90000a32:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
90000a36:	ed8d 6b02 	vstr	d6, [sp, #8]
90000a3a:	ed8d 7b00 	vstr	d7, [sp]
90000a3e:	461a      	mov	r2, r3
90000a40:	4931      	ldr	r1, [pc, #196]	; (90000b08 <_Z12StartBMPTaskPv+0x140>)
90000a42:	4832      	ldr	r0, [pc, #200]	; (90000b0c <_Z12StartBMPTaskPv+0x144>)
90000a44:	f011 f878 	bl	90011b38 <siprintf>
	sprintf((char*)BMP_MSG4, "from UART4 (HAT %d): Pressure = %f \t Temperature = %f \n \r", hat_number, bmp.measurement.pressure, bmp.measurement.temperature);
90000a48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
90000a4c:	edd7 7a04 	vldr	s15, [r7, #16]
90000a50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
90000a54:	edd7 6a03 	vldr	s13, [r7, #12]
90000a58:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
90000a5c:	ed8d 6b02 	vstr	d6, [sp, #8]
90000a60:	ed8d 7b00 	vstr	d7, [sp]
90000a64:	461a      	mov	r2, r3
90000a66:	492a      	ldr	r1, [pc, #168]	; (90000b10 <_Z12StartBMPTaskPv+0x148>)
90000a68:	482a      	ldr	r0, [pc, #168]	; (90000b14 <_Z12StartBMPTaskPv+0x14c>)
90000a6a:	f011 f865 	bl	90011b38 <siprintf>
	sprintf((char*)BMP_MSG5, "from UART5 (HAT %d): Pressure = %f \t Temperature = %f \n \r", hat_number, bmp.measurement.pressure, bmp.measurement.temperature);
90000a6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
90000a72:	edd7 7a04 	vldr	s15, [r7, #16]
90000a76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
90000a7a:	edd7 6a03 	vldr	s13, [r7, #12]
90000a7e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
90000a82:	ed8d 6b02 	vstr	d6, [sp, #8]
90000a86:	ed8d 7b00 	vstr	d7, [sp]
90000a8a:	461a      	mov	r2, r3
90000a8c:	4922      	ldr	r1, [pc, #136]	; (90000b18 <_Z12StartBMPTaskPv+0x150>)
90000a8e:	4823      	ldr	r0, [pc, #140]	; (90000b1c <_Z12StartBMPTaskPv+0x154>)
90000a90:	f011 f852 	bl	90011b38 <siprintf>
	sprintf((char*)BMP_MSG8, "from UART8 (HAT %d): Pressure = %f \t Temperature = %f \n \r", hat_number, bmp.measurement.pressure, bmp.measurement.temperature);
90000a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
90000a98:	edd7 7a04 	vldr	s15, [r7, #16]
90000a9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
90000aa0:	edd7 6a03 	vldr	s13, [r7, #12]
90000aa4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
90000aa8:	ed8d 6b02 	vstr	d6, [sp, #8]
90000aac:	ed8d 7b00 	vstr	d7, [sp]
90000ab0:	461a      	mov	r2, r3
90000ab2:	491b      	ldr	r1, [pc, #108]	; (90000b20 <_Z12StartBMPTaskPv+0x158>)
90000ab4:	481b      	ldr	r0, [pc, #108]	; (90000b24 <_Z12StartBMPTaskPv+0x15c>)
90000ab6:	f011 f83f 	bl	90011b38 <siprintf>
	HAL_UART_Transmit(&huart3, BMP_MSG3, sizeof(BMP_MSG3), 100);
90000aba:	2364      	movs	r3, #100	; 0x64
90000abc:	2264      	movs	r2, #100	; 0x64
90000abe:	4913      	ldr	r1, [pc, #76]	; (90000b0c <_Z12StartBMPTaskPv+0x144>)
90000ac0:	4819      	ldr	r0, [pc, #100]	; (90000b28 <_Z12StartBMPTaskPv+0x160>)
90000ac2:	f00b f96d 	bl	9000bda0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, BMP_MSG4, sizeof(BMP_MSG4), 100);
90000ac6:	2364      	movs	r3, #100	; 0x64
90000ac8:	2264      	movs	r2, #100	; 0x64
90000aca:	4912      	ldr	r1, [pc, #72]	; (90000b14 <_Z12StartBMPTaskPv+0x14c>)
90000acc:	4817      	ldr	r0, [pc, #92]	; (90000b2c <_Z12StartBMPTaskPv+0x164>)
90000ace:	f00b f967 	bl	9000bda0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, BMP_MSG5, sizeof(BMP_MSG5), 100);
90000ad2:	2364      	movs	r3, #100	; 0x64
90000ad4:	2264      	movs	r2, #100	; 0x64
90000ad6:	4911      	ldr	r1, [pc, #68]	; (90000b1c <_Z12StartBMPTaskPv+0x154>)
90000ad8:	4815      	ldr	r0, [pc, #84]	; (90000b30 <_Z12StartBMPTaskPv+0x168>)
90000ada:	f00b f961 	bl	9000bda0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart8, BMP_MSG8, sizeof(BMP_MSG8), 100);
90000ade:	2364      	movs	r3, #100	; 0x64
90000ae0:	2264      	movs	r2, #100	; 0x64
90000ae2:	4910      	ldr	r1, [pc, #64]	; (90000b24 <_Z12StartBMPTaskPv+0x15c>)
90000ae4:	4813      	ldr	r0, [pc, #76]	; (90000b34 <_Z12StartBMPTaskPv+0x16c>)
90000ae6:	f00b f95b 	bl	9000bda0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, BMP_MSG8, sizeof(BMP_MSG8), 100);
90000aea:	2364      	movs	r3, #100	; 0x64
90000aec:	2264      	movs	r2, #100	; 0x64
90000aee:	490d      	ldr	r1, [pc, #52]	; (90000b24 <_Z12StartBMPTaskPv+0x15c>)
90000af0:	4811      	ldr	r0, [pc, #68]	; (90000b38 <_Z12StartBMPTaskPv+0x170>)
90000af2:	f00b f955 	bl	9000bda0 <HAL_UART_Transmit>
	osDelay(1000);
90000af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90000afa:	f00d f9e3 	bl	9000dec4 <osDelay>
	bmp.measure();
90000afe:	e77c      	b.n	900009fa <_Z12StartBMPTaskPv+0x32>
90000b00:	24000740 	.word	0x24000740
90000b04:	90013cf4 	.word	0x90013cf4
90000b08:	90013d18 	.word	0x90013d18
90000b0c:	240003d4 	.word	0x240003d4
90000b10:	90013d54 	.word	0x90013d54
90000b14:	24000438 	.word	0x24000438
90000b18:	90013d90 	.word	0x90013d90
90000b1c:	2400049c 	.word	0x2400049c
90000b20:	90013dcc 	.word	0x90013dcc
90000b24:	24000500 	.word	0x24000500
90000b28:	24000bb4 	.word	0x24000bb4
90000b2c:	24000974 	.word	0x24000974
90000b30:	24000a04 	.word	0x24000a04
90000b34:	24000a94 	.word	0x24000a94
90000b38:	24000b24 	.word	0x24000b24

90000b3c <_Z12StartBlink02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
90000b3c:	b580      	push	{r7, lr}
90000b3e:	b082      	sub	sp, #8
90000b40:	af00      	add	r7, sp, #0
90000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
90000b44:	2104      	movs	r1, #4
90000b46:	4804      	ldr	r0, [pc, #16]	; (90000b58 <_Z12StartBlink02Pv+0x1c>)
90000b48:	f006 fa95 	bl	90007076 <HAL_GPIO_TogglePin>
	osDelay(600);
90000b4c:	f44f 7016 	mov.w	r0, #600	; 0x258
90000b50:	f00d f9b8 	bl	9000dec4 <osDelay>
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
90000b54:	e7f6      	b.n	90000b44 <_Z12StartBlink02Pv+0x8>
90000b56:	bf00      	nop
90000b58:	58020c00 	.word	0x58020c00

90000b5c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
90000b5c:	b580      	push	{r7, lr}
90000b5e:	b08c      	sub	sp, #48	; 0x30
90000b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000b62:	f107 031c 	add.w	r3, r7, #28
90000b66:	2200      	movs	r2, #0
90000b68:	601a      	str	r2, [r3, #0]
90000b6a:	605a      	str	r2, [r3, #4]
90000b6c:	609a      	str	r2, [r3, #8]
90000b6e:	60da      	str	r2, [r3, #12]
90000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000b72:	4b65      	ldr	r3, [pc, #404]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000b78:	4a63      	ldr	r2, [pc, #396]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000b7a:	f043 0304 	orr.w	r3, r3, #4
90000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000b82:	4b61      	ldr	r3, [pc, #388]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000b88:	f003 0304 	and.w	r3, r3, #4
90000b8c:	61bb      	str	r3, [r7, #24]
90000b8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000b90:	4b5d      	ldr	r3, [pc, #372]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000b96:	4a5c      	ldr	r2, [pc, #368]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000ba0:	4b59      	ldr	r3, [pc, #356]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
90000baa:	617b      	str	r3, [r7, #20]
90000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90000bae:	4b56      	ldr	r3, [pc, #344]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000bb4:	4a54      	ldr	r2, [pc, #336]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bb6:	f043 0301 	orr.w	r3, r3, #1
90000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000bbe:	4b52      	ldr	r3, [pc, #328]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000bc4:	f003 0301 	and.w	r3, r3, #1
90000bc8:	613b      	str	r3, [r7, #16]
90000bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90000bcc:	4b4e      	ldr	r3, [pc, #312]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000bd2:	4a4d      	ldr	r2, [pc, #308]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bd4:	f043 0302 	orr.w	r3, r3, #2
90000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000bdc:	4b4a      	ldr	r3, [pc, #296]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000be2:	f003 0302 	and.w	r3, r3, #2
90000be6:	60fb      	str	r3, [r7, #12]
90000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000bea:	4b47      	ldr	r3, [pc, #284]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000bf0:	4a45      	ldr	r2, [pc, #276]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bf2:	f043 0310 	orr.w	r3, r3, #16
90000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000bfa:	4b43      	ldr	r3, [pc, #268]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c00:	f003 0310 	and.w	r3, r3, #16
90000c04:	60bb      	str	r3, [r7, #8]
90000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90000c08:	4b3f      	ldr	r3, [pc, #252]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c0e:	4a3e      	ldr	r2, [pc, #248]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000c10:	f043 0308 	orr.w	r3, r3, #8
90000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000c18:	4b3b      	ldr	r3, [pc, #236]	; (90000d08 <MX_GPIO_Init+0x1ac>)
90000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c1e:	f003 0308 	and.w	r3, r3, #8
90000c22:	607b      	str	r3, [r7, #4]
90000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin|HAT3_P6_Pin|HAT3_P5_Pin|HAT1_P1_Pin
90000c26:	2200      	movs	r2, #0
90000c28:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
90000c2c:	4837      	ldr	r0, [pc, #220]	; (90000d0c <MX_GPIO_Init+0x1b0>)
90000c2e:	f006 fa09 	bl	90007044 <HAL_GPIO_WritePin>
                          |HAT1_P2_Pin|HAT1_P3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|HAT1_P4_Pin|HAT1_P6_Pin|HAT1_P5_Pin
90000c32:	2200      	movs	r2, #0
90000c34:	f649 2110 	movw	r1, #39440	; 0x9a10
90000c38:	4835      	ldr	r0, [pc, #212]	; (90000d10 <MX_GPIO_Init+0x1b4>)
90000c3a:	f006 fa03 	bl	90007044 <HAL_GPIO_WritePin>
                          |SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAT3_P3_Pin|HAT3_P4_Pin|HAT3_P1_Pin|HAT3_P2_Pin, GPIO_PIN_RESET);
90000c3e:	2200      	movs	r2, #0
90000c40:	21c3      	movs	r1, #195	; 0xc3
90000c42:	4834      	ldr	r0, [pc, #208]	; (90000d14 <MX_GPIO_Init+0x1b8>)
90000c44:	f006 f9fe 	bl	90007044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HAT2_P1_Pin|HAT2_P2_Pin|HAT2_P3_Pin|LED_YELLOW_Pin
90000c48:	2200      	movs	r2, #0
90000c4a:	f247 01f4 	movw	r1, #28916	; 0x70f4
90000c4e:	4832      	ldr	r0, [pc, #200]	; (90000d18 <MX_GPIO_Init+0x1bc>)
90000c50:	f006 f9f8 	bl	90007044 <HAL_GPIO_WritePin>
                          |HAT2_P5_Pin|HAT2_P6_Pin|HAT2_P4_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|HAT3_P6_Pin|HAT3_P5_Pin|HAT1_P1_Pin
90000c54:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
90000c58:	61fb      	str	r3, [r7, #28]
                          |HAT1_P2_Pin|HAT1_P3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000c5a:	2301      	movs	r3, #1
90000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c5e:	2300      	movs	r3, #0
90000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c62:	2300      	movs	r3, #0
90000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000c66:	f107 031c 	add.w	r3, r7, #28
90000c6a:	4619      	mov	r1, r3
90000c6c:	4827      	ldr	r0, [pc, #156]	; (90000d0c <MX_GPIO_Init+0x1b0>)
90000c6e:	f005 ff2f 	bl	90006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|HAT1_P4_Pin|HAT1_P6_Pin|HAT1_P5_Pin
90000c72:	f649 2310 	movw	r3, #39440	; 0x9a10
90000c76:	61fb      	str	r3, [r7, #28]
                          |SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000c78:	2301      	movs	r3, #1
90000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c7c:	2300      	movs	r3, #0
90000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c80:	2300      	movs	r3, #0
90000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000c84:	f107 031c 	add.w	r3, r7, #28
90000c88:	4619      	mov	r1, r3
90000c8a:	4821      	ldr	r0, [pc, #132]	; (90000d10 <MX_GPIO_Init+0x1b4>)
90000c8c:	f005 ff20 	bl	90006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HAT3_P3_Pin|HAT3_P4_Pin|HAT3_P1_Pin|HAT3_P2_Pin;
90000c90:	23c3      	movs	r3, #195	; 0xc3
90000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000c94:	2301      	movs	r3, #1
90000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c98:	2300      	movs	r3, #0
90000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c9c:	2300      	movs	r3, #0
90000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000ca0:	f107 031c 	add.w	r3, r7, #28
90000ca4:	4619      	mov	r1, r3
90000ca6:	481b      	ldr	r0, [pc, #108]	; (90000d14 <MX_GPIO_Init+0x1b8>)
90000ca8:	f005 ff12 	bl	90006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SEL0_Pin|SEL1_Pin|SEL2_Pin;
90000cac:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
90000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000cb2:	2300      	movs	r3, #0
90000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cb6:	2300      	movs	r3, #0
90000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90000cba:	f107 031c 	add.w	r3, r7, #28
90000cbe:	4619      	mov	r1, r3
90000cc0:	4816      	ldr	r0, [pc, #88]	; (90000d1c <MX_GPIO_Init+0x1c0>)
90000cc2:	f005 ff05 	bl	90006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_5V_Pin;
90000cc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
90000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000ccc:	2300      	movs	r3, #0
90000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cd0:	2300      	movs	r3, #0
90000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STATUS_5V_GPIO_Port, &GPIO_InitStruct);
90000cd4:	f107 031c 	add.w	r3, r7, #28
90000cd8:	4619      	mov	r1, r3
90000cda:	480f      	ldr	r0, [pc, #60]	; (90000d18 <MX_GPIO_Init+0x1bc>)
90000cdc:	f005 fef8 	bl	90006ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HAT2_P1_Pin|HAT2_P2_Pin|HAT2_P3_Pin|LED_YELLOW_Pin
90000ce0:	f247 03f4 	movw	r3, #28916	; 0x70f4
90000ce4:	61fb      	str	r3, [r7, #28]
                          |HAT2_P5_Pin|HAT2_P6_Pin|HAT2_P4_Pin|LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000ce6:	2301      	movs	r3, #1
90000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cea:	2300      	movs	r3, #0
90000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000cee:	2300      	movs	r3, #0
90000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000cf2:	f107 031c 	add.w	r3, r7, #28
90000cf6:	4619      	mov	r1, r3
90000cf8:	4807      	ldr	r0, [pc, #28]	; (90000d18 <MX_GPIO_Init+0x1bc>)
90000cfa:	f005 fee9 	bl	90006ad0 <HAL_GPIO_Init>

}
90000cfe:	bf00      	nop
90000d00:	3730      	adds	r7, #48	; 0x30
90000d02:	46bd      	mov	sp, r7
90000d04:	bd80      	pop	{r7, pc}
90000d06:	bf00      	nop
90000d08:	58024400 	.word	0x58024400
90000d0c:	58020800 	.word	0x58020800
90000d10:	58020000 	.word	0x58020000
90000d14:	58020400 	.word	0x58020400
90000d18:	58020c00 	.word	0x58020c00
90000d1c:	58021000 	.word	0x58021000

90000d20 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
90000d20:	b580      	push	{r7, lr}
90000d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
90000d24:	4b1b      	ldr	r3, [pc, #108]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d26:	4a1c      	ldr	r2, [pc, #112]	; (90000d98 <MX_I2C1_Init+0x78>)
90000d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
90000d2a:	4b1a      	ldr	r3, [pc, #104]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d2c:	4a1b      	ldr	r2, [pc, #108]	; (90000d9c <MX_I2C1_Init+0x7c>)
90000d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
90000d30:	4b18      	ldr	r3, [pc, #96]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d32:	2200      	movs	r2, #0
90000d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
90000d36:	4b17      	ldr	r3, [pc, #92]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d38:	2201      	movs	r2, #1
90000d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
90000d3c:	4b15      	ldr	r3, [pc, #84]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d3e:	2200      	movs	r2, #0
90000d40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
90000d42:	4b14      	ldr	r3, [pc, #80]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d44:	2200      	movs	r2, #0
90000d46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90000d48:	4b12      	ldr	r3, [pc, #72]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d4a:	2200      	movs	r2, #0
90000d4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
90000d4e:	4b11      	ldr	r3, [pc, #68]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d50:	2200      	movs	r2, #0
90000d52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
90000d54:	4b0f      	ldr	r3, [pc, #60]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d56:	2200      	movs	r2, #0
90000d58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
90000d5a:	480e      	ldr	r0, [pc, #56]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d5c:	f006 f9a6 	bl	900070ac <HAL_I2C_Init>
90000d60:	4603      	mov	r3, r0
90000d62:	2b00      	cmp	r3, #0
90000d64:	d001      	beq.n	90000d6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
90000d66:	f000 fd17 	bl	90001798 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
90000d6a:	2100      	movs	r1, #0
90000d6c:	4809      	ldr	r0, [pc, #36]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d6e:	f007 f92f 	bl	90007fd0 <HAL_I2CEx_ConfigAnalogFilter>
90000d72:	4603      	mov	r3, r0
90000d74:	2b00      	cmp	r3, #0
90000d76:	d001      	beq.n	90000d7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
90000d78:	f000 fd0e 	bl	90001798 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
90000d7c:	2100      	movs	r1, #0
90000d7e:	4805      	ldr	r0, [pc, #20]	; (90000d94 <MX_I2C1_Init+0x74>)
90000d80:	f007 f971 	bl	90008066 <HAL_I2CEx_ConfigDigitalFilter>
90000d84:	4603      	mov	r3, r0
90000d86:	2b00      	cmp	r3, #0
90000d88:	d001      	beq.n	90000d8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
90000d8a:	f000 fd05 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
90000d8e:	bf00      	nop
90000d90:	bd80      	pop	{r7, pc}
90000d92:	bf00      	nop
90000d94:	24000578 	.word	0x24000578
90000d98:	40005400 	.word	0x40005400
90000d9c:	307075b1 	.word	0x307075b1

90000da0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
90000da0:	b580      	push	{r7, lr}
90000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
90000da4:	4b1b      	ldr	r3, [pc, #108]	; (90000e14 <MX_I2C2_Init+0x74>)
90000da6:	4a1c      	ldr	r2, [pc, #112]	; (90000e18 <MX_I2C2_Init+0x78>)
90000da8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
90000daa:	4b1a      	ldr	r3, [pc, #104]	; (90000e14 <MX_I2C2_Init+0x74>)
90000dac:	4a1b      	ldr	r2, [pc, #108]	; (90000e1c <MX_I2C2_Init+0x7c>)
90000dae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
90000db0:	4b18      	ldr	r3, [pc, #96]	; (90000e14 <MX_I2C2_Init+0x74>)
90000db2:	2200      	movs	r2, #0
90000db4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
90000db6:	4b17      	ldr	r3, [pc, #92]	; (90000e14 <MX_I2C2_Init+0x74>)
90000db8:	2201      	movs	r2, #1
90000dba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
90000dbc:	4b15      	ldr	r3, [pc, #84]	; (90000e14 <MX_I2C2_Init+0x74>)
90000dbe:	2200      	movs	r2, #0
90000dc0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
90000dc2:	4b14      	ldr	r3, [pc, #80]	; (90000e14 <MX_I2C2_Init+0x74>)
90000dc4:	2200      	movs	r2, #0
90000dc6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90000dc8:	4b12      	ldr	r3, [pc, #72]	; (90000e14 <MX_I2C2_Init+0x74>)
90000dca:	2200      	movs	r2, #0
90000dcc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
90000dce:	4b11      	ldr	r3, [pc, #68]	; (90000e14 <MX_I2C2_Init+0x74>)
90000dd0:	2200      	movs	r2, #0
90000dd2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
90000dd4:	4b0f      	ldr	r3, [pc, #60]	; (90000e14 <MX_I2C2_Init+0x74>)
90000dd6:	2200      	movs	r2, #0
90000dd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
90000dda:	480e      	ldr	r0, [pc, #56]	; (90000e14 <MX_I2C2_Init+0x74>)
90000ddc:	f006 f966 	bl	900070ac <HAL_I2C_Init>
90000de0:	4603      	mov	r3, r0
90000de2:	2b00      	cmp	r3, #0
90000de4:	d001      	beq.n	90000dea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
90000de6:	f000 fcd7 	bl	90001798 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
90000dea:	2100      	movs	r1, #0
90000dec:	4809      	ldr	r0, [pc, #36]	; (90000e14 <MX_I2C2_Init+0x74>)
90000dee:	f007 f8ef 	bl	90007fd0 <HAL_I2CEx_ConfigAnalogFilter>
90000df2:	4603      	mov	r3, r0
90000df4:	2b00      	cmp	r3, #0
90000df6:	d001      	beq.n	90000dfc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
90000df8:	f000 fcce 	bl	90001798 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
90000dfc:	2100      	movs	r1, #0
90000dfe:	4805      	ldr	r0, [pc, #20]	; (90000e14 <MX_I2C2_Init+0x74>)
90000e00:	f007 f931 	bl	90008066 <HAL_I2CEx_ConfigDigitalFilter>
90000e04:	4603      	mov	r3, r0
90000e06:	2b00      	cmp	r3, #0
90000e08:	d001      	beq.n	90000e0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
90000e0a:	f000 fcc5 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
90000e0e:	bf00      	nop
90000e10:	bd80      	pop	{r7, pc}
90000e12:	bf00      	nop
90000e14:	240005c4 	.word	0x240005c4
90000e18:	40005800 	.word	0x40005800
90000e1c:	307075b1 	.word	0x307075b1

90000e20 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
90000e20:	b580      	push	{r7, lr}
90000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
90000e24:	4b1b      	ldr	r3, [pc, #108]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e26:	4a1c      	ldr	r2, [pc, #112]	; (90000e98 <MX_I2C3_Init+0x78>)
90000e28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
90000e2a:	4b1a      	ldr	r3, [pc, #104]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e2c:	4a1b      	ldr	r2, [pc, #108]	; (90000e9c <MX_I2C3_Init+0x7c>)
90000e2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
90000e30:	4b18      	ldr	r3, [pc, #96]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e32:	2200      	movs	r2, #0
90000e34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
90000e36:	4b17      	ldr	r3, [pc, #92]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e38:	2201      	movs	r2, #1
90000e3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
90000e3c:	4b15      	ldr	r3, [pc, #84]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e3e:	2200      	movs	r2, #0
90000e40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
90000e42:	4b14      	ldr	r3, [pc, #80]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e44:	2200      	movs	r2, #0
90000e46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90000e48:	4b12      	ldr	r3, [pc, #72]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e4a:	2200      	movs	r2, #0
90000e4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
90000e4e:	4b11      	ldr	r3, [pc, #68]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e50:	2200      	movs	r2, #0
90000e52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
90000e54:	4b0f      	ldr	r3, [pc, #60]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e56:	2200      	movs	r2, #0
90000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
90000e5a:	480e      	ldr	r0, [pc, #56]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e5c:	f006 f926 	bl	900070ac <HAL_I2C_Init>
90000e60:	4603      	mov	r3, r0
90000e62:	2b00      	cmp	r3, #0
90000e64:	d001      	beq.n	90000e6a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
90000e66:	f000 fc97 	bl	90001798 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
90000e6a:	2100      	movs	r1, #0
90000e6c:	4809      	ldr	r0, [pc, #36]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e6e:	f007 f8af 	bl	90007fd0 <HAL_I2CEx_ConfigAnalogFilter>
90000e72:	4603      	mov	r3, r0
90000e74:	2b00      	cmp	r3, #0
90000e76:	d001      	beq.n	90000e7c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
90000e78:	f000 fc8e 	bl	90001798 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
90000e7c:	2100      	movs	r1, #0
90000e7e:	4805      	ldr	r0, [pc, #20]	; (90000e94 <MX_I2C3_Init+0x74>)
90000e80:	f007 f8f1 	bl	90008066 <HAL_I2CEx_ConfigDigitalFilter>
90000e84:	4603      	mov	r3, r0
90000e86:	2b00      	cmp	r3, #0
90000e88:	d001      	beq.n	90000e8e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
90000e8a:	f000 fc85 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
90000e8e:	bf00      	nop
90000e90:	bd80      	pop	{r7, pc}
90000e92:	bf00      	nop
90000e94:	24000610 	.word	0x24000610
90000e98:	40005c00 	.word	0x40005c00
90000e9c:	307075b1 	.word	0x307075b1

90000ea0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
90000ea0:	b580      	push	{r7, lr}
90000ea2:	b0be      	sub	sp, #248	; 0xf8
90000ea4:	af00      	add	r7, sp, #0
90000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000ea8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90000eac:	2200      	movs	r2, #0
90000eae:	601a      	str	r2, [r3, #0]
90000eb0:	605a      	str	r2, [r3, #4]
90000eb2:	609a      	str	r2, [r3, #8]
90000eb4:	60da      	str	r2, [r3, #12]
90000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
90000ebc:	22bc      	movs	r2, #188	; 0xbc
90000ebe:	2100      	movs	r1, #0
90000ec0:	4618      	mov	r0, r3
90000ec2:	f010 f8c6 	bl	90011052 <memset>
  if(i2cHandle->Instance==I2C1)
90000ec6:	687b      	ldr	r3, [r7, #4]
90000ec8:	681b      	ldr	r3, [r3, #0]
90000eca:	4a80      	ldr	r2, [pc, #512]	; (900010cc <HAL_I2C_MspInit+0x22c>)
90000ecc:	4293      	cmp	r3, r2
90000ece:	d143      	bne.n	90000f58 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
90000ed0:	2308      	movs	r3, #8
90000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
90000ed4:	2300      	movs	r3, #0
90000ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
90000ede:	4618      	mov	r0, r3
90000ee0:	f008 f968 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90000ee4:	4603      	mov	r3, r0
90000ee6:	2b00      	cmp	r3, #0
90000ee8:	d001      	beq.n	90000eee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
90000eea:	f000 fc55 	bl	90001798 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
90000eee:	4b78      	ldr	r3, [pc, #480]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000ef4:	4a76      	ldr	r2, [pc, #472]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000ef6:	f043 0302 	orr.w	r3, r3, #2
90000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000efe:	4b74      	ldr	r3, [pc, #464]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000f04:	f003 0302 	and.w	r3, r3, #2
90000f08:	627b      	str	r3, [r7, #36]	; 0x24
90000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
90000f0c:	f44f 7340 	mov.w	r3, #768	; 0x300
90000f10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000f14:	2312      	movs	r3, #18
90000f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000f1a:	2300      	movs	r3, #0
90000f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000f20:	2300      	movs	r3, #0
90000f22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
90000f26:	2304      	movs	r3, #4
90000f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000f2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90000f30:	4619      	mov	r1, r3
90000f32:	4868      	ldr	r0, [pc, #416]	; (900010d4 <HAL_I2C_MspInit+0x234>)
90000f34:	f005 fdcc 	bl	90006ad0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
90000f38:	4b65      	ldr	r3, [pc, #404]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000f3e:	4a64      	ldr	r2, [pc, #400]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90000f44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90000f48:	4b61      	ldr	r3, [pc, #388]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90000f52:	623b      	str	r3, [r7, #32]
90000f54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
90000f56:	e0b5      	b.n	900010c4 <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C2)
90000f58:	687b      	ldr	r3, [r7, #4]
90000f5a:	681b      	ldr	r3, [r3, #0]
90000f5c:	4a5e      	ldr	r2, [pc, #376]	; (900010d8 <HAL_I2C_MspInit+0x238>)
90000f5e:	4293      	cmp	r3, r2
90000f60:	d143      	bne.n	90000fea <HAL_I2C_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
90000f62:	2308      	movs	r3, #8
90000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
90000f66:	2300      	movs	r3, #0
90000f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
90000f70:	4618      	mov	r0, r3
90000f72:	f008 f91f 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90000f76:	4603      	mov	r3, r0
90000f78:	2b00      	cmp	r3, #0
90000f7a:	d001      	beq.n	90000f80 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
90000f7c:	f000 fc0c 	bl	90001798 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
90000f80:	4b53      	ldr	r3, [pc, #332]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000f86:	4a52      	ldr	r2, [pc, #328]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000f88:	f043 0302 	orr.w	r3, r3, #2
90000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000f90:	4b4f      	ldr	r3, [pc, #316]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000f96:	f003 0302 	and.w	r3, r3, #2
90000f9a:	61fb      	str	r3, [r7, #28]
90000f9c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
90000f9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
90000fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000fa6:	2312      	movs	r3, #18
90000fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000fac:	2300      	movs	r3, #0
90000fae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000fb2:	2300      	movs	r3, #0
90000fb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
90000fb8:	2304      	movs	r3, #4
90000fba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000fbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90000fc2:	4619      	mov	r1, r3
90000fc4:	4843      	ldr	r0, [pc, #268]	; (900010d4 <HAL_I2C_MspInit+0x234>)
90000fc6:	f005 fd83 	bl	90006ad0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
90000fca:	4b41      	ldr	r3, [pc, #260]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000fd0:	4a3f      	ldr	r2, [pc, #252]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90000fd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90000fda:	4b3d      	ldr	r3, [pc, #244]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90000fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90000fe4:	61bb      	str	r3, [r7, #24]
90000fe6:	69bb      	ldr	r3, [r7, #24]
}
90000fe8:	e06c      	b.n	900010c4 <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C3)
90000fea:	687b      	ldr	r3, [r7, #4]
90000fec:	681b      	ldr	r3, [r3, #0]
90000fee:	4a3b      	ldr	r2, [pc, #236]	; (900010dc <HAL_I2C_MspInit+0x23c>)
90000ff0:	4293      	cmp	r3, r2
90000ff2:	d167      	bne.n	900010c4 <HAL_I2C_MspInit+0x224>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
90000ff4:	2308      	movs	r3, #8
90000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
90000ff8:	2300      	movs	r3, #0
90000ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
90001002:	4618      	mov	r0, r3
90001004:	f008 f8d6 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90001008:	4603      	mov	r3, r0
9000100a:	2b00      	cmp	r3, #0
9000100c:	d001      	beq.n	90001012 <HAL_I2C_MspInit+0x172>
      Error_Handler();
9000100e:	f000 fbc3 	bl	90001798 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
90001012:	4b2f      	ldr	r3, [pc, #188]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001018:	4a2d      	ldr	r2, [pc, #180]	; (900010d0 <HAL_I2C_MspInit+0x230>)
9000101a:	f043 0304 	orr.w	r3, r3, #4
9000101e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001022:	4b2b      	ldr	r3, [pc, #172]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001028:	f003 0304 	and.w	r3, r3, #4
9000102c:	617b      	str	r3, [r7, #20]
9000102e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
90001030:	4b27      	ldr	r3, [pc, #156]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001036:	4a26      	ldr	r2, [pc, #152]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90001038:	f043 0301 	orr.w	r3, r3, #1
9000103c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001040:	4b23      	ldr	r3, [pc, #140]	; (900010d0 <HAL_I2C_MspInit+0x230>)
90001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001046:	f003 0301 	and.w	r3, r3, #1
9000104a:	613b      	str	r3, [r7, #16]
9000104c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
9000104e:	f44f 7300 	mov.w	r3, #512	; 0x200
90001052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90001056:	2312      	movs	r3, #18
90001058:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000105c:	2300      	movs	r3, #0
9000105e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001062:	2300      	movs	r3, #0
90001064:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
90001068:	2304      	movs	r3, #4
9000106a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000106e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90001072:	4619      	mov	r1, r3
90001074:	481a      	ldr	r0, [pc, #104]	; (900010e0 <HAL_I2C_MspInit+0x240>)
90001076:	f005 fd2b 	bl	90006ad0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
9000107a:	f44f 7380 	mov.w	r3, #256	; 0x100
9000107e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90001082:	2312      	movs	r3, #18
90001084:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001088:	2300      	movs	r3, #0
9000108a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000108e:	2300      	movs	r3, #0
90001090:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
90001094:	2304      	movs	r3, #4
90001096:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
9000109a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
9000109e:	4619      	mov	r1, r3
900010a0:	4810      	ldr	r0, [pc, #64]	; (900010e4 <HAL_I2C_MspInit+0x244>)
900010a2:	f005 fd15 	bl	90006ad0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
900010a6:	4b0a      	ldr	r3, [pc, #40]	; (900010d0 <HAL_I2C_MspInit+0x230>)
900010a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900010ac:	4a08      	ldr	r2, [pc, #32]	; (900010d0 <HAL_I2C_MspInit+0x230>)
900010ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
900010b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
900010b6:	4b06      	ldr	r3, [pc, #24]	; (900010d0 <HAL_I2C_MspInit+0x230>)
900010b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
900010bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900010c0:	60fb      	str	r3, [r7, #12]
900010c2:	68fb      	ldr	r3, [r7, #12]
}
900010c4:	bf00      	nop
900010c6:	37f8      	adds	r7, #248	; 0xf8
900010c8:	46bd      	mov	sp, r7
900010ca:	bd80      	pop	{r7, pc}
900010cc:	40005400 	.word	0x40005400
900010d0:	58024400 	.word	0x58024400
900010d4:	58020400 	.word	0x58020400
900010d8:	40005800 	.word	0x40005800
900010dc:	40005c00 	.word	0x40005c00
900010e0:	58020800 	.word	0x58020800
900010e4:	58020000 	.word	0x58020000

900010e8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
900010e8:	b580      	push	{r7, lr}
900010ea:	b082      	sub	sp, #8
900010ec:	af00      	add	r7, sp, #0
900010ee:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
900010f0:	687b      	ldr	r3, [r7, #4]
900010f2:	681b      	ldr	r3, [r3, #0]
900010f4:	4a24      	ldr	r2, [pc, #144]	; (90001188 <HAL_I2C_MspDeInit+0xa0>)
900010f6:	4293      	cmp	r3, r2
900010f8:	d112      	bne.n	90001120 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
900010fa:	4b24      	ldr	r3, [pc, #144]	; (9000118c <HAL_I2C_MspDeInit+0xa4>)
900010fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001100:	4a22      	ldr	r2, [pc, #136]	; (9000118c <HAL_I2C_MspDeInit+0xa4>)
90001102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90001106:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
9000110a:	f44f 7180 	mov.w	r1, #256	; 0x100
9000110e:	4820      	ldr	r0, [pc, #128]	; (90001190 <HAL_I2C_MspDeInit+0xa8>)
90001110:	f005 fe8e 	bl	90006e30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
90001114:	f44f 7100 	mov.w	r1, #512	; 0x200
90001118:	481d      	ldr	r0, [pc, #116]	; (90001190 <HAL_I2C_MspDeInit+0xa8>)
9000111a:	f005 fe89 	bl	90006e30 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
9000111e:	e02e      	b.n	9000117e <HAL_I2C_MspDeInit+0x96>
  else if(i2cHandle->Instance==I2C2)
90001120:	687b      	ldr	r3, [r7, #4]
90001122:	681b      	ldr	r3, [r3, #0]
90001124:	4a1b      	ldr	r2, [pc, #108]	; (90001194 <HAL_I2C_MspDeInit+0xac>)
90001126:	4293      	cmp	r3, r2
90001128:	d112      	bne.n	90001150 <HAL_I2C_MspDeInit+0x68>
    __HAL_RCC_I2C2_CLK_DISABLE();
9000112a:	4b18      	ldr	r3, [pc, #96]	; (9000118c <HAL_I2C_MspDeInit+0xa4>)
9000112c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001130:	4a16      	ldr	r2, [pc, #88]	; (9000118c <HAL_I2C_MspDeInit+0xa4>)
90001132:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
90001136:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
9000113a:	f44f 6180 	mov.w	r1, #1024	; 0x400
9000113e:	4814      	ldr	r0, [pc, #80]	; (90001190 <HAL_I2C_MspDeInit+0xa8>)
90001140:	f005 fe76 	bl	90006e30 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
90001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
90001148:	4811      	ldr	r0, [pc, #68]	; (90001190 <HAL_I2C_MspDeInit+0xa8>)
9000114a:	f005 fe71 	bl	90006e30 <HAL_GPIO_DeInit>
}
9000114e:	e016      	b.n	9000117e <HAL_I2C_MspDeInit+0x96>
  else if(i2cHandle->Instance==I2C3)
90001150:	687b      	ldr	r3, [r7, #4]
90001152:	681b      	ldr	r3, [r3, #0]
90001154:	4a10      	ldr	r2, [pc, #64]	; (90001198 <HAL_I2C_MspDeInit+0xb0>)
90001156:	4293      	cmp	r3, r2
90001158:	d111      	bne.n	9000117e <HAL_I2C_MspDeInit+0x96>
    __HAL_RCC_I2C3_CLK_DISABLE();
9000115a:	4b0c      	ldr	r3, [pc, #48]	; (9000118c <HAL_I2C_MspDeInit+0xa4>)
9000115c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001160:	4a0a      	ldr	r2, [pc, #40]	; (9000118c <HAL_I2C_MspDeInit+0xa4>)
90001162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90001166:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
9000116a:	f44f 7100 	mov.w	r1, #512	; 0x200
9000116e:	480b      	ldr	r0, [pc, #44]	; (9000119c <HAL_I2C_MspDeInit+0xb4>)
90001170:	f005 fe5e 	bl	90006e30 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
90001174:	f44f 7180 	mov.w	r1, #256	; 0x100
90001178:	4809      	ldr	r0, [pc, #36]	; (900011a0 <HAL_I2C_MspDeInit+0xb8>)
9000117a:	f005 fe59 	bl	90006e30 <HAL_GPIO_DeInit>
}
9000117e:	bf00      	nop
90001180:	3708      	adds	r7, #8
90001182:	46bd      	mov	sp, r7
90001184:	bd80      	pop	{r7, pc}
90001186:	bf00      	nop
90001188:	40005400 	.word	0x40005400
9000118c:	58024400 	.word	0x58024400
90001190:	58020400 	.word	0x58020400
90001194:	40005800 	.word	0x40005800
90001198:	40005c00 	.word	0x40005c00
9000119c:	58020800 	.word	0x58020800
900011a0:	58020000 	.word	0x58020000

900011a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
900011a4:	b480      	push	{r7}
900011a6:	b083      	sub	sp, #12
900011a8:	af00      	add	r7, sp, #0
900011aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
900011ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
900011b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
900011b4:	f003 0301 	and.w	r3, r3, #1
900011b8:	2b00      	cmp	r3, #0
900011ba:	d009      	beq.n	900011d0 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
900011bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
900011c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
900011c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
900011c8:	2b00      	cmp	r3, #0
900011ca:	d001      	beq.n	900011d0 <ITM_SendChar+0x2c>
900011cc:	2301      	movs	r3, #1
900011ce:	e000      	b.n	900011d2 <ITM_SendChar+0x2e>
900011d0:	2300      	movs	r3, #0
900011d2:	2b00      	cmp	r3, #0
900011d4:	d010      	beq.n	900011f8 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
900011d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
900011da:	681b      	ldr	r3, [r3, #0]
900011dc:	2b00      	cmp	r3, #0
900011de:	bf0c      	ite	eq
900011e0:	2301      	moveq	r3, #1
900011e2:	2300      	movne	r3, #0
900011e4:	b2db      	uxtb	r3, r3
900011e6:	2b00      	cmp	r3, #0
900011e8:	d001      	beq.n	900011ee <ITM_SendChar+0x4a>
    {
      __NOP();
900011ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
900011ec:	e7f3      	b.n	900011d6 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
900011ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
900011f2:	687a      	ldr	r2, [r7, #4]
900011f4:	b2d2      	uxtb	r2, r2
900011f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
900011f8:	687b      	ldr	r3, [r7, #4]
}
900011fa:	4618      	mov	r0, r3
900011fc:	370c      	adds	r7, #12
900011fe:	46bd      	mov	sp, r7
90001200:	f85d 7b04 	ldr.w	r7, [sp], #4
90001204:	4770      	bx	lr

90001206 <__io_putchar>:
uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
uint8_t EndMSG[] = "Done! \r\n\r\n";

//uint16_t counter = 0;
extern "C" { // C++ cannot override printf, must compile in C
int __io_putchar(int ch) {
90001206:	b580      	push	{r7, lr}
90001208:	b082      	sub	sp, #8
9000120a:	af00      	add	r7, sp, #0
9000120c:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
9000120e:	687b      	ldr	r3, [r7, #4]
90001210:	4618      	mov	r0, r3
90001212:	f7ff ffc7 	bl	900011a4 <ITM_SendChar>
    return ch;
90001216:	687b      	ldr	r3, [r7, #4]
}
90001218:	4618      	mov	r0, r3
9000121a:	3708      	adds	r7, #8
9000121c:	46bd      	mov	sp, r7
9000121e:	bd80      	pop	{r7, pc}

90001220 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
90001220:	b580      	push	{r7, lr}
90001222:	b088      	sub	sp, #32
90001224:	af00      	add	r7, sp, #0
90001226:	6078      	str	r0, [r7, #4]
  SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)Rx_data) & ~(uint32_t)0x1F), 100+32);
90001228:	4b2d      	ldr	r3, [pc, #180]	; (900012e0 <HAL_UART_RxCpltCallback+0xc0>)
9000122a:	f023 031f 	bic.w	r3, r3, #31
9000122e:	61bb      	str	r3, [r7, #24]
90001230:	2384      	movs	r3, #132	; 0x84
90001232:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
90001234:	697b      	ldr	r3, [r7, #20]
90001236:	2b00      	cmp	r3, #0
90001238:	dd1e      	ble.n	90001278 <HAL_UART_RxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
9000123a:	69bb      	ldr	r3, [r7, #24]
9000123c:	f003 021f 	and.w	r2, r3, #31
90001240:	697b      	ldr	r3, [r7, #20]
90001242:	4413      	add	r3, r2
90001244:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
90001246:	69bb      	ldr	r3, [r7, #24]
90001248:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
9000124a:	f3bf 8f4f 	dsb	sy
}
9000124e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
90001250:	4a24      	ldr	r2, [pc, #144]	; (900012e4 <HAL_UART_RxCpltCallback+0xc4>)
90001252:	68fb      	ldr	r3, [r7, #12]
90001254:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
90001258:	68fb      	ldr	r3, [r7, #12]
9000125a:	3320      	adds	r3, #32
9000125c:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
9000125e:	693b      	ldr	r3, [r7, #16]
90001260:	3b20      	subs	r3, #32
90001262:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
90001264:	693b      	ldr	r3, [r7, #16]
90001266:	2b00      	cmp	r3, #0
90001268:	dd00      	ble.n	9000126c <HAL_UART_RxCpltCallback+0x4c>
      do {
9000126a:	e7f1      	b.n	90001250 <HAL_UART_RxCpltCallback+0x30>
  __ASM volatile ("dsb 0xF":::"memory");
9000126c:	f3bf 8f4f 	dsb	sy
}
90001270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001272:	f3bf 8f6f 	isb	sy
}
90001276:	bf00      	nop
}
90001278:	bf00      	nop
  HAL_UART_Receive_DMA(huart, Rx_data, 100);
9000127a:	2264      	movs	r2, #100	; 0x64
9000127c:	4918      	ldr	r1, [pc, #96]	; (900012e0 <HAL_UART_RxCpltCallback+0xc0>)
9000127e:	6878      	ldr	r0, [r7, #4]
90001280:	f00a fe24 	bl	9000becc <HAL_UART_Receive_DMA>
  uint8_t uart_number;
  if (huart == &huart3)
90001284:	687b      	ldr	r3, [r7, #4]
90001286:	4a18      	ldr	r2, [pc, #96]	; (900012e8 <HAL_UART_RxCpltCallback+0xc8>)
90001288:	4293      	cmp	r3, r2
9000128a:	d102      	bne.n	90001292 <HAL_UART_RxCpltCallback+0x72>
	  uart_number = 3;
9000128c:	2303      	movs	r3, #3
9000128e:	77fb      	strb	r3, [r7, #31]
90001290:	e00f      	b.n	900012b2 <HAL_UART_RxCpltCallback+0x92>
  else if (huart == &huart4)
90001292:	687b      	ldr	r3, [r7, #4]
90001294:	4a15      	ldr	r2, [pc, #84]	; (900012ec <HAL_UART_RxCpltCallback+0xcc>)
90001296:	4293      	cmp	r3, r2
90001298:	d102      	bne.n	900012a0 <HAL_UART_RxCpltCallback+0x80>
	  uart_number = 4;
9000129a:	2304      	movs	r3, #4
9000129c:	77fb      	strb	r3, [r7, #31]
9000129e:	e008      	b.n	900012b2 <HAL_UART_RxCpltCallback+0x92>
  else if (huart == &huart5)
900012a0:	687b      	ldr	r3, [r7, #4]
900012a2:	4a13      	ldr	r2, [pc, #76]	; (900012f0 <HAL_UART_RxCpltCallback+0xd0>)
900012a4:	4293      	cmp	r3, r2
900012a6:	d102      	bne.n	900012ae <HAL_UART_RxCpltCallback+0x8e>
	  uart_number = 5;
900012a8:	2305      	movs	r3, #5
900012aa:	77fb      	strb	r3, [r7, #31]
900012ac:	e001      	b.n	900012b2 <HAL_UART_RxCpltCallback+0x92>
  else
	  uart_number = 8;
900012ae:	2308      	movs	r3, #8
900012b0:	77fb      	strb	r3, [r7, #31]
  sprintf((char*)uart_name, "Received on UART%d ", uart_number);
900012b2:	7ffb      	ldrb	r3, [r7, #31]
900012b4:	461a      	mov	r2, r3
900012b6:	490f      	ldr	r1, [pc, #60]	; (900012f4 <HAL_UART_RxCpltCallback+0xd4>)
900012b8:	480f      	ldr	r0, [pc, #60]	; (900012f8 <HAL_UART_RxCpltCallback+0xd8>)
900012ba:	f010 fc3d 	bl	90011b38 <siprintf>
  HAL_UART_Transmit(&huart1, uart_name, sizeof(uart_name), 100);
900012be:	2364      	movs	r3, #100	; 0x64
900012c0:	2264      	movs	r2, #100	; 0x64
900012c2:	490d      	ldr	r1, [pc, #52]	; (900012f8 <HAL_UART_RxCpltCallback+0xd8>)
900012c4:	480d      	ldr	r0, [pc, #52]	; (900012fc <HAL_UART_RxCpltCallback+0xdc>)
900012c6:	f00a fd6b 	bl	9000bda0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, Rx_data, sizeof(Rx_data), 100);
900012ca:	2364      	movs	r3, #100	; 0x64
900012cc:	2264      	movs	r2, #100	; 0x64
900012ce:	4904      	ldr	r1, [pc, #16]	; (900012e0 <HAL_UART_RxCpltCallback+0xc0>)
900012d0:	480a      	ldr	r0, [pc, #40]	; (900012fc <HAL_UART_RxCpltCallback+0xdc>)
900012d2:	f00a fd65 	bl	9000bda0 <HAL_UART_Transmit>
}
900012d6:	bf00      	nop
900012d8:	3720      	adds	r7, #32
900012da:	46bd      	mov	sp, r7
900012dc:	bd80      	pop	{r7, pc}
900012de:	bf00      	nop
900012e0:	2400065c 	.word	0x2400065c
900012e4:	e000ed00 	.word	0xe000ed00
900012e8:	24000bb4 	.word	0x24000bb4
900012ec:	24000974 	.word	0x24000974
900012f0:	24000a04 	.word	0x24000a04
900012f4:	90013e08 	.word	0x90013e08
900012f8:	240006c0 	.word	0x240006c0
900012fc:	24000b24 	.word	0x24000b24

90001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
90001300:	b580      	push	{r7, lr}
90001302:	b084      	sub	sp, #16
90001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
90001306:	f000 f9fd 	bl	90001704 <_ZL10MPU_Configv>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000130a:	4b7d      	ldr	r3, [pc, #500]	; (90001500 <main+0x200>)
9000130c:	695b      	ldr	r3, [r3, #20]
9000130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001312:	2b00      	cmp	r3, #0
90001314:	bf14      	ite	ne
90001316:	2301      	movne	r3, #1
90001318:	2300      	moveq	r3, #0
9000131a:	b2db      	uxtb	r3, r3
9000131c:	2b00      	cmp	r3, #0
9000131e:	d11b      	bne.n	90001358 <main+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
90001320:	f3bf 8f4f 	dsb	sy
}
90001324:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001326:	f3bf 8f6f 	isb	sy
}
9000132a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
9000132c:	4b74      	ldr	r3, [pc, #464]	; (90001500 <main+0x200>)
9000132e:	2200      	movs	r2, #0
90001330:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90001334:	f3bf 8f4f 	dsb	sy
}
90001338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000133a:	f3bf 8f6f 	isb	sy
}
9000133e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90001340:	4b6f      	ldr	r3, [pc, #444]	; (90001500 <main+0x200>)
90001342:	695b      	ldr	r3, [r3, #20]
90001344:	4a6e      	ldr	r2, [pc, #440]	; (90001500 <main+0x200>)
90001346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000134a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
9000134c:	f3bf 8f4f 	dsb	sy
}
90001350:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001352:	f3bf 8f6f 	isb	sy
}
90001356:	e000      	b.n	9000135a <main+0x5a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90001358:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000135a:	4b69      	ldr	r3, [pc, #420]	; (90001500 <main+0x200>)
9000135c:	695b      	ldr	r3, [r3, #20]
9000135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90001362:	2b00      	cmp	r3, #0
90001364:	bf14      	ite	ne
90001366:	2301      	movne	r3, #1
90001368:	2300      	moveq	r3, #0
9000136a:	b2db      	uxtb	r3, r3
9000136c:	2b00      	cmp	r3, #0
9000136e:	d144      	bne.n	900013fa <main+0xfa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90001370:	4b63      	ldr	r3, [pc, #396]	; (90001500 <main+0x200>)
90001372:	2200      	movs	r2, #0
90001374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90001378:	f3bf 8f4f 	dsb	sy
}
9000137c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
9000137e:	4b60      	ldr	r3, [pc, #384]	; (90001500 <main+0x200>)
90001380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90001384:	60bb      	str	r3, [r7, #8]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90001386:	68bb      	ldr	r3, [r7, #8]
90001388:	0b5b      	lsrs	r3, r3, #13
9000138a:	f3c3 030e 	ubfx	r3, r3, #0, #15
9000138e:	607b      	str	r3, [r7, #4]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90001390:	68bb      	ldr	r3, [r7, #8]
90001392:	08db      	lsrs	r3, r3, #3
90001394:	f3c3 0309 	ubfx	r3, r3, #0, #10
90001398:	603b      	str	r3, [r7, #0]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000139a:	687b      	ldr	r3, [r7, #4]
9000139c:	015a      	lsls	r2, r3, #5
9000139e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
900013a2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
900013a4:	683a      	ldr	r2, [r7, #0]
900013a6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900013a8:	4955      	ldr	r1, [pc, #340]	; (90001500 <main+0x200>)
900013aa:	4313      	orrs	r3, r2
900013ac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
900013b0:	683b      	ldr	r3, [r7, #0]
900013b2:	1e5a      	subs	r2, r3, #1
900013b4:	603a      	str	r2, [r7, #0]
900013b6:	2b00      	cmp	r3, #0
900013b8:	bf14      	ite	ne
900013ba:	2301      	movne	r3, #1
900013bc:	2300      	moveq	r3, #0
900013be:	b2db      	uxtb	r3, r3
900013c0:	2b00      	cmp	r3, #0
900013c2:	d000      	beq.n	900013c6 <main+0xc6>
      do {
900013c4:	e7e9      	b.n	9000139a <main+0x9a>
    } while(sets-- != 0U);
900013c6:	687b      	ldr	r3, [r7, #4]
900013c8:	1e5a      	subs	r2, r3, #1
900013ca:	607a      	str	r2, [r7, #4]
900013cc:	2b00      	cmp	r3, #0
900013ce:	bf14      	ite	ne
900013d0:	2301      	movne	r3, #1
900013d2:	2300      	moveq	r3, #0
900013d4:	b2db      	uxtb	r3, r3
900013d6:	2b00      	cmp	r3, #0
900013d8:	d000      	beq.n	900013dc <main+0xdc>
    do {
900013da:	e7d9      	b.n	90001390 <main+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
900013dc:	f3bf 8f4f 	dsb	sy
}
900013e0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
900013e2:	4b47      	ldr	r3, [pc, #284]	; (90001500 <main+0x200>)
900013e4:	695b      	ldr	r3, [r3, #20]
900013e6:	4a46      	ldr	r2, [pc, #280]	; (90001500 <main+0x200>)
900013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900013ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900013ee:	f3bf 8f4f 	dsb	sy
}
900013f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900013f4:	f3bf 8f6f 	isb	sy
}
900013f8:	e000      	b.n	900013fc <main+0xfc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900013fa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
900013fc:	f002 fb68 	bl	90003ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
90001400:	f000 f89a 	bl	90001538 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
90001404:	f000 f95e 	bl	900016c4 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
90001408:	f7ff fba8 	bl	90000b5c <MX_GPIO_Init>
  MX_DMA_Init();
9000140c:	f7ff f992 	bl	90000734 <MX_DMA_Init>
  MX_I2C1_Init();
90001410:	f7ff fc86 	bl	90000d20 <MX_I2C1_Init>
  MX_I2C2_Init();
90001414:	f7ff fcc4 	bl	90000da0 <MX_I2C2_Init>
  MX_I2C3_Init();
90001418:	f7ff fd02 	bl	90000e20 <MX_I2C3_Init>
  MX_SPI1_Init();
9000141c:	f000 f9c2 	bl	900017a4 <MX_SPI1_Init>
  MX_SPI2_Init();
90001420:	f000 fa18 	bl	90001854 <MX_SPI2_Init>
  MX_SPI3_Init();
90001424:	f000 fa6e 	bl	90001904 <MX_SPI3_Init>
  MX_TIM8_Init();
90001428:	f000 fe76 	bl	90002118 <MX_TIM8_Init>
  MX_USART1_UART_Init();
9000142c:	f000 ffce 	bl	900023cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
90001430:	f001 f818 	bl	90002464 <MX_USART3_UART_Init>
  MX_UART4_Init();
90001434:	f000 fee6 	bl	90002204 <MX_UART4_Init>
  MX_UART5_Init();
90001438:	f000 ff30 	bl	9000229c <MX_UART5_Init>
  MX_UART8_Init();
9000143c:	f000 ff7a 	bl	90002334 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t MSG[100] = {0};
//  uint8_t MSG_PWR[45] = {'\0'};
  HAL_TIM_PWM_Start (&htim8, TIM_CHANNEL_1);
90001440:	2100      	movs	r1, #0
90001442:	4830      	ldr	r0, [pc, #192]	; (90001504 <main+0x204>)
90001444:	f009 ff04 	bl	9000b250 <HAL_TIM_PWM_Start>
//  TIM8->CCR1 = 1;
//  int32_t CH1_DC = 1000;
  HAL_UART_Receive_DMA(&huart3, Rx_data, 100);
90001448:	2264      	movs	r2, #100	; 0x64
9000144a:	492f      	ldr	r1, [pc, #188]	; (90001508 <main+0x208>)
9000144c:	482f      	ldr	r0, [pc, #188]	; (9000150c <main+0x20c>)
9000144e:	f00a fd3d 	bl	9000becc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart4, Rx_data, 100);
90001452:	2264      	movs	r2, #100	; 0x64
90001454:	492c      	ldr	r1, [pc, #176]	; (90001508 <main+0x208>)
90001456:	482e      	ldr	r0, [pc, #184]	; (90001510 <main+0x210>)
90001458:	f00a fd38 	bl	9000becc <HAL_UART_Receive_DMA>


  HAL_UART_Receive_DMA(&huart5, Rx_data, 100);
9000145c:	2264      	movs	r2, #100	; 0x64
9000145e:	492a      	ldr	r1, [pc, #168]	; (90001508 <main+0x208>)
90001460:	482c      	ldr	r0, [pc, #176]	; (90001514 <main+0x214>)
90001462:	f00a fd33 	bl	9000becc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart8, Rx_data, 100);
90001466:	2264      	movs	r2, #100	; 0x64
90001468:	4927      	ldr	r1, [pc, #156]	; (90001508 <main+0x208>)
9000146a:	482b      	ldr	r0, [pc, #172]	; (90001518 <main+0x218>)
9000146c:	f00a fd2e 	bl	9000becc <HAL_UART_Receive_DMA>

  uint8_t i = 0, ret;
90001470:	2300      	movs	r3, #0
90001472:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
90001474:	f242 7310 	movw	r3, #10000	; 0x2710
90001478:	221a      	movs	r2, #26
9000147a:	4928      	ldr	r1, [pc, #160]	; (9000151c <main+0x21c>)
9000147c:	4828      	ldr	r0, [pc, #160]	; (90001520 <main+0x220>)
9000147e:	f00a fc8f 	bl	9000bda0 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
90001482:	2301      	movs	r3, #1
90001484:	73fb      	strb	r3, [r7, #15]
90001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000148a:	2b00      	cmp	r3, #0
9000148c:	db29      	blt.n	900014e2 <main+0x1e2>
  {
	#if defined(TEST_HAT_1)
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
9000148e:	7bfb      	ldrb	r3, [r7, #15]
90001490:	b29b      	uxth	r3, r3
90001492:	005b      	lsls	r3, r3, #1
90001494:	b299      	uxth	r1, r3
90001496:	2305      	movs	r3, #5
90001498:	2203      	movs	r2, #3
9000149a:	4822      	ldr	r0, [pc, #136]	; (90001524 <main+0x224>)
9000149c:	f006 f9c4 	bl	90007828 <HAL_I2C_IsDeviceReady>
900014a0:	4603      	mov	r3, r0
900014a2:	73bb      	strb	r3, [r7, #14]
	  ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
	#elif defined(TEST_HAT_3)
	  ret = HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i<<1), 3, 5);
	#endif

      if (ret != HAL_OK) /* No ACK Received At That Address */
900014a4:	7bbb      	ldrb	r3, [r7, #14]
900014a6:	2b00      	cmp	r3, #0
900014a8:	d007      	beq.n	900014ba <main+0x1ba>
      {
          HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
900014aa:	f242 7310 	movw	r3, #10000	; 0x2710
900014ae:	2204      	movs	r2, #4
900014b0:	491d      	ldr	r1, [pc, #116]	; (90001528 <main+0x228>)
900014b2:	481b      	ldr	r0, [pc, #108]	; (90001520 <main+0x220>)
900014b4:	f00a fc74 	bl	9000bda0 <HAL_UART_Transmit>
900014b8:	e00f      	b.n	900014da <main+0x1da>
      }
      else if(ret == HAL_OK)
900014ba:	7bbb      	ldrb	r3, [r7, #14]
900014bc:	2b00      	cmp	r3, #0
900014be:	d10c      	bne.n	900014da <main+0x1da>
      {
          sprintf((char*)Buffer, "0x%X", i);
900014c0:	7bfb      	ldrb	r3, [r7, #15]
900014c2:	461a      	mov	r2, r3
900014c4:	4919      	ldr	r1, [pc, #100]	; (9000152c <main+0x22c>)
900014c6:	481a      	ldr	r0, [pc, #104]	; (90001530 <main+0x230>)
900014c8:	f010 fb36 	bl	90011b38 <siprintf>
          HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
900014cc:	f242 7310 	movw	r3, #10000	; 0x2710
900014d0:	2219      	movs	r2, #25
900014d2:	4917      	ldr	r1, [pc, #92]	; (90001530 <main+0x230>)
900014d4:	4812      	ldr	r0, [pc, #72]	; (90001520 <main+0x220>)
900014d6:	f00a fc63 	bl	9000bda0 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
900014da:	7bfb      	ldrb	r3, [r7, #15]
900014dc:	3301      	adds	r3, #1
900014de:	73fb      	strb	r3, [r7, #15]
900014e0:	e7d1      	b.n	90001486 <main+0x186>
      }
  }
  HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
900014e2:	f242 7310 	movw	r3, #10000	; 0x2710
900014e6:	220b      	movs	r2, #11
900014e8:	4912      	ldr	r1, [pc, #72]	; (90001534 <main+0x234>)
900014ea:	480d      	ldr	r0, [pc, #52]	; (90001520 <main+0x220>)
900014ec:	f00a fc58 	bl	9000bda0 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
900014f0:	f00c fc0c 	bl	9000dd0c <osKernelInitialize>
  MX_FREERTOS_Init();
900014f4:	f7ff f956 	bl	900007a4 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
900014f8:	f00c fc2c 	bl	9000dd54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
900014fc:	e7fe      	b.n	900014fc <main+0x1fc>
900014fe:	bf00      	nop
90001500:	e000ed00 	.word	0xe000ed00
90001504:	24000928 	.word	0x24000928
90001508:	2400065c 	.word	0x2400065c
9000150c:	24000bb4 	.word	0x24000bb4
90001510:	24000974 	.word	0x24000974
90001514:	24000a04 	.word	0x24000a04
90001518:	24000a94 	.word	0x24000a94
9000151c:	24000004 	.word	0x24000004
90001520:	24000b24 	.word	0x24000b24
90001524:	24000578 	.word	0x24000578
90001528:	24000000 	.word	0x24000000
9000152c:	90013e1c 	.word	0x90013e1c
90001530:	24000724 	.word	0x24000724
90001534:	24000020 	.word	0x24000020

90001538 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90001538:	b580      	push	{r7, lr}
9000153a:	b09e      	sub	sp, #120	; 0x78
9000153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
9000153e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001542:	224c      	movs	r2, #76	; 0x4c
90001544:	2100      	movs	r1, #0
90001546:	4618      	mov	r0, r3
90001548:	f00f fd83 	bl	90011052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
9000154c:	f107 030c 	add.w	r3, r7, #12
90001550:	2220      	movs	r2, #32
90001552:	2100      	movs	r1, #0
90001554:	4618      	mov	r0, r3
90001556:	f00f fd7c 	bl	90011052 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
9000155a:	2002      	movs	r0, #2
9000155c:	f006 fdf4 	bl	90008148 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90001560:	2300      	movs	r3, #0
90001562:	60bb      	str	r3, [r7, #8]
90001564:	4b54      	ldr	r3, [pc, #336]	; (900016b8 <_Z18SystemClock_Configv+0x180>)
90001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001568:	4a53      	ldr	r2, [pc, #332]	; (900016b8 <_Z18SystemClock_Configv+0x180>)
9000156a:	f023 0301 	bic.w	r3, r3, #1
9000156e:	62d3      	str	r3, [r2, #44]	; 0x2c
90001570:	4b51      	ldr	r3, [pc, #324]	; (900016b8 <_Z18SystemClock_Configv+0x180>)
90001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001574:	f003 0301 	and.w	r3, r3, #1
90001578:	60bb      	str	r3, [r7, #8]
9000157a:	4b50      	ldr	r3, [pc, #320]	; (900016bc <_Z18SystemClock_Configv+0x184>)
9000157c:	699b      	ldr	r3, [r3, #24]
9000157e:	4a4f      	ldr	r2, [pc, #316]	; (900016bc <_Z18SystemClock_Configv+0x184>)
90001580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90001584:	6193      	str	r3, [r2, #24]
90001586:	4b4d      	ldr	r3, [pc, #308]	; (900016bc <_Z18SystemClock_Configv+0x184>)
90001588:	699b      	ldr	r3, [r3, #24]
9000158a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
9000158e:	60bb      	str	r3, [r7, #8]
90001590:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90001592:	4b4a      	ldr	r3, [pc, #296]	; (900016bc <_Z18SystemClock_Configv+0x184>)
90001594:	699b      	ldr	r3, [r3, #24]
90001596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
9000159a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000159e:	bf14      	ite	ne
900015a0:	2301      	movne	r3, #1
900015a2:	2300      	moveq	r3, #0
900015a4:	b2db      	uxtb	r3, r3
900015a6:	2b00      	cmp	r3, #0
900015a8:	d000      	beq.n	900015ac <_Z18SystemClock_Configv+0x74>
900015aa:	e7f2      	b.n	90001592 <_Z18SystemClock_Configv+0x5a>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
900015ac:	4b44      	ldr	r3, [pc, #272]	; (900016c0 <_Z18SystemClock_Configv+0x188>)
900015ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900015b2:	4a43      	ldr	r2, [pc, #268]	; (900016c0 <_Z18SystemClock_Configv+0x188>)
900015b4:	f043 0302 	orr.w	r3, r3, #2
900015b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
900015bc:	4b40      	ldr	r3, [pc, #256]	; (900016c0 <_Z18SystemClock_Configv+0x188>)
900015be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900015c2:	f003 0302 	and.w	r3, r3, #2
900015c6:	607b      	str	r3, [r7, #4]
900015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
900015ca:	2300      	movs	r3, #0
900015cc:	603b      	str	r3, [r7, #0]
900015ce:	4b3b      	ldr	r3, [pc, #236]	; (900016bc <_Z18SystemClock_Configv+0x184>)
900015d0:	699b      	ldr	r3, [r3, #24]
900015d2:	4a3a      	ldr	r2, [pc, #232]	; (900016bc <_Z18SystemClock_Configv+0x184>)
900015d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900015d8:	6193      	str	r3, [r2, #24]
900015da:	4b38      	ldr	r3, [pc, #224]	; (900016bc <_Z18SystemClock_Configv+0x184>)
900015dc:	699b      	ldr	r3, [r3, #24]
900015de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900015e2:	603b      	str	r3, [r7, #0]
900015e4:	4b34      	ldr	r3, [pc, #208]	; (900016b8 <_Z18SystemClock_Configv+0x180>)
900015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900015e8:	4a33      	ldr	r2, [pc, #204]	; (900016b8 <_Z18SystemClock_Configv+0x180>)
900015ea:	f043 0301 	orr.w	r3, r3, #1
900015ee:	62d3      	str	r3, [r2, #44]	; 0x2c
900015f0:	4b31      	ldr	r3, [pc, #196]	; (900016b8 <_Z18SystemClock_Configv+0x180>)
900015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900015f4:	f003 0301 	and.w	r3, r3, #1
900015f8:	603b      	str	r3, [r7, #0]
900015fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
900015fc:	4b2f      	ldr	r3, [pc, #188]	; (900016bc <_Z18SystemClock_Configv+0x184>)
900015fe:	699b      	ldr	r3, [r3, #24]
90001600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90001604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90001608:	bf14      	ite	ne
9000160a:	2301      	movne	r3, #1
9000160c:	2300      	moveq	r3, #0
9000160e:	b2db      	uxtb	r3, r3
90001610:	2b00      	cmp	r3, #0
90001612:	d000      	beq.n	90001616 <_Z18SystemClock_Configv+0xde>
90001614:	e7f2      	b.n	900015fc <_Z18SystemClock_Configv+0xc4>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
90001616:	2303      	movs	r3, #3
90001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
9000161a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
9000161e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
90001620:	2301      	movs	r3, #1
90001622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
90001624:	2340      	movs	r3, #64	; 0x40
90001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90001628:	2302      	movs	r3, #2
9000162a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000162c:	2302      	movs	r3, #2
9000162e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
90001630:	2303      	movs	r3, #3
90001632:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
90001634:	233c      	movs	r3, #60	; 0x3c
90001636:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
90001638:	2302      	movs	r3, #2
9000163a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
9000163c:	2302      	movs	r3, #2
9000163e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
90001640:	2302      	movs	r3, #2
90001642:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
90001644:	230c      	movs	r3, #12
90001646:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90001648:	2300      	movs	r3, #0
9000164a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000164c:	2300      	movs	r3, #0
9000164e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90001650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90001654:	4618      	mov	r0, r3
90001656:	f006 fdb1 	bl	900081bc <HAL_RCC_OscConfig>
9000165a:	4603      	mov	r3, r0
9000165c:	2b00      	cmp	r3, #0
9000165e:	bf14      	ite	ne
90001660:	2301      	movne	r3, #1
90001662:	2300      	moveq	r3, #0
90001664:	b2db      	uxtb	r3, r3
90001666:	2b00      	cmp	r3, #0
90001668:	d001      	beq.n	9000166e <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
9000166a:	f000 f895 	bl	90001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000166e:	233f      	movs	r3, #63	; 0x3f
90001670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90001672:	2303      	movs	r3, #3
90001674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90001676:	2300      	movs	r3, #0
90001678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
9000167a:	2308      	movs	r3, #8
9000167c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
9000167e:	2340      	movs	r3, #64	; 0x40
90001680:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
90001682:	2340      	movs	r3, #64	; 0x40
90001684:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90001686:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000168a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
9000168c:	2340      	movs	r3, #64	; 0x40
9000168e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
90001690:	f107 030c 	add.w	r3, r7, #12
90001694:	2104      	movs	r1, #4
90001696:	4618      	mov	r0, r3
90001698:	f007 f9be 	bl	90008a18 <HAL_RCC_ClockConfig>
9000169c:	4603      	mov	r3, r0
9000169e:	2b00      	cmp	r3, #0
900016a0:	bf14      	ite	ne
900016a2:	2301      	movne	r3, #1
900016a4:	2300      	moveq	r3, #0
900016a6:	b2db      	uxtb	r3, r3
900016a8:	2b00      	cmp	r3, #0
900016aa:	d001      	beq.n	900016b0 <_Z18SystemClock_Configv+0x178>
  {
    Error_Handler();
900016ac:	f000 f874 	bl	90001798 <Error_Handler>
  }
}
900016b0:	bf00      	nop
900016b2:	3778      	adds	r7, #120	; 0x78
900016b4:	46bd      	mov	sp, r7
900016b6:	bd80      	pop	{r7, pc}
900016b8:	58000400 	.word	0x58000400
900016bc:	58024800 	.word	0x58024800
900016c0:	58024400 	.word	0x58024400

900016c4 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
900016c4:	b580      	push	{r7, lr}
900016c6:	b0b0      	sub	sp, #192	; 0xc0
900016c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900016ca:	1d3b      	adds	r3, r7, #4
900016cc:	22bc      	movs	r2, #188	; 0xbc
900016ce:	2100      	movs	r1, #0
900016d0:	4618      	mov	r0, r3
900016d2:	f00f fcbe 	bl	90011052 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
900016d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
900016da:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
900016dc:	2300      	movs	r3, #0
900016de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900016e0:	1d3b      	adds	r3, r7, #4
900016e2:	4618      	mov	r0, r3
900016e4:	f007 fd66 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
900016e8:	4603      	mov	r3, r0
900016ea:	2b00      	cmp	r3, #0
900016ec:	bf14      	ite	ne
900016ee:	2301      	movne	r3, #1
900016f0:	2300      	moveq	r3, #0
900016f2:	b2db      	uxtb	r3, r3
900016f4:	2b00      	cmp	r3, #0
900016f6:	d001      	beq.n	900016fc <_Z24PeriphCommonClock_Configv+0x38>
  {
    Error_Handler();
900016f8:	f000 f84e 	bl	90001798 <Error_Handler>
  }
}
900016fc:	bf00      	nop
900016fe:	37c0      	adds	r7, #192	; 0xc0
90001700:	46bd      	mov	sp, r7
90001702:	bd80      	pop	{r7, pc}

90001704 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
90001704:	b580      	push	{r7, lr}
90001706:	b084      	sub	sp, #16
90001708:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
9000170a:	463b      	mov	r3, r7
9000170c:	2200      	movs	r2, #0
9000170e:	601a      	str	r2, [r3, #0]
90001710:	605a      	str	r2, [r3, #4]
90001712:	609a      	str	r2, [r3, #8]
90001714:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
90001716:	f002 fb23 	bl	90003d60 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000171a:	2301      	movs	r3, #1
9000171c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
9000171e:	2300      	movs	r3, #0
90001720:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
90001722:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
90001726:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
90001728:	2317      	movs	r3, #23
9000172a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
9000172c:	2300      	movs	r3, #0
9000172e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90001730:	2300      	movs	r3, #0
90001732:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90001734:	2303      	movs	r3, #3
90001736:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
90001738:	2301      	movs	r3, #1
9000173a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
9000173c:	2300      	movs	r3, #0
9000173e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90001740:	2301      	movs	r3, #1
90001742:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
90001744:	2301      	movs	r3, #1
90001746:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001748:	463b      	mov	r3, r7
9000174a:	4618      	mov	r0, r3
9000174c:	f002 fb40 	bl	90003dd0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90001750:	2301      	movs	r3, #1
90001752:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
90001754:	2313      	movs	r3, #19
90001756:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90001758:	2300      	movs	r3, #0
9000175a:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000175c:	463b      	mov	r3, r7
9000175e:	4618      	mov	r0, r3
90001760:	f002 fb36 	bl	90003dd0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90001764:	2004      	movs	r0, #4
90001766:	f002 fb13 	bl	90003d90 <HAL_MPU_Enable>

}
9000176a:	bf00      	nop
9000176c:	3710      	adds	r7, #16
9000176e:	46bd      	mov	sp, r7
90001770:	bd80      	pop	{r7, pc}
	...

90001774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
90001774:	b580      	push	{r7, lr}
90001776:	b082      	sub	sp, #8
90001778:	af00      	add	r7, sp, #0
9000177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
9000177c:	687b      	ldr	r3, [r7, #4]
9000177e:	681b      	ldr	r3, [r3, #0]
90001780:	4a04      	ldr	r2, [pc, #16]	; (90001794 <HAL_TIM_PeriodElapsedCallback+0x20>)
90001782:	4293      	cmp	r3, r2
90001784:	d101      	bne.n	9000178a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
90001786:	f002 f9df 	bl	90003b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
9000178a:	bf00      	nop
9000178c:	3708      	adds	r7, #8
9000178e:	46bd      	mov	sp, r7
90001790:	bd80      	pop	{r7, pc}
90001792:	bf00      	nop
90001794:	40001000 	.word	0x40001000

90001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90001798:	b480      	push	{r7}
9000179a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
9000179c:	b672      	cpsid	i
}
9000179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
900017a0:	e7fe      	b.n	900017a0 <Error_Handler+0x8>
	...

900017a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
900017a4:	b580      	push	{r7, lr}
900017a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
900017a8:	4b28      	ldr	r3, [pc, #160]	; (9000184c <MX_SPI1_Init+0xa8>)
900017aa:	4a29      	ldr	r2, [pc, #164]	; (90001850 <MX_SPI1_Init+0xac>)
900017ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
900017ae:	4b27      	ldr	r3, [pc, #156]	; (9000184c <MX_SPI1_Init+0xa8>)
900017b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
900017b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
900017b6:	4b25      	ldr	r3, [pc, #148]	; (9000184c <MX_SPI1_Init+0xa8>)
900017b8:	2200      	movs	r2, #0
900017ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
900017bc:	4b23      	ldr	r3, [pc, #140]	; (9000184c <MX_SPI1_Init+0xa8>)
900017be:	2207      	movs	r2, #7
900017c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
900017c2:	4b22      	ldr	r3, [pc, #136]	; (9000184c <MX_SPI1_Init+0xa8>)
900017c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
900017c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
900017ca:	4b20      	ldr	r3, [pc, #128]	; (9000184c <MX_SPI1_Init+0xa8>)
900017cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
900017d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
900017d2:	4b1e      	ldr	r3, [pc, #120]	; (9000184c <MX_SPI1_Init+0xa8>)
900017d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
900017d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
900017da:	4b1c      	ldr	r3, [pc, #112]	; (9000184c <MX_SPI1_Init+0xa8>)
900017dc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
900017e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
900017e2:	4b1a      	ldr	r3, [pc, #104]	; (9000184c <MX_SPI1_Init+0xa8>)
900017e4:	2200      	movs	r2, #0
900017e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
900017e8:	4b18      	ldr	r3, [pc, #96]	; (9000184c <MX_SPI1_Init+0xa8>)
900017ea:	2200      	movs	r2, #0
900017ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
900017ee:	4b17      	ldr	r3, [pc, #92]	; (9000184c <MX_SPI1_Init+0xa8>)
900017f0:	2200      	movs	r2, #0
900017f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
900017f4:	4b15      	ldr	r3, [pc, #84]	; (9000184c <MX_SPI1_Init+0xa8>)
900017f6:	2200      	movs	r2, #0
900017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
900017fa:	4b14      	ldr	r3, [pc, #80]	; (9000184c <MX_SPI1_Init+0xa8>)
900017fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
90001800:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
90001802:	4b12      	ldr	r3, [pc, #72]	; (9000184c <MX_SPI1_Init+0xa8>)
90001804:	2200      	movs	r2, #0
90001806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
90001808:	4b10      	ldr	r3, [pc, #64]	; (9000184c <MX_SPI1_Init+0xa8>)
9000180a:	2200      	movs	r2, #0
9000180c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
9000180e:	4b0f      	ldr	r3, [pc, #60]	; (9000184c <MX_SPI1_Init+0xa8>)
90001810:	2200      	movs	r2, #0
90001812:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
90001814:	4b0d      	ldr	r3, [pc, #52]	; (9000184c <MX_SPI1_Init+0xa8>)
90001816:	2200      	movs	r2, #0
90001818:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
9000181a:	4b0c      	ldr	r3, [pc, #48]	; (9000184c <MX_SPI1_Init+0xa8>)
9000181c:	2200      	movs	r2, #0
9000181e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
90001820:	4b0a      	ldr	r3, [pc, #40]	; (9000184c <MX_SPI1_Init+0xa8>)
90001822:	2200      	movs	r2, #0
90001824:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
90001826:	4b09      	ldr	r3, [pc, #36]	; (9000184c <MX_SPI1_Init+0xa8>)
90001828:	2200      	movs	r2, #0
9000182a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
9000182c:	4b07      	ldr	r3, [pc, #28]	; (9000184c <MX_SPI1_Init+0xa8>)
9000182e:	2200      	movs	r2, #0
90001830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
90001832:	4b06      	ldr	r3, [pc, #24]	; (9000184c <MX_SPI1_Init+0xa8>)
90001834:	2200      	movs	r2, #0
90001836:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
90001838:	4804      	ldr	r0, [pc, #16]	; (9000184c <MX_SPI1_Init+0xa8>)
9000183a:	f009 f823 	bl	9000a884 <HAL_SPI_Init>
9000183e:	4603      	mov	r3, r0
90001840:	2b00      	cmp	r3, #0
90001842:	d001      	beq.n	90001848 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
90001844:	f7ff ffa8 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
90001848:	bf00      	nop
9000184a:	bd80      	pop	{r7, pc}
9000184c:	24000740 	.word	0x24000740
90001850:	40013000 	.word	0x40013000

90001854 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
90001854:	b580      	push	{r7, lr}
90001856:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
90001858:	4b28      	ldr	r3, [pc, #160]	; (900018fc <MX_SPI2_Init+0xa8>)
9000185a:	4a29      	ldr	r2, [pc, #164]	; (90001900 <MX_SPI2_Init+0xac>)
9000185c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
9000185e:	4b27      	ldr	r3, [pc, #156]	; (900018fc <MX_SPI2_Init+0xa8>)
90001860:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
90001864:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
90001866:	4b25      	ldr	r3, [pc, #148]	; (900018fc <MX_SPI2_Init+0xa8>)
90001868:	2200      	movs	r2, #0
9000186a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
9000186c:	4b23      	ldr	r3, [pc, #140]	; (900018fc <MX_SPI2_Init+0xa8>)
9000186e:	2207      	movs	r2, #7
90001870:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
90001872:	4b22      	ldr	r3, [pc, #136]	; (900018fc <MX_SPI2_Init+0xa8>)
90001874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90001878:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
9000187a:	4b20      	ldr	r3, [pc, #128]	; (900018fc <MX_SPI2_Init+0xa8>)
9000187c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90001880:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
90001882:	4b1e      	ldr	r3, [pc, #120]	; (900018fc <MX_SPI2_Init+0xa8>)
90001884:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001888:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
9000188a:	4b1c      	ldr	r3, [pc, #112]	; (900018fc <MX_SPI2_Init+0xa8>)
9000188c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
90001890:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
90001892:	4b1a      	ldr	r3, [pc, #104]	; (900018fc <MX_SPI2_Init+0xa8>)
90001894:	2200      	movs	r2, #0
90001896:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
90001898:	4b18      	ldr	r3, [pc, #96]	; (900018fc <MX_SPI2_Init+0xa8>)
9000189a:	2200      	movs	r2, #0
9000189c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
9000189e:	4b17      	ldr	r3, [pc, #92]	; (900018fc <MX_SPI2_Init+0xa8>)
900018a0:	2200      	movs	r2, #0
900018a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
900018a4:	4b15      	ldr	r3, [pc, #84]	; (900018fc <MX_SPI2_Init+0xa8>)
900018a6:	2200      	movs	r2, #0
900018a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
900018aa:	4b14      	ldr	r3, [pc, #80]	; (900018fc <MX_SPI2_Init+0xa8>)
900018ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
900018b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
900018b2:	4b12      	ldr	r3, [pc, #72]	; (900018fc <MX_SPI2_Init+0xa8>)
900018b4:	2200      	movs	r2, #0
900018b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
900018b8:	4b10      	ldr	r3, [pc, #64]	; (900018fc <MX_SPI2_Init+0xa8>)
900018ba:	2200      	movs	r2, #0
900018bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
900018be:	4b0f      	ldr	r3, [pc, #60]	; (900018fc <MX_SPI2_Init+0xa8>)
900018c0:	2200      	movs	r2, #0
900018c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
900018c4:	4b0d      	ldr	r3, [pc, #52]	; (900018fc <MX_SPI2_Init+0xa8>)
900018c6:	2200      	movs	r2, #0
900018c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
900018ca:	4b0c      	ldr	r3, [pc, #48]	; (900018fc <MX_SPI2_Init+0xa8>)
900018cc:	2200      	movs	r2, #0
900018ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
900018d0:	4b0a      	ldr	r3, [pc, #40]	; (900018fc <MX_SPI2_Init+0xa8>)
900018d2:	2200      	movs	r2, #0
900018d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
900018d6:	4b09      	ldr	r3, [pc, #36]	; (900018fc <MX_SPI2_Init+0xa8>)
900018d8:	2200      	movs	r2, #0
900018da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
900018dc:	4b07      	ldr	r3, [pc, #28]	; (900018fc <MX_SPI2_Init+0xa8>)
900018de:	2200      	movs	r2, #0
900018e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
900018e2:	4b06      	ldr	r3, [pc, #24]	; (900018fc <MX_SPI2_Init+0xa8>)
900018e4:	2200      	movs	r2, #0
900018e6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
900018e8:	4804      	ldr	r0, [pc, #16]	; (900018fc <MX_SPI2_Init+0xa8>)
900018ea:	f008 ffcb 	bl	9000a884 <HAL_SPI_Init>
900018ee:	4603      	mov	r3, r0
900018f0:	2b00      	cmp	r3, #0
900018f2:	d001      	beq.n	900018f8 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
900018f4:	f7ff ff50 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
900018f8:	bf00      	nop
900018fa:	bd80      	pop	{r7, pc}
900018fc:	240007c8 	.word	0x240007c8
90001900:	40003800 	.word	0x40003800

90001904 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
90001904:	b580      	push	{r7, lr}
90001906:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
90001908:	4b28      	ldr	r3, [pc, #160]	; (900019ac <MX_SPI3_Init+0xa8>)
9000190a:	4a29      	ldr	r2, [pc, #164]	; (900019b0 <MX_SPI3_Init+0xac>)
9000190c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
9000190e:	4b27      	ldr	r3, [pc, #156]	; (900019ac <MX_SPI3_Init+0xa8>)
90001910:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
90001914:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
90001916:	4b25      	ldr	r3, [pc, #148]	; (900019ac <MX_SPI3_Init+0xa8>)
90001918:	2200      	movs	r2, #0
9000191a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
9000191c:	4b23      	ldr	r3, [pc, #140]	; (900019ac <MX_SPI3_Init+0xa8>)
9000191e:	2207      	movs	r2, #7
90001920:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
90001922:	4b22      	ldr	r3, [pc, #136]	; (900019ac <MX_SPI3_Init+0xa8>)
90001924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90001928:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
9000192a:	4b20      	ldr	r3, [pc, #128]	; (900019ac <MX_SPI3_Init+0xa8>)
9000192c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90001930:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
90001932:	4b1e      	ldr	r3, [pc, #120]	; (900019ac <MX_SPI3_Init+0xa8>)
90001934:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001938:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
9000193a:	4b1c      	ldr	r3, [pc, #112]	; (900019ac <MX_SPI3_Init+0xa8>)
9000193c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
90001940:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
90001942:	4b1a      	ldr	r3, [pc, #104]	; (900019ac <MX_SPI3_Init+0xa8>)
90001944:	2200      	movs	r2, #0
90001946:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
90001948:	4b18      	ldr	r3, [pc, #96]	; (900019ac <MX_SPI3_Init+0xa8>)
9000194a:	2200      	movs	r2, #0
9000194c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
9000194e:	4b17      	ldr	r3, [pc, #92]	; (900019ac <MX_SPI3_Init+0xa8>)
90001950:	2200      	movs	r2, #0
90001952:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
90001954:	4b15      	ldr	r3, [pc, #84]	; (900019ac <MX_SPI3_Init+0xa8>)
90001956:	2200      	movs	r2, #0
90001958:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
9000195a:	4b14      	ldr	r3, [pc, #80]	; (900019ac <MX_SPI3_Init+0xa8>)
9000195c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
90001960:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
90001962:	4b12      	ldr	r3, [pc, #72]	; (900019ac <MX_SPI3_Init+0xa8>)
90001964:	2200      	movs	r2, #0
90001966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
90001968:	4b10      	ldr	r3, [pc, #64]	; (900019ac <MX_SPI3_Init+0xa8>)
9000196a:	2200      	movs	r2, #0
9000196c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
9000196e:	4b0f      	ldr	r3, [pc, #60]	; (900019ac <MX_SPI3_Init+0xa8>)
90001970:	2200      	movs	r2, #0
90001972:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
90001974:	4b0d      	ldr	r3, [pc, #52]	; (900019ac <MX_SPI3_Init+0xa8>)
90001976:	2200      	movs	r2, #0
90001978:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
9000197a:	4b0c      	ldr	r3, [pc, #48]	; (900019ac <MX_SPI3_Init+0xa8>)
9000197c:	2200      	movs	r2, #0
9000197e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
90001980:	4b0a      	ldr	r3, [pc, #40]	; (900019ac <MX_SPI3_Init+0xa8>)
90001982:	2200      	movs	r2, #0
90001984:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
90001986:	4b09      	ldr	r3, [pc, #36]	; (900019ac <MX_SPI3_Init+0xa8>)
90001988:	2200      	movs	r2, #0
9000198a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
9000198c:	4b07      	ldr	r3, [pc, #28]	; (900019ac <MX_SPI3_Init+0xa8>)
9000198e:	2200      	movs	r2, #0
90001990:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
90001992:	4b06      	ldr	r3, [pc, #24]	; (900019ac <MX_SPI3_Init+0xa8>)
90001994:	2200      	movs	r2, #0
90001996:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
90001998:	4804      	ldr	r0, [pc, #16]	; (900019ac <MX_SPI3_Init+0xa8>)
9000199a:	f008 ff73 	bl	9000a884 <HAL_SPI_Init>
9000199e:	4603      	mov	r3, r0
900019a0:	2b00      	cmp	r3, #0
900019a2:	d001      	beq.n	900019a8 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
900019a4:	f7ff fef8 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
900019a8:	bf00      	nop
900019aa:	bd80      	pop	{r7, pc}
900019ac:	24000850 	.word	0x24000850
900019b0:	40003c00 	.word	0x40003c00

900019b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
900019b4:	b580      	push	{r7, lr}
900019b6:	b0be      	sub	sp, #248	; 0xf8
900019b8:	af00      	add	r7, sp, #0
900019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
900019bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
900019c0:	2200      	movs	r2, #0
900019c2:	601a      	str	r2, [r3, #0]
900019c4:	605a      	str	r2, [r3, #4]
900019c6:	609a      	str	r2, [r3, #8]
900019c8:	60da      	str	r2, [r3, #12]
900019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900019cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
900019d0:	22bc      	movs	r2, #188	; 0xbc
900019d2:	2100      	movs	r1, #0
900019d4:	4618      	mov	r0, r3
900019d6:	f00f fb3c 	bl	90011052 <memset>
  if(spiHandle->Instance==SPI1)
900019da:	687b      	ldr	r3, [r7, #4]
900019dc:	681b      	ldr	r3, [r3, #0]
900019de:	4a9e      	ldr	r2, [pc, #632]	; (90001c58 <HAL_SPI_MspInit+0x2a4>)
900019e0:	4293      	cmp	r3, r2
900019e2:	d144      	bne.n	90001a6e <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
900019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
900019ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
900019ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900019f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
900019f6:	4618      	mov	r0, r3
900019f8:	f007 fbdc 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
900019fc:	4603      	mov	r3, r0
900019fe:	2b00      	cmp	r3, #0
90001a00:	d001      	beq.n	90001a06 <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
90001a02:	f7ff fec9 	bl	90001798 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
90001a06:	4b95      	ldr	r3, [pc, #596]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90001a0c:	4a93      	ldr	r2, [pc, #588]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001a0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90001a12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
90001a16:	4b91      	ldr	r3, [pc, #580]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90001a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90001a20:	627b      	str	r3, [r7, #36]	; 0x24
90001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
90001a24:	4b8d      	ldr	r3, [pc, #564]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001a2a:	4a8c      	ldr	r2, [pc, #560]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001a2c:	f043 0301 	orr.w	r3, r3, #1
90001a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001a34:	4b89      	ldr	r3, [pc, #548]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001a3a:	f003 0301 	and.w	r3, r3, #1
90001a3e:	623b      	str	r3, [r7, #32]
90001a40:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90001a42:	23e0      	movs	r3, #224	; 0xe0
90001a44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001a48:	2302      	movs	r3, #2
90001a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001a4e:	2300      	movs	r3, #0
90001a50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001a54:	2300      	movs	r3, #0
90001a56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
90001a5a:	2305      	movs	r3, #5
90001a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90001a60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90001a64:	4619      	mov	r1, r3
90001a66:	487e      	ldr	r0, [pc, #504]	; (90001c60 <HAL_SPI_MspInit+0x2ac>)
90001a68:	f005 f832 	bl	90006ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
90001a6c:	e0f0      	b.n	90001c50 <HAL_SPI_MspInit+0x29c>
  else if(spiHandle->Instance==SPI2)
90001a6e:	687b      	ldr	r3, [r7, #4]
90001a70:	681b      	ldr	r3, [r3, #0]
90001a72:	4a7c      	ldr	r2, [pc, #496]	; (90001c64 <HAL_SPI_MspInit+0x2b0>)
90001a74:	4293      	cmp	r3, r2
90001a76:	d168      	bne.n	90001b4a <HAL_SPI_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
90001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
90001a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90001a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
90001a8a:	4618      	mov	r0, r3
90001a8c:	f007 fb92 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90001a90:	4603      	mov	r3, r0
90001a92:	2b00      	cmp	r3, #0
90001a94:	d001      	beq.n	90001a9a <HAL_SPI_MspInit+0xe6>
      Error_Handler();
90001a96:	f7ff fe7f 	bl	90001798 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
90001a9a:	4b70      	ldr	r3, [pc, #448]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001aa0:	4a6e      	ldr	r2, [pc, #440]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90001aa6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001aaa:	4b6c      	ldr	r3, [pc, #432]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001aac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001ab4:	61fb      	str	r3, [r7, #28]
90001ab6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
90001ab8:	4b68      	ldr	r3, [pc, #416]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001abe:	4a67      	ldr	r2, [pc, #412]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001ac0:	f043 0304 	orr.w	r3, r3, #4
90001ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001ac8:	4b64      	ldr	r3, [pc, #400]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001ace:	f003 0304 	and.w	r3, r3, #4
90001ad2:	61bb      	str	r3, [r7, #24]
90001ad4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
90001ad6:	4b61      	ldr	r3, [pc, #388]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001adc:	4a5f      	ldr	r2, [pc, #380]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001ade:	f043 0308 	orr.w	r3, r3, #8
90001ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001ae6:	4b5d      	ldr	r3, [pc, #372]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001aec:	f003 0308 	and.w	r3, r3, #8
90001af0:	617b      	str	r3, [r7, #20]
90001af2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
90001af4:	230c      	movs	r3, #12
90001af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001afa:	2302      	movs	r3, #2
90001afc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001b00:	2300      	movs	r3, #0
90001b02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001b06:	2300      	movs	r3, #0
90001b08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90001b0c:	2305      	movs	r3, #5
90001b0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90001b12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90001b16:	4619      	mov	r1, r3
90001b18:	4853      	ldr	r0, [pc, #332]	; (90001c68 <HAL_SPI_MspInit+0x2b4>)
90001b1a:	f004 ffd9 	bl	90006ad0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
90001b1e:	2308      	movs	r3, #8
90001b20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001b24:	2302      	movs	r3, #2
90001b26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001b2a:	2300      	movs	r3, #0
90001b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001b30:	2300      	movs	r3, #0
90001b32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90001b36:	2305      	movs	r3, #5
90001b38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90001b3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90001b40:	4619      	mov	r1, r3
90001b42:	484a      	ldr	r0, [pc, #296]	; (90001c6c <HAL_SPI_MspInit+0x2b8>)
90001b44:	f004 ffc4 	bl	90006ad0 <HAL_GPIO_Init>
}
90001b48:	e082      	b.n	90001c50 <HAL_SPI_MspInit+0x29c>
  else if(spiHandle->Instance==SPI3)
90001b4a:	687b      	ldr	r3, [r7, #4]
90001b4c:	681b      	ldr	r3, [r3, #0]
90001b4e:	4a48      	ldr	r2, [pc, #288]	; (90001c70 <HAL_SPI_MspInit+0x2bc>)
90001b50:	4293      	cmp	r3, r2
90001b52:	d17d      	bne.n	90001c50 <HAL_SPI_MspInit+0x29c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
90001b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
90001b5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90001b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
90001b66:	4618      	mov	r0, r3
90001b68:	f007 fb24 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90001b6c:	4603      	mov	r3, r0
90001b6e:	2b00      	cmp	r3, #0
90001b70:	d001      	beq.n	90001b76 <HAL_SPI_MspInit+0x1c2>
      Error_Handler();
90001b72:	f7ff fe11 	bl	90001798 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
90001b76:	4b39      	ldr	r3, [pc, #228]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001b7c:	4a37      	ldr	r2, [pc, #220]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
90001b82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001b86:	4b35      	ldr	r3, [pc, #212]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90001b90:	613b      	str	r3, [r7, #16]
90001b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
90001b94:	4b31      	ldr	r3, [pc, #196]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b9a:	4a30      	ldr	r2, [pc, #192]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001b9c:	f043 0304 	orr.w	r3, r3, #4
90001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001ba4:	4b2d      	ldr	r3, [pc, #180]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001baa:	f003 0304 	and.w	r3, r3, #4
90001bae:	60fb      	str	r3, [r7, #12]
90001bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
90001bb2:	4b2a      	ldr	r3, [pc, #168]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001bb8:	4a28      	ldr	r2, [pc, #160]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001bba:	f043 0302 	orr.w	r3, r3, #2
90001bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001bc2:	4b26      	ldr	r3, [pc, #152]	; (90001c5c <HAL_SPI_MspInit+0x2a8>)
90001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001bc8:	f003 0302 	and.w	r3, r3, #2
90001bcc:	60bb      	str	r3, [r7, #8]
90001bce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
90001bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
90001bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001bd8:	2302      	movs	r3, #2
90001bda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001bde:	2300      	movs	r3, #0
90001be0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001be4:	2300      	movs	r3, #0
90001be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
90001bea:	2306      	movs	r3, #6
90001bec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90001bf0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90001bf4:	4619      	mov	r1, r3
90001bf6:	481c      	ldr	r0, [pc, #112]	; (90001c68 <HAL_SPI_MspInit+0x2b4>)
90001bf8:	f004 ff6a 	bl	90006ad0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
90001bfc:	2310      	movs	r3, #16
90001bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001c02:	2302      	movs	r3, #2
90001c04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001c08:	2300      	movs	r3, #0
90001c0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001c0e:	2300      	movs	r3, #0
90001c10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
90001c14:	2306      	movs	r3, #6
90001c16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001c1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90001c1e:	4619      	mov	r1, r3
90001c20:	4814      	ldr	r0, [pc, #80]	; (90001c74 <HAL_SPI_MspInit+0x2c0>)
90001c22:	f004 ff55 	bl	90006ad0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
90001c26:	2320      	movs	r3, #32
90001c28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001c2c:	2302      	movs	r3, #2
90001c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90001c32:	2300      	movs	r3, #0
90001c34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001c38:	2300      	movs	r3, #0
90001c3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
90001c3e:	2307      	movs	r3, #7
90001c40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90001c44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
90001c48:	4619      	mov	r1, r3
90001c4a:	480a      	ldr	r0, [pc, #40]	; (90001c74 <HAL_SPI_MspInit+0x2c0>)
90001c4c:	f004 ff40 	bl	90006ad0 <HAL_GPIO_Init>
}
90001c50:	bf00      	nop
90001c52:	37f8      	adds	r7, #248	; 0xf8
90001c54:	46bd      	mov	sp, r7
90001c56:	bd80      	pop	{r7, pc}
90001c58:	40013000 	.word	0x40013000
90001c5c:	58024400 	.word	0x58024400
90001c60:	58020000 	.word	0x58020000
90001c64:	40003800 	.word	0x40003800
90001c68:	58020800 	.word	0x58020800
90001c6c:	58020c00 	.word	0x58020c00
90001c70:	40003c00 	.word	0x40003c00
90001c74:	58020400 	.word	0x58020400

90001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90001c78:	b580      	push	{r7, lr}
90001c7a:	b082      	sub	sp, #8
90001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90001c7e:	4b0c      	ldr	r3, [pc, #48]	; (90001cb0 <HAL_MspInit+0x38>)
90001c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001c84:	4a0a      	ldr	r2, [pc, #40]	; (90001cb0 <HAL_MspInit+0x38>)
90001c86:	f043 0302 	orr.w	r3, r3, #2
90001c8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90001c8e:	4b08      	ldr	r3, [pc, #32]	; (90001cb0 <HAL_MspInit+0x38>)
90001c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001c94:	f003 0302 	and.w	r3, r3, #2
90001c98:	607b      	str	r3, [r7, #4]
90001c9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90001c9c:	2200      	movs	r2, #0
90001c9e:	210f      	movs	r1, #15
90001ca0:	f06f 0001 	mvn.w	r0, #1
90001ca4:	f002 f834 	bl	90003d10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90001ca8:	bf00      	nop
90001caa:	3708      	adds	r7, #8
90001cac:	46bd      	mov	sp, r7
90001cae:	bd80      	pop	{r7, pc}
90001cb0:	58024400 	.word	0x58024400

90001cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90001cb4:	b580      	push	{r7, lr}
90001cb6:	b090      	sub	sp, #64	; 0x40
90001cb8:	af00      	add	r7, sp, #0
90001cba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90001cbc:	687b      	ldr	r3, [r7, #4]
90001cbe:	2b0f      	cmp	r3, #15
90001cc0:	d827      	bhi.n	90001d12 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90001cc2:	2200      	movs	r2, #0
90001cc4:	6879      	ldr	r1, [r7, #4]
90001cc6:	2036      	movs	r0, #54	; 0x36
90001cc8:	f002 f822 	bl	90003d10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90001ccc:	2036      	movs	r0, #54	; 0x36
90001cce:	f002 f839 	bl	90003d44 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
90001cd2:	4a29      	ldr	r2, [pc, #164]	; (90001d78 <HAL_InitTick+0xc4>)
90001cd4:	687b      	ldr	r3, [r7, #4]
90001cd6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
90001cd8:	4b28      	ldr	r3, [pc, #160]	; (90001d7c <HAL_InitTick+0xc8>)
90001cda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001cde:	4a27      	ldr	r2, [pc, #156]	; (90001d7c <HAL_InitTick+0xc8>)
90001ce0:	f043 0310 	orr.w	r3, r3, #16
90001ce4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90001ce8:	4b24      	ldr	r3, [pc, #144]	; (90001d7c <HAL_InitTick+0xc8>)
90001cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90001cee:	f003 0310 	and.w	r3, r3, #16
90001cf2:	60fb      	str	r3, [r7, #12]
90001cf4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90001cf6:	f107 0210 	add.w	r2, r7, #16
90001cfa:	f107 0314 	add.w	r3, r7, #20
90001cfe:	4611      	mov	r1, r2
90001d00:	4618      	mov	r0, r3
90001d02:	f007 fa15 	bl	90009130 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
90001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90001d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90001d0c:	2b00      	cmp	r3, #0
90001d0e:	d106      	bne.n	90001d1e <HAL_InitTick+0x6a>
90001d10:	e001      	b.n	90001d16 <HAL_InitTick+0x62>
    return HAL_ERROR;
90001d12:	2301      	movs	r3, #1
90001d14:	e02b      	b.n	90001d6e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90001d16:	f007 f9df 	bl	900090d8 <HAL_RCC_GetPCLK1Freq>
90001d1a:	63f8      	str	r0, [r7, #60]	; 0x3c
90001d1c:	e004      	b.n	90001d28 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90001d1e:	f007 f9db 	bl	900090d8 <HAL_RCC_GetPCLK1Freq>
90001d22:	4603      	mov	r3, r0
90001d24:	005b      	lsls	r3, r3, #1
90001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90001d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90001d2a:	4a15      	ldr	r2, [pc, #84]	; (90001d80 <HAL_InitTick+0xcc>)
90001d2c:	fba2 2303 	umull	r2, r3, r2, r3
90001d30:	0c9b      	lsrs	r3, r3, #18
90001d32:	3b01      	subs	r3, #1
90001d34:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
90001d36:	4b13      	ldr	r3, [pc, #76]	; (90001d84 <HAL_InitTick+0xd0>)
90001d38:	4a13      	ldr	r2, [pc, #76]	; (90001d88 <HAL_InitTick+0xd4>)
90001d3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90001d3c:	4b11      	ldr	r3, [pc, #68]	; (90001d84 <HAL_InitTick+0xd0>)
90001d3e:	f240 32e7 	movw	r2, #999	; 0x3e7
90001d42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90001d44:	4a0f      	ldr	r2, [pc, #60]	; (90001d84 <HAL_InitTick+0xd0>)
90001d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001d48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
90001d4a:	4b0e      	ldr	r3, [pc, #56]	; (90001d84 <HAL_InitTick+0xd0>)
90001d4c:	2200      	movs	r2, #0
90001d4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90001d50:	4b0c      	ldr	r3, [pc, #48]	; (90001d84 <HAL_InitTick+0xd0>)
90001d52:	2200      	movs	r2, #0
90001d54:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90001d56:	480b      	ldr	r0, [pc, #44]	; (90001d84 <HAL_InitTick+0xd0>)
90001d58:	f009 f9ab 	bl	9000b0b2 <HAL_TIM_Base_Init>
90001d5c:	4603      	mov	r3, r0
90001d5e:	2b00      	cmp	r3, #0
90001d60:	d104      	bne.n	90001d6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
90001d62:	4808      	ldr	r0, [pc, #32]	; (90001d84 <HAL_InitTick+0xd0>)
90001d64:	f009 f9fc 	bl	9000b160 <HAL_TIM_Base_Start_IT>
90001d68:	4603      	mov	r3, r0
90001d6a:	e000      	b.n	90001d6e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
90001d6c:	2301      	movs	r3, #1
}
90001d6e:	4618      	mov	r0, r3
90001d70:	3740      	adds	r7, #64	; 0x40
90001d72:	46bd      	mov	sp, r7
90001d74:	bd80      	pop	{r7, pc}
90001d76:	bf00      	nop
90001d78:	24000034 	.word	0x24000034
90001d7c:	58024400 	.word	0x58024400
90001d80:	431bde83 	.word	0x431bde83
90001d84:	240008d8 	.word	0x240008d8
90001d88:	40001000 	.word	0x40001000

90001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90001d8c:	b480      	push	{r7}
90001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
90001d90:	e7fe      	b.n	90001d90 <NMI_Handler+0x4>

90001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90001d92:	b480      	push	{r7}
90001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90001d96:	e7fe      	b.n	90001d96 <HardFault_Handler+0x4>

90001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90001d98:	b480      	push	{r7}
90001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90001d9c:	e7fe      	b.n	90001d9c <MemManage_Handler+0x4>

90001d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90001d9e:	b480      	push	{r7}
90001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90001da2:	e7fe      	b.n	90001da2 <BusFault_Handler+0x4>

90001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90001da4:	b480      	push	{r7}
90001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90001da8:	e7fe      	b.n	90001da8 <UsageFault_Handler+0x4>

90001daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90001daa:	b480      	push	{r7}
90001dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90001dae:	bf00      	nop
90001db0:	46bd      	mov	sp, r7
90001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
90001db6:	4770      	bx	lr

90001db8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
90001db8:	b580      	push	{r7, lr}
90001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
90001dbc:	4802      	ldr	r0, [pc, #8]	; (90001dc8 <DMA1_Stream0_IRQHandler+0x10>)
90001dbe:	f003 fb75 	bl	900054ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
90001dc2:	bf00      	nop
90001dc4:	bd80      	pop	{r7, pc}
90001dc6:	bf00      	nop
90001dc8:	24000dac 	.word	0x24000dac

90001dcc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
90001dcc:	b580      	push	{r7, lr}
90001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
90001dd0:	4802      	ldr	r0, [pc, #8]	; (90001ddc <DMA1_Stream1_IRQHandler+0x10>)
90001dd2:	f003 fb6b 	bl	900054ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
90001dd6:	bf00      	nop
90001dd8:	bd80      	pop	{r7, pc}
90001dda:	bf00      	nop
90001ddc:	24000c44 	.word	0x24000c44

90001de0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
90001de0:	b580      	push	{r7, lr}
90001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
90001de4:	4802      	ldr	r0, [pc, #8]	; (90001df0 <DMA1_Stream2_IRQHandler+0x10>)
90001de6:	f003 fb61 	bl	900054ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
90001dea:	bf00      	nop
90001dec:	bd80      	pop	{r7, pc}
90001dee:	bf00      	nop
90001df0:	24000cbc 	.word	0x24000cbc

90001df4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
90001df4:	b580      	push	{r7, lr}
90001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
90001df8:	4802      	ldr	r0, [pc, #8]	; (90001e04 <DMA1_Stream3_IRQHandler+0x10>)
90001dfa:	f003 fb57 	bl	900054ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
90001dfe:	bf00      	nop
90001e00:	bd80      	pop	{r7, pc}
90001e02:	bf00      	nop
90001e04:	24000d34 	.word	0x24000d34

90001e08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
90001e08:	b580      	push	{r7, lr}
90001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
90001e0c:	4802      	ldr	r0, [pc, #8]	; (90001e18 <USART3_IRQHandler+0x10>)
90001e0e:	f00a f8b3 	bl	9000bf78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
90001e12:	bf00      	nop
90001e14:	bd80      	pop	{r7, pc}
90001e16:	bf00      	nop
90001e18:	24000bb4 	.word	0x24000bb4

90001e1c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
90001e1c:	b580      	push	{r7, lr}
90001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
90001e20:	4802      	ldr	r0, [pc, #8]	; (90001e2c <UART4_IRQHandler+0x10>)
90001e22:	f00a f8a9 	bl	9000bf78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
90001e26:	bf00      	nop
90001e28:	bd80      	pop	{r7, pc}
90001e2a:	bf00      	nop
90001e2c:	24000974 	.word	0x24000974

90001e30 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
90001e30:	b580      	push	{r7, lr}
90001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
90001e34:	4802      	ldr	r0, [pc, #8]	; (90001e40 <UART5_IRQHandler+0x10>)
90001e36:	f00a f89f 	bl	9000bf78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
90001e3a:	bf00      	nop
90001e3c:	bd80      	pop	{r7, pc}
90001e3e:	bf00      	nop
90001e40:	24000a04 	.word	0x24000a04

90001e44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
90001e44:	b580      	push	{r7, lr}
90001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90001e48:	4802      	ldr	r0, [pc, #8]	; (90001e54 <TIM6_DAC_IRQHandler+0x10>)
90001e4a:	f009 fb0f 	bl	9000b46c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
90001e4e:	bf00      	nop
90001e50:	bd80      	pop	{r7, pc}
90001e52:	bf00      	nop
90001e54:	240008d8 	.word	0x240008d8

90001e58 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
90001e58:	b580      	push	{r7, lr}
90001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
90001e5c:	4802      	ldr	r0, [pc, #8]	; (90001e68 <UART8_IRQHandler+0x10>)
90001e5e:	f00a f88b 	bl	9000bf78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
90001e62:	bf00      	nop
90001e64:	bd80      	pop	{r7, pc}
90001e66:	bf00      	nop
90001e68:	24000a94 	.word	0x24000a94

90001e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
90001e6c:	b480      	push	{r7}
90001e6e:	af00      	add	r7, sp, #0
	return 1;
90001e70:	2301      	movs	r3, #1
}
90001e72:	4618      	mov	r0, r3
90001e74:	46bd      	mov	sp, r7
90001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e7a:	4770      	bx	lr

90001e7c <_kill>:

int _kill(int pid, int sig)
{
90001e7c:	b580      	push	{r7, lr}
90001e7e:	b082      	sub	sp, #8
90001e80:	af00      	add	r7, sp, #0
90001e82:	6078      	str	r0, [r7, #4]
90001e84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
90001e86:	f00e ffb3 	bl	90010df0 <__errno>
90001e8a:	4603      	mov	r3, r0
90001e8c:	2216      	movs	r2, #22
90001e8e:	601a      	str	r2, [r3, #0]
	return -1;
90001e90:	f04f 33ff 	mov.w	r3, #4294967295
}
90001e94:	4618      	mov	r0, r3
90001e96:	3708      	adds	r7, #8
90001e98:	46bd      	mov	sp, r7
90001e9a:	bd80      	pop	{r7, pc}

90001e9c <_exit>:

void _exit (int status)
{
90001e9c:	b580      	push	{r7, lr}
90001e9e:	b082      	sub	sp, #8
90001ea0:	af00      	add	r7, sp, #0
90001ea2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
90001ea4:	f04f 31ff 	mov.w	r1, #4294967295
90001ea8:	6878      	ldr	r0, [r7, #4]
90001eaa:	f7ff ffe7 	bl	90001e7c <_kill>
	while (1) {}		/* Make sure we hang here */
90001eae:	e7fe      	b.n	90001eae <_exit+0x12>

90001eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001eb0:	b580      	push	{r7, lr}
90001eb2:	b086      	sub	sp, #24
90001eb4:	af00      	add	r7, sp, #0
90001eb6:	60f8      	str	r0, [r7, #12]
90001eb8:	60b9      	str	r1, [r7, #8]
90001eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001ebc:	2300      	movs	r3, #0
90001ebe:	617b      	str	r3, [r7, #20]
90001ec0:	e00a      	b.n	90001ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
90001ec2:	f3af 8000 	nop.w
90001ec6:	4601      	mov	r1, r0
90001ec8:	68bb      	ldr	r3, [r7, #8]
90001eca:	1c5a      	adds	r2, r3, #1
90001ecc:	60ba      	str	r2, [r7, #8]
90001ece:	b2ca      	uxtb	r2, r1
90001ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001ed2:	697b      	ldr	r3, [r7, #20]
90001ed4:	3301      	adds	r3, #1
90001ed6:	617b      	str	r3, [r7, #20]
90001ed8:	697a      	ldr	r2, [r7, #20]
90001eda:	687b      	ldr	r3, [r7, #4]
90001edc:	429a      	cmp	r2, r3
90001ede:	dbf0      	blt.n	90001ec2 <_read+0x12>
	}

return len;
90001ee0:	687b      	ldr	r3, [r7, #4]
}
90001ee2:	4618      	mov	r0, r3
90001ee4:	3718      	adds	r7, #24
90001ee6:	46bd      	mov	sp, r7
90001ee8:	bd80      	pop	{r7, pc}

90001eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90001eea:	b580      	push	{r7, lr}
90001eec:	b086      	sub	sp, #24
90001eee:	af00      	add	r7, sp, #0
90001ef0:	60f8      	str	r0, [r7, #12]
90001ef2:	60b9      	str	r1, [r7, #8]
90001ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001ef6:	2300      	movs	r3, #0
90001ef8:	617b      	str	r3, [r7, #20]
90001efa:	e009      	b.n	90001f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
90001efc:	68bb      	ldr	r3, [r7, #8]
90001efe:	1c5a      	adds	r2, r3, #1
90001f00:	60ba      	str	r2, [r7, #8]
90001f02:	781b      	ldrb	r3, [r3, #0]
90001f04:	4618      	mov	r0, r3
90001f06:	f7ff f97e 	bl	90001206 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001f0a:	697b      	ldr	r3, [r7, #20]
90001f0c:	3301      	adds	r3, #1
90001f0e:	617b      	str	r3, [r7, #20]
90001f10:	697a      	ldr	r2, [r7, #20]
90001f12:	687b      	ldr	r3, [r7, #4]
90001f14:	429a      	cmp	r2, r3
90001f16:	dbf1      	blt.n	90001efc <_write+0x12>
	}
	return len;
90001f18:	687b      	ldr	r3, [r7, #4]
}
90001f1a:	4618      	mov	r0, r3
90001f1c:	3718      	adds	r7, #24
90001f1e:	46bd      	mov	sp, r7
90001f20:	bd80      	pop	{r7, pc}

90001f22 <_close>:

int _close(int file)
{
90001f22:	b480      	push	{r7}
90001f24:	b083      	sub	sp, #12
90001f26:	af00      	add	r7, sp, #0
90001f28:	6078      	str	r0, [r7, #4]
	return -1;
90001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
90001f2e:	4618      	mov	r0, r3
90001f30:	370c      	adds	r7, #12
90001f32:	46bd      	mov	sp, r7
90001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f38:	4770      	bx	lr

90001f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
90001f3a:	b480      	push	{r7}
90001f3c:	b083      	sub	sp, #12
90001f3e:	af00      	add	r7, sp, #0
90001f40:	6078      	str	r0, [r7, #4]
90001f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
90001f44:	683b      	ldr	r3, [r7, #0]
90001f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90001f4a:	605a      	str	r2, [r3, #4]
	return 0;
90001f4c:	2300      	movs	r3, #0
}
90001f4e:	4618      	mov	r0, r3
90001f50:	370c      	adds	r7, #12
90001f52:	46bd      	mov	sp, r7
90001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f58:	4770      	bx	lr

90001f5a <_isatty>:

int _isatty(int file)
{
90001f5a:	b480      	push	{r7}
90001f5c:	b083      	sub	sp, #12
90001f5e:	af00      	add	r7, sp, #0
90001f60:	6078      	str	r0, [r7, #4]
	return 1;
90001f62:	2301      	movs	r3, #1
}
90001f64:	4618      	mov	r0, r3
90001f66:	370c      	adds	r7, #12
90001f68:	46bd      	mov	sp, r7
90001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f6e:	4770      	bx	lr

90001f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001f70:	b480      	push	{r7}
90001f72:	b085      	sub	sp, #20
90001f74:	af00      	add	r7, sp, #0
90001f76:	60f8      	str	r0, [r7, #12]
90001f78:	60b9      	str	r1, [r7, #8]
90001f7a:	607a      	str	r2, [r7, #4]
	return 0;
90001f7c:	2300      	movs	r3, #0
}
90001f7e:	4618      	mov	r0, r3
90001f80:	3714      	adds	r7, #20
90001f82:	46bd      	mov	sp, r7
90001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f88:	4770      	bx	lr
	...

90001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90001f8c:	b580      	push	{r7, lr}
90001f8e:	b086      	sub	sp, #24
90001f90:	af00      	add	r7, sp, #0
90001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90001f94:	4a14      	ldr	r2, [pc, #80]	; (90001fe8 <_sbrk+0x5c>)
90001f96:	4b15      	ldr	r3, [pc, #84]	; (90001fec <_sbrk+0x60>)
90001f98:	1ad3      	subs	r3, r2, r3
90001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001f9c:	697b      	ldr	r3, [r7, #20]
90001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001fa0:	4b13      	ldr	r3, [pc, #76]	; (90001ff0 <_sbrk+0x64>)
90001fa2:	681b      	ldr	r3, [r3, #0]
90001fa4:	2b00      	cmp	r3, #0
90001fa6:	d102      	bne.n	90001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90001fa8:	4b11      	ldr	r3, [pc, #68]	; (90001ff0 <_sbrk+0x64>)
90001faa:	4a12      	ldr	r2, [pc, #72]	; (90001ff4 <_sbrk+0x68>)
90001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001fae:	4b10      	ldr	r3, [pc, #64]	; (90001ff0 <_sbrk+0x64>)
90001fb0:	681a      	ldr	r2, [r3, #0]
90001fb2:	687b      	ldr	r3, [r7, #4]
90001fb4:	4413      	add	r3, r2
90001fb6:	693a      	ldr	r2, [r7, #16]
90001fb8:	429a      	cmp	r2, r3
90001fba:	d207      	bcs.n	90001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
90001fbc:	f00e ff18 	bl	90010df0 <__errno>
90001fc0:	4603      	mov	r3, r0
90001fc2:	220c      	movs	r2, #12
90001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90001fc6:	f04f 33ff 	mov.w	r3, #4294967295
90001fca:	e009      	b.n	90001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90001fcc:	4b08      	ldr	r3, [pc, #32]	; (90001ff0 <_sbrk+0x64>)
90001fce:	681b      	ldr	r3, [r3, #0]
90001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001fd2:	4b07      	ldr	r3, [pc, #28]	; (90001ff0 <_sbrk+0x64>)
90001fd4:	681a      	ldr	r2, [r3, #0]
90001fd6:	687b      	ldr	r3, [r7, #4]
90001fd8:	4413      	add	r3, r2
90001fda:	4a05      	ldr	r2, [pc, #20]	; (90001ff0 <_sbrk+0x64>)
90001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001fde:	68fb      	ldr	r3, [r7, #12]
}
90001fe0:	4618      	mov	r0, r3
90001fe2:	3718      	adds	r7, #24
90001fe4:	46bd      	mov	sp, r7
90001fe6:	bd80      	pop	{r7, pc}
90001fe8:	24080000 	.word	0x24080000
90001fec:	00000400 	.word	0x00000400
90001ff0:	24000924 	.word	0x24000924
90001ff4:	24005848 	.word	0x24005848

90001ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90001ff8:	b480      	push	{r7}
90001ffa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90001ffc:	4b3b      	ldr	r3, [pc, #236]	; (900020ec <SystemInit+0xf4>)
90001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90002002:	4a3a      	ldr	r2, [pc, #232]	; (900020ec <SystemInit+0xf4>)
90002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  RCC->CFGR = 0; // Reset the configuration register
9000200c:	4b38      	ldr	r3, [pc, #224]	; (900020f0 <SystemInit+0xf8>)
9000200e:	2200      	movs	r2, #0
90002010:	611a      	str	r2, [r3, #16]
  SCB->VTOR = QSPI_BASE; // 0x90000000
90002012:	4b36      	ldr	r3, [pc, #216]	; (900020ec <SystemInit+0xf4>)
90002014:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90002018:	609a      	str	r2, [r3, #8]

  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
9000201a:	4b36      	ldr	r3, [pc, #216]	; (900020f4 <SystemInit+0xfc>)
9000201c:	681b      	ldr	r3, [r3, #0]
9000201e:	f003 030f 	and.w	r3, r3, #15
90002022:	2b06      	cmp	r3, #6
90002024:	d807      	bhi.n	90002036 <SystemInit+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90002026:	4b33      	ldr	r3, [pc, #204]	; (900020f4 <SystemInit+0xfc>)
90002028:	681b      	ldr	r3, [r3, #0]
9000202a:	f023 030f 	bic.w	r3, r3, #15
9000202e:	4a31      	ldr	r2, [pc, #196]	; (900020f4 <SystemInit+0xfc>)
90002030:	f043 0307 	orr.w	r3, r3, #7
90002034:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90002036:	4b2e      	ldr	r3, [pc, #184]	; (900020f0 <SystemInit+0xf8>)
90002038:	681b      	ldr	r3, [r3, #0]
9000203a:	4a2d      	ldr	r2, [pc, #180]	; (900020f0 <SystemInit+0xf8>)
9000203c:	f043 0301 	orr.w	r3, r3, #1
90002040:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90002042:	4b2b      	ldr	r3, [pc, #172]	; (900020f0 <SystemInit+0xf8>)
90002044:	2200      	movs	r2, #0
90002046:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90002048:	4b29      	ldr	r3, [pc, #164]	; (900020f0 <SystemInit+0xf8>)
9000204a:	681a      	ldr	r2, [r3, #0]
9000204c:	4928      	ldr	r1, [pc, #160]	; (900020f0 <SystemInit+0xf8>)
9000204e:	4b2a      	ldr	r3, [pc, #168]	; (900020f8 <SystemInit+0x100>)
90002050:	4013      	ands	r3, r2
90002052:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
90002054:	4b27      	ldr	r3, [pc, #156]	; (900020f4 <SystemInit+0xfc>)
90002056:	681b      	ldr	r3, [r3, #0]
90002058:	f003 0308 	and.w	r3, r3, #8
9000205c:	2b00      	cmp	r3, #0
9000205e:	d007      	beq.n	90002070 <SystemInit+0x78>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90002060:	4b24      	ldr	r3, [pc, #144]	; (900020f4 <SystemInit+0xfc>)
90002062:	681b      	ldr	r3, [r3, #0]
90002064:	f023 030f 	bic.w	r3, r3, #15
90002068:	4a22      	ldr	r2, [pc, #136]	; (900020f4 <SystemInit+0xfc>)
9000206a:	f043 0307 	orr.w	r3, r3, #7
9000206e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90002070:	4b1f      	ldr	r3, [pc, #124]	; (900020f0 <SystemInit+0xf8>)
90002072:	2200      	movs	r2, #0
90002074:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90002076:	4b1e      	ldr	r3, [pc, #120]	; (900020f0 <SystemInit+0xf8>)
90002078:	2200      	movs	r2, #0
9000207a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
9000207c:	4b1c      	ldr	r3, [pc, #112]	; (900020f0 <SystemInit+0xf8>)
9000207e:	2200      	movs	r2, #0
90002080:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
90002082:	4b1b      	ldr	r3, [pc, #108]	; (900020f0 <SystemInit+0xf8>)
90002084:	4a1d      	ldr	r2, [pc, #116]	; (900020fc <SystemInit+0x104>)
90002086:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
90002088:	4b19      	ldr	r3, [pc, #100]	; (900020f0 <SystemInit+0xf8>)
9000208a:	4a1d      	ldr	r2, [pc, #116]	; (90002100 <SystemInit+0x108>)
9000208c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
9000208e:	4b18      	ldr	r3, [pc, #96]	; (900020f0 <SystemInit+0xf8>)
90002090:	4a1c      	ldr	r2, [pc, #112]	; (90002104 <SystemInit+0x10c>)
90002092:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90002094:	4b16      	ldr	r3, [pc, #88]	; (900020f0 <SystemInit+0xf8>)
90002096:	2200      	movs	r2, #0
90002098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
9000209a:	4b15      	ldr	r3, [pc, #84]	; (900020f0 <SystemInit+0xf8>)
9000209c:	4a19      	ldr	r2, [pc, #100]	; (90002104 <SystemInit+0x10c>)
9000209e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
900020a0:	4b13      	ldr	r3, [pc, #76]	; (900020f0 <SystemInit+0xf8>)
900020a2:	2200      	movs	r2, #0
900020a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
900020a6:	4b12      	ldr	r3, [pc, #72]	; (900020f0 <SystemInit+0xf8>)
900020a8:	4a16      	ldr	r2, [pc, #88]	; (90002104 <SystemInit+0x10c>)
900020aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
900020ac:	4b10      	ldr	r3, [pc, #64]	; (900020f0 <SystemInit+0xf8>)
900020ae:	2200      	movs	r2, #0
900020b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
900020b2:	4b0f      	ldr	r3, [pc, #60]	; (900020f0 <SystemInit+0xf8>)
900020b4:	681b      	ldr	r3, [r3, #0]
900020b6:	4a0e      	ldr	r2, [pc, #56]	; (900020f0 <SystemInit+0xf8>)
900020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900020bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
900020be:	4b0c      	ldr	r3, [pc, #48]	; (900020f0 <SystemInit+0xf8>)
900020c0:	2200      	movs	r2, #0
900020c2:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900020c4:	4b10      	ldr	r3, [pc, #64]	; (90002108 <SystemInit+0x110>)
900020c6:	681a      	ldr	r2, [r3, #0]
900020c8:	4b10      	ldr	r3, [pc, #64]	; (9000210c <SystemInit+0x114>)
900020ca:	4013      	ands	r3, r2
900020cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900020d0:	d202      	bcs.n	900020d8 <SystemInit+0xe0>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
900020d2:	4b0f      	ldr	r3, [pc, #60]	; (90002110 <SystemInit+0x118>)
900020d4:	2201      	movs	r2, #1
900020d6:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
900020d8:	4b0e      	ldr	r3, [pc, #56]	; (90002114 <SystemInit+0x11c>)
900020da:	f243 02d2 	movw	r2, #12498	; 0x30d2
900020de:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
900020e0:	bf00      	nop
900020e2:	46bd      	mov	sp, r7
900020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900020e8:	4770      	bx	lr
900020ea:	bf00      	nop
900020ec:	e000ed00 	.word	0xe000ed00
900020f0:	58024400 	.word	0x58024400
900020f4:	52002000 	.word	0x52002000
900020f8:	eaf6ed7f 	.word	0xeaf6ed7f
900020fc:	02020200 	.word	0x02020200
90002100:	01ff0000 	.word	0x01ff0000
90002104:	01010280 	.word	0x01010280
90002108:	5c001000 	.word	0x5c001000
9000210c:	ffff0000 	.word	0xffff0000
90002110:	51008108 	.word	0x51008108
90002114:	52004000 	.word	0x52004000

90002118 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
90002118:	b580      	push	{r7, lr}
9000211a:	b088      	sub	sp, #32
9000211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
9000211e:	f107 0310 	add.w	r3, r7, #16
90002122:	2200      	movs	r2, #0
90002124:	601a      	str	r2, [r3, #0]
90002126:	605a      	str	r2, [r3, #4]
90002128:	609a      	str	r2, [r3, #8]
9000212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
9000212c:	1d3b      	adds	r3, r7, #4
9000212e:	2200      	movs	r2, #0
90002130:	601a      	str	r2, [r3, #0]
90002132:	605a      	str	r2, [r3, #4]
90002134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
90002136:	4b20      	ldr	r3, [pc, #128]	; (900021b8 <MX_TIM8_Init+0xa0>)
90002138:	4a20      	ldr	r2, [pc, #128]	; (900021bc <MX_TIM8_Init+0xa4>)
9000213a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 240-1;
9000213c:	4b1e      	ldr	r3, [pc, #120]	; (900021b8 <MX_TIM8_Init+0xa0>)
9000213e:	22ef      	movs	r2, #239	; 0xef
90002140:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
90002142:	4b1d      	ldr	r3, [pc, #116]	; (900021b8 <MX_TIM8_Init+0xa0>)
90002144:	2200      	movs	r2, #0
90002146:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
90002148:	4b1b      	ldr	r3, [pc, #108]	; (900021b8 <MX_TIM8_Init+0xa0>)
9000214a:	f644 621f 	movw	r2, #19999	; 0x4e1f
9000214e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
90002150:	4b19      	ldr	r3, [pc, #100]	; (900021b8 <MX_TIM8_Init+0xa0>)
90002152:	2200      	movs	r2, #0
90002154:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
90002156:	4b18      	ldr	r3, [pc, #96]	; (900021b8 <MX_TIM8_Init+0xa0>)
90002158:	2200      	movs	r2, #0
9000215a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
9000215c:	4b16      	ldr	r3, [pc, #88]	; (900021b8 <MX_TIM8_Init+0xa0>)
9000215e:	2280      	movs	r2, #128	; 0x80
90002160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
90002162:	4815      	ldr	r0, [pc, #84]	; (900021b8 <MX_TIM8_Init+0xa0>)
90002164:	f008 ffa5 	bl	9000b0b2 <HAL_TIM_Base_Init>
90002168:	4603      	mov	r3, r0
9000216a:	2b00      	cmp	r3, #0
9000216c:	d001      	beq.n	90002172 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
9000216e:	f7ff fb13 	bl	90001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
90002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90002176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
90002178:	f107 0310 	add.w	r3, r7, #16
9000217c:	4619      	mov	r1, r3
9000217e:	480e      	ldr	r0, [pc, #56]	; (900021b8 <MX_TIM8_Init+0xa0>)
90002180:	f009 fa94 	bl	9000b6ac <HAL_TIM_ConfigClockSource>
90002184:	4603      	mov	r3, r0
90002186:	2b00      	cmp	r3, #0
90002188:	d001      	beq.n	9000218e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
9000218a:	f7ff fb05 	bl	90001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
9000218e:	2300      	movs	r3, #0
90002190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
90002192:	2300      	movs	r3, #0
90002194:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
90002196:	2300      	movs	r3, #0
90002198:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
9000219a:	1d3b      	adds	r3, r7, #4
9000219c:	4619      	mov	r1, r3
9000219e:	4806      	ldr	r0, [pc, #24]	; (900021b8 <MX_TIM8_Init+0xa0>)
900021a0:	f009 fd02 	bl	9000bba8 <HAL_TIMEx_MasterConfigSynchronization>
900021a4:	4603      	mov	r3, r0
900021a6:	2b00      	cmp	r3, #0
900021a8:	d001      	beq.n	900021ae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
900021aa:	f7ff faf5 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
900021ae:	bf00      	nop
900021b0:	3720      	adds	r7, #32
900021b2:	46bd      	mov	sp, r7
900021b4:	bd80      	pop	{r7, pc}
900021b6:	bf00      	nop
900021b8:	24000928 	.word	0x24000928
900021bc:	40010400 	.word	0x40010400

900021c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
900021c0:	b480      	push	{r7}
900021c2:	b085      	sub	sp, #20
900021c4:	af00      	add	r7, sp, #0
900021c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
900021c8:	687b      	ldr	r3, [r7, #4]
900021ca:	681b      	ldr	r3, [r3, #0]
900021cc:	4a0b      	ldr	r2, [pc, #44]	; (900021fc <HAL_TIM_Base_MspInit+0x3c>)
900021ce:	4293      	cmp	r3, r2
900021d0:	d10e      	bne.n	900021f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
900021d2:	4b0b      	ldr	r3, [pc, #44]	; (90002200 <HAL_TIM_Base_MspInit+0x40>)
900021d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900021d8:	4a09      	ldr	r2, [pc, #36]	; (90002200 <HAL_TIM_Base_MspInit+0x40>)
900021da:	f043 0302 	orr.w	r3, r3, #2
900021de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
900021e2:	4b07      	ldr	r3, [pc, #28]	; (90002200 <HAL_TIM_Base_MspInit+0x40>)
900021e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900021e8:	f003 0302 	and.w	r3, r3, #2
900021ec:	60fb      	str	r3, [r7, #12]
900021ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
900021f0:	bf00      	nop
900021f2:	3714      	adds	r7, #20
900021f4:	46bd      	mov	sp, r7
900021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
900021fa:	4770      	bx	lr
900021fc:	40010400 	.word	0x40010400
90002200:	58024400 	.word	0x58024400

90002204 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart8_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
90002204:	b580      	push	{r7, lr}
90002206:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
90002208:	4b22      	ldr	r3, [pc, #136]	; (90002294 <MX_UART4_Init+0x90>)
9000220a:	4a23      	ldr	r2, [pc, #140]	; (90002298 <MX_UART4_Init+0x94>)
9000220c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
9000220e:	4b21      	ldr	r3, [pc, #132]	; (90002294 <MX_UART4_Init+0x90>)
90002210:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
90002214:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
90002216:	4b1f      	ldr	r3, [pc, #124]	; (90002294 <MX_UART4_Init+0x90>)
90002218:	2200      	movs	r2, #0
9000221a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
9000221c:	4b1d      	ldr	r3, [pc, #116]	; (90002294 <MX_UART4_Init+0x90>)
9000221e:	2200      	movs	r2, #0
90002220:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
90002222:	4b1c      	ldr	r3, [pc, #112]	; (90002294 <MX_UART4_Init+0x90>)
90002224:	2200      	movs	r2, #0
90002226:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
90002228:	4b1a      	ldr	r3, [pc, #104]	; (90002294 <MX_UART4_Init+0x90>)
9000222a:	220c      	movs	r2, #12
9000222c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
9000222e:	4b19      	ldr	r3, [pc, #100]	; (90002294 <MX_UART4_Init+0x90>)
90002230:	2200      	movs	r2, #0
90002232:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
90002234:	4b17      	ldr	r3, [pc, #92]	; (90002294 <MX_UART4_Init+0x90>)
90002236:	2200      	movs	r2, #0
90002238:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
9000223a:	4b16      	ldr	r3, [pc, #88]	; (90002294 <MX_UART4_Init+0x90>)
9000223c:	2200      	movs	r2, #0
9000223e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90002240:	4b14      	ldr	r3, [pc, #80]	; (90002294 <MX_UART4_Init+0x90>)
90002242:	2200      	movs	r2, #0
90002244:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90002246:	4b13      	ldr	r3, [pc, #76]	; (90002294 <MX_UART4_Init+0x90>)
90002248:	2200      	movs	r2, #0
9000224a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
9000224c:	4811      	ldr	r0, [pc, #68]	; (90002294 <MX_UART4_Init+0x90>)
9000224e:	f009 fd57 	bl	9000bd00 <HAL_UART_Init>
90002252:	4603      	mov	r3, r0
90002254:	2b00      	cmp	r3, #0
90002256:	d001      	beq.n	9000225c <MX_UART4_Init+0x58>
  {
    Error_Handler();
90002258:	f7ff fa9e 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
9000225c:	2100      	movs	r1, #0
9000225e:	480d      	ldr	r0, [pc, #52]	; (90002294 <MX_UART4_Init+0x90>)
90002260:	f00b fc45 	bl	9000daee <HAL_UARTEx_SetTxFifoThreshold>
90002264:	4603      	mov	r3, r0
90002266:	2b00      	cmp	r3, #0
90002268:	d001      	beq.n	9000226e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
9000226a:	f7ff fa95 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
9000226e:	2100      	movs	r1, #0
90002270:	4808      	ldr	r0, [pc, #32]	; (90002294 <MX_UART4_Init+0x90>)
90002272:	f00b fc7a 	bl	9000db6a <HAL_UARTEx_SetRxFifoThreshold>
90002276:	4603      	mov	r3, r0
90002278:	2b00      	cmp	r3, #0
9000227a:	d001      	beq.n	90002280 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
9000227c:	f7ff fa8c 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
90002280:	4804      	ldr	r0, [pc, #16]	; (90002294 <MX_UART4_Init+0x90>)
90002282:	f00b fbfb 	bl	9000da7c <HAL_UARTEx_DisableFifoMode>
90002286:	4603      	mov	r3, r0
90002288:	2b00      	cmp	r3, #0
9000228a:	d001      	beq.n	90002290 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
9000228c:	f7ff fa84 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
90002290:	bf00      	nop
90002292:	bd80      	pop	{r7, pc}
90002294:	24000974 	.word	0x24000974
90002298:	40004c00 	.word	0x40004c00

9000229c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
9000229c:	b580      	push	{r7, lr}
9000229e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
900022a0:	4b22      	ldr	r3, [pc, #136]	; (9000232c <MX_UART5_Init+0x90>)
900022a2:	4a23      	ldr	r2, [pc, #140]	; (90002330 <MX_UART5_Init+0x94>)
900022a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
900022a6:	4b21      	ldr	r3, [pc, #132]	; (9000232c <MX_UART5_Init+0x90>)
900022a8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
900022ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
900022ae:	4b1f      	ldr	r3, [pc, #124]	; (9000232c <MX_UART5_Init+0x90>)
900022b0:	2200      	movs	r2, #0
900022b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
900022b4:	4b1d      	ldr	r3, [pc, #116]	; (9000232c <MX_UART5_Init+0x90>)
900022b6:	2200      	movs	r2, #0
900022b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
900022ba:	4b1c      	ldr	r3, [pc, #112]	; (9000232c <MX_UART5_Init+0x90>)
900022bc:	2200      	movs	r2, #0
900022be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
900022c0:	4b1a      	ldr	r3, [pc, #104]	; (9000232c <MX_UART5_Init+0x90>)
900022c2:	220c      	movs	r2, #12
900022c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
900022c6:	4b19      	ldr	r3, [pc, #100]	; (9000232c <MX_UART5_Init+0x90>)
900022c8:	2200      	movs	r2, #0
900022ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
900022cc:	4b17      	ldr	r3, [pc, #92]	; (9000232c <MX_UART5_Init+0x90>)
900022ce:	2200      	movs	r2, #0
900022d0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
900022d2:	4b16      	ldr	r3, [pc, #88]	; (9000232c <MX_UART5_Init+0x90>)
900022d4:	2200      	movs	r2, #0
900022d6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
900022d8:	4b14      	ldr	r3, [pc, #80]	; (9000232c <MX_UART5_Init+0x90>)
900022da:	2200      	movs	r2, #0
900022dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
900022de:	4b13      	ldr	r3, [pc, #76]	; (9000232c <MX_UART5_Init+0x90>)
900022e0:	2200      	movs	r2, #0
900022e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
900022e4:	4811      	ldr	r0, [pc, #68]	; (9000232c <MX_UART5_Init+0x90>)
900022e6:	f009 fd0b 	bl	9000bd00 <HAL_UART_Init>
900022ea:	4603      	mov	r3, r0
900022ec:	2b00      	cmp	r3, #0
900022ee:	d001      	beq.n	900022f4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
900022f0:	f7ff fa52 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
900022f4:	2100      	movs	r1, #0
900022f6:	480d      	ldr	r0, [pc, #52]	; (9000232c <MX_UART5_Init+0x90>)
900022f8:	f00b fbf9 	bl	9000daee <HAL_UARTEx_SetTxFifoThreshold>
900022fc:	4603      	mov	r3, r0
900022fe:	2b00      	cmp	r3, #0
90002300:	d001      	beq.n	90002306 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
90002302:	f7ff fa49 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90002306:	2100      	movs	r1, #0
90002308:	4808      	ldr	r0, [pc, #32]	; (9000232c <MX_UART5_Init+0x90>)
9000230a:	f00b fc2e 	bl	9000db6a <HAL_UARTEx_SetRxFifoThreshold>
9000230e:	4603      	mov	r3, r0
90002310:	2b00      	cmp	r3, #0
90002312:	d001      	beq.n	90002318 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
90002314:	f7ff fa40 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
90002318:	4804      	ldr	r0, [pc, #16]	; (9000232c <MX_UART5_Init+0x90>)
9000231a:	f00b fbaf 	bl	9000da7c <HAL_UARTEx_DisableFifoMode>
9000231e:	4603      	mov	r3, r0
90002320:	2b00      	cmp	r3, #0
90002322:	d001      	beq.n	90002328 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
90002324:	f7ff fa38 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
90002328:	bf00      	nop
9000232a:	bd80      	pop	{r7, pc}
9000232c:	24000a04 	.word	0x24000a04
90002330:	40005000 	.word	0x40005000

90002334 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
90002334:	b580      	push	{r7, lr}
90002336:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
90002338:	4b22      	ldr	r3, [pc, #136]	; (900023c4 <MX_UART8_Init+0x90>)
9000233a:	4a23      	ldr	r2, [pc, #140]	; (900023c8 <MX_UART8_Init+0x94>)
9000233c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 921600;
9000233e:	4b21      	ldr	r3, [pc, #132]	; (900023c4 <MX_UART8_Init+0x90>)
90002340:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
90002344:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
90002346:	4b1f      	ldr	r3, [pc, #124]	; (900023c4 <MX_UART8_Init+0x90>)
90002348:	2200      	movs	r2, #0
9000234a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
9000234c:	4b1d      	ldr	r3, [pc, #116]	; (900023c4 <MX_UART8_Init+0x90>)
9000234e:	2200      	movs	r2, #0
90002350:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
90002352:	4b1c      	ldr	r3, [pc, #112]	; (900023c4 <MX_UART8_Init+0x90>)
90002354:	2200      	movs	r2, #0
90002356:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
90002358:	4b1a      	ldr	r3, [pc, #104]	; (900023c4 <MX_UART8_Init+0x90>)
9000235a:	220c      	movs	r2, #12
9000235c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
9000235e:	4b19      	ldr	r3, [pc, #100]	; (900023c4 <MX_UART8_Init+0x90>)
90002360:	2200      	movs	r2, #0
90002362:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
90002364:	4b17      	ldr	r3, [pc, #92]	; (900023c4 <MX_UART8_Init+0x90>)
90002366:	2200      	movs	r2, #0
90002368:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
9000236a:	4b16      	ldr	r3, [pc, #88]	; (900023c4 <MX_UART8_Init+0x90>)
9000236c:	2200      	movs	r2, #0
9000236e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90002370:	4b14      	ldr	r3, [pc, #80]	; (900023c4 <MX_UART8_Init+0x90>)
90002372:	2200      	movs	r2, #0
90002374:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90002376:	4b13      	ldr	r3, [pc, #76]	; (900023c4 <MX_UART8_Init+0x90>)
90002378:	2200      	movs	r2, #0
9000237a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
9000237c:	4811      	ldr	r0, [pc, #68]	; (900023c4 <MX_UART8_Init+0x90>)
9000237e:	f009 fcbf 	bl	9000bd00 <HAL_UART_Init>
90002382:	4603      	mov	r3, r0
90002384:	2b00      	cmp	r3, #0
90002386:	d001      	beq.n	9000238c <MX_UART8_Init+0x58>
  {
    Error_Handler();
90002388:	f7ff fa06 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
9000238c:	2100      	movs	r1, #0
9000238e:	480d      	ldr	r0, [pc, #52]	; (900023c4 <MX_UART8_Init+0x90>)
90002390:	f00b fbad 	bl	9000daee <HAL_UARTEx_SetTxFifoThreshold>
90002394:	4603      	mov	r3, r0
90002396:	2b00      	cmp	r3, #0
90002398:	d001      	beq.n	9000239e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
9000239a:	f7ff f9fd 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
9000239e:	2100      	movs	r1, #0
900023a0:	4808      	ldr	r0, [pc, #32]	; (900023c4 <MX_UART8_Init+0x90>)
900023a2:	f00b fbe2 	bl	9000db6a <HAL_UARTEx_SetRxFifoThreshold>
900023a6:	4603      	mov	r3, r0
900023a8:	2b00      	cmp	r3, #0
900023aa:	d001      	beq.n	900023b0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
900023ac:	f7ff f9f4 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
900023b0:	4804      	ldr	r0, [pc, #16]	; (900023c4 <MX_UART8_Init+0x90>)
900023b2:	f00b fb63 	bl	9000da7c <HAL_UARTEx_DisableFifoMode>
900023b6:	4603      	mov	r3, r0
900023b8:	2b00      	cmp	r3, #0
900023ba:	d001      	beq.n	900023c0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
900023bc:	f7ff f9ec 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
900023c0:	bf00      	nop
900023c2:	bd80      	pop	{r7, pc}
900023c4:	24000a94 	.word	0x24000a94
900023c8:	40007c00 	.word	0x40007c00

900023cc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
900023cc:	b580      	push	{r7, lr}
900023ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
900023d0:	4b22      	ldr	r3, [pc, #136]	; (9000245c <MX_USART1_UART_Init+0x90>)
900023d2:	4a23      	ldr	r2, [pc, #140]	; (90002460 <MX_USART1_UART_Init+0x94>)
900023d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
900023d6:	4b21      	ldr	r3, [pc, #132]	; (9000245c <MX_USART1_UART_Init+0x90>)
900023d8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
900023dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
900023de:	4b1f      	ldr	r3, [pc, #124]	; (9000245c <MX_USART1_UART_Init+0x90>)
900023e0:	2200      	movs	r2, #0
900023e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
900023e4:	4b1d      	ldr	r3, [pc, #116]	; (9000245c <MX_USART1_UART_Init+0x90>)
900023e6:	2200      	movs	r2, #0
900023e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
900023ea:	4b1c      	ldr	r3, [pc, #112]	; (9000245c <MX_USART1_UART_Init+0x90>)
900023ec:	2200      	movs	r2, #0
900023ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
900023f0:	4b1a      	ldr	r3, [pc, #104]	; (9000245c <MX_USART1_UART_Init+0x90>)
900023f2:	220c      	movs	r2, #12
900023f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
900023f6:	4b19      	ldr	r3, [pc, #100]	; (9000245c <MX_USART1_UART_Init+0x90>)
900023f8:	2200      	movs	r2, #0
900023fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
900023fc:	4b17      	ldr	r3, [pc, #92]	; (9000245c <MX_USART1_UART_Init+0x90>)
900023fe:	2200      	movs	r2, #0
90002400:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90002402:	4b16      	ldr	r3, [pc, #88]	; (9000245c <MX_USART1_UART_Init+0x90>)
90002404:	2200      	movs	r2, #0
90002406:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90002408:	4b14      	ldr	r3, [pc, #80]	; (9000245c <MX_USART1_UART_Init+0x90>)
9000240a:	2200      	movs	r2, #0
9000240c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
9000240e:	4b13      	ldr	r3, [pc, #76]	; (9000245c <MX_USART1_UART_Init+0x90>)
90002410:	2200      	movs	r2, #0
90002412:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
90002414:	4811      	ldr	r0, [pc, #68]	; (9000245c <MX_USART1_UART_Init+0x90>)
90002416:	f009 fc73 	bl	9000bd00 <HAL_UART_Init>
9000241a:	4603      	mov	r3, r0
9000241c:	2b00      	cmp	r3, #0
9000241e:	d001      	beq.n	90002424 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
90002420:	f7ff f9ba 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90002424:	2100      	movs	r1, #0
90002426:	480d      	ldr	r0, [pc, #52]	; (9000245c <MX_USART1_UART_Init+0x90>)
90002428:	f00b fb61 	bl	9000daee <HAL_UARTEx_SetTxFifoThreshold>
9000242c:	4603      	mov	r3, r0
9000242e:	2b00      	cmp	r3, #0
90002430:	d001      	beq.n	90002436 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
90002432:	f7ff f9b1 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90002436:	2100      	movs	r1, #0
90002438:	4808      	ldr	r0, [pc, #32]	; (9000245c <MX_USART1_UART_Init+0x90>)
9000243a:	f00b fb96 	bl	9000db6a <HAL_UARTEx_SetRxFifoThreshold>
9000243e:	4603      	mov	r3, r0
90002440:	2b00      	cmp	r3, #0
90002442:	d001      	beq.n	90002448 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
90002444:	f7ff f9a8 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
90002448:	4804      	ldr	r0, [pc, #16]	; (9000245c <MX_USART1_UART_Init+0x90>)
9000244a:	f00b fb17 	bl	9000da7c <HAL_UARTEx_DisableFifoMode>
9000244e:	4603      	mov	r3, r0
90002450:	2b00      	cmp	r3, #0
90002452:	d001      	beq.n	90002458 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
90002454:	f7ff f9a0 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
90002458:	bf00      	nop
9000245a:	bd80      	pop	{r7, pc}
9000245c:	24000b24 	.word	0x24000b24
90002460:	40011000 	.word	0x40011000

90002464 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
90002464:	b580      	push	{r7, lr}
90002466:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
90002468:	4b22      	ldr	r3, [pc, #136]	; (900024f4 <MX_USART3_UART_Init+0x90>)
9000246a:	4a23      	ldr	r2, [pc, #140]	; (900024f8 <MX_USART3_UART_Init+0x94>)
9000246c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
9000246e:	4b21      	ldr	r3, [pc, #132]	; (900024f4 <MX_USART3_UART_Init+0x90>)
90002470:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
90002474:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
90002476:	4b1f      	ldr	r3, [pc, #124]	; (900024f4 <MX_USART3_UART_Init+0x90>)
90002478:	2200      	movs	r2, #0
9000247a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
9000247c:	4b1d      	ldr	r3, [pc, #116]	; (900024f4 <MX_USART3_UART_Init+0x90>)
9000247e:	2200      	movs	r2, #0
90002480:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
90002482:	4b1c      	ldr	r3, [pc, #112]	; (900024f4 <MX_USART3_UART_Init+0x90>)
90002484:	2200      	movs	r2, #0
90002486:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
90002488:	4b1a      	ldr	r3, [pc, #104]	; (900024f4 <MX_USART3_UART_Init+0x90>)
9000248a:	220c      	movs	r2, #12
9000248c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
9000248e:	4b19      	ldr	r3, [pc, #100]	; (900024f4 <MX_USART3_UART_Init+0x90>)
90002490:	2200      	movs	r2, #0
90002492:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
90002494:	4b17      	ldr	r3, [pc, #92]	; (900024f4 <MX_USART3_UART_Init+0x90>)
90002496:	2200      	movs	r2, #0
90002498:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
9000249a:	4b16      	ldr	r3, [pc, #88]	; (900024f4 <MX_USART3_UART_Init+0x90>)
9000249c:	2200      	movs	r2, #0
9000249e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
900024a0:	4b14      	ldr	r3, [pc, #80]	; (900024f4 <MX_USART3_UART_Init+0x90>)
900024a2:	2200      	movs	r2, #0
900024a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
900024a6:	4b13      	ldr	r3, [pc, #76]	; (900024f4 <MX_USART3_UART_Init+0x90>)
900024a8:	2200      	movs	r2, #0
900024aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
900024ac:	4811      	ldr	r0, [pc, #68]	; (900024f4 <MX_USART3_UART_Init+0x90>)
900024ae:	f009 fc27 	bl	9000bd00 <HAL_UART_Init>
900024b2:	4603      	mov	r3, r0
900024b4:	2b00      	cmp	r3, #0
900024b6:	d001      	beq.n	900024bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
900024b8:	f7ff f96e 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
900024bc:	2100      	movs	r1, #0
900024be:	480d      	ldr	r0, [pc, #52]	; (900024f4 <MX_USART3_UART_Init+0x90>)
900024c0:	f00b fb15 	bl	9000daee <HAL_UARTEx_SetTxFifoThreshold>
900024c4:	4603      	mov	r3, r0
900024c6:	2b00      	cmp	r3, #0
900024c8:	d001      	beq.n	900024ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
900024ca:	f7ff f965 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
900024ce:	2100      	movs	r1, #0
900024d0:	4808      	ldr	r0, [pc, #32]	; (900024f4 <MX_USART3_UART_Init+0x90>)
900024d2:	f00b fb4a 	bl	9000db6a <HAL_UARTEx_SetRxFifoThreshold>
900024d6:	4603      	mov	r3, r0
900024d8:	2b00      	cmp	r3, #0
900024da:	d001      	beq.n	900024e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
900024dc:	f7ff f95c 	bl	90001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
900024e0:	4804      	ldr	r0, [pc, #16]	; (900024f4 <MX_USART3_UART_Init+0x90>)
900024e2:	f00b facb 	bl	9000da7c <HAL_UARTEx_DisableFifoMode>
900024e6:	4603      	mov	r3, r0
900024e8:	2b00      	cmp	r3, #0
900024ea:	d001      	beq.n	900024f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
900024ec:	f7ff f954 	bl	90001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
900024f0:	bf00      	nop
900024f2:	bd80      	pop	{r7, pc}
900024f4:	24000bb4 	.word	0x24000bb4
900024f8:	40004800 	.word	0x40004800

900024fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
900024fc:	b580      	push	{r7, lr}
900024fe:	b0c0      	sub	sp, #256	; 0x100
90002500:	af00      	add	r7, sp, #0
90002502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90002504:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90002508:	2200      	movs	r2, #0
9000250a:	601a      	str	r2, [r3, #0]
9000250c:	605a      	str	r2, [r3, #4]
9000250e:	609a      	str	r2, [r3, #8]
90002510:	60da      	str	r2, [r3, #12]
90002512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90002514:	f107 0330 	add.w	r3, r7, #48	; 0x30
90002518:	22bc      	movs	r2, #188	; 0xbc
9000251a:	2100      	movs	r1, #0
9000251c:	4618      	mov	r0, r3
9000251e:	f00e fd98 	bl	90011052 <memset>
  if(uartHandle->Instance==UART4)
90002522:	687b      	ldr	r3, [r7, #4]
90002524:	681b      	ldr	r3, [r3, #0]
90002526:	4a7f      	ldr	r2, [pc, #508]	; (90002724 <HAL_UART_MspInit+0x228>)
90002528:	4293      	cmp	r3, r2
9000252a:	d179      	bne.n	90002620 <HAL_UART_MspInit+0x124>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
9000252c:	2302      	movs	r3, #2
9000252e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90002530:	2300      	movs	r3, #0
90002532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90002536:	f107 0330 	add.w	r3, r7, #48	; 0x30
9000253a:	4618      	mov	r0, r3
9000253c:	f006 fe3a 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90002540:	4603      	mov	r3, r0
90002542:	2b00      	cmp	r3, #0
90002544:	d001      	beq.n	9000254a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
90002546:	f7ff f927 	bl	90001798 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
9000254a:	4b77      	ldr	r3, [pc, #476]	; (90002728 <HAL_UART_MspInit+0x22c>)
9000254c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90002550:	4a75      	ldr	r2, [pc, #468]	; (90002728 <HAL_UART_MspInit+0x22c>)
90002552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90002556:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
9000255a:	4b73      	ldr	r3, [pc, #460]	; (90002728 <HAL_UART_MspInit+0x22c>)
9000255c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90002560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90002564:	62fb      	str	r3, [r7, #44]	; 0x2c
90002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOD_CLK_ENABLE();
90002568:	4b6f      	ldr	r3, [pc, #444]	; (90002728 <HAL_UART_MspInit+0x22c>)
9000256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000256e:	4a6e      	ldr	r2, [pc, #440]	; (90002728 <HAL_UART_MspInit+0x22c>)
90002570:	f043 0308 	orr.w	r3, r3, #8
90002574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002578:	4b6b      	ldr	r3, [pc, #428]	; (90002728 <HAL_UART_MspInit+0x22c>)
9000257a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000257e:	f003 0308 	and.w	r3, r3, #8
90002582:	62bb      	str	r3, [r7, #40]	; 0x28
90002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
90002586:	2303      	movs	r3, #3
90002588:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000258c:	2302      	movs	r3, #2
9000258e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90002592:	2300      	movs	r3, #0
90002594:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90002598:	2300      	movs	r3, #0
9000259a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
9000259e:	2308      	movs	r3, #8
900025a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900025a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
900025a8:	4619      	mov	r1, r3
900025aa:	4860      	ldr	r0, [pc, #384]	; (9000272c <HAL_UART_MspInit+0x230>)
900025ac:	f004 fa90 	bl	90006ad0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
900025b0:	4b5f      	ldr	r3, [pc, #380]	; (90002730 <HAL_UART_MspInit+0x234>)
900025b2:	4a60      	ldr	r2, [pc, #384]	; (90002734 <HAL_UART_MspInit+0x238>)
900025b4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
900025b6:	4b5e      	ldr	r3, [pc, #376]	; (90002730 <HAL_UART_MspInit+0x234>)
900025b8:	223f      	movs	r2, #63	; 0x3f
900025ba:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
900025bc:	4b5c      	ldr	r3, [pc, #368]	; (90002730 <HAL_UART_MspInit+0x234>)
900025be:	2200      	movs	r2, #0
900025c0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
900025c2:	4b5b      	ldr	r3, [pc, #364]	; (90002730 <HAL_UART_MspInit+0x234>)
900025c4:	2200      	movs	r2, #0
900025c6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
900025c8:	4b59      	ldr	r3, [pc, #356]	; (90002730 <HAL_UART_MspInit+0x234>)
900025ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
900025ce:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
900025d0:	4b57      	ldr	r3, [pc, #348]	; (90002730 <HAL_UART_MspInit+0x234>)
900025d2:	2200      	movs	r2, #0
900025d4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
900025d6:	4b56      	ldr	r3, [pc, #344]	; (90002730 <HAL_UART_MspInit+0x234>)
900025d8:	2200      	movs	r2, #0
900025da:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
900025dc:	4b54      	ldr	r3, [pc, #336]	; (90002730 <HAL_UART_MspInit+0x234>)
900025de:	f44f 7280 	mov.w	r2, #256	; 0x100
900025e2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
900025e4:	4b52      	ldr	r3, [pc, #328]	; (90002730 <HAL_UART_MspInit+0x234>)
900025e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
900025ea:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
900025ec:	4b50      	ldr	r3, [pc, #320]	; (90002730 <HAL_UART_MspInit+0x234>)
900025ee:	2200      	movs	r2, #0
900025f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
900025f2:	484f      	ldr	r0, [pc, #316]	; (90002730 <HAL_UART_MspInit+0x234>)
900025f4:	f001 fc30 	bl	90003e58 <HAL_DMA_Init>
900025f8:	4603      	mov	r3, r0
900025fa:	2b00      	cmp	r3, #0
900025fc:	d001      	beq.n	90002602 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
900025fe:	f7ff f8cb 	bl	90001798 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
90002602:	687b      	ldr	r3, [r7, #4]
90002604:	4a4a      	ldr	r2, [pc, #296]	; (90002730 <HAL_UART_MspInit+0x234>)
90002606:	67da      	str	r2, [r3, #124]	; 0x7c
90002608:	4a49      	ldr	r2, [pc, #292]	; (90002730 <HAL_UART_MspInit+0x234>)
9000260a:	687b      	ldr	r3, [r7, #4]
9000260c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
9000260e:	2200      	movs	r2, #0
90002610:	2105      	movs	r1, #5
90002612:	2034      	movs	r0, #52	; 0x34
90002614:	f001 fb7c 	bl	90003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
90002618:	2034      	movs	r0, #52	; 0x34
9000261a:	f001 fb93 	bl	90003d44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
9000261e:	e1da      	b.n	900029d6 <HAL_UART_MspInit+0x4da>
  else if(uartHandle->Instance==UART5)
90002620:	687b      	ldr	r3, [r7, #4]
90002622:	681b      	ldr	r3, [r3, #0]
90002624:	4a44      	ldr	r2, [pc, #272]	; (90002738 <HAL_UART_MspInit+0x23c>)
90002626:	4293      	cmp	r3, r2
90002628:	f040 808e 	bne.w	90002748 <HAL_UART_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
9000262c:	2302      	movs	r3, #2
9000262e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90002630:	2300      	movs	r3, #0
90002632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90002636:	f107 0330 	add.w	r3, r7, #48	; 0x30
9000263a:	4618      	mov	r0, r3
9000263c:	f006 fdba 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90002640:	4603      	mov	r3, r0
90002642:	2b00      	cmp	r3, #0
90002644:	d001      	beq.n	9000264a <HAL_UART_MspInit+0x14e>
      Error_Handler();
90002646:	f7ff f8a7 	bl	90001798 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
9000264a:	4b37      	ldr	r3, [pc, #220]	; (90002728 <HAL_UART_MspInit+0x22c>)
9000264c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90002650:	4a35      	ldr	r2, [pc, #212]	; (90002728 <HAL_UART_MspInit+0x22c>)
90002652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90002656:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
9000265a:	4b33      	ldr	r3, [pc, #204]	; (90002728 <HAL_UART_MspInit+0x22c>)
9000265c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90002660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90002664:	627b      	str	r3, [r7, #36]	; 0x24
90002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
90002668:	4b2f      	ldr	r3, [pc, #188]	; (90002728 <HAL_UART_MspInit+0x22c>)
9000266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000266e:	4a2e      	ldr	r2, [pc, #184]	; (90002728 <HAL_UART_MspInit+0x22c>)
90002670:	f043 0302 	orr.w	r3, r3, #2
90002674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002678:	4b2b      	ldr	r3, [pc, #172]	; (90002728 <HAL_UART_MspInit+0x22c>)
9000267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000267e:	f003 0302 	and.w	r3, r3, #2
90002682:	623b      	str	r3, [r7, #32]
90002684:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
90002686:	f44f 5340 	mov.w	r3, #12288	; 0x3000
9000268a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000268e:	2302      	movs	r3, #2
90002690:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90002694:	2300      	movs	r3, #0
90002696:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000269a:	2300      	movs	r3, #0
9000269c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
900026a0:	230e      	movs	r3, #14
900026a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900026a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
900026aa:	4619      	mov	r1, r3
900026ac:	4823      	ldr	r0, [pc, #140]	; (9000273c <HAL_UART_MspInit+0x240>)
900026ae:	f004 fa0f 	bl	90006ad0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream2;
900026b2:	4b23      	ldr	r3, [pc, #140]	; (90002740 <HAL_UART_MspInit+0x244>)
900026b4:	4a23      	ldr	r2, [pc, #140]	; (90002744 <HAL_UART_MspInit+0x248>)
900026b6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
900026b8:	4b21      	ldr	r3, [pc, #132]	; (90002740 <HAL_UART_MspInit+0x244>)
900026ba:	2241      	movs	r2, #65	; 0x41
900026bc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
900026be:	4b20      	ldr	r3, [pc, #128]	; (90002740 <HAL_UART_MspInit+0x244>)
900026c0:	2200      	movs	r2, #0
900026c2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
900026c4:	4b1e      	ldr	r3, [pc, #120]	; (90002740 <HAL_UART_MspInit+0x244>)
900026c6:	2200      	movs	r2, #0
900026c8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
900026ca:	4b1d      	ldr	r3, [pc, #116]	; (90002740 <HAL_UART_MspInit+0x244>)
900026cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
900026d0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
900026d2:	4b1b      	ldr	r3, [pc, #108]	; (90002740 <HAL_UART_MspInit+0x244>)
900026d4:	2200      	movs	r2, #0
900026d6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
900026d8:	4b19      	ldr	r3, [pc, #100]	; (90002740 <HAL_UART_MspInit+0x244>)
900026da:	2200      	movs	r2, #0
900026dc:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
900026de:	4b18      	ldr	r3, [pc, #96]	; (90002740 <HAL_UART_MspInit+0x244>)
900026e0:	f44f 7280 	mov.w	r2, #256	; 0x100
900026e4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
900026e6:	4b16      	ldr	r3, [pc, #88]	; (90002740 <HAL_UART_MspInit+0x244>)
900026e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
900026ec:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
900026ee:	4b14      	ldr	r3, [pc, #80]	; (90002740 <HAL_UART_MspInit+0x244>)
900026f0:	2200      	movs	r2, #0
900026f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
900026f4:	4812      	ldr	r0, [pc, #72]	; (90002740 <HAL_UART_MspInit+0x244>)
900026f6:	f001 fbaf 	bl	90003e58 <HAL_DMA_Init>
900026fa:	4603      	mov	r3, r0
900026fc:	2b00      	cmp	r3, #0
900026fe:	d001      	beq.n	90002704 <HAL_UART_MspInit+0x208>
      Error_Handler();
90002700:	f7ff f84a 	bl	90001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
90002704:	687b      	ldr	r3, [r7, #4]
90002706:	4a0e      	ldr	r2, [pc, #56]	; (90002740 <HAL_UART_MspInit+0x244>)
90002708:	67da      	str	r2, [r3, #124]	; 0x7c
9000270a:	4a0d      	ldr	r2, [pc, #52]	; (90002740 <HAL_UART_MspInit+0x244>)
9000270c:	687b      	ldr	r3, [r7, #4]
9000270e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
90002710:	2200      	movs	r2, #0
90002712:	2105      	movs	r1, #5
90002714:	2035      	movs	r0, #53	; 0x35
90002716:	f001 fafb 	bl	90003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
9000271a:	2035      	movs	r0, #53	; 0x35
9000271c:	f001 fb12 	bl	90003d44 <HAL_NVIC_EnableIRQ>
}
90002720:	e159      	b.n	900029d6 <HAL_UART_MspInit+0x4da>
90002722:	bf00      	nop
90002724:	40004c00 	.word	0x40004c00
90002728:	58024400 	.word	0x58024400
9000272c:	58020c00 	.word	0x58020c00
90002730:	24000c44 	.word	0x24000c44
90002734:	40020028 	.word	0x40020028
90002738:	40005000 	.word	0x40005000
9000273c:	58020400 	.word	0x58020400
90002740:	24000cbc 	.word	0x24000cbc
90002744:	40020040 	.word	0x40020040
  else if(uartHandle->Instance==UART8)
90002748:	687b      	ldr	r3, [r7, #4]
9000274a:	681b      	ldr	r3, [r3, #0]
9000274c:	4aa4      	ldr	r2, [pc, #656]	; (900029e0 <HAL_UART_MspInit+0x4e4>)
9000274e:	4293      	cmp	r3, r2
90002750:	d179      	bne.n	90002846 <HAL_UART_MspInit+0x34a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
90002752:	2302      	movs	r3, #2
90002754:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
90002756:	2300      	movs	r3, #0
90002758:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000275c:	f107 0330 	add.w	r3, r7, #48	; 0x30
90002760:	4618      	mov	r0, r3
90002762:	f006 fd27 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90002766:	4603      	mov	r3, r0
90002768:	2b00      	cmp	r3, #0
9000276a:	d001      	beq.n	90002770 <HAL_UART_MspInit+0x274>
      Error_Handler();
9000276c:	f7ff f814 	bl	90001798 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
90002770:	4b9c      	ldr	r3, [pc, #624]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90002776:	4a9b      	ldr	r2, [pc, #620]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000277c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90002780:	4b98      	ldr	r3, [pc, #608]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90002786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
9000278a:	61fb      	str	r3, [r7, #28]
9000278c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
9000278e:	4b95      	ldr	r3, [pc, #596]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002794:	4a93      	ldr	r2, [pc, #588]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002796:	f043 0310 	orr.w	r3, r3, #16
9000279a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000279e:	4b91      	ldr	r3, [pc, #580]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
900027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900027a4:	f003 0310 	and.w	r3, r3, #16
900027a8:	61bb      	str	r3, [r7, #24]
900027aa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
900027ac:	2303      	movs	r3, #3
900027ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900027b2:	2302      	movs	r3, #2
900027b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900027b8:	2300      	movs	r3, #0
900027ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900027be:	2300      	movs	r3, #0
900027c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
900027c4:	2308      	movs	r3, #8
900027c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900027ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
900027ce:	4619      	mov	r1, r3
900027d0:	4885      	ldr	r0, [pc, #532]	; (900029e8 <HAL_UART_MspInit+0x4ec>)
900027d2:	f004 f97d 	bl	90006ad0 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream3;
900027d6:	4b85      	ldr	r3, [pc, #532]	; (900029ec <HAL_UART_MspInit+0x4f0>)
900027d8:	4a85      	ldr	r2, [pc, #532]	; (900029f0 <HAL_UART_MspInit+0x4f4>)
900027da:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
900027dc:	4b83      	ldr	r3, [pc, #524]	; (900029ec <HAL_UART_MspInit+0x4f0>)
900027de:	2251      	movs	r2, #81	; 0x51
900027e0:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
900027e2:	4b82      	ldr	r3, [pc, #520]	; (900029ec <HAL_UART_MspInit+0x4f0>)
900027e4:	2200      	movs	r2, #0
900027e6:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
900027e8:	4b80      	ldr	r3, [pc, #512]	; (900029ec <HAL_UART_MspInit+0x4f0>)
900027ea:	2200      	movs	r2, #0
900027ec:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
900027ee:	4b7f      	ldr	r3, [pc, #508]	; (900029ec <HAL_UART_MspInit+0x4f0>)
900027f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
900027f4:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
900027f6:	4b7d      	ldr	r3, [pc, #500]	; (900029ec <HAL_UART_MspInit+0x4f0>)
900027f8:	2200      	movs	r2, #0
900027fa:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
900027fc:	4b7b      	ldr	r3, [pc, #492]	; (900029ec <HAL_UART_MspInit+0x4f0>)
900027fe:	2200      	movs	r2, #0
90002800:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
90002802:	4b7a      	ldr	r3, [pc, #488]	; (900029ec <HAL_UART_MspInit+0x4f0>)
90002804:	f44f 7280 	mov.w	r2, #256	; 0x100
90002808:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_HIGH;
9000280a:	4b78      	ldr	r3, [pc, #480]	; (900029ec <HAL_UART_MspInit+0x4f0>)
9000280c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
90002810:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
90002812:	4b76      	ldr	r3, [pc, #472]	; (900029ec <HAL_UART_MspInit+0x4f0>)
90002814:	2200      	movs	r2, #0
90002816:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
90002818:	4874      	ldr	r0, [pc, #464]	; (900029ec <HAL_UART_MspInit+0x4f0>)
9000281a:	f001 fb1d 	bl	90003e58 <HAL_DMA_Init>
9000281e:	4603      	mov	r3, r0
90002820:	2b00      	cmp	r3, #0
90002822:	d001      	beq.n	90002828 <HAL_UART_MspInit+0x32c>
      Error_Handler();
90002824:	f7fe ffb8 	bl	90001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
90002828:	687b      	ldr	r3, [r7, #4]
9000282a:	4a70      	ldr	r2, [pc, #448]	; (900029ec <HAL_UART_MspInit+0x4f0>)
9000282c:	67da      	str	r2, [r3, #124]	; 0x7c
9000282e:	4a6f      	ldr	r2, [pc, #444]	; (900029ec <HAL_UART_MspInit+0x4f0>)
90002830:	687b      	ldr	r3, [r7, #4]
90002832:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
90002834:	2200      	movs	r2, #0
90002836:	2105      	movs	r1, #5
90002838:	2053      	movs	r0, #83	; 0x53
9000283a:	f001 fa69 	bl	90003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
9000283e:	2053      	movs	r0, #83	; 0x53
90002840:	f001 fa80 	bl	90003d44 <HAL_NVIC_EnableIRQ>
}
90002844:	e0c7      	b.n	900029d6 <HAL_UART_MspInit+0x4da>
  else if(uartHandle->Instance==USART1)
90002846:	687b      	ldr	r3, [r7, #4]
90002848:	681b      	ldr	r3, [r3, #0]
9000284a:	4a6a      	ldr	r2, [pc, #424]	; (900029f4 <HAL_UART_MspInit+0x4f8>)
9000284c:	4293      	cmp	r3, r2
9000284e:	d143      	bne.n	900028d8 <HAL_UART_MspInit+0x3dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
90002850:	2301      	movs	r3, #1
90002852:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
90002854:	2300      	movs	r3, #0
90002856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000285a:	f107 0330 	add.w	r3, r7, #48	; 0x30
9000285e:	4618      	mov	r0, r3
90002860:	f006 fca8 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
90002864:	4603      	mov	r3, r0
90002866:	2b00      	cmp	r3, #0
90002868:	d001      	beq.n	9000286e <HAL_UART_MspInit+0x372>
      Error_Handler();
9000286a:	f7fe ff95 	bl	90001798 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
9000286e:	4b5d      	ldr	r3, [pc, #372]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90002874:	4a5b      	ldr	r2, [pc, #364]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002876:	f043 0310 	orr.w	r3, r3, #16
9000287a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
9000287e:	4b59      	ldr	r3, [pc, #356]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90002884:	f003 0310 	and.w	r3, r3, #16
90002888:	617b      	str	r3, [r7, #20]
9000288a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
9000288c:	4b55      	ldr	r3, [pc, #340]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
9000288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002892:	4a54      	ldr	r2, [pc, #336]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002894:	f043 0302 	orr.w	r3, r3, #2
90002898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000289c:	4b51      	ldr	r3, [pc, #324]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
9000289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900028a2:	f003 0302 	and.w	r3, r3, #2
900028a6:	613b      	str	r3, [r7, #16]
900028a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
900028aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
900028ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900028b2:	2302      	movs	r3, #2
900028b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900028b8:	2300      	movs	r3, #0
900028ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900028be:	2300      	movs	r3, #0
900028c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
900028c4:	2304      	movs	r3, #4
900028c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900028ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
900028ce:	4619      	mov	r1, r3
900028d0:	4849      	ldr	r0, [pc, #292]	; (900029f8 <HAL_UART_MspInit+0x4fc>)
900028d2:	f004 f8fd 	bl	90006ad0 <HAL_GPIO_Init>
}
900028d6:	e07e      	b.n	900029d6 <HAL_UART_MspInit+0x4da>
  else if(uartHandle->Instance==USART3)
900028d8:	687b      	ldr	r3, [r7, #4]
900028da:	681b      	ldr	r3, [r3, #0]
900028dc:	4a47      	ldr	r2, [pc, #284]	; (900029fc <HAL_UART_MspInit+0x500>)
900028de:	4293      	cmp	r3, r2
900028e0:	d179      	bne.n	900029d6 <HAL_UART_MspInit+0x4da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
900028e2:	2302      	movs	r3, #2
900028e4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
900028e6:	2300      	movs	r3, #0
900028e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900028ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
900028f0:	4618      	mov	r0, r3
900028f2:	f006 fc5f 	bl	900091b4 <HAL_RCCEx_PeriphCLKConfig>
900028f6:	4603      	mov	r3, r0
900028f8:	2b00      	cmp	r3, #0
900028fa:	d001      	beq.n	90002900 <HAL_UART_MspInit+0x404>
      Error_Handler();
900028fc:	f7fe ff4c 	bl	90001798 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
90002900:	4b38      	ldr	r3, [pc, #224]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90002906:	4a37      	ldr	r2, [pc, #220]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000290c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90002910:	4b34      	ldr	r3, [pc, #208]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90002916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
9000291a:	60fb      	str	r3, [r7, #12]
9000291c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000291e:	4b31      	ldr	r3, [pc, #196]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002924:	4a2f      	ldr	r2, [pc, #188]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002926:	f043 0308 	orr.w	r3, r3, #8
9000292a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000292e:	4b2d      	ldr	r3, [pc, #180]	; (900029e4 <HAL_UART_MspInit+0x4e8>)
90002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002934:	f003 0308 	and.w	r3, r3, #8
90002938:	60bb      	str	r3, [r7, #8]
9000293a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
9000293c:	f44f 7340 	mov.w	r3, #768	; 0x300
90002940:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90002944:	2302      	movs	r3, #2
90002946:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000294a:	2300      	movs	r3, #0
9000294c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90002950:	2300      	movs	r3, #0
90002952:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
90002956:	2307      	movs	r3, #7
90002958:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000295c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
90002960:	4619      	mov	r1, r3
90002962:	4827      	ldr	r0, [pc, #156]	; (90002a00 <HAL_UART_MspInit+0x504>)
90002964:	f004 f8b4 	bl	90006ad0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
90002968:	4b26      	ldr	r3, [pc, #152]	; (90002a04 <HAL_UART_MspInit+0x508>)
9000296a:	4a27      	ldr	r2, [pc, #156]	; (90002a08 <HAL_UART_MspInit+0x50c>)
9000296c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
9000296e:	4b25      	ldr	r3, [pc, #148]	; (90002a04 <HAL_UART_MspInit+0x508>)
90002970:	222d      	movs	r2, #45	; 0x2d
90002972:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
90002974:	4b23      	ldr	r3, [pc, #140]	; (90002a04 <HAL_UART_MspInit+0x508>)
90002976:	2200      	movs	r2, #0
90002978:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
9000297a:	4b22      	ldr	r3, [pc, #136]	; (90002a04 <HAL_UART_MspInit+0x508>)
9000297c:	2200      	movs	r2, #0
9000297e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
90002980:	4b20      	ldr	r3, [pc, #128]	; (90002a04 <HAL_UART_MspInit+0x508>)
90002982:	f44f 6280 	mov.w	r2, #1024	; 0x400
90002986:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
90002988:	4b1e      	ldr	r3, [pc, #120]	; (90002a04 <HAL_UART_MspInit+0x508>)
9000298a:	2200      	movs	r2, #0
9000298c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
9000298e:	4b1d      	ldr	r3, [pc, #116]	; (90002a04 <HAL_UART_MspInit+0x508>)
90002990:	2200      	movs	r2, #0
90002992:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
90002994:	4b1b      	ldr	r3, [pc, #108]	; (90002a04 <HAL_UART_MspInit+0x508>)
90002996:	f44f 7280 	mov.w	r2, #256	; 0x100
9000299a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
9000299c:	4b19      	ldr	r3, [pc, #100]	; (90002a04 <HAL_UART_MspInit+0x508>)
9000299e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
900029a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
900029a4:	4b17      	ldr	r3, [pc, #92]	; (90002a04 <HAL_UART_MspInit+0x508>)
900029a6:	2200      	movs	r2, #0
900029a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
900029aa:	4816      	ldr	r0, [pc, #88]	; (90002a04 <HAL_UART_MspInit+0x508>)
900029ac:	f001 fa54 	bl	90003e58 <HAL_DMA_Init>
900029b0:	4603      	mov	r3, r0
900029b2:	2b00      	cmp	r3, #0
900029b4:	d001      	beq.n	900029ba <HAL_UART_MspInit+0x4be>
      Error_Handler();
900029b6:	f7fe feef 	bl	90001798 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
900029ba:	687b      	ldr	r3, [r7, #4]
900029bc:	4a11      	ldr	r2, [pc, #68]	; (90002a04 <HAL_UART_MspInit+0x508>)
900029be:	67da      	str	r2, [r3, #124]	; 0x7c
900029c0:	4a10      	ldr	r2, [pc, #64]	; (90002a04 <HAL_UART_MspInit+0x508>)
900029c2:	687b      	ldr	r3, [r7, #4]
900029c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
900029c6:	2200      	movs	r2, #0
900029c8:	2105      	movs	r1, #5
900029ca:	2027      	movs	r0, #39	; 0x27
900029cc:	f001 f9a0 	bl	90003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
900029d0:	2027      	movs	r0, #39	; 0x27
900029d2:	f001 f9b7 	bl	90003d44 <HAL_NVIC_EnableIRQ>
}
900029d6:	bf00      	nop
900029d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
900029dc:	46bd      	mov	sp, r7
900029de:	bd80      	pop	{r7, pc}
900029e0:	40007c00 	.word	0x40007c00
900029e4:	58024400 	.word	0x58024400
900029e8:	58021000 	.word	0x58021000
900029ec:	24000d34 	.word	0x24000d34
900029f0:	40020058 	.word	0x40020058
900029f4:	40011000 	.word	0x40011000
900029f8:	58020400 	.word	0x58020400
900029fc:	40004800 	.word	0x40004800
90002a00:	58020c00 	.word	0x58020c00
90002a04:	24000dac 	.word	0x24000dac
90002a08:	40020010 	.word	0x40020010

90002a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90002a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 90002a44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90002a10:	f7ff faf2 	bl	90001ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90002a14:	480c      	ldr	r0, [pc, #48]	; (90002a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
90002a16:	490d      	ldr	r1, [pc, #52]	; (90002a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90002a18:	4a0d      	ldr	r2, [pc, #52]	; (90002a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
90002a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
90002a1c:	e002      	b.n	90002a24 <LoopCopyDataInit>

90002a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90002a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90002a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90002a22:	3304      	adds	r3, #4

90002a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90002a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90002a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
90002a28:	d3f9      	bcc.n	90002a1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90002a2a:	4a0a      	ldr	r2, [pc, #40]	; (90002a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90002a2c:	4c0a      	ldr	r4, [pc, #40]	; (90002a58 <LoopFillZerobss+0x22>)
  movs r3, #0
90002a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
90002a30:	e001      	b.n	90002a36 <LoopFillZerobss>

90002a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90002a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90002a34:	3204      	adds	r2, #4

90002a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90002a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
90002a38:	d3fb      	bcc.n	90002a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90002a3a:	f00e fad5 	bl	90010fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90002a3e:	f7fe fc5f 	bl	90001300 <main>
  bx  lr
90002a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90002a44:	24080000 	.word	0x24080000
  ldr r0, =_sdata
90002a48:	24000000 	.word	0x24000000
  ldr r1, =_edata
90002a4c:	24000210 	.word	0x24000210
  ldr r2, =_sidata
90002a50:	90015bd4 	.word	0x90015bd4
  ldr r2, =_sbss
90002a54:	24000210 	.word	0x24000210
  ldr r4, =_ebss
90002a58:	24005848 	.word	0x24005848

90002a5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90002a5c:	e7fe      	b.n	90002a5c <ADC3_IRQHandler>

90002a5e <ads_delay>:
//#include "task.h"
/*============================================================================*/
/* Redefine local functions													  */
/*============================================================================*/

void ads_delay(int time){
90002a5e:	b580      	push	{r7, lr}
90002a60:	b082      	sub	sp, #8
90002a62:	af00      	add	r7, sp, #0
90002a64:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
90002a66:	6878      	ldr	r0, [r7, #4]
90002a68:	f00b fa2c 	bl	9000dec4 <osDelay>
#else
  HAL_Delay(time);
#endif
}
90002a6c:	bf00      	nop
90002a6e:	3708      	adds	r7, #8
90002a70:	46bd      	mov	sp, r7
90002a72:	bd80      	pop	{r7, pc}

90002a74 <writeRegister>:
/*============================================================================*/
/* Local functions														      */
/*============================================================================*/

// Write the register
bool writeRegister(ads1113_t *i2c, uint8_t reg, uint16_t value) {
90002a74:	b580      	push	{r7, lr}
90002a76:	b088      	sub	sp, #32
90002a78:	af04      	add	r7, sp, #16
90002a7a:	6078      	str	r0, [r7, #4]
90002a7c:	460b      	mov	r3, r1
90002a7e:	70fb      	strb	r3, [r7, #3]
90002a80:	4613      	mov	r3, r2
90002a82:	803b      	strh	r3, [r7, #0]
//	uint8_t pData[3] = { reg, (uint8_t) (value >> 8), (uint8_t) (value & 0xFF) };
//	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, pData, 3, 10);
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100);
90002a84:	687b      	ldr	r3, [r7, #4]
90002a86:	6958      	ldr	r0, [r3, #20]
90002a88:	687b      	ldr	r3, [r7, #4]
90002a8a:	8819      	ldrh	r1, [r3, #0]
90002a8c:	2364      	movs	r3, #100	; 0x64
90002a8e:	220a      	movs	r2, #10
90002a90:	f004 feca 	bl	90007828 <HAL_I2C_IsDeviceReady>
90002a94:	4603      	mov	r3, r0
90002a96:	73fb      	strb	r3, [r7, #15]
	uint8_t pData[2];
	pData[0] = (value >> 8);
90002a98:	883b      	ldrh	r3, [r7, #0]
90002a9a:	0a1b      	lsrs	r3, r3, #8
90002a9c:	b29b      	uxth	r3, r3
90002a9e:	b2db      	uxtb	r3, r3
90002aa0:	733b      	strb	r3, [r7, #12]
	pData[1] = value & 0xff;
90002aa2:	883b      	ldrh	r3, [r7, #0]
90002aa4:	b2db      	uxtb	r3, r3
90002aa6:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100);
90002aa8:	687b      	ldr	r3, [r7, #4]
90002aaa:	6958      	ldr	r0, [r3, #20]
90002aac:	687b      	ldr	r3, [r7, #4]
90002aae:	8819      	ldrh	r1, [r3, #0]
90002ab0:	2364      	movs	r3, #100	; 0x64
90002ab2:	220a      	movs	r2, #10
90002ab4:	f004 feb8 	bl	90007828 <HAL_I2C_IsDeviceReady>
90002ab8:	4603      	mov	r3, r0
90002aba:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) {
90002abc:	7bfb      	ldrb	r3, [r7, #15]
90002abe:	2b00      	cmp	r3, #0
90002ac0:	d001      	beq.n	90002ac6 <writeRegister+0x52>
		return false;
90002ac2:	2300      	movs	r3, #0
90002ac4:	e015      	b.n	90002af2 <writeRegister+0x7e>
	}

	return HAL_I2C_Mem_Write(i2c->hi2c, i2c->m_i2cAddress, reg, I2C_MEMADD_SIZE_8BIT, pData, 2, 10) == HAL_OK;
90002ac6:	687b      	ldr	r3, [r7, #4]
90002ac8:	6958      	ldr	r0, [r3, #20]
90002aca:	687b      	ldr	r3, [r7, #4]
90002acc:	8819      	ldrh	r1, [r3, #0]
90002ace:	78fb      	ldrb	r3, [r7, #3]
90002ad0:	b29a      	uxth	r2, r3
90002ad2:	230a      	movs	r3, #10
90002ad4:	9302      	str	r3, [sp, #8]
90002ad6:	2302      	movs	r3, #2
90002ad8:	9301      	str	r3, [sp, #4]
90002ada:	f107 030c 	add.w	r3, r7, #12
90002ade:	9300      	str	r3, [sp, #0]
90002ae0:	2301      	movs	r3, #1
90002ae2:	f004 fd8d 	bl	90007600 <HAL_I2C_Mem_Write>
90002ae6:	4603      	mov	r3, r0
90002ae8:	2b00      	cmp	r3, #0
90002aea:	bf0c      	ite	eq
90002aec:	2301      	moveq	r3, #1
90002aee:	2300      	movne	r3, #0
90002af0:	b2db      	uxtb	r3, r3
}
90002af2:	4618      	mov	r0, r3
90002af4:	3710      	adds	r7, #16
90002af6:	46bd      	mov	sp, r7
90002af8:	bd80      	pop	{r7, pc}

90002afa <readRegister>:

// Read the register
uint16_t readRegister(ads1113_t *i2c, uint8_t reg) {
90002afa:	b580      	push	{r7, lr}
90002afc:	b086      	sub	sp, #24
90002afe:	af02      	add	r7, sp, #8
90002b00:	6078      	str	r0, [r7, #4]
90002b02:	460b      	mov	r3, r1
90002b04:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, &reg, 1, 10);
90002b06:	687b      	ldr	r3, [r7, #4]
90002b08:	6958      	ldr	r0, [r3, #20]
90002b0a:	687b      	ldr	r3, [r7, #4]
90002b0c:	8819      	ldrh	r1, [r3, #0]
90002b0e:	1cfa      	adds	r2, r7, #3
90002b10:	230a      	movs	r3, #10
90002b12:	9300      	str	r3, [sp, #0]
90002b14:	2301      	movs	r3, #1
90002b16:	f004 fb89 	bl	9000722c <HAL_I2C_Master_Transmit>
	uint8_t pData[2] = { 0, 0 };
90002b1a:	2300      	movs	r3, #0
90002b1c:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Master_Receive(i2c->hi2c, i2c->m_i2cAddress, pData, 2, 10);
90002b1e:	687b      	ldr	r3, [r7, #4]
90002b20:	6958      	ldr	r0, [r3, #20]
90002b22:	687b      	ldr	r3, [r7, #4]
90002b24:	8819      	ldrh	r1, [r3, #0]
90002b26:	f107 020c 	add.w	r2, r7, #12
90002b2a:	230a      	movs	r3, #10
90002b2c:	9300      	str	r3, [sp, #0]
90002b2e:	2302      	movs	r3, #2
90002b30:	f004 fc70 	bl	90007414 <HAL_I2C_Master_Receive>
90002b34:	4603      	mov	r3, r0
90002b36:	73fb      	strb	r3, [r7, #15]
	return ((pData[0] << 8) | pData[1]);
90002b38:	7b3b      	ldrb	r3, [r7, #12]
90002b3a:	021b      	lsls	r3, r3, #8
90002b3c:	b21a      	sxth	r2, r3
90002b3e:	7b7b      	ldrb	r3, [r7, #13]
90002b40:	b21b      	sxth	r3, r3
90002b42:	4313      	orrs	r3, r2
90002b44:	b21b      	sxth	r3, r3
90002b46:	b29b      	uxth	r3, r3
}
90002b48:	4618      	mov	r0, r3
90002b4a:	3710      	adds	r7, #16
90002b4c:	46bd      	mov	sp, r7
90002b4e:	bd80      	pop	{r7, pc}

90002b50 <ADSbegin>:

// Check if we have correct connection.
bool ADSbegin(ads1113_t *i2c) {
90002b50:	b580      	push	{r7, lr}
90002b52:	b084      	sub	sp, #16
90002b54:	af00      	add	r7, sp, #0
90002b56:	6078      	str	r0, [r7, #4]
//	if (HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK)
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERROR I2C - Wrong address
	if (HAL_I2C_Init(i2c->hi2c) == HAL_OK){
90002b58:	687b      	ldr	r3, [r7, #4]
90002b5a:	695b      	ldr	r3, [r3, #20]
90002b5c:	4618      	mov	r0, r3
90002b5e:	f004 faa5 	bl	900070ac <HAL_I2C_Init>
90002b62:	4603      	mov	r3, r0
90002b64:	2b00      	cmp	r3, #0
90002b66:	d10e      	bne.n	90002b86 <ADSbegin+0x36>
		HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 100);
90002b68:	687b      	ldr	r3, [r7, #4]
90002b6a:	6958      	ldr	r0, [r3, #20]
90002b6c:	687b      	ldr	r3, [r7, #4]
90002b6e:	8819      	ldrh	r1, [r3, #0]
90002b70:	2364      	movs	r3, #100	; 0x64
90002b72:	220a      	movs	r2, #10
90002b74:	f004 fe58 	bl	90007828 <HAL_I2C_IsDeviceReady>
90002b78:	4603      	mov	r3, r0
90002b7a:	73fb      	strb	r3, [r7, #15]
		if(status == HAL_OK)
90002b7c:	7bfb      	ldrb	r3, [r7, #15]
90002b7e:	2b00      	cmp	r3, #0
90002b80:	d101      	bne.n	90002b86 <ADSbegin+0x36>
			return HAL_OK;
90002b82:	2300      	movs	r3, #0
90002b84:	e000      	b.n	90002b88 <ADSbegin+0x38>
	}
	return HAL_ERROR;
90002b86:	2301      	movs	r3, #1
}
90002b88:	4618      	mov	r0, r3
90002b8a:	3710      	adds	r7, #16
90002b8c:	46bd      	mov	sp, r7
90002b8e:	bd80      	pop	{r7, pc}

90002b90 <ADS1113_init>:

// Declare an ADS1115 structure
bool ADS1113_init(ads1113_t *i2c, I2C_HandleTypeDef *hi2c, uint8_t i2cAddress) {
90002b90:	b580      	push	{r7, lr}
90002b92:	b084      	sub	sp, #16
90002b94:	af00      	add	r7, sp, #0
90002b96:	60f8      	str	r0, [r7, #12]
90002b98:	60b9      	str	r1, [r7, #8]
90002b9a:	4613      	mov	r3, r2
90002b9c:	71fb      	strb	r3, [r7, #7]
//	i2c->m_bitShift = 0;
//	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
//	i2c->full_scale = 4.096f;
//	ADSbegin(i2c);

	i2c->hi2c = hi2c;
90002b9e:	68fb      	ldr	r3, [r7, #12]
90002ba0:	68ba      	ldr	r2, [r7, #8]
90002ba2:	615a      	str	r2, [r3, #20]
	i2c->m_i2cAddress = i2cAddress << 1; //  It's Important to shift the address << 1
90002ba4:	79fb      	ldrb	r3, [r7, #7]
90002ba6:	b29b      	uxth	r3, r3
90002ba8:	005b      	lsls	r3, r3, #1
90002baa:	b29a      	uxth	r2, r3
90002bac:	68fb      	ldr	r3, [r7, #12]
90002bae:	801a      	strh	r2, [r3, #0]
	i2c->m_conversionDelay = ADS1115_CONVERSIONDELAY;
90002bb0:	68fb      	ldr	r3, [r7, #12]
90002bb2:	2208      	movs	r2, #8
90002bb4:	605a      	str	r2, [r3, #4]
	i2c->m_bitShift = 0;
90002bb6:	68fb      	ldr	r3, [r7, #12]
90002bb8:	2200      	movs	r2, #0
90002bba:	721a      	strb	r2, [r3, #8]
	i2c->m_gain = GAIN_ONE; // +/- 4.096V: In our case VDD is 3.3V, so we must not exceed 3.6 V.
90002bbc:	68fb      	ldr	r3, [r7, #12]
90002bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
90002bc2:	821a      	strh	r2, [r3, #16]
	i2c->full_scale = 4.096f;
90002bc4:	68fb      	ldr	r3, [r7, #12]
90002bc6:	4a30      	ldr	r2, [pc, #192]	; (90002c88 <ADS1113_init+0xf8>)
90002bc8:	60da      	str	r2, [r3, #12]

	//Deinit the port
	if (HAL_I2C_DeInit(i2c->hi2c) != HAL_OK){
90002bca:	68fb      	ldr	r3, [r7, #12]
90002bcc:	695b      	ldr	r3, [r3, #20]
90002bce:	4618      	mov	r0, r3
90002bd0:	f004 fafc 	bl	900071cc <HAL_I2C_DeInit>
90002bd4:	4603      	mov	r3, r0
90002bd6:	2b00      	cmp	r3, #0
90002bd8:	d001      	beq.n	90002bde <ADS1113_init+0x4e>
		return false;
90002bda:	2300      	movs	r3, #0
90002bdc:	e04f      	b.n	90002c7e <ADS1113_init+0xee>
	}
	//Configure I2C port
	#if defined(TEST_HAT_1)
		i2c->hi2c->Instance = I2C1;
90002bde:	68fb      	ldr	r3, [r7, #12]
90002be0:	695b      	ldr	r3, [r3, #20]
90002be2:	4a2a      	ldr	r2, [pc, #168]	; (90002c8c <ADS1113_init+0xfc>)
90002be4:	601a      	str	r2, [r3, #0]
		i2c->hi2c->Instance = I2C2;
	#elif defined(TEST_HAT_3)
		i2c->hi2c->Instance = I2C3;
	#endif

	i2c->hi2c->Init.Timing = 0x00401242;
90002be6:	68fb      	ldr	r3, [r7, #12]
90002be8:	695b      	ldr	r3, [r3, #20]
90002bea:	4a29      	ldr	r2, [pc, #164]	; (90002c90 <ADS1113_init+0x100>)
90002bec:	605a      	str	r2, [r3, #4]
	i2c->hi2c->Init.OwnAddress1 = 0;
90002bee:	68fb      	ldr	r3, [r7, #12]
90002bf0:	695b      	ldr	r3, [r3, #20]
90002bf2:	2200      	movs	r2, #0
90002bf4:	609a      	str	r2, [r3, #8]
	i2c->hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
90002bf6:	68fb      	ldr	r3, [r7, #12]
90002bf8:	695b      	ldr	r3, [r3, #20]
90002bfa:	2201      	movs	r2, #1
90002bfc:	60da      	str	r2, [r3, #12]
	i2c->hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
90002bfe:	68fb      	ldr	r3, [r7, #12]
90002c00:	695b      	ldr	r3, [r3, #20]
90002c02:	2200      	movs	r2, #0
90002c04:	611a      	str	r2, [r3, #16]
	i2c->hi2c->Init.OwnAddress2 = 0;
90002c06:	68fb      	ldr	r3, [r7, #12]
90002c08:	695b      	ldr	r3, [r3, #20]
90002c0a:	2200      	movs	r2, #0
90002c0c:	615a      	str	r2, [r3, #20]
	i2c->hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90002c0e:	68fb      	ldr	r3, [r7, #12]
90002c10:	695b      	ldr	r3, [r3, #20]
90002c12:	2200      	movs	r2, #0
90002c14:	619a      	str	r2, [r3, #24]
	i2c->hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
90002c16:	68fb      	ldr	r3, [r7, #12]
90002c18:	695b      	ldr	r3, [r3, #20]
90002c1a:	2200      	movs	r2, #0
90002c1c:	61da      	str	r2, [r3, #28]
	i2c->hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
90002c1e:	68fb      	ldr	r3, [r7, #12]
90002c20:	695b      	ldr	r3, [r3, #20]
90002c22:	2200      	movs	r2, #0
90002c24:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2c->hi2c) != HAL_OK)
90002c26:	68fb      	ldr	r3, [r7, #12]
90002c28:	695b      	ldr	r3, [r3, #20]
90002c2a:	4618      	mov	r0, r3
90002c2c:	f004 fa3e 	bl	900070ac <HAL_I2C_Init>
90002c30:	4603      	mov	r3, r0
90002c32:	2b00      	cmp	r3, #0
90002c34:	d001      	beq.n	90002c3a <ADS1113_init+0xaa>
	{
		return false;
90002c36:	2300      	movs	r3, #0
90002c38:	e021      	b.n	90002c7e <ADS1113_init+0xee>
	}
	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(i2c->hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
90002c3a:	68fb      	ldr	r3, [r7, #12]
90002c3c:	695b      	ldr	r3, [r3, #20]
90002c3e:	2100      	movs	r1, #0
90002c40:	4618      	mov	r0, r3
90002c42:	f005 f9c5 	bl	90007fd0 <HAL_I2CEx_ConfigAnalogFilter>
90002c46:	4603      	mov	r3, r0
90002c48:	2b00      	cmp	r3, #0
90002c4a:	d001      	beq.n	90002c50 <ADS1113_init+0xc0>
	{
		return false;
90002c4c:	2300      	movs	r3, #0
90002c4e:	e016      	b.n	90002c7e <ADS1113_init+0xee>
	}
	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(i2c->hi2c, 0x0F) != HAL_OK)
90002c50:	68fb      	ldr	r3, [r7, #12]
90002c52:	695b      	ldr	r3, [r3, #20]
90002c54:	210f      	movs	r1, #15
90002c56:	4618      	mov	r0, r3
90002c58:	f005 fa05 	bl	90008066 <HAL_I2CEx_ConfigDigitalFilter>
90002c5c:	4603      	mov	r3, r0
90002c5e:	2b00      	cmp	r3, #0
90002c60:	d001      	beq.n	90002c66 <ADS1113_init+0xd6>
	{
		return false;
90002c62:	2300      	movs	r3, #0
90002c64:	e00b      	b.n	90002c7e <ADS1113_init+0xee>
	}
	/** I2C Enable Fast Mode Plus
	*/
	#if defined(TEST_HAT_1)
		HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
90002c66:	2001      	movs	r0, #1
90002c68:	f005 fa4a 	bl	90008100 <HAL_I2CEx_EnableFastModePlus>
	#elif defined(TEST_HAT_3)
		HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
	#endif


	if (ADSbegin(i2c) != HAL_OK)
90002c6c:	68f8      	ldr	r0, [r7, #12]
90002c6e:	f7ff ff6f 	bl	90002b50 <ADSbegin>
90002c72:	4603      	mov	r3, r0
90002c74:	2b00      	cmp	r3, #0
90002c76:	d001      	beq.n	90002c7c <ADS1113_init+0xec>
	{
		return false;
90002c78:	2300      	movs	r3, #0
90002c7a:	e000      	b.n	90002c7e <ADS1113_init+0xee>
	}

	return true;
90002c7c:	2301      	movs	r3, #1

}
90002c7e:	4618      	mov	r0, r3
90002c80:	3710      	adds	r7, #16
90002c82:	46bd      	mov	sp, r7
90002c84:	bd80      	pop	{r7, pc}
90002c86:	bf00      	nop
90002c88:	4083126f 	.word	0x4083126f
90002c8c:	40005400 	.word	0x40005400
90002c90:	00401242 	.word	0x00401242

90002c94 <ADSsetGain>:
 // ADSsetGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
 // ADSsetGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
 // ADSsetGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
 // ADSsetGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
 */
void ADSsetGain(ads1113_t *i2c, adsGain_t gain) {
90002c94:	b480      	push	{r7}
90002c96:	b083      	sub	sp, #12
90002c98:	af00      	add	r7, sp, #0
90002c9a:	6078      	str	r0, [r7, #4]
90002c9c:	460b      	mov	r3, r1
90002c9e:	807b      	strh	r3, [r7, #2]
	i2c->m_gain = gain;
90002ca0:	687b      	ldr	r3, [r7, #4]
90002ca2:	887a      	ldrh	r2, [r7, #2]
90002ca4:	821a      	strh	r2, [r3, #16]
	switch(gain) {
90002ca6:	887b      	ldrh	r3, [r7, #2]
90002ca8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
90002cac:	d02e      	beq.n	90002d0c <ADSsetGain+0x78>
90002cae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
90002cb2:	dc2f      	bgt.n	90002d14 <ADSsetGain+0x80>
90002cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90002cb8:	d024      	beq.n	90002d04 <ADSsetGain+0x70>
90002cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90002cbe:	dc29      	bgt.n	90002d14 <ADSsetGain+0x80>
90002cc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
90002cc4:	d01a      	beq.n	90002cfc <ADSsetGain+0x68>
90002cc6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
90002cca:	dc23      	bgt.n	90002d14 <ADSsetGain+0x80>
90002ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90002cd0:	d010      	beq.n	90002cf4 <ADSsetGain+0x60>
90002cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90002cd6:	dc1d      	bgt.n	90002d14 <ADSsetGain+0x80>
90002cd8:	2b00      	cmp	r3, #0
90002cda:	d003      	beq.n	90002ce4 <ADSsetGain+0x50>
90002cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90002ce0:	d004      	beq.n	90002cec <ADSsetGain+0x58>
		break;
	case GAIN_SIXTEEN:
		i2c->full_scale = 0.256;
		break;
	}
}
90002ce2:	e017      	b.n	90002d14 <ADSsetGain+0x80>
		i2c->full_scale = 6.6144;
90002ce4:	687b      	ldr	r3, [r7, #4]
90002ce6:	4a0e      	ldr	r2, [pc, #56]	; (90002d20 <ADSsetGain+0x8c>)
90002ce8:	60da      	str	r2, [r3, #12]
		break;
90002cea:	e013      	b.n	90002d14 <ADSsetGain+0x80>
		i2c->full_scale = 4.096;
90002cec:	687b      	ldr	r3, [r7, #4]
90002cee:	4a0d      	ldr	r2, [pc, #52]	; (90002d24 <ADSsetGain+0x90>)
90002cf0:	60da      	str	r2, [r3, #12]
		break;
90002cf2:	e00f      	b.n	90002d14 <ADSsetGain+0x80>
		i2c->full_scale = 2.048;
90002cf4:	687b      	ldr	r3, [r7, #4]
90002cf6:	4a0c      	ldr	r2, [pc, #48]	; (90002d28 <ADSsetGain+0x94>)
90002cf8:	60da      	str	r2, [r3, #12]
		break;
90002cfa:	e00b      	b.n	90002d14 <ADSsetGain+0x80>
		i2c->full_scale = 1.024;
90002cfc:	687b      	ldr	r3, [r7, #4]
90002cfe:	4a0b      	ldr	r2, [pc, #44]	; (90002d2c <ADSsetGain+0x98>)
90002d00:	60da      	str	r2, [r3, #12]
		break;
90002d02:	e007      	b.n	90002d14 <ADSsetGain+0x80>
		i2c->full_scale = 0.512;
90002d04:	687b      	ldr	r3, [r7, #4]
90002d06:	4a0a      	ldr	r2, [pc, #40]	; (90002d30 <ADSsetGain+0x9c>)
90002d08:	60da      	str	r2, [r3, #12]
		break;
90002d0a:	e003      	b.n	90002d14 <ADSsetGain+0x80>
		i2c->full_scale = 0.256;
90002d0c:	687b      	ldr	r3, [r7, #4]
90002d0e:	4a09      	ldr	r2, [pc, #36]	; (90002d34 <ADSsetGain+0xa0>)
90002d10:	60da      	str	r2, [r3, #12]
		break;
90002d12:	bf00      	nop
}
90002d14:	bf00      	nop
90002d16:	370c      	adds	r7, #12
90002d18:	46bd      	mov	sp, r7
90002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
90002d1e:	4770      	bx	lr
90002d20:	40d3a92a 	.word	0x40d3a92a
90002d24:	4083126f 	.word	0x4083126f
90002d28:	4003126f 	.word	0x4003126f
90002d2c:	3f83126f 	.word	0x3f83126f
90002d30:	3f03126f 	.word	0x3f03126f
90002d34:	3e83126f 	.word	0x3e83126f

90002d38 <ADSreadADC_Differential_0_1>:
/*
 * Reads the conversion results, measuring the voltage
 * difference between the P (AIN0) and N (AIN1) input.  Generates
 * a signed value since the difference can be either positive or negative.
 */
int16_t ADSreadADC_Differential_0_1(ads1113_t *i2c) {
90002d38:	b580      	push	{r7, lr}
90002d3a:	b084      	sub	sp, #16
90002d3c:	af00      	add	r7, sp, #0
90002d3e:	6078      	str	r0, [r7, #4]
	// Start with default values
	uint16_t config =
90002d40:	f240 1383 	movw	r3, #387	; 0x183
90002d44:	81bb      	strh	r3, [r7, #12]
	ADS1015_REG_CONFIG_CMODE_TRAD 	| 	// Traditional comparator (default val)
	ADS1015_REG_CONFIG_DR_1600SPS 	| 	// 1600 samples per second (default)
	ADS1015_REG_CONFIG_MODE_SINGLE;   	// Single-shot mode (default)

	// Set PGA/voltage range
	config |= i2c->m_gain;
90002d46:	687b      	ldr	r3, [r7, #4]
90002d48:	8a1a      	ldrh	r2, [r3, #16]
90002d4a:	89bb      	ldrh	r3, [r7, #12]
90002d4c:	4313      	orrs	r3, r2
90002d4e:	81bb      	strh	r3, [r7, #12]

	// Set channels
	config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N

	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
90002d50:	89bb      	ldrh	r3, [r7, #12]
90002d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
90002d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
90002d5a:	81bb      	strh	r3, [r7, #12]

	// Write config register to the ADC
	bool success = writeRegister(i2c, ADS1015_REG_POINTER_CONFIG, config);
90002d5c:	89bb      	ldrh	r3, [r7, #12]
90002d5e:	461a      	mov	r2, r3
90002d60:	2101      	movs	r1, #1
90002d62:	6878      	ldr	r0, [r7, #4]
90002d64:	f7ff fe86 	bl	90002a74 <writeRegister>
90002d68:	4603      	mov	r3, r0
90002d6a:	72fb      	strb	r3, [r7, #11]

	// Wait for the conversion to complete
	ads_delay(i2c->m_conversionDelay);
90002d6c:	687b      	ldr	r3, [r7, #4]
90002d6e:	685b      	ldr	r3, [r3, #4]
90002d70:	4618      	mov	r0, r3
90002d72:	f7ff fe74 	bl	90002a5e <ads_delay>
//	osDelay(8);

	// Read the conversion results
	uint16_t res = readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
90002d76:	2100      	movs	r1, #0
90002d78:	6878      	ldr	r0, [r7, #4]
90002d7a:	f7ff febe 	bl	90002afa <readRegister>
90002d7e:	4603      	mov	r3, r0
90002d80:	461a      	mov	r2, r3
90002d82:	687b      	ldr	r3, [r7, #4]
90002d84:	7a1b      	ldrb	r3, [r3, #8]
90002d86:	fa42 f303 	asr.w	r3, r2, r3
90002d8a:	81fb      	strh	r3, [r7, #14]
	if (i2c->m_bitShift == 0) {
90002d8c:	687b      	ldr	r3, [r7, #4]
90002d8e:	7a1b      	ldrb	r3, [r3, #8]
90002d90:	2b00      	cmp	r3, #0
90002d92:	d102      	bne.n	90002d9a <ADSreadADC_Differential_0_1+0x62>
		return (int16_t) res;
90002d94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90002d98:	e00b      	b.n	90002db2 <ADSreadADC_Differential_0_1+0x7a>
	} else {
		// Shift 12-bit results right 4 bits for the ADS1015,
		// making sure we keep the sign bit intact
		if (res > 0x07FF) {
90002d9a:	89fb      	ldrh	r3, [r7, #14]
90002d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90002da0:	d305      	bcc.n	90002dae <ADSreadADC_Differential_0_1+0x76>
			// negative number - extend the sign to 16th bit
			res |= 0xF000;
90002da2:	89fb      	ldrh	r3, [r7, #14]
90002da4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
90002da8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
90002dac:	81fb      	strh	r3, [r7, #14]
		}
		return (int16_t) res;
90002dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	}
}
90002db2:	4618      	mov	r0, r3
90002db4:	3710      	adds	r7, #16
90002db6:	46bd      	mov	sp, r7
90002db8:	bd80      	pop	{r7, pc}

90002dba <_ZN6BMP28011MeasurementC1Ev>:
class BMP280
{
public:
	BMP280(SPI_HandleTypeDef *handle);

	struct Measurement
90002dba:	b480      	push	{r7}
90002dbc:	b083      	sub	sp, #12
90002dbe:	af00      	add	r7, sp, #0
90002dc0:	6078      	str	r0, [r7, #4]
90002dc2:	687b      	ldr	r3, [r7, #4]
90002dc4:	f04f 0200 	mov.w	r2, #0
90002dc8:	601a      	str	r2, [r3, #0]
90002dca:	687b      	ldr	r3, [r7, #4]
90002dcc:	f04f 0200 	mov.w	r2, #0
90002dd0:	605a      	str	r2, [r3, #4]
90002dd2:	687b      	ldr	r3, [r7, #4]
90002dd4:	f04f 0200 	mov.w	r2, #0
90002dd8:	609a      	str	r2, [r3, #8]
90002dda:	687b      	ldr	r3, [r7, #4]
90002ddc:	4618      	mov	r0, r3
90002dde:	370c      	adds	r7, #12
90002de0:	46bd      	mov	sp, r7
90002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
90002de6:	4770      	bx	lr

90002de8 <_ZN6BMP280C1EP19__SPI_HandleTypeDef>:

#include <math.h>
#include <stdint.h>


BMP280::BMP280(SPI_HandleTypeDef *handle)
90002de8:	b580      	push	{r7, lr}
90002dea:	b082      	sub	sp, #8
90002dec:	af00      	add	r7, sp, #0
90002dee:	6078      	str	r0, [r7, #4]
90002df0:	6039      	str	r1, [r7, #0]
90002df2:	687b      	ldr	r3, [r7, #4]
90002df4:	4618      	mov	r0, r3
90002df6:	f7ff ffe0 	bl	90002dba <_ZN6BMP28011MeasurementC1Ev>
90002dfa:	687b      	ldr	r3, [r7, #4]
90002dfc:	f04f 0200 	mov.w	r2, #0
90002e00:	611a      	str	r2, [r3, #16]
90002e02:	687b      	ldr	r3, [r7, #4]
90002e04:	2200      	movs	r2, #0
90002e06:	615a      	str	r2, [r3, #20]
{
	spiHandle = handle;
90002e08:	687b      	ldr	r3, [r7, #4]
90002e0a:	683a      	ldr	r2, [r7, #0]
90002e0c:	60da      	str	r2, [r3, #12]
}
90002e0e:	687b      	ldr	r3, [r7, #4]
90002e10:	4618      	mov	r0, r3
90002e12:	3708      	adds	r7, #8
90002e14:	46bd      	mov	sp, r7
90002e16:	bd80      	pop	{r7, pc}

90002e18 <_ZN6BMP28010initializeEv>:

/** Initialize the device with desired configuration
 * @return 1, if device is not recognized, 0 otherwise.
 * */
uint8_t BMP280::initialize()
{
90002e18:	b580      	push	{r7, lr}
90002e1a:	b084      	sub	sp, #16
90002e1c:	af00      	add	r7, sp, #0
90002e1e:	6078      	str	r0, [r7, #4]
	uint8_t id = getID();
90002e20:	6878      	ldr	r0, [r7, #4]
90002e22:	f000 f83d 	bl	90002ea0 <_ZN6BMP2805getIDEv>
90002e26:	4603      	mov	r3, r0
90002e28:	73fb      	strb	r3, [r7, #15]
	if (id != BMP280_CHIP_ID)
90002e2a:	7bfb      	ldrb	r3, [r7, #15]
90002e2c:	2b58      	cmp	r3, #88	; 0x58
90002e2e:	d001      	beq.n	90002e34 <_ZN6BMP28010initializeEv+0x1c>
	{
		return 1;
90002e30:	2301      	movs	r3, #1
90002e32:	e024      	b.n	90002e7e <_ZN6BMP28010initializeEv+0x66>
	}

	// Reset device and wait
	reset();
90002e34:	6878      	ldr	r0, [r7, #4]
90002e36:	f000 f826 	bl	90002e86 <_ZN6BMP2805resetEv>
	delay_ms(500);
90002e3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
90002e3e:	6878      	ldr	r0, [r7, #4]
90002e40:	f000 fe3a 	bl	90003ab8 <_ZN6BMP2808delay_msEm>

	// BEGIN OF CONFIGURATION ----------------------------------
	setPressureOversampling(oversampling_x16);
90002e44:	2105      	movs	r1, #5
90002e46:	6878      	ldr	r0, [r7, #4]
90002e48:	f000 f8ef 	bl	9000302a <_ZN6BMP28023setPressureOversamplingE12Oversampling>
	setTemperatureOversampling(oversampling_x2);
90002e4c:	2102      	movs	r1, #2
90002e4e:	6878      	ldr	r0, [r7, #4]
90002e50:	f000 f90c 	bl	9000306c <_ZN6BMP28026setTemperatureOversamplingE12Oversampling>

	setPowerMode(mode_normal);
90002e54:	2103      	movs	r1, #3
90002e56:	6878      	ldr	r0, [r7, #4]
90002e58:	f000 f929 	bl	900030ae <_ZN6BMP28012setPowerModeE9PowerMode>
	setFilterCoefficient(filter_coeff_16);
90002e5c:	2104      	movs	r1, #4
90002e5e:	6878      	ldr	r0, [r7, #4]
90002e60:	f000 f963 	bl	9000312a <_ZN6BMP28020setFilterCoefficientE13FilterSetting>
	setStandbyTime(standby_time_500us);
90002e64:	2100      	movs	r1, #0
90002e66:	6878      	ldr	r0, [r7, #4]
90002e68:	f000 f93e 	bl	900030e8 <_ZN6BMP28014setStandbyTimeE11StandbyTime>
	// END OF CONFIGURATION --------------------------

	readCompensationParameters();
90002e6c:	6878      	ldr	r0, [r7, #4]
90002e6e:	f000 f824 	bl	90002eba <_ZN6BMP28026readCompensationParametersEv>
	setReferencePressure(100, 50);
90002e72:	2232      	movs	r2, #50	; 0x32
90002e74:	2164      	movs	r1, #100	; 0x64
90002e76:	6878      	ldr	r0, [r7, #4]
90002e78:	f000 f89c 	bl	90002fb4 <_ZN6BMP28020setReferencePressureEth>

	return 0;
90002e7c:	2300      	movs	r3, #0
}
90002e7e:	4618      	mov	r0, r3
90002e80:	3710      	adds	r7, #16
90002e82:	46bd      	mov	sp, r7
90002e84:	bd80      	pop	{r7, pc}

90002e86 <_ZN6BMP2805resetEv>:

/** Perform power-on reset procedure */
void BMP280::reset()
{
90002e86:	b580      	push	{r7, lr}
90002e88:	b082      	sub	sp, #8
90002e8a:	af00      	add	r7, sp, #0
90002e8c:	6078      	str	r0, [r7, #4]
	writeRegister(BMP280_REG_RESET, BMP280_RESET_VALUE);
90002e8e:	22b6      	movs	r2, #182	; 0xb6
90002e90:	21e0      	movs	r1, #224	; 0xe0
90002e92:	6878      	ldr	r0, [r7, #4]
90002e94:	f000 fd89 	bl	900039aa <_ZN6BMP28013writeRegisterEhh>
}
90002e98:	bf00      	nop
90002e9a:	3708      	adds	r7, #8
90002e9c:	46bd      	mov	sp, r7
90002e9e:	bd80      	pop	{r7, pc}

90002ea0 <_ZN6BMP2805getIDEv>:
/**
 * Read chip identification number.
 * @return chip ID
 * */
uint8_t BMP280::getID()
{
90002ea0:	b580      	push	{r7, lr}
90002ea2:	b082      	sub	sp, #8
90002ea4:	af00      	add	r7, sp, #0
90002ea6:	6078      	str	r0, [r7, #4]
	return readRegister(BMP280_REG_ID);
90002ea8:	21d0      	movs	r1, #208	; 0xd0
90002eaa:	6878      	ldr	r0, [r7, #4]
90002eac:	f000 fd61 	bl	90003972 <_ZN6BMP28012readRegisterEh>
90002eb0:	4603      	mov	r3, r0
}
90002eb2:	4618      	mov	r0, r3
90002eb4:	3708      	adds	r7, #8
90002eb6:	46bd      	mov	sp, r7
90002eb8:	bd80      	pop	{r7, pc}

90002eba <_ZN6BMP28026readCompensationParametersEv>:

/** Read calibration data from non-volatile sensor registers */
void BMP280::readCompensationParameters()
{
90002eba:	b580      	push	{r7, lr}
90002ebc:	b088      	sub	sp, #32
90002ebe:	af00      	add	r7, sp, #0
90002ec0:	6078      	str	r0, [r7, #4]
	uint8_t buf[24];
	readMBRegister(BMP280_REG_CALIB, buf, 24);
90002ec2:	f107 0208 	add.w	r2, r7, #8
90002ec6:	2318      	movs	r3, #24
90002ec8:	2188      	movs	r1, #136	; 0x88
90002eca:	6878      	ldr	r0, [r7, #4]
90002ecc:	f000 fd8c 	bl	900039e8 <_ZN6BMP28014readMBRegisterEhPhh>
	compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
90002ed0:	7a7b      	ldrb	r3, [r7, #9]
90002ed2:	021b      	lsls	r3, r3, #8
90002ed4:	b21a      	sxth	r2, r3
90002ed6:	7a3b      	ldrb	r3, [r7, #8]
90002ed8:	b21b      	sxth	r3, r3
90002eda:	4313      	orrs	r3, r2
90002edc:	b21b      	sxth	r3, r3
90002ede:	b29a      	uxth	r2, r3
90002ee0:	687b      	ldr	r3, [r7, #4]
90002ee2:	831a      	strh	r2, [r3, #24]
	compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
90002ee4:	7afb      	ldrb	r3, [r7, #11]
90002ee6:	021b      	lsls	r3, r3, #8
90002ee8:	b21a      	sxth	r2, r3
90002eea:	7abb      	ldrb	r3, [r7, #10]
90002eec:	b21b      	sxth	r3, r3
90002eee:	4313      	orrs	r3, r2
90002ef0:	b21a      	sxth	r2, r3
90002ef2:	687b      	ldr	r3, [r7, #4]
90002ef4:	835a      	strh	r2, [r3, #26]
	compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
90002ef6:	7b7b      	ldrb	r3, [r7, #13]
90002ef8:	021b      	lsls	r3, r3, #8
90002efa:	b21a      	sxth	r2, r3
90002efc:	7b3b      	ldrb	r3, [r7, #12]
90002efe:	b21b      	sxth	r3, r3
90002f00:	4313      	orrs	r3, r2
90002f02:	b21a      	sxth	r2, r3
90002f04:	687b      	ldr	r3, [r7, #4]
90002f06:	839a      	strh	r2, [r3, #28]
	compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
90002f08:	7bfb      	ldrb	r3, [r7, #15]
90002f0a:	021b      	lsls	r3, r3, #8
90002f0c:	b21a      	sxth	r2, r3
90002f0e:	7bbb      	ldrb	r3, [r7, #14]
90002f10:	b21b      	sxth	r3, r3
90002f12:	4313      	orrs	r3, r2
90002f14:	b21b      	sxth	r3, r3
90002f16:	b29a      	uxth	r2, r3
90002f18:	687b      	ldr	r3, [r7, #4]
90002f1a:	83da      	strh	r2, [r3, #30]
	compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
90002f1c:	7c7b      	ldrb	r3, [r7, #17]
90002f1e:	021b      	lsls	r3, r3, #8
90002f20:	b21a      	sxth	r2, r3
90002f22:	7c3b      	ldrb	r3, [r7, #16]
90002f24:	b21b      	sxth	r3, r3
90002f26:	4313      	orrs	r3, r2
90002f28:	b21a      	sxth	r2, r3
90002f2a:	687b      	ldr	r3, [r7, #4]
90002f2c:	841a      	strh	r2, [r3, #32]
	compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
90002f2e:	7cfb      	ldrb	r3, [r7, #19]
90002f30:	021b      	lsls	r3, r3, #8
90002f32:	b21a      	sxth	r2, r3
90002f34:	7cbb      	ldrb	r3, [r7, #18]
90002f36:	b21b      	sxth	r3, r3
90002f38:	4313      	orrs	r3, r2
90002f3a:	b21a      	sxth	r2, r3
90002f3c:	687b      	ldr	r3, [r7, #4]
90002f3e:	845a      	strh	r2, [r3, #34]	; 0x22
	compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
90002f40:	7d7b      	ldrb	r3, [r7, #21]
90002f42:	021b      	lsls	r3, r3, #8
90002f44:	b21a      	sxth	r2, r3
90002f46:	7d3b      	ldrb	r3, [r7, #20]
90002f48:	b21b      	sxth	r3, r3
90002f4a:	4313      	orrs	r3, r2
90002f4c:	b21a      	sxth	r2, r3
90002f4e:	687b      	ldr	r3, [r7, #4]
90002f50:	849a      	strh	r2, [r3, #36]	; 0x24
	compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
90002f52:	7dfb      	ldrb	r3, [r7, #23]
90002f54:	021b      	lsls	r3, r3, #8
90002f56:	b21a      	sxth	r2, r3
90002f58:	7dbb      	ldrb	r3, [r7, #22]
90002f5a:	b21b      	sxth	r3, r3
90002f5c:	4313      	orrs	r3, r2
90002f5e:	b21a      	sxth	r2, r3
90002f60:	687b      	ldr	r3, [r7, #4]
90002f62:	84da      	strh	r2, [r3, #38]	; 0x26
	compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
90002f64:	7e7b      	ldrb	r3, [r7, #25]
90002f66:	021b      	lsls	r3, r3, #8
90002f68:	b21a      	sxth	r2, r3
90002f6a:	7e3b      	ldrb	r3, [r7, #24]
90002f6c:	b21b      	sxth	r3, r3
90002f6e:	4313      	orrs	r3, r2
90002f70:	b21a      	sxth	r2, r3
90002f72:	687b      	ldr	r3, [r7, #4]
90002f74:	851a      	strh	r2, [r3, #40]	; 0x28
	compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
90002f76:	7efb      	ldrb	r3, [r7, #27]
90002f78:	021b      	lsls	r3, r3, #8
90002f7a:	b21a      	sxth	r2, r3
90002f7c:	7ebb      	ldrb	r3, [r7, #26]
90002f7e:	b21b      	sxth	r3, r3
90002f80:	4313      	orrs	r3, r2
90002f82:	b21a      	sxth	r2, r3
90002f84:	687b      	ldr	r3, [r7, #4]
90002f86:	855a      	strh	r2, [r3, #42]	; 0x2a
	compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
90002f88:	7f7b      	ldrb	r3, [r7, #29]
90002f8a:	021b      	lsls	r3, r3, #8
90002f8c:	b21a      	sxth	r2, r3
90002f8e:	7f3b      	ldrb	r3, [r7, #28]
90002f90:	b21b      	sxth	r3, r3
90002f92:	4313      	orrs	r3, r2
90002f94:	b21a      	sxth	r2, r3
90002f96:	687b      	ldr	r3, [r7, #4]
90002f98:	859a      	strh	r2, [r3, #44]	; 0x2c
	compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
90002f9a:	7ffb      	ldrb	r3, [r7, #31]
90002f9c:	021b      	lsls	r3, r3, #8
90002f9e:	b21a      	sxth	r2, r3
90002fa0:	7fbb      	ldrb	r3, [r7, #30]
90002fa2:	b21b      	sxth	r3, r3
90002fa4:	4313      	orrs	r3, r2
90002fa6:	b21a      	sxth	r2, r3
90002fa8:	687b      	ldr	r3, [r7, #4]
90002faa:	85da      	strh	r2, [r3, #46]	; 0x2e
}
90002fac:	bf00      	nop
90002fae:	3720      	adds	r7, #32
90002fb0:	46bd      	mov	sp, r7
90002fb2:	bd80      	pop	{r7, pc}

90002fb4 <_ZN6BMP28020setReferencePressureEth>:
 * Set reference pressure for altitude calculation by averaging pressure measurements.
 * @param samples: Number of measurements to average.
 * @param delay: Delay between measurements (in ms).
 * */
void BMP280::setReferencePressure(uint16_t samples, uint8_t delay)
{
90002fb4:	b580      	push	{r7, lr}
90002fb6:	b084      	sub	sp, #16
90002fb8:	af00      	add	r7, sp, #0
90002fba:	6078      	str	r0, [r7, #4]
90002fbc:	460b      	mov	r3, r1
90002fbe:	807b      	strh	r3, [r7, #2]
90002fc0:	4613      	mov	r3, r2
90002fc2:	707b      	strb	r3, [r7, #1]
	delay_ms(500);
90002fc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
90002fc8:	6878      	ldr	r0, [r7, #4]
90002fca:	f000 fd75 	bl	90003ab8 <_ZN6BMP2808delay_msEm>
	float sum = 0;
90002fce:	f04f 0300 	mov.w	r3, #0
90002fd2:	60fb      	str	r3, [r7, #12]
	for (char i = 0; i < samples; i++)
90002fd4:	2300      	movs	r3, #0
90002fd6:	72fb      	strb	r3, [r7, #11]
90002fd8:	7afa      	ldrb	r2, [r7, #11]
90002fda:	887b      	ldrh	r3, [r7, #2]
90002fdc:	429a      	cmp	r2, r3
90002fde:	da14      	bge.n	9000300a <_ZN6BMP28020setReferencePressureEth+0x56>
	{
		measure();
90002fe0:	6878      	ldr	r0, [r7, #4]
90002fe2:	f000 f8c5 	bl	90003170 <_ZN6BMP2807measureEv>
		sum += measurement.pressure;
90002fe6:	687b      	ldr	r3, [r7, #4]
90002fe8:	edd3 7a01 	vldr	s15, [r3, #4]
90002fec:	ed97 7a03 	vldr	s14, [r7, #12]
90002ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
90002ff4:	edc7 7a03 	vstr	s15, [r7, #12]
		delay_ms(delay);
90002ff8:	787b      	ldrb	r3, [r7, #1]
90002ffa:	4619      	mov	r1, r3
90002ffc:	6878      	ldr	r0, [r7, #4]
90002ffe:	f000 fd5b 	bl	90003ab8 <_ZN6BMP2808delay_msEm>
	for (char i = 0; i < samples; i++)
90003002:	7afb      	ldrb	r3, [r7, #11]
90003004:	3301      	adds	r3, #1
90003006:	72fb      	strb	r3, [r7, #11]
90003008:	e7e6      	b.n	90002fd8 <_ZN6BMP28020setReferencePressureEth+0x24>
	}
	p_reference = sum / samples;
9000300a:	887b      	ldrh	r3, [r7, #2]
9000300c:	ee07 3a90 	vmov	s15, r3
90003010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
90003014:	edd7 6a03 	vldr	s13, [r7, #12]
90003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000301c:	687b      	ldr	r3, [r7, #4]
9000301e:	edc3 7a04 	vstr	s15, [r3, #16]

}
90003022:	bf00      	nop
90003024:	3710      	adds	r7, #16
90003026:	46bd      	mov	sp, r7
90003028:	bd80      	pop	{r7, pc}

9000302a <_ZN6BMP28023setPressureOversamplingE12Oversampling>:

/** Configure pressure oversampling */
void BMP280::setPressureOversampling(Oversampling osrs_p)
{
9000302a:	b580      	push	{r7, lr}
9000302c:	b084      	sub	sp, #16
9000302e:	af00      	add	r7, sp, #0
90003030:	6078      	str	r0, [r7, #4]
90003032:	460b      	mov	r3, r1
90003034:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl = readRegister(BMP280_REG_CTRL_MEAS);
90003036:	21f4      	movs	r1, #244	; 0xf4
90003038:	6878      	ldr	r0, [r7, #4]
9000303a:	f000 fc9a 	bl	90003972 <_ZN6BMP28012readRegisterEh>
9000303e:	4603      	mov	r3, r0
90003040:	73fb      	strb	r3, [r7, #15]
	ctrl = (ctrl & 0b11100011) | (osrs_p << 2);
90003042:	f997 300f 	ldrsb.w	r3, [r7, #15]
90003046:	f023 031c 	bic.w	r3, r3, #28
9000304a:	b25a      	sxtb	r2, r3
9000304c:	78fb      	ldrb	r3, [r7, #3]
9000304e:	009b      	lsls	r3, r3, #2
90003050:	b25b      	sxtb	r3, r3
90003052:	4313      	orrs	r3, r2
90003054:	b25b      	sxtb	r3, r3
90003056:	73fb      	strb	r3, [r7, #15]
	writeRegister(BMP280_REG_CTRL, ctrl);
90003058:	7bfb      	ldrb	r3, [r7, #15]
9000305a:	461a      	mov	r2, r3
9000305c:	21f4      	movs	r1, #244	; 0xf4
9000305e:	6878      	ldr	r0, [r7, #4]
90003060:	f000 fca3 	bl	900039aa <_ZN6BMP28013writeRegisterEhh>
}
90003064:	bf00      	nop
90003066:	3710      	adds	r7, #16
90003068:	46bd      	mov	sp, r7
9000306a:	bd80      	pop	{r7, pc}

9000306c <_ZN6BMP28026setTemperatureOversamplingE12Oversampling>:

/** Configure temperature oversampling */
void BMP280::setTemperatureOversampling(Oversampling osrs_t)
{
9000306c:	b580      	push	{r7, lr}
9000306e:	b084      	sub	sp, #16
90003070:	af00      	add	r7, sp, #0
90003072:	6078      	str	r0, [r7, #4]
90003074:	460b      	mov	r3, r1
90003076:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl = readRegister(BMP280_REG_CTRL_MEAS);
90003078:	21f4      	movs	r1, #244	; 0xf4
9000307a:	6878      	ldr	r0, [r7, #4]
9000307c:	f000 fc79 	bl	90003972 <_ZN6BMP28012readRegisterEh>
90003080:	4603      	mov	r3, r0
90003082:	73fb      	strb	r3, [r7, #15]
	ctrl = (ctrl & 0b00011111) | (osrs_t << 5);
90003084:	f997 300f 	ldrsb.w	r3, [r7, #15]
90003088:	f003 031f 	and.w	r3, r3, #31
9000308c:	b25a      	sxtb	r2, r3
9000308e:	78fb      	ldrb	r3, [r7, #3]
90003090:	015b      	lsls	r3, r3, #5
90003092:	b25b      	sxtb	r3, r3
90003094:	4313      	orrs	r3, r2
90003096:	b25b      	sxtb	r3, r3
90003098:	73fb      	strb	r3, [r7, #15]
	writeRegister(BMP280_REG_CTRL, ctrl);
9000309a:	7bfb      	ldrb	r3, [r7, #15]
9000309c:	461a      	mov	r2, r3
9000309e:	21f4      	movs	r1, #244	; 0xf4
900030a0:	6878      	ldr	r0, [r7, #4]
900030a2:	f000 fc82 	bl	900039aa <_ZN6BMP28013writeRegisterEhh>
}
900030a6:	bf00      	nop
900030a8:	3710      	adds	r7, #16
900030aa:	46bd      	mov	sp, r7
900030ac:	bd80      	pop	{r7, pc}

900030ae <_ZN6BMP28012setPowerModeE9PowerMode>:

/** Configure power mode */
void BMP280::setPowerMode(PowerMode mode)
{
900030ae:	b580      	push	{r7, lr}
900030b0:	b084      	sub	sp, #16
900030b2:	af00      	add	r7, sp, #0
900030b4:	6078      	str	r0, [r7, #4]
900030b6:	460b      	mov	r3, r1
900030b8:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl = readRegister(BMP280_REG_CTRL_MEAS);
900030ba:	21f4      	movs	r1, #244	; 0xf4
900030bc:	6878      	ldr	r0, [r7, #4]
900030be:	f000 fc58 	bl	90003972 <_ZN6BMP28012readRegisterEh>
900030c2:	4603      	mov	r3, r0
900030c4:	73fb      	strb	r3, [r7, #15]
	ctrl = (ctrl & 0b11111100) | mode;
900030c6:	7bfb      	ldrb	r3, [r7, #15]
900030c8:	f023 0303 	bic.w	r3, r3, #3
900030cc:	b2da      	uxtb	r2, r3
900030ce:	78fb      	ldrb	r3, [r7, #3]
900030d0:	4313      	orrs	r3, r2
900030d2:	73fb      	strb	r3, [r7, #15]
	writeRegister(BMP280_REG_CTRL, ctrl);
900030d4:	7bfb      	ldrb	r3, [r7, #15]
900030d6:	461a      	mov	r2, r3
900030d8:	21f4      	movs	r1, #244	; 0xf4
900030da:	6878      	ldr	r0, [r7, #4]
900030dc:	f000 fc65 	bl	900039aa <_ZN6BMP28013writeRegisterEhh>
}
900030e0:	bf00      	nop
900030e2:	3710      	adds	r7, #16
900030e4:	46bd      	mov	sp, r7
900030e6:	bd80      	pop	{r7, pc}

900030e8 <_ZN6BMP28014setStandbyTimeE11StandbyTime>:

/** Configure standby time */
void BMP280::setStandbyTime(StandbyTime t_sb)
{
900030e8:	b580      	push	{r7, lr}
900030ea:	b084      	sub	sp, #16
900030ec:	af00      	add	r7, sp, #0
900030ee:	6078      	str	r0, [r7, #4]
900030f0:	460b      	mov	r3, r1
900030f2:	70fb      	strb	r3, [r7, #3]
	uint8_t conf = readRegister(BMP280_REG_CONFIG);
900030f4:	21f5      	movs	r1, #245	; 0xf5
900030f6:	6878      	ldr	r0, [r7, #4]
900030f8:	f000 fc3b 	bl	90003972 <_ZN6BMP28012readRegisterEh>
900030fc:	4603      	mov	r3, r0
900030fe:	73fb      	strb	r3, [r7, #15]
	conf = (conf & 0b00011111) | (t_sb << 5);
90003100:	f997 300f 	ldrsb.w	r3, [r7, #15]
90003104:	f003 031f 	and.w	r3, r3, #31
90003108:	b25a      	sxtb	r2, r3
9000310a:	78fb      	ldrb	r3, [r7, #3]
9000310c:	015b      	lsls	r3, r3, #5
9000310e:	b25b      	sxtb	r3, r3
90003110:	4313      	orrs	r3, r2
90003112:	b25b      	sxtb	r3, r3
90003114:	73fb      	strb	r3, [r7, #15]
	writeRegister(BMP280_REG_CONFIG, conf);
90003116:	7bfb      	ldrb	r3, [r7, #15]
90003118:	461a      	mov	r2, r3
9000311a:	21f5      	movs	r1, #245	; 0xf5
9000311c:	6878      	ldr	r0, [r7, #4]
9000311e:	f000 fc44 	bl	900039aa <_ZN6BMP28013writeRegisterEhh>
}
90003122:	bf00      	nop
90003124:	3710      	adds	r7, #16
90003126:	46bd      	mov	sp, r7
90003128:	bd80      	pop	{r7, pc}

9000312a <_ZN6BMP28020setFilterCoefficientE13FilterSetting>:

/** Configure IIR filter */
void BMP280::setFilterCoefficient(FilterSetting filter)
{
9000312a:	b580      	push	{r7, lr}
9000312c:	b084      	sub	sp, #16
9000312e:	af00      	add	r7, sp, #0
90003130:	6078      	str	r0, [r7, #4]
90003132:	460b      	mov	r3, r1
90003134:	70fb      	strb	r3, [r7, #3]
	uint8_t conf = readRegister(BMP280_REG_CONFIG);
90003136:	21f5      	movs	r1, #245	; 0xf5
90003138:	6878      	ldr	r0, [r7, #4]
9000313a:	f000 fc1a 	bl	90003972 <_ZN6BMP28012readRegisterEh>
9000313e:	4603      	mov	r3, r0
90003140:	73fb      	strb	r3, [r7, #15]
	conf = (conf & 0b11100011) | (filter << 2);
90003142:	f997 300f 	ldrsb.w	r3, [r7, #15]
90003146:	f023 031c 	bic.w	r3, r3, #28
9000314a:	b25a      	sxtb	r2, r3
9000314c:	78fb      	ldrb	r3, [r7, #3]
9000314e:	009b      	lsls	r3, r3, #2
90003150:	b25b      	sxtb	r3, r3
90003152:	4313      	orrs	r3, r2
90003154:	b25b      	sxtb	r3, r3
90003156:	73fb      	strb	r3, [r7, #15]
	writeRegister(BMP280_REG_CONFIG, conf);
90003158:	7bfb      	ldrb	r3, [r7, #15]
9000315a:	461a      	mov	r2, r3
9000315c:	21f5      	movs	r1, #245	; 0xf5
9000315e:	6878      	ldr	r0, [r7, #4]
90003160:	f000 fc23 	bl	900039aa <_ZN6BMP28013writeRegisterEhh>
}
90003164:	bf00      	nop
90003166:	3710      	adds	r7, #16
90003168:	46bd      	mov	sp, r7
9000316a:	bd80      	pop	{r7, pc}
9000316c:	0000      	movs	r0, r0
	...

90003170 <_ZN6BMP2807measureEv>:
/**
 * Read latest measurement from sensor and execute compensation.
 * Stores the results in measurement member variable.
 * */
void BMP280::measure()
{
90003170:	b580      	push	{r7, lr}
90003172:	b086      	sub	sp, #24
90003174:	af00      	add	r7, sp, #0
90003176:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	readMBRegister(BMP280_REG_DATA, data, 6);
90003178:	f107 0208 	add.w	r2, r7, #8
9000317c:	2306      	movs	r3, #6
9000317e:	21f7      	movs	r1, #247	; 0xf7
90003180:	6878      	ldr	r0, [r7, #4]
90003182:	f000 fc31 	bl	900039e8 <_ZN6BMP28014readMBRegisterEhPhh>

	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
90003186:	7a3b      	ldrb	r3, [r7, #8]
90003188:	031a      	lsls	r2, r3, #12
9000318a:	7a7b      	ldrb	r3, [r7, #9]
9000318c:	011b      	lsls	r3, r3, #4
9000318e:	4313      	orrs	r3, r2
90003190:	7aba      	ldrb	r2, [r7, #10]
90003192:	0912      	lsrs	r2, r2, #4
90003194:	b2d2      	uxtb	r2, r2
90003196:	4313      	orrs	r3, r2
90003198:	617b      	str	r3, [r7, #20]
	int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
9000319a:	7afb      	ldrb	r3, [r7, #11]
9000319c:	031a      	lsls	r2, r3, #12
9000319e:	7b3b      	ldrb	r3, [r7, #12]
900031a0:	011b      	lsls	r3, r3, #4
900031a2:	4313      	orrs	r3, r2
900031a4:	7b7a      	ldrb	r2, [r7, #13]
900031a6:	0912      	lsrs	r2, r2, #4
900031a8:	b2d2      	uxtb	r2, r2
900031aa:	4313      	orrs	r3, r2
900031ac:	613b      	str	r3, [r7, #16]

	measurement.temperature = (float) compensate_temperature(adc_T) / 100.0;
900031ae:	6939      	ldr	r1, [r7, #16]
900031b0:	6878      	ldr	r0, [r7, #4]
900031b2:	f000 f875 	bl	900032a0 <_ZN6BMP28022compensate_temperatureEl>
900031b6:	ee07 0a90 	vmov	s15, r0
900031ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900031be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
900031c2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 90003250 <_ZN6BMP2807measureEv+0xe0>
900031c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
900031ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
900031ce:	687b      	ldr	r3, [r7, #4]
900031d0:	edc3 7a00 	vstr	s15, [r3]
	measurement.pressure = (float) compensate_pressure(adc_P) / 256.0;
900031d4:	6979      	ldr	r1, [r7, #20]
900031d6:	6878      	ldr	r0, [r7, #4]
900031d8:	f000 f8b8 	bl	9000334c <_ZN6BMP28019compensate_pressureEl>
900031dc:	ee07 0a90 	vmov	s15, r0
900031e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
900031e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
900031e8:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 90003258 <_ZN6BMP2807measureEv+0xe8>
900031ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
900031f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
900031f4:	687b      	ldr	r3, [r7, #4]
900031f6:	edc3 7a01 	vstr	s15, [r3, #4]

	if (p_reference > 0)
900031fa:	687b      	ldr	r3, [r7, #4]
900031fc:	edd3 7a04 	vldr	s15, [r3, #16]
90003200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90003208:	dc00      	bgt.n	9000320c <_ZN6BMP2807measureEv+0x9c>
	{
		measurement.altitude = (1.0
				- pow(measurement.pressure / p_reference, 0.1903)) * 4433076.0;
	}
}
9000320a:	e01c      	b.n	90003246 <_ZN6BMP2807measureEv+0xd6>
				- pow(measurement.pressure / p_reference, 0.1903)) * 4433076.0;
9000320c:	687b      	ldr	r3, [r7, #4]
9000320e:	ed93 7a01 	vldr	s14, [r3, #4]
90003212:	687b      	ldr	r3, [r7, #4]
90003214:	edd3 7a04 	vldr	s15, [r3, #16]
90003218:	eec7 6a27 	vdiv.f32	s13, s14, s15
9000321c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 90003260 <_ZN6BMP2807measureEv+0xf0>
90003220:	eeb0 0a66 	vmov.f32	s0, s13
90003224:	f000 f824 	bl	90003270 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
90003228:	eeb0 7b40 	vmov.f64	d7, d0
9000322c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
90003230:	ee36 7b47 	vsub.f64	d7, d6, d7
90003234:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 90003268 <_ZN6BMP2807measureEv+0xf8>
90003238:	ee27 7b06 	vmul.f64	d7, d7, d6
9000323c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		measurement.altitude = (1.0
90003240:	687b      	ldr	r3, [r7, #4]
90003242:	edc3 7a02 	vstr	s15, [r3, #8]
}
90003246:	bf00      	nop
90003248:	3718      	adds	r7, #24
9000324a:	46bd      	mov	sp, r7
9000324c:	bd80      	pop	{r7, pc}
9000324e:	bf00      	nop
90003250:	00000000 	.word	0x00000000
90003254:	40590000 	.word	0x40590000
90003258:	00000000 	.word	0x00000000
9000325c:	40700000 	.word	0x40700000
90003260:	1a36e2eb 	.word	0x1a36e2eb
90003264:	3fc85bc0 	.word	0x3fc85bc0
90003268:	00000000 	.word	0x00000000
9000326c:	4150e92d 	.word	0x4150e92d

90003270 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
90003270:	b580      	push	{r7, lr}
90003272:	b084      	sub	sp, #16
90003274:	af00      	add	r7, sp, #0
90003276:	ed87 0a03 	vstr	s0, [r7, #12]
9000327a:	ed87 1b00 	vstr	d1, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
9000327e:	edd7 7a03 	vldr	s15, [r7, #12]
90003282:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
90003286:	ed97 1b00 	vldr	d1, [r7]
9000328a:	eeb0 0b47 	vmov.f64	d0, d7
9000328e:	f00d faeb 	bl	90010868 <pow>
90003292:	eeb0 7b40 	vmov.f64	d7, d0
    }
90003296:	eeb0 0b47 	vmov.f64	d0, d7
9000329a:	3710      	adds	r7, #16
9000329c:	46bd      	mov	sp, r7
9000329e:	bd80      	pop	{r7, pc}

900032a0 <_ZN6BMP28022compensate_temperatureEl>:
 * Calculate sensor temperature from measurement and compensation parameters.
 * @param uncomp_temp: Raw temperature measurement.
 * @return Temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
 * */
int32_t BMP280::compensate_temperature(int32_t uncomp_temp)
{
900032a0:	b480      	push	{r7}
900032a2:	b085      	sub	sp, #20
900032a4:	af00      	add	r7, sp, #0
900032a6:	6078      	str	r0, [r7, #4]
900032a8:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;
	var1 =
			((((uncomp_temp / 8)
900032aa:	683b      	ldr	r3, [r7, #0]
900032ac:	2b00      	cmp	r3, #0
900032ae:	da00      	bge.n	900032b2 <_ZN6BMP28022compensate_temperatureEl+0x12>
900032b0:	3307      	adds	r3, #7
900032b2:	10db      	asrs	r3, r3, #3
900032b4:	461a      	mov	r2, r3
					- ((int32_t) compensationParameters.dig_t1 << 1)))
900032b6:	687b      	ldr	r3, [r7, #4]
900032b8:	8b1b      	ldrh	r3, [r3, #24]
900032ba:	005b      	lsls	r3, r3, #1
900032bc:	1ad3      	subs	r3, r2, r3
					* ((int32_t) compensationParameters.dig_t2)) / 2048;
900032be:	687a      	ldr	r2, [r7, #4]
900032c0:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
900032c4:	fb02 f303 	mul.w	r3, r2, r3
	var1 =
900032c8:	2b00      	cmp	r3, #0
900032ca:	da01      	bge.n	900032d0 <_ZN6BMP28022compensate_temperatureEl+0x30>
900032cc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
900032d0:	12db      	asrs	r3, r3, #11
900032d2:	60fb      	str	r3, [r7, #12]
	var2 = (((((uncomp_temp / 16) - ((int32_t) compensationParameters.dig_t1))
900032d4:	683b      	ldr	r3, [r7, #0]
900032d6:	2b00      	cmp	r3, #0
900032d8:	da00      	bge.n	900032dc <_ZN6BMP28022compensate_temperatureEl+0x3c>
900032da:	330f      	adds	r3, #15
900032dc:	111b      	asrs	r3, r3, #4
900032de:	461a      	mov	r2, r3
900032e0:	687b      	ldr	r3, [r7, #4]
900032e2:	8b1b      	ldrh	r3, [r3, #24]
900032e4:	1ad2      	subs	r2, r2, r3
			* ((uncomp_temp / 16) - ((int32_t) compensationParameters.dig_t1)))
900032e6:	683b      	ldr	r3, [r7, #0]
900032e8:	2b00      	cmp	r3, #0
900032ea:	da00      	bge.n	900032ee <_ZN6BMP28022compensate_temperatureEl+0x4e>
900032ec:	330f      	adds	r3, #15
900032ee:	111b      	asrs	r3, r3, #4
900032f0:	4619      	mov	r1, r3
900032f2:	687b      	ldr	r3, [r7, #4]
900032f4:	8b1b      	ldrh	r3, [r3, #24]
900032f6:	1acb      	subs	r3, r1, r3
900032f8:	fb02 f303 	mul.w	r3, r2, r3
			/ 4096) * ((int32_t) compensationParameters.dig_t3)) / 16384;
900032fc:	2b00      	cmp	r3, #0
900032fe:	da01      	bge.n	90003304 <_ZN6BMP28022compensate_temperatureEl+0x64>
90003300:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
90003304:	131b      	asrs	r3, r3, #12
90003306:	461a      	mov	r2, r3
90003308:	687b      	ldr	r3, [r7, #4]
9000330a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
9000330e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((uncomp_temp / 16) - ((int32_t) compensationParameters.dig_t1))
90003312:	2b00      	cmp	r3, #0
90003314:	da03      	bge.n	9000331e <_ZN6BMP28022compensate_temperatureEl+0x7e>
90003316:	f643 72ff 	movw	r2, #16383	; 0x3fff
9000331a:	441a      	add	r2, r3
9000331c:	4613      	mov	r3, r2
9000331e:	139b      	asrs	r3, r3, #14
90003320:	60bb      	str	r3, [r7, #8]
	t_fine = var1 + var2;
90003322:	68fa      	ldr	r2, [r7, #12]
90003324:	68bb      	ldr	r3, [r7, #8]
90003326:	441a      	add	r2, r3
90003328:	687b      	ldr	r3, [r7, #4]
9000332a:	615a      	str	r2, [r3, #20]
	return (t_fine * 5 + 128) / 256;
9000332c:	687b      	ldr	r3, [r7, #4]
9000332e:	695a      	ldr	r2, [r3, #20]
90003330:	4613      	mov	r3, r2
90003332:	009b      	lsls	r3, r3, #2
90003334:	4413      	add	r3, r2
90003336:	3380      	adds	r3, #128	; 0x80
90003338:	2b00      	cmp	r3, #0
9000333a:	da00      	bge.n	9000333e <_ZN6BMP28022compensate_temperatureEl+0x9e>
9000333c:	33ff      	adds	r3, #255	; 0xff
9000333e:	121b      	asrs	r3, r3, #8
}
90003340:	4618      	mov	r0, r3
90003342:	3714      	adds	r7, #20
90003344:	46bd      	mov	sp, r7
90003346:	f85d 7b04 	ldr.w	r7, [sp], #4
9000334a:	4770      	bx	lr

9000334c <_ZN6BMP28019compensate_pressureEl>:
 * @param uncomp_pres: Raw pressure measurement.
 * @return Pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
 * Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
 * */
uint32_t BMP280::compensate_pressure(int32_t uncomp_pres)
{
9000334c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90003350:	b0d6      	sub	sp, #344	; 0x158
90003352:	af00      	add	r7, sp, #0
90003354:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
90003358:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
	int64_t var1, var2, p;

	var1 = ((int64_t) (t_fine)) - 128000;
9000335c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
90003360:	695b      	ldr	r3, [r3, #20]
90003362:	17da      	asrs	r2, r3, #31
90003364:	461c      	mov	r4, r3
90003366:	4615      	mov	r5, r2
90003368:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
9000336c:	f145 3bff 	adc.w	fp, r5, #4294967295
90003370:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
	var2 = var1 * var1 * (int64_t) compensationParameters.dig_p6;
90003374:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
90003378:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
9000337c:	fb03 f102 	mul.w	r1, r3, r2
90003380:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
90003384:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
90003388:	fb02 f303 	mul.w	r3, r2, r3
9000338c:	18ca      	adds	r2, r1, r3
9000338e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
90003392:	fba3 8903 	umull	r8, r9, r3, r3
90003396:	eb02 0309 	add.w	r3, r2, r9
9000339a:	4699      	mov	r9, r3
9000339c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
900033a0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
900033a4:	b21b      	sxth	r3, r3
900033a6:	17da      	asrs	r2, r3, #31
900033a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
900033ac:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
900033b0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
900033b4:	4603      	mov	r3, r0
900033b6:	fb03 f209 	mul.w	r2, r3, r9
900033ba:	460b      	mov	r3, r1
900033bc:	fb08 f303 	mul.w	r3, r8, r3
900033c0:	4413      	add	r3, r2
900033c2:	4602      	mov	r2, r0
900033c4:	fba8 1202 	umull	r1, r2, r8, r2
900033c8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
900033cc:	460a      	mov	r2, r1
900033ce:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
900033d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
900033d6:	4413      	add	r3, r2
900033d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
900033dc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
900033e0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
900033e4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var2 = var2 + ((var1 * (int64_t) compensationParameters.dig_p5) * 131072);
900033e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
900033ec:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
900033f0:	b21b      	sxth	r3, r3
900033f2:	17da      	asrs	r2, r3, #31
900033f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
900033f8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
900033fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
90003400:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
90003404:	462a      	mov	r2, r5
90003406:	fb02 f203 	mul.w	r2, r2, r3
9000340a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
9000340e:	4621      	mov	r1, r4
90003410:	fb01 f303 	mul.w	r3, r1, r3
90003414:	441a      	add	r2, r3
90003416:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
9000341a:	4621      	mov	r1, r4
9000341c:	fba3 1301 	umull	r1, r3, r3, r1
90003420:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
90003424:	460b      	mov	r3, r1
90003426:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
9000342a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
9000342e:	18d3      	adds	r3, r2, r3
90003430:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
90003434:	f04f 0000 	mov.w	r0, #0
90003438:	f04f 0100 	mov.w	r1, #0
9000343c:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
90003440:	462b      	mov	r3, r5
90003442:	0459      	lsls	r1, r3, #17
90003444:	4623      	mov	r3, r4
90003446:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
9000344a:	4623      	mov	r3, r4
9000344c:	0458      	lsls	r0, r3, #17
9000344e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
90003452:	1814      	adds	r4, r2, r0
90003454:	67bc      	str	r4, [r7, #120]	; 0x78
90003456:	414b      	adcs	r3, r1
90003458:	67fb      	str	r3, [r7, #124]	; 0x7c
9000345a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
9000345e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var2 = var2 + (((int64_t) compensationParameters.dig_p4) * 34359738368);
90003462:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
90003466:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
9000346a:	b21b      	sxth	r3, r3
9000346c:	17da      	asrs	r2, r3, #31
9000346e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
90003472:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
90003476:	f04f 0000 	mov.w	r0, #0
9000347a:	f04f 0100 	mov.w	r1, #0
9000347e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
90003482:	00d9      	lsls	r1, r3, #3
90003484:	2000      	movs	r0, #0
90003486:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
9000348a:	1814      	adds	r4, r2, r0
9000348c:	673c      	str	r4, [r7, #112]	; 0x70
9000348e:	414b      	adcs	r3, r1
90003490:	677b      	str	r3, [r7, #116]	; 0x74
90003492:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
90003496:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var1 = ((var1 * var1 * (int64_t) compensationParameters.dig_p3) / 256)
9000349a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
9000349e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
900034a2:	fb03 f102 	mul.w	r1, r3, r2
900034a6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
900034aa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
900034ae:	fb02 f303 	mul.w	r3, r2, r3
900034b2:	18ca      	adds	r2, r1, r3
900034b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
900034b8:	fba3 1303 	umull	r1, r3, r3, r3
900034bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
900034c0:	460b      	mov	r3, r1
900034c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
900034c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
900034ca:	18d3      	adds	r3, r2, r3
900034cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
900034d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
900034d4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
900034d8:	b21b      	sxth	r3, r3
900034da:	17da      	asrs	r2, r3, #31
900034dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
900034e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
900034e4:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
900034e8:	462b      	mov	r3, r5
900034ea:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
900034ee:	4642      	mov	r2, r8
900034f0:	fb02 f203 	mul.w	r2, r2, r3
900034f4:	464b      	mov	r3, r9
900034f6:	4621      	mov	r1, r4
900034f8:	fb01 f303 	mul.w	r3, r1, r3
900034fc:	4413      	add	r3, r2
900034fe:	4622      	mov	r2, r4
90003500:	4641      	mov	r1, r8
90003502:	fba2 1201 	umull	r1, r2, r2, r1
90003506:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
9000350a:	460a      	mov	r2, r1
9000350c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
90003510:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
90003514:	4413      	add	r3, r2
90003516:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
9000351a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
9000351e:	2b00      	cmp	r3, #0
90003520:	da07      	bge.n	90003532 <_ZN6BMP28019compensate_pressureEl+0x1e6>
90003522:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
90003526:	66b9      	str	r1, [r7, #104]	; 0x68
90003528:	f143 0300 	adc.w	r3, r3, #0
9000352c:	66fb      	str	r3, [r7, #108]	; 0x6c
9000352e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
90003532:	f04f 0000 	mov.w	r0, #0
90003536:	f04f 0100 	mov.w	r1, #0
9000353a:	0a10      	lsrs	r0, r2, #8
9000353c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
90003540:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) compensationParameters.dig_p2) * 4096);
90003542:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
90003546:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
9000354a:	b21b      	sxth	r3, r3
9000354c:	17da      	asrs	r2, r3, #31
9000354e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
90003552:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
90003556:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
9000355a:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
9000355e:	464a      	mov	r2, r9
90003560:	fb02 f203 	mul.w	r2, r2, r3
90003564:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
90003568:	4644      	mov	r4, r8
9000356a:	fb04 f303 	mul.w	r3, r4, r3
9000356e:	441a      	add	r2, r3
90003570:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
90003574:	4644      	mov	r4, r8
90003576:	fba3 4304 	umull	r4, r3, r3, r4
9000357a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
9000357e:	4623      	mov	r3, r4
90003580:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
90003584:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
90003588:	18d3      	adds	r3, r2, r3
9000358a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
9000358e:	f04f 0200 	mov.w	r2, #0
90003592:	f04f 0300 	mov.w	r3, #0
90003596:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
9000359a:	464c      	mov	r4, r9
9000359c:	0323      	lsls	r3, r4, #12
9000359e:	4644      	mov	r4, r8
900035a0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
900035a4:	4644      	mov	r4, r8
900035a6:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) compensationParameters.dig_p3) / 256)
900035a8:	1884      	adds	r4, r0, r2
900035aa:	663c      	str	r4, [r7, #96]	; 0x60
900035ac:	eb41 0303 	adc.w	r3, r1, r3
900035b0:	667b      	str	r3, [r7, #100]	; 0x64
900035b2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
900035b6:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var1 = ((INT64_C(0x800000000000) + var1)
900035ba:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
900035be:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
900035c2:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
900035c6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
			* ((int64_t) compensationParameters.dig_p1)) / 8589934592;
900035ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
900035ce:	8bdb      	ldrh	r3, [r3, #30]
900035d0:	b29b      	uxth	r3, r3
900035d2:	2200      	movs	r2, #0
900035d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
900035d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
900035dc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
900035e0:	462b      	mov	r3, r5
900035e2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
900035e6:	4642      	mov	r2, r8
900035e8:	fb02 f203 	mul.w	r2, r2, r3
900035ec:	464b      	mov	r3, r9
900035ee:	4621      	mov	r1, r4
900035f0:	fb01 f303 	mul.w	r3, r1, r3
900035f4:	4413      	add	r3, r2
900035f6:	4622      	mov	r2, r4
900035f8:	4641      	mov	r1, r8
900035fa:	fba2 1201 	umull	r1, r2, r2, r1
900035fe:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
90003602:	460a      	mov	r2, r1
90003604:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
90003608:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
9000360c:	4413      	add	r3, r2
9000360e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	var1 = ((INT64_C(0x800000000000) + var1)
90003612:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
90003616:	2b00      	cmp	r3, #0
90003618:	da06      	bge.n	90003628 <_ZN6BMP28019compensate_pressureEl+0x2dc>
9000361a:	1e51      	subs	r1, r2, #1
9000361c:	65b9      	str	r1, [r7, #88]	; 0x58
9000361e:	f143 0301 	adc.w	r3, r3, #1
90003622:	65fb      	str	r3, [r7, #92]	; 0x5c
90003624:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
90003628:	f04f 0000 	mov.w	r0, #0
9000362c:	f04f 0100 	mov.w	r1, #0
90003630:	1058      	asrs	r0, r3, #1
90003632:	17d9      	asrs	r1, r3, #31
90003634:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
	if (var1 == 0)
90003638:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
9000363c:	4313      	orrs	r3, r2
9000363e:	d101      	bne.n	90003644 <_ZN6BMP28019compensate_pressureEl+0x2f8>
	{
		return 0;
90003640:	2300      	movs	r3, #0
90003642:	e182      	b.n	9000394a <_ZN6BMP28019compensate_pressureEl+0x5fe>
	}
	p = 1048576 - uncomp_pres;
90003644:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
90003648:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
9000364c:	17da      	asrs	r2, r3, #31
9000364e:	653b      	str	r3, [r7, #80]	; 0x50
90003650:	657a      	str	r2, [r7, #84]	; 0x54
90003652:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
90003656:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	p = (((((p * 2147483648U)) - var2) * 3125) / var1);
9000365a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
9000365e:	f04f 0000 	mov.w	r0, #0
90003662:	f04f 0100 	mov.w	r1, #0
90003666:	07d9      	lsls	r1, r3, #31
90003668:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
9000366c:	07d0      	lsls	r0, r2, #31
9000366e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
90003672:	1a84      	subs	r4, r0, r2
90003674:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
90003678:	eb61 0303 	sbc.w	r3, r1, r3
9000367c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
90003680:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
90003684:	4622      	mov	r2, r4
90003686:	462b      	mov	r3, r5
90003688:	1891      	adds	r1, r2, r2
9000368a:	64b9      	str	r1, [r7, #72]	; 0x48
9000368c:	415b      	adcs	r3, r3
9000368e:	64fb      	str	r3, [r7, #76]	; 0x4c
90003690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
90003694:	4621      	mov	r1, r4
90003696:	1851      	adds	r1, r2, r1
90003698:	6439      	str	r1, [r7, #64]	; 0x40
9000369a:	4629      	mov	r1, r5
9000369c:	414b      	adcs	r3, r1
9000369e:	647b      	str	r3, [r7, #68]	; 0x44
900036a0:	f04f 0200 	mov.w	r2, #0
900036a4:	f04f 0300 	mov.w	r3, #0
900036a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
900036ac:	4649      	mov	r1, r9
900036ae:	018b      	lsls	r3, r1, #6
900036b0:	4641      	mov	r1, r8
900036b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
900036b6:	4641      	mov	r1, r8
900036b8:	018a      	lsls	r2, r1, #6
900036ba:	4641      	mov	r1, r8
900036bc:	1889      	adds	r1, r1, r2
900036be:	63b9      	str	r1, [r7, #56]	; 0x38
900036c0:	4649      	mov	r1, r9
900036c2:	eb43 0101 	adc.w	r1, r3, r1
900036c6:	63f9      	str	r1, [r7, #60]	; 0x3c
900036c8:	f04f 0200 	mov.w	r2, #0
900036cc:	f04f 0300 	mov.w	r3, #0
900036d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
900036d4:	4649      	mov	r1, r9
900036d6:	008b      	lsls	r3, r1, #2
900036d8:	4641      	mov	r1, r8
900036da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
900036de:	4641      	mov	r1, r8
900036e0:	008a      	lsls	r2, r1, #2
900036e2:	4610      	mov	r0, r2
900036e4:	4619      	mov	r1, r3
900036e6:	4603      	mov	r3, r0
900036e8:	4622      	mov	r2, r4
900036ea:	189b      	adds	r3, r3, r2
900036ec:	633b      	str	r3, [r7, #48]	; 0x30
900036ee:	460b      	mov	r3, r1
900036f0:	462a      	mov	r2, r5
900036f2:	eb42 0303 	adc.w	r3, r2, r3
900036f6:	637b      	str	r3, [r7, #52]	; 0x34
900036f8:	f04f 0200 	mov.w	r2, #0
900036fc:	f04f 0300 	mov.w	r3, #0
90003700:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
90003704:	4649      	mov	r1, r9
90003706:	008b      	lsls	r3, r1, #2
90003708:	4641      	mov	r1, r8
9000370a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
9000370e:	4641      	mov	r1, r8
90003710:	008a      	lsls	r2, r1, #2
90003712:	4610      	mov	r0, r2
90003714:	4619      	mov	r1, r3
90003716:	4603      	mov	r3, r0
90003718:	4622      	mov	r2, r4
9000371a:	189b      	adds	r3, r3, r2
9000371c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
90003720:	462b      	mov	r3, r5
90003722:	460a      	mov	r2, r1
90003724:	eb42 0303 	adc.w	r3, r2, r3
90003728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
9000372c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
90003730:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
90003734:	f7fc fe2c 	bl	90000390 <__aeabi_ldivmod>
90003738:	4602      	mov	r2, r0
9000373a:	460b      	mov	r3, r1
9000373c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	var1 = (((int64_t) compensationParameters.dig_p9) * (p / 8192) * (p / 8192))
90003740:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
90003744:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
90003748:	b21b      	sxth	r3, r3
9000374a:	17da      	asrs	r2, r3, #31
9000374c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
90003750:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
90003754:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
90003758:	2b00      	cmp	r3, #0
9000375a:	da08      	bge.n	9000376e <_ZN6BMP28019compensate_pressureEl+0x422>
9000375c:	f641 71ff 	movw	r1, #8191	; 0x1fff
90003760:	1851      	adds	r1, r2, r1
90003762:	62b9      	str	r1, [r7, #40]	; 0x28
90003764:	f143 0300 	adc.w	r3, r3, #0
90003768:	62fb      	str	r3, [r7, #44]	; 0x2c
9000376a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
9000376e:	f04f 0000 	mov.w	r0, #0
90003772:	f04f 0100 	mov.w	r1, #0
90003776:	0b50      	lsrs	r0, r2, #13
90003778:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
9000377c:	1359      	asrs	r1, r3, #13
9000377e:	4602      	mov	r2, r0
90003780:	460b      	mov	r3, r1
90003782:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
90003786:	4629      	mov	r1, r5
90003788:	fb02 f001 	mul.w	r0, r2, r1
9000378c:	4621      	mov	r1, r4
9000378e:	fb01 f103 	mul.w	r1, r1, r3
90003792:	4401      	add	r1, r0
90003794:	4620      	mov	r0, r4
90003796:	fba0 2302 	umull	r2, r3, r0, r2
9000379a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
9000379e:	4613      	mov	r3, r2
900037a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
900037a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
900037a8:	18cb      	adds	r3, r1, r3
900037aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
900037ae:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
900037b2:	2b00      	cmp	r3, #0
900037b4:	da08      	bge.n	900037c8 <_ZN6BMP28019compensate_pressureEl+0x47c>
900037b6:	f641 71ff 	movw	r1, #8191	; 0x1fff
900037ba:	1851      	adds	r1, r2, r1
900037bc:	6239      	str	r1, [r7, #32]
900037be:	f143 0300 	adc.w	r3, r3, #0
900037c2:	627b      	str	r3, [r7, #36]	; 0x24
900037c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
900037c8:	f04f 0000 	mov.w	r0, #0
900037cc:	f04f 0100 	mov.w	r1, #0
900037d0:	0b50      	lsrs	r0, r2, #13
900037d2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
900037d6:	1359      	asrs	r1, r3, #13
900037d8:	4602      	mov	r2, r0
900037da:	460b      	mov	r3, r1
900037dc:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
900037e0:	4629      	mov	r1, r5
900037e2:	fb02 f001 	mul.w	r0, r2, r1
900037e6:	4621      	mov	r1, r4
900037e8:	fb01 f103 	mul.w	r1, r1, r3
900037ec:	4401      	add	r1, r0
900037ee:	4620      	mov	r0, r4
900037f0:	fba0 2302 	umull	r2, r3, r0, r2
900037f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
900037f8:	4613      	mov	r3, r2
900037fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
900037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
90003802:	18cb      	adds	r3, r1, r3
90003804:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
90003808:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
9000380c:	2b00      	cmp	r3, #0
9000380e:	da08      	bge.n	90003822 <_ZN6BMP28019compensate_pressureEl+0x4d6>
90003810:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
90003814:	1851      	adds	r1, r2, r1
90003816:	61b9      	str	r1, [r7, #24]
90003818:	f143 0300 	adc.w	r3, r3, #0
9000381c:	61fb      	str	r3, [r7, #28]
9000381e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
90003822:	f04f 0000 	mov.w	r0, #0
90003826:	f04f 0100 	mov.w	r1, #0
9000382a:	0e50      	lsrs	r0, r2, #25
9000382c:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
90003830:	1659      	asrs	r1, r3, #25
90003832:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
			/ 33554432;
	var2 = (((int64_t) compensationParameters.dig_p8) * p) / 524288;
90003836:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
9000383a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
9000383e:	b21b      	sxth	r3, r3
90003840:	17da      	asrs	r2, r3, #31
90003842:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
90003846:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
9000384a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
9000384e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
90003852:	462a      	mov	r2, r5
90003854:	fb02 f203 	mul.w	r2, r2, r3
90003858:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
9000385c:	4621      	mov	r1, r4
9000385e:	fb01 f303 	mul.w	r3, r1, r3
90003862:	441a      	add	r2, r3
90003864:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
90003868:	4621      	mov	r1, r4
9000386a:	fba3 1301 	umull	r1, r3, r3, r1
9000386e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
90003872:	460b      	mov	r3, r1
90003874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
90003878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
9000387c:	18d3      	adds	r3, r2, r3
9000387e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
90003882:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
90003886:	2900      	cmp	r1, #0
90003888:	da07      	bge.n	9000389a <_ZN6BMP28019compensate_pressureEl+0x54e>
9000388a:	4b33      	ldr	r3, [pc, #204]	; (90003958 <_ZN6BMP28019compensate_pressureEl+0x60c>)
9000388c:	18c3      	adds	r3, r0, r3
9000388e:	613b      	str	r3, [r7, #16]
90003890:	f141 0300 	adc.w	r3, r1, #0
90003894:	617b      	str	r3, [r7, #20]
90003896:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
9000389a:	f04f 0200 	mov.w	r2, #0
9000389e:	f04f 0300 	mov.w	r3, #0
900038a2:	0cc2      	lsrs	r2, r0, #19
900038a4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
900038a8:	14cb      	asrs	r3, r1, #19
900038aa:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	p = ((p + var1 + var2) / 256)
900038ae:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
900038b2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
900038b6:	1884      	adds	r4, r0, r2
900038b8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
900038bc:	eb41 0303 	adc.w	r3, r1, r3
900038c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
900038c4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
900038c8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
900038cc:	4621      	mov	r1, r4
900038ce:	1889      	adds	r1, r1, r2
900038d0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
900038d4:	4629      	mov	r1, r5
900038d6:	eb43 0101 	adc.w	r1, r3, r1
900038da:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
900038de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
900038e2:	2b00      	cmp	r3, #0
900038e4:	da07      	bge.n	900038f6 <_ZN6BMP28019compensate_pressureEl+0x5aa>
900038e6:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
900038ea:	60b9      	str	r1, [r7, #8]
900038ec:	f143 0300 	adc.w	r3, r3, #0
900038f0:	60fb      	str	r3, [r7, #12]
900038f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
900038f6:	f04f 0000 	mov.w	r0, #0
900038fa:	f04f 0100 	mov.w	r1, #0
900038fe:	0a10      	lsrs	r0, r2, #8
90003900:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
90003904:	1219      	asrs	r1, r3, #8
			+ (((int64_t) compensationParameters.dig_p7) * 16);
90003906:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
9000390a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
9000390e:	b21b      	sxth	r3, r3
90003910:	17da      	asrs	r2, r3, #31
90003912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
90003916:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
9000391a:	f04f 0200 	mov.w	r2, #0
9000391e:	f04f 0300 	mov.w	r3, #0
90003922:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
90003926:	464c      	mov	r4, r9
90003928:	0123      	lsls	r3, r4, #4
9000392a:	4644      	mov	r4, r8
9000392c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
90003930:	4644      	mov	r4, r8
90003932:	0122      	lsls	r2, r4, #4
	p = ((p + var1 + var2) / 256)
90003934:	1884      	adds	r4, r0, r2
90003936:	603c      	str	r4, [r7, #0]
90003938:	eb41 0303 	adc.w	r3, r1, r3
9000393c:	607b      	str	r3, [r7, #4]
9000393e:	e9d7 3400 	ldrd	r3, r4, [r7]
90003942:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	return (uint32_t) p;
90003946:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
9000394a:	4618      	mov	r0, r3
9000394c:	f507 77ac 	add.w	r7, r7, #344	; 0x158
90003950:	46bd      	mov	sp, r7
90003952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90003956:	bf00      	nop
90003958:	0007ffff 	.word	0x0007ffff

9000395c <_Z9bmp_delaym>:
#include "stm32h7xx_hal.h"
#include "cmsis_os.h"

#include <stdint.h>

void bmp_delay(uint32_t time){
9000395c:	b580      	push	{r7, lr}
9000395e:	b082      	sub	sp, #8
90003960:	af00      	add	r7, sp, #0
90003962:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
90003964:	6878      	ldr	r0, [r7, #4]
90003966:	f00a faad 	bl	9000dec4 <osDelay>
#else
  HAL_Delay(time);
#endif
}
9000396a:	bf00      	nop
9000396c:	3708      	adds	r7, #8
9000396e:	46bd      	mov	sp, r7
90003970:	bd80      	pop	{r7, pc}

90003972 <_ZN6BMP28012readRegisterEh>:
 * Read a register
 * @param address: Register address.
 * @return Register value.
 * */
uint8_t BMP280::readRegister(uint8_t address)
{
90003972:	b580      	push	{r7, lr}
90003974:	b084      	sub	sp, #16
90003976:	af00      	add	r7, sp, #0
90003978:	6078      	str	r0, [r7, #4]
9000397a:	460b      	mov	r3, r1
9000397c:	70fb      	strb	r3, [r7, #3]
	spiCSNlow();
9000397e:	6878      	ldr	r0, [r7, #4]
90003980:	f000 f88a 	bl	90003a98 <_ZN6BMP2809spiCSNlowEv>
	spiReadWrite(address);
90003984:	78fb      	ldrb	r3, [r7, #3]
90003986:	4619      	mov	r1, r3
90003988:	6878      	ldr	r0, [r7, #4]
9000398a:	f000 f85a 	bl	90003a42 <_ZN6BMP28012spiReadWriteEh>
	uint8_t value = spiReadWrite(0);
9000398e:	2100      	movs	r1, #0
90003990:	6878      	ldr	r0, [r7, #4]
90003992:	f000 f856 	bl	90003a42 <_ZN6BMP28012spiReadWriteEh>
90003996:	4603      	mov	r3, r0
90003998:	73fb      	strb	r3, [r7, #15]
	spiCSNhigh();
9000399a:	6878      	ldr	r0, [r7, #4]
9000399c:	f000 f86c 	bl	90003a78 <_ZN6BMP28010spiCSNhighEv>
	return value;
900039a0:	7bfb      	ldrb	r3, [r7, #15]
}
900039a2:	4618      	mov	r0, r3
900039a4:	3710      	adds	r7, #16
900039a6:	46bd      	mov	sp, r7
900039a8:	bd80      	pop	{r7, pc}

900039aa <_ZN6BMP28013writeRegisterEhh>:
 * Write to a register
 * @param address: Register address.
 * @param value: Value to write.
 * */
void BMP280::writeRegister(uint8_t address, uint8_t value)
{
900039aa:	b580      	push	{r7, lr}
900039ac:	b082      	sub	sp, #8
900039ae:	af00      	add	r7, sp, #0
900039b0:	6078      	str	r0, [r7, #4]
900039b2:	460b      	mov	r3, r1
900039b4:	70fb      	strb	r3, [r7, #3]
900039b6:	4613      	mov	r3, r2
900039b8:	70bb      	strb	r3, [r7, #2]
	spiCSNlow();
900039ba:	6878      	ldr	r0, [r7, #4]
900039bc:	f000 f86c 	bl	90003a98 <_ZN6BMP2809spiCSNlowEv>
	spiReadWrite(address & BMP280_SPI_MASK_WRITE);
900039c0:	78fb      	ldrb	r3, [r7, #3]
900039c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900039c6:	b2db      	uxtb	r3, r3
900039c8:	4619      	mov	r1, r3
900039ca:	6878      	ldr	r0, [r7, #4]
900039cc:	f000 f839 	bl	90003a42 <_ZN6BMP28012spiReadWriteEh>
	spiReadWrite(value);
900039d0:	78bb      	ldrb	r3, [r7, #2]
900039d2:	4619      	mov	r1, r3
900039d4:	6878      	ldr	r0, [r7, #4]
900039d6:	f000 f834 	bl	90003a42 <_ZN6BMP28012spiReadWriteEh>
	spiCSNhigh();
900039da:	6878      	ldr	r0, [r7, #4]
900039dc:	f000 f84c 	bl	90003a78 <_ZN6BMP28010spiCSNhighEv>
}
900039e0:	bf00      	nop
900039e2:	3708      	adds	r7, #8
900039e4:	46bd      	mov	sp, r7
900039e6:	bd80      	pop	{r7, pc}

900039e8 <_ZN6BMP28014readMBRegisterEhPhh>:
 * @param address: Register address.
 * @param values: Array pointer to store values in.
 * @param length: Number of bytes to read.
 * */
void BMP280::readMBRegister(uint8_t address, uint8_t *values, uint8_t length)
{
900039e8:	b590      	push	{r4, r7, lr}
900039ea:	b085      	sub	sp, #20
900039ec:	af00      	add	r7, sp, #0
900039ee:	60f8      	str	r0, [r7, #12]
900039f0:	607a      	str	r2, [r7, #4]
900039f2:	461a      	mov	r2, r3
900039f4:	460b      	mov	r3, r1
900039f6:	72fb      	strb	r3, [r7, #11]
900039f8:	4613      	mov	r3, r2
900039fa:	72bb      	strb	r3, [r7, #10]
	spiCSNlow();
900039fc:	68f8      	ldr	r0, [r7, #12]
900039fe:	f000 f84b 	bl	90003a98 <_ZN6BMP2809spiCSNlowEv>
	spiReadWrite(address);
90003a02:	7afb      	ldrb	r3, [r7, #11]
90003a04:	4619      	mov	r1, r3
90003a06:	68f8      	ldr	r0, [r7, #12]
90003a08:	f000 f81b 	bl	90003a42 <_ZN6BMP28012spiReadWriteEh>
	while (length--)
90003a0c:	7abb      	ldrb	r3, [r7, #10]
90003a0e:	1e5a      	subs	r2, r3, #1
90003a10:	72ba      	strb	r2, [r7, #10]
90003a12:	2b00      	cmp	r3, #0
90003a14:	bf14      	ite	ne
90003a16:	2301      	movne	r3, #1
90003a18:	2300      	moveq	r3, #0
90003a1a:	b2db      	uxtb	r3, r3
90003a1c:	2b00      	cmp	r3, #0
90003a1e:	d009      	beq.n	90003a34 <_ZN6BMP28014readMBRegisterEhPhh+0x4c>
	{
		*values++ = spiReadWrite(0);
90003a20:	687c      	ldr	r4, [r7, #4]
90003a22:	1c63      	adds	r3, r4, #1
90003a24:	607b      	str	r3, [r7, #4]
90003a26:	2100      	movs	r1, #0
90003a28:	68f8      	ldr	r0, [r7, #12]
90003a2a:	f000 f80a 	bl	90003a42 <_ZN6BMP28012spiReadWriteEh>
90003a2e:	4603      	mov	r3, r0
90003a30:	7023      	strb	r3, [r4, #0]
	while (length--)
90003a32:	e7eb      	b.n	90003a0c <_ZN6BMP28014readMBRegisterEhPhh+0x24>
	}
	spiCSNhigh();
90003a34:	68f8      	ldr	r0, [r7, #12]
90003a36:	f000 f81f 	bl	90003a78 <_ZN6BMP28010spiCSNhighEv>
}
90003a3a:	bf00      	nop
90003a3c:	3714      	adds	r7, #20
90003a3e:	46bd      	mov	sp, r7
90003a40:	bd90      	pop	{r4, r7, pc}

90003a42 <_ZN6BMP28012spiReadWriteEh>:
 * SPI transmit and receive one byte simultaneously
 * @param tx_message: Transmit byte.
 * @return Received byte.
 * */
uint8_t BMP280::spiReadWrite(uint8_t tx_message)
{
90003a42:	b580      	push	{r7, lr}
90003a44:	b086      	sub	sp, #24
90003a46:	af02      	add	r7, sp, #8
90003a48:	6078      	str	r0, [r7, #4]
90003a4a:	460b      	mov	r3, r1
90003a4c:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_message = 255;
90003a4e:	23ff      	movs	r3, #255	; 0xff
90003a50:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(this->spiHandle, &tx_message, &rx_message, 1,
90003a52:	687b      	ldr	r3, [r7, #4]
90003a54:	68d8      	ldr	r0, [r3, #12]
90003a56:	f107 020e 	add.w	r2, r7, #14
90003a5a:	1cf9      	adds	r1, r7, #3
90003a5c:	f04f 33ff 	mov.w	r3, #4294967295
90003a60:	9300      	str	r3, [sp, #0]
90003a62:	2301      	movs	r3, #1
90003a64:	f007 f814 	bl	9000aa90 <HAL_SPI_TransmitReceive>
90003a68:	4603      	mov	r3, r0
90003a6a:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	return rx_message;
90003a6c:	7bbb      	ldrb	r3, [r7, #14]
}
90003a6e:	4618      	mov	r0, r3
90003a70:	3710      	adds	r7, #16
90003a72:	46bd      	mov	sp, r7
90003a74:	bd80      	pop	{r7, pc}
	...

90003a78 <_ZN6BMP28010spiCSNhighEv>:

/** Pull chip select high (inactive) */
void BMP280::spiCSNhigh()
{
90003a78:	b580      	push	{r7, lr}
90003a7a:	b082      	sub	sp, #8
90003a7c:	af00      	add	r7, sp, #0
90003a7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_SET);
90003a80:	2201      	movs	r2, #1
90003a82:	2110      	movs	r1, #16
90003a84:	4803      	ldr	r0, [pc, #12]	; (90003a94 <_ZN6BMP28010spiCSNhighEv+0x1c>)
90003a86:	f003 fadd 	bl	90007044 <HAL_GPIO_WritePin>
}
90003a8a:	bf00      	nop
90003a8c:	3708      	adds	r7, #8
90003a8e:	46bd      	mov	sp, r7
90003a90:	bd80      	pop	{r7, pc}
90003a92:	bf00      	nop
90003a94:	58020000 	.word	0x58020000

90003a98 <_ZN6BMP2809spiCSNlowEv>:

/** Pull chip select low (active) */
void BMP280::spiCSNlow()
{
90003a98:	b580      	push	{r7, lr}
90003a9a:	b082      	sub	sp, #8
90003a9c:	af00      	add	r7, sp, #0
90003a9e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BMP280_CSN_GPIO_Port, BMP280_CSN_Pin, GPIO_PIN_RESET);
90003aa0:	2200      	movs	r2, #0
90003aa2:	2110      	movs	r1, #16
90003aa4:	4803      	ldr	r0, [pc, #12]	; (90003ab4 <_ZN6BMP2809spiCSNlowEv+0x1c>)
90003aa6:	f003 facd 	bl	90007044 <HAL_GPIO_WritePin>
}
90003aaa:	bf00      	nop
90003aac:	3708      	adds	r7, #8
90003aae:	46bd      	mov	sp, r7
90003ab0:	bd80      	pop	{r7, pc}
90003ab2:	bf00      	nop
90003ab4:	58020000 	.word	0x58020000

90003ab8 <_ZN6BMP2808delay_msEm>:

/** Millisecond Delay */
void BMP280::delay_ms(uint32_t milliseconds)
{
90003ab8:	b580      	push	{r7, lr}
90003aba:	b082      	sub	sp, #8
90003abc:	af00      	add	r7, sp, #0
90003abe:	6078      	str	r0, [r7, #4]
90003ac0:	6039      	str	r1, [r7, #0]
	bmp_delay(milliseconds);
90003ac2:	6838      	ldr	r0, [r7, #0]
90003ac4:	f7ff ff4a 	bl	9000395c <_Z9bmp_delaym>
}
90003ac8:	bf00      	nop
90003aca:	3708      	adds	r7, #8
90003acc:	46bd      	mov	sp, r7
90003ace:	bd80      	pop	{r7, pc}

90003ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90003ad0:	b580      	push	{r7, lr}
90003ad2:	b082      	sub	sp, #8
90003ad4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90003ad6:	2003      	movs	r0, #3
90003ad8:	f000 f90f 	bl	90003cfa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90003adc:	f005 f952 	bl	90008d84 <HAL_RCC_GetSysClockFreq>
90003ae0:	4602      	mov	r2, r0
90003ae2:	4b15      	ldr	r3, [pc, #84]	; (90003b38 <HAL_Init+0x68>)
90003ae4:	699b      	ldr	r3, [r3, #24]
90003ae6:	0a1b      	lsrs	r3, r3, #8
90003ae8:	f003 030f 	and.w	r3, r3, #15
90003aec:	4913      	ldr	r1, [pc, #76]	; (90003b3c <HAL_Init+0x6c>)
90003aee:	5ccb      	ldrb	r3, [r1, r3]
90003af0:	f003 031f 	and.w	r3, r3, #31
90003af4:	fa22 f303 	lsr.w	r3, r2, r3
90003af8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90003afa:	4b0f      	ldr	r3, [pc, #60]	; (90003b38 <HAL_Init+0x68>)
90003afc:	699b      	ldr	r3, [r3, #24]
90003afe:	f003 030f 	and.w	r3, r3, #15
90003b02:	4a0e      	ldr	r2, [pc, #56]	; (90003b3c <HAL_Init+0x6c>)
90003b04:	5cd3      	ldrb	r3, [r2, r3]
90003b06:	f003 031f 	and.w	r3, r3, #31
90003b0a:	687a      	ldr	r2, [r7, #4]
90003b0c:	fa22 f303 	lsr.w	r3, r2, r3
90003b10:	4a0b      	ldr	r2, [pc, #44]	; (90003b40 <HAL_Init+0x70>)
90003b12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003b14:	4a0b      	ldr	r2, [pc, #44]	; (90003b44 <HAL_Init+0x74>)
90003b16:	687b      	ldr	r3, [r7, #4]
90003b18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90003b1a:	200f      	movs	r0, #15
90003b1c:	f7fe f8ca 	bl	90001cb4 <HAL_InitTick>
90003b20:	4603      	mov	r3, r0
90003b22:	2b00      	cmp	r3, #0
90003b24:	d001      	beq.n	90003b2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90003b26:	2301      	movs	r3, #1
90003b28:	e002      	b.n	90003b30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90003b2a:	f7fe f8a5 	bl	90001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90003b2e:	2300      	movs	r3, #0
}
90003b30:	4618      	mov	r0, r3
90003b32:	3708      	adds	r7, #8
90003b34:	46bd      	mov	sp, r7
90003b36:	bd80      	pop	{r7, pc}
90003b38:	58024400 	.word	0x58024400
90003b3c:	90013ef0 	.word	0x90013ef0
90003b40:	24000030 	.word	0x24000030
90003b44:	2400002c 	.word	0x2400002c

90003b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90003b48:	b480      	push	{r7}
90003b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90003b4c:	4b06      	ldr	r3, [pc, #24]	; (90003b68 <HAL_IncTick+0x20>)
90003b4e:	781b      	ldrb	r3, [r3, #0]
90003b50:	461a      	mov	r2, r3
90003b52:	4b06      	ldr	r3, [pc, #24]	; (90003b6c <HAL_IncTick+0x24>)
90003b54:	681b      	ldr	r3, [r3, #0]
90003b56:	4413      	add	r3, r2
90003b58:	4a04      	ldr	r2, [pc, #16]	; (90003b6c <HAL_IncTick+0x24>)
90003b5a:	6013      	str	r3, [r2, #0]
}
90003b5c:	bf00      	nop
90003b5e:	46bd      	mov	sp, r7
90003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b64:	4770      	bx	lr
90003b66:	bf00      	nop
90003b68:	24000038 	.word	0x24000038
90003b6c:	24000e24 	.word	0x24000e24

90003b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90003b70:	b480      	push	{r7}
90003b72:	af00      	add	r7, sp, #0
  return uwTick;
90003b74:	4b03      	ldr	r3, [pc, #12]	; (90003b84 <HAL_GetTick+0x14>)
90003b76:	681b      	ldr	r3, [r3, #0]
}
90003b78:	4618      	mov	r0, r3
90003b7a:	46bd      	mov	sp, r7
90003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b80:	4770      	bx	lr
90003b82:	bf00      	nop
90003b84:	24000e24 	.word	0x24000e24

90003b88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90003b88:	b480      	push	{r7}
90003b8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90003b8c:	4b03      	ldr	r3, [pc, #12]	; (90003b9c <HAL_GetREVID+0x14>)
90003b8e:	681b      	ldr	r3, [r3, #0]
90003b90:	0c1b      	lsrs	r3, r3, #16
}
90003b92:	4618      	mov	r0, r3
90003b94:	46bd      	mov	sp, r7
90003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b9a:	4770      	bx	lr
90003b9c:	5c001000 	.word	0x5c001000

90003ba0 <__NVIC_SetPriorityGrouping>:
{
90003ba0:	b480      	push	{r7}
90003ba2:	b085      	sub	sp, #20
90003ba4:	af00      	add	r7, sp, #0
90003ba6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003ba8:	687b      	ldr	r3, [r7, #4]
90003baa:	f003 0307 	and.w	r3, r3, #7
90003bae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003bb0:	4b0b      	ldr	r3, [pc, #44]	; (90003be0 <__NVIC_SetPriorityGrouping+0x40>)
90003bb2:	68db      	ldr	r3, [r3, #12]
90003bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90003bb6:	68ba      	ldr	r2, [r7, #8]
90003bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90003bbc:	4013      	ands	r3, r2
90003bbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003bc0:	68fb      	ldr	r3, [r7, #12]
90003bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90003bc4:	68bb      	ldr	r3, [r7, #8]
90003bc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003bc8:	4b06      	ldr	r3, [pc, #24]	; (90003be4 <__NVIC_SetPriorityGrouping+0x44>)
90003bca:	4313      	orrs	r3, r2
90003bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90003bce:	4a04      	ldr	r2, [pc, #16]	; (90003be0 <__NVIC_SetPriorityGrouping+0x40>)
90003bd0:	68bb      	ldr	r3, [r7, #8]
90003bd2:	60d3      	str	r3, [r2, #12]
}
90003bd4:	bf00      	nop
90003bd6:	3714      	adds	r7, #20
90003bd8:	46bd      	mov	sp, r7
90003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
90003bde:	4770      	bx	lr
90003be0:	e000ed00 	.word	0xe000ed00
90003be4:	05fa0000 	.word	0x05fa0000

90003be8 <__NVIC_GetPriorityGrouping>:
{
90003be8:	b480      	push	{r7}
90003bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003bec:	4b04      	ldr	r3, [pc, #16]	; (90003c00 <__NVIC_GetPriorityGrouping+0x18>)
90003bee:	68db      	ldr	r3, [r3, #12]
90003bf0:	0a1b      	lsrs	r3, r3, #8
90003bf2:	f003 0307 	and.w	r3, r3, #7
}
90003bf6:	4618      	mov	r0, r3
90003bf8:	46bd      	mov	sp, r7
90003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
90003bfe:	4770      	bx	lr
90003c00:	e000ed00 	.word	0xe000ed00

90003c04 <__NVIC_EnableIRQ>:
{
90003c04:	b480      	push	{r7}
90003c06:	b083      	sub	sp, #12
90003c08:	af00      	add	r7, sp, #0
90003c0a:	4603      	mov	r3, r0
90003c0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003c12:	2b00      	cmp	r3, #0
90003c14:	db0b      	blt.n	90003c2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90003c16:	88fb      	ldrh	r3, [r7, #6]
90003c18:	f003 021f 	and.w	r2, r3, #31
90003c1c:	4907      	ldr	r1, [pc, #28]	; (90003c3c <__NVIC_EnableIRQ+0x38>)
90003c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003c22:	095b      	lsrs	r3, r3, #5
90003c24:	2001      	movs	r0, #1
90003c26:	fa00 f202 	lsl.w	r2, r0, r2
90003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90003c2e:	bf00      	nop
90003c30:	370c      	adds	r7, #12
90003c32:	46bd      	mov	sp, r7
90003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
90003c38:	4770      	bx	lr
90003c3a:	bf00      	nop
90003c3c:	e000e100 	.word	0xe000e100

90003c40 <__NVIC_SetPriority>:
{
90003c40:	b480      	push	{r7}
90003c42:	b083      	sub	sp, #12
90003c44:	af00      	add	r7, sp, #0
90003c46:	4603      	mov	r3, r0
90003c48:	6039      	str	r1, [r7, #0]
90003c4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003c50:	2b00      	cmp	r3, #0
90003c52:	db0a      	blt.n	90003c6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003c54:	683b      	ldr	r3, [r7, #0]
90003c56:	b2da      	uxtb	r2, r3
90003c58:	490c      	ldr	r1, [pc, #48]	; (90003c8c <__NVIC_SetPriority+0x4c>)
90003c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003c5e:	0112      	lsls	r2, r2, #4
90003c60:	b2d2      	uxtb	r2, r2
90003c62:	440b      	add	r3, r1
90003c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
90003c68:	e00a      	b.n	90003c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90003c6a:	683b      	ldr	r3, [r7, #0]
90003c6c:	b2da      	uxtb	r2, r3
90003c6e:	4908      	ldr	r1, [pc, #32]	; (90003c90 <__NVIC_SetPriority+0x50>)
90003c70:	88fb      	ldrh	r3, [r7, #6]
90003c72:	f003 030f 	and.w	r3, r3, #15
90003c76:	3b04      	subs	r3, #4
90003c78:	0112      	lsls	r2, r2, #4
90003c7a:	b2d2      	uxtb	r2, r2
90003c7c:	440b      	add	r3, r1
90003c7e:	761a      	strb	r2, [r3, #24]
}
90003c80:	bf00      	nop
90003c82:	370c      	adds	r7, #12
90003c84:	46bd      	mov	sp, r7
90003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
90003c8a:	4770      	bx	lr
90003c8c:	e000e100 	.word	0xe000e100
90003c90:	e000ed00 	.word	0xe000ed00

90003c94 <NVIC_EncodePriority>:
{
90003c94:	b480      	push	{r7}
90003c96:	b089      	sub	sp, #36	; 0x24
90003c98:	af00      	add	r7, sp, #0
90003c9a:	60f8      	str	r0, [r7, #12]
90003c9c:	60b9      	str	r1, [r7, #8]
90003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003ca0:	68fb      	ldr	r3, [r7, #12]
90003ca2:	f003 0307 	and.w	r3, r3, #7
90003ca6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003ca8:	69fb      	ldr	r3, [r7, #28]
90003caa:	f1c3 0307 	rsb	r3, r3, #7
90003cae:	2b04      	cmp	r3, #4
90003cb0:	bf28      	it	cs
90003cb2:	2304      	movcs	r3, #4
90003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90003cb6:	69fb      	ldr	r3, [r7, #28]
90003cb8:	3304      	adds	r3, #4
90003cba:	2b06      	cmp	r3, #6
90003cbc:	d902      	bls.n	90003cc4 <NVIC_EncodePriority+0x30>
90003cbe:	69fb      	ldr	r3, [r7, #28]
90003cc0:	3b03      	subs	r3, #3
90003cc2:	e000      	b.n	90003cc6 <NVIC_EncodePriority+0x32>
90003cc4:	2300      	movs	r3, #0
90003cc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003cc8:	f04f 32ff 	mov.w	r2, #4294967295
90003ccc:	69bb      	ldr	r3, [r7, #24]
90003cce:	fa02 f303 	lsl.w	r3, r2, r3
90003cd2:	43da      	mvns	r2, r3
90003cd4:	68bb      	ldr	r3, [r7, #8]
90003cd6:	401a      	ands	r2, r3
90003cd8:	697b      	ldr	r3, [r7, #20]
90003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003cdc:	f04f 31ff 	mov.w	r1, #4294967295
90003ce0:	697b      	ldr	r3, [r7, #20]
90003ce2:	fa01 f303 	lsl.w	r3, r1, r3
90003ce6:	43d9      	mvns	r1, r3
90003ce8:	687b      	ldr	r3, [r7, #4]
90003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003cec:	4313      	orrs	r3, r2
}
90003cee:	4618      	mov	r0, r3
90003cf0:	3724      	adds	r7, #36	; 0x24
90003cf2:	46bd      	mov	sp, r7
90003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
90003cf8:	4770      	bx	lr

90003cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90003cfa:	b580      	push	{r7, lr}
90003cfc:	b082      	sub	sp, #8
90003cfe:	af00      	add	r7, sp, #0
90003d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90003d02:	6878      	ldr	r0, [r7, #4]
90003d04:	f7ff ff4c 	bl	90003ba0 <__NVIC_SetPriorityGrouping>
}
90003d08:	bf00      	nop
90003d0a:	3708      	adds	r7, #8
90003d0c:	46bd      	mov	sp, r7
90003d0e:	bd80      	pop	{r7, pc}

90003d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90003d10:	b580      	push	{r7, lr}
90003d12:	b086      	sub	sp, #24
90003d14:	af00      	add	r7, sp, #0
90003d16:	4603      	mov	r3, r0
90003d18:	60b9      	str	r1, [r7, #8]
90003d1a:	607a      	str	r2, [r7, #4]
90003d1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90003d1e:	f7ff ff63 	bl	90003be8 <__NVIC_GetPriorityGrouping>
90003d22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90003d24:	687a      	ldr	r2, [r7, #4]
90003d26:	68b9      	ldr	r1, [r7, #8]
90003d28:	6978      	ldr	r0, [r7, #20]
90003d2a:	f7ff ffb3 	bl	90003c94 <NVIC_EncodePriority>
90003d2e:	4602      	mov	r2, r0
90003d30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003d34:	4611      	mov	r1, r2
90003d36:	4618      	mov	r0, r3
90003d38:	f7ff ff82 	bl	90003c40 <__NVIC_SetPriority>
}
90003d3c:	bf00      	nop
90003d3e:	3718      	adds	r7, #24
90003d40:	46bd      	mov	sp, r7
90003d42:	bd80      	pop	{r7, pc}

90003d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003d44:	b580      	push	{r7, lr}
90003d46:	b082      	sub	sp, #8
90003d48:	af00      	add	r7, sp, #0
90003d4a:	4603      	mov	r3, r0
90003d4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
90003d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003d52:	4618      	mov	r0, r3
90003d54:	f7ff ff56 	bl	90003c04 <__NVIC_EnableIRQ>
}
90003d58:	bf00      	nop
90003d5a:	3708      	adds	r7, #8
90003d5c:	46bd      	mov	sp, r7
90003d5e:	bd80      	pop	{r7, pc}

90003d60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003d60:	b480      	push	{r7}
90003d62:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90003d64:	f3bf 8f5f 	dmb	sy
}
90003d68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003d6a:	4b07      	ldr	r3, [pc, #28]	; (90003d88 <HAL_MPU_Disable+0x28>)
90003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003d6e:	4a06      	ldr	r2, [pc, #24]	; (90003d88 <HAL_MPU_Disable+0x28>)
90003d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90003d74:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90003d76:	4b05      	ldr	r3, [pc, #20]	; (90003d8c <HAL_MPU_Disable+0x2c>)
90003d78:	2200      	movs	r2, #0
90003d7a:	605a      	str	r2, [r3, #4]
}
90003d7c:	bf00      	nop
90003d7e:	46bd      	mov	sp, r7
90003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d84:	4770      	bx	lr
90003d86:	bf00      	nop
90003d88:	e000ed00 	.word	0xe000ed00
90003d8c:	e000ed90 	.word	0xe000ed90

90003d90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003d90:	b480      	push	{r7}
90003d92:	b083      	sub	sp, #12
90003d94:	af00      	add	r7, sp, #0
90003d96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003d98:	4a0b      	ldr	r2, [pc, #44]	; (90003dc8 <HAL_MPU_Enable+0x38>)
90003d9a:	687b      	ldr	r3, [r7, #4]
90003d9c:	f043 0301 	orr.w	r3, r3, #1
90003da0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90003da2:	4b0a      	ldr	r3, [pc, #40]	; (90003dcc <HAL_MPU_Enable+0x3c>)
90003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003da6:	4a09      	ldr	r2, [pc, #36]	; (90003dcc <HAL_MPU_Enable+0x3c>)
90003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003dac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003dae:	f3bf 8f4f 	dsb	sy
}
90003db2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90003db4:	f3bf 8f6f 	isb	sy
}
90003db8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90003dba:	bf00      	nop
90003dbc:	370c      	adds	r7, #12
90003dbe:	46bd      	mov	sp, r7
90003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
90003dc4:	4770      	bx	lr
90003dc6:	bf00      	nop
90003dc8:	e000ed90 	.word	0xe000ed90
90003dcc:	e000ed00 	.word	0xe000ed00

90003dd0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
90003dd0:	b480      	push	{r7}
90003dd2:	b083      	sub	sp, #12
90003dd4:	af00      	add	r7, sp, #0
90003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90003dd8:	687b      	ldr	r3, [r7, #4]
90003dda:	785a      	ldrb	r2, [r3, #1]
90003ddc:	4b1d      	ldr	r3, [pc, #116]	; (90003e54 <HAL_MPU_ConfigRegion+0x84>)
90003dde:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
90003de0:	687b      	ldr	r3, [r7, #4]
90003de2:	781b      	ldrb	r3, [r3, #0]
90003de4:	2b00      	cmp	r3, #0
90003de6:	d029      	beq.n	90003e3c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90003de8:	4a1a      	ldr	r2, [pc, #104]	; (90003e54 <HAL_MPU_ConfigRegion+0x84>)
90003dea:	687b      	ldr	r3, [r7, #4]
90003dec:	685b      	ldr	r3, [r3, #4]
90003dee:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003df0:	687b      	ldr	r3, [r7, #4]
90003df2:	7b1b      	ldrb	r3, [r3, #12]
90003df4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003df6:	687b      	ldr	r3, [r7, #4]
90003df8:	7adb      	ldrb	r3, [r3, #11]
90003dfa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003dfc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003dfe:	687b      	ldr	r3, [r7, #4]
90003e00:	7a9b      	ldrb	r3, [r3, #10]
90003e02:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90003e04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003e06:	687b      	ldr	r3, [r7, #4]
90003e08:	7b5b      	ldrb	r3, [r3, #13]
90003e0a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90003e0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003e0e:	687b      	ldr	r3, [r7, #4]
90003e10:	7b9b      	ldrb	r3, [r3, #14]
90003e12:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90003e14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003e16:	687b      	ldr	r3, [r7, #4]
90003e18:	7bdb      	ldrb	r3, [r3, #15]
90003e1a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003e1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003e1e:	687b      	ldr	r3, [r7, #4]
90003e20:	7a5b      	ldrb	r3, [r3, #9]
90003e22:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90003e24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003e26:	687b      	ldr	r3, [r7, #4]
90003e28:	7a1b      	ldrb	r3, [r3, #8]
90003e2a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003e2c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90003e2e:	687a      	ldr	r2, [r7, #4]
90003e30:	7812      	ldrb	r2, [r2, #0]
90003e32:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003e34:	4a07      	ldr	r2, [pc, #28]	; (90003e54 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90003e36:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003e38:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90003e3a:	e005      	b.n	90003e48 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
90003e3c:	4b05      	ldr	r3, [pc, #20]	; (90003e54 <HAL_MPU_ConfigRegion+0x84>)
90003e3e:	2200      	movs	r2, #0
90003e40:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
90003e42:	4b04      	ldr	r3, [pc, #16]	; (90003e54 <HAL_MPU_ConfigRegion+0x84>)
90003e44:	2200      	movs	r2, #0
90003e46:	611a      	str	r2, [r3, #16]
}
90003e48:	bf00      	nop
90003e4a:	370c      	adds	r7, #12
90003e4c:	46bd      	mov	sp, r7
90003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003e52:	4770      	bx	lr
90003e54:	e000ed90 	.word	0xe000ed90

90003e58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
90003e58:	b580      	push	{r7, lr}
90003e5a:	b086      	sub	sp, #24
90003e5c:	af00      	add	r7, sp, #0
90003e5e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
90003e60:	f7ff fe86 	bl	90003b70 <HAL_GetTick>
90003e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
90003e66:	687b      	ldr	r3, [r7, #4]
90003e68:	2b00      	cmp	r3, #0
90003e6a:	d101      	bne.n	90003e70 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
90003e6c:	2301      	movs	r3, #1
90003e6e:	e316      	b.n	9000449e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90003e70:	687b      	ldr	r3, [r7, #4]
90003e72:	681b      	ldr	r3, [r3, #0]
90003e74:	4a66      	ldr	r2, [pc, #408]	; (90004010 <HAL_DMA_Init+0x1b8>)
90003e76:	4293      	cmp	r3, r2
90003e78:	d04a      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003e7a:	687b      	ldr	r3, [r7, #4]
90003e7c:	681b      	ldr	r3, [r3, #0]
90003e7e:	4a65      	ldr	r2, [pc, #404]	; (90004014 <HAL_DMA_Init+0x1bc>)
90003e80:	4293      	cmp	r3, r2
90003e82:	d045      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003e84:	687b      	ldr	r3, [r7, #4]
90003e86:	681b      	ldr	r3, [r3, #0]
90003e88:	4a63      	ldr	r2, [pc, #396]	; (90004018 <HAL_DMA_Init+0x1c0>)
90003e8a:	4293      	cmp	r3, r2
90003e8c:	d040      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003e8e:	687b      	ldr	r3, [r7, #4]
90003e90:	681b      	ldr	r3, [r3, #0]
90003e92:	4a62      	ldr	r2, [pc, #392]	; (9000401c <HAL_DMA_Init+0x1c4>)
90003e94:	4293      	cmp	r3, r2
90003e96:	d03b      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003e98:	687b      	ldr	r3, [r7, #4]
90003e9a:	681b      	ldr	r3, [r3, #0]
90003e9c:	4a60      	ldr	r2, [pc, #384]	; (90004020 <HAL_DMA_Init+0x1c8>)
90003e9e:	4293      	cmp	r3, r2
90003ea0:	d036      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003ea2:	687b      	ldr	r3, [r7, #4]
90003ea4:	681b      	ldr	r3, [r3, #0]
90003ea6:	4a5f      	ldr	r2, [pc, #380]	; (90004024 <HAL_DMA_Init+0x1cc>)
90003ea8:	4293      	cmp	r3, r2
90003eaa:	d031      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003eac:	687b      	ldr	r3, [r7, #4]
90003eae:	681b      	ldr	r3, [r3, #0]
90003eb0:	4a5d      	ldr	r2, [pc, #372]	; (90004028 <HAL_DMA_Init+0x1d0>)
90003eb2:	4293      	cmp	r3, r2
90003eb4:	d02c      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003eb6:	687b      	ldr	r3, [r7, #4]
90003eb8:	681b      	ldr	r3, [r3, #0]
90003eba:	4a5c      	ldr	r2, [pc, #368]	; (9000402c <HAL_DMA_Init+0x1d4>)
90003ebc:	4293      	cmp	r3, r2
90003ebe:	d027      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003ec0:	687b      	ldr	r3, [r7, #4]
90003ec2:	681b      	ldr	r3, [r3, #0]
90003ec4:	4a5a      	ldr	r2, [pc, #360]	; (90004030 <HAL_DMA_Init+0x1d8>)
90003ec6:	4293      	cmp	r3, r2
90003ec8:	d022      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003eca:	687b      	ldr	r3, [r7, #4]
90003ecc:	681b      	ldr	r3, [r3, #0]
90003ece:	4a59      	ldr	r2, [pc, #356]	; (90004034 <HAL_DMA_Init+0x1dc>)
90003ed0:	4293      	cmp	r3, r2
90003ed2:	d01d      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003ed4:	687b      	ldr	r3, [r7, #4]
90003ed6:	681b      	ldr	r3, [r3, #0]
90003ed8:	4a57      	ldr	r2, [pc, #348]	; (90004038 <HAL_DMA_Init+0x1e0>)
90003eda:	4293      	cmp	r3, r2
90003edc:	d018      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003ede:	687b      	ldr	r3, [r7, #4]
90003ee0:	681b      	ldr	r3, [r3, #0]
90003ee2:	4a56      	ldr	r2, [pc, #344]	; (9000403c <HAL_DMA_Init+0x1e4>)
90003ee4:	4293      	cmp	r3, r2
90003ee6:	d013      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003ee8:	687b      	ldr	r3, [r7, #4]
90003eea:	681b      	ldr	r3, [r3, #0]
90003eec:	4a54      	ldr	r2, [pc, #336]	; (90004040 <HAL_DMA_Init+0x1e8>)
90003eee:	4293      	cmp	r3, r2
90003ef0:	d00e      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003ef2:	687b      	ldr	r3, [r7, #4]
90003ef4:	681b      	ldr	r3, [r3, #0]
90003ef6:	4a53      	ldr	r2, [pc, #332]	; (90004044 <HAL_DMA_Init+0x1ec>)
90003ef8:	4293      	cmp	r3, r2
90003efa:	d009      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003efc:	687b      	ldr	r3, [r7, #4]
90003efe:	681b      	ldr	r3, [r3, #0]
90003f00:	4a51      	ldr	r2, [pc, #324]	; (90004048 <HAL_DMA_Init+0x1f0>)
90003f02:	4293      	cmp	r3, r2
90003f04:	d004      	beq.n	90003f10 <HAL_DMA_Init+0xb8>
90003f06:	687b      	ldr	r3, [r7, #4]
90003f08:	681b      	ldr	r3, [r3, #0]
90003f0a:	4a50      	ldr	r2, [pc, #320]	; (9000404c <HAL_DMA_Init+0x1f4>)
90003f0c:	4293      	cmp	r3, r2
90003f0e:	d101      	bne.n	90003f14 <HAL_DMA_Init+0xbc>
90003f10:	2301      	movs	r3, #1
90003f12:	e000      	b.n	90003f16 <HAL_DMA_Init+0xbe>
90003f14:	2300      	movs	r3, #0
90003f16:	2b00      	cmp	r3, #0
90003f18:	f000 813b 	beq.w	90004192 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
90003f1c:	687b      	ldr	r3, [r7, #4]
90003f1e:	2202      	movs	r2, #2
90003f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
90003f24:	687b      	ldr	r3, [r7, #4]
90003f26:	2200      	movs	r2, #0
90003f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
90003f2c:	687b      	ldr	r3, [r7, #4]
90003f2e:	681b      	ldr	r3, [r3, #0]
90003f30:	4a37      	ldr	r2, [pc, #220]	; (90004010 <HAL_DMA_Init+0x1b8>)
90003f32:	4293      	cmp	r3, r2
90003f34:	d04a      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f36:	687b      	ldr	r3, [r7, #4]
90003f38:	681b      	ldr	r3, [r3, #0]
90003f3a:	4a36      	ldr	r2, [pc, #216]	; (90004014 <HAL_DMA_Init+0x1bc>)
90003f3c:	4293      	cmp	r3, r2
90003f3e:	d045      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f40:	687b      	ldr	r3, [r7, #4]
90003f42:	681b      	ldr	r3, [r3, #0]
90003f44:	4a34      	ldr	r2, [pc, #208]	; (90004018 <HAL_DMA_Init+0x1c0>)
90003f46:	4293      	cmp	r3, r2
90003f48:	d040      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f4a:	687b      	ldr	r3, [r7, #4]
90003f4c:	681b      	ldr	r3, [r3, #0]
90003f4e:	4a33      	ldr	r2, [pc, #204]	; (9000401c <HAL_DMA_Init+0x1c4>)
90003f50:	4293      	cmp	r3, r2
90003f52:	d03b      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f54:	687b      	ldr	r3, [r7, #4]
90003f56:	681b      	ldr	r3, [r3, #0]
90003f58:	4a31      	ldr	r2, [pc, #196]	; (90004020 <HAL_DMA_Init+0x1c8>)
90003f5a:	4293      	cmp	r3, r2
90003f5c:	d036      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f5e:	687b      	ldr	r3, [r7, #4]
90003f60:	681b      	ldr	r3, [r3, #0]
90003f62:	4a30      	ldr	r2, [pc, #192]	; (90004024 <HAL_DMA_Init+0x1cc>)
90003f64:	4293      	cmp	r3, r2
90003f66:	d031      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f68:	687b      	ldr	r3, [r7, #4]
90003f6a:	681b      	ldr	r3, [r3, #0]
90003f6c:	4a2e      	ldr	r2, [pc, #184]	; (90004028 <HAL_DMA_Init+0x1d0>)
90003f6e:	4293      	cmp	r3, r2
90003f70:	d02c      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f72:	687b      	ldr	r3, [r7, #4]
90003f74:	681b      	ldr	r3, [r3, #0]
90003f76:	4a2d      	ldr	r2, [pc, #180]	; (9000402c <HAL_DMA_Init+0x1d4>)
90003f78:	4293      	cmp	r3, r2
90003f7a:	d027      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f7c:	687b      	ldr	r3, [r7, #4]
90003f7e:	681b      	ldr	r3, [r3, #0]
90003f80:	4a2b      	ldr	r2, [pc, #172]	; (90004030 <HAL_DMA_Init+0x1d8>)
90003f82:	4293      	cmp	r3, r2
90003f84:	d022      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f86:	687b      	ldr	r3, [r7, #4]
90003f88:	681b      	ldr	r3, [r3, #0]
90003f8a:	4a2a      	ldr	r2, [pc, #168]	; (90004034 <HAL_DMA_Init+0x1dc>)
90003f8c:	4293      	cmp	r3, r2
90003f8e:	d01d      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f90:	687b      	ldr	r3, [r7, #4]
90003f92:	681b      	ldr	r3, [r3, #0]
90003f94:	4a28      	ldr	r2, [pc, #160]	; (90004038 <HAL_DMA_Init+0x1e0>)
90003f96:	4293      	cmp	r3, r2
90003f98:	d018      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003f9a:	687b      	ldr	r3, [r7, #4]
90003f9c:	681b      	ldr	r3, [r3, #0]
90003f9e:	4a27      	ldr	r2, [pc, #156]	; (9000403c <HAL_DMA_Init+0x1e4>)
90003fa0:	4293      	cmp	r3, r2
90003fa2:	d013      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003fa4:	687b      	ldr	r3, [r7, #4]
90003fa6:	681b      	ldr	r3, [r3, #0]
90003fa8:	4a25      	ldr	r2, [pc, #148]	; (90004040 <HAL_DMA_Init+0x1e8>)
90003faa:	4293      	cmp	r3, r2
90003fac:	d00e      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003fae:	687b      	ldr	r3, [r7, #4]
90003fb0:	681b      	ldr	r3, [r3, #0]
90003fb2:	4a24      	ldr	r2, [pc, #144]	; (90004044 <HAL_DMA_Init+0x1ec>)
90003fb4:	4293      	cmp	r3, r2
90003fb6:	d009      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003fb8:	687b      	ldr	r3, [r7, #4]
90003fba:	681b      	ldr	r3, [r3, #0]
90003fbc:	4a22      	ldr	r2, [pc, #136]	; (90004048 <HAL_DMA_Init+0x1f0>)
90003fbe:	4293      	cmp	r3, r2
90003fc0:	d004      	beq.n	90003fcc <HAL_DMA_Init+0x174>
90003fc2:	687b      	ldr	r3, [r7, #4]
90003fc4:	681b      	ldr	r3, [r3, #0]
90003fc6:	4a21      	ldr	r2, [pc, #132]	; (9000404c <HAL_DMA_Init+0x1f4>)
90003fc8:	4293      	cmp	r3, r2
90003fca:	d108      	bne.n	90003fde <HAL_DMA_Init+0x186>
90003fcc:	687b      	ldr	r3, [r7, #4]
90003fce:	681b      	ldr	r3, [r3, #0]
90003fd0:	681a      	ldr	r2, [r3, #0]
90003fd2:	687b      	ldr	r3, [r7, #4]
90003fd4:	681b      	ldr	r3, [r3, #0]
90003fd6:	f022 0201 	bic.w	r2, r2, #1
90003fda:	601a      	str	r2, [r3, #0]
90003fdc:	e007      	b.n	90003fee <HAL_DMA_Init+0x196>
90003fde:	687b      	ldr	r3, [r7, #4]
90003fe0:	681b      	ldr	r3, [r3, #0]
90003fe2:	681a      	ldr	r2, [r3, #0]
90003fe4:	687b      	ldr	r3, [r7, #4]
90003fe6:	681b      	ldr	r3, [r3, #0]
90003fe8:	f022 0201 	bic.w	r2, r2, #1
90003fec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
90003fee:	e02f      	b.n	90004050 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90003ff0:	f7ff fdbe 	bl	90003b70 <HAL_GetTick>
90003ff4:	4602      	mov	r2, r0
90003ff6:	693b      	ldr	r3, [r7, #16]
90003ff8:	1ad3      	subs	r3, r2, r3
90003ffa:	2b05      	cmp	r3, #5
90003ffc:	d928      	bls.n	90004050 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90003ffe:	687b      	ldr	r3, [r7, #4]
90004000:	2220      	movs	r2, #32
90004002:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
90004004:	687b      	ldr	r3, [r7, #4]
90004006:	2203      	movs	r2, #3
90004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
9000400c:	2301      	movs	r3, #1
9000400e:	e246      	b.n	9000449e <HAL_DMA_Init+0x646>
90004010:	40020010 	.word	0x40020010
90004014:	40020028 	.word	0x40020028
90004018:	40020040 	.word	0x40020040
9000401c:	40020058 	.word	0x40020058
90004020:	40020070 	.word	0x40020070
90004024:	40020088 	.word	0x40020088
90004028:	400200a0 	.word	0x400200a0
9000402c:	400200b8 	.word	0x400200b8
90004030:	40020410 	.word	0x40020410
90004034:	40020428 	.word	0x40020428
90004038:	40020440 	.word	0x40020440
9000403c:	40020458 	.word	0x40020458
90004040:	40020470 	.word	0x40020470
90004044:	40020488 	.word	0x40020488
90004048:	400204a0 	.word	0x400204a0
9000404c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
90004050:	687b      	ldr	r3, [r7, #4]
90004052:	681b      	ldr	r3, [r3, #0]
90004054:	681b      	ldr	r3, [r3, #0]
90004056:	f003 0301 	and.w	r3, r3, #1
9000405a:	2b00      	cmp	r3, #0
9000405c:	d1c8      	bne.n	90003ff0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
9000405e:	687b      	ldr	r3, [r7, #4]
90004060:	681b      	ldr	r3, [r3, #0]
90004062:	681b      	ldr	r3, [r3, #0]
90004064:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
90004066:	697a      	ldr	r2, [r7, #20]
90004068:	4b83      	ldr	r3, [pc, #524]	; (90004278 <HAL_DMA_Init+0x420>)
9000406a:	4013      	ands	r3, r2
9000406c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
9000406e:	687b      	ldr	r3, [r7, #4]
90004070:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90004072:	687b      	ldr	r3, [r7, #4]
90004074:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
90004076:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90004078:	687b      	ldr	r3, [r7, #4]
9000407a:	691b      	ldr	r3, [r3, #16]
9000407c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
9000407e:	687b      	ldr	r3, [r7, #4]
90004080:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
90004082:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
90004084:	687b      	ldr	r3, [r7, #4]
90004086:	699b      	ldr	r3, [r3, #24]
90004088:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
9000408a:	687b      	ldr	r3, [r7, #4]
9000408c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
9000408e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
90004090:	687b      	ldr	r3, [r7, #4]
90004092:	6a1b      	ldr	r3, [r3, #32]
90004094:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
90004096:	697a      	ldr	r2, [r7, #20]
90004098:	4313      	orrs	r3, r2
9000409a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
9000409c:	687b      	ldr	r3, [r7, #4]
9000409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900040a0:	2b04      	cmp	r3, #4
900040a2:	d107      	bne.n	900040b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
900040a4:	687b      	ldr	r3, [r7, #4]
900040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900040a8:	687b      	ldr	r3, [r7, #4]
900040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900040ac:	4313      	orrs	r3, r2
900040ae:	697a      	ldr	r2, [r7, #20]
900040b0:	4313      	orrs	r3, r2
900040b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
900040b4:	4b71      	ldr	r3, [pc, #452]	; (9000427c <HAL_DMA_Init+0x424>)
900040b6:	681a      	ldr	r2, [r3, #0]
900040b8:	4b71      	ldr	r3, [pc, #452]	; (90004280 <HAL_DMA_Init+0x428>)
900040ba:	4013      	ands	r3, r2
900040bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900040c0:	d328      	bcc.n	90004114 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
900040c2:	687b      	ldr	r3, [r7, #4]
900040c4:	685b      	ldr	r3, [r3, #4]
900040c6:	2b28      	cmp	r3, #40	; 0x28
900040c8:	d903      	bls.n	900040d2 <HAL_DMA_Init+0x27a>
900040ca:	687b      	ldr	r3, [r7, #4]
900040cc:	685b      	ldr	r3, [r3, #4]
900040ce:	2b2e      	cmp	r3, #46	; 0x2e
900040d0:	d917      	bls.n	90004102 <HAL_DMA_Init+0x2aa>
900040d2:	687b      	ldr	r3, [r7, #4]
900040d4:	685b      	ldr	r3, [r3, #4]
900040d6:	2b3e      	cmp	r3, #62	; 0x3e
900040d8:	d903      	bls.n	900040e2 <HAL_DMA_Init+0x28a>
900040da:	687b      	ldr	r3, [r7, #4]
900040dc:	685b      	ldr	r3, [r3, #4]
900040de:	2b42      	cmp	r3, #66	; 0x42
900040e0:	d90f      	bls.n	90004102 <HAL_DMA_Init+0x2aa>
900040e2:	687b      	ldr	r3, [r7, #4]
900040e4:	685b      	ldr	r3, [r3, #4]
900040e6:	2b46      	cmp	r3, #70	; 0x46
900040e8:	d903      	bls.n	900040f2 <HAL_DMA_Init+0x29a>
900040ea:	687b      	ldr	r3, [r7, #4]
900040ec:	685b      	ldr	r3, [r3, #4]
900040ee:	2b48      	cmp	r3, #72	; 0x48
900040f0:	d907      	bls.n	90004102 <HAL_DMA_Init+0x2aa>
900040f2:	687b      	ldr	r3, [r7, #4]
900040f4:	685b      	ldr	r3, [r3, #4]
900040f6:	2b4e      	cmp	r3, #78	; 0x4e
900040f8:	d905      	bls.n	90004106 <HAL_DMA_Init+0x2ae>
900040fa:	687b      	ldr	r3, [r7, #4]
900040fc:	685b      	ldr	r3, [r3, #4]
900040fe:	2b52      	cmp	r3, #82	; 0x52
90004100:	d801      	bhi.n	90004106 <HAL_DMA_Init+0x2ae>
90004102:	2301      	movs	r3, #1
90004104:	e000      	b.n	90004108 <HAL_DMA_Init+0x2b0>
90004106:	2300      	movs	r3, #0
90004108:	2b00      	cmp	r3, #0
9000410a:	d003      	beq.n	90004114 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
9000410c:	697b      	ldr	r3, [r7, #20]
9000410e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90004112:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
90004114:	687b      	ldr	r3, [r7, #4]
90004116:	681b      	ldr	r3, [r3, #0]
90004118:	697a      	ldr	r2, [r7, #20]
9000411a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
9000411c:	687b      	ldr	r3, [r7, #4]
9000411e:	681b      	ldr	r3, [r3, #0]
90004120:	695b      	ldr	r3, [r3, #20]
90004122:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
90004124:	697b      	ldr	r3, [r7, #20]
90004126:	f023 0307 	bic.w	r3, r3, #7
9000412a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
9000412c:	687b      	ldr	r3, [r7, #4]
9000412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004130:	697a      	ldr	r2, [r7, #20]
90004132:	4313      	orrs	r3, r2
90004134:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90004136:	687b      	ldr	r3, [r7, #4]
90004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000413a:	2b04      	cmp	r3, #4
9000413c:	d117      	bne.n	9000416e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
9000413e:	687b      	ldr	r3, [r7, #4]
90004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004142:	697a      	ldr	r2, [r7, #20]
90004144:	4313      	orrs	r3, r2
90004146:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90004148:	687b      	ldr	r3, [r7, #4]
9000414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000414c:	2b00      	cmp	r3, #0
9000414e:	d00e      	beq.n	9000416e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
90004150:	6878      	ldr	r0, [r7, #4]
90004152:	f002 fb33 	bl	900067bc <DMA_CheckFifoParam>
90004156:	4603      	mov	r3, r0
90004158:	2b00      	cmp	r3, #0
9000415a:	d008      	beq.n	9000416e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
9000415c:	687b      	ldr	r3, [r7, #4]
9000415e:	2240      	movs	r2, #64	; 0x40
90004160:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
90004162:	687b      	ldr	r3, [r7, #4]
90004164:	2201      	movs	r2, #1
90004166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
9000416a:	2301      	movs	r3, #1
9000416c:	e197      	b.n	9000449e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
9000416e:	687b      	ldr	r3, [r7, #4]
90004170:	681b      	ldr	r3, [r3, #0]
90004172:	697a      	ldr	r2, [r7, #20]
90004174:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90004176:	6878      	ldr	r0, [r7, #4]
90004178:	f002 fa6e 	bl	90006658 <DMA_CalcBaseAndBitshift>
9000417c:	4603      	mov	r3, r0
9000417e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
90004180:	687b      	ldr	r3, [r7, #4]
90004182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90004184:	f003 031f 	and.w	r3, r3, #31
90004188:	223f      	movs	r2, #63	; 0x3f
9000418a:	409a      	lsls	r2, r3
9000418c:	68bb      	ldr	r3, [r7, #8]
9000418e:	609a      	str	r2, [r3, #8]
90004190:	e0cd      	b.n	9000432e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
90004192:	687b      	ldr	r3, [r7, #4]
90004194:	681b      	ldr	r3, [r3, #0]
90004196:	4a3b      	ldr	r2, [pc, #236]	; (90004284 <HAL_DMA_Init+0x42c>)
90004198:	4293      	cmp	r3, r2
9000419a:	d022      	beq.n	900041e2 <HAL_DMA_Init+0x38a>
9000419c:	687b      	ldr	r3, [r7, #4]
9000419e:	681b      	ldr	r3, [r3, #0]
900041a0:	4a39      	ldr	r2, [pc, #228]	; (90004288 <HAL_DMA_Init+0x430>)
900041a2:	4293      	cmp	r3, r2
900041a4:	d01d      	beq.n	900041e2 <HAL_DMA_Init+0x38a>
900041a6:	687b      	ldr	r3, [r7, #4]
900041a8:	681b      	ldr	r3, [r3, #0]
900041aa:	4a38      	ldr	r2, [pc, #224]	; (9000428c <HAL_DMA_Init+0x434>)
900041ac:	4293      	cmp	r3, r2
900041ae:	d018      	beq.n	900041e2 <HAL_DMA_Init+0x38a>
900041b0:	687b      	ldr	r3, [r7, #4]
900041b2:	681b      	ldr	r3, [r3, #0]
900041b4:	4a36      	ldr	r2, [pc, #216]	; (90004290 <HAL_DMA_Init+0x438>)
900041b6:	4293      	cmp	r3, r2
900041b8:	d013      	beq.n	900041e2 <HAL_DMA_Init+0x38a>
900041ba:	687b      	ldr	r3, [r7, #4]
900041bc:	681b      	ldr	r3, [r3, #0]
900041be:	4a35      	ldr	r2, [pc, #212]	; (90004294 <HAL_DMA_Init+0x43c>)
900041c0:	4293      	cmp	r3, r2
900041c2:	d00e      	beq.n	900041e2 <HAL_DMA_Init+0x38a>
900041c4:	687b      	ldr	r3, [r7, #4]
900041c6:	681b      	ldr	r3, [r3, #0]
900041c8:	4a33      	ldr	r2, [pc, #204]	; (90004298 <HAL_DMA_Init+0x440>)
900041ca:	4293      	cmp	r3, r2
900041cc:	d009      	beq.n	900041e2 <HAL_DMA_Init+0x38a>
900041ce:	687b      	ldr	r3, [r7, #4]
900041d0:	681b      	ldr	r3, [r3, #0]
900041d2:	4a32      	ldr	r2, [pc, #200]	; (9000429c <HAL_DMA_Init+0x444>)
900041d4:	4293      	cmp	r3, r2
900041d6:	d004      	beq.n	900041e2 <HAL_DMA_Init+0x38a>
900041d8:	687b      	ldr	r3, [r7, #4]
900041da:	681b      	ldr	r3, [r3, #0]
900041dc:	4a30      	ldr	r2, [pc, #192]	; (900042a0 <HAL_DMA_Init+0x448>)
900041de:	4293      	cmp	r3, r2
900041e0:	d101      	bne.n	900041e6 <HAL_DMA_Init+0x38e>
900041e2:	2301      	movs	r3, #1
900041e4:	e000      	b.n	900041e8 <HAL_DMA_Init+0x390>
900041e6:	2300      	movs	r3, #0
900041e8:	2b00      	cmp	r3, #0
900041ea:	f000 8097 	beq.w	9000431c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
900041ee:	687b      	ldr	r3, [r7, #4]
900041f0:	681b      	ldr	r3, [r3, #0]
900041f2:	4a24      	ldr	r2, [pc, #144]	; (90004284 <HAL_DMA_Init+0x42c>)
900041f4:	4293      	cmp	r3, r2
900041f6:	d021      	beq.n	9000423c <HAL_DMA_Init+0x3e4>
900041f8:	687b      	ldr	r3, [r7, #4]
900041fa:	681b      	ldr	r3, [r3, #0]
900041fc:	4a22      	ldr	r2, [pc, #136]	; (90004288 <HAL_DMA_Init+0x430>)
900041fe:	4293      	cmp	r3, r2
90004200:	d01c      	beq.n	9000423c <HAL_DMA_Init+0x3e4>
90004202:	687b      	ldr	r3, [r7, #4]
90004204:	681b      	ldr	r3, [r3, #0]
90004206:	4a21      	ldr	r2, [pc, #132]	; (9000428c <HAL_DMA_Init+0x434>)
90004208:	4293      	cmp	r3, r2
9000420a:	d017      	beq.n	9000423c <HAL_DMA_Init+0x3e4>
9000420c:	687b      	ldr	r3, [r7, #4]
9000420e:	681b      	ldr	r3, [r3, #0]
90004210:	4a1f      	ldr	r2, [pc, #124]	; (90004290 <HAL_DMA_Init+0x438>)
90004212:	4293      	cmp	r3, r2
90004214:	d012      	beq.n	9000423c <HAL_DMA_Init+0x3e4>
90004216:	687b      	ldr	r3, [r7, #4]
90004218:	681b      	ldr	r3, [r3, #0]
9000421a:	4a1e      	ldr	r2, [pc, #120]	; (90004294 <HAL_DMA_Init+0x43c>)
9000421c:	4293      	cmp	r3, r2
9000421e:	d00d      	beq.n	9000423c <HAL_DMA_Init+0x3e4>
90004220:	687b      	ldr	r3, [r7, #4]
90004222:	681b      	ldr	r3, [r3, #0]
90004224:	4a1c      	ldr	r2, [pc, #112]	; (90004298 <HAL_DMA_Init+0x440>)
90004226:	4293      	cmp	r3, r2
90004228:	d008      	beq.n	9000423c <HAL_DMA_Init+0x3e4>
9000422a:	687b      	ldr	r3, [r7, #4]
9000422c:	681b      	ldr	r3, [r3, #0]
9000422e:	4a1b      	ldr	r2, [pc, #108]	; (9000429c <HAL_DMA_Init+0x444>)
90004230:	4293      	cmp	r3, r2
90004232:	d003      	beq.n	9000423c <HAL_DMA_Init+0x3e4>
90004234:	687b      	ldr	r3, [r7, #4]
90004236:	681b      	ldr	r3, [r3, #0]
90004238:	4a19      	ldr	r2, [pc, #100]	; (900042a0 <HAL_DMA_Init+0x448>)
9000423a:	4293      	cmp	r3, r2
9000423c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
9000423e:	687b      	ldr	r3, [r7, #4]
90004240:	2202      	movs	r2, #2
90004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
90004246:	687b      	ldr	r3, [r7, #4]
90004248:	2200      	movs	r2, #0
9000424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
9000424e:	687b      	ldr	r3, [r7, #4]
90004250:	681b      	ldr	r3, [r3, #0]
90004252:	681b      	ldr	r3, [r3, #0]
90004254:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
90004256:	697a      	ldr	r2, [r7, #20]
90004258:	4b12      	ldr	r3, [pc, #72]	; (900042a4 <HAL_DMA_Init+0x44c>)
9000425a:	4013      	ands	r3, r2
9000425c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
9000425e:	687b      	ldr	r3, [r7, #4]
90004260:	689b      	ldr	r3, [r3, #8]
90004262:	2b40      	cmp	r3, #64	; 0x40
90004264:	d020      	beq.n	900042a8 <HAL_DMA_Init+0x450>
90004266:	687b      	ldr	r3, [r7, #4]
90004268:	689b      	ldr	r3, [r3, #8]
9000426a:	2b80      	cmp	r3, #128	; 0x80
9000426c:	d102      	bne.n	90004274 <HAL_DMA_Init+0x41c>
9000426e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90004272:	e01a      	b.n	900042aa <HAL_DMA_Init+0x452>
90004274:	2300      	movs	r3, #0
90004276:	e018      	b.n	900042aa <HAL_DMA_Init+0x452>
90004278:	fe10803f 	.word	0xfe10803f
9000427c:	5c001000 	.word	0x5c001000
90004280:	ffff0000 	.word	0xffff0000
90004284:	58025408 	.word	0x58025408
90004288:	5802541c 	.word	0x5802541c
9000428c:	58025430 	.word	0x58025430
90004290:	58025444 	.word	0x58025444
90004294:	58025458 	.word	0x58025458
90004298:	5802546c 	.word	0x5802546c
9000429c:	58025480 	.word	0x58025480
900042a0:	58025494 	.word	0x58025494
900042a4:	fffe000f 	.word	0xfffe000f
900042a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
900042aa:	687a      	ldr	r2, [r7, #4]
900042ac:	68d2      	ldr	r2, [r2, #12]
900042ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
900042b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
900042b2:	687b      	ldr	r3, [r7, #4]
900042b4:	691b      	ldr	r3, [r3, #16]
900042b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
900042b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
900042ba:	687b      	ldr	r3, [r7, #4]
900042bc:	695b      	ldr	r3, [r3, #20]
900042be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
900042c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
900042c2:	687b      	ldr	r3, [r7, #4]
900042c4:	699b      	ldr	r3, [r3, #24]
900042c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
900042c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
900042ca:	687b      	ldr	r3, [r7, #4]
900042cc:	69db      	ldr	r3, [r3, #28]
900042ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
900042d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
900042d2:	687b      	ldr	r3, [r7, #4]
900042d4:	6a1b      	ldr	r3, [r3, #32]
900042d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
900042d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
900042da:	697a      	ldr	r2, [r7, #20]
900042dc:	4313      	orrs	r3, r2
900042de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
900042e0:	687b      	ldr	r3, [r7, #4]
900042e2:	681b      	ldr	r3, [r3, #0]
900042e4:	697a      	ldr	r2, [r7, #20]
900042e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
900042e8:	687b      	ldr	r3, [r7, #4]
900042ea:	681b      	ldr	r3, [r3, #0]
900042ec:	461a      	mov	r2, r3
900042ee:	4b6e      	ldr	r3, [pc, #440]	; (900044a8 <HAL_DMA_Init+0x650>)
900042f0:	4413      	add	r3, r2
900042f2:	4a6e      	ldr	r2, [pc, #440]	; (900044ac <HAL_DMA_Init+0x654>)
900042f4:	fba2 2303 	umull	r2, r3, r2, r3
900042f8:	091b      	lsrs	r3, r3, #4
900042fa:	009a      	lsls	r2, r3, #2
900042fc:	687b      	ldr	r3, [r7, #4]
900042fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
90004300:	6878      	ldr	r0, [r7, #4]
90004302:	f002 f9a9 	bl	90006658 <DMA_CalcBaseAndBitshift>
90004306:	4603      	mov	r3, r0
90004308:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000430a:	687b      	ldr	r3, [r7, #4]
9000430c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000430e:	f003 031f 	and.w	r3, r3, #31
90004312:	2201      	movs	r2, #1
90004314:	409a      	lsls	r2, r3
90004316:	68fb      	ldr	r3, [r7, #12]
90004318:	605a      	str	r2, [r3, #4]
9000431a:	e008      	b.n	9000432e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
9000431c:	687b      	ldr	r3, [r7, #4]
9000431e:	2240      	movs	r2, #64	; 0x40
90004320:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
90004322:	687b      	ldr	r3, [r7, #4]
90004324:	2203      	movs	r2, #3
90004326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
9000432a:	2301      	movs	r3, #1
9000432c:	e0b7      	b.n	9000449e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000432e:	687b      	ldr	r3, [r7, #4]
90004330:	681b      	ldr	r3, [r3, #0]
90004332:	4a5f      	ldr	r2, [pc, #380]	; (900044b0 <HAL_DMA_Init+0x658>)
90004334:	4293      	cmp	r3, r2
90004336:	d072      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004338:	687b      	ldr	r3, [r7, #4]
9000433a:	681b      	ldr	r3, [r3, #0]
9000433c:	4a5d      	ldr	r2, [pc, #372]	; (900044b4 <HAL_DMA_Init+0x65c>)
9000433e:	4293      	cmp	r3, r2
90004340:	d06d      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004342:	687b      	ldr	r3, [r7, #4]
90004344:	681b      	ldr	r3, [r3, #0]
90004346:	4a5c      	ldr	r2, [pc, #368]	; (900044b8 <HAL_DMA_Init+0x660>)
90004348:	4293      	cmp	r3, r2
9000434a:	d068      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
9000434c:	687b      	ldr	r3, [r7, #4]
9000434e:	681b      	ldr	r3, [r3, #0]
90004350:	4a5a      	ldr	r2, [pc, #360]	; (900044bc <HAL_DMA_Init+0x664>)
90004352:	4293      	cmp	r3, r2
90004354:	d063      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004356:	687b      	ldr	r3, [r7, #4]
90004358:	681b      	ldr	r3, [r3, #0]
9000435a:	4a59      	ldr	r2, [pc, #356]	; (900044c0 <HAL_DMA_Init+0x668>)
9000435c:	4293      	cmp	r3, r2
9000435e:	d05e      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004360:	687b      	ldr	r3, [r7, #4]
90004362:	681b      	ldr	r3, [r3, #0]
90004364:	4a57      	ldr	r2, [pc, #348]	; (900044c4 <HAL_DMA_Init+0x66c>)
90004366:	4293      	cmp	r3, r2
90004368:	d059      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
9000436a:	687b      	ldr	r3, [r7, #4]
9000436c:	681b      	ldr	r3, [r3, #0]
9000436e:	4a56      	ldr	r2, [pc, #344]	; (900044c8 <HAL_DMA_Init+0x670>)
90004370:	4293      	cmp	r3, r2
90004372:	d054      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004374:	687b      	ldr	r3, [r7, #4]
90004376:	681b      	ldr	r3, [r3, #0]
90004378:	4a54      	ldr	r2, [pc, #336]	; (900044cc <HAL_DMA_Init+0x674>)
9000437a:	4293      	cmp	r3, r2
9000437c:	d04f      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
9000437e:	687b      	ldr	r3, [r7, #4]
90004380:	681b      	ldr	r3, [r3, #0]
90004382:	4a53      	ldr	r2, [pc, #332]	; (900044d0 <HAL_DMA_Init+0x678>)
90004384:	4293      	cmp	r3, r2
90004386:	d04a      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004388:	687b      	ldr	r3, [r7, #4]
9000438a:	681b      	ldr	r3, [r3, #0]
9000438c:	4a51      	ldr	r2, [pc, #324]	; (900044d4 <HAL_DMA_Init+0x67c>)
9000438e:	4293      	cmp	r3, r2
90004390:	d045      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004392:	687b      	ldr	r3, [r7, #4]
90004394:	681b      	ldr	r3, [r3, #0]
90004396:	4a50      	ldr	r2, [pc, #320]	; (900044d8 <HAL_DMA_Init+0x680>)
90004398:	4293      	cmp	r3, r2
9000439a:	d040      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
9000439c:	687b      	ldr	r3, [r7, #4]
9000439e:	681b      	ldr	r3, [r3, #0]
900043a0:	4a4e      	ldr	r2, [pc, #312]	; (900044dc <HAL_DMA_Init+0x684>)
900043a2:	4293      	cmp	r3, r2
900043a4:	d03b      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043a6:	687b      	ldr	r3, [r7, #4]
900043a8:	681b      	ldr	r3, [r3, #0]
900043aa:	4a4d      	ldr	r2, [pc, #308]	; (900044e0 <HAL_DMA_Init+0x688>)
900043ac:	4293      	cmp	r3, r2
900043ae:	d036      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043b0:	687b      	ldr	r3, [r7, #4]
900043b2:	681b      	ldr	r3, [r3, #0]
900043b4:	4a4b      	ldr	r2, [pc, #300]	; (900044e4 <HAL_DMA_Init+0x68c>)
900043b6:	4293      	cmp	r3, r2
900043b8:	d031      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043ba:	687b      	ldr	r3, [r7, #4]
900043bc:	681b      	ldr	r3, [r3, #0]
900043be:	4a4a      	ldr	r2, [pc, #296]	; (900044e8 <HAL_DMA_Init+0x690>)
900043c0:	4293      	cmp	r3, r2
900043c2:	d02c      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043c4:	687b      	ldr	r3, [r7, #4]
900043c6:	681b      	ldr	r3, [r3, #0]
900043c8:	4a48      	ldr	r2, [pc, #288]	; (900044ec <HAL_DMA_Init+0x694>)
900043ca:	4293      	cmp	r3, r2
900043cc:	d027      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043ce:	687b      	ldr	r3, [r7, #4]
900043d0:	681b      	ldr	r3, [r3, #0]
900043d2:	4a47      	ldr	r2, [pc, #284]	; (900044f0 <HAL_DMA_Init+0x698>)
900043d4:	4293      	cmp	r3, r2
900043d6:	d022      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043d8:	687b      	ldr	r3, [r7, #4]
900043da:	681b      	ldr	r3, [r3, #0]
900043dc:	4a45      	ldr	r2, [pc, #276]	; (900044f4 <HAL_DMA_Init+0x69c>)
900043de:	4293      	cmp	r3, r2
900043e0:	d01d      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043e2:	687b      	ldr	r3, [r7, #4]
900043e4:	681b      	ldr	r3, [r3, #0]
900043e6:	4a44      	ldr	r2, [pc, #272]	; (900044f8 <HAL_DMA_Init+0x6a0>)
900043e8:	4293      	cmp	r3, r2
900043ea:	d018      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043ec:	687b      	ldr	r3, [r7, #4]
900043ee:	681b      	ldr	r3, [r3, #0]
900043f0:	4a42      	ldr	r2, [pc, #264]	; (900044fc <HAL_DMA_Init+0x6a4>)
900043f2:	4293      	cmp	r3, r2
900043f4:	d013      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
900043f6:	687b      	ldr	r3, [r7, #4]
900043f8:	681b      	ldr	r3, [r3, #0]
900043fa:	4a41      	ldr	r2, [pc, #260]	; (90004500 <HAL_DMA_Init+0x6a8>)
900043fc:	4293      	cmp	r3, r2
900043fe:	d00e      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004400:	687b      	ldr	r3, [r7, #4]
90004402:	681b      	ldr	r3, [r3, #0]
90004404:	4a3f      	ldr	r2, [pc, #252]	; (90004504 <HAL_DMA_Init+0x6ac>)
90004406:	4293      	cmp	r3, r2
90004408:	d009      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
9000440a:	687b      	ldr	r3, [r7, #4]
9000440c:	681b      	ldr	r3, [r3, #0]
9000440e:	4a3e      	ldr	r2, [pc, #248]	; (90004508 <HAL_DMA_Init+0x6b0>)
90004410:	4293      	cmp	r3, r2
90004412:	d004      	beq.n	9000441e <HAL_DMA_Init+0x5c6>
90004414:	687b      	ldr	r3, [r7, #4]
90004416:	681b      	ldr	r3, [r3, #0]
90004418:	4a3c      	ldr	r2, [pc, #240]	; (9000450c <HAL_DMA_Init+0x6b4>)
9000441a:	4293      	cmp	r3, r2
9000441c:	d101      	bne.n	90004422 <HAL_DMA_Init+0x5ca>
9000441e:	2301      	movs	r3, #1
90004420:	e000      	b.n	90004424 <HAL_DMA_Init+0x5cc>
90004422:	2300      	movs	r3, #0
90004424:	2b00      	cmp	r3, #0
90004426:	d032      	beq.n	9000448e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
90004428:	6878      	ldr	r0, [r7, #4]
9000442a:	f002 fa43 	bl	900068b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
9000442e:	687b      	ldr	r3, [r7, #4]
90004430:	689b      	ldr	r3, [r3, #8]
90004432:	2b80      	cmp	r3, #128	; 0x80
90004434:	d102      	bne.n	9000443c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
90004436:	687b      	ldr	r3, [r7, #4]
90004438:	2200      	movs	r2, #0
9000443a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
9000443c:	687b      	ldr	r3, [r7, #4]
9000443e:	685a      	ldr	r2, [r3, #4]
90004440:	687b      	ldr	r3, [r7, #4]
90004442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90004444:	b2d2      	uxtb	r2, r2
90004446:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
90004448:	687b      	ldr	r3, [r7, #4]
9000444a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000444c:	687a      	ldr	r2, [r7, #4]
9000444e:	6e92      	ldr	r2, [r2, #104]	; 0x68
90004450:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
90004452:	687b      	ldr	r3, [r7, #4]
90004454:	685b      	ldr	r3, [r3, #4]
90004456:	2b00      	cmp	r3, #0
90004458:	d010      	beq.n	9000447c <HAL_DMA_Init+0x624>
9000445a:	687b      	ldr	r3, [r7, #4]
9000445c:	685b      	ldr	r3, [r3, #4]
9000445e:	2b08      	cmp	r3, #8
90004460:	d80c      	bhi.n	9000447c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
90004462:	6878      	ldr	r0, [r7, #4]
90004464:	f002 fac0 	bl	900069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
90004468:	687b      	ldr	r3, [r7, #4]
9000446a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000446c:	2200      	movs	r2, #0
9000446e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
90004470:	687b      	ldr	r3, [r7, #4]
90004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004474:	687a      	ldr	r2, [r7, #4]
90004476:	6f52      	ldr	r2, [r2, #116]	; 0x74
90004478:	605a      	str	r2, [r3, #4]
9000447a:	e008      	b.n	9000448e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
9000447c:	687b      	ldr	r3, [r7, #4]
9000447e:	2200      	movs	r2, #0
90004480:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
90004482:	687b      	ldr	r3, [r7, #4]
90004484:	2200      	movs	r2, #0
90004486:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
90004488:	687b      	ldr	r3, [r7, #4]
9000448a:	2200      	movs	r2, #0
9000448c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
9000448e:	687b      	ldr	r3, [r7, #4]
90004490:	2200      	movs	r2, #0
90004492:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
90004494:	687b      	ldr	r3, [r7, #4]
90004496:	2201      	movs	r2, #1
90004498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
9000449c:	2300      	movs	r3, #0
}
9000449e:	4618      	mov	r0, r3
900044a0:	3718      	adds	r7, #24
900044a2:	46bd      	mov	sp, r7
900044a4:	bd80      	pop	{r7, pc}
900044a6:	bf00      	nop
900044a8:	a7fdabf8 	.word	0xa7fdabf8
900044ac:	cccccccd 	.word	0xcccccccd
900044b0:	40020010 	.word	0x40020010
900044b4:	40020028 	.word	0x40020028
900044b8:	40020040 	.word	0x40020040
900044bc:	40020058 	.word	0x40020058
900044c0:	40020070 	.word	0x40020070
900044c4:	40020088 	.word	0x40020088
900044c8:	400200a0 	.word	0x400200a0
900044cc:	400200b8 	.word	0x400200b8
900044d0:	40020410 	.word	0x40020410
900044d4:	40020428 	.word	0x40020428
900044d8:	40020440 	.word	0x40020440
900044dc:	40020458 	.word	0x40020458
900044e0:	40020470 	.word	0x40020470
900044e4:	40020488 	.word	0x40020488
900044e8:	400204a0 	.word	0x400204a0
900044ec:	400204b8 	.word	0x400204b8
900044f0:	58025408 	.word	0x58025408
900044f4:	5802541c 	.word	0x5802541c
900044f8:	58025430 	.word	0x58025430
900044fc:	58025444 	.word	0x58025444
90004500:	58025458 	.word	0x58025458
90004504:	5802546c 	.word	0x5802546c
90004508:	58025480 	.word	0x58025480
9000450c:	58025494 	.word	0x58025494

90004510 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
90004510:	b580      	push	{r7, lr}
90004512:	b086      	sub	sp, #24
90004514:	af00      	add	r7, sp, #0
90004516:	60f8      	str	r0, [r7, #12]
90004518:	60b9      	str	r1, [r7, #8]
9000451a:	607a      	str	r2, [r7, #4]
9000451c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
9000451e:	2300      	movs	r3, #0
90004520:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
90004522:	68fb      	ldr	r3, [r7, #12]
90004524:	2b00      	cmp	r3, #0
90004526:	d101      	bne.n	9000452c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
90004528:	2301      	movs	r3, #1
9000452a:	e226      	b.n	9000497a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
9000452c:	68fb      	ldr	r3, [r7, #12]
9000452e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
90004532:	2b01      	cmp	r3, #1
90004534:	d101      	bne.n	9000453a <HAL_DMA_Start_IT+0x2a>
90004536:	2302      	movs	r3, #2
90004538:	e21f      	b.n	9000497a <HAL_DMA_Start_IT+0x46a>
9000453a:	68fb      	ldr	r3, [r7, #12]
9000453c:	2201      	movs	r2, #1
9000453e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
90004542:	68fb      	ldr	r3, [r7, #12]
90004544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
90004548:	b2db      	uxtb	r3, r3
9000454a:	2b01      	cmp	r3, #1
9000454c:	f040 820a 	bne.w	90004964 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
90004550:	68fb      	ldr	r3, [r7, #12]
90004552:	2202      	movs	r2, #2
90004554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
90004558:	68fb      	ldr	r3, [r7, #12]
9000455a:	2200      	movs	r2, #0
9000455c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
9000455e:	68fb      	ldr	r3, [r7, #12]
90004560:	681b      	ldr	r3, [r3, #0]
90004562:	4a68      	ldr	r2, [pc, #416]	; (90004704 <HAL_DMA_Start_IT+0x1f4>)
90004564:	4293      	cmp	r3, r2
90004566:	d04a      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
90004568:	68fb      	ldr	r3, [r7, #12]
9000456a:	681b      	ldr	r3, [r3, #0]
9000456c:	4a66      	ldr	r2, [pc, #408]	; (90004708 <HAL_DMA_Start_IT+0x1f8>)
9000456e:	4293      	cmp	r3, r2
90004570:	d045      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
90004572:	68fb      	ldr	r3, [r7, #12]
90004574:	681b      	ldr	r3, [r3, #0]
90004576:	4a65      	ldr	r2, [pc, #404]	; (9000470c <HAL_DMA_Start_IT+0x1fc>)
90004578:	4293      	cmp	r3, r2
9000457a:	d040      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
9000457c:	68fb      	ldr	r3, [r7, #12]
9000457e:	681b      	ldr	r3, [r3, #0]
90004580:	4a63      	ldr	r2, [pc, #396]	; (90004710 <HAL_DMA_Start_IT+0x200>)
90004582:	4293      	cmp	r3, r2
90004584:	d03b      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
90004586:	68fb      	ldr	r3, [r7, #12]
90004588:	681b      	ldr	r3, [r3, #0]
9000458a:	4a62      	ldr	r2, [pc, #392]	; (90004714 <HAL_DMA_Start_IT+0x204>)
9000458c:	4293      	cmp	r3, r2
9000458e:	d036      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
90004590:	68fb      	ldr	r3, [r7, #12]
90004592:	681b      	ldr	r3, [r3, #0]
90004594:	4a60      	ldr	r2, [pc, #384]	; (90004718 <HAL_DMA_Start_IT+0x208>)
90004596:	4293      	cmp	r3, r2
90004598:	d031      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
9000459a:	68fb      	ldr	r3, [r7, #12]
9000459c:	681b      	ldr	r3, [r3, #0]
9000459e:	4a5f      	ldr	r2, [pc, #380]	; (9000471c <HAL_DMA_Start_IT+0x20c>)
900045a0:	4293      	cmp	r3, r2
900045a2:	d02c      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045a4:	68fb      	ldr	r3, [r7, #12]
900045a6:	681b      	ldr	r3, [r3, #0]
900045a8:	4a5d      	ldr	r2, [pc, #372]	; (90004720 <HAL_DMA_Start_IT+0x210>)
900045aa:	4293      	cmp	r3, r2
900045ac:	d027      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045ae:	68fb      	ldr	r3, [r7, #12]
900045b0:	681b      	ldr	r3, [r3, #0]
900045b2:	4a5c      	ldr	r2, [pc, #368]	; (90004724 <HAL_DMA_Start_IT+0x214>)
900045b4:	4293      	cmp	r3, r2
900045b6:	d022      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045b8:	68fb      	ldr	r3, [r7, #12]
900045ba:	681b      	ldr	r3, [r3, #0]
900045bc:	4a5a      	ldr	r2, [pc, #360]	; (90004728 <HAL_DMA_Start_IT+0x218>)
900045be:	4293      	cmp	r3, r2
900045c0:	d01d      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045c2:	68fb      	ldr	r3, [r7, #12]
900045c4:	681b      	ldr	r3, [r3, #0]
900045c6:	4a59      	ldr	r2, [pc, #356]	; (9000472c <HAL_DMA_Start_IT+0x21c>)
900045c8:	4293      	cmp	r3, r2
900045ca:	d018      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045cc:	68fb      	ldr	r3, [r7, #12]
900045ce:	681b      	ldr	r3, [r3, #0]
900045d0:	4a57      	ldr	r2, [pc, #348]	; (90004730 <HAL_DMA_Start_IT+0x220>)
900045d2:	4293      	cmp	r3, r2
900045d4:	d013      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045d6:	68fb      	ldr	r3, [r7, #12]
900045d8:	681b      	ldr	r3, [r3, #0]
900045da:	4a56      	ldr	r2, [pc, #344]	; (90004734 <HAL_DMA_Start_IT+0x224>)
900045dc:	4293      	cmp	r3, r2
900045de:	d00e      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045e0:	68fb      	ldr	r3, [r7, #12]
900045e2:	681b      	ldr	r3, [r3, #0]
900045e4:	4a54      	ldr	r2, [pc, #336]	; (90004738 <HAL_DMA_Start_IT+0x228>)
900045e6:	4293      	cmp	r3, r2
900045e8:	d009      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045ea:	68fb      	ldr	r3, [r7, #12]
900045ec:	681b      	ldr	r3, [r3, #0]
900045ee:	4a53      	ldr	r2, [pc, #332]	; (9000473c <HAL_DMA_Start_IT+0x22c>)
900045f0:	4293      	cmp	r3, r2
900045f2:	d004      	beq.n	900045fe <HAL_DMA_Start_IT+0xee>
900045f4:	68fb      	ldr	r3, [r7, #12]
900045f6:	681b      	ldr	r3, [r3, #0]
900045f8:	4a51      	ldr	r2, [pc, #324]	; (90004740 <HAL_DMA_Start_IT+0x230>)
900045fa:	4293      	cmp	r3, r2
900045fc:	d108      	bne.n	90004610 <HAL_DMA_Start_IT+0x100>
900045fe:	68fb      	ldr	r3, [r7, #12]
90004600:	681b      	ldr	r3, [r3, #0]
90004602:	681a      	ldr	r2, [r3, #0]
90004604:	68fb      	ldr	r3, [r7, #12]
90004606:	681b      	ldr	r3, [r3, #0]
90004608:	f022 0201 	bic.w	r2, r2, #1
9000460c:	601a      	str	r2, [r3, #0]
9000460e:	e007      	b.n	90004620 <HAL_DMA_Start_IT+0x110>
90004610:	68fb      	ldr	r3, [r7, #12]
90004612:	681b      	ldr	r3, [r3, #0]
90004614:	681a      	ldr	r2, [r3, #0]
90004616:	68fb      	ldr	r3, [r7, #12]
90004618:	681b      	ldr	r3, [r3, #0]
9000461a:	f022 0201 	bic.w	r2, r2, #1
9000461e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
90004620:	683b      	ldr	r3, [r7, #0]
90004622:	687a      	ldr	r2, [r7, #4]
90004624:	68b9      	ldr	r1, [r7, #8]
90004626:	68f8      	ldr	r0, [r7, #12]
90004628:	f001 fe6a 	bl	90006300 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
9000462c:	68fb      	ldr	r3, [r7, #12]
9000462e:	681b      	ldr	r3, [r3, #0]
90004630:	4a34      	ldr	r2, [pc, #208]	; (90004704 <HAL_DMA_Start_IT+0x1f4>)
90004632:	4293      	cmp	r3, r2
90004634:	d04a      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
90004636:	68fb      	ldr	r3, [r7, #12]
90004638:	681b      	ldr	r3, [r3, #0]
9000463a:	4a33      	ldr	r2, [pc, #204]	; (90004708 <HAL_DMA_Start_IT+0x1f8>)
9000463c:	4293      	cmp	r3, r2
9000463e:	d045      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
90004640:	68fb      	ldr	r3, [r7, #12]
90004642:	681b      	ldr	r3, [r3, #0]
90004644:	4a31      	ldr	r2, [pc, #196]	; (9000470c <HAL_DMA_Start_IT+0x1fc>)
90004646:	4293      	cmp	r3, r2
90004648:	d040      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
9000464a:	68fb      	ldr	r3, [r7, #12]
9000464c:	681b      	ldr	r3, [r3, #0]
9000464e:	4a30      	ldr	r2, [pc, #192]	; (90004710 <HAL_DMA_Start_IT+0x200>)
90004650:	4293      	cmp	r3, r2
90004652:	d03b      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
90004654:	68fb      	ldr	r3, [r7, #12]
90004656:	681b      	ldr	r3, [r3, #0]
90004658:	4a2e      	ldr	r2, [pc, #184]	; (90004714 <HAL_DMA_Start_IT+0x204>)
9000465a:	4293      	cmp	r3, r2
9000465c:	d036      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
9000465e:	68fb      	ldr	r3, [r7, #12]
90004660:	681b      	ldr	r3, [r3, #0]
90004662:	4a2d      	ldr	r2, [pc, #180]	; (90004718 <HAL_DMA_Start_IT+0x208>)
90004664:	4293      	cmp	r3, r2
90004666:	d031      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
90004668:	68fb      	ldr	r3, [r7, #12]
9000466a:	681b      	ldr	r3, [r3, #0]
9000466c:	4a2b      	ldr	r2, [pc, #172]	; (9000471c <HAL_DMA_Start_IT+0x20c>)
9000466e:	4293      	cmp	r3, r2
90004670:	d02c      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
90004672:	68fb      	ldr	r3, [r7, #12]
90004674:	681b      	ldr	r3, [r3, #0]
90004676:	4a2a      	ldr	r2, [pc, #168]	; (90004720 <HAL_DMA_Start_IT+0x210>)
90004678:	4293      	cmp	r3, r2
9000467a:	d027      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
9000467c:	68fb      	ldr	r3, [r7, #12]
9000467e:	681b      	ldr	r3, [r3, #0]
90004680:	4a28      	ldr	r2, [pc, #160]	; (90004724 <HAL_DMA_Start_IT+0x214>)
90004682:	4293      	cmp	r3, r2
90004684:	d022      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
90004686:	68fb      	ldr	r3, [r7, #12]
90004688:	681b      	ldr	r3, [r3, #0]
9000468a:	4a27      	ldr	r2, [pc, #156]	; (90004728 <HAL_DMA_Start_IT+0x218>)
9000468c:	4293      	cmp	r3, r2
9000468e:	d01d      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
90004690:	68fb      	ldr	r3, [r7, #12]
90004692:	681b      	ldr	r3, [r3, #0]
90004694:	4a25      	ldr	r2, [pc, #148]	; (9000472c <HAL_DMA_Start_IT+0x21c>)
90004696:	4293      	cmp	r3, r2
90004698:	d018      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
9000469a:	68fb      	ldr	r3, [r7, #12]
9000469c:	681b      	ldr	r3, [r3, #0]
9000469e:	4a24      	ldr	r2, [pc, #144]	; (90004730 <HAL_DMA_Start_IT+0x220>)
900046a0:	4293      	cmp	r3, r2
900046a2:	d013      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
900046a4:	68fb      	ldr	r3, [r7, #12]
900046a6:	681b      	ldr	r3, [r3, #0]
900046a8:	4a22      	ldr	r2, [pc, #136]	; (90004734 <HAL_DMA_Start_IT+0x224>)
900046aa:	4293      	cmp	r3, r2
900046ac:	d00e      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
900046ae:	68fb      	ldr	r3, [r7, #12]
900046b0:	681b      	ldr	r3, [r3, #0]
900046b2:	4a21      	ldr	r2, [pc, #132]	; (90004738 <HAL_DMA_Start_IT+0x228>)
900046b4:	4293      	cmp	r3, r2
900046b6:	d009      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
900046b8:	68fb      	ldr	r3, [r7, #12]
900046ba:	681b      	ldr	r3, [r3, #0]
900046bc:	4a1f      	ldr	r2, [pc, #124]	; (9000473c <HAL_DMA_Start_IT+0x22c>)
900046be:	4293      	cmp	r3, r2
900046c0:	d004      	beq.n	900046cc <HAL_DMA_Start_IT+0x1bc>
900046c2:	68fb      	ldr	r3, [r7, #12]
900046c4:	681b      	ldr	r3, [r3, #0]
900046c6:	4a1e      	ldr	r2, [pc, #120]	; (90004740 <HAL_DMA_Start_IT+0x230>)
900046c8:	4293      	cmp	r3, r2
900046ca:	d101      	bne.n	900046d0 <HAL_DMA_Start_IT+0x1c0>
900046cc:	2301      	movs	r3, #1
900046ce:	e000      	b.n	900046d2 <HAL_DMA_Start_IT+0x1c2>
900046d0:	2300      	movs	r3, #0
900046d2:	2b00      	cmp	r3, #0
900046d4:	d036      	beq.n	90004744 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
900046d6:	68fb      	ldr	r3, [r7, #12]
900046d8:	681b      	ldr	r3, [r3, #0]
900046da:	681b      	ldr	r3, [r3, #0]
900046dc:	f023 021e 	bic.w	r2, r3, #30
900046e0:	68fb      	ldr	r3, [r7, #12]
900046e2:	681b      	ldr	r3, [r3, #0]
900046e4:	f042 0216 	orr.w	r2, r2, #22
900046e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
900046ea:	68fb      	ldr	r3, [r7, #12]
900046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900046ee:	2b00      	cmp	r3, #0
900046f0:	d03e      	beq.n	90004770 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
900046f2:	68fb      	ldr	r3, [r7, #12]
900046f4:	681b      	ldr	r3, [r3, #0]
900046f6:	681a      	ldr	r2, [r3, #0]
900046f8:	68fb      	ldr	r3, [r7, #12]
900046fa:	681b      	ldr	r3, [r3, #0]
900046fc:	f042 0208 	orr.w	r2, r2, #8
90004700:	601a      	str	r2, [r3, #0]
90004702:	e035      	b.n	90004770 <HAL_DMA_Start_IT+0x260>
90004704:	40020010 	.word	0x40020010
90004708:	40020028 	.word	0x40020028
9000470c:	40020040 	.word	0x40020040
90004710:	40020058 	.word	0x40020058
90004714:	40020070 	.word	0x40020070
90004718:	40020088 	.word	0x40020088
9000471c:	400200a0 	.word	0x400200a0
90004720:	400200b8 	.word	0x400200b8
90004724:	40020410 	.word	0x40020410
90004728:	40020428 	.word	0x40020428
9000472c:	40020440 	.word	0x40020440
90004730:	40020458 	.word	0x40020458
90004734:	40020470 	.word	0x40020470
90004738:	40020488 	.word	0x40020488
9000473c:	400204a0 	.word	0x400204a0
90004740:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
90004744:	68fb      	ldr	r3, [r7, #12]
90004746:	681b      	ldr	r3, [r3, #0]
90004748:	681b      	ldr	r3, [r3, #0]
9000474a:	f023 020e 	bic.w	r2, r3, #14
9000474e:	68fb      	ldr	r3, [r7, #12]
90004750:	681b      	ldr	r3, [r3, #0]
90004752:	f042 020a 	orr.w	r2, r2, #10
90004756:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
90004758:	68fb      	ldr	r3, [r7, #12]
9000475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000475c:	2b00      	cmp	r3, #0
9000475e:	d007      	beq.n	90004770 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
90004760:	68fb      	ldr	r3, [r7, #12]
90004762:	681b      	ldr	r3, [r3, #0]
90004764:	681a      	ldr	r2, [r3, #0]
90004766:	68fb      	ldr	r3, [r7, #12]
90004768:	681b      	ldr	r3, [r3, #0]
9000476a:	f042 0204 	orr.w	r2, r2, #4
9000476e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90004770:	68fb      	ldr	r3, [r7, #12]
90004772:	681b      	ldr	r3, [r3, #0]
90004774:	4a83      	ldr	r2, [pc, #524]	; (90004984 <HAL_DMA_Start_IT+0x474>)
90004776:	4293      	cmp	r3, r2
90004778:	d072      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
9000477a:	68fb      	ldr	r3, [r7, #12]
9000477c:	681b      	ldr	r3, [r3, #0]
9000477e:	4a82      	ldr	r2, [pc, #520]	; (90004988 <HAL_DMA_Start_IT+0x478>)
90004780:	4293      	cmp	r3, r2
90004782:	d06d      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
90004784:	68fb      	ldr	r3, [r7, #12]
90004786:	681b      	ldr	r3, [r3, #0]
90004788:	4a80      	ldr	r2, [pc, #512]	; (9000498c <HAL_DMA_Start_IT+0x47c>)
9000478a:	4293      	cmp	r3, r2
9000478c:	d068      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
9000478e:	68fb      	ldr	r3, [r7, #12]
90004790:	681b      	ldr	r3, [r3, #0]
90004792:	4a7f      	ldr	r2, [pc, #508]	; (90004990 <HAL_DMA_Start_IT+0x480>)
90004794:	4293      	cmp	r3, r2
90004796:	d063      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
90004798:	68fb      	ldr	r3, [r7, #12]
9000479a:	681b      	ldr	r3, [r3, #0]
9000479c:	4a7d      	ldr	r2, [pc, #500]	; (90004994 <HAL_DMA_Start_IT+0x484>)
9000479e:	4293      	cmp	r3, r2
900047a0:	d05e      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047a2:	68fb      	ldr	r3, [r7, #12]
900047a4:	681b      	ldr	r3, [r3, #0]
900047a6:	4a7c      	ldr	r2, [pc, #496]	; (90004998 <HAL_DMA_Start_IT+0x488>)
900047a8:	4293      	cmp	r3, r2
900047aa:	d059      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047ac:	68fb      	ldr	r3, [r7, #12]
900047ae:	681b      	ldr	r3, [r3, #0]
900047b0:	4a7a      	ldr	r2, [pc, #488]	; (9000499c <HAL_DMA_Start_IT+0x48c>)
900047b2:	4293      	cmp	r3, r2
900047b4:	d054      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047b6:	68fb      	ldr	r3, [r7, #12]
900047b8:	681b      	ldr	r3, [r3, #0]
900047ba:	4a79      	ldr	r2, [pc, #484]	; (900049a0 <HAL_DMA_Start_IT+0x490>)
900047bc:	4293      	cmp	r3, r2
900047be:	d04f      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047c0:	68fb      	ldr	r3, [r7, #12]
900047c2:	681b      	ldr	r3, [r3, #0]
900047c4:	4a77      	ldr	r2, [pc, #476]	; (900049a4 <HAL_DMA_Start_IT+0x494>)
900047c6:	4293      	cmp	r3, r2
900047c8:	d04a      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047ca:	68fb      	ldr	r3, [r7, #12]
900047cc:	681b      	ldr	r3, [r3, #0]
900047ce:	4a76      	ldr	r2, [pc, #472]	; (900049a8 <HAL_DMA_Start_IT+0x498>)
900047d0:	4293      	cmp	r3, r2
900047d2:	d045      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047d4:	68fb      	ldr	r3, [r7, #12]
900047d6:	681b      	ldr	r3, [r3, #0]
900047d8:	4a74      	ldr	r2, [pc, #464]	; (900049ac <HAL_DMA_Start_IT+0x49c>)
900047da:	4293      	cmp	r3, r2
900047dc:	d040      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047de:	68fb      	ldr	r3, [r7, #12]
900047e0:	681b      	ldr	r3, [r3, #0]
900047e2:	4a73      	ldr	r2, [pc, #460]	; (900049b0 <HAL_DMA_Start_IT+0x4a0>)
900047e4:	4293      	cmp	r3, r2
900047e6:	d03b      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047e8:	68fb      	ldr	r3, [r7, #12]
900047ea:	681b      	ldr	r3, [r3, #0]
900047ec:	4a71      	ldr	r2, [pc, #452]	; (900049b4 <HAL_DMA_Start_IT+0x4a4>)
900047ee:	4293      	cmp	r3, r2
900047f0:	d036      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047f2:	68fb      	ldr	r3, [r7, #12]
900047f4:	681b      	ldr	r3, [r3, #0]
900047f6:	4a70      	ldr	r2, [pc, #448]	; (900049b8 <HAL_DMA_Start_IT+0x4a8>)
900047f8:	4293      	cmp	r3, r2
900047fa:	d031      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
900047fc:	68fb      	ldr	r3, [r7, #12]
900047fe:	681b      	ldr	r3, [r3, #0]
90004800:	4a6e      	ldr	r2, [pc, #440]	; (900049bc <HAL_DMA_Start_IT+0x4ac>)
90004802:	4293      	cmp	r3, r2
90004804:	d02c      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
90004806:	68fb      	ldr	r3, [r7, #12]
90004808:	681b      	ldr	r3, [r3, #0]
9000480a:	4a6d      	ldr	r2, [pc, #436]	; (900049c0 <HAL_DMA_Start_IT+0x4b0>)
9000480c:	4293      	cmp	r3, r2
9000480e:	d027      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
90004810:	68fb      	ldr	r3, [r7, #12]
90004812:	681b      	ldr	r3, [r3, #0]
90004814:	4a6b      	ldr	r2, [pc, #428]	; (900049c4 <HAL_DMA_Start_IT+0x4b4>)
90004816:	4293      	cmp	r3, r2
90004818:	d022      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
9000481a:	68fb      	ldr	r3, [r7, #12]
9000481c:	681b      	ldr	r3, [r3, #0]
9000481e:	4a6a      	ldr	r2, [pc, #424]	; (900049c8 <HAL_DMA_Start_IT+0x4b8>)
90004820:	4293      	cmp	r3, r2
90004822:	d01d      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
90004824:	68fb      	ldr	r3, [r7, #12]
90004826:	681b      	ldr	r3, [r3, #0]
90004828:	4a68      	ldr	r2, [pc, #416]	; (900049cc <HAL_DMA_Start_IT+0x4bc>)
9000482a:	4293      	cmp	r3, r2
9000482c:	d018      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
9000482e:	68fb      	ldr	r3, [r7, #12]
90004830:	681b      	ldr	r3, [r3, #0]
90004832:	4a67      	ldr	r2, [pc, #412]	; (900049d0 <HAL_DMA_Start_IT+0x4c0>)
90004834:	4293      	cmp	r3, r2
90004836:	d013      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
90004838:	68fb      	ldr	r3, [r7, #12]
9000483a:	681b      	ldr	r3, [r3, #0]
9000483c:	4a65      	ldr	r2, [pc, #404]	; (900049d4 <HAL_DMA_Start_IT+0x4c4>)
9000483e:	4293      	cmp	r3, r2
90004840:	d00e      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
90004842:	68fb      	ldr	r3, [r7, #12]
90004844:	681b      	ldr	r3, [r3, #0]
90004846:	4a64      	ldr	r2, [pc, #400]	; (900049d8 <HAL_DMA_Start_IT+0x4c8>)
90004848:	4293      	cmp	r3, r2
9000484a:	d009      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
9000484c:	68fb      	ldr	r3, [r7, #12]
9000484e:	681b      	ldr	r3, [r3, #0]
90004850:	4a62      	ldr	r2, [pc, #392]	; (900049dc <HAL_DMA_Start_IT+0x4cc>)
90004852:	4293      	cmp	r3, r2
90004854:	d004      	beq.n	90004860 <HAL_DMA_Start_IT+0x350>
90004856:	68fb      	ldr	r3, [r7, #12]
90004858:	681b      	ldr	r3, [r3, #0]
9000485a:	4a61      	ldr	r2, [pc, #388]	; (900049e0 <HAL_DMA_Start_IT+0x4d0>)
9000485c:	4293      	cmp	r3, r2
9000485e:	d101      	bne.n	90004864 <HAL_DMA_Start_IT+0x354>
90004860:	2301      	movs	r3, #1
90004862:	e000      	b.n	90004866 <HAL_DMA_Start_IT+0x356>
90004864:	2300      	movs	r3, #0
90004866:	2b00      	cmp	r3, #0
90004868:	d01a      	beq.n	900048a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
9000486a:	68fb      	ldr	r3, [r7, #12]
9000486c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000486e:	681b      	ldr	r3, [r3, #0]
90004870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90004874:	2b00      	cmp	r3, #0
90004876:	d007      	beq.n	90004888 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
90004878:	68fb      	ldr	r3, [r7, #12]
9000487a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000487c:	681a      	ldr	r2, [r3, #0]
9000487e:	68fb      	ldr	r3, [r7, #12]
90004880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90004882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004886:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
90004888:	68fb      	ldr	r3, [r7, #12]
9000488a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000488c:	2b00      	cmp	r3, #0
9000488e:	d007      	beq.n	900048a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
90004890:	68fb      	ldr	r3, [r7, #12]
90004892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90004894:	681a      	ldr	r2, [r3, #0]
90004896:	68fb      	ldr	r3, [r7, #12]
90004898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000489a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000489e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
900048a0:	68fb      	ldr	r3, [r7, #12]
900048a2:	681b      	ldr	r3, [r3, #0]
900048a4:	4a37      	ldr	r2, [pc, #220]	; (90004984 <HAL_DMA_Start_IT+0x474>)
900048a6:	4293      	cmp	r3, r2
900048a8:	d04a      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048aa:	68fb      	ldr	r3, [r7, #12]
900048ac:	681b      	ldr	r3, [r3, #0]
900048ae:	4a36      	ldr	r2, [pc, #216]	; (90004988 <HAL_DMA_Start_IT+0x478>)
900048b0:	4293      	cmp	r3, r2
900048b2:	d045      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048b4:	68fb      	ldr	r3, [r7, #12]
900048b6:	681b      	ldr	r3, [r3, #0]
900048b8:	4a34      	ldr	r2, [pc, #208]	; (9000498c <HAL_DMA_Start_IT+0x47c>)
900048ba:	4293      	cmp	r3, r2
900048bc:	d040      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048be:	68fb      	ldr	r3, [r7, #12]
900048c0:	681b      	ldr	r3, [r3, #0]
900048c2:	4a33      	ldr	r2, [pc, #204]	; (90004990 <HAL_DMA_Start_IT+0x480>)
900048c4:	4293      	cmp	r3, r2
900048c6:	d03b      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048c8:	68fb      	ldr	r3, [r7, #12]
900048ca:	681b      	ldr	r3, [r3, #0]
900048cc:	4a31      	ldr	r2, [pc, #196]	; (90004994 <HAL_DMA_Start_IT+0x484>)
900048ce:	4293      	cmp	r3, r2
900048d0:	d036      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048d2:	68fb      	ldr	r3, [r7, #12]
900048d4:	681b      	ldr	r3, [r3, #0]
900048d6:	4a30      	ldr	r2, [pc, #192]	; (90004998 <HAL_DMA_Start_IT+0x488>)
900048d8:	4293      	cmp	r3, r2
900048da:	d031      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048dc:	68fb      	ldr	r3, [r7, #12]
900048de:	681b      	ldr	r3, [r3, #0]
900048e0:	4a2e      	ldr	r2, [pc, #184]	; (9000499c <HAL_DMA_Start_IT+0x48c>)
900048e2:	4293      	cmp	r3, r2
900048e4:	d02c      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048e6:	68fb      	ldr	r3, [r7, #12]
900048e8:	681b      	ldr	r3, [r3, #0]
900048ea:	4a2d      	ldr	r2, [pc, #180]	; (900049a0 <HAL_DMA_Start_IT+0x490>)
900048ec:	4293      	cmp	r3, r2
900048ee:	d027      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048f0:	68fb      	ldr	r3, [r7, #12]
900048f2:	681b      	ldr	r3, [r3, #0]
900048f4:	4a2b      	ldr	r2, [pc, #172]	; (900049a4 <HAL_DMA_Start_IT+0x494>)
900048f6:	4293      	cmp	r3, r2
900048f8:	d022      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
900048fa:	68fb      	ldr	r3, [r7, #12]
900048fc:	681b      	ldr	r3, [r3, #0]
900048fe:	4a2a      	ldr	r2, [pc, #168]	; (900049a8 <HAL_DMA_Start_IT+0x498>)
90004900:	4293      	cmp	r3, r2
90004902:	d01d      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
90004904:	68fb      	ldr	r3, [r7, #12]
90004906:	681b      	ldr	r3, [r3, #0]
90004908:	4a28      	ldr	r2, [pc, #160]	; (900049ac <HAL_DMA_Start_IT+0x49c>)
9000490a:	4293      	cmp	r3, r2
9000490c:	d018      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
9000490e:	68fb      	ldr	r3, [r7, #12]
90004910:	681b      	ldr	r3, [r3, #0]
90004912:	4a27      	ldr	r2, [pc, #156]	; (900049b0 <HAL_DMA_Start_IT+0x4a0>)
90004914:	4293      	cmp	r3, r2
90004916:	d013      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
90004918:	68fb      	ldr	r3, [r7, #12]
9000491a:	681b      	ldr	r3, [r3, #0]
9000491c:	4a25      	ldr	r2, [pc, #148]	; (900049b4 <HAL_DMA_Start_IT+0x4a4>)
9000491e:	4293      	cmp	r3, r2
90004920:	d00e      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
90004922:	68fb      	ldr	r3, [r7, #12]
90004924:	681b      	ldr	r3, [r3, #0]
90004926:	4a24      	ldr	r2, [pc, #144]	; (900049b8 <HAL_DMA_Start_IT+0x4a8>)
90004928:	4293      	cmp	r3, r2
9000492a:	d009      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
9000492c:	68fb      	ldr	r3, [r7, #12]
9000492e:	681b      	ldr	r3, [r3, #0]
90004930:	4a22      	ldr	r2, [pc, #136]	; (900049bc <HAL_DMA_Start_IT+0x4ac>)
90004932:	4293      	cmp	r3, r2
90004934:	d004      	beq.n	90004940 <HAL_DMA_Start_IT+0x430>
90004936:	68fb      	ldr	r3, [r7, #12]
90004938:	681b      	ldr	r3, [r3, #0]
9000493a:	4a21      	ldr	r2, [pc, #132]	; (900049c0 <HAL_DMA_Start_IT+0x4b0>)
9000493c:	4293      	cmp	r3, r2
9000493e:	d108      	bne.n	90004952 <HAL_DMA_Start_IT+0x442>
90004940:	68fb      	ldr	r3, [r7, #12]
90004942:	681b      	ldr	r3, [r3, #0]
90004944:	681a      	ldr	r2, [r3, #0]
90004946:	68fb      	ldr	r3, [r7, #12]
90004948:	681b      	ldr	r3, [r3, #0]
9000494a:	f042 0201 	orr.w	r2, r2, #1
9000494e:	601a      	str	r2, [r3, #0]
90004950:	e012      	b.n	90004978 <HAL_DMA_Start_IT+0x468>
90004952:	68fb      	ldr	r3, [r7, #12]
90004954:	681b      	ldr	r3, [r3, #0]
90004956:	681a      	ldr	r2, [r3, #0]
90004958:	68fb      	ldr	r3, [r7, #12]
9000495a:	681b      	ldr	r3, [r3, #0]
9000495c:	f042 0201 	orr.w	r2, r2, #1
90004960:	601a      	str	r2, [r3, #0]
90004962:	e009      	b.n	90004978 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
90004964:	68fb      	ldr	r3, [r7, #12]
90004966:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000496a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
9000496c:	68fb      	ldr	r3, [r7, #12]
9000496e:	2200      	movs	r2, #0
90004970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
90004974:	2301      	movs	r3, #1
90004976:	75fb      	strb	r3, [r7, #23]
  }

  return status;
90004978:	7dfb      	ldrb	r3, [r7, #23]
}
9000497a:	4618      	mov	r0, r3
9000497c:	3718      	adds	r7, #24
9000497e:	46bd      	mov	sp, r7
90004980:	bd80      	pop	{r7, pc}
90004982:	bf00      	nop
90004984:	40020010 	.word	0x40020010
90004988:	40020028 	.word	0x40020028
9000498c:	40020040 	.word	0x40020040
90004990:	40020058 	.word	0x40020058
90004994:	40020070 	.word	0x40020070
90004998:	40020088 	.word	0x40020088
9000499c:	400200a0 	.word	0x400200a0
900049a0:	400200b8 	.word	0x400200b8
900049a4:	40020410 	.word	0x40020410
900049a8:	40020428 	.word	0x40020428
900049ac:	40020440 	.word	0x40020440
900049b0:	40020458 	.word	0x40020458
900049b4:	40020470 	.word	0x40020470
900049b8:	40020488 	.word	0x40020488
900049bc:	400204a0 	.word	0x400204a0
900049c0:	400204b8 	.word	0x400204b8
900049c4:	58025408 	.word	0x58025408
900049c8:	5802541c 	.word	0x5802541c
900049cc:	58025430 	.word	0x58025430
900049d0:	58025444 	.word	0x58025444
900049d4:	58025458 	.word	0x58025458
900049d8:	5802546c 	.word	0x5802546c
900049dc:	58025480 	.word	0x58025480
900049e0:	58025494 	.word	0x58025494

900049e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
900049e4:	b580      	push	{r7, lr}
900049e6:	b086      	sub	sp, #24
900049e8:	af00      	add	r7, sp, #0
900049ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
900049ec:	f7ff f8c0 	bl	90003b70 <HAL_GetTick>
900049f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
900049f2:	687b      	ldr	r3, [r7, #4]
900049f4:	2b00      	cmp	r3, #0
900049f6:	d101      	bne.n	900049fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
900049f8:	2301      	movs	r3, #1
900049fa:	e2dc      	b.n	90004fb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
900049fc:	687b      	ldr	r3, [r7, #4]
900049fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
90004a02:	b2db      	uxtb	r3, r3
90004a04:	2b02      	cmp	r3, #2
90004a06:	d008      	beq.n	90004a1a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90004a08:	687b      	ldr	r3, [r7, #4]
90004a0a:	2280      	movs	r2, #128	; 0x80
90004a0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
90004a0e:	687b      	ldr	r3, [r7, #4]
90004a10:	2200      	movs	r2, #0
90004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
90004a16:	2301      	movs	r3, #1
90004a18:	e2cd      	b.n	90004fb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90004a1a:	687b      	ldr	r3, [r7, #4]
90004a1c:	681b      	ldr	r3, [r3, #0]
90004a1e:	4a76      	ldr	r2, [pc, #472]	; (90004bf8 <HAL_DMA_Abort+0x214>)
90004a20:	4293      	cmp	r3, r2
90004a22:	d04a      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a24:	687b      	ldr	r3, [r7, #4]
90004a26:	681b      	ldr	r3, [r3, #0]
90004a28:	4a74      	ldr	r2, [pc, #464]	; (90004bfc <HAL_DMA_Abort+0x218>)
90004a2a:	4293      	cmp	r3, r2
90004a2c:	d045      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a2e:	687b      	ldr	r3, [r7, #4]
90004a30:	681b      	ldr	r3, [r3, #0]
90004a32:	4a73      	ldr	r2, [pc, #460]	; (90004c00 <HAL_DMA_Abort+0x21c>)
90004a34:	4293      	cmp	r3, r2
90004a36:	d040      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a38:	687b      	ldr	r3, [r7, #4]
90004a3a:	681b      	ldr	r3, [r3, #0]
90004a3c:	4a71      	ldr	r2, [pc, #452]	; (90004c04 <HAL_DMA_Abort+0x220>)
90004a3e:	4293      	cmp	r3, r2
90004a40:	d03b      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a42:	687b      	ldr	r3, [r7, #4]
90004a44:	681b      	ldr	r3, [r3, #0]
90004a46:	4a70      	ldr	r2, [pc, #448]	; (90004c08 <HAL_DMA_Abort+0x224>)
90004a48:	4293      	cmp	r3, r2
90004a4a:	d036      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a4c:	687b      	ldr	r3, [r7, #4]
90004a4e:	681b      	ldr	r3, [r3, #0]
90004a50:	4a6e      	ldr	r2, [pc, #440]	; (90004c0c <HAL_DMA_Abort+0x228>)
90004a52:	4293      	cmp	r3, r2
90004a54:	d031      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a56:	687b      	ldr	r3, [r7, #4]
90004a58:	681b      	ldr	r3, [r3, #0]
90004a5a:	4a6d      	ldr	r2, [pc, #436]	; (90004c10 <HAL_DMA_Abort+0x22c>)
90004a5c:	4293      	cmp	r3, r2
90004a5e:	d02c      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a60:	687b      	ldr	r3, [r7, #4]
90004a62:	681b      	ldr	r3, [r3, #0]
90004a64:	4a6b      	ldr	r2, [pc, #428]	; (90004c14 <HAL_DMA_Abort+0x230>)
90004a66:	4293      	cmp	r3, r2
90004a68:	d027      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a6a:	687b      	ldr	r3, [r7, #4]
90004a6c:	681b      	ldr	r3, [r3, #0]
90004a6e:	4a6a      	ldr	r2, [pc, #424]	; (90004c18 <HAL_DMA_Abort+0x234>)
90004a70:	4293      	cmp	r3, r2
90004a72:	d022      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a74:	687b      	ldr	r3, [r7, #4]
90004a76:	681b      	ldr	r3, [r3, #0]
90004a78:	4a68      	ldr	r2, [pc, #416]	; (90004c1c <HAL_DMA_Abort+0x238>)
90004a7a:	4293      	cmp	r3, r2
90004a7c:	d01d      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a7e:	687b      	ldr	r3, [r7, #4]
90004a80:	681b      	ldr	r3, [r3, #0]
90004a82:	4a67      	ldr	r2, [pc, #412]	; (90004c20 <HAL_DMA_Abort+0x23c>)
90004a84:	4293      	cmp	r3, r2
90004a86:	d018      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a88:	687b      	ldr	r3, [r7, #4]
90004a8a:	681b      	ldr	r3, [r3, #0]
90004a8c:	4a65      	ldr	r2, [pc, #404]	; (90004c24 <HAL_DMA_Abort+0x240>)
90004a8e:	4293      	cmp	r3, r2
90004a90:	d013      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a92:	687b      	ldr	r3, [r7, #4]
90004a94:	681b      	ldr	r3, [r3, #0]
90004a96:	4a64      	ldr	r2, [pc, #400]	; (90004c28 <HAL_DMA_Abort+0x244>)
90004a98:	4293      	cmp	r3, r2
90004a9a:	d00e      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004a9c:	687b      	ldr	r3, [r7, #4]
90004a9e:	681b      	ldr	r3, [r3, #0]
90004aa0:	4a62      	ldr	r2, [pc, #392]	; (90004c2c <HAL_DMA_Abort+0x248>)
90004aa2:	4293      	cmp	r3, r2
90004aa4:	d009      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004aa6:	687b      	ldr	r3, [r7, #4]
90004aa8:	681b      	ldr	r3, [r3, #0]
90004aaa:	4a61      	ldr	r2, [pc, #388]	; (90004c30 <HAL_DMA_Abort+0x24c>)
90004aac:	4293      	cmp	r3, r2
90004aae:	d004      	beq.n	90004aba <HAL_DMA_Abort+0xd6>
90004ab0:	687b      	ldr	r3, [r7, #4]
90004ab2:	681b      	ldr	r3, [r3, #0]
90004ab4:	4a5f      	ldr	r2, [pc, #380]	; (90004c34 <HAL_DMA_Abort+0x250>)
90004ab6:	4293      	cmp	r3, r2
90004ab8:	d101      	bne.n	90004abe <HAL_DMA_Abort+0xda>
90004aba:	2301      	movs	r3, #1
90004abc:	e000      	b.n	90004ac0 <HAL_DMA_Abort+0xdc>
90004abe:	2300      	movs	r3, #0
90004ac0:	2b00      	cmp	r3, #0
90004ac2:	d013      	beq.n	90004aec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
90004ac4:	687b      	ldr	r3, [r7, #4]
90004ac6:	681b      	ldr	r3, [r3, #0]
90004ac8:	681a      	ldr	r2, [r3, #0]
90004aca:	687b      	ldr	r3, [r7, #4]
90004acc:	681b      	ldr	r3, [r3, #0]
90004ace:	f022 021e 	bic.w	r2, r2, #30
90004ad2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
90004ad4:	687b      	ldr	r3, [r7, #4]
90004ad6:	681b      	ldr	r3, [r3, #0]
90004ad8:	695a      	ldr	r2, [r3, #20]
90004ada:	687b      	ldr	r3, [r7, #4]
90004adc:	681b      	ldr	r3, [r3, #0]
90004ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90004ae2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
90004ae4:	687b      	ldr	r3, [r7, #4]
90004ae6:	681b      	ldr	r3, [r3, #0]
90004ae8:	617b      	str	r3, [r7, #20]
90004aea:	e00a      	b.n	90004b02 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90004aec:	687b      	ldr	r3, [r7, #4]
90004aee:	681b      	ldr	r3, [r3, #0]
90004af0:	681a      	ldr	r2, [r3, #0]
90004af2:	687b      	ldr	r3, [r7, #4]
90004af4:	681b      	ldr	r3, [r3, #0]
90004af6:	f022 020e 	bic.w	r2, r2, #14
90004afa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
90004afc:	687b      	ldr	r3, [r7, #4]
90004afe:	681b      	ldr	r3, [r3, #0]
90004b00:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90004b02:	687b      	ldr	r3, [r7, #4]
90004b04:	681b      	ldr	r3, [r3, #0]
90004b06:	4a3c      	ldr	r2, [pc, #240]	; (90004bf8 <HAL_DMA_Abort+0x214>)
90004b08:	4293      	cmp	r3, r2
90004b0a:	d072      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b0c:	687b      	ldr	r3, [r7, #4]
90004b0e:	681b      	ldr	r3, [r3, #0]
90004b10:	4a3a      	ldr	r2, [pc, #232]	; (90004bfc <HAL_DMA_Abort+0x218>)
90004b12:	4293      	cmp	r3, r2
90004b14:	d06d      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b16:	687b      	ldr	r3, [r7, #4]
90004b18:	681b      	ldr	r3, [r3, #0]
90004b1a:	4a39      	ldr	r2, [pc, #228]	; (90004c00 <HAL_DMA_Abort+0x21c>)
90004b1c:	4293      	cmp	r3, r2
90004b1e:	d068      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b20:	687b      	ldr	r3, [r7, #4]
90004b22:	681b      	ldr	r3, [r3, #0]
90004b24:	4a37      	ldr	r2, [pc, #220]	; (90004c04 <HAL_DMA_Abort+0x220>)
90004b26:	4293      	cmp	r3, r2
90004b28:	d063      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b2a:	687b      	ldr	r3, [r7, #4]
90004b2c:	681b      	ldr	r3, [r3, #0]
90004b2e:	4a36      	ldr	r2, [pc, #216]	; (90004c08 <HAL_DMA_Abort+0x224>)
90004b30:	4293      	cmp	r3, r2
90004b32:	d05e      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b34:	687b      	ldr	r3, [r7, #4]
90004b36:	681b      	ldr	r3, [r3, #0]
90004b38:	4a34      	ldr	r2, [pc, #208]	; (90004c0c <HAL_DMA_Abort+0x228>)
90004b3a:	4293      	cmp	r3, r2
90004b3c:	d059      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b3e:	687b      	ldr	r3, [r7, #4]
90004b40:	681b      	ldr	r3, [r3, #0]
90004b42:	4a33      	ldr	r2, [pc, #204]	; (90004c10 <HAL_DMA_Abort+0x22c>)
90004b44:	4293      	cmp	r3, r2
90004b46:	d054      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b48:	687b      	ldr	r3, [r7, #4]
90004b4a:	681b      	ldr	r3, [r3, #0]
90004b4c:	4a31      	ldr	r2, [pc, #196]	; (90004c14 <HAL_DMA_Abort+0x230>)
90004b4e:	4293      	cmp	r3, r2
90004b50:	d04f      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b52:	687b      	ldr	r3, [r7, #4]
90004b54:	681b      	ldr	r3, [r3, #0]
90004b56:	4a30      	ldr	r2, [pc, #192]	; (90004c18 <HAL_DMA_Abort+0x234>)
90004b58:	4293      	cmp	r3, r2
90004b5a:	d04a      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b5c:	687b      	ldr	r3, [r7, #4]
90004b5e:	681b      	ldr	r3, [r3, #0]
90004b60:	4a2e      	ldr	r2, [pc, #184]	; (90004c1c <HAL_DMA_Abort+0x238>)
90004b62:	4293      	cmp	r3, r2
90004b64:	d045      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b66:	687b      	ldr	r3, [r7, #4]
90004b68:	681b      	ldr	r3, [r3, #0]
90004b6a:	4a2d      	ldr	r2, [pc, #180]	; (90004c20 <HAL_DMA_Abort+0x23c>)
90004b6c:	4293      	cmp	r3, r2
90004b6e:	d040      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b70:	687b      	ldr	r3, [r7, #4]
90004b72:	681b      	ldr	r3, [r3, #0]
90004b74:	4a2b      	ldr	r2, [pc, #172]	; (90004c24 <HAL_DMA_Abort+0x240>)
90004b76:	4293      	cmp	r3, r2
90004b78:	d03b      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b7a:	687b      	ldr	r3, [r7, #4]
90004b7c:	681b      	ldr	r3, [r3, #0]
90004b7e:	4a2a      	ldr	r2, [pc, #168]	; (90004c28 <HAL_DMA_Abort+0x244>)
90004b80:	4293      	cmp	r3, r2
90004b82:	d036      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b84:	687b      	ldr	r3, [r7, #4]
90004b86:	681b      	ldr	r3, [r3, #0]
90004b88:	4a28      	ldr	r2, [pc, #160]	; (90004c2c <HAL_DMA_Abort+0x248>)
90004b8a:	4293      	cmp	r3, r2
90004b8c:	d031      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b8e:	687b      	ldr	r3, [r7, #4]
90004b90:	681b      	ldr	r3, [r3, #0]
90004b92:	4a27      	ldr	r2, [pc, #156]	; (90004c30 <HAL_DMA_Abort+0x24c>)
90004b94:	4293      	cmp	r3, r2
90004b96:	d02c      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004b98:	687b      	ldr	r3, [r7, #4]
90004b9a:	681b      	ldr	r3, [r3, #0]
90004b9c:	4a25      	ldr	r2, [pc, #148]	; (90004c34 <HAL_DMA_Abort+0x250>)
90004b9e:	4293      	cmp	r3, r2
90004ba0:	d027      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004ba2:	687b      	ldr	r3, [r7, #4]
90004ba4:	681b      	ldr	r3, [r3, #0]
90004ba6:	4a24      	ldr	r2, [pc, #144]	; (90004c38 <HAL_DMA_Abort+0x254>)
90004ba8:	4293      	cmp	r3, r2
90004baa:	d022      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004bac:	687b      	ldr	r3, [r7, #4]
90004bae:	681b      	ldr	r3, [r3, #0]
90004bb0:	4a22      	ldr	r2, [pc, #136]	; (90004c3c <HAL_DMA_Abort+0x258>)
90004bb2:	4293      	cmp	r3, r2
90004bb4:	d01d      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004bb6:	687b      	ldr	r3, [r7, #4]
90004bb8:	681b      	ldr	r3, [r3, #0]
90004bba:	4a21      	ldr	r2, [pc, #132]	; (90004c40 <HAL_DMA_Abort+0x25c>)
90004bbc:	4293      	cmp	r3, r2
90004bbe:	d018      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004bc0:	687b      	ldr	r3, [r7, #4]
90004bc2:	681b      	ldr	r3, [r3, #0]
90004bc4:	4a1f      	ldr	r2, [pc, #124]	; (90004c44 <HAL_DMA_Abort+0x260>)
90004bc6:	4293      	cmp	r3, r2
90004bc8:	d013      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004bca:	687b      	ldr	r3, [r7, #4]
90004bcc:	681b      	ldr	r3, [r3, #0]
90004bce:	4a1e      	ldr	r2, [pc, #120]	; (90004c48 <HAL_DMA_Abort+0x264>)
90004bd0:	4293      	cmp	r3, r2
90004bd2:	d00e      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004bd4:	687b      	ldr	r3, [r7, #4]
90004bd6:	681b      	ldr	r3, [r3, #0]
90004bd8:	4a1c      	ldr	r2, [pc, #112]	; (90004c4c <HAL_DMA_Abort+0x268>)
90004bda:	4293      	cmp	r3, r2
90004bdc:	d009      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004bde:	687b      	ldr	r3, [r7, #4]
90004be0:	681b      	ldr	r3, [r3, #0]
90004be2:	4a1b      	ldr	r2, [pc, #108]	; (90004c50 <HAL_DMA_Abort+0x26c>)
90004be4:	4293      	cmp	r3, r2
90004be6:	d004      	beq.n	90004bf2 <HAL_DMA_Abort+0x20e>
90004be8:	687b      	ldr	r3, [r7, #4]
90004bea:	681b      	ldr	r3, [r3, #0]
90004bec:	4a19      	ldr	r2, [pc, #100]	; (90004c54 <HAL_DMA_Abort+0x270>)
90004bee:	4293      	cmp	r3, r2
90004bf0:	d132      	bne.n	90004c58 <HAL_DMA_Abort+0x274>
90004bf2:	2301      	movs	r3, #1
90004bf4:	e031      	b.n	90004c5a <HAL_DMA_Abort+0x276>
90004bf6:	bf00      	nop
90004bf8:	40020010 	.word	0x40020010
90004bfc:	40020028 	.word	0x40020028
90004c00:	40020040 	.word	0x40020040
90004c04:	40020058 	.word	0x40020058
90004c08:	40020070 	.word	0x40020070
90004c0c:	40020088 	.word	0x40020088
90004c10:	400200a0 	.word	0x400200a0
90004c14:	400200b8 	.word	0x400200b8
90004c18:	40020410 	.word	0x40020410
90004c1c:	40020428 	.word	0x40020428
90004c20:	40020440 	.word	0x40020440
90004c24:	40020458 	.word	0x40020458
90004c28:	40020470 	.word	0x40020470
90004c2c:	40020488 	.word	0x40020488
90004c30:	400204a0 	.word	0x400204a0
90004c34:	400204b8 	.word	0x400204b8
90004c38:	58025408 	.word	0x58025408
90004c3c:	5802541c 	.word	0x5802541c
90004c40:	58025430 	.word	0x58025430
90004c44:	58025444 	.word	0x58025444
90004c48:	58025458 	.word	0x58025458
90004c4c:	5802546c 	.word	0x5802546c
90004c50:	58025480 	.word	0x58025480
90004c54:	58025494 	.word	0x58025494
90004c58:	2300      	movs	r3, #0
90004c5a:	2b00      	cmp	r3, #0
90004c5c:	d007      	beq.n	90004c6e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
90004c5e:	687b      	ldr	r3, [r7, #4]
90004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90004c62:	681a      	ldr	r2, [r3, #0]
90004c64:	687b      	ldr	r3, [r7, #4]
90004c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90004c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90004c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
90004c6e:	687b      	ldr	r3, [r7, #4]
90004c70:	681b      	ldr	r3, [r3, #0]
90004c72:	4a6d      	ldr	r2, [pc, #436]	; (90004e28 <HAL_DMA_Abort+0x444>)
90004c74:	4293      	cmp	r3, r2
90004c76:	d04a      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004c78:	687b      	ldr	r3, [r7, #4]
90004c7a:	681b      	ldr	r3, [r3, #0]
90004c7c:	4a6b      	ldr	r2, [pc, #428]	; (90004e2c <HAL_DMA_Abort+0x448>)
90004c7e:	4293      	cmp	r3, r2
90004c80:	d045      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004c82:	687b      	ldr	r3, [r7, #4]
90004c84:	681b      	ldr	r3, [r3, #0]
90004c86:	4a6a      	ldr	r2, [pc, #424]	; (90004e30 <HAL_DMA_Abort+0x44c>)
90004c88:	4293      	cmp	r3, r2
90004c8a:	d040      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004c8c:	687b      	ldr	r3, [r7, #4]
90004c8e:	681b      	ldr	r3, [r3, #0]
90004c90:	4a68      	ldr	r2, [pc, #416]	; (90004e34 <HAL_DMA_Abort+0x450>)
90004c92:	4293      	cmp	r3, r2
90004c94:	d03b      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004c96:	687b      	ldr	r3, [r7, #4]
90004c98:	681b      	ldr	r3, [r3, #0]
90004c9a:	4a67      	ldr	r2, [pc, #412]	; (90004e38 <HAL_DMA_Abort+0x454>)
90004c9c:	4293      	cmp	r3, r2
90004c9e:	d036      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004ca0:	687b      	ldr	r3, [r7, #4]
90004ca2:	681b      	ldr	r3, [r3, #0]
90004ca4:	4a65      	ldr	r2, [pc, #404]	; (90004e3c <HAL_DMA_Abort+0x458>)
90004ca6:	4293      	cmp	r3, r2
90004ca8:	d031      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004caa:	687b      	ldr	r3, [r7, #4]
90004cac:	681b      	ldr	r3, [r3, #0]
90004cae:	4a64      	ldr	r2, [pc, #400]	; (90004e40 <HAL_DMA_Abort+0x45c>)
90004cb0:	4293      	cmp	r3, r2
90004cb2:	d02c      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004cb4:	687b      	ldr	r3, [r7, #4]
90004cb6:	681b      	ldr	r3, [r3, #0]
90004cb8:	4a62      	ldr	r2, [pc, #392]	; (90004e44 <HAL_DMA_Abort+0x460>)
90004cba:	4293      	cmp	r3, r2
90004cbc:	d027      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004cbe:	687b      	ldr	r3, [r7, #4]
90004cc0:	681b      	ldr	r3, [r3, #0]
90004cc2:	4a61      	ldr	r2, [pc, #388]	; (90004e48 <HAL_DMA_Abort+0x464>)
90004cc4:	4293      	cmp	r3, r2
90004cc6:	d022      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004cc8:	687b      	ldr	r3, [r7, #4]
90004cca:	681b      	ldr	r3, [r3, #0]
90004ccc:	4a5f      	ldr	r2, [pc, #380]	; (90004e4c <HAL_DMA_Abort+0x468>)
90004cce:	4293      	cmp	r3, r2
90004cd0:	d01d      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004cd2:	687b      	ldr	r3, [r7, #4]
90004cd4:	681b      	ldr	r3, [r3, #0]
90004cd6:	4a5e      	ldr	r2, [pc, #376]	; (90004e50 <HAL_DMA_Abort+0x46c>)
90004cd8:	4293      	cmp	r3, r2
90004cda:	d018      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004cdc:	687b      	ldr	r3, [r7, #4]
90004cde:	681b      	ldr	r3, [r3, #0]
90004ce0:	4a5c      	ldr	r2, [pc, #368]	; (90004e54 <HAL_DMA_Abort+0x470>)
90004ce2:	4293      	cmp	r3, r2
90004ce4:	d013      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004ce6:	687b      	ldr	r3, [r7, #4]
90004ce8:	681b      	ldr	r3, [r3, #0]
90004cea:	4a5b      	ldr	r2, [pc, #364]	; (90004e58 <HAL_DMA_Abort+0x474>)
90004cec:	4293      	cmp	r3, r2
90004cee:	d00e      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004cf0:	687b      	ldr	r3, [r7, #4]
90004cf2:	681b      	ldr	r3, [r3, #0]
90004cf4:	4a59      	ldr	r2, [pc, #356]	; (90004e5c <HAL_DMA_Abort+0x478>)
90004cf6:	4293      	cmp	r3, r2
90004cf8:	d009      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004cfa:	687b      	ldr	r3, [r7, #4]
90004cfc:	681b      	ldr	r3, [r3, #0]
90004cfe:	4a58      	ldr	r2, [pc, #352]	; (90004e60 <HAL_DMA_Abort+0x47c>)
90004d00:	4293      	cmp	r3, r2
90004d02:	d004      	beq.n	90004d0e <HAL_DMA_Abort+0x32a>
90004d04:	687b      	ldr	r3, [r7, #4]
90004d06:	681b      	ldr	r3, [r3, #0]
90004d08:	4a56      	ldr	r2, [pc, #344]	; (90004e64 <HAL_DMA_Abort+0x480>)
90004d0a:	4293      	cmp	r3, r2
90004d0c:	d108      	bne.n	90004d20 <HAL_DMA_Abort+0x33c>
90004d0e:	687b      	ldr	r3, [r7, #4]
90004d10:	681b      	ldr	r3, [r3, #0]
90004d12:	681a      	ldr	r2, [r3, #0]
90004d14:	687b      	ldr	r3, [r7, #4]
90004d16:	681b      	ldr	r3, [r3, #0]
90004d18:	f022 0201 	bic.w	r2, r2, #1
90004d1c:	601a      	str	r2, [r3, #0]
90004d1e:	e007      	b.n	90004d30 <HAL_DMA_Abort+0x34c>
90004d20:	687b      	ldr	r3, [r7, #4]
90004d22:	681b      	ldr	r3, [r3, #0]
90004d24:	681a      	ldr	r2, [r3, #0]
90004d26:	687b      	ldr	r3, [r7, #4]
90004d28:	681b      	ldr	r3, [r3, #0]
90004d2a:	f022 0201 	bic.w	r2, r2, #1
90004d2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
90004d30:	e013      	b.n	90004d5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90004d32:	f7fe ff1d 	bl	90003b70 <HAL_GetTick>
90004d36:	4602      	mov	r2, r0
90004d38:	693b      	ldr	r3, [r7, #16]
90004d3a:	1ad3      	subs	r3, r2, r3
90004d3c:	2b05      	cmp	r3, #5
90004d3e:	d90c      	bls.n	90004d5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90004d40:	687b      	ldr	r3, [r7, #4]
90004d42:	2220      	movs	r2, #32
90004d44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
90004d46:	687b      	ldr	r3, [r7, #4]
90004d48:	2203      	movs	r2, #3
90004d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
90004d4e:	687b      	ldr	r3, [r7, #4]
90004d50:	2200      	movs	r2, #0
90004d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
90004d56:	2301      	movs	r3, #1
90004d58:	e12d      	b.n	90004fb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
90004d5a:	697b      	ldr	r3, [r7, #20]
90004d5c:	681b      	ldr	r3, [r3, #0]
90004d5e:	f003 0301 	and.w	r3, r3, #1
90004d62:	2b00      	cmp	r3, #0
90004d64:	d1e5      	bne.n	90004d32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90004d66:	687b      	ldr	r3, [r7, #4]
90004d68:	681b      	ldr	r3, [r3, #0]
90004d6a:	4a2f      	ldr	r2, [pc, #188]	; (90004e28 <HAL_DMA_Abort+0x444>)
90004d6c:	4293      	cmp	r3, r2
90004d6e:	d04a      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004d70:	687b      	ldr	r3, [r7, #4]
90004d72:	681b      	ldr	r3, [r3, #0]
90004d74:	4a2d      	ldr	r2, [pc, #180]	; (90004e2c <HAL_DMA_Abort+0x448>)
90004d76:	4293      	cmp	r3, r2
90004d78:	d045      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004d7a:	687b      	ldr	r3, [r7, #4]
90004d7c:	681b      	ldr	r3, [r3, #0]
90004d7e:	4a2c      	ldr	r2, [pc, #176]	; (90004e30 <HAL_DMA_Abort+0x44c>)
90004d80:	4293      	cmp	r3, r2
90004d82:	d040      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004d84:	687b      	ldr	r3, [r7, #4]
90004d86:	681b      	ldr	r3, [r3, #0]
90004d88:	4a2a      	ldr	r2, [pc, #168]	; (90004e34 <HAL_DMA_Abort+0x450>)
90004d8a:	4293      	cmp	r3, r2
90004d8c:	d03b      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004d8e:	687b      	ldr	r3, [r7, #4]
90004d90:	681b      	ldr	r3, [r3, #0]
90004d92:	4a29      	ldr	r2, [pc, #164]	; (90004e38 <HAL_DMA_Abort+0x454>)
90004d94:	4293      	cmp	r3, r2
90004d96:	d036      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004d98:	687b      	ldr	r3, [r7, #4]
90004d9a:	681b      	ldr	r3, [r3, #0]
90004d9c:	4a27      	ldr	r2, [pc, #156]	; (90004e3c <HAL_DMA_Abort+0x458>)
90004d9e:	4293      	cmp	r3, r2
90004da0:	d031      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004da2:	687b      	ldr	r3, [r7, #4]
90004da4:	681b      	ldr	r3, [r3, #0]
90004da6:	4a26      	ldr	r2, [pc, #152]	; (90004e40 <HAL_DMA_Abort+0x45c>)
90004da8:	4293      	cmp	r3, r2
90004daa:	d02c      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004dac:	687b      	ldr	r3, [r7, #4]
90004dae:	681b      	ldr	r3, [r3, #0]
90004db0:	4a24      	ldr	r2, [pc, #144]	; (90004e44 <HAL_DMA_Abort+0x460>)
90004db2:	4293      	cmp	r3, r2
90004db4:	d027      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004db6:	687b      	ldr	r3, [r7, #4]
90004db8:	681b      	ldr	r3, [r3, #0]
90004dba:	4a23      	ldr	r2, [pc, #140]	; (90004e48 <HAL_DMA_Abort+0x464>)
90004dbc:	4293      	cmp	r3, r2
90004dbe:	d022      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004dc0:	687b      	ldr	r3, [r7, #4]
90004dc2:	681b      	ldr	r3, [r3, #0]
90004dc4:	4a21      	ldr	r2, [pc, #132]	; (90004e4c <HAL_DMA_Abort+0x468>)
90004dc6:	4293      	cmp	r3, r2
90004dc8:	d01d      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004dca:	687b      	ldr	r3, [r7, #4]
90004dcc:	681b      	ldr	r3, [r3, #0]
90004dce:	4a20      	ldr	r2, [pc, #128]	; (90004e50 <HAL_DMA_Abort+0x46c>)
90004dd0:	4293      	cmp	r3, r2
90004dd2:	d018      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004dd4:	687b      	ldr	r3, [r7, #4]
90004dd6:	681b      	ldr	r3, [r3, #0]
90004dd8:	4a1e      	ldr	r2, [pc, #120]	; (90004e54 <HAL_DMA_Abort+0x470>)
90004dda:	4293      	cmp	r3, r2
90004ddc:	d013      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004dde:	687b      	ldr	r3, [r7, #4]
90004de0:	681b      	ldr	r3, [r3, #0]
90004de2:	4a1d      	ldr	r2, [pc, #116]	; (90004e58 <HAL_DMA_Abort+0x474>)
90004de4:	4293      	cmp	r3, r2
90004de6:	d00e      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004de8:	687b      	ldr	r3, [r7, #4]
90004dea:	681b      	ldr	r3, [r3, #0]
90004dec:	4a1b      	ldr	r2, [pc, #108]	; (90004e5c <HAL_DMA_Abort+0x478>)
90004dee:	4293      	cmp	r3, r2
90004df0:	d009      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004df2:	687b      	ldr	r3, [r7, #4]
90004df4:	681b      	ldr	r3, [r3, #0]
90004df6:	4a1a      	ldr	r2, [pc, #104]	; (90004e60 <HAL_DMA_Abort+0x47c>)
90004df8:	4293      	cmp	r3, r2
90004dfa:	d004      	beq.n	90004e06 <HAL_DMA_Abort+0x422>
90004dfc:	687b      	ldr	r3, [r7, #4]
90004dfe:	681b      	ldr	r3, [r3, #0]
90004e00:	4a18      	ldr	r2, [pc, #96]	; (90004e64 <HAL_DMA_Abort+0x480>)
90004e02:	4293      	cmp	r3, r2
90004e04:	d101      	bne.n	90004e0a <HAL_DMA_Abort+0x426>
90004e06:	2301      	movs	r3, #1
90004e08:	e000      	b.n	90004e0c <HAL_DMA_Abort+0x428>
90004e0a:	2300      	movs	r3, #0
90004e0c:	2b00      	cmp	r3, #0
90004e0e:	d02b      	beq.n	90004e68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90004e10:	687b      	ldr	r3, [r7, #4]
90004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90004e14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
90004e16:	687b      	ldr	r3, [r7, #4]
90004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90004e1a:	f003 031f 	and.w	r3, r3, #31
90004e1e:	223f      	movs	r2, #63	; 0x3f
90004e20:	409a      	lsls	r2, r3
90004e22:	68bb      	ldr	r3, [r7, #8]
90004e24:	609a      	str	r2, [r3, #8]
90004e26:	e02a      	b.n	90004e7e <HAL_DMA_Abort+0x49a>
90004e28:	40020010 	.word	0x40020010
90004e2c:	40020028 	.word	0x40020028
90004e30:	40020040 	.word	0x40020040
90004e34:	40020058 	.word	0x40020058
90004e38:	40020070 	.word	0x40020070
90004e3c:	40020088 	.word	0x40020088
90004e40:	400200a0 	.word	0x400200a0
90004e44:	400200b8 	.word	0x400200b8
90004e48:	40020410 	.word	0x40020410
90004e4c:	40020428 	.word	0x40020428
90004e50:	40020440 	.word	0x40020440
90004e54:	40020458 	.word	0x40020458
90004e58:	40020470 	.word	0x40020470
90004e5c:	40020488 	.word	0x40020488
90004e60:	400204a0 	.word	0x400204a0
90004e64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
90004e68:	687b      	ldr	r3, [r7, #4]
90004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90004e6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
90004e6e:	687b      	ldr	r3, [r7, #4]
90004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90004e72:	f003 031f 	and.w	r3, r3, #31
90004e76:	2201      	movs	r2, #1
90004e78:	409a      	lsls	r2, r3
90004e7a:	68fb      	ldr	r3, [r7, #12]
90004e7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90004e7e:	687b      	ldr	r3, [r7, #4]
90004e80:	681b      	ldr	r3, [r3, #0]
90004e82:	4a4f      	ldr	r2, [pc, #316]	; (90004fc0 <HAL_DMA_Abort+0x5dc>)
90004e84:	4293      	cmp	r3, r2
90004e86:	d072      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004e88:	687b      	ldr	r3, [r7, #4]
90004e8a:	681b      	ldr	r3, [r3, #0]
90004e8c:	4a4d      	ldr	r2, [pc, #308]	; (90004fc4 <HAL_DMA_Abort+0x5e0>)
90004e8e:	4293      	cmp	r3, r2
90004e90:	d06d      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004e92:	687b      	ldr	r3, [r7, #4]
90004e94:	681b      	ldr	r3, [r3, #0]
90004e96:	4a4c      	ldr	r2, [pc, #304]	; (90004fc8 <HAL_DMA_Abort+0x5e4>)
90004e98:	4293      	cmp	r3, r2
90004e9a:	d068      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004e9c:	687b      	ldr	r3, [r7, #4]
90004e9e:	681b      	ldr	r3, [r3, #0]
90004ea0:	4a4a      	ldr	r2, [pc, #296]	; (90004fcc <HAL_DMA_Abort+0x5e8>)
90004ea2:	4293      	cmp	r3, r2
90004ea4:	d063      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004ea6:	687b      	ldr	r3, [r7, #4]
90004ea8:	681b      	ldr	r3, [r3, #0]
90004eaa:	4a49      	ldr	r2, [pc, #292]	; (90004fd0 <HAL_DMA_Abort+0x5ec>)
90004eac:	4293      	cmp	r3, r2
90004eae:	d05e      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004eb0:	687b      	ldr	r3, [r7, #4]
90004eb2:	681b      	ldr	r3, [r3, #0]
90004eb4:	4a47      	ldr	r2, [pc, #284]	; (90004fd4 <HAL_DMA_Abort+0x5f0>)
90004eb6:	4293      	cmp	r3, r2
90004eb8:	d059      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004eba:	687b      	ldr	r3, [r7, #4]
90004ebc:	681b      	ldr	r3, [r3, #0]
90004ebe:	4a46      	ldr	r2, [pc, #280]	; (90004fd8 <HAL_DMA_Abort+0x5f4>)
90004ec0:	4293      	cmp	r3, r2
90004ec2:	d054      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004ec4:	687b      	ldr	r3, [r7, #4]
90004ec6:	681b      	ldr	r3, [r3, #0]
90004ec8:	4a44      	ldr	r2, [pc, #272]	; (90004fdc <HAL_DMA_Abort+0x5f8>)
90004eca:	4293      	cmp	r3, r2
90004ecc:	d04f      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004ece:	687b      	ldr	r3, [r7, #4]
90004ed0:	681b      	ldr	r3, [r3, #0]
90004ed2:	4a43      	ldr	r2, [pc, #268]	; (90004fe0 <HAL_DMA_Abort+0x5fc>)
90004ed4:	4293      	cmp	r3, r2
90004ed6:	d04a      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004ed8:	687b      	ldr	r3, [r7, #4]
90004eda:	681b      	ldr	r3, [r3, #0]
90004edc:	4a41      	ldr	r2, [pc, #260]	; (90004fe4 <HAL_DMA_Abort+0x600>)
90004ede:	4293      	cmp	r3, r2
90004ee0:	d045      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004ee2:	687b      	ldr	r3, [r7, #4]
90004ee4:	681b      	ldr	r3, [r3, #0]
90004ee6:	4a40      	ldr	r2, [pc, #256]	; (90004fe8 <HAL_DMA_Abort+0x604>)
90004ee8:	4293      	cmp	r3, r2
90004eea:	d040      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004eec:	687b      	ldr	r3, [r7, #4]
90004eee:	681b      	ldr	r3, [r3, #0]
90004ef0:	4a3e      	ldr	r2, [pc, #248]	; (90004fec <HAL_DMA_Abort+0x608>)
90004ef2:	4293      	cmp	r3, r2
90004ef4:	d03b      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004ef6:	687b      	ldr	r3, [r7, #4]
90004ef8:	681b      	ldr	r3, [r3, #0]
90004efa:	4a3d      	ldr	r2, [pc, #244]	; (90004ff0 <HAL_DMA_Abort+0x60c>)
90004efc:	4293      	cmp	r3, r2
90004efe:	d036      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f00:	687b      	ldr	r3, [r7, #4]
90004f02:	681b      	ldr	r3, [r3, #0]
90004f04:	4a3b      	ldr	r2, [pc, #236]	; (90004ff4 <HAL_DMA_Abort+0x610>)
90004f06:	4293      	cmp	r3, r2
90004f08:	d031      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f0a:	687b      	ldr	r3, [r7, #4]
90004f0c:	681b      	ldr	r3, [r3, #0]
90004f0e:	4a3a      	ldr	r2, [pc, #232]	; (90004ff8 <HAL_DMA_Abort+0x614>)
90004f10:	4293      	cmp	r3, r2
90004f12:	d02c      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f14:	687b      	ldr	r3, [r7, #4]
90004f16:	681b      	ldr	r3, [r3, #0]
90004f18:	4a38      	ldr	r2, [pc, #224]	; (90004ffc <HAL_DMA_Abort+0x618>)
90004f1a:	4293      	cmp	r3, r2
90004f1c:	d027      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f1e:	687b      	ldr	r3, [r7, #4]
90004f20:	681b      	ldr	r3, [r3, #0]
90004f22:	4a37      	ldr	r2, [pc, #220]	; (90005000 <HAL_DMA_Abort+0x61c>)
90004f24:	4293      	cmp	r3, r2
90004f26:	d022      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f28:	687b      	ldr	r3, [r7, #4]
90004f2a:	681b      	ldr	r3, [r3, #0]
90004f2c:	4a35      	ldr	r2, [pc, #212]	; (90005004 <HAL_DMA_Abort+0x620>)
90004f2e:	4293      	cmp	r3, r2
90004f30:	d01d      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f32:	687b      	ldr	r3, [r7, #4]
90004f34:	681b      	ldr	r3, [r3, #0]
90004f36:	4a34      	ldr	r2, [pc, #208]	; (90005008 <HAL_DMA_Abort+0x624>)
90004f38:	4293      	cmp	r3, r2
90004f3a:	d018      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f3c:	687b      	ldr	r3, [r7, #4]
90004f3e:	681b      	ldr	r3, [r3, #0]
90004f40:	4a32      	ldr	r2, [pc, #200]	; (9000500c <HAL_DMA_Abort+0x628>)
90004f42:	4293      	cmp	r3, r2
90004f44:	d013      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f46:	687b      	ldr	r3, [r7, #4]
90004f48:	681b      	ldr	r3, [r3, #0]
90004f4a:	4a31      	ldr	r2, [pc, #196]	; (90005010 <HAL_DMA_Abort+0x62c>)
90004f4c:	4293      	cmp	r3, r2
90004f4e:	d00e      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f50:	687b      	ldr	r3, [r7, #4]
90004f52:	681b      	ldr	r3, [r3, #0]
90004f54:	4a2f      	ldr	r2, [pc, #188]	; (90005014 <HAL_DMA_Abort+0x630>)
90004f56:	4293      	cmp	r3, r2
90004f58:	d009      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f5a:	687b      	ldr	r3, [r7, #4]
90004f5c:	681b      	ldr	r3, [r3, #0]
90004f5e:	4a2e      	ldr	r2, [pc, #184]	; (90005018 <HAL_DMA_Abort+0x634>)
90004f60:	4293      	cmp	r3, r2
90004f62:	d004      	beq.n	90004f6e <HAL_DMA_Abort+0x58a>
90004f64:	687b      	ldr	r3, [r7, #4]
90004f66:	681b      	ldr	r3, [r3, #0]
90004f68:	4a2c      	ldr	r2, [pc, #176]	; (9000501c <HAL_DMA_Abort+0x638>)
90004f6a:	4293      	cmp	r3, r2
90004f6c:	d101      	bne.n	90004f72 <HAL_DMA_Abort+0x58e>
90004f6e:	2301      	movs	r3, #1
90004f70:	e000      	b.n	90004f74 <HAL_DMA_Abort+0x590>
90004f72:	2300      	movs	r3, #0
90004f74:	2b00      	cmp	r3, #0
90004f76:	d015      	beq.n	90004fa4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
90004f78:	687b      	ldr	r3, [r7, #4]
90004f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90004f7c:	687a      	ldr	r2, [r7, #4]
90004f7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
90004f80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
90004f82:	687b      	ldr	r3, [r7, #4]
90004f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90004f86:	2b00      	cmp	r3, #0
90004f88:	d00c      	beq.n	90004fa4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
90004f8a:	687b      	ldr	r3, [r7, #4]
90004f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90004f8e:	681a      	ldr	r2, [r3, #0]
90004f90:	687b      	ldr	r3, [r7, #4]
90004f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90004f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90004f98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
90004f9a:	687b      	ldr	r3, [r7, #4]
90004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90004f9e:	687a      	ldr	r2, [r7, #4]
90004fa0:	6f52      	ldr	r2, [r2, #116]	; 0x74
90004fa2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
90004fa4:	687b      	ldr	r3, [r7, #4]
90004fa6:	2201      	movs	r2, #1
90004fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
90004fac:	687b      	ldr	r3, [r7, #4]
90004fae:	2200      	movs	r2, #0
90004fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
90004fb4:	2300      	movs	r3, #0
}
90004fb6:	4618      	mov	r0, r3
90004fb8:	3718      	adds	r7, #24
90004fba:	46bd      	mov	sp, r7
90004fbc:	bd80      	pop	{r7, pc}
90004fbe:	bf00      	nop
90004fc0:	40020010 	.word	0x40020010
90004fc4:	40020028 	.word	0x40020028
90004fc8:	40020040 	.word	0x40020040
90004fcc:	40020058 	.word	0x40020058
90004fd0:	40020070 	.word	0x40020070
90004fd4:	40020088 	.word	0x40020088
90004fd8:	400200a0 	.word	0x400200a0
90004fdc:	400200b8 	.word	0x400200b8
90004fe0:	40020410 	.word	0x40020410
90004fe4:	40020428 	.word	0x40020428
90004fe8:	40020440 	.word	0x40020440
90004fec:	40020458 	.word	0x40020458
90004ff0:	40020470 	.word	0x40020470
90004ff4:	40020488 	.word	0x40020488
90004ff8:	400204a0 	.word	0x400204a0
90004ffc:	400204b8 	.word	0x400204b8
90005000:	58025408 	.word	0x58025408
90005004:	5802541c 	.word	0x5802541c
90005008:	58025430 	.word	0x58025430
9000500c:	58025444 	.word	0x58025444
90005010:	58025458 	.word	0x58025458
90005014:	5802546c 	.word	0x5802546c
90005018:	58025480 	.word	0x58025480
9000501c:	58025494 	.word	0x58025494

90005020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
90005020:	b580      	push	{r7, lr}
90005022:	b084      	sub	sp, #16
90005024:	af00      	add	r7, sp, #0
90005026:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
90005028:	687b      	ldr	r3, [r7, #4]
9000502a:	2b00      	cmp	r3, #0
9000502c:	d101      	bne.n	90005032 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
9000502e:	2301      	movs	r3, #1
90005030:	e237      	b.n	900054a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
90005032:	687b      	ldr	r3, [r7, #4]
90005034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
90005038:	b2db      	uxtb	r3, r3
9000503a:	2b02      	cmp	r3, #2
9000503c:	d004      	beq.n	90005048 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
9000503e:	687b      	ldr	r3, [r7, #4]
90005040:	2280      	movs	r2, #128	; 0x80
90005042:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
90005044:	2301      	movs	r3, #1
90005046:	e22c      	b.n	900054a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90005048:	687b      	ldr	r3, [r7, #4]
9000504a:	681b      	ldr	r3, [r3, #0]
9000504c:	4a5c      	ldr	r2, [pc, #368]	; (900051c0 <HAL_DMA_Abort_IT+0x1a0>)
9000504e:	4293      	cmp	r3, r2
90005050:	d04a      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
90005052:	687b      	ldr	r3, [r7, #4]
90005054:	681b      	ldr	r3, [r3, #0]
90005056:	4a5b      	ldr	r2, [pc, #364]	; (900051c4 <HAL_DMA_Abort_IT+0x1a4>)
90005058:	4293      	cmp	r3, r2
9000505a:	d045      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
9000505c:	687b      	ldr	r3, [r7, #4]
9000505e:	681b      	ldr	r3, [r3, #0]
90005060:	4a59      	ldr	r2, [pc, #356]	; (900051c8 <HAL_DMA_Abort_IT+0x1a8>)
90005062:	4293      	cmp	r3, r2
90005064:	d040      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
90005066:	687b      	ldr	r3, [r7, #4]
90005068:	681b      	ldr	r3, [r3, #0]
9000506a:	4a58      	ldr	r2, [pc, #352]	; (900051cc <HAL_DMA_Abort_IT+0x1ac>)
9000506c:	4293      	cmp	r3, r2
9000506e:	d03b      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
90005070:	687b      	ldr	r3, [r7, #4]
90005072:	681b      	ldr	r3, [r3, #0]
90005074:	4a56      	ldr	r2, [pc, #344]	; (900051d0 <HAL_DMA_Abort_IT+0x1b0>)
90005076:	4293      	cmp	r3, r2
90005078:	d036      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
9000507a:	687b      	ldr	r3, [r7, #4]
9000507c:	681b      	ldr	r3, [r3, #0]
9000507e:	4a55      	ldr	r2, [pc, #340]	; (900051d4 <HAL_DMA_Abort_IT+0x1b4>)
90005080:	4293      	cmp	r3, r2
90005082:	d031      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
90005084:	687b      	ldr	r3, [r7, #4]
90005086:	681b      	ldr	r3, [r3, #0]
90005088:	4a53      	ldr	r2, [pc, #332]	; (900051d8 <HAL_DMA_Abort_IT+0x1b8>)
9000508a:	4293      	cmp	r3, r2
9000508c:	d02c      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
9000508e:	687b      	ldr	r3, [r7, #4]
90005090:	681b      	ldr	r3, [r3, #0]
90005092:	4a52      	ldr	r2, [pc, #328]	; (900051dc <HAL_DMA_Abort_IT+0x1bc>)
90005094:	4293      	cmp	r3, r2
90005096:	d027      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
90005098:	687b      	ldr	r3, [r7, #4]
9000509a:	681b      	ldr	r3, [r3, #0]
9000509c:	4a50      	ldr	r2, [pc, #320]	; (900051e0 <HAL_DMA_Abort_IT+0x1c0>)
9000509e:	4293      	cmp	r3, r2
900050a0:	d022      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
900050a2:	687b      	ldr	r3, [r7, #4]
900050a4:	681b      	ldr	r3, [r3, #0]
900050a6:	4a4f      	ldr	r2, [pc, #316]	; (900051e4 <HAL_DMA_Abort_IT+0x1c4>)
900050a8:	4293      	cmp	r3, r2
900050aa:	d01d      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
900050ac:	687b      	ldr	r3, [r7, #4]
900050ae:	681b      	ldr	r3, [r3, #0]
900050b0:	4a4d      	ldr	r2, [pc, #308]	; (900051e8 <HAL_DMA_Abort_IT+0x1c8>)
900050b2:	4293      	cmp	r3, r2
900050b4:	d018      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
900050b6:	687b      	ldr	r3, [r7, #4]
900050b8:	681b      	ldr	r3, [r3, #0]
900050ba:	4a4c      	ldr	r2, [pc, #304]	; (900051ec <HAL_DMA_Abort_IT+0x1cc>)
900050bc:	4293      	cmp	r3, r2
900050be:	d013      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
900050c0:	687b      	ldr	r3, [r7, #4]
900050c2:	681b      	ldr	r3, [r3, #0]
900050c4:	4a4a      	ldr	r2, [pc, #296]	; (900051f0 <HAL_DMA_Abort_IT+0x1d0>)
900050c6:	4293      	cmp	r3, r2
900050c8:	d00e      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
900050ca:	687b      	ldr	r3, [r7, #4]
900050cc:	681b      	ldr	r3, [r3, #0]
900050ce:	4a49      	ldr	r2, [pc, #292]	; (900051f4 <HAL_DMA_Abort_IT+0x1d4>)
900050d0:	4293      	cmp	r3, r2
900050d2:	d009      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
900050d4:	687b      	ldr	r3, [r7, #4]
900050d6:	681b      	ldr	r3, [r3, #0]
900050d8:	4a47      	ldr	r2, [pc, #284]	; (900051f8 <HAL_DMA_Abort_IT+0x1d8>)
900050da:	4293      	cmp	r3, r2
900050dc:	d004      	beq.n	900050e8 <HAL_DMA_Abort_IT+0xc8>
900050de:	687b      	ldr	r3, [r7, #4]
900050e0:	681b      	ldr	r3, [r3, #0]
900050e2:	4a46      	ldr	r2, [pc, #280]	; (900051fc <HAL_DMA_Abort_IT+0x1dc>)
900050e4:	4293      	cmp	r3, r2
900050e6:	d101      	bne.n	900050ec <HAL_DMA_Abort_IT+0xcc>
900050e8:	2301      	movs	r3, #1
900050ea:	e000      	b.n	900050ee <HAL_DMA_Abort_IT+0xce>
900050ec:	2300      	movs	r3, #0
900050ee:	2b00      	cmp	r3, #0
900050f0:	f000 8086 	beq.w	90005200 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
900050f4:	687b      	ldr	r3, [r7, #4]
900050f6:	2204      	movs	r2, #4
900050f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
900050fc:	687b      	ldr	r3, [r7, #4]
900050fe:	681b      	ldr	r3, [r3, #0]
90005100:	4a2f      	ldr	r2, [pc, #188]	; (900051c0 <HAL_DMA_Abort_IT+0x1a0>)
90005102:	4293      	cmp	r3, r2
90005104:	d04a      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005106:	687b      	ldr	r3, [r7, #4]
90005108:	681b      	ldr	r3, [r3, #0]
9000510a:	4a2e      	ldr	r2, [pc, #184]	; (900051c4 <HAL_DMA_Abort_IT+0x1a4>)
9000510c:	4293      	cmp	r3, r2
9000510e:	d045      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005110:	687b      	ldr	r3, [r7, #4]
90005112:	681b      	ldr	r3, [r3, #0]
90005114:	4a2c      	ldr	r2, [pc, #176]	; (900051c8 <HAL_DMA_Abort_IT+0x1a8>)
90005116:	4293      	cmp	r3, r2
90005118:	d040      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
9000511a:	687b      	ldr	r3, [r7, #4]
9000511c:	681b      	ldr	r3, [r3, #0]
9000511e:	4a2b      	ldr	r2, [pc, #172]	; (900051cc <HAL_DMA_Abort_IT+0x1ac>)
90005120:	4293      	cmp	r3, r2
90005122:	d03b      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005124:	687b      	ldr	r3, [r7, #4]
90005126:	681b      	ldr	r3, [r3, #0]
90005128:	4a29      	ldr	r2, [pc, #164]	; (900051d0 <HAL_DMA_Abort_IT+0x1b0>)
9000512a:	4293      	cmp	r3, r2
9000512c:	d036      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
9000512e:	687b      	ldr	r3, [r7, #4]
90005130:	681b      	ldr	r3, [r3, #0]
90005132:	4a28      	ldr	r2, [pc, #160]	; (900051d4 <HAL_DMA_Abort_IT+0x1b4>)
90005134:	4293      	cmp	r3, r2
90005136:	d031      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005138:	687b      	ldr	r3, [r7, #4]
9000513a:	681b      	ldr	r3, [r3, #0]
9000513c:	4a26      	ldr	r2, [pc, #152]	; (900051d8 <HAL_DMA_Abort_IT+0x1b8>)
9000513e:	4293      	cmp	r3, r2
90005140:	d02c      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005142:	687b      	ldr	r3, [r7, #4]
90005144:	681b      	ldr	r3, [r3, #0]
90005146:	4a25      	ldr	r2, [pc, #148]	; (900051dc <HAL_DMA_Abort_IT+0x1bc>)
90005148:	4293      	cmp	r3, r2
9000514a:	d027      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
9000514c:	687b      	ldr	r3, [r7, #4]
9000514e:	681b      	ldr	r3, [r3, #0]
90005150:	4a23      	ldr	r2, [pc, #140]	; (900051e0 <HAL_DMA_Abort_IT+0x1c0>)
90005152:	4293      	cmp	r3, r2
90005154:	d022      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005156:	687b      	ldr	r3, [r7, #4]
90005158:	681b      	ldr	r3, [r3, #0]
9000515a:	4a22      	ldr	r2, [pc, #136]	; (900051e4 <HAL_DMA_Abort_IT+0x1c4>)
9000515c:	4293      	cmp	r3, r2
9000515e:	d01d      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005160:	687b      	ldr	r3, [r7, #4]
90005162:	681b      	ldr	r3, [r3, #0]
90005164:	4a20      	ldr	r2, [pc, #128]	; (900051e8 <HAL_DMA_Abort_IT+0x1c8>)
90005166:	4293      	cmp	r3, r2
90005168:	d018      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
9000516a:	687b      	ldr	r3, [r7, #4]
9000516c:	681b      	ldr	r3, [r3, #0]
9000516e:	4a1f      	ldr	r2, [pc, #124]	; (900051ec <HAL_DMA_Abort_IT+0x1cc>)
90005170:	4293      	cmp	r3, r2
90005172:	d013      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005174:	687b      	ldr	r3, [r7, #4]
90005176:	681b      	ldr	r3, [r3, #0]
90005178:	4a1d      	ldr	r2, [pc, #116]	; (900051f0 <HAL_DMA_Abort_IT+0x1d0>)
9000517a:	4293      	cmp	r3, r2
9000517c:	d00e      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
9000517e:	687b      	ldr	r3, [r7, #4]
90005180:	681b      	ldr	r3, [r3, #0]
90005182:	4a1c      	ldr	r2, [pc, #112]	; (900051f4 <HAL_DMA_Abort_IT+0x1d4>)
90005184:	4293      	cmp	r3, r2
90005186:	d009      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005188:	687b      	ldr	r3, [r7, #4]
9000518a:	681b      	ldr	r3, [r3, #0]
9000518c:	4a1a      	ldr	r2, [pc, #104]	; (900051f8 <HAL_DMA_Abort_IT+0x1d8>)
9000518e:	4293      	cmp	r3, r2
90005190:	d004      	beq.n	9000519c <HAL_DMA_Abort_IT+0x17c>
90005192:	687b      	ldr	r3, [r7, #4]
90005194:	681b      	ldr	r3, [r3, #0]
90005196:	4a19      	ldr	r2, [pc, #100]	; (900051fc <HAL_DMA_Abort_IT+0x1dc>)
90005198:	4293      	cmp	r3, r2
9000519a:	d108      	bne.n	900051ae <HAL_DMA_Abort_IT+0x18e>
9000519c:	687b      	ldr	r3, [r7, #4]
9000519e:	681b      	ldr	r3, [r3, #0]
900051a0:	681a      	ldr	r2, [r3, #0]
900051a2:	687b      	ldr	r3, [r7, #4]
900051a4:	681b      	ldr	r3, [r3, #0]
900051a6:	f022 0201 	bic.w	r2, r2, #1
900051aa:	601a      	str	r2, [r3, #0]
900051ac:	e178      	b.n	900054a0 <HAL_DMA_Abort_IT+0x480>
900051ae:	687b      	ldr	r3, [r7, #4]
900051b0:	681b      	ldr	r3, [r3, #0]
900051b2:	681a      	ldr	r2, [r3, #0]
900051b4:	687b      	ldr	r3, [r7, #4]
900051b6:	681b      	ldr	r3, [r3, #0]
900051b8:	f022 0201 	bic.w	r2, r2, #1
900051bc:	601a      	str	r2, [r3, #0]
900051be:	e16f      	b.n	900054a0 <HAL_DMA_Abort_IT+0x480>
900051c0:	40020010 	.word	0x40020010
900051c4:	40020028 	.word	0x40020028
900051c8:	40020040 	.word	0x40020040
900051cc:	40020058 	.word	0x40020058
900051d0:	40020070 	.word	0x40020070
900051d4:	40020088 	.word	0x40020088
900051d8:	400200a0 	.word	0x400200a0
900051dc:	400200b8 	.word	0x400200b8
900051e0:	40020410 	.word	0x40020410
900051e4:	40020428 	.word	0x40020428
900051e8:	40020440 	.word	0x40020440
900051ec:	40020458 	.word	0x40020458
900051f0:	40020470 	.word	0x40020470
900051f4:	40020488 	.word	0x40020488
900051f8:	400204a0 	.word	0x400204a0
900051fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90005200:	687b      	ldr	r3, [r7, #4]
90005202:	681b      	ldr	r3, [r3, #0]
90005204:	681a      	ldr	r2, [r3, #0]
90005206:	687b      	ldr	r3, [r7, #4]
90005208:	681b      	ldr	r3, [r3, #0]
9000520a:	f022 020e 	bic.w	r2, r2, #14
9000520e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
90005210:	687b      	ldr	r3, [r7, #4]
90005212:	681b      	ldr	r3, [r3, #0]
90005214:	4a6c      	ldr	r2, [pc, #432]	; (900053c8 <HAL_DMA_Abort_IT+0x3a8>)
90005216:	4293      	cmp	r3, r2
90005218:	d04a      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
9000521a:	687b      	ldr	r3, [r7, #4]
9000521c:	681b      	ldr	r3, [r3, #0]
9000521e:	4a6b      	ldr	r2, [pc, #428]	; (900053cc <HAL_DMA_Abort_IT+0x3ac>)
90005220:	4293      	cmp	r3, r2
90005222:	d045      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
90005224:	687b      	ldr	r3, [r7, #4]
90005226:	681b      	ldr	r3, [r3, #0]
90005228:	4a69      	ldr	r2, [pc, #420]	; (900053d0 <HAL_DMA_Abort_IT+0x3b0>)
9000522a:	4293      	cmp	r3, r2
9000522c:	d040      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
9000522e:	687b      	ldr	r3, [r7, #4]
90005230:	681b      	ldr	r3, [r3, #0]
90005232:	4a68      	ldr	r2, [pc, #416]	; (900053d4 <HAL_DMA_Abort_IT+0x3b4>)
90005234:	4293      	cmp	r3, r2
90005236:	d03b      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
90005238:	687b      	ldr	r3, [r7, #4]
9000523a:	681b      	ldr	r3, [r3, #0]
9000523c:	4a66      	ldr	r2, [pc, #408]	; (900053d8 <HAL_DMA_Abort_IT+0x3b8>)
9000523e:	4293      	cmp	r3, r2
90005240:	d036      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
90005242:	687b      	ldr	r3, [r7, #4]
90005244:	681b      	ldr	r3, [r3, #0]
90005246:	4a65      	ldr	r2, [pc, #404]	; (900053dc <HAL_DMA_Abort_IT+0x3bc>)
90005248:	4293      	cmp	r3, r2
9000524a:	d031      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
9000524c:	687b      	ldr	r3, [r7, #4]
9000524e:	681b      	ldr	r3, [r3, #0]
90005250:	4a63      	ldr	r2, [pc, #396]	; (900053e0 <HAL_DMA_Abort_IT+0x3c0>)
90005252:	4293      	cmp	r3, r2
90005254:	d02c      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
90005256:	687b      	ldr	r3, [r7, #4]
90005258:	681b      	ldr	r3, [r3, #0]
9000525a:	4a62      	ldr	r2, [pc, #392]	; (900053e4 <HAL_DMA_Abort_IT+0x3c4>)
9000525c:	4293      	cmp	r3, r2
9000525e:	d027      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
90005260:	687b      	ldr	r3, [r7, #4]
90005262:	681b      	ldr	r3, [r3, #0]
90005264:	4a60      	ldr	r2, [pc, #384]	; (900053e8 <HAL_DMA_Abort_IT+0x3c8>)
90005266:	4293      	cmp	r3, r2
90005268:	d022      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
9000526a:	687b      	ldr	r3, [r7, #4]
9000526c:	681b      	ldr	r3, [r3, #0]
9000526e:	4a5f      	ldr	r2, [pc, #380]	; (900053ec <HAL_DMA_Abort_IT+0x3cc>)
90005270:	4293      	cmp	r3, r2
90005272:	d01d      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
90005274:	687b      	ldr	r3, [r7, #4]
90005276:	681b      	ldr	r3, [r3, #0]
90005278:	4a5d      	ldr	r2, [pc, #372]	; (900053f0 <HAL_DMA_Abort_IT+0x3d0>)
9000527a:	4293      	cmp	r3, r2
9000527c:	d018      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
9000527e:	687b      	ldr	r3, [r7, #4]
90005280:	681b      	ldr	r3, [r3, #0]
90005282:	4a5c      	ldr	r2, [pc, #368]	; (900053f4 <HAL_DMA_Abort_IT+0x3d4>)
90005284:	4293      	cmp	r3, r2
90005286:	d013      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
90005288:	687b      	ldr	r3, [r7, #4]
9000528a:	681b      	ldr	r3, [r3, #0]
9000528c:	4a5a      	ldr	r2, [pc, #360]	; (900053f8 <HAL_DMA_Abort_IT+0x3d8>)
9000528e:	4293      	cmp	r3, r2
90005290:	d00e      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
90005292:	687b      	ldr	r3, [r7, #4]
90005294:	681b      	ldr	r3, [r3, #0]
90005296:	4a59      	ldr	r2, [pc, #356]	; (900053fc <HAL_DMA_Abort_IT+0x3dc>)
90005298:	4293      	cmp	r3, r2
9000529a:	d009      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
9000529c:	687b      	ldr	r3, [r7, #4]
9000529e:	681b      	ldr	r3, [r3, #0]
900052a0:	4a57      	ldr	r2, [pc, #348]	; (90005400 <HAL_DMA_Abort_IT+0x3e0>)
900052a2:	4293      	cmp	r3, r2
900052a4:	d004      	beq.n	900052b0 <HAL_DMA_Abort_IT+0x290>
900052a6:	687b      	ldr	r3, [r7, #4]
900052a8:	681b      	ldr	r3, [r3, #0]
900052aa:	4a56      	ldr	r2, [pc, #344]	; (90005404 <HAL_DMA_Abort_IT+0x3e4>)
900052ac:	4293      	cmp	r3, r2
900052ae:	d108      	bne.n	900052c2 <HAL_DMA_Abort_IT+0x2a2>
900052b0:	687b      	ldr	r3, [r7, #4]
900052b2:	681b      	ldr	r3, [r3, #0]
900052b4:	681a      	ldr	r2, [r3, #0]
900052b6:	687b      	ldr	r3, [r7, #4]
900052b8:	681b      	ldr	r3, [r3, #0]
900052ba:	f022 0201 	bic.w	r2, r2, #1
900052be:	601a      	str	r2, [r3, #0]
900052c0:	e007      	b.n	900052d2 <HAL_DMA_Abort_IT+0x2b2>
900052c2:	687b      	ldr	r3, [r7, #4]
900052c4:	681b      	ldr	r3, [r3, #0]
900052c6:	681a      	ldr	r2, [r3, #0]
900052c8:	687b      	ldr	r3, [r7, #4]
900052ca:	681b      	ldr	r3, [r3, #0]
900052cc:	f022 0201 	bic.w	r2, r2, #1
900052d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
900052d2:	687b      	ldr	r3, [r7, #4]
900052d4:	681b      	ldr	r3, [r3, #0]
900052d6:	4a3c      	ldr	r2, [pc, #240]	; (900053c8 <HAL_DMA_Abort_IT+0x3a8>)
900052d8:	4293      	cmp	r3, r2
900052da:	d072      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
900052dc:	687b      	ldr	r3, [r7, #4]
900052de:	681b      	ldr	r3, [r3, #0]
900052e0:	4a3a      	ldr	r2, [pc, #232]	; (900053cc <HAL_DMA_Abort_IT+0x3ac>)
900052e2:	4293      	cmp	r3, r2
900052e4:	d06d      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
900052e6:	687b      	ldr	r3, [r7, #4]
900052e8:	681b      	ldr	r3, [r3, #0]
900052ea:	4a39      	ldr	r2, [pc, #228]	; (900053d0 <HAL_DMA_Abort_IT+0x3b0>)
900052ec:	4293      	cmp	r3, r2
900052ee:	d068      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
900052f0:	687b      	ldr	r3, [r7, #4]
900052f2:	681b      	ldr	r3, [r3, #0]
900052f4:	4a37      	ldr	r2, [pc, #220]	; (900053d4 <HAL_DMA_Abort_IT+0x3b4>)
900052f6:	4293      	cmp	r3, r2
900052f8:	d063      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
900052fa:	687b      	ldr	r3, [r7, #4]
900052fc:	681b      	ldr	r3, [r3, #0]
900052fe:	4a36      	ldr	r2, [pc, #216]	; (900053d8 <HAL_DMA_Abort_IT+0x3b8>)
90005300:	4293      	cmp	r3, r2
90005302:	d05e      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005304:	687b      	ldr	r3, [r7, #4]
90005306:	681b      	ldr	r3, [r3, #0]
90005308:	4a34      	ldr	r2, [pc, #208]	; (900053dc <HAL_DMA_Abort_IT+0x3bc>)
9000530a:	4293      	cmp	r3, r2
9000530c:	d059      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
9000530e:	687b      	ldr	r3, [r7, #4]
90005310:	681b      	ldr	r3, [r3, #0]
90005312:	4a33      	ldr	r2, [pc, #204]	; (900053e0 <HAL_DMA_Abort_IT+0x3c0>)
90005314:	4293      	cmp	r3, r2
90005316:	d054      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005318:	687b      	ldr	r3, [r7, #4]
9000531a:	681b      	ldr	r3, [r3, #0]
9000531c:	4a31      	ldr	r2, [pc, #196]	; (900053e4 <HAL_DMA_Abort_IT+0x3c4>)
9000531e:	4293      	cmp	r3, r2
90005320:	d04f      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005322:	687b      	ldr	r3, [r7, #4]
90005324:	681b      	ldr	r3, [r3, #0]
90005326:	4a30      	ldr	r2, [pc, #192]	; (900053e8 <HAL_DMA_Abort_IT+0x3c8>)
90005328:	4293      	cmp	r3, r2
9000532a:	d04a      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
9000532c:	687b      	ldr	r3, [r7, #4]
9000532e:	681b      	ldr	r3, [r3, #0]
90005330:	4a2e      	ldr	r2, [pc, #184]	; (900053ec <HAL_DMA_Abort_IT+0x3cc>)
90005332:	4293      	cmp	r3, r2
90005334:	d045      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005336:	687b      	ldr	r3, [r7, #4]
90005338:	681b      	ldr	r3, [r3, #0]
9000533a:	4a2d      	ldr	r2, [pc, #180]	; (900053f0 <HAL_DMA_Abort_IT+0x3d0>)
9000533c:	4293      	cmp	r3, r2
9000533e:	d040      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005340:	687b      	ldr	r3, [r7, #4]
90005342:	681b      	ldr	r3, [r3, #0]
90005344:	4a2b      	ldr	r2, [pc, #172]	; (900053f4 <HAL_DMA_Abort_IT+0x3d4>)
90005346:	4293      	cmp	r3, r2
90005348:	d03b      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
9000534a:	687b      	ldr	r3, [r7, #4]
9000534c:	681b      	ldr	r3, [r3, #0]
9000534e:	4a2a      	ldr	r2, [pc, #168]	; (900053f8 <HAL_DMA_Abort_IT+0x3d8>)
90005350:	4293      	cmp	r3, r2
90005352:	d036      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005354:	687b      	ldr	r3, [r7, #4]
90005356:	681b      	ldr	r3, [r3, #0]
90005358:	4a28      	ldr	r2, [pc, #160]	; (900053fc <HAL_DMA_Abort_IT+0x3dc>)
9000535a:	4293      	cmp	r3, r2
9000535c:	d031      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
9000535e:	687b      	ldr	r3, [r7, #4]
90005360:	681b      	ldr	r3, [r3, #0]
90005362:	4a27      	ldr	r2, [pc, #156]	; (90005400 <HAL_DMA_Abort_IT+0x3e0>)
90005364:	4293      	cmp	r3, r2
90005366:	d02c      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005368:	687b      	ldr	r3, [r7, #4]
9000536a:	681b      	ldr	r3, [r3, #0]
9000536c:	4a25      	ldr	r2, [pc, #148]	; (90005404 <HAL_DMA_Abort_IT+0x3e4>)
9000536e:	4293      	cmp	r3, r2
90005370:	d027      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005372:	687b      	ldr	r3, [r7, #4]
90005374:	681b      	ldr	r3, [r3, #0]
90005376:	4a24      	ldr	r2, [pc, #144]	; (90005408 <HAL_DMA_Abort_IT+0x3e8>)
90005378:	4293      	cmp	r3, r2
9000537a:	d022      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
9000537c:	687b      	ldr	r3, [r7, #4]
9000537e:	681b      	ldr	r3, [r3, #0]
90005380:	4a22      	ldr	r2, [pc, #136]	; (9000540c <HAL_DMA_Abort_IT+0x3ec>)
90005382:	4293      	cmp	r3, r2
90005384:	d01d      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005386:	687b      	ldr	r3, [r7, #4]
90005388:	681b      	ldr	r3, [r3, #0]
9000538a:	4a21      	ldr	r2, [pc, #132]	; (90005410 <HAL_DMA_Abort_IT+0x3f0>)
9000538c:	4293      	cmp	r3, r2
9000538e:	d018      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
90005390:	687b      	ldr	r3, [r7, #4]
90005392:	681b      	ldr	r3, [r3, #0]
90005394:	4a1f      	ldr	r2, [pc, #124]	; (90005414 <HAL_DMA_Abort_IT+0x3f4>)
90005396:	4293      	cmp	r3, r2
90005398:	d013      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
9000539a:	687b      	ldr	r3, [r7, #4]
9000539c:	681b      	ldr	r3, [r3, #0]
9000539e:	4a1e      	ldr	r2, [pc, #120]	; (90005418 <HAL_DMA_Abort_IT+0x3f8>)
900053a0:	4293      	cmp	r3, r2
900053a2:	d00e      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
900053a4:	687b      	ldr	r3, [r7, #4]
900053a6:	681b      	ldr	r3, [r3, #0]
900053a8:	4a1c      	ldr	r2, [pc, #112]	; (9000541c <HAL_DMA_Abort_IT+0x3fc>)
900053aa:	4293      	cmp	r3, r2
900053ac:	d009      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
900053ae:	687b      	ldr	r3, [r7, #4]
900053b0:	681b      	ldr	r3, [r3, #0]
900053b2:	4a1b      	ldr	r2, [pc, #108]	; (90005420 <HAL_DMA_Abort_IT+0x400>)
900053b4:	4293      	cmp	r3, r2
900053b6:	d004      	beq.n	900053c2 <HAL_DMA_Abort_IT+0x3a2>
900053b8:	687b      	ldr	r3, [r7, #4]
900053ba:	681b      	ldr	r3, [r3, #0]
900053bc:	4a19      	ldr	r2, [pc, #100]	; (90005424 <HAL_DMA_Abort_IT+0x404>)
900053be:	4293      	cmp	r3, r2
900053c0:	d132      	bne.n	90005428 <HAL_DMA_Abort_IT+0x408>
900053c2:	2301      	movs	r3, #1
900053c4:	e031      	b.n	9000542a <HAL_DMA_Abort_IT+0x40a>
900053c6:	bf00      	nop
900053c8:	40020010 	.word	0x40020010
900053cc:	40020028 	.word	0x40020028
900053d0:	40020040 	.word	0x40020040
900053d4:	40020058 	.word	0x40020058
900053d8:	40020070 	.word	0x40020070
900053dc:	40020088 	.word	0x40020088
900053e0:	400200a0 	.word	0x400200a0
900053e4:	400200b8 	.word	0x400200b8
900053e8:	40020410 	.word	0x40020410
900053ec:	40020428 	.word	0x40020428
900053f0:	40020440 	.word	0x40020440
900053f4:	40020458 	.word	0x40020458
900053f8:	40020470 	.word	0x40020470
900053fc:	40020488 	.word	0x40020488
90005400:	400204a0 	.word	0x400204a0
90005404:	400204b8 	.word	0x400204b8
90005408:	58025408 	.word	0x58025408
9000540c:	5802541c 	.word	0x5802541c
90005410:	58025430 	.word	0x58025430
90005414:	58025444 	.word	0x58025444
90005418:	58025458 	.word	0x58025458
9000541c:	5802546c 	.word	0x5802546c
90005420:	58025480 	.word	0x58025480
90005424:	58025494 	.word	0x58025494
90005428:	2300      	movs	r3, #0
9000542a:	2b00      	cmp	r3, #0
9000542c:	d028      	beq.n	90005480 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
9000542e:	687b      	ldr	r3, [r7, #4]
90005430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005432:	681a      	ldr	r2, [r3, #0]
90005434:	687b      	ldr	r3, [r7, #4]
90005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90005438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000543c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
9000543e:	687b      	ldr	r3, [r7, #4]
90005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005442:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
90005444:	687b      	ldr	r3, [r7, #4]
90005446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005448:	f003 031f 	and.w	r3, r3, #31
9000544c:	2201      	movs	r2, #1
9000544e:	409a      	lsls	r2, r3
90005450:	68fb      	ldr	r3, [r7, #12]
90005452:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
90005454:	687b      	ldr	r3, [r7, #4]
90005456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90005458:	687a      	ldr	r2, [r7, #4]
9000545a:	6e92      	ldr	r2, [r2, #104]	; 0x68
9000545c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
9000545e:	687b      	ldr	r3, [r7, #4]
90005460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90005462:	2b00      	cmp	r3, #0
90005464:	d00c      	beq.n	90005480 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
90005466:	687b      	ldr	r3, [r7, #4]
90005468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000546a:	681a      	ldr	r2, [r3, #0]
9000546c:	687b      	ldr	r3, [r7, #4]
9000546e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90005470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90005474:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
90005476:	687b      	ldr	r3, [r7, #4]
90005478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000547a:	687a      	ldr	r2, [r7, #4]
9000547c:	6f52      	ldr	r2, [r2, #116]	; 0x74
9000547e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
90005480:	687b      	ldr	r3, [r7, #4]
90005482:	2201      	movs	r2, #1
90005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
90005488:	687b      	ldr	r3, [r7, #4]
9000548a:	2200      	movs	r2, #0
9000548c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
90005490:	687b      	ldr	r3, [r7, #4]
90005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005494:	2b00      	cmp	r3, #0
90005496:	d003      	beq.n	900054a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
90005498:	687b      	ldr	r3, [r7, #4]
9000549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000549c:	6878      	ldr	r0, [r7, #4]
9000549e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
900054a0:	2300      	movs	r3, #0
}
900054a2:	4618      	mov	r0, r3
900054a4:	3710      	adds	r7, #16
900054a6:	46bd      	mov	sp, r7
900054a8:	bd80      	pop	{r7, pc}
900054aa:	bf00      	nop

900054ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
900054ac:	b580      	push	{r7, lr}
900054ae:	b08a      	sub	sp, #40	; 0x28
900054b0:	af00      	add	r7, sp, #0
900054b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
900054b4:	2300      	movs	r3, #0
900054b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
900054b8:	4b67      	ldr	r3, [pc, #412]	; (90005658 <HAL_DMA_IRQHandler+0x1ac>)
900054ba:	681b      	ldr	r3, [r3, #0]
900054bc:	4a67      	ldr	r2, [pc, #412]	; (9000565c <HAL_DMA_IRQHandler+0x1b0>)
900054be:	fba2 2303 	umull	r2, r3, r2, r3
900054c2:	0a9b      	lsrs	r3, r3, #10
900054c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
900054c6:	687b      	ldr	r3, [r7, #4]
900054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900054ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
900054cc:	687b      	ldr	r3, [r7, #4]
900054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900054d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
900054d2:	6a3b      	ldr	r3, [r7, #32]
900054d4:	681b      	ldr	r3, [r3, #0]
900054d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
900054d8:	69fb      	ldr	r3, [r7, #28]
900054da:	681b      	ldr	r3, [r3, #0]
900054dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
900054de:	687b      	ldr	r3, [r7, #4]
900054e0:	681b      	ldr	r3, [r3, #0]
900054e2:	4a5f      	ldr	r2, [pc, #380]	; (90005660 <HAL_DMA_IRQHandler+0x1b4>)
900054e4:	4293      	cmp	r3, r2
900054e6:	d04a      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
900054e8:	687b      	ldr	r3, [r7, #4]
900054ea:	681b      	ldr	r3, [r3, #0]
900054ec:	4a5d      	ldr	r2, [pc, #372]	; (90005664 <HAL_DMA_IRQHandler+0x1b8>)
900054ee:	4293      	cmp	r3, r2
900054f0:	d045      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
900054f2:	687b      	ldr	r3, [r7, #4]
900054f4:	681b      	ldr	r3, [r3, #0]
900054f6:	4a5c      	ldr	r2, [pc, #368]	; (90005668 <HAL_DMA_IRQHandler+0x1bc>)
900054f8:	4293      	cmp	r3, r2
900054fa:	d040      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
900054fc:	687b      	ldr	r3, [r7, #4]
900054fe:	681b      	ldr	r3, [r3, #0]
90005500:	4a5a      	ldr	r2, [pc, #360]	; (9000566c <HAL_DMA_IRQHandler+0x1c0>)
90005502:	4293      	cmp	r3, r2
90005504:	d03b      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
90005506:	687b      	ldr	r3, [r7, #4]
90005508:	681b      	ldr	r3, [r3, #0]
9000550a:	4a59      	ldr	r2, [pc, #356]	; (90005670 <HAL_DMA_IRQHandler+0x1c4>)
9000550c:	4293      	cmp	r3, r2
9000550e:	d036      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
90005510:	687b      	ldr	r3, [r7, #4]
90005512:	681b      	ldr	r3, [r3, #0]
90005514:	4a57      	ldr	r2, [pc, #348]	; (90005674 <HAL_DMA_IRQHandler+0x1c8>)
90005516:	4293      	cmp	r3, r2
90005518:	d031      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
9000551a:	687b      	ldr	r3, [r7, #4]
9000551c:	681b      	ldr	r3, [r3, #0]
9000551e:	4a56      	ldr	r2, [pc, #344]	; (90005678 <HAL_DMA_IRQHandler+0x1cc>)
90005520:	4293      	cmp	r3, r2
90005522:	d02c      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
90005524:	687b      	ldr	r3, [r7, #4]
90005526:	681b      	ldr	r3, [r3, #0]
90005528:	4a54      	ldr	r2, [pc, #336]	; (9000567c <HAL_DMA_IRQHandler+0x1d0>)
9000552a:	4293      	cmp	r3, r2
9000552c:	d027      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
9000552e:	687b      	ldr	r3, [r7, #4]
90005530:	681b      	ldr	r3, [r3, #0]
90005532:	4a53      	ldr	r2, [pc, #332]	; (90005680 <HAL_DMA_IRQHandler+0x1d4>)
90005534:	4293      	cmp	r3, r2
90005536:	d022      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
90005538:	687b      	ldr	r3, [r7, #4]
9000553a:	681b      	ldr	r3, [r3, #0]
9000553c:	4a51      	ldr	r2, [pc, #324]	; (90005684 <HAL_DMA_IRQHandler+0x1d8>)
9000553e:	4293      	cmp	r3, r2
90005540:	d01d      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
90005542:	687b      	ldr	r3, [r7, #4]
90005544:	681b      	ldr	r3, [r3, #0]
90005546:	4a50      	ldr	r2, [pc, #320]	; (90005688 <HAL_DMA_IRQHandler+0x1dc>)
90005548:	4293      	cmp	r3, r2
9000554a:	d018      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
9000554c:	687b      	ldr	r3, [r7, #4]
9000554e:	681b      	ldr	r3, [r3, #0]
90005550:	4a4e      	ldr	r2, [pc, #312]	; (9000568c <HAL_DMA_IRQHandler+0x1e0>)
90005552:	4293      	cmp	r3, r2
90005554:	d013      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
90005556:	687b      	ldr	r3, [r7, #4]
90005558:	681b      	ldr	r3, [r3, #0]
9000555a:	4a4d      	ldr	r2, [pc, #308]	; (90005690 <HAL_DMA_IRQHandler+0x1e4>)
9000555c:	4293      	cmp	r3, r2
9000555e:	d00e      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
90005560:	687b      	ldr	r3, [r7, #4]
90005562:	681b      	ldr	r3, [r3, #0]
90005564:	4a4b      	ldr	r2, [pc, #300]	; (90005694 <HAL_DMA_IRQHandler+0x1e8>)
90005566:	4293      	cmp	r3, r2
90005568:	d009      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
9000556a:	687b      	ldr	r3, [r7, #4]
9000556c:	681b      	ldr	r3, [r3, #0]
9000556e:	4a4a      	ldr	r2, [pc, #296]	; (90005698 <HAL_DMA_IRQHandler+0x1ec>)
90005570:	4293      	cmp	r3, r2
90005572:	d004      	beq.n	9000557e <HAL_DMA_IRQHandler+0xd2>
90005574:	687b      	ldr	r3, [r7, #4]
90005576:	681b      	ldr	r3, [r3, #0]
90005578:	4a48      	ldr	r2, [pc, #288]	; (9000569c <HAL_DMA_IRQHandler+0x1f0>)
9000557a:	4293      	cmp	r3, r2
9000557c:	d101      	bne.n	90005582 <HAL_DMA_IRQHandler+0xd6>
9000557e:	2301      	movs	r3, #1
90005580:	e000      	b.n	90005584 <HAL_DMA_IRQHandler+0xd8>
90005582:	2300      	movs	r3, #0
90005584:	2b00      	cmp	r3, #0
90005586:	f000 842b 	beq.w	90005de0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
9000558a:	687b      	ldr	r3, [r7, #4]
9000558c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000558e:	f003 031f 	and.w	r3, r3, #31
90005592:	2208      	movs	r2, #8
90005594:	409a      	lsls	r2, r3
90005596:	69bb      	ldr	r3, [r7, #24]
90005598:	4013      	ands	r3, r2
9000559a:	2b00      	cmp	r3, #0
9000559c:	f000 80a2 	beq.w	900056e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
900055a0:	687b      	ldr	r3, [r7, #4]
900055a2:	681b      	ldr	r3, [r3, #0]
900055a4:	4a2e      	ldr	r2, [pc, #184]	; (90005660 <HAL_DMA_IRQHandler+0x1b4>)
900055a6:	4293      	cmp	r3, r2
900055a8:	d04a      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055aa:	687b      	ldr	r3, [r7, #4]
900055ac:	681b      	ldr	r3, [r3, #0]
900055ae:	4a2d      	ldr	r2, [pc, #180]	; (90005664 <HAL_DMA_IRQHandler+0x1b8>)
900055b0:	4293      	cmp	r3, r2
900055b2:	d045      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055b4:	687b      	ldr	r3, [r7, #4]
900055b6:	681b      	ldr	r3, [r3, #0]
900055b8:	4a2b      	ldr	r2, [pc, #172]	; (90005668 <HAL_DMA_IRQHandler+0x1bc>)
900055ba:	4293      	cmp	r3, r2
900055bc:	d040      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055be:	687b      	ldr	r3, [r7, #4]
900055c0:	681b      	ldr	r3, [r3, #0]
900055c2:	4a2a      	ldr	r2, [pc, #168]	; (9000566c <HAL_DMA_IRQHandler+0x1c0>)
900055c4:	4293      	cmp	r3, r2
900055c6:	d03b      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055c8:	687b      	ldr	r3, [r7, #4]
900055ca:	681b      	ldr	r3, [r3, #0]
900055cc:	4a28      	ldr	r2, [pc, #160]	; (90005670 <HAL_DMA_IRQHandler+0x1c4>)
900055ce:	4293      	cmp	r3, r2
900055d0:	d036      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055d2:	687b      	ldr	r3, [r7, #4]
900055d4:	681b      	ldr	r3, [r3, #0]
900055d6:	4a27      	ldr	r2, [pc, #156]	; (90005674 <HAL_DMA_IRQHandler+0x1c8>)
900055d8:	4293      	cmp	r3, r2
900055da:	d031      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055dc:	687b      	ldr	r3, [r7, #4]
900055de:	681b      	ldr	r3, [r3, #0]
900055e0:	4a25      	ldr	r2, [pc, #148]	; (90005678 <HAL_DMA_IRQHandler+0x1cc>)
900055e2:	4293      	cmp	r3, r2
900055e4:	d02c      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055e6:	687b      	ldr	r3, [r7, #4]
900055e8:	681b      	ldr	r3, [r3, #0]
900055ea:	4a24      	ldr	r2, [pc, #144]	; (9000567c <HAL_DMA_IRQHandler+0x1d0>)
900055ec:	4293      	cmp	r3, r2
900055ee:	d027      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055f0:	687b      	ldr	r3, [r7, #4]
900055f2:	681b      	ldr	r3, [r3, #0]
900055f4:	4a22      	ldr	r2, [pc, #136]	; (90005680 <HAL_DMA_IRQHandler+0x1d4>)
900055f6:	4293      	cmp	r3, r2
900055f8:	d022      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
900055fa:	687b      	ldr	r3, [r7, #4]
900055fc:	681b      	ldr	r3, [r3, #0]
900055fe:	4a21      	ldr	r2, [pc, #132]	; (90005684 <HAL_DMA_IRQHandler+0x1d8>)
90005600:	4293      	cmp	r3, r2
90005602:	d01d      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
90005604:	687b      	ldr	r3, [r7, #4]
90005606:	681b      	ldr	r3, [r3, #0]
90005608:	4a1f      	ldr	r2, [pc, #124]	; (90005688 <HAL_DMA_IRQHandler+0x1dc>)
9000560a:	4293      	cmp	r3, r2
9000560c:	d018      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
9000560e:	687b      	ldr	r3, [r7, #4]
90005610:	681b      	ldr	r3, [r3, #0]
90005612:	4a1e      	ldr	r2, [pc, #120]	; (9000568c <HAL_DMA_IRQHandler+0x1e0>)
90005614:	4293      	cmp	r3, r2
90005616:	d013      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
90005618:	687b      	ldr	r3, [r7, #4]
9000561a:	681b      	ldr	r3, [r3, #0]
9000561c:	4a1c      	ldr	r2, [pc, #112]	; (90005690 <HAL_DMA_IRQHandler+0x1e4>)
9000561e:	4293      	cmp	r3, r2
90005620:	d00e      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
90005622:	687b      	ldr	r3, [r7, #4]
90005624:	681b      	ldr	r3, [r3, #0]
90005626:	4a1b      	ldr	r2, [pc, #108]	; (90005694 <HAL_DMA_IRQHandler+0x1e8>)
90005628:	4293      	cmp	r3, r2
9000562a:	d009      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
9000562c:	687b      	ldr	r3, [r7, #4]
9000562e:	681b      	ldr	r3, [r3, #0]
90005630:	4a19      	ldr	r2, [pc, #100]	; (90005698 <HAL_DMA_IRQHandler+0x1ec>)
90005632:	4293      	cmp	r3, r2
90005634:	d004      	beq.n	90005640 <HAL_DMA_IRQHandler+0x194>
90005636:	687b      	ldr	r3, [r7, #4]
90005638:	681b      	ldr	r3, [r3, #0]
9000563a:	4a18      	ldr	r2, [pc, #96]	; (9000569c <HAL_DMA_IRQHandler+0x1f0>)
9000563c:	4293      	cmp	r3, r2
9000563e:	d12f      	bne.n	900056a0 <HAL_DMA_IRQHandler+0x1f4>
90005640:	687b      	ldr	r3, [r7, #4]
90005642:	681b      	ldr	r3, [r3, #0]
90005644:	681b      	ldr	r3, [r3, #0]
90005646:	f003 0304 	and.w	r3, r3, #4
9000564a:	2b00      	cmp	r3, #0
9000564c:	bf14      	ite	ne
9000564e:	2301      	movne	r3, #1
90005650:	2300      	moveq	r3, #0
90005652:	b2db      	uxtb	r3, r3
90005654:	e02e      	b.n	900056b4 <HAL_DMA_IRQHandler+0x208>
90005656:	bf00      	nop
90005658:	2400002c 	.word	0x2400002c
9000565c:	1b4e81b5 	.word	0x1b4e81b5
90005660:	40020010 	.word	0x40020010
90005664:	40020028 	.word	0x40020028
90005668:	40020040 	.word	0x40020040
9000566c:	40020058 	.word	0x40020058
90005670:	40020070 	.word	0x40020070
90005674:	40020088 	.word	0x40020088
90005678:	400200a0 	.word	0x400200a0
9000567c:	400200b8 	.word	0x400200b8
90005680:	40020410 	.word	0x40020410
90005684:	40020428 	.word	0x40020428
90005688:	40020440 	.word	0x40020440
9000568c:	40020458 	.word	0x40020458
90005690:	40020470 	.word	0x40020470
90005694:	40020488 	.word	0x40020488
90005698:	400204a0 	.word	0x400204a0
9000569c:	400204b8 	.word	0x400204b8
900056a0:	687b      	ldr	r3, [r7, #4]
900056a2:	681b      	ldr	r3, [r3, #0]
900056a4:	681b      	ldr	r3, [r3, #0]
900056a6:	f003 0308 	and.w	r3, r3, #8
900056aa:	2b00      	cmp	r3, #0
900056ac:	bf14      	ite	ne
900056ae:	2301      	movne	r3, #1
900056b0:	2300      	moveq	r3, #0
900056b2:	b2db      	uxtb	r3, r3
900056b4:	2b00      	cmp	r3, #0
900056b6:	d015      	beq.n	900056e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
900056b8:	687b      	ldr	r3, [r7, #4]
900056ba:	681b      	ldr	r3, [r3, #0]
900056bc:	681a      	ldr	r2, [r3, #0]
900056be:	687b      	ldr	r3, [r7, #4]
900056c0:	681b      	ldr	r3, [r3, #0]
900056c2:	f022 0204 	bic.w	r2, r2, #4
900056c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
900056c8:	687b      	ldr	r3, [r7, #4]
900056ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900056cc:	f003 031f 	and.w	r3, r3, #31
900056d0:	2208      	movs	r2, #8
900056d2:	409a      	lsls	r2, r3
900056d4:	6a3b      	ldr	r3, [r7, #32]
900056d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
900056d8:	687b      	ldr	r3, [r7, #4]
900056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900056dc:	f043 0201 	orr.w	r2, r3, #1
900056e0:	687b      	ldr	r3, [r7, #4]
900056e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
900056e4:	687b      	ldr	r3, [r7, #4]
900056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900056e8:	f003 031f 	and.w	r3, r3, #31
900056ec:	69ba      	ldr	r2, [r7, #24]
900056ee:	fa22 f303 	lsr.w	r3, r2, r3
900056f2:	f003 0301 	and.w	r3, r3, #1
900056f6:	2b00      	cmp	r3, #0
900056f8:	d06e      	beq.n	900057d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
900056fa:	687b      	ldr	r3, [r7, #4]
900056fc:	681b      	ldr	r3, [r3, #0]
900056fe:	4a69      	ldr	r2, [pc, #420]	; (900058a4 <HAL_DMA_IRQHandler+0x3f8>)
90005700:	4293      	cmp	r3, r2
90005702:	d04a      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005704:	687b      	ldr	r3, [r7, #4]
90005706:	681b      	ldr	r3, [r3, #0]
90005708:	4a67      	ldr	r2, [pc, #412]	; (900058a8 <HAL_DMA_IRQHandler+0x3fc>)
9000570a:	4293      	cmp	r3, r2
9000570c:	d045      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
9000570e:	687b      	ldr	r3, [r7, #4]
90005710:	681b      	ldr	r3, [r3, #0]
90005712:	4a66      	ldr	r2, [pc, #408]	; (900058ac <HAL_DMA_IRQHandler+0x400>)
90005714:	4293      	cmp	r3, r2
90005716:	d040      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005718:	687b      	ldr	r3, [r7, #4]
9000571a:	681b      	ldr	r3, [r3, #0]
9000571c:	4a64      	ldr	r2, [pc, #400]	; (900058b0 <HAL_DMA_IRQHandler+0x404>)
9000571e:	4293      	cmp	r3, r2
90005720:	d03b      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005722:	687b      	ldr	r3, [r7, #4]
90005724:	681b      	ldr	r3, [r3, #0]
90005726:	4a63      	ldr	r2, [pc, #396]	; (900058b4 <HAL_DMA_IRQHandler+0x408>)
90005728:	4293      	cmp	r3, r2
9000572a:	d036      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
9000572c:	687b      	ldr	r3, [r7, #4]
9000572e:	681b      	ldr	r3, [r3, #0]
90005730:	4a61      	ldr	r2, [pc, #388]	; (900058b8 <HAL_DMA_IRQHandler+0x40c>)
90005732:	4293      	cmp	r3, r2
90005734:	d031      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005736:	687b      	ldr	r3, [r7, #4]
90005738:	681b      	ldr	r3, [r3, #0]
9000573a:	4a60      	ldr	r2, [pc, #384]	; (900058bc <HAL_DMA_IRQHandler+0x410>)
9000573c:	4293      	cmp	r3, r2
9000573e:	d02c      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005740:	687b      	ldr	r3, [r7, #4]
90005742:	681b      	ldr	r3, [r3, #0]
90005744:	4a5e      	ldr	r2, [pc, #376]	; (900058c0 <HAL_DMA_IRQHandler+0x414>)
90005746:	4293      	cmp	r3, r2
90005748:	d027      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
9000574a:	687b      	ldr	r3, [r7, #4]
9000574c:	681b      	ldr	r3, [r3, #0]
9000574e:	4a5d      	ldr	r2, [pc, #372]	; (900058c4 <HAL_DMA_IRQHandler+0x418>)
90005750:	4293      	cmp	r3, r2
90005752:	d022      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005754:	687b      	ldr	r3, [r7, #4]
90005756:	681b      	ldr	r3, [r3, #0]
90005758:	4a5b      	ldr	r2, [pc, #364]	; (900058c8 <HAL_DMA_IRQHandler+0x41c>)
9000575a:	4293      	cmp	r3, r2
9000575c:	d01d      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
9000575e:	687b      	ldr	r3, [r7, #4]
90005760:	681b      	ldr	r3, [r3, #0]
90005762:	4a5a      	ldr	r2, [pc, #360]	; (900058cc <HAL_DMA_IRQHandler+0x420>)
90005764:	4293      	cmp	r3, r2
90005766:	d018      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005768:	687b      	ldr	r3, [r7, #4]
9000576a:	681b      	ldr	r3, [r3, #0]
9000576c:	4a58      	ldr	r2, [pc, #352]	; (900058d0 <HAL_DMA_IRQHandler+0x424>)
9000576e:	4293      	cmp	r3, r2
90005770:	d013      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005772:	687b      	ldr	r3, [r7, #4]
90005774:	681b      	ldr	r3, [r3, #0]
90005776:	4a57      	ldr	r2, [pc, #348]	; (900058d4 <HAL_DMA_IRQHandler+0x428>)
90005778:	4293      	cmp	r3, r2
9000577a:	d00e      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
9000577c:	687b      	ldr	r3, [r7, #4]
9000577e:	681b      	ldr	r3, [r3, #0]
90005780:	4a55      	ldr	r2, [pc, #340]	; (900058d8 <HAL_DMA_IRQHandler+0x42c>)
90005782:	4293      	cmp	r3, r2
90005784:	d009      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005786:	687b      	ldr	r3, [r7, #4]
90005788:	681b      	ldr	r3, [r3, #0]
9000578a:	4a54      	ldr	r2, [pc, #336]	; (900058dc <HAL_DMA_IRQHandler+0x430>)
9000578c:	4293      	cmp	r3, r2
9000578e:	d004      	beq.n	9000579a <HAL_DMA_IRQHandler+0x2ee>
90005790:	687b      	ldr	r3, [r7, #4]
90005792:	681b      	ldr	r3, [r3, #0]
90005794:	4a52      	ldr	r2, [pc, #328]	; (900058e0 <HAL_DMA_IRQHandler+0x434>)
90005796:	4293      	cmp	r3, r2
90005798:	d10a      	bne.n	900057b0 <HAL_DMA_IRQHandler+0x304>
9000579a:	687b      	ldr	r3, [r7, #4]
9000579c:	681b      	ldr	r3, [r3, #0]
9000579e:	695b      	ldr	r3, [r3, #20]
900057a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
900057a4:	2b00      	cmp	r3, #0
900057a6:	bf14      	ite	ne
900057a8:	2301      	movne	r3, #1
900057aa:	2300      	moveq	r3, #0
900057ac:	b2db      	uxtb	r3, r3
900057ae:	e003      	b.n	900057b8 <HAL_DMA_IRQHandler+0x30c>
900057b0:	687b      	ldr	r3, [r7, #4]
900057b2:	681b      	ldr	r3, [r3, #0]
900057b4:	681b      	ldr	r3, [r3, #0]
900057b6:	2300      	movs	r3, #0
900057b8:	2b00      	cmp	r3, #0
900057ba:	d00d      	beq.n	900057d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
900057bc:	687b      	ldr	r3, [r7, #4]
900057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900057c0:	f003 031f 	and.w	r3, r3, #31
900057c4:	2201      	movs	r2, #1
900057c6:	409a      	lsls	r2, r3
900057c8:	6a3b      	ldr	r3, [r7, #32]
900057ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
900057cc:	687b      	ldr	r3, [r7, #4]
900057ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900057d0:	f043 0202 	orr.w	r2, r3, #2
900057d4:	687b      	ldr	r3, [r7, #4]
900057d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
900057d8:	687b      	ldr	r3, [r7, #4]
900057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900057dc:	f003 031f 	and.w	r3, r3, #31
900057e0:	2204      	movs	r2, #4
900057e2:	409a      	lsls	r2, r3
900057e4:	69bb      	ldr	r3, [r7, #24]
900057e6:	4013      	ands	r3, r2
900057e8:	2b00      	cmp	r3, #0
900057ea:	f000 808f 	beq.w	9000590c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
900057ee:	687b      	ldr	r3, [r7, #4]
900057f0:	681b      	ldr	r3, [r3, #0]
900057f2:	4a2c      	ldr	r2, [pc, #176]	; (900058a4 <HAL_DMA_IRQHandler+0x3f8>)
900057f4:	4293      	cmp	r3, r2
900057f6:	d04a      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
900057f8:	687b      	ldr	r3, [r7, #4]
900057fa:	681b      	ldr	r3, [r3, #0]
900057fc:	4a2a      	ldr	r2, [pc, #168]	; (900058a8 <HAL_DMA_IRQHandler+0x3fc>)
900057fe:	4293      	cmp	r3, r2
90005800:	d045      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005802:	687b      	ldr	r3, [r7, #4]
90005804:	681b      	ldr	r3, [r3, #0]
90005806:	4a29      	ldr	r2, [pc, #164]	; (900058ac <HAL_DMA_IRQHandler+0x400>)
90005808:	4293      	cmp	r3, r2
9000580a:	d040      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
9000580c:	687b      	ldr	r3, [r7, #4]
9000580e:	681b      	ldr	r3, [r3, #0]
90005810:	4a27      	ldr	r2, [pc, #156]	; (900058b0 <HAL_DMA_IRQHandler+0x404>)
90005812:	4293      	cmp	r3, r2
90005814:	d03b      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005816:	687b      	ldr	r3, [r7, #4]
90005818:	681b      	ldr	r3, [r3, #0]
9000581a:	4a26      	ldr	r2, [pc, #152]	; (900058b4 <HAL_DMA_IRQHandler+0x408>)
9000581c:	4293      	cmp	r3, r2
9000581e:	d036      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005820:	687b      	ldr	r3, [r7, #4]
90005822:	681b      	ldr	r3, [r3, #0]
90005824:	4a24      	ldr	r2, [pc, #144]	; (900058b8 <HAL_DMA_IRQHandler+0x40c>)
90005826:	4293      	cmp	r3, r2
90005828:	d031      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
9000582a:	687b      	ldr	r3, [r7, #4]
9000582c:	681b      	ldr	r3, [r3, #0]
9000582e:	4a23      	ldr	r2, [pc, #140]	; (900058bc <HAL_DMA_IRQHandler+0x410>)
90005830:	4293      	cmp	r3, r2
90005832:	d02c      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005834:	687b      	ldr	r3, [r7, #4]
90005836:	681b      	ldr	r3, [r3, #0]
90005838:	4a21      	ldr	r2, [pc, #132]	; (900058c0 <HAL_DMA_IRQHandler+0x414>)
9000583a:	4293      	cmp	r3, r2
9000583c:	d027      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
9000583e:	687b      	ldr	r3, [r7, #4]
90005840:	681b      	ldr	r3, [r3, #0]
90005842:	4a20      	ldr	r2, [pc, #128]	; (900058c4 <HAL_DMA_IRQHandler+0x418>)
90005844:	4293      	cmp	r3, r2
90005846:	d022      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005848:	687b      	ldr	r3, [r7, #4]
9000584a:	681b      	ldr	r3, [r3, #0]
9000584c:	4a1e      	ldr	r2, [pc, #120]	; (900058c8 <HAL_DMA_IRQHandler+0x41c>)
9000584e:	4293      	cmp	r3, r2
90005850:	d01d      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005852:	687b      	ldr	r3, [r7, #4]
90005854:	681b      	ldr	r3, [r3, #0]
90005856:	4a1d      	ldr	r2, [pc, #116]	; (900058cc <HAL_DMA_IRQHandler+0x420>)
90005858:	4293      	cmp	r3, r2
9000585a:	d018      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
9000585c:	687b      	ldr	r3, [r7, #4]
9000585e:	681b      	ldr	r3, [r3, #0]
90005860:	4a1b      	ldr	r2, [pc, #108]	; (900058d0 <HAL_DMA_IRQHandler+0x424>)
90005862:	4293      	cmp	r3, r2
90005864:	d013      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005866:	687b      	ldr	r3, [r7, #4]
90005868:	681b      	ldr	r3, [r3, #0]
9000586a:	4a1a      	ldr	r2, [pc, #104]	; (900058d4 <HAL_DMA_IRQHandler+0x428>)
9000586c:	4293      	cmp	r3, r2
9000586e:	d00e      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005870:	687b      	ldr	r3, [r7, #4]
90005872:	681b      	ldr	r3, [r3, #0]
90005874:	4a18      	ldr	r2, [pc, #96]	; (900058d8 <HAL_DMA_IRQHandler+0x42c>)
90005876:	4293      	cmp	r3, r2
90005878:	d009      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
9000587a:	687b      	ldr	r3, [r7, #4]
9000587c:	681b      	ldr	r3, [r3, #0]
9000587e:	4a17      	ldr	r2, [pc, #92]	; (900058dc <HAL_DMA_IRQHandler+0x430>)
90005880:	4293      	cmp	r3, r2
90005882:	d004      	beq.n	9000588e <HAL_DMA_IRQHandler+0x3e2>
90005884:	687b      	ldr	r3, [r7, #4]
90005886:	681b      	ldr	r3, [r3, #0]
90005888:	4a15      	ldr	r2, [pc, #84]	; (900058e0 <HAL_DMA_IRQHandler+0x434>)
9000588a:	4293      	cmp	r3, r2
9000588c:	d12a      	bne.n	900058e4 <HAL_DMA_IRQHandler+0x438>
9000588e:	687b      	ldr	r3, [r7, #4]
90005890:	681b      	ldr	r3, [r3, #0]
90005892:	681b      	ldr	r3, [r3, #0]
90005894:	f003 0302 	and.w	r3, r3, #2
90005898:	2b00      	cmp	r3, #0
9000589a:	bf14      	ite	ne
9000589c:	2301      	movne	r3, #1
9000589e:	2300      	moveq	r3, #0
900058a0:	b2db      	uxtb	r3, r3
900058a2:	e023      	b.n	900058ec <HAL_DMA_IRQHandler+0x440>
900058a4:	40020010 	.word	0x40020010
900058a8:	40020028 	.word	0x40020028
900058ac:	40020040 	.word	0x40020040
900058b0:	40020058 	.word	0x40020058
900058b4:	40020070 	.word	0x40020070
900058b8:	40020088 	.word	0x40020088
900058bc:	400200a0 	.word	0x400200a0
900058c0:	400200b8 	.word	0x400200b8
900058c4:	40020410 	.word	0x40020410
900058c8:	40020428 	.word	0x40020428
900058cc:	40020440 	.word	0x40020440
900058d0:	40020458 	.word	0x40020458
900058d4:	40020470 	.word	0x40020470
900058d8:	40020488 	.word	0x40020488
900058dc:	400204a0 	.word	0x400204a0
900058e0:	400204b8 	.word	0x400204b8
900058e4:	687b      	ldr	r3, [r7, #4]
900058e6:	681b      	ldr	r3, [r3, #0]
900058e8:	681b      	ldr	r3, [r3, #0]
900058ea:	2300      	movs	r3, #0
900058ec:	2b00      	cmp	r3, #0
900058ee:	d00d      	beq.n	9000590c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
900058f0:	687b      	ldr	r3, [r7, #4]
900058f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900058f4:	f003 031f 	and.w	r3, r3, #31
900058f8:	2204      	movs	r2, #4
900058fa:	409a      	lsls	r2, r3
900058fc:	6a3b      	ldr	r3, [r7, #32]
900058fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
90005900:	687b      	ldr	r3, [r7, #4]
90005902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005904:	f043 0204 	orr.w	r2, r3, #4
90005908:	687b      	ldr	r3, [r7, #4]
9000590a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
9000590c:	687b      	ldr	r3, [r7, #4]
9000590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005910:	f003 031f 	and.w	r3, r3, #31
90005914:	2210      	movs	r2, #16
90005916:	409a      	lsls	r2, r3
90005918:	69bb      	ldr	r3, [r7, #24]
9000591a:	4013      	ands	r3, r2
9000591c:	2b00      	cmp	r3, #0
9000591e:	f000 80a6 	beq.w	90005a6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
90005922:	687b      	ldr	r3, [r7, #4]
90005924:	681b      	ldr	r3, [r3, #0]
90005926:	4a85      	ldr	r2, [pc, #532]	; (90005b3c <HAL_DMA_IRQHandler+0x690>)
90005928:	4293      	cmp	r3, r2
9000592a:	d04a      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
9000592c:	687b      	ldr	r3, [r7, #4]
9000592e:	681b      	ldr	r3, [r3, #0]
90005930:	4a83      	ldr	r2, [pc, #524]	; (90005b40 <HAL_DMA_IRQHandler+0x694>)
90005932:	4293      	cmp	r3, r2
90005934:	d045      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
90005936:	687b      	ldr	r3, [r7, #4]
90005938:	681b      	ldr	r3, [r3, #0]
9000593a:	4a82      	ldr	r2, [pc, #520]	; (90005b44 <HAL_DMA_IRQHandler+0x698>)
9000593c:	4293      	cmp	r3, r2
9000593e:	d040      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
90005940:	687b      	ldr	r3, [r7, #4]
90005942:	681b      	ldr	r3, [r3, #0]
90005944:	4a80      	ldr	r2, [pc, #512]	; (90005b48 <HAL_DMA_IRQHandler+0x69c>)
90005946:	4293      	cmp	r3, r2
90005948:	d03b      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
9000594a:	687b      	ldr	r3, [r7, #4]
9000594c:	681b      	ldr	r3, [r3, #0]
9000594e:	4a7f      	ldr	r2, [pc, #508]	; (90005b4c <HAL_DMA_IRQHandler+0x6a0>)
90005950:	4293      	cmp	r3, r2
90005952:	d036      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
90005954:	687b      	ldr	r3, [r7, #4]
90005956:	681b      	ldr	r3, [r3, #0]
90005958:	4a7d      	ldr	r2, [pc, #500]	; (90005b50 <HAL_DMA_IRQHandler+0x6a4>)
9000595a:	4293      	cmp	r3, r2
9000595c:	d031      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
9000595e:	687b      	ldr	r3, [r7, #4]
90005960:	681b      	ldr	r3, [r3, #0]
90005962:	4a7c      	ldr	r2, [pc, #496]	; (90005b54 <HAL_DMA_IRQHandler+0x6a8>)
90005964:	4293      	cmp	r3, r2
90005966:	d02c      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
90005968:	687b      	ldr	r3, [r7, #4]
9000596a:	681b      	ldr	r3, [r3, #0]
9000596c:	4a7a      	ldr	r2, [pc, #488]	; (90005b58 <HAL_DMA_IRQHandler+0x6ac>)
9000596e:	4293      	cmp	r3, r2
90005970:	d027      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
90005972:	687b      	ldr	r3, [r7, #4]
90005974:	681b      	ldr	r3, [r3, #0]
90005976:	4a79      	ldr	r2, [pc, #484]	; (90005b5c <HAL_DMA_IRQHandler+0x6b0>)
90005978:	4293      	cmp	r3, r2
9000597a:	d022      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
9000597c:	687b      	ldr	r3, [r7, #4]
9000597e:	681b      	ldr	r3, [r3, #0]
90005980:	4a77      	ldr	r2, [pc, #476]	; (90005b60 <HAL_DMA_IRQHandler+0x6b4>)
90005982:	4293      	cmp	r3, r2
90005984:	d01d      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
90005986:	687b      	ldr	r3, [r7, #4]
90005988:	681b      	ldr	r3, [r3, #0]
9000598a:	4a76      	ldr	r2, [pc, #472]	; (90005b64 <HAL_DMA_IRQHandler+0x6b8>)
9000598c:	4293      	cmp	r3, r2
9000598e:	d018      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
90005990:	687b      	ldr	r3, [r7, #4]
90005992:	681b      	ldr	r3, [r3, #0]
90005994:	4a74      	ldr	r2, [pc, #464]	; (90005b68 <HAL_DMA_IRQHandler+0x6bc>)
90005996:	4293      	cmp	r3, r2
90005998:	d013      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
9000599a:	687b      	ldr	r3, [r7, #4]
9000599c:	681b      	ldr	r3, [r3, #0]
9000599e:	4a73      	ldr	r2, [pc, #460]	; (90005b6c <HAL_DMA_IRQHandler+0x6c0>)
900059a0:	4293      	cmp	r3, r2
900059a2:	d00e      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
900059a4:	687b      	ldr	r3, [r7, #4]
900059a6:	681b      	ldr	r3, [r3, #0]
900059a8:	4a71      	ldr	r2, [pc, #452]	; (90005b70 <HAL_DMA_IRQHandler+0x6c4>)
900059aa:	4293      	cmp	r3, r2
900059ac:	d009      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
900059ae:	687b      	ldr	r3, [r7, #4]
900059b0:	681b      	ldr	r3, [r3, #0]
900059b2:	4a70      	ldr	r2, [pc, #448]	; (90005b74 <HAL_DMA_IRQHandler+0x6c8>)
900059b4:	4293      	cmp	r3, r2
900059b6:	d004      	beq.n	900059c2 <HAL_DMA_IRQHandler+0x516>
900059b8:	687b      	ldr	r3, [r7, #4]
900059ba:	681b      	ldr	r3, [r3, #0]
900059bc:	4a6e      	ldr	r2, [pc, #440]	; (90005b78 <HAL_DMA_IRQHandler+0x6cc>)
900059be:	4293      	cmp	r3, r2
900059c0:	d10a      	bne.n	900059d8 <HAL_DMA_IRQHandler+0x52c>
900059c2:	687b      	ldr	r3, [r7, #4]
900059c4:	681b      	ldr	r3, [r3, #0]
900059c6:	681b      	ldr	r3, [r3, #0]
900059c8:	f003 0308 	and.w	r3, r3, #8
900059cc:	2b00      	cmp	r3, #0
900059ce:	bf14      	ite	ne
900059d0:	2301      	movne	r3, #1
900059d2:	2300      	moveq	r3, #0
900059d4:	b2db      	uxtb	r3, r3
900059d6:	e009      	b.n	900059ec <HAL_DMA_IRQHandler+0x540>
900059d8:	687b      	ldr	r3, [r7, #4]
900059da:	681b      	ldr	r3, [r3, #0]
900059dc:	681b      	ldr	r3, [r3, #0]
900059de:	f003 0304 	and.w	r3, r3, #4
900059e2:	2b00      	cmp	r3, #0
900059e4:	bf14      	ite	ne
900059e6:	2301      	movne	r3, #1
900059e8:	2300      	moveq	r3, #0
900059ea:	b2db      	uxtb	r3, r3
900059ec:	2b00      	cmp	r3, #0
900059ee:	d03e      	beq.n	90005a6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
900059f0:	687b      	ldr	r3, [r7, #4]
900059f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900059f4:	f003 031f 	and.w	r3, r3, #31
900059f8:	2210      	movs	r2, #16
900059fa:	409a      	lsls	r2, r3
900059fc:	6a3b      	ldr	r3, [r7, #32]
900059fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
90005a00:	687b      	ldr	r3, [r7, #4]
90005a02:	681b      	ldr	r3, [r3, #0]
90005a04:	681b      	ldr	r3, [r3, #0]
90005a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90005a0a:	2b00      	cmp	r3, #0
90005a0c:	d018      	beq.n	90005a40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
90005a0e:	687b      	ldr	r3, [r7, #4]
90005a10:	681b      	ldr	r3, [r3, #0]
90005a12:	681b      	ldr	r3, [r3, #0]
90005a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90005a18:	2b00      	cmp	r3, #0
90005a1a:	d108      	bne.n	90005a2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
90005a1c:	687b      	ldr	r3, [r7, #4]
90005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a20:	2b00      	cmp	r3, #0
90005a22:	d024      	beq.n	90005a6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
90005a24:	687b      	ldr	r3, [r7, #4]
90005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a28:	6878      	ldr	r0, [r7, #4]
90005a2a:	4798      	blx	r3
90005a2c:	e01f      	b.n	90005a6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
90005a2e:	687b      	ldr	r3, [r7, #4]
90005a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90005a32:	2b00      	cmp	r3, #0
90005a34:	d01b      	beq.n	90005a6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
90005a36:	687b      	ldr	r3, [r7, #4]
90005a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90005a3a:	6878      	ldr	r0, [r7, #4]
90005a3c:	4798      	blx	r3
90005a3e:	e016      	b.n	90005a6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
90005a40:	687b      	ldr	r3, [r7, #4]
90005a42:	681b      	ldr	r3, [r3, #0]
90005a44:	681b      	ldr	r3, [r3, #0]
90005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
90005a4a:	2b00      	cmp	r3, #0
90005a4c:	d107      	bne.n	90005a5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
90005a4e:	687b      	ldr	r3, [r7, #4]
90005a50:	681b      	ldr	r3, [r3, #0]
90005a52:	681a      	ldr	r2, [r3, #0]
90005a54:	687b      	ldr	r3, [r7, #4]
90005a56:	681b      	ldr	r3, [r3, #0]
90005a58:	f022 0208 	bic.w	r2, r2, #8
90005a5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
90005a5e:	687b      	ldr	r3, [r7, #4]
90005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a62:	2b00      	cmp	r3, #0
90005a64:	d003      	beq.n	90005a6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
90005a66:	687b      	ldr	r3, [r7, #4]
90005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005a6a:	6878      	ldr	r0, [r7, #4]
90005a6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
90005a6e:	687b      	ldr	r3, [r7, #4]
90005a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005a72:	f003 031f 	and.w	r3, r3, #31
90005a76:	2220      	movs	r2, #32
90005a78:	409a      	lsls	r2, r3
90005a7a:	69bb      	ldr	r3, [r7, #24]
90005a7c:	4013      	ands	r3, r2
90005a7e:	2b00      	cmp	r3, #0
90005a80:	f000 8110 	beq.w	90005ca4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
90005a84:	687b      	ldr	r3, [r7, #4]
90005a86:	681b      	ldr	r3, [r3, #0]
90005a88:	4a2c      	ldr	r2, [pc, #176]	; (90005b3c <HAL_DMA_IRQHandler+0x690>)
90005a8a:	4293      	cmp	r3, r2
90005a8c:	d04a      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005a8e:	687b      	ldr	r3, [r7, #4]
90005a90:	681b      	ldr	r3, [r3, #0]
90005a92:	4a2b      	ldr	r2, [pc, #172]	; (90005b40 <HAL_DMA_IRQHandler+0x694>)
90005a94:	4293      	cmp	r3, r2
90005a96:	d045      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005a98:	687b      	ldr	r3, [r7, #4]
90005a9a:	681b      	ldr	r3, [r3, #0]
90005a9c:	4a29      	ldr	r2, [pc, #164]	; (90005b44 <HAL_DMA_IRQHandler+0x698>)
90005a9e:	4293      	cmp	r3, r2
90005aa0:	d040      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005aa2:	687b      	ldr	r3, [r7, #4]
90005aa4:	681b      	ldr	r3, [r3, #0]
90005aa6:	4a28      	ldr	r2, [pc, #160]	; (90005b48 <HAL_DMA_IRQHandler+0x69c>)
90005aa8:	4293      	cmp	r3, r2
90005aaa:	d03b      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005aac:	687b      	ldr	r3, [r7, #4]
90005aae:	681b      	ldr	r3, [r3, #0]
90005ab0:	4a26      	ldr	r2, [pc, #152]	; (90005b4c <HAL_DMA_IRQHandler+0x6a0>)
90005ab2:	4293      	cmp	r3, r2
90005ab4:	d036      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005ab6:	687b      	ldr	r3, [r7, #4]
90005ab8:	681b      	ldr	r3, [r3, #0]
90005aba:	4a25      	ldr	r2, [pc, #148]	; (90005b50 <HAL_DMA_IRQHandler+0x6a4>)
90005abc:	4293      	cmp	r3, r2
90005abe:	d031      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005ac0:	687b      	ldr	r3, [r7, #4]
90005ac2:	681b      	ldr	r3, [r3, #0]
90005ac4:	4a23      	ldr	r2, [pc, #140]	; (90005b54 <HAL_DMA_IRQHandler+0x6a8>)
90005ac6:	4293      	cmp	r3, r2
90005ac8:	d02c      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005aca:	687b      	ldr	r3, [r7, #4]
90005acc:	681b      	ldr	r3, [r3, #0]
90005ace:	4a22      	ldr	r2, [pc, #136]	; (90005b58 <HAL_DMA_IRQHandler+0x6ac>)
90005ad0:	4293      	cmp	r3, r2
90005ad2:	d027      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005ad4:	687b      	ldr	r3, [r7, #4]
90005ad6:	681b      	ldr	r3, [r3, #0]
90005ad8:	4a20      	ldr	r2, [pc, #128]	; (90005b5c <HAL_DMA_IRQHandler+0x6b0>)
90005ada:	4293      	cmp	r3, r2
90005adc:	d022      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005ade:	687b      	ldr	r3, [r7, #4]
90005ae0:	681b      	ldr	r3, [r3, #0]
90005ae2:	4a1f      	ldr	r2, [pc, #124]	; (90005b60 <HAL_DMA_IRQHandler+0x6b4>)
90005ae4:	4293      	cmp	r3, r2
90005ae6:	d01d      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005ae8:	687b      	ldr	r3, [r7, #4]
90005aea:	681b      	ldr	r3, [r3, #0]
90005aec:	4a1d      	ldr	r2, [pc, #116]	; (90005b64 <HAL_DMA_IRQHandler+0x6b8>)
90005aee:	4293      	cmp	r3, r2
90005af0:	d018      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005af2:	687b      	ldr	r3, [r7, #4]
90005af4:	681b      	ldr	r3, [r3, #0]
90005af6:	4a1c      	ldr	r2, [pc, #112]	; (90005b68 <HAL_DMA_IRQHandler+0x6bc>)
90005af8:	4293      	cmp	r3, r2
90005afa:	d013      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005afc:	687b      	ldr	r3, [r7, #4]
90005afe:	681b      	ldr	r3, [r3, #0]
90005b00:	4a1a      	ldr	r2, [pc, #104]	; (90005b6c <HAL_DMA_IRQHandler+0x6c0>)
90005b02:	4293      	cmp	r3, r2
90005b04:	d00e      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005b06:	687b      	ldr	r3, [r7, #4]
90005b08:	681b      	ldr	r3, [r3, #0]
90005b0a:	4a19      	ldr	r2, [pc, #100]	; (90005b70 <HAL_DMA_IRQHandler+0x6c4>)
90005b0c:	4293      	cmp	r3, r2
90005b0e:	d009      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005b10:	687b      	ldr	r3, [r7, #4]
90005b12:	681b      	ldr	r3, [r3, #0]
90005b14:	4a17      	ldr	r2, [pc, #92]	; (90005b74 <HAL_DMA_IRQHandler+0x6c8>)
90005b16:	4293      	cmp	r3, r2
90005b18:	d004      	beq.n	90005b24 <HAL_DMA_IRQHandler+0x678>
90005b1a:	687b      	ldr	r3, [r7, #4]
90005b1c:	681b      	ldr	r3, [r3, #0]
90005b1e:	4a16      	ldr	r2, [pc, #88]	; (90005b78 <HAL_DMA_IRQHandler+0x6cc>)
90005b20:	4293      	cmp	r3, r2
90005b22:	d12b      	bne.n	90005b7c <HAL_DMA_IRQHandler+0x6d0>
90005b24:	687b      	ldr	r3, [r7, #4]
90005b26:	681b      	ldr	r3, [r3, #0]
90005b28:	681b      	ldr	r3, [r3, #0]
90005b2a:	f003 0310 	and.w	r3, r3, #16
90005b2e:	2b00      	cmp	r3, #0
90005b30:	bf14      	ite	ne
90005b32:	2301      	movne	r3, #1
90005b34:	2300      	moveq	r3, #0
90005b36:	b2db      	uxtb	r3, r3
90005b38:	e02a      	b.n	90005b90 <HAL_DMA_IRQHandler+0x6e4>
90005b3a:	bf00      	nop
90005b3c:	40020010 	.word	0x40020010
90005b40:	40020028 	.word	0x40020028
90005b44:	40020040 	.word	0x40020040
90005b48:	40020058 	.word	0x40020058
90005b4c:	40020070 	.word	0x40020070
90005b50:	40020088 	.word	0x40020088
90005b54:	400200a0 	.word	0x400200a0
90005b58:	400200b8 	.word	0x400200b8
90005b5c:	40020410 	.word	0x40020410
90005b60:	40020428 	.word	0x40020428
90005b64:	40020440 	.word	0x40020440
90005b68:	40020458 	.word	0x40020458
90005b6c:	40020470 	.word	0x40020470
90005b70:	40020488 	.word	0x40020488
90005b74:	400204a0 	.word	0x400204a0
90005b78:	400204b8 	.word	0x400204b8
90005b7c:	687b      	ldr	r3, [r7, #4]
90005b7e:	681b      	ldr	r3, [r3, #0]
90005b80:	681b      	ldr	r3, [r3, #0]
90005b82:	f003 0302 	and.w	r3, r3, #2
90005b86:	2b00      	cmp	r3, #0
90005b88:	bf14      	ite	ne
90005b8a:	2301      	movne	r3, #1
90005b8c:	2300      	moveq	r3, #0
90005b8e:	b2db      	uxtb	r3, r3
90005b90:	2b00      	cmp	r3, #0
90005b92:	f000 8087 	beq.w	90005ca4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
90005b96:	687b      	ldr	r3, [r7, #4]
90005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005b9a:	f003 031f 	and.w	r3, r3, #31
90005b9e:	2220      	movs	r2, #32
90005ba0:	409a      	lsls	r2, r3
90005ba2:	6a3b      	ldr	r3, [r7, #32]
90005ba4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
90005ba6:	687b      	ldr	r3, [r7, #4]
90005ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
90005bac:	b2db      	uxtb	r3, r3
90005bae:	2b04      	cmp	r3, #4
90005bb0:	d139      	bne.n	90005c26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
90005bb2:	687b      	ldr	r3, [r7, #4]
90005bb4:	681b      	ldr	r3, [r3, #0]
90005bb6:	681a      	ldr	r2, [r3, #0]
90005bb8:	687b      	ldr	r3, [r7, #4]
90005bba:	681b      	ldr	r3, [r3, #0]
90005bbc:	f022 0216 	bic.w	r2, r2, #22
90005bc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
90005bc2:	687b      	ldr	r3, [r7, #4]
90005bc4:	681b      	ldr	r3, [r3, #0]
90005bc6:	695a      	ldr	r2, [r3, #20]
90005bc8:	687b      	ldr	r3, [r7, #4]
90005bca:	681b      	ldr	r3, [r3, #0]
90005bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90005bd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
90005bd2:	687b      	ldr	r3, [r7, #4]
90005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005bd6:	2b00      	cmp	r3, #0
90005bd8:	d103      	bne.n	90005be2 <HAL_DMA_IRQHandler+0x736>
90005bda:	687b      	ldr	r3, [r7, #4]
90005bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90005bde:	2b00      	cmp	r3, #0
90005be0:	d007      	beq.n	90005bf2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
90005be2:	687b      	ldr	r3, [r7, #4]
90005be4:	681b      	ldr	r3, [r3, #0]
90005be6:	681a      	ldr	r2, [r3, #0]
90005be8:	687b      	ldr	r3, [r7, #4]
90005bea:	681b      	ldr	r3, [r3, #0]
90005bec:	f022 0208 	bic.w	r2, r2, #8
90005bf0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
90005bf2:	687b      	ldr	r3, [r7, #4]
90005bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005bf6:	f003 031f 	and.w	r3, r3, #31
90005bfa:	223f      	movs	r2, #63	; 0x3f
90005bfc:	409a      	lsls	r2, r3
90005bfe:	6a3b      	ldr	r3, [r7, #32]
90005c00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
90005c02:	687b      	ldr	r3, [r7, #4]
90005c04:	2201      	movs	r2, #1
90005c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
90005c0a:	687b      	ldr	r3, [r7, #4]
90005c0c:	2200      	movs	r2, #0
90005c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
90005c12:	687b      	ldr	r3, [r7, #4]
90005c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005c16:	2b00      	cmp	r3, #0
90005c18:	f000 834a 	beq.w	900062b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
90005c1c:	687b      	ldr	r3, [r7, #4]
90005c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005c20:	6878      	ldr	r0, [r7, #4]
90005c22:	4798      	blx	r3
          }
          return;
90005c24:	e344      	b.n	900062b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
90005c26:	687b      	ldr	r3, [r7, #4]
90005c28:	681b      	ldr	r3, [r3, #0]
90005c2a:	681b      	ldr	r3, [r3, #0]
90005c2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90005c30:	2b00      	cmp	r3, #0
90005c32:	d018      	beq.n	90005c66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
90005c34:	687b      	ldr	r3, [r7, #4]
90005c36:	681b      	ldr	r3, [r3, #0]
90005c38:	681b      	ldr	r3, [r3, #0]
90005c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90005c3e:	2b00      	cmp	r3, #0
90005c40:	d108      	bne.n	90005c54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
90005c42:	687b      	ldr	r3, [r7, #4]
90005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005c46:	2b00      	cmp	r3, #0
90005c48:	d02c      	beq.n	90005ca4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
90005c4a:	687b      	ldr	r3, [r7, #4]
90005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005c4e:	6878      	ldr	r0, [r7, #4]
90005c50:	4798      	blx	r3
90005c52:	e027      	b.n	90005ca4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
90005c54:	687b      	ldr	r3, [r7, #4]
90005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005c58:	2b00      	cmp	r3, #0
90005c5a:	d023      	beq.n	90005ca4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
90005c5c:	687b      	ldr	r3, [r7, #4]
90005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005c60:	6878      	ldr	r0, [r7, #4]
90005c62:	4798      	blx	r3
90005c64:	e01e      	b.n	90005ca4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
90005c66:	687b      	ldr	r3, [r7, #4]
90005c68:	681b      	ldr	r3, [r3, #0]
90005c6a:	681b      	ldr	r3, [r3, #0]
90005c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90005c70:	2b00      	cmp	r3, #0
90005c72:	d10f      	bne.n	90005c94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
90005c74:	687b      	ldr	r3, [r7, #4]
90005c76:	681b      	ldr	r3, [r3, #0]
90005c78:	681a      	ldr	r2, [r3, #0]
90005c7a:	687b      	ldr	r3, [r7, #4]
90005c7c:	681b      	ldr	r3, [r3, #0]
90005c7e:	f022 0210 	bic.w	r2, r2, #16
90005c82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
90005c84:	687b      	ldr	r3, [r7, #4]
90005c86:	2201      	movs	r2, #1
90005c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
90005c8c:	687b      	ldr	r3, [r7, #4]
90005c8e:	2200      	movs	r2, #0
90005c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
90005c94:	687b      	ldr	r3, [r7, #4]
90005c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005c98:	2b00      	cmp	r3, #0
90005c9a:	d003      	beq.n	90005ca4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
90005c9c:	687b      	ldr	r3, [r7, #4]
90005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005ca0:	6878      	ldr	r0, [r7, #4]
90005ca2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
90005ca4:	687b      	ldr	r3, [r7, #4]
90005ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005ca8:	2b00      	cmp	r3, #0
90005caa:	f000 8306 	beq.w	900062ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
90005cae:	687b      	ldr	r3, [r7, #4]
90005cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005cb2:	f003 0301 	and.w	r3, r3, #1
90005cb6:	2b00      	cmp	r3, #0
90005cb8:	f000 8088 	beq.w	90005dcc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
90005cbc:	687b      	ldr	r3, [r7, #4]
90005cbe:	2204      	movs	r2, #4
90005cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
90005cc4:	687b      	ldr	r3, [r7, #4]
90005cc6:	681b      	ldr	r3, [r3, #0]
90005cc8:	4a7a      	ldr	r2, [pc, #488]	; (90005eb4 <HAL_DMA_IRQHandler+0xa08>)
90005cca:	4293      	cmp	r3, r2
90005ccc:	d04a      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005cce:	687b      	ldr	r3, [r7, #4]
90005cd0:	681b      	ldr	r3, [r3, #0]
90005cd2:	4a79      	ldr	r2, [pc, #484]	; (90005eb8 <HAL_DMA_IRQHandler+0xa0c>)
90005cd4:	4293      	cmp	r3, r2
90005cd6:	d045      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005cd8:	687b      	ldr	r3, [r7, #4]
90005cda:	681b      	ldr	r3, [r3, #0]
90005cdc:	4a77      	ldr	r2, [pc, #476]	; (90005ebc <HAL_DMA_IRQHandler+0xa10>)
90005cde:	4293      	cmp	r3, r2
90005ce0:	d040      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005ce2:	687b      	ldr	r3, [r7, #4]
90005ce4:	681b      	ldr	r3, [r3, #0]
90005ce6:	4a76      	ldr	r2, [pc, #472]	; (90005ec0 <HAL_DMA_IRQHandler+0xa14>)
90005ce8:	4293      	cmp	r3, r2
90005cea:	d03b      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005cec:	687b      	ldr	r3, [r7, #4]
90005cee:	681b      	ldr	r3, [r3, #0]
90005cf0:	4a74      	ldr	r2, [pc, #464]	; (90005ec4 <HAL_DMA_IRQHandler+0xa18>)
90005cf2:	4293      	cmp	r3, r2
90005cf4:	d036      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005cf6:	687b      	ldr	r3, [r7, #4]
90005cf8:	681b      	ldr	r3, [r3, #0]
90005cfa:	4a73      	ldr	r2, [pc, #460]	; (90005ec8 <HAL_DMA_IRQHandler+0xa1c>)
90005cfc:	4293      	cmp	r3, r2
90005cfe:	d031      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d00:	687b      	ldr	r3, [r7, #4]
90005d02:	681b      	ldr	r3, [r3, #0]
90005d04:	4a71      	ldr	r2, [pc, #452]	; (90005ecc <HAL_DMA_IRQHandler+0xa20>)
90005d06:	4293      	cmp	r3, r2
90005d08:	d02c      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d0a:	687b      	ldr	r3, [r7, #4]
90005d0c:	681b      	ldr	r3, [r3, #0]
90005d0e:	4a70      	ldr	r2, [pc, #448]	; (90005ed0 <HAL_DMA_IRQHandler+0xa24>)
90005d10:	4293      	cmp	r3, r2
90005d12:	d027      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d14:	687b      	ldr	r3, [r7, #4]
90005d16:	681b      	ldr	r3, [r3, #0]
90005d18:	4a6e      	ldr	r2, [pc, #440]	; (90005ed4 <HAL_DMA_IRQHandler+0xa28>)
90005d1a:	4293      	cmp	r3, r2
90005d1c:	d022      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d1e:	687b      	ldr	r3, [r7, #4]
90005d20:	681b      	ldr	r3, [r3, #0]
90005d22:	4a6d      	ldr	r2, [pc, #436]	; (90005ed8 <HAL_DMA_IRQHandler+0xa2c>)
90005d24:	4293      	cmp	r3, r2
90005d26:	d01d      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d28:	687b      	ldr	r3, [r7, #4]
90005d2a:	681b      	ldr	r3, [r3, #0]
90005d2c:	4a6b      	ldr	r2, [pc, #428]	; (90005edc <HAL_DMA_IRQHandler+0xa30>)
90005d2e:	4293      	cmp	r3, r2
90005d30:	d018      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d32:	687b      	ldr	r3, [r7, #4]
90005d34:	681b      	ldr	r3, [r3, #0]
90005d36:	4a6a      	ldr	r2, [pc, #424]	; (90005ee0 <HAL_DMA_IRQHandler+0xa34>)
90005d38:	4293      	cmp	r3, r2
90005d3a:	d013      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d3c:	687b      	ldr	r3, [r7, #4]
90005d3e:	681b      	ldr	r3, [r3, #0]
90005d40:	4a68      	ldr	r2, [pc, #416]	; (90005ee4 <HAL_DMA_IRQHandler+0xa38>)
90005d42:	4293      	cmp	r3, r2
90005d44:	d00e      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d46:	687b      	ldr	r3, [r7, #4]
90005d48:	681b      	ldr	r3, [r3, #0]
90005d4a:	4a67      	ldr	r2, [pc, #412]	; (90005ee8 <HAL_DMA_IRQHandler+0xa3c>)
90005d4c:	4293      	cmp	r3, r2
90005d4e:	d009      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d50:	687b      	ldr	r3, [r7, #4]
90005d52:	681b      	ldr	r3, [r3, #0]
90005d54:	4a65      	ldr	r2, [pc, #404]	; (90005eec <HAL_DMA_IRQHandler+0xa40>)
90005d56:	4293      	cmp	r3, r2
90005d58:	d004      	beq.n	90005d64 <HAL_DMA_IRQHandler+0x8b8>
90005d5a:	687b      	ldr	r3, [r7, #4]
90005d5c:	681b      	ldr	r3, [r3, #0]
90005d5e:	4a64      	ldr	r2, [pc, #400]	; (90005ef0 <HAL_DMA_IRQHandler+0xa44>)
90005d60:	4293      	cmp	r3, r2
90005d62:	d108      	bne.n	90005d76 <HAL_DMA_IRQHandler+0x8ca>
90005d64:	687b      	ldr	r3, [r7, #4]
90005d66:	681b      	ldr	r3, [r3, #0]
90005d68:	681a      	ldr	r2, [r3, #0]
90005d6a:	687b      	ldr	r3, [r7, #4]
90005d6c:	681b      	ldr	r3, [r3, #0]
90005d6e:	f022 0201 	bic.w	r2, r2, #1
90005d72:	601a      	str	r2, [r3, #0]
90005d74:	e007      	b.n	90005d86 <HAL_DMA_IRQHandler+0x8da>
90005d76:	687b      	ldr	r3, [r7, #4]
90005d78:	681b      	ldr	r3, [r3, #0]
90005d7a:	681a      	ldr	r2, [r3, #0]
90005d7c:	687b      	ldr	r3, [r7, #4]
90005d7e:	681b      	ldr	r3, [r3, #0]
90005d80:	f022 0201 	bic.w	r2, r2, #1
90005d84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
90005d86:	68fb      	ldr	r3, [r7, #12]
90005d88:	3301      	adds	r3, #1
90005d8a:	60fb      	str	r3, [r7, #12]
90005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90005d8e:	429a      	cmp	r2, r3
90005d90:	d307      	bcc.n	90005da2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
90005d92:	687b      	ldr	r3, [r7, #4]
90005d94:	681b      	ldr	r3, [r3, #0]
90005d96:	681b      	ldr	r3, [r3, #0]
90005d98:	f003 0301 	and.w	r3, r3, #1
90005d9c:	2b00      	cmp	r3, #0
90005d9e:	d1f2      	bne.n	90005d86 <HAL_DMA_IRQHandler+0x8da>
90005da0:	e000      	b.n	90005da4 <HAL_DMA_IRQHandler+0x8f8>
            break;
90005da2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
90005da4:	687b      	ldr	r3, [r7, #4]
90005da6:	681b      	ldr	r3, [r3, #0]
90005da8:	681b      	ldr	r3, [r3, #0]
90005daa:	f003 0301 	and.w	r3, r3, #1
90005dae:	2b00      	cmp	r3, #0
90005db0:	d004      	beq.n	90005dbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
90005db2:	687b      	ldr	r3, [r7, #4]
90005db4:	2203      	movs	r2, #3
90005db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
90005dba:	e003      	b.n	90005dc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
90005dbc:	687b      	ldr	r3, [r7, #4]
90005dbe:	2201      	movs	r2, #1
90005dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
90005dc4:	687b      	ldr	r3, [r7, #4]
90005dc6:	2200      	movs	r2, #0
90005dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
90005dcc:	687b      	ldr	r3, [r7, #4]
90005dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005dd0:	2b00      	cmp	r3, #0
90005dd2:	f000 8272 	beq.w	900062ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
90005dd6:	687b      	ldr	r3, [r7, #4]
90005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005dda:	6878      	ldr	r0, [r7, #4]
90005ddc:	4798      	blx	r3
90005dde:	e26c      	b.n	900062ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
90005de0:	687b      	ldr	r3, [r7, #4]
90005de2:	681b      	ldr	r3, [r3, #0]
90005de4:	4a43      	ldr	r2, [pc, #268]	; (90005ef4 <HAL_DMA_IRQHandler+0xa48>)
90005de6:	4293      	cmp	r3, r2
90005de8:	d022      	beq.n	90005e30 <HAL_DMA_IRQHandler+0x984>
90005dea:	687b      	ldr	r3, [r7, #4]
90005dec:	681b      	ldr	r3, [r3, #0]
90005dee:	4a42      	ldr	r2, [pc, #264]	; (90005ef8 <HAL_DMA_IRQHandler+0xa4c>)
90005df0:	4293      	cmp	r3, r2
90005df2:	d01d      	beq.n	90005e30 <HAL_DMA_IRQHandler+0x984>
90005df4:	687b      	ldr	r3, [r7, #4]
90005df6:	681b      	ldr	r3, [r3, #0]
90005df8:	4a40      	ldr	r2, [pc, #256]	; (90005efc <HAL_DMA_IRQHandler+0xa50>)
90005dfa:	4293      	cmp	r3, r2
90005dfc:	d018      	beq.n	90005e30 <HAL_DMA_IRQHandler+0x984>
90005dfe:	687b      	ldr	r3, [r7, #4]
90005e00:	681b      	ldr	r3, [r3, #0]
90005e02:	4a3f      	ldr	r2, [pc, #252]	; (90005f00 <HAL_DMA_IRQHandler+0xa54>)
90005e04:	4293      	cmp	r3, r2
90005e06:	d013      	beq.n	90005e30 <HAL_DMA_IRQHandler+0x984>
90005e08:	687b      	ldr	r3, [r7, #4]
90005e0a:	681b      	ldr	r3, [r3, #0]
90005e0c:	4a3d      	ldr	r2, [pc, #244]	; (90005f04 <HAL_DMA_IRQHandler+0xa58>)
90005e0e:	4293      	cmp	r3, r2
90005e10:	d00e      	beq.n	90005e30 <HAL_DMA_IRQHandler+0x984>
90005e12:	687b      	ldr	r3, [r7, #4]
90005e14:	681b      	ldr	r3, [r3, #0]
90005e16:	4a3c      	ldr	r2, [pc, #240]	; (90005f08 <HAL_DMA_IRQHandler+0xa5c>)
90005e18:	4293      	cmp	r3, r2
90005e1a:	d009      	beq.n	90005e30 <HAL_DMA_IRQHandler+0x984>
90005e1c:	687b      	ldr	r3, [r7, #4]
90005e1e:	681b      	ldr	r3, [r3, #0]
90005e20:	4a3a      	ldr	r2, [pc, #232]	; (90005f0c <HAL_DMA_IRQHandler+0xa60>)
90005e22:	4293      	cmp	r3, r2
90005e24:	d004      	beq.n	90005e30 <HAL_DMA_IRQHandler+0x984>
90005e26:	687b      	ldr	r3, [r7, #4]
90005e28:	681b      	ldr	r3, [r3, #0]
90005e2a:	4a39      	ldr	r2, [pc, #228]	; (90005f10 <HAL_DMA_IRQHandler+0xa64>)
90005e2c:	4293      	cmp	r3, r2
90005e2e:	d101      	bne.n	90005e34 <HAL_DMA_IRQHandler+0x988>
90005e30:	2301      	movs	r3, #1
90005e32:	e000      	b.n	90005e36 <HAL_DMA_IRQHandler+0x98a>
90005e34:	2300      	movs	r3, #0
90005e36:	2b00      	cmp	r3, #0
90005e38:	f000 823f 	beq.w	900062ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
90005e3c:	687b      	ldr	r3, [r7, #4]
90005e3e:	681b      	ldr	r3, [r3, #0]
90005e40:	681b      	ldr	r3, [r3, #0]
90005e42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
90005e44:	687b      	ldr	r3, [r7, #4]
90005e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005e48:	f003 031f 	and.w	r3, r3, #31
90005e4c:	2204      	movs	r2, #4
90005e4e:	409a      	lsls	r2, r3
90005e50:	697b      	ldr	r3, [r7, #20]
90005e52:	4013      	ands	r3, r2
90005e54:	2b00      	cmp	r3, #0
90005e56:	f000 80cd 	beq.w	90005ff4 <HAL_DMA_IRQHandler+0xb48>
90005e5a:	693b      	ldr	r3, [r7, #16]
90005e5c:	f003 0304 	and.w	r3, r3, #4
90005e60:	2b00      	cmp	r3, #0
90005e62:	f000 80c7 	beq.w	90005ff4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
90005e66:	687b      	ldr	r3, [r7, #4]
90005e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005e6a:	f003 031f 	and.w	r3, r3, #31
90005e6e:	2204      	movs	r2, #4
90005e70:	409a      	lsls	r2, r3
90005e72:	69fb      	ldr	r3, [r7, #28]
90005e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
90005e76:	693b      	ldr	r3, [r7, #16]
90005e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90005e7c:	2b00      	cmp	r3, #0
90005e7e:	d049      	beq.n	90005f14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
90005e80:	693b      	ldr	r3, [r7, #16]
90005e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90005e86:	2b00      	cmp	r3, #0
90005e88:	d109      	bne.n	90005e9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
90005e8a:	687b      	ldr	r3, [r7, #4]
90005e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90005e8e:	2b00      	cmp	r3, #0
90005e90:	f000 8210 	beq.w	900062b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
90005e94:	687b      	ldr	r3, [r7, #4]
90005e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90005e98:	6878      	ldr	r0, [r7, #4]
90005e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
90005e9c:	e20a      	b.n	900062b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
90005e9e:	687b      	ldr	r3, [r7, #4]
90005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005ea2:	2b00      	cmp	r3, #0
90005ea4:	f000 8206 	beq.w	900062b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
90005ea8:	687b      	ldr	r3, [r7, #4]
90005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005eac:	6878      	ldr	r0, [r7, #4]
90005eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
90005eb0:	e200      	b.n	900062b4 <HAL_DMA_IRQHandler+0xe08>
90005eb2:	bf00      	nop
90005eb4:	40020010 	.word	0x40020010
90005eb8:	40020028 	.word	0x40020028
90005ebc:	40020040 	.word	0x40020040
90005ec0:	40020058 	.word	0x40020058
90005ec4:	40020070 	.word	0x40020070
90005ec8:	40020088 	.word	0x40020088
90005ecc:	400200a0 	.word	0x400200a0
90005ed0:	400200b8 	.word	0x400200b8
90005ed4:	40020410 	.word	0x40020410
90005ed8:	40020428 	.word	0x40020428
90005edc:	40020440 	.word	0x40020440
90005ee0:	40020458 	.word	0x40020458
90005ee4:	40020470 	.word	0x40020470
90005ee8:	40020488 	.word	0x40020488
90005eec:	400204a0 	.word	0x400204a0
90005ef0:	400204b8 	.word	0x400204b8
90005ef4:	58025408 	.word	0x58025408
90005ef8:	5802541c 	.word	0x5802541c
90005efc:	58025430 	.word	0x58025430
90005f00:	58025444 	.word	0x58025444
90005f04:	58025458 	.word	0x58025458
90005f08:	5802546c 	.word	0x5802546c
90005f0c:	58025480 	.word	0x58025480
90005f10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
90005f14:	693b      	ldr	r3, [r7, #16]
90005f16:	f003 0320 	and.w	r3, r3, #32
90005f1a:	2b00      	cmp	r3, #0
90005f1c:	d160      	bne.n	90005fe0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
90005f1e:	687b      	ldr	r3, [r7, #4]
90005f20:	681b      	ldr	r3, [r3, #0]
90005f22:	4a7f      	ldr	r2, [pc, #508]	; (90006120 <HAL_DMA_IRQHandler+0xc74>)
90005f24:	4293      	cmp	r3, r2
90005f26:	d04a      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f28:	687b      	ldr	r3, [r7, #4]
90005f2a:	681b      	ldr	r3, [r3, #0]
90005f2c:	4a7d      	ldr	r2, [pc, #500]	; (90006124 <HAL_DMA_IRQHandler+0xc78>)
90005f2e:	4293      	cmp	r3, r2
90005f30:	d045      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f32:	687b      	ldr	r3, [r7, #4]
90005f34:	681b      	ldr	r3, [r3, #0]
90005f36:	4a7c      	ldr	r2, [pc, #496]	; (90006128 <HAL_DMA_IRQHandler+0xc7c>)
90005f38:	4293      	cmp	r3, r2
90005f3a:	d040      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f3c:	687b      	ldr	r3, [r7, #4]
90005f3e:	681b      	ldr	r3, [r3, #0]
90005f40:	4a7a      	ldr	r2, [pc, #488]	; (9000612c <HAL_DMA_IRQHandler+0xc80>)
90005f42:	4293      	cmp	r3, r2
90005f44:	d03b      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f46:	687b      	ldr	r3, [r7, #4]
90005f48:	681b      	ldr	r3, [r3, #0]
90005f4a:	4a79      	ldr	r2, [pc, #484]	; (90006130 <HAL_DMA_IRQHandler+0xc84>)
90005f4c:	4293      	cmp	r3, r2
90005f4e:	d036      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f50:	687b      	ldr	r3, [r7, #4]
90005f52:	681b      	ldr	r3, [r3, #0]
90005f54:	4a77      	ldr	r2, [pc, #476]	; (90006134 <HAL_DMA_IRQHandler+0xc88>)
90005f56:	4293      	cmp	r3, r2
90005f58:	d031      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f5a:	687b      	ldr	r3, [r7, #4]
90005f5c:	681b      	ldr	r3, [r3, #0]
90005f5e:	4a76      	ldr	r2, [pc, #472]	; (90006138 <HAL_DMA_IRQHandler+0xc8c>)
90005f60:	4293      	cmp	r3, r2
90005f62:	d02c      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f64:	687b      	ldr	r3, [r7, #4]
90005f66:	681b      	ldr	r3, [r3, #0]
90005f68:	4a74      	ldr	r2, [pc, #464]	; (9000613c <HAL_DMA_IRQHandler+0xc90>)
90005f6a:	4293      	cmp	r3, r2
90005f6c:	d027      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f6e:	687b      	ldr	r3, [r7, #4]
90005f70:	681b      	ldr	r3, [r3, #0]
90005f72:	4a73      	ldr	r2, [pc, #460]	; (90006140 <HAL_DMA_IRQHandler+0xc94>)
90005f74:	4293      	cmp	r3, r2
90005f76:	d022      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f78:	687b      	ldr	r3, [r7, #4]
90005f7a:	681b      	ldr	r3, [r3, #0]
90005f7c:	4a71      	ldr	r2, [pc, #452]	; (90006144 <HAL_DMA_IRQHandler+0xc98>)
90005f7e:	4293      	cmp	r3, r2
90005f80:	d01d      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f82:	687b      	ldr	r3, [r7, #4]
90005f84:	681b      	ldr	r3, [r3, #0]
90005f86:	4a70      	ldr	r2, [pc, #448]	; (90006148 <HAL_DMA_IRQHandler+0xc9c>)
90005f88:	4293      	cmp	r3, r2
90005f8a:	d018      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f8c:	687b      	ldr	r3, [r7, #4]
90005f8e:	681b      	ldr	r3, [r3, #0]
90005f90:	4a6e      	ldr	r2, [pc, #440]	; (9000614c <HAL_DMA_IRQHandler+0xca0>)
90005f92:	4293      	cmp	r3, r2
90005f94:	d013      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005f96:	687b      	ldr	r3, [r7, #4]
90005f98:	681b      	ldr	r3, [r3, #0]
90005f9a:	4a6d      	ldr	r2, [pc, #436]	; (90006150 <HAL_DMA_IRQHandler+0xca4>)
90005f9c:	4293      	cmp	r3, r2
90005f9e:	d00e      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005fa0:	687b      	ldr	r3, [r7, #4]
90005fa2:	681b      	ldr	r3, [r3, #0]
90005fa4:	4a6b      	ldr	r2, [pc, #428]	; (90006154 <HAL_DMA_IRQHandler+0xca8>)
90005fa6:	4293      	cmp	r3, r2
90005fa8:	d009      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005faa:	687b      	ldr	r3, [r7, #4]
90005fac:	681b      	ldr	r3, [r3, #0]
90005fae:	4a6a      	ldr	r2, [pc, #424]	; (90006158 <HAL_DMA_IRQHandler+0xcac>)
90005fb0:	4293      	cmp	r3, r2
90005fb2:	d004      	beq.n	90005fbe <HAL_DMA_IRQHandler+0xb12>
90005fb4:	687b      	ldr	r3, [r7, #4]
90005fb6:	681b      	ldr	r3, [r3, #0]
90005fb8:	4a68      	ldr	r2, [pc, #416]	; (9000615c <HAL_DMA_IRQHandler+0xcb0>)
90005fba:	4293      	cmp	r3, r2
90005fbc:	d108      	bne.n	90005fd0 <HAL_DMA_IRQHandler+0xb24>
90005fbe:	687b      	ldr	r3, [r7, #4]
90005fc0:	681b      	ldr	r3, [r3, #0]
90005fc2:	681a      	ldr	r2, [r3, #0]
90005fc4:	687b      	ldr	r3, [r7, #4]
90005fc6:	681b      	ldr	r3, [r3, #0]
90005fc8:	f022 0208 	bic.w	r2, r2, #8
90005fcc:	601a      	str	r2, [r3, #0]
90005fce:	e007      	b.n	90005fe0 <HAL_DMA_IRQHandler+0xb34>
90005fd0:	687b      	ldr	r3, [r7, #4]
90005fd2:	681b      	ldr	r3, [r3, #0]
90005fd4:	681a      	ldr	r2, [r3, #0]
90005fd6:	687b      	ldr	r3, [r7, #4]
90005fd8:	681b      	ldr	r3, [r3, #0]
90005fda:	f022 0204 	bic.w	r2, r2, #4
90005fde:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
90005fe0:	687b      	ldr	r3, [r7, #4]
90005fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005fe4:	2b00      	cmp	r3, #0
90005fe6:	f000 8165 	beq.w	900062b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
90005fea:	687b      	ldr	r3, [r7, #4]
90005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005fee:	6878      	ldr	r0, [r7, #4]
90005ff0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
90005ff2:	e15f      	b.n	900062b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
90005ff4:	687b      	ldr	r3, [r7, #4]
90005ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90005ff8:	f003 031f 	and.w	r3, r3, #31
90005ffc:	2202      	movs	r2, #2
90005ffe:	409a      	lsls	r2, r3
90006000:	697b      	ldr	r3, [r7, #20]
90006002:	4013      	ands	r3, r2
90006004:	2b00      	cmp	r3, #0
90006006:	f000 80c5 	beq.w	90006194 <HAL_DMA_IRQHandler+0xce8>
9000600a:	693b      	ldr	r3, [r7, #16]
9000600c:	f003 0302 	and.w	r3, r3, #2
90006010:	2b00      	cmp	r3, #0
90006012:	f000 80bf 	beq.w	90006194 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
90006016:	687b      	ldr	r3, [r7, #4]
90006018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000601a:	f003 031f 	and.w	r3, r3, #31
9000601e:	2202      	movs	r2, #2
90006020:	409a      	lsls	r2, r3
90006022:	69fb      	ldr	r3, [r7, #28]
90006024:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
90006026:	693b      	ldr	r3, [r7, #16]
90006028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
9000602c:	2b00      	cmp	r3, #0
9000602e:	d018      	beq.n	90006062 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
90006030:	693b      	ldr	r3, [r7, #16]
90006032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90006036:	2b00      	cmp	r3, #0
90006038:	d109      	bne.n	9000604e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
9000603a:	687b      	ldr	r3, [r7, #4]
9000603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000603e:	2b00      	cmp	r3, #0
90006040:	f000 813a 	beq.w	900062b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
90006044:	687b      	ldr	r3, [r7, #4]
90006046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90006048:	6878      	ldr	r0, [r7, #4]
9000604a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
9000604c:	e134      	b.n	900062b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
9000604e:	687b      	ldr	r3, [r7, #4]
90006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006052:	2b00      	cmp	r3, #0
90006054:	f000 8130 	beq.w	900062b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
90006058:	687b      	ldr	r3, [r7, #4]
9000605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000605c:	6878      	ldr	r0, [r7, #4]
9000605e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
90006060:	e12a      	b.n	900062b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
90006062:	693b      	ldr	r3, [r7, #16]
90006064:	f003 0320 	and.w	r3, r3, #32
90006068:	2b00      	cmp	r3, #0
9000606a:	f040 8089 	bne.w	90006180 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
9000606e:	687b      	ldr	r3, [r7, #4]
90006070:	681b      	ldr	r3, [r3, #0]
90006072:	4a2b      	ldr	r2, [pc, #172]	; (90006120 <HAL_DMA_IRQHandler+0xc74>)
90006074:	4293      	cmp	r3, r2
90006076:	d04a      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
90006078:	687b      	ldr	r3, [r7, #4]
9000607a:	681b      	ldr	r3, [r3, #0]
9000607c:	4a29      	ldr	r2, [pc, #164]	; (90006124 <HAL_DMA_IRQHandler+0xc78>)
9000607e:	4293      	cmp	r3, r2
90006080:	d045      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
90006082:	687b      	ldr	r3, [r7, #4]
90006084:	681b      	ldr	r3, [r3, #0]
90006086:	4a28      	ldr	r2, [pc, #160]	; (90006128 <HAL_DMA_IRQHandler+0xc7c>)
90006088:	4293      	cmp	r3, r2
9000608a:	d040      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
9000608c:	687b      	ldr	r3, [r7, #4]
9000608e:	681b      	ldr	r3, [r3, #0]
90006090:	4a26      	ldr	r2, [pc, #152]	; (9000612c <HAL_DMA_IRQHandler+0xc80>)
90006092:	4293      	cmp	r3, r2
90006094:	d03b      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
90006096:	687b      	ldr	r3, [r7, #4]
90006098:	681b      	ldr	r3, [r3, #0]
9000609a:	4a25      	ldr	r2, [pc, #148]	; (90006130 <HAL_DMA_IRQHandler+0xc84>)
9000609c:	4293      	cmp	r3, r2
9000609e:	d036      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060a0:	687b      	ldr	r3, [r7, #4]
900060a2:	681b      	ldr	r3, [r3, #0]
900060a4:	4a23      	ldr	r2, [pc, #140]	; (90006134 <HAL_DMA_IRQHandler+0xc88>)
900060a6:	4293      	cmp	r3, r2
900060a8:	d031      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060aa:	687b      	ldr	r3, [r7, #4]
900060ac:	681b      	ldr	r3, [r3, #0]
900060ae:	4a22      	ldr	r2, [pc, #136]	; (90006138 <HAL_DMA_IRQHandler+0xc8c>)
900060b0:	4293      	cmp	r3, r2
900060b2:	d02c      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060b4:	687b      	ldr	r3, [r7, #4]
900060b6:	681b      	ldr	r3, [r3, #0]
900060b8:	4a20      	ldr	r2, [pc, #128]	; (9000613c <HAL_DMA_IRQHandler+0xc90>)
900060ba:	4293      	cmp	r3, r2
900060bc:	d027      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060be:	687b      	ldr	r3, [r7, #4]
900060c0:	681b      	ldr	r3, [r3, #0]
900060c2:	4a1f      	ldr	r2, [pc, #124]	; (90006140 <HAL_DMA_IRQHandler+0xc94>)
900060c4:	4293      	cmp	r3, r2
900060c6:	d022      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060c8:	687b      	ldr	r3, [r7, #4]
900060ca:	681b      	ldr	r3, [r3, #0]
900060cc:	4a1d      	ldr	r2, [pc, #116]	; (90006144 <HAL_DMA_IRQHandler+0xc98>)
900060ce:	4293      	cmp	r3, r2
900060d0:	d01d      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060d2:	687b      	ldr	r3, [r7, #4]
900060d4:	681b      	ldr	r3, [r3, #0]
900060d6:	4a1c      	ldr	r2, [pc, #112]	; (90006148 <HAL_DMA_IRQHandler+0xc9c>)
900060d8:	4293      	cmp	r3, r2
900060da:	d018      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060dc:	687b      	ldr	r3, [r7, #4]
900060de:	681b      	ldr	r3, [r3, #0]
900060e0:	4a1a      	ldr	r2, [pc, #104]	; (9000614c <HAL_DMA_IRQHandler+0xca0>)
900060e2:	4293      	cmp	r3, r2
900060e4:	d013      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060e6:	687b      	ldr	r3, [r7, #4]
900060e8:	681b      	ldr	r3, [r3, #0]
900060ea:	4a19      	ldr	r2, [pc, #100]	; (90006150 <HAL_DMA_IRQHandler+0xca4>)
900060ec:	4293      	cmp	r3, r2
900060ee:	d00e      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060f0:	687b      	ldr	r3, [r7, #4]
900060f2:	681b      	ldr	r3, [r3, #0]
900060f4:	4a17      	ldr	r2, [pc, #92]	; (90006154 <HAL_DMA_IRQHandler+0xca8>)
900060f6:	4293      	cmp	r3, r2
900060f8:	d009      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
900060fa:	687b      	ldr	r3, [r7, #4]
900060fc:	681b      	ldr	r3, [r3, #0]
900060fe:	4a16      	ldr	r2, [pc, #88]	; (90006158 <HAL_DMA_IRQHandler+0xcac>)
90006100:	4293      	cmp	r3, r2
90006102:	d004      	beq.n	9000610e <HAL_DMA_IRQHandler+0xc62>
90006104:	687b      	ldr	r3, [r7, #4]
90006106:	681b      	ldr	r3, [r3, #0]
90006108:	4a14      	ldr	r2, [pc, #80]	; (9000615c <HAL_DMA_IRQHandler+0xcb0>)
9000610a:	4293      	cmp	r3, r2
9000610c:	d128      	bne.n	90006160 <HAL_DMA_IRQHandler+0xcb4>
9000610e:	687b      	ldr	r3, [r7, #4]
90006110:	681b      	ldr	r3, [r3, #0]
90006112:	681a      	ldr	r2, [r3, #0]
90006114:	687b      	ldr	r3, [r7, #4]
90006116:	681b      	ldr	r3, [r3, #0]
90006118:	f022 0214 	bic.w	r2, r2, #20
9000611c:	601a      	str	r2, [r3, #0]
9000611e:	e027      	b.n	90006170 <HAL_DMA_IRQHandler+0xcc4>
90006120:	40020010 	.word	0x40020010
90006124:	40020028 	.word	0x40020028
90006128:	40020040 	.word	0x40020040
9000612c:	40020058 	.word	0x40020058
90006130:	40020070 	.word	0x40020070
90006134:	40020088 	.word	0x40020088
90006138:	400200a0 	.word	0x400200a0
9000613c:	400200b8 	.word	0x400200b8
90006140:	40020410 	.word	0x40020410
90006144:	40020428 	.word	0x40020428
90006148:	40020440 	.word	0x40020440
9000614c:	40020458 	.word	0x40020458
90006150:	40020470 	.word	0x40020470
90006154:	40020488 	.word	0x40020488
90006158:	400204a0 	.word	0x400204a0
9000615c:	400204b8 	.word	0x400204b8
90006160:	687b      	ldr	r3, [r7, #4]
90006162:	681b      	ldr	r3, [r3, #0]
90006164:	681a      	ldr	r2, [r3, #0]
90006166:	687b      	ldr	r3, [r7, #4]
90006168:	681b      	ldr	r3, [r3, #0]
9000616a:	f022 020a 	bic.w	r2, r2, #10
9000616e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
90006170:	687b      	ldr	r3, [r7, #4]
90006172:	2201      	movs	r2, #1
90006174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
90006178:	687b      	ldr	r3, [r7, #4]
9000617a:	2200      	movs	r2, #0
9000617c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
90006180:	687b      	ldr	r3, [r7, #4]
90006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006184:	2b00      	cmp	r3, #0
90006186:	f000 8097 	beq.w	900062b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
9000618a:	687b      	ldr	r3, [r7, #4]
9000618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000618e:	6878      	ldr	r0, [r7, #4]
90006190:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
90006192:	e091      	b.n	900062b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
90006194:	687b      	ldr	r3, [r7, #4]
90006196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90006198:	f003 031f 	and.w	r3, r3, #31
9000619c:	2208      	movs	r2, #8
9000619e:	409a      	lsls	r2, r3
900061a0:	697b      	ldr	r3, [r7, #20]
900061a2:	4013      	ands	r3, r2
900061a4:	2b00      	cmp	r3, #0
900061a6:	f000 8088 	beq.w	900062ba <HAL_DMA_IRQHandler+0xe0e>
900061aa:	693b      	ldr	r3, [r7, #16]
900061ac:	f003 0308 	and.w	r3, r3, #8
900061b0:	2b00      	cmp	r3, #0
900061b2:	f000 8082 	beq.w	900062ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
900061b6:	687b      	ldr	r3, [r7, #4]
900061b8:	681b      	ldr	r3, [r3, #0]
900061ba:	4a41      	ldr	r2, [pc, #260]	; (900062c0 <HAL_DMA_IRQHandler+0xe14>)
900061bc:	4293      	cmp	r3, r2
900061be:	d04a      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
900061c0:	687b      	ldr	r3, [r7, #4]
900061c2:	681b      	ldr	r3, [r3, #0]
900061c4:	4a3f      	ldr	r2, [pc, #252]	; (900062c4 <HAL_DMA_IRQHandler+0xe18>)
900061c6:	4293      	cmp	r3, r2
900061c8:	d045      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
900061ca:	687b      	ldr	r3, [r7, #4]
900061cc:	681b      	ldr	r3, [r3, #0]
900061ce:	4a3e      	ldr	r2, [pc, #248]	; (900062c8 <HAL_DMA_IRQHandler+0xe1c>)
900061d0:	4293      	cmp	r3, r2
900061d2:	d040      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
900061d4:	687b      	ldr	r3, [r7, #4]
900061d6:	681b      	ldr	r3, [r3, #0]
900061d8:	4a3c      	ldr	r2, [pc, #240]	; (900062cc <HAL_DMA_IRQHandler+0xe20>)
900061da:	4293      	cmp	r3, r2
900061dc:	d03b      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
900061de:	687b      	ldr	r3, [r7, #4]
900061e0:	681b      	ldr	r3, [r3, #0]
900061e2:	4a3b      	ldr	r2, [pc, #236]	; (900062d0 <HAL_DMA_IRQHandler+0xe24>)
900061e4:	4293      	cmp	r3, r2
900061e6:	d036      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
900061e8:	687b      	ldr	r3, [r7, #4]
900061ea:	681b      	ldr	r3, [r3, #0]
900061ec:	4a39      	ldr	r2, [pc, #228]	; (900062d4 <HAL_DMA_IRQHandler+0xe28>)
900061ee:	4293      	cmp	r3, r2
900061f0:	d031      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
900061f2:	687b      	ldr	r3, [r7, #4]
900061f4:	681b      	ldr	r3, [r3, #0]
900061f6:	4a38      	ldr	r2, [pc, #224]	; (900062d8 <HAL_DMA_IRQHandler+0xe2c>)
900061f8:	4293      	cmp	r3, r2
900061fa:	d02c      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
900061fc:	687b      	ldr	r3, [r7, #4]
900061fe:	681b      	ldr	r3, [r3, #0]
90006200:	4a36      	ldr	r2, [pc, #216]	; (900062dc <HAL_DMA_IRQHandler+0xe30>)
90006202:	4293      	cmp	r3, r2
90006204:	d027      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
90006206:	687b      	ldr	r3, [r7, #4]
90006208:	681b      	ldr	r3, [r3, #0]
9000620a:	4a35      	ldr	r2, [pc, #212]	; (900062e0 <HAL_DMA_IRQHandler+0xe34>)
9000620c:	4293      	cmp	r3, r2
9000620e:	d022      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
90006210:	687b      	ldr	r3, [r7, #4]
90006212:	681b      	ldr	r3, [r3, #0]
90006214:	4a33      	ldr	r2, [pc, #204]	; (900062e4 <HAL_DMA_IRQHandler+0xe38>)
90006216:	4293      	cmp	r3, r2
90006218:	d01d      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
9000621a:	687b      	ldr	r3, [r7, #4]
9000621c:	681b      	ldr	r3, [r3, #0]
9000621e:	4a32      	ldr	r2, [pc, #200]	; (900062e8 <HAL_DMA_IRQHandler+0xe3c>)
90006220:	4293      	cmp	r3, r2
90006222:	d018      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
90006224:	687b      	ldr	r3, [r7, #4]
90006226:	681b      	ldr	r3, [r3, #0]
90006228:	4a30      	ldr	r2, [pc, #192]	; (900062ec <HAL_DMA_IRQHandler+0xe40>)
9000622a:	4293      	cmp	r3, r2
9000622c:	d013      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
9000622e:	687b      	ldr	r3, [r7, #4]
90006230:	681b      	ldr	r3, [r3, #0]
90006232:	4a2f      	ldr	r2, [pc, #188]	; (900062f0 <HAL_DMA_IRQHandler+0xe44>)
90006234:	4293      	cmp	r3, r2
90006236:	d00e      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
90006238:	687b      	ldr	r3, [r7, #4]
9000623a:	681b      	ldr	r3, [r3, #0]
9000623c:	4a2d      	ldr	r2, [pc, #180]	; (900062f4 <HAL_DMA_IRQHandler+0xe48>)
9000623e:	4293      	cmp	r3, r2
90006240:	d009      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
90006242:	687b      	ldr	r3, [r7, #4]
90006244:	681b      	ldr	r3, [r3, #0]
90006246:	4a2c      	ldr	r2, [pc, #176]	; (900062f8 <HAL_DMA_IRQHandler+0xe4c>)
90006248:	4293      	cmp	r3, r2
9000624a:	d004      	beq.n	90006256 <HAL_DMA_IRQHandler+0xdaa>
9000624c:	687b      	ldr	r3, [r7, #4]
9000624e:	681b      	ldr	r3, [r3, #0]
90006250:	4a2a      	ldr	r2, [pc, #168]	; (900062fc <HAL_DMA_IRQHandler+0xe50>)
90006252:	4293      	cmp	r3, r2
90006254:	d108      	bne.n	90006268 <HAL_DMA_IRQHandler+0xdbc>
90006256:	687b      	ldr	r3, [r7, #4]
90006258:	681b      	ldr	r3, [r3, #0]
9000625a:	681a      	ldr	r2, [r3, #0]
9000625c:	687b      	ldr	r3, [r7, #4]
9000625e:	681b      	ldr	r3, [r3, #0]
90006260:	f022 021c 	bic.w	r2, r2, #28
90006264:	601a      	str	r2, [r3, #0]
90006266:	e007      	b.n	90006278 <HAL_DMA_IRQHandler+0xdcc>
90006268:	687b      	ldr	r3, [r7, #4]
9000626a:	681b      	ldr	r3, [r3, #0]
9000626c:	681a      	ldr	r2, [r3, #0]
9000626e:	687b      	ldr	r3, [r7, #4]
90006270:	681b      	ldr	r3, [r3, #0]
90006272:	f022 020e 	bic.w	r2, r2, #14
90006276:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
90006278:	687b      	ldr	r3, [r7, #4]
9000627a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000627c:	f003 031f 	and.w	r3, r3, #31
90006280:	2201      	movs	r2, #1
90006282:	409a      	lsls	r2, r3
90006284:	69fb      	ldr	r3, [r7, #28]
90006286:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
90006288:	687b      	ldr	r3, [r7, #4]
9000628a:	2201      	movs	r2, #1
9000628c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
9000628e:	687b      	ldr	r3, [r7, #4]
90006290:	2201      	movs	r2, #1
90006292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
90006296:	687b      	ldr	r3, [r7, #4]
90006298:	2200      	movs	r2, #0
9000629a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
9000629e:	687b      	ldr	r3, [r7, #4]
900062a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900062a2:	2b00      	cmp	r3, #0
900062a4:	d009      	beq.n	900062ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
900062a6:	687b      	ldr	r3, [r7, #4]
900062a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900062aa:	6878      	ldr	r0, [r7, #4]
900062ac:	4798      	blx	r3
900062ae:	e004      	b.n	900062ba <HAL_DMA_IRQHandler+0xe0e>
          return;
900062b0:	bf00      	nop
900062b2:	e002      	b.n	900062ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
900062b4:	bf00      	nop
900062b6:	e000      	b.n	900062ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
900062b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
900062ba:	3728      	adds	r7, #40	; 0x28
900062bc:	46bd      	mov	sp, r7
900062be:	bd80      	pop	{r7, pc}
900062c0:	40020010 	.word	0x40020010
900062c4:	40020028 	.word	0x40020028
900062c8:	40020040 	.word	0x40020040
900062cc:	40020058 	.word	0x40020058
900062d0:	40020070 	.word	0x40020070
900062d4:	40020088 	.word	0x40020088
900062d8:	400200a0 	.word	0x400200a0
900062dc:	400200b8 	.word	0x400200b8
900062e0:	40020410 	.word	0x40020410
900062e4:	40020428 	.word	0x40020428
900062e8:	40020440 	.word	0x40020440
900062ec:	40020458 	.word	0x40020458
900062f0:	40020470 	.word	0x40020470
900062f4:	40020488 	.word	0x40020488
900062f8:	400204a0 	.word	0x400204a0
900062fc:	400204b8 	.word	0x400204b8

90006300 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
90006300:	b480      	push	{r7}
90006302:	b087      	sub	sp, #28
90006304:	af00      	add	r7, sp, #0
90006306:	60f8      	str	r0, [r7, #12]
90006308:	60b9      	str	r1, [r7, #8]
9000630a:	607a      	str	r2, [r7, #4]
9000630c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
9000630e:	68fb      	ldr	r3, [r7, #12]
90006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90006312:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
90006314:	68fb      	ldr	r3, [r7, #12]
90006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90006318:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000631a:	68fb      	ldr	r3, [r7, #12]
9000631c:	681b      	ldr	r3, [r3, #0]
9000631e:	4a7f      	ldr	r2, [pc, #508]	; (9000651c <DMA_SetConfig+0x21c>)
90006320:	4293      	cmp	r3, r2
90006322:	d072      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006324:	68fb      	ldr	r3, [r7, #12]
90006326:	681b      	ldr	r3, [r3, #0]
90006328:	4a7d      	ldr	r2, [pc, #500]	; (90006520 <DMA_SetConfig+0x220>)
9000632a:	4293      	cmp	r3, r2
9000632c:	d06d      	beq.n	9000640a <DMA_SetConfig+0x10a>
9000632e:	68fb      	ldr	r3, [r7, #12]
90006330:	681b      	ldr	r3, [r3, #0]
90006332:	4a7c      	ldr	r2, [pc, #496]	; (90006524 <DMA_SetConfig+0x224>)
90006334:	4293      	cmp	r3, r2
90006336:	d068      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006338:	68fb      	ldr	r3, [r7, #12]
9000633a:	681b      	ldr	r3, [r3, #0]
9000633c:	4a7a      	ldr	r2, [pc, #488]	; (90006528 <DMA_SetConfig+0x228>)
9000633e:	4293      	cmp	r3, r2
90006340:	d063      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006342:	68fb      	ldr	r3, [r7, #12]
90006344:	681b      	ldr	r3, [r3, #0]
90006346:	4a79      	ldr	r2, [pc, #484]	; (9000652c <DMA_SetConfig+0x22c>)
90006348:	4293      	cmp	r3, r2
9000634a:	d05e      	beq.n	9000640a <DMA_SetConfig+0x10a>
9000634c:	68fb      	ldr	r3, [r7, #12]
9000634e:	681b      	ldr	r3, [r3, #0]
90006350:	4a77      	ldr	r2, [pc, #476]	; (90006530 <DMA_SetConfig+0x230>)
90006352:	4293      	cmp	r3, r2
90006354:	d059      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006356:	68fb      	ldr	r3, [r7, #12]
90006358:	681b      	ldr	r3, [r3, #0]
9000635a:	4a76      	ldr	r2, [pc, #472]	; (90006534 <DMA_SetConfig+0x234>)
9000635c:	4293      	cmp	r3, r2
9000635e:	d054      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006360:	68fb      	ldr	r3, [r7, #12]
90006362:	681b      	ldr	r3, [r3, #0]
90006364:	4a74      	ldr	r2, [pc, #464]	; (90006538 <DMA_SetConfig+0x238>)
90006366:	4293      	cmp	r3, r2
90006368:	d04f      	beq.n	9000640a <DMA_SetConfig+0x10a>
9000636a:	68fb      	ldr	r3, [r7, #12]
9000636c:	681b      	ldr	r3, [r3, #0]
9000636e:	4a73      	ldr	r2, [pc, #460]	; (9000653c <DMA_SetConfig+0x23c>)
90006370:	4293      	cmp	r3, r2
90006372:	d04a      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006374:	68fb      	ldr	r3, [r7, #12]
90006376:	681b      	ldr	r3, [r3, #0]
90006378:	4a71      	ldr	r2, [pc, #452]	; (90006540 <DMA_SetConfig+0x240>)
9000637a:	4293      	cmp	r3, r2
9000637c:	d045      	beq.n	9000640a <DMA_SetConfig+0x10a>
9000637e:	68fb      	ldr	r3, [r7, #12]
90006380:	681b      	ldr	r3, [r3, #0]
90006382:	4a70      	ldr	r2, [pc, #448]	; (90006544 <DMA_SetConfig+0x244>)
90006384:	4293      	cmp	r3, r2
90006386:	d040      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006388:	68fb      	ldr	r3, [r7, #12]
9000638a:	681b      	ldr	r3, [r3, #0]
9000638c:	4a6e      	ldr	r2, [pc, #440]	; (90006548 <DMA_SetConfig+0x248>)
9000638e:	4293      	cmp	r3, r2
90006390:	d03b      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006392:	68fb      	ldr	r3, [r7, #12]
90006394:	681b      	ldr	r3, [r3, #0]
90006396:	4a6d      	ldr	r2, [pc, #436]	; (9000654c <DMA_SetConfig+0x24c>)
90006398:	4293      	cmp	r3, r2
9000639a:	d036      	beq.n	9000640a <DMA_SetConfig+0x10a>
9000639c:	68fb      	ldr	r3, [r7, #12]
9000639e:	681b      	ldr	r3, [r3, #0]
900063a0:	4a6b      	ldr	r2, [pc, #428]	; (90006550 <DMA_SetConfig+0x250>)
900063a2:	4293      	cmp	r3, r2
900063a4:	d031      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063a6:	68fb      	ldr	r3, [r7, #12]
900063a8:	681b      	ldr	r3, [r3, #0]
900063aa:	4a6a      	ldr	r2, [pc, #424]	; (90006554 <DMA_SetConfig+0x254>)
900063ac:	4293      	cmp	r3, r2
900063ae:	d02c      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063b0:	68fb      	ldr	r3, [r7, #12]
900063b2:	681b      	ldr	r3, [r3, #0]
900063b4:	4a68      	ldr	r2, [pc, #416]	; (90006558 <DMA_SetConfig+0x258>)
900063b6:	4293      	cmp	r3, r2
900063b8:	d027      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063ba:	68fb      	ldr	r3, [r7, #12]
900063bc:	681b      	ldr	r3, [r3, #0]
900063be:	4a67      	ldr	r2, [pc, #412]	; (9000655c <DMA_SetConfig+0x25c>)
900063c0:	4293      	cmp	r3, r2
900063c2:	d022      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063c4:	68fb      	ldr	r3, [r7, #12]
900063c6:	681b      	ldr	r3, [r3, #0]
900063c8:	4a65      	ldr	r2, [pc, #404]	; (90006560 <DMA_SetConfig+0x260>)
900063ca:	4293      	cmp	r3, r2
900063cc:	d01d      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063ce:	68fb      	ldr	r3, [r7, #12]
900063d0:	681b      	ldr	r3, [r3, #0]
900063d2:	4a64      	ldr	r2, [pc, #400]	; (90006564 <DMA_SetConfig+0x264>)
900063d4:	4293      	cmp	r3, r2
900063d6:	d018      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063d8:	68fb      	ldr	r3, [r7, #12]
900063da:	681b      	ldr	r3, [r3, #0]
900063dc:	4a62      	ldr	r2, [pc, #392]	; (90006568 <DMA_SetConfig+0x268>)
900063de:	4293      	cmp	r3, r2
900063e0:	d013      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063e2:	68fb      	ldr	r3, [r7, #12]
900063e4:	681b      	ldr	r3, [r3, #0]
900063e6:	4a61      	ldr	r2, [pc, #388]	; (9000656c <DMA_SetConfig+0x26c>)
900063e8:	4293      	cmp	r3, r2
900063ea:	d00e      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063ec:	68fb      	ldr	r3, [r7, #12]
900063ee:	681b      	ldr	r3, [r3, #0]
900063f0:	4a5f      	ldr	r2, [pc, #380]	; (90006570 <DMA_SetConfig+0x270>)
900063f2:	4293      	cmp	r3, r2
900063f4:	d009      	beq.n	9000640a <DMA_SetConfig+0x10a>
900063f6:	68fb      	ldr	r3, [r7, #12]
900063f8:	681b      	ldr	r3, [r3, #0]
900063fa:	4a5e      	ldr	r2, [pc, #376]	; (90006574 <DMA_SetConfig+0x274>)
900063fc:	4293      	cmp	r3, r2
900063fe:	d004      	beq.n	9000640a <DMA_SetConfig+0x10a>
90006400:	68fb      	ldr	r3, [r7, #12]
90006402:	681b      	ldr	r3, [r3, #0]
90006404:	4a5c      	ldr	r2, [pc, #368]	; (90006578 <DMA_SetConfig+0x278>)
90006406:	4293      	cmp	r3, r2
90006408:	d101      	bne.n	9000640e <DMA_SetConfig+0x10e>
9000640a:	2301      	movs	r3, #1
9000640c:	e000      	b.n	90006410 <DMA_SetConfig+0x110>
9000640e:	2300      	movs	r3, #0
90006410:	2b00      	cmp	r3, #0
90006412:	d00d      	beq.n	90006430 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
90006414:	68fb      	ldr	r3, [r7, #12]
90006416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90006418:	68fa      	ldr	r2, [r7, #12]
9000641a:	6e92      	ldr	r2, [r2, #104]	; 0x68
9000641c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
9000641e:	68fb      	ldr	r3, [r7, #12]
90006420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90006422:	2b00      	cmp	r3, #0
90006424:	d004      	beq.n	90006430 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
90006426:	68fb      	ldr	r3, [r7, #12]
90006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000642a:	68fa      	ldr	r2, [r7, #12]
9000642c:	6f52      	ldr	r2, [r2, #116]	; 0x74
9000642e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90006430:	68fb      	ldr	r3, [r7, #12]
90006432:	681b      	ldr	r3, [r3, #0]
90006434:	4a39      	ldr	r2, [pc, #228]	; (9000651c <DMA_SetConfig+0x21c>)
90006436:	4293      	cmp	r3, r2
90006438:	d04a      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
9000643a:	68fb      	ldr	r3, [r7, #12]
9000643c:	681b      	ldr	r3, [r3, #0]
9000643e:	4a38      	ldr	r2, [pc, #224]	; (90006520 <DMA_SetConfig+0x220>)
90006440:	4293      	cmp	r3, r2
90006442:	d045      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
90006444:	68fb      	ldr	r3, [r7, #12]
90006446:	681b      	ldr	r3, [r3, #0]
90006448:	4a36      	ldr	r2, [pc, #216]	; (90006524 <DMA_SetConfig+0x224>)
9000644a:	4293      	cmp	r3, r2
9000644c:	d040      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
9000644e:	68fb      	ldr	r3, [r7, #12]
90006450:	681b      	ldr	r3, [r3, #0]
90006452:	4a35      	ldr	r2, [pc, #212]	; (90006528 <DMA_SetConfig+0x228>)
90006454:	4293      	cmp	r3, r2
90006456:	d03b      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
90006458:	68fb      	ldr	r3, [r7, #12]
9000645a:	681b      	ldr	r3, [r3, #0]
9000645c:	4a33      	ldr	r2, [pc, #204]	; (9000652c <DMA_SetConfig+0x22c>)
9000645e:	4293      	cmp	r3, r2
90006460:	d036      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
90006462:	68fb      	ldr	r3, [r7, #12]
90006464:	681b      	ldr	r3, [r3, #0]
90006466:	4a32      	ldr	r2, [pc, #200]	; (90006530 <DMA_SetConfig+0x230>)
90006468:	4293      	cmp	r3, r2
9000646a:	d031      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
9000646c:	68fb      	ldr	r3, [r7, #12]
9000646e:	681b      	ldr	r3, [r3, #0]
90006470:	4a30      	ldr	r2, [pc, #192]	; (90006534 <DMA_SetConfig+0x234>)
90006472:	4293      	cmp	r3, r2
90006474:	d02c      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
90006476:	68fb      	ldr	r3, [r7, #12]
90006478:	681b      	ldr	r3, [r3, #0]
9000647a:	4a2f      	ldr	r2, [pc, #188]	; (90006538 <DMA_SetConfig+0x238>)
9000647c:	4293      	cmp	r3, r2
9000647e:	d027      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
90006480:	68fb      	ldr	r3, [r7, #12]
90006482:	681b      	ldr	r3, [r3, #0]
90006484:	4a2d      	ldr	r2, [pc, #180]	; (9000653c <DMA_SetConfig+0x23c>)
90006486:	4293      	cmp	r3, r2
90006488:	d022      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
9000648a:	68fb      	ldr	r3, [r7, #12]
9000648c:	681b      	ldr	r3, [r3, #0]
9000648e:	4a2c      	ldr	r2, [pc, #176]	; (90006540 <DMA_SetConfig+0x240>)
90006490:	4293      	cmp	r3, r2
90006492:	d01d      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
90006494:	68fb      	ldr	r3, [r7, #12]
90006496:	681b      	ldr	r3, [r3, #0]
90006498:	4a2a      	ldr	r2, [pc, #168]	; (90006544 <DMA_SetConfig+0x244>)
9000649a:	4293      	cmp	r3, r2
9000649c:	d018      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
9000649e:	68fb      	ldr	r3, [r7, #12]
900064a0:	681b      	ldr	r3, [r3, #0]
900064a2:	4a29      	ldr	r2, [pc, #164]	; (90006548 <DMA_SetConfig+0x248>)
900064a4:	4293      	cmp	r3, r2
900064a6:	d013      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
900064a8:	68fb      	ldr	r3, [r7, #12]
900064aa:	681b      	ldr	r3, [r3, #0]
900064ac:	4a27      	ldr	r2, [pc, #156]	; (9000654c <DMA_SetConfig+0x24c>)
900064ae:	4293      	cmp	r3, r2
900064b0:	d00e      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
900064b2:	68fb      	ldr	r3, [r7, #12]
900064b4:	681b      	ldr	r3, [r3, #0]
900064b6:	4a26      	ldr	r2, [pc, #152]	; (90006550 <DMA_SetConfig+0x250>)
900064b8:	4293      	cmp	r3, r2
900064ba:	d009      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
900064bc:	68fb      	ldr	r3, [r7, #12]
900064be:	681b      	ldr	r3, [r3, #0]
900064c0:	4a24      	ldr	r2, [pc, #144]	; (90006554 <DMA_SetConfig+0x254>)
900064c2:	4293      	cmp	r3, r2
900064c4:	d004      	beq.n	900064d0 <DMA_SetConfig+0x1d0>
900064c6:	68fb      	ldr	r3, [r7, #12]
900064c8:	681b      	ldr	r3, [r3, #0]
900064ca:	4a23      	ldr	r2, [pc, #140]	; (90006558 <DMA_SetConfig+0x258>)
900064cc:	4293      	cmp	r3, r2
900064ce:	d101      	bne.n	900064d4 <DMA_SetConfig+0x1d4>
900064d0:	2301      	movs	r3, #1
900064d2:	e000      	b.n	900064d6 <DMA_SetConfig+0x1d6>
900064d4:	2300      	movs	r3, #0
900064d6:	2b00      	cmp	r3, #0
900064d8:	d059      	beq.n	9000658e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
900064da:	68fb      	ldr	r3, [r7, #12]
900064dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900064de:	f003 031f 	and.w	r3, r3, #31
900064e2:	223f      	movs	r2, #63	; 0x3f
900064e4:	409a      	lsls	r2, r3
900064e6:	697b      	ldr	r3, [r7, #20]
900064e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
900064ea:	68fb      	ldr	r3, [r7, #12]
900064ec:	681b      	ldr	r3, [r3, #0]
900064ee:	681a      	ldr	r2, [r3, #0]
900064f0:	68fb      	ldr	r3, [r7, #12]
900064f2:	681b      	ldr	r3, [r3, #0]
900064f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
900064f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
900064fa:	68fb      	ldr	r3, [r7, #12]
900064fc:	681b      	ldr	r3, [r3, #0]
900064fe:	683a      	ldr	r2, [r7, #0]
90006500:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
90006502:	68fb      	ldr	r3, [r7, #12]
90006504:	689b      	ldr	r3, [r3, #8]
90006506:	2b40      	cmp	r3, #64	; 0x40
90006508:	d138      	bne.n	9000657c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
9000650a:	68fb      	ldr	r3, [r7, #12]
9000650c:	681b      	ldr	r3, [r3, #0]
9000650e:	687a      	ldr	r2, [r7, #4]
90006510:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
90006512:	68fb      	ldr	r3, [r7, #12]
90006514:	681b      	ldr	r3, [r3, #0]
90006516:	68ba      	ldr	r2, [r7, #8]
90006518:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
9000651a:	e086      	b.n	9000662a <DMA_SetConfig+0x32a>
9000651c:	40020010 	.word	0x40020010
90006520:	40020028 	.word	0x40020028
90006524:	40020040 	.word	0x40020040
90006528:	40020058 	.word	0x40020058
9000652c:	40020070 	.word	0x40020070
90006530:	40020088 	.word	0x40020088
90006534:	400200a0 	.word	0x400200a0
90006538:	400200b8 	.word	0x400200b8
9000653c:	40020410 	.word	0x40020410
90006540:	40020428 	.word	0x40020428
90006544:	40020440 	.word	0x40020440
90006548:	40020458 	.word	0x40020458
9000654c:	40020470 	.word	0x40020470
90006550:	40020488 	.word	0x40020488
90006554:	400204a0 	.word	0x400204a0
90006558:	400204b8 	.word	0x400204b8
9000655c:	58025408 	.word	0x58025408
90006560:	5802541c 	.word	0x5802541c
90006564:	58025430 	.word	0x58025430
90006568:	58025444 	.word	0x58025444
9000656c:	58025458 	.word	0x58025458
90006570:	5802546c 	.word	0x5802546c
90006574:	58025480 	.word	0x58025480
90006578:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
9000657c:	68fb      	ldr	r3, [r7, #12]
9000657e:	681b      	ldr	r3, [r3, #0]
90006580:	68ba      	ldr	r2, [r7, #8]
90006582:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
90006584:	68fb      	ldr	r3, [r7, #12]
90006586:	681b      	ldr	r3, [r3, #0]
90006588:	687a      	ldr	r2, [r7, #4]
9000658a:	60da      	str	r2, [r3, #12]
}
9000658c:	e04d      	b.n	9000662a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
9000658e:	68fb      	ldr	r3, [r7, #12]
90006590:	681b      	ldr	r3, [r3, #0]
90006592:	4a29      	ldr	r2, [pc, #164]	; (90006638 <DMA_SetConfig+0x338>)
90006594:	4293      	cmp	r3, r2
90006596:	d022      	beq.n	900065de <DMA_SetConfig+0x2de>
90006598:	68fb      	ldr	r3, [r7, #12]
9000659a:	681b      	ldr	r3, [r3, #0]
9000659c:	4a27      	ldr	r2, [pc, #156]	; (9000663c <DMA_SetConfig+0x33c>)
9000659e:	4293      	cmp	r3, r2
900065a0:	d01d      	beq.n	900065de <DMA_SetConfig+0x2de>
900065a2:	68fb      	ldr	r3, [r7, #12]
900065a4:	681b      	ldr	r3, [r3, #0]
900065a6:	4a26      	ldr	r2, [pc, #152]	; (90006640 <DMA_SetConfig+0x340>)
900065a8:	4293      	cmp	r3, r2
900065aa:	d018      	beq.n	900065de <DMA_SetConfig+0x2de>
900065ac:	68fb      	ldr	r3, [r7, #12]
900065ae:	681b      	ldr	r3, [r3, #0]
900065b0:	4a24      	ldr	r2, [pc, #144]	; (90006644 <DMA_SetConfig+0x344>)
900065b2:	4293      	cmp	r3, r2
900065b4:	d013      	beq.n	900065de <DMA_SetConfig+0x2de>
900065b6:	68fb      	ldr	r3, [r7, #12]
900065b8:	681b      	ldr	r3, [r3, #0]
900065ba:	4a23      	ldr	r2, [pc, #140]	; (90006648 <DMA_SetConfig+0x348>)
900065bc:	4293      	cmp	r3, r2
900065be:	d00e      	beq.n	900065de <DMA_SetConfig+0x2de>
900065c0:	68fb      	ldr	r3, [r7, #12]
900065c2:	681b      	ldr	r3, [r3, #0]
900065c4:	4a21      	ldr	r2, [pc, #132]	; (9000664c <DMA_SetConfig+0x34c>)
900065c6:	4293      	cmp	r3, r2
900065c8:	d009      	beq.n	900065de <DMA_SetConfig+0x2de>
900065ca:	68fb      	ldr	r3, [r7, #12]
900065cc:	681b      	ldr	r3, [r3, #0]
900065ce:	4a20      	ldr	r2, [pc, #128]	; (90006650 <DMA_SetConfig+0x350>)
900065d0:	4293      	cmp	r3, r2
900065d2:	d004      	beq.n	900065de <DMA_SetConfig+0x2de>
900065d4:	68fb      	ldr	r3, [r7, #12]
900065d6:	681b      	ldr	r3, [r3, #0]
900065d8:	4a1e      	ldr	r2, [pc, #120]	; (90006654 <DMA_SetConfig+0x354>)
900065da:	4293      	cmp	r3, r2
900065dc:	d101      	bne.n	900065e2 <DMA_SetConfig+0x2e2>
900065de:	2301      	movs	r3, #1
900065e0:	e000      	b.n	900065e4 <DMA_SetConfig+0x2e4>
900065e2:	2300      	movs	r3, #0
900065e4:	2b00      	cmp	r3, #0
900065e6:	d020      	beq.n	9000662a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
900065e8:	68fb      	ldr	r3, [r7, #12]
900065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900065ec:	f003 031f 	and.w	r3, r3, #31
900065f0:	2201      	movs	r2, #1
900065f2:	409a      	lsls	r2, r3
900065f4:	693b      	ldr	r3, [r7, #16]
900065f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
900065f8:	68fb      	ldr	r3, [r7, #12]
900065fa:	681b      	ldr	r3, [r3, #0]
900065fc:	683a      	ldr	r2, [r7, #0]
900065fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
90006600:	68fb      	ldr	r3, [r7, #12]
90006602:	689b      	ldr	r3, [r3, #8]
90006604:	2b40      	cmp	r3, #64	; 0x40
90006606:	d108      	bne.n	9000661a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
90006608:	68fb      	ldr	r3, [r7, #12]
9000660a:	681b      	ldr	r3, [r3, #0]
9000660c:	687a      	ldr	r2, [r7, #4]
9000660e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
90006610:	68fb      	ldr	r3, [r7, #12]
90006612:	681b      	ldr	r3, [r3, #0]
90006614:	68ba      	ldr	r2, [r7, #8]
90006616:	60da      	str	r2, [r3, #12]
}
90006618:	e007      	b.n	9000662a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
9000661a:	68fb      	ldr	r3, [r7, #12]
9000661c:	681b      	ldr	r3, [r3, #0]
9000661e:	68ba      	ldr	r2, [r7, #8]
90006620:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
90006622:	68fb      	ldr	r3, [r7, #12]
90006624:	681b      	ldr	r3, [r3, #0]
90006626:	687a      	ldr	r2, [r7, #4]
90006628:	60da      	str	r2, [r3, #12]
}
9000662a:	bf00      	nop
9000662c:	371c      	adds	r7, #28
9000662e:	46bd      	mov	sp, r7
90006630:	f85d 7b04 	ldr.w	r7, [sp], #4
90006634:	4770      	bx	lr
90006636:	bf00      	nop
90006638:	58025408 	.word	0x58025408
9000663c:	5802541c 	.word	0x5802541c
90006640:	58025430 	.word	0x58025430
90006644:	58025444 	.word	0x58025444
90006648:	58025458 	.word	0x58025458
9000664c:	5802546c 	.word	0x5802546c
90006650:	58025480 	.word	0x58025480
90006654:	58025494 	.word	0x58025494

90006658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
90006658:	b480      	push	{r7}
9000665a:	b085      	sub	sp, #20
9000665c:	af00      	add	r7, sp, #0
9000665e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90006660:	687b      	ldr	r3, [r7, #4]
90006662:	681b      	ldr	r3, [r3, #0]
90006664:	4a42      	ldr	r2, [pc, #264]	; (90006770 <DMA_CalcBaseAndBitshift+0x118>)
90006666:	4293      	cmp	r3, r2
90006668:	d04a      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
9000666a:	687b      	ldr	r3, [r7, #4]
9000666c:	681b      	ldr	r3, [r3, #0]
9000666e:	4a41      	ldr	r2, [pc, #260]	; (90006774 <DMA_CalcBaseAndBitshift+0x11c>)
90006670:	4293      	cmp	r3, r2
90006672:	d045      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
90006674:	687b      	ldr	r3, [r7, #4]
90006676:	681b      	ldr	r3, [r3, #0]
90006678:	4a3f      	ldr	r2, [pc, #252]	; (90006778 <DMA_CalcBaseAndBitshift+0x120>)
9000667a:	4293      	cmp	r3, r2
9000667c:	d040      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
9000667e:	687b      	ldr	r3, [r7, #4]
90006680:	681b      	ldr	r3, [r3, #0]
90006682:	4a3e      	ldr	r2, [pc, #248]	; (9000677c <DMA_CalcBaseAndBitshift+0x124>)
90006684:	4293      	cmp	r3, r2
90006686:	d03b      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
90006688:	687b      	ldr	r3, [r7, #4]
9000668a:	681b      	ldr	r3, [r3, #0]
9000668c:	4a3c      	ldr	r2, [pc, #240]	; (90006780 <DMA_CalcBaseAndBitshift+0x128>)
9000668e:	4293      	cmp	r3, r2
90006690:	d036      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
90006692:	687b      	ldr	r3, [r7, #4]
90006694:	681b      	ldr	r3, [r3, #0]
90006696:	4a3b      	ldr	r2, [pc, #236]	; (90006784 <DMA_CalcBaseAndBitshift+0x12c>)
90006698:	4293      	cmp	r3, r2
9000669a:	d031      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
9000669c:	687b      	ldr	r3, [r7, #4]
9000669e:	681b      	ldr	r3, [r3, #0]
900066a0:	4a39      	ldr	r2, [pc, #228]	; (90006788 <DMA_CalcBaseAndBitshift+0x130>)
900066a2:	4293      	cmp	r3, r2
900066a4:	d02c      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066a6:	687b      	ldr	r3, [r7, #4]
900066a8:	681b      	ldr	r3, [r3, #0]
900066aa:	4a38      	ldr	r2, [pc, #224]	; (9000678c <DMA_CalcBaseAndBitshift+0x134>)
900066ac:	4293      	cmp	r3, r2
900066ae:	d027      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066b0:	687b      	ldr	r3, [r7, #4]
900066b2:	681b      	ldr	r3, [r3, #0]
900066b4:	4a36      	ldr	r2, [pc, #216]	; (90006790 <DMA_CalcBaseAndBitshift+0x138>)
900066b6:	4293      	cmp	r3, r2
900066b8:	d022      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066ba:	687b      	ldr	r3, [r7, #4]
900066bc:	681b      	ldr	r3, [r3, #0]
900066be:	4a35      	ldr	r2, [pc, #212]	; (90006794 <DMA_CalcBaseAndBitshift+0x13c>)
900066c0:	4293      	cmp	r3, r2
900066c2:	d01d      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066c4:	687b      	ldr	r3, [r7, #4]
900066c6:	681b      	ldr	r3, [r3, #0]
900066c8:	4a33      	ldr	r2, [pc, #204]	; (90006798 <DMA_CalcBaseAndBitshift+0x140>)
900066ca:	4293      	cmp	r3, r2
900066cc:	d018      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066ce:	687b      	ldr	r3, [r7, #4]
900066d0:	681b      	ldr	r3, [r3, #0]
900066d2:	4a32      	ldr	r2, [pc, #200]	; (9000679c <DMA_CalcBaseAndBitshift+0x144>)
900066d4:	4293      	cmp	r3, r2
900066d6:	d013      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066d8:	687b      	ldr	r3, [r7, #4]
900066da:	681b      	ldr	r3, [r3, #0]
900066dc:	4a30      	ldr	r2, [pc, #192]	; (900067a0 <DMA_CalcBaseAndBitshift+0x148>)
900066de:	4293      	cmp	r3, r2
900066e0:	d00e      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066e2:	687b      	ldr	r3, [r7, #4]
900066e4:	681b      	ldr	r3, [r3, #0]
900066e6:	4a2f      	ldr	r2, [pc, #188]	; (900067a4 <DMA_CalcBaseAndBitshift+0x14c>)
900066e8:	4293      	cmp	r3, r2
900066ea:	d009      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066ec:	687b      	ldr	r3, [r7, #4]
900066ee:	681b      	ldr	r3, [r3, #0]
900066f0:	4a2d      	ldr	r2, [pc, #180]	; (900067a8 <DMA_CalcBaseAndBitshift+0x150>)
900066f2:	4293      	cmp	r3, r2
900066f4:	d004      	beq.n	90006700 <DMA_CalcBaseAndBitshift+0xa8>
900066f6:	687b      	ldr	r3, [r7, #4]
900066f8:	681b      	ldr	r3, [r3, #0]
900066fa:	4a2c      	ldr	r2, [pc, #176]	; (900067ac <DMA_CalcBaseAndBitshift+0x154>)
900066fc:	4293      	cmp	r3, r2
900066fe:	d101      	bne.n	90006704 <DMA_CalcBaseAndBitshift+0xac>
90006700:	2301      	movs	r3, #1
90006702:	e000      	b.n	90006706 <DMA_CalcBaseAndBitshift+0xae>
90006704:	2300      	movs	r3, #0
90006706:	2b00      	cmp	r3, #0
90006708:	d024      	beq.n	90006754 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
9000670a:	687b      	ldr	r3, [r7, #4]
9000670c:	681b      	ldr	r3, [r3, #0]
9000670e:	b2db      	uxtb	r3, r3
90006710:	3b10      	subs	r3, #16
90006712:	4a27      	ldr	r2, [pc, #156]	; (900067b0 <DMA_CalcBaseAndBitshift+0x158>)
90006714:	fba2 2303 	umull	r2, r3, r2, r3
90006718:	091b      	lsrs	r3, r3, #4
9000671a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
9000671c:	68fb      	ldr	r3, [r7, #12]
9000671e:	f003 0307 	and.w	r3, r3, #7
90006722:	4a24      	ldr	r2, [pc, #144]	; (900067b4 <DMA_CalcBaseAndBitshift+0x15c>)
90006724:	5cd3      	ldrb	r3, [r2, r3]
90006726:	461a      	mov	r2, r3
90006728:	687b      	ldr	r3, [r7, #4]
9000672a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
9000672c:	68fb      	ldr	r3, [r7, #12]
9000672e:	2b03      	cmp	r3, #3
90006730:	d908      	bls.n	90006744 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
90006732:	687b      	ldr	r3, [r7, #4]
90006734:	681b      	ldr	r3, [r3, #0]
90006736:	461a      	mov	r2, r3
90006738:	4b1f      	ldr	r3, [pc, #124]	; (900067b8 <DMA_CalcBaseAndBitshift+0x160>)
9000673a:	4013      	ands	r3, r2
9000673c:	1d1a      	adds	r2, r3, #4
9000673e:	687b      	ldr	r3, [r7, #4]
90006740:	659a      	str	r2, [r3, #88]	; 0x58
90006742:	e00d      	b.n	90006760 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
90006744:	687b      	ldr	r3, [r7, #4]
90006746:	681b      	ldr	r3, [r3, #0]
90006748:	461a      	mov	r2, r3
9000674a:	4b1b      	ldr	r3, [pc, #108]	; (900067b8 <DMA_CalcBaseAndBitshift+0x160>)
9000674c:	4013      	ands	r3, r2
9000674e:	687a      	ldr	r2, [r7, #4]
90006750:	6593      	str	r3, [r2, #88]	; 0x58
90006752:	e005      	b.n	90006760 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
90006754:	687b      	ldr	r3, [r7, #4]
90006756:	681b      	ldr	r3, [r3, #0]
90006758:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
9000675c:	687b      	ldr	r3, [r7, #4]
9000675e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
90006760:	687b      	ldr	r3, [r7, #4]
90006762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
90006764:	4618      	mov	r0, r3
90006766:	3714      	adds	r7, #20
90006768:	46bd      	mov	sp, r7
9000676a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000676e:	4770      	bx	lr
90006770:	40020010 	.word	0x40020010
90006774:	40020028 	.word	0x40020028
90006778:	40020040 	.word	0x40020040
9000677c:	40020058 	.word	0x40020058
90006780:	40020070 	.word	0x40020070
90006784:	40020088 	.word	0x40020088
90006788:	400200a0 	.word	0x400200a0
9000678c:	400200b8 	.word	0x400200b8
90006790:	40020410 	.word	0x40020410
90006794:	40020428 	.word	0x40020428
90006798:	40020440 	.word	0x40020440
9000679c:	40020458 	.word	0x40020458
900067a0:	40020470 	.word	0x40020470
900067a4:	40020488 	.word	0x40020488
900067a8:	400204a0 	.word	0x400204a0
900067ac:	400204b8 	.word	0x400204b8
900067b0:	aaaaaaab 	.word	0xaaaaaaab
900067b4:	90013f00 	.word	0x90013f00
900067b8:	fffffc00 	.word	0xfffffc00

900067bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
900067bc:	b480      	push	{r7}
900067be:	b085      	sub	sp, #20
900067c0:	af00      	add	r7, sp, #0
900067c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
900067c4:	2300      	movs	r3, #0
900067c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
900067c8:	687b      	ldr	r3, [r7, #4]
900067ca:	699b      	ldr	r3, [r3, #24]
900067cc:	2b00      	cmp	r3, #0
900067ce:	d120      	bne.n	90006812 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
900067d0:	687b      	ldr	r3, [r7, #4]
900067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900067d4:	2b03      	cmp	r3, #3
900067d6:	d858      	bhi.n	9000688a <DMA_CheckFifoParam+0xce>
900067d8:	a201      	add	r2, pc, #4	; (adr r2, 900067e0 <DMA_CheckFifoParam+0x24>)
900067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900067de:	bf00      	nop
900067e0:	900067f1 	.word	0x900067f1
900067e4:	90006803 	.word	0x90006803
900067e8:	900067f1 	.word	0x900067f1
900067ec:	9000688b 	.word	0x9000688b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
900067f0:	687b      	ldr	r3, [r7, #4]
900067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900067f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
900067f8:	2b00      	cmp	r3, #0
900067fa:	d048      	beq.n	9000688e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
900067fc:	2301      	movs	r3, #1
900067fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
90006800:	e045      	b.n	9000688e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90006802:	687b      	ldr	r3, [r7, #4]
90006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
9000680a:	d142      	bne.n	90006892 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
9000680c:	2301      	movs	r3, #1
9000680e:	73fb      	strb	r3, [r7, #15]
        }
        break;
90006810:	e03f      	b.n	90006892 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90006812:	687b      	ldr	r3, [r7, #4]
90006814:	699b      	ldr	r3, [r3, #24]
90006816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000681a:	d123      	bne.n	90006864 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
9000681c:	687b      	ldr	r3, [r7, #4]
9000681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006820:	2b03      	cmp	r3, #3
90006822:	d838      	bhi.n	90006896 <DMA_CheckFifoParam+0xda>
90006824:	a201      	add	r2, pc, #4	; (adr r2, 9000682c <DMA_CheckFifoParam+0x70>)
90006826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000682a:	bf00      	nop
9000682c:	9000683d 	.word	0x9000683d
90006830:	90006843 	.word	0x90006843
90006834:	9000683d 	.word	0x9000683d
90006838:	90006855 	.word	0x90006855
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
9000683c:	2301      	movs	r3, #1
9000683e:	73fb      	strb	r3, [r7, #15]
        break;
90006840:	e030      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90006842:	687b      	ldr	r3, [r7, #4]
90006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000684a:	2b00      	cmp	r3, #0
9000684c:	d025      	beq.n	9000689a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
9000684e:	2301      	movs	r3, #1
90006850:	73fb      	strb	r3, [r7, #15]
        }
        break;
90006852:	e022      	b.n	9000689a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90006854:	687b      	ldr	r3, [r7, #4]
90006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006858:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
9000685c:	d11f      	bne.n	9000689e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
9000685e:	2301      	movs	r3, #1
90006860:	73fb      	strb	r3, [r7, #15]
        }
        break;
90006862:	e01c      	b.n	9000689e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
90006864:	687b      	ldr	r3, [r7, #4]
90006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006868:	2b02      	cmp	r3, #2
9000686a:	d902      	bls.n	90006872 <DMA_CheckFifoParam+0xb6>
9000686c:	2b03      	cmp	r3, #3
9000686e:	d003      	beq.n	90006878 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
90006870:	e018      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
90006872:	2301      	movs	r3, #1
90006874:	73fb      	strb	r3, [r7, #15]
        break;
90006876:	e015      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90006878:	687b      	ldr	r3, [r7, #4]
9000687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000687c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90006880:	2b00      	cmp	r3, #0
90006882:	d00e      	beq.n	900068a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
90006884:	2301      	movs	r3, #1
90006886:	73fb      	strb	r3, [r7, #15]
    break;
90006888:	e00b      	b.n	900068a2 <DMA_CheckFifoParam+0xe6>
        break;
9000688a:	bf00      	nop
9000688c:	e00a      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>
        break;
9000688e:	bf00      	nop
90006890:	e008      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>
        break;
90006892:	bf00      	nop
90006894:	e006      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>
        break;
90006896:	bf00      	nop
90006898:	e004      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>
        break;
9000689a:	bf00      	nop
9000689c:	e002      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>
        break;
9000689e:	bf00      	nop
900068a0:	e000      	b.n	900068a4 <DMA_CheckFifoParam+0xe8>
    break;
900068a2:	bf00      	nop
    }
  }

  return status;
900068a4:	7bfb      	ldrb	r3, [r7, #15]
}
900068a6:	4618      	mov	r0, r3
900068a8:	3714      	adds	r7, #20
900068aa:	46bd      	mov	sp, r7
900068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900068b0:	4770      	bx	lr
900068b2:	bf00      	nop

900068b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
900068b4:	b480      	push	{r7}
900068b6:	b085      	sub	sp, #20
900068b8:	af00      	add	r7, sp, #0
900068ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
900068bc:	687b      	ldr	r3, [r7, #4]
900068be:	681b      	ldr	r3, [r3, #0]
900068c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
900068c2:	687b      	ldr	r3, [r7, #4]
900068c4:	681b      	ldr	r3, [r3, #0]
900068c6:	4a38      	ldr	r2, [pc, #224]	; (900069a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
900068c8:	4293      	cmp	r3, r2
900068ca:	d022      	beq.n	90006912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
900068cc:	687b      	ldr	r3, [r7, #4]
900068ce:	681b      	ldr	r3, [r3, #0]
900068d0:	4a36      	ldr	r2, [pc, #216]	; (900069ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
900068d2:	4293      	cmp	r3, r2
900068d4:	d01d      	beq.n	90006912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
900068d6:	687b      	ldr	r3, [r7, #4]
900068d8:	681b      	ldr	r3, [r3, #0]
900068da:	4a35      	ldr	r2, [pc, #212]	; (900069b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
900068dc:	4293      	cmp	r3, r2
900068de:	d018      	beq.n	90006912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
900068e0:	687b      	ldr	r3, [r7, #4]
900068e2:	681b      	ldr	r3, [r3, #0]
900068e4:	4a33      	ldr	r2, [pc, #204]	; (900069b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
900068e6:	4293      	cmp	r3, r2
900068e8:	d013      	beq.n	90006912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
900068ea:	687b      	ldr	r3, [r7, #4]
900068ec:	681b      	ldr	r3, [r3, #0]
900068ee:	4a32      	ldr	r2, [pc, #200]	; (900069b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
900068f0:	4293      	cmp	r3, r2
900068f2:	d00e      	beq.n	90006912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
900068f4:	687b      	ldr	r3, [r7, #4]
900068f6:	681b      	ldr	r3, [r3, #0]
900068f8:	4a30      	ldr	r2, [pc, #192]	; (900069bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
900068fa:	4293      	cmp	r3, r2
900068fc:	d009      	beq.n	90006912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
900068fe:	687b      	ldr	r3, [r7, #4]
90006900:	681b      	ldr	r3, [r3, #0]
90006902:	4a2f      	ldr	r2, [pc, #188]	; (900069c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
90006904:	4293      	cmp	r3, r2
90006906:	d004      	beq.n	90006912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
90006908:	687b      	ldr	r3, [r7, #4]
9000690a:	681b      	ldr	r3, [r3, #0]
9000690c:	4a2d      	ldr	r2, [pc, #180]	; (900069c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
9000690e:	4293      	cmp	r3, r2
90006910:	d101      	bne.n	90006916 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
90006912:	2301      	movs	r3, #1
90006914:	e000      	b.n	90006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
90006916:	2300      	movs	r3, #0
90006918:	2b00      	cmp	r3, #0
9000691a:	d01a      	beq.n	90006952 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
9000691c:	687b      	ldr	r3, [r7, #4]
9000691e:	681b      	ldr	r3, [r3, #0]
90006920:	b2db      	uxtb	r3, r3
90006922:	3b08      	subs	r3, #8
90006924:	4a28      	ldr	r2, [pc, #160]	; (900069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
90006926:	fba2 2303 	umull	r2, r3, r2, r3
9000692a:	091b      	lsrs	r3, r3, #4
9000692c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
9000692e:	68fa      	ldr	r2, [r7, #12]
90006930:	4b26      	ldr	r3, [pc, #152]	; (900069cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
90006932:	4413      	add	r3, r2
90006934:	009b      	lsls	r3, r3, #2
90006936:	461a      	mov	r2, r3
90006938:	687b      	ldr	r3, [r7, #4]
9000693a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
9000693c:	687b      	ldr	r3, [r7, #4]
9000693e:	4a24      	ldr	r2, [pc, #144]	; (900069d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
90006940:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
90006942:	68fb      	ldr	r3, [r7, #12]
90006944:	f003 031f 	and.w	r3, r3, #31
90006948:	2201      	movs	r2, #1
9000694a:	409a      	lsls	r2, r3
9000694c:	687b      	ldr	r3, [r7, #4]
9000694e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
90006950:	e024      	b.n	9000699c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
90006952:	687b      	ldr	r3, [r7, #4]
90006954:	681b      	ldr	r3, [r3, #0]
90006956:	b2db      	uxtb	r3, r3
90006958:	3b10      	subs	r3, #16
9000695a:	4a1e      	ldr	r2, [pc, #120]	; (900069d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
9000695c:	fba2 2303 	umull	r2, r3, r2, r3
90006960:	091b      	lsrs	r3, r3, #4
90006962:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
90006964:	68bb      	ldr	r3, [r7, #8]
90006966:	4a1c      	ldr	r2, [pc, #112]	; (900069d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
90006968:	4293      	cmp	r3, r2
9000696a:	d806      	bhi.n	9000697a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
9000696c:	68bb      	ldr	r3, [r7, #8]
9000696e:	4a1b      	ldr	r2, [pc, #108]	; (900069dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
90006970:	4293      	cmp	r3, r2
90006972:	d902      	bls.n	9000697a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
90006974:	68fb      	ldr	r3, [r7, #12]
90006976:	3308      	adds	r3, #8
90006978:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
9000697a:	68fa      	ldr	r2, [r7, #12]
9000697c:	4b18      	ldr	r3, [pc, #96]	; (900069e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
9000697e:	4413      	add	r3, r2
90006980:	009b      	lsls	r3, r3, #2
90006982:	461a      	mov	r2, r3
90006984:	687b      	ldr	r3, [r7, #4]
90006986:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
90006988:	687b      	ldr	r3, [r7, #4]
9000698a:	4a16      	ldr	r2, [pc, #88]	; (900069e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
9000698c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
9000698e:	68fb      	ldr	r3, [r7, #12]
90006990:	f003 031f 	and.w	r3, r3, #31
90006994:	2201      	movs	r2, #1
90006996:	409a      	lsls	r2, r3
90006998:	687b      	ldr	r3, [r7, #4]
9000699a:	669a      	str	r2, [r3, #104]	; 0x68
}
9000699c:	bf00      	nop
9000699e:	3714      	adds	r7, #20
900069a0:	46bd      	mov	sp, r7
900069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900069a6:	4770      	bx	lr
900069a8:	58025408 	.word	0x58025408
900069ac:	5802541c 	.word	0x5802541c
900069b0:	58025430 	.word	0x58025430
900069b4:	58025444 	.word	0x58025444
900069b8:	58025458 	.word	0x58025458
900069bc:	5802546c 	.word	0x5802546c
900069c0:	58025480 	.word	0x58025480
900069c4:	58025494 	.word	0x58025494
900069c8:	cccccccd 	.word	0xcccccccd
900069cc:	16009600 	.word	0x16009600
900069d0:	58025880 	.word	0x58025880
900069d4:	aaaaaaab 	.word	0xaaaaaaab
900069d8:	400204b8 	.word	0x400204b8
900069dc:	4002040f 	.word	0x4002040f
900069e0:	10008200 	.word	0x10008200
900069e4:	40020880 	.word	0x40020880

900069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
900069e8:	b480      	push	{r7}
900069ea:	b085      	sub	sp, #20
900069ec:	af00      	add	r7, sp, #0
900069ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
900069f0:	687b      	ldr	r3, [r7, #4]
900069f2:	685b      	ldr	r3, [r3, #4]
900069f4:	b2db      	uxtb	r3, r3
900069f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
900069f8:	68fb      	ldr	r3, [r7, #12]
900069fa:	2b00      	cmp	r3, #0
900069fc:	d04a      	beq.n	90006a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
900069fe:	68fb      	ldr	r3, [r7, #12]
90006a00:	2b08      	cmp	r3, #8
90006a02:	d847      	bhi.n	90006a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
90006a04:	687b      	ldr	r3, [r7, #4]
90006a06:	681b      	ldr	r3, [r3, #0]
90006a08:	4a25      	ldr	r2, [pc, #148]	; (90006aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
90006a0a:	4293      	cmp	r3, r2
90006a0c:	d022      	beq.n	90006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
90006a0e:	687b      	ldr	r3, [r7, #4]
90006a10:	681b      	ldr	r3, [r3, #0]
90006a12:	4a24      	ldr	r2, [pc, #144]	; (90006aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
90006a14:	4293      	cmp	r3, r2
90006a16:	d01d      	beq.n	90006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
90006a18:	687b      	ldr	r3, [r7, #4]
90006a1a:	681b      	ldr	r3, [r3, #0]
90006a1c:	4a22      	ldr	r2, [pc, #136]	; (90006aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
90006a1e:	4293      	cmp	r3, r2
90006a20:	d018      	beq.n	90006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
90006a22:	687b      	ldr	r3, [r7, #4]
90006a24:	681b      	ldr	r3, [r3, #0]
90006a26:	4a21      	ldr	r2, [pc, #132]	; (90006aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
90006a28:	4293      	cmp	r3, r2
90006a2a:	d013      	beq.n	90006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
90006a2c:	687b      	ldr	r3, [r7, #4]
90006a2e:	681b      	ldr	r3, [r3, #0]
90006a30:	4a1f      	ldr	r2, [pc, #124]	; (90006ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
90006a32:	4293      	cmp	r3, r2
90006a34:	d00e      	beq.n	90006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
90006a36:	687b      	ldr	r3, [r7, #4]
90006a38:	681b      	ldr	r3, [r3, #0]
90006a3a:	4a1e      	ldr	r2, [pc, #120]	; (90006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
90006a3c:	4293      	cmp	r3, r2
90006a3e:	d009      	beq.n	90006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
90006a40:	687b      	ldr	r3, [r7, #4]
90006a42:	681b      	ldr	r3, [r3, #0]
90006a44:	4a1c      	ldr	r2, [pc, #112]	; (90006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
90006a46:	4293      	cmp	r3, r2
90006a48:	d004      	beq.n	90006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
90006a4a:	687b      	ldr	r3, [r7, #4]
90006a4c:	681b      	ldr	r3, [r3, #0]
90006a4e:	4a1b      	ldr	r2, [pc, #108]	; (90006abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
90006a50:	4293      	cmp	r3, r2
90006a52:	d101      	bne.n	90006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
90006a54:	2301      	movs	r3, #1
90006a56:	e000      	b.n	90006a5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
90006a58:	2300      	movs	r3, #0
90006a5a:	2b00      	cmp	r3, #0
90006a5c:	d00a      	beq.n	90006a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
90006a5e:	68fa      	ldr	r2, [r7, #12]
90006a60:	4b17      	ldr	r3, [pc, #92]	; (90006ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
90006a62:	4413      	add	r3, r2
90006a64:	009b      	lsls	r3, r3, #2
90006a66:	461a      	mov	r2, r3
90006a68:	687b      	ldr	r3, [r7, #4]
90006a6a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
90006a6c:	687b      	ldr	r3, [r7, #4]
90006a6e:	4a15      	ldr	r2, [pc, #84]	; (90006ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
90006a70:	671a      	str	r2, [r3, #112]	; 0x70
90006a72:	e009      	b.n	90006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
90006a74:	68fa      	ldr	r2, [r7, #12]
90006a76:	4b14      	ldr	r3, [pc, #80]	; (90006ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
90006a78:	4413      	add	r3, r2
90006a7a:	009b      	lsls	r3, r3, #2
90006a7c:	461a      	mov	r2, r3
90006a7e:	687b      	ldr	r3, [r7, #4]
90006a80:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
90006a82:	687b      	ldr	r3, [r7, #4]
90006a84:	4a11      	ldr	r2, [pc, #68]	; (90006acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
90006a86:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
90006a88:	68fb      	ldr	r3, [r7, #12]
90006a8a:	3b01      	subs	r3, #1
90006a8c:	2201      	movs	r2, #1
90006a8e:	409a      	lsls	r2, r3
90006a90:	687b      	ldr	r3, [r7, #4]
90006a92:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
90006a94:	bf00      	nop
90006a96:	3714      	adds	r7, #20
90006a98:	46bd      	mov	sp, r7
90006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a9e:	4770      	bx	lr
90006aa0:	58025408 	.word	0x58025408
90006aa4:	5802541c 	.word	0x5802541c
90006aa8:	58025430 	.word	0x58025430
90006aac:	58025444 	.word	0x58025444
90006ab0:	58025458 	.word	0x58025458
90006ab4:	5802546c 	.word	0x5802546c
90006ab8:	58025480 	.word	0x58025480
90006abc:	58025494 	.word	0x58025494
90006ac0:	1600963f 	.word	0x1600963f
90006ac4:	58025940 	.word	0x58025940
90006ac8:	1000823f 	.word	0x1000823f
90006acc:	40020940 	.word	0x40020940

90006ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90006ad0:	b480      	push	{r7}
90006ad2:	b089      	sub	sp, #36	; 0x24
90006ad4:	af00      	add	r7, sp, #0
90006ad6:	6078      	str	r0, [r7, #4]
90006ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90006ada:	2300      	movs	r3, #0
90006adc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90006ade:	4b89      	ldr	r3, [pc, #548]	; (90006d04 <HAL_GPIO_Init+0x234>)
90006ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90006ae2:	e194      	b.n	90006e0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90006ae4:	683b      	ldr	r3, [r7, #0]
90006ae6:	681a      	ldr	r2, [r3, #0]
90006ae8:	2101      	movs	r1, #1
90006aea:	69fb      	ldr	r3, [r7, #28]
90006aec:	fa01 f303 	lsl.w	r3, r1, r3
90006af0:	4013      	ands	r3, r2
90006af2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90006af4:	693b      	ldr	r3, [r7, #16]
90006af6:	2b00      	cmp	r3, #0
90006af8:	f000 8186 	beq.w	90006e08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90006afc:	683b      	ldr	r3, [r7, #0]
90006afe:	685b      	ldr	r3, [r3, #4]
90006b00:	f003 0303 	and.w	r3, r3, #3
90006b04:	2b01      	cmp	r3, #1
90006b06:	d005      	beq.n	90006b14 <HAL_GPIO_Init+0x44>
90006b08:	683b      	ldr	r3, [r7, #0]
90006b0a:	685b      	ldr	r3, [r3, #4]
90006b0c:	f003 0303 	and.w	r3, r3, #3
90006b10:	2b02      	cmp	r3, #2
90006b12:	d130      	bne.n	90006b76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90006b14:	687b      	ldr	r3, [r7, #4]
90006b16:	689b      	ldr	r3, [r3, #8]
90006b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006b1a:	69fb      	ldr	r3, [r7, #28]
90006b1c:	005b      	lsls	r3, r3, #1
90006b1e:	2203      	movs	r2, #3
90006b20:	fa02 f303 	lsl.w	r3, r2, r3
90006b24:	43db      	mvns	r3, r3
90006b26:	69ba      	ldr	r2, [r7, #24]
90006b28:	4013      	ands	r3, r2
90006b2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90006b2c:	683b      	ldr	r3, [r7, #0]
90006b2e:	68da      	ldr	r2, [r3, #12]
90006b30:	69fb      	ldr	r3, [r7, #28]
90006b32:	005b      	lsls	r3, r3, #1
90006b34:	fa02 f303 	lsl.w	r3, r2, r3
90006b38:	69ba      	ldr	r2, [r7, #24]
90006b3a:	4313      	orrs	r3, r2
90006b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90006b3e:	687b      	ldr	r3, [r7, #4]
90006b40:	69ba      	ldr	r2, [r7, #24]
90006b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90006b44:	687b      	ldr	r3, [r7, #4]
90006b46:	685b      	ldr	r3, [r3, #4]
90006b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90006b4a:	2201      	movs	r2, #1
90006b4c:	69fb      	ldr	r3, [r7, #28]
90006b4e:	fa02 f303 	lsl.w	r3, r2, r3
90006b52:	43db      	mvns	r3, r3
90006b54:	69ba      	ldr	r2, [r7, #24]
90006b56:	4013      	ands	r3, r2
90006b58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90006b5a:	683b      	ldr	r3, [r7, #0]
90006b5c:	685b      	ldr	r3, [r3, #4]
90006b5e:	091b      	lsrs	r3, r3, #4
90006b60:	f003 0201 	and.w	r2, r3, #1
90006b64:	69fb      	ldr	r3, [r7, #28]
90006b66:	fa02 f303 	lsl.w	r3, r2, r3
90006b6a:	69ba      	ldr	r2, [r7, #24]
90006b6c:	4313      	orrs	r3, r2
90006b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90006b70:	687b      	ldr	r3, [r7, #4]
90006b72:	69ba      	ldr	r2, [r7, #24]
90006b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90006b76:	683b      	ldr	r3, [r7, #0]
90006b78:	685b      	ldr	r3, [r3, #4]
90006b7a:	f003 0303 	and.w	r3, r3, #3
90006b7e:	2b03      	cmp	r3, #3
90006b80:	d017      	beq.n	90006bb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90006b82:	687b      	ldr	r3, [r7, #4]
90006b84:	68db      	ldr	r3, [r3, #12]
90006b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90006b88:	69fb      	ldr	r3, [r7, #28]
90006b8a:	005b      	lsls	r3, r3, #1
90006b8c:	2203      	movs	r2, #3
90006b8e:	fa02 f303 	lsl.w	r3, r2, r3
90006b92:	43db      	mvns	r3, r3
90006b94:	69ba      	ldr	r2, [r7, #24]
90006b96:	4013      	ands	r3, r2
90006b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90006b9a:	683b      	ldr	r3, [r7, #0]
90006b9c:	689a      	ldr	r2, [r3, #8]
90006b9e:	69fb      	ldr	r3, [r7, #28]
90006ba0:	005b      	lsls	r3, r3, #1
90006ba2:	fa02 f303 	lsl.w	r3, r2, r3
90006ba6:	69ba      	ldr	r2, [r7, #24]
90006ba8:	4313      	orrs	r3, r2
90006baa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90006bac:	687b      	ldr	r3, [r7, #4]
90006bae:	69ba      	ldr	r2, [r7, #24]
90006bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90006bb2:	683b      	ldr	r3, [r7, #0]
90006bb4:	685b      	ldr	r3, [r3, #4]
90006bb6:	f003 0303 	and.w	r3, r3, #3
90006bba:	2b02      	cmp	r3, #2
90006bbc:	d123      	bne.n	90006c06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90006bbe:	69fb      	ldr	r3, [r7, #28]
90006bc0:	08da      	lsrs	r2, r3, #3
90006bc2:	687b      	ldr	r3, [r7, #4]
90006bc4:	3208      	adds	r2, #8
90006bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90006bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90006bcc:	69fb      	ldr	r3, [r7, #28]
90006bce:	f003 0307 	and.w	r3, r3, #7
90006bd2:	009b      	lsls	r3, r3, #2
90006bd4:	220f      	movs	r2, #15
90006bd6:	fa02 f303 	lsl.w	r3, r2, r3
90006bda:	43db      	mvns	r3, r3
90006bdc:	69ba      	ldr	r2, [r7, #24]
90006bde:	4013      	ands	r3, r2
90006be0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90006be2:	683b      	ldr	r3, [r7, #0]
90006be4:	691a      	ldr	r2, [r3, #16]
90006be6:	69fb      	ldr	r3, [r7, #28]
90006be8:	f003 0307 	and.w	r3, r3, #7
90006bec:	009b      	lsls	r3, r3, #2
90006bee:	fa02 f303 	lsl.w	r3, r2, r3
90006bf2:	69ba      	ldr	r2, [r7, #24]
90006bf4:	4313      	orrs	r3, r2
90006bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90006bf8:	69fb      	ldr	r3, [r7, #28]
90006bfa:	08da      	lsrs	r2, r3, #3
90006bfc:	687b      	ldr	r3, [r7, #4]
90006bfe:	3208      	adds	r2, #8
90006c00:	69b9      	ldr	r1, [r7, #24]
90006c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90006c06:	687b      	ldr	r3, [r7, #4]
90006c08:	681b      	ldr	r3, [r3, #0]
90006c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90006c0c:	69fb      	ldr	r3, [r7, #28]
90006c0e:	005b      	lsls	r3, r3, #1
90006c10:	2203      	movs	r2, #3
90006c12:	fa02 f303 	lsl.w	r3, r2, r3
90006c16:	43db      	mvns	r3, r3
90006c18:	69ba      	ldr	r2, [r7, #24]
90006c1a:	4013      	ands	r3, r2
90006c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90006c1e:	683b      	ldr	r3, [r7, #0]
90006c20:	685b      	ldr	r3, [r3, #4]
90006c22:	f003 0203 	and.w	r2, r3, #3
90006c26:	69fb      	ldr	r3, [r7, #28]
90006c28:	005b      	lsls	r3, r3, #1
90006c2a:	fa02 f303 	lsl.w	r3, r2, r3
90006c2e:	69ba      	ldr	r2, [r7, #24]
90006c30:	4313      	orrs	r3, r2
90006c32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90006c34:	687b      	ldr	r3, [r7, #4]
90006c36:	69ba      	ldr	r2, [r7, #24]
90006c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90006c3a:	683b      	ldr	r3, [r7, #0]
90006c3c:	685b      	ldr	r3, [r3, #4]
90006c3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90006c42:	2b00      	cmp	r3, #0
90006c44:	f000 80e0 	beq.w	90006e08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90006c48:	4b2f      	ldr	r3, [pc, #188]	; (90006d08 <HAL_GPIO_Init+0x238>)
90006c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90006c4e:	4a2e      	ldr	r2, [pc, #184]	; (90006d08 <HAL_GPIO_Init+0x238>)
90006c50:	f043 0302 	orr.w	r3, r3, #2
90006c54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90006c58:	4b2b      	ldr	r3, [pc, #172]	; (90006d08 <HAL_GPIO_Init+0x238>)
90006c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90006c5e:	f003 0302 	and.w	r3, r3, #2
90006c62:	60fb      	str	r3, [r7, #12]
90006c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90006c66:	4a29      	ldr	r2, [pc, #164]	; (90006d0c <HAL_GPIO_Init+0x23c>)
90006c68:	69fb      	ldr	r3, [r7, #28]
90006c6a:	089b      	lsrs	r3, r3, #2
90006c6c:	3302      	adds	r3, #2
90006c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90006c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90006c74:	69fb      	ldr	r3, [r7, #28]
90006c76:	f003 0303 	and.w	r3, r3, #3
90006c7a:	009b      	lsls	r3, r3, #2
90006c7c:	220f      	movs	r2, #15
90006c7e:	fa02 f303 	lsl.w	r3, r2, r3
90006c82:	43db      	mvns	r3, r3
90006c84:	69ba      	ldr	r2, [r7, #24]
90006c86:	4013      	ands	r3, r2
90006c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90006c8a:	687b      	ldr	r3, [r7, #4]
90006c8c:	4a20      	ldr	r2, [pc, #128]	; (90006d10 <HAL_GPIO_Init+0x240>)
90006c8e:	4293      	cmp	r3, r2
90006c90:	d052      	beq.n	90006d38 <HAL_GPIO_Init+0x268>
90006c92:	687b      	ldr	r3, [r7, #4]
90006c94:	4a1f      	ldr	r2, [pc, #124]	; (90006d14 <HAL_GPIO_Init+0x244>)
90006c96:	4293      	cmp	r3, r2
90006c98:	d031      	beq.n	90006cfe <HAL_GPIO_Init+0x22e>
90006c9a:	687b      	ldr	r3, [r7, #4]
90006c9c:	4a1e      	ldr	r2, [pc, #120]	; (90006d18 <HAL_GPIO_Init+0x248>)
90006c9e:	4293      	cmp	r3, r2
90006ca0:	d02b      	beq.n	90006cfa <HAL_GPIO_Init+0x22a>
90006ca2:	687b      	ldr	r3, [r7, #4]
90006ca4:	4a1d      	ldr	r2, [pc, #116]	; (90006d1c <HAL_GPIO_Init+0x24c>)
90006ca6:	4293      	cmp	r3, r2
90006ca8:	d025      	beq.n	90006cf6 <HAL_GPIO_Init+0x226>
90006caa:	687b      	ldr	r3, [r7, #4]
90006cac:	4a1c      	ldr	r2, [pc, #112]	; (90006d20 <HAL_GPIO_Init+0x250>)
90006cae:	4293      	cmp	r3, r2
90006cb0:	d01f      	beq.n	90006cf2 <HAL_GPIO_Init+0x222>
90006cb2:	687b      	ldr	r3, [r7, #4]
90006cb4:	4a1b      	ldr	r2, [pc, #108]	; (90006d24 <HAL_GPIO_Init+0x254>)
90006cb6:	4293      	cmp	r3, r2
90006cb8:	d019      	beq.n	90006cee <HAL_GPIO_Init+0x21e>
90006cba:	687b      	ldr	r3, [r7, #4]
90006cbc:	4a1a      	ldr	r2, [pc, #104]	; (90006d28 <HAL_GPIO_Init+0x258>)
90006cbe:	4293      	cmp	r3, r2
90006cc0:	d013      	beq.n	90006cea <HAL_GPIO_Init+0x21a>
90006cc2:	687b      	ldr	r3, [r7, #4]
90006cc4:	4a19      	ldr	r2, [pc, #100]	; (90006d2c <HAL_GPIO_Init+0x25c>)
90006cc6:	4293      	cmp	r3, r2
90006cc8:	d00d      	beq.n	90006ce6 <HAL_GPIO_Init+0x216>
90006cca:	687b      	ldr	r3, [r7, #4]
90006ccc:	4a18      	ldr	r2, [pc, #96]	; (90006d30 <HAL_GPIO_Init+0x260>)
90006cce:	4293      	cmp	r3, r2
90006cd0:	d007      	beq.n	90006ce2 <HAL_GPIO_Init+0x212>
90006cd2:	687b      	ldr	r3, [r7, #4]
90006cd4:	4a17      	ldr	r2, [pc, #92]	; (90006d34 <HAL_GPIO_Init+0x264>)
90006cd6:	4293      	cmp	r3, r2
90006cd8:	d101      	bne.n	90006cde <HAL_GPIO_Init+0x20e>
90006cda:	2309      	movs	r3, #9
90006cdc:	e02d      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006cde:	230a      	movs	r3, #10
90006ce0:	e02b      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006ce2:	2308      	movs	r3, #8
90006ce4:	e029      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006ce6:	2307      	movs	r3, #7
90006ce8:	e027      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006cea:	2306      	movs	r3, #6
90006cec:	e025      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006cee:	2305      	movs	r3, #5
90006cf0:	e023      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006cf2:	2304      	movs	r3, #4
90006cf4:	e021      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006cf6:	2303      	movs	r3, #3
90006cf8:	e01f      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006cfa:	2302      	movs	r3, #2
90006cfc:	e01d      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006cfe:	2301      	movs	r3, #1
90006d00:	e01b      	b.n	90006d3a <HAL_GPIO_Init+0x26a>
90006d02:	bf00      	nop
90006d04:	58000080 	.word	0x58000080
90006d08:	58024400 	.word	0x58024400
90006d0c:	58000400 	.word	0x58000400
90006d10:	58020000 	.word	0x58020000
90006d14:	58020400 	.word	0x58020400
90006d18:	58020800 	.word	0x58020800
90006d1c:	58020c00 	.word	0x58020c00
90006d20:	58021000 	.word	0x58021000
90006d24:	58021400 	.word	0x58021400
90006d28:	58021800 	.word	0x58021800
90006d2c:	58021c00 	.word	0x58021c00
90006d30:	58022000 	.word	0x58022000
90006d34:	58022400 	.word	0x58022400
90006d38:	2300      	movs	r3, #0
90006d3a:	69fa      	ldr	r2, [r7, #28]
90006d3c:	f002 0203 	and.w	r2, r2, #3
90006d40:	0092      	lsls	r2, r2, #2
90006d42:	4093      	lsls	r3, r2
90006d44:	69ba      	ldr	r2, [r7, #24]
90006d46:	4313      	orrs	r3, r2
90006d48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90006d4a:	4938      	ldr	r1, [pc, #224]	; (90006e2c <HAL_GPIO_Init+0x35c>)
90006d4c:	69fb      	ldr	r3, [r7, #28]
90006d4e:	089b      	lsrs	r3, r3, #2
90006d50:	3302      	adds	r3, #2
90006d52:	69ba      	ldr	r2, [r7, #24]
90006d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90006d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90006d5c:	681b      	ldr	r3, [r3, #0]
90006d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90006d60:	693b      	ldr	r3, [r7, #16]
90006d62:	43db      	mvns	r3, r3
90006d64:	69ba      	ldr	r2, [r7, #24]
90006d66:	4013      	ands	r3, r2
90006d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90006d6a:	683b      	ldr	r3, [r7, #0]
90006d6c:	685b      	ldr	r3, [r3, #4]
90006d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90006d72:	2b00      	cmp	r3, #0
90006d74:	d003      	beq.n	90006d7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90006d76:	69ba      	ldr	r2, [r7, #24]
90006d78:	693b      	ldr	r3, [r7, #16]
90006d7a:	4313      	orrs	r3, r2
90006d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90006d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90006d82:	69bb      	ldr	r3, [r7, #24]
90006d84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90006d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90006d8a:	685b      	ldr	r3, [r3, #4]
90006d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90006d8e:	693b      	ldr	r3, [r7, #16]
90006d90:	43db      	mvns	r3, r3
90006d92:	69ba      	ldr	r2, [r7, #24]
90006d94:	4013      	ands	r3, r2
90006d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90006d98:	683b      	ldr	r3, [r7, #0]
90006d9a:	685b      	ldr	r3, [r3, #4]
90006d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90006da0:	2b00      	cmp	r3, #0
90006da2:	d003      	beq.n	90006dac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90006da4:	69ba      	ldr	r2, [r7, #24]
90006da6:	693b      	ldr	r3, [r7, #16]
90006da8:	4313      	orrs	r3, r2
90006daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90006dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90006db0:	69bb      	ldr	r3, [r7, #24]
90006db2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90006db4:	697b      	ldr	r3, [r7, #20]
90006db6:	685b      	ldr	r3, [r3, #4]
90006db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90006dba:	693b      	ldr	r3, [r7, #16]
90006dbc:	43db      	mvns	r3, r3
90006dbe:	69ba      	ldr	r2, [r7, #24]
90006dc0:	4013      	ands	r3, r2
90006dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90006dc4:	683b      	ldr	r3, [r7, #0]
90006dc6:	685b      	ldr	r3, [r3, #4]
90006dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006dcc:	2b00      	cmp	r3, #0
90006dce:	d003      	beq.n	90006dd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90006dd0:	69ba      	ldr	r2, [r7, #24]
90006dd2:	693b      	ldr	r3, [r7, #16]
90006dd4:	4313      	orrs	r3, r2
90006dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90006dd8:	697b      	ldr	r3, [r7, #20]
90006dda:	69ba      	ldr	r2, [r7, #24]
90006ddc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90006dde:	697b      	ldr	r3, [r7, #20]
90006de0:	681b      	ldr	r3, [r3, #0]
90006de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90006de4:	693b      	ldr	r3, [r7, #16]
90006de6:	43db      	mvns	r3, r3
90006de8:	69ba      	ldr	r2, [r7, #24]
90006dea:	4013      	ands	r3, r2
90006dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90006dee:	683b      	ldr	r3, [r7, #0]
90006df0:	685b      	ldr	r3, [r3, #4]
90006df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90006df6:	2b00      	cmp	r3, #0
90006df8:	d003      	beq.n	90006e02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90006dfa:	69ba      	ldr	r2, [r7, #24]
90006dfc:	693b      	ldr	r3, [r7, #16]
90006dfe:	4313      	orrs	r3, r2
90006e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
90006e02:	697b      	ldr	r3, [r7, #20]
90006e04:	69ba      	ldr	r2, [r7, #24]
90006e06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90006e08:	69fb      	ldr	r3, [r7, #28]
90006e0a:	3301      	adds	r3, #1
90006e0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90006e0e:	683b      	ldr	r3, [r7, #0]
90006e10:	681a      	ldr	r2, [r3, #0]
90006e12:	69fb      	ldr	r3, [r7, #28]
90006e14:	fa22 f303 	lsr.w	r3, r2, r3
90006e18:	2b00      	cmp	r3, #0
90006e1a:	f47f ae63 	bne.w	90006ae4 <HAL_GPIO_Init+0x14>
  }
}
90006e1e:	bf00      	nop
90006e20:	bf00      	nop
90006e22:	3724      	adds	r7, #36	; 0x24
90006e24:	46bd      	mov	sp, r7
90006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
90006e2a:	4770      	bx	lr
90006e2c:	58000400 	.word	0x58000400

90006e30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
90006e30:	b480      	push	{r7}
90006e32:	b087      	sub	sp, #28
90006e34:	af00      	add	r7, sp, #0
90006e36:	6078      	str	r0, [r7, #4]
90006e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90006e3a:	2300      	movs	r3, #0
90006e3c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90006e3e:	4b75      	ldr	r3, [pc, #468]	; (90007014 <HAL_GPIO_DeInit+0x1e4>)
90006e40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
90006e42:	e0d9      	b.n	90006ff8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
90006e44:	2201      	movs	r2, #1
90006e46:	697b      	ldr	r3, [r7, #20]
90006e48:	fa02 f303 	lsl.w	r3, r2, r3
90006e4c:	683a      	ldr	r2, [r7, #0]
90006e4e:	4013      	ands	r3, r2
90006e50:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
90006e52:	68fb      	ldr	r3, [r7, #12]
90006e54:	2b00      	cmp	r3, #0
90006e56:	f000 80cc 	beq.w	90006ff2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
90006e5a:	4a6f      	ldr	r2, [pc, #444]	; (90007018 <HAL_GPIO_DeInit+0x1e8>)
90006e5c:	697b      	ldr	r3, [r7, #20]
90006e5e:	089b      	lsrs	r3, r3, #2
90006e60:	3302      	adds	r3, #2
90006e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90006e66:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90006e68:	697b      	ldr	r3, [r7, #20]
90006e6a:	f003 0303 	and.w	r3, r3, #3
90006e6e:	009b      	lsls	r3, r3, #2
90006e70:	220f      	movs	r2, #15
90006e72:	fa02 f303 	lsl.w	r3, r2, r3
90006e76:	68ba      	ldr	r2, [r7, #8]
90006e78:	4013      	ands	r3, r2
90006e7a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90006e7c:	687b      	ldr	r3, [r7, #4]
90006e7e:	4a67      	ldr	r2, [pc, #412]	; (9000701c <HAL_GPIO_DeInit+0x1ec>)
90006e80:	4293      	cmp	r3, r2
90006e82:	d037      	beq.n	90006ef4 <HAL_GPIO_DeInit+0xc4>
90006e84:	687b      	ldr	r3, [r7, #4]
90006e86:	4a66      	ldr	r2, [pc, #408]	; (90007020 <HAL_GPIO_DeInit+0x1f0>)
90006e88:	4293      	cmp	r3, r2
90006e8a:	d031      	beq.n	90006ef0 <HAL_GPIO_DeInit+0xc0>
90006e8c:	687b      	ldr	r3, [r7, #4]
90006e8e:	4a65      	ldr	r2, [pc, #404]	; (90007024 <HAL_GPIO_DeInit+0x1f4>)
90006e90:	4293      	cmp	r3, r2
90006e92:	d02b      	beq.n	90006eec <HAL_GPIO_DeInit+0xbc>
90006e94:	687b      	ldr	r3, [r7, #4]
90006e96:	4a64      	ldr	r2, [pc, #400]	; (90007028 <HAL_GPIO_DeInit+0x1f8>)
90006e98:	4293      	cmp	r3, r2
90006e9a:	d025      	beq.n	90006ee8 <HAL_GPIO_DeInit+0xb8>
90006e9c:	687b      	ldr	r3, [r7, #4]
90006e9e:	4a63      	ldr	r2, [pc, #396]	; (9000702c <HAL_GPIO_DeInit+0x1fc>)
90006ea0:	4293      	cmp	r3, r2
90006ea2:	d01f      	beq.n	90006ee4 <HAL_GPIO_DeInit+0xb4>
90006ea4:	687b      	ldr	r3, [r7, #4]
90006ea6:	4a62      	ldr	r2, [pc, #392]	; (90007030 <HAL_GPIO_DeInit+0x200>)
90006ea8:	4293      	cmp	r3, r2
90006eaa:	d019      	beq.n	90006ee0 <HAL_GPIO_DeInit+0xb0>
90006eac:	687b      	ldr	r3, [r7, #4]
90006eae:	4a61      	ldr	r2, [pc, #388]	; (90007034 <HAL_GPIO_DeInit+0x204>)
90006eb0:	4293      	cmp	r3, r2
90006eb2:	d013      	beq.n	90006edc <HAL_GPIO_DeInit+0xac>
90006eb4:	687b      	ldr	r3, [r7, #4]
90006eb6:	4a60      	ldr	r2, [pc, #384]	; (90007038 <HAL_GPIO_DeInit+0x208>)
90006eb8:	4293      	cmp	r3, r2
90006eba:	d00d      	beq.n	90006ed8 <HAL_GPIO_DeInit+0xa8>
90006ebc:	687b      	ldr	r3, [r7, #4]
90006ebe:	4a5f      	ldr	r2, [pc, #380]	; (9000703c <HAL_GPIO_DeInit+0x20c>)
90006ec0:	4293      	cmp	r3, r2
90006ec2:	d007      	beq.n	90006ed4 <HAL_GPIO_DeInit+0xa4>
90006ec4:	687b      	ldr	r3, [r7, #4]
90006ec6:	4a5e      	ldr	r2, [pc, #376]	; (90007040 <HAL_GPIO_DeInit+0x210>)
90006ec8:	4293      	cmp	r3, r2
90006eca:	d101      	bne.n	90006ed0 <HAL_GPIO_DeInit+0xa0>
90006ecc:	2309      	movs	r3, #9
90006ece:	e012      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006ed0:	230a      	movs	r3, #10
90006ed2:	e010      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006ed4:	2308      	movs	r3, #8
90006ed6:	e00e      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006ed8:	2307      	movs	r3, #7
90006eda:	e00c      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006edc:	2306      	movs	r3, #6
90006ede:	e00a      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006ee0:	2305      	movs	r3, #5
90006ee2:	e008      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006ee4:	2304      	movs	r3, #4
90006ee6:	e006      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006ee8:	2303      	movs	r3, #3
90006eea:	e004      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006eec:	2302      	movs	r3, #2
90006eee:	e002      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006ef0:	2301      	movs	r3, #1
90006ef2:	e000      	b.n	90006ef6 <HAL_GPIO_DeInit+0xc6>
90006ef4:	2300      	movs	r3, #0
90006ef6:	697a      	ldr	r2, [r7, #20]
90006ef8:	f002 0203 	and.w	r2, r2, #3
90006efc:	0092      	lsls	r2, r2, #2
90006efe:	4093      	lsls	r3, r2
90006f00:	68ba      	ldr	r2, [r7, #8]
90006f02:	429a      	cmp	r2, r3
90006f04:	d136      	bne.n	90006f74 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90006f06:	693b      	ldr	r3, [r7, #16]
90006f08:	681a      	ldr	r2, [r3, #0]
90006f0a:	68fb      	ldr	r3, [r7, #12]
90006f0c:	43db      	mvns	r3, r3
90006f0e:	401a      	ands	r2, r3
90006f10:	693b      	ldr	r3, [r7, #16]
90006f12:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90006f14:	693b      	ldr	r3, [r7, #16]
90006f16:	685a      	ldr	r2, [r3, #4]
90006f18:	68fb      	ldr	r3, [r7, #12]
90006f1a:	43db      	mvns	r3, r3
90006f1c:	401a      	ands	r2, r3
90006f1e:	693b      	ldr	r3, [r7, #16]
90006f20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90006f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90006f26:	685a      	ldr	r2, [r3, #4]
90006f28:	68fb      	ldr	r3, [r7, #12]
90006f2a:	43db      	mvns	r3, r3
90006f2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
90006f30:	4013      	ands	r3, r2
90006f32:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90006f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90006f38:	681a      	ldr	r2, [r3, #0]
90006f3a:	68fb      	ldr	r3, [r7, #12]
90006f3c:	43db      	mvns	r3, r3
90006f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
90006f42:	4013      	ands	r3, r2
90006f44:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
90006f46:	697b      	ldr	r3, [r7, #20]
90006f48:	f003 0303 	and.w	r3, r3, #3
90006f4c:	009b      	lsls	r3, r3, #2
90006f4e:	220f      	movs	r2, #15
90006f50:	fa02 f303 	lsl.w	r3, r2, r3
90006f54:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90006f56:	4a30      	ldr	r2, [pc, #192]	; (90007018 <HAL_GPIO_DeInit+0x1e8>)
90006f58:	697b      	ldr	r3, [r7, #20]
90006f5a:	089b      	lsrs	r3, r3, #2
90006f5c:	3302      	adds	r3, #2
90006f5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90006f62:	68bb      	ldr	r3, [r7, #8]
90006f64:	43da      	mvns	r2, r3
90006f66:	482c      	ldr	r0, [pc, #176]	; (90007018 <HAL_GPIO_DeInit+0x1e8>)
90006f68:	697b      	ldr	r3, [r7, #20]
90006f6a:	089b      	lsrs	r3, r3, #2
90006f6c:	400a      	ands	r2, r1
90006f6e:	3302      	adds	r3, #2
90006f70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90006f74:	687b      	ldr	r3, [r7, #4]
90006f76:	681a      	ldr	r2, [r3, #0]
90006f78:	697b      	ldr	r3, [r7, #20]
90006f7a:	005b      	lsls	r3, r3, #1
90006f7c:	2103      	movs	r1, #3
90006f7e:	fa01 f303 	lsl.w	r3, r1, r3
90006f82:	431a      	orrs	r2, r3
90006f84:	687b      	ldr	r3, [r7, #4]
90006f86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90006f88:	697b      	ldr	r3, [r7, #20]
90006f8a:	08da      	lsrs	r2, r3, #3
90006f8c:	687b      	ldr	r3, [r7, #4]
90006f8e:	3208      	adds	r2, #8
90006f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90006f94:	697b      	ldr	r3, [r7, #20]
90006f96:	f003 0307 	and.w	r3, r3, #7
90006f9a:	009b      	lsls	r3, r3, #2
90006f9c:	220f      	movs	r2, #15
90006f9e:	fa02 f303 	lsl.w	r3, r2, r3
90006fa2:	43db      	mvns	r3, r3
90006fa4:	697a      	ldr	r2, [r7, #20]
90006fa6:	08d2      	lsrs	r2, r2, #3
90006fa8:	4019      	ands	r1, r3
90006faa:	687b      	ldr	r3, [r7, #4]
90006fac:	3208      	adds	r2, #8
90006fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90006fb2:	687b      	ldr	r3, [r7, #4]
90006fb4:	68da      	ldr	r2, [r3, #12]
90006fb6:	697b      	ldr	r3, [r7, #20]
90006fb8:	005b      	lsls	r3, r3, #1
90006fba:	2103      	movs	r1, #3
90006fbc:	fa01 f303 	lsl.w	r3, r1, r3
90006fc0:	43db      	mvns	r3, r3
90006fc2:	401a      	ands	r2, r3
90006fc4:	687b      	ldr	r3, [r7, #4]
90006fc6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
90006fc8:	687b      	ldr	r3, [r7, #4]
90006fca:	685a      	ldr	r2, [r3, #4]
90006fcc:	2101      	movs	r1, #1
90006fce:	697b      	ldr	r3, [r7, #20]
90006fd0:	fa01 f303 	lsl.w	r3, r1, r3
90006fd4:	43db      	mvns	r3, r3
90006fd6:	401a      	ands	r2, r3
90006fd8:	687b      	ldr	r3, [r7, #4]
90006fda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90006fdc:	687b      	ldr	r3, [r7, #4]
90006fde:	689a      	ldr	r2, [r3, #8]
90006fe0:	697b      	ldr	r3, [r7, #20]
90006fe2:	005b      	lsls	r3, r3, #1
90006fe4:	2103      	movs	r1, #3
90006fe6:	fa01 f303 	lsl.w	r3, r1, r3
90006fea:	43db      	mvns	r3, r3
90006fec:	401a      	ands	r2, r3
90006fee:	687b      	ldr	r3, [r7, #4]
90006ff0:	609a      	str	r2, [r3, #8]
    }

    position++;
90006ff2:	697b      	ldr	r3, [r7, #20]
90006ff4:	3301      	adds	r3, #1
90006ff6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
90006ff8:	683a      	ldr	r2, [r7, #0]
90006ffa:	697b      	ldr	r3, [r7, #20]
90006ffc:	fa22 f303 	lsr.w	r3, r2, r3
90007000:	2b00      	cmp	r3, #0
90007002:	f47f af1f 	bne.w	90006e44 <HAL_GPIO_DeInit+0x14>
  }
}
90007006:	bf00      	nop
90007008:	bf00      	nop
9000700a:	371c      	adds	r7, #28
9000700c:	46bd      	mov	sp, r7
9000700e:	f85d 7b04 	ldr.w	r7, [sp], #4
90007012:	4770      	bx	lr
90007014:	58000080 	.word	0x58000080
90007018:	58000400 	.word	0x58000400
9000701c:	58020000 	.word	0x58020000
90007020:	58020400 	.word	0x58020400
90007024:	58020800 	.word	0x58020800
90007028:	58020c00 	.word	0x58020c00
9000702c:	58021000 	.word	0x58021000
90007030:	58021400 	.word	0x58021400
90007034:	58021800 	.word	0x58021800
90007038:	58021c00 	.word	0x58021c00
9000703c:	58022000 	.word	0x58022000
90007040:	58022400 	.word	0x58022400

90007044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90007044:	b480      	push	{r7}
90007046:	b083      	sub	sp, #12
90007048:	af00      	add	r7, sp, #0
9000704a:	6078      	str	r0, [r7, #4]
9000704c:	460b      	mov	r3, r1
9000704e:	807b      	strh	r3, [r7, #2]
90007050:	4613      	mov	r3, r2
90007052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90007054:	787b      	ldrb	r3, [r7, #1]
90007056:	2b00      	cmp	r3, #0
90007058:	d003      	beq.n	90007062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
9000705a:	887a      	ldrh	r2, [r7, #2]
9000705c:	687b      	ldr	r3, [r7, #4]
9000705e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90007060:	e003      	b.n	9000706a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90007062:	887b      	ldrh	r3, [r7, #2]
90007064:	041a      	lsls	r2, r3, #16
90007066:	687b      	ldr	r3, [r7, #4]
90007068:	619a      	str	r2, [r3, #24]
}
9000706a:	bf00      	nop
9000706c:	370c      	adds	r7, #12
9000706e:	46bd      	mov	sp, r7
90007070:	f85d 7b04 	ldr.w	r7, [sp], #4
90007074:	4770      	bx	lr

90007076 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
90007076:	b480      	push	{r7}
90007078:	b085      	sub	sp, #20
9000707a:	af00      	add	r7, sp, #0
9000707c:	6078      	str	r0, [r7, #4]
9000707e:	460b      	mov	r3, r1
90007080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90007082:	687b      	ldr	r3, [r7, #4]
90007084:	695b      	ldr	r3, [r3, #20]
90007086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90007088:	887a      	ldrh	r2, [r7, #2]
9000708a:	68fb      	ldr	r3, [r7, #12]
9000708c:	4013      	ands	r3, r2
9000708e:	041a      	lsls	r2, r3, #16
90007090:	68fb      	ldr	r3, [r7, #12]
90007092:	43d9      	mvns	r1, r3
90007094:	887b      	ldrh	r3, [r7, #2]
90007096:	400b      	ands	r3, r1
90007098:	431a      	orrs	r2, r3
9000709a:	687b      	ldr	r3, [r7, #4]
9000709c:	619a      	str	r2, [r3, #24]
}
9000709e:	bf00      	nop
900070a0:	3714      	adds	r7, #20
900070a2:	46bd      	mov	sp, r7
900070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
900070a8:	4770      	bx	lr
	...

900070ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
900070ac:	b580      	push	{r7, lr}
900070ae:	b082      	sub	sp, #8
900070b0:	af00      	add	r7, sp, #0
900070b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
900070b4:	687b      	ldr	r3, [r7, #4]
900070b6:	2b00      	cmp	r3, #0
900070b8:	d101      	bne.n	900070be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
900070ba:	2301      	movs	r3, #1
900070bc:	e07f      	b.n	900071be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
900070be:	687b      	ldr	r3, [r7, #4]
900070c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
900070c4:	b2db      	uxtb	r3, r3
900070c6:	2b00      	cmp	r3, #0
900070c8:	d106      	bne.n	900070d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
900070ca:	687b      	ldr	r3, [r7, #4]
900070cc:	2200      	movs	r2, #0
900070ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
900070d2:	6878      	ldr	r0, [r7, #4]
900070d4:	f7f9 fee4 	bl	90000ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
900070d8:	687b      	ldr	r3, [r7, #4]
900070da:	2224      	movs	r2, #36	; 0x24
900070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
900070e0:	687b      	ldr	r3, [r7, #4]
900070e2:	681b      	ldr	r3, [r3, #0]
900070e4:	681a      	ldr	r2, [r3, #0]
900070e6:	687b      	ldr	r3, [r7, #4]
900070e8:	681b      	ldr	r3, [r3, #0]
900070ea:	f022 0201 	bic.w	r2, r2, #1
900070ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
900070f0:	687b      	ldr	r3, [r7, #4]
900070f2:	685a      	ldr	r2, [r3, #4]
900070f4:	687b      	ldr	r3, [r7, #4]
900070f6:	681b      	ldr	r3, [r3, #0]
900070f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
900070fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
900070fe:	687b      	ldr	r3, [r7, #4]
90007100:	681b      	ldr	r3, [r3, #0]
90007102:	689a      	ldr	r2, [r3, #8]
90007104:	687b      	ldr	r3, [r7, #4]
90007106:	681b      	ldr	r3, [r3, #0]
90007108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000710c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000710e:	687b      	ldr	r3, [r7, #4]
90007110:	68db      	ldr	r3, [r3, #12]
90007112:	2b01      	cmp	r3, #1
90007114:	d107      	bne.n	90007126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90007116:	687b      	ldr	r3, [r7, #4]
90007118:	689a      	ldr	r2, [r3, #8]
9000711a:	687b      	ldr	r3, [r7, #4]
9000711c:	681b      	ldr	r3, [r3, #0]
9000711e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90007122:	609a      	str	r2, [r3, #8]
90007124:	e006      	b.n	90007134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007126:	687b      	ldr	r3, [r7, #4]
90007128:	689a      	ldr	r2, [r3, #8]
9000712a:	687b      	ldr	r3, [r7, #4]
9000712c:	681b      	ldr	r3, [r3, #0]
9000712e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
90007132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007134:	687b      	ldr	r3, [r7, #4]
90007136:	68db      	ldr	r3, [r3, #12]
90007138:	2b02      	cmp	r3, #2
9000713a:	d104      	bne.n	90007146 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000713c:	687b      	ldr	r3, [r7, #4]
9000713e:	681b      	ldr	r3, [r3, #0]
90007140:	f44f 6200 	mov.w	r2, #2048	; 0x800
90007144:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007146:	687b      	ldr	r3, [r7, #4]
90007148:	681b      	ldr	r3, [r3, #0]
9000714a:	6859      	ldr	r1, [r3, #4]
9000714c:	687b      	ldr	r3, [r7, #4]
9000714e:	681a      	ldr	r2, [r3, #0]
90007150:	4b1d      	ldr	r3, [pc, #116]	; (900071c8 <HAL_I2C_Init+0x11c>)
90007152:	430b      	orrs	r3, r1
90007154:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90007156:	687b      	ldr	r3, [r7, #4]
90007158:	681b      	ldr	r3, [r3, #0]
9000715a:	68da      	ldr	r2, [r3, #12]
9000715c:	687b      	ldr	r3, [r7, #4]
9000715e:	681b      	ldr	r3, [r3, #0]
90007160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90007164:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007166:	687b      	ldr	r3, [r7, #4]
90007168:	691a      	ldr	r2, [r3, #16]
9000716a:	687b      	ldr	r3, [r7, #4]
9000716c:	695b      	ldr	r3, [r3, #20]
9000716e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
90007172:	687b      	ldr	r3, [r7, #4]
90007174:	699b      	ldr	r3, [r3, #24]
90007176:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007178:	687b      	ldr	r3, [r7, #4]
9000717a:	681b      	ldr	r3, [r3, #0]
9000717c:	430a      	orrs	r2, r1
9000717e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007180:	687b      	ldr	r3, [r7, #4]
90007182:	69d9      	ldr	r1, [r3, #28]
90007184:	687b      	ldr	r3, [r7, #4]
90007186:	6a1a      	ldr	r2, [r3, #32]
90007188:	687b      	ldr	r3, [r7, #4]
9000718a:	681b      	ldr	r3, [r3, #0]
9000718c:	430a      	orrs	r2, r1
9000718e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
90007190:	687b      	ldr	r3, [r7, #4]
90007192:	681b      	ldr	r3, [r3, #0]
90007194:	681a      	ldr	r2, [r3, #0]
90007196:	687b      	ldr	r3, [r7, #4]
90007198:	681b      	ldr	r3, [r3, #0]
9000719a:	f042 0201 	orr.w	r2, r2, #1
9000719e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900071a0:	687b      	ldr	r3, [r7, #4]
900071a2:	2200      	movs	r2, #0
900071a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
900071a6:	687b      	ldr	r3, [r7, #4]
900071a8:	2220      	movs	r2, #32
900071aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900071ae:	687b      	ldr	r3, [r7, #4]
900071b0:	2200      	movs	r2, #0
900071b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900071b4:	687b      	ldr	r3, [r7, #4]
900071b6:	2200      	movs	r2, #0
900071b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
900071bc:	2300      	movs	r3, #0
}
900071be:	4618      	mov	r0, r3
900071c0:	3708      	adds	r7, #8
900071c2:	46bd      	mov	sp, r7
900071c4:	bd80      	pop	{r7, pc}
900071c6:	bf00      	nop
900071c8:	02008000 	.word	0x02008000

900071cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
900071cc:	b580      	push	{r7, lr}
900071ce:	b082      	sub	sp, #8
900071d0:	af00      	add	r7, sp, #0
900071d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
900071d4:	687b      	ldr	r3, [r7, #4]
900071d6:	2b00      	cmp	r3, #0
900071d8:	d101      	bne.n	900071de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
900071da:	2301      	movs	r3, #1
900071dc:	e021      	b.n	90007222 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
900071de:	687b      	ldr	r3, [r7, #4]
900071e0:	2224      	movs	r2, #36	; 0x24
900071e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
900071e6:	687b      	ldr	r3, [r7, #4]
900071e8:	681b      	ldr	r3, [r3, #0]
900071ea:	681a      	ldr	r2, [r3, #0]
900071ec:	687b      	ldr	r3, [r7, #4]
900071ee:	681b      	ldr	r3, [r3, #0]
900071f0:	f022 0201 	bic.w	r2, r2, #1
900071f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
900071f6:	6878      	ldr	r0, [r7, #4]
900071f8:	f7f9 ff76 	bl	900010e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900071fc:	687b      	ldr	r3, [r7, #4]
900071fe:	2200      	movs	r2, #0
90007200:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
90007202:	687b      	ldr	r3, [r7, #4]
90007204:	2200      	movs	r2, #0
90007206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000720a:	687b      	ldr	r3, [r7, #4]
9000720c:	2200      	movs	r2, #0
9000720e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007210:	687b      	ldr	r3, [r7, #4]
90007212:	2200      	movs	r2, #0
90007214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
90007218:	687b      	ldr	r3, [r7, #4]
9000721a:	2200      	movs	r2, #0
9000721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
90007220:	2300      	movs	r3, #0
}
90007222:	4618      	mov	r0, r3
90007224:	3708      	adds	r7, #8
90007226:	46bd      	mov	sp, r7
90007228:	bd80      	pop	{r7, pc}
	...

9000722c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
9000722c:	b580      	push	{r7, lr}
9000722e:	b088      	sub	sp, #32
90007230:	af02      	add	r7, sp, #8
90007232:	60f8      	str	r0, [r7, #12]
90007234:	607a      	str	r2, [r7, #4]
90007236:	461a      	mov	r2, r3
90007238:	460b      	mov	r3, r1
9000723a:	817b      	strh	r3, [r7, #10]
9000723c:	4613      	mov	r3, r2
9000723e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
90007240:	68fb      	ldr	r3, [r7, #12]
90007242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90007246:	b2db      	uxtb	r3, r3
90007248:	2b20      	cmp	r3, #32
9000724a:	f040 80da 	bne.w	90007402 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000724e:	68fb      	ldr	r3, [r7, #12]
90007250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90007254:	2b01      	cmp	r3, #1
90007256:	d101      	bne.n	9000725c <HAL_I2C_Master_Transmit+0x30>
90007258:	2302      	movs	r3, #2
9000725a:	e0d3      	b.n	90007404 <HAL_I2C_Master_Transmit+0x1d8>
9000725c:	68fb      	ldr	r3, [r7, #12]
9000725e:	2201      	movs	r2, #1
90007260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90007264:	f7fc fc84 	bl	90003b70 <HAL_GetTick>
90007268:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000726a:	697b      	ldr	r3, [r7, #20]
9000726c:	9300      	str	r3, [sp, #0]
9000726e:	2319      	movs	r3, #25
90007270:	2201      	movs	r2, #1
90007272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007276:	68f8      	ldr	r0, [r7, #12]
90007278:	f000 fc56 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
9000727c:	4603      	mov	r3, r0
9000727e:	2b00      	cmp	r3, #0
90007280:	d001      	beq.n	90007286 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
90007282:	2301      	movs	r3, #1
90007284:	e0be      	b.n	90007404 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007286:	68fb      	ldr	r3, [r7, #12]
90007288:	2221      	movs	r2, #33	; 0x21
9000728a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
9000728e:	68fb      	ldr	r3, [r7, #12]
90007290:	2210      	movs	r2, #16
90007292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007296:	68fb      	ldr	r3, [r7, #12]
90007298:	2200      	movs	r2, #0
9000729a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
9000729c:	68fb      	ldr	r3, [r7, #12]
9000729e:	687a      	ldr	r2, [r7, #4]
900072a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
900072a2:	68fb      	ldr	r3, [r7, #12]
900072a4:	893a      	ldrh	r2, [r7, #8]
900072a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
900072a8:	68fb      	ldr	r3, [r7, #12]
900072aa:	2200      	movs	r2, #0
900072ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900072ae:	68fb      	ldr	r3, [r7, #12]
900072b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900072b2:	b29b      	uxth	r3, r3
900072b4:	2bff      	cmp	r3, #255	; 0xff
900072b6:	d90e      	bls.n	900072d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
900072b8:	68fb      	ldr	r3, [r7, #12]
900072ba:	22ff      	movs	r2, #255	; 0xff
900072bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
900072be:	68fb      	ldr	r3, [r7, #12]
900072c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900072c2:	b2da      	uxtb	r2, r3
900072c4:	8979      	ldrh	r1, [r7, #10]
900072c6:	4b51      	ldr	r3, [pc, #324]	; (9000740c <HAL_I2C_Master_Transmit+0x1e0>)
900072c8:	9300      	str	r3, [sp, #0]
900072ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900072ce:	68f8      	ldr	r0, [r7, #12]
900072d0:	f000 fe4c 	bl	90007f6c <I2C_TransferConfig>
900072d4:	e06c      	b.n	900073b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
900072d6:	68fb      	ldr	r3, [r7, #12]
900072d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900072da:	b29a      	uxth	r2, r3
900072dc:	68fb      	ldr	r3, [r7, #12]
900072de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900072e0:	68fb      	ldr	r3, [r7, #12]
900072e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900072e4:	b2da      	uxtb	r2, r3
900072e6:	8979      	ldrh	r1, [r7, #10]
900072e8:	4b48      	ldr	r3, [pc, #288]	; (9000740c <HAL_I2C_Master_Transmit+0x1e0>)
900072ea:	9300      	str	r3, [sp, #0]
900072ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
900072f0:	68f8      	ldr	r0, [r7, #12]
900072f2:	f000 fe3b 	bl	90007f6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
900072f6:	e05b      	b.n	900073b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900072f8:	697a      	ldr	r2, [r7, #20]
900072fa:	6a39      	ldr	r1, [r7, #32]
900072fc:	68f8      	ldr	r0, [r7, #12]
900072fe:	f000 fc53 	bl	90007ba8 <I2C_WaitOnTXISFlagUntilTimeout>
90007302:	4603      	mov	r3, r0
90007304:	2b00      	cmp	r3, #0
90007306:	d001      	beq.n	9000730c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
90007308:	2301      	movs	r3, #1
9000730a:	e07b      	b.n	90007404 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000730c:	68fb      	ldr	r3, [r7, #12]
9000730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007310:	781a      	ldrb	r2, [r3, #0]
90007312:	68fb      	ldr	r3, [r7, #12]
90007314:	681b      	ldr	r3, [r3, #0]
90007316:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90007318:	68fb      	ldr	r3, [r7, #12]
9000731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000731c:	1c5a      	adds	r2, r3, #1
9000731e:	68fb      	ldr	r3, [r7, #12]
90007320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
90007322:	68fb      	ldr	r3, [r7, #12]
90007324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90007326:	b29b      	uxth	r3, r3
90007328:	3b01      	subs	r3, #1
9000732a:	b29a      	uxth	r2, r3
9000732c:	68fb      	ldr	r3, [r7, #12]
9000732e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
90007330:	68fb      	ldr	r3, [r7, #12]
90007332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90007334:	3b01      	subs	r3, #1
90007336:	b29a      	uxth	r2, r3
90007338:	68fb      	ldr	r3, [r7, #12]
9000733a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000733c:	68fb      	ldr	r3, [r7, #12]
9000733e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90007340:	b29b      	uxth	r3, r3
90007342:	2b00      	cmp	r3, #0
90007344:	d034      	beq.n	900073b0 <HAL_I2C_Master_Transmit+0x184>
90007346:	68fb      	ldr	r3, [r7, #12]
90007348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000734a:	2b00      	cmp	r3, #0
9000734c:	d130      	bne.n	900073b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
9000734e:	697b      	ldr	r3, [r7, #20]
90007350:	9300      	str	r3, [sp, #0]
90007352:	6a3b      	ldr	r3, [r7, #32]
90007354:	2200      	movs	r2, #0
90007356:	2180      	movs	r1, #128	; 0x80
90007358:	68f8      	ldr	r0, [r7, #12]
9000735a:	f000 fbe5 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
9000735e:	4603      	mov	r3, r0
90007360:	2b00      	cmp	r3, #0
90007362:	d001      	beq.n	90007368 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
90007364:	2301      	movs	r3, #1
90007366:	e04d      	b.n	90007404 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007368:	68fb      	ldr	r3, [r7, #12]
9000736a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000736c:	b29b      	uxth	r3, r3
9000736e:	2bff      	cmp	r3, #255	; 0xff
90007370:	d90e      	bls.n	90007390 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007372:	68fb      	ldr	r3, [r7, #12]
90007374:	22ff      	movs	r2, #255	; 0xff
90007376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90007378:	68fb      	ldr	r3, [r7, #12]
9000737a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000737c:	b2da      	uxtb	r2, r3
9000737e:	8979      	ldrh	r1, [r7, #10]
90007380:	2300      	movs	r3, #0
90007382:	9300      	str	r3, [sp, #0]
90007384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90007388:	68f8      	ldr	r0, [r7, #12]
9000738a:	f000 fdef 	bl	90007f6c <I2C_TransferConfig>
9000738e:	e00f      	b.n	900073b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90007390:	68fb      	ldr	r3, [r7, #12]
90007392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90007394:	b29a      	uxth	r2, r3
90007396:	68fb      	ldr	r3, [r7, #12]
90007398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
9000739a:	68fb      	ldr	r3, [r7, #12]
9000739c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000739e:	b2da      	uxtb	r2, r3
900073a0:	8979      	ldrh	r1, [r7, #10]
900073a2:	2300      	movs	r3, #0
900073a4:	9300      	str	r3, [sp, #0]
900073a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
900073aa:	68f8      	ldr	r0, [r7, #12]
900073ac:	f000 fdde 	bl	90007f6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
900073b0:	68fb      	ldr	r3, [r7, #12]
900073b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900073b4:	b29b      	uxth	r3, r3
900073b6:	2b00      	cmp	r3, #0
900073b8:	d19e      	bne.n	900072f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900073ba:	697a      	ldr	r2, [r7, #20]
900073bc:	6a39      	ldr	r1, [r7, #32]
900073be:	68f8      	ldr	r0, [r7, #12]
900073c0:	f000 fc32 	bl	90007c28 <I2C_WaitOnSTOPFlagUntilTimeout>
900073c4:	4603      	mov	r3, r0
900073c6:	2b00      	cmp	r3, #0
900073c8:	d001      	beq.n	900073ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
900073ca:	2301      	movs	r3, #1
900073cc:	e01a      	b.n	90007404 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900073ce:	68fb      	ldr	r3, [r7, #12]
900073d0:	681b      	ldr	r3, [r3, #0]
900073d2:	2220      	movs	r2, #32
900073d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900073d6:	68fb      	ldr	r3, [r7, #12]
900073d8:	681b      	ldr	r3, [r3, #0]
900073da:	6859      	ldr	r1, [r3, #4]
900073dc:	68fb      	ldr	r3, [r7, #12]
900073de:	681a      	ldr	r2, [r3, #0]
900073e0:	4b0b      	ldr	r3, [pc, #44]	; (90007410 <HAL_I2C_Master_Transmit+0x1e4>)
900073e2:	400b      	ands	r3, r1
900073e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
900073e6:	68fb      	ldr	r3, [r7, #12]
900073e8:	2220      	movs	r2, #32
900073ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900073ee:	68fb      	ldr	r3, [r7, #12]
900073f0:	2200      	movs	r2, #0
900073f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900073f6:	68fb      	ldr	r3, [r7, #12]
900073f8:	2200      	movs	r2, #0
900073fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
900073fe:	2300      	movs	r3, #0
90007400:	e000      	b.n	90007404 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
90007402:	2302      	movs	r3, #2
  }
}
90007404:	4618      	mov	r0, r3
90007406:	3718      	adds	r7, #24
90007408:	46bd      	mov	sp, r7
9000740a:	bd80      	pop	{r7, pc}
9000740c:	80002000 	.word	0x80002000
90007410:	fe00e800 	.word	0xfe00e800

90007414 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
90007414:	b580      	push	{r7, lr}
90007416:	b088      	sub	sp, #32
90007418:	af02      	add	r7, sp, #8
9000741a:	60f8      	str	r0, [r7, #12]
9000741c:	607a      	str	r2, [r7, #4]
9000741e:	461a      	mov	r2, r3
90007420:	460b      	mov	r3, r1
90007422:	817b      	strh	r3, [r7, #10]
90007424:	4613      	mov	r3, r2
90007426:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
90007428:	68fb      	ldr	r3, [r7, #12]
9000742a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
9000742e:	b2db      	uxtb	r3, r3
90007430:	2b20      	cmp	r3, #32
90007432:	f040 80db 	bne.w	900075ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90007436:	68fb      	ldr	r3, [r7, #12]
90007438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
9000743c:	2b01      	cmp	r3, #1
9000743e:	d101      	bne.n	90007444 <HAL_I2C_Master_Receive+0x30>
90007440:	2302      	movs	r3, #2
90007442:	e0d4      	b.n	900075ee <HAL_I2C_Master_Receive+0x1da>
90007444:	68fb      	ldr	r3, [r7, #12]
90007446:	2201      	movs	r2, #1
90007448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
9000744c:	f7fc fb90 	bl	90003b70 <HAL_GetTick>
90007450:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90007452:	697b      	ldr	r3, [r7, #20]
90007454:	9300      	str	r3, [sp, #0]
90007456:	2319      	movs	r3, #25
90007458:	2201      	movs	r2, #1
9000745a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
9000745e:	68f8      	ldr	r0, [r7, #12]
90007460:	f000 fb62 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
90007464:	4603      	mov	r3, r0
90007466:	2b00      	cmp	r3, #0
90007468:	d001      	beq.n	9000746e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
9000746a:	2301      	movs	r3, #1
9000746c:	e0bf      	b.n	900075ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000746e:	68fb      	ldr	r3, [r7, #12]
90007470:	2222      	movs	r2, #34	; 0x22
90007472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
90007476:	68fb      	ldr	r3, [r7, #12]
90007478:	2210      	movs	r2, #16
9000747a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000747e:	68fb      	ldr	r3, [r7, #12]
90007480:	2200      	movs	r2, #0
90007482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90007484:	68fb      	ldr	r3, [r7, #12]
90007486:	687a      	ldr	r2, [r7, #4]
90007488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
9000748a:	68fb      	ldr	r3, [r7, #12]
9000748c:	893a      	ldrh	r2, [r7, #8]
9000748e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
90007490:	68fb      	ldr	r3, [r7, #12]
90007492:	2200      	movs	r2, #0
90007494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007496:	68fb      	ldr	r3, [r7, #12]
90007498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000749a:	b29b      	uxth	r3, r3
9000749c:	2bff      	cmp	r3, #255	; 0xff
9000749e:	d90e      	bls.n	900074be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
900074a0:	68fb      	ldr	r3, [r7, #12]
900074a2:	22ff      	movs	r2, #255	; 0xff
900074a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
900074a6:	68fb      	ldr	r3, [r7, #12]
900074a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900074aa:	b2da      	uxtb	r2, r3
900074ac:	8979      	ldrh	r1, [r7, #10]
900074ae:	4b52      	ldr	r3, [pc, #328]	; (900075f8 <HAL_I2C_Master_Receive+0x1e4>)
900074b0:	9300      	str	r3, [sp, #0]
900074b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900074b6:	68f8      	ldr	r0, [r7, #12]
900074b8:	f000 fd58 	bl	90007f6c <I2C_TransferConfig>
900074bc:	e06d      	b.n	9000759a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
900074be:	68fb      	ldr	r3, [r7, #12]
900074c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900074c2:	b29a      	uxth	r2, r3
900074c4:	68fb      	ldr	r3, [r7, #12]
900074c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900074c8:	68fb      	ldr	r3, [r7, #12]
900074ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900074cc:	b2da      	uxtb	r2, r3
900074ce:	8979      	ldrh	r1, [r7, #10]
900074d0:	4b49      	ldr	r3, [pc, #292]	; (900075f8 <HAL_I2C_Master_Receive+0x1e4>)
900074d2:	9300      	str	r3, [sp, #0]
900074d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
900074d8:	68f8      	ldr	r0, [r7, #12]
900074da:	f000 fd47 	bl	90007f6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
900074de:	e05c      	b.n	9000759a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900074e0:	697a      	ldr	r2, [r7, #20]
900074e2:	6a39      	ldr	r1, [r7, #32]
900074e4:	68f8      	ldr	r0, [r7, #12]
900074e6:	f000 fbdb 	bl	90007ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
900074ea:	4603      	mov	r3, r0
900074ec:	2b00      	cmp	r3, #0
900074ee:	d001      	beq.n	900074f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
900074f0:	2301      	movs	r3, #1
900074f2:	e07c      	b.n	900075ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
900074f4:	68fb      	ldr	r3, [r7, #12]
900074f6:	681b      	ldr	r3, [r3, #0]
900074f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900074fa:	68fb      	ldr	r3, [r7, #12]
900074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900074fe:	b2d2      	uxtb	r2, r2
90007500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90007502:	68fb      	ldr	r3, [r7, #12]
90007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007506:	1c5a      	adds	r2, r3, #1
90007508:	68fb      	ldr	r3, [r7, #12]
9000750a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
9000750c:	68fb      	ldr	r3, [r7, #12]
9000750e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90007510:	3b01      	subs	r3, #1
90007512:	b29a      	uxth	r2, r3
90007514:	68fb      	ldr	r3, [r7, #12]
90007516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
90007518:	68fb      	ldr	r3, [r7, #12]
9000751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000751c:	b29b      	uxth	r3, r3
9000751e:	3b01      	subs	r3, #1
90007520:	b29a      	uxth	r2, r3
90007522:	68fb      	ldr	r3, [r7, #12]
90007524:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007526:	68fb      	ldr	r3, [r7, #12]
90007528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000752a:	b29b      	uxth	r3, r3
9000752c:	2b00      	cmp	r3, #0
9000752e:	d034      	beq.n	9000759a <HAL_I2C_Master_Receive+0x186>
90007530:	68fb      	ldr	r3, [r7, #12]
90007532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90007534:	2b00      	cmp	r3, #0
90007536:	d130      	bne.n	9000759a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90007538:	697b      	ldr	r3, [r7, #20]
9000753a:	9300      	str	r3, [sp, #0]
9000753c:	6a3b      	ldr	r3, [r7, #32]
9000753e:	2200      	movs	r2, #0
90007540:	2180      	movs	r1, #128	; 0x80
90007542:	68f8      	ldr	r0, [r7, #12]
90007544:	f000 faf0 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
90007548:	4603      	mov	r3, r0
9000754a:	2b00      	cmp	r3, #0
9000754c:	d001      	beq.n	90007552 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
9000754e:	2301      	movs	r3, #1
90007550:	e04d      	b.n	900075ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007552:	68fb      	ldr	r3, [r7, #12]
90007554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90007556:	b29b      	uxth	r3, r3
90007558:	2bff      	cmp	r3, #255	; 0xff
9000755a:	d90e      	bls.n	9000757a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000755c:	68fb      	ldr	r3, [r7, #12]
9000755e:	22ff      	movs	r2, #255	; 0xff
90007560:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90007562:	68fb      	ldr	r3, [r7, #12]
90007564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90007566:	b2da      	uxtb	r2, r3
90007568:	8979      	ldrh	r1, [r7, #10]
9000756a:	2300      	movs	r3, #0
9000756c:	9300      	str	r3, [sp, #0]
9000756e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90007572:	68f8      	ldr	r0, [r7, #12]
90007574:	f000 fcfa 	bl	90007f6c <I2C_TransferConfig>
90007578:	e00f      	b.n	9000759a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
9000757a:	68fb      	ldr	r3, [r7, #12]
9000757c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000757e:	b29a      	uxth	r2, r3
90007580:	68fb      	ldr	r3, [r7, #12]
90007582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90007584:	68fb      	ldr	r3, [r7, #12]
90007586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90007588:	b2da      	uxtb	r2, r3
9000758a:	8979      	ldrh	r1, [r7, #10]
9000758c:	2300      	movs	r3, #0
9000758e:	9300      	str	r3, [sp, #0]
90007590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90007594:	68f8      	ldr	r0, [r7, #12]
90007596:	f000 fce9 	bl	90007f6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
9000759a:	68fb      	ldr	r3, [r7, #12]
9000759c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000759e:	b29b      	uxth	r3, r3
900075a0:	2b00      	cmp	r3, #0
900075a2:	d19d      	bne.n	900074e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900075a4:	697a      	ldr	r2, [r7, #20]
900075a6:	6a39      	ldr	r1, [r7, #32]
900075a8:	68f8      	ldr	r0, [r7, #12]
900075aa:	f000 fb3d 	bl	90007c28 <I2C_WaitOnSTOPFlagUntilTimeout>
900075ae:	4603      	mov	r3, r0
900075b0:	2b00      	cmp	r3, #0
900075b2:	d001      	beq.n	900075b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
900075b4:	2301      	movs	r3, #1
900075b6:	e01a      	b.n	900075ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900075b8:	68fb      	ldr	r3, [r7, #12]
900075ba:	681b      	ldr	r3, [r3, #0]
900075bc:	2220      	movs	r2, #32
900075be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900075c0:	68fb      	ldr	r3, [r7, #12]
900075c2:	681b      	ldr	r3, [r3, #0]
900075c4:	6859      	ldr	r1, [r3, #4]
900075c6:	68fb      	ldr	r3, [r7, #12]
900075c8:	681a      	ldr	r2, [r3, #0]
900075ca:	4b0c      	ldr	r3, [pc, #48]	; (900075fc <HAL_I2C_Master_Receive+0x1e8>)
900075cc:	400b      	ands	r3, r1
900075ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
900075d0:	68fb      	ldr	r3, [r7, #12]
900075d2:	2220      	movs	r2, #32
900075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900075d8:	68fb      	ldr	r3, [r7, #12]
900075da:	2200      	movs	r2, #0
900075dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900075e0:	68fb      	ldr	r3, [r7, #12]
900075e2:	2200      	movs	r2, #0
900075e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
900075e8:	2300      	movs	r3, #0
900075ea:	e000      	b.n	900075ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
900075ec:	2302      	movs	r3, #2
  }
}
900075ee:	4618      	mov	r0, r3
900075f0:	3718      	adds	r7, #24
900075f2:	46bd      	mov	sp, r7
900075f4:	bd80      	pop	{r7, pc}
900075f6:	bf00      	nop
900075f8:	80002400 	.word	0x80002400
900075fc:	fe00e800 	.word	0xfe00e800

90007600 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90007600:	b580      	push	{r7, lr}
90007602:	b088      	sub	sp, #32
90007604:	af02      	add	r7, sp, #8
90007606:	60f8      	str	r0, [r7, #12]
90007608:	4608      	mov	r0, r1
9000760a:	4611      	mov	r1, r2
9000760c:	461a      	mov	r2, r3
9000760e:	4603      	mov	r3, r0
90007610:	817b      	strh	r3, [r7, #10]
90007612:	460b      	mov	r3, r1
90007614:	813b      	strh	r3, [r7, #8]
90007616:	4613      	mov	r3, r2
90007618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000761a:	68fb      	ldr	r3, [r7, #12]
9000761c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90007620:	b2db      	uxtb	r3, r3
90007622:	2b20      	cmp	r3, #32
90007624:	f040 80f9 	bne.w	9000781a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
90007628:	6a3b      	ldr	r3, [r7, #32]
9000762a:	2b00      	cmp	r3, #0
9000762c:	d002      	beq.n	90007634 <HAL_I2C_Mem_Write+0x34>
9000762e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90007630:	2b00      	cmp	r3, #0
90007632:	d105      	bne.n	90007640 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007634:	68fb      	ldr	r3, [r7, #12]
90007636:	f44f 7200 	mov.w	r2, #512	; 0x200
9000763a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
9000763c:	2301      	movs	r3, #1
9000763e:	e0ed      	b.n	9000781c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90007640:	68fb      	ldr	r3, [r7, #12]
90007642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90007646:	2b01      	cmp	r3, #1
90007648:	d101      	bne.n	9000764e <HAL_I2C_Mem_Write+0x4e>
9000764a:	2302      	movs	r3, #2
9000764c:	e0e6      	b.n	9000781c <HAL_I2C_Mem_Write+0x21c>
9000764e:	68fb      	ldr	r3, [r7, #12]
90007650:	2201      	movs	r2, #1
90007652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90007656:	f7fc fa8b 	bl	90003b70 <HAL_GetTick>
9000765a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000765c:	697b      	ldr	r3, [r7, #20]
9000765e:	9300      	str	r3, [sp, #0]
90007660:	2319      	movs	r3, #25
90007662:	2201      	movs	r2, #1
90007664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007668:	68f8      	ldr	r0, [r7, #12]
9000766a:	f000 fa5d 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
9000766e:	4603      	mov	r3, r0
90007670:	2b00      	cmp	r3, #0
90007672:	d001      	beq.n	90007678 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
90007674:	2301      	movs	r3, #1
90007676:	e0d1      	b.n	9000781c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007678:	68fb      	ldr	r3, [r7, #12]
9000767a:	2221      	movs	r2, #33	; 0x21
9000767c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007680:	68fb      	ldr	r3, [r7, #12]
90007682:	2240      	movs	r2, #64	; 0x40
90007684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007688:	68fb      	ldr	r3, [r7, #12]
9000768a:	2200      	movs	r2, #0
9000768c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
9000768e:	68fb      	ldr	r3, [r7, #12]
90007690:	6a3a      	ldr	r2, [r7, #32]
90007692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
90007694:	68fb      	ldr	r3, [r7, #12]
90007696:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90007698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
9000769a:	68fb      	ldr	r3, [r7, #12]
9000769c:	2200      	movs	r2, #0
9000769e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900076a0:	88f8      	ldrh	r0, [r7, #6]
900076a2:	893a      	ldrh	r2, [r7, #8]
900076a4:	8979      	ldrh	r1, [r7, #10]
900076a6:	697b      	ldr	r3, [r7, #20]
900076a8:	9301      	str	r3, [sp, #4]
900076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
900076ac:	9300      	str	r3, [sp, #0]
900076ae:	4603      	mov	r3, r0
900076b0:	68f8      	ldr	r0, [r7, #12]
900076b2:	f000 f9c1 	bl	90007a38 <I2C_RequestMemoryWrite>
900076b6:	4603      	mov	r3, r0
900076b8:	2b00      	cmp	r3, #0
900076ba:	d005      	beq.n	900076c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
900076bc:	68fb      	ldr	r3, [r7, #12]
900076be:	2200      	movs	r2, #0
900076c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
900076c4:	2301      	movs	r3, #1
900076c6:	e0a9      	b.n	9000781c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900076c8:	68fb      	ldr	r3, [r7, #12]
900076ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900076cc:	b29b      	uxth	r3, r3
900076ce:	2bff      	cmp	r3, #255	; 0xff
900076d0:	d90e      	bls.n	900076f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
900076d2:	68fb      	ldr	r3, [r7, #12]
900076d4:	22ff      	movs	r2, #255	; 0xff
900076d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900076d8:	68fb      	ldr	r3, [r7, #12]
900076da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900076dc:	b2da      	uxtb	r2, r3
900076de:	8979      	ldrh	r1, [r7, #10]
900076e0:	2300      	movs	r3, #0
900076e2:	9300      	str	r3, [sp, #0]
900076e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900076e8:	68f8      	ldr	r0, [r7, #12]
900076ea:	f000 fc3f 	bl	90007f6c <I2C_TransferConfig>
900076ee:	e00f      	b.n	90007710 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
900076f0:	68fb      	ldr	r3, [r7, #12]
900076f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900076f4:	b29a      	uxth	r2, r3
900076f6:	68fb      	ldr	r3, [r7, #12]
900076f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900076fa:	68fb      	ldr	r3, [r7, #12]
900076fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900076fe:	b2da      	uxtb	r2, r3
90007700:	8979      	ldrh	r1, [r7, #10]
90007702:	2300      	movs	r3, #0
90007704:	9300      	str	r3, [sp, #0]
90007706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000770a:	68f8      	ldr	r0, [r7, #12]
9000770c:	f000 fc2e 	bl	90007f6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007710:	697a      	ldr	r2, [r7, #20]
90007712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90007714:	68f8      	ldr	r0, [r7, #12]
90007716:	f000 fa47 	bl	90007ba8 <I2C_WaitOnTXISFlagUntilTimeout>
9000771a:	4603      	mov	r3, r0
9000771c:	2b00      	cmp	r3, #0
9000771e:	d001      	beq.n	90007724 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
90007720:	2301      	movs	r3, #1
90007722:	e07b      	b.n	9000781c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007724:	68fb      	ldr	r3, [r7, #12]
90007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007728:	781a      	ldrb	r2, [r3, #0]
9000772a:	68fb      	ldr	r3, [r7, #12]
9000772c:	681b      	ldr	r3, [r3, #0]
9000772e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90007730:	68fb      	ldr	r3, [r7, #12]
90007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007734:	1c5a      	adds	r2, r3, #1
90007736:	68fb      	ldr	r3, [r7, #12]
90007738:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
9000773a:	68fb      	ldr	r3, [r7, #12]
9000773c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000773e:	b29b      	uxth	r3, r3
90007740:	3b01      	subs	r3, #1
90007742:	b29a      	uxth	r2, r3
90007744:	68fb      	ldr	r3, [r7, #12]
90007746:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
90007748:	68fb      	ldr	r3, [r7, #12]
9000774a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000774c:	3b01      	subs	r3, #1
9000774e:	b29a      	uxth	r2, r3
90007750:	68fb      	ldr	r3, [r7, #12]
90007752:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007754:	68fb      	ldr	r3, [r7, #12]
90007756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90007758:	b29b      	uxth	r3, r3
9000775a:	2b00      	cmp	r3, #0
9000775c:	d034      	beq.n	900077c8 <HAL_I2C_Mem_Write+0x1c8>
9000775e:	68fb      	ldr	r3, [r7, #12]
90007760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90007762:	2b00      	cmp	r3, #0
90007764:	d130      	bne.n	900077c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90007766:	697b      	ldr	r3, [r7, #20]
90007768:	9300      	str	r3, [sp, #0]
9000776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000776c:	2200      	movs	r2, #0
9000776e:	2180      	movs	r1, #128	; 0x80
90007770:	68f8      	ldr	r0, [r7, #12]
90007772:	f000 f9d9 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
90007776:	4603      	mov	r3, r0
90007778:	2b00      	cmp	r3, #0
9000777a:	d001      	beq.n	90007780 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
9000777c:	2301      	movs	r3, #1
9000777e:	e04d      	b.n	9000781c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007780:	68fb      	ldr	r3, [r7, #12]
90007782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90007784:	b29b      	uxth	r3, r3
90007786:	2bff      	cmp	r3, #255	; 0xff
90007788:	d90e      	bls.n	900077a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000778a:	68fb      	ldr	r3, [r7, #12]
9000778c:	22ff      	movs	r2, #255	; 0xff
9000778e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90007790:	68fb      	ldr	r3, [r7, #12]
90007792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90007794:	b2da      	uxtb	r2, r3
90007796:	8979      	ldrh	r1, [r7, #10]
90007798:	2300      	movs	r3, #0
9000779a:	9300      	str	r3, [sp, #0]
9000779c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900077a0:	68f8      	ldr	r0, [r7, #12]
900077a2:	f000 fbe3 	bl	90007f6c <I2C_TransferConfig>
900077a6:	e00f      	b.n	900077c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
900077a8:	68fb      	ldr	r3, [r7, #12]
900077aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900077ac:	b29a      	uxth	r2, r3
900077ae:	68fb      	ldr	r3, [r7, #12]
900077b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
900077b2:	68fb      	ldr	r3, [r7, #12]
900077b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900077b6:	b2da      	uxtb	r2, r3
900077b8:	8979      	ldrh	r1, [r7, #10]
900077ba:	2300      	movs	r3, #0
900077bc:	9300      	str	r3, [sp, #0]
900077be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
900077c2:	68f8      	ldr	r0, [r7, #12]
900077c4:	f000 fbd2 	bl	90007f6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
900077c8:	68fb      	ldr	r3, [r7, #12]
900077ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900077cc:	b29b      	uxth	r3, r3
900077ce:	2b00      	cmp	r3, #0
900077d0:	d19e      	bne.n	90007710 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900077d2:	697a      	ldr	r2, [r7, #20]
900077d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
900077d6:	68f8      	ldr	r0, [r7, #12]
900077d8:	f000 fa26 	bl	90007c28 <I2C_WaitOnSTOPFlagUntilTimeout>
900077dc:	4603      	mov	r3, r0
900077de:	2b00      	cmp	r3, #0
900077e0:	d001      	beq.n	900077e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
900077e2:	2301      	movs	r3, #1
900077e4:	e01a      	b.n	9000781c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900077e6:	68fb      	ldr	r3, [r7, #12]
900077e8:	681b      	ldr	r3, [r3, #0]
900077ea:	2220      	movs	r2, #32
900077ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900077ee:	68fb      	ldr	r3, [r7, #12]
900077f0:	681b      	ldr	r3, [r3, #0]
900077f2:	6859      	ldr	r1, [r3, #4]
900077f4:	68fb      	ldr	r3, [r7, #12]
900077f6:	681a      	ldr	r2, [r3, #0]
900077f8:	4b0a      	ldr	r3, [pc, #40]	; (90007824 <HAL_I2C_Mem_Write+0x224>)
900077fa:	400b      	ands	r3, r1
900077fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
900077fe:	68fb      	ldr	r3, [r7, #12]
90007800:	2220      	movs	r2, #32
90007802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90007806:	68fb      	ldr	r3, [r7, #12]
90007808:	2200      	movs	r2, #0
9000780a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000780e:	68fb      	ldr	r3, [r7, #12]
90007810:	2200      	movs	r2, #0
90007812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90007816:	2300      	movs	r3, #0
90007818:	e000      	b.n	9000781c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
9000781a:	2302      	movs	r3, #2
  }
}
9000781c:	4618      	mov	r0, r3
9000781e:	3718      	adds	r7, #24
90007820:	46bd      	mov	sp, r7
90007822:	bd80      	pop	{r7, pc}
90007824:	fe00e800 	.word	0xfe00e800

90007828 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
90007828:	b580      	push	{r7, lr}
9000782a:	b08a      	sub	sp, #40	; 0x28
9000782c:	af02      	add	r7, sp, #8
9000782e:	60f8      	str	r0, [r7, #12]
90007830:	607a      	str	r2, [r7, #4]
90007832:	603b      	str	r3, [r7, #0]
90007834:	460b      	mov	r3, r1
90007836:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
90007838:	2300      	movs	r3, #0
9000783a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
9000783c:	68fb      	ldr	r3, [r7, #12]
9000783e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90007842:	b2db      	uxtb	r3, r3
90007844:	2b20      	cmp	r3, #32
90007846:	f040 80ef 	bne.w	90007a28 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
9000784a:	68fb      	ldr	r3, [r7, #12]
9000784c:	681b      	ldr	r3, [r3, #0]
9000784e:	699b      	ldr	r3, [r3, #24]
90007850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90007854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90007858:	d101      	bne.n	9000785e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
9000785a:	2302      	movs	r3, #2
9000785c:	e0e5      	b.n	90007a2a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
9000785e:	68fb      	ldr	r3, [r7, #12]
90007860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90007864:	2b01      	cmp	r3, #1
90007866:	d101      	bne.n	9000786c <HAL_I2C_IsDeviceReady+0x44>
90007868:	2302      	movs	r3, #2
9000786a:	e0de      	b.n	90007a2a <HAL_I2C_IsDeviceReady+0x202>
9000786c:	68fb      	ldr	r3, [r7, #12]
9000786e:	2201      	movs	r2, #1
90007870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90007874:	68fb      	ldr	r3, [r7, #12]
90007876:	2224      	movs	r2, #36	; 0x24
90007878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000787c:	68fb      	ldr	r3, [r7, #12]
9000787e:	2200      	movs	r2, #0
90007880:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
90007882:	68fb      	ldr	r3, [r7, #12]
90007884:	68db      	ldr	r3, [r3, #12]
90007886:	2b01      	cmp	r3, #1
90007888:	d105      	bne.n	90007896 <HAL_I2C_IsDeviceReady+0x6e>
9000788a:	897b      	ldrh	r3, [r7, #10]
9000788c:	f3c3 0209 	ubfx	r2, r3, #0, #10
90007890:	4b68      	ldr	r3, [pc, #416]	; (90007a34 <HAL_I2C_IsDeviceReady+0x20c>)
90007892:	4313      	orrs	r3, r2
90007894:	e004      	b.n	900078a0 <HAL_I2C_IsDeviceReady+0x78>
90007896:	897b      	ldrh	r3, [r7, #10]
90007898:	f3c3 0309 	ubfx	r3, r3, #0, #10
9000789c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
900078a0:	68fa      	ldr	r2, [r7, #12]
900078a2:	6812      	ldr	r2, [r2, #0]
900078a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
900078a6:	f7fc f963 	bl	90003b70 <HAL_GetTick>
900078aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
900078ac:	68fb      	ldr	r3, [r7, #12]
900078ae:	681b      	ldr	r3, [r3, #0]
900078b0:	699b      	ldr	r3, [r3, #24]
900078b2:	f003 0320 	and.w	r3, r3, #32
900078b6:	2b20      	cmp	r3, #32
900078b8:	bf0c      	ite	eq
900078ba:	2301      	moveq	r3, #1
900078bc:	2300      	movne	r3, #0
900078be:	b2db      	uxtb	r3, r3
900078c0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
900078c2:	68fb      	ldr	r3, [r7, #12]
900078c4:	681b      	ldr	r3, [r3, #0]
900078c6:	699b      	ldr	r3, [r3, #24]
900078c8:	f003 0310 	and.w	r3, r3, #16
900078cc:	2b10      	cmp	r3, #16
900078ce:	bf0c      	ite	eq
900078d0:	2301      	moveq	r3, #1
900078d2:	2300      	movne	r3, #0
900078d4:	b2db      	uxtb	r3, r3
900078d6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
900078d8:	e034      	b.n	90007944 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
900078da:	683b      	ldr	r3, [r7, #0]
900078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
900078e0:	d01a      	beq.n	90007918 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900078e2:	f7fc f945 	bl	90003b70 <HAL_GetTick>
900078e6:	4602      	mov	r2, r0
900078e8:	69bb      	ldr	r3, [r7, #24]
900078ea:	1ad3      	subs	r3, r2, r3
900078ec:	683a      	ldr	r2, [r7, #0]
900078ee:	429a      	cmp	r2, r3
900078f0:	d302      	bcc.n	900078f8 <HAL_I2C_IsDeviceReady+0xd0>
900078f2:	683b      	ldr	r3, [r7, #0]
900078f4:	2b00      	cmp	r3, #0
900078f6:	d10f      	bne.n	90007918 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
900078f8:	68fb      	ldr	r3, [r7, #12]
900078fa:	2220      	movs	r2, #32
900078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007900:	68fb      	ldr	r3, [r7, #12]
90007902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007904:	f043 0220 	orr.w	r2, r3, #32
90007908:	68fb      	ldr	r3, [r7, #12]
9000790a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
9000790c:	68fb      	ldr	r3, [r7, #12]
9000790e:	2200      	movs	r2, #0
90007910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
90007914:	2301      	movs	r3, #1
90007916:	e088      	b.n	90007a2a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
90007918:	68fb      	ldr	r3, [r7, #12]
9000791a:	681b      	ldr	r3, [r3, #0]
9000791c:	699b      	ldr	r3, [r3, #24]
9000791e:	f003 0320 	and.w	r3, r3, #32
90007922:	2b20      	cmp	r3, #32
90007924:	bf0c      	ite	eq
90007926:	2301      	moveq	r3, #1
90007928:	2300      	movne	r3, #0
9000792a:	b2db      	uxtb	r3, r3
9000792c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
9000792e:	68fb      	ldr	r3, [r7, #12]
90007930:	681b      	ldr	r3, [r3, #0]
90007932:	699b      	ldr	r3, [r3, #24]
90007934:	f003 0310 	and.w	r3, r3, #16
90007938:	2b10      	cmp	r3, #16
9000793a:	bf0c      	ite	eq
9000793c:	2301      	moveq	r3, #1
9000793e:	2300      	movne	r3, #0
90007940:	b2db      	uxtb	r3, r3
90007942:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
90007944:	7ffb      	ldrb	r3, [r7, #31]
90007946:	2b00      	cmp	r3, #0
90007948:	d102      	bne.n	90007950 <HAL_I2C_IsDeviceReady+0x128>
9000794a:	7fbb      	ldrb	r3, [r7, #30]
9000794c:	2b00      	cmp	r3, #0
9000794e:	d0c4      	beq.n	900078da <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
90007950:	68fb      	ldr	r3, [r7, #12]
90007952:	681b      	ldr	r3, [r3, #0]
90007954:	699b      	ldr	r3, [r3, #24]
90007956:	f003 0310 	and.w	r3, r3, #16
9000795a:	2b10      	cmp	r3, #16
9000795c:	d01a      	beq.n	90007994 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
9000795e:	69bb      	ldr	r3, [r7, #24]
90007960:	9300      	str	r3, [sp, #0]
90007962:	683b      	ldr	r3, [r7, #0]
90007964:	2200      	movs	r2, #0
90007966:	2120      	movs	r1, #32
90007968:	68f8      	ldr	r0, [r7, #12]
9000796a:	f000 f8dd 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
9000796e:	4603      	mov	r3, r0
90007970:	2b00      	cmp	r3, #0
90007972:	d001      	beq.n	90007978 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
90007974:	2301      	movs	r3, #1
90007976:	e058      	b.n	90007a2a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007978:	68fb      	ldr	r3, [r7, #12]
9000797a:	681b      	ldr	r3, [r3, #0]
9000797c:	2220      	movs	r2, #32
9000797e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
90007980:	68fb      	ldr	r3, [r7, #12]
90007982:	2220      	movs	r2, #32
90007984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90007988:	68fb      	ldr	r3, [r7, #12]
9000798a:	2200      	movs	r2, #0
9000798c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
90007990:	2300      	movs	r3, #0
90007992:	e04a      	b.n	90007a2a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
90007994:	69bb      	ldr	r3, [r7, #24]
90007996:	9300      	str	r3, [sp, #0]
90007998:	683b      	ldr	r3, [r7, #0]
9000799a:	2200      	movs	r2, #0
9000799c:	2120      	movs	r1, #32
9000799e:	68f8      	ldr	r0, [r7, #12]
900079a0:	f000 f8c2 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
900079a4:	4603      	mov	r3, r0
900079a6:	2b00      	cmp	r3, #0
900079a8:	d001      	beq.n	900079ae <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
900079aa:	2301      	movs	r3, #1
900079ac:	e03d      	b.n	90007a2a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900079ae:	68fb      	ldr	r3, [r7, #12]
900079b0:	681b      	ldr	r3, [r3, #0]
900079b2:	2210      	movs	r2, #16
900079b4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900079b6:	68fb      	ldr	r3, [r7, #12]
900079b8:	681b      	ldr	r3, [r3, #0]
900079ba:	2220      	movs	r2, #32
900079bc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
900079be:	697b      	ldr	r3, [r7, #20]
900079c0:	687a      	ldr	r2, [r7, #4]
900079c2:	429a      	cmp	r2, r3
900079c4:	d118      	bne.n	900079f8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
900079c6:	68fb      	ldr	r3, [r7, #12]
900079c8:	681b      	ldr	r3, [r3, #0]
900079ca:	685a      	ldr	r2, [r3, #4]
900079cc:	68fb      	ldr	r3, [r7, #12]
900079ce:	681b      	ldr	r3, [r3, #0]
900079d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
900079d4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
900079d6:	69bb      	ldr	r3, [r7, #24]
900079d8:	9300      	str	r3, [sp, #0]
900079da:	683b      	ldr	r3, [r7, #0]
900079dc:	2200      	movs	r2, #0
900079de:	2120      	movs	r1, #32
900079e0:	68f8      	ldr	r0, [r7, #12]
900079e2:	f000 f8a1 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
900079e6:	4603      	mov	r3, r0
900079e8:	2b00      	cmp	r3, #0
900079ea:	d001      	beq.n	900079f0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
900079ec:	2301      	movs	r3, #1
900079ee:	e01c      	b.n	90007a2a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900079f0:	68fb      	ldr	r3, [r7, #12]
900079f2:	681b      	ldr	r3, [r3, #0]
900079f4:	2220      	movs	r2, #32
900079f6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
900079f8:	697b      	ldr	r3, [r7, #20]
900079fa:	3301      	adds	r3, #1
900079fc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
900079fe:	697b      	ldr	r3, [r7, #20]
90007a00:	687a      	ldr	r2, [r7, #4]
90007a02:	429a      	cmp	r2, r3
90007a04:	f63f af3d 	bhi.w	90007882 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
90007a08:	68fb      	ldr	r3, [r7, #12]
90007a0a:	2220      	movs	r2, #32
90007a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007a10:	68fb      	ldr	r3, [r7, #12]
90007a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007a14:	f043 0220 	orr.w	r2, r3, #32
90007a18:	68fb      	ldr	r3, [r7, #12]
90007a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007a1c:	68fb      	ldr	r3, [r7, #12]
90007a1e:	2200      	movs	r2, #0
90007a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
90007a24:	2301      	movs	r3, #1
90007a26:	e000      	b.n	90007a2a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
90007a28:	2302      	movs	r3, #2
  }
}
90007a2a:	4618      	mov	r0, r3
90007a2c:	3720      	adds	r7, #32
90007a2e:	46bd      	mov	sp, r7
90007a30:	bd80      	pop	{r7, pc}
90007a32:	bf00      	nop
90007a34:	02002000 	.word	0x02002000

90007a38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
90007a38:	b580      	push	{r7, lr}
90007a3a:	b086      	sub	sp, #24
90007a3c:	af02      	add	r7, sp, #8
90007a3e:	60f8      	str	r0, [r7, #12]
90007a40:	4608      	mov	r0, r1
90007a42:	4611      	mov	r1, r2
90007a44:	461a      	mov	r2, r3
90007a46:	4603      	mov	r3, r0
90007a48:	817b      	strh	r3, [r7, #10]
90007a4a:	460b      	mov	r3, r1
90007a4c:	813b      	strh	r3, [r7, #8]
90007a4e:	4613      	mov	r3, r2
90007a50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90007a52:	88fb      	ldrh	r3, [r7, #6]
90007a54:	b2da      	uxtb	r2, r3
90007a56:	8979      	ldrh	r1, [r7, #10]
90007a58:	4b20      	ldr	r3, [pc, #128]	; (90007adc <I2C_RequestMemoryWrite+0xa4>)
90007a5a:	9300      	str	r3, [sp, #0]
90007a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90007a60:	68f8      	ldr	r0, [r7, #12]
90007a62:	f000 fa83 	bl	90007f6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007a66:	69fa      	ldr	r2, [r7, #28]
90007a68:	69b9      	ldr	r1, [r7, #24]
90007a6a:	68f8      	ldr	r0, [r7, #12]
90007a6c:	f000 f89c 	bl	90007ba8 <I2C_WaitOnTXISFlagUntilTimeout>
90007a70:	4603      	mov	r3, r0
90007a72:	2b00      	cmp	r3, #0
90007a74:	d001      	beq.n	90007a7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
90007a76:	2301      	movs	r3, #1
90007a78:	e02c      	b.n	90007ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007a7a:	88fb      	ldrh	r3, [r7, #6]
90007a7c:	2b01      	cmp	r3, #1
90007a7e:	d105      	bne.n	90007a8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007a80:	893b      	ldrh	r3, [r7, #8]
90007a82:	b2da      	uxtb	r2, r3
90007a84:	68fb      	ldr	r3, [r7, #12]
90007a86:	681b      	ldr	r3, [r3, #0]
90007a88:	629a      	str	r2, [r3, #40]	; 0x28
90007a8a:	e015      	b.n	90007ab8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007a8c:	893b      	ldrh	r3, [r7, #8]
90007a8e:	0a1b      	lsrs	r3, r3, #8
90007a90:	b29b      	uxth	r3, r3
90007a92:	b2da      	uxtb	r2, r3
90007a94:	68fb      	ldr	r3, [r7, #12]
90007a96:	681b      	ldr	r3, [r3, #0]
90007a98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007a9a:	69fa      	ldr	r2, [r7, #28]
90007a9c:	69b9      	ldr	r1, [r7, #24]
90007a9e:	68f8      	ldr	r0, [r7, #12]
90007aa0:	f000 f882 	bl	90007ba8 <I2C_WaitOnTXISFlagUntilTimeout>
90007aa4:	4603      	mov	r3, r0
90007aa6:	2b00      	cmp	r3, #0
90007aa8:	d001      	beq.n	90007aae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
90007aaa:	2301      	movs	r3, #1
90007aac:	e012      	b.n	90007ad4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007aae:	893b      	ldrh	r3, [r7, #8]
90007ab0:	b2da      	uxtb	r2, r3
90007ab2:	68fb      	ldr	r3, [r7, #12]
90007ab4:	681b      	ldr	r3, [r3, #0]
90007ab6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90007ab8:	69fb      	ldr	r3, [r7, #28]
90007aba:	9300      	str	r3, [sp, #0]
90007abc:	69bb      	ldr	r3, [r7, #24]
90007abe:	2200      	movs	r2, #0
90007ac0:	2180      	movs	r1, #128	; 0x80
90007ac2:	68f8      	ldr	r0, [r7, #12]
90007ac4:	f000 f830 	bl	90007b28 <I2C_WaitOnFlagUntilTimeout>
90007ac8:	4603      	mov	r3, r0
90007aca:	2b00      	cmp	r3, #0
90007acc:	d001      	beq.n	90007ad2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
90007ace:	2301      	movs	r3, #1
90007ad0:	e000      	b.n	90007ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
90007ad2:	2300      	movs	r3, #0
}
90007ad4:	4618      	mov	r0, r3
90007ad6:	3710      	adds	r7, #16
90007ad8:	46bd      	mov	sp, r7
90007ada:	bd80      	pop	{r7, pc}
90007adc:	80002000 	.word	0x80002000

90007ae0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90007ae0:	b480      	push	{r7}
90007ae2:	b083      	sub	sp, #12
90007ae4:	af00      	add	r7, sp, #0
90007ae6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90007ae8:	687b      	ldr	r3, [r7, #4]
90007aea:	681b      	ldr	r3, [r3, #0]
90007aec:	699b      	ldr	r3, [r3, #24]
90007aee:	f003 0302 	and.w	r3, r3, #2
90007af2:	2b02      	cmp	r3, #2
90007af4:	d103      	bne.n	90007afe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90007af6:	687b      	ldr	r3, [r7, #4]
90007af8:	681b      	ldr	r3, [r3, #0]
90007afa:	2200      	movs	r2, #0
90007afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007afe:	687b      	ldr	r3, [r7, #4]
90007b00:	681b      	ldr	r3, [r3, #0]
90007b02:	699b      	ldr	r3, [r3, #24]
90007b04:	f003 0301 	and.w	r3, r3, #1
90007b08:	2b01      	cmp	r3, #1
90007b0a:	d007      	beq.n	90007b1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90007b0c:	687b      	ldr	r3, [r7, #4]
90007b0e:	681b      	ldr	r3, [r3, #0]
90007b10:	699a      	ldr	r2, [r3, #24]
90007b12:	687b      	ldr	r3, [r7, #4]
90007b14:	681b      	ldr	r3, [r3, #0]
90007b16:	f042 0201 	orr.w	r2, r2, #1
90007b1a:	619a      	str	r2, [r3, #24]
  }
}
90007b1c:	bf00      	nop
90007b1e:	370c      	adds	r7, #12
90007b20:	46bd      	mov	sp, r7
90007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
90007b26:	4770      	bx	lr

90007b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90007b28:	b580      	push	{r7, lr}
90007b2a:	b084      	sub	sp, #16
90007b2c:	af00      	add	r7, sp, #0
90007b2e:	60f8      	str	r0, [r7, #12]
90007b30:	60b9      	str	r1, [r7, #8]
90007b32:	603b      	str	r3, [r7, #0]
90007b34:	4613      	mov	r3, r2
90007b36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007b38:	e022      	b.n	90007b80 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90007b3a:	683b      	ldr	r3, [r7, #0]
90007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
90007b40:	d01e      	beq.n	90007b80 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007b42:	f7fc f815 	bl	90003b70 <HAL_GetTick>
90007b46:	4602      	mov	r2, r0
90007b48:	69bb      	ldr	r3, [r7, #24]
90007b4a:	1ad3      	subs	r3, r2, r3
90007b4c:	683a      	ldr	r2, [r7, #0]
90007b4e:	429a      	cmp	r2, r3
90007b50:	d302      	bcc.n	90007b58 <I2C_WaitOnFlagUntilTimeout+0x30>
90007b52:	683b      	ldr	r3, [r7, #0]
90007b54:	2b00      	cmp	r3, #0
90007b56:	d113      	bne.n	90007b80 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007b58:	68fb      	ldr	r3, [r7, #12]
90007b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007b5c:	f043 0220 	orr.w	r2, r3, #32
90007b60:	68fb      	ldr	r3, [r7, #12]
90007b62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90007b64:	68fb      	ldr	r3, [r7, #12]
90007b66:	2220      	movs	r2, #32
90007b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90007b6c:	68fb      	ldr	r3, [r7, #12]
90007b6e:	2200      	movs	r2, #0
90007b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90007b74:	68fb      	ldr	r3, [r7, #12]
90007b76:	2200      	movs	r2, #0
90007b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
90007b7c:	2301      	movs	r3, #1
90007b7e:	e00f      	b.n	90007ba0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007b80:	68fb      	ldr	r3, [r7, #12]
90007b82:	681b      	ldr	r3, [r3, #0]
90007b84:	699a      	ldr	r2, [r3, #24]
90007b86:	68bb      	ldr	r3, [r7, #8]
90007b88:	4013      	ands	r3, r2
90007b8a:	68ba      	ldr	r2, [r7, #8]
90007b8c:	429a      	cmp	r2, r3
90007b8e:	bf0c      	ite	eq
90007b90:	2301      	moveq	r3, #1
90007b92:	2300      	movne	r3, #0
90007b94:	b2db      	uxtb	r3, r3
90007b96:	461a      	mov	r2, r3
90007b98:	79fb      	ldrb	r3, [r7, #7]
90007b9a:	429a      	cmp	r2, r3
90007b9c:	d0cd      	beq.n	90007b3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
90007b9e:	2300      	movs	r3, #0
}
90007ba0:	4618      	mov	r0, r3
90007ba2:	3710      	adds	r7, #16
90007ba4:	46bd      	mov	sp, r7
90007ba6:	bd80      	pop	{r7, pc}

90007ba8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90007ba8:	b580      	push	{r7, lr}
90007baa:	b084      	sub	sp, #16
90007bac:	af00      	add	r7, sp, #0
90007bae:	60f8      	str	r0, [r7, #12]
90007bb0:	60b9      	str	r1, [r7, #8]
90007bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007bb4:	e02c      	b.n	90007c10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90007bb6:	687a      	ldr	r2, [r7, #4]
90007bb8:	68b9      	ldr	r1, [r7, #8]
90007bba:	68f8      	ldr	r0, [r7, #12]
90007bbc:	f000 f8ea 	bl	90007d94 <I2C_IsErrorOccurred>
90007bc0:	4603      	mov	r3, r0
90007bc2:	2b00      	cmp	r3, #0
90007bc4:	d001      	beq.n	90007bca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90007bc6:	2301      	movs	r3, #1
90007bc8:	e02a      	b.n	90007c20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90007bca:	68bb      	ldr	r3, [r7, #8]
90007bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
90007bd0:	d01e      	beq.n	90007c10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007bd2:	f7fb ffcd 	bl	90003b70 <HAL_GetTick>
90007bd6:	4602      	mov	r2, r0
90007bd8:	687b      	ldr	r3, [r7, #4]
90007bda:	1ad3      	subs	r3, r2, r3
90007bdc:	68ba      	ldr	r2, [r7, #8]
90007bde:	429a      	cmp	r2, r3
90007be0:	d302      	bcc.n	90007be8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90007be2:	68bb      	ldr	r3, [r7, #8]
90007be4:	2b00      	cmp	r3, #0
90007be6:	d113      	bne.n	90007c10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007be8:	68fb      	ldr	r3, [r7, #12]
90007bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007bec:	f043 0220 	orr.w	r2, r3, #32
90007bf0:	68fb      	ldr	r3, [r7, #12]
90007bf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
90007bf4:	68fb      	ldr	r3, [r7, #12]
90007bf6:	2220      	movs	r2, #32
90007bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90007bfc:	68fb      	ldr	r3, [r7, #12]
90007bfe:	2200      	movs	r2, #0
90007c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90007c04:	68fb      	ldr	r3, [r7, #12]
90007c06:	2200      	movs	r2, #0
90007c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
90007c0c:	2301      	movs	r3, #1
90007c0e:	e007      	b.n	90007c20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007c10:	68fb      	ldr	r3, [r7, #12]
90007c12:	681b      	ldr	r3, [r3, #0]
90007c14:	699b      	ldr	r3, [r3, #24]
90007c16:	f003 0302 	and.w	r3, r3, #2
90007c1a:	2b02      	cmp	r3, #2
90007c1c:	d1cb      	bne.n	90007bb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90007c1e:	2300      	movs	r3, #0
}
90007c20:	4618      	mov	r0, r3
90007c22:	3710      	adds	r7, #16
90007c24:	46bd      	mov	sp, r7
90007c26:	bd80      	pop	{r7, pc}

90007c28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90007c28:	b580      	push	{r7, lr}
90007c2a:	b084      	sub	sp, #16
90007c2c:	af00      	add	r7, sp, #0
90007c2e:	60f8      	str	r0, [r7, #12]
90007c30:	60b9      	str	r1, [r7, #8]
90007c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007c34:	e028      	b.n	90007c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90007c36:	687a      	ldr	r2, [r7, #4]
90007c38:	68b9      	ldr	r1, [r7, #8]
90007c3a:	68f8      	ldr	r0, [r7, #12]
90007c3c:	f000 f8aa 	bl	90007d94 <I2C_IsErrorOccurred>
90007c40:	4603      	mov	r3, r0
90007c42:	2b00      	cmp	r3, #0
90007c44:	d001      	beq.n	90007c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90007c46:	2301      	movs	r3, #1
90007c48:	e026      	b.n	90007c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007c4a:	f7fb ff91 	bl	90003b70 <HAL_GetTick>
90007c4e:	4602      	mov	r2, r0
90007c50:	687b      	ldr	r3, [r7, #4]
90007c52:	1ad3      	subs	r3, r2, r3
90007c54:	68ba      	ldr	r2, [r7, #8]
90007c56:	429a      	cmp	r2, r3
90007c58:	d302      	bcc.n	90007c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
90007c5a:	68bb      	ldr	r3, [r7, #8]
90007c5c:	2b00      	cmp	r3, #0
90007c5e:	d113      	bne.n	90007c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007c60:	68fb      	ldr	r3, [r7, #12]
90007c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007c64:	f043 0220 	orr.w	r2, r3, #32
90007c68:	68fb      	ldr	r3, [r7, #12]
90007c6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
90007c6c:	68fb      	ldr	r3, [r7, #12]
90007c6e:	2220      	movs	r2, #32
90007c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
90007c74:	68fb      	ldr	r3, [r7, #12]
90007c76:	2200      	movs	r2, #0
90007c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90007c7c:	68fb      	ldr	r3, [r7, #12]
90007c7e:	2200      	movs	r2, #0
90007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
90007c84:	2301      	movs	r3, #1
90007c86:	e007      	b.n	90007c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007c88:	68fb      	ldr	r3, [r7, #12]
90007c8a:	681b      	ldr	r3, [r3, #0]
90007c8c:	699b      	ldr	r3, [r3, #24]
90007c8e:	f003 0320 	and.w	r3, r3, #32
90007c92:	2b20      	cmp	r3, #32
90007c94:	d1cf      	bne.n	90007c36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
90007c96:	2300      	movs	r3, #0
}
90007c98:	4618      	mov	r0, r3
90007c9a:	3710      	adds	r7, #16
90007c9c:	46bd      	mov	sp, r7
90007c9e:	bd80      	pop	{r7, pc}

90007ca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90007ca0:	b580      	push	{r7, lr}
90007ca2:	b084      	sub	sp, #16
90007ca4:	af00      	add	r7, sp, #0
90007ca6:	60f8      	str	r0, [r7, #12]
90007ca8:	60b9      	str	r1, [r7, #8]
90007caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
90007cac:	e064      	b.n	90007d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90007cae:	687a      	ldr	r2, [r7, #4]
90007cb0:	68b9      	ldr	r1, [r7, #8]
90007cb2:	68f8      	ldr	r0, [r7, #12]
90007cb4:	f000 f86e 	bl	90007d94 <I2C_IsErrorOccurred>
90007cb8:	4603      	mov	r3, r0
90007cba:	2b00      	cmp	r3, #0
90007cbc:	d001      	beq.n	90007cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90007cbe:	2301      	movs	r3, #1
90007cc0:	e062      	b.n	90007d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
90007cc2:	68fb      	ldr	r3, [r7, #12]
90007cc4:	681b      	ldr	r3, [r3, #0]
90007cc6:	699b      	ldr	r3, [r3, #24]
90007cc8:	f003 0320 	and.w	r3, r3, #32
90007ccc:	2b20      	cmp	r3, #32
90007cce:	d138      	bne.n	90007d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
90007cd0:	68fb      	ldr	r3, [r7, #12]
90007cd2:	681b      	ldr	r3, [r3, #0]
90007cd4:	699b      	ldr	r3, [r3, #24]
90007cd6:	f003 0304 	and.w	r3, r3, #4
90007cda:	2b04      	cmp	r3, #4
90007cdc:	d105      	bne.n	90007cea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
90007cde:	68fb      	ldr	r3, [r7, #12]
90007ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90007ce2:	2b00      	cmp	r3, #0
90007ce4:	d001      	beq.n	90007cea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
90007ce6:	2300      	movs	r3, #0
90007ce8:	e04e      	b.n	90007d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90007cea:	68fb      	ldr	r3, [r7, #12]
90007cec:	681b      	ldr	r3, [r3, #0]
90007cee:	699b      	ldr	r3, [r3, #24]
90007cf0:	f003 0310 	and.w	r3, r3, #16
90007cf4:	2b10      	cmp	r3, #16
90007cf6:	d107      	bne.n	90007d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007cf8:	68fb      	ldr	r3, [r7, #12]
90007cfa:	681b      	ldr	r3, [r3, #0]
90007cfc:	2210      	movs	r2, #16
90007cfe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
90007d00:	68fb      	ldr	r3, [r7, #12]
90007d02:	2204      	movs	r2, #4
90007d04:	645a      	str	r2, [r3, #68]	; 0x44
90007d06:	e002      	b.n	90007d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007d08:	68fb      	ldr	r3, [r7, #12]
90007d0a:	2200      	movs	r2, #0
90007d0c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007d0e:	68fb      	ldr	r3, [r7, #12]
90007d10:	681b      	ldr	r3, [r3, #0]
90007d12:	2220      	movs	r2, #32
90007d14:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
90007d16:	68fb      	ldr	r3, [r7, #12]
90007d18:	681b      	ldr	r3, [r3, #0]
90007d1a:	6859      	ldr	r1, [r3, #4]
90007d1c:	68fb      	ldr	r3, [r7, #12]
90007d1e:	681a      	ldr	r2, [r3, #0]
90007d20:	4b1b      	ldr	r3, [pc, #108]	; (90007d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
90007d22:	400b      	ands	r3, r1
90007d24:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
90007d26:	68fb      	ldr	r3, [r7, #12]
90007d28:	2220      	movs	r2, #32
90007d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90007d2e:	68fb      	ldr	r3, [r7, #12]
90007d30:	2200      	movs	r2, #0
90007d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
90007d36:	68fb      	ldr	r3, [r7, #12]
90007d38:	2200      	movs	r2, #0
90007d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
90007d3e:	2301      	movs	r3, #1
90007d40:	e022      	b.n	90007d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007d42:	f7fb ff15 	bl	90003b70 <HAL_GetTick>
90007d46:	4602      	mov	r2, r0
90007d48:	687b      	ldr	r3, [r7, #4]
90007d4a:	1ad3      	subs	r3, r2, r3
90007d4c:	68ba      	ldr	r2, [r7, #8]
90007d4e:	429a      	cmp	r2, r3
90007d50:	d302      	bcc.n	90007d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
90007d52:	68bb      	ldr	r3, [r7, #8]
90007d54:	2b00      	cmp	r3, #0
90007d56:	d10f      	bne.n	90007d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007d58:	68fb      	ldr	r3, [r7, #12]
90007d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007d5c:	f043 0220 	orr.w	r2, r3, #32
90007d60:	68fb      	ldr	r3, [r7, #12]
90007d62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
90007d64:	68fb      	ldr	r3, [r7, #12]
90007d66:	2220      	movs	r2, #32
90007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90007d6c:	68fb      	ldr	r3, [r7, #12]
90007d6e:	2200      	movs	r2, #0
90007d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
90007d74:	2301      	movs	r3, #1
90007d76:	e007      	b.n	90007d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
90007d78:	68fb      	ldr	r3, [r7, #12]
90007d7a:	681b      	ldr	r3, [r3, #0]
90007d7c:	699b      	ldr	r3, [r3, #24]
90007d7e:	f003 0304 	and.w	r3, r3, #4
90007d82:	2b04      	cmp	r3, #4
90007d84:	d193      	bne.n	90007cae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
90007d86:	2300      	movs	r3, #0
}
90007d88:	4618      	mov	r0, r3
90007d8a:	3710      	adds	r7, #16
90007d8c:	46bd      	mov	sp, r7
90007d8e:	bd80      	pop	{r7, pc}
90007d90:	fe00e800 	.word	0xfe00e800

90007d94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90007d94:	b580      	push	{r7, lr}
90007d96:	b08a      	sub	sp, #40	; 0x28
90007d98:	af00      	add	r7, sp, #0
90007d9a:	60f8      	str	r0, [r7, #12]
90007d9c:	60b9      	str	r1, [r7, #8]
90007d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
90007da0:	2300      	movs	r3, #0
90007da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90007da6:	68fb      	ldr	r3, [r7, #12]
90007da8:	681b      	ldr	r3, [r3, #0]
90007daa:	699b      	ldr	r3, [r3, #24]
90007dac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
90007dae:	2300      	movs	r3, #0
90007db0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
90007db2:	687b      	ldr	r3, [r7, #4]
90007db4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90007db6:	69bb      	ldr	r3, [r7, #24]
90007db8:	f003 0310 	and.w	r3, r3, #16
90007dbc:	2b00      	cmp	r3, #0
90007dbe:	d075      	beq.n	90007eac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007dc0:	68fb      	ldr	r3, [r7, #12]
90007dc2:	681b      	ldr	r3, [r3, #0]
90007dc4:	2210      	movs	r2, #16
90007dc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007dc8:	e056      	b.n	90007e78 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
90007dca:	68bb      	ldr	r3, [r7, #8]
90007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
90007dd0:	d052      	beq.n	90007e78 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007dd2:	f7fb fecd 	bl	90003b70 <HAL_GetTick>
90007dd6:	4602      	mov	r2, r0
90007dd8:	69fb      	ldr	r3, [r7, #28]
90007dda:	1ad3      	subs	r3, r2, r3
90007ddc:	68ba      	ldr	r2, [r7, #8]
90007dde:	429a      	cmp	r2, r3
90007de0:	d302      	bcc.n	90007de8 <I2C_IsErrorOccurred+0x54>
90007de2:	68bb      	ldr	r3, [r7, #8]
90007de4:	2b00      	cmp	r3, #0
90007de6:	d147      	bne.n	90007e78 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007de8:	68fb      	ldr	r3, [r7, #12]
90007dea:	681b      	ldr	r3, [r3, #0]
90007dec:	685b      	ldr	r3, [r3, #4]
90007dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90007df2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
90007df4:	68fb      	ldr	r3, [r7, #12]
90007df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
90007dfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007dfc:	68fb      	ldr	r3, [r7, #12]
90007dfe:	681b      	ldr	r3, [r3, #0]
90007e00:	699b      	ldr	r3, [r3, #24]
90007e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90007e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90007e0a:	d12e      	bne.n	90007e6a <I2C_IsErrorOccurred+0xd6>
90007e0c:	697b      	ldr	r3, [r7, #20]
90007e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90007e12:	d02a      	beq.n	90007e6a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
90007e14:	7cfb      	ldrb	r3, [r7, #19]
90007e16:	2b20      	cmp	r3, #32
90007e18:	d027      	beq.n	90007e6a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007e1a:	68fb      	ldr	r3, [r7, #12]
90007e1c:	681b      	ldr	r3, [r3, #0]
90007e1e:	685a      	ldr	r2, [r3, #4]
90007e20:	68fb      	ldr	r3, [r7, #12]
90007e22:	681b      	ldr	r3, [r3, #0]
90007e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90007e28:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90007e2a:	f7fb fea1 	bl	90003b70 <HAL_GetTick>
90007e2e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007e30:	e01b      	b.n	90007e6a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007e32:	f7fb fe9d 	bl	90003b70 <HAL_GetTick>
90007e36:	4602      	mov	r2, r0
90007e38:	69fb      	ldr	r3, [r7, #28]
90007e3a:	1ad3      	subs	r3, r2, r3
90007e3c:	2b19      	cmp	r3, #25
90007e3e:	d914      	bls.n	90007e6a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007e40:	68fb      	ldr	r3, [r7, #12]
90007e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007e44:	f043 0220 	orr.w	r2, r3, #32
90007e48:	68fb      	ldr	r3, [r7, #12]
90007e4a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
90007e4c:	68fb      	ldr	r3, [r7, #12]
90007e4e:	2220      	movs	r2, #32
90007e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
90007e54:	68fb      	ldr	r3, [r7, #12]
90007e56:	2200      	movs	r2, #0
90007e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
90007e5c:	68fb      	ldr	r3, [r7, #12]
90007e5e:	2200      	movs	r2, #0
90007e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
90007e64:	2301      	movs	r3, #1
90007e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007e6a:	68fb      	ldr	r3, [r7, #12]
90007e6c:	681b      	ldr	r3, [r3, #0]
90007e6e:	699b      	ldr	r3, [r3, #24]
90007e70:	f003 0320 	and.w	r3, r3, #32
90007e74:	2b20      	cmp	r3, #32
90007e76:	d1dc      	bne.n	90007e32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007e78:	68fb      	ldr	r3, [r7, #12]
90007e7a:	681b      	ldr	r3, [r3, #0]
90007e7c:	699b      	ldr	r3, [r3, #24]
90007e7e:	f003 0320 	and.w	r3, r3, #32
90007e82:	2b20      	cmp	r3, #32
90007e84:	d003      	beq.n	90007e8e <I2C_IsErrorOccurred+0xfa>
90007e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90007e8a:	2b00      	cmp	r3, #0
90007e8c:	d09d      	beq.n	90007dca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90007e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90007e92:	2b00      	cmp	r3, #0
90007e94:	d103      	bne.n	90007e9e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007e96:	68fb      	ldr	r3, [r7, #12]
90007e98:	681b      	ldr	r3, [r3, #0]
90007e9a:	2220      	movs	r2, #32
90007e9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90007e9e:	6a3b      	ldr	r3, [r7, #32]
90007ea0:	f043 0304 	orr.w	r3, r3, #4
90007ea4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90007ea6:	2301      	movs	r3, #1
90007ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90007eac:	68fb      	ldr	r3, [r7, #12]
90007eae:	681b      	ldr	r3, [r3, #0]
90007eb0:	699b      	ldr	r3, [r3, #24]
90007eb2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90007eb4:	69bb      	ldr	r3, [r7, #24]
90007eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
90007eba:	2b00      	cmp	r3, #0
90007ebc:	d00b      	beq.n	90007ed6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90007ebe:	6a3b      	ldr	r3, [r7, #32]
90007ec0:	f043 0301 	orr.w	r3, r3, #1
90007ec4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007ec6:	68fb      	ldr	r3, [r7, #12]
90007ec8:	681b      	ldr	r3, [r3, #0]
90007eca:	f44f 7280 	mov.w	r2, #256	; 0x100
90007ece:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90007ed0:	2301      	movs	r3, #1
90007ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007ed6:	69bb      	ldr	r3, [r7, #24]
90007ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90007edc:	2b00      	cmp	r3, #0
90007ede:	d00b      	beq.n	90007ef8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
90007ee0:	6a3b      	ldr	r3, [r7, #32]
90007ee2:	f043 0308 	orr.w	r3, r3, #8
90007ee6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007ee8:	68fb      	ldr	r3, [r7, #12]
90007eea:	681b      	ldr	r3, [r3, #0]
90007eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
90007ef0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90007ef2:	2301      	movs	r3, #1
90007ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007ef8:	69bb      	ldr	r3, [r7, #24]
90007efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
90007efe:	2b00      	cmp	r3, #0
90007f00:	d00b      	beq.n	90007f1a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
90007f02:	6a3b      	ldr	r3, [r7, #32]
90007f04:	f043 0302 	orr.w	r3, r3, #2
90007f08:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007f0a:	68fb      	ldr	r3, [r7, #12]
90007f0c:	681b      	ldr	r3, [r3, #0]
90007f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
90007f12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90007f14:	2301      	movs	r3, #1
90007f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
90007f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90007f1e:	2b00      	cmp	r3, #0
90007f20:	d01c      	beq.n	90007f5c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
90007f22:	68f8      	ldr	r0, [r7, #12]
90007f24:	f7ff fddc 	bl	90007ae0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90007f28:	68fb      	ldr	r3, [r7, #12]
90007f2a:	681b      	ldr	r3, [r3, #0]
90007f2c:	6859      	ldr	r1, [r3, #4]
90007f2e:	68fb      	ldr	r3, [r7, #12]
90007f30:	681a      	ldr	r2, [r3, #0]
90007f32:	4b0d      	ldr	r3, [pc, #52]	; (90007f68 <I2C_IsErrorOccurred+0x1d4>)
90007f34:	400b      	ands	r3, r1
90007f36:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
90007f38:	68fb      	ldr	r3, [r7, #12]
90007f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90007f3c:	6a3b      	ldr	r3, [r7, #32]
90007f3e:	431a      	orrs	r2, r3
90007f40:	68fb      	ldr	r3, [r7, #12]
90007f42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90007f44:	68fb      	ldr	r3, [r7, #12]
90007f46:	2220      	movs	r2, #32
90007f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007f4c:	68fb      	ldr	r3, [r7, #12]
90007f4e:	2200      	movs	r2, #0
90007f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007f54:	68fb      	ldr	r3, [r7, #12]
90007f56:	2200      	movs	r2, #0
90007f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
90007f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
90007f60:	4618      	mov	r0, r3
90007f62:	3728      	adds	r7, #40	; 0x28
90007f64:	46bd      	mov	sp, r7
90007f66:	bd80      	pop	{r7, pc}
90007f68:	fe00e800 	.word	0xfe00e800

90007f6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90007f6c:	b480      	push	{r7}
90007f6e:	b087      	sub	sp, #28
90007f70:	af00      	add	r7, sp, #0
90007f72:	60f8      	str	r0, [r7, #12]
90007f74:	607b      	str	r3, [r7, #4]
90007f76:	460b      	mov	r3, r1
90007f78:	817b      	strh	r3, [r7, #10]
90007f7a:	4613      	mov	r3, r2
90007f7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007f7e:	897b      	ldrh	r3, [r7, #10]
90007f80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007f84:	7a7b      	ldrb	r3, [r7, #9]
90007f86:	041b      	lsls	r3, r3, #16
90007f88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007f8c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007f8e:	687b      	ldr	r3, [r7, #4]
90007f90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007f92:	6a3b      	ldr	r3, [r7, #32]
90007f94:	4313      	orrs	r3, r2
90007f96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90007f9a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90007f9c:	68fb      	ldr	r3, [r7, #12]
90007f9e:	681b      	ldr	r3, [r3, #0]
90007fa0:	685a      	ldr	r2, [r3, #4]
90007fa2:	6a3b      	ldr	r3, [r7, #32]
90007fa4:	0d5b      	lsrs	r3, r3, #21
90007fa6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
90007faa:	4b08      	ldr	r3, [pc, #32]	; (90007fcc <I2C_TransferConfig+0x60>)
90007fac:	430b      	orrs	r3, r1
90007fae:	43db      	mvns	r3, r3
90007fb0:	ea02 0103 	and.w	r1, r2, r3
90007fb4:	68fb      	ldr	r3, [r7, #12]
90007fb6:	681b      	ldr	r3, [r3, #0]
90007fb8:	697a      	ldr	r2, [r7, #20]
90007fba:	430a      	orrs	r2, r1
90007fbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90007fbe:	bf00      	nop
90007fc0:	371c      	adds	r7, #28
90007fc2:	46bd      	mov	sp, r7
90007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
90007fc8:	4770      	bx	lr
90007fca:	bf00      	nop
90007fcc:	03ff63ff 	.word	0x03ff63ff

90007fd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90007fd0:	b480      	push	{r7}
90007fd2:	b083      	sub	sp, #12
90007fd4:	af00      	add	r7, sp, #0
90007fd6:	6078      	str	r0, [r7, #4]
90007fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90007fda:	687b      	ldr	r3, [r7, #4]
90007fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90007fe0:	b2db      	uxtb	r3, r3
90007fe2:	2b20      	cmp	r3, #32
90007fe4:	d138      	bne.n	90008058 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90007fe6:	687b      	ldr	r3, [r7, #4]
90007fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90007fec:	2b01      	cmp	r3, #1
90007fee:	d101      	bne.n	90007ff4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
90007ff0:	2302      	movs	r3, #2
90007ff2:	e032      	b.n	9000805a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
90007ff4:	687b      	ldr	r3, [r7, #4]
90007ff6:	2201      	movs	r2, #1
90007ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90007ffc:	687b      	ldr	r3, [r7, #4]
90007ffe:	2224      	movs	r2, #36	; 0x24
90008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008004:	687b      	ldr	r3, [r7, #4]
90008006:	681b      	ldr	r3, [r3, #0]
90008008:	681a      	ldr	r2, [r3, #0]
9000800a:	687b      	ldr	r3, [r7, #4]
9000800c:	681b      	ldr	r3, [r3, #0]
9000800e:	f022 0201 	bic.w	r2, r2, #1
90008012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90008014:	687b      	ldr	r3, [r7, #4]
90008016:	681b      	ldr	r3, [r3, #0]
90008018:	681a      	ldr	r2, [r3, #0]
9000801a:	687b      	ldr	r3, [r7, #4]
9000801c:	681b      	ldr	r3, [r3, #0]
9000801e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90008022:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
90008024:	687b      	ldr	r3, [r7, #4]
90008026:	681b      	ldr	r3, [r3, #0]
90008028:	6819      	ldr	r1, [r3, #0]
9000802a:	687b      	ldr	r3, [r7, #4]
9000802c:	681b      	ldr	r3, [r3, #0]
9000802e:	683a      	ldr	r2, [r7, #0]
90008030:	430a      	orrs	r2, r1
90008032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90008034:	687b      	ldr	r3, [r7, #4]
90008036:	681b      	ldr	r3, [r3, #0]
90008038:	681a      	ldr	r2, [r3, #0]
9000803a:	687b      	ldr	r3, [r7, #4]
9000803c:	681b      	ldr	r3, [r3, #0]
9000803e:	f042 0201 	orr.w	r2, r2, #1
90008042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90008044:	687b      	ldr	r3, [r7, #4]
90008046:	2220      	movs	r2, #32
90008048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000804c:	687b      	ldr	r3, [r7, #4]
9000804e:	2200      	movs	r2, #0
90008050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90008054:	2300      	movs	r3, #0
90008056:	e000      	b.n	9000805a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
90008058:	2302      	movs	r3, #2
  }
}
9000805a:	4618      	mov	r0, r3
9000805c:	370c      	adds	r7, #12
9000805e:	46bd      	mov	sp, r7
90008060:	f85d 7b04 	ldr.w	r7, [sp], #4
90008064:	4770      	bx	lr

90008066 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
90008066:	b480      	push	{r7}
90008068:	b085      	sub	sp, #20
9000806a:	af00      	add	r7, sp, #0
9000806c:	6078      	str	r0, [r7, #4]
9000806e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008070:	687b      	ldr	r3, [r7, #4]
90008072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90008076:	b2db      	uxtb	r3, r3
90008078:	2b20      	cmp	r3, #32
9000807a:	d139      	bne.n	900080f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000807c:	687b      	ldr	r3, [r7, #4]
9000807e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90008082:	2b01      	cmp	r3, #1
90008084:	d101      	bne.n	9000808a <HAL_I2CEx_ConfigDigitalFilter+0x24>
90008086:	2302      	movs	r3, #2
90008088:	e033      	b.n	900080f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000808a:	687b      	ldr	r3, [r7, #4]
9000808c:	2201      	movs	r2, #1
9000808e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90008092:	687b      	ldr	r3, [r7, #4]
90008094:	2224      	movs	r2, #36	; 0x24
90008096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000809a:	687b      	ldr	r3, [r7, #4]
9000809c:	681b      	ldr	r3, [r3, #0]
9000809e:	681a      	ldr	r2, [r3, #0]
900080a0:	687b      	ldr	r3, [r7, #4]
900080a2:	681b      	ldr	r3, [r3, #0]
900080a4:	f022 0201 	bic.w	r2, r2, #1
900080a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
900080aa:	687b      	ldr	r3, [r7, #4]
900080ac:	681b      	ldr	r3, [r3, #0]
900080ae:	681b      	ldr	r3, [r3, #0]
900080b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
900080b2:	68fb      	ldr	r3, [r7, #12]
900080b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
900080b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
900080ba:	683b      	ldr	r3, [r7, #0]
900080bc:	021b      	lsls	r3, r3, #8
900080be:	68fa      	ldr	r2, [r7, #12]
900080c0:	4313      	orrs	r3, r2
900080c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
900080c4:	687b      	ldr	r3, [r7, #4]
900080c6:	681b      	ldr	r3, [r3, #0]
900080c8:	68fa      	ldr	r2, [r7, #12]
900080ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900080cc:	687b      	ldr	r3, [r7, #4]
900080ce:	681b      	ldr	r3, [r3, #0]
900080d0:	681a      	ldr	r2, [r3, #0]
900080d2:	687b      	ldr	r3, [r7, #4]
900080d4:	681b      	ldr	r3, [r3, #0]
900080d6:	f042 0201 	orr.w	r2, r2, #1
900080da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900080dc:	687b      	ldr	r3, [r7, #4]
900080de:	2220      	movs	r2, #32
900080e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900080e4:	687b      	ldr	r3, [r7, #4]
900080e6:	2200      	movs	r2, #0
900080e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
900080ec:	2300      	movs	r3, #0
900080ee:	e000      	b.n	900080f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900080f0:	2302      	movs	r3, #2
  }
}
900080f2:	4618      	mov	r0, r3
900080f4:	3714      	adds	r7, #20
900080f6:	46bd      	mov	sp, r7
900080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900080fc:	4770      	bx	lr
	...

90008100 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
90008100:	b480      	push	{r7}
90008102:	b085      	sub	sp, #20
90008104:	af00      	add	r7, sp, #0
90008106:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90008108:	4b0d      	ldr	r3, [pc, #52]	; (90008140 <HAL_I2CEx_EnableFastModePlus+0x40>)
9000810a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
9000810e:	4a0c      	ldr	r2, [pc, #48]	; (90008140 <HAL_I2CEx_EnableFastModePlus+0x40>)
90008110:	f043 0302 	orr.w	r3, r3, #2
90008114:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90008118:	4b09      	ldr	r3, [pc, #36]	; (90008140 <HAL_I2CEx_EnableFastModePlus+0x40>)
9000811a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
9000811e:	f003 0302 	and.w	r3, r3, #2
90008122:	60fb      	str	r3, [r7, #12]
90008124:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
90008126:	4b07      	ldr	r3, [pc, #28]	; (90008144 <HAL_I2CEx_EnableFastModePlus+0x44>)
90008128:	685a      	ldr	r2, [r3, #4]
9000812a:	4906      	ldr	r1, [pc, #24]	; (90008144 <HAL_I2CEx_EnableFastModePlus+0x44>)
9000812c:	687b      	ldr	r3, [r7, #4]
9000812e:	4313      	orrs	r3, r2
90008130:	604b      	str	r3, [r1, #4]
}
90008132:	bf00      	nop
90008134:	3714      	adds	r7, #20
90008136:	46bd      	mov	sp, r7
90008138:	f85d 7b04 	ldr.w	r7, [sp], #4
9000813c:	4770      	bx	lr
9000813e:	bf00      	nop
90008140:	58024400 	.word	0x58024400
90008144:	58000400 	.word	0x58000400

90008148 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90008148:	b580      	push	{r7, lr}
9000814a:	b084      	sub	sp, #16
9000814c:	af00      	add	r7, sp, #0
9000814e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90008150:	4b19      	ldr	r3, [pc, #100]	; (900081b8 <HAL_PWREx_ConfigSupply+0x70>)
90008152:	68db      	ldr	r3, [r3, #12]
90008154:	f003 0304 	and.w	r3, r3, #4
90008158:	2b04      	cmp	r3, #4
9000815a:	d00a      	beq.n	90008172 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000815c:	4b16      	ldr	r3, [pc, #88]	; (900081b8 <HAL_PWREx_ConfigSupply+0x70>)
9000815e:	68db      	ldr	r3, [r3, #12]
90008160:	f003 0307 	and.w	r3, r3, #7
90008164:	687a      	ldr	r2, [r7, #4]
90008166:	429a      	cmp	r2, r3
90008168:	d001      	beq.n	9000816e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000816a:	2301      	movs	r3, #1
9000816c:	e01f      	b.n	900081ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
9000816e:	2300      	movs	r3, #0
90008170:	e01d      	b.n	900081ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
90008172:	4b11      	ldr	r3, [pc, #68]	; (900081b8 <HAL_PWREx_ConfigSupply+0x70>)
90008174:	68db      	ldr	r3, [r3, #12]
90008176:	f023 0207 	bic.w	r2, r3, #7
9000817a:	490f      	ldr	r1, [pc, #60]	; (900081b8 <HAL_PWREx_ConfigSupply+0x70>)
9000817c:	687b      	ldr	r3, [r7, #4]
9000817e:	4313      	orrs	r3, r2
90008180:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
90008182:	f7fb fcf5 	bl	90003b70 <HAL_GetTick>
90008186:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90008188:	e009      	b.n	9000819e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000818a:	f7fb fcf1 	bl	90003b70 <HAL_GetTick>
9000818e:	4602      	mov	r2, r0
90008190:	68fb      	ldr	r3, [r7, #12]
90008192:	1ad3      	subs	r3, r2, r3
90008194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90008198:	d901      	bls.n	9000819e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
9000819a:	2301      	movs	r3, #1
9000819c:	e007      	b.n	900081ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000819e:	4b06      	ldr	r3, [pc, #24]	; (900081b8 <HAL_PWREx_ConfigSupply+0x70>)
900081a0:	685b      	ldr	r3, [r3, #4]
900081a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900081a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900081aa:	d1ee      	bne.n	9000818a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
900081ac:	2300      	movs	r3, #0
}
900081ae:	4618      	mov	r0, r3
900081b0:	3710      	adds	r7, #16
900081b2:	46bd      	mov	sp, r7
900081b4:	bd80      	pop	{r7, pc}
900081b6:	bf00      	nop
900081b8:	58024800 	.word	0x58024800

900081bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900081bc:	b580      	push	{r7, lr}
900081be:	b08c      	sub	sp, #48	; 0x30
900081c0:	af00      	add	r7, sp, #0
900081c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
900081c4:	687b      	ldr	r3, [r7, #4]
900081c6:	2b00      	cmp	r3, #0
900081c8:	d102      	bne.n	900081d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
900081ca:	2301      	movs	r3, #1
900081cc:	f000 bc1d 	b.w	90008a0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900081d0:	687b      	ldr	r3, [r7, #4]
900081d2:	681b      	ldr	r3, [r3, #0]
900081d4:	f003 0301 	and.w	r3, r3, #1
900081d8:	2b00      	cmp	r3, #0
900081da:	f000 8087 	beq.w	900082ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900081de:	4b99      	ldr	r3, [pc, #612]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900081e0:	691b      	ldr	r3, [r3, #16]
900081e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
900081e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900081e8:	4b96      	ldr	r3, [pc, #600]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900081ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
900081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900081f0:	2b10      	cmp	r3, #16
900081f2:	d007      	beq.n	90008204 <HAL_RCC_OscConfig+0x48>
900081f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900081f6:	2b18      	cmp	r3, #24
900081f8:	d110      	bne.n	9000821c <HAL_RCC_OscConfig+0x60>
900081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
900081fc:	f003 0303 	and.w	r3, r3, #3
90008200:	2b02      	cmp	r3, #2
90008202:	d10b      	bne.n	9000821c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90008204:	4b8f      	ldr	r3, [pc, #572]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008206:	681b      	ldr	r3, [r3, #0]
90008208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
9000820c:	2b00      	cmp	r3, #0
9000820e:	d06c      	beq.n	900082ea <HAL_RCC_OscConfig+0x12e>
90008210:	687b      	ldr	r3, [r7, #4]
90008212:	685b      	ldr	r3, [r3, #4]
90008214:	2b00      	cmp	r3, #0
90008216:	d168      	bne.n	900082ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
90008218:	2301      	movs	r3, #1
9000821a:	e3f6      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000821c:	687b      	ldr	r3, [r7, #4]
9000821e:	685b      	ldr	r3, [r3, #4]
90008220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008224:	d106      	bne.n	90008234 <HAL_RCC_OscConfig+0x78>
90008226:	4b87      	ldr	r3, [pc, #540]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008228:	681b      	ldr	r3, [r3, #0]
9000822a:	4a86      	ldr	r2, [pc, #536]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000822c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90008230:	6013      	str	r3, [r2, #0]
90008232:	e02e      	b.n	90008292 <HAL_RCC_OscConfig+0xd6>
90008234:	687b      	ldr	r3, [r7, #4]
90008236:	685b      	ldr	r3, [r3, #4]
90008238:	2b00      	cmp	r3, #0
9000823a:	d10c      	bne.n	90008256 <HAL_RCC_OscConfig+0x9a>
9000823c:	4b81      	ldr	r3, [pc, #516]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000823e:	681b      	ldr	r3, [r3, #0]
90008240:	4a80      	ldr	r2, [pc, #512]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90008246:	6013      	str	r3, [r2, #0]
90008248:	4b7e      	ldr	r3, [pc, #504]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000824a:	681b      	ldr	r3, [r3, #0]
9000824c:	4a7d      	ldr	r2, [pc, #500]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000824e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90008252:	6013      	str	r3, [r2, #0]
90008254:	e01d      	b.n	90008292 <HAL_RCC_OscConfig+0xd6>
90008256:	687b      	ldr	r3, [r7, #4]
90008258:	685b      	ldr	r3, [r3, #4]
9000825a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000825e:	d10c      	bne.n	9000827a <HAL_RCC_OscConfig+0xbe>
90008260:	4b78      	ldr	r3, [pc, #480]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008262:	681b      	ldr	r3, [r3, #0]
90008264:	4a77      	ldr	r2, [pc, #476]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000826a:	6013      	str	r3, [r2, #0]
9000826c:	4b75      	ldr	r3, [pc, #468]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000826e:	681b      	ldr	r3, [r3, #0]
90008270:	4a74      	ldr	r2, [pc, #464]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90008276:	6013      	str	r3, [r2, #0]
90008278:	e00b      	b.n	90008292 <HAL_RCC_OscConfig+0xd6>
9000827a:	4b72      	ldr	r3, [pc, #456]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000827c:	681b      	ldr	r3, [r3, #0]
9000827e:	4a71      	ldr	r2, [pc, #452]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90008284:	6013      	str	r3, [r2, #0]
90008286:	4b6f      	ldr	r3, [pc, #444]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008288:	681b      	ldr	r3, [r3, #0]
9000828a:	4a6e      	ldr	r2, [pc, #440]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000828c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90008290:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90008292:	687b      	ldr	r3, [r7, #4]
90008294:	685b      	ldr	r3, [r3, #4]
90008296:	2b00      	cmp	r3, #0
90008298:	d013      	beq.n	900082c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000829a:	f7fb fc69 	bl	90003b70 <HAL_GetTick>
9000829e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900082a0:	e008      	b.n	900082b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
900082a2:	f7fb fc65 	bl	90003b70 <HAL_GetTick>
900082a6:	4602      	mov	r2, r0
900082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900082aa:	1ad3      	subs	r3, r2, r3
900082ac:	2b64      	cmp	r3, #100	; 0x64
900082ae:	d901      	bls.n	900082b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
900082b0:	2303      	movs	r3, #3
900082b2:	e3aa      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900082b4:	4b63      	ldr	r3, [pc, #396]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900082b6:	681b      	ldr	r3, [r3, #0]
900082b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900082bc:	2b00      	cmp	r3, #0
900082be:	d0f0      	beq.n	900082a2 <HAL_RCC_OscConfig+0xe6>
900082c0:	e014      	b.n	900082ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900082c2:	f7fb fc55 	bl	90003b70 <HAL_GetTick>
900082c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900082c8:	e008      	b.n	900082dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
900082ca:	f7fb fc51 	bl	90003b70 <HAL_GetTick>
900082ce:	4602      	mov	r2, r0
900082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900082d2:	1ad3      	subs	r3, r2, r3
900082d4:	2b64      	cmp	r3, #100	; 0x64
900082d6:	d901      	bls.n	900082dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
900082d8:	2303      	movs	r3, #3
900082da:	e396      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900082dc:	4b59      	ldr	r3, [pc, #356]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900082de:	681b      	ldr	r3, [r3, #0]
900082e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900082e4:	2b00      	cmp	r3, #0
900082e6:	d1f0      	bne.n	900082ca <HAL_RCC_OscConfig+0x10e>
900082e8:	e000      	b.n	900082ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900082ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900082ec:	687b      	ldr	r3, [r7, #4]
900082ee:	681b      	ldr	r3, [r3, #0]
900082f0:	f003 0302 	and.w	r3, r3, #2
900082f4:	2b00      	cmp	r3, #0
900082f6:	f000 80cb 	beq.w	90008490 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900082fa:	4b52      	ldr	r3, [pc, #328]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900082fc:	691b      	ldr	r3, [r3, #16]
900082fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
90008302:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90008304:	4b4f      	ldr	r3, [pc, #316]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008308:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000830a:	6a3b      	ldr	r3, [r7, #32]
9000830c:	2b00      	cmp	r3, #0
9000830e:	d007      	beq.n	90008320 <HAL_RCC_OscConfig+0x164>
90008310:	6a3b      	ldr	r3, [r7, #32]
90008312:	2b18      	cmp	r3, #24
90008314:	d156      	bne.n	900083c4 <HAL_RCC_OscConfig+0x208>
90008316:	69fb      	ldr	r3, [r7, #28]
90008318:	f003 0303 	and.w	r3, r3, #3
9000831c:	2b00      	cmp	r3, #0
9000831e:	d151      	bne.n	900083c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90008320:	4b48      	ldr	r3, [pc, #288]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008322:	681b      	ldr	r3, [r3, #0]
90008324:	f003 0304 	and.w	r3, r3, #4
90008328:	2b00      	cmp	r3, #0
9000832a:	d005      	beq.n	90008338 <HAL_RCC_OscConfig+0x17c>
9000832c:	687b      	ldr	r3, [r7, #4]
9000832e:	68db      	ldr	r3, [r3, #12]
90008330:	2b00      	cmp	r3, #0
90008332:	d101      	bne.n	90008338 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
90008334:	2301      	movs	r3, #1
90008336:	e368      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90008338:	4b42      	ldr	r3, [pc, #264]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000833a:	681b      	ldr	r3, [r3, #0]
9000833c:	f023 0219 	bic.w	r2, r3, #25
90008340:	687b      	ldr	r3, [r7, #4]
90008342:	68db      	ldr	r3, [r3, #12]
90008344:	493f      	ldr	r1, [pc, #252]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008346:	4313      	orrs	r3, r2
90008348:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
9000834a:	f7fb fc11 	bl	90003b70 <HAL_GetTick>
9000834e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90008350:	e008      	b.n	90008364 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
90008352:	f7fb fc0d 	bl	90003b70 <HAL_GetTick>
90008356:	4602      	mov	r2, r0
90008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000835a:	1ad3      	subs	r3, r2, r3
9000835c:	2b02      	cmp	r3, #2
9000835e:	d901      	bls.n	90008364 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
90008360:	2303      	movs	r3, #3
90008362:	e352      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90008364:	4b37      	ldr	r3, [pc, #220]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008366:	681b      	ldr	r3, [r3, #0]
90008368:	f003 0304 	and.w	r3, r3, #4
9000836c:	2b00      	cmp	r3, #0
9000836e:	d0f0      	beq.n	90008352 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90008370:	f7fb fc0a 	bl	90003b88 <HAL_GetREVID>
90008374:	4603      	mov	r3, r0
90008376:	f241 0203 	movw	r2, #4099	; 0x1003
9000837a:	4293      	cmp	r3, r2
9000837c:	d817      	bhi.n	900083ae <HAL_RCC_OscConfig+0x1f2>
9000837e:	687b      	ldr	r3, [r7, #4]
90008380:	691b      	ldr	r3, [r3, #16]
90008382:	2b40      	cmp	r3, #64	; 0x40
90008384:	d108      	bne.n	90008398 <HAL_RCC_OscConfig+0x1dc>
90008386:	4b2f      	ldr	r3, [pc, #188]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008388:	685b      	ldr	r3, [r3, #4]
9000838a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000838e:	4a2d      	ldr	r2, [pc, #180]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008394:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90008396:	e07b      	b.n	90008490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90008398:	4b2a      	ldr	r3, [pc, #168]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000839a:	685b      	ldr	r3, [r3, #4]
9000839c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
900083a0:	687b      	ldr	r3, [r7, #4]
900083a2:	691b      	ldr	r3, [r3, #16]
900083a4:	031b      	lsls	r3, r3, #12
900083a6:	4927      	ldr	r1, [pc, #156]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900083a8:	4313      	orrs	r3, r2
900083aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900083ac:	e070      	b.n	90008490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900083ae:	4b25      	ldr	r3, [pc, #148]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900083b0:	685b      	ldr	r3, [r3, #4]
900083b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
900083b6:	687b      	ldr	r3, [r7, #4]
900083b8:	691b      	ldr	r3, [r3, #16]
900083ba:	061b      	lsls	r3, r3, #24
900083bc:	4921      	ldr	r1, [pc, #132]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900083be:	4313      	orrs	r3, r2
900083c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900083c2:	e065      	b.n	90008490 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
900083c4:	687b      	ldr	r3, [r7, #4]
900083c6:	68db      	ldr	r3, [r3, #12]
900083c8:	2b00      	cmp	r3, #0
900083ca:	d048      	beq.n	9000845e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900083cc:	4b1d      	ldr	r3, [pc, #116]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900083ce:	681b      	ldr	r3, [r3, #0]
900083d0:	f023 0219 	bic.w	r2, r3, #25
900083d4:	687b      	ldr	r3, [r7, #4]
900083d6:	68db      	ldr	r3, [r3, #12]
900083d8:	491a      	ldr	r1, [pc, #104]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900083da:	4313      	orrs	r3, r2
900083dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900083de:	f7fb fbc7 	bl	90003b70 <HAL_GetTick>
900083e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900083e4:	e008      	b.n	900083f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
900083e6:	f7fb fbc3 	bl	90003b70 <HAL_GetTick>
900083ea:	4602      	mov	r2, r0
900083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900083ee:	1ad3      	subs	r3, r2, r3
900083f0:	2b02      	cmp	r3, #2
900083f2:	d901      	bls.n	900083f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
900083f4:	2303      	movs	r3, #3
900083f6:	e308      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900083f8:	4b12      	ldr	r3, [pc, #72]	; (90008444 <HAL_RCC_OscConfig+0x288>)
900083fa:	681b      	ldr	r3, [r3, #0]
900083fc:	f003 0304 	and.w	r3, r3, #4
90008400:	2b00      	cmp	r3, #0
90008402:	d0f0      	beq.n	900083e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90008404:	f7fb fbc0 	bl	90003b88 <HAL_GetREVID>
90008408:	4603      	mov	r3, r0
9000840a:	f241 0203 	movw	r2, #4099	; 0x1003
9000840e:	4293      	cmp	r3, r2
90008410:	d81a      	bhi.n	90008448 <HAL_RCC_OscConfig+0x28c>
90008412:	687b      	ldr	r3, [r7, #4]
90008414:	691b      	ldr	r3, [r3, #16]
90008416:	2b40      	cmp	r3, #64	; 0x40
90008418:	d108      	bne.n	9000842c <HAL_RCC_OscConfig+0x270>
9000841a:	4b0a      	ldr	r3, [pc, #40]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000841c:	685b      	ldr	r3, [r3, #4]
9000841e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90008422:	4a08      	ldr	r2, [pc, #32]	; (90008444 <HAL_RCC_OscConfig+0x288>)
90008424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008428:	6053      	str	r3, [r2, #4]
9000842a:	e031      	b.n	90008490 <HAL_RCC_OscConfig+0x2d4>
9000842c:	4b05      	ldr	r3, [pc, #20]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000842e:	685b      	ldr	r3, [r3, #4]
90008430:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90008434:	687b      	ldr	r3, [r7, #4]
90008436:	691b      	ldr	r3, [r3, #16]
90008438:	031b      	lsls	r3, r3, #12
9000843a:	4902      	ldr	r1, [pc, #8]	; (90008444 <HAL_RCC_OscConfig+0x288>)
9000843c:	4313      	orrs	r3, r2
9000843e:	604b      	str	r3, [r1, #4]
90008440:	e026      	b.n	90008490 <HAL_RCC_OscConfig+0x2d4>
90008442:	bf00      	nop
90008444:	58024400 	.word	0x58024400
90008448:	4b9a      	ldr	r3, [pc, #616]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000844a:	685b      	ldr	r3, [r3, #4]
9000844c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90008450:	687b      	ldr	r3, [r7, #4]
90008452:	691b      	ldr	r3, [r3, #16]
90008454:	061b      	lsls	r3, r3, #24
90008456:	4997      	ldr	r1, [pc, #604]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008458:	4313      	orrs	r3, r2
9000845a:	604b      	str	r3, [r1, #4]
9000845c:	e018      	b.n	90008490 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
9000845e:	4b95      	ldr	r3, [pc, #596]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008460:	681b      	ldr	r3, [r3, #0]
90008462:	4a94      	ldr	r2, [pc, #592]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008464:	f023 0301 	bic.w	r3, r3, #1
90008468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000846a:	f7fb fb81 	bl	90003b70 <HAL_GetTick>
9000846e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90008470:	e008      	b.n	90008484 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
90008472:	f7fb fb7d 	bl	90003b70 <HAL_GetTick>
90008476:	4602      	mov	r2, r0
90008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000847a:	1ad3      	subs	r3, r2, r3
9000847c:	2b02      	cmp	r3, #2
9000847e:	d901      	bls.n	90008484 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90008480:	2303      	movs	r3, #3
90008482:	e2c2      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90008484:	4b8b      	ldr	r3, [pc, #556]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008486:	681b      	ldr	r3, [r3, #0]
90008488:	f003 0304 	and.w	r3, r3, #4
9000848c:	2b00      	cmp	r3, #0
9000848e:	d1f0      	bne.n	90008472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90008490:	687b      	ldr	r3, [r7, #4]
90008492:	681b      	ldr	r3, [r3, #0]
90008494:	f003 0310 	and.w	r3, r3, #16
90008498:	2b00      	cmp	r3, #0
9000849a:	f000 80a9 	beq.w	900085f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000849e:	4b85      	ldr	r3, [pc, #532]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900084a0:	691b      	ldr	r3, [r3, #16]
900084a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
900084a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900084a8:	4b82      	ldr	r3, [pc, #520]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900084ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
900084ae:	69bb      	ldr	r3, [r7, #24]
900084b0:	2b08      	cmp	r3, #8
900084b2:	d007      	beq.n	900084c4 <HAL_RCC_OscConfig+0x308>
900084b4:	69bb      	ldr	r3, [r7, #24]
900084b6:	2b18      	cmp	r3, #24
900084b8:	d13a      	bne.n	90008530 <HAL_RCC_OscConfig+0x374>
900084ba:	697b      	ldr	r3, [r7, #20]
900084bc:	f003 0303 	and.w	r3, r3, #3
900084c0:	2b01      	cmp	r3, #1
900084c2:	d135      	bne.n	90008530 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900084c4:	4b7b      	ldr	r3, [pc, #492]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900084c6:	681b      	ldr	r3, [r3, #0]
900084c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
900084cc:	2b00      	cmp	r3, #0
900084ce:	d005      	beq.n	900084dc <HAL_RCC_OscConfig+0x320>
900084d0:	687b      	ldr	r3, [r7, #4]
900084d2:	69db      	ldr	r3, [r3, #28]
900084d4:	2b80      	cmp	r3, #128	; 0x80
900084d6:	d001      	beq.n	900084dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
900084d8:	2301      	movs	r3, #1
900084da:	e296      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900084dc:	f7fb fb54 	bl	90003b88 <HAL_GetREVID>
900084e0:	4603      	mov	r3, r0
900084e2:	f241 0203 	movw	r2, #4099	; 0x1003
900084e6:	4293      	cmp	r3, r2
900084e8:	d817      	bhi.n	9000851a <HAL_RCC_OscConfig+0x35e>
900084ea:	687b      	ldr	r3, [r7, #4]
900084ec:	6a1b      	ldr	r3, [r3, #32]
900084ee:	2b20      	cmp	r3, #32
900084f0:	d108      	bne.n	90008504 <HAL_RCC_OscConfig+0x348>
900084f2:	4b70      	ldr	r3, [pc, #448]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900084f4:	685b      	ldr	r3, [r3, #4]
900084f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
900084fa:	4a6e      	ldr	r2, [pc, #440]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900084fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90008500:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90008502:	e075      	b.n	900085f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90008504:	4b6b      	ldr	r3, [pc, #428]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008506:	685b      	ldr	r3, [r3, #4]
90008508:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
9000850c:	687b      	ldr	r3, [r7, #4]
9000850e:	6a1b      	ldr	r3, [r3, #32]
90008510:	069b      	lsls	r3, r3, #26
90008512:	4968      	ldr	r1, [pc, #416]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008514:	4313      	orrs	r3, r2
90008516:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90008518:	e06a      	b.n	900085f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000851a:	4b66      	ldr	r3, [pc, #408]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000851c:	68db      	ldr	r3, [r3, #12]
9000851e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90008522:	687b      	ldr	r3, [r7, #4]
90008524:	6a1b      	ldr	r3, [r3, #32]
90008526:	061b      	lsls	r3, r3, #24
90008528:	4962      	ldr	r1, [pc, #392]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000852a:	4313      	orrs	r3, r2
9000852c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000852e:	e05f      	b.n	900085f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
90008530:	687b      	ldr	r3, [r7, #4]
90008532:	69db      	ldr	r3, [r3, #28]
90008534:	2b00      	cmp	r3, #0
90008536:	d042      	beq.n	900085be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90008538:	4b5e      	ldr	r3, [pc, #376]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000853a:	681b      	ldr	r3, [r3, #0]
9000853c:	4a5d      	ldr	r2, [pc, #372]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000853e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008544:	f7fb fb14 	bl	90003b70 <HAL_GetTick>
90008548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000854a:	e008      	b.n	9000855e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
9000854c:	f7fb fb10 	bl	90003b70 <HAL_GetTick>
90008550:	4602      	mov	r2, r0
90008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008554:	1ad3      	subs	r3, r2, r3
90008556:	2b02      	cmp	r3, #2
90008558:	d901      	bls.n	9000855e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
9000855a:	2303      	movs	r3, #3
9000855c:	e255      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000855e:	4b55      	ldr	r3, [pc, #340]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008560:	681b      	ldr	r3, [r3, #0]
90008562:	f403 7380 	and.w	r3, r3, #256	; 0x100
90008566:	2b00      	cmp	r3, #0
90008568:	d0f0      	beq.n	9000854c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000856a:	f7fb fb0d 	bl	90003b88 <HAL_GetREVID>
9000856e:	4603      	mov	r3, r0
90008570:	f241 0203 	movw	r2, #4099	; 0x1003
90008574:	4293      	cmp	r3, r2
90008576:	d817      	bhi.n	900085a8 <HAL_RCC_OscConfig+0x3ec>
90008578:	687b      	ldr	r3, [r7, #4]
9000857a:	6a1b      	ldr	r3, [r3, #32]
9000857c:	2b20      	cmp	r3, #32
9000857e:	d108      	bne.n	90008592 <HAL_RCC_OscConfig+0x3d6>
90008580:	4b4c      	ldr	r3, [pc, #304]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008582:	685b      	ldr	r3, [r3, #4]
90008584:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90008588:	4a4a      	ldr	r2, [pc, #296]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000858a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000858e:	6053      	str	r3, [r2, #4]
90008590:	e02e      	b.n	900085f0 <HAL_RCC_OscConfig+0x434>
90008592:	4b48      	ldr	r3, [pc, #288]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008594:	685b      	ldr	r3, [r3, #4]
90008596:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
9000859a:	687b      	ldr	r3, [r7, #4]
9000859c:	6a1b      	ldr	r3, [r3, #32]
9000859e:	069b      	lsls	r3, r3, #26
900085a0:	4944      	ldr	r1, [pc, #272]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900085a2:	4313      	orrs	r3, r2
900085a4:	604b      	str	r3, [r1, #4]
900085a6:	e023      	b.n	900085f0 <HAL_RCC_OscConfig+0x434>
900085a8:	4b42      	ldr	r3, [pc, #264]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900085aa:	68db      	ldr	r3, [r3, #12]
900085ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
900085b0:	687b      	ldr	r3, [r7, #4]
900085b2:	6a1b      	ldr	r3, [r3, #32]
900085b4:	061b      	lsls	r3, r3, #24
900085b6:	493f      	ldr	r1, [pc, #252]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900085b8:	4313      	orrs	r3, r2
900085ba:	60cb      	str	r3, [r1, #12]
900085bc:	e018      	b.n	900085f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
900085be:	4b3d      	ldr	r3, [pc, #244]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900085c0:	681b      	ldr	r3, [r3, #0]
900085c2:	4a3c      	ldr	r2, [pc, #240]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900085c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900085c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900085ca:	f7fb fad1 	bl	90003b70 <HAL_GetTick>
900085ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900085d0:	e008      	b.n	900085e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
900085d2:	f7fb facd 	bl	90003b70 <HAL_GetTick>
900085d6:	4602      	mov	r2, r0
900085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900085da:	1ad3      	subs	r3, r2, r3
900085dc:	2b02      	cmp	r3, #2
900085de:	d901      	bls.n	900085e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
900085e0:	2303      	movs	r3, #3
900085e2:	e212      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900085e4:	4b33      	ldr	r3, [pc, #204]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900085e6:	681b      	ldr	r3, [r3, #0]
900085e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
900085ec:	2b00      	cmp	r3, #0
900085ee:	d1f0      	bne.n	900085d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900085f0:	687b      	ldr	r3, [r7, #4]
900085f2:	681b      	ldr	r3, [r3, #0]
900085f4:	f003 0308 	and.w	r3, r3, #8
900085f8:	2b00      	cmp	r3, #0
900085fa:	d036      	beq.n	9000866a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
900085fc:	687b      	ldr	r3, [r7, #4]
900085fe:	695b      	ldr	r3, [r3, #20]
90008600:	2b00      	cmp	r3, #0
90008602:	d019      	beq.n	90008638 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90008604:	4b2b      	ldr	r3, [pc, #172]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90008608:	4a2a      	ldr	r2, [pc, #168]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000860a:	f043 0301 	orr.w	r3, r3, #1
9000860e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90008610:	f7fb faae 	bl	90003b70 <HAL_GetTick>
90008614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90008616:	e008      	b.n	9000862a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
90008618:	f7fb faaa 	bl	90003b70 <HAL_GetTick>
9000861c:	4602      	mov	r2, r0
9000861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008620:	1ad3      	subs	r3, r2, r3
90008622:	2b02      	cmp	r3, #2
90008624:	d901      	bls.n	9000862a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90008626:	2303      	movs	r3, #3
90008628:	e1ef      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000862a:	4b22      	ldr	r3, [pc, #136]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000862c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000862e:	f003 0302 	and.w	r3, r3, #2
90008632:	2b00      	cmp	r3, #0
90008634:	d0f0      	beq.n	90008618 <HAL_RCC_OscConfig+0x45c>
90008636:	e018      	b.n	9000866a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90008638:	4b1e      	ldr	r3, [pc, #120]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000863a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000863c:	4a1d      	ldr	r2, [pc, #116]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
9000863e:	f023 0301 	bic.w	r3, r3, #1
90008642:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90008644:	f7fb fa94 	bl	90003b70 <HAL_GetTick>
90008648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000864a:	e008      	b.n	9000865e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
9000864c:	f7fb fa90 	bl	90003b70 <HAL_GetTick>
90008650:	4602      	mov	r2, r0
90008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008654:	1ad3      	subs	r3, r2, r3
90008656:	2b02      	cmp	r3, #2
90008658:	d901      	bls.n	9000865e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
9000865a:	2303      	movs	r3, #3
9000865c:	e1d5      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000865e:	4b15      	ldr	r3, [pc, #84]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90008662:	f003 0302 	and.w	r3, r3, #2
90008666:	2b00      	cmp	r3, #0
90008668:	d1f0      	bne.n	9000864c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000866a:	687b      	ldr	r3, [r7, #4]
9000866c:	681b      	ldr	r3, [r3, #0]
9000866e:	f003 0320 	and.w	r3, r3, #32
90008672:	2b00      	cmp	r3, #0
90008674:	d039      	beq.n	900086ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
90008676:	687b      	ldr	r3, [r7, #4]
90008678:	699b      	ldr	r3, [r3, #24]
9000867a:	2b00      	cmp	r3, #0
9000867c:	d01c      	beq.n	900086b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
9000867e:	4b0d      	ldr	r3, [pc, #52]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008680:	681b      	ldr	r3, [r3, #0]
90008682:	4a0c      	ldr	r2, [pc, #48]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
90008684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90008688:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000868a:	f7fb fa71 	bl	90003b70 <HAL_GetTick>
9000868e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90008690:	e008      	b.n	900086a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
90008692:	f7fb fa6d 	bl	90003b70 <HAL_GetTick>
90008696:	4602      	mov	r2, r0
90008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000869a:	1ad3      	subs	r3, r2, r3
9000869c:	2b02      	cmp	r3, #2
9000869e:	d901      	bls.n	900086a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
900086a0:	2303      	movs	r3, #3
900086a2:	e1b2      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
900086a4:	4b03      	ldr	r3, [pc, #12]	; (900086b4 <HAL_RCC_OscConfig+0x4f8>)
900086a6:	681b      	ldr	r3, [r3, #0]
900086a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900086ac:	2b00      	cmp	r3, #0
900086ae:	d0f0      	beq.n	90008692 <HAL_RCC_OscConfig+0x4d6>
900086b0:	e01b      	b.n	900086ea <HAL_RCC_OscConfig+0x52e>
900086b2:	bf00      	nop
900086b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
900086b8:	4b9b      	ldr	r3, [pc, #620]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900086ba:	681b      	ldr	r3, [r3, #0]
900086bc:	4a9a      	ldr	r2, [pc, #616]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900086be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
900086c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900086c4:	f7fb fa54 	bl	90003b70 <HAL_GetTick>
900086c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900086ca:	e008      	b.n	900086de <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
900086cc:	f7fb fa50 	bl	90003b70 <HAL_GetTick>
900086d0:	4602      	mov	r2, r0
900086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900086d4:	1ad3      	subs	r3, r2, r3
900086d6:	2b02      	cmp	r3, #2
900086d8:	d901      	bls.n	900086de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
900086da:	2303      	movs	r3, #3
900086dc:	e195      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
900086de:	4b92      	ldr	r3, [pc, #584]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900086e0:	681b      	ldr	r3, [r3, #0]
900086e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900086e6:	2b00      	cmp	r3, #0
900086e8:	d1f0      	bne.n	900086cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
900086ea:	687b      	ldr	r3, [r7, #4]
900086ec:	681b      	ldr	r3, [r3, #0]
900086ee:	f003 0304 	and.w	r3, r3, #4
900086f2:	2b00      	cmp	r3, #0
900086f4:	f000 8081 	beq.w	900087fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900086f8:	4b8c      	ldr	r3, [pc, #560]	; (9000892c <HAL_RCC_OscConfig+0x770>)
900086fa:	681b      	ldr	r3, [r3, #0]
900086fc:	4a8b      	ldr	r2, [pc, #556]	; (9000892c <HAL_RCC_OscConfig+0x770>)
900086fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90008702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90008704:	f7fb fa34 	bl	90003b70 <HAL_GetTick>
90008708:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000870a:	e008      	b.n	9000871e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
9000870c:	f7fb fa30 	bl	90003b70 <HAL_GetTick>
90008710:	4602      	mov	r2, r0
90008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008714:	1ad3      	subs	r3, r2, r3
90008716:	2b64      	cmp	r3, #100	; 0x64
90008718:	d901      	bls.n	9000871e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
9000871a:	2303      	movs	r3, #3
9000871c:	e175      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000871e:	4b83      	ldr	r3, [pc, #524]	; (9000892c <HAL_RCC_OscConfig+0x770>)
90008720:	681b      	ldr	r3, [r3, #0]
90008722:	f403 7380 	and.w	r3, r3, #256	; 0x100
90008726:	2b00      	cmp	r3, #0
90008728:	d0f0      	beq.n	9000870c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000872a:	687b      	ldr	r3, [r7, #4]
9000872c:	689b      	ldr	r3, [r3, #8]
9000872e:	2b01      	cmp	r3, #1
90008730:	d106      	bne.n	90008740 <HAL_RCC_OscConfig+0x584>
90008732:	4b7d      	ldr	r3, [pc, #500]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008736:	4a7c      	ldr	r2, [pc, #496]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008738:	f043 0301 	orr.w	r3, r3, #1
9000873c:	6713      	str	r3, [r2, #112]	; 0x70
9000873e:	e02d      	b.n	9000879c <HAL_RCC_OscConfig+0x5e0>
90008740:	687b      	ldr	r3, [r7, #4]
90008742:	689b      	ldr	r3, [r3, #8]
90008744:	2b00      	cmp	r3, #0
90008746:	d10c      	bne.n	90008762 <HAL_RCC_OscConfig+0x5a6>
90008748:	4b77      	ldr	r3, [pc, #476]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000874a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000874c:	4a76      	ldr	r2, [pc, #472]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000874e:	f023 0301 	bic.w	r3, r3, #1
90008752:	6713      	str	r3, [r2, #112]	; 0x70
90008754:	4b74      	ldr	r3, [pc, #464]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008758:	4a73      	ldr	r2, [pc, #460]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000875a:	f023 0304 	bic.w	r3, r3, #4
9000875e:	6713      	str	r3, [r2, #112]	; 0x70
90008760:	e01c      	b.n	9000879c <HAL_RCC_OscConfig+0x5e0>
90008762:	687b      	ldr	r3, [r7, #4]
90008764:	689b      	ldr	r3, [r3, #8]
90008766:	2b05      	cmp	r3, #5
90008768:	d10c      	bne.n	90008784 <HAL_RCC_OscConfig+0x5c8>
9000876a:	4b6f      	ldr	r3, [pc, #444]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000876c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000876e:	4a6e      	ldr	r2, [pc, #440]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008770:	f043 0304 	orr.w	r3, r3, #4
90008774:	6713      	str	r3, [r2, #112]	; 0x70
90008776:	4b6c      	ldr	r3, [pc, #432]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000877a:	4a6b      	ldr	r2, [pc, #428]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000877c:	f043 0301 	orr.w	r3, r3, #1
90008780:	6713      	str	r3, [r2, #112]	; 0x70
90008782:	e00b      	b.n	9000879c <HAL_RCC_OscConfig+0x5e0>
90008784:	4b68      	ldr	r3, [pc, #416]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008788:	4a67      	ldr	r2, [pc, #412]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000878a:	f023 0301 	bic.w	r3, r3, #1
9000878e:	6713      	str	r3, [r2, #112]	; 0x70
90008790:	4b65      	ldr	r3, [pc, #404]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008794:	4a64      	ldr	r2, [pc, #400]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008796:	f023 0304 	bic.w	r3, r3, #4
9000879a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000879c:	687b      	ldr	r3, [r7, #4]
9000879e:	689b      	ldr	r3, [r3, #8]
900087a0:	2b00      	cmp	r3, #0
900087a2:	d015      	beq.n	900087d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900087a4:	f7fb f9e4 	bl	90003b70 <HAL_GetTick>
900087a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900087aa:	e00a      	b.n	900087c2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
900087ac:	f7fb f9e0 	bl	90003b70 <HAL_GetTick>
900087b0:	4602      	mov	r2, r0
900087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900087b4:	1ad3      	subs	r3, r2, r3
900087b6:	f241 3288 	movw	r2, #5000	; 0x1388
900087ba:	4293      	cmp	r3, r2
900087bc:	d901      	bls.n	900087c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
900087be:	2303      	movs	r3, #3
900087c0:	e123      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
900087c2:	4b59      	ldr	r3, [pc, #356]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900087c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900087c6:	f003 0302 	and.w	r3, r3, #2
900087ca:	2b00      	cmp	r3, #0
900087cc:	d0ee      	beq.n	900087ac <HAL_RCC_OscConfig+0x5f0>
900087ce:	e014      	b.n	900087fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900087d0:	f7fb f9ce 	bl	90003b70 <HAL_GetTick>
900087d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900087d6:	e00a      	b.n	900087ee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
900087d8:	f7fb f9ca 	bl	90003b70 <HAL_GetTick>
900087dc:	4602      	mov	r2, r0
900087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900087e0:	1ad3      	subs	r3, r2, r3
900087e2:	f241 3288 	movw	r2, #5000	; 0x1388
900087e6:	4293      	cmp	r3, r2
900087e8:	d901      	bls.n	900087ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
900087ea:	2303      	movs	r3, #3
900087ec:	e10d      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
900087ee:	4b4e      	ldr	r3, [pc, #312]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900087f2:	f003 0302 	and.w	r3, r3, #2
900087f6:	2b00      	cmp	r3, #0
900087f8:	d1ee      	bne.n	900087d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
900087fa:	687b      	ldr	r3, [r7, #4]
900087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900087fe:	2b00      	cmp	r3, #0
90008800:	f000 8102 	beq.w	90008a08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90008804:	4b48      	ldr	r3, [pc, #288]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008806:	691b      	ldr	r3, [r3, #16]
90008808:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000880c:	2b18      	cmp	r3, #24
9000880e:	f000 80bd 	beq.w	9000898c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90008812:	687b      	ldr	r3, [r7, #4]
90008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90008816:	2b02      	cmp	r3, #2
90008818:	f040 809e 	bne.w	90008958 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
9000881c:	4b42      	ldr	r3, [pc, #264]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000881e:	681b      	ldr	r3, [r3, #0]
90008820:	4a41      	ldr	r2, [pc, #260]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90008826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008828:	f7fb f9a2 	bl	90003b70 <HAL_GetTick>
9000882c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000882e:	e008      	b.n	90008842 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90008830:	f7fb f99e 	bl	90003b70 <HAL_GetTick>
90008834:	4602      	mov	r2, r0
90008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008838:	1ad3      	subs	r3, r2, r3
9000883a:	2b02      	cmp	r3, #2
9000883c:	d901      	bls.n	90008842 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
9000883e:	2303      	movs	r3, #3
90008840:	e0e3      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90008842:	4b39      	ldr	r3, [pc, #228]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008844:	681b      	ldr	r3, [r3, #0]
90008846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000884a:	2b00      	cmp	r3, #0
9000884c:	d1f0      	bne.n	90008830 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000884e:	4b36      	ldr	r3, [pc, #216]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90008852:	4b37      	ldr	r3, [pc, #220]	; (90008930 <HAL_RCC_OscConfig+0x774>)
90008854:	4013      	ands	r3, r2
90008856:	687a      	ldr	r2, [r7, #4]
90008858:	6a91      	ldr	r1, [r2, #40]	; 0x28
9000885a:	687a      	ldr	r2, [r7, #4]
9000885c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000885e:	0112      	lsls	r2, r2, #4
90008860:	430a      	orrs	r2, r1
90008862:	4931      	ldr	r1, [pc, #196]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008864:	4313      	orrs	r3, r2
90008866:	628b      	str	r3, [r1, #40]	; 0x28
90008868:	687b      	ldr	r3, [r7, #4]
9000886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000886c:	3b01      	subs	r3, #1
9000886e:	f3c3 0208 	ubfx	r2, r3, #0, #9
90008872:	687b      	ldr	r3, [r7, #4]
90008874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90008876:	3b01      	subs	r3, #1
90008878:	025b      	lsls	r3, r3, #9
9000887a:	b29b      	uxth	r3, r3
9000887c:	431a      	orrs	r2, r3
9000887e:	687b      	ldr	r3, [r7, #4]
90008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90008882:	3b01      	subs	r3, #1
90008884:	041b      	lsls	r3, r3, #16
90008886:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
9000888a:	431a      	orrs	r2, r3
9000888c:	687b      	ldr	r3, [r7, #4]
9000888e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90008890:	3b01      	subs	r3, #1
90008892:	061b      	lsls	r3, r3, #24
90008894:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90008898:	4923      	ldr	r1, [pc, #140]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000889a:	4313      	orrs	r3, r2
9000889c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
9000889e:	4b22      	ldr	r3, [pc, #136]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900088a2:	4a21      	ldr	r2, [pc, #132]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088a4:	f023 0301 	bic.w	r3, r3, #1
900088a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900088aa:	4b1f      	ldr	r3, [pc, #124]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900088ae:	4b21      	ldr	r3, [pc, #132]	; (90008934 <HAL_RCC_OscConfig+0x778>)
900088b0:	4013      	ands	r3, r2
900088b2:	687a      	ldr	r2, [r7, #4]
900088b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
900088b6:	00d2      	lsls	r2, r2, #3
900088b8:	491b      	ldr	r1, [pc, #108]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088ba:	4313      	orrs	r3, r2
900088bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
900088be:	4b1a      	ldr	r3, [pc, #104]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900088c2:	f023 020c 	bic.w	r2, r3, #12
900088c6:	687b      	ldr	r3, [r7, #4]
900088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900088ca:	4917      	ldr	r1, [pc, #92]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088cc:	4313      	orrs	r3, r2
900088ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
900088d0:	4b15      	ldr	r3, [pc, #84]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900088d4:	f023 0202 	bic.w	r2, r3, #2
900088d8:	687b      	ldr	r3, [r7, #4]
900088da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900088dc:	4912      	ldr	r1, [pc, #72]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088de:	4313      	orrs	r3, r2
900088e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
900088e2:	4b11      	ldr	r3, [pc, #68]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900088e6:	4a10      	ldr	r2, [pc, #64]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900088ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900088ee:	4b0e      	ldr	r3, [pc, #56]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900088f2:	4a0d      	ldr	r2, [pc, #52]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900088f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
900088fa:	4b0b      	ldr	r3, [pc, #44]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
900088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900088fe:	4a0a      	ldr	r2, [pc, #40]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90008904:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
90008906:	4b08      	ldr	r3, [pc, #32]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000890a:	4a07      	ldr	r2, [pc, #28]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
9000890c:	f043 0301 	orr.w	r3, r3, #1
90008910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90008912:	4b05      	ldr	r3, [pc, #20]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008914:	681b      	ldr	r3, [r3, #0]
90008916:	4a04      	ldr	r2, [pc, #16]	; (90008928 <HAL_RCC_OscConfig+0x76c>)
90008918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000891c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000891e:	f7fb f927 	bl	90003b70 <HAL_GetTick>
90008922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90008924:	e011      	b.n	9000894a <HAL_RCC_OscConfig+0x78e>
90008926:	bf00      	nop
90008928:	58024400 	.word	0x58024400
9000892c:	58024800 	.word	0x58024800
90008930:	fffffc0c 	.word	0xfffffc0c
90008934:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90008938:	f7fb f91a 	bl	90003b70 <HAL_GetTick>
9000893c:	4602      	mov	r2, r0
9000893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008940:	1ad3      	subs	r3, r2, r3
90008942:	2b02      	cmp	r3, #2
90008944:	d901      	bls.n	9000894a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90008946:	2303      	movs	r3, #3
90008948:	e05f      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000894a:	4b32      	ldr	r3, [pc, #200]	; (90008a14 <HAL_RCC_OscConfig+0x858>)
9000894c:	681b      	ldr	r3, [r3, #0]
9000894e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90008952:	2b00      	cmp	r3, #0
90008954:	d0f0      	beq.n	90008938 <HAL_RCC_OscConfig+0x77c>
90008956:	e057      	b.n	90008a08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90008958:	4b2e      	ldr	r3, [pc, #184]	; (90008a14 <HAL_RCC_OscConfig+0x858>)
9000895a:	681b      	ldr	r3, [r3, #0]
9000895c:	4a2d      	ldr	r2, [pc, #180]	; (90008a14 <HAL_RCC_OscConfig+0x858>)
9000895e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90008962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90008964:	f7fb f904 	bl	90003b70 <HAL_GetTick>
90008968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000896a:	e008      	b.n	9000897e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
9000896c:	f7fb f900 	bl	90003b70 <HAL_GetTick>
90008970:	4602      	mov	r2, r0
90008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008974:	1ad3      	subs	r3, r2, r3
90008976:	2b02      	cmp	r3, #2
90008978:	d901      	bls.n	9000897e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
9000897a:	2303      	movs	r3, #3
9000897c:	e045      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000897e:	4b25      	ldr	r3, [pc, #148]	; (90008a14 <HAL_RCC_OscConfig+0x858>)
90008980:	681b      	ldr	r3, [r3, #0]
90008982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90008986:	2b00      	cmp	r3, #0
90008988:	d1f0      	bne.n	9000896c <HAL_RCC_OscConfig+0x7b0>
9000898a:	e03d      	b.n	90008a08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
9000898c:	4b21      	ldr	r3, [pc, #132]	; (90008a14 <HAL_RCC_OscConfig+0x858>)
9000898e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008990:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90008992:	4b20      	ldr	r3, [pc, #128]	; (90008a14 <HAL_RCC_OscConfig+0x858>)
90008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008996:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90008998:	687b      	ldr	r3, [r7, #4]
9000899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000899c:	2b01      	cmp	r3, #1
9000899e:	d031      	beq.n	90008a04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900089a0:	693b      	ldr	r3, [r7, #16]
900089a2:	f003 0203 	and.w	r2, r3, #3
900089a6:	687b      	ldr	r3, [r7, #4]
900089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900089aa:	429a      	cmp	r2, r3
900089ac:	d12a      	bne.n	90008a04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900089ae:	693b      	ldr	r3, [r7, #16]
900089b0:	091b      	lsrs	r3, r3, #4
900089b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
900089b6:	687b      	ldr	r3, [r7, #4]
900089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900089ba:	429a      	cmp	r2, r3
900089bc:	d122      	bne.n	90008a04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900089be:	68fb      	ldr	r3, [r7, #12]
900089c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
900089c4:	687b      	ldr	r3, [r7, #4]
900089c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900089c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
900089ca:	429a      	cmp	r2, r3
900089cc:	d11a      	bne.n	90008a04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900089ce:	68fb      	ldr	r3, [r7, #12]
900089d0:	0a5b      	lsrs	r3, r3, #9
900089d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900089d6:	687b      	ldr	r3, [r7, #4]
900089d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900089da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
900089dc:	429a      	cmp	r2, r3
900089de:	d111      	bne.n	90008a04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
900089e0:	68fb      	ldr	r3, [r7, #12]
900089e2:	0c1b      	lsrs	r3, r3, #16
900089e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900089e8:	687b      	ldr	r3, [r7, #4]
900089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900089ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
900089ee:	429a      	cmp	r2, r3
900089f0:	d108      	bne.n	90008a04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
900089f2:	68fb      	ldr	r3, [r7, #12]
900089f4:	0e1b      	lsrs	r3, r3, #24
900089f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
900089fa:	687b      	ldr	r3, [r7, #4]
900089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900089fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90008a00:	429a      	cmp	r2, r3
90008a02:	d001      	beq.n	90008a08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90008a04:	2301      	movs	r3, #1
90008a06:	e000      	b.n	90008a0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
90008a08:	2300      	movs	r3, #0
}
90008a0a:	4618      	mov	r0, r3
90008a0c:	3730      	adds	r7, #48	; 0x30
90008a0e:	46bd      	mov	sp, r7
90008a10:	bd80      	pop	{r7, pc}
90008a12:	bf00      	nop
90008a14:	58024400 	.word	0x58024400

90008a18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90008a18:	b580      	push	{r7, lr}
90008a1a:	b086      	sub	sp, #24
90008a1c:	af00      	add	r7, sp, #0
90008a1e:	6078      	str	r0, [r7, #4]
90008a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
90008a22:	687b      	ldr	r3, [r7, #4]
90008a24:	2b00      	cmp	r3, #0
90008a26:	d101      	bne.n	90008a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90008a28:	2301      	movs	r3, #1
90008a2a:	e19c      	b.n	90008d66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
90008a2c:	4b8a      	ldr	r3, [pc, #552]	; (90008c58 <HAL_RCC_ClockConfig+0x240>)
90008a2e:	681b      	ldr	r3, [r3, #0]
90008a30:	f003 030f 	and.w	r3, r3, #15
90008a34:	683a      	ldr	r2, [r7, #0]
90008a36:	429a      	cmp	r2, r3
90008a38:	d910      	bls.n	90008a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90008a3a:	4b87      	ldr	r3, [pc, #540]	; (90008c58 <HAL_RCC_ClockConfig+0x240>)
90008a3c:	681b      	ldr	r3, [r3, #0]
90008a3e:	f023 020f 	bic.w	r2, r3, #15
90008a42:	4985      	ldr	r1, [pc, #532]	; (90008c58 <HAL_RCC_ClockConfig+0x240>)
90008a44:	683b      	ldr	r3, [r7, #0]
90008a46:	4313      	orrs	r3, r2
90008a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
90008a4a:	4b83      	ldr	r3, [pc, #524]	; (90008c58 <HAL_RCC_ClockConfig+0x240>)
90008a4c:	681b      	ldr	r3, [r3, #0]
90008a4e:	f003 030f 	and.w	r3, r3, #15
90008a52:	683a      	ldr	r2, [r7, #0]
90008a54:	429a      	cmp	r2, r3
90008a56:	d001      	beq.n	90008a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90008a58:	2301      	movs	r3, #1
90008a5a:	e184      	b.n	90008d66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90008a5c:	687b      	ldr	r3, [r7, #4]
90008a5e:	681b      	ldr	r3, [r3, #0]
90008a60:	f003 0304 	and.w	r3, r3, #4
90008a64:	2b00      	cmp	r3, #0
90008a66:	d010      	beq.n	90008a8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90008a68:	687b      	ldr	r3, [r7, #4]
90008a6a:	691a      	ldr	r2, [r3, #16]
90008a6c:	4b7b      	ldr	r3, [pc, #492]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008a6e:	699b      	ldr	r3, [r3, #24]
90008a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
90008a74:	429a      	cmp	r2, r3
90008a76:	d908      	bls.n	90008a8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90008a78:	4b78      	ldr	r3, [pc, #480]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008a7a:	699b      	ldr	r3, [r3, #24]
90008a7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90008a80:	687b      	ldr	r3, [r7, #4]
90008a82:	691b      	ldr	r3, [r3, #16]
90008a84:	4975      	ldr	r1, [pc, #468]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008a86:	4313      	orrs	r3, r2
90008a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90008a8a:	687b      	ldr	r3, [r7, #4]
90008a8c:	681b      	ldr	r3, [r3, #0]
90008a8e:	f003 0308 	and.w	r3, r3, #8
90008a92:	2b00      	cmp	r3, #0
90008a94:	d010      	beq.n	90008ab8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90008a96:	687b      	ldr	r3, [r7, #4]
90008a98:	695a      	ldr	r2, [r3, #20]
90008a9a:	4b70      	ldr	r3, [pc, #448]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008a9c:	69db      	ldr	r3, [r3, #28]
90008a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
90008aa2:	429a      	cmp	r2, r3
90008aa4:	d908      	bls.n	90008ab8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90008aa6:	4b6d      	ldr	r3, [pc, #436]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008aa8:	69db      	ldr	r3, [r3, #28]
90008aaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90008aae:	687b      	ldr	r3, [r7, #4]
90008ab0:	695b      	ldr	r3, [r3, #20]
90008ab2:	496a      	ldr	r1, [pc, #424]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008ab4:	4313      	orrs	r3, r2
90008ab6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90008ab8:	687b      	ldr	r3, [r7, #4]
90008aba:	681b      	ldr	r3, [r3, #0]
90008abc:	f003 0310 	and.w	r3, r3, #16
90008ac0:	2b00      	cmp	r3, #0
90008ac2:	d010      	beq.n	90008ae6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90008ac4:	687b      	ldr	r3, [r7, #4]
90008ac6:	699a      	ldr	r2, [r3, #24]
90008ac8:	4b64      	ldr	r3, [pc, #400]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008aca:	69db      	ldr	r3, [r3, #28]
90008acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90008ad0:	429a      	cmp	r2, r3
90008ad2:	d908      	bls.n	90008ae6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90008ad4:	4b61      	ldr	r3, [pc, #388]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008ad6:	69db      	ldr	r3, [r3, #28]
90008ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90008adc:	687b      	ldr	r3, [r7, #4]
90008ade:	699b      	ldr	r3, [r3, #24]
90008ae0:	495e      	ldr	r1, [pc, #376]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008ae2:	4313      	orrs	r3, r2
90008ae4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90008ae6:	687b      	ldr	r3, [r7, #4]
90008ae8:	681b      	ldr	r3, [r3, #0]
90008aea:	f003 0320 	and.w	r3, r3, #32
90008aee:	2b00      	cmp	r3, #0
90008af0:	d010      	beq.n	90008b14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90008af2:	687b      	ldr	r3, [r7, #4]
90008af4:	69da      	ldr	r2, [r3, #28]
90008af6:	4b59      	ldr	r3, [pc, #356]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008af8:	6a1b      	ldr	r3, [r3, #32]
90008afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
90008afe:	429a      	cmp	r2, r3
90008b00:	d908      	bls.n	90008b14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
90008b02:	4b56      	ldr	r3, [pc, #344]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b04:	6a1b      	ldr	r3, [r3, #32]
90008b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90008b0a:	687b      	ldr	r3, [r7, #4]
90008b0c:	69db      	ldr	r3, [r3, #28]
90008b0e:	4953      	ldr	r1, [pc, #332]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b10:	4313      	orrs	r3, r2
90008b12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90008b14:	687b      	ldr	r3, [r7, #4]
90008b16:	681b      	ldr	r3, [r3, #0]
90008b18:	f003 0302 	and.w	r3, r3, #2
90008b1c:	2b00      	cmp	r3, #0
90008b1e:	d010      	beq.n	90008b42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90008b20:	687b      	ldr	r3, [r7, #4]
90008b22:	68da      	ldr	r2, [r3, #12]
90008b24:	4b4d      	ldr	r3, [pc, #308]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b26:	699b      	ldr	r3, [r3, #24]
90008b28:	f003 030f 	and.w	r3, r3, #15
90008b2c:	429a      	cmp	r2, r3
90008b2e:	d908      	bls.n	90008b42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90008b30:	4b4a      	ldr	r3, [pc, #296]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b32:	699b      	ldr	r3, [r3, #24]
90008b34:	f023 020f 	bic.w	r2, r3, #15
90008b38:	687b      	ldr	r3, [r7, #4]
90008b3a:	68db      	ldr	r3, [r3, #12]
90008b3c:	4947      	ldr	r1, [pc, #284]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b3e:	4313      	orrs	r3, r2
90008b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90008b42:	687b      	ldr	r3, [r7, #4]
90008b44:	681b      	ldr	r3, [r3, #0]
90008b46:	f003 0301 	and.w	r3, r3, #1
90008b4a:	2b00      	cmp	r3, #0
90008b4c:	d055      	beq.n	90008bfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90008b4e:	4b43      	ldr	r3, [pc, #268]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b50:	699b      	ldr	r3, [r3, #24]
90008b52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
90008b56:	687b      	ldr	r3, [r7, #4]
90008b58:	689b      	ldr	r3, [r3, #8]
90008b5a:	4940      	ldr	r1, [pc, #256]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b5c:	4313      	orrs	r3, r2
90008b5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90008b60:	687b      	ldr	r3, [r7, #4]
90008b62:	685b      	ldr	r3, [r3, #4]
90008b64:	2b02      	cmp	r3, #2
90008b66:	d107      	bne.n	90008b78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90008b68:	4b3c      	ldr	r3, [pc, #240]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b6a:	681b      	ldr	r3, [r3, #0]
90008b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90008b70:	2b00      	cmp	r3, #0
90008b72:	d121      	bne.n	90008bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90008b74:	2301      	movs	r3, #1
90008b76:	e0f6      	b.n	90008d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90008b78:	687b      	ldr	r3, [r7, #4]
90008b7a:	685b      	ldr	r3, [r3, #4]
90008b7c:	2b03      	cmp	r3, #3
90008b7e:	d107      	bne.n	90008b90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90008b80:	4b36      	ldr	r3, [pc, #216]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b82:	681b      	ldr	r3, [r3, #0]
90008b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90008b88:	2b00      	cmp	r3, #0
90008b8a:	d115      	bne.n	90008bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90008b8c:	2301      	movs	r3, #1
90008b8e:	e0ea      	b.n	90008d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90008b90:	687b      	ldr	r3, [r7, #4]
90008b92:	685b      	ldr	r3, [r3, #4]
90008b94:	2b01      	cmp	r3, #1
90008b96:	d107      	bne.n	90008ba8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90008b98:	4b30      	ldr	r3, [pc, #192]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008b9a:	681b      	ldr	r3, [r3, #0]
90008b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90008ba0:	2b00      	cmp	r3, #0
90008ba2:	d109      	bne.n	90008bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90008ba4:	2301      	movs	r3, #1
90008ba6:	e0de      	b.n	90008d66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90008ba8:	4b2c      	ldr	r3, [pc, #176]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008baa:	681b      	ldr	r3, [r3, #0]
90008bac:	f003 0304 	and.w	r3, r3, #4
90008bb0:	2b00      	cmp	r3, #0
90008bb2:	d101      	bne.n	90008bb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90008bb4:	2301      	movs	r3, #1
90008bb6:	e0d6      	b.n	90008d66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90008bb8:	4b28      	ldr	r3, [pc, #160]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008bba:	691b      	ldr	r3, [r3, #16]
90008bbc:	f023 0207 	bic.w	r2, r3, #7
90008bc0:	687b      	ldr	r3, [r7, #4]
90008bc2:	685b      	ldr	r3, [r3, #4]
90008bc4:	4925      	ldr	r1, [pc, #148]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008bc6:	4313      	orrs	r3, r2
90008bc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90008bca:	f7fa ffd1 	bl	90003b70 <HAL_GetTick>
90008bce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90008bd0:	e00a      	b.n	90008be8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
90008bd2:	f7fa ffcd 	bl	90003b70 <HAL_GetTick>
90008bd6:	4602      	mov	r2, r0
90008bd8:	697b      	ldr	r3, [r7, #20]
90008bda:	1ad3      	subs	r3, r2, r3
90008bdc:	f241 3288 	movw	r2, #5000	; 0x1388
90008be0:	4293      	cmp	r3, r2
90008be2:	d901      	bls.n	90008be8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
90008be4:	2303      	movs	r3, #3
90008be6:	e0be      	b.n	90008d66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90008be8:	4b1c      	ldr	r3, [pc, #112]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008bea:	691b      	ldr	r3, [r3, #16]
90008bec:	f003 0238 	and.w	r2, r3, #56	; 0x38
90008bf0:	687b      	ldr	r3, [r7, #4]
90008bf2:	685b      	ldr	r3, [r3, #4]
90008bf4:	00db      	lsls	r3, r3, #3
90008bf6:	429a      	cmp	r2, r3
90008bf8:	d1eb      	bne.n	90008bd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90008bfa:	687b      	ldr	r3, [r7, #4]
90008bfc:	681b      	ldr	r3, [r3, #0]
90008bfe:	f003 0302 	and.w	r3, r3, #2
90008c02:	2b00      	cmp	r3, #0
90008c04:	d010      	beq.n	90008c28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90008c06:	687b      	ldr	r3, [r7, #4]
90008c08:	68da      	ldr	r2, [r3, #12]
90008c0a:	4b14      	ldr	r3, [pc, #80]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008c0c:	699b      	ldr	r3, [r3, #24]
90008c0e:	f003 030f 	and.w	r3, r3, #15
90008c12:	429a      	cmp	r2, r3
90008c14:	d208      	bcs.n	90008c28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90008c16:	4b11      	ldr	r3, [pc, #68]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008c18:	699b      	ldr	r3, [r3, #24]
90008c1a:	f023 020f 	bic.w	r2, r3, #15
90008c1e:	687b      	ldr	r3, [r7, #4]
90008c20:	68db      	ldr	r3, [r3, #12]
90008c22:	490e      	ldr	r1, [pc, #56]	; (90008c5c <HAL_RCC_ClockConfig+0x244>)
90008c24:	4313      	orrs	r3, r2
90008c26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
90008c28:	4b0b      	ldr	r3, [pc, #44]	; (90008c58 <HAL_RCC_ClockConfig+0x240>)
90008c2a:	681b      	ldr	r3, [r3, #0]
90008c2c:	f003 030f 	and.w	r3, r3, #15
90008c30:	683a      	ldr	r2, [r7, #0]
90008c32:	429a      	cmp	r2, r3
90008c34:	d214      	bcs.n	90008c60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90008c36:	4b08      	ldr	r3, [pc, #32]	; (90008c58 <HAL_RCC_ClockConfig+0x240>)
90008c38:	681b      	ldr	r3, [r3, #0]
90008c3a:	f023 020f 	bic.w	r2, r3, #15
90008c3e:	4906      	ldr	r1, [pc, #24]	; (90008c58 <HAL_RCC_ClockConfig+0x240>)
90008c40:	683b      	ldr	r3, [r7, #0]
90008c42:	4313      	orrs	r3, r2
90008c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
90008c46:	4b04      	ldr	r3, [pc, #16]	; (90008c58 <HAL_RCC_ClockConfig+0x240>)
90008c48:	681b      	ldr	r3, [r3, #0]
90008c4a:	f003 030f 	and.w	r3, r3, #15
90008c4e:	683a      	ldr	r2, [r7, #0]
90008c50:	429a      	cmp	r2, r3
90008c52:	d005      	beq.n	90008c60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90008c54:	2301      	movs	r3, #1
90008c56:	e086      	b.n	90008d66 <HAL_RCC_ClockConfig+0x34e>
90008c58:	52002000 	.word	0x52002000
90008c5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90008c60:	687b      	ldr	r3, [r7, #4]
90008c62:	681b      	ldr	r3, [r3, #0]
90008c64:	f003 0304 	and.w	r3, r3, #4
90008c68:	2b00      	cmp	r3, #0
90008c6a:	d010      	beq.n	90008c8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90008c6c:	687b      	ldr	r3, [r7, #4]
90008c6e:	691a      	ldr	r2, [r3, #16]
90008c70:	4b3f      	ldr	r3, [pc, #252]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008c72:	699b      	ldr	r3, [r3, #24]
90008c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
90008c78:	429a      	cmp	r2, r3
90008c7a:	d208      	bcs.n	90008c8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90008c7c:	4b3c      	ldr	r3, [pc, #240]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008c7e:	699b      	ldr	r3, [r3, #24]
90008c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90008c84:	687b      	ldr	r3, [r7, #4]
90008c86:	691b      	ldr	r3, [r3, #16]
90008c88:	4939      	ldr	r1, [pc, #228]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008c8a:	4313      	orrs	r3, r2
90008c8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90008c8e:	687b      	ldr	r3, [r7, #4]
90008c90:	681b      	ldr	r3, [r3, #0]
90008c92:	f003 0308 	and.w	r3, r3, #8
90008c96:	2b00      	cmp	r3, #0
90008c98:	d010      	beq.n	90008cbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90008c9a:	687b      	ldr	r3, [r7, #4]
90008c9c:	695a      	ldr	r2, [r3, #20]
90008c9e:	4b34      	ldr	r3, [pc, #208]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008ca0:	69db      	ldr	r3, [r3, #28]
90008ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
90008ca6:	429a      	cmp	r2, r3
90008ca8:	d208      	bcs.n	90008cbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90008caa:	4b31      	ldr	r3, [pc, #196]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008cac:	69db      	ldr	r3, [r3, #28]
90008cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90008cb2:	687b      	ldr	r3, [r7, #4]
90008cb4:	695b      	ldr	r3, [r3, #20]
90008cb6:	492e      	ldr	r1, [pc, #184]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008cb8:	4313      	orrs	r3, r2
90008cba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90008cbc:	687b      	ldr	r3, [r7, #4]
90008cbe:	681b      	ldr	r3, [r3, #0]
90008cc0:	f003 0310 	and.w	r3, r3, #16
90008cc4:	2b00      	cmp	r3, #0
90008cc6:	d010      	beq.n	90008cea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90008cc8:	687b      	ldr	r3, [r7, #4]
90008cca:	699a      	ldr	r2, [r3, #24]
90008ccc:	4b28      	ldr	r3, [pc, #160]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008cce:	69db      	ldr	r3, [r3, #28]
90008cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90008cd4:	429a      	cmp	r2, r3
90008cd6:	d208      	bcs.n	90008cea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90008cd8:	4b25      	ldr	r3, [pc, #148]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008cda:	69db      	ldr	r3, [r3, #28]
90008cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90008ce0:	687b      	ldr	r3, [r7, #4]
90008ce2:	699b      	ldr	r3, [r3, #24]
90008ce4:	4922      	ldr	r1, [pc, #136]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008ce6:	4313      	orrs	r3, r2
90008ce8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90008cea:	687b      	ldr	r3, [r7, #4]
90008cec:	681b      	ldr	r3, [r3, #0]
90008cee:	f003 0320 	and.w	r3, r3, #32
90008cf2:	2b00      	cmp	r3, #0
90008cf4:	d010      	beq.n	90008d18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90008cf6:	687b      	ldr	r3, [r7, #4]
90008cf8:	69da      	ldr	r2, [r3, #28]
90008cfa:	4b1d      	ldr	r3, [pc, #116]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008cfc:	6a1b      	ldr	r3, [r3, #32]
90008cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
90008d02:	429a      	cmp	r2, r3
90008d04:	d208      	bcs.n	90008d18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
90008d06:	4b1a      	ldr	r3, [pc, #104]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008d08:	6a1b      	ldr	r3, [r3, #32]
90008d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90008d0e:	687b      	ldr	r3, [r7, #4]
90008d10:	69db      	ldr	r3, [r3, #28]
90008d12:	4917      	ldr	r1, [pc, #92]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008d14:	4313      	orrs	r3, r2
90008d16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90008d18:	f000 f834 	bl	90008d84 <HAL_RCC_GetSysClockFreq>
90008d1c:	4602      	mov	r2, r0
90008d1e:	4b14      	ldr	r3, [pc, #80]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008d20:	699b      	ldr	r3, [r3, #24]
90008d22:	0a1b      	lsrs	r3, r3, #8
90008d24:	f003 030f 	and.w	r3, r3, #15
90008d28:	4912      	ldr	r1, [pc, #72]	; (90008d74 <HAL_RCC_ClockConfig+0x35c>)
90008d2a:	5ccb      	ldrb	r3, [r1, r3]
90008d2c:	f003 031f 	and.w	r3, r3, #31
90008d30:	fa22 f303 	lsr.w	r3, r2, r3
90008d34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90008d36:	4b0e      	ldr	r3, [pc, #56]	; (90008d70 <HAL_RCC_ClockConfig+0x358>)
90008d38:	699b      	ldr	r3, [r3, #24]
90008d3a:	f003 030f 	and.w	r3, r3, #15
90008d3e:	4a0d      	ldr	r2, [pc, #52]	; (90008d74 <HAL_RCC_ClockConfig+0x35c>)
90008d40:	5cd3      	ldrb	r3, [r2, r3]
90008d42:	f003 031f 	and.w	r3, r3, #31
90008d46:	693a      	ldr	r2, [r7, #16]
90008d48:	fa22 f303 	lsr.w	r3, r2, r3
90008d4c:	4a0a      	ldr	r2, [pc, #40]	; (90008d78 <HAL_RCC_ClockConfig+0x360>)
90008d4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90008d50:	4a0a      	ldr	r2, [pc, #40]	; (90008d7c <HAL_RCC_ClockConfig+0x364>)
90008d52:	693b      	ldr	r3, [r7, #16]
90008d54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
90008d56:	4b0a      	ldr	r3, [pc, #40]	; (90008d80 <HAL_RCC_ClockConfig+0x368>)
90008d58:	681b      	ldr	r3, [r3, #0]
90008d5a:	4618      	mov	r0, r3
90008d5c:	f7f8 ffaa 	bl	90001cb4 <HAL_InitTick>
90008d60:	4603      	mov	r3, r0
90008d62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90008d64:	7bfb      	ldrb	r3, [r7, #15]
}
90008d66:	4618      	mov	r0, r3
90008d68:	3718      	adds	r7, #24
90008d6a:	46bd      	mov	sp, r7
90008d6c:	bd80      	pop	{r7, pc}
90008d6e:	bf00      	nop
90008d70:	58024400 	.word	0x58024400
90008d74:	90013ef0 	.word	0x90013ef0
90008d78:	24000030 	.word	0x24000030
90008d7c:	2400002c 	.word	0x2400002c
90008d80:	24000034 	.word	0x24000034

90008d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90008d84:	b480      	push	{r7}
90008d86:	b089      	sub	sp, #36	; 0x24
90008d88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90008d8a:	4bb3      	ldr	r3, [pc, #716]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008d8c:	691b      	ldr	r3, [r3, #16]
90008d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
90008d92:	2b18      	cmp	r3, #24
90008d94:	f200 8155 	bhi.w	90009042 <HAL_RCC_GetSysClockFreq+0x2be>
90008d98:	a201      	add	r2, pc, #4	; (adr r2, 90008da0 <HAL_RCC_GetSysClockFreq+0x1c>)
90008d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008d9e:	bf00      	nop
90008da0:	90008e05 	.word	0x90008e05
90008da4:	90009043 	.word	0x90009043
90008da8:	90009043 	.word	0x90009043
90008dac:	90009043 	.word	0x90009043
90008db0:	90009043 	.word	0x90009043
90008db4:	90009043 	.word	0x90009043
90008db8:	90009043 	.word	0x90009043
90008dbc:	90009043 	.word	0x90009043
90008dc0:	90008e2b 	.word	0x90008e2b
90008dc4:	90009043 	.word	0x90009043
90008dc8:	90009043 	.word	0x90009043
90008dcc:	90009043 	.word	0x90009043
90008dd0:	90009043 	.word	0x90009043
90008dd4:	90009043 	.word	0x90009043
90008dd8:	90009043 	.word	0x90009043
90008ddc:	90009043 	.word	0x90009043
90008de0:	90008e31 	.word	0x90008e31
90008de4:	90009043 	.word	0x90009043
90008de8:	90009043 	.word	0x90009043
90008dec:	90009043 	.word	0x90009043
90008df0:	90009043 	.word	0x90009043
90008df4:	90009043 	.word	0x90009043
90008df8:	90009043 	.word	0x90009043
90008dfc:	90009043 	.word	0x90009043
90008e00:	90008e37 	.word	0x90008e37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008e04:	4b94      	ldr	r3, [pc, #592]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008e06:	681b      	ldr	r3, [r3, #0]
90008e08:	f003 0320 	and.w	r3, r3, #32
90008e0c:	2b00      	cmp	r3, #0
90008e0e:	d009      	beq.n	90008e24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90008e10:	4b91      	ldr	r3, [pc, #580]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008e12:	681b      	ldr	r3, [r3, #0]
90008e14:	08db      	lsrs	r3, r3, #3
90008e16:	f003 0303 	and.w	r3, r3, #3
90008e1a:	4a90      	ldr	r2, [pc, #576]	; (9000905c <HAL_RCC_GetSysClockFreq+0x2d8>)
90008e1c:	fa22 f303 	lsr.w	r3, r2, r3
90008e20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
90008e22:	e111      	b.n	90009048 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
90008e24:	4b8d      	ldr	r3, [pc, #564]	; (9000905c <HAL_RCC_GetSysClockFreq+0x2d8>)
90008e26:	61bb      	str	r3, [r7, #24]
    break;
90008e28:	e10e      	b.n	90009048 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
90008e2a:	4b8d      	ldr	r3, [pc, #564]	; (90009060 <HAL_RCC_GetSysClockFreq+0x2dc>)
90008e2c:	61bb      	str	r3, [r7, #24]
    break;
90008e2e:	e10b      	b.n	90009048 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
90008e30:	4b8c      	ldr	r3, [pc, #560]	; (90009064 <HAL_RCC_GetSysClockFreq+0x2e0>)
90008e32:	61bb      	str	r3, [r7, #24]
    break;
90008e34:	e108      	b.n	90009048 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90008e36:	4b88      	ldr	r3, [pc, #544]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008e3a:	f003 0303 	and.w	r3, r3, #3
90008e3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
90008e40:	4b85      	ldr	r3, [pc, #532]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008e44:	091b      	lsrs	r3, r3, #4
90008e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90008e4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
90008e4c:	4b82      	ldr	r3, [pc, #520]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008e50:	f003 0301 	and.w	r3, r3, #1
90008e54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
90008e56:	4b80      	ldr	r3, [pc, #512]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90008e5a:	08db      	lsrs	r3, r3, #3
90008e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90008e60:	68fa      	ldr	r2, [r7, #12]
90008e62:	fb02 f303 	mul.w	r3, r2, r3
90008e66:	ee07 3a90 	vmov	s15, r3
90008e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008e6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
90008e72:	693b      	ldr	r3, [r7, #16]
90008e74:	2b00      	cmp	r3, #0
90008e76:	f000 80e1 	beq.w	9000903c <HAL_RCC_GetSysClockFreq+0x2b8>
90008e7a:	697b      	ldr	r3, [r7, #20]
90008e7c:	2b02      	cmp	r3, #2
90008e7e:	f000 8083 	beq.w	90008f88 <HAL_RCC_GetSysClockFreq+0x204>
90008e82:	697b      	ldr	r3, [r7, #20]
90008e84:	2b02      	cmp	r3, #2
90008e86:	f200 80a1 	bhi.w	90008fcc <HAL_RCC_GetSysClockFreq+0x248>
90008e8a:	697b      	ldr	r3, [r7, #20]
90008e8c:	2b00      	cmp	r3, #0
90008e8e:	d003      	beq.n	90008e98 <HAL_RCC_GetSysClockFreq+0x114>
90008e90:	697b      	ldr	r3, [r7, #20]
90008e92:	2b01      	cmp	r3, #1
90008e94:	d056      	beq.n	90008f44 <HAL_RCC_GetSysClockFreq+0x1c0>
90008e96:	e099      	b.n	90008fcc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90008e98:	4b6f      	ldr	r3, [pc, #444]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008e9a:	681b      	ldr	r3, [r3, #0]
90008e9c:	f003 0320 	and.w	r3, r3, #32
90008ea0:	2b00      	cmp	r3, #0
90008ea2:	d02d      	beq.n	90008f00 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90008ea4:	4b6c      	ldr	r3, [pc, #432]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008ea6:	681b      	ldr	r3, [r3, #0]
90008ea8:	08db      	lsrs	r3, r3, #3
90008eaa:	f003 0303 	and.w	r3, r3, #3
90008eae:	4a6b      	ldr	r2, [pc, #428]	; (9000905c <HAL_RCC_GetSysClockFreq+0x2d8>)
90008eb0:	fa22 f303 	lsr.w	r3, r2, r3
90008eb4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90008eb6:	687b      	ldr	r3, [r7, #4]
90008eb8:	ee07 3a90 	vmov	s15, r3
90008ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008ec0:	693b      	ldr	r3, [r7, #16]
90008ec2:	ee07 3a90 	vmov	s15, r3
90008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008ece:	4b62      	ldr	r3, [pc, #392]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008ed6:	ee07 3a90 	vmov	s15, r3
90008eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008ede:	ed97 6a02 	vldr	s12, [r7, #8]
90008ee2:	eddf 5a61 	vldr	s11, [pc, #388]	; 90009068 <HAL_RCC_GetSysClockFreq+0x2e4>
90008ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90008ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
90008efa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
90008efe:	e087      	b.n	90009010 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90008f00:	693b      	ldr	r3, [r7, #16]
90008f02:	ee07 3a90 	vmov	s15, r3
90008f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 9000906c <HAL_RCC_GetSysClockFreq+0x2e8>
90008f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f12:	4b51      	ldr	r3, [pc, #324]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f1a:	ee07 3a90 	vmov	s15, r3
90008f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f22:	ed97 6a02 	vldr	s12, [r7, #8]
90008f26:	eddf 5a50 	vldr	s11, [pc, #320]	; 90009068 <HAL_RCC_GetSysClockFreq+0x2e4>
90008f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90008f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008f42:	e065      	b.n	90009010 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90008f44:	693b      	ldr	r3, [r7, #16]
90008f46:	ee07 3a90 	vmov	s15, r3
90008f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 90009070 <HAL_RCC_GetSysClockFreq+0x2ec>
90008f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f56:	4b40      	ldr	r3, [pc, #256]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008f5e:	ee07 3a90 	vmov	s15, r3
90008f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008f66:	ed97 6a02 	vldr	s12, [r7, #8]
90008f6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 90009068 <HAL_RCC_GetSysClockFreq+0x2e4>
90008f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90008f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
90008f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008f86:	e043      	b.n	90009010 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90008f88:	693b      	ldr	r3, [r7, #16]
90008f8a:	ee07 3a90 	vmov	s15, r3
90008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008f92:	eddf 6a38 	vldr	s13, [pc, #224]	; 90009074 <HAL_RCC_GetSysClockFreq+0x2f0>
90008f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008f9a:	4b2f      	ldr	r3, [pc, #188]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008fa2:	ee07 3a90 	vmov	s15, r3
90008fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008faa:	ed97 6a02 	vldr	s12, [r7, #8]
90008fae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 90009068 <HAL_RCC_GetSysClockFreq+0x2e4>
90008fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90008fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90008fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
90008fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90008fca:	e021      	b.n	90009010 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90008fcc:	693b      	ldr	r3, [r7, #16]
90008fce:	ee07 3a90 	vmov	s15, r3
90008fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
90008fd6:	eddf 6a26 	vldr	s13, [pc, #152]	; 90009070 <HAL_RCC_GetSysClockFreq+0x2ec>
90008fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90008fde:	4b1e      	ldr	r3, [pc, #120]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90008fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90008fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90008fe6:	ee07 3a90 	vmov	s15, r3
90008fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
90008fee:	ed97 6a02 	vldr	s12, [r7, #8]
90008ff2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 90009068 <HAL_RCC_GetSysClockFreq+0x2e4>
90008ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90008ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
90008ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90009002:	ee77 7aa6 	vadd.f32	s15, s15, s13
90009006:	ee67 7a27 	vmul.f32	s15, s14, s15
9000900a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000900e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
90009010:	4b11      	ldr	r3, [pc, #68]	; (90009058 <HAL_RCC_GetSysClockFreq+0x2d4>)
90009012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90009014:	0a5b      	lsrs	r3, r3, #9
90009016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000901a:	3301      	adds	r3, #1
9000901c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
9000901e:	683b      	ldr	r3, [r7, #0]
90009020:	ee07 3a90 	vmov	s15, r3
90009024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90009028:	edd7 6a07 	vldr	s13, [r7, #28]
9000902c:	eec6 7a87 	vdiv.f32	s15, s13, s14
90009030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90009034:	ee17 3a90 	vmov	r3, s15
90009038:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
9000903a:	e005      	b.n	90009048 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
9000903c:	2300      	movs	r3, #0
9000903e:	61bb      	str	r3, [r7, #24]
    break;
90009040:	e002      	b.n	90009048 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
90009042:	4b07      	ldr	r3, [pc, #28]	; (90009060 <HAL_RCC_GetSysClockFreq+0x2dc>)
90009044:	61bb      	str	r3, [r7, #24]
    break;
90009046:	bf00      	nop
  }

  return sysclockfreq;
90009048:	69bb      	ldr	r3, [r7, #24]
}
9000904a:	4618      	mov	r0, r3
9000904c:	3724      	adds	r7, #36	; 0x24
9000904e:	46bd      	mov	sp, r7
90009050:	f85d 7b04 	ldr.w	r7, [sp], #4
90009054:	4770      	bx	lr
90009056:	bf00      	nop
90009058:	58024400 	.word	0x58024400
9000905c:	03d09000 	.word	0x03d09000
90009060:	003d0900 	.word	0x003d0900
90009064:	02dc6c00 	.word	0x02dc6c00
90009068:	46000000 	.word	0x46000000
9000906c:	4c742400 	.word	0x4c742400
90009070:	4a742400 	.word	0x4a742400
90009074:	4c371b00 	.word	0x4c371b00

90009078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90009078:	b580      	push	{r7, lr}
9000907a:	b082      	sub	sp, #8
9000907c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000907e:	f7ff fe81 	bl	90008d84 <HAL_RCC_GetSysClockFreq>
90009082:	4602      	mov	r2, r0
90009084:	4b10      	ldr	r3, [pc, #64]	; (900090c8 <HAL_RCC_GetHCLKFreq+0x50>)
90009086:	699b      	ldr	r3, [r3, #24]
90009088:	0a1b      	lsrs	r3, r3, #8
9000908a:	f003 030f 	and.w	r3, r3, #15
9000908e:	490f      	ldr	r1, [pc, #60]	; (900090cc <HAL_RCC_GetHCLKFreq+0x54>)
90009090:	5ccb      	ldrb	r3, [r1, r3]
90009092:	f003 031f 	and.w	r3, r3, #31
90009096:	fa22 f303 	lsr.w	r3, r2, r3
9000909a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000909c:	4b0a      	ldr	r3, [pc, #40]	; (900090c8 <HAL_RCC_GetHCLKFreq+0x50>)
9000909e:	699b      	ldr	r3, [r3, #24]
900090a0:	f003 030f 	and.w	r3, r3, #15
900090a4:	4a09      	ldr	r2, [pc, #36]	; (900090cc <HAL_RCC_GetHCLKFreq+0x54>)
900090a6:	5cd3      	ldrb	r3, [r2, r3]
900090a8:	f003 031f 	and.w	r3, r3, #31
900090ac:	687a      	ldr	r2, [r7, #4]
900090ae:	fa22 f303 	lsr.w	r3, r2, r3
900090b2:	4a07      	ldr	r2, [pc, #28]	; (900090d0 <HAL_RCC_GetHCLKFreq+0x58>)
900090b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900090b6:	4a07      	ldr	r2, [pc, #28]	; (900090d4 <HAL_RCC_GetHCLKFreq+0x5c>)
900090b8:	687b      	ldr	r3, [r7, #4]
900090ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
900090bc:	4b04      	ldr	r3, [pc, #16]	; (900090d0 <HAL_RCC_GetHCLKFreq+0x58>)
900090be:	681b      	ldr	r3, [r3, #0]
}
900090c0:	4618      	mov	r0, r3
900090c2:	3708      	adds	r7, #8
900090c4:	46bd      	mov	sp, r7
900090c6:	bd80      	pop	{r7, pc}
900090c8:	58024400 	.word	0x58024400
900090cc:	90013ef0 	.word	0x90013ef0
900090d0:	24000030 	.word	0x24000030
900090d4:	2400002c 	.word	0x2400002c

900090d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
900090d8:	b580      	push	{r7, lr}
900090da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
900090dc:	f7ff ffcc 	bl	90009078 <HAL_RCC_GetHCLKFreq>
900090e0:	4602      	mov	r2, r0
900090e2:	4b06      	ldr	r3, [pc, #24]	; (900090fc <HAL_RCC_GetPCLK1Freq+0x24>)
900090e4:	69db      	ldr	r3, [r3, #28]
900090e6:	091b      	lsrs	r3, r3, #4
900090e8:	f003 0307 	and.w	r3, r3, #7
900090ec:	4904      	ldr	r1, [pc, #16]	; (90009100 <HAL_RCC_GetPCLK1Freq+0x28>)
900090ee:	5ccb      	ldrb	r3, [r1, r3]
900090f0:	f003 031f 	and.w	r3, r3, #31
900090f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
900090f8:	4618      	mov	r0, r3
900090fa:	bd80      	pop	{r7, pc}
900090fc:	58024400 	.word	0x58024400
90009100:	90013ef0 	.word	0x90013ef0

90009104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90009104:	b580      	push	{r7, lr}
90009106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90009108:	f7ff ffb6 	bl	90009078 <HAL_RCC_GetHCLKFreq>
9000910c:	4602      	mov	r2, r0
9000910e:	4b06      	ldr	r3, [pc, #24]	; (90009128 <HAL_RCC_GetPCLK2Freq+0x24>)
90009110:	69db      	ldr	r3, [r3, #28]
90009112:	0a1b      	lsrs	r3, r3, #8
90009114:	f003 0307 	and.w	r3, r3, #7
90009118:	4904      	ldr	r1, [pc, #16]	; (9000912c <HAL_RCC_GetPCLK2Freq+0x28>)
9000911a:	5ccb      	ldrb	r3, [r1, r3]
9000911c:	f003 031f 	and.w	r3, r3, #31
90009120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90009124:	4618      	mov	r0, r3
90009126:	bd80      	pop	{r7, pc}
90009128:	58024400 	.word	0x58024400
9000912c:	90013ef0 	.word	0x90013ef0

90009130 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
90009130:	b480      	push	{r7}
90009132:	b083      	sub	sp, #12
90009134:	af00      	add	r7, sp, #0
90009136:	6078      	str	r0, [r7, #4]
90009138:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000913a:	687b      	ldr	r3, [r7, #4]
9000913c:	223f      	movs	r2, #63	; 0x3f
9000913e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
90009140:	4b1a      	ldr	r3, [pc, #104]	; (900091ac <HAL_RCC_GetClockConfig+0x7c>)
90009142:	691b      	ldr	r3, [r3, #16]
90009144:	f003 0207 	and.w	r2, r3, #7
90009148:	687b      	ldr	r3, [r7, #4]
9000914a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000914c:	4b17      	ldr	r3, [pc, #92]	; (900091ac <HAL_RCC_GetClockConfig+0x7c>)
9000914e:	699b      	ldr	r3, [r3, #24]
90009150:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
90009154:	687b      	ldr	r3, [r7, #4]
90009156:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
90009158:	4b14      	ldr	r3, [pc, #80]	; (900091ac <HAL_RCC_GetClockConfig+0x7c>)
9000915a:	699b      	ldr	r3, [r3, #24]
9000915c:	f003 020f 	and.w	r2, r3, #15
90009160:	687b      	ldr	r3, [r7, #4]
90009162:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
90009164:	4b11      	ldr	r3, [pc, #68]	; (900091ac <HAL_RCC_GetClockConfig+0x7c>)
90009166:	699b      	ldr	r3, [r3, #24]
90009168:	f003 0270 	and.w	r2, r3, #112	; 0x70
9000916c:	687b      	ldr	r3, [r7, #4]
9000916e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
90009170:	4b0e      	ldr	r3, [pc, #56]	; (900091ac <HAL_RCC_GetClockConfig+0x7c>)
90009172:	69db      	ldr	r3, [r3, #28]
90009174:	f003 0270 	and.w	r2, r3, #112	; 0x70
90009178:	687b      	ldr	r3, [r7, #4]
9000917a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000917c:	4b0b      	ldr	r3, [pc, #44]	; (900091ac <HAL_RCC_GetClockConfig+0x7c>)
9000917e:	69db      	ldr	r3, [r3, #28]
90009180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
90009184:	687b      	ldr	r3, [r7, #4]
90009186:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
90009188:	4b08      	ldr	r3, [pc, #32]	; (900091ac <HAL_RCC_GetClockConfig+0x7c>)
9000918a:	6a1b      	ldr	r3, [r3, #32]
9000918c:	f003 0270 	and.w	r2, r3, #112	; 0x70
90009190:	687b      	ldr	r3, [r7, #4]
90009192:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
90009194:	4b06      	ldr	r3, [pc, #24]	; (900091b0 <HAL_RCC_GetClockConfig+0x80>)
90009196:	681b      	ldr	r3, [r3, #0]
90009198:	f003 020f 	and.w	r2, r3, #15
9000919c:	683b      	ldr	r3, [r7, #0]
9000919e:	601a      	str	r2, [r3, #0]
}
900091a0:	bf00      	nop
900091a2:	370c      	adds	r7, #12
900091a4:	46bd      	mov	sp, r7
900091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900091aa:	4770      	bx	lr
900091ac:	58024400 	.word	0x58024400
900091b0:	52002000 	.word	0x52002000

900091b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
900091b4:	b580      	push	{r7, lr}
900091b6:	b086      	sub	sp, #24
900091b8:	af00      	add	r7, sp, #0
900091ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
900091bc:	2300      	movs	r3, #0
900091be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
900091c0:	2300      	movs	r3, #0
900091c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900091c4:	687b      	ldr	r3, [r7, #4]
900091c6:	681b      	ldr	r3, [r3, #0]
900091c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900091cc:	2b00      	cmp	r3, #0
900091ce:	d03f      	beq.n	90009250 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
900091d0:	687b      	ldr	r3, [r7, #4]
900091d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900091d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
900091d8:	d02a      	beq.n	90009230 <HAL_RCCEx_PeriphCLKConfig+0x7c>
900091da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
900091de:	d824      	bhi.n	9000922a <HAL_RCCEx_PeriphCLKConfig+0x76>
900091e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900091e4:	d018      	beq.n	90009218 <HAL_RCCEx_PeriphCLKConfig+0x64>
900091e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900091ea:	d81e      	bhi.n	9000922a <HAL_RCCEx_PeriphCLKConfig+0x76>
900091ec:	2b00      	cmp	r3, #0
900091ee:	d003      	beq.n	900091f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
900091f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900091f4:	d007      	beq.n	90009206 <HAL_RCCEx_PeriphCLKConfig+0x52>
900091f6:	e018      	b.n	9000922a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900091f8:	4ba3      	ldr	r3, [pc, #652]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900091fc:	4aa2      	ldr	r2, [pc, #648]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900091fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90009202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
90009204:	e015      	b.n	90009232 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90009206:	687b      	ldr	r3, [r7, #4]
90009208:	3304      	adds	r3, #4
9000920a:	2102      	movs	r1, #2
9000920c:	4618      	mov	r0, r3
9000920e:	f001 f9d5 	bl	9000a5bc <RCCEx_PLL2_Config>
90009212:	4603      	mov	r3, r0
90009214:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
90009216:	e00c      	b.n	90009232 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90009218:	687b      	ldr	r3, [r7, #4]
9000921a:	3324      	adds	r3, #36	; 0x24
9000921c:	2102      	movs	r1, #2
9000921e:	4618      	mov	r0, r3
90009220:	f001 fa7e 	bl	9000a720 <RCCEx_PLL3_Config>
90009224:	4603      	mov	r3, r0
90009226:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
90009228:	e003      	b.n	90009232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
9000922a:	2301      	movs	r3, #1
9000922c:	75fb      	strb	r3, [r7, #23]
      break;
9000922e:	e000      	b.n	90009232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
90009230:	bf00      	nop
    }

    if(ret == HAL_OK)
90009232:	7dfb      	ldrb	r3, [r7, #23]
90009234:	2b00      	cmp	r3, #0
90009236:	d109      	bne.n	9000924c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90009238:	4b93      	ldr	r3, [pc, #588]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000923a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000923c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90009240:	687b      	ldr	r3, [r7, #4]
90009242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90009244:	4990      	ldr	r1, [pc, #576]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009246:	4313      	orrs	r3, r2
90009248:	650b      	str	r3, [r1, #80]	; 0x50
9000924a:	e001      	b.n	90009250 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000924c:	7dfb      	ldrb	r3, [r7, #23]
9000924e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90009250:	687b      	ldr	r3, [r7, #4]
90009252:	681b      	ldr	r3, [r3, #0]
90009254:	f403 7380 	and.w	r3, r3, #256	; 0x100
90009258:	2b00      	cmp	r3, #0
9000925a:	d03d      	beq.n	900092d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
9000925c:	687b      	ldr	r3, [r7, #4]
9000925e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009260:	2b04      	cmp	r3, #4
90009262:	d826      	bhi.n	900092b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
90009264:	a201      	add	r2, pc, #4	; (adr r2, 9000926c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
90009266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000926a:	bf00      	nop
9000926c:	90009281 	.word	0x90009281
90009270:	9000928f 	.word	0x9000928f
90009274:	900092a1 	.word	0x900092a1
90009278:	900092b9 	.word	0x900092b9
9000927c:	900092b9 	.word	0x900092b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90009280:	4b81      	ldr	r3, [pc, #516]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009284:	4a80      	ldr	r2, [pc, #512]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000928a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
9000928c:	e015      	b.n	900092ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000928e:	687b      	ldr	r3, [r7, #4]
90009290:	3304      	adds	r3, #4
90009292:	2100      	movs	r1, #0
90009294:	4618      	mov	r0, r3
90009296:	f001 f991 	bl	9000a5bc <RCCEx_PLL2_Config>
9000929a:	4603      	mov	r3, r0
9000929c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
9000929e:	e00c      	b.n	900092ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
900092a0:	687b      	ldr	r3, [r7, #4]
900092a2:	3324      	adds	r3, #36	; 0x24
900092a4:	2100      	movs	r1, #0
900092a6:	4618      	mov	r0, r3
900092a8:	f001 fa3a 	bl	9000a720 <RCCEx_PLL3_Config>
900092ac:	4603      	mov	r3, r0
900092ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900092b0:	e003      	b.n	900092ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900092b2:	2301      	movs	r3, #1
900092b4:	75fb      	strb	r3, [r7, #23]
      break;
900092b6:	e000      	b.n	900092ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
900092b8:	bf00      	nop
    }

    if(ret == HAL_OK)
900092ba:	7dfb      	ldrb	r3, [r7, #23]
900092bc:	2b00      	cmp	r3, #0
900092be:	d109      	bne.n	900092d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900092c0:	4b71      	ldr	r3, [pc, #452]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900092c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900092c4:	f023 0207 	bic.w	r2, r3, #7
900092c8:	687b      	ldr	r3, [r7, #4]
900092ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900092cc:	496e      	ldr	r1, [pc, #440]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900092ce:	4313      	orrs	r3, r2
900092d0:	650b      	str	r3, [r1, #80]	; 0x50
900092d2:	e001      	b.n	900092d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
900092d4:	7dfb      	ldrb	r3, [r7, #23]
900092d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
900092d8:	687b      	ldr	r3, [r7, #4]
900092da:	681b      	ldr	r3, [r3, #0]
900092dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
900092e0:	2b00      	cmp	r3, #0
900092e2:	d042      	beq.n	9000936a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
900092e4:	687b      	ldr	r3, [r7, #4]
900092e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900092e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900092ec:	d02b      	beq.n	90009346 <HAL_RCCEx_PeriphCLKConfig+0x192>
900092ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900092f2:	d825      	bhi.n	90009340 <HAL_RCCEx_PeriphCLKConfig+0x18c>
900092f4:	2bc0      	cmp	r3, #192	; 0xc0
900092f6:	d028      	beq.n	9000934a <HAL_RCCEx_PeriphCLKConfig+0x196>
900092f8:	2bc0      	cmp	r3, #192	; 0xc0
900092fa:	d821      	bhi.n	90009340 <HAL_RCCEx_PeriphCLKConfig+0x18c>
900092fc:	2b80      	cmp	r3, #128	; 0x80
900092fe:	d016      	beq.n	9000932e <HAL_RCCEx_PeriphCLKConfig+0x17a>
90009300:	2b80      	cmp	r3, #128	; 0x80
90009302:	d81d      	bhi.n	90009340 <HAL_RCCEx_PeriphCLKConfig+0x18c>
90009304:	2b00      	cmp	r3, #0
90009306:	d002      	beq.n	9000930e <HAL_RCCEx_PeriphCLKConfig+0x15a>
90009308:	2b40      	cmp	r3, #64	; 0x40
9000930a:	d007      	beq.n	9000931c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000930c:	e018      	b.n	90009340 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000930e:	4b5e      	ldr	r3, [pc, #376]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009312:	4a5d      	ldr	r2, [pc, #372]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90009318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
9000931a:	e017      	b.n	9000934c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000931c:	687b      	ldr	r3, [r7, #4]
9000931e:	3304      	adds	r3, #4
90009320:	2100      	movs	r1, #0
90009322:	4618      	mov	r0, r3
90009324:	f001 f94a 	bl	9000a5bc <RCCEx_PLL2_Config>
90009328:	4603      	mov	r3, r0
9000932a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
9000932c:	e00e      	b.n	9000934c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
9000932e:	687b      	ldr	r3, [r7, #4]
90009330:	3324      	adds	r3, #36	; 0x24
90009332:	2100      	movs	r1, #0
90009334:	4618      	mov	r0, r3
90009336:	f001 f9f3 	bl	9000a720 <RCCEx_PLL3_Config>
9000933a:	4603      	mov	r3, r0
9000933c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
9000933e:	e005      	b.n	9000934c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009340:	2301      	movs	r3, #1
90009342:	75fb      	strb	r3, [r7, #23]
      break;
90009344:	e002      	b.n	9000934c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
90009346:	bf00      	nop
90009348:	e000      	b.n	9000934c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
9000934a:	bf00      	nop
    }

    if(ret == HAL_OK)
9000934c:	7dfb      	ldrb	r3, [r7, #23]
9000934e:	2b00      	cmp	r3, #0
90009350:	d109      	bne.n	90009366 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90009352:	4b4d      	ldr	r3, [pc, #308]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90009356:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
9000935a:	687b      	ldr	r3, [r7, #4]
9000935c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000935e:	494a      	ldr	r1, [pc, #296]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009360:	4313      	orrs	r3, r2
90009362:	650b      	str	r3, [r1, #80]	; 0x50
90009364:	e001      	b.n	9000936a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009366:	7dfb      	ldrb	r3, [r7, #23]
90009368:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000936a:	687b      	ldr	r3, [r7, #4]
9000936c:	681b      	ldr	r3, [r3, #0]
9000936e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90009372:	2b00      	cmp	r3, #0
90009374:	d049      	beq.n	9000940a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
90009376:	687b      	ldr	r3, [r7, #4]
90009378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
9000937c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90009380:	d030      	beq.n	900093e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
90009382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90009386:	d82a      	bhi.n	900093de <HAL_RCCEx_PeriphCLKConfig+0x22a>
90009388:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
9000938c:	d02c      	beq.n	900093e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
9000938e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90009392:	d824      	bhi.n	900093de <HAL_RCCEx_PeriphCLKConfig+0x22a>
90009394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90009398:	d018      	beq.n	900093cc <HAL_RCCEx_PeriphCLKConfig+0x218>
9000939a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000939e:	d81e      	bhi.n	900093de <HAL_RCCEx_PeriphCLKConfig+0x22a>
900093a0:	2b00      	cmp	r3, #0
900093a2:	d003      	beq.n	900093ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
900093a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900093a8:	d007      	beq.n	900093ba <HAL_RCCEx_PeriphCLKConfig+0x206>
900093aa:	e018      	b.n	900093de <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900093ac:	4b36      	ldr	r3, [pc, #216]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900093b0:	4a35      	ldr	r2, [pc, #212]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900093b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900093b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900093b8:	e017      	b.n	900093ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900093ba:	687b      	ldr	r3, [r7, #4]
900093bc:	3304      	adds	r3, #4
900093be:	2100      	movs	r1, #0
900093c0:	4618      	mov	r0, r3
900093c2:	f001 f8fb 	bl	9000a5bc <RCCEx_PLL2_Config>
900093c6:	4603      	mov	r3, r0
900093c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
900093ca:	e00e      	b.n	900093ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
900093cc:	687b      	ldr	r3, [r7, #4]
900093ce:	3324      	adds	r3, #36	; 0x24
900093d0:	2100      	movs	r1, #0
900093d2:	4618      	mov	r0, r3
900093d4:	f001 f9a4 	bl	9000a720 <RCCEx_PLL3_Config>
900093d8:	4603      	mov	r3, r0
900093da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900093dc:	e005      	b.n	900093ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
900093de:	2301      	movs	r3, #1
900093e0:	75fb      	strb	r3, [r7, #23]
      break;
900093e2:	e002      	b.n	900093ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
900093e4:	bf00      	nop
900093e6:	e000      	b.n	900093ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
900093e8:	bf00      	nop
    }

    if(ret == HAL_OK)
900093ea:	7dfb      	ldrb	r3, [r7, #23]
900093ec:	2b00      	cmp	r3, #0
900093ee:	d10a      	bne.n	90009406 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
900093f0:	4b25      	ldr	r3, [pc, #148]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900093f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900093f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
900093f8:	687b      	ldr	r3, [r7, #4]
900093fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900093fe:	4922      	ldr	r1, [pc, #136]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009400:	4313      	orrs	r3, r2
90009402:	658b      	str	r3, [r1, #88]	; 0x58
90009404:	e001      	b.n	9000940a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009406:	7dfb      	ldrb	r3, [r7, #23]
90009408:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000940a:	687b      	ldr	r3, [r7, #4]
9000940c:	681b      	ldr	r3, [r3, #0]
9000940e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90009412:	2b00      	cmp	r3, #0
90009414:	d04b      	beq.n	900094ae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
90009416:	687b      	ldr	r3, [r7, #4]
90009418:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
9000941c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90009420:	d030      	beq.n	90009484 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
90009422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90009426:	d82a      	bhi.n	9000947e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
90009428:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
9000942c:	d02e      	beq.n	9000948c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
9000942e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90009432:	d824      	bhi.n	9000947e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
90009434:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90009438:	d018      	beq.n	9000946c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000943a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000943e:	d81e      	bhi.n	9000947e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
90009440:	2b00      	cmp	r3, #0
90009442:	d003      	beq.n	9000944c <HAL_RCCEx_PeriphCLKConfig+0x298>
90009444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90009448:	d007      	beq.n	9000945a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
9000944a:	e018      	b.n	9000947e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000944c:	4b0e      	ldr	r3, [pc, #56]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009450:	4a0d      	ldr	r2, [pc, #52]	; (90009488 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90009452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90009456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90009458:	e019      	b.n	9000948e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000945a:	687b      	ldr	r3, [r7, #4]
9000945c:	3304      	adds	r3, #4
9000945e:	2100      	movs	r1, #0
90009460:	4618      	mov	r0, r3
90009462:	f001 f8ab 	bl	9000a5bc <RCCEx_PLL2_Config>
90009466:	4603      	mov	r3, r0
90009468:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
9000946a:	e010      	b.n	9000948e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000946c:	687b      	ldr	r3, [r7, #4]
9000946e:	3324      	adds	r3, #36	; 0x24
90009470:	2100      	movs	r1, #0
90009472:	4618      	mov	r0, r3
90009474:	f001 f954 	bl	9000a720 <RCCEx_PLL3_Config>
90009478:	4603      	mov	r3, r0
9000947a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
9000947c:	e007      	b.n	9000948e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
9000947e:	2301      	movs	r3, #1
90009480:	75fb      	strb	r3, [r7, #23]
      break;
90009482:	e004      	b.n	9000948e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
90009484:	bf00      	nop
90009486:	e002      	b.n	9000948e <HAL_RCCEx_PeriphCLKConfig+0x2da>
90009488:	58024400 	.word	0x58024400
      break;
9000948c:	bf00      	nop
    }

    if(ret == HAL_OK)
9000948e:	7dfb      	ldrb	r3, [r7, #23]
90009490:	2b00      	cmp	r3, #0
90009492:	d10a      	bne.n	900094aa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90009494:	4b99      	ldr	r3, [pc, #612]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
90009496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90009498:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
9000949c:	687b      	ldr	r3, [r7, #4]
9000949e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
900094a2:	4996      	ldr	r1, [pc, #600]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
900094a4:	4313      	orrs	r3, r2
900094a6:	658b      	str	r3, [r1, #88]	; 0x58
900094a8:	e001      	b.n	900094ae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
900094aa:	7dfb      	ldrb	r3, [r7, #23]
900094ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
900094ae:	687b      	ldr	r3, [r7, #4]
900094b0:	681b      	ldr	r3, [r3, #0]
900094b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900094b6:	2b00      	cmp	r3, #0
900094b8:	d032      	beq.n	90009520 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
900094ba:	687b      	ldr	r3, [r7, #4]
900094bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900094be:	2b30      	cmp	r3, #48	; 0x30
900094c0:	d01c      	beq.n	900094fc <HAL_RCCEx_PeriphCLKConfig+0x348>
900094c2:	2b30      	cmp	r3, #48	; 0x30
900094c4:	d817      	bhi.n	900094f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
900094c6:	2b20      	cmp	r3, #32
900094c8:	d00c      	beq.n	900094e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
900094ca:	2b20      	cmp	r3, #32
900094cc:	d813      	bhi.n	900094f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
900094ce:	2b00      	cmp	r3, #0
900094d0:	d016      	beq.n	90009500 <HAL_RCCEx_PeriphCLKConfig+0x34c>
900094d2:	2b10      	cmp	r3, #16
900094d4:	d10f      	bne.n	900094f6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900094d6:	4b89      	ldr	r3, [pc, #548]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
900094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900094da:	4a88      	ldr	r2, [pc, #544]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
900094dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900094e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
900094e2:	e00e      	b.n	90009502 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
900094e4:	687b      	ldr	r3, [r7, #4]
900094e6:	3304      	adds	r3, #4
900094e8:	2102      	movs	r1, #2
900094ea:	4618      	mov	r0, r3
900094ec:	f001 f866 	bl	9000a5bc <RCCEx_PLL2_Config>
900094f0:	4603      	mov	r3, r0
900094f2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
900094f4:	e005      	b.n	90009502 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
900094f6:	2301      	movs	r3, #1
900094f8:	75fb      	strb	r3, [r7, #23]
      break;
900094fa:	e002      	b.n	90009502 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
900094fc:	bf00      	nop
900094fe:	e000      	b.n	90009502 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
90009500:	bf00      	nop
    }

    if(ret == HAL_OK)
90009502:	7dfb      	ldrb	r3, [r7, #23]
90009504:	2b00      	cmp	r3, #0
90009506:	d109      	bne.n	9000951c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90009508:	4b7c      	ldr	r3, [pc, #496]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000950a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000950c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
90009510:	687b      	ldr	r3, [r7, #4]
90009512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90009514:	4979      	ldr	r1, [pc, #484]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
90009516:	4313      	orrs	r3, r2
90009518:	64cb      	str	r3, [r1, #76]	; 0x4c
9000951a:	e001      	b.n	90009520 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000951c:	7dfb      	ldrb	r3, [r7, #23]
9000951e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90009520:	687b      	ldr	r3, [r7, #4]
90009522:	681b      	ldr	r3, [r3, #0]
90009524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90009528:	2b00      	cmp	r3, #0
9000952a:	d047      	beq.n	900095bc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
9000952c:	687b      	ldr	r3, [r7, #4]
9000952e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90009530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90009534:	d030      	beq.n	90009598 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
90009536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000953a:	d82a      	bhi.n	90009592 <HAL_RCCEx_PeriphCLKConfig+0x3de>
9000953c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90009540:	d02c      	beq.n	9000959c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
90009542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90009546:	d824      	bhi.n	90009592 <HAL_RCCEx_PeriphCLKConfig+0x3de>
90009548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000954c:	d018      	beq.n	90009580 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
9000954e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90009552:	d81e      	bhi.n	90009592 <HAL_RCCEx_PeriphCLKConfig+0x3de>
90009554:	2b00      	cmp	r3, #0
90009556:	d003      	beq.n	90009560 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
90009558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000955c:	d007      	beq.n	9000956e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
9000955e:	e018      	b.n	90009592 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90009560:	4b66      	ldr	r3, [pc, #408]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
90009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009564:	4a65      	ldr	r2, [pc, #404]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
90009566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000956a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
9000956c:	e017      	b.n	9000959e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000956e:	687b      	ldr	r3, [r7, #4]
90009570:	3304      	adds	r3, #4
90009572:	2100      	movs	r1, #0
90009574:	4618      	mov	r0, r3
90009576:	f001 f821 	bl	9000a5bc <RCCEx_PLL2_Config>
9000957a:	4603      	mov	r3, r0
9000957c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
9000957e:	e00e      	b.n	9000959e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90009580:	687b      	ldr	r3, [r7, #4]
90009582:	3324      	adds	r3, #36	; 0x24
90009584:	2100      	movs	r1, #0
90009586:	4618      	mov	r0, r3
90009588:	f001 f8ca 	bl	9000a720 <RCCEx_PLL3_Config>
9000958c:	4603      	mov	r3, r0
9000958e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
90009590:	e005      	b.n	9000959e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009592:	2301      	movs	r3, #1
90009594:	75fb      	strb	r3, [r7, #23]
      break;
90009596:	e002      	b.n	9000959e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
90009598:	bf00      	nop
9000959a:	e000      	b.n	9000959e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
9000959c:	bf00      	nop
    }

    if(ret == HAL_OK)
9000959e:	7dfb      	ldrb	r3, [r7, #23]
900095a0:	2b00      	cmp	r3, #0
900095a2:	d109      	bne.n	900095b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
900095a4:	4b55      	ldr	r3, [pc, #340]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
900095a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900095a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
900095ac:	687b      	ldr	r3, [r7, #4]
900095ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900095b0:	4952      	ldr	r1, [pc, #328]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
900095b2:	4313      	orrs	r3, r2
900095b4:	650b      	str	r3, [r1, #80]	; 0x50
900095b6:	e001      	b.n	900095bc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
900095b8:	7dfb      	ldrb	r3, [r7, #23]
900095ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
900095bc:	687b      	ldr	r3, [r7, #4]
900095be:	681b      	ldr	r3, [r3, #0]
900095c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900095c4:	2b00      	cmp	r3, #0
900095c6:	d049      	beq.n	9000965c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
900095c8:	687b      	ldr	r3, [r7, #4]
900095ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900095cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900095d0:	d02e      	beq.n	90009630 <HAL_RCCEx_PeriphCLKConfig+0x47c>
900095d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900095d6:	d828      	bhi.n	9000962a <HAL_RCCEx_PeriphCLKConfig+0x476>
900095d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
900095dc:	d02a      	beq.n	90009634 <HAL_RCCEx_PeriphCLKConfig+0x480>
900095de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
900095e2:	d822      	bhi.n	9000962a <HAL_RCCEx_PeriphCLKConfig+0x476>
900095e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
900095e8:	d026      	beq.n	90009638 <HAL_RCCEx_PeriphCLKConfig+0x484>
900095ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
900095ee:	d81c      	bhi.n	9000962a <HAL_RCCEx_PeriphCLKConfig+0x476>
900095f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900095f4:	d010      	beq.n	90009618 <HAL_RCCEx_PeriphCLKConfig+0x464>
900095f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
900095fa:	d816      	bhi.n	9000962a <HAL_RCCEx_PeriphCLKConfig+0x476>
900095fc:	2b00      	cmp	r3, #0
900095fe:	d01d      	beq.n	9000963c <HAL_RCCEx_PeriphCLKConfig+0x488>
90009600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009604:	d111      	bne.n	9000962a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90009606:	687b      	ldr	r3, [r7, #4]
90009608:	3304      	adds	r3, #4
9000960a:	2101      	movs	r1, #1
9000960c:	4618      	mov	r0, r3
9000960e:	f000 ffd5 	bl	9000a5bc <RCCEx_PLL2_Config>
90009612:	4603      	mov	r3, r0
90009614:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
90009616:	e012      	b.n	9000963e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90009618:	687b      	ldr	r3, [r7, #4]
9000961a:	3324      	adds	r3, #36	; 0x24
9000961c:	2101      	movs	r1, #1
9000961e:	4618      	mov	r0, r3
90009620:	f001 f87e 	bl	9000a720 <RCCEx_PLL3_Config>
90009624:	4603      	mov	r3, r0
90009626:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
90009628:	e009      	b.n	9000963e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
9000962a:	2301      	movs	r3, #1
9000962c:	75fb      	strb	r3, [r7, #23]
      break;
9000962e:	e006      	b.n	9000963e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90009630:	bf00      	nop
90009632:	e004      	b.n	9000963e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90009634:	bf00      	nop
90009636:	e002      	b.n	9000963e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90009638:	bf00      	nop
9000963a:	e000      	b.n	9000963e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
9000963c:	bf00      	nop
    }

    if(ret == HAL_OK)
9000963e:	7dfb      	ldrb	r3, [r7, #23]
90009640:	2b00      	cmp	r3, #0
90009642:	d109      	bne.n	90009658 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90009644:	4b2d      	ldr	r3, [pc, #180]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
90009646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90009648:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
9000964c:	687b      	ldr	r3, [r7, #4]
9000964e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90009650:	492a      	ldr	r1, [pc, #168]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
90009652:	4313      	orrs	r3, r2
90009654:	650b      	str	r3, [r1, #80]	; 0x50
90009656:	e001      	b.n	9000965c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009658:	7dfb      	ldrb	r3, [r7, #23]
9000965a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000965c:	687b      	ldr	r3, [r7, #4]
9000965e:	681b      	ldr	r3, [r3, #0]
90009660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90009664:	2b00      	cmp	r3, #0
90009666:	d04d      	beq.n	90009704 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
90009668:	687b      	ldr	r3, [r7, #4]
9000966a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
9000966e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90009672:	d02e      	beq.n	900096d2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
90009674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90009678:	d828      	bhi.n	900096cc <HAL_RCCEx_PeriphCLKConfig+0x518>
9000967a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000967e:	d02a      	beq.n	900096d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
90009680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90009684:	d822      	bhi.n	900096cc <HAL_RCCEx_PeriphCLKConfig+0x518>
90009686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
9000968a:	d026      	beq.n	900096da <HAL_RCCEx_PeriphCLKConfig+0x526>
9000968c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90009690:	d81c      	bhi.n	900096cc <HAL_RCCEx_PeriphCLKConfig+0x518>
90009692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90009696:	d010      	beq.n	900096ba <HAL_RCCEx_PeriphCLKConfig+0x506>
90009698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000969c:	d816      	bhi.n	900096cc <HAL_RCCEx_PeriphCLKConfig+0x518>
9000969e:	2b00      	cmp	r3, #0
900096a0:	d01d      	beq.n	900096de <HAL_RCCEx_PeriphCLKConfig+0x52a>
900096a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900096a6:	d111      	bne.n	900096cc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
900096a8:	687b      	ldr	r3, [r7, #4]
900096aa:	3304      	adds	r3, #4
900096ac:	2101      	movs	r1, #1
900096ae:	4618      	mov	r0, r3
900096b0:	f000 ff84 	bl	9000a5bc <RCCEx_PLL2_Config>
900096b4:	4603      	mov	r3, r0
900096b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
900096b8:	e012      	b.n	900096e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
900096ba:	687b      	ldr	r3, [r7, #4]
900096bc:	3324      	adds	r3, #36	; 0x24
900096be:	2101      	movs	r1, #1
900096c0:	4618      	mov	r0, r3
900096c2:	f001 f82d 	bl	9000a720 <RCCEx_PLL3_Config>
900096c6:	4603      	mov	r3, r0
900096c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
900096ca:	e009      	b.n	900096e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
900096cc:	2301      	movs	r3, #1
900096ce:	75fb      	strb	r3, [r7, #23]
      break;
900096d0:	e006      	b.n	900096e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
900096d2:	bf00      	nop
900096d4:	e004      	b.n	900096e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
900096d6:	bf00      	nop
900096d8:	e002      	b.n	900096e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
900096da:	bf00      	nop
900096dc:	e000      	b.n	900096e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
900096de:	bf00      	nop
    }

    if(ret == HAL_OK)
900096e0:	7dfb      	ldrb	r3, [r7, #23]
900096e2:	2b00      	cmp	r3, #0
900096e4:	d10c      	bne.n	90009700 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
900096e6:	4b05      	ldr	r3, [pc, #20]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
900096e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900096ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
900096ee:	687b      	ldr	r3, [r7, #4]
900096f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900096f4:	4901      	ldr	r1, [pc, #4]	; (900096fc <HAL_RCCEx_PeriphCLKConfig+0x548>)
900096f6:	4313      	orrs	r3, r2
900096f8:	658b      	str	r3, [r1, #88]	; 0x58
900096fa:	e003      	b.n	90009704 <HAL_RCCEx_PeriphCLKConfig+0x550>
900096fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90009700:	7dfb      	ldrb	r3, [r7, #23]
90009702:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90009704:	687b      	ldr	r3, [r7, #4]
90009706:	681b      	ldr	r3, [r3, #0]
90009708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
9000970c:	2b00      	cmp	r3, #0
9000970e:	d02f      	beq.n	90009770 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
90009710:	687b      	ldr	r3, [r7, #4]
90009712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90009714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90009718:	d00e      	beq.n	90009738 <HAL_RCCEx_PeriphCLKConfig+0x584>
9000971a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000971e:	d814      	bhi.n	9000974a <HAL_RCCEx_PeriphCLKConfig+0x596>
90009720:	2b00      	cmp	r3, #0
90009722:	d015      	beq.n	90009750 <HAL_RCCEx_PeriphCLKConfig+0x59c>
90009724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90009728:	d10f      	bne.n	9000974a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000972a:	4baf      	ldr	r3, [pc, #700]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000972e:	4aae      	ldr	r2, [pc, #696]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90009730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90009734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
90009736:	e00c      	b.n	90009752 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90009738:	687b      	ldr	r3, [r7, #4]
9000973a:	3304      	adds	r3, #4
9000973c:	2101      	movs	r1, #1
9000973e:	4618      	mov	r0, r3
90009740:	f000 ff3c 	bl	9000a5bc <RCCEx_PLL2_Config>
90009744:	4603      	mov	r3, r0
90009746:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
90009748:	e003      	b.n	90009752 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
9000974a:	2301      	movs	r3, #1
9000974c:	75fb      	strb	r3, [r7, #23]
      break;
9000974e:	e000      	b.n	90009752 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
90009750:	bf00      	nop
    }

    if(ret == HAL_OK)
90009752:	7dfb      	ldrb	r3, [r7, #23]
90009754:	2b00      	cmp	r3, #0
90009756:	d109      	bne.n	9000976c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90009758:	4ba3      	ldr	r3, [pc, #652]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000975a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000975c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
90009760:	687b      	ldr	r3, [r7, #4]
90009762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90009764:	49a0      	ldr	r1, [pc, #640]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90009766:	4313      	orrs	r3, r2
90009768:	650b      	str	r3, [r1, #80]	; 0x50
9000976a:	e001      	b.n	90009770 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000976c:	7dfb      	ldrb	r3, [r7, #23]
9000976e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90009770:	687b      	ldr	r3, [r7, #4]
90009772:	681b      	ldr	r3, [r3, #0]
90009774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90009778:	2b00      	cmp	r3, #0
9000977a:	d032      	beq.n	900097e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
9000977c:	687b      	ldr	r3, [r7, #4]
9000977e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90009780:	2b03      	cmp	r3, #3
90009782:	d81b      	bhi.n	900097bc <HAL_RCCEx_PeriphCLKConfig+0x608>
90009784:	a201      	add	r2, pc, #4	; (adr r2, 9000978c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
90009786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000978a:	bf00      	nop
9000978c:	900097c3 	.word	0x900097c3
90009790:	9000979d 	.word	0x9000979d
90009794:	900097ab 	.word	0x900097ab
90009798:	900097c3 	.word	0x900097c3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000979c:	4b92      	ldr	r3, [pc, #584]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900097a0:	4a91      	ldr	r2, [pc, #580]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900097a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900097a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
900097a8:	e00c      	b.n	900097c4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
900097aa:	687b      	ldr	r3, [r7, #4]
900097ac:	3304      	adds	r3, #4
900097ae:	2102      	movs	r1, #2
900097b0:	4618      	mov	r0, r3
900097b2:	f000 ff03 	bl	9000a5bc <RCCEx_PLL2_Config>
900097b6:	4603      	mov	r3, r0
900097b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
900097ba:	e003      	b.n	900097c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
900097bc:	2301      	movs	r3, #1
900097be:	75fb      	strb	r3, [r7, #23]
      break;
900097c0:	e000      	b.n	900097c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
900097c2:	bf00      	nop
    }

    if(ret == HAL_OK)
900097c4:	7dfb      	ldrb	r3, [r7, #23]
900097c6:	2b00      	cmp	r3, #0
900097c8:	d109      	bne.n	900097de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
900097ca:	4b87      	ldr	r3, [pc, #540]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900097cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900097ce:	f023 0203 	bic.w	r2, r3, #3
900097d2:	687b      	ldr	r3, [r7, #4]
900097d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900097d6:	4984      	ldr	r1, [pc, #528]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900097d8:	4313      	orrs	r3, r2
900097da:	64cb      	str	r3, [r1, #76]	; 0x4c
900097dc:	e001      	b.n	900097e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
900097de:	7dfb      	ldrb	r3, [r7, #23]
900097e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
900097e2:	687b      	ldr	r3, [r7, #4]
900097e4:	681b      	ldr	r3, [r3, #0]
900097e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900097ea:	2b00      	cmp	r3, #0
900097ec:	f000 8086 	beq.w	900098fc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900097f0:	4b7e      	ldr	r3, [pc, #504]	; (900099ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
900097f2:	681b      	ldr	r3, [r3, #0]
900097f4:	4a7d      	ldr	r2, [pc, #500]	; (900099ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
900097f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900097fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900097fc:	f7fa f9b8 	bl	90003b70 <HAL_GetTick>
90009800:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90009802:	e009      	b.n	90009818 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90009804:	f7fa f9b4 	bl	90003b70 <HAL_GetTick>
90009808:	4602      	mov	r2, r0
9000980a:	693b      	ldr	r3, [r7, #16]
9000980c:	1ad3      	subs	r3, r2, r3
9000980e:	2b64      	cmp	r3, #100	; 0x64
90009810:	d902      	bls.n	90009818 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
90009812:	2303      	movs	r3, #3
90009814:	75fb      	strb	r3, [r7, #23]
        break;
90009816:	e005      	b.n	90009824 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90009818:	4b74      	ldr	r3, [pc, #464]	; (900099ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
9000981a:	681b      	ldr	r3, [r3, #0]
9000981c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90009820:	2b00      	cmp	r3, #0
90009822:	d0ef      	beq.n	90009804 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
90009824:	7dfb      	ldrb	r3, [r7, #23]
90009826:	2b00      	cmp	r3, #0
90009828:	d166      	bne.n	900098f8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000982a:	4b6f      	ldr	r3, [pc, #444]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000982c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000982e:	687b      	ldr	r3, [r7, #4]
90009830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90009834:	4053      	eors	r3, r2
90009836:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000983a:	2b00      	cmp	r3, #0
9000983c:	d013      	beq.n	90009866 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000983e:	4b6a      	ldr	r3, [pc, #424]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90009840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90009842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90009846:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90009848:	4b67      	ldr	r3, [pc, #412]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000984a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000984c:	4a66      	ldr	r2, [pc, #408]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000984e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90009852:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90009854:	4b64      	ldr	r3, [pc, #400]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90009856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90009858:	4a63      	ldr	r2, [pc, #396]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
9000985a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000985e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90009860:	4a61      	ldr	r2, [pc, #388]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90009862:	68fb      	ldr	r3, [r7, #12]
90009864:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90009866:	687b      	ldr	r3, [r7, #4]
90009868:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000986c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90009870:	d115      	bne.n	9000989e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90009872:	f7fa f97d 	bl	90003b70 <HAL_GetTick>
90009876:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90009878:	e00b      	b.n	90009892 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000987a:	f7fa f979 	bl	90003b70 <HAL_GetTick>
9000987e:	4602      	mov	r2, r0
90009880:	693b      	ldr	r3, [r7, #16]
90009882:	1ad3      	subs	r3, r2, r3
90009884:	f241 3288 	movw	r2, #5000	; 0x1388
90009888:	4293      	cmp	r3, r2
9000988a:	d902      	bls.n	90009892 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
9000988c:	2303      	movs	r3, #3
9000988e:	75fb      	strb	r3, [r7, #23]
            break;
90009890:	e005      	b.n	9000989e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90009892:	4b55      	ldr	r3, [pc, #340]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
90009894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90009896:	f003 0302 	and.w	r3, r3, #2
9000989a:	2b00      	cmp	r3, #0
9000989c:	d0ed      	beq.n	9000987a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
9000989e:	7dfb      	ldrb	r3, [r7, #23]
900098a0:	2b00      	cmp	r3, #0
900098a2:	d126      	bne.n	900098f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
900098a4:	687b      	ldr	r3, [r7, #4]
900098a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900098aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
900098ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900098b2:	d10d      	bne.n	900098d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
900098b4:	4b4c      	ldr	r3, [pc, #304]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900098b6:	691b      	ldr	r3, [r3, #16]
900098b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
900098bc:	687b      	ldr	r3, [r7, #4]
900098be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900098c2:	0919      	lsrs	r1, r3, #4
900098c4:	4b4a      	ldr	r3, [pc, #296]	; (900099f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
900098c6:	400b      	ands	r3, r1
900098c8:	4947      	ldr	r1, [pc, #284]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900098ca:	4313      	orrs	r3, r2
900098cc:	610b      	str	r3, [r1, #16]
900098ce:	e005      	b.n	900098dc <HAL_RCCEx_PeriphCLKConfig+0x728>
900098d0:	4b45      	ldr	r3, [pc, #276]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900098d2:	691b      	ldr	r3, [r3, #16]
900098d4:	4a44      	ldr	r2, [pc, #272]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900098d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
900098da:	6113      	str	r3, [r2, #16]
900098dc:	4b42      	ldr	r3, [pc, #264]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900098de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
900098e0:	687b      	ldr	r3, [r7, #4]
900098e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900098e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
900098ea:	493f      	ldr	r1, [pc, #252]	; (900099e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
900098ec:	4313      	orrs	r3, r2
900098ee:	670b      	str	r3, [r1, #112]	; 0x70
900098f0:	e004      	b.n	900098fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
900098f2:	7dfb      	ldrb	r3, [r7, #23]
900098f4:	75bb      	strb	r3, [r7, #22]
900098f6:	e001      	b.n	900098fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
900098f8:	7dfb      	ldrb	r3, [r7, #23]
900098fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
900098fc:	687b      	ldr	r3, [r7, #4]
900098fe:	681b      	ldr	r3, [r3, #0]
90009900:	f003 0301 	and.w	r3, r3, #1
90009904:	2b00      	cmp	r3, #0
90009906:	f000 8085 	beq.w	90009a14 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
9000990a:	687b      	ldr	r3, [r7, #4]
9000990c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000990e:	2b28      	cmp	r3, #40	; 0x28
90009910:	d866      	bhi.n	900099e0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
90009912:	a201      	add	r2, pc, #4	; (adr r2, 90009918 <HAL_RCCEx_PeriphCLKConfig+0x764>)
90009914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009918:	900099f5 	.word	0x900099f5
9000991c:	900099e1 	.word	0x900099e1
90009920:	900099e1 	.word	0x900099e1
90009924:	900099e1 	.word	0x900099e1
90009928:	900099e1 	.word	0x900099e1
9000992c:	900099e1 	.word	0x900099e1
90009930:	900099e1 	.word	0x900099e1
90009934:	900099e1 	.word	0x900099e1
90009938:	900099bd 	.word	0x900099bd
9000993c:	900099e1 	.word	0x900099e1
90009940:	900099e1 	.word	0x900099e1
90009944:	900099e1 	.word	0x900099e1
90009948:	900099e1 	.word	0x900099e1
9000994c:	900099e1 	.word	0x900099e1
90009950:	900099e1 	.word	0x900099e1
90009954:	900099e1 	.word	0x900099e1
90009958:	900099cf 	.word	0x900099cf
9000995c:	900099e1 	.word	0x900099e1
90009960:	900099e1 	.word	0x900099e1
90009964:	900099e1 	.word	0x900099e1
90009968:	900099e1 	.word	0x900099e1
9000996c:	900099e1 	.word	0x900099e1
90009970:	900099e1 	.word	0x900099e1
90009974:	900099e1 	.word	0x900099e1
90009978:	900099f5 	.word	0x900099f5
9000997c:	900099e1 	.word	0x900099e1
90009980:	900099e1 	.word	0x900099e1
90009984:	900099e1 	.word	0x900099e1
90009988:	900099e1 	.word	0x900099e1
9000998c:	900099e1 	.word	0x900099e1
90009990:	900099e1 	.word	0x900099e1
90009994:	900099e1 	.word	0x900099e1
90009998:	900099f5 	.word	0x900099f5
9000999c:	900099e1 	.word	0x900099e1
900099a0:	900099e1 	.word	0x900099e1
900099a4:	900099e1 	.word	0x900099e1
900099a8:	900099e1 	.word	0x900099e1
900099ac:	900099e1 	.word	0x900099e1
900099b0:	900099e1 	.word	0x900099e1
900099b4:	900099e1 	.word	0x900099e1
900099b8:	900099f5 	.word	0x900099f5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
900099bc:	687b      	ldr	r3, [r7, #4]
900099be:	3304      	adds	r3, #4
900099c0:	2101      	movs	r1, #1
900099c2:	4618      	mov	r0, r3
900099c4:	f000 fdfa 	bl	9000a5bc <RCCEx_PLL2_Config>
900099c8:	4603      	mov	r3, r0
900099ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
900099cc:	e013      	b.n	900099f6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
900099ce:	687b      	ldr	r3, [r7, #4]
900099d0:	3324      	adds	r3, #36	; 0x24
900099d2:	2101      	movs	r1, #1
900099d4:	4618      	mov	r0, r3
900099d6:	f000 fea3 	bl	9000a720 <RCCEx_PLL3_Config>
900099da:	4603      	mov	r3, r0
900099dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
900099de:	e00a      	b.n	900099f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900099e0:	2301      	movs	r3, #1
900099e2:	75fb      	strb	r3, [r7, #23]
      break;
900099e4:	e007      	b.n	900099f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
900099e6:	bf00      	nop
900099e8:	58024400 	.word	0x58024400
900099ec:	58024800 	.word	0x58024800
900099f0:	00ffffcf 	.word	0x00ffffcf
      break;
900099f4:	bf00      	nop
    }

    if(ret == HAL_OK)
900099f6:	7dfb      	ldrb	r3, [r7, #23]
900099f8:	2b00      	cmp	r3, #0
900099fa:	d109      	bne.n	90009a10 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
900099fc:	4b96      	ldr	r3, [pc, #600]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
900099fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009a00:	f023 0238 	bic.w	r2, r3, #56	; 0x38
90009a04:	687b      	ldr	r3, [r7, #4]
90009a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90009a08:	4993      	ldr	r1, [pc, #588]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009a0a:	4313      	orrs	r3, r2
90009a0c:	654b      	str	r3, [r1, #84]	; 0x54
90009a0e:	e001      	b.n	90009a14 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009a10:	7dfb      	ldrb	r3, [r7, #23]
90009a12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90009a14:	687b      	ldr	r3, [r7, #4]
90009a16:	681b      	ldr	r3, [r3, #0]
90009a18:	f003 0302 	and.w	r3, r3, #2
90009a1c:	2b00      	cmp	r3, #0
90009a1e:	d038      	beq.n	90009a92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
90009a20:	687b      	ldr	r3, [r7, #4]
90009a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90009a24:	2b05      	cmp	r3, #5
90009a26:	d821      	bhi.n	90009a6c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
90009a28:	a201      	add	r2, pc, #4	; (adr r2, 90009a30 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
90009a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009a2e:	bf00      	nop
90009a30:	90009a73 	.word	0x90009a73
90009a34:	90009a49 	.word	0x90009a49
90009a38:	90009a5b 	.word	0x90009a5b
90009a3c:	90009a73 	.word	0x90009a73
90009a40:	90009a73 	.word	0x90009a73
90009a44:	90009a73 	.word	0x90009a73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90009a48:	687b      	ldr	r3, [r7, #4]
90009a4a:	3304      	adds	r3, #4
90009a4c:	2101      	movs	r1, #1
90009a4e:	4618      	mov	r0, r3
90009a50:	f000 fdb4 	bl	9000a5bc <RCCEx_PLL2_Config>
90009a54:	4603      	mov	r3, r0
90009a56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
90009a58:	e00c      	b.n	90009a74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90009a5a:	687b      	ldr	r3, [r7, #4]
90009a5c:	3324      	adds	r3, #36	; 0x24
90009a5e:	2101      	movs	r1, #1
90009a60:	4618      	mov	r0, r3
90009a62:	f000 fe5d 	bl	9000a720 <RCCEx_PLL3_Config>
90009a66:	4603      	mov	r3, r0
90009a68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
90009a6a:	e003      	b.n	90009a74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009a6c:	2301      	movs	r3, #1
90009a6e:	75fb      	strb	r3, [r7, #23]
      break;
90009a70:	e000      	b.n	90009a74 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
90009a72:	bf00      	nop
    }

    if(ret == HAL_OK)
90009a74:	7dfb      	ldrb	r3, [r7, #23]
90009a76:	2b00      	cmp	r3, #0
90009a78:	d109      	bne.n	90009a8e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90009a7a:	4b77      	ldr	r3, [pc, #476]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009a7e:	f023 0207 	bic.w	r2, r3, #7
90009a82:	687b      	ldr	r3, [r7, #4]
90009a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90009a86:	4974      	ldr	r1, [pc, #464]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009a88:	4313      	orrs	r3, r2
90009a8a:	654b      	str	r3, [r1, #84]	; 0x54
90009a8c:	e001      	b.n	90009a92 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009a8e:	7dfb      	ldrb	r3, [r7, #23]
90009a90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90009a92:	687b      	ldr	r3, [r7, #4]
90009a94:	681b      	ldr	r3, [r3, #0]
90009a96:	f003 0304 	and.w	r3, r3, #4
90009a9a:	2b00      	cmp	r3, #0
90009a9c:	d03a      	beq.n	90009b14 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
90009a9e:	687b      	ldr	r3, [r7, #4]
90009aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90009aa4:	2b05      	cmp	r3, #5
90009aa6:	d821      	bhi.n	90009aec <HAL_RCCEx_PeriphCLKConfig+0x938>
90009aa8:	a201      	add	r2, pc, #4	; (adr r2, 90009ab0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
90009aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009aae:	bf00      	nop
90009ab0:	90009af3 	.word	0x90009af3
90009ab4:	90009ac9 	.word	0x90009ac9
90009ab8:	90009adb 	.word	0x90009adb
90009abc:	90009af3 	.word	0x90009af3
90009ac0:	90009af3 	.word	0x90009af3
90009ac4:	90009af3 	.word	0x90009af3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90009ac8:	687b      	ldr	r3, [r7, #4]
90009aca:	3304      	adds	r3, #4
90009acc:	2101      	movs	r1, #1
90009ace:	4618      	mov	r0, r3
90009ad0:	f000 fd74 	bl	9000a5bc <RCCEx_PLL2_Config>
90009ad4:	4603      	mov	r3, r0
90009ad6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
90009ad8:	e00c      	b.n	90009af4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90009ada:	687b      	ldr	r3, [r7, #4]
90009adc:	3324      	adds	r3, #36	; 0x24
90009ade:	2101      	movs	r1, #1
90009ae0:	4618      	mov	r0, r3
90009ae2:	f000 fe1d 	bl	9000a720 <RCCEx_PLL3_Config>
90009ae6:	4603      	mov	r3, r0
90009ae8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
90009aea:	e003      	b.n	90009af4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009aec:	2301      	movs	r3, #1
90009aee:	75fb      	strb	r3, [r7, #23]
      break;
90009af0:	e000      	b.n	90009af4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
90009af2:	bf00      	nop
    }

    if(ret == HAL_OK)
90009af4:	7dfb      	ldrb	r3, [r7, #23]
90009af6:	2b00      	cmp	r3, #0
90009af8:	d10a      	bne.n	90009b10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90009afa:	4b57      	ldr	r3, [pc, #348]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90009afe:	f023 0207 	bic.w	r2, r3, #7
90009b02:	687b      	ldr	r3, [r7, #4]
90009b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90009b08:	4953      	ldr	r1, [pc, #332]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009b0a:	4313      	orrs	r3, r2
90009b0c:	658b      	str	r3, [r1, #88]	; 0x58
90009b0e:	e001      	b.n	90009b14 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009b10:	7dfb      	ldrb	r3, [r7, #23]
90009b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90009b14:	687b      	ldr	r3, [r7, #4]
90009b16:	681b      	ldr	r3, [r3, #0]
90009b18:	f003 0320 	and.w	r3, r3, #32
90009b1c:	2b00      	cmp	r3, #0
90009b1e:	d04b      	beq.n	90009bb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
90009b20:	687b      	ldr	r3, [r7, #4]
90009b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90009b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90009b2a:	d02e      	beq.n	90009b8a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
90009b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90009b30:	d828      	bhi.n	90009b84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90009b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90009b36:	d02a      	beq.n	90009b8e <HAL_RCCEx_PeriphCLKConfig+0x9da>
90009b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90009b3c:	d822      	bhi.n	90009b84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90009b3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90009b42:	d026      	beq.n	90009b92 <HAL_RCCEx_PeriphCLKConfig+0x9de>
90009b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90009b48:	d81c      	bhi.n	90009b84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90009b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90009b4e:	d010      	beq.n	90009b72 <HAL_RCCEx_PeriphCLKConfig+0x9be>
90009b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90009b54:	d816      	bhi.n	90009b84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90009b56:	2b00      	cmp	r3, #0
90009b58:	d01d      	beq.n	90009b96 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
90009b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90009b5e:	d111      	bne.n	90009b84 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90009b60:	687b      	ldr	r3, [r7, #4]
90009b62:	3304      	adds	r3, #4
90009b64:	2100      	movs	r1, #0
90009b66:	4618      	mov	r0, r3
90009b68:	f000 fd28 	bl	9000a5bc <RCCEx_PLL2_Config>
90009b6c:	4603      	mov	r3, r0
90009b6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90009b70:	e012      	b.n	90009b98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90009b72:	687b      	ldr	r3, [r7, #4]
90009b74:	3324      	adds	r3, #36	; 0x24
90009b76:	2102      	movs	r1, #2
90009b78:	4618      	mov	r0, r3
90009b7a:	f000 fdd1 	bl	9000a720 <RCCEx_PLL3_Config>
90009b7e:	4603      	mov	r3, r0
90009b80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90009b82:	e009      	b.n	90009b98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009b84:	2301      	movs	r3, #1
90009b86:	75fb      	strb	r3, [r7, #23]
      break;
90009b88:	e006      	b.n	90009b98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90009b8a:	bf00      	nop
90009b8c:	e004      	b.n	90009b98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90009b8e:	bf00      	nop
90009b90:	e002      	b.n	90009b98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90009b92:	bf00      	nop
90009b94:	e000      	b.n	90009b98 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90009b96:	bf00      	nop
    }

    if(ret == HAL_OK)
90009b98:	7dfb      	ldrb	r3, [r7, #23]
90009b9a:	2b00      	cmp	r3, #0
90009b9c:	d10a      	bne.n	90009bb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90009b9e:	4b2e      	ldr	r3, [pc, #184]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009ba2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
90009ba6:	687b      	ldr	r3, [r7, #4]
90009ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90009bac:	492a      	ldr	r1, [pc, #168]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009bae:	4313      	orrs	r3, r2
90009bb0:	654b      	str	r3, [r1, #84]	; 0x54
90009bb2:	e001      	b.n	90009bb8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009bb4:	7dfb      	ldrb	r3, [r7, #23]
90009bb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90009bb8:	687b      	ldr	r3, [r7, #4]
90009bba:	681b      	ldr	r3, [r3, #0]
90009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
90009bc0:	2b00      	cmp	r3, #0
90009bc2:	d04d      	beq.n	90009c60 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
90009bc4:	687b      	ldr	r3, [r7, #4]
90009bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90009bca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90009bce:	d02e      	beq.n	90009c2e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
90009bd0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90009bd4:	d828      	bhi.n	90009c28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
90009bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90009bda:	d02a      	beq.n	90009c32 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
90009bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90009be0:	d822      	bhi.n	90009c28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
90009be2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90009be6:	d026      	beq.n	90009c36 <HAL_RCCEx_PeriphCLKConfig+0xa82>
90009be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90009bec:	d81c      	bhi.n	90009c28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
90009bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90009bf2:	d010      	beq.n	90009c16 <HAL_RCCEx_PeriphCLKConfig+0xa62>
90009bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90009bf8:	d816      	bhi.n	90009c28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
90009bfa:	2b00      	cmp	r3, #0
90009bfc:	d01d      	beq.n	90009c3a <HAL_RCCEx_PeriphCLKConfig+0xa86>
90009bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90009c02:	d111      	bne.n	90009c28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90009c04:	687b      	ldr	r3, [r7, #4]
90009c06:	3304      	adds	r3, #4
90009c08:	2100      	movs	r1, #0
90009c0a:	4618      	mov	r0, r3
90009c0c:	f000 fcd6 	bl	9000a5bc <RCCEx_PLL2_Config>
90009c10:	4603      	mov	r3, r0
90009c12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
90009c14:	e012      	b.n	90009c3c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90009c16:	687b      	ldr	r3, [r7, #4]
90009c18:	3324      	adds	r3, #36	; 0x24
90009c1a:	2102      	movs	r1, #2
90009c1c:	4618      	mov	r0, r3
90009c1e:	f000 fd7f 	bl	9000a720 <RCCEx_PLL3_Config>
90009c22:	4603      	mov	r3, r0
90009c24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
90009c26:	e009      	b.n	90009c3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009c28:	2301      	movs	r3, #1
90009c2a:	75fb      	strb	r3, [r7, #23]
      break;
90009c2c:	e006      	b.n	90009c3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90009c2e:	bf00      	nop
90009c30:	e004      	b.n	90009c3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90009c32:	bf00      	nop
90009c34:	e002      	b.n	90009c3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90009c36:	bf00      	nop
90009c38:	e000      	b.n	90009c3c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90009c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
90009c3c:	7dfb      	ldrb	r3, [r7, #23]
90009c3e:	2b00      	cmp	r3, #0
90009c40:	d10c      	bne.n	90009c5c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90009c42:	4b05      	ldr	r3, [pc, #20]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90009c46:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90009c4a:	687b      	ldr	r3, [r7, #4]
90009c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90009c50:	4901      	ldr	r1, [pc, #4]	; (90009c58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90009c52:	4313      	orrs	r3, r2
90009c54:	658b      	str	r3, [r1, #88]	; 0x58
90009c56:	e003      	b.n	90009c60 <HAL_RCCEx_PeriphCLKConfig+0xaac>
90009c58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90009c5c:	7dfb      	ldrb	r3, [r7, #23]
90009c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90009c60:	687b      	ldr	r3, [r7, #4]
90009c62:	681b      	ldr	r3, [r3, #0]
90009c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
90009c68:	2b00      	cmp	r3, #0
90009c6a:	d04b      	beq.n	90009d04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
90009c6c:	687b      	ldr	r3, [r7, #4]
90009c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90009c72:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90009c76:	d02e      	beq.n	90009cd6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
90009c78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90009c7c:	d828      	bhi.n	90009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90009c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90009c82:	d02a      	beq.n	90009cda <HAL_RCCEx_PeriphCLKConfig+0xb26>
90009c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90009c88:	d822      	bhi.n	90009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90009c8a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90009c8e:	d026      	beq.n	90009cde <HAL_RCCEx_PeriphCLKConfig+0xb2a>
90009c90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90009c94:	d81c      	bhi.n	90009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90009c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90009c9a:	d010      	beq.n	90009cbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
90009c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90009ca0:	d816      	bhi.n	90009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90009ca2:	2b00      	cmp	r3, #0
90009ca4:	d01d      	beq.n	90009ce2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
90009ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90009caa:	d111      	bne.n	90009cd0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90009cac:	687b      	ldr	r3, [r7, #4]
90009cae:	3304      	adds	r3, #4
90009cb0:	2100      	movs	r1, #0
90009cb2:	4618      	mov	r0, r3
90009cb4:	f000 fc82 	bl	9000a5bc <RCCEx_PLL2_Config>
90009cb8:	4603      	mov	r3, r0
90009cba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90009cbc:	e012      	b.n	90009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90009cbe:	687b      	ldr	r3, [r7, #4]
90009cc0:	3324      	adds	r3, #36	; 0x24
90009cc2:	2102      	movs	r1, #2
90009cc4:	4618      	mov	r0, r3
90009cc6:	f000 fd2b 	bl	9000a720 <RCCEx_PLL3_Config>
90009cca:	4603      	mov	r3, r0
90009ccc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90009cce:	e009      	b.n	90009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009cd0:	2301      	movs	r3, #1
90009cd2:	75fb      	strb	r3, [r7, #23]
      break;
90009cd4:	e006      	b.n	90009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90009cd6:	bf00      	nop
90009cd8:	e004      	b.n	90009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90009cda:	bf00      	nop
90009cdc:	e002      	b.n	90009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90009cde:	bf00      	nop
90009ce0:	e000      	b.n	90009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90009ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
90009ce4:	7dfb      	ldrb	r3, [r7, #23]
90009ce6:	2b00      	cmp	r3, #0
90009ce8:	d10a      	bne.n	90009d00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
90009cea:	4b9d      	ldr	r3, [pc, #628]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90009cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90009cf2:	687b      	ldr	r3, [r7, #4]
90009cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90009cf8:	4999      	ldr	r1, [pc, #612]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009cfa:	4313      	orrs	r3, r2
90009cfc:	658b      	str	r3, [r1, #88]	; 0x58
90009cfe:	e001      	b.n	90009d04 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009d00:	7dfb      	ldrb	r3, [r7, #23]
90009d02:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90009d04:	687b      	ldr	r3, [r7, #4]
90009d06:	681b      	ldr	r3, [r3, #0]
90009d08:	f003 0308 	and.w	r3, r3, #8
90009d0c:	2b00      	cmp	r3, #0
90009d0e:	d01a      	beq.n	90009d46 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
90009d10:	687b      	ldr	r3, [r7, #4]
90009d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90009d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90009d1a:	d10a      	bne.n	90009d32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
90009d1c:	687b      	ldr	r3, [r7, #4]
90009d1e:	3324      	adds	r3, #36	; 0x24
90009d20:	2102      	movs	r1, #2
90009d22:	4618      	mov	r0, r3
90009d24:	f000 fcfc 	bl	9000a720 <RCCEx_PLL3_Config>
90009d28:	4603      	mov	r3, r0
90009d2a:	2b00      	cmp	r3, #0
90009d2c:	d001      	beq.n	90009d32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
90009d2e:	2301      	movs	r3, #1
90009d30:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90009d32:	4b8b      	ldr	r3, [pc, #556]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009d36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
90009d3a:	687b      	ldr	r3, [r7, #4]
90009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90009d40:	4987      	ldr	r1, [pc, #540]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009d42:	4313      	orrs	r3, r2
90009d44:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90009d46:	687b      	ldr	r3, [r7, #4]
90009d48:	681b      	ldr	r3, [r3, #0]
90009d4a:	f003 0310 	and.w	r3, r3, #16
90009d4e:	2b00      	cmp	r3, #0
90009d50:	d01a      	beq.n	90009d88 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
90009d52:	687b      	ldr	r3, [r7, #4]
90009d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90009d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90009d5c:	d10a      	bne.n	90009d74 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
90009d5e:	687b      	ldr	r3, [r7, #4]
90009d60:	3324      	adds	r3, #36	; 0x24
90009d62:	2102      	movs	r1, #2
90009d64:	4618      	mov	r0, r3
90009d66:	f000 fcdb 	bl	9000a720 <RCCEx_PLL3_Config>
90009d6a:	4603      	mov	r3, r0
90009d6c:	2b00      	cmp	r3, #0
90009d6e:	d001      	beq.n	90009d74 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
90009d70:	2301      	movs	r3, #1
90009d72:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90009d74:	4b7a      	ldr	r3, [pc, #488]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90009d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90009d7c:	687b      	ldr	r3, [r7, #4]
90009d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90009d82:	4977      	ldr	r1, [pc, #476]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009d84:	4313      	orrs	r3, r2
90009d86:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90009d88:	687b      	ldr	r3, [r7, #4]
90009d8a:	681b      	ldr	r3, [r3, #0]
90009d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90009d90:	2b00      	cmp	r3, #0
90009d92:	d034      	beq.n	90009dfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
90009d94:	687b      	ldr	r3, [r7, #4]
90009d96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90009d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90009d9e:	d01d      	beq.n	90009ddc <HAL_RCCEx_PeriphCLKConfig+0xc28>
90009da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90009da4:	d817      	bhi.n	90009dd6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
90009da6:	2b00      	cmp	r3, #0
90009da8:	d003      	beq.n	90009db2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
90009daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009dae:	d009      	beq.n	90009dc4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
90009db0:	e011      	b.n	90009dd6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90009db2:	687b      	ldr	r3, [r7, #4]
90009db4:	3304      	adds	r3, #4
90009db6:	2100      	movs	r1, #0
90009db8:	4618      	mov	r0, r3
90009dba:	f000 fbff 	bl	9000a5bc <RCCEx_PLL2_Config>
90009dbe:	4603      	mov	r3, r0
90009dc0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90009dc2:	e00c      	b.n	90009dde <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90009dc4:	687b      	ldr	r3, [r7, #4]
90009dc6:	3324      	adds	r3, #36	; 0x24
90009dc8:	2102      	movs	r1, #2
90009dca:	4618      	mov	r0, r3
90009dcc:	f000 fca8 	bl	9000a720 <RCCEx_PLL3_Config>
90009dd0:	4603      	mov	r3, r0
90009dd2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90009dd4:	e003      	b.n	90009dde <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009dd6:	2301      	movs	r3, #1
90009dd8:	75fb      	strb	r3, [r7, #23]
      break;
90009dda:	e000      	b.n	90009dde <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
90009ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
90009dde:	7dfb      	ldrb	r3, [r7, #23]
90009de0:	2b00      	cmp	r3, #0
90009de2:	d10a      	bne.n	90009dfa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90009de4:	4b5e      	ldr	r3, [pc, #376]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90009de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90009dec:	687b      	ldr	r3, [r7, #4]
90009dee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90009df2:	495b      	ldr	r1, [pc, #364]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009df4:	4313      	orrs	r3, r2
90009df6:	658b      	str	r3, [r1, #88]	; 0x58
90009df8:	e001      	b.n	90009dfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009dfa:	7dfb      	ldrb	r3, [r7, #23]
90009dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90009dfe:	687b      	ldr	r3, [r7, #4]
90009e00:	681b      	ldr	r3, [r3, #0]
90009e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90009e06:	2b00      	cmp	r3, #0
90009e08:	d033      	beq.n	90009e72 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
90009e0a:	687b      	ldr	r3, [r7, #4]
90009e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90009e10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90009e14:	d01c      	beq.n	90009e50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
90009e16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90009e1a:	d816      	bhi.n	90009e4a <HAL_RCCEx_PeriphCLKConfig+0xc96>
90009e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90009e20:	d003      	beq.n	90009e2a <HAL_RCCEx_PeriphCLKConfig+0xc76>
90009e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90009e26:	d007      	beq.n	90009e38 <HAL_RCCEx_PeriphCLKConfig+0xc84>
90009e28:	e00f      	b.n	90009e4a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90009e2a:	4b4d      	ldr	r3, [pc, #308]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009e2e:	4a4c      	ldr	r2, [pc, #304]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90009e34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
90009e36:	e00c      	b.n	90009e52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90009e38:	687b      	ldr	r3, [r7, #4]
90009e3a:	3324      	adds	r3, #36	; 0x24
90009e3c:	2101      	movs	r1, #1
90009e3e:	4618      	mov	r0, r3
90009e40:	f000 fc6e 	bl	9000a720 <RCCEx_PLL3_Config>
90009e44:	4603      	mov	r3, r0
90009e46:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
90009e48:	e003      	b.n	90009e52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009e4a:	2301      	movs	r3, #1
90009e4c:	75fb      	strb	r3, [r7, #23]
      break;
90009e4e:	e000      	b.n	90009e52 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
90009e50:	bf00      	nop
    }

    if(ret == HAL_OK)
90009e52:	7dfb      	ldrb	r3, [r7, #23]
90009e54:	2b00      	cmp	r3, #0
90009e56:	d10a      	bne.n	90009e6e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90009e58:	4b41      	ldr	r3, [pc, #260]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90009e60:	687b      	ldr	r3, [r7, #4]
90009e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90009e66:	493e      	ldr	r1, [pc, #248]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009e68:	4313      	orrs	r3, r2
90009e6a:	654b      	str	r3, [r1, #84]	; 0x54
90009e6c:	e001      	b.n	90009e72 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009e6e:	7dfb      	ldrb	r3, [r7, #23]
90009e70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90009e72:	687b      	ldr	r3, [r7, #4]
90009e74:	681b      	ldr	r3, [r3, #0]
90009e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90009e7a:	2b00      	cmp	r3, #0
90009e7c:	d029      	beq.n	90009ed2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
90009e7e:	687b      	ldr	r3, [r7, #4]
90009e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90009e82:	2b00      	cmp	r3, #0
90009e84:	d003      	beq.n	90009e8e <HAL_RCCEx_PeriphCLKConfig+0xcda>
90009e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90009e8a:	d007      	beq.n	90009e9c <HAL_RCCEx_PeriphCLKConfig+0xce8>
90009e8c:	e00f      	b.n	90009eae <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90009e8e:	4b34      	ldr	r3, [pc, #208]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009e92:	4a33      	ldr	r2, [pc, #204]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90009e98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
90009e9a:	e00b      	b.n	90009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90009e9c:	687b      	ldr	r3, [r7, #4]
90009e9e:	3304      	adds	r3, #4
90009ea0:	2102      	movs	r1, #2
90009ea2:	4618      	mov	r0, r3
90009ea4:	f000 fb8a 	bl	9000a5bc <RCCEx_PLL2_Config>
90009ea8:	4603      	mov	r3, r0
90009eaa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
90009eac:	e002      	b.n	90009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
90009eae:	2301      	movs	r3, #1
90009eb0:	75fb      	strb	r3, [r7, #23]
      break;
90009eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
90009eb4:	7dfb      	ldrb	r3, [r7, #23]
90009eb6:	2b00      	cmp	r3, #0
90009eb8:	d109      	bne.n	90009ece <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90009eba:	4b29      	ldr	r3, [pc, #164]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90009ebe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
90009ec2:	687b      	ldr	r3, [r7, #4]
90009ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90009ec6:	4926      	ldr	r1, [pc, #152]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009ec8:	4313      	orrs	r3, r2
90009eca:	64cb      	str	r3, [r1, #76]	; 0x4c
90009ecc:	e001      	b.n	90009ed2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
90009ece:	7dfb      	ldrb	r3, [r7, #23]
90009ed0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90009ed2:	687b      	ldr	r3, [r7, #4]
90009ed4:	681b      	ldr	r3, [r3, #0]
90009ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90009eda:	2b00      	cmp	r3, #0
90009edc:	d00a      	beq.n	90009ef4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
90009ede:	687b      	ldr	r3, [r7, #4]
90009ee0:	3324      	adds	r3, #36	; 0x24
90009ee2:	2102      	movs	r1, #2
90009ee4:	4618      	mov	r0, r3
90009ee6:	f000 fc1b 	bl	9000a720 <RCCEx_PLL3_Config>
90009eea:	4603      	mov	r3, r0
90009eec:	2b00      	cmp	r3, #0
90009eee:	d001      	beq.n	90009ef4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
90009ef0:	2301      	movs	r3, #1
90009ef2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90009ef4:	687b      	ldr	r3, [r7, #4]
90009ef6:	681b      	ldr	r3, [r3, #0]
90009ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90009efc:	2b00      	cmp	r3, #0
90009efe:	d033      	beq.n	90009f68 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
90009f00:	687b      	ldr	r3, [r7, #4]
90009f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90009f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90009f08:	d017      	beq.n	90009f3a <HAL_RCCEx_PeriphCLKConfig+0xd86>
90009f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90009f0e:	d811      	bhi.n	90009f34 <HAL_RCCEx_PeriphCLKConfig+0xd80>
90009f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90009f14:	d013      	beq.n	90009f3e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
90009f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90009f1a:	d80b      	bhi.n	90009f34 <HAL_RCCEx_PeriphCLKConfig+0xd80>
90009f1c:	2b00      	cmp	r3, #0
90009f1e:	d010      	beq.n	90009f42 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
90009f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90009f24:	d106      	bne.n	90009f34 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90009f26:	4b0e      	ldr	r3, [pc, #56]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009f2a:	4a0d      	ldr	r2, [pc, #52]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90009f30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
90009f32:	e007      	b.n	90009f44 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90009f34:	2301      	movs	r3, #1
90009f36:	75fb      	strb	r3, [r7, #23]
      break;
90009f38:	e004      	b.n	90009f44 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
90009f3a:	bf00      	nop
90009f3c:	e002      	b.n	90009f44 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
90009f3e:	bf00      	nop
90009f40:	e000      	b.n	90009f44 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
90009f42:	bf00      	nop
    }

    if(ret == HAL_OK)
90009f44:	7dfb      	ldrb	r3, [r7, #23]
90009f46:	2b00      	cmp	r3, #0
90009f48:	d10c      	bne.n	90009f64 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90009f4a:	4b05      	ldr	r3, [pc, #20]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90009f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90009f52:	687b      	ldr	r3, [r7, #4]
90009f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90009f56:	4902      	ldr	r1, [pc, #8]	; (90009f60 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90009f58:	4313      	orrs	r3, r2
90009f5a:	654b      	str	r3, [r1, #84]	; 0x54
90009f5c:	e004      	b.n	90009f68 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
90009f5e:	bf00      	nop
90009f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90009f64:	7dfb      	ldrb	r3, [r7, #23]
90009f66:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90009f68:	687b      	ldr	r3, [r7, #4]
90009f6a:	681b      	ldr	r3, [r3, #0]
90009f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90009f70:	2b00      	cmp	r3, #0
90009f72:	d008      	beq.n	90009f86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90009f74:	4b31      	ldr	r3, [pc, #196]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90009f78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90009f7c:	687b      	ldr	r3, [r7, #4]
90009f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90009f80:	492e      	ldr	r1, [pc, #184]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009f82:	4313      	orrs	r3, r2
90009f84:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90009f86:	687b      	ldr	r3, [r7, #4]
90009f88:	681b      	ldr	r3, [r3, #0]
90009f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90009f8e:	2b00      	cmp	r3, #0
90009f90:	d009      	beq.n	90009fa6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90009f92:	4b2a      	ldr	r3, [pc, #168]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009f94:	691b      	ldr	r3, [r3, #16]
90009f96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
90009f9a:	687b      	ldr	r3, [r7, #4]
90009f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90009fa0:	4926      	ldr	r1, [pc, #152]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009fa2:	4313      	orrs	r3, r2
90009fa4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90009fa6:	687b      	ldr	r3, [r7, #4]
90009fa8:	681b      	ldr	r3, [r3, #0]
90009faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90009fae:	2b00      	cmp	r3, #0
90009fb0:	d008      	beq.n	90009fc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90009fb2:	4b22      	ldr	r3, [pc, #136]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90009fb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
90009fba:	687b      	ldr	r3, [r7, #4]
90009fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90009fbe:	491f      	ldr	r1, [pc, #124]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009fc0:	4313      	orrs	r3, r2
90009fc2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90009fc4:	687b      	ldr	r3, [r7, #4]
90009fc6:	681b      	ldr	r3, [r3, #0]
90009fc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
90009fcc:	2b00      	cmp	r3, #0
90009fce:	d00d      	beq.n	90009fec <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90009fd0:	4b1a      	ldr	r3, [pc, #104]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009fd2:	691b      	ldr	r3, [r3, #16]
90009fd4:	4a19      	ldr	r2, [pc, #100]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009fd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90009fda:	6113      	str	r3, [r2, #16]
90009fdc:	4b17      	ldr	r3, [pc, #92]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009fde:	691a      	ldr	r2, [r3, #16]
90009fe0:	687b      	ldr	r3, [r7, #4]
90009fe2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90009fe6:	4915      	ldr	r1, [pc, #84]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009fe8:	4313      	orrs	r3, r2
90009fea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90009fec:	687b      	ldr	r3, [r7, #4]
90009fee:	681b      	ldr	r3, [r3, #0]
90009ff0:	2b00      	cmp	r3, #0
90009ff2:	da08      	bge.n	9000a006 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90009ff4:	4b11      	ldr	r3, [pc, #68]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90009ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90009ff8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
90009ffc:	687b      	ldr	r3, [r7, #4]
90009ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000a000:	490e      	ldr	r1, [pc, #56]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
9000a002:	4313      	orrs	r3, r2
9000a004:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000a006:	687b      	ldr	r3, [r7, #4]
9000a008:	681b      	ldr	r3, [r3, #0]
9000a00a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000a00e:	2b00      	cmp	r3, #0
9000a010:	d009      	beq.n	9000a026 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000a012:	4b0a      	ldr	r3, [pc, #40]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
9000a014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000a016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
9000a01a:	687b      	ldr	r3, [r7, #4]
9000a01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000a020:	4906      	ldr	r1, [pc, #24]	; (9000a03c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
9000a022:	4313      	orrs	r3, r2
9000a024:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
9000a026:	7dbb      	ldrb	r3, [r7, #22]
9000a028:	2b00      	cmp	r3, #0
9000a02a:	d101      	bne.n	9000a030 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
9000a02c:	2300      	movs	r3, #0
9000a02e:	e000      	b.n	9000a032 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
9000a030:	2301      	movs	r3, #1
}
9000a032:	4618      	mov	r0, r3
9000a034:	3718      	adds	r7, #24
9000a036:	46bd      	mov	sp, r7
9000a038:	bd80      	pop	{r7, pc}
9000a03a:	bf00      	nop
9000a03c:	58024400 	.word	0x58024400

9000a040 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
9000a040:	b580      	push	{r7, lr}
9000a042:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000a044:	f7ff f818 	bl	90009078 <HAL_RCC_GetHCLKFreq>
9000a048:	4602      	mov	r2, r0
9000a04a:	4b06      	ldr	r3, [pc, #24]	; (9000a064 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
9000a04c:	6a1b      	ldr	r3, [r3, #32]
9000a04e:	091b      	lsrs	r3, r3, #4
9000a050:	f003 0307 	and.w	r3, r3, #7
9000a054:	4904      	ldr	r1, [pc, #16]	; (9000a068 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
9000a056:	5ccb      	ldrb	r3, [r1, r3]
9000a058:	f003 031f 	and.w	r3, r3, #31
9000a05c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
9000a060:	4618      	mov	r0, r3
9000a062:	bd80      	pop	{r7, pc}
9000a064:	58024400 	.word	0x58024400
9000a068:	90013ef0 	.word	0x90013ef0

9000a06c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
9000a06c:	b480      	push	{r7}
9000a06e:	b089      	sub	sp, #36	; 0x24
9000a070:	af00      	add	r7, sp, #0
9000a072:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a074:	4ba1      	ldr	r3, [pc, #644]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a078:	f003 0303 	and.w	r3, r3, #3
9000a07c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
9000a07e:	4b9f      	ldr	r3, [pc, #636]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a082:	0b1b      	lsrs	r3, r3, #12
9000a084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000a088:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000a08a:	4b9c      	ldr	r3, [pc, #624]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a08e:	091b      	lsrs	r3, r3, #4
9000a090:	f003 0301 	and.w	r3, r3, #1
9000a094:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
9000a096:	4b99      	ldr	r3, [pc, #612]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000a09a:	08db      	lsrs	r3, r3, #3
9000a09c:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000a0a0:	693a      	ldr	r2, [r7, #16]
9000a0a2:	fb02 f303 	mul.w	r3, r2, r3
9000a0a6:	ee07 3a90 	vmov	s15, r3
9000a0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a0ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
9000a0b2:	697b      	ldr	r3, [r7, #20]
9000a0b4:	2b00      	cmp	r3, #0
9000a0b6:	f000 8111 	beq.w	9000a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
9000a0ba:	69bb      	ldr	r3, [r7, #24]
9000a0bc:	2b02      	cmp	r3, #2
9000a0be:	f000 8083 	beq.w	9000a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
9000a0c2:	69bb      	ldr	r3, [r7, #24]
9000a0c4:	2b02      	cmp	r3, #2
9000a0c6:	f200 80a1 	bhi.w	9000a20c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
9000a0ca:	69bb      	ldr	r3, [r7, #24]
9000a0cc:	2b00      	cmp	r3, #0
9000a0ce:	d003      	beq.n	9000a0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
9000a0d0:	69bb      	ldr	r3, [r7, #24]
9000a0d2:	2b01      	cmp	r3, #1
9000a0d4:	d056      	beq.n	9000a184 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
9000a0d6:	e099      	b.n	9000a20c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a0d8:	4b88      	ldr	r3, [pc, #544]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a0da:	681b      	ldr	r3, [r3, #0]
9000a0dc:	f003 0320 	and.w	r3, r3, #32
9000a0e0:	2b00      	cmp	r3, #0
9000a0e2:	d02d      	beq.n	9000a140 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
9000a0e4:	4b85      	ldr	r3, [pc, #532]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a0e6:	681b      	ldr	r3, [r3, #0]
9000a0e8:	08db      	lsrs	r3, r3, #3
9000a0ea:	f003 0303 	and.w	r3, r3, #3
9000a0ee:	4a84      	ldr	r2, [pc, #528]	; (9000a300 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
9000a0f0:	fa22 f303 	lsr.w	r3, r2, r3
9000a0f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000a0f6:	68bb      	ldr	r3, [r7, #8]
9000a0f8:	ee07 3a90 	vmov	s15, r3
9000a0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a100:	697b      	ldr	r3, [r7, #20]
9000a102:	ee07 3a90 	vmov	s15, r3
9000a106:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a10e:	4b7b      	ldr	r3, [pc, #492]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a112:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a116:	ee07 3a90 	vmov	s15, r3
9000a11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a11e:	ed97 6a03 	vldr	s12, [r7, #12]
9000a122:	eddf 5a78 	vldr	s11, [pc, #480]	; 9000a304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000a126:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a132:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a136:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a13a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
9000a13e:	e087      	b.n	9000a250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000a140:	697b      	ldr	r3, [r7, #20]
9000a142:	ee07 3a90 	vmov	s15, r3
9000a146:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a14a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 9000a308 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
9000a14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a152:	4b6a      	ldr	r3, [pc, #424]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a156:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a15a:	ee07 3a90 	vmov	s15, r3
9000a15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a162:	ed97 6a03 	vldr	s12, [r7, #12]
9000a166:	eddf 5a67 	vldr	s11, [pc, #412]	; 9000a304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000a16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a176:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a17a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a17e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000a182:	e065      	b.n	9000a250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000a184:	697b      	ldr	r3, [r7, #20]
9000a186:	ee07 3a90 	vmov	s15, r3
9000a18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a18e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 9000a30c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000a192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a196:	4b59      	ldr	r3, [pc, #356]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a19e:	ee07 3a90 	vmov	s15, r3
9000a1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a1a6:	ed97 6a03 	vldr	s12, [r7, #12]
9000a1aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 9000a304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000a1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a1be:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a1c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000a1c6:	e043      	b.n	9000a250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000a1c8:	697b      	ldr	r3, [r7, #20]
9000a1ca:	ee07 3a90 	vmov	s15, r3
9000a1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a1d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 9000a310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
9000a1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a1da:	4b48      	ldr	r3, [pc, #288]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a1e2:	ee07 3a90 	vmov	s15, r3
9000a1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a1ea:	ed97 6a03 	vldr	s12, [r7, #12]
9000a1ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 9000a304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000a1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a202:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000a20a:	e021      	b.n	9000a250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000a20c:	697b      	ldr	r3, [r7, #20]
9000a20e:	ee07 3a90 	vmov	s15, r3
9000a212:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a216:	eddf 6a3d 	vldr	s13, [pc, #244]	; 9000a30c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000a21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a21e:	4b37      	ldr	r3, [pc, #220]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a222:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a226:	ee07 3a90 	vmov	s15, r3
9000a22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a22e:	ed97 6a03 	vldr	s12, [r7, #12]
9000a232:	eddf 5a34 	vldr	s11, [pc, #208]	; 9000a304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000a236:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a242:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a246:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a24a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000a24e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
9000a250:	4b2a      	ldr	r3, [pc, #168]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a254:	0a5b      	lsrs	r3, r3, #9
9000a256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000a25a:	ee07 3a90 	vmov	s15, r3
9000a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000a266:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a26a:	edd7 6a07 	vldr	s13, [r7, #28]
9000a26e:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a276:	ee17 2a90 	vmov	r2, s15
9000a27a:	687b      	ldr	r3, [r7, #4]
9000a27c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
9000a27e:	4b1f      	ldr	r3, [pc, #124]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a282:	0c1b      	lsrs	r3, r3, #16
9000a284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000a288:	ee07 3a90 	vmov	s15, r3
9000a28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000a294:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a298:	edd7 6a07 	vldr	s13, [r7, #28]
9000a29c:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a2a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a2a4:	ee17 2a90 	vmov	r2, s15
9000a2a8:	687b      	ldr	r3, [r7, #4]
9000a2aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
9000a2ac:	4b13      	ldr	r3, [pc, #76]	; (9000a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a2b0:	0e1b      	lsrs	r3, r3, #24
9000a2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000a2b6:	ee07 3a90 	vmov	s15, r3
9000a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a2be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000a2c2:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a2c6:	edd7 6a07 	vldr	s13, [r7, #28]
9000a2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a2d2:	ee17 2a90 	vmov	r2, s15
9000a2d6:	687b      	ldr	r3, [r7, #4]
9000a2d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
9000a2da:	e008      	b.n	9000a2ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
9000a2dc:	687b      	ldr	r3, [r7, #4]
9000a2de:	2200      	movs	r2, #0
9000a2e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
9000a2e2:	687b      	ldr	r3, [r7, #4]
9000a2e4:	2200      	movs	r2, #0
9000a2e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
9000a2e8:	687b      	ldr	r3, [r7, #4]
9000a2ea:	2200      	movs	r2, #0
9000a2ec:	609a      	str	r2, [r3, #8]
}
9000a2ee:	bf00      	nop
9000a2f0:	3724      	adds	r7, #36	; 0x24
9000a2f2:	46bd      	mov	sp, r7
9000a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a2f8:	4770      	bx	lr
9000a2fa:	bf00      	nop
9000a2fc:	58024400 	.word	0x58024400
9000a300:	03d09000 	.word	0x03d09000
9000a304:	46000000 	.word	0x46000000
9000a308:	4c742400 	.word	0x4c742400
9000a30c:	4a742400 	.word	0x4a742400
9000a310:	4c371b00 	.word	0x4c371b00

9000a314 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
9000a314:	b480      	push	{r7}
9000a316:	b089      	sub	sp, #36	; 0x24
9000a318:	af00      	add	r7, sp, #0
9000a31a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a31c:	4ba1      	ldr	r3, [pc, #644]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a320:	f003 0303 	and.w	r3, r3, #3
9000a324:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
9000a326:	4b9f      	ldr	r3, [pc, #636]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a32a:	0d1b      	lsrs	r3, r3, #20
9000a32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000a330:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000a332:	4b9c      	ldr	r3, [pc, #624]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a336:	0a1b      	lsrs	r3, r3, #8
9000a338:	f003 0301 	and.w	r3, r3, #1
9000a33c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
9000a33e:	4b99      	ldr	r3, [pc, #612]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000a342:	08db      	lsrs	r3, r3, #3
9000a344:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000a348:	693a      	ldr	r2, [r7, #16]
9000a34a:	fb02 f303 	mul.w	r3, r2, r3
9000a34e:	ee07 3a90 	vmov	s15, r3
9000a352:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a356:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
9000a35a:	697b      	ldr	r3, [r7, #20]
9000a35c:	2b00      	cmp	r3, #0
9000a35e:	f000 8111 	beq.w	9000a584 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
9000a362:	69bb      	ldr	r3, [r7, #24]
9000a364:	2b02      	cmp	r3, #2
9000a366:	f000 8083 	beq.w	9000a470 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
9000a36a:	69bb      	ldr	r3, [r7, #24]
9000a36c:	2b02      	cmp	r3, #2
9000a36e:	f200 80a1 	bhi.w	9000a4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
9000a372:	69bb      	ldr	r3, [r7, #24]
9000a374:	2b00      	cmp	r3, #0
9000a376:	d003      	beq.n	9000a380 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
9000a378:	69bb      	ldr	r3, [r7, #24]
9000a37a:	2b01      	cmp	r3, #1
9000a37c:	d056      	beq.n	9000a42c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
9000a37e:	e099      	b.n	9000a4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a380:	4b88      	ldr	r3, [pc, #544]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a382:	681b      	ldr	r3, [r3, #0]
9000a384:	f003 0320 	and.w	r3, r3, #32
9000a388:	2b00      	cmp	r3, #0
9000a38a:	d02d      	beq.n	9000a3e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
9000a38c:	4b85      	ldr	r3, [pc, #532]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a38e:	681b      	ldr	r3, [r3, #0]
9000a390:	08db      	lsrs	r3, r3, #3
9000a392:	f003 0303 	and.w	r3, r3, #3
9000a396:	4a84      	ldr	r2, [pc, #528]	; (9000a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
9000a398:	fa22 f303 	lsr.w	r3, r2, r3
9000a39c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
9000a39e:	68bb      	ldr	r3, [r7, #8]
9000a3a0:	ee07 3a90 	vmov	s15, r3
9000a3a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a3a8:	697b      	ldr	r3, [r7, #20]
9000a3aa:	ee07 3a90 	vmov	s15, r3
9000a3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a3b6:	4b7b      	ldr	r3, [pc, #492]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000a3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a3be:	ee07 3a90 	vmov	s15, r3
9000a3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a3c6:	ed97 6a03 	vldr	s12, [r7, #12]
9000a3ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 9000a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a3d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a3de:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a3e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
9000a3e6:	e087      	b.n	9000a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
9000a3e8:	697b      	ldr	r3, [r7, #20]
9000a3ea:	ee07 3a90 	vmov	s15, r3
9000a3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a3f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 9000a5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
9000a3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a3fa:	4b6a      	ldr	r3, [pc, #424]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000a3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a402:	ee07 3a90 	vmov	s15, r3
9000a406:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a40a:	ed97 6a03 	vldr	s12, [r7, #12]
9000a40e:	eddf 5a67 	vldr	s11, [pc, #412]	; 9000a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a412:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a416:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a422:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000a42a:	e065      	b.n	9000a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
9000a42c:	697b      	ldr	r3, [r7, #20]
9000a42e:	ee07 3a90 	vmov	s15, r3
9000a432:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a436:	eddf 6a5f 	vldr	s13, [pc, #380]	; 9000a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000a43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a43e:	4b59      	ldr	r3, [pc, #356]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000a442:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a446:	ee07 3a90 	vmov	s15, r3
9000a44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a44e:	ed97 6a03 	vldr	s12, [r7, #12]
9000a452:	eddf 5a56 	vldr	s11, [pc, #344]	; 9000a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a456:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a462:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a466:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a46a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000a46e:	e043      	b.n	9000a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
9000a470:	697b      	ldr	r3, [r7, #20]
9000a472:	ee07 3a90 	vmov	s15, r3
9000a476:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a47a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 9000a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
9000a47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a482:	4b48      	ldr	r3, [pc, #288]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000a486:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a48a:	ee07 3a90 	vmov	s15, r3
9000a48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a492:	ed97 6a03 	vldr	s12, [r7, #12]
9000a496:	eddf 5a45 	vldr	s11, [pc, #276]	; 9000a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a4a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a4ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000a4b2:	e021      	b.n	9000a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
9000a4b4:	697b      	ldr	r3, [r7, #20]
9000a4b6:	ee07 3a90 	vmov	s15, r3
9000a4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a4be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 9000a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
9000a4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000a4c6:	4b37      	ldr	r3, [pc, #220]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000a4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a4ce:	ee07 3a90 	vmov	s15, r3
9000a4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000a4d6:	ed97 6a03 	vldr	s12, [r7, #12]
9000a4da:	eddf 5a34 	vldr	s11, [pc, #208]	; 9000a5ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000a4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000a4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000a4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000a4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000a4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
9000a4f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000a4f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
9000a4f8:	4b2a      	ldr	r3, [pc, #168]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000a4fc:	0a5b      	lsrs	r3, r3, #9
9000a4fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000a502:	ee07 3a90 	vmov	s15, r3
9000a506:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a50a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000a50e:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a512:	edd7 6a07 	vldr	s13, [r7, #28]
9000a516:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a51a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a51e:	ee17 2a90 	vmov	r2, s15
9000a522:	687b      	ldr	r3, [r7, #4]
9000a524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
9000a526:	4b1f      	ldr	r3, [pc, #124]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000a52a:	0c1b      	lsrs	r3, r3, #16
9000a52c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000a530:	ee07 3a90 	vmov	s15, r3
9000a534:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000a53c:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a540:	edd7 6a07 	vldr	s13, [r7, #28]
9000a544:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a54c:	ee17 2a90 	vmov	r2, s15
9000a550:	687b      	ldr	r3, [r7, #4]
9000a552:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
9000a554:	4b13      	ldr	r3, [pc, #76]	; (9000a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000a558:	0e1b      	lsrs	r3, r3, #24
9000a55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000a55e:	ee07 3a90 	vmov	s15, r3
9000a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000a566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000a56a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000a56e:	edd7 6a07 	vldr	s13, [r7, #28]
9000a572:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a57a:	ee17 2a90 	vmov	r2, s15
9000a57e:	687b      	ldr	r3, [r7, #4]
9000a580:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
9000a582:	e008      	b.n	9000a596 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
9000a584:	687b      	ldr	r3, [r7, #4]
9000a586:	2200      	movs	r2, #0
9000a588:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000a58a:	687b      	ldr	r3, [r7, #4]
9000a58c:	2200      	movs	r2, #0
9000a58e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
9000a590:	687b      	ldr	r3, [r7, #4]
9000a592:	2200      	movs	r2, #0
9000a594:	609a      	str	r2, [r3, #8]
}
9000a596:	bf00      	nop
9000a598:	3724      	adds	r7, #36	; 0x24
9000a59a:	46bd      	mov	sp, r7
9000a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a5a0:	4770      	bx	lr
9000a5a2:	bf00      	nop
9000a5a4:	58024400 	.word	0x58024400
9000a5a8:	03d09000 	.word	0x03d09000
9000a5ac:	46000000 	.word	0x46000000
9000a5b0:	4c742400 	.word	0x4c742400
9000a5b4:	4a742400 	.word	0x4a742400
9000a5b8:	4c371b00 	.word	0x4c371b00

9000a5bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000a5bc:	b580      	push	{r7, lr}
9000a5be:	b084      	sub	sp, #16
9000a5c0:	af00      	add	r7, sp, #0
9000a5c2:	6078      	str	r0, [r7, #4]
9000a5c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000a5c6:	2300      	movs	r3, #0
9000a5c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000a5ca:	4b53      	ldr	r3, [pc, #332]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a5ce:	f003 0303 	and.w	r3, r3, #3
9000a5d2:	2b03      	cmp	r3, #3
9000a5d4:	d101      	bne.n	9000a5da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
9000a5d6:	2301      	movs	r3, #1
9000a5d8:	e099      	b.n	9000a70e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000a5da:	4b4f      	ldr	r3, [pc, #316]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a5dc:	681b      	ldr	r3, [r3, #0]
9000a5de:	4a4e      	ldr	r2, [pc, #312]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a5e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000a5e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a5e6:	f7f9 fac3 	bl	90003b70 <HAL_GetTick>
9000a5ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000a5ec:	e008      	b.n	9000a600 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
9000a5ee:	f7f9 fabf 	bl	90003b70 <HAL_GetTick>
9000a5f2:	4602      	mov	r2, r0
9000a5f4:	68bb      	ldr	r3, [r7, #8]
9000a5f6:	1ad3      	subs	r3, r2, r3
9000a5f8:	2b02      	cmp	r3, #2
9000a5fa:	d901      	bls.n	9000a600 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
9000a5fc:	2303      	movs	r3, #3
9000a5fe:	e086      	b.n	9000a70e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000a600:	4b45      	ldr	r3, [pc, #276]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a602:	681b      	ldr	r3, [r3, #0]
9000a604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
9000a608:	2b00      	cmp	r3, #0
9000a60a:	d1f0      	bne.n	9000a5ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000a60c:	4b42      	ldr	r3, [pc, #264]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a610:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
9000a614:	687b      	ldr	r3, [r7, #4]
9000a616:	681b      	ldr	r3, [r3, #0]
9000a618:	031b      	lsls	r3, r3, #12
9000a61a:	493f      	ldr	r1, [pc, #252]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a61c:	4313      	orrs	r3, r2
9000a61e:	628b      	str	r3, [r1, #40]	; 0x28
9000a620:	687b      	ldr	r3, [r7, #4]
9000a622:	685b      	ldr	r3, [r3, #4]
9000a624:	3b01      	subs	r3, #1
9000a626:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000a62a:	687b      	ldr	r3, [r7, #4]
9000a62c:	689b      	ldr	r3, [r3, #8]
9000a62e:	3b01      	subs	r3, #1
9000a630:	025b      	lsls	r3, r3, #9
9000a632:	b29b      	uxth	r3, r3
9000a634:	431a      	orrs	r2, r3
9000a636:	687b      	ldr	r3, [r7, #4]
9000a638:	68db      	ldr	r3, [r3, #12]
9000a63a:	3b01      	subs	r3, #1
9000a63c:	041b      	lsls	r3, r3, #16
9000a63e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
9000a642:	431a      	orrs	r2, r3
9000a644:	687b      	ldr	r3, [r7, #4]
9000a646:	691b      	ldr	r3, [r3, #16]
9000a648:	3b01      	subs	r3, #1
9000a64a:	061b      	lsls	r3, r3, #24
9000a64c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
9000a650:	4931      	ldr	r1, [pc, #196]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a652:	4313      	orrs	r3, r2
9000a654:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000a656:	4b30      	ldr	r3, [pc, #192]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a65a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
9000a65e:	687b      	ldr	r3, [r7, #4]
9000a660:	695b      	ldr	r3, [r3, #20]
9000a662:	492d      	ldr	r1, [pc, #180]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a664:	4313      	orrs	r3, r2
9000a666:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000a668:	4b2b      	ldr	r3, [pc, #172]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a66c:	f023 0220 	bic.w	r2, r3, #32
9000a670:	687b      	ldr	r3, [r7, #4]
9000a672:	699b      	ldr	r3, [r3, #24]
9000a674:	4928      	ldr	r1, [pc, #160]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a676:	4313      	orrs	r3, r2
9000a678:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
9000a67a:	4b27      	ldr	r3, [pc, #156]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a67e:	4a26      	ldr	r2, [pc, #152]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a680:	f023 0310 	bic.w	r3, r3, #16
9000a684:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000a686:	4b24      	ldr	r3, [pc, #144]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000a68a:	4b24      	ldr	r3, [pc, #144]	; (9000a71c <RCCEx_PLL2_Config+0x160>)
9000a68c:	4013      	ands	r3, r2
9000a68e:	687a      	ldr	r2, [r7, #4]
9000a690:	69d2      	ldr	r2, [r2, #28]
9000a692:	00d2      	lsls	r2, r2, #3
9000a694:	4920      	ldr	r1, [pc, #128]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a696:	4313      	orrs	r3, r2
9000a698:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000a69a:	4b1f      	ldr	r3, [pc, #124]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a69e:	4a1e      	ldr	r2, [pc, #120]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6a0:	f043 0310 	orr.w	r3, r3, #16
9000a6a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
9000a6a6:	683b      	ldr	r3, [r7, #0]
9000a6a8:	2b00      	cmp	r3, #0
9000a6aa:	d106      	bne.n	9000a6ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000a6ac:	4b1a      	ldr	r3, [pc, #104]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a6b0:	4a19      	ldr	r2, [pc, #100]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000a6b6:	62d3      	str	r3, [r2, #44]	; 0x2c
9000a6b8:	e00f      	b.n	9000a6da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
9000a6ba:	683b      	ldr	r3, [r7, #0]
9000a6bc:	2b01      	cmp	r3, #1
9000a6be:	d106      	bne.n	9000a6ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000a6c0:	4b15      	ldr	r3, [pc, #84]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a6c4:	4a14      	ldr	r2, [pc, #80]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
9000a6ca:	62d3      	str	r3, [r2, #44]	; 0x2c
9000a6cc:	e005      	b.n	9000a6da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000a6ce:	4b12      	ldr	r3, [pc, #72]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a6d2:	4a11      	ldr	r2, [pc, #68]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
9000a6d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000a6da:	4b0f      	ldr	r3, [pc, #60]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6dc:	681b      	ldr	r3, [r3, #0]
9000a6de:	4a0e      	ldr	r2, [pc, #56]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a6e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000a6e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a6e6:	f7f9 fa43 	bl	90003b70 <HAL_GetTick>
9000a6ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000a6ec:	e008      	b.n	9000a700 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
9000a6ee:	f7f9 fa3f 	bl	90003b70 <HAL_GetTick>
9000a6f2:	4602      	mov	r2, r0
9000a6f4:	68bb      	ldr	r3, [r7, #8]
9000a6f6:	1ad3      	subs	r3, r2, r3
9000a6f8:	2b02      	cmp	r3, #2
9000a6fa:	d901      	bls.n	9000a700 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
9000a6fc:	2303      	movs	r3, #3
9000a6fe:	e006      	b.n	9000a70e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000a700:	4b05      	ldr	r3, [pc, #20]	; (9000a718 <RCCEx_PLL2_Config+0x15c>)
9000a702:	681b      	ldr	r3, [r3, #0]
9000a704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
9000a708:	2b00      	cmp	r3, #0
9000a70a:	d0f0      	beq.n	9000a6ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
9000a70c:	7bfb      	ldrb	r3, [r7, #15]
}
9000a70e:	4618      	mov	r0, r3
9000a710:	3710      	adds	r7, #16
9000a712:	46bd      	mov	sp, r7
9000a714:	bd80      	pop	{r7, pc}
9000a716:	bf00      	nop
9000a718:	58024400 	.word	0x58024400
9000a71c:	ffff0007 	.word	0xffff0007

9000a720 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000a720:	b580      	push	{r7, lr}
9000a722:	b084      	sub	sp, #16
9000a724:	af00      	add	r7, sp, #0
9000a726:	6078      	str	r0, [r7, #4]
9000a728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000a72a:	2300      	movs	r3, #0
9000a72c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000a72e:	4b53      	ldr	r3, [pc, #332]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a732:	f003 0303 	and.w	r3, r3, #3
9000a736:	2b03      	cmp	r3, #3
9000a738:	d101      	bne.n	9000a73e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
9000a73a:	2301      	movs	r3, #1
9000a73c:	e099      	b.n	9000a872 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000a73e:	4b4f      	ldr	r3, [pc, #316]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a740:	681b      	ldr	r3, [r3, #0]
9000a742:	4a4e      	ldr	r2, [pc, #312]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000a748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a74a:	f7f9 fa11 	bl	90003b70 <HAL_GetTick>
9000a74e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000a750:	e008      	b.n	9000a764 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
9000a752:	f7f9 fa0d 	bl	90003b70 <HAL_GetTick>
9000a756:	4602      	mov	r2, r0
9000a758:	68bb      	ldr	r3, [r7, #8]
9000a75a:	1ad3      	subs	r3, r2, r3
9000a75c:	2b02      	cmp	r3, #2
9000a75e:	d901      	bls.n	9000a764 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000a760:	2303      	movs	r3, #3
9000a762:	e086      	b.n	9000a872 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000a764:	4b45      	ldr	r3, [pc, #276]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a766:	681b      	ldr	r3, [r3, #0]
9000a768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000a76c:	2b00      	cmp	r3, #0
9000a76e:	d1f0      	bne.n	9000a752 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000a770:	4b42      	ldr	r3, [pc, #264]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a774:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
9000a778:	687b      	ldr	r3, [r7, #4]
9000a77a:	681b      	ldr	r3, [r3, #0]
9000a77c:	051b      	lsls	r3, r3, #20
9000a77e:	493f      	ldr	r1, [pc, #252]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a780:	4313      	orrs	r3, r2
9000a782:	628b      	str	r3, [r1, #40]	; 0x28
9000a784:	687b      	ldr	r3, [r7, #4]
9000a786:	685b      	ldr	r3, [r3, #4]
9000a788:	3b01      	subs	r3, #1
9000a78a:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000a78e:	687b      	ldr	r3, [r7, #4]
9000a790:	689b      	ldr	r3, [r3, #8]
9000a792:	3b01      	subs	r3, #1
9000a794:	025b      	lsls	r3, r3, #9
9000a796:	b29b      	uxth	r3, r3
9000a798:	431a      	orrs	r2, r3
9000a79a:	687b      	ldr	r3, [r7, #4]
9000a79c:	68db      	ldr	r3, [r3, #12]
9000a79e:	3b01      	subs	r3, #1
9000a7a0:	041b      	lsls	r3, r3, #16
9000a7a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
9000a7a6:	431a      	orrs	r2, r3
9000a7a8:	687b      	ldr	r3, [r7, #4]
9000a7aa:	691b      	ldr	r3, [r3, #16]
9000a7ac:	3b01      	subs	r3, #1
9000a7ae:	061b      	lsls	r3, r3, #24
9000a7b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
9000a7b4:	4931      	ldr	r1, [pc, #196]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7b6:	4313      	orrs	r3, r2
9000a7b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000a7ba:	4b30      	ldr	r3, [pc, #192]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a7be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
9000a7c2:	687b      	ldr	r3, [r7, #4]
9000a7c4:	695b      	ldr	r3, [r3, #20]
9000a7c6:	492d      	ldr	r1, [pc, #180]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7c8:	4313      	orrs	r3, r2
9000a7ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000a7cc:	4b2b      	ldr	r3, [pc, #172]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a7d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
9000a7d4:	687b      	ldr	r3, [r7, #4]
9000a7d6:	699b      	ldr	r3, [r3, #24]
9000a7d8:	4928      	ldr	r1, [pc, #160]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7da:	4313      	orrs	r3, r2
9000a7dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
9000a7de:	4b27      	ldr	r3, [pc, #156]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a7e2:	4a26      	ldr	r2, [pc, #152]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
9000a7e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000a7ea:	4b24      	ldr	r3, [pc, #144]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000a7ee:	4b24      	ldr	r3, [pc, #144]	; (9000a880 <RCCEx_PLL3_Config+0x160>)
9000a7f0:	4013      	ands	r3, r2
9000a7f2:	687a      	ldr	r2, [r7, #4]
9000a7f4:	69d2      	ldr	r2, [r2, #28]
9000a7f6:	00d2      	lsls	r2, r2, #3
9000a7f8:	4920      	ldr	r1, [pc, #128]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a7fa:	4313      	orrs	r3, r2
9000a7fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000a7fe:	4b1f      	ldr	r3, [pc, #124]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a802:	4a1e      	ldr	r2, [pc, #120]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000a808:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
9000a80a:	683b      	ldr	r3, [r7, #0]
9000a80c:	2b00      	cmp	r3, #0
9000a80e:	d106      	bne.n	9000a81e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000a810:	4b1a      	ldr	r3, [pc, #104]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a814:	4a19      	ldr	r2, [pc, #100]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a816:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000a81a:	62d3      	str	r3, [r2, #44]	; 0x2c
9000a81c:	e00f      	b.n	9000a83e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
9000a81e:	683b      	ldr	r3, [r7, #0]
9000a820:	2b01      	cmp	r3, #1
9000a822:	d106      	bne.n	9000a832 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000a824:	4b15      	ldr	r3, [pc, #84]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a828:	4a14      	ldr	r2, [pc, #80]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a82a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
9000a82e:	62d3      	str	r3, [r2, #44]	; 0x2c
9000a830:	e005      	b.n	9000a83e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000a832:	4b12      	ldr	r3, [pc, #72]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000a836:	4a11      	ldr	r2, [pc, #68]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a838:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000a83c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000a83e:	4b0f      	ldr	r3, [pc, #60]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a840:	681b      	ldr	r3, [r3, #0]
9000a842:	4a0e      	ldr	r2, [pc, #56]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000a848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000a84a:	f7f9 f991 	bl	90003b70 <HAL_GetTick>
9000a84e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000a850:	e008      	b.n	9000a864 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
9000a852:	f7f9 f98d 	bl	90003b70 <HAL_GetTick>
9000a856:	4602      	mov	r2, r0
9000a858:	68bb      	ldr	r3, [r7, #8]
9000a85a:	1ad3      	subs	r3, r2, r3
9000a85c:	2b02      	cmp	r3, #2
9000a85e:	d901      	bls.n	9000a864 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
9000a860:	2303      	movs	r3, #3
9000a862:	e006      	b.n	9000a872 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000a864:	4b05      	ldr	r3, [pc, #20]	; (9000a87c <RCCEx_PLL3_Config+0x15c>)
9000a866:	681b      	ldr	r3, [r3, #0]
9000a868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000a86c:	2b00      	cmp	r3, #0
9000a86e:	d0f0      	beq.n	9000a852 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
9000a870:	7bfb      	ldrb	r3, [r7, #15]
}
9000a872:	4618      	mov	r0, r3
9000a874:	3710      	adds	r7, #16
9000a876:	46bd      	mov	sp, r7
9000a878:	bd80      	pop	{r7, pc}
9000a87a:	bf00      	nop
9000a87c:	58024400 	.word	0x58024400
9000a880:	ffff0007 	.word	0xffff0007

9000a884 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
9000a884:	b580      	push	{r7, lr}
9000a886:	b084      	sub	sp, #16
9000a888:	af00      	add	r7, sp, #0
9000a88a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
9000a88c:	687b      	ldr	r3, [r7, #4]
9000a88e:	2b00      	cmp	r3, #0
9000a890:	d101      	bne.n	9000a896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
9000a892:	2301      	movs	r3, #1
9000a894:	e0f1      	b.n	9000aa7a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
9000a896:	687b      	ldr	r3, [r7, #4]
9000a898:	2200      	movs	r2, #0
9000a89a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
9000a89c:	687b      	ldr	r3, [r7, #4]
9000a89e:	681b      	ldr	r3, [r3, #0]
9000a8a0:	4a78      	ldr	r2, [pc, #480]	; (9000aa84 <HAL_SPI_Init+0x200>)
9000a8a2:	4293      	cmp	r3, r2
9000a8a4:	d00f      	beq.n	9000a8c6 <HAL_SPI_Init+0x42>
9000a8a6:	687b      	ldr	r3, [r7, #4]
9000a8a8:	681b      	ldr	r3, [r3, #0]
9000a8aa:	4a77      	ldr	r2, [pc, #476]	; (9000aa88 <HAL_SPI_Init+0x204>)
9000a8ac:	4293      	cmp	r3, r2
9000a8ae:	d00a      	beq.n	9000a8c6 <HAL_SPI_Init+0x42>
9000a8b0:	687b      	ldr	r3, [r7, #4]
9000a8b2:	681b      	ldr	r3, [r3, #0]
9000a8b4:	4a75      	ldr	r2, [pc, #468]	; (9000aa8c <HAL_SPI_Init+0x208>)
9000a8b6:	4293      	cmp	r3, r2
9000a8b8:	d005      	beq.n	9000a8c6 <HAL_SPI_Init+0x42>
9000a8ba:	687b      	ldr	r3, [r7, #4]
9000a8bc:	68db      	ldr	r3, [r3, #12]
9000a8be:	2b0f      	cmp	r3, #15
9000a8c0:	d901      	bls.n	9000a8c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
9000a8c2:	2301      	movs	r3, #1
9000a8c4:	e0d9      	b.n	9000aa7a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
9000a8c6:	6878      	ldr	r0, [r7, #4]
9000a8c8:	f000 fbd8 	bl	9000b07c <SPI_GetPacketSize>
9000a8cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
9000a8ce:	687b      	ldr	r3, [r7, #4]
9000a8d0:	681b      	ldr	r3, [r3, #0]
9000a8d2:	4a6c      	ldr	r2, [pc, #432]	; (9000aa84 <HAL_SPI_Init+0x200>)
9000a8d4:	4293      	cmp	r3, r2
9000a8d6:	d00c      	beq.n	9000a8f2 <HAL_SPI_Init+0x6e>
9000a8d8:	687b      	ldr	r3, [r7, #4]
9000a8da:	681b      	ldr	r3, [r3, #0]
9000a8dc:	4a6a      	ldr	r2, [pc, #424]	; (9000aa88 <HAL_SPI_Init+0x204>)
9000a8de:	4293      	cmp	r3, r2
9000a8e0:	d007      	beq.n	9000a8f2 <HAL_SPI_Init+0x6e>
9000a8e2:	687b      	ldr	r3, [r7, #4]
9000a8e4:	681b      	ldr	r3, [r3, #0]
9000a8e6:	4a69      	ldr	r2, [pc, #420]	; (9000aa8c <HAL_SPI_Init+0x208>)
9000a8e8:	4293      	cmp	r3, r2
9000a8ea:	d002      	beq.n	9000a8f2 <HAL_SPI_Init+0x6e>
9000a8ec:	68fb      	ldr	r3, [r7, #12]
9000a8ee:	2b08      	cmp	r3, #8
9000a8f0:	d811      	bhi.n	9000a916 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
9000a8f2:	687b      	ldr	r3, [r7, #4]
9000a8f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
9000a8f6:	4a63      	ldr	r2, [pc, #396]	; (9000aa84 <HAL_SPI_Init+0x200>)
9000a8f8:	4293      	cmp	r3, r2
9000a8fa:	d009      	beq.n	9000a910 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
9000a8fc:	687b      	ldr	r3, [r7, #4]
9000a8fe:	681b      	ldr	r3, [r3, #0]
9000a900:	4a61      	ldr	r2, [pc, #388]	; (9000aa88 <HAL_SPI_Init+0x204>)
9000a902:	4293      	cmp	r3, r2
9000a904:	d004      	beq.n	9000a910 <HAL_SPI_Init+0x8c>
9000a906:	687b      	ldr	r3, [r7, #4]
9000a908:	681b      	ldr	r3, [r3, #0]
9000a90a:	4a60      	ldr	r2, [pc, #384]	; (9000aa8c <HAL_SPI_Init+0x208>)
9000a90c:	4293      	cmp	r3, r2
9000a90e:	d104      	bne.n	9000a91a <HAL_SPI_Init+0x96>
9000a910:	68fb      	ldr	r3, [r7, #12]
9000a912:	2b10      	cmp	r3, #16
9000a914:	d901      	bls.n	9000a91a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
9000a916:	2301      	movs	r3, #1
9000a918:	e0af      	b.n	9000aa7a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
9000a91a:	687b      	ldr	r3, [r7, #4]
9000a91c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
9000a920:	b2db      	uxtb	r3, r3
9000a922:	2b00      	cmp	r3, #0
9000a924:	d106      	bne.n	9000a934 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
9000a926:	687b      	ldr	r3, [r7, #4]
9000a928:	2200      	movs	r2, #0
9000a92a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
9000a92e:	6878      	ldr	r0, [r7, #4]
9000a930:	f7f7 f840 	bl	900019b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
9000a934:	687b      	ldr	r3, [r7, #4]
9000a936:	2202      	movs	r2, #2
9000a938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
9000a93c:	687b      	ldr	r3, [r7, #4]
9000a93e:	681b      	ldr	r3, [r3, #0]
9000a940:	681a      	ldr	r2, [r3, #0]
9000a942:	687b      	ldr	r3, [r7, #4]
9000a944:	681b      	ldr	r3, [r3, #0]
9000a946:	f022 0201 	bic.w	r2, r2, #1
9000a94a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
9000a94c:	687b      	ldr	r3, [r7, #4]
9000a94e:	681b      	ldr	r3, [r3, #0]
9000a950:	689b      	ldr	r3, [r3, #8]
9000a952:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
9000a956:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
9000a958:	687b      	ldr	r3, [r7, #4]
9000a95a:	699b      	ldr	r3, [r3, #24]
9000a95c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
9000a960:	d119      	bne.n	9000a996 <HAL_SPI_Init+0x112>
9000a962:	687b      	ldr	r3, [r7, #4]
9000a964:	685b      	ldr	r3, [r3, #4]
9000a966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000a96a:	d103      	bne.n	9000a974 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
9000a96c:	687b      	ldr	r3, [r7, #4]
9000a96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
9000a970:	2b00      	cmp	r3, #0
9000a972:	d008      	beq.n	9000a986 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
9000a974:	687b      	ldr	r3, [r7, #4]
9000a976:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
9000a978:	2b00      	cmp	r3, #0
9000a97a:	d10c      	bne.n	9000a996 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
9000a97c:	687b      	ldr	r3, [r7, #4]
9000a97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
9000a980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000a984:	d107      	bne.n	9000a996 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
9000a986:	687b      	ldr	r3, [r7, #4]
9000a988:	681b      	ldr	r3, [r3, #0]
9000a98a:	681a      	ldr	r2, [r3, #0]
9000a98c:	687b      	ldr	r3, [r7, #4]
9000a98e:	681b      	ldr	r3, [r3, #0]
9000a990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000a994:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
9000a996:	687b      	ldr	r3, [r7, #4]
9000a998:	69da      	ldr	r2, [r3, #28]
9000a99a:	687b      	ldr	r3, [r7, #4]
9000a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000a99e:	431a      	orrs	r2, r3
9000a9a0:	68bb      	ldr	r3, [r7, #8]
9000a9a2:	431a      	orrs	r2, r3
9000a9a4:	687b      	ldr	r3, [r7, #4]
9000a9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000a9a8:	ea42 0103 	orr.w	r1, r2, r3
9000a9ac:	687b      	ldr	r3, [r7, #4]
9000a9ae:	68da      	ldr	r2, [r3, #12]
9000a9b0:	687b      	ldr	r3, [r7, #4]
9000a9b2:	681b      	ldr	r3, [r3, #0]
9000a9b4:	430a      	orrs	r2, r1
9000a9b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
9000a9b8:	687b      	ldr	r3, [r7, #4]
9000a9ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a9bc:	687b      	ldr	r3, [r7, #4]
9000a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a9c0:	431a      	orrs	r2, r3
9000a9c2:	687b      	ldr	r3, [r7, #4]
9000a9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000a9c6:	431a      	orrs	r2, r3
9000a9c8:	687b      	ldr	r3, [r7, #4]
9000a9ca:	699b      	ldr	r3, [r3, #24]
9000a9cc:	431a      	orrs	r2, r3
9000a9ce:	687b      	ldr	r3, [r7, #4]
9000a9d0:	691b      	ldr	r3, [r3, #16]
9000a9d2:	431a      	orrs	r2, r3
9000a9d4:	687b      	ldr	r3, [r7, #4]
9000a9d6:	695b      	ldr	r3, [r3, #20]
9000a9d8:	431a      	orrs	r2, r3
9000a9da:	687b      	ldr	r3, [r7, #4]
9000a9dc:	6a1b      	ldr	r3, [r3, #32]
9000a9de:	431a      	orrs	r2, r3
9000a9e0:	687b      	ldr	r3, [r7, #4]
9000a9e2:	685b      	ldr	r3, [r3, #4]
9000a9e4:	431a      	orrs	r2, r3
9000a9e6:	687b      	ldr	r3, [r7, #4]
9000a9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000a9ea:	431a      	orrs	r2, r3
9000a9ec:	687b      	ldr	r3, [r7, #4]
9000a9ee:	689b      	ldr	r3, [r3, #8]
9000a9f0:	431a      	orrs	r2, r3
9000a9f2:	687b      	ldr	r3, [r7, #4]
9000a9f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000a9f6:	ea42 0103 	orr.w	r1, r2, r3
9000a9fa:	687b      	ldr	r3, [r7, #4]
9000a9fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
9000a9fe:	687b      	ldr	r3, [r7, #4]
9000aa00:	681b      	ldr	r3, [r3, #0]
9000aa02:	430a      	orrs	r2, r1
9000aa04:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
9000aa06:	687b      	ldr	r3, [r7, #4]
9000aa08:	685b      	ldr	r3, [r3, #4]
9000aa0a:	2b00      	cmp	r3, #0
9000aa0c:	d113      	bne.n	9000aa36 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
9000aa0e:	687b      	ldr	r3, [r7, #4]
9000aa10:	681b      	ldr	r3, [r3, #0]
9000aa12:	689b      	ldr	r3, [r3, #8]
9000aa14:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
9000aa18:	687b      	ldr	r3, [r7, #4]
9000aa1a:	681b      	ldr	r3, [r3, #0]
9000aa1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
9000aa20:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
9000aa22:	687b      	ldr	r3, [r7, #4]
9000aa24:	681b      	ldr	r3, [r3, #0]
9000aa26:	689b      	ldr	r3, [r3, #8]
9000aa28:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
9000aa2c:	687b      	ldr	r3, [r7, #4]
9000aa2e:	681b      	ldr	r3, [r3, #0]
9000aa30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
9000aa34:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
9000aa36:	687b      	ldr	r3, [r7, #4]
9000aa38:	681b      	ldr	r3, [r3, #0]
9000aa3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000aa3c:	687b      	ldr	r3, [r7, #4]
9000aa3e:	681b      	ldr	r3, [r3, #0]
9000aa40:	f022 0201 	bic.w	r2, r2, #1
9000aa44:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
9000aa46:	687b      	ldr	r3, [r7, #4]
9000aa48:	685b      	ldr	r3, [r3, #4]
9000aa4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000aa4e:	2b00      	cmp	r3, #0
9000aa50:	d00a      	beq.n	9000aa68 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
9000aa52:	687b      	ldr	r3, [r7, #4]
9000aa54:	681b      	ldr	r3, [r3, #0]
9000aa56:	68db      	ldr	r3, [r3, #12]
9000aa58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
9000aa5c:	687b      	ldr	r3, [r7, #4]
9000aa5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000aa60:	687b      	ldr	r3, [r7, #4]
9000aa62:	681b      	ldr	r3, [r3, #0]
9000aa64:	430a      	orrs	r2, r1
9000aa66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
9000aa68:	687b      	ldr	r3, [r7, #4]
9000aa6a:	2200      	movs	r2, #0
9000aa6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
9000aa70:	687b      	ldr	r3, [r7, #4]
9000aa72:	2201      	movs	r2, #1
9000aa74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
9000aa78:	2300      	movs	r3, #0
}
9000aa7a:	4618      	mov	r0, r3
9000aa7c:	3710      	adds	r7, #16
9000aa7e:	46bd      	mov	sp, r7
9000aa80:	bd80      	pop	{r7, pc}
9000aa82:	bf00      	nop
9000aa84:	40013000 	.word	0x40013000
9000aa88:	40003800 	.word	0x40003800
9000aa8c:	40003c00 	.word	0x40003c00

9000aa90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
9000aa90:	b580      	push	{r7, lr}
9000aa92:	b08e      	sub	sp, #56	; 0x38
9000aa94:	af02      	add	r7, sp, #8
9000aa96:	60f8      	str	r0, [r7, #12]
9000aa98:	60b9      	str	r1, [r7, #8]
9000aa9a:	607a      	str	r2, [r7, #4]
9000aa9c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
9000aa9e:	2300      	movs	r3, #0
9000aaa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
9000aaa4:	68fb      	ldr	r3, [r7, #12]
9000aaa6:	681b      	ldr	r3, [r3, #0]
9000aaa8:	3320      	adds	r3, #32
9000aaaa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
9000aaac:	68fb      	ldr	r3, [r7, #12]
9000aaae:	681b      	ldr	r3, [r3, #0]
9000aab0:	3330      	adds	r3, #48	; 0x30
9000aab2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
9000aab4:	68fb      	ldr	r3, [r7, #12]
9000aab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
9000aaba:	2b01      	cmp	r3, #1
9000aabc:	d101      	bne.n	9000aac2 <HAL_SPI_TransmitReceive+0x32>
9000aabe:	2302      	movs	r3, #2
9000aac0:	e209      	b.n	9000aed6 <HAL_SPI_TransmitReceive+0x446>
9000aac2:	68fb      	ldr	r3, [r7, #12]
9000aac4:	2201      	movs	r2, #1
9000aac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
9000aaca:	f7f9 f851 	bl	90003b70 <HAL_GetTick>
9000aace:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
9000aad0:	887b      	ldrh	r3, [r7, #2]
9000aad2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
9000aad4:	887b      	ldrh	r3, [r7, #2]
9000aad6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
9000aad8:	68fb      	ldr	r3, [r7, #12]
9000aada:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
9000aade:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
9000aae0:	68fb      	ldr	r3, [r7, #12]
9000aae2:	685b      	ldr	r3, [r3, #4]
9000aae4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
9000aae6:	7efb      	ldrb	r3, [r7, #27]
9000aae8:	2b01      	cmp	r3, #1
9000aaea:	d014      	beq.n	9000ab16 <HAL_SPI_TransmitReceive+0x86>
9000aaec:	697b      	ldr	r3, [r7, #20]
9000aaee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000aaf2:	d106      	bne.n	9000ab02 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
9000aaf4:	68fb      	ldr	r3, [r7, #12]
9000aaf6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
9000aaf8:	2b00      	cmp	r3, #0
9000aafa:	d102      	bne.n	9000ab02 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
9000aafc:	7efb      	ldrb	r3, [r7, #27]
9000aafe:	2b04      	cmp	r3, #4
9000ab00:	d009      	beq.n	9000ab16 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
9000ab02:	2302      	movs	r3, #2
9000ab04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
9000ab08:	68fb      	ldr	r3, [r7, #12]
9000ab0a:	2200      	movs	r2, #0
9000ab0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
9000ab10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
9000ab14:	e1df      	b.n	9000aed6 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
9000ab16:	68bb      	ldr	r3, [r7, #8]
9000ab18:	2b00      	cmp	r3, #0
9000ab1a:	d005      	beq.n	9000ab28 <HAL_SPI_TransmitReceive+0x98>
9000ab1c:	687b      	ldr	r3, [r7, #4]
9000ab1e:	2b00      	cmp	r3, #0
9000ab20:	d002      	beq.n	9000ab28 <HAL_SPI_TransmitReceive+0x98>
9000ab22:	887b      	ldrh	r3, [r7, #2]
9000ab24:	2b00      	cmp	r3, #0
9000ab26:	d109      	bne.n	9000ab3c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
9000ab28:	2301      	movs	r3, #1
9000ab2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
9000ab2e:	68fb      	ldr	r3, [r7, #12]
9000ab30:	2200      	movs	r2, #0
9000ab32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
9000ab36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
9000ab3a:	e1cc      	b.n	9000aed6 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
9000ab3c:	68fb      	ldr	r3, [r7, #12]
9000ab3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
9000ab42:	b2db      	uxtb	r3, r3
9000ab44:	2b04      	cmp	r3, #4
9000ab46:	d003      	beq.n	9000ab50 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
9000ab48:	68fb      	ldr	r3, [r7, #12]
9000ab4a:	2205      	movs	r2, #5
9000ab4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
9000ab50:	68fb      	ldr	r3, [r7, #12]
9000ab52:	2200      	movs	r2, #0
9000ab54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
9000ab58:	68fb      	ldr	r3, [r7, #12]
9000ab5a:	687a      	ldr	r2, [r7, #4]
9000ab5c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
9000ab5e:	68fb      	ldr	r3, [r7, #12]
9000ab60:	887a      	ldrh	r2, [r7, #2]
9000ab62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
9000ab66:	68fb      	ldr	r3, [r7, #12]
9000ab68:	887a      	ldrh	r2, [r7, #2]
9000ab6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
9000ab6e:	68fb      	ldr	r3, [r7, #12]
9000ab70:	68ba      	ldr	r2, [r7, #8]
9000ab72:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
9000ab74:	68fb      	ldr	r3, [r7, #12]
9000ab76:	887a      	ldrh	r2, [r7, #2]
9000ab78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
9000ab7c:	68fb      	ldr	r3, [r7, #12]
9000ab7e:	887a      	ldrh	r2, [r7, #2]
9000ab80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
9000ab84:	68fb      	ldr	r3, [r7, #12]
9000ab86:	2200      	movs	r2, #0
9000ab88:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
9000ab8a:	68fb      	ldr	r3, [r7, #12]
9000ab8c:	2200      	movs	r2, #0
9000ab8e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
9000ab90:	68fb      	ldr	r3, [r7, #12]
9000ab92:	681b      	ldr	r3, [r3, #0]
9000ab94:	685a      	ldr	r2, [r3, #4]
9000ab96:	4b82      	ldr	r3, [pc, #520]	; (9000ada0 <HAL_SPI_TransmitReceive+0x310>)
9000ab98:	4013      	ands	r3, r2
9000ab9a:	8879      	ldrh	r1, [r7, #2]
9000ab9c:	68fa      	ldr	r2, [r7, #12]
9000ab9e:	6812      	ldr	r2, [r2, #0]
9000aba0:	430b      	orrs	r3, r1
9000aba2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
9000aba4:	68fb      	ldr	r3, [r7, #12]
9000aba6:	681b      	ldr	r3, [r3, #0]
9000aba8:	681a      	ldr	r2, [r3, #0]
9000abaa:	68fb      	ldr	r3, [r7, #12]
9000abac:	681b      	ldr	r3, [r3, #0]
9000abae:	f042 0201 	orr.w	r2, r2, #1
9000abb2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
9000abb4:	68fb      	ldr	r3, [r7, #12]
9000abb6:	685b      	ldr	r3, [r3, #4]
9000abb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000abbc:	d107      	bne.n	9000abce <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
9000abbe:	68fb      	ldr	r3, [r7, #12]
9000abc0:	681b      	ldr	r3, [r3, #0]
9000abc2:	681a      	ldr	r2, [r3, #0]
9000abc4:	68fb      	ldr	r3, [r7, #12]
9000abc6:	681b      	ldr	r3, [r3, #0]
9000abc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
9000abcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
9000abce:	68fb      	ldr	r3, [r7, #12]
9000abd0:	68db      	ldr	r3, [r3, #12]
9000abd2:	2b0f      	cmp	r3, #15
9000abd4:	d970      	bls.n	9000acb8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
9000abd6:	e068      	b.n	9000acaa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
9000abd8:	68fb      	ldr	r3, [r7, #12]
9000abda:	681b      	ldr	r3, [r3, #0]
9000abdc:	695b      	ldr	r3, [r3, #20]
9000abde:	f003 0302 	and.w	r3, r3, #2
9000abe2:	2b02      	cmp	r3, #2
9000abe4:	d11a      	bne.n	9000ac1c <HAL_SPI_TransmitReceive+0x18c>
9000abe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000abe8:	2b00      	cmp	r3, #0
9000abea:	d017      	beq.n	9000ac1c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
9000abec:	68fb      	ldr	r3, [r7, #12]
9000abee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
9000abf0:	68fb      	ldr	r3, [r7, #12]
9000abf2:	681b      	ldr	r3, [r3, #0]
9000abf4:	6812      	ldr	r2, [r2, #0]
9000abf6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
9000abf8:	68fb      	ldr	r3, [r7, #12]
9000abfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000abfc:	1d1a      	adds	r2, r3, #4
9000abfe:	68fb      	ldr	r3, [r7, #12]
9000ac00:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
9000ac02:	68fb      	ldr	r3, [r7, #12]
9000ac04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
9000ac08:	b29b      	uxth	r3, r3
9000ac0a:	3b01      	subs	r3, #1
9000ac0c:	b29a      	uxth	r2, r3
9000ac0e:	68fb      	ldr	r3, [r7, #12]
9000ac10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
9000ac14:	68fb      	ldr	r3, [r7, #12]
9000ac16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
9000ac1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
9000ac1c:	68fb      	ldr	r3, [r7, #12]
9000ac1e:	681b      	ldr	r3, [r3, #0]
9000ac20:	695a      	ldr	r2, [r3, #20]
9000ac22:	f248 0308 	movw	r3, #32776	; 0x8008
9000ac26:	4013      	ands	r3, r2
9000ac28:	2b00      	cmp	r3, #0
9000ac2a:	d01a      	beq.n	9000ac62 <HAL_SPI_TransmitReceive+0x1d2>
9000ac2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000ac2e:	2b00      	cmp	r3, #0
9000ac30:	d017      	beq.n	9000ac62 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
9000ac32:	68fb      	ldr	r3, [r7, #12]
9000ac34:	681a      	ldr	r2, [r3, #0]
9000ac36:	68fb      	ldr	r3, [r7, #12]
9000ac38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ac3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
9000ac3c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
9000ac3e:	68fb      	ldr	r3, [r7, #12]
9000ac40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ac42:	1d1a      	adds	r2, r3, #4
9000ac44:	68fb      	ldr	r3, [r7, #12]
9000ac46:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
9000ac48:	68fb      	ldr	r3, [r7, #12]
9000ac4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000ac4e:	b29b      	uxth	r3, r3
9000ac50:	3b01      	subs	r3, #1
9000ac52:	b29a      	uxth	r2, r3
9000ac54:	68fb      	ldr	r3, [r7, #12]
9000ac56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
9000ac5a:	68fb      	ldr	r3, [r7, #12]
9000ac5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000ac60:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
9000ac62:	f7f8 ff85 	bl	90003b70 <HAL_GetTick>
9000ac66:	4602      	mov	r2, r0
9000ac68:	69fb      	ldr	r3, [r7, #28]
9000ac6a:	1ad3      	subs	r3, r2, r3
9000ac6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000ac6e:	429a      	cmp	r2, r3
9000ac70:	d803      	bhi.n	9000ac7a <HAL_SPI_TransmitReceive+0x1ea>
9000ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ac74:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ac78:	d102      	bne.n	9000ac80 <HAL_SPI_TransmitReceive+0x1f0>
9000ac7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ac7c:	2b00      	cmp	r3, #0
9000ac7e:	d114      	bne.n	9000acaa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
9000ac80:	68f8      	ldr	r0, [r7, #12]
9000ac82:	f000 f92d 	bl	9000aee0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
9000ac86:	68fb      	ldr	r3, [r7, #12]
9000ac88:	2200      	movs	r2, #0
9000ac8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
9000ac8e:	68fb      	ldr	r3, [r7, #12]
9000ac90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000ac94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
9000ac98:	68fb      	ldr	r3, [r7, #12]
9000ac9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
9000ac9e:	68fb      	ldr	r3, [r7, #12]
9000aca0:	2201      	movs	r2, #1
9000aca2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
9000aca6:	2303      	movs	r3, #3
9000aca8:	e115      	b.n	9000aed6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
9000acaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000acac:	2b00      	cmp	r3, #0
9000acae:	d193      	bne.n	9000abd8 <HAL_SPI_TransmitReceive+0x148>
9000acb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000acb2:	2b00      	cmp	r3, #0
9000acb4:	d190      	bne.n	9000abd8 <HAL_SPI_TransmitReceive+0x148>
9000acb6:	e0e7      	b.n	9000ae88 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
9000acb8:	68fb      	ldr	r3, [r7, #12]
9000acba:	68db      	ldr	r3, [r3, #12]
9000acbc:	2b07      	cmp	r3, #7
9000acbe:	f240 80dd 	bls.w	9000ae7c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
9000acc2:	e066      	b.n	9000ad92 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
9000acc4:	68fb      	ldr	r3, [r7, #12]
9000acc6:	681b      	ldr	r3, [r3, #0]
9000acc8:	695b      	ldr	r3, [r3, #20]
9000acca:	f003 0302 	and.w	r3, r3, #2
9000acce:	2b02      	cmp	r3, #2
9000acd0:	d119      	bne.n	9000ad06 <HAL_SPI_TransmitReceive+0x276>
9000acd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000acd4:	2b00      	cmp	r3, #0
9000acd6:	d016      	beq.n	9000ad06 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
9000acd8:	68fb      	ldr	r3, [r7, #12]
9000acda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000acdc:	881a      	ldrh	r2, [r3, #0]
9000acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ace0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
9000ace2:	68fb      	ldr	r3, [r7, #12]
9000ace4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000ace6:	1c9a      	adds	r2, r3, #2
9000ace8:	68fb      	ldr	r3, [r7, #12]
9000acea:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
9000acec:	68fb      	ldr	r3, [r7, #12]
9000acee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
9000acf2:	b29b      	uxth	r3, r3
9000acf4:	3b01      	subs	r3, #1
9000acf6:	b29a      	uxth	r2, r3
9000acf8:	68fb      	ldr	r3, [r7, #12]
9000acfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
9000acfe:	68fb      	ldr	r3, [r7, #12]
9000ad00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
9000ad04:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
9000ad06:	68fb      	ldr	r3, [r7, #12]
9000ad08:	681b      	ldr	r3, [r3, #0]
9000ad0a:	695b      	ldr	r3, [r3, #20]
9000ad0c:	f003 0301 	and.w	r3, r3, #1
9000ad10:	2b01      	cmp	r3, #1
9000ad12:	d11a      	bne.n	9000ad4a <HAL_SPI_TransmitReceive+0x2ba>
9000ad14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000ad16:	2b00      	cmp	r3, #0
9000ad18:	d017      	beq.n	9000ad4a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
9000ad1a:	68fb      	ldr	r3, [r7, #12]
9000ad1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ad1e:	6a3a      	ldr	r2, [r7, #32]
9000ad20:	8812      	ldrh	r2, [r2, #0]
9000ad22:	b292      	uxth	r2, r2
9000ad24:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
9000ad26:	68fb      	ldr	r3, [r7, #12]
9000ad28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ad2a:	1c9a      	adds	r2, r3, #2
9000ad2c:	68fb      	ldr	r3, [r7, #12]
9000ad2e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
9000ad30:	68fb      	ldr	r3, [r7, #12]
9000ad32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000ad36:	b29b      	uxth	r3, r3
9000ad38:	3b01      	subs	r3, #1
9000ad3a:	b29a      	uxth	r2, r3
9000ad3c:	68fb      	ldr	r3, [r7, #12]
9000ad3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
9000ad42:	68fb      	ldr	r3, [r7, #12]
9000ad44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000ad48:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
9000ad4a:	f7f8 ff11 	bl	90003b70 <HAL_GetTick>
9000ad4e:	4602      	mov	r2, r0
9000ad50:	69fb      	ldr	r3, [r7, #28]
9000ad52:	1ad3      	subs	r3, r2, r3
9000ad54:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000ad56:	429a      	cmp	r2, r3
9000ad58:	d803      	bhi.n	9000ad62 <HAL_SPI_TransmitReceive+0x2d2>
9000ad5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ad60:	d102      	bne.n	9000ad68 <HAL_SPI_TransmitReceive+0x2d8>
9000ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ad64:	2b00      	cmp	r3, #0
9000ad66:	d114      	bne.n	9000ad92 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
9000ad68:	68f8      	ldr	r0, [r7, #12]
9000ad6a:	f000 f8b9 	bl	9000aee0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
9000ad6e:	68fb      	ldr	r3, [r7, #12]
9000ad70:	2200      	movs	r2, #0
9000ad72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
9000ad76:	68fb      	ldr	r3, [r7, #12]
9000ad78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000ad7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
9000ad80:	68fb      	ldr	r3, [r7, #12]
9000ad82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
9000ad86:	68fb      	ldr	r3, [r7, #12]
9000ad88:	2201      	movs	r2, #1
9000ad8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
9000ad8e:	2303      	movs	r3, #3
9000ad90:	e0a1      	b.n	9000aed6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
9000ad92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000ad94:	2b00      	cmp	r3, #0
9000ad96:	d195      	bne.n	9000acc4 <HAL_SPI_TransmitReceive+0x234>
9000ad98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000ad9a:	2b00      	cmp	r3, #0
9000ad9c:	d192      	bne.n	9000acc4 <HAL_SPI_TransmitReceive+0x234>
9000ad9e:	e073      	b.n	9000ae88 <HAL_SPI_TransmitReceive+0x3f8>
9000ada0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
9000ada4:	68fb      	ldr	r3, [r7, #12]
9000ada6:	681b      	ldr	r3, [r3, #0]
9000ada8:	695b      	ldr	r3, [r3, #20]
9000adaa:	f003 0302 	and.w	r3, r3, #2
9000adae:	2b02      	cmp	r3, #2
9000adb0:	d11b      	bne.n	9000adea <HAL_SPI_TransmitReceive+0x35a>
9000adb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000adb4:	2b00      	cmp	r3, #0
9000adb6:	d018      	beq.n	9000adea <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
9000adb8:	68fb      	ldr	r3, [r7, #12]
9000adba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
9000adbc:	68fb      	ldr	r3, [r7, #12]
9000adbe:	681b      	ldr	r3, [r3, #0]
9000adc0:	3320      	adds	r3, #32
9000adc2:	7812      	ldrb	r2, [r2, #0]
9000adc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
9000adc6:	68fb      	ldr	r3, [r7, #12]
9000adc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9000adca:	1c5a      	adds	r2, r3, #1
9000adcc:	68fb      	ldr	r3, [r7, #12]
9000adce:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
9000add0:	68fb      	ldr	r3, [r7, #12]
9000add2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
9000add6:	b29b      	uxth	r3, r3
9000add8:	3b01      	subs	r3, #1
9000adda:	b29a      	uxth	r2, r3
9000addc:	68fb      	ldr	r3, [r7, #12]
9000adde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
9000ade2:	68fb      	ldr	r3, [r7, #12]
9000ade4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
9000ade8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
9000adea:	68fb      	ldr	r3, [r7, #12]
9000adec:	681b      	ldr	r3, [r3, #0]
9000adee:	695b      	ldr	r3, [r3, #20]
9000adf0:	f003 0301 	and.w	r3, r3, #1
9000adf4:	2b01      	cmp	r3, #1
9000adf6:	d11d      	bne.n	9000ae34 <HAL_SPI_TransmitReceive+0x3a4>
9000adf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000adfa:	2b00      	cmp	r3, #0
9000adfc:	d01a      	beq.n	9000ae34 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
9000adfe:	68fb      	ldr	r3, [r7, #12]
9000ae00:	681b      	ldr	r3, [r3, #0]
9000ae02:	f103 0230 	add.w	r2, r3, #48	; 0x30
9000ae06:	68fb      	ldr	r3, [r7, #12]
9000ae08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ae0a:	7812      	ldrb	r2, [r2, #0]
9000ae0c:	b2d2      	uxtb	r2, r2
9000ae0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
9000ae10:	68fb      	ldr	r3, [r7, #12]
9000ae12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000ae14:	1c5a      	adds	r2, r3, #1
9000ae16:	68fb      	ldr	r3, [r7, #12]
9000ae18:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
9000ae1a:	68fb      	ldr	r3, [r7, #12]
9000ae1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000ae20:	b29b      	uxth	r3, r3
9000ae22:	3b01      	subs	r3, #1
9000ae24:	b29a      	uxth	r2, r3
9000ae26:	68fb      	ldr	r3, [r7, #12]
9000ae28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
9000ae2c:	68fb      	ldr	r3, [r7, #12]
9000ae2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000ae32:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
9000ae34:	f7f8 fe9c 	bl	90003b70 <HAL_GetTick>
9000ae38:	4602      	mov	r2, r0
9000ae3a:	69fb      	ldr	r3, [r7, #28]
9000ae3c:	1ad3      	subs	r3, r2, r3
9000ae3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000ae40:	429a      	cmp	r2, r3
9000ae42:	d803      	bhi.n	9000ae4c <HAL_SPI_TransmitReceive+0x3bc>
9000ae44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ae4a:	d102      	bne.n	9000ae52 <HAL_SPI_TransmitReceive+0x3c2>
9000ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ae4e:	2b00      	cmp	r3, #0
9000ae50:	d114      	bne.n	9000ae7c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
9000ae52:	68f8      	ldr	r0, [r7, #12]
9000ae54:	f000 f844 	bl	9000aee0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
9000ae58:	68fb      	ldr	r3, [r7, #12]
9000ae5a:	2200      	movs	r2, #0
9000ae5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
9000ae60:	68fb      	ldr	r3, [r7, #12]
9000ae62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000ae66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
9000ae6a:	68fb      	ldr	r3, [r7, #12]
9000ae6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
9000ae70:	68fb      	ldr	r3, [r7, #12]
9000ae72:	2201      	movs	r2, #1
9000ae74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
9000ae78:	2303      	movs	r3, #3
9000ae7a:	e02c      	b.n	9000aed6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
9000ae7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000ae7e:	2b00      	cmp	r3, #0
9000ae80:	d190      	bne.n	9000ada4 <HAL_SPI_TransmitReceive+0x314>
9000ae82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
9000ae84:	2b00      	cmp	r3, #0
9000ae86:	d18d      	bne.n	9000ada4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
9000ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ae8a:	9300      	str	r3, [sp, #0]
9000ae8c:	69fb      	ldr	r3, [r7, #28]
9000ae8e:	2200      	movs	r2, #0
9000ae90:	2108      	movs	r1, #8
9000ae92:	68f8      	ldr	r0, [r7, #12]
9000ae94:	f000 f8c4 	bl	9000b020 <SPI_WaitOnFlagUntilTimeout>
9000ae98:	4603      	mov	r3, r0
9000ae9a:	2b00      	cmp	r3, #0
9000ae9c:	d007      	beq.n	9000aeae <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
9000ae9e:	68fb      	ldr	r3, [r7, #12]
9000aea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000aea4:	f043 0220 	orr.w	r2, r3, #32
9000aea8:	68fb      	ldr	r3, [r7, #12]
9000aeaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
9000aeae:	68f8      	ldr	r0, [r7, #12]
9000aeb0:	f000 f816 	bl	9000aee0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
9000aeb4:	68fb      	ldr	r3, [r7, #12]
9000aeb6:	2200      	movs	r2, #0
9000aeb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
9000aebc:	68fb      	ldr	r3, [r7, #12]
9000aebe:	2201      	movs	r2, #1
9000aec0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
9000aec4:	68fb      	ldr	r3, [r7, #12]
9000aec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000aeca:	2b00      	cmp	r3, #0
9000aecc:	d001      	beq.n	9000aed2 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
9000aece:	2301      	movs	r3, #1
9000aed0:	e001      	b.n	9000aed6 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
9000aed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
9000aed6:	4618      	mov	r0, r3
9000aed8:	3730      	adds	r7, #48	; 0x30
9000aeda:	46bd      	mov	sp, r7
9000aedc:	bd80      	pop	{r7, pc}
9000aede:	bf00      	nop

9000aee0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
9000aee0:	b480      	push	{r7}
9000aee2:	b085      	sub	sp, #20
9000aee4:	af00      	add	r7, sp, #0
9000aee6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
9000aee8:	687b      	ldr	r3, [r7, #4]
9000aeea:	681b      	ldr	r3, [r3, #0]
9000aeec:	695b      	ldr	r3, [r3, #20]
9000aeee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
9000aef0:	687b      	ldr	r3, [r7, #4]
9000aef2:	681b      	ldr	r3, [r3, #0]
9000aef4:	699a      	ldr	r2, [r3, #24]
9000aef6:	687b      	ldr	r3, [r7, #4]
9000aef8:	681b      	ldr	r3, [r3, #0]
9000aefa:	f042 0208 	orr.w	r2, r2, #8
9000aefe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
9000af00:	687b      	ldr	r3, [r7, #4]
9000af02:	681b      	ldr	r3, [r3, #0]
9000af04:	699a      	ldr	r2, [r3, #24]
9000af06:	687b      	ldr	r3, [r7, #4]
9000af08:	681b      	ldr	r3, [r3, #0]
9000af0a:	f042 0210 	orr.w	r2, r2, #16
9000af0e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
9000af10:	687b      	ldr	r3, [r7, #4]
9000af12:	681b      	ldr	r3, [r3, #0]
9000af14:	681a      	ldr	r2, [r3, #0]
9000af16:	687b      	ldr	r3, [r7, #4]
9000af18:	681b      	ldr	r3, [r3, #0]
9000af1a:	f022 0201 	bic.w	r2, r2, #1
9000af1e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
9000af20:	687b      	ldr	r3, [r7, #4]
9000af22:	681b      	ldr	r3, [r3, #0]
9000af24:	6919      	ldr	r1, [r3, #16]
9000af26:	687b      	ldr	r3, [r7, #4]
9000af28:	681a      	ldr	r2, [r3, #0]
9000af2a:	4b3c      	ldr	r3, [pc, #240]	; (9000b01c <SPI_CloseTransfer+0x13c>)
9000af2c:	400b      	ands	r3, r1
9000af2e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
9000af30:	687b      	ldr	r3, [r7, #4]
9000af32:	681b      	ldr	r3, [r3, #0]
9000af34:	689a      	ldr	r2, [r3, #8]
9000af36:	687b      	ldr	r3, [r7, #4]
9000af38:	681b      	ldr	r3, [r3, #0]
9000af3a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
9000af3e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
9000af40:	687b      	ldr	r3, [r7, #4]
9000af42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
9000af46:	b2db      	uxtb	r3, r3
9000af48:	2b04      	cmp	r3, #4
9000af4a:	d014      	beq.n	9000af76 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
9000af4c:	68fb      	ldr	r3, [r7, #12]
9000af4e:	f003 0320 	and.w	r3, r3, #32
9000af52:	2b00      	cmp	r3, #0
9000af54:	d00f      	beq.n	9000af76 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
9000af56:	687b      	ldr	r3, [r7, #4]
9000af58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000af5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
9000af60:	687b      	ldr	r3, [r7, #4]
9000af62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
9000af66:	687b      	ldr	r3, [r7, #4]
9000af68:	681b      	ldr	r3, [r3, #0]
9000af6a:	699a      	ldr	r2, [r3, #24]
9000af6c:	687b      	ldr	r3, [r7, #4]
9000af6e:	681b      	ldr	r3, [r3, #0]
9000af70:	f042 0220 	orr.w	r2, r2, #32
9000af74:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
9000af76:	687b      	ldr	r3, [r7, #4]
9000af78:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
9000af7c:	b2db      	uxtb	r3, r3
9000af7e:	2b03      	cmp	r3, #3
9000af80:	d014      	beq.n	9000afac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
9000af82:	68fb      	ldr	r3, [r7, #12]
9000af84:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000af88:	2b00      	cmp	r3, #0
9000af8a:	d00f      	beq.n	9000afac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
9000af8c:	687b      	ldr	r3, [r7, #4]
9000af8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000af92:	f043 0204 	orr.w	r2, r3, #4
9000af96:	687b      	ldr	r3, [r7, #4]
9000af98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
9000af9c:	687b      	ldr	r3, [r7, #4]
9000af9e:	681b      	ldr	r3, [r3, #0]
9000afa0:	699a      	ldr	r2, [r3, #24]
9000afa2:	687b      	ldr	r3, [r7, #4]
9000afa4:	681b      	ldr	r3, [r3, #0]
9000afa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000afaa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
9000afac:	68fb      	ldr	r3, [r7, #12]
9000afae:	f403 7300 	and.w	r3, r3, #512	; 0x200
9000afb2:	2b00      	cmp	r3, #0
9000afb4:	d00f      	beq.n	9000afd6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
9000afb6:	687b      	ldr	r3, [r7, #4]
9000afb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000afbc:	f043 0201 	orr.w	r2, r3, #1
9000afc0:	687b      	ldr	r3, [r7, #4]
9000afc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
9000afc6:	687b      	ldr	r3, [r7, #4]
9000afc8:	681b      	ldr	r3, [r3, #0]
9000afca:	699a      	ldr	r2, [r3, #24]
9000afcc:	687b      	ldr	r3, [r7, #4]
9000afce:	681b      	ldr	r3, [r3, #0]
9000afd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
9000afd4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
9000afd6:	68fb      	ldr	r3, [r7, #12]
9000afd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000afdc:	2b00      	cmp	r3, #0
9000afde:	d00f      	beq.n	9000b000 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
9000afe0:	687b      	ldr	r3, [r7, #4]
9000afe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000afe6:	f043 0208 	orr.w	r2, r3, #8
9000afea:	687b      	ldr	r3, [r7, #4]
9000afec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
9000aff0:	687b      	ldr	r3, [r7, #4]
9000aff2:	681b      	ldr	r3, [r3, #0]
9000aff4:	699a      	ldr	r2, [r3, #24]
9000aff6:	687b      	ldr	r3, [r7, #4]
9000aff8:	681b      	ldr	r3, [r3, #0]
9000affa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000affe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
9000b000:	687b      	ldr	r3, [r7, #4]
9000b002:	2200      	movs	r2, #0
9000b004:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
9000b008:	687b      	ldr	r3, [r7, #4]
9000b00a:	2200      	movs	r2, #0
9000b00c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
9000b010:	bf00      	nop
9000b012:	3714      	adds	r7, #20
9000b014:	46bd      	mov	sp, r7
9000b016:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b01a:	4770      	bx	lr
9000b01c:	fffffc90 	.word	0xfffffc90

9000b020 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
9000b020:	b580      	push	{r7, lr}
9000b022:	b084      	sub	sp, #16
9000b024:	af00      	add	r7, sp, #0
9000b026:	60f8      	str	r0, [r7, #12]
9000b028:	60b9      	str	r1, [r7, #8]
9000b02a:	603b      	str	r3, [r7, #0]
9000b02c:	4613      	mov	r3, r2
9000b02e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
9000b030:	e010      	b.n	9000b054 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
9000b032:	f7f8 fd9d 	bl	90003b70 <HAL_GetTick>
9000b036:	4602      	mov	r2, r0
9000b038:	683b      	ldr	r3, [r7, #0]
9000b03a:	1ad3      	subs	r3, r2, r3
9000b03c:	69ba      	ldr	r2, [r7, #24]
9000b03e:	429a      	cmp	r2, r3
9000b040:	d803      	bhi.n	9000b04a <SPI_WaitOnFlagUntilTimeout+0x2a>
9000b042:	69bb      	ldr	r3, [r7, #24]
9000b044:	f1b3 3fff 	cmp.w	r3, #4294967295
9000b048:	d102      	bne.n	9000b050 <SPI_WaitOnFlagUntilTimeout+0x30>
9000b04a:	69bb      	ldr	r3, [r7, #24]
9000b04c:	2b00      	cmp	r3, #0
9000b04e:	d101      	bne.n	9000b054 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
9000b050:	2303      	movs	r3, #3
9000b052:	e00f      	b.n	9000b074 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
9000b054:	68fb      	ldr	r3, [r7, #12]
9000b056:	681b      	ldr	r3, [r3, #0]
9000b058:	695a      	ldr	r2, [r3, #20]
9000b05a:	68bb      	ldr	r3, [r7, #8]
9000b05c:	4013      	ands	r3, r2
9000b05e:	68ba      	ldr	r2, [r7, #8]
9000b060:	429a      	cmp	r2, r3
9000b062:	bf0c      	ite	eq
9000b064:	2301      	moveq	r3, #1
9000b066:	2300      	movne	r3, #0
9000b068:	b2db      	uxtb	r3, r3
9000b06a:	461a      	mov	r2, r3
9000b06c:	79fb      	ldrb	r3, [r7, #7]
9000b06e:	429a      	cmp	r2, r3
9000b070:	d0df      	beq.n	9000b032 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
9000b072:	2300      	movs	r3, #0
}
9000b074:	4618      	mov	r0, r3
9000b076:	3710      	adds	r7, #16
9000b078:	46bd      	mov	sp, r7
9000b07a:	bd80      	pop	{r7, pc}

9000b07c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
9000b07c:	b480      	push	{r7}
9000b07e:	b085      	sub	sp, #20
9000b080:	af00      	add	r7, sp, #0
9000b082:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
9000b084:	687b      	ldr	r3, [r7, #4]
9000b086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000b088:	095b      	lsrs	r3, r3, #5
9000b08a:	3301      	adds	r3, #1
9000b08c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
9000b08e:	687b      	ldr	r3, [r7, #4]
9000b090:	68db      	ldr	r3, [r3, #12]
9000b092:	3301      	adds	r3, #1
9000b094:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
9000b096:	68bb      	ldr	r3, [r7, #8]
9000b098:	3307      	adds	r3, #7
9000b09a:	08db      	lsrs	r3, r3, #3
9000b09c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
9000b09e:	68bb      	ldr	r3, [r7, #8]
9000b0a0:	68fa      	ldr	r2, [r7, #12]
9000b0a2:	fb02 f303 	mul.w	r3, r2, r3
}
9000b0a6:	4618      	mov	r0, r3
9000b0a8:	3714      	adds	r7, #20
9000b0aa:	46bd      	mov	sp, r7
9000b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b0b0:	4770      	bx	lr

9000b0b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
9000b0b2:	b580      	push	{r7, lr}
9000b0b4:	b082      	sub	sp, #8
9000b0b6:	af00      	add	r7, sp, #0
9000b0b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
9000b0ba:	687b      	ldr	r3, [r7, #4]
9000b0bc:	2b00      	cmp	r3, #0
9000b0be:	d101      	bne.n	9000b0c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
9000b0c0:	2301      	movs	r3, #1
9000b0c2:	e049      	b.n	9000b158 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
9000b0c4:	687b      	ldr	r3, [r7, #4]
9000b0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
9000b0ca:	b2db      	uxtb	r3, r3
9000b0cc:	2b00      	cmp	r3, #0
9000b0ce:	d106      	bne.n	9000b0de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
9000b0d0:	687b      	ldr	r3, [r7, #4]
9000b0d2:	2200      	movs	r2, #0
9000b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
9000b0d8:	6878      	ldr	r0, [r7, #4]
9000b0da:	f7f7 f871 	bl	900021c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000b0de:	687b      	ldr	r3, [r7, #4]
9000b0e0:	2202      	movs	r2, #2
9000b0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000b0e6:	687b      	ldr	r3, [r7, #4]
9000b0e8:	681a      	ldr	r2, [r3, #0]
9000b0ea:	687b      	ldr	r3, [r7, #4]
9000b0ec:	3304      	adds	r3, #4
9000b0ee:	4619      	mov	r1, r3
9000b0f0:	4610      	mov	r0, r2
9000b0f2:	f000 fbfb 	bl	9000b8ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000b0f6:	687b      	ldr	r3, [r7, #4]
9000b0f8:	2201      	movs	r2, #1
9000b0fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000b0fe:	687b      	ldr	r3, [r7, #4]
9000b100:	2201      	movs	r2, #1
9000b102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
9000b106:	687b      	ldr	r3, [r7, #4]
9000b108:	2201      	movs	r2, #1
9000b10a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
9000b10e:	687b      	ldr	r3, [r7, #4]
9000b110:	2201      	movs	r2, #1
9000b112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
9000b116:	687b      	ldr	r3, [r7, #4]
9000b118:	2201      	movs	r2, #1
9000b11a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
9000b11e:	687b      	ldr	r3, [r7, #4]
9000b120:	2201      	movs	r2, #1
9000b122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
9000b126:	687b      	ldr	r3, [r7, #4]
9000b128:	2201      	movs	r2, #1
9000b12a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000b12e:	687b      	ldr	r3, [r7, #4]
9000b130:	2201      	movs	r2, #1
9000b132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000b136:	687b      	ldr	r3, [r7, #4]
9000b138:	2201      	movs	r2, #1
9000b13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
9000b13e:	687b      	ldr	r3, [r7, #4]
9000b140:	2201      	movs	r2, #1
9000b142:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
9000b146:	687b      	ldr	r3, [r7, #4]
9000b148:	2201      	movs	r2, #1
9000b14a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
9000b14e:	687b      	ldr	r3, [r7, #4]
9000b150:	2201      	movs	r2, #1
9000b152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
9000b156:	2300      	movs	r3, #0
}
9000b158:	4618      	mov	r0, r3
9000b15a:	3708      	adds	r7, #8
9000b15c:	46bd      	mov	sp, r7
9000b15e:	bd80      	pop	{r7, pc}

9000b160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
9000b160:	b480      	push	{r7}
9000b162:	b085      	sub	sp, #20
9000b164:	af00      	add	r7, sp, #0
9000b166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
9000b168:	687b      	ldr	r3, [r7, #4]
9000b16a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
9000b16e:	b2db      	uxtb	r3, r3
9000b170:	2b01      	cmp	r3, #1
9000b172:	d001      	beq.n	9000b178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
9000b174:	2301      	movs	r3, #1
9000b176:	e054      	b.n	9000b222 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000b178:	687b      	ldr	r3, [r7, #4]
9000b17a:	2202      	movs	r2, #2
9000b17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000b180:	687b      	ldr	r3, [r7, #4]
9000b182:	681b      	ldr	r3, [r3, #0]
9000b184:	68da      	ldr	r2, [r3, #12]
9000b186:	687b      	ldr	r3, [r7, #4]
9000b188:	681b      	ldr	r3, [r3, #0]
9000b18a:	f042 0201 	orr.w	r2, r2, #1
9000b18e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000b190:	687b      	ldr	r3, [r7, #4]
9000b192:	681b      	ldr	r3, [r3, #0]
9000b194:	4a26      	ldr	r2, [pc, #152]	; (9000b230 <HAL_TIM_Base_Start_IT+0xd0>)
9000b196:	4293      	cmp	r3, r2
9000b198:	d022      	beq.n	9000b1e0 <HAL_TIM_Base_Start_IT+0x80>
9000b19a:	687b      	ldr	r3, [r7, #4]
9000b19c:	681b      	ldr	r3, [r3, #0]
9000b19e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000b1a2:	d01d      	beq.n	9000b1e0 <HAL_TIM_Base_Start_IT+0x80>
9000b1a4:	687b      	ldr	r3, [r7, #4]
9000b1a6:	681b      	ldr	r3, [r3, #0]
9000b1a8:	4a22      	ldr	r2, [pc, #136]	; (9000b234 <HAL_TIM_Base_Start_IT+0xd4>)
9000b1aa:	4293      	cmp	r3, r2
9000b1ac:	d018      	beq.n	9000b1e0 <HAL_TIM_Base_Start_IT+0x80>
9000b1ae:	687b      	ldr	r3, [r7, #4]
9000b1b0:	681b      	ldr	r3, [r3, #0]
9000b1b2:	4a21      	ldr	r2, [pc, #132]	; (9000b238 <HAL_TIM_Base_Start_IT+0xd8>)
9000b1b4:	4293      	cmp	r3, r2
9000b1b6:	d013      	beq.n	9000b1e0 <HAL_TIM_Base_Start_IT+0x80>
9000b1b8:	687b      	ldr	r3, [r7, #4]
9000b1ba:	681b      	ldr	r3, [r3, #0]
9000b1bc:	4a1f      	ldr	r2, [pc, #124]	; (9000b23c <HAL_TIM_Base_Start_IT+0xdc>)
9000b1be:	4293      	cmp	r3, r2
9000b1c0:	d00e      	beq.n	9000b1e0 <HAL_TIM_Base_Start_IT+0x80>
9000b1c2:	687b      	ldr	r3, [r7, #4]
9000b1c4:	681b      	ldr	r3, [r3, #0]
9000b1c6:	4a1e      	ldr	r2, [pc, #120]	; (9000b240 <HAL_TIM_Base_Start_IT+0xe0>)
9000b1c8:	4293      	cmp	r3, r2
9000b1ca:	d009      	beq.n	9000b1e0 <HAL_TIM_Base_Start_IT+0x80>
9000b1cc:	687b      	ldr	r3, [r7, #4]
9000b1ce:	681b      	ldr	r3, [r3, #0]
9000b1d0:	4a1c      	ldr	r2, [pc, #112]	; (9000b244 <HAL_TIM_Base_Start_IT+0xe4>)
9000b1d2:	4293      	cmp	r3, r2
9000b1d4:	d004      	beq.n	9000b1e0 <HAL_TIM_Base_Start_IT+0x80>
9000b1d6:	687b      	ldr	r3, [r7, #4]
9000b1d8:	681b      	ldr	r3, [r3, #0]
9000b1da:	4a1b      	ldr	r2, [pc, #108]	; (9000b248 <HAL_TIM_Base_Start_IT+0xe8>)
9000b1dc:	4293      	cmp	r3, r2
9000b1de:	d115      	bne.n	9000b20c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000b1e0:	687b      	ldr	r3, [r7, #4]
9000b1e2:	681b      	ldr	r3, [r3, #0]
9000b1e4:	689a      	ldr	r2, [r3, #8]
9000b1e6:	4b19      	ldr	r3, [pc, #100]	; (9000b24c <HAL_TIM_Base_Start_IT+0xec>)
9000b1e8:	4013      	ands	r3, r2
9000b1ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000b1ec:	68fb      	ldr	r3, [r7, #12]
9000b1ee:	2b06      	cmp	r3, #6
9000b1f0:	d015      	beq.n	9000b21e <HAL_TIM_Base_Start_IT+0xbe>
9000b1f2:	68fb      	ldr	r3, [r7, #12]
9000b1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000b1f8:	d011      	beq.n	9000b21e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
9000b1fa:	687b      	ldr	r3, [r7, #4]
9000b1fc:	681b      	ldr	r3, [r3, #0]
9000b1fe:	681a      	ldr	r2, [r3, #0]
9000b200:	687b      	ldr	r3, [r7, #4]
9000b202:	681b      	ldr	r3, [r3, #0]
9000b204:	f042 0201 	orr.w	r2, r2, #1
9000b208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000b20a:	e008      	b.n	9000b21e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
9000b20c:	687b      	ldr	r3, [r7, #4]
9000b20e:	681b      	ldr	r3, [r3, #0]
9000b210:	681a      	ldr	r2, [r3, #0]
9000b212:	687b      	ldr	r3, [r7, #4]
9000b214:	681b      	ldr	r3, [r3, #0]
9000b216:	f042 0201 	orr.w	r2, r2, #1
9000b21a:	601a      	str	r2, [r3, #0]
9000b21c:	e000      	b.n	9000b220 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000b21e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
9000b220:	2300      	movs	r3, #0
}
9000b222:	4618      	mov	r0, r3
9000b224:	3714      	adds	r7, #20
9000b226:	46bd      	mov	sp, r7
9000b228:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b22c:	4770      	bx	lr
9000b22e:	bf00      	nop
9000b230:	40010000 	.word	0x40010000
9000b234:	40000400 	.word	0x40000400
9000b238:	40000800 	.word	0x40000800
9000b23c:	40000c00 	.word	0x40000c00
9000b240:	40010400 	.word	0x40010400
9000b244:	40001800 	.word	0x40001800
9000b248:	40014000 	.word	0x40014000
9000b24c:	00010007 	.word	0x00010007

9000b250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
9000b250:	b580      	push	{r7, lr}
9000b252:	b084      	sub	sp, #16
9000b254:	af00      	add	r7, sp, #0
9000b256:	6078      	str	r0, [r7, #4]
9000b258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
9000b25a:	683b      	ldr	r3, [r7, #0]
9000b25c:	2b00      	cmp	r3, #0
9000b25e:	d109      	bne.n	9000b274 <HAL_TIM_PWM_Start+0x24>
9000b260:	687b      	ldr	r3, [r7, #4]
9000b262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
9000b266:	b2db      	uxtb	r3, r3
9000b268:	2b01      	cmp	r3, #1
9000b26a:	bf14      	ite	ne
9000b26c:	2301      	movne	r3, #1
9000b26e:	2300      	moveq	r3, #0
9000b270:	b2db      	uxtb	r3, r3
9000b272:	e03c      	b.n	9000b2ee <HAL_TIM_PWM_Start+0x9e>
9000b274:	683b      	ldr	r3, [r7, #0]
9000b276:	2b04      	cmp	r3, #4
9000b278:	d109      	bne.n	9000b28e <HAL_TIM_PWM_Start+0x3e>
9000b27a:	687b      	ldr	r3, [r7, #4]
9000b27c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
9000b280:	b2db      	uxtb	r3, r3
9000b282:	2b01      	cmp	r3, #1
9000b284:	bf14      	ite	ne
9000b286:	2301      	movne	r3, #1
9000b288:	2300      	moveq	r3, #0
9000b28a:	b2db      	uxtb	r3, r3
9000b28c:	e02f      	b.n	9000b2ee <HAL_TIM_PWM_Start+0x9e>
9000b28e:	683b      	ldr	r3, [r7, #0]
9000b290:	2b08      	cmp	r3, #8
9000b292:	d109      	bne.n	9000b2a8 <HAL_TIM_PWM_Start+0x58>
9000b294:	687b      	ldr	r3, [r7, #4]
9000b296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
9000b29a:	b2db      	uxtb	r3, r3
9000b29c:	2b01      	cmp	r3, #1
9000b29e:	bf14      	ite	ne
9000b2a0:	2301      	movne	r3, #1
9000b2a2:	2300      	moveq	r3, #0
9000b2a4:	b2db      	uxtb	r3, r3
9000b2a6:	e022      	b.n	9000b2ee <HAL_TIM_PWM_Start+0x9e>
9000b2a8:	683b      	ldr	r3, [r7, #0]
9000b2aa:	2b0c      	cmp	r3, #12
9000b2ac:	d109      	bne.n	9000b2c2 <HAL_TIM_PWM_Start+0x72>
9000b2ae:	687b      	ldr	r3, [r7, #4]
9000b2b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
9000b2b4:	b2db      	uxtb	r3, r3
9000b2b6:	2b01      	cmp	r3, #1
9000b2b8:	bf14      	ite	ne
9000b2ba:	2301      	movne	r3, #1
9000b2bc:	2300      	moveq	r3, #0
9000b2be:	b2db      	uxtb	r3, r3
9000b2c0:	e015      	b.n	9000b2ee <HAL_TIM_PWM_Start+0x9e>
9000b2c2:	683b      	ldr	r3, [r7, #0]
9000b2c4:	2b10      	cmp	r3, #16
9000b2c6:	d109      	bne.n	9000b2dc <HAL_TIM_PWM_Start+0x8c>
9000b2c8:	687b      	ldr	r3, [r7, #4]
9000b2ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000b2ce:	b2db      	uxtb	r3, r3
9000b2d0:	2b01      	cmp	r3, #1
9000b2d2:	bf14      	ite	ne
9000b2d4:	2301      	movne	r3, #1
9000b2d6:	2300      	moveq	r3, #0
9000b2d8:	b2db      	uxtb	r3, r3
9000b2da:	e008      	b.n	9000b2ee <HAL_TIM_PWM_Start+0x9e>
9000b2dc:	687b      	ldr	r3, [r7, #4]
9000b2de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000b2e2:	b2db      	uxtb	r3, r3
9000b2e4:	2b01      	cmp	r3, #1
9000b2e6:	bf14      	ite	ne
9000b2e8:	2301      	movne	r3, #1
9000b2ea:	2300      	moveq	r3, #0
9000b2ec:	b2db      	uxtb	r3, r3
9000b2ee:	2b00      	cmp	r3, #0
9000b2f0:	d001      	beq.n	9000b2f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
9000b2f2:	2301      	movs	r3, #1
9000b2f4:	e0a1      	b.n	9000b43a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000b2f6:	683b      	ldr	r3, [r7, #0]
9000b2f8:	2b00      	cmp	r3, #0
9000b2fa:	d104      	bne.n	9000b306 <HAL_TIM_PWM_Start+0xb6>
9000b2fc:	687b      	ldr	r3, [r7, #4]
9000b2fe:	2202      	movs	r2, #2
9000b300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
9000b304:	e023      	b.n	9000b34e <HAL_TIM_PWM_Start+0xfe>
9000b306:	683b      	ldr	r3, [r7, #0]
9000b308:	2b04      	cmp	r3, #4
9000b30a:	d104      	bne.n	9000b316 <HAL_TIM_PWM_Start+0xc6>
9000b30c:	687b      	ldr	r3, [r7, #4]
9000b30e:	2202      	movs	r2, #2
9000b310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
9000b314:	e01b      	b.n	9000b34e <HAL_TIM_PWM_Start+0xfe>
9000b316:	683b      	ldr	r3, [r7, #0]
9000b318:	2b08      	cmp	r3, #8
9000b31a:	d104      	bne.n	9000b326 <HAL_TIM_PWM_Start+0xd6>
9000b31c:	687b      	ldr	r3, [r7, #4]
9000b31e:	2202      	movs	r2, #2
9000b320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
9000b324:	e013      	b.n	9000b34e <HAL_TIM_PWM_Start+0xfe>
9000b326:	683b      	ldr	r3, [r7, #0]
9000b328:	2b0c      	cmp	r3, #12
9000b32a:	d104      	bne.n	9000b336 <HAL_TIM_PWM_Start+0xe6>
9000b32c:	687b      	ldr	r3, [r7, #4]
9000b32e:	2202      	movs	r2, #2
9000b330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
9000b334:	e00b      	b.n	9000b34e <HAL_TIM_PWM_Start+0xfe>
9000b336:	683b      	ldr	r3, [r7, #0]
9000b338:	2b10      	cmp	r3, #16
9000b33a:	d104      	bne.n	9000b346 <HAL_TIM_PWM_Start+0xf6>
9000b33c:	687b      	ldr	r3, [r7, #4]
9000b33e:	2202      	movs	r2, #2
9000b340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
9000b344:	e003      	b.n	9000b34e <HAL_TIM_PWM_Start+0xfe>
9000b346:	687b      	ldr	r3, [r7, #4]
9000b348:	2202      	movs	r2, #2
9000b34a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
9000b34e:	687b      	ldr	r3, [r7, #4]
9000b350:	681b      	ldr	r3, [r3, #0]
9000b352:	2201      	movs	r2, #1
9000b354:	6839      	ldr	r1, [r7, #0]
9000b356:	4618      	mov	r0, r3
9000b358:	f000 fc00 	bl	9000bb5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
9000b35c:	687b      	ldr	r3, [r7, #4]
9000b35e:	681b      	ldr	r3, [r3, #0]
9000b360:	4a38      	ldr	r2, [pc, #224]	; (9000b444 <HAL_TIM_PWM_Start+0x1f4>)
9000b362:	4293      	cmp	r3, r2
9000b364:	d013      	beq.n	9000b38e <HAL_TIM_PWM_Start+0x13e>
9000b366:	687b      	ldr	r3, [r7, #4]
9000b368:	681b      	ldr	r3, [r3, #0]
9000b36a:	4a37      	ldr	r2, [pc, #220]	; (9000b448 <HAL_TIM_PWM_Start+0x1f8>)
9000b36c:	4293      	cmp	r3, r2
9000b36e:	d00e      	beq.n	9000b38e <HAL_TIM_PWM_Start+0x13e>
9000b370:	687b      	ldr	r3, [r7, #4]
9000b372:	681b      	ldr	r3, [r3, #0]
9000b374:	4a35      	ldr	r2, [pc, #212]	; (9000b44c <HAL_TIM_PWM_Start+0x1fc>)
9000b376:	4293      	cmp	r3, r2
9000b378:	d009      	beq.n	9000b38e <HAL_TIM_PWM_Start+0x13e>
9000b37a:	687b      	ldr	r3, [r7, #4]
9000b37c:	681b      	ldr	r3, [r3, #0]
9000b37e:	4a34      	ldr	r2, [pc, #208]	; (9000b450 <HAL_TIM_PWM_Start+0x200>)
9000b380:	4293      	cmp	r3, r2
9000b382:	d004      	beq.n	9000b38e <HAL_TIM_PWM_Start+0x13e>
9000b384:	687b      	ldr	r3, [r7, #4]
9000b386:	681b      	ldr	r3, [r3, #0]
9000b388:	4a32      	ldr	r2, [pc, #200]	; (9000b454 <HAL_TIM_PWM_Start+0x204>)
9000b38a:	4293      	cmp	r3, r2
9000b38c:	d101      	bne.n	9000b392 <HAL_TIM_PWM_Start+0x142>
9000b38e:	2301      	movs	r3, #1
9000b390:	e000      	b.n	9000b394 <HAL_TIM_PWM_Start+0x144>
9000b392:	2300      	movs	r3, #0
9000b394:	2b00      	cmp	r3, #0
9000b396:	d007      	beq.n	9000b3a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
9000b398:	687b      	ldr	r3, [r7, #4]
9000b39a:	681b      	ldr	r3, [r3, #0]
9000b39c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000b39e:	687b      	ldr	r3, [r7, #4]
9000b3a0:	681b      	ldr	r3, [r3, #0]
9000b3a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000b3a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000b3a8:	687b      	ldr	r3, [r7, #4]
9000b3aa:	681b      	ldr	r3, [r3, #0]
9000b3ac:	4a25      	ldr	r2, [pc, #148]	; (9000b444 <HAL_TIM_PWM_Start+0x1f4>)
9000b3ae:	4293      	cmp	r3, r2
9000b3b0:	d022      	beq.n	9000b3f8 <HAL_TIM_PWM_Start+0x1a8>
9000b3b2:	687b      	ldr	r3, [r7, #4]
9000b3b4:	681b      	ldr	r3, [r3, #0]
9000b3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000b3ba:	d01d      	beq.n	9000b3f8 <HAL_TIM_PWM_Start+0x1a8>
9000b3bc:	687b      	ldr	r3, [r7, #4]
9000b3be:	681b      	ldr	r3, [r3, #0]
9000b3c0:	4a25      	ldr	r2, [pc, #148]	; (9000b458 <HAL_TIM_PWM_Start+0x208>)
9000b3c2:	4293      	cmp	r3, r2
9000b3c4:	d018      	beq.n	9000b3f8 <HAL_TIM_PWM_Start+0x1a8>
9000b3c6:	687b      	ldr	r3, [r7, #4]
9000b3c8:	681b      	ldr	r3, [r3, #0]
9000b3ca:	4a24      	ldr	r2, [pc, #144]	; (9000b45c <HAL_TIM_PWM_Start+0x20c>)
9000b3cc:	4293      	cmp	r3, r2
9000b3ce:	d013      	beq.n	9000b3f8 <HAL_TIM_PWM_Start+0x1a8>
9000b3d0:	687b      	ldr	r3, [r7, #4]
9000b3d2:	681b      	ldr	r3, [r3, #0]
9000b3d4:	4a22      	ldr	r2, [pc, #136]	; (9000b460 <HAL_TIM_PWM_Start+0x210>)
9000b3d6:	4293      	cmp	r3, r2
9000b3d8:	d00e      	beq.n	9000b3f8 <HAL_TIM_PWM_Start+0x1a8>
9000b3da:	687b      	ldr	r3, [r7, #4]
9000b3dc:	681b      	ldr	r3, [r3, #0]
9000b3de:	4a1a      	ldr	r2, [pc, #104]	; (9000b448 <HAL_TIM_PWM_Start+0x1f8>)
9000b3e0:	4293      	cmp	r3, r2
9000b3e2:	d009      	beq.n	9000b3f8 <HAL_TIM_PWM_Start+0x1a8>
9000b3e4:	687b      	ldr	r3, [r7, #4]
9000b3e6:	681b      	ldr	r3, [r3, #0]
9000b3e8:	4a1e      	ldr	r2, [pc, #120]	; (9000b464 <HAL_TIM_PWM_Start+0x214>)
9000b3ea:	4293      	cmp	r3, r2
9000b3ec:	d004      	beq.n	9000b3f8 <HAL_TIM_PWM_Start+0x1a8>
9000b3ee:	687b      	ldr	r3, [r7, #4]
9000b3f0:	681b      	ldr	r3, [r3, #0]
9000b3f2:	4a16      	ldr	r2, [pc, #88]	; (9000b44c <HAL_TIM_PWM_Start+0x1fc>)
9000b3f4:	4293      	cmp	r3, r2
9000b3f6:	d115      	bne.n	9000b424 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000b3f8:	687b      	ldr	r3, [r7, #4]
9000b3fa:	681b      	ldr	r3, [r3, #0]
9000b3fc:	689a      	ldr	r2, [r3, #8]
9000b3fe:	4b1a      	ldr	r3, [pc, #104]	; (9000b468 <HAL_TIM_PWM_Start+0x218>)
9000b400:	4013      	ands	r3, r2
9000b402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000b404:	68fb      	ldr	r3, [r7, #12]
9000b406:	2b06      	cmp	r3, #6
9000b408:	d015      	beq.n	9000b436 <HAL_TIM_PWM_Start+0x1e6>
9000b40a:	68fb      	ldr	r3, [r7, #12]
9000b40c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000b410:	d011      	beq.n	9000b436 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
9000b412:	687b      	ldr	r3, [r7, #4]
9000b414:	681b      	ldr	r3, [r3, #0]
9000b416:	681a      	ldr	r2, [r3, #0]
9000b418:	687b      	ldr	r3, [r7, #4]
9000b41a:	681b      	ldr	r3, [r3, #0]
9000b41c:	f042 0201 	orr.w	r2, r2, #1
9000b420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000b422:	e008      	b.n	9000b436 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
9000b424:	687b      	ldr	r3, [r7, #4]
9000b426:	681b      	ldr	r3, [r3, #0]
9000b428:	681a      	ldr	r2, [r3, #0]
9000b42a:	687b      	ldr	r3, [r7, #4]
9000b42c:	681b      	ldr	r3, [r3, #0]
9000b42e:	f042 0201 	orr.w	r2, r2, #1
9000b432:	601a      	str	r2, [r3, #0]
9000b434:	e000      	b.n	9000b438 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000b436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
9000b438:	2300      	movs	r3, #0
}
9000b43a:	4618      	mov	r0, r3
9000b43c:	3710      	adds	r7, #16
9000b43e:	46bd      	mov	sp, r7
9000b440:	bd80      	pop	{r7, pc}
9000b442:	bf00      	nop
9000b444:	40010000 	.word	0x40010000
9000b448:	40010400 	.word	0x40010400
9000b44c:	40014000 	.word	0x40014000
9000b450:	40014400 	.word	0x40014400
9000b454:	40014800 	.word	0x40014800
9000b458:	40000400 	.word	0x40000400
9000b45c:	40000800 	.word	0x40000800
9000b460:	40000c00 	.word	0x40000c00
9000b464:	40001800 	.word	0x40001800
9000b468:	00010007 	.word	0x00010007

9000b46c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
9000b46c:	b580      	push	{r7, lr}
9000b46e:	b082      	sub	sp, #8
9000b470:	af00      	add	r7, sp, #0
9000b472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000b474:	687b      	ldr	r3, [r7, #4]
9000b476:	681b      	ldr	r3, [r3, #0]
9000b478:	691b      	ldr	r3, [r3, #16]
9000b47a:	f003 0302 	and.w	r3, r3, #2
9000b47e:	2b02      	cmp	r3, #2
9000b480:	d122      	bne.n	9000b4c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000b482:	687b      	ldr	r3, [r7, #4]
9000b484:	681b      	ldr	r3, [r3, #0]
9000b486:	68db      	ldr	r3, [r3, #12]
9000b488:	f003 0302 	and.w	r3, r3, #2
9000b48c:	2b02      	cmp	r3, #2
9000b48e:	d11b      	bne.n	9000b4c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000b490:	687b      	ldr	r3, [r7, #4]
9000b492:	681b      	ldr	r3, [r3, #0]
9000b494:	f06f 0202 	mvn.w	r2, #2
9000b498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000b49a:	687b      	ldr	r3, [r7, #4]
9000b49c:	2201      	movs	r2, #1
9000b49e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000b4a0:	687b      	ldr	r3, [r7, #4]
9000b4a2:	681b      	ldr	r3, [r3, #0]
9000b4a4:	699b      	ldr	r3, [r3, #24]
9000b4a6:	f003 0303 	and.w	r3, r3, #3
9000b4aa:	2b00      	cmp	r3, #0
9000b4ac:	d003      	beq.n	9000b4b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
9000b4ae:	6878      	ldr	r0, [r7, #4]
9000b4b0:	f000 f9fe 	bl	9000b8b0 <HAL_TIM_IC_CaptureCallback>
9000b4b4:	e005      	b.n	9000b4c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000b4b6:	6878      	ldr	r0, [r7, #4]
9000b4b8:	f000 f9f0 	bl	9000b89c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000b4bc:	6878      	ldr	r0, [r7, #4]
9000b4be:	f000 fa01 	bl	9000b8c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b4c2:	687b      	ldr	r3, [r7, #4]
9000b4c4:	2200      	movs	r2, #0
9000b4c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000b4c8:	687b      	ldr	r3, [r7, #4]
9000b4ca:	681b      	ldr	r3, [r3, #0]
9000b4cc:	691b      	ldr	r3, [r3, #16]
9000b4ce:	f003 0304 	and.w	r3, r3, #4
9000b4d2:	2b04      	cmp	r3, #4
9000b4d4:	d122      	bne.n	9000b51c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000b4d6:	687b      	ldr	r3, [r7, #4]
9000b4d8:	681b      	ldr	r3, [r3, #0]
9000b4da:	68db      	ldr	r3, [r3, #12]
9000b4dc:	f003 0304 	and.w	r3, r3, #4
9000b4e0:	2b04      	cmp	r3, #4
9000b4e2:	d11b      	bne.n	9000b51c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000b4e4:	687b      	ldr	r3, [r7, #4]
9000b4e6:	681b      	ldr	r3, [r3, #0]
9000b4e8:	f06f 0204 	mvn.w	r2, #4
9000b4ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000b4ee:	687b      	ldr	r3, [r7, #4]
9000b4f0:	2202      	movs	r2, #2
9000b4f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000b4f4:	687b      	ldr	r3, [r7, #4]
9000b4f6:	681b      	ldr	r3, [r3, #0]
9000b4f8:	699b      	ldr	r3, [r3, #24]
9000b4fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000b4fe:	2b00      	cmp	r3, #0
9000b500:	d003      	beq.n	9000b50a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
9000b502:	6878      	ldr	r0, [r7, #4]
9000b504:	f000 f9d4 	bl	9000b8b0 <HAL_TIM_IC_CaptureCallback>
9000b508:	e005      	b.n	9000b516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000b50a:	6878      	ldr	r0, [r7, #4]
9000b50c:	f000 f9c6 	bl	9000b89c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000b510:	6878      	ldr	r0, [r7, #4]
9000b512:	f000 f9d7 	bl	9000b8c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b516:	687b      	ldr	r3, [r7, #4]
9000b518:	2200      	movs	r2, #0
9000b51a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000b51c:	687b      	ldr	r3, [r7, #4]
9000b51e:	681b      	ldr	r3, [r3, #0]
9000b520:	691b      	ldr	r3, [r3, #16]
9000b522:	f003 0308 	and.w	r3, r3, #8
9000b526:	2b08      	cmp	r3, #8
9000b528:	d122      	bne.n	9000b570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000b52a:	687b      	ldr	r3, [r7, #4]
9000b52c:	681b      	ldr	r3, [r3, #0]
9000b52e:	68db      	ldr	r3, [r3, #12]
9000b530:	f003 0308 	and.w	r3, r3, #8
9000b534:	2b08      	cmp	r3, #8
9000b536:	d11b      	bne.n	9000b570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000b538:	687b      	ldr	r3, [r7, #4]
9000b53a:	681b      	ldr	r3, [r3, #0]
9000b53c:	f06f 0208 	mvn.w	r2, #8
9000b540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000b542:	687b      	ldr	r3, [r7, #4]
9000b544:	2204      	movs	r2, #4
9000b546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000b548:	687b      	ldr	r3, [r7, #4]
9000b54a:	681b      	ldr	r3, [r3, #0]
9000b54c:	69db      	ldr	r3, [r3, #28]
9000b54e:	f003 0303 	and.w	r3, r3, #3
9000b552:	2b00      	cmp	r3, #0
9000b554:	d003      	beq.n	9000b55e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
9000b556:	6878      	ldr	r0, [r7, #4]
9000b558:	f000 f9aa 	bl	9000b8b0 <HAL_TIM_IC_CaptureCallback>
9000b55c:	e005      	b.n	9000b56a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000b55e:	6878      	ldr	r0, [r7, #4]
9000b560:	f000 f99c 	bl	9000b89c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000b564:	6878      	ldr	r0, [r7, #4]
9000b566:	f000 f9ad 	bl	9000b8c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b56a:	687b      	ldr	r3, [r7, #4]
9000b56c:	2200      	movs	r2, #0
9000b56e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000b570:	687b      	ldr	r3, [r7, #4]
9000b572:	681b      	ldr	r3, [r3, #0]
9000b574:	691b      	ldr	r3, [r3, #16]
9000b576:	f003 0310 	and.w	r3, r3, #16
9000b57a:	2b10      	cmp	r3, #16
9000b57c:	d122      	bne.n	9000b5c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000b57e:	687b      	ldr	r3, [r7, #4]
9000b580:	681b      	ldr	r3, [r3, #0]
9000b582:	68db      	ldr	r3, [r3, #12]
9000b584:	f003 0310 	and.w	r3, r3, #16
9000b588:	2b10      	cmp	r3, #16
9000b58a:	d11b      	bne.n	9000b5c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000b58c:	687b      	ldr	r3, [r7, #4]
9000b58e:	681b      	ldr	r3, [r3, #0]
9000b590:	f06f 0210 	mvn.w	r2, #16
9000b594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000b596:	687b      	ldr	r3, [r7, #4]
9000b598:	2208      	movs	r2, #8
9000b59a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000b59c:	687b      	ldr	r3, [r7, #4]
9000b59e:	681b      	ldr	r3, [r3, #0]
9000b5a0:	69db      	ldr	r3, [r3, #28]
9000b5a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000b5a6:	2b00      	cmp	r3, #0
9000b5a8:	d003      	beq.n	9000b5b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
9000b5aa:	6878      	ldr	r0, [r7, #4]
9000b5ac:	f000 f980 	bl	9000b8b0 <HAL_TIM_IC_CaptureCallback>
9000b5b0:	e005      	b.n	9000b5be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000b5b2:	6878      	ldr	r0, [r7, #4]
9000b5b4:	f000 f972 	bl	9000b89c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000b5b8:	6878      	ldr	r0, [r7, #4]
9000b5ba:	f000 f983 	bl	9000b8c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000b5be:	687b      	ldr	r3, [r7, #4]
9000b5c0:	2200      	movs	r2, #0
9000b5c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000b5c4:	687b      	ldr	r3, [r7, #4]
9000b5c6:	681b      	ldr	r3, [r3, #0]
9000b5c8:	691b      	ldr	r3, [r3, #16]
9000b5ca:	f003 0301 	and.w	r3, r3, #1
9000b5ce:	2b01      	cmp	r3, #1
9000b5d0:	d10e      	bne.n	9000b5f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000b5d2:	687b      	ldr	r3, [r7, #4]
9000b5d4:	681b      	ldr	r3, [r3, #0]
9000b5d6:	68db      	ldr	r3, [r3, #12]
9000b5d8:	f003 0301 	and.w	r3, r3, #1
9000b5dc:	2b01      	cmp	r3, #1
9000b5de:	d107      	bne.n	9000b5f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000b5e0:	687b      	ldr	r3, [r7, #4]
9000b5e2:	681b      	ldr	r3, [r3, #0]
9000b5e4:	f06f 0201 	mvn.w	r2, #1
9000b5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
9000b5ea:	6878      	ldr	r0, [r7, #4]
9000b5ec:	f7f6 f8c2 	bl	90001774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000b5f0:	687b      	ldr	r3, [r7, #4]
9000b5f2:	681b      	ldr	r3, [r3, #0]
9000b5f4:	691b      	ldr	r3, [r3, #16]
9000b5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000b5fa:	2b80      	cmp	r3, #128	; 0x80
9000b5fc:	d10e      	bne.n	9000b61c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000b5fe:	687b      	ldr	r3, [r7, #4]
9000b600:	681b      	ldr	r3, [r3, #0]
9000b602:	68db      	ldr	r3, [r3, #12]
9000b604:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000b608:	2b80      	cmp	r3, #128	; 0x80
9000b60a:	d107      	bne.n	9000b61c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000b60c:	687b      	ldr	r3, [r7, #4]
9000b60e:	681b      	ldr	r3, [r3, #0]
9000b610:	f06f 0280 	mvn.w	r2, #128	; 0x80
9000b614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
9000b616:	6878      	ldr	r0, [r7, #4]
9000b618:	f000 fb5e 	bl	9000bcd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000b61c:	687b      	ldr	r3, [r7, #4]
9000b61e:	681b      	ldr	r3, [r3, #0]
9000b620:	691b      	ldr	r3, [r3, #16]
9000b622:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000b626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000b62a:	d10e      	bne.n	9000b64a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000b62c:	687b      	ldr	r3, [r7, #4]
9000b62e:	681b      	ldr	r3, [r3, #0]
9000b630:	68db      	ldr	r3, [r3, #12]
9000b632:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000b636:	2b80      	cmp	r3, #128	; 0x80
9000b638:	d107      	bne.n	9000b64a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000b63a:	687b      	ldr	r3, [r7, #4]
9000b63c:	681b      	ldr	r3, [r3, #0]
9000b63e:	f46f 7280 	mvn.w	r2, #256	; 0x100
9000b642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
9000b644:	6878      	ldr	r0, [r7, #4]
9000b646:	f000 fb51 	bl	9000bcec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000b64a:	687b      	ldr	r3, [r7, #4]
9000b64c:	681b      	ldr	r3, [r3, #0]
9000b64e:	691b      	ldr	r3, [r3, #16]
9000b650:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000b654:	2b40      	cmp	r3, #64	; 0x40
9000b656:	d10e      	bne.n	9000b676 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000b658:	687b      	ldr	r3, [r7, #4]
9000b65a:	681b      	ldr	r3, [r3, #0]
9000b65c:	68db      	ldr	r3, [r3, #12]
9000b65e:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000b662:	2b40      	cmp	r3, #64	; 0x40
9000b664:	d107      	bne.n	9000b676 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000b666:	687b      	ldr	r3, [r7, #4]
9000b668:	681b      	ldr	r3, [r3, #0]
9000b66a:	f06f 0240 	mvn.w	r2, #64	; 0x40
9000b66e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
9000b670:	6878      	ldr	r0, [r7, #4]
9000b672:	f000 f931 	bl	9000b8d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000b676:	687b      	ldr	r3, [r7, #4]
9000b678:	681b      	ldr	r3, [r3, #0]
9000b67a:	691b      	ldr	r3, [r3, #16]
9000b67c:	f003 0320 	and.w	r3, r3, #32
9000b680:	2b20      	cmp	r3, #32
9000b682:	d10e      	bne.n	9000b6a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000b684:	687b      	ldr	r3, [r7, #4]
9000b686:	681b      	ldr	r3, [r3, #0]
9000b688:	68db      	ldr	r3, [r3, #12]
9000b68a:	f003 0320 	and.w	r3, r3, #32
9000b68e:	2b20      	cmp	r3, #32
9000b690:	d107      	bne.n	9000b6a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000b692:	687b      	ldr	r3, [r7, #4]
9000b694:	681b      	ldr	r3, [r3, #0]
9000b696:	f06f 0220 	mvn.w	r2, #32
9000b69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
9000b69c:	6878      	ldr	r0, [r7, #4]
9000b69e:	f000 fb11 	bl	9000bcc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
9000b6a2:	bf00      	nop
9000b6a4:	3708      	adds	r7, #8
9000b6a6:	46bd      	mov	sp, r7
9000b6a8:	bd80      	pop	{r7, pc}
	...

9000b6ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
9000b6ac:	b580      	push	{r7, lr}
9000b6ae:	b084      	sub	sp, #16
9000b6b0:	af00      	add	r7, sp, #0
9000b6b2:	6078      	str	r0, [r7, #4]
9000b6b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
9000b6b6:	2300      	movs	r3, #0
9000b6b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
9000b6ba:	687b      	ldr	r3, [r7, #4]
9000b6bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
9000b6c0:	2b01      	cmp	r3, #1
9000b6c2:	d101      	bne.n	9000b6c8 <HAL_TIM_ConfigClockSource+0x1c>
9000b6c4:	2302      	movs	r3, #2
9000b6c6:	e0dc      	b.n	9000b882 <HAL_TIM_ConfigClockSource+0x1d6>
9000b6c8:	687b      	ldr	r3, [r7, #4]
9000b6ca:	2201      	movs	r2, #1
9000b6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
9000b6d0:	687b      	ldr	r3, [r7, #4]
9000b6d2:	2202      	movs	r2, #2
9000b6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
9000b6d8:	687b      	ldr	r3, [r7, #4]
9000b6da:	681b      	ldr	r3, [r3, #0]
9000b6dc:	689b      	ldr	r3, [r3, #8]
9000b6de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
9000b6e0:	68ba      	ldr	r2, [r7, #8]
9000b6e2:	4b6a      	ldr	r3, [pc, #424]	; (9000b88c <HAL_TIM_ConfigClockSource+0x1e0>)
9000b6e4:	4013      	ands	r3, r2
9000b6e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
9000b6e8:	68bb      	ldr	r3, [r7, #8]
9000b6ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
9000b6ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
9000b6f0:	687b      	ldr	r3, [r7, #4]
9000b6f2:	681b      	ldr	r3, [r3, #0]
9000b6f4:	68ba      	ldr	r2, [r7, #8]
9000b6f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
9000b6f8:	683b      	ldr	r3, [r7, #0]
9000b6fa:	681b      	ldr	r3, [r3, #0]
9000b6fc:	4a64      	ldr	r2, [pc, #400]	; (9000b890 <HAL_TIM_ConfigClockSource+0x1e4>)
9000b6fe:	4293      	cmp	r3, r2
9000b700:	f000 80a9 	beq.w	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b704:	4a62      	ldr	r2, [pc, #392]	; (9000b890 <HAL_TIM_ConfigClockSource+0x1e4>)
9000b706:	4293      	cmp	r3, r2
9000b708:	f200 80ae 	bhi.w	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b70c:	4a61      	ldr	r2, [pc, #388]	; (9000b894 <HAL_TIM_ConfigClockSource+0x1e8>)
9000b70e:	4293      	cmp	r3, r2
9000b710:	f000 80a1 	beq.w	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b714:	4a5f      	ldr	r2, [pc, #380]	; (9000b894 <HAL_TIM_ConfigClockSource+0x1e8>)
9000b716:	4293      	cmp	r3, r2
9000b718:	f200 80a6 	bhi.w	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b71c:	4a5e      	ldr	r2, [pc, #376]	; (9000b898 <HAL_TIM_ConfigClockSource+0x1ec>)
9000b71e:	4293      	cmp	r3, r2
9000b720:	f000 8099 	beq.w	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b724:	4a5c      	ldr	r2, [pc, #368]	; (9000b898 <HAL_TIM_ConfigClockSource+0x1ec>)
9000b726:	4293      	cmp	r3, r2
9000b728:	f200 809e 	bhi.w	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b72c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
9000b730:	f000 8091 	beq.w	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b734:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
9000b738:	f200 8096 	bhi.w	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b73c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
9000b740:	f000 8089 	beq.w	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
9000b748:	f200 808e 	bhi.w	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b74c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000b750:	d03e      	beq.n	9000b7d0 <HAL_TIM_ConfigClockSource+0x124>
9000b752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000b756:	f200 8087 	bhi.w	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b75a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000b75e:	f000 8086 	beq.w	9000b86e <HAL_TIM_ConfigClockSource+0x1c2>
9000b762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000b766:	d87f      	bhi.n	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b768:	2b70      	cmp	r3, #112	; 0x70
9000b76a:	d01a      	beq.n	9000b7a2 <HAL_TIM_ConfigClockSource+0xf6>
9000b76c:	2b70      	cmp	r3, #112	; 0x70
9000b76e:	d87b      	bhi.n	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b770:	2b60      	cmp	r3, #96	; 0x60
9000b772:	d050      	beq.n	9000b816 <HAL_TIM_ConfigClockSource+0x16a>
9000b774:	2b60      	cmp	r3, #96	; 0x60
9000b776:	d877      	bhi.n	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b778:	2b50      	cmp	r3, #80	; 0x50
9000b77a:	d03c      	beq.n	9000b7f6 <HAL_TIM_ConfigClockSource+0x14a>
9000b77c:	2b50      	cmp	r3, #80	; 0x50
9000b77e:	d873      	bhi.n	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b780:	2b40      	cmp	r3, #64	; 0x40
9000b782:	d058      	beq.n	9000b836 <HAL_TIM_ConfigClockSource+0x18a>
9000b784:	2b40      	cmp	r3, #64	; 0x40
9000b786:	d86f      	bhi.n	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b788:	2b30      	cmp	r3, #48	; 0x30
9000b78a:	d064      	beq.n	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b78c:	2b30      	cmp	r3, #48	; 0x30
9000b78e:	d86b      	bhi.n	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b790:	2b20      	cmp	r3, #32
9000b792:	d060      	beq.n	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b794:	2b20      	cmp	r3, #32
9000b796:	d867      	bhi.n	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
9000b798:	2b00      	cmp	r3, #0
9000b79a:	d05c      	beq.n	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b79c:	2b10      	cmp	r3, #16
9000b79e:	d05a      	beq.n	9000b856 <HAL_TIM_ConfigClockSource+0x1aa>
9000b7a0:	e062      	b.n	9000b868 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
9000b7a2:	687b      	ldr	r3, [r7, #4]
9000b7a4:	6818      	ldr	r0, [r3, #0]
9000b7a6:	683b      	ldr	r3, [r7, #0]
9000b7a8:	6899      	ldr	r1, [r3, #8]
9000b7aa:	683b      	ldr	r3, [r7, #0]
9000b7ac:	685a      	ldr	r2, [r3, #4]
9000b7ae:	683b      	ldr	r3, [r7, #0]
9000b7b0:	68db      	ldr	r3, [r3, #12]
9000b7b2:	f000 f9b3 	bl	9000bb1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
9000b7b6:	687b      	ldr	r3, [r7, #4]
9000b7b8:	681b      	ldr	r3, [r3, #0]
9000b7ba:	689b      	ldr	r3, [r3, #8]
9000b7bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
9000b7be:	68bb      	ldr	r3, [r7, #8]
9000b7c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
9000b7c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
9000b7c6:	687b      	ldr	r3, [r7, #4]
9000b7c8:	681b      	ldr	r3, [r3, #0]
9000b7ca:	68ba      	ldr	r2, [r7, #8]
9000b7cc:	609a      	str	r2, [r3, #8]
      break;
9000b7ce:	e04f      	b.n	9000b870 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
9000b7d0:	687b      	ldr	r3, [r7, #4]
9000b7d2:	6818      	ldr	r0, [r3, #0]
9000b7d4:	683b      	ldr	r3, [r7, #0]
9000b7d6:	6899      	ldr	r1, [r3, #8]
9000b7d8:	683b      	ldr	r3, [r7, #0]
9000b7da:	685a      	ldr	r2, [r3, #4]
9000b7dc:	683b      	ldr	r3, [r7, #0]
9000b7de:	68db      	ldr	r3, [r3, #12]
9000b7e0:	f000 f99c 	bl	9000bb1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
9000b7e4:	687b      	ldr	r3, [r7, #4]
9000b7e6:	681b      	ldr	r3, [r3, #0]
9000b7e8:	689a      	ldr	r2, [r3, #8]
9000b7ea:	687b      	ldr	r3, [r7, #4]
9000b7ec:	681b      	ldr	r3, [r3, #0]
9000b7ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000b7f2:	609a      	str	r2, [r3, #8]
      break;
9000b7f4:	e03c      	b.n	9000b870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
9000b7f6:	687b      	ldr	r3, [r7, #4]
9000b7f8:	6818      	ldr	r0, [r3, #0]
9000b7fa:	683b      	ldr	r3, [r7, #0]
9000b7fc:	6859      	ldr	r1, [r3, #4]
9000b7fe:	683b      	ldr	r3, [r7, #0]
9000b800:	68db      	ldr	r3, [r3, #12]
9000b802:	461a      	mov	r2, r3
9000b804:	f000 f90c 	bl	9000ba20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
9000b808:	687b      	ldr	r3, [r7, #4]
9000b80a:	681b      	ldr	r3, [r3, #0]
9000b80c:	2150      	movs	r1, #80	; 0x50
9000b80e:	4618      	mov	r0, r3
9000b810:	f000 f966 	bl	9000bae0 <TIM_ITRx_SetConfig>
      break;
9000b814:	e02c      	b.n	9000b870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
9000b816:	687b      	ldr	r3, [r7, #4]
9000b818:	6818      	ldr	r0, [r3, #0]
9000b81a:	683b      	ldr	r3, [r7, #0]
9000b81c:	6859      	ldr	r1, [r3, #4]
9000b81e:	683b      	ldr	r3, [r7, #0]
9000b820:	68db      	ldr	r3, [r3, #12]
9000b822:	461a      	mov	r2, r3
9000b824:	f000 f92b 	bl	9000ba7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
9000b828:	687b      	ldr	r3, [r7, #4]
9000b82a:	681b      	ldr	r3, [r3, #0]
9000b82c:	2160      	movs	r1, #96	; 0x60
9000b82e:	4618      	mov	r0, r3
9000b830:	f000 f956 	bl	9000bae0 <TIM_ITRx_SetConfig>
      break;
9000b834:	e01c      	b.n	9000b870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
9000b836:	687b      	ldr	r3, [r7, #4]
9000b838:	6818      	ldr	r0, [r3, #0]
9000b83a:	683b      	ldr	r3, [r7, #0]
9000b83c:	6859      	ldr	r1, [r3, #4]
9000b83e:	683b      	ldr	r3, [r7, #0]
9000b840:	68db      	ldr	r3, [r3, #12]
9000b842:	461a      	mov	r2, r3
9000b844:	f000 f8ec 	bl	9000ba20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
9000b848:	687b      	ldr	r3, [r7, #4]
9000b84a:	681b      	ldr	r3, [r3, #0]
9000b84c:	2140      	movs	r1, #64	; 0x40
9000b84e:	4618      	mov	r0, r3
9000b850:	f000 f946 	bl	9000bae0 <TIM_ITRx_SetConfig>
      break;
9000b854:	e00c      	b.n	9000b870 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
9000b856:	687b      	ldr	r3, [r7, #4]
9000b858:	681a      	ldr	r2, [r3, #0]
9000b85a:	683b      	ldr	r3, [r7, #0]
9000b85c:	681b      	ldr	r3, [r3, #0]
9000b85e:	4619      	mov	r1, r3
9000b860:	4610      	mov	r0, r2
9000b862:	f000 f93d 	bl	9000bae0 <TIM_ITRx_SetConfig>
      break;
9000b866:	e003      	b.n	9000b870 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
9000b868:	2301      	movs	r3, #1
9000b86a:	73fb      	strb	r3, [r7, #15]
      break;
9000b86c:	e000      	b.n	9000b870 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
9000b86e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
9000b870:	687b      	ldr	r3, [r7, #4]
9000b872:	2201      	movs	r2, #1
9000b874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
9000b878:	687b      	ldr	r3, [r7, #4]
9000b87a:	2200      	movs	r2, #0
9000b87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
9000b880:	7bfb      	ldrb	r3, [r7, #15]
}
9000b882:	4618      	mov	r0, r3
9000b884:	3710      	adds	r7, #16
9000b886:	46bd      	mov	sp, r7
9000b888:	bd80      	pop	{r7, pc}
9000b88a:	bf00      	nop
9000b88c:	ffceff88 	.word	0xffceff88
9000b890:	00100040 	.word	0x00100040
9000b894:	00100030 	.word	0x00100030
9000b898:	00100020 	.word	0x00100020

9000b89c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
9000b89c:	b480      	push	{r7}
9000b89e:	b083      	sub	sp, #12
9000b8a0:	af00      	add	r7, sp, #0
9000b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
9000b8a4:	bf00      	nop
9000b8a6:	370c      	adds	r7, #12
9000b8a8:	46bd      	mov	sp, r7
9000b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b8ae:	4770      	bx	lr

9000b8b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
9000b8b0:	b480      	push	{r7}
9000b8b2:	b083      	sub	sp, #12
9000b8b4:	af00      	add	r7, sp, #0
9000b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
9000b8b8:	bf00      	nop
9000b8ba:	370c      	adds	r7, #12
9000b8bc:	46bd      	mov	sp, r7
9000b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b8c2:	4770      	bx	lr

9000b8c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
9000b8c4:	b480      	push	{r7}
9000b8c6:	b083      	sub	sp, #12
9000b8c8:	af00      	add	r7, sp, #0
9000b8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
9000b8cc:	bf00      	nop
9000b8ce:	370c      	adds	r7, #12
9000b8d0:	46bd      	mov	sp, r7
9000b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b8d6:	4770      	bx	lr

9000b8d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
9000b8d8:	b480      	push	{r7}
9000b8da:	b083      	sub	sp, #12
9000b8dc:	af00      	add	r7, sp, #0
9000b8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
9000b8e0:	bf00      	nop
9000b8e2:	370c      	adds	r7, #12
9000b8e4:	46bd      	mov	sp, r7
9000b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b8ea:	4770      	bx	lr

9000b8ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
9000b8ec:	b480      	push	{r7}
9000b8ee:	b085      	sub	sp, #20
9000b8f0:	af00      	add	r7, sp, #0
9000b8f2:	6078      	str	r0, [r7, #4]
9000b8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
9000b8f6:	687b      	ldr	r3, [r7, #4]
9000b8f8:	681b      	ldr	r3, [r3, #0]
9000b8fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000b8fc:	687b      	ldr	r3, [r7, #4]
9000b8fe:	4a40      	ldr	r2, [pc, #256]	; (9000ba00 <TIM_Base_SetConfig+0x114>)
9000b900:	4293      	cmp	r3, r2
9000b902:	d013      	beq.n	9000b92c <TIM_Base_SetConfig+0x40>
9000b904:	687b      	ldr	r3, [r7, #4]
9000b906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000b90a:	d00f      	beq.n	9000b92c <TIM_Base_SetConfig+0x40>
9000b90c:	687b      	ldr	r3, [r7, #4]
9000b90e:	4a3d      	ldr	r2, [pc, #244]	; (9000ba04 <TIM_Base_SetConfig+0x118>)
9000b910:	4293      	cmp	r3, r2
9000b912:	d00b      	beq.n	9000b92c <TIM_Base_SetConfig+0x40>
9000b914:	687b      	ldr	r3, [r7, #4]
9000b916:	4a3c      	ldr	r2, [pc, #240]	; (9000ba08 <TIM_Base_SetConfig+0x11c>)
9000b918:	4293      	cmp	r3, r2
9000b91a:	d007      	beq.n	9000b92c <TIM_Base_SetConfig+0x40>
9000b91c:	687b      	ldr	r3, [r7, #4]
9000b91e:	4a3b      	ldr	r2, [pc, #236]	; (9000ba0c <TIM_Base_SetConfig+0x120>)
9000b920:	4293      	cmp	r3, r2
9000b922:	d003      	beq.n	9000b92c <TIM_Base_SetConfig+0x40>
9000b924:	687b      	ldr	r3, [r7, #4]
9000b926:	4a3a      	ldr	r2, [pc, #232]	; (9000ba10 <TIM_Base_SetConfig+0x124>)
9000b928:	4293      	cmp	r3, r2
9000b92a:	d108      	bne.n	9000b93e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000b92c:	68fb      	ldr	r3, [r7, #12]
9000b92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000b932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
9000b934:	683b      	ldr	r3, [r7, #0]
9000b936:	685b      	ldr	r3, [r3, #4]
9000b938:	68fa      	ldr	r2, [r7, #12]
9000b93a:	4313      	orrs	r3, r2
9000b93c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000b93e:	687b      	ldr	r3, [r7, #4]
9000b940:	4a2f      	ldr	r2, [pc, #188]	; (9000ba00 <TIM_Base_SetConfig+0x114>)
9000b942:	4293      	cmp	r3, r2
9000b944:	d01f      	beq.n	9000b986 <TIM_Base_SetConfig+0x9a>
9000b946:	687b      	ldr	r3, [r7, #4]
9000b948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000b94c:	d01b      	beq.n	9000b986 <TIM_Base_SetConfig+0x9a>
9000b94e:	687b      	ldr	r3, [r7, #4]
9000b950:	4a2c      	ldr	r2, [pc, #176]	; (9000ba04 <TIM_Base_SetConfig+0x118>)
9000b952:	4293      	cmp	r3, r2
9000b954:	d017      	beq.n	9000b986 <TIM_Base_SetConfig+0x9a>
9000b956:	687b      	ldr	r3, [r7, #4]
9000b958:	4a2b      	ldr	r2, [pc, #172]	; (9000ba08 <TIM_Base_SetConfig+0x11c>)
9000b95a:	4293      	cmp	r3, r2
9000b95c:	d013      	beq.n	9000b986 <TIM_Base_SetConfig+0x9a>
9000b95e:	687b      	ldr	r3, [r7, #4]
9000b960:	4a2a      	ldr	r2, [pc, #168]	; (9000ba0c <TIM_Base_SetConfig+0x120>)
9000b962:	4293      	cmp	r3, r2
9000b964:	d00f      	beq.n	9000b986 <TIM_Base_SetConfig+0x9a>
9000b966:	687b      	ldr	r3, [r7, #4]
9000b968:	4a29      	ldr	r2, [pc, #164]	; (9000ba10 <TIM_Base_SetConfig+0x124>)
9000b96a:	4293      	cmp	r3, r2
9000b96c:	d00b      	beq.n	9000b986 <TIM_Base_SetConfig+0x9a>
9000b96e:	687b      	ldr	r3, [r7, #4]
9000b970:	4a28      	ldr	r2, [pc, #160]	; (9000ba14 <TIM_Base_SetConfig+0x128>)
9000b972:	4293      	cmp	r3, r2
9000b974:	d007      	beq.n	9000b986 <TIM_Base_SetConfig+0x9a>
9000b976:	687b      	ldr	r3, [r7, #4]
9000b978:	4a27      	ldr	r2, [pc, #156]	; (9000ba18 <TIM_Base_SetConfig+0x12c>)
9000b97a:	4293      	cmp	r3, r2
9000b97c:	d003      	beq.n	9000b986 <TIM_Base_SetConfig+0x9a>
9000b97e:	687b      	ldr	r3, [r7, #4]
9000b980:	4a26      	ldr	r2, [pc, #152]	; (9000ba1c <TIM_Base_SetConfig+0x130>)
9000b982:	4293      	cmp	r3, r2
9000b984:	d108      	bne.n	9000b998 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
9000b986:	68fb      	ldr	r3, [r7, #12]
9000b988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
9000b98c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000b98e:	683b      	ldr	r3, [r7, #0]
9000b990:	68db      	ldr	r3, [r3, #12]
9000b992:	68fa      	ldr	r2, [r7, #12]
9000b994:	4313      	orrs	r3, r2
9000b996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000b998:	68fb      	ldr	r3, [r7, #12]
9000b99a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
9000b99e:	683b      	ldr	r3, [r7, #0]
9000b9a0:	695b      	ldr	r3, [r3, #20]
9000b9a2:	4313      	orrs	r3, r2
9000b9a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
9000b9a6:	687b      	ldr	r3, [r7, #4]
9000b9a8:	68fa      	ldr	r2, [r7, #12]
9000b9aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000b9ac:	683b      	ldr	r3, [r7, #0]
9000b9ae:	689a      	ldr	r2, [r3, #8]
9000b9b0:	687b      	ldr	r3, [r7, #4]
9000b9b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000b9b4:	683b      	ldr	r3, [r7, #0]
9000b9b6:	681a      	ldr	r2, [r3, #0]
9000b9b8:	687b      	ldr	r3, [r7, #4]
9000b9ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000b9bc:	687b      	ldr	r3, [r7, #4]
9000b9be:	4a10      	ldr	r2, [pc, #64]	; (9000ba00 <TIM_Base_SetConfig+0x114>)
9000b9c0:	4293      	cmp	r3, r2
9000b9c2:	d00f      	beq.n	9000b9e4 <TIM_Base_SetConfig+0xf8>
9000b9c4:	687b      	ldr	r3, [r7, #4]
9000b9c6:	4a12      	ldr	r2, [pc, #72]	; (9000ba10 <TIM_Base_SetConfig+0x124>)
9000b9c8:	4293      	cmp	r3, r2
9000b9ca:	d00b      	beq.n	9000b9e4 <TIM_Base_SetConfig+0xf8>
9000b9cc:	687b      	ldr	r3, [r7, #4]
9000b9ce:	4a11      	ldr	r2, [pc, #68]	; (9000ba14 <TIM_Base_SetConfig+0x128>)
9000b9d0:	4293      	cmp	r3, r2
9000b9d2:	d007      	beq.n	9000b9e4 <TIM_Base_SetConfig+0xf8>
9000b9d4:	687b      	ldr	r3, [r7, #4]
9000b9d6:	4a10      	ldr	r2, [pc, #64]	; (9000ba18 <TIM_Base_SetConfig+0x12c>)
9000b9d8:	4293      	cmp	r3, r2
9000b9da:	d003      	beq.n	9000b9e4 <TIM_Base_SetConfig+0xf8>
9000b9dc:	687b      	ldr	r3, [r7, #4]
9000b9de:	4a0f      	ldr	r2, [pc, #60]	; (9000ba1c <TIM_Base_SetConfig+0x130>)
9000b9e0:	4293      	cmp	r3, r2
9000b9e2:	d103      	bne.n	9000b9ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000b9e4:	683b      	ldr	r3, [r7, #0]
9000b9e6:	691a      	ldr	r2, [r3, #16]
9000b9e8:	687b      	ldr	r3, [r7, #4]
9000b9ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000b9ec:	687b      	ldr	r3, [r7, #4]
9000b9ee:	2201      	movs	r2, #1
9000b9f0:	615a      	str	r2, [r3, #20]
}
9000b9f2:	bf00      	nop
9000b9f4:	3714      	adds	r7, #20
9000b9f6:	46bd      	mov	sp, r7
9000b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b9fc:	4770      	bx	lr
9000b9fe:	bf00      	nop
9000ba00:	40010000 	.word	0x40010000
9000ba04:	40000400 	.word	0x40000400
9000ba08:	40000800 	.word	0x40000800
9000ba0c:	40000c00 	.word	0x40000c00
9000ba10:	40010400 	.word	0x40010400
9000ba14:	40014000 	.word	0x40014000
9000ba18:	40014400 	.word	0x40014400
9000ba1c:	40014800 	.word	0x40014800

9000ba20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
9000ba20:	b480      	push	{r7}
9000ba22:	b087      	sub	sp, #28
9000ba24:	af00      	add	r7, sp, #0
9000ba26:	60f8      	str	r0, [r7, #12]
9000ba28:	60b9      	str	r1, [r7, #8]
9000ba2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
9000ba2c:	68fb      	ldr	r3, [r7, #12]
9000ba2e:	6a1b      	ldr	r3, [r3, #32]
9000ba30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
9000ba32:	68fb      	ldr	r3, [r7, #12]
9000ba34:	6a1b      	ldr	r3, [r3, #32]
9000ba36:	f023 0201 	bic.w	r2, r3, #1
9000ba3a:	68fb      	ldr	r3, [r7, #12]
9000ba3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
9000ba3e:	68fb      	ldr	r3, [r7, #12]
9000ba40:	699b      	ldr	r3, [r3, #24]
9000ba42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
9000ba44:	693b      	ldr	r3, [r7, #16]
9000ba46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
9000ba4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
9000ba4c:	687b      	ldr	r3, [r7, #4]
9000ba4e:	011b      	lsls	r3, r3, #4
9000ba50:	693a      	ldr	r2, [r7, #16]
9000ba52:	4313      	orrs	r3, r2
9000ba54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
9000ba56:	697b      	ldr	r3, [r7, #20]
9000ba58:	f023 030a 	bic.w	r3, r3, #10
9000ba5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
9000ba5e:	697a      	ldr	r2, [r7, #20]
9000ba60:	68bb      	ldr	r3, [r7, #8]
9000ba62:	4313      	orrs	r3, r2
9000ba64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
9000ba66:	68fb      	ldr	r3, [r7, #12]
9000ba68:	693a      	ldr	r2, [r7, #16]
9000ba6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
9000ba6c:	68fb      	ldr	r3, [r7, #12]
9000ba6e:	697a      	ldr	r2, [r7, #20]
9000ba70:	621a      	str	r2, [r3, #32]
}
9000ba72:	bf00      	nop
9000ba74:	371c      	adds	r7, #28
9000ba76:	46bd      	mov	sp, r7
9000ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba7c:	4770      	bx	lr

9000ba7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
9000ba7e:	b480      	push	{r7}
9000ba80:	b087      	sub	sp, #28
9000ba82:	af00      	add	r7, sp, #0
9000ba84:	60f8      	str	r0, [r7, #12]
9000ba86:	60b9      	str	r1, [r7, #8]
9000ba88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
9000ba8a:	68fb      	ldr	r3, [r7, #12]
9000ba8c:	6a1b      	ldr	r3, [r3, #32]
9000ba8e:	f023 0210 	bic.w	r2, r3, #16
9000ba92:	68fb      	ldr	r3, [r7, #12]
9000ba94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
9000ba96:	68fb      	ldr	r3, [r7, #12]
9000ba98:	699b      	ldr	r3, [r3, #24]
9000ba9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
9000ba9c:	68fb      	ldr	r3, [r7, #12]
9000ba9e:	6a1b      	ldr	r3, [r3, #32]
9000baa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
9000baa2:	697b      	ldr	r3, [r7, #20]
9000baa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
9000baa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
9000baaa:	687b      	ldr	r3, [r7, #4]
9000baac:	031b      	lsls	r3, r3, #12
9000baae:	697a      	ldr	r2, [r7, #20]
9000bab0:	4313      	orrs	r3, r2
9000bab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
9000bab4:	693b      	ldr	r3, [r7, #16]
9000bab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
9000baba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
9000babc:	68bb      	ldr	r3, [r7, #8]
9000babe:	011b      	lsls	r3, r3, #4
9000bac0:	693a      	ldr	r2, [r7, #16]
9000bac2:	4313      	orrs	r3, r2
9000bac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
9000bac6:	68fb      	ldr	r3, [r7, #12]
9000bac8:	697a      	ldr	r2, [r7, #20]
9000baca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
9000bacc:	68fb      	ldr	r3, [r7, #12]
9000bace:	693a      	ldr	r2, [r7, #16]
9000bad0:	621a      	str	r2, [r3, #32]
}
9000bad2:	bf00      	nop
9000bad4:	371c      	adds	r7, #28
9000bad6:	46bd      	mov	sp, r7
9000bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000badc:	4770      	bx	lr
	...

9000bae0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
9000bae0:	b480      	push	{r7}
9000bae2:	b085      	sub	sp, #20
9000bae4:	af00      	add	r7, sp, #0
9000bae6:	6078      	str	r0, [r7, #4]
9000bae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
9000baea:	687b      	ldr	r3, [r7, #4]
9000baec:	689b      	ldr	r3, [r3, #8]
9000baee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
9000baf0:	68fa      	ldr	r2, [r7, #12]
9000baf2:	4b09      	ldr	r3, [pc, #36]	; (9000bb18 <TIM_ITRx_SetConfig+0x38>)
9000baf4:	4013      	ands	r3, r2
9000baf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
9000baf8:	683a      	ldr	r2, [r7, #0]
9000bafa:	68fb      	ldr	r3, [r7, #12]
9000bafc:	4313      	orrs	r3, r2
9000bafe:	f043 0307 	orr.w	r3, r3, #7
9000bb02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
9000bb04:	687b      	ldr	r3, [r7, #4]
9000bb06:	68fa      	ldr	r2, [r7, #12]
9000bb08:	609a      	str	r2, [r3, #8]
}
9000bb0a:	bf00      	nop
9000bb0c:	3714      	adds	r7, #20
9000bb0e:	46bd      	mov	sp, r7
9000bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb14:	4770      	bx	lr
9000bb16:	bf00      	nop
9000bb18:	ffcfff8f 	.word	0xffcfff8f

9000bb1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
9000bb1c:	b480      	push	{r7}
9000bb1e:	b087      	sub	sp, #28
9000bb20:	af00      	add	r7, sp, #0
9000bb22:	60f8      	str	r0, [r7, #12]
9000bb24:	60b9      	str	r1, [r7, #8]
9000bb26:	607a      	str	r2, [r7, #4]
9000bb28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
9000bb2a:	68fb      	ldr	r3, [r7, #12]
9000bb2c:	689b      	ldr	r3, [r3, #8]
9000bb2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
9000bb30:	697b      	ldr	r3, [r7, #20]
9000bb32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
9000bb36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
9000bb38:	683b      	ldr	r3, [r7, #0]
9000bb3a:	021a      	lsls	r2, r3, #8
9000bb3c:	687b      	ldr	r3, [r7, #4]
9000bb3e:	431a      	orrs	r2, r3
9000bb40:	68bb      	ldr	r3, [r7, #8]
9000bb42:	4313      	orrs	r3, r2
9000bb44:	697a      	ldr	r2, [r7, #20]
9000bb46:	4313      	orrs	r3, r2
9000bb48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
9000bb4a:	68fb      	ldr	r3, [r7, #12]
9000bb4c:	697a      	ldr	r2, [r7, #20]
9000bb4e:	609a      	str	r2, [r3, #8]
}
9000bb50:	bf00      	nop
9000bb52:	371c      	adds	r7, #28
9000bb54:	46bd      	mov	sp, r7
9000bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bb5a:	4770      	bx	lr

9000bb5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
9000bb5c:	b480      	push	{r7}
9000bb5e:	b087      	sub	sp, #28
9000bb60:	af00      	add	r7, sp, #0
9000bb62:	60f8      	str	r0, [r7, #12]
9000bb64:	60b9      	str	r1, [r7, #8]
9000bb66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
9000bb68:	68bb      	ldr	r3, [r7, #8]
9000bb6a:	f003 031f 	and.w	r3, r3, #31
9000bb6e:	2201      	movs	r2, #1
9000bb70:	fa02 f303 	lsl.w	r3, r2, r3
9000bb74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
9000bb76:	68fb      	ldr	r3, [r7, #12]
9000bb78:	6a1a      	ldr	r2, [r3, #32]
9000bb7a:	697b      	ldr	r3, [r7, #20]
9000bb7c:	43db      	mvns	r3, r3
9000bb7e:	401a      	ands	r2, r3
9000bb80:	68fb      	ldr	r3, [r7, #12]
9000bb82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
9000bb84:	68fb      	ldr	r3, [r7, #12]
9000bb86:	6a1a      	ldr	r2, [r3, #32]
9000bb88:	68bb      	ldr	r3, [r7, #8]
9000bb8a:	f003 031f 	and.w	r3, r3, #31
9000bb8e:	6879      	ldr	r1, [r7, #4]
9000bb90:	fa01 f303 	lsl.w	r3, r1, r3
9000bb94:	431a      	orrs	r2, r3
9000bb96:	68fb      	ldr	r3, [r7, #12]
9000bb98:	621a      	str	r2, [r3, #32]
}
9000bb9a:	bf00      	nop
9000bb9c:	371c      	adds	r7, #28
9000bb9e:	46bd      	mov	sp, r7
9000bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bba4:	4770      	bx	lr
	...

9000bba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
9000bba8:	b480      	push	{r7}
9000bbaa:	b085      	sub	sp, #20
9000bbac:	af00      	add	r7, sp, #0
9000bbae:	6078      	str	r0, [r7, #4]
9000bbb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
9000bbb2:	687b      	ldr	r3, [r7, #4]
9000bbb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
9000bbb8:	2b01      	cmp	r3, #1
9000bbba:	d101      	bne.n	9000bbc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
9000bbbc:	2302      	movs	r3, #2
9000bbbe:	e06d      	b.n	9000bc9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
9000bbc0:	687b      	ldr	r3, [r7, #4]
9000bbc2:	2201      	movs	r2, #1
9000bbc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
9000bbc8:	687b      	ldr	r3, [r7, #4]
9000bbca:	2202      	movs	r2, #2
9000bbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
9000bbd0:	687b      	ldr	r3, [r7, #4]
9000bbd2:	681b      	ldr	r3, [r3, #0]
9000bbd4:	685b      	ldr	r3, [r3, #4]
9000bbd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
9000bbd8:	687b      	ldr	r3, [r7, #4]
9000bbda:	681b      	ldr	r3, [r3, #0]
9000bbdc:	689b      	ldr	r3, [r3, #8]
9000bbde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
9000bbe0:	687b      	ldr	r3, [r7, #4]
9000bbe2:	681b      	ldr	r3, [r3, #0]
9000bbe4:	4a30      	ldr	r2, [pc, #192]	; (9000bca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
9000bbe6:	4293      	cmp	r3, r2
9000bbe8:	d004      	beq.n	9000bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
9000bbea:	687b      	ldr	r3, [r7, #4]
9000bbec:	681b      	ldr	r3, [r3, #0]
9000bbee:	4a2f      	ldr	r2, [pc, #188]	; (9000bcac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
9000bbf0:	4293      	cmp	r3, r2
9000bbf2:	d108      	bne.n	9000bc06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
9000bbf4:	68fb      	ldr	r3, [r7, #12]
9000bbf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
9000bbfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
9000bbfc:	683b      	ldr	r3, [r7, #0]
9000bbfe:	685b      	ldr	r3, [r3, #4]
9000bc00:	68fa      	ldr	r2, [r7, #12]
9000bc02:	4313      	orrs	r3, r2
9000bc04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
9000bc06:	68fb      	ldr	r3, [r7, #12]
9000bc08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000bc0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
9000bc0e:	683b      	ldr	r3, [r7, #0]
9000bc10:	681b      	ldr	r3, [r3, #0]
9000bc12:	68fa      	ldr	r2, [r7, #12]
9000bc14:	4313      	orrs	r3, r2
9000bc16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
9000bc18:	687b      	ldr	r3, [r7, #4]
9000bc1a:	681b      	ldr	r3, [r3, #0]
9000bc1c:	68fa      	ldr	r2, [r7, #12]
9000bc1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000bc20:	687b      	ldr	r3, [r7, #4]
9000bc22:	681b      	ldr	r3, [r3, #0]
9000bc24:	4a20      	ldr	r2, [pc, #128]	; (9000bca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
9000bc26:	4293      	cmp	r3, r2
9000bc28:	d022      	beq.n	9000bc70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
9000bc2a:	687b      	ldr	r3, [r7, #4]
9000bc2c:	681b      	ldr	r3, [r3, #0]
9000bc2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000bc32:	d01d      	beq.n	9000bc70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
9000bc34:	687b      	ldr	r3, [r7, #4]
9000bc36:	681b      	ldr	r3, [r3, #0]
9000bc38:	4a1d      	ldr	r2, [pc, #116]	; (9000bcb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
9000bc3a:	4293      	cmp	r3, r2
9000bc3c:	d018      	beq.n	9000bc70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
9000bc3e:	687b      	ldr	r3, [r7, #4]
9000bc40:	681b      	ldr	r3, [r3, #0]
9000bc42:	4a1c      	ldr	r2, [pc, #112]	; (9000bcb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
9000bc44:	4293      	cmp	r3, r2
9000bc46:	d013      	beq.n	9000bc70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
9000bc48:	687b      	ldr	r3, [r7, #4]
9000bc4a:	681b      	ldr	r3, [r3, #0]
9000bc4c:	4a1a      	ldr	r2, [pc, #104]	; (9000bcb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
9000bc4e:	4293      	cmp	r3, r2
9000bc50:	d00e      	beq.n	9000bc70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
9000bc52:	687b      	ldr	r3, [r7, #4]
9000bc54:	681b      	ldr	r3, [r3, #0]
9000bc56:	4a15      	ldr	r2, [pc, #84]	; (9000bcac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
9000bc58:	4293      	cmp	r3, r2
9000bc5a:	d009      	beq.n	9000bc70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
9000bc5c:	687b      	ldr	r3, [r7, #4]
9000bc5e:	681b      	ldr	r3, [r3, #0]
9000bc60:	4a16      	ldr	r2, [pc, #88]	; (9000bcbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
9000bc62:	4293      	cmp	r3, r2
9000bc64:	d004      	beq.n	9000bc70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
9000bc66:	687b      	ldr	r3, [r7, #4]
9000bc68:	681b      	ldr	r3, [r3, #0]
9000bc6a:	4a15      	ldr	r2, [pc, #84]	; (9000bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
9000bc6c:	4293      	cmp	r3, r2
9000bc6e:	d10c      	bne.n	9000bc8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
9000bc70:	68bb      	ldr	r3, [r7, #8]
9000bc72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000bc76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
9000bc78:	683b      	ldr	r3, [r7, #0]
9000bc7a:	689b      	ldr	r3, [r3, #8]
9000bc7c:	68ba      	ldr	r2, [r7, #8]
9000bc7e:	4313      	orrs	r3, r2
9000bc80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
9000bc82:	687b      	ldr	r3, [r7, #4]
9000bc84:	681b      	ldr	r3, [r3, #0]
9000bc86:	68ba      	ldr	r2, [r7, #8]
9000bc88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
9000bc8a:	687b      	ldr	r3, [r7, #4]
9000bc8c:	2201      	movs	r2, #1
9000bc8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
9000bc92:	687b      	ldr	r3, [r7, #4]
9000bc94:	2200      	movs	r2, #0
9000bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
9000bc9a:	2300      	movs	r3, #0
}
9000bc9c:	4618      	mov	r0, r3
9000bc9e:	3714      	adds	r7, #20
9000bca0:	46bd      	mov	sp, r7
9000bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bca6:	4770      	bx	lr
9000bca8:	40010000 	.word	0x40010000
9000bcac:	40010400 	.word	0x40010400
9000bcb0:	40000400 	.word	0x40000400
9000bcb4:	40000800 	.word	0x40000800
9000bcb8:	40000c00 	.word	0x40000c00
9000bcbc:	40001800 	.word	0x40001800
9000bcc0:	40014000 	.word	0x40014000

9000bcc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
9000bcc4:	b480      	push	{r7}
9000bcc6:	b083      	sub	sp, #12
9000bcc8:	af00      	add	r7, sp, #0
9000bcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
9000bccc:	bf00      	nop
9000bcce:	370c      	adds	r7, #12
9000bcd0:	46bd      	mov	sp, r7
9000bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcd6:	4770      	bx	lr

9000bcd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
9000bcd8:	b480      	push	{r7}
9000bcda:	b083      	sub	sp, #12
9000bcdc:	af00      	add	r7, sp, #0
9000bcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
9000bce0:	bf00      	nop
9000bce2:	370c      	adds	r7, #12
9000bce4:	46bd      	mov	sp, r7
9000bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcea:	4770      	bx	lr

9000bcec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
9000bcec:	b480      	push	{r7}
9000bcee:	b083      	sub	sp, #12
9000bcf0:	af00      	add	r7, sp, #0
9000bcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
9000bcf4:	bf00      	nop
9000bcf6:	370c      	adds	r7, #12
9000bcf8:	46bd      	mov	sp, r7
9000bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcfe:	4770      	bx	lr

9000bd00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
9000bd00:	b580      	push	{r7, lr}
9000bd02:	b082      	sub	sp, #8
9000bd04:	af00      	add	r7, sp, #0
9000bd06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
9000bd08:	687b      	ldr	r3, [r7, #4]
9000bd0a:	2b00      	cmp	r3, #0
9000bd0c:	d101      	bne.n	9000bd12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
9000bd0e:	2301      	movs	r3, #1
9000bd10:	e042      	b.n	9000bd98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
9000bd12:	687b      	ldr	r3, [r7, #4]
9000bd14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000bd18:	2b00      	cmp	r3, #0
9000bd1a:	d106      	bne.n	9000bd2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
9000bd1c:	687b      	ldr	r3, [r7, #4]
9000bd1e:	2200      	movs	r2, #0
9000bd20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
9000bd24:	6878      	ldr	r0, [r7, #4]
9000bd26:	f7f6 fbe9 	bl	900024fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
9000bd2a:	687b      	ldr	r3, [r7, #4]
9000bd2c:	2224      	movs	r2, #36	; 0x24
9000bd2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
9000bd32:	687b      	ldr	r3, [r7, #4]
9000bd34:	681b      	ldr	r3, [r3, #0]
9000bd36:	681a      	ldr	r2, [r3, #0]
9000bd38:	687b      	ldr	r3, [r7, #4]
9000bd3a:	681b      	ldr	r3, [r3, #0]
9000bd3c:	f022 0201 	bic.w	r2, r2, #1
9000bd40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
9000bd42:	6878      	ldr	r0, [r7, #4]
9000bd44:	f000 fce0 	bl	9000c708 <UART_SetConfig>
9000bd48:	4603      	mov	r3, r0
9000bd4a:	2b01      	cmp	r3, #1
9000bd4c:	d101      	bne.n	9000bd52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
9000bd4e:	2301      	movs	r3, #1
9000bd50:	e022      	b.n	9000bd98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
9000bd52:	687b      	ldr	r3, [r7, #4]
9000bd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000bd56:	2b00      	cmp	r3, #0
9000bd58:	d002      	beq.n	9000bd60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
9000bd5a:	6878      	ldr	r0, [r7, #4]
9000bd5c:	f001 fa3c 	bl	9000d1d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000bd60:	687b      	ldr	r3, [r7, #4]
9000bd62:	681b      	ldr	r3, [r3, #0]
9000bd64:	685a      	ldr	r2, [r3, #4]
9000bd66:	687b      	ldr	r3, [r7, #4]
9000bd68:	681b      	ldr	r3, [r3, #0]
9000bd6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
9000bd6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
9000bd70:	687b      	ldr	r3, [r7, #4]
9000bd72:	681b      	ldr	r3, [r3, #0]
9000bd74:	689a      	ldr	r2, [r3, #8]
9000bd76:	687b      	ldr	r3, [r7, #4]
9000bd78:	681b      	ldr	r3, [r3, #0]
9000bd7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
9000bd7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
9000bd80:	687b      	ldr	r3, [r7, #4]
9000bd82:	681b      	ldr	r3, [r3, #0]
9000bd84:	681a      	ldr	r2, [r3, #0]
9000bd86:	687b      	ldr	r3, [r7, #4]
9000bd88:	681b      	ldr	r3, [r3, #0]
9000bd8a:	f042 0201 	orr.w	r2, r2, #1
9000bd8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
9000bd90:	6878      	ldr	r0, [r7, #4]
9000bd92:	f001 fac3 	bl	9000d31c <UART_CheckIdleState>
9000bd96:	4603      	mov	r3, r0
}
9000bd98:	4618      	mov	r0, r3
9000bd9a:	3708      	adds	r7, #8
9000bd9c:	46bd      	mov	sp, r7
9000bd9e:	bd80      	pop	{r7, pc}

9000bda0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
9000bda0:	b580      	push	{r7, lr}
9000bda2:	b08a      	sub	sp, #40	; 0x28
9000bda4:	af02      	add	r7, sp, #8
9000bda6:	60f8      	str	r0, [r7, #12]
9000bda8:	60b9      	str	r1, [r7, #8]
9000bdaa:	603b      	str	r3, [r7, #0]
9000bdac:	4613      	mov	r3, r2
9000bdae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
9000bdb0:	68fb      	ldr	r3, [r7, #12]
9000bdb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000bdb6:	2b20      	cmp	r3, #32
9000bdb8:	f040 8083 	bne.w	9000bec2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
9000bdbc:	68bb      	ldr	r3, [r7, #8]
9000bdbe:	2b00      	cmp	r3, #0
9000bdc0:	d002      	beq.n	9000bdc8 <HAL_UART_Transmit+0x28>
9000bdc2:	88fb      	ldrh	r3, [r7, #6]
9000bdc4:	2b00      	cmp	r3, #0
9000bdc6:	d101      	bne.n	9000bdcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
9000bdc8:	2301      	movs	r3, #1
9000bdca:	e07b      	b.n	9000bec4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
9000bdcc:	68fb      	ldr	r3, [r7, #12]
9000bdce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
9000bdd2:	2b01      	cmp	r3, #1
9000bdd4:	d101      	bne.n	9000bdda <HAL_UART_Transmit+0x3a>
9000bdd6:	2302      	movs	r3, #2
9000bdd8:	e074      	b.n	9000bec4 <HAL_UART_Transmit+0x124>
9000bdda:	68fb      	ldr	r3, [r7, #12]
9000bddc:	2201      	movs	r2, #1
9000bdde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
9000bde2:	68fb      	ldr	r3, [r7, #12]
9000bde4:	2200      	movs	r2, #0
9000bde6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000bdea:	68fb      	ldr	r3, [r7, #12]
9000bdec:	2221      	movs	r2, #33	; 0x21
9000bdee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
9000bdf2:	f7f7 febd 	bl	90003b70 <HAL_GetTick>
9000bdf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
9000bdf8:	68fb      	ldr	r3, [r7, #12]
9000bdfa:	88fa      	ldrh	r2, [r7, #6]
9000bdfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
9000be00:	68fb      	ldr	r3, [r7, #12]
9000be02:	88fa      	ldrh	r2, [r7, #6]
9000be04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000be08:	68fb      	ldr	r3, [r7, #12]
9000be0a:	689b      	ldr	r3, [r3, #8]
9000be0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000be10:	d108      	bne.n	9000be24 <HAL_UART_Transmit+0x84>
9000be12:	68fb      	ldr	r3, [r7, #12]
9000be14:	691b      	ldr	r3, [r3, #16]
9000be16:	2b00      	cmp	r3, #0
9000be18:	d104      	bne.n	9000be24 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
9000be1a:	2300      	movs	r3, #0
9000be1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
9000be1e:	68bb      	ldr	r3, [r7, #8]
9000be20:	61bb      	str	r3, [r7, #24]
9000be22:	e003      	b.n	9000be2c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
9000be24:	68bb      	ldr	r3, [r7, #8]
9000be26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
9000be28:	2300      	movs	r3, #0
9000be2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
9000be2c:	68fb      	ldr	r3, [r7, #12]
9000be2e:	2200      	movs	r2, #0
9000be30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
9000be34:	e02c      	b.n	9000be90 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
9000be36:	683b      	ldr	r3, [r7, #0]
9000be38:	9300      	str	r3, [sp, #0]
9000be3a:	697b      	ldr	r3, [r7, #20]
9000be3c:	2200      	movs	r2, #0
9000be3e:	2180      	movs	r1, #128	; 0x80
9000be40:	68f8      	ldr	r0, [r7, #12]
9000be42:	f001 fab6 	bl	9000d3b2 <UART_WaitOnFlagUntilTimeout>
9000be46:	4603      	mov	r3, r0
9000be48:	2b00      	cmp	r3, #0
9000be4a:	d001      	beq.n	9000be50 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
9000be4c:	2303      	movs	r3, #3
9000be4e:	e039      	b.n	9000bec4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
9000be50:	69fb      	ldr	r3, [r7, #28]
9000be52:	2b00      	cmp	r3, #0
9000be54:	d10b      	bne.n	9000be6e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
9000be56:	69bb      	ldr	r3, [r7, #24]
9000be58:	881b      	ldrh	r3, [r3, #0]
9000be5a:	461a      	mov	r2, r3
9000be5c:	68fb      	ldr	r3, [r7, #12]
9000be5e:	681b      	ldr	r3, [r3, #0]
9000be60:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000be64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
9000be66:	69bb      	ldr	r3, [r7, #24]
9000be68:	3302      	adds	r3, #2
9000be6a:	61bb      	str	r3, [r7, #24]
9000be6c:	e007      	b.n	9000be7e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000be6e:	69fb      	ldr	r3, [r7, #28]
9000be70:	781a      	ldrb	r2, [r3, #0]
9000be72:	68fb      	ldr	r3, [r7, #12]
9000be74:	681b      	ldr	r3, [r3, #0]
9000be76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
9000be78:	69fb      	ldr	r3, [r7, #28]
9000be7a:	3301      	adds	r3, #1
9000be7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
9000be7e:	68fb      	ldr	r3, [r7, #12]
9000be80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
9000be84:	b29b      	uxth	r3, r3
9000be86:	3b01      	subs	r3, #1
9000be88:	b29a      	uxth	r2, r3
9000be8a:	68fb      	ldr	r3, [r7, #12]
9000be8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
9000be90:	68fb      	ldr	r3, [r7, #12]
9000be92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
9000be96:	b29b      	uxth	r3, r3
9000be98:	2b00      	cmp	r3, #0
9000be9a:	d1cc      	bne.n	9000be36 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
9000be9c:	683b      	ldr	r3, [r7, #0]
9000be9e:	9300      	str	r3, [sp, #0]
9000bea0:	697b      	ldr	r3, [r7, #20]
9000bea2:	2200      	movs	r2, #0
9000bea4:	2140      	movs	r1, #64	; 0x40
9000bea6:	68f8      	ldr	r0, [r7, #12]
9000bea8:	f001 fa83 	bl	9000d3b2 <UART_WaitOnFlagUntilTimeout>
9000beac:	4603      	mov	r3, r0
9000beae:	2b00      	cmp	r3, #0
9000beb0:	d001      	beq.n	9000beb6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
9000beb2:	2303      	movs	r3, #3
9000beb4:	e006      	b.n	9000bec4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
9000beb6:	68fb      	ldr	r3, [r7, #12]
9000beb8:	2220      	movs	r2, #32
9000beba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
9000bebe:	2300      	movs	r3, #0
9000bec0:	e000      	b.n	9000bec4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
9000bec2:	2302      	movs	r3, #2
  }
}
9000bec4:	4618      	mov	r0, r3
9000bec6:	3720      	adds	r7, #32
9000bec8:	46bd      	mov	sp, r7
9000beca:	bd80      	pop	{r7, pc}

9000becc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
9000becc:	b580      	push	{r7, lr}
9000bece:	b08a      	sub	sp, #40	; 0x28
9000bed0:	af00      	add	r7, sp, #0
9000bed2:	60f8      	str	r0, [r7, #12]
9000bed4:	60b9      	str	r1, [r7, #8]
9000bed6:	4613      	mov	r3, r2
9000bed8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
9000beda:	68fb      	ldr	r3, [r7, #12]
9000bedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000bee0:	2b20      	cmp	r3, #32
9000bee2:	d142      	bne.n	9000bf6a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
9000bee4:	68bb      	ldr	r3, [r7, #8]
9000bee6:	2b00      	cmp	r3, #0
9000bee8:	d002      	beq.n	9000bef0 <HAL_UART_Receive_DMA+0x24>
9000beea:	88fb      	ldrh	r3, [r7, #6]
9000beec:	2b00      	cmp	r3, #0
9000beee:	d101      	bne.n	9000bef4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
9000bef0:	2301      	movs	r3, #1
9000bef2:	e03b      	b.n	9000bf6c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
9000bef4:	68fb      	ldr	r3, [r7, #12]
9000bef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
9000befa:	2b01      	cmp	r3, #1
9000befc:	d101      	bne.n	9000bf02 <HAL_UART_Receive_DMA+0x36>
9000befe:	2302      	movs	r3, #2
9000bf00:	e034      	b.n	9000bf6c <HAL_UART_Receive_DMA+0xa0>
9000bf02:	68fb      	ldr	r3, [r7, #12]
9000bf04:	2201      	movs	r2, #1
9000bf06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000bf0a:	68fb      	ldr	r3, [r7, #12]
9000bf0c:	2200      	movs	r2, #0
9000bf0e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000bf10:	68fb      	ldr	r3, [r7, #12]
9000bf12:	681b      	ldr	r3, [r3, #0]
9000bf14:	4a17      	ldr	r2, [pc, #92]	; (9000bf74 <HAL_UART_Receive_DMA+0xa8>)
9000bf16:	4293      	cmp	r3, r2
9000bf18:	d01f      	beq.n	9000bf5a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
9000bf1a:	68fb      	ldr	r3, [r7, #12]
9000bf1c:	681b      	ldr	r3, [r3, #0]
9000bf1e:	685b      	ldr	r3, [r3, #4]
9000bf20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000bf24:	2b00      	cmp	r3, #0
9000bf26:	d018      	beq.n	9000bf5a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
9000bf28:	68fb      	ldr	r3, [r7, #12]
9000bf2a:	681b      	ldr	r3, [r3, #0]
9000bf2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000bf2e:	697b      	ldr	r3, [r7, #20]
9000bf30:	e853 3f00 	ldrex	r3, [r3]
9000bf34:	613b      	str	r3, [r7, #16]
   return(result);
9000bf36:	693b      	ldr	r3, [r7, #16]
9000bf38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000bf3c:	627b      	str	r3, [r7, #36]	; 0x24
9000bf3e:	68fb      	ldr	r3, [r7, #12]
9000bf40:	681b      	ldr	r3, [r3, #0]
9000bf42:	461a      	mov	r2, r3
9000bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000bf46:	623b      	str	r3, [r7, #32]
9000bf48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000bf4a:	69f9      	ldr	r1, [r7, #28]
9000bf4c:	6a3a      	ldr	r2, [r7, #32]
9000bf4e:	e841 2300 	strex	r3, r2, [r1]
9000bf52:	61bb      	str	r3, [r7, #24]
   return(result);
9000bf54:	69bb      	ldr	r3, [r7, #24]
9000bf56:	2b00      	cmp	r3, #0
9000bf58:	d1e6      	bne.n	9000bf28 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
9000bf5a:	88fb      	ldrh	r3, [r7, #6]
9000bf5c:	461a      	mov	r2, r3
9000bf5e:	68b9      	ldr	r1, [r7, #8]
9000bf60:	68f8      	ldr	r0, [r7, #12]
9000bf62:	f001 faef 	bl	9000d544 <UART_Start_Receive_DMA>
9000bf66:	4603      	mov	r3, r0
9000bf68:	e000      	b.n	9000bf6c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
9000bf6a:	2302      	movs	r3, #2
  }
}
9000bf6c:	4618      	mov	r0, r3
9000bf6e:	3728      	adds	r7, #40	; 0x28
9000bf70:	46bd      	mov	sp, r7
9000bf72:	bd80      	pop	{r7, pc}
9000bf74:	58000c00 	.word	0x58000c00

9000bf78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
9000bf78:	b580      	push	{r7, lr}
9000bf7a:	b0ba      	sub	sp, #232	; 0xe8
9000bf7c:	af00      	add	r7, sp, #0
9000bf7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
9000bf80:	687b      	ldr	r3, [r7, #4]
9000bf82:	681b      	ldr	r3, [r3, #0]
9000bf84:	69db      	ldr	r3, [r3, #28]
9000bf86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
9000bf8a:	687b      	ldr	r3, [r7, #4]
9000bf8c:	681b      	ldr	r3, [r3, #0]
9000bf8e:	681b      	ldr	r3, [r3, #0]
9000bf90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
9000bf94:	687b      	ldr	r3, [r7, #4]
9000bf96:	681b      	ldr	r3, [r3, #0]
9000bf98:	689b      	ldr	r3, [r3, #8]
9000bf9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
9000bf9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
9000bfa2:	f640 030f 	movw	r3, #2063	; 0x80f
9000bfa6:	4013      	ands	r3, r2
9000bfa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
9000bfac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
9000bfb0:	2b00      	cmp	r3, #0
9000bfb2:	d11b      	bne.n	9000bfec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
9000bfb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000bfb8:	f003 0320 	and.w	r3, r3, #32
9000bfbc:	2b00      	cmp	r3, #0
9000bfbe:	d015      	beq.n	9000bfec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
9000bfc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000bfc4:	f003 0320 	and.w	r3, r3, #32
9000bfc8:	2b00      	cmp	r3, #0
9000bfca:	d105      	bne.n	9000bfd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
9000bfcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
9000bfd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000bfd4:	2b00      	cmp	r3, #0
9000bfd6:	d009      	beq.n	9000bfec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
9000bfd8:	687b      	ldr	r3, [r7, #4]
9000bfda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000bfdc:	2b00      	cmp	r3, #0
9000bfde:	f000 835a 	beq.w	9000c696 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
9000bfe2:	687b      	ldr	r3, [r7, #4]
9000bfe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000bfe6:	6878      	ldr	r0, [r7, #4]
9000bfe8:	4798      	blx	r3
      }
      return;
9000bfea:	e354      	b.n	9000c696 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
9000bfec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
9000bff0:	2b00      	cmp	r3, #0
9000bff2:	f000 811f 	beq.w	9000c234 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
9000bff6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
9000bffa:	4b8b      	ldr	r3, [pc, #556]	; (9000c228 <HAL_UART_IRQHandler+0x2b0>)
9000bffc:	4013      	ands	r3, r2
9000bffe:	2b00      	cmp	r3, #0
9000c000:	d106      	bne.n	9000c010 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
9000c002:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
9000c006:	4b89      	ldr	r3, [pc, #548]	; (9000c22c <HAL_UART_IRQHandler+0x2b4>)
9000c008:	4013      	ands	r3, r2
9000c00a:	2b00      	cmp	r3, #0
9000c00c:	f000 8112 	beq.w	9000c234 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000c010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c014:	f003 0301 	and.w	r3, r3, #1
9000c018:	2b00      	cmp	r3, #0
9000c01a:	d011      	beq.n	9000c040 <HAL_UART_IRQHandler+0xc8>
9000c01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c020:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000c024:	2b00      	cmp	r3, #0
9000c026:	d00b      	beq.n	9000c040 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
9000c028:	687b      	ldr	r3, [r7, #4]
9000c02a:	681b      	ldr	r3, [r3, #0]
9000c02c:	2201      	movs	r2, #1
9000c02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
9000c030:	687b      	ldr	r3, [r7, #4]
9000c032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000c036:	f043 0201 	orr.w	r2, r3, #1
9000c03a:	687b      	ldr	r3, [r7, #4]
9000c03c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c044:	f003 0302 	and.w	r3, r3, #2
9000c048:	2b00      	cmp	r3, #0
9000c04a:	d011      	beq.n	9000c070 <HAL_UART_IRQHandler+0xf8>
9000c04c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
9000c050:	f003 0301 	and.w	r3, r3, #1
9000c054:	2b00      	cmp	r3, #0
9000c056:	d00b      	beq.n	9000c070 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000c058:	687b      	ldr	r3, [r7, #4]
9000c05a:	681b      	ldr	r3, [r3, #0]
9000c05c:	2202      	movs	r2, #2
9000c05e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
9000c060:	687b      	ldr	r3, [r7, #4]
9000c062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000c066:	f043 0204 	orr.w	r2, r3, #4
9000c06a:	687b      	ldr	r3, [r7, #4]
9000c06c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000c070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c074:	f003 0304 	and.w	r3, r3, #4
9000c078:	2b00      	cmp	r3, #0
9000c07a:	d011      	beq.n	9000c0a0 <HAL_UART_IRQHandler+0x128>
9000c07c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
9000c080:	f003 0301 	and.w	r3, r3, #1
9000c084:	2b00      	cmp	r3, #0
9000c086:	d00b      	beq.n	9000c0a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
9000c088:	687b      	ldr	r3, [r7, #4]
9000c08a:	681b      	ldr	r3, [r3, #0]
9000c08c:	2204      	movs	r2, #4
9000c08e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
9000c090:	687b      	ldr	r3, [r7, #4]
9000c092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000c096:	f043 0202 	orr.w	r2, r3, #2
9000c09a:	687b      	ldr	r3, [r7, #4]
9000c09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
9000c0a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c0a4:	f003 0308 	and.w	r3, r3, #8
9000c0a8:	2b00      	cmp	r3, #0
9000c0aa:	d017      	beq.n	9000c0dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
9000c0ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c0b0:	f003 0320 	and.w	r3, r3, #32
9000c0b4:	2b00      	cmp	r3, #0
9000c0b6:	d105      	bne.n	9000c0c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
9000c0b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
9000c0bc:	4b5a      	ldr	r3, [pc, #360]	; (9000c228 <HAL_UART_IRQHandler+0x2b0>)
9000c0be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
9000c0c0:	2b00      	cmp	r3, #0
9000c0c2:	d00b      	beq.n	9000c0dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000c0c4:	687b      	ldr	r3, [r7, #4]
9000c0c6:	681b      	ldr	r3, [r3, #0]
9000c0c8:	2208      	movs	r2, #8
9000c0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
9000c0cc:	687b      	ldr	r3, [r7, #4]
9000c0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000c0d2:	f043 0208 	orr.w	r2, r3, #8
9000c0d6:	687b      	ldr	r3, [r7, #4]
9000c0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
9000c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c0e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000c0e4:	2b00      	cmp	r3, #0
9000c0e6:	d012      	beq.n	9000c10e <HAL_UART_IRQHandler+0x196>
9000c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c0ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
9000c0f0:	2b00      	cmp	r3, #0
9000c0f2:	d00c      	beq.n	9000c10e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000c0f4:	687b      	ldr	r3, [r7, #4]
9000c0f6:	681b      	ldr	r3, [r3, #0]
9000c0f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000c0fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
9000c0fe:	687b      	ldr	r3, [r7, #4]
9000c100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000c104:	f043 0220 	orr.w	r2, r3, #32
9000c108:	687b      	ldr	r3, [r7, #4]
9000c10a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000c10e:	687b      	ldr	r3, [r7, #4]
9000c110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000c114:	2b00      	cmp	r3, #0
9000c116:	f000 82c0 	beq.w	9000c69a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
9000c11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c11e:	f003 0320 	and.w	r3, r3, #32
9000c122:	2b00      	cmp	r3, #0
9000c124:	d013      	beq.n	9000c14e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
9000c126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c12a:	f003 0320 	and.w	r3, r3, #32
9000c12e:	2b00      	cmp	r3, #0
9000c130:	d105      	bne.n	9000c13e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
9000c132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
9000c136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000c13a:	2b00      	cmp	r3, #0
9000c13c:	d007      	beq.n	9000c14e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
9000c13e:	687b      	ldr	r3, [r7, #4]
9000c140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000c142:	2b00      	cmp	r3, #0
9000c144:	d003      	beq.n	9000c14e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
9000c146:	687b      	ldr	r3, [r7, #4]
9000c148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000c14a:	6878      	ldr	r0, [r7, #4]
9000c14c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
9000c14e:	687b      	ldr	r3, [r7, #4]
9000c150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000c154:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000c158:	687b      	ldr	r3, [r7, #4]
9000c15a:	681b      	ldr	r3, [r3, #0]
9000c15c:	689b      	ldr	r3, [r3, #8]
9000c15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000c162:	2b40      	cmp	r3, #64	; 0x40
9000c164:	d005      	beq.n	9000c172 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
9000c166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
9000c16a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000c16e:	2b00      	cmp	r3, #0
9000c170:	d04f      	beq.n	9000c212 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
9000c172:	6878      	ldr	r0, [r7, #4]
9000c174:	f001 fad0 	bl	9000d718 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c178:	687b      	ldr	r3, [r7, #4]
9000c17a:	681b      	ldr	r3, [r3, #0]
9000c17c:	689b      	ldr	r3, [r3, #8]
9000c17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000c182:	2b40      	cmp	r3, #64	; 0x40
9000c184:	d141      	bne.n	9000c20a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
9000c186:	687b      	ldr	r3, [r7, #4]
9000c188:	681b      	ldr	r3, [r3, #0]
9000c18a:	3308      	adds	r3, #8
9000c18c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
9000c194:	e853 3f00 	ldrex	r3, [r3]
9000c198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
9000c19c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
9000c1a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
9000c1a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
9000c1a8:	687b      	ldr	r3, [r7, #4]
9000c1aa:	681b      	ldr	r3, [r3, #0]
9000c1ac:	3308      	adds	r3, #8
9000c1ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
9000c1b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
9000c1b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c1ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
9000c1be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
9000c1c2:	e841 2300 	strex	r3, r2, [r1]
9000c1c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
9000c1ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
9000c1ce:	2b00      	cmp	r3, #0
9000c1d0:	d1d9      	bne.n	9000c186 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
9000c1d2:	687b      	ldr	r3, [r7, #4]
9000c1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c1d6:	2b00      	cmp	r3, #0
9000c1d8:	d013      	beq.n	9000c202 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
9000c1da:	687b      	ldr	r3, [r7, #4]
9000c1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c1de:	4a14      	ldr	r2, [pc, #80]	; (9000c230 <HAL_UART_IRQHandler+0x2b8>)
9000c1e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
9000c1e2:	687b      	ldr	r3, [r7, #4]
9000c1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c1e6:	4618      	mov	r0, r3
9000c1e8:	f7f8 ff1a 	bl	90005020 <HAL_DMA_Abort_IT>
9000c1ec:	4603      	mov	r3, r0
9000c1ee:	2b00      	cmp	r3, #0
9000c1f0:	d017      	beq.n	9000c222 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
9000c1f2:	687b      	ldr	r3, [r7, #4]
9000c1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000c1f8:	687a      	ldr	r2, [r7, #4]
9000c1fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
9000c1fc:	4610      	mov	r0, r2
9000c1fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c200:	e00f      	b.n	9000c222 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
9000c202:	6878      	ldr	r0, [r7, #4]
9000c204:	f000 fa6a 	bl	9000c6dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c208:	e00b      	b.n	9000c222 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
9000c20a:	6878      	ldr	r0, [r7, #4]
9000c20c:	f000 fa66 	bl	9000c6dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c210:	e007      	b.n	9000c222 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
9000c212:	6878      	ldr	r0, [r7, #4]
9000c214:	f000 fa62 	bl	9000c6dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
9000c218:	687b      	ldr	r3, [r7, #4]
9000c21a:	2200      	movs	r2, #0
9000c21c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
9000c220:	e23b      	b.n	9000c69a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c222:	bf00      	nop
    return;
9000c224:	e239      	b.n	9000c69a <HAL_UART_IRQHandler+0x722>
9000c226:	bf00      	nop
9000c228:	10000001 	.word	0x10000001
9000c22c:	04000120 	.word	0x04000120
9000c230:	9000d9bf 	.word	0x9000d9bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000c234:	687b      	ldr	r3, [r7, #4]
9000c236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000c238:	2b01      	cmp	r3, #1
9000c23a:	f040 81ce 	bne.w	9000c5da <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
9000c23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c242:	f003 0310 	and.w	r3, r3, #16
9000c246:	2b00      	cmp	r3, #0
9000c248:	f000 81c7 	beq.w	9000c5da <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
9000c24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c250:	f003 0310 	and.w	r3, r3, #16
9000c254:	2b00      	cmp	r3, #0
9000c256:	f000 81c0 	beq.w	9000c5da <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000c25a:	687b      	ldr	r3, [r7, #4]
9000c25c:	681b      	ldr	r3, [r3, #0]
9000c25e:	2210      	movs	r2, #16
9000c260:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000c262:	687b      	ldr	r3, [r7, #4]
9000c264:	681b      	ldr	r3, [r3, #0]
9000c266:	689b      	ldr	r3, [r3, #8]
9000c268:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000c26c:	2b40      	cmp	r3, #64	; 0x40
9000c26e:	f040 813b 	bne.w	9000c4e8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
9000c272:	687b      	ldr	r3, [r7, #4]
9000c274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c276:	681b      	ldr	r3, [r3, #0]
9000c278:	4a8b      	ldr	r2, [pc, #556]	; (9000c4a8 <HAL_UART_IRQHandler+0x530>)
9000c27a:	4293      	cmp	r3, r2
9000c27c:	d059      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c27e:	687b      	ldr	r3, [r7, #4]
9000c280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c282:	681b      	ldr	r3, [r3, #0]
9000c284:	4a89      	ldr	r2, [pc, #548]	; (9000c4ac <HAL_UART_IRQHandler+0x534>)
9000c286:	4293      	cmp	r3, r2
9000c288:	d053      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c28a:	687b      	ldr	r3, [r7, #4]
9000c28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c28e:	681b      	ldr	r3, [r3, #0]
9000c290:	4a87      	ldr	r2, [pc, #540]	; (9000c4b0 <HAL_UART_IRQHandler+0x538>)
9000c292:	4293      	cmp	r3, r2
9000c294:	d04d      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c296:	687b      	ldr	r3, [r7, #4]
9000c298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c29a:	681b      	ldr	r3, [r3, #0]
9000c29c:	4a85      	ldr	r2, [pc, #532]	; (9000c4b4 <HAL_UART_IRQHandler+0x53c>)
9000c29e:	4293      	cmp	r3, r2
9000c2a0:	d047      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c2a2:	687b      	ldr	r3, [r7, #4]
9000c2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c2a6:	681b      	ldr	r3, [r3, #0]
9000c2a8:	4a83      	ldr	r2, [pc, #524]	; (9000c4b8 <HAL_UART_IRQHandler+0x540>)
9000c2aa:	4293      	cmp	r3, r2
9000c2ac:	d041      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c2ae:	687b      	ldr	r3, [r7, #4]
9000c2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c2b2:	681b      	ldr	r3, [r3, #0]
9000c2b4:	4a81      	ldr	r2, [pc, #516]	; (9000c4bc <HAL_UART_IRQHandler+0x544>)
9000c2b6:	4293      	cmp	r3, r2
9000c2b8:	d03b      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c2ba:	687b      	ldr	r3, [r7, #4]
9000c2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c2be:	681b      	ldr	r3, [r3, #0]
9000c2c0:	4a7f      	ldr	r2, [pc, #508]	; (9000c4c0 <HAL_UART_IRQHandler+0x548>)
9000c2c2:	4293      	cmp	r3, r2
9000c2c4:	d035      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c2c6:	687b      	ldr	r3, [r7, #4]
9000c2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c2ca:	681b      	ldr	r3, [r3, #0]
9000c2cc:	4a7d      	ldr	r2, [pc, #500]	; (9000c4c4 <HAL_UART_IRQHandler+0x54c>)
9000c2ce:	4293      	cmp	r3, r2
9000c2d0:	d02f      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c2d2:	687b      	ldr	r3, [r7, #4]
9000c2d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c2d6:	681b      	ldr	r3, [r3, #0]
9000c2d8:	4a7b      	ldr	r2, [pc, #492]	; (9000c4c8 <HAL_UART_IRQHandler+0x550>)
9000c2da:	4293      	cmp	r3, r2
9000c2dc:	d029      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c2de:	687b      	ldr	r3, [r7, #4]
9000c2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c2e2:	681b      	ldr	r3, [r3, #0]
9000c2e4:	4a79      	ldr	r2, [pc, #484]	; (9000c4cc <HAL_UART_IRQHandler+0x554>)
9000c2e6:	4293      	cmp	r3, r2
9000c2e8:	d023      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c2ea:	687b      	ldr	r3, [r7, #4]
9000c2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c2ee:	681b      	ldr	r3, [r3, #0]
9000c2f0:	4a77      	ldr	r2, [pc, #476]	; (9000c4d0 <HAL_UART_IRQHandler+0x558>)
9000c2f2:	4293      	cmp	r3, r2
9000c2f4:	d01d      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c2f6:	687b      	ldr	r3, [r7, #4]
9000c2f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c2fa:	681b      	ldr	r3, [r3, #0]
9000c2fc:	4a75      	ldr	r2, [pc, #468]	; (9000c4d4 <HAL_UART_IRQHandler+0x55c>)
9000c2fe:	4293      	cmp	r3, r2
9000c300:	d017      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c302:	687b      	ldr	r3, [r7, #4]
9000c304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c306:	681b      	ldr	r3, [r3, #0]
9000c308:	4a73      	ldr	r2, [pc, #460]	; (9000c4d8 <HAL_UART_IRQHandler+0x560>)
9000c30a:	4293      	cmp	r3, r2
9000c30c:	d011      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c30e:	687b      	ldr	r3, [r7, #4]
9000c310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c312:	681b      	ldr	r3, [r3, #0]
9000c314:	4a71      	ldr	r2, [pc, #452]	; (9000c4dc <HAL_UART_IRQHandler+0x564>)
9000c316:	4293      	cmp	r3, r2
9000c318:	d00b      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c31a:	687b      	ldr	r3, [r7, #4]
9000c31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c31e:	681b      	ldr	r3, [r3, #0]
9000c320:	4a6f      	ldr	r2, [pc, #444]	; (9000c4e0 <HAL_UART_IRQHandler+0x568>)
9000c322:	4293      	cmp	r3, r2
9000c324:	d005      	beq.n	9000c332 <HAL_UART_IRQHandler+0x3ba>
9000c326:	687b      	ldr	r3, [r7, #4]
9000c328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c32a:	681b      	ldr	r3, [r3, #0]
9000c32c:	4a6d      	ldr	r2, [pc, #436]	; (9000c4e4 <HAL_UART_IRQHandler+0x56c>)
9000c32e:	4293      	cmp	r3, r2
9000c330:	d105      	bne.n	9000c33e <HAL_UART_IRQHandler+0x3c6>
9000c332:	687b      	ldr	r3, [r7, #4]
9000c334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c336:	681b      	ldr	r3, [r3, #0]
9000c338:	685b      	ldr	r3, [r3, #4]
9000c33a:	b29b      	uxth	r3, r3
9000c33c:	e004      	b.n	9000c348 <HAL_UART_IRQHandler+0x3d0>
9000c33e:	687b      	ldr	r3, [r7, #4]
9000c340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c342:	681b      	ldr	r3, [r3, #0]
9000c344:	685b      	ldr	r3, [r3, #4]
9000c346:	b29b      	uxth	r3, r3
9000c348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
9000c34c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
9000c350:	2b00      	cmp	r3, #0
9000c352:	f000 81a4 	beq.w	9000c69e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
9000c356:	687b      	ldr	r3, [r7, #4]
9000c358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
9000c35c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
9000c360:	429a      	cmp	r2, r3
9000c362:	f080 819c 	bcs.w	9000c69e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
9000c366:	687b      	ldr	r3, [r7, #4]
9000c368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
9000c36c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
9000c370:	687b      	ldr	r3, [r7, #4]
9000c372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c374:	69db      	ldr	r3, [r3, #28]
9000c376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000c37a:	f000 8086 	beq.w	9000c48a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000c37e:	687b      	ldr	r3, [r7, #4]
9000c380:	681b      	ldr	r3, [r3, #0]
9000c382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
9000c38a:	e853 3f00 	ldrex	r3, [r3]
9000c38e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
9000c392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
9000c396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
9000c39a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000c39e:	687b      	ldr	r3, [r7, #4]
9000c3a0:	681b      	ldr	r3, [r3, #0]
9000c3a2:	461a      	mov	r2, r3
9000c3a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000c3a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
9000c3ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c3b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
9000c3b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
9000c3b8:	e841 2300 	strex	r3, r2, [r1]
9000c3bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
9000c3c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
9000c3c4:	2b00      	cmp	r3, #0
9000c3c6:	d1da      	bne.n	9000c37e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000c3c8:	687b      	ldr	r3, [r7, #4]
9000c3ca:	681b      	ldr	r3, [r3, #0]
9000c3cc:	3308      	adds	r3, #8
9000c3ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c3d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
9000c3d2:	e853 3f00 	ldrex	r3, [r3]
9000c3d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
9000c3d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000c3da:	f023 0301 	bic.w	r3, r3, #1
9000c3de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
9000c3e2:	687b      	ldr	r3, [r7, #4]
9000c3e4:	681b      	ldr	r3, [r3, #0]
9000c3e6:	3308      	adds	r3, #8
9000c3e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
9000c3ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
9000c3f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c3f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
9000c3f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
9000c3f8:	e841 2300 	strex	r3, r2, [r1]
9000c3fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
9000c3fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000c400:	2b00      	cmp	r3, #0
9000c402:	d1e1      	bne.n	9000c3c8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
9000c404:	687b      	ldr	r3, [r7, #4]
9000c406:	681b      	ldr	r3, [r3, #0]
9000c408:	3308      	adds	r3, #8
9000c40a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c40c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
9000c40e:	e853 3f00 	ldrex	r3, [r3]
9000c412:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
9000c414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000c416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
9000c41a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
9000c41e:	687b      	ldr	r3, [r7, #4]
9000c420:	681b      	ldr	r3, [r3, #0]
9000c422:	3308      	adds	r3, #8
9000c424:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
9000c428:	66fa      	str	r2, [r7, #108]	; 0x6c
9000c42a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c42c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
9000c42e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
9000c430:	e841 2300 	strex	r3, r2, [r1]
9000c434:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
9000c436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000c438:	2b00      	cmp	r3, #0
9000c43a:	d1e3      	bne.n	9000c404 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
9000c43c:	687b      	ldr	r3, [r7, #4]
9000c43e:	2220      	movs	r2, #32
9000c440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c444:	687b      	ldr	r3, [r7, #4]
9000c446:	2200      	movs	r2, #0
9000c448:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c44a:	687b      	ldr	r3, [r7, #4]
9000c44c:	681b      	ldr	r3, [r3, #0]
9000c44e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000c452:	e853 3f00 	ldrex	r3, [r3]
9000c456:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
9000c458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000c45a:	f023 0310 	bic.w	r3, r3, #16
9000c45e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
9000c462:	687b      	ldr	r3, [r7, #4]
9000c464:	681b      	ldr	r3, [r3, #0]
9000c466:	461a      	mov	r2, r3
9000c468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000c46c:	65bb      	str	r3, [r7, #88]	; 0x58
9000c46e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c470:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c472:	6dba      	ldr	r2, [r7, #88]	; 0x58
9000c474:	e841 2300 	strex	r3, r2, [r1]
9000c478:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
9000c47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000c47c:	2b00      	cmp	r3, #0
9000c47e:	d1e4      	bne.n	9000c44a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
9000c480:	687b      	ldr	r3, [r7, #4]
9000c482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c484:	4618      	mov	r0, r3
9000c486:	f7f8 faad 	bl	900049e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
9000c48a:	687b      	ldr	r3, [r7, #4]
9000c48c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
9000c490:	687b      	ldr	r3, [r7, #4]
9000c492:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
9000c496:	b29b      	uxth	r3, r3
9000c498:	1ad3      	subs	r3, r2, r3
9000c49a:	b29b      	uxth	r3, r3
9000c49c:	4619      	mov	r1, r3
9000c49e:	6878      	ldr	r0, [r7, #4]
9000c4a0:	f000 f926 	bl	9000c6f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
9000c4a4:	e0fb      	b.n	9000c69e <HAL_UART_IRQHandler+0x726>
9000c4a6:	bf00      	nop
9000c4a8:	40020010 	.word	0x40020010
9000c4ac:	40020028 	.word	0x40020028
9000c4b0:	40020040 	.word	0x40020040
9000c4b4:	40020058 	.word	0x40020058
9000c4b8:	40020070 	.word	0x40020070
9000c4bc:	40020088 	.word	0x40020088
9000c4c0:	400200a0 	.word	0x400200a0
9000c4c4:	400200b8 	.word	0x400200b8
9000c4c8:	40020410 	.word	0x40020410
9000c4cc:	40020428 	.word	0x40020428
9000c4d0:	40020440 	.word	0x40020440
9000c4d4:	40020458 	.word	0x40020458
9000c4d8:	40020470 	.word	0x40020470
9000c4dc:	40020488 	.word	0x40020488
9000c4e0:	400204a0 	.word	0x400204a0
9000c4e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
9000c4e8:	687b      	ldr	r3, [r7, #4]
9000c4ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
9000c4ee:	687b      	ldr	r3, [r7, #4]
9000c4f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
9000c4f4:	b29b      	uxth	r3, r3
9000c4f6:	1ad3      	subs	r3, r2, r3
9000c4f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
9000c4fc:	687b      	ldr	r3, [r7, #4]
9000c4fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
9000c502:	b29b      	uxth	r3, r3
9000c504:	2b00      	cmp	r3, #0
9000c506:	f000 80cc 	beq.w	9000c6a2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
9000c50a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
9000c50e:	2b00      	cmp	r3, #0
9000c510:	f000 80c7 	beq.w	9000c6a2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000c514:	687b      	ldr	r3, [r7, #4]
9000c516:	681b      	ldr	r3, [r3, #0]
9000c518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000c51c:	e853 3f00 	ldrex	r3, [r3]
9000c520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
9000c522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000c524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
9000c528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
9000c52c:	687b      	ldr	r3, [r7, #4]
9000c52e:	681b      	ldr	r3, [r3, #0]
9000c530:	461a      	mov	r2, r3
9000c532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
9000c536:	647b      	str	r3, [r7, #68]	; 0x44
9000c538:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c53a:	6c39      	ldr	r1, [r7, #64]	; 0x40
9000c53c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000c53e:	e841 2300 	strex	r3, r2, [r1]
9000c542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
9000c544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000c546:	2b00      	cmp	r3, #0
9000c548:	d1e4      	bne.n	9000c514 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000c54a:	687b      	ldr	r3, [r7, #4]
9000c54c:	681b      	ldr	r3, [r3, #0]
9000c54e:	3308      	adds	r3, #8
9000c550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000c554:	e853 3f00 	ldrex	r3, [r3]
9000c558:	623b      	str	r3, [r7, #32]
   return(result);
9000c55a:	6a3a      	ldr	r2, [r7, #32]
9000c55c:	4b54      	ldr	r3, [pc, #336]	; (9000c6b0 <HAL_UART_IRQHandler+0x738>)
9000c55e:	4013      	ands	r3, r2
9000c560:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
9000c564:	687b      	ldr	r3, [r7, #4]
9000c566:	681b      	ldr	r3, [r3, #0]
9000c568:	3308      	adds	r3, #8
9000c56a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
9000c56e:	633a      	str	r2, [r7, #48]	; 0x30
9000c570:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000c574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000c576:	e841 2300 	strex	r3, r2, [r1]
9000c57a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
9000c57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000c57e:	2b00      	cmp	r3, #0
9000c580:	d1e3      	bne.n	9000c54a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
9000c582:	687b      	ldr	r3, [r7, #4]
9000c584:	2220      	movs	r2, #32
9000c586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000c58a:	687b      	ldr	r3, [r7, #4]
9000c58c:	2200      	movs	r2, #0
9000c58e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
9000c590:	687b      	ldr	r3, [r7, #4]
9000c592:	2200      	movs	r2, #0
9000c594:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000c596:	687b      	ldr	r3, [r7, #4]
9000c598:	681b      	ldr	r3, [r3, #0]
9000c59a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000c59c:	693b      	ldr	r3, [r7, #16]
9000c59e:	e853 3f00 	ldrex	r3, [r3]
9000c5a2:	60fb      	str	r3, [r7, #12]
   return(result);
9000c5a4:	68fb      	ldr	r3, [r7, #12]
9000c5a6:	f023 0310 	bic.w	r3, r3, #16
9000c5aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
9000c5ae:	687b      	ldr	r3, [r7, #4]
9000c5b0:	681b      	ldr	r3, [r3, #0]
9000c5b2:	461a      	mov	r2, r3
9000c5b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
9000c5b8:	61fb      	str	r3, [r7, #28]
9000c5ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000c5bc:	69b9      	ldr	r1, [r7, #24]
9000c5be:	69fa      	ldr	r2, [r7, #28]
9000c5c0:	e841 2300 	strex	r3, r2, [r1]
9000c5c4:	617b      	str	r3, [r7, #20]
   return(result);
9000c5c6:	697b      	ldr	r3, [r7, #20]
9000c5c8:	2b00      	cmp	r3, #0
9000c5ca:	d1e4      	bne.n	9000c596 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
9000c5cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
9000c5d0:	4619      	mov	r1, r3
9000c5d2:	6878      	ldr	r0, [r7, #4]
9000c5d4:	f000 f88c 	bl	9000c6f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
9000c5d8:	e063      	b.n	9000c6a2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
9000c5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c5de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
9000c5e2:	2b00      	cmp	r3, #0
9000c5e4:	d00e      	beq.n	9000c604 <HAL_UART_IRQHandler+0x68c>
9000c5e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
9000c5ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
9000c5ee:	2b00      	cmp	r3, #0
9000c5f0:	d008      	beq.n	9000c604 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
9000c5f2:	687b      	ldr	r3, [r7, #4]
9000c5f4:	681b      	ldr	r3, [r3, #0]
9000c5f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
9000c5fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
9000c5fc:	6878      	ldr	r0, [r7, #4]
9000c5fe:	f001 fa1f 	bl	9000da40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
9000c602:	e051      	b.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
9000c604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c608:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000c60c:	2b00      	cmp	r3, #0
9000c60e:	d014      	beq.n	9000c63a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
9000c610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c614:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000c618:	2b00      	cmp	r3, #0
9000c61a:	d105      	bne.n	9000c628 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
9000c61c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
9000c620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000c624:	2b00      	cmp	r3, #0
9000c626:	d008      	beq.n	9000c63a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
9000c628:	687b      	ldr	r3, [r7, #4]
9000c62a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000c62c:	2b00      	cmp	r3, #0
9000c62e:	d03a      	beq.n	9000c6a6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
9000c630:	687b      	ldr	r3, [r7, #4]
9000c632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000c634:	6878      	ldr	r0, [r7, #4]
9000c636:	4798      	blx	r3
    }
    return;
9000c638:	e035      	b.n	9000c6a6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
9000c63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000c642:	2b00      	cmp	r3, #0
9000c644:	d009      	beq.n	9000c65a <HAL_UART_IRQHandler+0x6e2>
9000c646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000c64e:	2b00      	cmp	r3, #0
9000c650:	d003      	beq.n	9000c65a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
9000c652:	6878      	ldr	r0, [r7, #4]
9000c654:	f001 f9c9 	bl	9000d9ea <UART_EndTransmit_IT>
    return;
9000c658:	e026      	b.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
9000c65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c65e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000c662:	2b00      	cmp	r3, #0
9000c664:	d009      	beq.n	9000c67a <HAL_UART_IRQHandler+0x702>
9000c666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c66a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
9000c66e:	2b00      	cmp	r3, #0
9000c670:	d003      	beq.n	9000c67a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
9000c672:	6878      	ldr	r0, [r7, #4]
9000c674:	f001 f9f8 	bl	9000da68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
9000c678:	e016      	b.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
9000c67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
9000c67e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000c682:	2b00      	cmp	r3, #0
9000c684:	d010      	beq.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
9000c686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
9000c68a:	2b00      	cmp	r3, #0
9000c68c:	da0c      	bge.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
9000c68e:	6878      	ldr	r0, [r7, #4]
9000c690:	f001 f9e0 	bl	9000da54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
9000c694:	e008      	b.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
      return;
9000c696:	bf00      	nop
9000c698:	e006      	b.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
    return;
9000c69a:	bf00      	nop
9000c69c:	e004      	b.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
      return;
9000c69e:	bf00      	nop
9000c6a0:	e002      	b.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
      return;
9000c6a2:	bf00      	nop
9000c6a4:	e000      	b.n	9000c6a8 <HAL_UART_IRQHandler+0x730>
    return;
9000c6a6:	bf00      	nop
  }
}
9000c6a8:	37e8      	adds	r7, #232	; 0xe8
9000c6aa:	46bd      	mov	sp, r7
9000c6ac:	bd80      	pop	{r7, pc}
9000c6ae:	bf00      	nop
9000c6b0:	effffffe 	.word	0xeffffffe

9000c6b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
9000c6b4:	b480      	push	{r7}
9000c6b6:	b083      	sub	sp, #12
9000c6b8:	af00      	add	r7, sp, #0
9000c6ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
9000c6bc:	bf00      	nop
9000c6be:	370c      	adds	r7, #12
9000c6c0:	46bd      	mov	sp, r7
9000c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c6c6:	4770      	bx	lr

9000c6c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
9000c6c8:	b480      	push	{r7}
9000c6ca:	b083      	sub	sp, #12
9000c6cc:	af00      	add	r7, sp, #0
9000c6ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
9000c6d0:	bf00      	nop
9000c6d2:	370c      	adds	r7, #12
9000c6d4:	46bd      	mov	sp, r7
9000c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c6da:	4770      	bx	lr

9000c6dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
9000c6dc:	b480      	push	{r7}
9000c6de:	b083      	sub	sp, #12
9000c6e0:	af00      	add	r7, sp, #0
9000c6e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
9000c6e4:	bf00      	nop
9000c6e6:	370c      	adds	r7, #12
9000c6e8:	46bd      	mov	sp, r7
9000c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c6ee:	4770      	bx	lr

9000c6f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
9000c6f0:	b480      	push	{r7}
9000c6f2:	b083      	sub	sp, #12
9000c6f4:	af00      	add	r7, sp, #0
9000c6f6:	6078      	str	r0, [r7, #4]
9000c6f8:	460b      	mov	r3, r1
9000c6fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
9000c6fc:	bf00      	nop
9000c6fe:	370c      	adds	r7, #12
9000c700:	46bd      	mov	sp, r7
9000c702:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c706:	4770      	bx	lr

9000c708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
9000c708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
9000c70c:	b092      	sub	sp, #72	; 0x48
9000c70e:	af00      	add	r7, sp, #0
9000c710:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
9000c712:	2300      	movs	r3, #0
9000c714:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000c718:	697b      	ldr	r3, [r7, #20]
9000c71a:	689a      	ldr	r2, [r3, #8]
9000c71c:	697b      	ldr	r3, [r7, #20]
9000c71e:	691b      	ldr	r3, [r3, #16]
9000c720:	431a      	orrs	r2, r3
9000c722:	697b      	ldr	r3, [r7, #20]
9000c724:	695b      	ldr	r3, [r3, #20]
9000c726:	431a      	orrs	r2, r3
9000c728:	697b      	ldr	r3, [r7, #20]
9000c72a:	69db      	ldr	r3, [r3, #28]
9000c72c:	4313      	orrs	r3, r2
9000c72e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000c730:	697b      	ldr	r3, [r7, #20]
9000c732:	681b      	ldr	r3, [r3, #0]
9000c734:	681a      	ldr	r2, [r3, #0]
9000c736:	4bbe      	ldr	r3, [pc, #760]	; (9000ca30 <UART_SetConfig+0x328>)
9000c738:	4013      	ands	r3, r2
9000c73a:	697a      	ldr	r2, [r7, #20]
9000c73c:	6812      	ldr	r2, [r2, #0]
9000c73e:	6c79      	ldr	r1, [r7, #68]	; 0x44
9000c740:	430b      	orrs	r3, r1
9000c742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000c744:	697b      	ldr	r3, [r7, #20]
9000c746:	681b      	ldr	r3, [r3, #0]
9000c748:	685b      	ldr	r3, [r3, #4]
9000c74a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
9000c74e:	697b      	ldr	r3, [r7, #20]
9000c750:	68da      	ldr	r2, [r3, #12]
9000c752:	697b      	ldr	r3, [r7, #20]
9000c754:	681b      	ldr	r3, [r3, #0]
9000c756:	430a      	orrs	r2, r1
9000c758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000c75a:	697b      	ldr	r3, [r7, #20]
9000c75c:	699b      	ldr	r3, [r3, #24]
9000c75e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000c760:	697b      	ldr	r3, [r7, #20]
9000c762:	681b      	ldr	r3, [r3, #0]
9000c764:	4ab3      	ldr	r2, [pc, #716]	; (9000ca34 <UART_SetConfig+0x32c>)
9000c766:	4293      	cmp	r3, r2
9000c768:	d004      	beq.n	9000c774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
9000c76a:	697b      	ldr	r3, [r7, #20]
9000c76c:	6a1b      	ldr	r3, [r3, #32]
9000c76e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000c770:	4313      	orrs	r3, r2
9000c772:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000c774:	697b      	ldr	r3, [r7, #20]
9000c776:	681b      	ldr	r3, [r3, #0]
9000c778:	689a      	ldr	r2, [r3, #8]
9000c77a:	4baf      	ldr	r3, [pc, #700]	; (9000ca38 <UART_SetConfig+0x330>)
9000c77c:	4013      	ands	r3, r2
9000c77e:	697a      	ldr	r2, [r7, #20]
9000c780:	6812      	ldr	r2, [r2, #0]
9000c782:	6c79      	ldr	r1, [r7, #68]	; 0x44
9000c784:	430b      	orrs	r3, r1
9000c786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000c788:	697b      	ldr	r3, [r7, #20]
9000c78a:	681b      	ldr	r3, [r3, #0]
9000c78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000c78e:	f023 010f 	bic.w	r1, r3, #15
9000c792:	697b      	ldr	r3, [r7, #20]
9000c794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000c796:	697b      	ldr	r3, [r7, #20]
9000c798:	681b      	ldr	r3, [r3, #0]
9000c79a:	430a      	orrs	r2, r1
9000c79c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000c79e:	697b      	ldr	r3, [r7, #20]
9000c7a0:	681b      	ldr	r3, [r3, #0]
9000c7a2:	4aa6      	ldr	r2, [pc, #664]	; (9000ca3c <UART_SetConfig+0x334>)
9000c7a4:	4293      	cmp	r3, r2
9000c7a6:	d177      	bne.n	9000c898 <UART_SetConfig+0x190>
9000c7a8:	4ba5      	ldr	r3, [pc, #660]	; (9000ca40 <UART_SetConfig+0x338>)
9000c7aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000c7ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000c7b0:	2b28      	cmp	r3, #40	; 0x28
9000c7b2:	d86d      	bhi.n	9000c890 <UART_SetConfig+0x188>
9000c7b4:	a201      	add	r2, pc, #4	; (adr r2, 9000c7bc <UART_SetConfig+0xb4>)
9000c7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000c7ba:	bf00      	nop
9000c7bc:	9000c861 	.word	0x9000c861
9000c7c0:	9000c891 	.word	0x9000c891
9000c7c4:	9000c891 	.word	0x9000c891
9000c7c8:	9000c891 	.word	0x9000c891
9000c7cc:	9000c891 	.word	0x9000c891
9000c7d0:	9000c891 	.word	0x9000c891
9000c7d4:	9000c891 	.word	0x9000c891
9000c7d8:	9000c891 	.word	0x9000c891
9000c7dc:	9000c869 	.word	0x9000c869
9000c7e0:	9000c891 	.word	0x9000c891
9000c7e4:	9000c891 	.word	0x9000c891
9000c7e8:	9000c891 	.word	0x9000c891
9000c7ec:	9000c891 	.word	0x9000c891
9000c7f0:	9000c891 	.word	0x9000c891
9000c7f4:	9000c891 	.word	0x9000c891
9000c7f8:	9000c891 	.word	0x9000c891
9000c7fc:	9000c871 	.word	0x9000c871
9000c800:	9000c891 	.word	0x9000c891
9000c804:	9000c891 	.word	0x9000c891
9000c808:	9000c891 	.word	0x9000c891
9000c80c:	9000c891 	.word	0x9000c891
9000c810:	9000c891 	.word	0x9000c891
9000c814:	9000c891 	.word	0x9000c891
9000c818:	9000c891 	.word	0x9000c891
9000c81c:	9000c879 	.word	0x9000c879
9000c820:	9000c891 	.word	0x9000c891
9000c824:	9000c891 	.word	0x9000c891
9000c828:	9000c891 	.word	0x9000c891
9000c82c:	9000c891 	.word	0x9000c891
9000c830:	9000c891 	.word	0x9000c891
9000c834:	9000c891 	.word	0x9000c891
9000c838:	9000c891 	.word	0x9000c891
9000c83c:	9000c881 	.word	0x9000c881
9000c840:	9000c891 	.word	0x9000c891
9000c844:	9000c891 	.word	0x9000c891
9000c848:	9000c891 	.word	0x9000c891
9000c84c:	9000c891 	.word	0x9000c891
9000c850:	9000c891 	.word	0x9000c891
9000c854:	9000c891 	.word	0x9000c891
9000c858:	9000c891 	.word	0x9000c891
9000c85c:	9000c889 	.word	0x9000c889
9000c860:	2301      	movs	r3, #1
9000c862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c866:	e222      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c868:	2304      	movs	r3, #4
9000c86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c86e:	e21e      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c870:	2308      	movs	r3, #8
9000c872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c876:	e21a      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c878:	2310      	movs	r3, #16
9000c87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c87e:	e216      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c880:	2320      	movs	r3, #32
9000c882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c886:	e212      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c888:	2340      	movs	r3, #64	; 0x40
9000c88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c88e:	e20e      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c890:	2380      	movs	r3, #128	; 0x80
9000c892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c896:	e20a      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c898:	697b      	ldr	r3, [r7, #20]
9000c89a:	681b      	ldr	r3, [r3, #0]
9000c89c:	4a69      	ldr	r2, [pc, #420]	; (9000ca44 <UART_SetConfig+0x33c>)
9000c89e:	4293      	cmp	r3, r2
9000c8a0:	d130      	bne.n	9000c904 <UART_SetConfig+0x1fc>
9000c8a2:	4b67      	ldr	r3, [pc, #412]	; (9000ca40 <UART_SetConfig+0x338>)
9000c8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000c8a6:	f003 0307 	and.w	r3, r3, #7
9000c8aa:	2b05      	cmp	r3, #5
9000c8ac:	d826      	bhi.n	9000c8fc <UART_SetConfig+0x1f4>
9000c8ae:	a201      	add	r2, pc, #4	; (adr r2, 9000c8b4 <UART_SetConfig+0x1ac>)
9000c8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000c8b4:	9000c8cd 	.word	0x9000c8cd
9000c8b8:	9000c8d5 	.word	0x9000c8d5
9000c8bc:	9000c8dd 	.word	0x9000c8dd
9000c8c0:	9000c8e5 	.word	0x9000c8e5
9000c8c4:	9000c8ed 	.word	0x9000c8ed
9000c8c8:	9000c8f5 	.word	0x9000c8f5
9000c8cc:	2300      	movs	r3, #0
9000c8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c8d2:	e1ec      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c8d4:	2304      	movs	r3, #4
9000c8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c8da:	e1e8      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c8dc:	2308      	movs	r3, #8
9000c8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c8e2:	e1e4      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c8e4:	2310      	movs	r3, #16
9000c8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c8ea:	e1e0      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c8ec:	2320      	movs	r3, #32
9000c8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c8f2:	e1dc      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c8f4:	2340      	movs	r3, #64	; 0x40
9000c8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c8fa:	e1d8      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c8fc:	2380      	movs	r3, #128	; 0x80
9000c8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c902:	e1d4      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c904:	697b      	ldr	r3, [r7, #20]
9000c906:	681b      	ldr	r3, [r3, #0]
9000c908:	4a4f      	ldr	r2, [pc, #316]	; (9000ca48 <UART_SetConfig+0x340>)
9000c90a:	4293      	cmp	r3, r2
9000c90c:	d130      	bne.n	9000c970 <UART_SetConfig+0x268>
9000c90e:	4b4c      	ldr	r3, [pc, #304]	; (9000ca40 <UART_SetConfig+0x338>)
9000c910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000c912:	f003 0307 	and.w	r3, r3, #7
9000c916:	2b05      	cmp	r3, #5
9000c918:	d826      	bhi.n	9000c968 <UART_SetConfig+0x260>
9000c91a:	a201      	add	r2, pc, #4	; (adr r2, 9000c920 <UART_SetConfig+0x218>)
9000c91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000c920:	9000c939 	.word	0x9000c939
9000c924:	9000c941 	.word	0x9000c941
9000c928:	9000c949 	.word	0x9000c949
9000c92c:	9000c951 	.word	0x9000c951
9000c930:	9000c959 	.word	0x9000c959
9000c934:	9000c961 	.word	0x9000c961
9000c938:	2300      	movs	r3, #0
9000c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c93e:	e1b6      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c940:	2304      	movs	r3, #4
9000c942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c946:	e1b2      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c948:	2308      	movs	r3, #8
9000c94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c94e:	e1ae      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c950:	2310      	movs	r3, #16
9000c952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c956:	e1aa      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c958:	2320      	movs	r3, #32
9000c95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c95e:	e1a6      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c960:	2340      	movs	r3, #64	; 0x40
9000c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c966:	e1a2      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c968:	2380      	movs	r3, #128	; 0x80
9000c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c96e:	e19e      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c970:	697b      	ldr	r3, [r7, #20]
9000c972:	681b      	ldr	r3, [r3, #0]
9000c974:	4a35      	ldr	r2, [pc, #212]	; (9000ca4c <UART_SetConfig+0x344>)
9000c976:	4293      	cmp	r3, r2
9000c978:	d130      	bne.n	9000c9dc <UART_SetConfig+0x2d4>
9000c97a:	4b31      	ldr	r3, [pc, #196]	; (9000ca40 <UART_SetConfig+0x338>)
9000c97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000c97e:	f003 0307 	and.w	r3, r3, #7
9000c982:	2b05      	cmp	r3, #5
9000c984:	d826      	bhi.n	9000c9d4 <UART_SetConfig+0x2cc>
9000c986:	a201      	add	r2, pc, #4	; (adr r2, 9000c98c <UART_SetConfig+0x284>)
9000c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000c98c:	9000c9a5 	.word	0x9000c9a5
9000c990:	9000c9ad 	.word	0x9000c9ad
9000c994:	9000c9b5 	.word	0x9000c9b5
9000c998:	9000c9bd 	.word	0x9000c9bd
9000c99c:	9000c9c5 	.word	0x9000c9c5
9000c9a0:	9000c9cd 	.word	0x9000c9cd
9000c9a4:	2300      	movs	r3, #0
9000c9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c9aa:	e180      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c9ac:	2304      	movs	r3, #4
9000c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c9b2:	e17c      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c9b4:	2308      	movs	r3, #8
9000c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c9ba:	e178      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c9bc:	2310      	movs	r3, #16
9000c9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c9c2:	e174      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c9c4:	2320      	movs	r3, #32
9000c9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c9ca:	e170      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c9cc:	2340      	movs	r3, #64	; 0x40
9000c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c9d2:	e16c      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c9d4:	2380      	movs	r3, #128	; 0x80
9000c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000c9da:	e168      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000c9dc:	697b      	ldr	r3, [r7, #20]
9000c9de:	681b      	ldr	r3, [r3, #0]
9000c9e0:	4a1b      	ldr	r2, [pc, #108]	; (9000ca50 <UART_SetConfig+0x348>)
9000c9e2:	4293      	cmp	r3, r2
9000c9e4:	d142      	bne.n	9000ca6c <UART_SetConfig+0x364>
9000c9e6:	4b16      	ldr	r3, [pc, #88]	; (9000ca40 <UART_SetConfig+0x338>)
9000c9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000c9ea:	f003 0307 	and.w	r3, r3, #7
9000c9ee:	2b05      	cmp	r3, #5
9000c9f0:	d838      	bhi.n	9000ca64 <UART_SetConfig+0x35c>
9000c9f2:	a201      	add	r2, pc, #4	; (adr r2, 9000c9f8 <UART_SetConfig+0x2f0>)
9000c9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000c9f8:	9000ca11 	.word	0x9000ca11
9000c9fc:	9000ca19 	.word	0x9000ca19
9000ca00:	9000ca21 	.word	0x9000ca21
9000ca04:	9000ca29 	.word	0x9000ca29
9000ca08:	9000ca55 	.word	0x9000ca55
9000ca0c:	9000ca5d 	.word	0x9000ca5d
9000ca10:	2300      	movs	r3, #0
9000ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000ca16:	e14a      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000ca18:	2304      	movs	r3, #4
9000ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000ca1e:	e146      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000ca20:	2308      	movs	r3, #8
9000ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000ca26:	e142      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000ca28:	2310      	movs	r3, #16
9000ca2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000ca2e:	e13e      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000ca30:	cfff69f3 	.word	0xcfff69f3
9000ca34:	58000c00 	.word	0x58000c00
9000ca38:	11fff4ff 	.word	0x11fff4ff
9000ca3c:	40011000 	.word	0x40011000
9000ca40:	58024400 	.word	0x58024400
9000ca44:	40004400 	.word	0x40004400
9000ca48:	40004800 	.word	0x40004800
9000ca4c:	40004c00 	.word	0x40004c00
9000ca50:	40005000 	.word	0x40005000
9000ca54:	2320      	movs	r3, #32
9000ca56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000ca5a:	e128      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000ca5c:	2340      	movs	r3, #64	; 0x40
9000ca5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000ca62:	e124      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000ca64:	2380      	movs	r3, #128	; 0x80
9000ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000ca6a:	e120      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000ca6c:	697b      	ldr	r3, [r7, #20]
9000ca6e:	681b      	ldr	r3, [r3, #0]
9000ca70:	4acb      	ldr	r2, [pc, #812]	; (9000cda0 <UART_SetConfig+0x698>)
9000ca72:	4293      	cmp	r3, r2
9000ca74:	d176      	bne.n	9000cb64 <UART_SetConfig+0x45c>
9000ca76:	4bcb      	ldr	r3, [pc, #812]	; (9000cda4 <UART_SetConfig+0x69c>)
9000ca78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000ca7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ca7e:	2b28      	cmp	r3, #40	; 0x28
9000ca80:	d86c      	bhi.n	9000cb5c <UART_SetConfig+0x454>
9000ca82:	a201      	add	r2, pc, #4	; (adr r2, 9000ca88 <UART_SetConfig+0x380>)
9000ca84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ca88:	9000cb2d 	.word	0x9000cb2d
9000ca8c:	9000cb5d 	.word	0x9000cb5d
9000ca90:	9000cb5d 	.word	0x9000cb5d
9000ca94:	9000cb5d 	.word	0x9000cb5d
9000ca98:	9000cb5d 	.word	0x9000cb5d
9000ca9c:	9000cb5d 	.word	0x9000cb5d
9000caa0:	9000cb5d 	.word	0x9000cb5d
9000caa4:	9000cb5d 	.word	0x9000cb5d
9000caa8:	9000cb35 	.word	0x9000cb35
9000caac:	9000cb5d 	.word	0x9000cb5d
9000cab0:	9000cb5d 	.word	0x9000cb5d
9000cab4:	9000cb5d 	.word	0x9000cb5d
9000cab8:	9000cb5d 	.word	0x9000cb5d
9000cabc:	9000cb5d 	.word	0x9000cb5d
9000cac0:	9000cb5d 	.word	0x9000cb5d
9000cac4:	9000cb5d 	.word	0x9000cb5d
9000cac8:	9000cb3d 	.word	0x9000cb3d
9000cacc:	9000cb5d 	.word	0x9000cb5d
9000cad0:	9000cb5d 	.word	0x9000cb5d
9000cad4:	9000cb5d 	.word	0x9000cb5d
9000cad8:	9000cb5d 	.word	0x9000cb5d
9000cadc:	9000cb5d 	.word	0x9000cb5d
9000cae0:	9000cb5d 	.word	0x9000cb5d
9000cae4:	9000cb5d 	.word	0x9000cb5d
9000cae8:	9000cb45 	.word	0x9000cb45
9000caec:	9000cb5d 	.word	0x9000cb5d
9000caf0:	9000cb5d 	.word	0x9000cb5d
9000caf4:	9000cb5d 	.word	0x9000cb5d
9000caf8:	9000cb5d 	.word	0x9000cb5d
9000cafc:	9000cb5d 	.word	0x9000cb5d
9000cb00:	9000cb5d 	.word	0x9000cb5d
9000cb04:	9000cb5d 	.word	0x9000cb5d
9000cb08:	9000cb4d 	.word	0x9000cb4d
9000cb0c:	9000cb5d 	.word	0x9000cb5d
9000cb10:	9000cb5d 	.word	0x9000cb5d
9000cb14:	9000cb5d 	.word	0x9000cb5d
9000cb18:	9000cb5d 	.word	0x9000cb5d
9000cb1c:	9000cb5d 	.word	0x9000cb5d
9000cb20:	9000cb5d 	.word	0x9000cb5d
9000cb24:	9000cb5d 	.word	0x9000cb5d
9000cb28:	9000cb55 	.word	0x9000cb55
9000cb2c:	2301      	movs	r3, #1
9000cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cb32:	e0bc      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cb34:	2304      	movs	r3, #4
9000cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cb3a:	e0b8      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cb3c:	2308      	movs	r3, #8
9000cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cb42:	e0b4      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cb44:	2310      	movs	r3, #16
9000cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cb4a:	e0b0      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cb4c:	2320      	movs	r3, #32
9000cb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cb52:	e0ac      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cb54:	2340      	movs	r3, #64	; 0x40
9000cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cb5a:	e0a8      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cb5c:	2380      	movs	r3, #128	; 0x80
9000cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cb62:	e0a4      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cb64:	697b      	ldr	r3, [r7, #20]
9000cb66:	681b      	ldr	r3, [r3, #0]
9000cb68:	4a8f      	ldr	r2, [pc, #572]	; (9000cda8 <UART_SetConfig+0x6a0>)
9000cb6a:	4293      	cmp	r3, r2
9000cb6c:	d130      	bne.n	9000cbd0 <UART_SetConfig+0x4c8>
9000cb6e:	4b8d      	ldr	r3, [pc, #564]	; (9000cda4 <UART_SetConfig+0x69c>)
9000cb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000cb72:	f003 0307 	and.w	r3, r3, #7
9000cb76:	2b05      	cmp	r3, #5
9000cb78:	d826      	bhi.n	9000cbc8 <UART_SetConfig+0x4c0>
9000cb7a:	a201      	add	r2, pc, #4	; (adr r2, 9000cb80 <UART_SetConfig+0x478>)
9000cb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cb80:	9000cb99 	.word	0x9000cb99
9000cb84:	9000cba1 	.word	0x9000cba1
9000cb88:	9000cba9 	.word	0x9000cba9
9000cb8c:	9000cbb1 	.word	0x9000cbb1
9000cb90:	9000cbb9 	.word	0x9000cbb9
9000cb94:	9000cbc1 	.word	0x9000cbc1
9000cb98:	2300      	movs	r3, #0
9000cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cb9e:	e086      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cba0:	2304      	movs	r3, #4
9000cba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cba6:	e082      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cba8:	2308      	movs	r3, #8
9000cbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cbae:	e07e      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cbb0:	2310      	movs	r3, #16
9000cbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cbb6:	e07a      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cbb8:	2320      	movs	r3, #32
9000cbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cbbe:	e076      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cbc0:	2340      	movs	r3, #64	; 0x40
9000cbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cbc6:	e072      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cbc8:	2380      	movs	r3, #128	; 0x80
9000cbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cbce:	e06e      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cbd0:	697b      	ldr	r3, [r7, #20]
9000cbd2:	681b      	ldr	r3, [r3, #0]
9000cbd4:	4a75      	ldr	r2, [pc, #468]	; (9000cdac <UART_SetConfig+0x6a4>)
9000cbd6:	4293      	cmp	r3, r2
9000cbd8:	d130      	bne.n	9000cc3c <UART_SetConfig+0x534>
9000cbda:	4b72      	ldr	r3, [pc, #456]	; (9000cda4 <UART_SetConfig+0x69c>)
9000cbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000cbde:	f003 0307 	and.w	r3, r3, #7
9000cbe2:	2b05      	cmp	r3, #5
9000cbe4:	d826      	bhi.n	9000cc34 <UART_SetConfig+0x52c>
9000cbe6:	a201      	add	r2, pc, #4	; (adr r2, 9000cbec <UART_SetConfig+0x4e4>)
9000cbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cbec:	9000cc05 	.word	0x9000cc05
9000cbf0:	9000cc0d 	.word	0x9000cc0d
9000cbf4:	9000cc15 	.word	0x9000cc15
9000cbf8:	9000cc1d 	.word	0x9000cc1d
9000cbfc:	9000cc25 	.word	0x9000cc25
9000cc00:	9000cc2d 	.word	0x9000cc2d
9000cc04:	2300      	movs	r3, #0
9000cc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc0a:	e050      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc0c:	2304      	movs	r3, #4
9000cc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc12:	e04c      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc14:	2308      	movs	r3, #8
9000cc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc1a:	e048      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc1c:	2310      	movs	r3, #16
9000cc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc22:	e044      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc24:	2320      	movs	r3, #32
9000cc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc2a:	e040      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc2c:	2340      	movs	r3, #64	; 0x40
9000cc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc32:	e03c      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc34:	2380      	movs	r3, #128	; 0x80
9000cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc3a:	e038      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc3c:	697b      	ldr	r3, [r7, #20]
9000cc3e:	681b      	ldr	r3, [r3, #0]
9000cc40:	4a5b      	ldr	r2, [pc, #364]	; (9000cdb0 <UART_SetConfig+0x6a8>)
9000cc42:	4293      	cmp	r3, r2
9000cc44:	d130      	bne.n	9000cca8 <UART_SetConfig+0x5a0>
9000cc46:	4b57      	ldr	r3, [pc, #348]	; (9000cda4 <UART_SetConfig+0x69c>)
9000cc48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000cc4a:	f003 0307 	and.w	r3, r3, #7
9000cc4e:	2b05      	cmp	r3, #5
9000cc50:	d826      	bhi.n	9000cca0 <UART_SetConfig+0x598>
9000cc52:	a201      	add	r2, pc, #4	; (adr r2, 9000cc58 <UART_SetConfig+0x550>)
9000cc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cc58:	9000cc71 	.word	0x9000cc71
9000cc5c:	9000cc79 	.word	0x9000cc79
9000cc60:	9000cc81 	.word	0x9000cc81
9000cc64:	9000cc89 	.word	0x9000cc89
9000cc68:	9000cc91 	.word	0x9000cc91
9000cc6c:	9000cc99 	.word	0x9000cc99
9000cc70:	2302      	movs	r3, #2
9000cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc76:	e01a      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc78:	2304      	movs	r3, #4
9000cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc7e:	e016      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc80:	2308      	movs	r3, #8
9000cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc86:	e012      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc88:	2310      	movs	r3, #16
9000cc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc8e:	e00e      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc90:	2320      	movs	r3, #32
9000cc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc96:	e00a      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cc98:	2340      	movs	r3, #64	; 0x40
9000cc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cc9e:	e006      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cca0:	2380      	movs	r3, #128	; 0x80
9000cca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000cca6:	e002      	b.n	9000ccae <UART_SetConfig+0x5a6>
9000cca8:	2380      	movs	r3, #128	; 0x80
9000ccaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000ccae:	697b      	ldr	r3, [r7, #20]
9000ccb0:	681b      	ldr	r3, [r3, #0]
9000ccb2:	4a3f      	ldr	r2, [pc, #252]	; (9000cdb0 <UART_SetConfig+0x6a8>)
9000ccb4:	4293      	cmp	r3, r2
9000ccb6:	f040 80f8 	bne.w	9000ceaa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
9000ccba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
9000ccbe:	2b20      	cmp	r3, #32
9000ccc0:	dc46      	bgt.n	9000cd50 <UART_SetConfig+0x648>
9000ccc2:	2b02      	cmp	r3, #2
9000ccc4:	f2c0 8082 	blt.w	9000cdcc <UART_SetConfig+0x6c4>
9000ccc8:	3b02      	subs	r3, #2
9000ccca:	2b1e      	cmp	r3, #30
9000cccc:	d87e      	bhi.n	9000cdcc <UART_SetConfig+0x6c4>
9000ccce:	a201      	add	r2, pc, #4	; (adr r2, 9000ccd4 <UART_SetConfig+0x5cc>)
9000ccd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ccd4:	9000cd57 	.word	0x9000cd57
9000ccd8:	9000cdcd 	.word	0x9000cdcd
9000ccdc:	9000cd5f 	.word	0x9000cd5f
9000cce0:	9000cdcd 	.word	0x9000cdcd
9000cce4:	9000cdcd 	.word	0x9000cdcd
9000cce8:	9000cdcd 	.word	0x9000cdcd
9000ccec:	9000cd6f 	.word	0x9000cd6f
9000ccf0:	9000cdcd 	.word	0x9000cdcd
9000ccf4:	9000cdcd 	.word	0x9000cdcd
9000ccf8:	9000cdcd 	.word	0x9000cdcd
9000ccfc:	9000cdcd 	.word	0x9000cdcd
9000cd00:	9000cdcd 	.word	0x9000cdcd
9000cd04:	9000cdcd 	.word	0x9000cdcd
9000cd08:	9000cdcd 	.word	0x9000cdcd
9000cd0c:	9000cd7f 	.word	0x9000cd7f
9000cd10:	9000cdcd 	.word	0x9000cdcd
9000cd14:	9000cdcd 	.word	0x9000cdcd
9000cd18:	9000cdcd 	.word	0x9000cdcd
9000cd1c:	9000cdcd 	.word	0x9000cdcd
9000cd20:	9000cdcd 	.word	0x9000cdcd
9000cd24:	9000cdcd 	.word	0x9000cdcd
9000cd28:	9000cdcd 	.word	0x9000cdcd
9000cd2c:	9000cdcd 	.word	0x9000cdcd
9000cd30:	9000cdcd 	.word	0x9000cdcd
9000cd34:	9000cdcd 	.word	0x9000cdcd
9000cd38:	9000cdcd 	.word	0x9000cdcd
9000cd3c:	9000cdcd 	.word	0x9000cdcd
9000cd40:	9000cdcd 	.word	0x9000cdcd
9000cd44:	9000cdcd 	.word	0x9000cdcd
9000cd48:	9000cdcd 	.word	0x9000cdcd
9000cd4c:	9000cdbf 	.word	0x9000cdbf
9000cd50:	2b40      	cmp	r3, #64	; 0x40
9000cd52:	d037      	beq.n	9000cdc4 <UART_SetConfig+0x6bc>
9000cd54:	e03a      	b.n	9000cdcc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9000cd56:	f7fd f973 	bl	9000a040 <HAL_RCCEx_GetD3PCLK1Freq>
9000cd5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
9000cd5c:	e03c      	b.n	9000cdd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cd5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000cd62:	4618      	mov	r0, r3
9000cd64:	f7fd f982 	bl	9000a06c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cd6c:	e034      	b.n	9000cdd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cd6e:	f107 0318 	add.w	r3, r7, #24
9000cd72:	4618      	mov	r0, r3
9000cd74:	f7fd face 	bl	9000a314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000cd78:	69fb      	ldr	r3, [r7, #28]
9000cd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cd7c:	e02c      	b.n	9000cdd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000cd7e:	4b09      	ldr	r3, [pc, #36]	; (9000cda4 <UART_SetConfig+0x69c>)
9000cd80:	681b      	ldr	r3, [r3, #0]
9000cd82:	f003 0320 	and.w	r3, r3, #32
9000cd86:	2b00      	cmp	r3, #0
9000cd88:	d016      	beq.n	9000cdb8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000cd8a:	4b06      	ldr	r3, [pc, #24]	; (9000cda4 <UART_SetConfig+0x69c>)
9000cd8c:	681b      	ldr	r3, [r3, #0]
9000cd8e:	08db      	lsrs	r3, r3, #3
9000cd90:	f003 0303 	and.w	r3, r3, #3
9000cd94:	4a07      	ldr	r2, [pc, #28]	; (9000cdb4 <UART_SetConfig+0x6ac>)
9000cd96:	fa22 f303 	lsr.w	r3, r2, r3
9000cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000cd9c:	e01c      	b.n	9000cdd8 <UART_SetConfig+0x6d0>
9000cd9e:	bf00      	nop
9000cda0:	40011400 	.word	0x40011400
9000cda4:	58024400 	.word	0x58024400
9000cda8:	40007800 	.word	0x40007800
9000cdac:	40007c00 	.word	0x40007c00
9000cdb0:	58000c00 	.word	0x58000c00
9000cdb4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
9000cdb8:	4b9d      	ldr	r3, [pc, #628]	; (9000d030 <UART_SetConfig+0x928>)
9000cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cdbc:	e00c      	b.n	9000cdd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000cdbe:	4b9d      	ldr	r3, [pc, #628]	; (9000d034 <UART_SetConfig+0x92c>)
9000cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cdc2:	e009      	b.n	9000cdd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000cdc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000cdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cdca:	e005      	b.n	9000cdd8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
9000cdcc:	2300      	movs	r3, #0
9000cdce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
9000cdd0:	2301      	movs	r3, #1
9000cdd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
9000cdd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
9000cdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000cdda:	2b00      	cmp	r3, #0
9000cddc:	f000 81de 	beq.w	9000d19c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9000cde0:	697b      	ldr	r3, [r7, #20]
9000cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000cde4:	4a94      	ldr	r2, [pc, #592]	; (9000d038 <UART_SetConfig+0x930>)
9000cde6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000cdea:	461a      	mov	r2, r3
9000cdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000cdee:	fbb3 f3f2 	udiv	r3, r3, r2
9000cdf2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000cdf4:	697b      	ldr	r3, [r7, #20]
9000cdf6:	685a      	ldr	r2, [r3, #4]
9000cdf8:	4613      	mov	r3, r2
9000cdfa:	005b      	lsls	r3, r3, #1
9000cdfc:	4413      	add	r3, r2
9000cdfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ce00:	429a      	cmp	r2, r3
9000ce02:	d305      	bcc.n	9000ce10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
9000ce04:	697b      	ldr	r3, [r7, #20]
9000ce06:	685b      	ldr	r3, [r3, #4]
9000ce08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9000ce0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ce0c:	429a      	cmp	r2, r3
9000ce0e:	d903      	bls.n	9000ce18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
9000ce10:	2301      	movs	r3, #1
9000ce12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
9000ce16:	e1c1      	b.n	9000d19c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000ce18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000ce1a:	2200      	movs	r2, #0
9000ce1c:	60bb      	str	r3, [r7, #8]
9000ce1e:	60fa      	str	r2, [r7, #12]
9000ce20:	697b      	ldr	r3, [r7, #20]
9000ce22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000ce24:	4a84      	ldr	r2, [pc, #528]	; (9000d038 <UART_SetConfig+0x930>)
9000ce26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000ce2a:	b29b      	uxth	r3, r3
9000ce2c:	2200      	movs	r2, #0
9000ce2e:	603b      	str	r3, [r7, #0]
9000ce30:	607a      	str	r2, [r7, #4]
9000ce32:	e9d7 2300 	ldrd	r2, r3, [r7]
9000ce36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
9000ce3a:	f7f3 faf9 	bl	90000430 <__aeabi_uldivmod>
9000ce3e:	4602      	mov	r2, r0
9000ce40:	460b      	mov	r3, r1
9000ce42:	4610      	mov	r0, r2
9000ce44:	4619      	mov	r1, r3
9000ce46:	f04f 0200 	mov.w	r2, #0
9000ce4a:	f04f 0300 	mov.w	r3, #0
9000ce4e:	020b      	lsls	r3, r1, #8
9000ce50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
9000ce54:	0202      	lsls	r2, r0, #8
9000ce56:	6979      	ldr	r1, [r7, #20]
9000ce58:	6849      	ldr	r1, [r1, #4]
9000ce5a:	0849      	lsrs	r1, r1, #1
9000ce5c:	2000      	movs	r0, #0
9000ce5e:	460c      	mov	r4, r1
9000ce60:	4605      	mov	r5, r0
9000ce62:	eb12 0804 	adds.w	r8, r2, r4
9000ce66:	eb43 0905 	adc.w	r9, r3, r5
9000ce6a:	697b      	ldr	r3, [r7, #20]
9000ce6c:	685b      	ldr	r3, [r3, #4]
9000ce6e:	2200      	movs	r2, #0
9000ce70:	469a      	mov	sl, r3
9000ce72:	4693      	mov	fp, r2
9000ce74:	4652      	mov	r2, sl
9000ce76:	465b      	mov	r3, fp
9000ce78:	4640      	mov	r0, r8
9000ce7a:	4649      	mov	r1, r9
9000ce7c:	f7f3 fad8 	bl	90000430 <__aeabi_uldivmod>
9000ce80:	4602      	mov	r2, r0
9000ce82:	460b      	mov	r3, r1
9000ce84:	4613      	mov	r3, r2
9000ce86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
9000ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ce8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9000ce8e:	d308      	bcc.n	9000cea2 <UART_SetConfig+0x79a>
9000ce90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ce92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
9000ce96:	d204      	bcs.n	9000cea2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
9000ce98:	697b      	ldr	r3, [r7, #20]
9000ce9a:	681b      	ldr	r3, [r3, #0]
9000ce9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000ce9e:	60da      	str	r2, [r3, #12]
9000cea0:	e17c      	b.n	9000d19c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000cea2:	2301      	movs	r3, #1
9000cea4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
9000cea8:	e178      	b.n	9000d19c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000ceaa:	697b      	ldr	r3, [r7, #20]
9000ceac:	69db      	ldr	r3, [r3, #28]
9000ceae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
9000ceb2:	f040 80c5 	bne.w	9000d040 <UART_SetConfig+0x938>
  {
    switch (clocksource)
9000ceb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
9000ceba:	2b20      	cmp	r3, #32
9000cebc:	dc48      	bgt.n	9000cf50 <UART_SetConfig+0x848>
9000cebe:	2b00      	cmp	r3, #0
9000cec0:	db7b      	blt.n	9000cfba <UART_SetConfig+0x8b2>
9000cec2:	2b20      	cmp	r3, #32
9000cec4:	d879      	bhi.n	9000cfba <UART_SetConfig+0x8b2>
9000cec6:	a201      	add	r2, pc, #4	; (adr r2, 9000cecc <UART_SetConfig+0x7c4>)
9000cec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cecc:	9000cf57 	.word	0x9000cf57
9000ced0:	9000cf5f 	.word	0x9000cf5f
9000ced4:	9000cfbb 	.word	0x9000cfbb
9000ced8:	9000cfbb 	.word	0x9000cfbb
9000cedc:	9000cf67 	.word	0x9000cf67
9000cee0:	9000cfbb 	.word	0x9000cfbb
9000cee4:	9000cfbb 	.word	0x9000cfbb
9000cee8:	9000cfbb 	.word	0x9000cfbb
9000ceec:	9000cf77 	.word	0x9000cf77
9000cef0:	9000cfbb 	.word	0x9000cfbb
9000cef4:	9000cfbb 	.word	0x9000cfbb
9000cef8:	9000cfbb 	.word	0x9000cfbb
9000cefc:	9000cfbb 	.word	0x9000cfbb
9000cf00:	9000cfbb 	.word	0x9000cfbb
9000cf04:	9000cfbb 	.word	0x9000cfbb
9000cf08:	9000cfbb 	.word	0x9000cfbb
9000cf0c:	9000cf87 	.word	0x9000cf87
9000cf10:	9000cfbb 	.word	0x9000cfbb
9000cf14:	9000cfbb 	.word	0x9000cfbb
9000cf18:	9000cfbb 	.word	0x9000cfbb
9000cf1c:	9000cfbb 	.word	0x9000cfbb
9000cf20:	9000cfbb 	.word	0x9000cfbb
9000cf24:	9000cfbb 	.word	0x9000cfbb
9000cf28:	9000cfbb 	.word	0x9000cfbb
9000cf2c:	9000cfbb 	.word	0x9000cfbb
9000cf30:	9000cfbb 	.word	0x9000cfbb
9000cf34:	9000cfbb 	.word	0x9000cfbb
9000cf38:	9000cfbb 	.word	0x9000cfbb
9000cf3c:	9000cfbb 	.word	0x9000cfbb
9000cf40:	9000cfbb 	.word	0x9000cfbb
9000cf44:	9000cfbb 	.word	0x9000cfbb
9000cf48:	9000cfbb 	.word	0x9000cfbb
9000cf4c:	9000cfad 	.word	0x9000cfad
9000cf50:	2b40      	cmp	r3, #64	; 0x40
9000cf52:	d02e      	beq.n	9000cfb2 <UART_SetConfig+0x8aa>
9000cf54:	e031      	b.n	9000cfba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000cf56:	f7fc f8bf 	bl	900090d8 <HAL_RCC_GetPCLK1Freq>
9000cf5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
9000cf5c:	e033      	b.n	9000cfc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000cf5e:	f7fc f8d1 	bl	90009104 <HAL_RCC_GetPCLK2Freq>
9000cf62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
9000cf64:	e02f      	b.n	9000cfc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cf66:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000cf6a:	4618      	mov	r0, r3
9000cf6c:	f7fd f87e 	bl	9000a06c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cf74:	e027      	b.n	9000cfc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cf76:	f107 0318 	add.w	r3, r7, #24
9000cf7a:	4618      	mov	r0, r3
9000cf7c:	f7fd f9ca 	bl	9000a314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000cf80:	69fb      	ldr	r3, [r7, #28]
9000cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cf84:	e01f      	b.n	9000cfc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000cf86:	4b2d      	ldr	r3, [pc, #180]	; (9000d03c <UART_SetConfig+0x934>)
9000cf88:	681b      	ldr	r3, [r3, #0]
9000cf8a:	f003 0320 	and.w	r3, r3, #32
9000cf8e:	2b00      	cmp	r3, #0
9000cf90:	d009      	beq.n	9000cfa6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000cf92:	4b2a      	ldr	r3, [pc, #168]	; (9000d03c <UART_SetConfig+0x934>)
9000cf94:	681b      	ldr	r3, [r3, #0]
9000cf96:	08db      	lsrs	r3, r3, #3
9000cf98:	f003 0303 	and.w	r3, r3, #3
9000cf9c:	4a24      	ldr	r2, [pc, #144]	; (9000d030 <UART_SetConfig+0x928>)
9000cf9e:	fa22 f303 	lsr.w	r3, r2, r3
9000cfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000cfa4:	e00f      	b.n	9000cfc6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
9000cfa6:	4b22      	ldr	r3, [pc, #136]	; (9000d030 <UART_SetConfig+0x928>)
9000cfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cfaa:	e00c      	b.n	9000cfc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000cfac:	4b21      	ldr	r3, [pc, #132]	; (9000d034 <UART_SetConfig+0x92c>)
9000cfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cfb0:	e009      	b.n	9000cfc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000cfb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000cfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000cfb8:	e005      	b.n	9000cfc6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
9000cfba:	2300      	movs	r3, #0
9000cfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
9000cfbe:	2301      	movs	r3, #1
9000cfc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
9000cfc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000cfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000cfc8:	2b00      	cmp	r3, #0
9000cfca:	f000 80e7 	beq.w	9000d19c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000cfce:	697b      	ldr	r3, [r7, #20]
9000cfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000cfd2:	4a19      	ldr	r2, [pc, #100]	; (9000d038 <UART_SetConfig+0x930>)
9000cfd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000cfd8:	461a      	mov	r2, r3
9000cfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000cfdc:	fbb3 f3f2 	udiv	r3, r3, r2
9000cfe0:	005a      	lsls	r2, r3, #1
9000cfe2:	697b      	ldr	r3, [r7, #20]
9000cfe4:	685b      	ldr	r3, [r3, #4]
9000cfe6:	085b      	lsrs	r3, r3, #1
9000cfe8:	441a      	add	r2, r3
9000cfea:	697b      	ldr	r3, [r7, #20]
9000cfec:	685b      	ldr	r3, [r3, #4]
9000cfee:	fbb2 f3f3 	udiv	r3, r2, r3
9000cff2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000cff6:	2b0f      	cmp	r3, #15
9000cff8:	d916      	bls.n	9000d028 <UART_SetConfig+0x920>
9000cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000cffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000d000:	d212      	bcs.n	9000d028 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9000d002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d004:	b29b      	uxth	r3, r3
9000d006:	f023 030f 	bic.w	r3, r3, #15
9000d00a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
9000d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d00e:	085b      	lsrs	r3, r3, #1
9000d010:	b29b      	uxth	r3, r3
9000d012:	f003 0307 	and.w	r3, r3, #7
9000d016:	b29a      	uxth	r2, r3
9000d018:	8efb      	ldrh	r3, [r7, #54]	; 0x36
9000d01a:	4313      	orrs	r3, r2
9000d01c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
9000d01e:	697b      	ldr	r3, [r7, #20]
9000d020:	681b      	ldr	r3, [r3, #0]
9000d022:	8efa      	ldrh	r2, [r7, #54]	; 0x36
9000d024:	60da      	str	r2, [r3, #12]
9000d026:	e0b9      	b.n	9000d19c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000d028:	2301      	movs	r3, #1
9000d02a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
9000d02e:	e0b5      	b.n	9000d19c <UART_SetConfig+0xa94>
9000d030:	03d09000 	.word	0x03d09000
9000d034:	003d0900 	.word	0x003d0900
9000d038:	90013f08 	.word	0x90013f08
9000d03c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000d040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
9000d044:	2b20      	cmp	r3, #32
9000d046:	dc49      	bgt.n	9000d0dc <UART_SetConfig+0x9d4>
9000d048:	2b00      	cmp	r3, #0
9000d04a:	db7c      	blt.n	9000d146 <UART_SetConfig+0xa3e>
9000d04c:	2b20      	cmp	r3, #32
9000d04e:	d87a      	bhi.n	9000d146 <UART_SetConfig+0xa3e>
9000d050:	a201      	add	r2, pc, #4	; (adr r2, 9000d058 <UART_SetConfig+0x950>)
9000d052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000d056:	bf00      	nop
9000d058:	9000d0e3 	.word	0x9000d0e3
9000d05c:	9000d0eb 	.word	0x9000d0eb
9000d060:	9000d147 	.word	0x9000d147
9000d064:	9000d147 	.word	0x9000d147
9000d068:	9000d0f3 	.word	0x9000d0f3
9000d06c:	9000d147 	.word	0x9000d147
9000d070:	9000d147 	.word	0x9000d147
9000d074:	9000d147 	.word	0x9000d147
9000d078:	9000d103 	.word	0x9000d103
9000d07c:	9000d147 	.word	0x9000d147
9000d080:	9000d147 	.word	0x9000d147
9000d084:	9000d147 	.word	0x9000d147
9000d088:	9000d147 	.word	0x9000d147
9000d08c:	9000d147 	.word	0x9000d147
9000d090:	9000d147 	.word	0x9000d147
9000d094:	9000d147 	.word	0x9000d147
9000d098:	9000d113 	.word	0x9000d113
9000d09c:	9000d147 	.word	0x9000d147
9000d0a0:	9000d147 	.word	0x9000d147
9000d0a4:	9000d147 	.word	0x9000d147
9000d0a8:	9000d147 	.word	0x9000d147
9000d0ac:	9000d147 	.word	0x9000d147
9000d0b0:	9000d147 	.word	0x9000d147
9000d0b4:	9000d147 	.word	0x9000d147
9000d0b8:	9000d147 	.word	0x9000d147
9000d0bc:	9000d147 	.word	0x9000d147
9000d0c0:	9000d147 	.word	0x9000d147
9000d0c4:	9000d147 	.word	0x9000d147
9000d0c8:	9000d147 	.word	0x9000d147
9000d0cc:	9000d147 	.word	0x9000d147
9000d0d0:	9000d147 	.word	0x9000d147
9000d0d4:	9000d147 	.word	0x9000d147
9000d0d8:	9000d139 	.word	0x9000d139
9000d0dc:	2b40      	cmp	r3, #64	; 0x40
9000d0de:	d02e      	beq.n	9000d13e <UART_SetConfig+0xa36>
9000d0e0:	e031      	b.n	9000d146 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000d0e2:	f7fb fff9 	bl	900090d8 <HAL_RCC_GetPCLK1Freq>
9000d0e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
9000d0e8:	e033      	b.n	9000d152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000d0ea:	f7fc f80b 	bl	90009104 <HAL_RCC_GetPCLK2Freq>
9000d0ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
9000d0f0:	e02f      	b.n	9000d152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000d0f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000d0f6:	4618      	mov	r0, r3
9000d0f8:	f7fc ffb8 	bl	9000a06c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000d100:	e027      	b.n	9000d152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000d102:	f107 0318 	add.w	r3, r7, #24
9000d106:	4618      	mov	r0, r3
9000d108:	f7fd f904 	bl	9000a314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000d10c:	69fb      	ldr	r3, [r7, #28]
9000d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000d110:	e01f      	b.n	9000d152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d112:	4b2d      	ldr	r3, [pc, #180]	; (9000d1c8 <UART_SetConfig+0xac0>)
9000d114:	681b      	ldr	r3, [r3, #0]
9000d116:	f003 0320 	and.w	r3, r3, #32
9000d11a:	2b00      	cmp	r3, #0
9000d11c:	d009      	beq.n	9000d132 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000d11e:	4b2a      	ldr	r3, [pc, #168]	; (9000d1c8 <UART_SetConfig+0xac0>)
9000d120:	681b      	ldr	r3, [r3, #0]
9000d122:	08db      	lsrs	r3, r3, #3
9000d124:	f003 0303 	and.w	r3, r3, #3
9000d128:	4a28      	ldr	r2, [pc, #160]	; (9000d1cc <UART_SetConfig+0xac4>)
9000d12a:	fa22 f303 	lsr.w	r3, r2, r3
9000d12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
9000d130:	e00f      	b.n	9000d152 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
9000d132:	4b26      	ldr	r3, [pc, #152]	; (9000d1cc <UART_SetConfig+0xac4>)
9000d134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000d136:	e00c      	b.n	9000d152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000d138:	4b25      	ldr	r3, [pc, #148]	; (9000d1d0 <UART_SetConfig+0xac8>)
9000d13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000d13c:	e009      	b.n	9000d152 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000d13e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000d142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000d144:	e005      	b.n	9000d152 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
9000d146:	2300      	movs	r3, #0
9000d148:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
9000d14a:	2301      	movs	r3, #1
9000d14c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
9000d150:	bf00      	nop
    }

    if (pclk != 0U)
9000d152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d154:	2b00      	cmp	r3, #0
9000d156:	d021      	beq.n	9000d19c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000d158:	697b      	ldr	r3, [r7, #20]
9000d15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000d15c:	4a1d      	ldr	r2, [pc, #116]	; (9000d1d4 <UART_SetConfig+0xacc>)
9000d15e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000d162:	461a      	mov	r2, r3
9000d164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d166:	fbb3 f2f2 	udiv	r2, r3, r2
9000d16a:	697b      	ldr	r3, [r7, #20]
9000d16c:	685b      	ldr	r3, [r3, #4]
9000d16e:	085b      	lsrs	r3, r3, #1
9000d170:	441a      	add	r2, r3
9000d172:	697b      	ldr	r3, [r7, #20]
9000d174:	685b      	ldr	r3, [r3, #4]
9000d176:	fbb2 f3f3 	udiv	r3, r2, r3
9000d17a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d17e:	2b0f      	cmp	r3, #15
9000d180:	d909      	bls.n	9000d196 <UART_SetConfig+0xa8e>
9000d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000d188:	d205      	bcs.n	9000d196 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000d18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d18c:	b29a      	uxth	r2, r3
9000d18e:	697b      	ldr	r3, [r7, #20]
9000d190:	681b      	ldr	r3, [r3, #0]
9000d192:	60da      	str	r2, [r3, #12]
9000d194:	e002      	b.n	9000d19c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
9000d196:	2301      	movs	r3, #1
9000d198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000d19c:	697b      	ldr	r3, [r7, #20]
9000d19e:	2201      	movs	r2, #1
9000d1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
9000d1a4:	697b      	ldr	r3, [r7, #20]
9000d1a6:	2201      	movs	r2, #1
9000d1a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000d1ac:	697b      	ldr	r3, [r7, #20]
9000d1ae:	2200      	movs	r2, #0
9000d1b0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
9000d1b2:	697b      	ldr	r3, [r7, #20]
9000d1b4:	2200      	movs	r2, #0
9000d1b6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
9000d1b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
9000d1bc:	4618      	mov	r0, r3
9000d1be:	3748      	adds	r7, #72	; 0x48
9000d1c0:	46bd      	mov	sp, r7
9000d1c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
9000d1c6:	bf00      	nop
9000d1c8:	58024400 	.word	0x58024400
9000d1cc:	03d09000 	.word	0x03d09000
9000d1d0:	003d0900 	.word	0x003d0900
9000d1d4:	90013f08 	.word	0x90013f08

9000d1d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
9000d1d8:	b480      	push	{r7}
9000d1da:	b083      	sub	sp, #12
9000d1dc:	af00      	add	r7, sp, #0
9000d1de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9000d1e0:	687b      	ldr	r3, [r7, #4]
9000d1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d1e4:	f003 0301 	and.w	r3, r3, #1
9000d1e8:	2b00      	cmp	r3, #0
9000d1ea:	d00a      	beq.n	9000d202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
9000d1ec:	687b      	ldr	r3, [r7, #4]
9000d1ee:	681b      	ldr	r3, [r3, #0]
9000d1f0:	685b      	ldr	r3, [r3, #4]
9000d1f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
9000d1f6:	687b      	ldr	r3, [r7, #4]
9000d1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000d1fa:	687b      	ldr	r3, [r7, #4]
9000d1fc:	681b      	ldr	r3, [r3, #0]
9000d1fe:	430a      	orrs	r2, r1
9000d200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
9000d202:	687b      	ldr	r3, [r7, #4]
9000d204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d206:	f003 0302 	and.w	r3, r3, #2
9000d20a:	2b00      	cmp	r3, #0
9000d20c:	d00a      	beq.n	9000d224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
9000d20e:	687b      	ldr	r3, [r7, #4]
9000d210:	681b      	ldr	r3, [r3, #0]
9000d212:	685b      	ldr	r3, [r3, #4]
9000d214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
9000d218:	687b      	ldr	r3, [r7, #4]
9000d21a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000d21c:	687b      	ldr	r3, [r7, #4]
9000d21e:	681b      	ldr	r3, [r3, #0]
9000d220:	430a      	orrs	r2, r1
9000d222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
9000d224:	687b      	ldr	r3, [r7, #4]
9000d226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d228:	f003 0304 	and.w	r3, r3, #4
9000d22c:	2b00      	cmp	r3, #0
9000d22e:	d00a      	beq.n	9000d246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
9000d230:	687b      	ldr	r3, [r7, #4]
9000d232:	681b      	ldr	r3, [r3, #0]
9000d234:	685b      	ldr	r3, [r3, #4]
9000d236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
9000d23a:	687b      	ldr	r3, [r7, #4]
9000d23c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000d23e:	687b      	ldr	r3, [r7, #4]
9000d240:	681b      	ldr	r3, [r3, #0]
9000d242:	430a      	orrs	r2, r1
9000d244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
9000d246:	687b      	ldr	r3, [r7, #4]
9000d248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d24a:	f003 0308 	and.w	r3, r3, #8
9000d24e:	2b00      	cmp	r3, #0
9000d250:	d00a      	beq.n	9000d268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000d252:	687b      	ldr	r3, [r7, #4]
9000d254:	681b      	ldr	r3, [r3, #0]
9000d256:	685b      	ldr	r3, [r3, #4]
9000d258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
9000d25c:	687b      	ldr	r3, [r7, #4]
9000d25e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000d260:	687b      	ldr	r3, [r7, #4]
9000d262:	681b      	ldr	r3, [r3, #0]
9000d264:	430a      	orrs	r2, r1
9000d266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
9000d268:	687b      	ldr	r3, [r7, #4]
9000d26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d26c:	f003 0310 	and.w	r3, r3, #16
9000d270:	2b00      	cmp	r3, #0
9000d272:	d00a      	beq.n	9000d28a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000d274:	687b      	ldr	r3, [r7, #4]
9000d276:	681b      	ldr	r3, [r3, #0]
9000d278:	689b      	ldr	r3, [r3, #8]
9000d27a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
9000d27e:	687b      	ldr	r3, [r7, #4]
9000d280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000d282:	687b      	ldr	r3, [r7, #4]
9000d284:	681b      	ldr	r3, [r3, #0]
9000d286:	430a      	orrs	r2, r1
9000d288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000d28a:	687b      	ldr	r3, [r7, #4]
9000d28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d28e:	f003 0320 	and.w	r3, r3, #32
9000d292:	2b00      	cmp	r3, #0
9000d294:	d00a      	beq.n	9000d2ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000d296:	687b      	ldr	r3, [r7, #4]
9000d298:	681b      	ldr	r3, [r3, #0]
9000d29a:	689b      	ldr	r3, [r3, #8]
9000d29c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
9000d2a0:	687b      	ldr	r3, [r7, #4]
9000d2a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000d2a4:	687b      	ldr	r3, [r7, #4]
9000d2a6:	681b      	ldr	r3, [r3, #0]
9000d2a8:	430a      	orrs	r2, r1
9000d2aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000d2ac:	687b      	ldr	r3, [r7, #4]
9000d2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000d2b4:	2b00      	cmp	r3, #0
9000d2b6:	d01a      	beq.n	9000d2ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000d2b8:	687b      	ldr	r3, [r7, #4]
9000d2ba:	681b      	ldr	r3, [r3, #0]
9000d2bc:	685b      	ldr	r3, [r3, #4]
9000d2be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
9000d2c2:	687b      	ldr	r3, [r7, #4]
9000d2c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000d2c6:	687b      	ldr	r3, [r7, #4]
9000d2c8:	681b      	ldr	r3, [r3, #0]
9000d2ca:	430a      	orrs	r2, r1
9000d2cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000d2ce:	687b      	ldr	r3, [r7, #4]
9000d2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000d2d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
9000d2d6:	d10a      	bne.n	9000d2ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
9000d2d8:	687b      	ldr	r3, [r7, #4]
9000d2da:	681b      	ldr	r3, [r3, #0]
9000d2dc:	685b      	ldr	r3, [r3, #4]
9000d2de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
9000d2e2:	687b      	ldr	r3, [r7, #4]
9000d2e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
9000d2e6:	687b      	ldr	r3, [r7, #4]
9000d2e8:	681b      	ldr	r3, [r3, #0]
9000d2ea:	430a      	orrs	r2, r1
9000d2ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
9000d2ee:	687b      	ldr	r3, [r7, #4]
9000d2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000d2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000d2f6:	2b00      	cmp	r3, #0
9000d2f8:	d00a      	beq.n	9000d310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
9000d2fa:	687b      	ldr	r3, [r7, #4]
9000d2fc:	681b      	ldr	r3, [r3, #0]
9000d2fe:	685b      	ldr	r3, [r3, #4]
9000d300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
9000d304:	687b      	ldr	r3, [r7, #4]
9000d306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
9000d308:	687b      	ldr	r3, [r7, #4]
9000d30a:	681b      	ldr	r3, [r3, #0]
9000d30c:	430a      	orrs	r2, r1
9000d30e:	605a      	str	r2, [r3, #4]
  }
}
9000d310:	bf00      	nop
9000d312:	370c      	adds	r7, #12
9000d314:	46bd      	mov	sp, r7
9000d316:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d31a:	4770      	bx	lr

9000d31c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
9000d31c:	b580      	push	{r7, lr}
9000d31e:	b086      	sub	sp, #24
9000d320:	af02      	add	r7, sp, #8
9000d322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000d324:	687b      	ldr	r3, [r7, #4]
9000d326:	2200      	movs	r2, #0
9000d328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
9000d32c:	f7f6 fc20 	bl	90003b70 <HAL_GetTick>
9000d330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
9000d332:	687b      	ldr	r3, [r7, #4]
9000d334:	681b      	ldr	r3, [r3, #0]
9000d336:	681b      	ldr	r3, [r3, #0]
9000d338:	f003 0308 	and.w	r3, r3, #8
9000d33c:	2b08      	cmp	r3, #8
9000d33e:	d10e      	bne.n	9000d35e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000d340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
9000d344:	9300      	str	r3, [sp, #0]
9000d346:	68fb      	ldr	r3, [r7, #12]
9000d348:	2200      	movs	r2, #0
9000d34a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
9000d34e:	6878      	ldr	r0, [r7, #4]
9000d350:	f000 f82f 	bl	9000d3b2 <UART_WaitOnFlagUntilTimeout>
9000d354:	4603      	mov	r3, r0
9000d356:	2b00      	cmp	r3, #0
9000d358:	d001      	beq.n	9000d35e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
9000d35a:	2303      	movs	r3, #3
9000d35c:	e025      	b.n	9000d3aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000d35e:	687b      	ldr	r3, [r7, #4]
9000d360:	681b      	ldr	r3, [r3, #0]
9000d362:	681b      	ldr	r3, [r3, #0]
9000d364:	f003 0304 	and.w	r3, r3, #4
9000d368:	2b04      	cmp	r3, #4
9000d36a:	d10e      	bne.n	9000d38a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000d36c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
9000d370:	9300      	str	r3, [sp, #0]
9000d372:	68fb      	ldr	r3, [r7, #12]
9000d374:	2200      	movs	r2, #0
9000d376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
9000d37a:	6878      	ldr	r0, [r7, #4]
9000d37c:	f000 f819 	bl	9000d3b2 <UART_WaitOnFlagUntilTimeout>
9000d380:	4603      	mov	r3, r0
9000d382:	2b00      	cmp	r3, #0
9000d384:	d001      	beq.n	9000d38a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
9000d386:	2303      	movs	r3, #3
9000d388:	e00f      	b.n	9000d3aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000d38a:	687b      	ldr	r3, [r7, #4]
9000d38c:	2220      	movs	r2, #32
9000d38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
9000d392:	687b      	ldr	r3, [r7, #4]
9000d394:	2220      	movs	r2, #32
9000d396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d39a:	687b      	ldr	r3, [r7, #4]
9000d39c:	2200      	movs	r2, #0
9000d39e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
9000d3a0:	687b      	ldr	r3, [r7, #4]
9000d3a2:	2200      	movs	r2, #0
9000d3a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
9000d3a8:	2300      	movs	r3, #0
}
9000d3aa:	4618      	mov	r0, r3
9000d3ac:	3710      	adds	r7, #16
9000d3ae:	46bd      	mov	sp, r7
9000d3b0:	bd80      	pop	{r7, pc}

9000d3b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
9000d3b2:	b580      	push	{r7, lr}
9000d3b4:	b09c      	sub	sp, #112	; 0x70
9000d3b6:	af00      	add	r7, sp, #0
9000d3b8:	60f8      	str	r0, [r7, #12]
9000d3ba:	60b9      	str	r1, [r7, #8]
9000d3bc:	603b      	str	r3, [r7, #0]
9000d3be:	4613      	mov	r3, r2
9000d3c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000d3c2:	e0a9      	b.n	9000d518 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
9000d3c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
9000d3ca:	f000 80a5 	beq.w	9000d518 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000d3ce:	f7f6 fbcf 	bl	90003b70 <HAL_GetTick>
9000d3d2:	4602      	mov	r2, r0
9000d3d4:	683b      	ldr	r3, [r7, #0]
9000d3d6:	1ad3      	subs	r3, r2, r3
9000d3d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
9000d3da:	429a      	cmp	r2, r3
9000d3dc:	d302      	bcc.n	9000d3e4 <UART_WaitOnFlagUntilTimeout+0x32>
9000d3de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
9000d3e0:	2b00      	cmp	r3, #0
9000d3e2:	d140      	bne.n	9000d466 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
9000d3e4:	68fb      	ldr	r3, [r7, #12]
9000d3e6:	681b      	ldr	r3, [r3, #0]
9000d3e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000d3ec:	e853 3f00 	ldrex	r3, [r3]
9000d3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
9000d3f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d3f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
9000d3f8:	667b      	str	r3, [r7, #100]	; 0x64
9000d3fa:	68fb      	ldr	r3, [r7, #12]
9000d3fc:	681b      	ldr	r3, [r3, #0]
9000d3fe:	461a      	mov	r2, r3
9000d400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
9000d402:	65fb      	str	r3, [r7, #92]	; 0x5c
9000d404:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d406:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000d408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
9000d40a:	e841 2300 	strex	r3, r2, [r1]
9000d40e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
9000d410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000d412:	2b00      	cmp	r3, #0
9000d414:	d1e6      	bne.n	9000d3e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000d416:	68fb      	ldr	r3, [r7, #12]
9000d418:	681b      	ldr	r3, [r3, #0]
9000d41a:	3308      	adds	r3, #8
9000d41c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d420:	e853 3f00 	ldrex	r3, [r3]
9000d424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
9000d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d428:	f023 0301 	bic.w	r3, r3, #1
9000d42c:	663b      	str	r3, [r7, #96]	; 0x60
9000d42e:	68fb      	ldr	r3, [r7, #12]
9000d430:	681b      	ldr	r3, [r3, #0]
9000d432:	3308      	adds	r3, #8
9000d434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
9000d436:	64ba      	str	r2, [r7, #72]	; 0x48
9000d438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d43a:	6c79      	ldr	r1, [r7, #68]	; 0x44
9000d43c:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000d43e:	e841 2300 	strex	r3, r2, [r1]
9000d442:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
9000d444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d446:	2b00      	cmp	r3, #0
9000d448:	d1e5      	bne.n	9000d416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
9000d44a:	68fb      	ldr	r3, [r7, #12]
9000d44c:	2220      	movs	r2, #32
9000d44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
9000d452:	68fb      	ldr	r3, [r7, #12]
9000d454:	2220      	movs	r2, #32
9000d456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
9000d45a:	68fb      	ldr	r3, [r7, #12]
9000d45c:	2200      	movs	r2, #0
9000d45e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
9000d462:	2303      	movs	r3, #3
9000d464:	e069      	b.n	9000d53a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9000d466:	68fb      	ldr	r3, [r7, #12]
9000d468:	681b      	ldr	r3, [r3, #0]
9000d46a:	681b      	ldr	r3, [r3, #0]
9000d46c:	f003 0304 	and.w	r3, r3, #4
9000d470:	2b00      	cmp	r3, #0
9000d472:	d051      	beq.n	9000d518 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000d474:	68fb      	ldr	r3, [r7, #12]
9000d476:	681b      	ldr	r3, [r3, #0]
9000d478:	69db      	ldr	r3, [r3, #28]
9000d47a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000d47e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9000d482:	d149      	bne.n	9000d518 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000d484:	68fb      	ldr	r3, [r7, #12]
9000d486:	681b      	ldr	r3, [r3, #0]
9000d488:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000d48c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
9000d48e:	68fb      	ldr	r3, [r7, #12]
9000d490:	681b      	ldr	r3, [r3, #0]
9000d492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d496:	e853 3f00 	ldrex	r3, [r3]
9000d49a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
9000d49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000d49e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
9000d4a2:	66fb      	str	r3, [r7, #108]	; 0x6c
9000d4a4:	68fb      	ldr	r3, [r7, #12]
9000d4a6:	681b      	ldr	r3, [r3, #0]
9000d4a8:	461a      	mov	r2, r3
9000d4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d4ac:	637b      	str	r3, [r7, #52]	; 0x34
9000d4ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d4b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
9000d4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000d4b4:	e841 2300 	strex	r3, r2, [r1]
9000d4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
9000d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d4bc:	2b00      	cmp	r3, #0
9000d4be:	d1e6      	bne.n	9000d48e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000d4c0:	68fb      	ldr	r3, [r7, #12]
9000d4c2:	681b      	ldr	r3, [r3, #0]
9000d4c4:	3308      	adds	r3, #8
9000d4c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d4c8:	697b      	ldr	r3, [r7, #20]
9000d4ca:	e853 3f00 	ldrex	r3, [r3]
9000d4ce:	613b      	str	r3, [r7, #16]
   return(result);
9000d4d0:	693b      	ldr	r3, [r7, #16]
9000d4d2:	f023 0301 	bic.w	r3, r3, #1
9000d4d6:	66bb      	str	r3, [r7, #104]	; 0x68
9000d4d8:	68fb      	ldr	r3, [r7, #12]
9000d4da:	681b      	ldr	r3, [r3, #0]
9000d4dc:	3308      	adds	r3, #8
9000d4de:	6eba      	ldr	r2, [r7, #104]	; 0x68
9000d4e0:	623a      	str	r2, [r7, #32]
9000d4e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d4e4:	69f9      	ldr	r1, [r7, #28]
9000d4e6:	6a3a      	ldr	r2, [r7, #32]
9000d4e8:	e841 2300 	strex	r3, r2, [r1]
9000d4ec:	61bb      	str	r3, [r7, #24]
   return(result);
9000d4ee:	69bb      	ldr	r3, [r7, #24]
9000d4f0:	2b00      	cmp	r3, #0
9000d4f2:	d1e5      	bne.n	9000d4c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
9000d4f4:	68fb      	ldr	r3, [r7, #12]
9000d4f6:	2220      	movs	r2, #32
9000d4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
9000d4fc:	68fb      	ldr	r3, [r7, #12]
9000d4fe:	2220      	movs	r2, #32
9000d500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000d504:	68fb      	ldr	r3, [r7, #12]
9000d506:	2220      	movs	r2, #32
9000d508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
9000d50c:	68fb      	ldr	r3, [r7, #12]
9000d50e:	2200      	movs	r2, #0
9000d510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
9000d514:	2303      	movs	r3, #3
9000d516:	e010      	b.n	9000d53a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000d518:	68fb      	ldr	r3, [r7, #12]
9000d51a:	681b      	ldr	r3, [r3, #0]
9000d51c:	69da      	ldr	r2, [r3, #28]
9000d51e:	68bb      	ldr	r3, [r7, #8]
9000d520:	4013      	ands	r3, r2
9000d522:	68ba      	ldr	r2, [r7, #8]
9000d524:	429a      	cmp	r2, r3
9000d526:	bf0c      	ite	eq
9000d528:	2301      	moveq	r3, #1
9000d52a:	2300      	movne	r3, #0
9000d52c:	b2db      	uxtb	r3, r3
9000d52e:	461a      	mov	r2, r3
9000d530:	79fb      	ldrb	r3, [r7, #7]
9000d532:	429a      	cmp	r2, r3
9000d534:	f43f af46 	beq.w	9000d3c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
9000d538:	2300      	movs	r3, #0
}
9000d53a:	4618      	mov	r0, r3
9000d53c:	3770      	adds	r7, #112	; 0x70
9000d53e:	46bd      	mov	sp, r7
9000d540:	bd80      	pop	{r7, pc}
	...

9000d544 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
9000d544:	b580      	push	{r7, lr}
9000d546:	b096      	sub	sp, #88	; 0x58
9000d548:	af00      	add	r7, sp, #0
9000d54a:	60f8      	str	r0, [r7, #12]
9000d54c:	60b9      	str	r1, [r7, #8]
9000d54e:	4613      	mov	r3, r2
9000d550:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
9000d552:	68fb      	ldr	r3, [r7, #12]
9000d554:	68ba      	ldr	r2, [r7, #8]
9000d556:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
9000d558:	68fb      	ldr	r3, [r7, #12]
9000d55a:	88fa      	ldrh	r2, [r7, #6]
9000d55c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
9000d560:	68fb      	ldr	r3, [r7, #12]
9000d562:	2200      	movs	r2, #0
9000d564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
9000d568:	68fb      	ldr	r3, [r7, #12]
9000d56a:	2222      	movs	r2, #34	; 0x22
9000d56c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
9000d570:	68fb      	ldr	r3, [r7, #12]
9000d572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000d574:	2b00      	cmp	r3, #0
9000d576:	d02c      	beq.n	9000d5d2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
9000d578:	68fb      	ldr	r3, [r7, #12]
9000d57a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000d57c:	4a42      	ldr	r2, [pc, #264]	; (9000d688 <UART_Start_Receive_DMA+0x144>)
9000d57e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
9000d580:	68fb      	ldr	r3, [r7, #12]
9000d582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000d584:	4a41      	ldr	r2, [pc, #260]	; (9000d68c <UART_Start_Receive_DMA+0x148>)
9000d586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
9000d588:	68fb      	ldr	r3, [r7, #12]
9000d58a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000d58c:	4a40      	ldr	r2, [pc, #256]	; (9000d690 <UART_Start_Receive_DMA+0x14c>)
9000d58e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
9000d590:	68fb      	ldr	r3, [r7, #12]
9000d592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000d594:	2200      	movs	r2, #0
9000d596:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
9000d598:	68fb      	ldr	r3, [r7, #12]
9000d59a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
9000d59c:	68fb      	ldr	r3, [r7, #12]
9000d59e:	681b      	ldr	r3, [r3, #0]
9000d5a0:	3324      	adds	r3, #36	; 0x24
9000d5a2:	4619      	mov	r1, r3
9000d5a4:	68fb      	ldr	r3, [r7, #12]
9000d5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000d5a8:	461a      	mov	r2, r3
9000d5aa:	88fb      	ldrh	r3, [r7, #6]
9000d5ac:	f7f6 ffb0 	bl	90004510 <HAL_DMA_Start_IT>
9000d5b0:	4603      	mov	r3, r0
9000d5b2:	2b00      	cmp	r3, #0
9000d5b4:	d00d      	beq.n	9000d5d2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
9000d5b6:	68fb      	ldr	r3, [r7, #12]
9000d5b8:	2210      	movs	r2, #16
9000d5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
9000d5be:	68fb      	ldr	r3, [r7, #12]
9000d5c0:	2200      	movs	r2, #0
9000d5c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
9000d5c6:	68fb      	ldr	r3, [r7, #12]
9000d5c8:	2220      	movs	r2, #32
9000d5ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
9000d5ce:	2301      	movs	r3, #1
9000d5d0:	e055      	b.n	9000d67e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
9000d5d2:	68fb      	ldr	r3, [r7, #12]
9000d5d4:	2200      	movs	r2, #0
9000d5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
9000d5da:	68fb      	ldr	r3, [r7, #12]
9000d5dc:	691b      	ldr	r3, [r3, #16]
9000d5de:	2b00      	cmp	r3, #0
9000d5e0:	d018      	beq.n	9000d614 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000d5e2:	68fb      	ldr	r3, [r7, #12]
9000d5e4:	681b      	ldr	r3, [r3, #0]
9000d5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d5ea:	e853 3f00 	ldrex	r3, [r3]
9000d5ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
9000d5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d5f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000d5f6:	657b      	str	r3, [r7, #84]	; 0x54
9000d5f8:	68fb      	ldr	r3, [r7, #12]
9000d5fa:	681b      	ldr	r3, [r3, #0]
9000d5fc:	461a      	mov	r2, r3
9000d5fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9000d600:	64bb      	str	r3, [r7, #72]	; 0x48
9000d602:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d604:	6c79      	ldr	r1, [r7, #68]	; 0x44
9000d606:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000d608:	e841 2300 	strex	r3, r2, [r1]
9000d60c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
9000d60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000d610:	2b00      	cmp	r3, #0
9000d612:	d1e6      	bne.n	9000d5e2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000d614:	68fb      	ldr	r3, [r7, #12]
9000d616:	681b      	ldr	r3, [r3, #0]
9000d618:	3308      	adds	r3, #8
9000d61a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d61e:	e853 3f00 	ldrex	r3, [r3]
9000d622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
9000d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000d626:	f043 0301 	orr.w	r3, r3, #1
9000d62a:	653b      	str	r3, [r7, #80]	; 0x50
9000d62c:	68fb      	ldr	r3, [r7, #12]
9000d62e:	681b      	ldr	r3, [r3, #0]
9000d630:	3308      	adds	r3, #8
9000d632:	6d3a      	ldr	r2, [r7, #80]	; 0x50
9000d634:	637a      	str	r2, [r7, #52]	; 0x34
9000d636:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d638:	6b39      	ldr	r1, [r7, #48]	; 0x30
9000d63a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000d63c:	e841 2300 	strex	r3, r2, [r1]
9000d640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
9000d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d644:	2b00      	cmp	r3, #0
9000d646:	d1e5      	bne.n	9000d614 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
9000d648:	68fb      	ldr	r3, [r7, #12]
9000d64a:	681b      	ldr	r3, [r3, #0]
9000d64c:	3308      	adds	r3, #8
9000d64e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d650:	697b      	ldr	r3, [r7, #20]
9000d652:	e853 3f00 	ldrex	r3, [r3]
9000d656:	613b      	str	r3, [r7, #16]
   return(result);
9000d658:	693b      	ldr	r3, [r7, #16]
9000d65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000d65e:	64fb      	str	r3, [r7, #76]	; 0x4c
9000d660:	68fb      	ldr	r3, [r7, #12]
9000d662:	681b      	ldr	r3, [r3, #0]
9000d664:	3308      	adds	r3, #8
9000d666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
9000d668:	623a      	str	r2, [r7, #32]
9000d66a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d66c:	69f9      	ldr	r1, [r7, #28]
9000d66e:	6a3a      	ldr	r2, [r7, #32]
9000d670:	e841 2300 	strex	r3, r2, [r1]
9000d674:	61bb      	str	r3, [r7, #24]
   return(result);
9000d676:	69bb      	ldr	r3, [r7, #24]
9000d678:	2b00      	cmp	r3, #0
9000d67a:	d1e5      	bne.n	9000d648 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
9000d67c:	2300      	movs	r3, #0
}
9000d67e:	4618      	mov	r0, r3
9000d680:	3758      	adds	r7, #88	; 0x58
9000d682:	46bd      	mov	sp, r7
9000d684:	bd80      	pop	{r7, pc}
9000d686:	bf00      	nop
9000d688:	9000d7e5 	.word	0x9000d7e5
9000d68c:	9000d907 	.word	0x9000d907
9000d690:	9000d93f 	.word	0x9000d93f

9000d694 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
9000d694:	b480      	push	{r7}
9000d696:	b08f      	sub	sp, #60	; 0x3c
9000d698:	af00      	add	r7, sp, #0
9000d69a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
9000d69c:	687b      	ldr	r3, [r7, #4]
9000d69e:	681b      	ldr	r3, [r3, #0]
9000d6a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d6a2:	6a3b      	ldr	r3, [r7, #32]
9000d6a4:	e853 3f00 	ldrex	r3, [r3]
9000d6a8:	61fb      	str	r3, [r7, #28]
   return(result);
9000d6aa:	69fb      	ldr	r3, [r7, #28]
9000d6ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000d6b0:	637b      	str	r3, [r7, #52]	; 0x34
9000d6b2:	687b      	ldr	r3, [r7, #4]
9000d6b4:	681b      	ldr	r3, [r3, #0]
9000d6b6:	461a      	mov	r2, r3
9000d6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000d6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
9000d6bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d6be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
9000d6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000d6c2:	e841 2300 	strex	r3, r2, [r1]
9000d6c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
9000d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000d6ca:	2b00      	cmp	r3, #0
9000d6cc:	d1e6      	bne.n	9000d69c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
9000d6ce:	687b      	ldr	r3, [r7, #4]
9000d6d0:	681b      	ldr	r3, [r3, #0]
9000d6d2:	3308      	adds	r3, #8
9000d6d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d6d6:	68fb      	ldr	r3, [r7, #12]
9000d6d8:	e853 3f00 	ldrex	r3, [r3]
9000d6dc:	60bb      	str	r3, [r7, #8]
   return(result);
9000d6de:	68bb      	ldr	r3, [r7, #8]
9000d6e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
9000d6e4:	633b      	str	r3, [r7, #48]	; 0x30
9000d6e6:	687b      	ldr	r3, [r7, #4]
9000d6e8:	681b      	ldr	r3, [r3, #0]
9000d6ea:	3308      	adds	r3, #8
9000d6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000d6ee:	61ba      	str	r2, [r7, #24]
9000d6f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d6f2:	6979      	ldr	r1, [r7, #20]
9000d6f4:	69ba      	ldr	r2, [r7, #24]
9000d6f6:	e841 2300 	strex	r3, r2, [r1]
9000d6fa:	613b      	str	r3, [r7, #16]
   return(result);
9000d6fc:	693b      	ldr	r3, [r7, #16]
9000d6fe:	2b00      	cmp	r3, #0
9000d700:	d1e5      	bne.n	9000d6ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
9000d702:	687b      	ldr	r3, [r7, #4]
9000d704:	2220      	movs	r2, #32
9000d706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
9000d70a:	bf00      	nop
9000d70c:	373c      	adds	r7, #60	; 0x3c
9000d70e:	46bd      	mov	sp, r7
9000d710:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d714:	4770      	bx	lr
	...

9000d718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
9000d718:	b480      	push	{r7}
9000d71a:	b095      	sub	sp, #84	; 0x54
9000d71c:	af00      	add	r7, sp, #0
9000d71e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000d720:	687b      	ldr	r3, [r7, #4]
9000d722:	681b      	ldr	r3, [r3, #0]
9000d724:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000d728:	e853 3f00 	ldrex	r3, [r3]
9000d72c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
9000d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000d730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
9000d734:	64fb      	str	r3, [r7, #76]	; 0x4c
9000d736:	687b      	ldr	r3, [r7, #4]
9000d738:	681b      	ldr	r3, [r3, #0]
9000d73a:	461a      	mov	r2, r3
9000d73c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d73e:	643b      	str	r3, [r7, #64]	; 0x40
9000d740:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d742:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
9000d744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
9000d746:	e841 2300 	strex	r3, r2, [r1]
9000d74a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
9000d74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d74e:	2b00      	cmp	r3, #0
9000d750:	d1e6      	bne.n	9000d720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000d752:	687b      	ldr	r3, [r7, #4]
9000d754:	681b      	ldr	r3, [r3, #0]
9000d756:	3308      	adds	r3, #8
9000d758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d75a:	6a3b      	ldr	r3, [r7, #32]
9000d75c:	e853 3f00 	ldrex	r3, [r3]
9000d760:	61fb      	str	r3, [r7, #28]
   return(result);
9000d762:	69fa      	ldr	r2, [r7, #28]
9000d764:	4b1e      	ldr	r3, [pc, #120]	; (9000d7e0 <UART_EndRxTransfer+0xc8>)
9000d766:	4013      	ands	r3, r2
9000d768:	64bb      	str	r3, [r7, #72]	; 0x48
9000d76a:	687b      	ldr	r3, [r7, #4]
9000d76c:	681b      	ldr	r3, [r3, #0]
9000d76e:	3308      	adds	r3, #8
9000d770:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000d772:	62fa      	str	r2, [r7, #44]	; 0x2c
9000d774:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
9000d778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000d77a:	e841 2300 	strex	r3, r2, [r1]
9000d77e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
9000d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000d782:	2b00      	cmp	r3, #0
9000d784:	d1e5      	bne.n	9000d752 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000d786:	687b      	ldr	r3, [r7, #4]
9000d788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d78a:	2b01      	cmp	r3, #1
9000d78c:	d118      	bne.n	9000d7c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000d78e:	687b      	ldr	r3, [r7, #4]
9000d790:	681b      	ldr	r3, [r3, #0]
9000d792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d794:	68fb      	ldr	r3, [r7, #12]
9000d796:	e853 3f00 	ldrex	r3, [r3]
9000d79a:	60bb      	str	r3, [r7, #8]
   return(result);
9000d79c:	68bb      	ldr	r3, [r7, #8]
9000d79e:	f023 0310 	bic.w	r3, r3, #16
9000d7a2:	647b      	str	r3, [r7, #68]	; 0x44
9000d7a4:	687b      	ldr	r3, [r7, #4]
9000d7a6:	681b      	ldr	r3, [r3, #0]
9000d7a8:	461a      	mov	r2, r3
9000d7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000d7ac:	61bb      	str	r3, [r7, #24]
9000d7ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d7b0:	6979      	ldr	r1, [r7, #20]
9000d7b2:	69ba      	ldr	r2, [r7, #24]
9000d7b4:	e841 2300 	strex	r3, r2, [r1]
9000d7b8:	613b      	str	r3, [r7, #16]
   return(result);
9000d7ba:	693b      	ldr	r3, [r7, #16]
9000d7bc:	2b00      	cmp	r3, #0
9000d7be:	d1e6      	bne.n	9000d78e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
9000d7c0:	687b      	ldr	r3, [r7, #4]
9000d7c2:	2220      	movs	r2, #32
9000d7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000d7c8:	687b      	ldr	r3, [r7, #4]
9000d7ca:	2200      	movs	r2, #0
9000d7cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000d7ce:	687b      	ldr	r3, [r7, #4]
9000d7d0:	2200      	movs	r2, #0
9000d7d2:	671a      	str	r2, [r3, #112]	; 0x70
}
9000d7d4:	bf00      	nop
9000d7d6:	3754      	adds	r7, #84	; 0x54
9000d7d8:	46bd      	mov	sp, r7
9000d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d7de:	4770      	bx	lr
9000d7e0:	effffffe 	.word	0xeffffffe

9000d7e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
9000d7e4:	b580      	push	{r7, lr}
9000d7e6:	b09c      	sub	sp, #112	; 0x70
9000d7e8:	af00      	add	r7, sp, #0
9000d7ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
9000d7ec:	687b      	ldr	r3, [r7, #4]
9000d7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000d7f0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
9000d7f2:	687b      	ldr	r3, [r7, #4]
9000d7f4:	69db      	ldr	r3, [r3, #28]
9000d7f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000d7fa:	d071      	beq.n	9000d8e0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
9000d7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d7fe:	2200      	movs	r2, #0
9000d800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000d804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d806:	681b      	ldr	r3, [r3, #0]
9000d808:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9000d80c:	e853 3f00 	ldrex	r3, [r3]
9000d810:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
9000d812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000d814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
9000d818:	66bb      	str	r3, [r7, #104]	; 0x68
9000d81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d81c:	681b      	ldr	r3, [r3, #0]
9000d81e:	461a      	mov	r2, r3
9000d820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
9000d822:	65bb      	str	r3, [r7, #88]	; 0x58
9000d824:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d826:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000d828:	6dba      	ldr	r2, [r7, #88]	; 0x58
9000d82a:	e841 2300 	strex	r3, r2, [r1]
9000d82e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
9000d830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9000d832:	2b00      	cmp	r3, #0
9000d834:	d1e6      	bne.n	9000d804 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000d836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d838:	681b      	ldr	r3, [r3, #0]
9000d83a:	3308      	adds	r3, #8
9000d83c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000d840:	e853 3f00 	ldrex	r3, [r3]
9000d844:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
9000d846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000d848:	f023 0301 	bic.w	r3, r3, #1
9000d84c:	667b      	str	r3, [r7, #100]	; 0x64
9000d84e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d850:	681b      	ldr	r3, [r3, #0]
9000d852:	3308      	adds	r3, #8
9000d854:	6e7a      	ldr	r2, [r7, #100]	; 0x64
9000d856:	647a      	str	r2, [r7, #68]	; 0x44
9000d858:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d85a:	6c39      	ldr	r1, [r7, #64]	; 0x40
9000d85c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000d85e:	e841 2300 	strex	r3, r2, [r1]
9000d862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
9000d864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000d866:	2b00      	cmp	r3, #0
9000d868:	d1e5      	bne.n	9000d836 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
9000d86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d86c:	681b      	ldr	r3, [r3, #0]
9000d86e:	3308      	adds	r3, #8
9000d870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000d874:	e853 3f00 	ldrex	r3, [r3]
9000d878:	623b      	str	r3, [r7, #32]
   return(result);
9000d87a:	6a3b      	ldr	r3, [r7, #32]
9000d87c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
9000d880:	663b      	str	r3, [r7, #96]	; 0x60
9000d882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d884:	681b      	ldr	r3, [r3, #0]
9000d886:	3308      	adds	r3, #8
9000d888:	6e3a      	ldr	r2, [r7, #96]	; 0x60
9000d88a:	633a      	str	r2, [r7, #48]	; 0x30
9000d88c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d88e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000d890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000d892:	e841 2300 	strex	r3, r2, [r1]
9000d896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
9000d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d89a:	2b00      	cmp	r3, #0
9000d89c:	d1e5      	bne.n	9000d86a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
9000d89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d8a0:	2220      	movs	r2, #32
9000d8a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000d8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d8aa:	2b01      	cmp	r3, #1
9000d8ac:	d118      	bne.n	9000d8e0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000d8ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d8b0:	681b      	ldr	r3, [r3, #0]
9000d8b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d8b4:	693b      	ldr	r3, [r7, #16]
9000d8b6:	e853 3f00 	ldrex	r3, [r3]
9000d8ba:	60fb      	str	r3, [r7, #12]
   return(result);
9000d8bc:	68fb      	ldr	r3, [r7, #12]
9000d8be:	f023 0310 	bic.w	r3, r3, #16
9000d8c2:	65fb      	str	r3, [r7, #92]	; 0x5c
9000d8c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d8c6:	681b      	ldr	r3, [r3, #0]
9000d8c8:	461a      	mov	r2, r3
9000d8ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
9000d8cc:	61fb      	str	r3, [r7, #28]
9000d8ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000d8d0:	69b9      	ldr	r1, [r7, #24]
9000d8d2:	69fa      	ldr	r2, [r7, #28]
9000d8d4:	e841 2300 	strex	r3, r2, [r1]
9000d8d8:	617b      	str	r3, [r7, #20]
   return(result);
9000d8da:	697b      	ldr	r3, [r7, #20]
9000d8dc:	2b00      	cmp	r3, #0
9000d8de:	d1e6      	bne.n	9000d8ae <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000d8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d8e4:	2b01      	cmp	r3, #1
9000d8e6:	d107      	bne.n	9000d8f8 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
9000d8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000d8ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
9000d8ee:	4619      	mov	r1, r3
9000d8f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
9000d8f2:	f7fe fefd 	bl	9000c6f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
9000d8f6:	e002      	b.n	9000d8fe <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
9000d8f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
9000d8fa:	f7f3 fc91 	bl	90001220 <HAL_UART_RxCpltCallback>
}
9000d8fe:	bf00      	nop
9000d900:	3770      	adds	r7, #112	; 0x70
9000d902:	46bd      	mov	sp, r7
9000d904:	bd80      	pop	{r7, pc}

9000d906 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
9000d906:	b580      	push	{r7, lr}
9000d908:	b084      	sub	sp, #16
9000d90a:	af00      	add	r7, sp, #0
9000d90c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
9000d90e:	687b      	ldr	r3, [r7, #4]
9000d910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000d912:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000d914:	68fb      	ldr	r3, [r7, #12]
9000d916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d918:	2b01      	cmp	r3, #1
9000d91a:	d109      	bne.n	9000d930 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
9000d91c:	68fb      	ldr	r3, [r7, #12]
9000d91e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
9000d922:	085b      	lsrs	r3, r3, #1
9000d924:	b29b      	uxth	r3, r3
9000d926:	4619      	mov	r1, r3
9000d928:	68f8      	ldr	r0, [r7, #12]
9000d92a:	f7fe fee1 	bl	9000c6f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
9000d92e:	e002      	b.n	9000d936 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
9000d930:	68f8      	ldr	r0, [r7, #12]
9000d932:	f7fe fec9 	bl	9000c6c8 <HAL_UART_RxHalfCpltCallback>
}
9000d936:	bf00      	nop
9000d938:	3710      	adds	r7, #16
9000d93a:	46bd      	mov	sp, r7
9000d93c:	bd80      	pop	{r7, pc}

9000d93e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
9000d93e:	b580      	push	{r7, lr}
9000d940:	b086      	sub	sp, #24
9000d942:	af00      	add	r7, sp, #0
9000d944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
9000d946:	687b      	ldr	r3, [r7, #4]
9000d948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000d94a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
9000d94c:	697b      	ldr	r3, [r7, #20]
9000d94e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000d952:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
9000d954:	697b      	ldr	r3, [r7, #20]
9000d956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000d95a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
9000d95c:	697b      	ldr	r3, [r7, #20]
9000d95e:	681b      	ldr	r3, [r3, #0]
9000d960:	689b      	ldr	r3, [r3, #8]
9000d962:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000d966:	2b80      	cmp	r3, #128	; 0x80
9000d968:	d109      	bne.n	9000d97e <UART_DMAError+0x40>
9000d96a:	693b      	ldr	r3, [r7, #16]
9000d96c:	2b21      	cmp	r3, #33	; 0x21
9000d96e:	d106      	bne.n	9000d97e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
9000d970:	697b      	ldr	r3, [r7, #20]
9000d972:	2200      	movs	r2, #0
9000d974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
9000d978:	6978      	ldr	r0, [r7, #20]
9000d97a:	f7ff fe8b 	bl	9000d694 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
9000d97e:	697b      	ldr	r3, [r7, #20]
9000d980:	681b      	ldr	r3, [r3, #0]
9000d982:	689b      	ldr	r3, [r3, #8]
9000d984:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000d988:	2b40      	cmp	r3, #64	; 0x40
9000d98a:	d109      	bne.n	9000d9a0 <UART_DMAError+0x62>
9000d98c:	68fb      	ldr	r3, [r7, #12]
9000d98e:	2b22      	cmp	r3, #34	; 0x22
9000d990:	d106      	bne.n	9000d9a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
9000d992:	697b      	ldr	r3, [r7, #20]
9000d994:	2200      	movs	r2, #0
9000d996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
9000d99a:	6978      	ldr	r0, [r7, #20]
9000d99c:	f7ff febc 	bl	9000d718 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
9000d9a0:	697b      	ldr	r3, [r7, #20]
9000d9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000d9a6:	f043 0210 	orr.w	r2, r3, #16
9000d9aa:	697b      	ldr	r3, [r7, #20]
9000d9ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
9000d9b0:	6978      	ldr	r0, [r7, #20]
9000d9b2:	f7fe fe93 	bl	9000c6dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
9000d9b6:	bf00      	nop
9000d9b8:	3718      	adds	r7, #24
9000d9ba:	46bd      	mov	sp, r7
9000d9bc:	bd80      	pop	{r7, pc}

9000d9be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
9000d9be:	b580      	push	{r7, lr}
9000d9c0:	b084      	sub	sp, #16
9000d9c2:	af00      	add	r7, sp, #0
9000d9c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
9000d9c6:	687b      	ldr	r3, [r7, #4]
9000d9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000d9ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
9000d9cc:	68fb      	ldr	r3, [r7, #12]
9000d9ce:	2200      	movs	r2, #0
9000d9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
9000d9d4:	68fb      	ldr	r3, [r7, #12]
9000d9d6:	2200      	movs	r2, #0
9000d9d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
9000d9dc:	68f8      	ldr	r0, [r7, #12]
9000d9de:	f7fe fe7d 	bl	9000c6dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
9000d9e2:	bf00      	nop
9000d9e4:	3710      	adds	r7, #16
9000d9e6:	46bd      	mov	sp, r7
9000d9e8:	bd80      	pop	{r7, pc}

9000d9ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
9000d9ea:	b580      	push	{r7, lr}
9000d9ec:	b088      	sub	sp, #32
9000d9ee:	af00      	add	r7, sp, #0
9000d9f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
9000d9f2:	687b      	ldr	r3, [r7, #4]
9000d9f4:	681b      	ldr	r3, [r3, #0]
9000d9f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000d9f8:	68fb      	ldr	r3, [r7, #12]
9000d9fa:	e853 3f00 	ldrex	r3, [r3]
9000d9fe:	60bb      	str	r3, [r7, #8]
   return(result);
9000da00:	68bb      	ldr	r3, [r7, #8]
9000da02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
9000da06:	61fb      	str	r3, [r7, #28]
9000da08:	687b      	ldr	r3, [r7, #4]
9000da0a:	681b      	ldr	r3, [r3, #0]
9000da0c:	461a      	mov	r2, r3
9000da0e:	69fb      	ldr	r3, [r7, #28]
9000da10:	61bb      	str	r3, [r7, #24]
9000da12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000da14:	6979      	ldr	r1, [r7, #20]
9000da16:	69ba      	ldr	r2, [r7, #24]
9000da18:	e841 2300 	strex	r3, r2, [r1]
9000da1c:	613b      	str	r3, [r7, #16]
   return(result);
9000da1e:	693b      	ldr	r3, [r7, #16]
9000da20:	2b00      	cmp	r3, #0
9000da22:	d1e6      	bne.n	9000d9f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
9000da24:	687b      	ldr	r3, [r7, #4]
9000da26:	2220      	movs	r2, #32
9000da28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
9000da2c:	687b      	ldr	r3, [r7, #4]
9000da2e:	2200      	movs	r2, #0
9000da30:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
9000da32:	6878      	ldr	r0, [r7, #4]
9000da34:	f7fe fe3e 	bl	9000c6b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
9000da38:	bf00      	nop
9000da3a:	3720      	adds	r7, #32
9000da3c:	46bd      	mov	sp, r7
9000da3e:	bd80      	pop	{r7, pc}

9000da40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
9000da40:	b480      	push	{r7}
9000da42:	b083      	sub	sp, #12
9000da44:	af00      	add	r7, sp, #0
9000da46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
9000da48:	bf00      	nop
9000da4a:	370c      	adds	r7, #12
9000da4c:	46bd      	mov	sp, r7
9000da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000da52:	4770      	bx	lr

9000da54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
9000da54:	b480      	push	{r7}
9000da56:	b083      	sub	sp, #12
9000da58:	af00      	add	r7, sp, #0
9000da5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
9000da5c:	bf00      	nop
9000da5e:	370c      	adds	r7, #12
9000da60:	46bd      	mov	sp, r7
9000da62:	f85d 7b04 	ldr.w	r7, [sp], #4
9000da66:	4770      	bx	lr

9000da68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
9000da68:	b480      	push	{r7}
9000da6a:	b083      	sub	sp, #12
9000da6c:	af00      	add	r7, sp, #0
9000da6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
9000da70:	bf00      	nop
9000da72:	370c      	adds	r7, #12
9000da74:	46bd      	mov	sp, r7
9000da76:	f85d 7b04 	ldr.w	r7, [sp], #4
9000da7a:	4770      	bx	lr

9000da7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
9000da7c:	b480      	push	{r7}
9000da7e:	b085      	sub	sp, #20
9000da80:	af00      	add	r7, sp, #0
9000da82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000da84:	687b      	ldr	r3, [r7, #4]
9000da86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
9000da8a:	2b01      	cmp	r3, #1
9000da8c:	d101      	bne.n	9000da92 <HAL_UARTEx_DisableFifoMode+0x16>
9000da8e:	2302      	movs	r3, #2
9000da90:	e027      	b.n	9000dae2 <HAL_UARTEx_DisableFifoMode+0x66>
9000da92:	687b      	ldr	r3, [r7, #4]
9000da94:	2201      	movs	r2, #1
9000da96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
9000da9a:	687b      	ldr	r3, [r7, #4]
9000da9c:	2224      	movs	r2, #36	; 0x24
9000da9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000daa2:	687b      	ldr	r3, [r7, #4]
9000daa4:	681b      	ldr	r3, [r3, #0]
9000daa6:	681b      	ldr	r3, [r3, #0]
9000daa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000daaa:	687b      	ldr	r3, [r7, #4]
9000daac:	681b      	ldr	r3, [r3, #0]
9000daae:	681a      	ldr	r2, [r3, #0]
9000dab0:	687b      	ldr	r3, [r7, #4]
9000dab2:	681b      	ldr	r3, [r3, #0]
9000dab4:	f022 0201 	bic.w	r2, r2, #1
9000dab8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
9000daba:	68fb      	ldr	r3, [r7, #12]
9000dabc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
9000dac0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9000dac2:	687b      	ldr	r3, [r7, #4]
9000dac4:	2200      	movs	r2, #0
9000dac6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000dac8:	687b      	ldr	r3, [r7, #4]
9000daca:	681b      	ldr	r3, [r3, #0]
9000dacc:	68fa      	ldr	r2, [r7, #12]
9000dace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000dad0:	687b      	ldr	r3, [r7, #4]
9000dad2:	2220      	movs	r2, #32
9000dad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000dad8:	687b      	ldr	r3, [r7, #4]
9000dada:	2200      	movs	r2, #0
9000dadc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
9000dae0:	2300      	movs	r3, #0
}
9000dae2:	4618      	mov	r0, r3
9000dae4:	3714      	adds	r7, #20
9000dae6:	46bd      	mov	sp, r7
9000dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000daec:	4770      	bx	lr

9000daee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000daee:	b580      	push	{r7, lr}
9000daf0:	b084      	sub	sp, #16
9000daf2:	af00      	add	r7, sp, #0
9000daf4:	6078      	str	r0, [r7, #4]
9000daf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000daf8:	687b      	ldr	r3, [r7, #4]
9000dafa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
9000dafe:	2b01      	cmp	r3, #1
9000db00:	d101      	bne.n	9000db06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
9000db02:	2302      	movs	r3, #2
9000db04:	e02d      	b.n	9000db62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000db06:	687b      	ldr	r3, [r7, #4]
9000db08:	2201      	movs	r2, #1
9000db0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
9000db0e:	687b      	ldr	r3, [r7, #4]
9000db10:	2224      	movs	r2, #36	; 0x24
9000db12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000db16:	687b      	ldr	r3, [r7, #4]
9000db18:	681b      	ldr	r3, [r3, #0]
9000db1a:	681b      	ldr	r3, [r3, #0]
9000db1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000db1e:	687b      	ldr	r3, [r7, #4]
9000db20:	681b      	ldr	r3, [r3, #0]
9000db22:	681a      	ldr	r2, [r3, #0]
9000db24:	687b      	ldr	r3, [r7, #4]
9000db26:	681b      	ldr	r3, [r3, #0]
9000db28:	f022 0201 	bic.w	r2, r2, #1
9000db2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9000db2e:	687b      	ldr	r3, [r7, #4]
9000db30:	681b      	ldr	r3, [r3, #0]
9000db32:	689b      	ldr	r3, [r3, #8]
9000db34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
9000db38:	687b      	ldr	r3, [r7, #4]
9000db3a:	681b      	ldr	r3, [r3, #0]
9000db3c:	683a      	ldr	r2, [r7, #0]
9000db3e:	430a      	orrs	r2, r1
9000db40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000db42:	6878      	ldr	r0, [r7, #4]
9000db44:	f000 f850 	bl	9000dbe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000db48:	687b      	ldr	r3, [r7, #4]
9000db4a:	681b      	ldr	r3, [r3, #0]
9000db4c:	68fa      	ldr	r2, [r7, #12]
9000db4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000db50:	687b      	ldr	r3, [r7, #4]
9000db52:	2220      	movs	r2, #32
9000db54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000db58:	687b      	ldr	r3, [r7, #4]
9000db5a:	2200      	movs	r2, #0
9000db5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
9000db60:	2300      	movs	r3, #0
}
9000db62:	4618      	mov	r0, r3
9000db64:	3710      	adds	r7, #16
9000db66:	46bd      	mov	sp, r7
9000db68:	bd80      	pop	{r7, pc}

9000db6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
9000db6a:	b580      	push	{r7, lr}
9000db6c:	b084      	sub	sp, #16
9000db6e:	af00      	add	r7, sp, #0
9000db70:	6078      	str	r0, [r7, #4]
9000db72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000db74:	687b      	ldr	r3, [r7, #4]
9000db76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
9000db7a:	2b01      	cmp	r3, #1
9000db7c:	d101      	bne.n	9000db82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
9000db7e:	2302      	movs	r3, #2
9000db80:	e02d      	b.n	9000dbde <HAL_UARTEx_SetRxFifoThreshold+0x74>
9000db82:	687b      	ldr	r3, [r7, #4]
9000db84:	2201      	movs	r2, #1
9000db86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
9000db8a:	687b      	ldr	r3, [r7, #4]
9000db8c:	2224      	movs	r2, #36	; 0x24
9000db8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
9000db92:	687b      	ldr	r3, [r7, #4]
9000db94:	681b      	ldr	r3, [r3, #0]
9000db96:	681b      	ldr	r3, [r3, #0]
9000db98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
9000db9a:	687b      	ldr	r3, [r7, #4]
9000db9c:	681b      	ldr	r3, [r3, #0]
9000db9e:	681a      	ldr	r2, [r3, #0]
9000dba0:	687b      	ldr	r3, [r7, #4]
9000dba2:	681b      	ldr	r3, [r3, #0]
9000dba4:	f022 0201 	bic.w	r2, r2, #1
9000dba8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
9000dbaa:	687b      	ldr	r3, [r7, #4]
9000dbac:	681b      	ldr	r3, [r3, #0]
9000dbae:	689b      	ldr	r3, [r3, #8]
9000dbb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
9000dbb4:	687b      	ldr	r3, [r7, #4]
9000dbb6:	681b      	ldr	r3, [r3, #0]
9000dbb8:	683a      	ldr	r2, [r7, #0]
9000dbba:	430a      	orrs	r2, r1
9000dbbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
9000dbbe:	6878      	ldr	r0, [r7, #4]
9000dbc0:	f000 f812 	bl	9000dbe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000dbc4:	687b      	ldr	r3, [r7, #4]
9000dbc6:	681b      	ldr	r3, [r3, #0]
9000dbc8:	68fa      	ldr	r2, [r7, #12]
9000dbca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
9000dbcc:	687b      	ldr	r3, [r7, #4]
9000dbce:	2220      	movs	r2, #32
9000dbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000dbd4:	687b      	ldr	r3, [r7, #4]
9000dbd6:	2200      	movs	r2, #0
9000dbd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
9000dbdc:	2300      	movs	r3, #0
}
9000dbde:	4618      	mov	r0, r3
9000dbe0:	3710      	adds	r7, #16
9000dbe2:	46bd      	mov	sp, r7
9000dbe4:	bd80      	pop	{r7, pc}
	...

9000dbe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000dbe8:	b480      	push	{r7}
9000dbea:	b085      	sub	sp, #20
9000dbec:	af00      	add	r7, sp, #0
9000dbee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9000dbf0:	687b      	ldr	r3, [r7, #4]
9000dbf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000dbf4:	2b00      	cmp	r3, #0
9000dbf6:	d108      	bne.n	9000dc0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000dbf8:	687b      	ldr	r3, [r7, #4]
9000dbfa:	2201      	movs	r2, #1
9000dbfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
9000dc00:	687b      	ldr	r3, [r7, #4]
9000dc02:	2201      	movs	r2, #1
9000dc04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000dc08:	e031      	b.n	9000dc6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000dc0a:	2310      	movs	r3, #16
9000dc0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
9000dc0e:	2310      	movs	r3, #16
9000dc10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9000dc12:	687b      	ldr	r3, [r7, #4]
9000dc14:	681b      	ldr	r3, [r3, #0]
9000dc16:	689b      	ldr	r3, [r3, #8]
9000dc18:	0e5b      	lsrs	r3, r3, #25
9000dc1a:	b2db      	uxtb	r3, r3
9000dc1c:	f003 0307 	and.w	r3, r3, #7
9000dc20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9000dc22:	687b      	ldr	r3, [r7, #4]
9000dc24:	681b      	ldr	r3, [r3, #0]
9000dc26:	689b      	ldr	r3, [r3, #8]
9000dc28:	0f5b      	lsrs	r3, r3, #29
9000dc2a:	b2db      	uxtb	r3, r3
9000dc2c:	f003 0307 	and.w	r3, r3, #7
9000dc30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000dc32:	7bbb      	ldrb	r3, [r7, #14]
9000dc34:	7b3a      	ldrb	r2, [r7, #12]
9000dc36:	4911      	ldr	r1, [pc, #68]	; (9000dc7c <UARTEx_SetNbDataToProcess+0x94>)
9000dc38:	5c8a      	ldrb	r2, [r1, r2]
9000dc3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
9000dc3e:	7b3a      	ldrb	r2, [r7, #12]
9000dc40:	490f      	ldr	r1, [pc, #60]	; (9000dc80 <UARTEx_SetNbDataToProcess+0x98>)
9000dc42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9000dc44:	fb93 f3f2 	sdiv	r3, r3, r2
9000dc48:	b29a      	uxth	r2, r3
9000dc4a:	687b      	ldr	r3, [r7, #4]
9000dc4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000dc50:	7bfb      	ldrb	r3, [r7, #15]
9000dc52:	7b7a      	ldrb	r2, [r7, #13]
9000dc54:	4909      	ldr	r1, [pc, #36]	; (9000dc7c <UARTEx_SetNbDataToProcess+0x94>)
9000dc56:	5c8a      	ldrb	r2, [r1, r2]
9000dc58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
9000dc5c:	7b7a      	ldrb	r2, [r7, #13]
9000dc5e:	4908      	ldr	r1, [pc, #32]	; (9000dc80 <UARTEx_SetNbDataToProcess+0x98>)
9000dc60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9000dc62:	fb93 f3f2 	sdiv	r3, r3, r2
9000dc66:	b29a      	uxth	r2, r3
9000dc68:	687b      	ldr	r3, [r7, #4]
9000dc6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
9000dc6e:	bf00      	nop
9000dc70:	3714      	adds	r7, #20
9000dc72:	46bd      	mov	sp, r7
9000dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
9000dc78:	4770      	bx	lr
9000dc7a:	bf00      	nop
9000dc7c:	90013f20 	.word	0x90013f20
9000dc80:	90013f28 	.word	0x90013f28

9000dc84 <__NVIC_SetPriority>:
{
9000dc84:	b480      	push	{r7}
9000dc86:	b083      	sub	sp, #12
9000dc88:	af00      	add	r7, sp, #0
9000dc8a:	4603      	mov	r3, r0
9000dc8c:	6039      	str	r1, [r7, #0]
9000dc8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
9000dc90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000dc94:	2b00      	cmp	r3, #0
9000dc96:	db0a      	blt.n	9000dcae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000dc98:	683b      	ldr	r3, [r7, #0]
9000dc9a:	b2da      	uxtb	r2, r3
9000dc9c:	490c      	ldr	r1, [pc, #48]	; (9000dcd0 <__NVIC_SetPriority+0x4c>)
9000dc9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000dca2:	0112      	lsls	r2, r2, #4
9000dca4:	b2d2      	uxtb	r2, r2
9000dca6:	440b      	add	r3, r1
9000dca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
9000dcac:	e00a      	b.n	9000dcc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000dcae:	683b      	ldr	r3, [r7, #0]
9000dcb0:	b2da      	uxtb	r2, r3
9000dcb2:	4908      	ldr	r1, [pc, #32]	; (9000dcd4 <__NVIC_SetPriority+0x50>)
9000dcb4:	88fb      	ldrh	r3, [r7, #6]
9000dcb6:	f003 030f 	and.w	r3, r3, #15
9000dcba:	3b04      	subs	r3, #4
9000dcbc:	0112      	lsls	r2, r2, #4
9000dcbe:	b2d2      	uxtb	r2, r2
9000dcc0:	440b      	add	r3, r1
9000dcc2:	761a      	strb	r2, [r3, #24]
}
9000dcc4:	bf00      	nop
9000dcc6:	370c      	adds	r7, #12
9000dcc8:	46bd      	mov	sp, r7
9000dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
9000dcce:	4770      	bx	lr
9000dcd0:	e000e100 	.word	0xe000e100
9000dcd4:	e000ed00 	.word	0xe000ed00

9000dcd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000dcd8:	b580      	push	{r7, lr}
9000dcda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
9000dcdc:	4b05      	ldr	r3, [pc, #20]	; (9000dcf4 <SysTick_Handler+0x1c>)
9000dcde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000dce0:	f001 fd28 	bl	9000f734 <xTaskGetSchedulerState>
9000dce4:	4603      	mov	r3, r0
9000dce6:	2b01      	cmp	r3, #1
9000dce8:	d001      	beq.n	9000dcee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
9000dcea:	f002 fb0d 	bl	90010308 <xPortSysTickHandler>
  }
}
9000dcee:	bf00      	nop
9000dcf0:	bd80      	pop	{r7, pc}
9000dcf2:	bf00      	nop
9000dcf4:	e000e010 	.word	0xe000e010

9000dcf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
9000dcf8:	b580      	push	{r7, lr}
9000dcfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
9000dcfc:	2100      	movs	r1, #0
9000dcfe:	f06f 0004 	mvn.w	r0, #4
9000dd02:	f7ff ffbf 	bl	9000dc84 <__NVIC_SetPriority>
#endif
}
9000dd06:	bf00      	nop
9000dd08:	bd80      	pop	{r7, pc}
	...

9000dd0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
9000dd0c:	b480      	push	{r7}
9000dd0e:	b083      	sub	sp, #12
9000dd10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000dd12:	f3ef 8305 	mrs	r3, IPSR
9000dd16:	603b      	str	r3, [r7, #0]
  return(result);
9000dd18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
9000dd1a:	2b00      	cmp	r3, #0
9000dd1c:	d003      	beq.n	9000dd26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
9000dd1e:	f06f 0305 	mvn.w	r3, #5
9000dd22:	607b      	str	r3, [r7, #4]
9000dd24:	e00c      	b.n	9000dd40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
9000dd26:	4b0a      	ldr	r3, [pc, #40]	; (9000dd50 <osKernelInitialize+0x44>)
9000dd28:	681b      	ldr	r3, [r3, #0]
9000dd2a:	2b00      	cmp	r3, #0
9000dd2c:	d105      	bne.n	9000dd3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000dd2e:	4b08      	ldr	r3, [pc, #32]	; (9000dd50 <osKernelInitialize+0x44>)
9000dd30:	2201      	movs	r2, #1
9000dd32:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000dd34:	2300      	movs	r3, #0
9000dd36:	607b      	str	r3, [r7, #4]
9000dd38:	e002      	b.n	9000dd40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
9000dd3a:	f04f 33ff 	mov.w	r3, #4294967295
9000dd3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
9000dd40:	687b      	ldr	r3, [r7, #4]
}
9000dd42:	4618      	mov	r0, r3
9000dd44:	370c      	adds	r7, #12
9000dd46:	46bd      	mov	sp, r7
9000dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
9000dd4c:	4770      	bx	lr
9000dd4e:	bf00      	nop
9000dd50:	24000e28 	.word	0x24000e28

9000dd54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000dd54:	b580      	push	{r7, lr}
9000dd56:	b082      	sub	sp, #8
9000dd58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000dd5a:	f3ef 8305 	mrs	r3, IPSR
9000dd5e:	603b      	str	r3, [r7, #0]
  return(result);
9000dd60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
9000dd62:	2b00      	cmp	r3, #0
9000dd64:	d003      	beq.n	9000dd6e <osKernelStart+0x1a>
    stat = osErrorISR;
9000dd66:	f06f 0305 	mvn.w	r3, #5
9000dd6a:	607b      	str	r3, [r7, #4]
9000dd6c:	e010      	b.n	9000dd90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
9000dd6e:	4b0b      	ldr	r3, [pc, #44]	; (9000dd9c <osKernelStart+0x48>)
9000dd70:	681b      	ldr	r3, [r3, #0]
9000dd72:	2b01      	cmp	r3, #1
9000dd74:	d109      	bne.n	9000dd8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
9000dd76:	f7ff ffbf 	bl	9000dcf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000dd7a:	4b08      	ldr	r3, [pc, #32]	; (9000dd9c <osKernelStart+0x48>)
9000dd7c:	2202      	movs	r2, #2
9000dd7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000dd80:	f001 f87c 	bl	9000ee7c <vTaskStartScheduler>
      stat = osOK;
9000dd84:	2300      	movs	r3, #0
9000dd86:	607b      	str	r3, [r7, #4]
9000dd88:	e002      	b.n	9000dd90 <osKernelStart+0x3c>
    } else {
      stat = osError;
9000dd8a:	f04f 33ff 	mov.w	r3, #4294967295
9000dd8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
9000dd90:	687b      	ldr	r3, [r7, #4]
}
9000dd92:	4618      	mov	r0, r3
9000dd94:	3708      	adds	r7, #8
9000dd96:	46bd      	mov	sp, r7
9000dd98:	bd80      	pop	{r7, pc}
9000dd9a:	bf00      	nop
9000dd9c:	24000e28 	.word	0x24000e28

9000dda0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000dda0:	b580      	push	{r7, lr}
9000dda2:	b08e      	sub	sp, #56	; 0x38
9000dda4:	af04      	add	r7, sp, #16
9000dda6:	60f8      	str	r0, [r7, #12]
9000dda8:	60b9      	str	r1, [r7, #8]
9000ddaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000ddac:	2300      	movs	r3, #0
9000ddae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000ddb0:	f3ef 8305 	mrs	r3, IPSR
9000ddb4:	617b      	str	r3, [r7, #20]
  return(result);
9000ddb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
9000ddb8:	2b00      	cmp	r3, #0
9000ddba:	d17e      	bne.n	9000deba <osThreadNew+0x11a>
9000ddbc:	68fb      	ldr	r3, [r7, #12]
9000ddbe:	2b00      	cmp	r3, #0
9000ddc0:	d07b      	beq.n	9000deba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
9000ddc2:	2380      	movs	r3, #128	; 0x80
9000ddc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
9000ddc6:	2318      	movs	r3, #24
9000ddc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
9000ddca:	2300      	movs	r3, #0
9000ddcc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
9000ddce:	f04f 33ff 	mov.w	r3, #4294967295
9000ddd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
9000ddd4:	687b      	ldr	r3, [r7, #4]
9000ddd6:	2b00      	cmp	r3, #0
9000ddd8:	d045      	beq.n	9000de66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
9000ddda:	687b      	ldr	r3, [r7, #4]
9000dddc:	681b      	ldr	r3, [r3, #0]
9000ddde:	2b00      	cmp	r3, #0
9000dde0:	d002      	beq.n	9000dde8 <osThreadNew+0x48>
        name = attr->name;
9000dde2:	687b      	ldr	r3, [r7, #4]
9000dde4:	681b      	ldr	r3, [r3, #0]
9000dde6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
9000dde8:	687b      	ldr	r3, [r7, #4]
9000ddea:	699b      	ldr	r3, [r3, #24]
9000ddec:	2b00      	cmp	r3, #0
9000ddee:	d002      	beq.n	9000ddf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
9000ddf0:	687b      	ldr	r3, [r7, #4]
9000ddf2:	699b      	ldr	r3, [r3, #24]
9000ddf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000ddf6:	69fb      	ldr	r3, [r7, #28]
9000ddf8:	2b00      	cmp	r3, #0
9000ddfa:	d008      	beq.n	9000de0e <osThreadNew+0x6e>
9000ddfc:	69fb      	ldr	r3, [r7, #28]
9000ddfe:	2b38      	cmp	r3, #56	; 0x38
9000de00:	d805      	bhi.n	9000de0e <osThreadNew+0x6e>
9000de02:	687b      	ldr	r3, [r7, #4]
9000de04:	685b      	ldr	r3, [r3, #4]
9000de06:	f003 0301 	and.w	r3, r3, #1
9000de0a:	2b00      	cmp	r3, #0
9000de0c:	d001      	beq.n	9000de12 <osThreadNew+0x72>
        return (NULL);
9000de0e:	2300      	movs	r3, #0
9000de10:	e054      	b.n	9000debc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
9000de12:	687b      	ldr	r3, [r7, #4]
9000de14:	695b      	ldr	r3, [r3, #20]
9000de16:	2b00      	cmp	r3, #0
9000de18:	d003      	beq.n	9000de22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000de1a:	687b      	ldr	r3, [r7, #4]
9000de1c:	695b      	ldr	r3, [r3, #20]
9000de1e:	089b      	lsrs	r3, r3, #2
9000de20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000de22:	687b      	ldr	r3, [r7, #4]
9000de24:	689b      	ldr	r3, [r3, #8]
9000de26:	2b00      	cmp	r3, #0
9000de28:	d00e      	beq.n	9000de48 <osThreadNew+0xa8>
9000de2a:	687b      	ldr	r3, [r7, #4]
9000de2c:	68db      	ldr	r3, [r3, #12]
9000de2e:	2bbb      	cmp	r3, #187	; 0xbb
9000de30:	d90a      	bls.n	9000de48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000de32:	687b      	ldr	r3, [r7, #4]
9000de34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000de36:	2b00      	cmp	r3, #0
9000de38:	d006      	beq.n	9000de48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000de3a:	687b      	ldr	r3, [r7, #4]
9000de3c:	695b      	ldr	r3, [r3, #20]
9000de3e:	2b00      	cmp	r3, #0
9000de40:	d002      	beq.n	9000de48 <osThreadNew+0xa8>
        mem = 1;
9000de42:	2301      	movs	r3, #1
9000de44:	61bb      	str	r3, [r7, #24]
9000de46:	e010      	b.n	9000de6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000de48:	687b      	ldr	r3, [r7, #4]
9000de4a:	689b      	ldr	r3, [r3, #8]
9000de4c:	2b00      	cmp	r3, #0
9000de4e:	d10c      	bne.n	9000de6a <osThreadNew+0xca>
9000de50:	687b      	ldr	r3, [r7, #4]
9000de52:	68db      	ldr	r3, [r3, #12]
9000de54:	2b00      	cmp	r3, #0
9000de56:	d108      	bne.n	9000de6a <osThreadNew+0xca>
9000de58:	687b      	ldr	r3, [r7, #4]
9000de5a:	691b      	ldr	r3, [r3, #16]
9000de5c:	2b00      	cmp	r3, #0
9000de5e:	d104      	bne.n	9000de6a <osThreadNew+0xca>
          mem = 0;
9000de60:	2300      	movs	r3, #0
9000de62:	61bb      	str	r3, [r7, #24]
9000de64:	e001      	b.n	9000de6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
9000de66:	2300      	movs	r3, #0
9000de68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
9000de6a:	69bb      	ldr	r3, [r7, #24]
9000de6c:	2b01      	cmp	r3, #1
9000de6e:	d110      	bne.n	9000de92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000de70:	687b      	ldr	r3, [r7, #4]
9000de72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
9000de74:	687a      	ldr	r2, [r7, #4]
9000de76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000de78:	9202      	str	r2, [sp, #8]
9000de7a:	9301      	str	r3, [sp, #4]
9000de7c:	69fb      	ldr	r3, [r7, #28]
9000de7e:	9300      	str	r3, [sp, #0]
9000de80:	68bb      	ldr	r3, [r7, #8]
9000de82:	6a3a      	ldr	r2, [r7, #32]
9000de84:	6a79      	ldr	r1, [r7, #36]	; 0x24
9000de86:	68f8      	ldr	r0, [r7, #12]
9000de88:	f000 fe0c 	bl	9000eaa4 <xTaskCreateStatic>
9000de8c:	4603      	mov	r3, r0
9000de8e:	613b      	str	r3, [r7, #16]
9000de90:	e013      	b.n	9000deba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
9000de92:	69bb      	ldr	r3, [r7, #24]
9000de94:	2b00      	cmp	r3, #0
9000de96:	d110      	bne.n	9000deba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000de98:	6a3b      	ldr	r3, [r7, #32]
9000de9a:	b29a      	uxth	r2, r3
9000de9c:	f107 0310 	add.w	r3, r7, #16
9000dea0:	9301      	str	r3, [sp, #4]
9000dea2:	69fb      	ldr	r3, [r7, #28]
9000dea4:	9300      	str	r3, [sp, #0]
9000dea6:	68bb      	ldr	r3, [r7, #8]
9000dea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
9000deaa:	68f8      	ldr	r0, [r7, #12]
9000deac:	f000 fe57 	bl	9000eb5e <xTaskCreate>
9000deb0:	4603      	mov	r3, r0
9000deb2:	2b01      	cmp	r3, #1
9000deb4:	d001      	beq.n	9000deba <osThreadNew+0x11a>
            hTask = NULL;
9000deb6:	2300      	movs	r3, #0
9000deb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
9000deba:	693b      	ldr	r3, [r7, #16]
}
9000debc:	4618      	mov	r0, r3
9000debe:	3728      	adds	r7, #40	; 0x28
9000dec0:	46bd      	mov	sp, r7
9000dec2:	bd80      	pop	{r7, pc}

9000dec4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
9000dec4:	b580      	push	{r7, lr}
9000dec6:	b084      	sub	sp, #16
9000dec8:	af00      	add	r7, sp, #0
9000deca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000decc:	f3ef 8305 	mrs	r3, IPSR
9000ded0:	60bb      	str	r3, [r7, #8]
  return(result);
9000ded2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
9000ded4:	2b00      	cmp	r3, #0
9000ded6:	d003      	beq.n	9000dee0 <osDelay+0x1c>
    stat = osErrorISR;
9000ded8:	f06f 0305 	mvn.w	r3, #5
9000dedc:	60fb      	str	r3, [r7, #12]
9000dede:	e007      	b.n	9000def0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
9000dee0:	2300      	movs	r3, #0
9000dee2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
9000dee4:	687b      	ldr	r3, [r7, #4]
9000dee6:	2b00      	cmp	r3, #0
9000dee8:	d002      	beq.n	9000def0 <osDelay+0x2c>
      vTaskDelay(ticks);
9000deea:	6878      	ldr	r0, [r7, #4]
9000deec:	f000 ff92 	bl	9000ee14 <vTaskDelay>
    }
  }

  return (stat);
9000def0:	68fb      	ldr	r3, [r7, #12]
}
9000def2:	4618      	mov	r0, r3
9000def4:	3710      	adds	r7, #16
9000def6:	46bd      	mov	sp, r7
9000def8:	bd80      	pop	{r7, pc}
	...

9000defc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000defc:	b480      	push	{r7}
9000defe:	b085      	sub	sp, #20
9000df00:	af00      	add	r7, sp, #0
9000df02:	60f8      	str	r0, [r7, #12]
9000df04:	60b9      	str	r1, [r7, #8]
9000df06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000df08:	68fb      	ldr	r3, [r7, #12]
9000df0a:	4a07      	ldr	r2, [pc, #28]	; (9000df28 <vApplicationGetIdleTaskMemory+0x2c>)
9000df0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000df0e:	68bb      	ldr	r3, [r7, #8]
9000df10:	4a06      	ldr	r2, [pc, #24]	; (9000df2c <vApplicationGetIdleTaskMemory+0x30>)
9000df12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000df14:	687b      	ldr	r3, [r7, #4]
9000df16:	2280      	movs	r2, #128	; 0x80
9000df18:	601a      	str	r2, [r3, #0]
}
9000df1a:	bf00      	nop
9000df1c:	3714      	adds	r7, #20
9000df1e:	46bd      	mov	sp, r7
9000df20:	f85d 7b04 	ldr.w	r7, [sp], #4
9000df24:	4770      	bx	lr
9000df26:	bf00      	nop
9000df28:	24000e2c 	.word	0x24000e2c
9000df2c:	24000ee8 	.word	0x24000ee8

9000df30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000df30:	b480      	push	{r7}
9000df32:	b085      	sub	sp, #20
9000df34:	af00      	add	r7, sp, #0
9000df36:	60f8      	str	r0, [r7, #12]
9000df38:	60b9      	str	r1, [r7, #8]
9000df3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000df3c:	68fb      	ldr	r3, [r7, #12]
9000df3e:	4a07      	ldr	r2, [pc, #28]	; (9000df5c <vApplicationGetTimerTaskMemory+0x2c>)
9000df40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000df42:	68bb      	ldr	r3, [r7, #8]
9000df44:	4a06      	ldr	r2, [pc, #24]	; (9000df60 <vApplicationGetTimerTaskMemory+0x30>)
9000df46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000df48:	687b      	ldr	r3, [r7, #4]
9000df4a:	f44f 7280 	mov.w	r2, #256	; 0x100
9000df4e:	601a      	str	r2, [r3, #0]
}
9000df50:	bf00      	nop
9000df52:	3714      	adds	r7, #20
9000df54:	46bd      	mov	sp, r7
9000df56:	f85d 7b04 	ldr.w	r7, [sp], #4
9000df5a:	4770      	bx	lr
9000df5c:	240010e8 	.word	0x240010e8
9000df60:	240011a4 	.word	0x240011a4

9000df64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
9000df64:	b480      	push	{r7}
9000df66:	b083      	sub	sp, #12
9000df68:	af00      	add	r7, sp, #0
9000df6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000df6c:	687b      	ldr	r3, [r7, #4]
9000df6e:	f103 0208 	add.w	r2, r3, #8
9000df72:	687b      	ldr	r3, [r7, #4]
9000df74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000df76:	687b      	ldr	r3, [r7, #4]
9000df78:	f04f 32ff 	mov.w	r2, #4294967295
9000df7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000df7e:	687b      	ldr	r3, [r7, #4]
9000df80:	f103 0208 	add.w	r2, r3, #8
9000df84:	687b      	ldr	r3, [r7, #4]
9000df86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000df88:	687b      	ldr	r3, [r7, #4]
9000df8a:	f103 0208 	add.w	r2, r3, #8
9000df8e:	687b      	ldr	r3, [r7, #4]
9000df90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000df92:	687b      	ldr	r3, [r7, #4]
9000df94:	2200      	movs	r2, #0
9000df96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000df98:	bf00      	nop
9000df9a:	370c      	adds	r7, #12
9000df9c:	46bd      	mov	sp, r7
9000df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000dfa2:	4770      	bx	lr

9000dfa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
9000dfa4:	b480      	push	{r7}
9000dfa6:	b083      	sub	sp, #12
9000dfa8:	af00      	add	r7, sp, #0
9000dfaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000dfac:	687b      	ldr	r3, [r7, #4]
9000dfae:	2200      	movs	r2, #0
9000dfb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000dfb2:	bf00      	nop
9000dfb4:	370c      	adds	r7, #12
9000dfb6:	46bd      	mov	sp, r7
9000dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000dfbc:	4770      	bx	lr

9000dfbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000dfbe:	b480      	push	{r7}
9000dfc0:	b085      	sub	sp, #20
9000dfc2:	af00      	add	r7, sp, #0
9000dfc4:	6078      	str	r0, [r7, #4]
9000dfc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
9000dfc8:	687b      	ldr	r3, [r7, #4]
9000dfca:	685b      	ldr	r3, [r3, #4]
9000dfcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
9000dfce:	683b      	ldr	r3, [r7, #0]
9000dfd0:	68fa      	ldr	r2, [r7, #12]
9000dfd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000dfd4:	68fb      	ldr	r3, [r7, #12]
9000dfd6:	689a      	ldr	r2, [r3, #8]
9000dfd8:	683b      	ldr	r3, [r7, #0]
9000dfda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000dfdc:	68fb      	ldr	r3, [r7, #12]
9000dfde:	689b      	ldr	r3, [r3, #8]
9000dfe0:	683a      	ldr	r2, [r7, #0]
9000dfe2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000dfe4:	68fb      	ldr	r3, [r7, #12]
9000dfe6:	683a      	ldr	r2, [r7, #0]
9000dfe8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
9000dfea:	683b      	ldr	r3, [r7, #0]
9000dfec:	687a      	ldr	r2, [r7, #4]
9000dfee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
9000dff0:	687b      	ldr	r3, [r7, #4]
9000dff2:	681b      	ldr	r3, [r3, #0]
9000dff4:	1c5a      	adds	r2, r3, #1
9000dff6:	687b      	ldr	r3, [r7, #4]
9000dff8:	601a      	str	r2, [r3, #0]
}
9000dffa:	bf00      	nop
9000dffc:	3714      	adds	r7, #20
9000dffe:	46bd      	mov	sp, r7
9000e000:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e004:	4770      	bx	lr

9000e006 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000e006:	b480      	push	{r7}
9000e008:	b085      	sub	sp, #20
9000e00a:	af00      	add	r7, sp, #0
9000e00c:	6078      	str	r0, [r7, #4]
9000e00e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000e010:	683b      	ldr	r3, [r7, #0]
9000e012:	681b      	ldr	r3, [r3, #0]
9000e014:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000e016:	68bb      	ldr	r3, [r7, #8]
9000e018:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e01c:	d103      	bne.n	9000e026 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
9000e01e:	687b      	ldr	r3, [r7, #4]
9000e020:	691b      	ldr	r3, [r3, #16]
9000e022:	60fb      	str	r3, [r7, #12]
9000e024:	e00c      	b.n	9000e040 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000e026:	687b      	ldr	r3, [r7, #4]
9000e028:	3308      	adds	r3, #8
9000e02a:	60fb      	str	r3, [r7, #12]
9000e02c:	e002      	b.n	9000e034 <vListInsert+0x2e>
9000e02e:	68fb      	ldr	r3, [r7, #12]
9000e030:	685b      	ldr	r3, [r3, #4]
9000e032:	60fb      	str	r3, [r7, #12]
9000e034:	68fb      	ldr	r3, [r7, #12]
9000e036:	685b      	ldr	r3, [r3, #4]
9000e038:	681b      	ldr	r3, [r3, #0]
9000e03a:	68ba      	ldr	r2, [r7, #8]
9000e03c:	429a      	cmp	r2, r3
9000e03e:	d2f6      	bcs.n	9000e02e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
9000e040:	68fb      	ldr	r3, [r7, #12]
9000e042:	685a      	ldr	r2, [r3, #4]
9000e044:	683b      	ldr	r3, [r7, #0]
9000e046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000e048:	683b      	ldr	r3, [r7, #0]
9000e04a:	685b      	ldr	r3, [r3, #4]
9000e04c:	683a      	ldr	r2, [r7, #0]
9000e04e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000e050:	683b      	ldr	r3, [r7, #0]
9000e052:	68fa      	ldr	r2, [r7, #12]
9000e054:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
9000e056:	68fb      	ldr	r3, [r7, #12]
9000e058:	683a      	ldr	r2, [r7, #0]
9000e05a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
9000e05c:	683b      	ldr	r3, [r7, #0]
9000e05e:	687a      	ldr	r2, [r7, #4]
9000e060:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
9000e062:	687b      	ldr	r3, [r7, #4]
9000e064:	681b      	ldr	r3, [r3, #0]
9000e066:	1c5a      	adds	r2, r3, #1
9000e068:	687b      	ldr	r3, [r7, #4]
9000e06a:	601a      	str	r2, [r3, #0]
}
9000e06c:	bf00      	nop
9000e06e:	3714      	adds	r7, #20
9000e070:	46bd      	mov	sp, r7
9000e072:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e076:	4770      	bx	lr

9000e078 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
9000e078:	b480      	push	{r7}
9000e07a:	b085      	sub	sp, #20
9000e07c:	af00      	add	r7, sp, #0
9000e07e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000e080:	687b      	ldr	r3, [r7, #4]
9000e082:	691b      	ldr	r3, [r3, #16]
9000e084:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000e086:	687b      	ldr	r3, [r7, #4]
9000e088:	685b      	ldr	r3, [r3, #4]
9000e08a:	687a      	ldr	r2, [r7, #4]
9000e08c:	6892      	ldr	r2, [r2, #8]
9000e08e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000e090:	687b      	ldr	r3, [r7, #4]
9000e092:	689b      	ldr	r3, [r3, #8]
9000e094:	687a      	ldr	r2, [r7, #4]
9000e096:	6852      	ldr	r2, [r2, #4]
9000e098:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000e09a:	68fb      	ldr	r3, [r7, #12]
9000e09c:	685b      	ldr	r3, [r3, #4]
9000e09e:	687a      	ldr	r2, [r7, #4]
9000e0a0:	429a      	cmp	r2, r3
9000e0a2:	d103      	bne.n	9000e0ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000e0a4:	687b      	ldr	r3, [r7, #4]
9000e0a6:	689a      	ldr	r2, [r3, #8]
9000e0a8:	68fb      	ldr	r3, [r7, #12]
9000e0aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
9000e0ac:	687b      	ldr	r3, [r7, #4]
9000e0ae:	2200      	movs	r2, #0
9000e0b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
9000e0b2:	68fb      	ldr	r3, [r7, #12]
9000e0b4:	681b      	ldr	r3, [r3, #0]
9000e0b6:	1e5a      	subs	r2, r3, #1
9000e0b8:	68fb      	ldr	r3, [r7, #12]
9000e0ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
9000e0bc:	68fb      	ldr	r3, [r7, #12]
9000e0be:	681b      	ldr	r3, [r3, #0]
}
9000e0c0:	4618      	mov	r0, r3
9000e0c2:	3714      	adds	r7, #20
9000e0c4:	46bd      	mov	sp, r7
9000e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e0ca:	4770      	bx	lr

9000e0cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
9000e0cc:	b580      	push	{r7, lr}
9000e0ce:	b084      	sub	sp, #16
9000e0d0:	af00      	add	r7, sp, #0
9000e0d2:	6078      	str	r0, [r7, #4]
9000e0d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
9000e0d6:	687b      	ldr	r3, [r7, #4]
9000e0d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
9000e0da:	68fb      	ldr	r3, [r7, #12]
9000e0dc:	2b00      	cmp	r3, #0
9000e0de:	d10a      	bne.n	9000e0f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000e0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0e4:	f383 8811 	msr	BASEPRI, r3
9000e0e8:	f3bf 8f6f 	isb	sy
9000e0ec:	f3bf 8f4f 	dsb	sy
9000e0f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
9000e0f2:	bf00      	nop
9000e0f4:	e7fe      	b.n	9000e0f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
9000e0f6:	f002 f875 	bl	900101e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0fa:	68fb      	ldr	r3, [r7, #12]
9000e0fc:	681a      	ldr	r2, [r3, #0]
9000e0fe:	68fb      	ldr	r3, [r7, #12]
9000e100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000e102:	68f9      	ldr	r1, [r7, #12]
9000e104:	6c09      	ldr	r1, [r1, #64]	; 0x40
9000e106:	fb01 f303 	mul.w	r3, r1, r3
9000e10a:	441a      	add	r2, r3
9000e10c:	68fb      	ldr	r3, [r7, #12]
9000e10e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e110:	68fb      	ldr	r3, [r7, #12]
9000e112:	2200      	movs	r2, #0
9000e114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e116:	68fb      	ldr	r3, [r7, #12]
9000e118:	681a      	ldr	r2, [r3, #0]
9000e11a:	68fb      	ldr	r3, [r7, #12]
9000e11c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e11e:	68fb      	ldr	r3, [r7, #12]
9000e120:	681a      	ldr	r2, [r3, #0]
9000e122:	68fb      	ldr	r3, [r7, #12]
9000e124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000e126:	3b01      	subs	r3, #1
9000e128:	68f9      	ldr	r1, [r7, #12]
9000e12a:	6c09      	ldr	r1, [r1, #64]	; 0x40
9000e12c:	fb01 f303 	mul.w	r3, r1, r3
9000e130:	441a      	add	r2, r3
9000e132:	68fb      	ldr	r3, [r7, #12]
9000e134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e136:	68fb      	ldr	r3, [r7, #12]
9000e138:	22ff      	movs	r2, #255	; 0xff
9000e13a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e13e:	68fb      	ldr	r3, [r7, #12]
9000e140:	22ff      	movs	r2, #255	; 0xff
9000e142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
9000e146:	683b      	ldr	r3, [r7, #0]
9000e148:	2b00      	cmp	r3, #0
9000e14a:	d114      	bne.n	9000e176 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e14c:	68fb      	ldr	r3, [r7, #12]
9000e14e:	691b      	ldr	r3, [r3, #16]
9000e150:	2b00      	cmp	r3, #0
9000e152:	d01a      	beq.n	9000e18a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e154:	68fb      	ldr	r3, [r7, #12]
9000e156:	3310      	adds	r3, #16
9000e158:	4618      	mov	r0, r3
9000e15a:	f001 f929 	bl	9000f3b0 <xTaskRemoveFromEventList>
9000e15e:	4603      	mov	r3, r0
9000e160:	2b00      	cmp	r3, #0
9000e162:	d012      	beq.n	9000e18a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
9000e164:	4b0c      	ldr	r3, [pc, #48]	; (9000e198 <xQueueGenericReset+0xcc>)
9000e166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e16a:	601a      	str	r2, [r3, #0]
9000e16c:	f3bf 8f4f 	dsb	sy
9000e170:	f3bf 8f6f 	isb	sy
9000e174:	e009      	b.n	9000e18a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e176:	68fb      	ldr	r3, [r7, #12]
9000e178:	3310      	adds	r3, #16
9000e17a:	4618      	mov	r0, r3
9000e17c:	f7ff fef2 	bl	9000df64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e180:	68fb      	ldr	r3, [r7, #12]
9000e182:	3324      	adds	r3, #36	; 0x24
9000e184:	4618      	mov	r0, r3
9000e186:	f7ff feed 	bl	9000df64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
9000e18a:	f002 f85b 	bl	90010244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
9000e18e:	2301      	movs	r3, #1
}
9000e190:	4618      	mov	r0, r3
9000e192:	3710      	adds	r7, #16
9000e194:	46bd      	mov	sp, r7
9000e196:	bd80      	pop	{r7, pc}
9000e198:	e000ed04 	.word	0xe000ed04

9000e19c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
9000e19c:	b580      	push	{r7, lr}
9000e19e:	b08e      	sub	sp, #56	; 0x38
9000e1a0:	af02      	add	r7, sp, #8
9000e1a2:	60f8      	str	r0, [r7, #12]
9000e1a4:	60b9      	str	r1, [r7, #8]
9000e1a6:	607a      	str	r2, [r7, #4]
9000e1a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000e1aa:	68fb      	ldr	r3, [r7, #12]
9000e1ac:	2b00      	cmp	r3, #0
9000e1ae:	d10a      	bne.n	9000e1c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
9000e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1b4:	f383 8811 	msr	BASEPRI, r3
9000e1b8:	f3bf 8f6f 	isb	sy
9000e1bc:	f3bf 8f4f 	dsb	sy
9000e1c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
9000e1c2:	bf00      	nop
9000e1c4:	e7fe      	b.n	9000e1c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
9000e1c6:	683b      	ldr	r3, [r7, #0]
9000e1c8:	2b00      	cmp	r3, #0
9000e1ca:	d10a      	bne.n	9000e1e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
9000e1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1d0:	f383 8811 	msr	BASEPRI, r3
9000e1d4:	f3bf 8f6f 	isb	sy
9000e1d8:	f3bf 8f4f 	dsb	sy
9000e1dc:	627b      	str	r3, [r7, #36]	; 0x24
}
9000e1de:	bf00      	nop
9000e1e0:	e7fe      	b.n	9000e1e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000e1e2:	687b      	ldr	r3, [r7, #4]
9000e1e4:	2b00      	cmp	r3, #0
9000e1e6:	d002      	beq.n	9000e1ee <xQueueGenericCreateStatic+0x52>
9000e1e8:	68bb      	ldr	r3, [r7, #8]
9000e1ea:	2b00      	cmp	r3, #0
9000e1ec:	d001      	beq.n	9000e1f2 <xQueueGenericCreateStatic+0x56>
9000e1ee:	2301      	movs	r3, #1
9000e1f0:	e000      	b.n	9000e1f4 <xQueueGenericCreateStatic+0x58>
9000e1f2:	2300      	movs	r3, #0
9000e1f4:	2b00      	cmp	r3, #0
9000e1f6:	d10a      	bne.n	9000e20e <xQueueGenericCreateStatic+0x72>
	__asm volatile
9000e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1fc:	f383 8811 	msr	BASEPRI, r3
9000e200:	f3bf 8f6f 	isb	sy
9000e204:	f3bf 8f4f 	dsb	sy
9000e208:	623b      	str	r3, [r7, #32]
}
9000e20a:	bf00      	nop
9000e20c:	e7fe      	b.n	9000e20c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e20e:	687b      	ldr	r3, [r7, #4]
9000e210:	2b00      	cmp	r3, #0
9000e212:	d102      	bne.n	9000e21a <xQueueGenericCreateStatic+0x7e>
9000e214:	68bb      	ldr	r3, [r7, #8]
9000e216:	2b00      	cmp	r3, #0
9000e218:	d101      	bne.n	9000e21e <xQueueGenericCreateStatic+0x82>
9000e21a:	2301      	movs	r3, #1
9000e21c:	e000      	b.n	9000e220 <xQueueGenericCreateStatic+0x84>
9000e21e:	2300      	movs	r3, #0
9000e220:	2b00      	cmp	r3, #0
9000e222:	d10a      	bne.n	9000e23a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
9000e224:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e228:	f383 8811 	msr	BASEPRI, r3
9000e22c:	f3bf 8f6f 	isb	sy
9000e230:	f3bf 8f4f 	dsb	sy
9000e234:	61fb      	str	r3, [r7, #28]
}
9000e236:	bf00      	nop
9000e238:	e7fe      	b.n	9000e238 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e23a:	2350      	movs	r3, #80	; 0x50
9000e23c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e23e:	697b      	ldr	r3, [r7, #20]
9000e240:	2b50      	cmp	r3, #80	; 0x50
9000e242:	d00a      	beq.n	9000e25a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
9000e244:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e248:	f383 8811 	msr	BASEPRI, r3
9000e24c:	f3bf 8f6f 	isb	sy
9000e250:	f3bf 8f4f 	dsb	sy
9000e254:	61bb      	str	r3, [r7, #24]
}
9000e256:	bf00      	nop
9000e258:	e7fe      	b.n	9000e258 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e25a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
9000e25c:	683b      	ldr	r3, [r7, #0]
9000e25e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
9000e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e262:	2b00      	cmp	r3, #0
9000e264:	d00d      	beq.n	9000e282 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e268:	2201      	movs	r2, #1
9000e26a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
9000e26e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
9000e272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e274:	9300      	str	r3, [sp, #0]
9000e276:	4613      	mov	r3, r2
9000e278:	687a      	ldr	r2, [r7, #4]
9000e27a:	68b9      	ldr	r1, [r7, #8]
9000e27c:	68f8      	ldr	r0, [r7, #12]
9000e27e:	f000 f805 	bl	9000e28c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
9000e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
9000e284:	4618      	mov	r0, r3
9000e286:	3730      	adds	r7, #48	; 0x30
9000e288:	46bd      	mov	sp, r7
9000e28a:	bd80      	pop	{r7, pc}

9000e28c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
9000e28c:	b580      	push	{r7, lr}
9000e28e:	b084      	sub	sp, #16
9000e290:	af00      	add	r7, sp, #0
9000e292:	60f8      	str	r0, [r7, #12]
9000e294:	60b9      	str	r1, [r7, #8]
9000e296:	607a      	str	r2, [r7, #4]
9000e298:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
9000e29a:	68bb      	ldr	r3, [r7, #8]
9000e29c:	2b00      	cmp	r3, #0
9000e29e:	d103      	bne.n	9000e2a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e2a0:	69bb      	ldr	r3, [r7, #24]
9000e2a2:	69ba      	ldr	r2, [r7, #24]
9000e2a4:	601a      	str	r2, [r3, #0]
9000e2a6:	e002      	b.n	9000e2ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000e2a8:	69bb      	ldr	r3, [r7, #24]
9000e2aa:	687a      	ldr	r2, [r7, #4]
9000e2ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
9000e2ae:	69bb      	ldr	r3, [r7, #24]
9000e2b0:	68fa      	ldr	r2, [r7, #12]
9000e2b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000e2b4:	69bb      	ldr	r3, [r7, #24]
9000e2b6:	68ba      	ldr	r2, [r7, #8]
9000e2b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
9000e2ba:	2101      	movs	r1, #1
9000e2bc:	69b8      	ldr	r0, [r7, #24]
9000e2be:	f7ff ff05 	bl	9000e0cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
9000e2c2:	69bb      	ldr	r3, [r7, #24]
9000e2c4:	78fa      	ldrb	r2, [r7, #3]
9000e2c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
9000e2ca:	bf00      	nop
9000e2cc:	3710      	adds	r7, #16
9000e2ce:	46bd      	mov	sp, r7
9000e2d0:	bd80      	pop	{r7, pc}
	...

9000e2d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
9000e2d4:	b580      	push	{r7, lr}
9000e2d6:	b08e      	sub	sp, #56	; 0x38
9000e2d8:	af00      	add	r7, sp, #0
9000e2da:	60f8      	str	r0, [r7, #12]
9000e2dc:	60b9      	str	r1, [r7, #8]
9000e2de:	607a      	str	r2, [r7, #4]
9000e2e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
9000e2e2:	2300      	movs	r3, #0
9000e2e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
9000e2e6:	68fb      	ldr	r3, [r7, #12]
9000e2e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
9000e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e2ec:	2b00      	cmp	r3, #0
9000e2ee:	d10a      	bne.n	9000e306 <xQueueGenericSend+0x32>
	__asm volatile
9000e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e2f4:	f383 8811 	msr	BASEPRI, r3
9000e2f8:	f3bf 8f6f 	isb	sy
9000e2fc:	f3bf 8f4f 	dsb	sy
9000e300:	62bb      	str	r3, [r7, #40]	; 0x28
}
9000e302:	bf00      	nop
9000e304:	e7fe      	b.n	9000e304 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e306:	68bb      	ldr	r3, [r7, #8]
9000e308:	2b00      	cmp	r3, #0
9000e30a:	d103      	bne.n	9000e314 <xQueueGenericSend+0x40>
9000e30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e310:	2b00      	cmp	r3, #0
9000e312:	d101      	bne.n	9000e318 <xQueueGenericSend+0x44>
9000e314:	2301      	movs	r3, #1
9000e316:	e000      	b.n	9000e31a <xQueueGenericSend+0x46>
9000e318:	2300      	movs	r3, #0
9000e31a:	2b00      	cmp	r3, #0
9000e31c:	d10a      	bne.n	9000e334 <xQueueGenericSend+0x60>
	__asm volatile
9000e31e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e322:	f383 8811 	msr	BASEPRI, r3
9000e326:	f3bf 8f6f 	isb	sy
9000e32a:	f3bf 8f4f 	dsb	sy
9000e32e:	627b      	str	r3, [r7, #36]	; 0x24
}
9000e330:	bf00      	nop
9000e332:	e7fe      	b.n	9000e332 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000e334:	683b      	ldr	r3, [r7, #0]
9000e336:	2b02      	cmp	r3, #2
9000e338:	d103      	bne.n	9000e342 <xQueueGenericSend+0x6e>
9000e33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000e33e:	2b01      	cmp	r3, #1
9000e340:	d101      	bne.n	9000e346 <xQueueGenericSend+0x72>
9000e342:	2301      	movs	r3, #1
9000e344:	e000      	b.n	9000e348 <xQueueGenericSend+0x74>
9000e346:	2300      	movs	r3, #0
9000e348:	2b00      	cmp	r3, #0
9000e34a:	d10a      	bne.n	9000e362 <xQueueGenericSend+0x8e>
	__asm volatile
9000e34c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e350:	f383 8811 	msr	BASEPRI, r3
9000e354:	f3bf 8f6f 	isb	sy
9000e358:	f3bf 8f4f 	dsb	sy
9000e35c:	623b      	str	r3, [r7, #32]
}
9000e35e:	bf00      	nop
9000e360:	e7fe      	b.n	9000e360 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e362:	f001 f9e7 	bl	9000f734 <xTaskGetSchedulerState>
9000e366:	4603      	mov	r3, r0
9000e368:	2b00      	cmp	r3, #0
9000e36a:	d102      	bne.n	9000e372 <xQueueGenericSend+0x9e>
9000e36c:	687b      	ldr	r3, [r7, #4]
9000e36e:	2b00      	cmp	r3, #0
9000e370:	d101      	bne.n	9000e376 <xQueueGenericSend+0xa2>
9000e372:	2301      	movs	r3, #1
9000e374:	e000      	b.n	9000e378 <xQueueGenericSend+0xa4>
9000e376:	2300      	movs	r3, #0
9000e378:	2b00      	cmp	r3, #0
9000e37a:	d10a      	bne.n	9000e392 <xQueueGenericSend+0xbe>
	__asm volatile
9000e37c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e380:	f383 8811 	msr	BASEPRI, r3
9000e384:	f3bf 8f6f 	isb	sy
9000e388:	f3bf 8f4f 	dsb	sy
9000e38c:	61fb      	str	r3, [r7, #28]
}
9000e38e:	bf00      	nop
9000e390:	e7fe      	b.n	9000e390 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
9000e392:	f001 ff27 	bl	900101e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000e39e:	429a      	cmp	r2, r3
9000e3a0:	d302      	bcc.n	9000e3a8 <xQueueGenericSend+0xd4>
9000e3a2:	683b      	ldr	r3, [r7, #0]
9000e3a4:	2b02      	cmp	r3, #2
9000e3a6:	d129      	bne.n	9000e3fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e3a8:	683a      	ldr	r2, [r7, #0]
9000e3aa:	68b9      	ldr	r1, [r7, #8]
9000e3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000e3ae:	f000 fa0b 	bl	9000e7c8 <prvCopyDataToQueue>
9000e3b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000e3b8:	2b00      	cmp	r3, #0
9000e3ba:	d010      	beq.n	9000e3de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e3be:	3324      	adds	r3, #36	; 0x24
9000e3c0:	4618      	mov	r0, r3
9000e3c2:	f000 fff5 	bl	9000f3b0 <xTaskRemoveFromEventList>
9000e3c6:	4603      	mov	r3, r0
9000e3c8:	2b00      	cmp	r3, #0
9000e3ca:	d013      	beq.n	9000e3f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
9000e3cc:	4b3f      	ldr	r3, [pc, #252]	; (9000e4cc <xQueueGenericSend+0x1f8>)
9000e3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e3d2:	601a      	str	r2, [r3, #0]
9000e3d4:	f3bf 8f4f 	dsb	sy
9000e3d8:	f3bf 8f6f 	isb	sy
9000e3dc:	e00a      	b.n	9000e3f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
9000e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e3e0:	2b00      	cmp	r3, #0
9000e3e2:	d007      	beq.n	9000e3f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
9000e3e4:	4b39      	ldr	r3, [pc, #228]	; (9000e4cc <xQueueGenericSend+0x1f8>)
9000e3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e3ea:	601a      	str	r2, [r3, #0]
9000e3ec:	f3bf 8f4f 	dsb	sy
9000e3f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
9000e3f4:	f001 ff26 	bl	90010244 <vPortExitCritical>
				return pdPASS;
9000e3f8:	2301      	movs	r3, #1
9000e3fa:	e063      	b.n	9000e4c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
9000e3fc:	687b      	ldr	r3, [r7, #4]
9000e3fe:	2b00      	cmp	r3, #0
9000e400:	d103      	bne.n	9000e40a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
9000e402:	f001 ff1f 	bl	90010244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
9000e406:	2300      	movs	r3, #0
9000e408:	e05c      	b.n	9000e4c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
9000e40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e40c:	2b00      	cmp	r3, #0
9000e40e:	d106      	bne.n	9000e41e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e410:	f107 0314 	add.w	r3, r7, #20
9000e414:	4618      	mov	r0, r3
9000e416:	f001 f82f 	bl	9000f478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000e41a:	2301      	movs	r3, #1
9000e41c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
9000e41e:	f001 ff11 	bl	90010244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
9000e422:	f000 fd9b 	bl	9000ef5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e426:	f001 fedd 	bl	900101e4 <vPortEnterCritical>
9000e42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e42c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
9000e430:	b25b      	sxtb	r3, r3
9000e432:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e436:	d103      	bne.n	9000e440 <xQueueGenericSend+0x16c>
9000e438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e43a:	2200      	movs	r2, #0
9000e43c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000e440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000e446:	b25b      	sxtb	r3, r3
9000e448:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e44c:	d103      	bne.n	9000e456 <xQueueGenericSend+0x182>
9000e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e450:	2200      	movs	r2, #0
9000e452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
9000e456:	f001 fef5 	bl	90010244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e45a:	1d3a      	adds	r2, r7, #4
9000e45c:	f107 0314 	add.w	r3, r7, #20
9000e460:	4611      	mov	r1, r2
9000e462:	4618      	mov	r0, r3
9000e464:	f001 f81e 	bl	9000f4a4 <xTaskCheckForTimeOut>
9000e468:	4603      	mov	r3, r0
9000e46a:	2b00      	cmp	r3, #0
9000e46c:	d124      	bne.n	9000e4b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
9000e46e:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000e470:	f000 faa2 	bl	9000e9b8 <prvIsQueueFull>
9000e474:	4603      	mov	r3, r0
9000e476:	2b00      	cmp	r3, #0
9000e478:	d018      	beq.n	9000e4ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000e47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000e47c:	3310      	adds	r3, #16
9000e47e:	687a      	ldr	r2, [r7, #4]
9000e480:	4611      	mov	r1, r2
9000e482:	4618      	mov	r0, r3
9000e484:	f000 ff44 	bl	9000f310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
9000e488:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000e48a:	f000 fa2d 	bl	9000e8e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
9000e48e:	f000 fd73 	bl	9000ef78 <xTaskResumeAll>
9000e492:	4603      	mov	r3, r0
9000e494:	2b00      	cmp	r3, #0
9000e496:	f47f af7c 	bne.w	9000e392 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
9000e49a:	4b0c      	ldr	r3, [pc, #48]	; (9000e4cc <xQueueGenericSend+0x1f8>)
9000e49c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e4a0:	601a      	str	r2, [r3, #0]
9000e4a2:	f3bf 8f4f 	dsb	sy
9000e4a6:	f3bf 8f6f 	isb	sy
9000e4aa:	e772      	b.n	9000e392 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
9000e4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000e4ae:	f000 fa1b 	bl	9000e8e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
9000e4b2:	f000 fd61 	bl	9000ef78 <xTaskResumeAll>
9000e4b6:	e76c      	b.n	9000e392 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
9000e4b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000e4ba:	f000 fa15 	bl	9000e8e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
9000e4be:	f000 fd5b 	bl	9000ef78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
9000e4c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
9000e4c4:	4618      	mov	r0, r3
9000e4c6:	3738      	adds	r7, #56	; 0x38
9000e4c8:	46bd      	mov	sp, r7
9000e4ca:	bd80      	pop	{r7, pc}
9000e4cc:	e000ed04 	.word	0xe000ed04

9000e4d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
9000e4d0:	b580      	push	{r7, lr}
9000e4d2:	b090      	sub	sp, #64	; 0x40
9000e4d4:	af00      	add	r7, sp, #0
9000e4d6:	60f8      	str	r0, [r7, #12]
9000e4d8:	60b9      	str	r1, [r7, #8]
9000e4da:	607a      	str	r2, [r7, #4]
9000e4dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
9000e4de:	68fb      	ldr	r3, [r7, #12]
9000e4e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
9000e4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e4e4:	2b00      	cmp	r3, #0
9000e4e6:	d10a      	bne.n	9000e4fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
9000e4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e4ec:	f383 8811 	msr	BASEPRI, r3
9000e4f0:	f3bf 8f6f 	isb	sy
9000e4f4:	f3bf 8f4f 	dsb	sy
9000e4f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
9000e4fa:	bf00      	nop
9000e4fc:	e7fe      	b.n	9000e4fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e4fe:	68bb      	ldr	r3, [r7, #8]
9000e500:	2b00      	cmp	r3, #0
9000e502:	d103      	bne.n	9000e50c <xQueueGenericSendFromISR+0x3c>
9000e504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e508:	2b00      	cmp	r3, #0
9000e50a:	d101      	bne.n	9000e510 <xQueueGenericSendFromISR+0x40>
9000e50c:	2301      	movs	r3, #1
9000e50e:	e000      	b.n	9000e512 <xQueueGenericSendFromISR+0x42>
9000e510:	2300      	movs	r3, #0
9000e512:	2b00      	cmp	r3, #0
9000e514:	d10a      	bne.n	9000e52c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
9000e516:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e51a:	f383 8811 	msr	BASEPRI, r3
9000e51e:	f3bf 8f6f 	isb	sy
9000e522:	f3bf 8f4f 	dsb	sy
9000e526:	627b      	str	r3, [r7, #36]	; 0x24
}
9000e528:	bf00      	nop
9000e52a:	e7fe      	b.n	9000e52a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000e52c:	683b      	ldr	r3, [r7, #0]
9000e52e:	2b02      	cmp	r3, #2
9000e530:	d103      	bne.n	9000e53a <xQueueGenericSendFromISR+0x6a>
9000e532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000e536:	2b01      	cmp	r3, #1
9000e538:	d101      	bne.n	9000e53e <xQueueGenericSendFromISR+0x6e>
9000e53a:	2301      	movs	r3, #1
9000e53c:	e000      	b.n	9000e540 <xQueueGenericSendFromISR+0x70>
9000e53e:	2300      	movs	r3, #0
9000e540:	2b00      	cmp	r3, #0
9000e542:	d10a      	bne.n	9000e55a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
9000e544:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e548:	f383 8811 	msr	BASEPRI, r3
9000e54c:	f3bf 8f6f 	isb	sy
9000e550:	f3bf 8f4f 	dsb	sy
9000e554:	623b      	str	r3, [r7, #32]
}
9000e556:	bf00      	nop
9000e558:	e7fe      	b.n	9000e558 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000e55a:	f001 ff25 	bl	900103a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
9000e55e:	f3ef 8211 	mrs	r2, BASEPRI
9000e562:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e566:	f383 8811 	msr	BASEPRI, r3
9000e56a:	f3bf 8f6f 	isb	sy
9000e56e:	f3bf 8f4f 	dsb	sy
9000e572:	61fa      	str	r2, [r7, #28]
9000e574:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
9000e576:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
9000e578:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e57c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000e57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000e582:	429a      	cmp	r2, r3
9000e584:	d302      	bcc.n	9000e58c <xQueueGenericSendFromISR+0xbc>
9000e586:	683b      	ldr	r3, [r7, #0]
9000e588:	2b02      	cmp	r3, #2
9000e58a:	d12f      	bne.n	9000e5ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
9000e58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e58e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000e592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000e59a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e59c:	683a      	ldr	r2, [r7, #0]
9000e59e:	68b9      	ldr	r1, [r7, #8]
9000e5a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
9000e5a2:	f000 f911 	bl	9000e7c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
9000e5a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
9000e5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e5ae:	d112      	bne.n	9000e5d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000e5b4:	2b00      	cmp	r3, #0
9000e5b6:	d016      	beq.n	9000e5e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e5ba:	3324      	adds	r3, #36	; 0x24
9000e5bc:	4618      	mov	r0, r3
9000e5be:	f000 fef7 	bl	9000f3b0 <xTaskRemoveFromEventList>
9000e5c2:	4603      	mov	r3, r0
9000e5c4:	2b00      	cmp	r3, #0
9000e5c6:	d00e      	beq.n	9000e5e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
9000e5c8:	687b      	ldr	r3, [r7, #4]
9000e5ca:	2b00      	cmp	r3, #0
9000e5cc:	d00b      	beq.n	9000e5e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e5ce:	687b      	ldr	r3, [r7, #4]
9000e5d0:	2201      	movs	r2, #1
9000e5d2:	601a      	str	r2, [r3, #0]
9000e5d4:	e007      	b.n	9000e5e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e5d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
9000e5da:	3301      	adds	r3, #1
9000e5dc:	b2db      	uxtb	r3, r3
9000e5de:	b25a      	sxtb	r2, r3
9000e5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000e5e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
9000e5e6:	2301      	movs	r3, #1
9000e5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
9000e5ea:	e001      	b.n	9000e5f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
9000e5ec:	2300      	movs	r3, #0
9000e5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
9000e5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000e5f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000e5f4:	697b      	ldr	r3, [r7, #20]
9000e5f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
9000e5fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
9000e5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
9000e5fe:	4618      	mov	r0, r3
9000e600:	3740      	adds	r7, #64	; 0x40
9000e602:	46bd      	mov	sp, r7
9000e604:	bd80      	pop	{r7, pc}
	...

9000e608 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
9000e608:	b580      	push	{r7, lr}
9000e60a:	b08c      	sub	sp, #48	; 0x30
9000e60c:	af00      	add	r7, sp, #0
9000e60e:	60f8      	str	r0, [r7, #12]
9000e610:	60b9      	str	r1, [r7, #8]
9000e612:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
9000e614:	2300      	movs	r3, #0
9000e616:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
9000e618:	68fb      	ldr	r3, [r7, #12]
9000e61a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
9000e61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e61e:	2b00      	cmp	r3, #0
9000e620:	d10a      	bne.n	9000e638 <xQueueReceive+0x30>
	__asm volatile
9000e622:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e626:	f383 8811 	msr	BASEPRI, r3
9000e62a:	f3bf 8f6f 	isb	sy
9000e62e:	f3bf 8f4f 	dsb	sy
9000e632:	623b      	str	r3, [r7, #32]
}
9000e634:	bf00      	nop
9000e636:	e7fe      	b.n	9000e636 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e638:	68bb      	ldr	r3, [r7, #8]
9000e63a:	2b00      	cmp	r3, #0
9000e63c:	d103      	bne.n	9000e646 <xQueueReceive+0x3e>
9000e63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e642:	2b00      	cmp	r3, #0
9000e644:	d101      	bne.n	9000e64a <xQueueReceive+0x42>
9000e646:	2301      	movs	r3, #1
9000e648:	e000      	b.n	9000e64c <xQueueReceive+0x44>
9000e64a:	2300      	movs	r3, #0
9000e64c:	2b00      	cmp	r3, #0
9000e64e:	d10a      	bne.n	9000e666 <xQueueReceive+0x5e>
	__asm volatile
9000e650:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e654:	f383 8811 	msr	BASEPRI, r3
9000e658:	f3bf 8f6f 	isb	sy
9000e65c:	f3bf 8f4f 	dsb	sy
9000e660:	61fb      	str	r3, [r7, #28]
}
9000e662:	bf00      	nop
9000e664:	e7fe      	b.n	9000e664 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e666:	f001 f865 	bl	9000f734 <xTaskGetSchedulerState>
9000e66a:	4603      	mov	r3, r0
9000e66c:	2b00      	cmp	r3, #0
9000e66e:	d102      	bne.n	9000e676 <xQueueReceive+0x6e>
9000e670:	687b      	ldr	r3, [r7, #4]
9000e672:	2b00      	cmp	r3, #0
9000e674:	d101      	bne.n	9000e67a <xQueueReceive+0x72>
9000e676:	2301      	movs	r3, #1
9000e678:	e000      	b.n	9000e67c <xQueueReceive+0x74>
9000e67a:	2300      	movs	r3, #0
9000e67c:	2b00      	cmp	r3, #0
9000e67e:	d10a      	bne.n	9000e696 <xQueueReceive+0x8e>
	__asm volatile
9000e680:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e684:	f383 8811 	msr	BASEPRI, r3
9000e688:	f3bf 8f6f 	isb	sy
9000e68c:	f3bf 8f4f 	dsb	sy
9000e690:	61bb      	str	r3, [r7, #24]
}
9000e692:	bf00      	nop
9000e694:	e7fe      	b.n	9000e694 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
9000e696:	f001 fda5 	bl	900101e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000e69e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000e6a2:	2b00      	cmp	r3, #0
9000e6a4:	d01f      	beq.n	9000e6e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
9000e6a6:	68b9      	ldr	r1, [r7, #8]
9000e6a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000e6aa:	f000 f8f7 	bl	9000e89c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000e6b0:	1e5a      	subs	r2, r3, #1
9000e6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e6b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e6b8:	691b      	ldr	r3, [r3, #16]
9000e6ba:	2b00      	cmp	r3, #0
9000e6bc:	d00f      	beq.n	9000e6de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e6c0:	3310      	adds	r3, #16
9000e6c2:	4618      	mov	r0, r3
9000e6c4:	f000 fe74 	bl	9000f3b0 <xTaskRemoveFromEventList>
9000e6c8:	4603      	mov	r3, r0
9000e6ca:	2b00      	cmp	r3, #0
9000e6cc:	d007      	beq.n	9000e6de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
9000e6ce:	4b3d      	ldr	r3, [pc, #244]	; (9000e7c4 <xQueueReceive+0x1bc>)
9000e6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e6d4:	601a      	str	r2, [r3, #0]
9000e6d6:	f3bf 8f4f 	dsb	sy
9000e6da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
9000e6de:	f001 fdb1 	bl	90010244 <vPortExitCritical>
				return pdPASS;
9000e6e2:	2301      	movs	r3, #1
9000e6e4:	e069      	b.n	9000e7ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
9000e6e6:	687b      	ldr	r3, [r7, #4]
9000e6e8:	2b00      	cmp	r3, #0
9000e6ea:	d103      	bne.n	9000e6f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
9000e6ec:	f001 fdaa 	bl	90010244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
9000e6f0:	2300      	movs	r3, #0
9000e6f2:	e062      	b.n	9000e7ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
9000e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000e6f6:	2b00      	cmp	r3, #0
9000e6f8:	d106      	bne.n	9000e708 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e6fa:	f107 0310 	add.w	r3, r7, #16
9000e6fe:	4618      	mov	r0, r3
9000e700:	f000 feba 	bl	9000f478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000e704:	2301      	movs	r3, #1
9000e706:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
9000e708:	f001 fd9c 	bl	90010244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
9000e70c:	f000 fc26 	bl	9000ef5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e710:	f001 fd68 	bl	900101e4 <vPortEnterCritical>
9000e714:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
9000e71a:	b25b      	sxtb	r3, r3
9000e71c:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e720:	d103      	bne.n	9000e72a <xQueueReceive+0x122>
9000e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e724:	2200      	movs	r2, #0
9000e726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e72c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000e730:	b25b      	sxtb	r3, r3
9000e732:	f1b3 3fff 	cmp.w	r3, #4294967295
9000e736:	d103      	bne.n	9000e740 <xQueueReceive+0x138>
9000e738:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e73a:	2200      	movs	r2, #0
9000e73c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
9000e740:	f001 fd80 	bl	90010244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e744:	1d3a      	adds	r2, r7, #4
9000e746:	f107 0310 	add.w	r3, r7, #16
9000e74a:	4611      	mov	r1, r2
9000e74c:	4618      	mov	r0, r3
9000e74e:	f000 fea9 	bl	9000f4a4 <xTaskCheckForTimeOut>
9000e752:	4603      	mov	r3, r0
9000e754:	2b00      	cmp	r3, #0
9000e756:	d123      	bne.n	9000e7a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
9000e758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000e75a:	f000 f917 	bl	9000e98c <prvIsQueueEmpty>
9000e75e:	4603      	mov	r3, r0
9000e760:	2b00      	cmp	r3, #0
9000e762:	d017      	beq.n	9000e794 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000e766:	3324      	adds	r3, #36	; 0x24
9000e768:	687a      	ldr	r2, [r7, #4]
9000e76a:	4611      	mov	r1, r2
9000e76c:	4618      	mov	r0, r3
9000e76e:	f000 fdcf 	bl	9000f310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
9000e772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000e774:	f000 f8b8 	bl	9000e8e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
9000e778:	f000 fbfe 	bl	9000ef78 <xTaskResumeAll>
9000e77c:	4603      	mov	r3, r0
9000e77e:	2b00      	cmp	r3, #0
9000e780:	d189      	bne.n	9000e696 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
9000e782:	4b10      	ldr	r3, [pc, #64]	; (9000e7c4 <xQueueReceive+0x1bc>)
9000e784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e788:	601a      	str	r2, [r3, #0]
9000e78a:	f3bf 8f4f 	dsb	sy
9000e78e:	f3bf 8f6f 	isb	sy
9000e792:	e780      	b.n	9000e696 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
9000e794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000e796:	f000 f8a7 	bl	9000e8e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
9000e79a:	f000 fbed 	bl	9000ef78 <xTaskResumeAll>
9000e79e:	e77a      	b.n	9000e696 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
9000e7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000e7a2:	f000 f8a1 	bl	9000e8e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
9000e7a6:	f000 fbe7 	bl	9000ef78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
9000e7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000e7ac:	f000 f8ee 	bl	9000e98c <prvIsQueueEmpty>
9000e7b0:	4603      	mov	r3, r0
9000e7b2:	2b00      	cmp	r3, #0
9000e7b4:	f43f af6f 	beq.w	9000e696 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
9000e7b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
9000e7ba:	4618      	mov	r0, r3
9000e7bc:	3730      	adds	r7, #48	; 0x30
9000e7be:	46bd      	mov	sp, r7
9000e7c0:	bd80      	pop	{r7, pc}
9000e7c2:	bf00      	nop
9000e7c4:	e000ed04 	.word	0xe000ed04

9000e7c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000e7c8:	b580      	push	{r7, lr}
9000e7ca:	b086      	sub	sp, #24
9000e7cc:	af00      	add	r7, sp, #0
9000e7ce:	60f8      	str	r0, [r7, #12]
9000e7d0:	60b9      	str	r1, [r7, #8]
9000e7d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
9000e7d4:	2300      	movs	r3, #0
9000e7d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e7d8:	68fb      	ldr	r3, [r7, #12]
9000e7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000e7dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000e7de:	68fb      	ldr	r3, [r7, #12]
9000e7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e7e2:	2b00      	cmp	r3, #0
9000e7e4:	d10d      	bne.n	9000e802 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000e7e6:	68fb      	ldr	r3, [r7, #12]
9000e7e8:	681b      	ldr	r3, [r3, #0]
9000e7ea:	2b00      	cmp	r3, #0
9000e7ec:	d14d      	bne.n	9000e88a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000e7ee:	68fb      	ldr	r3, [r7, #12]
9000e7f0:	689b      	ldr	r3, [r3, #8]
9000e7f2:	4618      	mov	r0, r3
9000e7f4:	f000 ffbc 	bl	9000f770 <xTaskPriorityDisinherit>
9000e7f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000e7fa:	68fb      	ldr	r3, [r7, #12]
9000e7fc:	2200      	movs	r2, #0
9000e7fe:	609a      	str	r2, [r3, #8]
9000e800:	e043      	b.n	9000e88a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
9000e802:	687b      	ldr	r3, [r7, #4]
9000e804:	2b00      	cmp	r3, #0
9000e806:	d119      	bne.n	9000e83c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000e808:	68fb      	ldr	r3, [r7, #12]
9000e80a:	6858      	ldr	r0, [r3, #4]
9000e80c:	68fb      	ldr	r3, [r7, #12]
9000e80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e810:	461a      	mov	r2, r3
9000e812:	68b9      	ldr	r1, [r7, #8]
9000e814:	f002 fc0f 	bl	90011036 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e818:	68fb      	ldr	r3, [r7, #12]
9000e81a:	685a      	ldr	r2, [r3, #4]
9000e81c:	68fb      	ldr	r3, [r7, #12]
9000e81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e820:	441a      	add	r2, r3
9000e822:	68fb      	ldr	r3, [r7, #12]
9000e824:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e826:	68fb      	ldr	r3, [r7, #12]
9000e828:	685a      	ldr	r2, [r3, #4]
9000e82a:	68fb      	ldr	r3, [r7, #12]
9000e82c:	689b      	ldr	r3, [r3, #8]
9000e82e:	429a      	cmp	r2, r3
9000e830:	d32b      	bcc.n	9000e88a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000e832:	68fb      	ldr	r3, [r7, #12]
9000e834:	681a      	ldr	r2, [r3, #0]
9000e836:	68fb      	ldr	r3, [r7, #12]
9000e838:	605a      	str	r2, [r3, #4]
9000e83a:	e026      	b.n	9000e88a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000e83c:	68fb      	ldr	r3, [r7, #12]
9000e83e:	68d8      	ldr	r0, [r3, #12]
9000e840:	68fb      	ldr	r3, [r7, #12]
9000e842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e844:	461a      	mov	r2, r3
9000e846:	68b9      	ldr	r1, [r7, #8]
9000e848:	f002 fbf5 	bl	90011036 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000e84c:	68fb      	ldr	r3, [r7, #12]
9000e84e:	68da      	ldr	r2, [r3, #12]
9000e850:	68fb      	ldr	r3, [r7, #12]
9000e852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e854:	425b      	negs	r3, r3
9000e856:	441a      	add	r2, r3
9000e858:	68fb      	ldr	r3, [r7, #12]
9000e85a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000e85c:	68fb      	ldr	r3, [r7, #12]
9000e85e:	68da      	ldr	r2, [r3, #12]
9000e860:	68fb      	ldr	r3, [r7, #12]
9000e862:	681b      	ldr	r3, [r3, #0]
9000e864:	429a      	cmp	r2, r3
9000e866:	d207      	bcs.n	9000e878 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000e868:	68fb      	ldr	r3, [r7, #12]
9000e86a:	689a      	ldr	r2, [r3, #8]
9000e86c:	68fb      	ldr	r3, [r7, #12]
9000e86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e870:	425b      	negs	r3, r3
9000e872:	441a      	add	r2, r3
9000e874:	68fb      	ldr	r3, [r7, #12]
9000e876:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
9000e878:	687b      	ldr	r3, [r7, #4]
9000e87a:	2b02      	cmp	r3, #2
9000e87c:	d105      	bne.n	9000e88a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e87e:	693b      	ldr	r3, [r7, #16]
9000e880:	2b00      	cmp	r3, #0
9000e882:	d002      	beq.n	9000e88a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
9000e884:	693b      	ldr	r3, [r7, #16]
9000e886:	3b01      	subs	r3, #1
9000e888:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e88a:	693b      	ldr	r3, [r7, #16]
9000e88c:	1c5a      	adds	r2, r3, #1
9000e88e:	68fb      	ldr	r3, [r7, #12]
9000e890:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
9000e892:	697b      	ldr	r3, [r7, #20]
}
9000e894:	4618      	mov	r0, r3
9000e896:	3718      	adds	r7, #24
9000e898:	46bd      	mov	sp, r7
9000e89a:	bd80      	pop	{r7, pc}

9000e89c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
9000e89c:	b580      	push	{r7, lr}
9000e89e:	b082      	sub	sp, #8
9000e8a0:	af00      	add	r7, sp, #0
9000e8a2:	6078      	str	r0, [r7, #4]
9000e8a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000e8a6:	687b      	ldr	r3, [r7, #4]
9000e8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e8aa:	2b00      	cmp	r3, #0
9000e8ac:	d018      	beq.n	9000e8e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e8ae:	687b      	ldr	r3, [r7, #4]
9000e8b0:	68da      	ldr	r2, [r3, #12]
9000e8b2:	687b      	ldr	r3, [r7, #4]
9000e8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e8b6:	441a      	add	r2, r3
9000e8b8:	687b      	ldr	r3, [r7, #4]
9000e8ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e8bc:	687b      	ldr	r3, [r7, #4]
9000e8be:	68da      	ldr	r2, [r3, #12]
9000e8c0:	687b      	ldr	r3, [r7, #4]
9000e8c2:	689b      	ldr	r3, [r3, #8]
9000e8c4:	429a      	cmp	r2, r3
9000e8c6:	d303      	bcc.n	9000e8d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000e8c8:	687b      	ldr	r3, [r7, #4]
9000e8ca:	681a      	ldr	r2, [r3, #0]
9000e8cc:	687b      	ldr	r3, [r7, #4]
9000e8ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000e8d0:	687b      	ldr	r3, [r7, #4]
9000e8d2:	68d9      	ldr	r1, [r3, #12]
9000e8d4:	687b      	ldr	r3, [r7, #4]
9000e8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000e8d8:	461a      	mov	r2, r3
9000e8da:	6838      	ldr	r0, [r7, #0]
9000e8dc:	f002 fbab 	bl	90011036 <memcpy>
	}
}
9000e8e0:	bf00      	nop
9000e8e2:	3708      	adds	r7, #8
9000e8e4:	46bd      	mov	sp, r7
9000e8e6:	bd80      	pop	{r7, pc}

9000e8e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
9000e8e8:	b580      	push	{r7, lr}
9000e8ea:	b084      	sub	sp, #16
9000e8ec:	af00      	add	r7, sp, #0
9000e8ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
9000e8f0:	f001 fc78 	bl	900101e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
9000e8f4:	687b      	ldr	r3, [r7, #4]
9000e8f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000e8fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e8fc:	e011      	b.n	9000e922 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e8fe:	687b      	ldr	r3, [r7, #4]
9000e900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000e902:	2b00      	cmp	r3, #0
9000e904:	d012      	beq.n	9000e92c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e906:	687b      	ldr	r3, [r7, #4]
9000e908:	3324      	adds	r3, #36	; 0x24
9000e90a:	4618      	mov	r0, r3
9000e90c:	f000 fd50 	bl	9000f3b0 <xTaskRemoveFromEventList>
9000e910:	4603      	mov	r3, r0
9000e912:	2b00      	cmp	r3, #0
9000e914:	d001      	beq.n	9000e91a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
9000e916:	f000 fe27 	bl	9000f568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
9000e91a:	7bfb      	ldrb	r3, [r7, #15]
9000e91c:	3b01      	subs	r3, #1
9000e91e:	b2db      	uxtb	r3, r3
9000e920:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e922:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000e926:	2b00      	cmp	r3, #0
9000e928:	dce9      	bgt.n	9000e8fe <prvUnlockQueue+0x16>
9000e92a:	e000      	b.n	9000e92e <prvUnlockQueue+0x46>
					break;
9000e92c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
9000e92e:	687b      	ldr	r3, [r7, #4]
9000e930:	22ff      	movs	r2, #255	; 0xff
9000e932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
9000e936:	f001 fc85 	bl	90010244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
9000e93a:	f001 fc53 	bl	900101e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
9000e93e:	687b      	ldr	r3, [r7, #4]
9000e940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
9000e944:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e946:	e011      	b.n	9000e96c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e948:	687b      	ldr	r3, [r7, #4]
9000e94a:	691b      	ldr	r3, [r3, #16]
9000e94c:	2b00      	cmp	r3, #0
9000e94e:	d012      	beq.n	9000e976 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e950:	687b      	ldr	r3, [r7, #4]
9000e952:	3310      	adds	r3, #16
9000e954:	4618      	mov	r0, r3
9000e956:	f000 fd2b 	bl	9000f3b0 <xTaskRemoveFromEventList>
9000e95a:	4603      	mov	r3, r0
9000e95c:	2b00      	cmp	r3, #0
9000e95e:	d001      	beq.n	9000e964 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
9000e960:	f000 fe02 	bl	9000f568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
9000e964:	7bbb      	ldrb	r3, [r7, #14]
9000e966:	3b01      	subs	r3, #1
9000e968:	b2db      	uxtb	r3, r3
9000e96a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e96c:	f997 300e 	ldrsb.w	r3, [r7, #14]
9000e970:	2b00      	cmp	r3, #0
9000e972:	dce9      	bgt.n	9000e948 <prvUnlockQueue+0x60>
9000e974:	e000      	b.n	9000e978 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
9000e976:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
9000e978:	687b      	ldr	r3, [r7, #4]
9000e97a:	22ff      	movs	r2, #255	; 0xff
9000e97c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
9000e980:	f001 fc60 	bl	90010244 <vPortExitCritical>
}
9000e984:	bf00      	nop
9000e986:	3710      	adds	r7, #16
9000e988:	46bd      	mov	sp, r7
9000e98a:	bd80      	pop	{r7, pc}

9000e98c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
9000e98c:	b580      	push	{r7, lr}
9000e98e:	b084      	sub	sp, #16
9000e990:	af00      	add	r7, sp, #0
9000e992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000e994:	f001 fc26 	bl	900101e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000e998:	687b      	ldr	r3, [r7, #4]
9000e99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000e99c:	2b00      	cmp	r3, #0
9000e99e:	d102      	bne.n	9000e9a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
9000e9a0:	2301      	movs	r3, #1
9000e9a2:	60fb      	str	r3, [r7, #12]
9000e9a4:	e001      	b.n	9000e9aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
9000e9a6:	2300      	movs	r3, #0
9000e9a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
9000e9aa:	f001 fc4b 	bl	90010244 <vPortExitCritical>

	return xReturn;
9000e9ae:	68fb      	ldr	r3, [r7, #12]
}
9000e9b0:	4618      	mov	r0, r3
9000e9b2:	3710      	adds	r7, #16
9000e9b4:	46bd      	mov	sp, r7
9000e9b6:	bd80      	pop	{r7, pc}

9000e9b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
9000e9b8:	b580      	push	{r7, lr}
9000e9ba:	b084      	sub	sp, #16
9000e9bc:	af00      	add	r7, sp, #0
9000e9be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000e9c0:	f001 fc10 	bl	900101e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000e9c4:	687b      	ldr	r3, [r7, #4]
9000e9c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000e9c8:	687b      	ldr	r3, [r7, #4]
9000e9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000e9cc:	429a      	cmp	r2, r3
9000e9ce:	d102      	bne.n	9000e9d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
9000e9d0:	2301      	movs	r3, #1
9000e9d2:	60fb      	str	r3, [r7, #12]
9000e9d4:	e001      	b.n	9000e9da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
9000e9d6:	2300      	movs	r3, #0
9000e9d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
9000e9da:	f001 fc33 	bl	90010244 <vPortExitCritical>

	return xReturn;
9000e9de:	68fb      	ldr	r3, [r7, #12]
}
9000e9e0:	4618      	mov	r0, r3
9000e9e2:	3710      	adds	r7, #16
9000e9e4:	46bd      	mov	sp, r7
9000e9e6:	bd80      	pop	{r7, pc}

9000e9e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
9000e9e8:	b480      	push	{r7}
9000e9ea:	b085      	sub	sp, #20
9000e9ec:	af00      	add	r7, sp, #0
9000e9ee:	6078      	str	r0, [r7, #4]
9000e9f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e9f2:	2300      	movs	r3, #0
9000e9f4:	60fb      	str	r3, [r7, #12]
9000e9f6:	e014      	b.n	9000ea22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000e9f8:	4a0f      	ldr	r2, [pc, #60]	; (9000ea38 <vQueueAddToRegistry+0x50>)
9000e9fa:	68fb      	ldr	r3, [r7, #12]
9000e9fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000ea00:	2b00      	cmp	r3, #0
9000ea02:	d10b      	bne.n	9000ea1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000ea04:	490c      	ldr	r1, [pc, #48]	; (9000ea38 <vQueueAddToRegistry+0x50>)
9000ea06:	68fb      	ldr	r3, [r7, #12]
9000ea08:	683a      	ldr	r2, [r7, #0]
9000ea0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000ea0e:	4a0a      	ldr	r2, [pc, #40]	; (9000ea38 <vQueueAddToRegistry+0x50>)
9000ea10:	68fb      	ldr	r3, [r7, #12]
9000ea12:	00db      	lsls	r3, r3, #3
9000ea14:	4413      	add	r3, r2
9000ea16:	687a      	ldr	r2, [r7, #4]
9000ea18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
9000ea1a:	e006      	b.n	9000ea2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000ea1c:	68fb      	ldr	r3, [r7, #12]
9000ea1e:	3301      	adds	r3, #1
9000ea20:	60fb      	str	r3, [r7, #12]
9000ea22:	68fb      	ldr	r3, [r7, #12]
9000ea24:	2b07      	cmp	r3, #7
9000ea26:	d9e7      	bls.n	9000e9f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
9000ea28:	bf00      	nop
9000ea2a:	bf00      	nop
9000ea2c:	3714      	adds	r7, #20
9000ea2e:	46bd      	mov	sp, r7
9000ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ea34:	4770      	bx	lr
9000ea36:	bf00      	nop
9000ea38:	240015a4 	.word	0x240015a4

9000ea3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000ea3c:	b580      	push	{r7, lr}
9000ea3e:	b086      	sub	sp, #24
9000ea40:	af00      	add	r7, sp, #0
9000ea42:	60f8      	str	r0, [r7, #12]
9000ea44:	60b9      	str	r1, [r7, #8]
9000ea46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
9000ea48:	68fb      	ldr	r3, [r7, #12]
9000ea4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000ea4c:	f001 fbca 	bl	900101e4 <vPortEnterCritical>
9000ea50:	697b      	ldr	r3, [r7, #20]
9000ea52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
9000ea56:	b25b      	sxtb	r3, r3
9000ea58:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ea5c:	d103      	bne.n	9000ea66 <vQueueWaitForMessageRestricted+0x2a>
9000ea5e:	697b      	ldr	r3, [r7, #20]
9000ea60:	2200      	movs	r2, #0
9000ea62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000ea66:	697b      	ldr	r3, [r7, #20]
9000ea68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000ea6c:	b25b      	sxtb	r3, r3
9000ea6e:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ea72:	d103      	bne.n	9000ea7c <vQueueWaitForMessageRestricted+0x40>
9000ea74:	697b      	ldr	r3, [r7, #20]
9000ea76:	2200      	movs	r2, #0
9000ea78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
9000ea7c:	f001 fbe2 	bl	90010244 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000ea80:	697b      	ldr	r3, [r7, #20]
9000ea82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000ea84:	2b00      	cmp	r3, #0
9000ea86:	d106      	bne.n	9000ea96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000ea88:	697b      	ldr	r3, [r7, #20]
9000ea8a:	3324      	adds	r3, #36	; 0x24
9000ea8c:	687a      	ldr	r2, [r7, #4]
9000ea8e:	68b9      	ldr	r1, [r7, #8]
9000ea90:	4618      	mov	r0, r3
9000ea92:	f000 fc61 	bl	9000f358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
9000ea96:	6978      	ldr	r0, [r7, #20]
9000ea98:	f7ff ff26 	bl	9000e8e8 <prvUnlockQueue>
	}
9000ea9c:	bf00      	nop
9000ea9e:	3718      	adds	r7, #24
9000eaa0:	46bd      	mov	sp, r7
9000eaa2:	bd80      	pop	{r7, pc}

9000eaa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
9000eaa4:	b580      	push	{r7, lr}
9000eaa6:	b08e      	sub	sp, #56	; 0x38
9000eaa8:	af04      	add	r7, sp, #16
9000eaaa:	60f8      	str	r0, [r7, #12]
9000eaac:	60b9      	str	r1, [r7, #8]
9000eaae:	607a      	str	r2, [r7, #4]
9000eab0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
9000eab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000eab4:	2b00      	cmp	r3, #0
9000eab6:	d10a      	bne.n	9000eace <xTaskCreateStatic+0x2a>
	__asm volatile
9000eab8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eabc:	f383 8811 	msr	BASEPRI, r3
9000eac0:	f3bf 8f6f 	isb	sy
9000eac4:	f3bf 8f4f 	dsb	sy
9000eac8:	623b      	str	r3, [r7, #32]
}
9000eaca:	bf00      	nop
9000eacc:	e7fe      	b.n	9000eacc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
9000eace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000ead0:	2b00      	cmp	r3, #0
9000ead2:	d10a      	bne.n	9000eaea <xTaskCreateStatic+0x46>
	__asm volatile
9000ead4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ead8:	f383 8811 	msr	BASEPRI, r3
9000eadc:	f3bf 8f6f 	isb	sy
9000eae0:	f3bf 8f4f 	dsb	sy
9000eae4:	61fb      	str	r3, [r7, #28]
}
9000eae6:	bf00      	nop
9000eae8:	e7fe      	b.n	9000eae8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
9000eaea:	23bc      	movs	r3, #188	; 0xbc
9000eaec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
9000eaee:	693b      	ldr	r3, [r7, #16]
9000eaf0:	2bbc      	cmp	r3, #188	; 0xbc
9000eaf2:	d00a      	beq.n	9000eb0a <xTaskCreateStatic+0x66>
	__asm volatile
9000eaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eaf8:	f383 8811 	msr	BASEPRI, r3
9000eafc:	f3bf 8f6f 	isb	sy
9000eb00:	f3bf 8f4f 	dsb	sy
9000eb04:	61bb      	str	r3, [r7, #24]
}
9000eb06:	bf00      	nop
9000eb08:	e7fe      	b.n	9000eb08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000eb0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
9000eb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000eb0e:	2b00      	cmp	r3, #0
9000eb10:	d01e      	beq.n	9000eb50 <xTaskCreateStatic+0xac>
9000eb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000eb14:	2b00      	cmp	r3, #0
9000eb16:	d01b      	beq.n	9000eb50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
9000eb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000eb1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000eb1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9000eb20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000eb24:	2202      	movs	r2, #2
9000eb26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
9000eb2a:	2300      	movs	r3, #0
9000eb2c:	9303      	str	r3, [sp, #12]
9000eb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000eb30:	9302      	str	r3, [sp, #8]
9000eb32:	f107 0314 	add.w	r3, r7, #20
9000eb36:	9301      	str	r3, [sp, #4]
9000eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000eb3a:	9300      	str	r3, [sp, #0]
9000eb3c:	683b      	ldr	r3, [r7, #0]
9000eb3e:	687a      	ldr	r2, [r7, #4]
9000eb40:	68b9      	ldr	r1, [r7, #8]
9000eb42:	68f8      	ldr	r0, [r7, #12]
9000eb44:	f000 f850 	bl	9000ebe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
9000eb48:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000eb4a:	f000 f8f3 	bl	9000ed34 <prvAddNewTaskToReadyList>
9000eb4e:	e001      	b.n	9000eb54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
9000eb50:	2300      	movs	r3, #0
9000eb52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
9000eb54:	697b      	ldr	r3, [r7, #20]
	}
9000eb56:	4618      	mov	r0, r3
9000eb58:	3728      	adds	r7, #40	; 0x28
9000eb5a:	46bd      	mov	sp, r7
9000eb5c:	bd80      	pop	{r7, pc}

9000eb5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
9000eb5e:	b580      	push	{r7, lr}
9000eb60:	b08c      	sub	sp, #48	; 0x30
9000eb62:	af04      	add	r7, sp, #16
9000eb64:	60f8      	str	r0, [r7, #12]
9000eb66:	60b9      	str	r1, [r7, #8]
9000eb68:	603b      	str	r3, [r7, #0]
9000eb6a:	4613      	mov	r3, r2
9000eb6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000eb6e:	88fb      	ldrh	r3, [r7, #6]
9000eb70:	009b      	lsls	r3, r3, #2
9000eb72:	4618      	mov	r0, r3
9000eb74:	f001 fc58 	bl	90010428 <pvPortMalloc>
9000eb78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
9000eb7a:	697b      	ldr	r3, [r7, #20]
9000eb7c:	2b00      	cmp	r3, #0
9000eb7e:	d00e      	beq.n	9000eb9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000eb80:	20bc      	movs	r0, #188	; 0xbc
9000eb82:	f001 fc51 	bl	90010428 <pvPortMalloc>
9000eb86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
9000eb88:	69fb      	ldr	r3, [r7, #28]
9000eb8a:	2b00      	cmp	r3, #0
9000eb8c:	d003      	beq.n	9000eb96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
9000eb8e:	69fb      	ldr	r3, [r7, #28]
9000eb90:	697a      	ldr	r2, [r7, #20]
9000eb92:	631a      	str	r2, [r3, #48]	; 0x30
9000eb94:	e005      	b.n	9000eba2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
9000eb96:	6978      	ldr	r0, [r7, #20]
9000eb98:	f001 fd12 	bl	900105c0 <vPortFree>
9000eb9c:	e001      	b.n	9000eba2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
9000eb9e:	2300      	movs	r3, #0
9000eba0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
9000eba2:	69fb      	ldr	r3, [r7, #28]
9000eba4:	2b00      	cmp	r3, #0
9000eba6:	d017      	beq.n	9000ebd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000eba8:	69fb      	ldr	r3, [r7, #28]
9000ebaa:	2200      	movs	r2, #0
9000ebac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
9000ebb0:	88fa      	ldrh	r2, [r7, #6]
9000ebb2:	2300      	movs	r3, #0
9000ebb4:	9303      	str	r3, [sp, #12]
9000ebb6:	69fb      	ldr	r3, [r7, #28]
9000ebb8:	9302      	str	r3, [sp, #8]
9000ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ebbc:	9301      	str	r3, [sp, #4]
9000ebbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000ebc0:	9300      	str	r3, [sp, #0]
9000ebc2:	683b      	ldr	r3, [r7, #0]
9000ebc4:	68b9      	ldr	r1, [r7, #8]
9000ebc6:	68f8      	ldr	r0, [r7, #12]
9000ebc8:	f000 f80e 	bl	9000ebe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
9000ebcc:	69f8      	ldr	r0, [r7, #28]
9000ebce:	f000 f8b1 	bl	9000ed34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000ebd2:	2301      	movs	r3, #1
9000ebd4:	61bb      	str	r3, [r7, #24]
9000ebd6:	e002      	b.n	9000ebde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000ebd8:	f04f 33ff 	mov.w	r3, #4294967295
9000ebdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
9000ebde:	69bb      	ldr	r3, [r7, #24]
	}
9000ebe0:	4618      	mov	r0, r3
9000ebe2:	3720      	adds	r7, #32
9000ebe4:	46bd      	mov	sp, r7
9000ebe6:	bd80      	pop	{r7, pc}

9000ebe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
9000ebe8:	b580      	push	{r7, lr}
9000ebea:	b088      	sub	sp, #32
9000ebec:	af00      	add	r7, sp, #0
9000ebee:	60f8      	str	r0, [r7, #12]
9000ebf0:	60b9      	str	r1, [r7, #8]
9000ebf2:	607a      	str	r2, [r7, #4]
9000ebf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ebf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
9000ebfa:	687b      	ldr	r3, [r7, #4]
9000ebfc:	009b      	lsls	r3, r3, #2
9000ebfe:	461a      	mov	r2, r3
9000ec00:	21a5      	movs	r1, #165	; 0xa5
9000ec02:	f002 fa26 	bl	90011052 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000ec06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ec08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000ec0a:	6879      	ldr	r1, [r7, #4]
9000ec0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
9000ec10:	440b      	add	r3, r1
9000ec12:	009b      	lsls	r3, r3, #2
9000ec14:	4413      	add	r3, r2
9000ec16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000ec18:	69bb      	ldr	r3, [r7, #24]
9000ec1a:	f023 0307 	bic.w	r3, r3, #7
9000ec1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
9000ec20:	69bb      	ldr	r3, [r7, #24]
9000ec22:	f003 0307 	and.w	r3, r3, #7
9000ec26:	2b00      	cmp	r3, #0
9000ec28:	d00a      	beq.n	9000ec40 <prvInitialiseNewTask+0x58>
	__asm volatile
9000ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec2e:	f383 8811 	msr	BASEPRI, r3
9000ec32:	f3bf 8f6f 	isb	sy
9000ec36:	f3bf 8f4f 	dsb	sy
9000ec3a:	617b      	str	r3, [r7, #20]
}
9000ec3c:	bf00      	nop
9000ec3e:	e7fe      	b.n	9000ec3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
9000ec40:	68bb      	ldr	r3, [r7, #8]
9000ec42:	2b00      	cmp	r3, #0
9000ec44:	d01f      	beq.n	9000ec86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
9000ec46:	2300      	movs	r3, #0
9000ec48:	61fb      	str	r3, [r7, #28]
9000ec4a:	e012      	b.n	9000ec72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec4c:	68ba      	ldr	r2, [r7, #8]
9000ec4e:	69fb      	ldr	r3, [r7, #28]
9000ec50:	4413      	add	r3, r2
9000ec52:	7819      	ldrb	r1, [r3, #0]
9000ec54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ec56:	69fb      	ldr	r3, [r7, #28]
9000ec58:	4413      	add	r3, r2
9000ec5a:	3334      	adds	r3, #52	; 0x34
9000ec5c:	460a      	mov	r2, r1
9000ec5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
9000ec60:	68ba      	ldr	r2, [r7, #8]
9000ec62:	69fb      	ldr	r3, [r7, #28]
9000ec64:	4413      	add	r3, r2
9000ec66:	781b      	ldrb	r3, [r3, #0]
9000ec68:	2b00      	cmp	r3, #0
9000ec6a:	d006      	beq.n	9000ec7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
9000ec6c:	69fb      	ldr	r3, [r7, #28]
9000ec6e:	3301      	adds	r3, #1
9000ec70:	61fb      	str	r3, [r7, #28]
9000ec72:	69fb      	ldr	r3, [r7, #28]
9000ec74:	2b0f      	cmp	r3, #15
9000ec76:	d9e9      	bls.n	9000ec4c <prvInitialiseNewTask+0x64>
9000ec78:	e000      	b.n	9000ec7c <prvInitialiseNewTask+0x94>
			{
				break;
9000ec7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000ec7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ec7e:	2200      	movs	r2, #0
9000ec80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
9000ec84:	e003      	b.n	9000ec8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ec88:	2200      	movs	r2, #0
9000ec8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000ec90:	2b37      	cmp	r3, #55	; 0x37
9000ec92:	d901      	bls.n	9000ec98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
9000ec94:	2337      	movs	r3, #55	; 0x37
9000ec96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
9000ec98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ec9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000ec9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
9000ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000eca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000eca2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
9000eca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000eca6:	2200      	movs	r2, #0
9000eca8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecac:	3304      	adds	r3, #4
9000ecae:	4618      	mov	r0, r3
9000ecb0:	f7ff f978 	bl	9000dfa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000ecb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecb6:	3318      	adds	r3, #24
9000ecb8:	4618      	mov	r0, r3
9000ecba:	f7ff f973 	bl	9000dfa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000ecbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ecc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000ecc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
9000ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000eccc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000ecce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ecd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
9000ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecd6:	2200      	movs	r2, #0
9000ecd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000ecdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecde:	2200      	movs	r2, #0
9000ece0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
9000ece4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ece6:	3354      	adds	r3, #84	; 0x54
9000ece8:	2260      	movs	r2, #96	; 0x60
9000ecea:	2100      	movs	r1, #0
9000ecec:	4618      	mov	r0, r3
9000ecee:	f002 f9b0 	bl	90011052 <memset>
9000ecf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecf4:	4a0c      	ldr	r2, [pc, #48]	; (9000ed28 <prvInitialiseNewTask+0x140>)
9000ecf6:	659a      	str	r2, [r3, #88]	; 0x58
9000ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ecfa:	4a0c      	ldr	r2, [pc, #48]	; (9000ed2c <prvInitialiseNewTask+0x144>)
9000ecfc:	65da      	str	r2, [r3, #92]	; 0x5c
9000ecfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ed00:	4a0b      	ldr	r2, [pc, #44]	; (9000ed30 <prvInitialiseNewTask+0x148>)
9000ed02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ed04:	683a      	ldr	r2, [r7, #0]
9000ed06:	68f9      	ldr	r1, [r7, #12]
9000ed08:	69b8      	ldr	r0, [r7, #24]
9000ed0a:	f001 f941 	bl	9000ff90 <pxPortInitialiseStack>
9000ed0e:	4602      	mov	r2, r0
9000ed10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000ed12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
9000ed14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ed16:	2b00      	cmp	r3, #0
9000ed18:	d002      	beq.n	9000ed20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000ed1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000ed1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000ed1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000ed20:	bf00      	nop
9000ed22:	3720      	adds	r7, #32
9000ed24:	46bd      	mov	sp, r7
9000ed26:	bd80      	pop	{r7, pc}
9000ed28:	90015808 	.word	0x90015808
9000ed2c:	90015828 	.word	0x90015828
9000ed30:	900157e8 	.word	0x900157e8

9000ed34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000ed34:	b580      	push	{r7, lr}
9000ed36:	b082      	sub	sp, #8
9000ed38:	af00      	add	r7, sp, #0
9000ed3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000ed3c:	f001 fa52 	bl	900101e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000ed40:	4b2d      	ldr	r3, [pc, #180]	; (9000edf8 <prvAddNewTaskToReadyList+0xc4>)
9000ed42:	681b      	ldr	r3, [r3, #0]
9000ed44:	3301      	adds	r3, #1
9000ed46:	4a2c      	ldr	r2, [pc, #176]	; (9000edf8 <prvAddNewTaskToReadyList+0xc4>)
9000ed48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000ed4a:	4b2c      	ldr	r3, [pc, #176]	; (9000edfc <prvAddNewTaskToReadyList+0xc8>)
9000ed4c:	681b      	ldr	r3, [r3, #0]
9000ed4e:	2b00      	cmp	r3, #0
9000ed50:	d109      	bne.n	9000ed66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
9000ed52:	4a2a      	ldr	r2, [pc, #168]	; (9000edfc <prvAddNewTaskToReadyList+0xc8>)
9000ed54:	687b      	ldr	r3, [r7, #4]
9000ed56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000ed58:	4b27      	ldr	r3, [pc, #156]	; (9000edf8 <prvAddNewTaskToReadyList+0xc4>)
9000ed5a:	681b      	ldr	r3, [r3, #0]
9000ed5c:	2b01      	cmp	r3, #1
9000ed5e:	d110      	bne.n	9000ed82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
9000ed60:	f000 fc26 	bl	9000f5b0 <prvInitialiseTaskLists>
9000ed64:	e00d      	b.n	9000ed82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000ed66:	4b26      	ldr	r3, [pc, #152]	; (9000ee00 <prvAddNewTaskToReadyList+0xcc>)
9000ed68:	681b      	ldr	r3, [r3, #0]
9000ed6a:	2b00      	cmp	r3, #0
9000ed6c:	d109      	bne.n	9000ed82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000ed6e:	4b23      	ldr	r3, [pc, #140]	; (9000edfc <prvAddNewTaskToReadyList+0xc8>)
9000ed70:	681b      	ldr	r3, [r3, #0]
9000ed72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000ed74:	687b      	ldr	r3, [r7, #4]
9000ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000ed78:	429a      	cmp	r2, r3
9000ed7a:	d802      	bhi.n	9000ed82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
9000ed7c:	4a1f      	ldr	r2, [pc, #124]	; (9000edfc <prvAddNewTaskToReadyList+0xc8>)
9000ed7e:	687b      	ldr	r3, [r7, #4]
9000ed80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
9000ed82:	4b20      	ldr	r3, [pc, #128]	; (9000ee04 <prvAddNewTaskToReadyList+0xd0>)
9000ed84:	681b      	ldr	r3, [r3, #0]
9000ed86:	3301      	adds	r3, #1
9000ed88:	4a1e      	ldr	r2, [pc, #120]	; (9000ee04 <prvAddNewTaskToReadyList+0xd0>)
9000ed8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000ed8c:	4b1d      	ldr	r3, [pc, #116]	; (9000ee04 <prvAddNewTaskToReadyList+0xd0>)
9000ed8e:	681a      	ldr	r2, [r3, #0]
9000ed90:	687b      	ldr	r3, [r7, #4]
9000ed92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000ed94:	687b      	ldr	r3, [r7, #4]
9000ed96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000ed98:	4b1b      	ldr	r3, [pc, #108]	; (9000ee08 <prvAddNewTaskToReadyList+0xd4>)
9000ed9a:	681b      	ldr	r3, [r3, #0]
9000ed9c:	429a      	cmp	r2, r3
9000ed9e:	d903      	bls.n	9000eda8 <prvAddNewTaskToReadyList+0x74>
9000eda0:	687b      	ldr	r3, [r7, #4]
9000eda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000eda4:	4a18      	ldr	r2, [pc, #96]	; (9000ee08 <prvAddNewTaskToReadyList+0xd4>)
9000eda6:	6013      	str	r3, [r2, #0]
9000eda8:	687b      	ldr	r3, [r7, #4]
9000edaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000edac:	4613      	mov	r3, r2
9000edae:	009b      	lsls	r3, r3, #2
9000edb0:	4413      	add	r3, r2
9000edb2:	009b      	lsls	r3, r3, #2
9000edb4:	4a15      	ldr	r2, [pc, #84]	; (9000ee0c <prvAddNewTaskToReadyList+0xd8>)
9000edb6:	441a      	add	r2, r3
9000edb8:	687b      	ldr	r3, [r7, #4]
9000edba:	3304      	adds	r3, #4
9000edbc:	4619      	mov	r1, r3
9000edbe:	4610      	mov	r0, r2
9000edc0:	f7ff f8fd 	bl	9000dfbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000edc4:	f001 fa3e 	bl	90010244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000edc8:	4b0d      	ldr	r3, [pc, #52]	; (9000ee00 <prvAddNewTaskToReadyList+0xcc>)
9000edca:	681b      	ldr	r3, [r3, #0]
9000edcc:	2b00      	cmp	r3, #0
9000edce:	d00e      	beq.n	9000edee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000edd0:	4b0a      	ldr	r3, [pc, #40]	; (9000edfc <prvAddNewTaskToReadyList+0xc8>)
9000edd2:	681b      	ldr	r3, [r3, #0]
9000edd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000edd6:	687b      	ldr	r3, [r7, #4]
9000edd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000edda:	429a      	cmp	r2, r3
9000eddc:	d207      	bcs.n	9000edee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000edde:	4b0c      	ldr	r3, [pc, #48]	; (9000ee10 <prvAddNewTaskToReadyList+0xdc>)
9000ede0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ede4:	601a      	str	r2, [r3, #0]
9000ede6:	f3bf 8f4f 	dsb	sy
9000edea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000edee:	bf00      	nop
9000edf0:	3708      	adds	r7, #8
9000edf2:	46bd      	mov	sp, r7
9000edf4:	bd80      	pop	{r7, pc}
9000edf6:	bf00      	nop
9000edf8:	24001ab8 	.word	0x24001ab8
9000edfc:	240015e4 	.word	0x240015e4
9000ee00:	24001ac4 	.word	0x24001ac4
9000ee04:	24001ad4 	.word	0x24001ad4
9000ee08:	24001ac0 	.word	0x24001ac0
9000ee0c:	240015e8 	.word	0x240015e8
9000ee10:	e000ed04 	.word	0xe000ed04

9000ee14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
9000ee14:	b580      	push	{r7, lr}
9000ee16:	b084      	sub	sp, #16
9000ee18:	af00      	add	r7, sp, #0
9000ee1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
9000ee1c:	2300      	movs	r3, #0
9000ee1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
9000ee20:	687b      	ldr	r3, [r7, #4]
9000ee22:	2b00      	cmp	r3, #0
9000ee24:	d017      	beq.n	9000ee56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
9000ee26:	4b13      	ldr	r3, [pc, #76]	; (9000ee74 <vTaskDelay+0x60>)
9000ee28:	681b      	ldr	r3, [r3, #0]
9000ee2a:	2b00      	cmp	r3, #0
9000ee2c:	d00a      	beq.n	9000ee44 <vTaskDelay+0x30>
	__asm volatile
9000ee2e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee32:	f383 8811 	msr	BASEPRI, r3
9000ee36:	f3bf 8f6f 	isb	sy
9000ee3a:	f3bf 8f4f 	dsb	sy
9000ee3e:	60bb      	str	r3, [r7, #8]
}
9000ee40:	bf00      	nop
9000ee42:	e7fe      	b.n	9000ee42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
9000ee44:	f000 f88a 	bl	9000ef5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
9000ee48:	2100      	movs	r1, #0
9000ee4a:	6878      	ldr	r0, [r7, #4]
9000ee4c:	f000 fcfe 	bl	9000f84c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
9000ee50:	f000 f892 	bl	9000ef78 <xTaskResumeAll>
9000ee54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
9000ee56:	68fb      	ldr	r3, [r7, #12]
9000ee58:	2b00      	cmp	r3, #0
9000ee5a:	d107      	bne.n	9000ee6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
9000ee5c:	4b06      	ldr	r3, [pc, #24]	; (9000ee78 <vTaskDelay+0x64>)
9000ee5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ee62:	601a      	str	r2, [r3, #0]
9000ee64:	f3bf 8f4f 	dsb	sy
9000ee68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
9000ee6c:	bf00      	nop
9000ee6e:	3710      	adds	r7, #16
9000ee70:	46bd      	mov	sp, r7
9000ee72:	bd80      	pop	{r7, pc}
9000ee74:	24001ae0 	.word	0x24001ae0
9000ee78:	e000ed04 	.word	0xe000ed04

9000ee7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
9000ee7c:	b580      	push	{r7, lr}
9000ee7e:	b08a      	sub	sp, #40	; 0x28
9000ee80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000ee82:	2300      	movs	r3, #0
9000ee84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000ee86:	2300      	movs	r3, #0
9000ee88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000ee8a:	463a      	mov	r2, r7
9000ee8c:	1d39      	adds	r1, r7, #4
9000ee8e:	f107 0308 	add.w	r3, r7, #8
9000ee92:	4618      	mov	r0, r3
9000ee94:	f7ff f832 	bl	9000defc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000ee98:	6839      	ldr	r1, [r7, #0]
9000ee9a:	687b      	ldr	r3, [r7, #4]
9000ee9c:	68ba      	ldr	r2, [r7, #8]
9000ee9e:	9202      	str	r2, [sp, #8]
9000eea0:	9301      	str	r3, [sp, #4]
9000eea2:	2300      	movs	r3, #0
9000eea4:	9300      	str	r3, [sp, #0]
9000eea6:	2300      	movs	r3, #0
9000eea8:	460a      	mov	r2, r1
9000eeaa:	4924      	ldr	r1, [pc, #144]	; (9000ef3c <vTaskStartScheduler+0xc0>)
9000eeac:	4824      	ldr	r0, [pc, #144]	; (9000ef40 <vTaskStartScheduler+0xc4>)
9000eeae:	f7ff fdf9 	bl	9000eaa4 <xTaskCreateStatic>
9000eeb2:	4603      	mov	r3, r0
9000eeb4:	4a23      	ldr	r2, [pc, #140]	; (9000ef44 <vTaskStartScheduler+0xc8>)
9000eeb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
9000eeb8:	4b22      	ldr	r3, [pc, #136]	; (9000ef44 <vTaskStartScheduler+0xc8>)
9000eeba:	681b      	ldr	r3, [r3, #0]
9000eebc:	2b00      	cmp	r3, #0
9000eebe:	d002      	beq.n	9000eec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
9000eec0:	2301      	movs	r3, #1
9000eec2:	617b      	str	r3, [r7, #20]
9000eec4:	e001      	b.n	9000eeca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
9000eec6:	2300      	movs	r3, #0
9000eec8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
9000eeca:	697b      	ldr	r3, [r7, #20]
9000eecc:	2b01      	cmp	r3, #1
9000eece:	d102      	bne.n	9000eed6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
9000eed0:	f000 fd10 	bl	9000f8f4 <xTimerCreateTimerTask>
9000eed4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
9000eed6:	697b      	ldr	r3, [r7, #20]
9000eed8:	2b01      	cmp	r3, #1
9000eeda:	d11b      	bne.n	9000ef14 <vTaskStartScheduler+0x98>
	__asm volatile
9000eedc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eee0:	f383 8811 	msr	BASEPRI, r3
9000eee4:	f3bf 8f6f 	isb	sy
9000eee8:	f3bf 8f4f 	dsb	sy
9000eeec:	613b      	str	r3, [r7, #16]
}
9000eeee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
9000eef0:	4b15      	ldr	r3, [pc, #84]	; (9000ef48 <vTaskStartScheduler+0xcc>)
9000eef2:	681b      	ldr	r3, [r3, #0]
9000eef4:	3354      	adds	r3, #84	; 0x54
9000eef6:	4a15      	ldr	r2, [pc, #84]	; (9000ef4c <vTaskStartScheduler+0xd0>)
9000eef8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
9000eefa:	4b15      	ldr	r3, [pc, #84]	; (9000ef50 <vTaskStartScheduler+0xd4>)
9000eefc:	f04f 32ff 	mov.w	r2, #4294967295
9000ef00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
9000ef02:	4b14      	ldr	r3, [pc, #80]	; (9000ef54 <vTaskStartScheduler+0xd8>)
9000ef04:	2201      	movs	r2, #1
9000ef06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000ef08:	4b13      	ldr	r3, [pc, #76]	; (9000ef58 <vTaskStartScheduler+0xdc>)
9000ef0a:	2200      	movs	r2, #0
9000ef0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
9000ef0e:	f001 f8c7 	bl	900100a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
9000ef12:	e00e      	b.n	9000ef32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000ef14:	697b      	ldr	r3, [r7, #20]
9000ef16:	f1b3 3fff 	cmp.w	r3, #4294967295
9000ef1a:	d10a      	bne.n	9000ef32 <vTaskStartScheduler+0xb6>
	__asm volatile
9000ef1c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef20:	f383 8811 	msr	BASEPRI, r3
9000ef24:	f3bf 8f6f 	isb	sy
9000ef28:	f3bf 8f4f 	dsb	sy
9000ef2c:	60fb      	str	r3, [r7, #12]
}
9000ef2e:	bf00      	nop
9000ef30:	e7fe      	b.n	9000ef30 <vTaskStartScheduler+0xb4>
}
9000ef32:	bf00      	nop
9000ef34:	3718      	adds	r7, #24
9000ef36:	46bd      	mov	sp, r7
9000ef38:	bd80      	pop	{r7, pc}
9000ef3a:	bf00      	nop
9000ef3c:	90013e24 	.word	0x90013e24
9000ef40:	9000f581 	.word	0x9000f581
9000ef44:	24001adc 	.word	0x24001adc
9000ef48:	240015e4 	.word	0x240015e4
9000ef4c:	24000040 	.word	0x24000040
9000ef50:	24001ad8 	.word	0x24001ad8
9000ef54:	24001ac4 	.word	0x24001ac4
9000ef58:	24001abc 	.word	0x24001abc

9000ef5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
9000ef5c:	b480      	push	{r7}
9000ef5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
9000ef60:	4b04      	ldr	r3, [pc, #16]	; (9000ef74 <vTaskSuspendAll+0x18>)
9000ef62:	681b      	ldr	r3, [r3, #0]
9000ef64:	3301      	adds	r3, #1
9000ef66:	4a03      	ldr	r2, [pc, #12]	; (9000ef74 <vTaskSuspendAll+0x18>)
9000ef68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
9000ef6a:	bf00      	nop
9000ef6c:	46bd      	mov	sp, r7
9000ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ef72:	4770      	bx	lr
9000ef74:	24001ae0 	.word	0x24001ae0

9000ef78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
9000ef78:	b580      	push	{r7, lr}
9000ef7a:	b084      	sub	sp, #16
9000ef7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
9000ef7e:	2300      	movs	r3, #0
9000ef80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
9000ef82:	2300      	movs	r3, #0
9000ef84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
9000ef86:	4b42      	ldr	r3, [pc, #264]	; (9000f090 <xTaskResumeAll+0x118>)
9000ef88:	681b      	ldr	r3, [r3, #0]
9000ef8a:	2b00      	cmp	r3, #0
9000ef8c:	d10a      	bne.n	9000efa4 <xTaskResumeAll+0x2c>
	__asm volatile
9000ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef92:	f383 8811 	msr	BASEPRI, r3
9000ef96:	f3bf 8f6f 	isb	sy
9000ef9a:	f3bf 8f4f 	dsb	sy
9000ef9e:	603b      	str	r3, [r7, #0]
}
9000efa0:	bf00      	nop
9000efa2:	e7fe      	b.n	9000efa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
9000efa4:	f001 f91e 	bl	900101e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
9000efa8:	4b39      	ldr	r3, [pc, #228]	; (9000f090 <xTaskResumeAll+0x118>)
9000efaa:	681b      	ldr	r3, [r3, #0]
9000efac:	3b01      	subs	r3, #1
9000efae:	4a38      	ldr	r2, [pc, #224]	; (9000f090 <xTaskResumeAll+0x118>)
9000efb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000efb2:	4b37      	ldr	r3, [pc, #220]	; (9000f090 <xTaskResumeAll+0x118>)
9000efb4:	681b      	ldr	r3, [r3, #0]
9000efb6:	2b00      	cmp	r3, #0
9000efb8:	d162      	bne.n	9000f080 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000efba:	4b36      	ldr	r3, [pc, #216]	; (9000f094 <xTaskResumeAll+0x11c>)
9000efbc:	681b      	ldr	r3, [r3, #0]
9000efbe:	2b00      	cmp	r3, #0
9000efc0:	d05e      	beq.n	9000f080 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000efc2:	e02f      	b.n	9000f024 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000efc4:	4b34      	ldr	r3, [pc, #208]	; (9000f098 <xTaskResumeAll+0x120>)
9000efc6:	68db      	ldr	r3, [r3, #12]
9000efc8:	68db      	ldr	r3, [r3, #12]
9000efca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000efcc:	68fb      	ldr	r3, [r7, #12]
9000efce:	3318      	adds	r3, #24
9000efd0:	4618      	mov	r0, r3
9000efd2:	f7ff f851 	bl	9000e078 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000efd6:	68fb      	ldr	r3, [r7, #12]
9000efd8:	3304      	adds	r3, #4
9000efda:	4618      	mov	r0, r3
9000efdc:	f7ff f84c 	bl	9000e078 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000efe0:	68fb      	ldr	r3, [r7, #12]
9000efe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000efe4:	4b2d      	ldr	r3, [pc, #180]	; (9000f09c <xTaskResumeAll+0x124>)
9000efe6:	681b      	ldr	r3, [r3, #0]
9000efe8:	429a      	cmp	r2, r3
9000efea:	d903      	bls.n	9000eff4 <xTaskResumeAll+0x7c>
9000efec:	68fb      	ldr	r3, [r7, #12]
9000efee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000eff0:	4a2a      	ldr	r2, [pc, #168]	; (9000f09c <xTaskResumeAll+0x124>)
9000eff2:	6013      	str	r3, [r2, #0]
9000eff4:	68fb      	ldr	r3, [r7, #12]
9000eff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000eff8:	4613      	mov	r3, r2
9000effa:	009b      	lsls	r3, r3, #2
9000effc:	4413      	add	r3, r2
9000effe:	009b      	lsls	r3, r3, #2
9000f000:	4a27      	ldr	r2, [pc, #156]	; (9000f0a0 <xTaskResumeAll+0x128>)
9000f002:	441a      	add	r2, r3
9000f004:	68fb      	ldr	r3, [r7, #12]
9000f006:	3304      	adds	r3, #4
9000f008:	4619      	mov	r1, r3
9000f00a:	4610      	mov	r0, r2
9000f00c:	f7fe ffd7 	bl	9000dfbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f010:	68fb      	ldr	r3, [r7, #12]
9000f012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f014:	4b23      	ldr	r3, [pc, #140]	; (9000f0a4 <xTaskResumeAll+0x12c>)
9000f016:	681b      	ldr	r3, [r3, #0]
9000f018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f01a:	429a      	cmp	r2, r3
9000f01c:	d302      	bcc.n	9000f024 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
9000f01e:	4b22      	ldr	r3, [pc, #136]	; (9000f0a8 <xTaskResumeAll+0x130>)
9000f020:	2201      	movs	r2, #1
9000f022:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f024:	4b1c      	ldr	r3, [pc, #112]	; (9000f098 <xTaskResumeAll+0x120>)
9000f026:	681b      	ldr	r3, [r3, #0]
9000f028:	2b00      	cmp	r3, #0
9000f02a:	d1cb      	bne.n	9000efc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
9000f02c:	68fb      	ldr	r3, [r7, #12]
9000f02e:	2b00      	cmp	r3, #0
9000f030:	d001      	beq.n	9000f036 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
9000f032:	f000 fb5f 	bl	9000f6f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000f036:	4b1d      	ldr	r3, [pc, #116]	; (9000f0ac <xTaskResumeAll+0x134>)
9000f038:	681b      	ldr	r3, [r3, #0]
9000f03a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
9000f03c:	687b      	ldr	r3, [r7, #4]
9000f03e:	2b00      	cmp	r3, #0
9000f040:	d010      	beq.n	9000f064 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
9000f042:	f000 f847 	bl	9000f0d4 <xTaskIncrementTick>
9000f046:	4603      	mov	r3, r0
9000f048:	2b00      	cmp	r3, #0
9000f04a:	d002      	beq.n	9000f052 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
9000f04c:	4b16      	ldr	r3, [pc, #88]	; (9000f0a8 <xTaskResumeAll+0x130>)
9000f04e:	2201      	movs	r2, #1
9000f050:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
9000f052:	687b      	ldr	r3, [r7, #4]
9000f054:	3b01      	subs	r3, #1
9000f056:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f058:	687b      	ldr	r3, [r7, #4]
9000f05a:	2b00      	cmp	r3, #0
9000f05c:	d1f1      	bne.n	9000f042 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
9000f05e:	4b13      	ldr	r3, [pc, #76]	; (9000f0ac <xTaskResumeAll+0x134>)
9000f060:	2200      	movs	r2, #0
9000f062:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
9000f064:	4b10      	ldr	r3, [pc, #64]	; (9000f0a8 <xTaskResumeAll+0x130>)
9000f066:	681b      	ldr	r3, [r3, #0]
9000f068:	2b00      	cmp	r3, #0
9000f06a:	d009      	beq.n	9000f080 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
9000f06c:	2301      	movs	r3, #1
9000f06e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
9000f070:	4b0f      	ldr	r3, [pc, #60]	; (9000f0b0 <xTaskResumeAll+0x138>)
9000f072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f076:	601a      	str	r2, [r3, #0]
9000f078:	f3bf 8f4f 	dsb	sy
9000f07c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000f080:	f001 f8e0 	bl	90010244 <vPortExitCritical>

	return xAlreadyYielded;
9000f084:	68bb      	ldr	r3, [r7, #8]
}
9000f086:	4618      	mov	r0, r3
9000f088:	3710      	adds	r7, #16
9000f08a:	46bd      	mov	sp, r7
9000f08c:	bd80      	pop	{r7, pc}
9000f08e:	bf00      	nop
9000f090:	24001ae0 	.word	0x24001ae0
9000f094:	24001ab8 	.word	0x24001ab8
9000f098:	24001a78 	.word	0x24001a78
9000f09c:	24001ac0 	.word	0x24001ac0
9000f0a0:	240015e8 	.word	0x240015e8
9000f0a4:	240015e4 	.word	0x240015e4
9000f0a8:	24001acc 	.word	0x24001acc
9000f0ac:	24001ac8 	.word	0x24001ac8
9000f0b0:	e000ed04 	.word	0xe000ed04

9000f0b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
9000f0b4:	b480      	push	{r7}
9000f0b6:	b083      	sub	sp, #12
9000f0b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
9000f0ba:	4b05      	ldr	r3, [pc, #20]	; (9000f0d0 <xTaskGetTickCount+0x1c>)
9000f0bc:	681b      	ldr	r3, [r3, #0]
9000f0be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
9000f0c0:	687b      	ldr	r3, [r7, #4]
}
9000f0c2:	4618      	mov	r0, r3
9000f0c4:	370c      	adds	r7, #12
9000f0c6:	46bd      	mov	sp, r7
9000f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f0cc:	4770      	bx	lr
9000f0ce:	bf00      	nop
9000f0d0:	24001abc 	.word	0x24001abc

9000f0d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
9000f0d4:	b580      	push	{r7, lr}
9000f0d6:	b086      	sub	sp, #24
9000f0d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
9000f0da:	2300      	movs	r3, #0
9000f0dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f0de:	4b4f      	ldr	r3, [pc, #316]	; (9000f21c <xTaskIncrementTick+0x148>)
9000f0e0:	681b      	ldr	r3, [r3, #0]
9000f0e2:	2b00      	cmp	r3, #0
9000f0e4:	f040 808f 	bne.w	9000f206 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f0e8:	4b4d      	ldr	r3, [pc, #308]	; (9000f220 <xTaskIncrementTick+0x14c>)
9000f0ea:	681b      	ldr	r3, [r3, #0]
9000f0ec:	3301      	adds	r3, #1
9000f0ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
9000f0f0:	4a4b      	ldr	r2, [pc, #300]	; (9000f220 <xTaskIncrementTick+0x14c>)
9000f0f2:	693b      	ldr	r3, [r7, #16]
9000f0f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000f0f6:	693b      	ldr	r3, [r7, #16]
9000f0f8:	2b00      	cmp	r3, #0
9000f0fa:	d120      	bne.n	9000f13e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
9000f0fc:	4b49      	ldr	r3, [pc, #292]	; (9000f224 <xTaskIncrementTick+0x150>)
9000f0fe:	681b      	ldr	r3, [r3, #0]
9000f100:	681b      	ldr	r3, [r3, #0]
9000f102:	2b00      	cmp	r3, #0
9000f104:	d00a      	beq.n	9000f11c <xTaskIncrementTick+0x48>
	__asm volatile
9000f106:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f10a:	f383 8811 	msr	BASEPRI, r3
9000f10e:	f3bf 8f6f 	isb	sy
9000f112:	f3bf 8f4f 	dsb	sy
9000f116:	603b      	str	r3, [r7, #0]
}
9000f118:	bf00      	nop
9000f11a:	e7fe      	b.n	9000f11a <xTaskIncrementTick+0x46>
9000f11c:	4b41      	ldr	r3, [pc, #260]	; (9000f224 <xTaskIncrementTick+0x150>)
9000f11e:	681b      	ldr	r3, [r3, #0]
9000f120:	60fb      	str	r3, [r7, #12]
9000f122:	4b41      	ldr	r3, [pc, #260]	; (9000f228 <xTaskIncrementTick+0x154>)
9000f124:	681b      	ldr	r3, [r3, #0]
9000f126:	4a3f      	ldr	r2, [pc, #252]	; (9000f224 <xTaskIncrementTick+0x150>)
9000f128:	6013      	str	r3, [r2, #0]
9000f12a:	4a3f      	ldr	r2, [pc, #252]	; (9000f228 <xTaskIncrementTick+0x154>)
9000f12c:	68fb      	ldr	r3, [r7, #12]
9000f12e:	6013      	str	r3, [r2, #0]
9000f130:	4b3e      	ldr	r3, [pc, #248]	; (9000f22c <xTaskIncrementTick+0x158>)
9000f132:	681b      	ldr	r3, [r3, #0]
9000f134:	3301      	adds	r3, #1
9000f136:	4a3d      	ldr	r2, [pc, #244]	; (9000f22c <xTaskIncrementTick+0x158>)
9000f138:	6013      	str	r3, [r2, #0]
9000f13a:	f000 fadb 	bl	9000f6f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
9000f13e:	4b3c      	ldr	r3, [pc, #240]	; (9000f230 <xTaskIncrementTick+0x15c>)
9000f140:	681b      	ldr	r3, [r3, #0]
9000f142:	693a      	ldr	r2, [r7, #16]
9000f144:	429a      	cmp	r2, r3
9000f146:	d349      	bcc.n	9000f1dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f148:	4b36      	ldr	r3, [pc, #216]	; (9000f224 <xTaskIncrementTick+0x150>)
9000f14a:	681b      	ldr	r3, [r3, #0]
9000f14c:	681b      	ldr	r3, [r3, #0]
9000f14e:	2b00      	cmp	r3, #0
9000f150:	d104      	bne.n	9000f15c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f152:	4b37      	ldr	r3, [pc, #220]	; (9000f230 <xTaskIncrementTick+0x15c>)
9000f154:	f04f 32ff 	mov.w	r2, #4294967295
9000f158:	601a      	str	r2, [r3, #0]
					break;
9000f15a:	e03f      	b.n	9000f1dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f15c:	4b31      	ldr	r3, [pc, #196]	; (9000f224 <xTaskIncrementTick+0x150>)
9000f15e:	681b      	ldr	r3, [r3, #0]
9000f160:	68db      	ldr	r3, [r3, #12]
9000f162:	68db      	ldr	r3, [r3, #12]
9000f164:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000f166:	68bb      	ldr	r3, [r7, #8]
9000f168:	685b      	ldr	r3, [r3, #4]
9000f16a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
9000f16c:	693a      	ldr	r2, [r7, #16]
9000f16e:	687b      	ldr	r3, [r7, #4]
9000f170:	429a      	cmp	r2, r3
9000f172:	d203      	bcs.n	9000f17c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
9000f174:	4a2e      	ldr	r2, [pc, #184]	; (9000f230 <xTaskIncrementTick+0x15c>)
9000f176:	687b      	ldr	r3, [r7, #4]
9000f178:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000f17a:	e02f      	b.n	9000f1dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f17c:	68bb      	ldr	r3, [r7, #8]
9000f17e:	3304      	adds	r3, #4
9000f180:	4618      	mov	r0, r3
9000f182:	f7fe ff79 	bl	9000e078 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000f186:	68bb      	ldr	r3, [r7, #8]
9000f188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000f18a:	2b00      	cmp	r3, #0
9000f18c:	d004      	beq.n	9000f198 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f18e:	68bb      	ldr	r3, [r7, #8]
9000f190:	3318      	adds	r3, #24
9000f192:	4618      	mov	r0, r3
9000f194:	f7fe ff70 	bl	9000e078 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
9000f198:	68bb      	ldr	r3, [r7, #8]
9000f19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f19c:	4b25      	ldr	r3, [pc, #148]	; (9000f234 <xTaskIncrementTick+0x160>)
9000f19e:	681b      	ldr	r3, [r3, #0]
9000f1a0:	429a      	cmp	r2, r3
9000f1a2:	d903      	bls.n	9000f1ac <xTaskIncrementTick+0xd8>
9000f1a4:	68bb      	ldr	r3, [r7, #8]
9000f1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f1a8:	4a22      	ldr	r2, [pc, #136]	; (9000f234 <xTaskIncrementTick+0x160>)
9000f1aa:	6013      	str	r3, [r2, #0]
9000f1ac:	68bb      	ldr	r3, [r7, #8]
9000f1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f1b0:	4613      	mov	r3, r2
9000f1b2:	009b      	lsls	r3, r3, #2
9000f1b4:	4413      	add	r3, r2
9000f1b6:	009b      	lsls	r3, r3, #2
9000f1b8:	4a1f      	ldr	r2, [pc, #124]	; (9000f238 <xTaskIncrementTick+0x164>)
9000f1ba:	441a      	add	r2, r3
9000f1bc:	68bb      	ldr	r3, [r7, #8]
9000f1be:	3304      	adds	r3, #4
9000f1c0:	4619      	mov	r1, r3
9000f1c2:	4610      	mov	r0, r2
9000f1c4:	f7fe fefb 	bl	9000dfbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f1c8:	68bb      	ldr	r3, [r7, #8]
9000f1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f1cc:	4b1b      	ldr	r3, [pc, #108]	; (9000f23c <xTaskIncrementTick+0x168>)
9000f1ce:	681b      	ldr	r3, [r3, #0]
9000f1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f1d2:	429a      	cmp	r2, r3
9000f1d4:	d3b8      	bcc.n	9000f148 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
9000f1d6:	2301      	movs	r3, #1
9000f1d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f1da:	e7b5      	b.n	9000f148 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000f1dc:	4b17      	ldr	r3, [pc, #92]	; (9000f23c <xTaskIncrementTick+0x168>)
9000f1de:	681b      	ldr	r3, [r3, #0]
9000f1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f1e2:	4915      	ldr	r1, [pc, #84]	; (9000f238 <xTaskIncrementTick+0x164>)
9000f1e4:	4613      	mov	r3, r2
9000f1e6:	009b      	lsls	r3, r3, #2
9000f1e8:	4413      	add	r3, r2
9000f1ea:	009b      	lsls	r3, r3, #2
9000f1ec:	440b      	add	r3, r1
9000f1ee:	681b      	ldr	r3, [r3, #0]
9000f1f0:	2b01      	cmp	r3, #1
9000f1f2:	d901      	bls.n	9000f1f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
9000f1f4:	2301      	movs	r3, #1
9000f1f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
9000f1f8:	4b11      	ldr	r3, [pc, #68]	; (9000f240 <xTaskIncrementTick+0x16c>)
9000f1fa:	681b      	ldr	r3, [r3, #0]
9000f1fc:	2b00      	cmp	r3, #0
9000f1fe:	d007      	beq.n	9000f210 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
9000f200:	2301      	movs	r3, #1
9000f202:	617b      	str	r3, [r7, #20]
9000f204:	e004      	b.n	9000f210 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
9000f206:	4b0f      	ldr	r3, [pc, #60]	; (9000f244 <xTaskIncrementTick+0x170>)
9000f208:	681b      	ldr	r3, [r3, #0]
9000f20a:	3301      	adds	r3, #1
9000f20c:	4a0d      	ldr	r2, [pc, #52]	; (9000f244 <xTaskIncrementTick+0x170>)
9000f20e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
9000f210:	697b      	ldr	r3, [r7, #20]
}
9000f212:	4618      	mov	r0, r3
9000f214:	3718      	adds	r7, #24
9000f216:	46bd      	mov	sp, r7
9000f218:	bd80      	pop	{r7, pc}
9000f21a:	bf00      	nop
9000f21c:	24001ae0 	.word	0x24001ae0
9000f220:	24001abc 	.word	0x24001abc
9000f224:	24001a70 	.word	0x24001a70
9000f228:	24001a74 	.word	0x24001a74
9000f22c:	24001ad0 	.word	0x24001ad0
9000f230:	24001ad8 	.word	0x24001ad8
9000f234:	24001ac0 	.word	0x24001ac0
9000f238:	240015e8 	.word	0x240015e8
9000f23c:	240015e4 	.word	0x240015e4
9000f240:	24001acc 	.word	0x24001acc
9000f244:	24001ac8 	.word	0x24001ac8

9000f248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
9000f248:	b480      	push	{r7}
9000f24a:	b085      	sub	sp, #20
9000f24c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000f24e:	4b2a      	ldr	r3, [pc, #168]	; (9000f2f8 <vTaskSwitchContext+0xb0>)
9000f250:	681b      	ldr	r3, [r3, #0]
9000f252:	2b00      	cmp	r3, #0
9000f254:	d003      	beq.n	9000f25e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
9000f256:	4b29      	ldr	r3, [pc, #164]	; (9000f2fc <vTaskSwitchContext+0xb4>)
9000f258:	2201      	movs	r2, #1
9000f25a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
9000f25c:	e046      	b.n	9000f2ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
9000f25e:	4b27      	ldr	r3, [pc, #156]	; (9000f2fc <vTaskSwitchContext+0xb4>)
9000f260:	2200      	movs	r2, #0
9000f262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f264:	4b26      	ldr	r3, [pc, #152]	; (9000f300 <vTaskSwitchContext+0xb8>)
9000f266:	681b      	ldr	r3, [r3, #0]
9000f268:	60fb      	str	r3, [r7, #12]
9000f26a:	e010      	b.n	9000f28e <vTaskSwitchContext+0x46>
9000f26c:	68fb      	ldr	r3, [r7, #12]
9000f26e:	2b00      	cmp	r3, #0
9000f270:	d10a      	bne.n	9000f288 <vTaskSwitchContext+0x40>
	__asm volatile
9000f272:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f276:	f383 8811 	msr	BASEPRI, r3
9000f27a:	f3bf 8f6f 	isb	sy
9000f27e:	f3bf 8f4f 	dsb	sy
9000f282:	607b      	str	r3, [r7, #4]
}
9000f284:	bf00      	nop
9000f286:	e7fe      	b.n	9000f286 <vTaskSwitchContext+0x3e>
9000f288:	68fb      	ldr	r3, [r7, #12]
9000f28a:	3b01      	subs	r3, #1
9000f28c:	60fb      	str	r3, [r7, #12]
9000f28e:	491d      	ldr	r1, [pc, #116]	; (9000f304 <vTaskSwitchContext+0xbc>)
9000f290:	68fa      	ldr	r2, [r7, #12]
9000f292:	4613      	mov	r3, r2
9000f294:	009b      	lsls	r3, r3, #2
9000f296:	4413      	add	r3, r2
9000f298:	009b      	lsls	r3, r3, #2
9000f29a:	440b      	add	r3, r1
9000f29c:	681b      	ldr	r3, [r3, #0]
9000f29e:	2b00      	cmp	r3, #0
9000f2a0:	d0e4      	beq.n	9000f26c <vTaskSwitchContext+0x24>
9000f2a2:	68fa      	ldr	r2, [r7, #12]
9000f2a4:	4613      	mov	r3, r2
9000f2a6:	009b      	lsls	r3, r3, #2
9000f2a8:	4413      	add	r3, r2
9000f2aa:	009b      	lsls	r3, r3, #2
9000f2ac:	4a15      	ldr	r2, [pc, #84]	; (9000f304 <vTaskSwitchContext+0xbc>)
9000f2ae:	4413      	add	r3, r2
9000f2b0:	60bb      	str	r3, [r7, #8]
9000f2b2:	68bb      	ldr	r3, [r7, #8]
9000f2b4:	685b      	ldr	r3, [r3, #4]
9000f2b6:	685a      	ldr	r2, [r3, #4]
9000f2b8:	68bb      	ldr	r3, [r7, #8]
9000f2ba:	605a      	str	r2, [r3, #4]
9000f2bc:	68bb      	ldr	r3, [r7, #8]
9000f2be:	685a      	ldr	r2, [r3, #4]
9000f2c0:	68bb      	ldr	r3, [r7, #8]
9000f2c2:	3308      	adds	r3, #8
9000f2c4:	429a      	cmp	r2, r3
9000f2c6:	d104      	bne.n	9000f2d2 <vTaskSwitchContext+0x8a>
9000f2c8:	68bb      	ldr	r3, [r7, #8]
9000f2ca:	685b      	ldr	r3, [r3, #4]
9000f2cc:	685a      	ldr	r2, [r3, #4]
9000f2ce:	68bb      	ldr	r3, [r7, #8]
9000f2d0:	605a      	str	r2, [r3, #4]
9000f2d2:	68bb      	ldr	r3, [r7, #8]
9000f2d4:	685b      	ldr	r3, [r3, #4]
9000f2d6:	68db      	ldr	r3, [r3, #12]
9000f2d8:	4a0b      	ldr	r2, [pc, #44]	; (9000f308 <vTaskSwitchContext+0xc0>)
9000f2da:	6013      	str	r3, [r2, #0]
9000f2dc:	4a08      	ldr	r2, [pc, #32]	; (9000f300 <vTaskSwitchContext+0xb8>)
9000f2de:	68fb      	ldr	r3, [r7, #12]
9000f2e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
9000f2e2:	4b09      	ldr	r3, [pc, #36]	; (9000f308 <vTaskSwitchContext+0xc0>)
9000f2e4:	681b      	ldr	r3, [r3, #0]
9000f2e6:	3354      	adds	r3, #84	; 0x54
9000f2e8:	4a08      	ldr	r2, [pc, #32]	; (9000f30c <vTaskSwitchContext+0xc4>)
9000f2ea:	6013      	str	r3, [r2, #0]
}
9000f2ec:	bf00      	nop
9000f2ee:	3714      	adds	r7, #20
9000f2f0:	46bd      	mov	sp, r7
9000f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f2f6:	4770      	bx	lr
9000f2f8:	24001ae0 	.word	0x24001ae0
9000f2fc:	24001acc 	.word	0x24001acc
9000f300:	24001ac0 	.word	0x24001ac0
9000f304:	240015e8 	.word	0x240015e8
9000f308:	240015e4 	.word	0x240015e4
9000f30c:	24000040 	.word	0x24000040

9000f310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
9000f310:	b580      	push	{r7, lr}
9000f312:	b084      	sub	sp, #16
9000f314:	af00      	add	r7, sp, #0
9000f316:	6078      	str	r0, [r7, #4]
9000f318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
9000f31a:	687b      	ldr	r3, [r7, #4]
9000f31c:	2b00      	cmp	r3, #0
9000f31e:	d10a      	bne.n	9000f336 <vTaskPlaceOnEventList+0x26>
	__asm volatile
9000f320:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f324:	f383 8811 	msr	BASEPRI, r3
9000f328:	f3bf 8f6f 	isb	sy
9000f32c:	f3bf 8f4f 	dsb	sy
9000f330:	60fb      	str	r3, [r7, #12]
}
9000f332:	bf00      	nop
9000f334:	e7fe      	b.n	9000f334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000f336:	4b07      	ldr	r3, [pc, #28]	; (9000f354 <vTaskPlaceOnEventList+0x44>)
9000f338:	681b      	ldr	r3, [r3, #0]
9000f33a:	3318      	adds	r3, #24
9000f33c:	4619      	mov	r1, r3
9000f33e:	6878      	ldr	r0, [r7, #4]
9000f340:	f7fe fe61 	bl	9000e006 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
9000f344:	2101      	movs	r1, #1
9000f346:	6838      	ldr	r0, [r7, #0]
9000f348:	f000 fa80 	bl	9000f84c <prvAddCurrentTaskToDelayedList>
}
9000f34c:	bf00      	nop
9000f34e:	3710      	adds	r7, #16
9000f350:	46bd      	mov	sp, r7
9000f352:	bd80      	pop	{r7, pc}
9000f354:	240015e4 	.word	0x240015e4

9000f358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000f358:	b580      	push	{r7, lr}
9000f35a:	b086      	sub	sp, #24
9000f35c:	af00      	add	r7, sp, #0
9000f35e:	60f8      	str	r0, [r7, #12]
9000f360:	60b9      	str	r1, [r7, #8]
9000f362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
9000f364:	68fb      	ldr	r3, [r7, #12]
9000f366:	2b00      	cmp	r3, #0
9000f368:	d10a      	bne.n	9000f380 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
9000f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f36e:	f383 8811 	msr	BASEPRI, r3
9000f372:	f3bf 8f6f 	isb	sy
9000f376:	f3bf 8f4f 	dsb	sy
9000f37a:	617b      	str	r3, [r7, #20]
}
9000f37c:	bf00      	nop
9000f37e:	e7fe      	b.n	9000f37e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000f380:	4b0a      	ldr	r3, [pc, #40]	; (9000f3ac <vTaskPlaceOnEventListRestricted+0x54>)
9000f382:	681b      	ldr	r3, [r3, #0]
9000f384:	3318      	adds	r3, #24
9000f386:	4619      	mov	r1, r3
9000f388:	68f8      	ldr	r0, [r7, #12]
9000f38a:	f7fe fe18 	bl	9000dfbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
9000f38e:	687b      	ldr	r3, [r7, #4]
9000f390:	2b00      	cmp	r3, #0
9000f392:	d002      	beq.n	9000f39a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
9000f394:	f04f 33ff 	mov.w	r3, #4294967295
9000f398:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
9000f39a:	6879      	ldr	r1, [r7, #4]
9000f39c:	68b8      	ldr	r0, [r7, #8]
9000f39e:	f000 fa55 	bl	9000f84c <prvAddCurrentTaskToDelayedList>
	}
9000f3a2:	bf00      	nop
9000f3a4:	3718      	adds	r7, #24
9000f3a6:	46bd      	mov	sp, r7
9000f3a8:	bd80      	pop	{r7, pc}
9000f3aa:	bf00      	nop
9000f3ac:	240015e4 	.word	0x240015e4

9000f3b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
9000f3b0:	b580      	push	{r7, lr}
9000f3b2:	b086      	sub	sp, #24
9000f3b4:	af00      	add	r7, sp, #0
9000f3b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f3b8:	687b      	ldr	r3, [r7, #4]
9000f3ba:	68db      	ldr	r3, [r3, #12]
9000f3bc:	68db      	ldr	r3, [r3, #12]
9000f3be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
9000f3c0:	693b      	ldr	r3, [r7, #16]
9000f3c2:	2b00      	cmp	r3, #0
9000f3c4:	d10a      	bne.n	9000f3dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
9000f3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f3ca:	f383 8811 	msr	BASEPRI, r3
9000f3ce:	f3bf 8f6f 	isb	sy
9000f3d2:	f3bf 8f4f 	dsb	sy
9000f3d6:	60fb      	str	r3, [r7, #12]
}
9000f3d8:	bf00      	nop
9000f3da:	e7fe      	b.n	9000f3da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000f3dc:	693b      	ldr	r3, [r7, #16]
9000f3de:	3318      	adds	r3, #24
9000f3e0:	4618      	mov	r0, r3
9000f3e2:	f7fe fe49 	bl	9000e078 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f3e6:	4b1e      	ldr	r3, [pc, #120]	; (9000f460 <xTaskRemoveFromEventList+0xb0>)
9000f3e8:	681b      	ldr	r3, [r3, #0]
9000f3ea:	2b00      	cmp	r3, #0
9000f3ec:	d11d      	bne.n	9000f42a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000f3ee:	693b      	ldr	r3, [r7, #16]
9000f3f0:	3304      	adds	r3, #4
9000f3f2:	4618      	mov	r0, r3
9000f3f4:	f7fe fe40 	bl	9000e078 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000f3f8:	693b      	ldr	r3, [r7, #16]
9000f3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f3fc:	4b19      	ldr	r3, [pc, #100]	; (9000f464 <xTaskRemoveFromEventList+0xb4>)
9000f3fe:	681b      	ldr	r3, [r3, #0]
9000f400:	429a      	cmp	r2, r3
9000f402:	d903      	bls.n	9000f40c <xTaskRemoveFromEventList+0x5c>
9000f404:	693b      	ldr	r3, [r7, #16]
9000f406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f408:	4a16      	ldr	r2, [pc, #88]	; (9000f464 <xTaskRemoveFromEventList+0xb4>)
9000f40a:	6013      	str	r3, [r2, #0]
9000f40c:	693b      	ldr	r3, [r7, #16]
9000f40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f410:	4613      	mov	r3, r2
9000f412:	009b      	lsls	r3, r3, #2
9000f414:	4413      	add	r3, r2
9000f416:	009b      	lsls	r3, r3, #2
9000f418:	4a13      	ldr	r2, [pc, #76]	; (9000f468 <xTaskRemoveFromEventList+0xb8>)
9000f41a:	441a      	add	r2, r3
9000f41c:	693b      	ldr	r3, [r7, #16]
9000f41e:	3304      	adds	r3, #4
9000f420:	4619      	mov	r1, r3
9000f422:	4610      	mov	r0, r2
9000f424:	f7fe fdcb 	bl	9000dfbe <vListInsertEnd>
9000f428:	e005      	b.n	9000f436 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000f42a:	693b      	ldr	r3, [r7, #16]
9000f42c:	3318      	adds	r3, #24
9000f42e:	4619      	mov	r1, r3
9000f430:	480e      	ldr	r0, [pc, #56]	; (9000f46c <xTaskRemoveFromEventList+0xbc>)
9000f432:	f7fe fdc4 	bl	9000dfbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000f436:	693b      	ldr	r3, [r7, #16]
9000f438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f43a:	4b0d      	ldr	r3, [pc, #52]	; (9000f470 <xTaskRemoveFromEventList+0xc0>)
9000f43c:	681b      	ldr	r3, [r3, #0]
9000f43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f440:	429a      	cmp	r2, r3
9000f442:	d905      	bls.n	9000f450 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
9000f444:	2301      	movs	r3, #1
9000f446:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
9000f448:	4b0a      	ldr	r3, [pc, #40]	; (9000f474 <xTaskRemoveFromEventList+0xc4>)
9000f44a:	2201      	movs	r2, #1
9000f44c:	601a      	str	r2, [r3, #0]
9000f44e:	e001      	b.n	9000f454 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
9000f450:	2300      	movs	r3, #0
9000f452:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
9000f454:	697b      	ldr	r3, [r7, #20]
}
9000f456:	4618      	mov	r0, r3
9000f458:	3718      	adds	r7, #24
9000f45a:	46bd      	mov	sp, r7
9000f45c:	bd80      	pop	{r7, pc}
9000f45e:	bf00      	nop
9000f460:	24001ae0 	.word	0x24001ae0
9000f464:	24001ac0 	.word	0x24001ac0
9000f468:	240015e8 	.word	0x240015e8
9000f46c:	24001a78 	.word	0x24001a78
9000f470:	240015e4 	.word	0x240015e4
9000f474:	24001acc 	.word	0x24001acc

9000f478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
9000f478:	b480      	push	{r7}
9000f47a:	b083      	sub	sp, #12
9000f47c:	af00      	add	r7, sp, #0
9000f47e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000f480:	4b06      	ldr	r3, [pc, #24]	; (9000f49c <vTaskInternalSetTimeOutState+0x24>)
9000f482:	681a      	ldr	r2, [r3, #0]
9000f484:	687b      	ldr	r3, [r7, #4]
9000f486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000f488:	4b05      	ldr	r3, [pc, #20]	; (9000f4a0 <vTaskInternalSetTimeOutState+0x28>)
9000f48a:	681a      	ldr	r2, [r3, #0]
9000f48c:	687b      	ldr	r3, [r7, #4]
9000f48e:	605a      	str	r2, [r3, #4]
}
9000f490:	bf00      	nop
9000f492:	370c      	adds	r7, #12
9000f494:	46bd      	mov	sp, r7
9000f496:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f49a:	4770      	bx	lr
9000f49c:	24001ad0 	.word	0x24001ad0
9000f4a0:	24001abc 	.word	0x24001abc

9000f4a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
9000f4a4:	b580      	push	{r7, lr}
9000f4a6:	b088      	sub	sp, #32
9000f4a8:	af00      	add	r7, sp, #0
9000f4aa:	6078      	str	r0, [r7, #4]
9000f4ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
9000f4ae:	687b      	ldr	r3, [r7, #4]
9000f4b0:	2b00      	cmp	r3, #0
9000f4b2:	d10a      	bne.n	9000f4ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
9000f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4b8:	f383 8811 	msr	BASEPRI, r3
9000f4bc:	f3bf 8f6f 	isb	sy
9000f4c0:	f3bf 8f4f 	dsb	sy
9000f4c4:	613b      	str	r3, [r7, #16]
}
9000f4c6:	bf00      	nop
9000f4c8:	e7fe      	b.n	9000f4c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
9000f4ca:	683b      	ldr	r3, [r7, #0]
9000f4cc:	2b00      	cmp	r3, #0
9000f4ce:	d10a      	bne.n	9000f4e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
9000f4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f4d4:	f383 8811 	msr	BASEPRI, r3
9000f4d8:	f3bf 8f6f 	isb	sy
9000f4dc:	f3bf 8f4f 	dsb	sy
9000f4e0:	60fb      	str	r3, [r7, #12]
}
9000f4e2:	bf00      	nop
9000f4e4:	e7fe      	b.n	9000f4e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
9000f4e6:	f000 fe7d 	bl	900101e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
9000f4ea:	4b1d      	ldr	r3, [pc, #116]	; (9000f560 <xTaskCheckForTimeOut+0xbc>)
9000f4ec:	681b      	ldr	r3, [r3, #0]
9000f4ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000f4f0:	687b      	ldr	r3, [r7, #4]
9000f4f2:	685b      	ldr	r3, [r3, #4]
9000f4f4:	69ba      	ldr	r2, [r7, #24]
9000f4f6:	1ad3      	subs	r3, r2, r3
9000f4f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
9000f4fa:	683b      	ldr	r3, [r7, #0]
9000f4fc:	681b      	ldr	r3, [r3, #0]
9000f4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
9000f502:	d102      	bne.n	9000f50a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
9000f504:	2300      	movs	r3, #0
9000f506:	61fb      	str	r3, [r7, #28]
9000f508:	e023      	b.n	9000f552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000f50a:	687b      	ldr	r3, [r7, #4]
9000f50c:	681a      	ldr	r2, [r3, #0]
9000f50e:	4b15      	ldr	r3, [pc, #84]	; (9000f564 <xTaskCheckForTimeOut+0xc0>)
9000f510:	681b      	ldr	r3, [r3, #0]
9000f512:	429a      	cmp	r2, r3
9000f514:	d007      	beq.n	9000f526 <xTaskCheckForTimeOut+0x82>
9000f516:	687b      	ldr	r3, [r7, #4]
9000f518:	685b      	ldr	r3, [r3, #4]
9000f51a:	69ba      	ldr	r2, [r7, #24]
9000f51c:	429a      	cmp	r2, r3
9000f51e:	d302      	bcc.n	9000f526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
9000f520:	2301      	movs	r3, #1
9000f522:	61fb      	str	r3, [r7, #28]
9000f524:	e015      	b.n	9000f552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000f526:	683b      	ldr	r3, [r7, #0]
9000f528:	681b      	ldr	r3, [r3, #0]
9000f52a:	697a      	ldr	r2, [r7, #20]
9000f52c:	429a      	cmp	r2, r3
9000f52e:	d20b      	bcs.n	9000f548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
9000f530:	683b      	ldr	r3, [r7, #0]
9000f532:	681a      	ldr	r2, [r3, #0]
9000f534:	697b      	ldr	r3, [r7, #20]
9000f536:	1ad2      	subs	r2, r2, r3
9000f538:	683b      	ldr	r3, [r7, #0]
9000f53a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
9000f53c:	6878      	ldr	r0, [r7, #4]
9000f53e:	f7ff ff9b 	bl	9000f478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
9000f542:	2300      	movs	r3, #0
9000f544:	61fb      	str	r3, [r7, #28]
9000f546:	e004      	b.n	9000f552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
9000f548:	683b      	ldr	r3, [r7, #0]
9000f54a:	2200      	movs	r2, #0
9000f54c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
9000f54e:	2301      	movs	r3, #1
9000f550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
9000f552:	f000 fe77 	bl	90010244 <vPortExitCritical>

	return xReturn;
9000f556:	69fb      	ldr	r3, [r7, #28]
}
9000f558:	4618      	mov	r0, r3
9000f55a:	3720      	adds	r7, #32
9000f55c:	46bd      	mov	sp, r7
9000f55e:	bd80      	pop	{r7, pc}
9000f560:	24001abc 	.word	0x24001abc
9000f564:	24001ad0 	.word	0x24001ad0

9000f568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
9000f568:	b480      	push	{r7}
9000f56a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
9000f56c:	4b03      	ldr	r3, [pc, #12]	; (9000f57c <vTaskMissedYield+0x14>)
9000f56e:	2201      	movs	r2, #1
9000f570:	601a      	str	r2, [r3, #0]
}
9000f572:	bf00      	nop
9000f574:	46bd      	mov	sp, r7
9000f576:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f57a:	4770      	bx	lr
9000f57c:	24001acc 	.word	0x24001acc

9000f580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
9000f580:	b580      	push	{r7, lr}
9000f582:	b082      	sub	sp, #8
9000f584:	af00      	add	r7, sp, #0
9000f586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
9000f588:	f000 f852 	bl	9000f630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000f58c:	4b06      	ldr	r3, [pc, #24]	; (9000f5a8 <prvIdleTask+0x28>)
9000f58e:	681b      	ldr	r3, [r3, #0]
9000f590:	2b01      	cmp	r3, #1
9000f592:	d9f9      	bls.n	9000f588 <prvIdleTask+0x8>
			{
				taskYIELD();
9000f594:	4b05      	ldr	r3, [pc, #20]	; (9000f5ac <prvIdleTask+0x2c>)
9000f596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f59a:	601a      	str	r2, [r3, #0]
9000f59c:	f3bf 8f4f 	dsb	sy
9000f5a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
9000f5a4:	e7f0      	b.n	9000f588 <prvIdleTask+0x8>
9000f5a6:	bf00      	nop
9000f5a8:	240015e8 	.word	0x240015e8
9000f5ac:	e000ed04 	.word	0xe000ed04

9000f5b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
9000f5b0:	b580      	push	{r7, lr}
9000f5b2:	b082      	sub	sp, #8
9000f5b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000f5b6:	2300      	movs	r3, #0
9000f5b8:	607b      	str	r3, [r7, #4]
9000f5ba:	e00c      	b.n	9000f5d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000f5bc:	687a      	ldr	r2, [r7, #4]
9000f5be:	4613      	mov	r3, r2
9000f5c0:	009b      	lsls	r3, r3, #2
9000f5c2:	4413      	add	r3, r2
9000f5c4:	009b      	lsls	r3, r3, #2
9000f5c6:	4a12      	ldr	r2, [pc, #72]	; (9000f610 <prvInitialiseTaskLists+0x60>)
9000f5c8:	4413      	add	r3, r2
9000f5ca:	4618      	mov	r0, r3
9000f5cc:	f7fe fcca 	bl	9000df64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000f5d0:	687b      	ldr	r3, [r7, #4]
9000f5d2:	3301      	adds	r3, #1
9000f5d4:	607b      	str	r3, [r7, #4]
9000f5d6:	687b      	ldr	r3, [r7, #4]
9000f5d8:	2b37      	cmp	r3, #55	; 0x37
9000f5da:	d9ef      	bls.n	9000f5bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
9000f5dc:	480d      	ldr	r0, [pc, #52]	; (9000f614 <prvInitialiseTaskLists+0x64>)
9000f5de:	f7fe fcc1 	bl	9000df64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000f5e2:	480d      	ldr	r0, [pc, #52]	; (9000f618 <prvInitialiseTaskLists+0x68>)
9000f5e4:	f7fe fcbe 	bl	9000df64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000f5e8:	480c      	ldr	r0, [pc, #48]	; (9000f61c <prvInitialiseTaskLists+0x6c>)
9000f5ea:	f7fe fcbb 	bl	9000df64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000f5ee:	480c      	ldr	r0, [pc, #48]	; (9000f620 <prvInitialiseTaskLists+0x70>)
9000f5f0:	f7fe fcb8 	bl	9000df64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000f5f4:	480b      	ldr	r0, [pc, #44]	; (9000f624 <prvInitialiseTaskLists+0x74>)
9000f5f6:	f7fe fcb5 	bl	9000df64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000f5fa:	4b0b      	ldr	r3, [pc, #44]	; (9000f628 <prvInitialiseTaskLists+0x78>)
9000f5fc:	4a05      	ldr	r2, [pc, #20]	; (9000f614 <prvInitialiseTaskLists+0x64>)
9000f5fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000f600:	4b0a      	ldr	r3, [pc, #40]	; (9000f62c <prvInitialiseTaskLists+0x7c>)
9000f602:	4a05      	ldr	r2, [pc, #20]	; (9000f618 <prvInitialiseTaskLists+0x68>)
9000f604:	601a      	str	r2, [r3, #0]
}
9000f606:	bf00      	nop
9000f608:	3708      	adds	r7, #8
9000f60a:	46bd      	mov	sp, r7
9000f60c:	bd80      	pop	{r7, pc}
9000f60e:	bf00      	nop
9000f610:	240015e8 	.word	0x240015e8
9000f614:	24001a48 	.word	0x24001a48
9000f618:	24001a5c 	.word	0x24001a5c
9000f61c:	24001a78 	.word	0x24001a78
9000f620:	24001a8c 	.word	0x24001a8c
9000f624:	24001aa4 	.word	0x24001aa4
9000f628:	24001a70 	.word	0x24001a70
9000f62c:	24001a74 	.word	0x24001a74

9000f630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
9000f630:	b580      	push	{r7, lr}
9000f632:	b082      	sub	sp, #8
9000f634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000f636:	e019      	b.n	9000f66c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
9000f638:	f000 fdd4 	bl	900101e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f63c:	4b10      	ldr	r3, [pc, #64]	; (9000f680 <prvCheckTasksWaitingTermination+0x50>)
9000f63e:	68db      	ldr	r3, [r3, #12]
9000f640:	68db      	ldr	r3, [r3, #12]
9000f642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f644:	687b      	ldr	r3, [r7, #4]
9000f646:	3304      	adds	r3, #4
9000f648:	4618      	mov	r0, r3
9000f64a:	f7fe fd15 	bl	9000e078 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000f64e:	4b0d      	ldr	r3, [pc, #52]	; (9000f684 <prvCheckTasksWaitingTermination+0x54>)
9000f650:	681b      	ldr	r3, [r3, #0]
9000f652:	3b01      	subs	r3, #1
9000f654:	4a0b      	ldr	r2, [pc, #44]	; (9000f684 <prvCheckTasksWaitingTermination+0x54>)
9000f656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
9000f658:	4b0b      	ldr	r3, [pc, #44]	; (9000f688 <prvCheckTasksWaitingTermination+0x58>)
9000f65a:	681b      	ldr	r3, [r3, #0]
9000f65c:	3b01      	subs	r3, #1
9000f65e:	4a0a      	ldr	r2, [pc, #40]	; (9000f688 <prvCheckTasksWaitingTermination+0x58>)
9000f660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
9000f662:	f000 fdef 	bl	90010244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
9000f666:	6878      	ldr	r0, [r7, #4]
9000f668:	f000 f810 	bl	9000f68c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000f66c:	4b06      	ldr	r3, [pc, #24]	; (9000f688 <prvCheckTasksWaitingTermination+0x58>)
9000f66e:	681b      	ldr	r3, [r3, #0]
9000f670:	2b00      	cmp	r3, #0
9000f672:	d1e1      	bne.n	9000f638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
9000f674:	bf00      	nop
9000f676:	bf00      	nop
9000f678:	3708      	adds	r7, #8
9000f67a:	46bd      	mov	sp, r7
9000f67c:	bd80      	pop	{r7, pc}
9000f67e:	bf00      	nop
9000f680:	24001a8c 	.word	0x24001a8c
9000f684:	24001ab8 	.word	0x24001ab8
9000f688:	24001aa0 	.word	0x24001aa0

9000f68c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
9000f68c:	b580      	push	{r7, lr}
9000f68e:	b084      	sub	sp, #16
9000f690:	af00      	add	r7, sp, #0
9000f692:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
9000f694:	687b      	ldr	r3, [r7, #4]
9000f696:	3354      	adds	r3, #84	; 0x54
9000f698:	4618      	mov	r0, r3
9000f69a:	f002 f9e1 	bl	90011a60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000f69e:	687b      	ldr	r3, [r7, #4]
9000f6a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
9000f6a4:	2b00      	cmp	r3, #0
9000f6a6:	d108      	bne.n	9000f6ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
9000f6a8:	687b      	ldr	r3, [r7, #4]
9000f6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000f6ac:	4618      	mov	r0, r3
9000f6ae:	f000 ff87 	bl	900105c0 <vPortFree>
				vPortFree( pxTCB );
9000f6b2:	6878      	ldr	r0, [r7, #4]
9000f6b4:	f000 ff84 	bl	900105c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
9000f6b8:	e018      	b.n	9000f6ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000f6ba:	687b      	ldr	r3, [r7, #4]
9000f6bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
9000f6c0:	2b01      	cmp	r3, #1
9000f6c2:	d103      	bne.n	9000f6cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
9000f6c4:	6878      	ldr	r0, [r7, #4]
9000f6c6:	f000 ff7b 	bl	900105c0 <vPortFree>
	}
9000f6ca:	e00f      	b.n	9000f6ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000f6cc:	687b      	ldr	r3, [r7, #4]
9000f6ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
9000f6d2:	2b02      	cmp	r3, #2
9000f6d4:	d00a      	beq.n	9000f6ec <prvDeleteTCB+0x60>
	__asm volatile
9000f6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f6da:	f383 8811 	msr	BASEPRI, r3
9000f6de:	f3bf 8f6f 	isb	sy
9000f6e2:	f3bf 8f4f 	dsb	sy
9000f6e6:	60fb      	str	r3, [r7, #12]
}
9000f6e8:	bf00      	nop
9000f6ea:	e7fe      	b.n	9000f6ea <prvDeleteTCB+0x5e>
	}
9000f6ec:	bf00      	nop
9000f6ee:	3710      	adds	r7, #16
9000f6f0:	46bd      	mov	sp, r7
9000f6f2:	bd80      	pop	{r7, pc}

9000f6f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
9000f6f4:	b480      	push	{r7}
9000f6f6:	b083      	sub	sp, #12
9000f6f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f6fa:	4b0c      	ldr	r3, [pc, #48]	; (9000f72c <prvResetNextTaskUnblockTime+0x38>)
9000f6fc:	681b      	ldr	r3, [r3, #0]
9000f6fe:	681b      	ldr	r3, [r3, #0]
9000f700:	2b00      	cmp	r3, #0
9000f702:	d104      	bne.n	9000f70e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000f704:	4b0a      	ldr	r3, [pc, #40]	; (9000f730 <prvResetNextTaskUnblockTime+0x3c>)
9000f706:	f04f 32ff 	mov.w	r2, #4294967295
9000f70a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
9000f70c:	e008      	b.n	9000f720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f70e:	4b07      	ldr	r3, [pc, #28]	; (9000f72c <prvResetNextTaskUnblockTime+0x38>)
9000f710:	681b      	ldr	r3, [r3, #0]
9000f712:	68db      	ldr	r3, [r3, #12]
9000f714:	68db      	ldr	r3, [r3, #12]
9000f716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f718:	687b      	ldr	r3, [r7, #4]
9000f71a:	685b      	ldr	r3, [r3, #4]
9000f71c:	4a04      	ldr	r2, [pc, #16]	; (9000f730 <prvResetNextTaskUnblockTime+0x3c>)
9000f71e:	6013      	str	r3, [r2, #0]
}
9000f720:	bf00      	nop
9000f722:	370c      	adds	r7, #12
9000f724:	46bd      	mov	sp, r7
9000f726:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f72a:	4770      	bx	lr
9000f72c:	24001a70 	.word	0x24001a70
9000f730:	24001ad8 	.word	0x24001ad8

9000f734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
9000f734:	b480      	push	{r7}
9000f736:	b083      	sub	sp, #12
9000f738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
9000f73a:	4b0b      	ldr	r3, [pc, #44]	; (9000f768 <xTaskGetSchedulerState+0x34>)
9000f73c:	681b      	ldr	r3, [r3, #0]
9000f73e:	2b00      	cmp	r3, #0
9000f740:	d102      	bne.n	9000f748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
9000f742:	2301      	movs	r3, #1
9000f744:	607b      	str	r3, [r7, #4]
9000f746:	e008      	b.n	9000f75a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f748:	4b08      	ldr	r3, [pc, #32]	; (9000f76c <xTaskGetSchedulerState+0x38>)
9000f74a:	681b      	ldr	r3, [r3, #0]
9000f74c:	2b00      	cmp	r3, #0
9000f74e:	d102      	bne.n	9000f756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
9000f750:	2302      	movs	r3, #2
9000f752:	607b      	str	r3, [r7, #4]
9000f754:	e001      	b.n	9000f75a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
9000f756:	2300      	movs	r3, #0
9000f758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
9000f75a:	687b      	ldr	r3, [r7, #4]
	}
9000f75c:	4618      	mov	r0, r3
9000f75e:	370c      	adds	r7, #12
9000f760:	46bd      	mov	sp, r7
9000f762:	f85d 7b04 	ldr.w	r7, [sp], #4
9000f766:	4770      	bx	lr
9000f768:	24001ac4 	.word	0x24001ac4
9000f76c:	24001ae0 	.word	0x24001ae0

9000f770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
9000f770:	b580      	push	{r7, lr}
9000f772:	b086      	sub	sp, #24
9000f774:	af00      	add	r7, sp, #0
9000f776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
9000f778:	687b      	ldr	r3, [r7, #4]
9000f77a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
9000f77c:	2300      	movs	r3, #0
9000f77e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
9000f780:	687b      	ldr	r3, [r7, #4]
9000f782:	2b00      	cmp	r3, #0
9000f784:	d056      	beq.n	9000f834 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
9000f786:	4b2e      	ldr	r3, [pc, #184]	; (9000f840 <xTaskPriorityDisinherit+0xd0>)
9000f788:	681b      	ldr	r3, [r3, #0]
9000f78a:	693a      	ldr	r2, [r7, #16]
9000f78c:	429a      	cmp	r2, r3
9000f78e:	d00a      	beq.n	9000f7a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
9000f790:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f794:	f383 8811 	msr	BASEPRI, r3
9000f798:	f3bf 8f6f 	isb	sy
9000f79c:	f3bf 8f4f 	dsb	sy
9000f7a0:	60fb      	str	r3, [r7, #12]
}
9000f7a2:	bf00      	nop
9000f7a4:	e7fe      	b.n	9000f7a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
9000f7a6:	693b      	ldr	r3, [r7, #16]
9000f7a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000f7aa:	2b00      	cmp	r3, #0
9000f7ac:	d10a      	bne.n	9000f7c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
9000f7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7b2:	f383 8811 	msr	BASEPRI, r3
9000f7b6:	f3bf 8f6f 	isb	sy
9000f7ba:	f3bf 8f4f 	dsb	sy
9000f7be:	60bb      	str	r3, [r7, #8]
}
9000f7c0:	bf00      	nop
9000f7c2:	e7fe      	b.n	9000f7c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
9000f7c4:	693b      	ldr	r3, [r7, #16]
9000f7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000f7c8:	1e5a      	subs	r2, r3, #1
9000f7ca:	693b      	ldr	r3, [r7, #16]
9000f7cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000f7ce:	693b      	ldr	r3, [r7, #16]
9000f7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f7d2:	693b      	ldr	r3, [r7, #16]
9000f7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000f7d6:	429a      	cmp	r2, r3
9000f7d8:	d02c      	beq.n	9000f834 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000f7da:	693b      	ldr	r3, [r7, #16]
9000f7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000f7de:	2b00      	cmp	r3, #0
9000f7e0:	d128      	bne.n	9000f834 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f7e2:	693b      	ldr	r3, [r7, #16]
9000f7e4:	3304      	adds	r3, #4
9000f7e6:	4618      	mov	r0, r3
9000f7e8:	f7fe fc46 	bl	9000e078 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000f7ec:	693b      	ldr	r3, [r7, #16]
9000f7ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
9000f7f0:	693b      	ldr	r3, [r7, #16]
9000f7f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f7f4:	693b      	ldr	r3, [r7, #16]
9000f7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f7f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
9000f7fc:	693b      	ldr	r3, [r7, #16]
9000f7fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
9000f800:	693b      	ldr	r3, [r7, #16]
9000f802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f804:	4b0f      	ldr	r3, [pc, #60]	; (9000f844 <xTaskPriorityDisinherit+0xd4>)
9000f806:	681b      	ldr	r3, [r3, #0]
9000f808:	429a      	cmp	r2, r3
9000f80a:	d903      	bls.n	9000f814 <xTaskPriorityDisinherit+0xa4>
9000f80c:	693b      	ldr	r3, [r7, #16]
9000f80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f810:	4a0c      	ldr	r2, [pc, #48]	; (9000f844 <xTaskPriorityDisinherit+0xd4>)
9000f812:	6013      	str	r3, [r2, #0]
9000f814:	693b      	ldr	r3, [r7, #16]
9000f816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000f818:	4613      	mov	r3, r2
9000f81a:	009b      	lsls	r3, r3, #2
9000f81c:	4413      	add	r3, r2
9000f81e:	009b      	lsls	r3, r3, #2
9000f820:	4a09      	ldr	r2, [pc, #36]	; (9000f848 <xTaskPriorityDisinherit+0xd8>)
9000f822:	441a      	add	r2, r3
9000f824:	693b      	ldr	r3, [r7, #16]
9000f826:	3304      	adds	r3, #4
9000f828:	4619      	mov	r1, r3
9000f82a:	4610      	mov	r0, r2
9000f82c:	f7fe fbc7 	bl	9000dfbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
9000f830:	2301      	movs	r3, #1
9000f832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
9000f834:	697b      	ldr	r3, [r7, #20]
	}
9000f836:	4618      	mov	r0, r3
9000f838:	3718      	adds	r7, #24
9000f83a:	46bd      	mov	sp, r7
9000f83c:	bd80      	pop	{r7, pc}
9000f83e:	bf00      	nop
9000f840:	240015e4 	.word	0x240015e4
9000f844:	24001ac0 	.word	0x24001ac0
9000f848:	240015e8 	.word	0x240015e8

9000f84c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
9000f84c:	b580      	push	{r7, lr}
9000f84e:	b084      	sub	sp, #16
9000f850:	af00      	add	r7, sp, #0
9000f852:	6078      	str	r0, [r7, #4]
9000f854:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000f856:	4b21      	ldr	r3, [pc, #132]	; (9000f8dc <prvAddCurrentTaskToDelayedList+0x90>)
9000f858:	681b      	ldr	r3, [r3, #0]
9000f85a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f85c:	4b20      	ldr	r3, [pc, #128]	; (9000f8e0 <prvAddCurrentTaskToDelayedList+0x94>)
9000f85e:	681b      	ldr	r3, [r3, #0]
9000f860:	3304      	adds	r3, #4
9000f862:	4618      	mov	r0, r3
9000f864:	f7fe fc08 	bl	9000e078 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000f868:	687b      	ldr	r3, [r7, #4]
9000f86a:	f1b3 3fff 	cmp.w	r3, #4294967295
9000f86e:	d10a      	bne.n	9000f886 <prvAddCurrentTaskToDelayedList+0x3a>
9000f870:	683b      	ldr	r3, [r7, #0]
9000f872:	2b00      	cmp	r3, #0
9000f874:	d007      	beq.n	9000f886 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f876:	4b1a      	ldr	r3, [pc, #104]	; (9000f8e0 <prvAddCurrentTaskToDelayedList+0x94>)
9000f878:	681b      	ldr	r3, [r3, #0]
9000f87a:	3304      	adds	r3, #4
9000f87c:	4619      	mov	r1, r3
9000f87e:	4819      	ldr	r0, [pc, #100]	; (9000f8e4 <prvAddCurrentTaskToDelayedList+0x98>)
9000f880:	f7fe fb9d 	bl	9000dfbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
9000f884:	e026      	b.n	9000f8d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000f886:	68fa      	ldr	r2, [r7, #12]
9000f888:	687b      	ldr	r3, [r7, #4]
9000f88a:	4413      	add	r3, r2
9000f88c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000f88e:	4b14      	ldr	r3, [pc, #80]	; (9000f8e0 <prvAddCurrentTaskToDelayedList+0x94>)
9000f890:	681b      	ldr	r3, [r3, #0]
9000f892:	68ba      	ldr	r2, [r7, #8]
9000f894:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000f896:	68ba      	ldr	r2, [r7, #8]
9000f898:	68fb      	ldr	r3, [r7, #12]
9000f89a:	429a      	cmp	r2, r3
9000f89c:	d209      	bcs.n	9000f8b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f89e:	4b12      	ldr	r3, [pc, #72]	; (9000f8e8 <prvAddCurrentTaskToDelayedList+0x9c>)
9000f8a0:	681a      	ldr	r2, [r3, #0]
9000f8a2:	4b0f      	ldr	r3, [pc, #60]	; (9000f8e0 <prvAddCurrentTaskToDelayedList+0x94>)
9000f8a4:	681b      	ldr	r3, [r3, #0]
9000f8a6:	3304      	adds	r3, #4
9000f8a8:	4619      	mov	r1, r3
9000f8aa:	4610      	mov	r0, r2
9000f8ac:	f7fe fbab 	bl	9000e006 <vListInsert>
}
9000f8b0:	e010      	b.n	9000f8d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f8b2:	4b0e      	ldr	r3, [pc, #56]	; (9000f8ec <prvAddCurrentTaskToDelayedList+0xa0>)
9000f8b4:	681a      	ldr	r2, [r3, #0]
9000f8b6:	4b0a      	ldr	r3, [pc, #40]	; (9000f8e0 <prvAddCurrentTaskToDelayedList+0x94>)
9000f8b8:	681b      	ldr	r3, [r3, #0]
9000f8ba:	3304      	adds	r3, #4
9000f8bc:	4619      	mov	r1, r3
9000f8be:	4610      	mov	r0, r2
9000f8c0:	f7fe fba1 	bl	9000e006 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000f8c4:	4b0a      	ldr	r3, [pc, #40]	; (9000f8f0 <prvAddCurrentTaskToDelayedList+0xa4>)
9000f8c6:	681b      	ldr	r3, [r3, #0]
9000f8c8:	68ba      	ldr	r2, [r7, #8]
9000f8ca:	429a      	cmp	r2, r3
9000f8cc:	d202      	bcs.n	9000f8d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
9000f8ce:	4a08      	ldr	r2, [pc, #32]	; (9000f8f0 <prvAddCurrentTaskToDelayedList+0xa4>)
9000f8d0:	68bb      	ldr	r3, [r7, #8]
9000f8d2:	6013      	str	r3, [r2, #0]
}
9000f8d4:	bf00      	nop
9000f8d6:	3710      	adds	r7, #16
9000f8d8:	46bd      	mov	sp, r7
9000f8da:	bd80      	pop	{r7, pc}
9000f8dc:	24001abc 	.word	0x24001abc
9000f8e0:	240015e4 	.word	0x240015e4
9000f8e4:	24001aa4 	.word	0x24001aa4
9000f8e8:	24001a74 	.word	0x24001a74
9000f8ec:	24001a70 	.word	0x24001a70
9000f8f0:	24001ad8 	.word	0x24001ad8

9000f8f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
9000f8f4:	b580      	push	{r7, lr}
9000f8f6:	b08a      	sub	sp, #40	; 0x28
9000f8f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
9000f8fa:	2300      	movs	r3, #0
9000f8fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
9000f8fe:	f000 fb07 	bl	9000ff10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
9000f902:	4b1c      	ldr	r3, [pc, #112]	; (9000f974 <xTimerCreateTimerTask+0x80>)
9000f904:	681b      	ldr	r3, [r3, #0]
9000f906:	2b00      	cmp	r3, #0
9000f908:	d021      	beq.n	9000f94e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
9000f90a:	2300      	movs	r3, #0
9000f90c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
9000f90e:	2300      	movs	r3, #0
9000f910:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000f912:	1d3a      	adds	r2, r7, #4
9000f914:	f107 0108 	add.w	r1, r7, #8
9000f918:	f107 030c 	add.w	r3, r7, #12
9000f91c:	4618      	mov	r0, r3
9000f91e:	f7fe fb07 	bl	9000df30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000f922:	6879      	ldr	r1, [r7, #4]
9000f924:	68bb      	ldr	r3, [r7, #8]
9000f926:	68fa      	ldr	r2, [r7, #12]
9000f928:	9202      	str	r2, [sp, #8]
9000f92a:	9301      	str	r3, [sp, #4]
9000f92c:	2302      	movs	r3, #2
9000f92e:	9300      	str	r3, [sp, #0]
9000f930:	2300      	movs	r3, #0
9000f932:	460a      	mov	r2, r1
9000f934:	4910      	ldr	r1, [pc, #64]	; (9000f978 <xTimerCreateTimerTask+0x84>)
9000f936:	4811      	ldr	r0, [pc, #68]	; (9000f97c <xTimerCreateTimerTask+0x88>)
9000f938:	f7ff f8b4 	bl	9000eaa4 <xTaskCreateStatic>
9000f93c:	4603      	mov	r3, r0
9000f93e:	4a10      	ldr	r2, [pc, #64]	; (9000f980 <xTimerCreateTimerTask+0x8c>)
9000f940:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
9000f942:	4b0f      	ldr	r3, [pc, #60]	; (9000f980 <xTimerCreateTimerTask+0x8c>)
9000f944:	681b      	ldr	r3, [r3, #0]
9000f946:	2b00      	cmp	r3, #0
9000f948:	d001      	beq.n	9000f94e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
9000f94a:	2301      	movs	r3, #1
9000f94c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
9000f94e:	697b      	ldr	r3, [r7, #20]
9000f950:	2b00      	cmp	r3, #0
9000f952:	d10a      	bne.n	9000f96a <xTimerCreateTimerTask+0x76>
	__asm volatile
9000f954:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f958:	f383 8811 	msr	BASEPRI, r3
9000f95c:	f3bf 8f6f 	isb	sy
9000f960:	f3bf 8f4f 	dsb	sy
9000f964:	613b      	str	r3, [r7, #16]
}
9000f966:	bf00      	nop
9000f968:	e7fe      	b.n	9000f968 <xTimerCreateTimerTask+0x74>
	return xReturn;
9000f96a:	697b      	ldr	r3, [r7, #20]
}
9000f96c:	4618      	mov	r0, r3
9000f96e:	3718      	adds	r7, #24
9000f970:	46bd      	mov	sp, r7
9000f972:	bd80      	pop	{r7, pc}
9000f974:	24001b14 	.word	0x24001b14
9000f978:	90013e2c 	.word	0x90013e2c
9000f97c:	9000fab9 	.word	0x9000fab9
9000f980:	24001b18 	.word	0x24001b18

9000f984 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
9000f984:	b580      	push	{r7, lr}
9000f986:	b08a      	sub	sp, #40	; 0x28
9000f988:	af00      	add	r7, sp, #0
9000f98a:	60f8      	str	r0, [r7, #12]
9000f98c:	60b9      	str	r1, [r7, #8]
9000f98e:	607a      	str	r2, [r7, #4]
9000f990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
9000f992:	2300      	movs	r3, #0
9000f994:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
9000f996:	68fb      	ldr	r3, [r7, #12]
9000f998:	2b00      	cmp	r3, #0
9000f99a:	d10a      	bne.n	9000f9b2 <xTimerGenericCommand+0x2e>
	__asm volatile
9000f99c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f9a0:	f383 8811 	msr	BASEPRI, r3
9000f9a4:	f3bf 8f6f 	isb	sy
9000f9a8:	f3bf 8f4f 	dsb	sy
9000f9ac:	623b      	str	r3, [r7, #32]
}
9000f9ae:	bf00      	nop
9000f9b0:	e7fe      	b.n	9000f9b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
9000f9b2:	4b1a      	ldr	r3, [pc, #104]	; (9000fa1c <xTimerGenericCommand+0x98>)
9000f9b4:	681b      	ldr	r3, [r3, #0]
9000f9b6:	2b00      	cmp	r3, #0
9000f9b8:	d02a      	beq.n	9000fa10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
9000f9ba:	68bb      	ldr	r3, [r7, #8]
9000f9bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000f9be:	687b      	ldr	r3, [r7, #4]
9000f9c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000f9c2:	68fb      	ldr	r3, [r7, #12]
9000f9c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
9000f9c6:	68bb      	ldr	r3, [r7, #8]
9000f9c8:	2b05      	cmp	r3, #5
9000f9ca:	dc18      	bgt.n	9000f9fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000f9cc:	f7ff feb2 	bl	9000f734 <xTaskGetSchedulerState>
9000f9d0:	4603      	mov	r3, r0
9000f9d2:	2b02      	cmp	r3, #2
9000f9d4:	d109      	bne.n	9000f9ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000f9d6:	4b11      	ldr	r3, [pc, #68]	; (9000fa1c <xTimerGenericCommand+0x98>)
9000f9d8:	6818      	ldr	r0, [r3, #0]
9000f9da:	f107 0110 	add.w	r1, r7, #16
9000f9de:	2300      	movs	r3, #0
9000f9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000f9e2:	f7fe fc77 	bl	9000e2d4 <xQueueGenericSend>
9000f9e6:	6278      	str	r0, [r7, #36]	; 0x24
9000f9e8:	e012      	b.n	9000fa10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
9000f9ea:	4b0c      	ldr	r3, [pc, #48]	; (9000fa1c <xTimerGenericCommand+0x98>)
9000f9ec:	6818      	ldr	r0, [r3, #0]
9000f9ee:	f107 0110 	add.w	r1, r7, #16
9000f9f2:	2300      	movs	r3, #0
9000f9f4:	2200      	movs	r2, #0
9000f9f6:	f7fe fc6d 	bl	9000e2d4 <xQueueGenericSend>
9000f9fa:	6278      	str	r0, [r7, #36]	; 0x24
9000f9fc:	e008      	b.n	9000fa10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
9000f9fe:	4b07      	ldr	r3, [pc, #28]	; (9000fa1c <xTimerGenericCommand+0x98>)
9000fa00:	6818      	ldr	r0, [r3, #0]
9000fa02:	f107 0110 	add.w	r1, r7, #16
9000fa06:	2300      	movs	r3, #0
9000fa08:	683a      	ldr	r2, [r7, #0]
9000fa0a:	f7fe fd61 	bl	9000e4d0 <xQueueGenericSendFromISR>
9000fa0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
9000fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000fa12:	4618      	mov	r0, r3
9000fa14:	3728      	adds	r7, #40	; 0x28
9000fa16:	46bd      	mov	sp, r7
9000fa18:	bd80      	pop	{r7, pc}
9000fa1a:	bf00      	nop
9000fa1c:	24001b14 	.word	0x24001b14

9000fa20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
9000fa20:	b580      	push	{r7, lr}
9000fa22:	b088      	sub	sp, #32
9000fa24:	af02      	add	r7, sp, #8
9000fa26:	6078      	str	r0, [r7, #4]
9000fa28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fa2a:	4b22      	ldr	r3, [pc, #136]	; (9000fab4 <prvProcessExpiredTimer+0x94>)
9000fa2c:	681b      	ldr	r3, [r3, #0]
9000fa2e:	68db      	ldr	r3, [r3, #12]
9000fa30:	68db      	ldr	r3, [r3, #12]
9000fa32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000fa34:	697b      	ldr	r3, [r7, #20]
9000fa36:	3304      	adds	r3, #4
9000fa38:	4618      	mov	r0, r3
9000fa3a:	f7fe fb1d 	bl	9000e078 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000fa3e:	697b      	ldr	r3, [r7, #20]
9000fa40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fa44:	f003 0304 	and.w	r3, r3, #4
9000fa48:	2b00      	cmp	r3, #0
9000fa4a:	d022      	beq.n	9000fa92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000fa4c:	697b      	ldr	r3, [r7, #20]
9000fa4e:	699a      	ldr	r2, [r3, #24]
9000fa50:	687b      	ldr	r3, [r7, #4]
9000fa52:	18d1      	adds	r1, r2, r3
9000fa54:	687b      	ldr	r3, [r7, #4]
9000fa56:	683a      	ldr	r2, [r7, #0]
9000fa58:	6978      	ldr	r0, [r7, #20]
9000fa5a:	f000 f8d1 	bl	9000fc00 <prvInsertTimerInActiveList>
9000fa5e:	4603      	mov	r3, r0
9000fa60:	2b00      	cmp	r3, #0
9000fa62:	d01f      	beq.n	9000faa4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
9000fa64:	2300      	movs	r3, #0
9000fa66:	9300      	str	r3, [sp, #0]
9000fa68:	2300      	movs	r3, #0
9000fa6a:	687a      	ldr	r2, [r7, #4]
9000fa6c:	2100      	movs	r1, #0
9000fa6e:	6978      	ldr	r0, [r7, #20]
9000fa70:	f7ff ff88 	bl	9000f984 <xTimerGenericCommand>
9000fa74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
9000fa76:	693b      	ldr	r3, [r7, #16]
9000fa78:	2b00      	cmp	r3, #0
9000fa7a:	d113      	bne.n	9000faa4 <prvProcessExpiredTimer+0x84>
	__asm volatile
9000fa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa80:	f383 8811 	msr	BASEPRI, r3
9000fa84:	f3bf 8f6f 	isb	sy
9000fa88:	f3bf 8f4f 	dsb	sy
9000fa8c:	60fb      	str	r3, [r7, #12]
}
9000fa8e:	bf00      	nop
9000fa90:	e7fe      	b.n	9000fa90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000fa92:	697b      	ldr	r3, [r7, #20]
9000fa94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fa98:	f023 0301 	bic.w	r3, r3, #1
9000fa9c:	b2da      	uxtb	r2, r3
9000fa9e:	697b      	ldr	r3, [r7, #20]
9000faa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000faa4:	697b      	ldr	r3, [r7, #20]
9000faa6:	6a1b      	ldr	r3, [r3, #32]
9000faa8:	6978      	ldr	r0, [r7, #20]
9000faaa:	4798      	blx	r3
}
9000faac:	bf00      	nop
9000faae:	3718      	adds	r7, #24
9000fab0:	46bd      	mov	sp, r7
9000fab2:	bd80      	pop	{r7, pc}
9000fab4:	24001b0c 	.word	0x24001b0c

9000fab8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
9000fab8:	b580      	push	{r7, lr}
9000faba:	b084      	sub	sp, #16
9000fabc:	af00      	add	r7, sp, #0
9000fabe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
9000fac0:	f107 0308 	add.w	r3, r7, #8
9000fac4:	4618      	mov	r0, r3
9000fac6:	f000 f857 	bl	9000fb78 <prvGetNextExpireTime>
9000faca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
9000facc:	68bb      	ldr	r3, [r7, #8]
9000face:	4619      	mov	r1, r3
9000fad0:	68f8      	ldr	r0, [r7, #12]
9000fad2:	f000 f803 	bl	9000fadc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
9000fad6:	f000 f8d5 	bl	9000fc84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
9000fada:	e7f1      	b.n	9000fac0 <prvTimerTask+0x8>

9000fadc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
9000fadc:	b580      	push	{r7, lr}
9000fade:	b084      	sub	sp, #16
9000fae0:	af00      	add	r7, sp, #0
9000fae2:	6078      	str	r0, [r7, #4]
9000fae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
9000fae6:	f7ff fa39 	bl	9000ef5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
9000faea:	f107 0308 	add.w	r3, r7, #8
9000faee:	4618      	mov	r0, r3
9000faf0:	f000 f866 	bl	9000fbc0 <prvSampleTimeNow>
9000faf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
9000faf6:	68bb      	ldr	r3, [r7, #8]
9000faf8:	2b00      	cmp	r3, #0
9000fafa:	d130      	bne.n	9000fb5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000fafc:	683b      	ldr	r3, [r7, #0]
9000fafe:	2b00      	cmp	r3, #0
9000fb00:	d10a      	bne.n	9000fb18 <prvProcessTimerOrBlockTask+0x3c>
9000fb02:	687a      	ldr	r2, [r7, #4]
9000fb04:	68fb      	ldr	r3, [r7, #12]
9000fb06:	429a      	cmp	r2, r3
9000fb08:	d806      	bhi.n	9000fb18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
9000fb0a:	f7ff fa35 	bl	9000ef78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
9000fb0e:	68f9      	ldr	r1, [r7, #12]
9000fb10:	6878      	ldr	r0, [r7, #4]
9000fb12:	f7ff ff85 	bl	9000fa20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
9000fb16:	e024      	b.n	9000fb62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
9000fb18:	683b      	ldr	r3, [r7, #0]
9000fb1a:	2b00      	cmp	r3, #0
9000fb1c:	d008      	beq.n	9000fb30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000fb1e:	4b13      	ldr	r3, [pc, #76]	; (9000fb6c <prvProcessTimerOrBlockTask+0x90>)
9000fb20:	681b      	ldr	r3, [r3, #0]
9000fb22:	681b      	ldr	r3, [r3, #0]
9000fb24:	2b00      	cmp	r3, #0
9000fb26:	d101      	bne.n	9000fb2c <prvProcessTimerOrBlockTask+0x50>
9000fb28:	2301      	movs	r3, #1
9000fb2a:	e000      	b.n	9000fb2e <prvProcessTimerOrBlockTask+0x52>
9000fb2c:	2300      	movs	r3, #0
9000fb2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9000fb30:	4b0f      	ldr	r3, [pc, #60]	; (9000fb70 <prvProcessTimerOrBlockTask+0x94>)
9000fb32:	6818      	ldr	r0, [r3, #0]
9000fb34:	687a      	ldr	r2, [r7, #4]
9000fb36:	68fb      	ldr	r3, [r7, #12]
9000fb38:	1ad3      	subs	r3, r2, r3
9000fb3a:	683a      	ldr	r2, [r7, #0]
9000fb3c:	4619      	mov	r1, r3
9000fb3e:	f7fe ff7d 	bl	9000ea3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
9000fb42:	f7ff fa19 	bl	9000ef78 <xTaskResumeAll>
9000fb46:	4603      	mov	r3, r0
9000fb48:	2b00      	cmp	r3, #0
9000fb4a:	d10a      	bne.n	9000fb62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
9000fb4c:	4b09      	ldr	r3, [pc, #36]	; (9000fb74 <prvProcessTimerOrBlockTask+0x98>)
9000fb4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000fb52:	601a      	str	r2, [r3, #0]
9000fb54:	f3bf 8f4f 	dsb	sy
9000fb58:	f3bf 8f6f 	isb	sy
}
9000fb5c:	e001      	b.n	9000fb62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
9000fb5e:	f7ff fa0b 	bl	9000ef78 <xTaskResumeAll>
}
9000fb62:	bf00      	nop
9000fb64:	3710      	adds	r7, #16
9000fb66:	46bd      	mov	sp, r7
9000fb68:	bd80      	pop	{r7, pc}
9000fb6a:	bf00      	nop
9000fb6c:	24001b10 	.word	0x24001b10
9000fb70:	24001b14 	.word	0x24001b14
9000fb74:	e000ed04 	.word	0xe000ed04

9000fb78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
9000fb78:	b480      	push	{r7}
9000fb7a:	b085      	sub	sp, #20
9000fb7c:	af00      	add	r7, sp, #0
9000fb7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000fb80:	4b0e      	ldr	r3, [pc, #56]	; (9000fbbc <prvGetNextExpireTime+0x44>)
9000fb82:	681b      	ldr	r3, [r3, #0]
9000fb84:	681b      	ldr	r3, [r3, #0]
9000fb86:	2b00      	cmp	r3, #0
9000fb88:	d101      	bne.n	9000fb8e <prvGetNextExpireTime+0x16>
9000fb8a:	2201      	movs	r2, #1
9000fb8c:	e000      	b.n	9000fb90 <prvGetNextExpireTime+0x18>
9000fb8e:	2200      	movs	r2, #0
9000fb90:	687b      	ldr	r3, [r7, #4]
9000fb92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
9000fb94:	687b      	ldr	r3, [r7, #4]
9000fb96:	681b      	ldr	r3, [r3, #0]
9000fb98:	2b00      	cmp	r3, #0
9000fb9a:	d105      	bne.n	9000fba8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000fb9c:	4b07      	ldr	r3, [pc, #28]	; (9000fbbc <prvGetNextExpireTime+0x44>)
9000fb9e:	681b      	ldr	r3, [r3, #0]
9000fba0:	68db      	ldr	r3, [r3, #12]
9000fba2:	681b      	ldr	r3, [r3, #0]
9000fba4:	60fb      	str	r3, [r7, #12]
9000fba6:	e001      	b.n	9000fbac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
9000fba8:	2300      	movs	r3, #0
9000fbaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
9000fbac:	68fb      	ldr	r3, [r7, #12]
}
9000fbae:	4618      	mov	r0, r3
9000fbb0:	3714      	adds	r7, #20
9000fbb2:	46bd      	mov	sp, r7
9000fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
9000fbb8:	4770      	bx	lr
9000fbba:	bf00      	nop
9000fbbc:	24001b0c 	.word	0x24001b0c

9000fbc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
9000fbc0:	b580      	push	{r7, lr}
9000fbc2:	b084      	sub	sp, #16
9000fbc4:	af00      	add	r7, sp, #0
9000fbc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
9000fbc8:	f7ff fa74 	bl	9000f0b4 <xTaskGetTickCount>
9000fbcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
9000fbce:	4b0b      	ldr	r3, [pc, #44]	; (9000fbfc <prvSampleTimeNow+0x3c>)
9000fbd0:	681b      	ldr	r3, [r3, #0]
9000fbd2:	68fa      	ldr	r2, [r7, #12]
9000fbd4:	429a      	cmp	r2, r3
9000fbd6:	d205      	bcs.n	9000fbe4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
9000fbd8:	f000 f936 	bl	9000fe48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9000fbdc:	687b      	ldr	r3, [r7, #4]
9000fbde:	2201      	movs	r2, #1
9000fbe0:	601a      	str	r2, [r3, #0]
9000fbe2:	e002      	b.n	9000fbea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
9000fbe4:	687b      	ldr	r3, [r7, #4]
9000fbe6:	2200      	movs	r2, #0
9000fbe8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
9000fbea:	4a04      	ldr	r2, [pc, #16]	; (9000fbfc <prvSampleTimeNow+0x3c>)
9000fbec:	68fb      	ldr	r3, [r7, #12]
9000fbee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
9000fbf0:	68fb      	ldr	r3, [r7, #12]
}
9000fbf2:	4618      	mov	r0, r3
9000fbf4:	3710      	adds	r7, #16
9000fbf6:	46bd      	mov	sp, r7
9000fbf8:	bd80      	pop	{r7, pc}
9000fbfa:	bf00      	nop
9000fbfc:	24001b1c 	.word	0x24001b1c

9000fc00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
9000fc00:	b580      	push	{r7, lr}
9000fc02:	b086      	sub	sp, #24
9000fc04:	af00      	add	r7, sp, #0
9000fc06:	60f8      	str	r0, [r7, #12]
9000fc08:	60b9      	str	r1, [r7, #8]
9000fc0a:	607a      	str	r2, [r7, #4]
9000fc0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
9000fc0e:	2300      	movs	r3, #0
9000fc10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000fc12:	68fb      	ldr	r3, [r7, #12]
9000fc14:	68ba      	ldr	r2, [r7, #8]
9000fc16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000fc18:	68fb      	ldr	r3, [r7, #12]
9000fc1a:	68fa      	ldr	r2, [r7, #12]
9000fc1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
9000fc1e:	68ba      	ldr	r2, [r7, #8]
9000fc20:	687b      	ldr	r3, [r7, #4]
9000fc22:	429a      	cmp	r2, r3
9000fc24:	d812      	bhi.n	9000fc4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fc26:	687a      	ldr	r2, [r7, #4]
9000fc28:	683b      	ldr	r3, [r7, #0]
9000fc2a:	1ad2      	subs	r2, r2, r3
9000fc2c:	68fb      	ldr	r3, [r7, #12]
9000fc2e:	699b      	ldr	r3, [r3, #24]
9000fc30:	429a      	cmp	r2, r3
9000fc32:	d302      	bcc.n	9000fc3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
9000fc34:	2301      	movs	r3, #1
9000fc36:	617b      	str	r3, [r7, #20]
9000fc38:	e01b      	b.n	9000fc72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000fc3a:	4b10      	ldr	r3, [pc, #64]	; (9000fc7c <prvInsertTimerInActiveList+0x7c>)
9000fc3c:	681a      	ldr	r2, [r3, #0]
9000fc3e:	68fb      	ldr	r3, [r7, #12]
9000fc40:	3304      	adds	r3, #4
9000fc42:	4619      	mov	r1, r3
9000fc44:	4610      	mov	r0, r2
9000fc46:	f7fe f9de 	bl	9000e006 <vListInsert>
9000fc4a:	e012      	b.n	9000fc72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
9000fc4c:	687a      	ldr	r2, [r7, #4]
9000fc4e:	683b      	ldr	r3, [r7, #0]
9000fc50:	429a      	cmp	r2, r3
9000fc52:	d206      	bcs.n	9000fc62 <prvInsertTimerInActiveList+0x62>
9000fc54:	68ba      	ldr	r2, [r7, #8]
9000fc56:	683b      	ldr	r3, [r7, #0]
9000fc58:	429a      	cmp	r2, r3
9000fc5a:	d302      	bcc.n	9000fc62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
9000fc5c:	2301      	movs	r3, #1
9000fc5e:	617b      	str	r3, [r7, #20]
9000fc60:	e007      	b.n	9000fc72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000fc62:	4b07      	ldr	r3, [pc, #28]	; (9000fc80 <prvInsertTimerInActiveList+0x80>)
9000fc64:	681a      	ldr	r2, [r3, #0]
9000fc66:	68fb      	ldr	r3, [r7, #12]
9000fc68:	3304      	adds	r3, #4
9000fc6a:	4619      	mov	r1, r3
9000fc6c:	4610      	mov	r0, r2
9000fc6e:	f7fe f9ca 	bl	9000e006 <vListInsert>
		}
	}

	return xProcessTimerNow;
9000fc72:	697b      	ldr	r3, [r7, #20]
}
9000fc74:	4618      	mov	r0, r3
9000fc76:	3718      	adds	r7, #24
9000fc78:	46bd      	mov	sp, r7
9000fc7a:	bd80      	pop	{r7, pc}
9000fc7c:	24001b10 	.word	0x24001b10
9000fc80:	24001b0c 	.word	0x24001b0c

9000fc84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
9000fc84:	b580      	push	{r7, lr}
9000fc86:	b08e      	sub	sp, #56	; 0x38
9000fc88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000fc8a:	e0ca      	b.n	9000fe22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
9000fc8c:	687b      	ldr	r3, [r7, #4]
9000fc8e:	2b00      	cmp	r3, #0
9000fc90:	da18      	bge.n	9000fcc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
9000fc92:	1d3b      	adds	r3, r7, #4
9000fc94:	3304      	adds	r3, #4
9000fc96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
9000fc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fc9a:	2b00      	cmp	r3, #0
9000fc9c:	d10a      	bne.n	9000fcb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
9000fc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fca2:	f383 8811 	msr	BASEPRI, r3
9000fca6:	f3bf 8f6f 	isb	sy
9000fcaa:	f3bf 8f4f 	dsb	sy
9000fcae:	61fb      	str	r3, [r7, #28]
}
9000fcb0:	bf00      	nop
9000fcb2:	e7fe      	b.n	9000fcb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
9000fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000fcb6:	681b      	ldr	r3, [r3, #0]
9000fcb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000fcba:	6850      	ldr	r0, [r2, #4]
9000fcbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000fcbe:	6892      	ldr	r2, [r2, #8]
9000fcc0:	4611      	mov	r1, r2
9000fcc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
9000fcc4:	687b      	ldr	r3, [r7, #4]
9000fcc6:	2b00      	cmp	r3, #0
9000fcc8:	f2c0 80aa 	blt.w	9000fe20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
9000fccc:	68fb      	ldr	r3, [r7, #12]
9000fcce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9000fcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fcd2:	695b      	ldr	r3, [r3, #20]
9000fcd4:	2b00      	cmp	r3, #0
9000fcd6:	d004      	beq.n	9000fce2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000fcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fcda:	3304      	adds	r3, #4
9000fcdc:	4618      	mov	r0, r3
9000fcde:	f7fe f9cb 	bl	9000e078 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
9000fce2:	463b      	mov	r3, r7
9000fce4:	4618      	mov	r0, r3
9000fce6:	f7ff ff6b 	bl	9000fbc0 <prvSampleTimeNow>
9000fcea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
9000fcec:	687b      	ldr	r3, [r7, #4]
9000fcee:	2b09      	cmp	r3, #9
9000fcf0:	f200 8097 	bhi.w	9000fe22 <prvProcessReceivedCommands+0x19e>
9000fcf4:	a201      	add	r2, pc, #4	; (adr r2, 9000fcfc <prvProcessReceivedCommands+0x78>)
9000fcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000fcfa:	bf00      	nop
9000fcfc:	9000fd25 	.word	0x9000fd25
9000fd00:	9000fd25 	.word	0x9000fd25
9000fd04:	9000fd25 	.word	0x9000fd25
9000fd08:	9000fd99 	.word	0x9000fd99
9000fd0c:	9000fdad 	.word	0x9000fdad
9000fd10:	9000fdf7 	.word	0x9000fdf7
9000fd14:	9000fd25 	.word	0x9000fd25
9000fd18:	9000fd25 	.word	0x9000fd25
9000fd1c:	9000fd99 	.word	0x9000fd99
9000fd20:	9000fdad 	.word	0x9000fdad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000fd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fd2a:	f043 0301 	orr.w	r3, r3, #1
9000fd2e:	b2da      	uxtb	r2, r3
9000fd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000fd36:	68ba      	ldr	r2, [r7, #8]
9000fd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd3a:	699b      	ldr	r3, [r3, #24]
9000fd3c:	18d1      	adds	r1, r2, r3
9000fd3e:	68bb      	ldr	r3, [r7, #8]
9000fd40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000fd42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000fd44:	f7ff ff5c 	bl	9000fc00 <prvInsertTimerInActiveList>
9000fd48:	4603      	mov	r3, r0
9000fd4a:	2b00      	cmp	r3, #0
9000fd4c:	d069      	beq.n	9000fe22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000fd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd50:	6a1b      	ldr	r3, [r3, #32]
9000fd52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000fd54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000fd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fd5c:	f003 0304 	and.w	r3, r3, #4
9000fd60:	2b00      	cmp	r3, #0
9000fd62:	d05e      	beq.n	9000fe22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000fd64:	68ba      	ldr	r2, [r7, #8]
9000fd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd68:	699b      	ldr	r3, [r3, #24]
9000fd6a:	441a      	add	r2, r3
9000fd6c:	2300      	movs	r3, #0
9000fd6e:	9300      	str	r3, [sp, #0]
9000fd70:	2300      	movs	r3, #0
9000fd72:	2100      	movs	r1, #0
9000fd74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000fd76:	f7ff fe05 	bl	9000f984 <xTimerGenericCommand>
9000fd7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
9000fd7c:	6a3b      	ldr	r3, [r7, #32]
9000fd7e:	2b00      	cmp	r3, #0
9000fd80:	d14f      	bne.n	9000fe22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
9000fd82:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd86:	f383 8811 	msr	BASEPRI, r3
9000fd8a:	f3bf 8f6f 	isb	sy
9000fd8e:	f3bf 8f4f 	dsb	sy
9000fd92:	61bb      	str	r3, [r7, #24]
}
9000fd94:	bf00      	nop
9000fd96:	e7fe      	b.n	9000fd96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000fd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fd9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fd9e:	f023 0301 	bic.w	r3, r3, #1
9000fda2:	b2da      	uxtb	r2, r3
9000fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fda6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
9000fdaa:	e03a      	b.n	9000fe22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000fdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fdae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fdb2:	f043 0301 	orr.w	r3, r3, #1
9000fdb6:	b2da      	uxtb	r2, r3
9000fdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fdba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
9000fdbe:	68ba      	ldr	r2, [r7, #8]
9000fdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fdc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000fdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fdc6:	699b      	ldr	r3, [r3, #24]
9000fdc8:	2b00      	cmp	r3, #0
9000fdca:	d10a      	bne.n	9000fde2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
9000fdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fdd0:	f383 8811 	msr	BASEPRI, r3
9000fdd4:	f3bf 8f6f 	isb	sy
9000fdd8:	f3bf 8f4f 	dsb	sy
9000fddc:	617b      	str	r3, [r7, #20]
}
9000fdde:	bf00      	nop
9000fde0:	e7fe      	b.n	9000fde0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
9000fde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fde4:	699a      	ldr	r2, [r3, #24]
9000fde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000fde8:	18d1      	adds	r1, r2, r3
9000fdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000fdec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000fdee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000fdf0:	f7ff ff06 	bl	9000fc00 <prvInsertTimerInActiveList>
					break;
9000fdf4:	e015      	b.n	9000fe22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
9000fdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fdf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fdfc:	f003 0302 	and.w	r3, r3, #2
9000fe00:	2b00      	cmp	r3, #0
9000fe02:	d103      	bne.n	9000fe0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
9000fe04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000fe06:	f000 fbdb 	bl	900105c0 <vPortFree>
9000fe0a:	e00a      	b.n	9000fe22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000fe0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fe0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fe12:	f023 0301 	bic.w	r3, r3, #1
9000fe16:	b2da      	uxtb	r2, r3
9000fe18:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000fe1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
9000fe1e:	e000      	b.n	9000fe22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
9000fe20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000fe22:	4b08      	ldr	r3, [pc, #32]	; (9000fe44 <prvProcessReceivedCommands+0x1c0>)
9000fe24:	681b      	ldr	r3, [r3, #0]
9000fe26:	1d39      	adds	r1, r7, #4
9000fe28:	2200      	movs	r2, #0
9000fe2a:	4618      	mov	r0, r3
9000fe2c:	f7fe fbec 	bl	9000e608 <xQueueReceive>
9000fe30:	4603      	mov	r3, r0
9000fe32:	2b00      	cmp	r3, #0
9000fe34:	f47f af2a 	bne.w	9000fc8c <prvProcessReceivedCommands+0x8>
	}
}
9000fe38:	bf00      	nop
9000fe3a:	bf00      	nop
9000fe3c:	3730      	adds	r7, #48	; 0x30
9000fe3e:	46bd      	mov	sp, r7
9000fe40:	bd80      	pop	{r7, pc}
9000fe42:	bf00      	nop
9000fe44:	24001b14 	.word	0x24001b14

9000fe48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000fe48:	b580      	push	{r7, lr}
9000fe4a:	b088      	sub	sp, #32
9000fe4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000fe4e:	e048      	b.n	9000fee2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000fe50:	4b2d      	ldr	r3, [pc, #180]	; (9000ff08 <prvSwitchTimerLists+0xc0>)
9000fe52:	681b      	ldr	r3, [r3, #0]
9000fe54:	68db      	ldr	r3, [r3, #12]
9000fe56:	681b      	ldr	r3, [r3, #0]
9000fe58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fe5a:	4b2b      	ldr	r3, [pc, #172]	; (9000ff08 <prvSwitchTimerLists+0xc0>)
9000fe5c:	681b      	ldr	r3, [r3, #0]
9000fe5e:	68db      	ldr	r3, [r3, #12]
9000fe60:	68db      	ldr	r3, [r3, #12]
9000fe62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000fe64:	68fb      	ldr	r3, [r7, #12]
9000fe66:	3304      	adds	r3, #4
9000fe68:	4618      	mov	r0, r3
9000fe6a:	f7fe f905 	bl	9000e078 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000fe6e:	68fb      	ldr	r3, [r7, #12]
9000fe70:	6a1b      	ldr	r3, [r3, #32]
9000fe72:	68f8      	ldr	r0, [r7, #12]
9000fe74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000fe76:	68fb      	ldr	r3, [r7, #12]
9000fe78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000fe7c:	f003 0304 	and.w	r3, r3, #4
9000fe80:	2b00      	cmp	r3, #0
9000fe82:	d02e      	beq.n	9000fee2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000fe84:	68fb      	ldr	r3, [r7, #12]
9000fe86:	699b      	ldr	r3, [r3, #24]
9000fe88:	693a      	ldr	r2, [r7, #16]
9000fe8a:	4413      	add	r3, r2
9000fe8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
9000fe8e:	68ba      	ldr	r2, [r7, #8]
9000fe90:	693b      	ldr	r3, [r7, #16]
9000fe92:	429a      	cmp	r2, r3
9000fe94:	d90e      	bls.n	9000feb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9000fe96:	68fb      	ldr	r3, [r7, #12]
9000fe98:	68ba      	ldr	r2, [r7, #8]
9000fe9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000fe9c:	68fb      	ldr	r3, [r7, #12]
9000fe9e:	68fa      	ldr	r2, [r7, #12]
9000fea0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000fea2:	4b19      	ldr	r3, [pc, #100]	; (9000ff08 <prvSwitchTimerLists+0xc0>)
9000fea4:	681a      	ldr	r2, [r3, #0]
9000fea6:	68fb      	ldr	r3, [r7, #12]
9000fea8:	3304      	adds	r3, #4
9000feaa:	4619      	mov	r1, r3
9000feac:	4610      	mov	r0, r2
9000feae:	f7fe f8aa 	bl	9000e006 <vListInsert>
9000feb2:	e016      	b.n	9000fee2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
9000feb4:	2300      	movs	r3, #0
9000feb6:	9300      	str	r3, [sp, #0]
9000feb8:	2300      	movs	r3, #0
9000feba:	693a      	ldr	r2, [r7, #16]
9000febc:	2100      	movs	r1, #0
9000febe:	68f8      	ldr	r0, [r7, #12]
9000fec0:	f7ff fd60 	bl	9000f984 <xTimerGenericCommand>
9000fec4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
9000fec6:	687b      	ldr	r3, [r7, #4]
9000fec8:	2b00      	cmp	r3, #0
9000feca:	d10a      	bne.n	9000fee2 <prvSwitchTimerLists+0x9a>
	__asm volatile
9000fecc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fed0:	f383 8811 	msr	BASEPRI, r3
9000fed4:	f3bf 8f6f 	isb	sy
9000fed8:	f3bf 8f4f 	dsb	sy
9000fedc:	603b      	str	r3, [r7, #0]
}
9000fede:	bf00      	nop
9000fee0:	e7fe      	b.n	9000fee0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000fee2:	4b09      	ldr	r3, [pc, #36]	; (9000ff08 <prvSwitchTimerLists+0xc0>)
9000fee4:	681b      	ldr	r3, [r3, #0]
9000fee6:	681b      	ldr	r3, [r3, #0]
9000fee8:	2b00      	cmp	r3, #0
9000feea:	d1b1      	bne.n	9000fe50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
9000feec:	4b06      	ldr	r3, [pc, #24]	; (9000ff08 <prvSwitchTimerLists+0xc0>)
9000feee:	681b      	ldr	r3, [r3, #0]
9000fef0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
9000fef2:	4b06      	ldr	r3, [pc, #24]	; (9000ff0c <prvSwitchTimerLists+0xc4>)
9000fef4:	681b      	ldr	r3, [r3, #0]
9000fef6:	4a04      	ldr	r2, [pc, #16]	; (9000ff08 <prvSwitchTimerLists+0xc0>)
9000fef8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000fefa:	4a04      	ldr	r2, [pc, #16]	; (9000ff0c <prvSwitchTimerLists+0xc4>)
9000fefc:	697b      	ldr	r3, [r7, #20]
9000fefe:	6013      	str	r3, [r2, #0]
}
9000ff00:	bf00      	nop
9000ff02:	3718      	adds	r7, #24
9000ff04:	46bd      	mov	sp, r7
9000ff06:	bd80      	pop	{r7, pc}
9000ff08:	24001b0c 	.word	0x24001b0c
9000ff0c:	24001b10 	.word	0x24001b10

9000ff10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
9000ff10:	b580      	push	{r7, lr}
9000ff12:	b082      	sub	sp, #8
9000ff14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
9000ff16:	f000 f965 	bl	900101e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
9000ff1a:	4b15      	ldr	r3, [pc, #84]	; (9000ff70 <prvCheckForValidListAndQueue+0x60>)
9000ff1c:	681b      	ldr	r3, [r3, #0]
9000ff1e:	2b00      	cmp	r3, #0
9000ff20:	d120      	bne.n	9000ff64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
9000ff22:	4814      	ldr	r0, [pc, #80]	; (9000ff74 <prvCheckForValidListAndQueue+0x64>)
9000ff24:	f7fe f81e 	bl	9000df64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9000ff28:	4813      	ldr	r0, [pc, #76]	; (9000ff78 <prvCheckForValidListAndQueue+0x68>)
9000ff2a:	f7fe f81b 	bl	9000df64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9000ff2e:	4b13      	ldr	r3, [pc, #76]	; (9000ff7c <prvCheckForValidListAndQueue+0x6c>)
9000ff30:	4a10      	ldr	r2, [pc, #64]	; (9000ff74 <prvCheckForValidListAndQueue+0x64>)
9000ff32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
9000ff34:	4b12      	ldr	r3, [pc, #72]	; (9000ff80 <prvCheckForValidListAndQueue+0x70>)
9000ff36:	4a10      	ldr	r2, [pc, #64]	; (9000ff78 <prvCheckForValidListAndQueue+0x68>)
9000ff38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000ff3a:	2300      	movs	r3, #0
9000ff3c:	9300      	str	r3, [sp, #0]
9000ff3e:	4b11      	ldr	r3, [pc, #68]	; (9000ff84 <prvCheckForValidListAndQueue+0x74>)
9000ff40:	4a11      	ldr	r2, [pc, #68]	; (9000ff88 <prvCheckForValidListAndQueue+0x78>)
9000ff42:	2110      	movs	r1, #16
9000ff44:	200a      	movs	r0, #10
9000ff46:	f7fe f929 	bl	9000e19c <xQueueGenericCreateStatic>
9000ff4a:	4603      	mov	r3, r0
9000ff4c:	4a08      	ldr	r2, [pc, #32]	; (9000ff70 <prvCheckForValidListAndQueue+0x60>)
9000ff4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
9000ff50:	4b07      	ldr	r3, [pc, #28]	; (9000ff70 <prvCheckForValidListAndQueue+0x60>)
9000ff52:	681b      	ldr	r3, [r3, #0]
9000ff54:	2b00      	cmp	r3, #0
9000ff56:	d005      	beq.n	9000ff64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
9000ff58:	4b05      	ldr	r3, [pc, #20]	; (9000ff70 <prvCheckForValidListAndQueue+0x60>)
9000ff5a:	681b      	ldr	r3, [r3, #0]
9000ff5c:	490b      	ldr	r1, [pc, #44]	; (9000ff8c <prvCheckForValidListAndQueue+0x7c>)
9000ff5e:	4618      	mov	r0, r3
9000ff60:	f7fe fd42 	bl	9000e9e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000ff64:	f000 f96e 	bl	90010244 <vPortExitCritical>
}
9000ff68:	bf00      	nop
9000ff6a:	46bd      	mov	sp, r7
9000ff6c:	bd80      	pop	{r7, pc}
9000ff6e:	bf00      	nop
9000ff70:	24001b14 	.word	0x24001b14
9000ff74:	24001ae4 	.word	0x24001ae4
9000ff78:	24001af8 	.word	0x24001af8
9000ff7c:	24001b0c 	.word	0x24001b0c
9000ff80:	24001b10 	.word	0x24001b10
9000ff84:	24001bc0 	.word	0x24001bc0
9000ff88:	24001b20 	.word	0x24001b20
9000ff8c:	90013e34 	.word	0x90013e34

9000ff90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
9000ff90:	b480      	push	{r7}
9000ff92:	b085      	sub	sp, #20
9000ff94:	af00      	add	r7, sp, #0
9000ff96:	60f8      	str	r0, [r7, #12]
9000ff98:	60b9      	str	r1, [r7, #8]
9000ff9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
9000ff9c:	68fb      	ldr	r3, [r7, #12]
9000ff9e:	3b04      	subs	r3, #4
9000ffa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000ffa2:	68fb      	ldr	r3, [r7, #12]
9000ffa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000ffa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
9000ffaa:	68fb      	ldr	r3, [r7, #12]
9000ffac:	3b04      	subs	r3, #4
9000ffae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000ffb0:	68bb      	ldr	r3, [r7, #8]
9000ffb2:	f023 0201 	bic.w	r2, r3, #1
9000ffb6:	68fb      	ldr	r3, [r7, #12]
9000ffb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
9000ffba:	68fb      	ldr	r3, [r7, #12]
9000ffbc:	3b04      	subs	r3, #4
9000ffbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000ffc0:	4a0c      	ldr	r2, [pc, #48]	; (9000fff4 <pxPortInitialiseStack+0x64>)
9000ffc2:	68fb      	ldr	r3, [r7, #12]
9000ffc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
9000ffc6:	68fb      	ldr	r3, [r7, #12]
9000ffc8:	3b14      	subs	r3, #20
9000ffca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000ffcc:	687a      	ldr	r2, [r7, #4]
9000ffce:	68fb      	ldr	r3, [r7, #12]
9000ffd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
9000ffd2:	68fb      	ldr	r3, [r7, #12]
9000ffd4:	3b04      	subs	r3, #4
9000ffd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000ffd8:	68fb      	ldr	r3, [r7, #12]
9000ffda:	f06f 0202 	mvn.w	r2, #2
9000ffde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
9000ffe0:	68fb      	ldr	r3, [r7, #12]
9000ffe2:	3b20      	subs	r3, #32
9000ffe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
9000ffe6:	68fb      	ldr	r3, [r7, #12]
}
9000ffe8:	4618      	mov	r0, r3
9000ffea:	3714      	adds	r7, #20
9000ffec:	46bd      	mov	sp, r7
9000ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
9000fff2:	4770      	bx	lr
9000fff4:	9000fff9 	.word	0x9000fff9

9000fff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
9000fff8:	b480      	push	{r7}
9000fffa:	b085      	sub	sp, #20
9000fffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
9000fffe:	2300      	movs	r3, #0
90010000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
90010002:	4b12      	ldr	r3, [pc, #72]	; (9001004c <prvTaskExitError+0x54>)
90010004:	681b      	ldr	r3, [r3, #0]
90010006:	f1b3 3fff 	cmp.w	r3, #4294967295
9001000a:	d00a      	beq.n	90010022 <prvTaskExitError+0x2a>
	__asm volatile
9001000c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010010:	f383 8811 	msr	BASEPRI, r3
90010014:	f3bf 8f6f 	isb	sy
90010018:	f3bf 8f4f 	dsb	sy
9001001c:	60fb      	str	r3, [r7, #12]
}
9001001e:	bf00      	nop
90010020:	e7fe      	b.n	90010020 <prvTaskExitError+0x28>
	__asm volatile
90010022:	f04f 0350 	mov.w	r3, #80	; 0x50
90010026:	f383 8811 	msr	BASEPRI, r3
9001002a:	f3bf 8f6f 	isb	sy
9001002e:	f3bf 8f4f 	dsb	sy
90010032:	60bb      	str	r3, [r7, #8]
}
90010034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
90010036:	bf00      	nop
90010038:	687b      	ldr	r3, [r7, #4]
9001003a:	2b00      	cmp	r3, #0
9001003c:	d0fc      	beq.n	90010038 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
9001003e:	bf00      	nop
90010040:	bf00      	nop
90010042:	3714      	adds	r7, #20
90010044:	46bd      	mov	sp, r7
90010046:	f85d 7b04 	ldr.w	r7, [sp], #4
9001004a:	4770      	bx	lr
9001004c:	2400003c 	.word	0x2400003c

90010050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
90010050:	4b07      	ldr	r3, [pc, #28]	; (90010070 <pxCurrentTCBConst2>)
90010052:	6819      	ldr	r1, [r3, #0]
90010054:	6808      	ldr	r0, [r1, #0]
90010056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001005a:	f380 8809 	msr	PSP, r0
9001005e:	f3bf 8f6f 	isb	sy
90010062:	f04f 0000 	mov.w	r0, #0
90010066:	f380 8811 	msr	BASEPRI, r0
9001006a:	4770      	bx	lr
9001006c:	f3af 8000 	nop.w

90010070 <pxCurrentTCBConst2>:
90010070:	240015e4 	.word	0x240015e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
90010074:	bf00      	nop
90010076:	bf00      	nop

90010078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
90010078:	4808      	ldr	r0, [pc, #32]	; (9001009c <prvPortStartFirstTask+0x24>)
9001007a:	6800      	ldr	r0, [r0, #0]
9001007c:	6800      	ldr	r0, [r0, #0]
9001007e:	f380 8808 	msr	MSP, r0
90010082:	f04f 0000 	mov.w	r0, #0
90010086:	f380 8814 	msr	CONTROL, r0
9001008a:	b662      	cpsie	i
9001008c:	b661      	cpsie	f
9001008e:	f3bf 8f4f 	dsb	sy
90010092:	f3bf 8f6f 	isb	sy
90010096:	df00      	svc	0
90010098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9001009a:	bf00      	nop
9001009c:	e000ed08 	.word	0xe000ed08

900100a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
900100a0:	b580      	push	{r7, lr}
900100a2:	b086      	sub	sp, #24
900100a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
900100a6:	4b46      	ldr	r3, [pc, #280]	; (900101c0 <xPortStartScheduler+0x120>)
900100a8:	681b      	ldr	r3, [r3, #0]
900100aa:	4a46      	ldr	r2, [pc, #280]	; (900101c4 <xPortStartScheduler+0x124>)
900100ac:	4293      	cmp	r3, r2
900100ae:	d10a      	bne.n	900100c6 <xPortStartScheduler+0x26>
	__asm volatile
900100b0:	f04f 0350 	mov.w	r3, #80	; 0x50
900100b4:	f383 8811 	msr	BASEPRI, r3
900100b8:	f3bf 8f6f 	isb	sy
900100bc:	f3bf 8f4f 	dsb	sy
900100c0:	613b      	str	r3, [r7, #16]
}
900100c2:	bf00      	nop
900100c4:	e7fe      	b.n	900100c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
900100c6:	4b3e      	ldr	r3, [pc, #248]	; (900101c0 <xPortStartScheduler+0x120>)
900100c8:	681b      	ldr	r3, [r3, #0]
900100ca:	4a3f      	ldr	r2, [pc, #252]	; (900101c8 <xPortStartScheduler+0x128>)
900100cc:	4293      	cmp	r3, r2
900100ce:	d10a      	bne.n	900100e6 <xPortStartScheduler+0x46>
	__asm volatile
900100d0:	f04f 0350 	mov.w	r3, #80	; 0x50
900100d4:	f383 8811 	msr	BASEPRI, r3
900100d8:	f3bf 8f6f 	isb	sy
900100dc:	f3bf 8f4f 	dsb	sy
900100e0:	60fb      	str	r3, [r7, #12]
}
900100e2:	bf00      	nop
900100e4:	e7fe      	b.n	900100e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
900100e6:	4b39      	ldr	r3, [pc, #228]	; (900101cc <xPortStartScheduler+0x12c>)
900100e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
900100ea:	697b      	ldr	r3, [r7, #20]
900100ec:	781b      	ldrb	r3, [r3, #0]
900100ee:	b2db      	uxtb	r3, r3
900100f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
900100f2:	697b      	ldr	r3, [r7, #20]
900100f4:	22ff      	movs	r2, #255	; 0xff
900100f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
900100f8:	697b      	ldr	r3, [r7, #20]
900100fa:	781b      	ldrb	r3, [r3, #0]
900100fc:	b2db      	uxtb	r3, r3
900100fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90010100:	78fb      	ldrb	r3, [r7, #3]
90010102:	b2db      	uxtb	r3, r3
90010104:	f003 0350 	and.w	r3, r3, #80	; 0x50
90010108:	b2da      	uxtb	r2, r3
9001010a:	4b31      	ldr	r3, [pc, #196]	; (900101d0 <xPortStartScheduler+0x130>)
9001010c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9001010e:	4b31      	ldr	r3, [pc, #196]	; (900101d4 <xPortStartScheduler+0x134>)
90010110:	2207      	movs	r2, #7
90010112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90010114:	e009      	b.n	9001012a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
90010116:	4b2f      	ldr	r3, [pc, #188]	; (900101d4 <xPortStartScheduler+0x134>)
90010118:	681b      	ldr	r3, [r3, #0]
9001011a:	3b01      	subs	r3, #1
9001011c:	4a2d      	ldr	r2, [pc, #180]	; (900101d4 <xPortStartScheduler+0x134>)
9001011e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
90010120:	78fb      	ldrb	r3, [r7, #3]
90010122:	b2db      	uxtb	r3, r3
90010124:	005b      	lsls	r3, r3, #1
90010126:	b2db      	uxtb	r3, r3
90010128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9001012a:	78fb      	ldrb	r3, [r7, #3]
9001012c:	b2db      	uxtb	r3, r3
9001012e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90010132:	2b80      	cmp	r3, #128	; 0x80
90010134:	d0ef      	beq.n	90010116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
90010136:	4b27      	ldr	r3, [pc, #156]	; (900101d4 <xPortStartScheduler+0x134>)
90010138:	681b      	ldr	r3, [r3, #0]
9001013a:	f1c3 0307 	rsb	r3, r3, #7
9001013e:	2b04      	cmp	r3, #4
90010140:	d00a      	beq.n	90010158 <xPortStartScheduler+0xb8>
	__asm volatile
90010142:	f04f 0350 	mov.w	r3, #80	; 0x50
90010146:	f383 8811 	msr	BASEPRI, r3
9001014a:	f3bf 8f6f 	isb	sy
9001014e:	f3bf 8f4f 	dsb	sy
90010152:	60bb      	str	r3, [r7, #8]
}
90010154:	bf00      	nop
90010156:	e7fe      	b.n	90010156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
90010158:	4b1e      	ldr	r3, [pc, #120]	; (900101d4 <xPortStartScheduler+0x134>)
9001015a:	681b      	ldr	r3, [r3, #0]
9001015c:	021b      	lsls	r3, r3, #8
9001015e:	4a1d      	ldr	r2, [pc, #116]	; (900101d4 <xPortStartScheduler+0x134>)
90010160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
90010162:	4b1c      	ldr	r3, [pc, #112]	; (900101d4 <xPortStartScheduler+0x134>)
90010164:	681b      	ldr	r3, [r3, #0]
90010166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9001016a:	4a1a      	ldr	r2, [pc, #104]	; (900101d4 <xPortStartScheduler+0x134>)
9001016c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9001016e:	687b      	ldr	r3, [r7, #4]
90010170:	b2da      	uxtb	r2, r3
90010172:	697b      	ldr	r3, [r7, #20]
90010174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
90010176:	4b18      	ldr	r3, [pc, #96]	; (900101d8 <xPortStartScheduler+0x138>)
90010178:	681b      	ldr	r3, [r3, #0]
9001017a:	4a17      	ldr	r2, [pc, #92]	; (900101d8 <xPortStartScheduler+0x138>)
9001017c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90010180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
90010182:	4b15      	ldr	r3, [pc, #84]	; (900101d8 <xPortStartScheduler+0x138>)
90010184:	681b      	ldr	r3, [r3, #0]
90010186:	4a14      	ldr	r2, [pc, #80]	; (900101d8 <xPortStartScheduler+0x138>)
90010188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9001018c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
9001018e:	f000 f8dd 	bl	9001034c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
90010192:	4b12      	ldr	r3, [pc, #72]	; (900101dc <xPortStartScheduler+0x13c>)
90010194:	2200      	movs	r2, #0
90010196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
90010198:	f000 f8fc 	bl	90010394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9001019c:	4b10      	ldr	r3, [pc, #64]	; (900101e0 <xPortStartScheduler+0x140>)
9001019e:	681b      	ldr	r3, [r3, #0]
900101a0:	4a0f      	ldr	r2, [pc, #60]	; (900101e0 <xPortStartScheduler+0x140>)
900101a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
900101a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
900101a8:	f7ff ff66 	bl	90010078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
900101ac:	f7ff f84c 	bl	9000f248 <vTaskSwitchContext>
	prvTaskExitError();
900101b0:	f7ff ff22 	bl	9000fff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
900101b4:	2300      	movs	r3, #0
}
900101b6:	4618      	mov	r0, r3
900101b8:	3718      	adds	r7, #24
900101ba:	46bd      	mov	sp, r7
900101bc:	bd80      	pop	{r7, pc}
900101be:	bf00      	nop
900101c0:	e000ed00 	.word	0xe000ed00
900101c4:	410fc271 	.word	0x410fc271
900101c8:	410fc270 	.word	0x410fc270
900101cc:	e000e400 	.word	0xe000e400
900101d0:	24001c10 	.word	0x24001c10
900101d4:	24001c14 	.word	0x24001c14
900101d8:	e000ed20 	.word	0xe000ed20
900101dc:	2400003c 	.word	0x2400003c
900101e0:	e000ef34 	.word	0xe000ef34

900101e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
900101e4:	b480      	push	{r7}
900101e6:	b083      	sub	sp, #12
900101e8:	af00      	add	r7, sp, #0
	__asm volatile
900101ea:	f04f 0350 	mov.w	r3, #80	; 0x50
900101ee:	f383 8811 	msr	BASEPRI, r3
900101f2:	f3bf 8f6f 	isb	sy
900101f6:	f3bf 8f4f 	dsb	sy
900101fa:	607b      	str	r3, [r7, #4]
}
900101fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
900101fe:	4b0f      	ldr	r3, [pc, #60]	; (9001023c <vPortEnterCritical+0x58>)
90010200:	681b      	ldr	r3, [r3, #0]
90010202:	3301      	adds	r3, #1
90010204:	4a0d      	ldr	r2, [pc, #52]	; (9001023c <vPortEnterCritical+0x58>)
90010206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
90010208:	4b0c      	ldr	r3, [pc, #48]	; (9001023c <vPortEnterCritical+0x58>)
9001020a:	681b      	ldr	r3, [r3, #0]
9001020c:	2b01      	cmp	r3, #1
9001020e:	d10f      	bne.n	90010230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
90010210:	4b0b      	ldr	r3, [pc, #44]	; (90010240 <vPortEnterCritical+0x5c>)
90010212:	681b      	ldr	r3, [r3, #0]
90010214:	b2db      	uxtb	r3, r3
90010216:	2b00      	cmp	r3, #0
90010218:	d00a      	beq.n	90010230 <vPortEnterCritical+0x4c>
	__asm volatile
9001021a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001021e:	f383 8811 	msr	BASEPRI, r3
90010222:	f3bf 8f6f 	isb	sy
90010226:	f3bf 8f4f 	dsb	sy
9001022a:	603b      	str	r3, [r7, #0]
}
9001022c:	bf00      	nop
9001022e:	e7fe      	b.n	9001022e <vPortEnterCritical+0x4a>
	}
}
90010230:	bf00      	nop
90010232:	370c      	adds	r7, #12
90010234:	46bd      	mov	sp, r7
90010236:	f85d 7b04 	ldr.w	r7, [sp], #4
9001023a:	4770      	bx	lr
9001023c:	2400003c 	.word	0x2400003c
90010240:	e000ed04 	.word	0xe000ed04

90010244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
90010244:	b480      	push	{r7}
90010246:	b083      	sub	sp, #12
90010248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
9001024a:	4b12      	ldr	r3, [pc, #72]	; (90010294 <vPortExitCritical+0x50>)
9001024c:	681b      	ldr	r3, [r3, #0]
9001024e:	2b00      	cmp	r3, #0
90010250:	d10a      	bne.n	90010268 <vPortExitCritical+0x24>
	__asm volatile
90010252:	f04f 0350 	mov.w	r3, #80	; 0x50
90010256:	f383 8811 	msr	BASEPRI, r3
9001025a:	f3bf 8f6f 	isb	sy
9001025e:	f3bf 8f4f 	dsb	sy
90010262:	607b      	str	r3, [r7, #4]
}
90010264:	bf00      	nop
90010266:	e7fe      	b.n	90010266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
90010268:	4b0a      	ldr	r3, [pc, #40]	; (90010294 <vPortExitCritical+0x50>)
9001026a:	681b      	ldr	r3, [r3, #0]
9001026c:	3b01      	subs	r3, #1
9001026e:	4a09      	ldr	r2, [pc, #36]	; (90010294 <vPortExitCritical+0x50>)
90010270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
90010272:	4b08      	ldr	r3, [pc, #32]	; (90010294 <vPortExitCritical+0x50>)
90010274:	681b      	ldr	r3, [r3, #0]
90010276:	2b00      	cmp	r3, #0
90010278:	d105      	bne.n	90010286 <vPortExitCritical+0x42>
9001027a:	2300      	movs	r3, #0
9001027c:	603b      	str	r3, [r7, #0]
	__asm volatile
9001027e:	683b      	ldr	r3, [r7, #0]
90010280:	f383 8811 	msr	BASEPRI, r3
}
90010284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
90010286:	bf00      	nop
90010288:	370c      	adds	r7, #12
9001028a:	46bd      	mov	sp, r7
9001028c:	f85d 7b04 	ldr.w	r7, [sp], #4
90010290:	4770      	bx	lr
90010292:	bf00      	nop
90010294:	2400003c 	.word	0x2400003c
	...

900102a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
900102a0:	f3ef 8009 	mrs	r0, PSP
900102a4:	f3bf 8f6f 	isb	sy
900102a8:	4b15      	ldr	r3, [pc, #84]	; (90010300 <pxCurrentTCBConst>)
900102aa:	681a      	ldr	r2, [r3, #0]
900102ac:	f01e 0f10 	tst.w	lr, #16
900102b0:	bf08      	it	eq
900102b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
900102b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900102ba:	6010      	str	r0, [r2, #0]
900102bc:	e92d 0009 	stmdb	sp!, {r0, r3}
900102c0:	f04f 0050 	mov.w	r0, #80	; 0x50
900102c4:	f380 8811 	msr	BASEPRI, r0
900102c8:	f3bf 8f4f 	dsb	sy
900102cc:	f3bf 8f6f 	isb	sy
900102d0:	f7fe ffba 	bl	9000f248 <vTaskSwitchContext>
900102d4:	f04f 0000 	mov.w	r0, #0
900102d8:	f380 8811 	msr	BASEPRI, r0
900102dc:	bc09      	pop	{r0, r3}
900102de:	6819      	ldr	r1, [r3, #0]
900102e0:	6808      	ldr	r0, [r1, #0]
900102e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900102e6:	f01e 0f10 	tst.w	lr, #16
900102ea:	bf08      	it	eq
900102ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
900102f0:	f380 8809 	msr	PSP, r0
900102f4:	f3bf 8f6f 	isb	sy
900102f8:	4770      	bx	lr
900102fa:	bf00      	nop
900102fc:	f3af 8000 	nop.w

90010300 <pxCurrentTCBConst>:
90010300:	240015e4 	.word	0x240015e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
90010304:	bf00      	nop
90010306:	bf00      	nop

90010308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
90010308:	b580      	push	{r7, lr}
9001030a:	b082      	sub	sp, #8
9001030c:	af00      	add	r7, sp, #0
	__asm volatile
9001030e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010312:	f383 8811 	msr	BASEPRI, r3
90010316:	f3bf 8f6f 	isb	sy
9001031a:	f3bf 8f4f 	dsb	sy
9001031e:	607b      	str	r3, [r7, #4]
}
90010320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
90010322:	f7fe fed7 	bl	9000f0d4 <xTaskIncrementTick>
90010326:	4603      	mov	r3, r0
90010328:	2b00      	cmp	r3, #0
9001032a:	d003      	beq.n	90010334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9001032c:	4b06      	ldr	r3, [pc, #24]	; (90010348 <xPortSysTickHandler+0x40>)
9001032e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010332:	601a      	str	r2, [r3, #0]
90010334:	2300      	movs	r3, #0
90010336:	603b      	str	r3, [r7, #0]
	__asm volatile
90010338:	683b      	ldr	r3, [r7, #0]
9001033a:	f383 8811 	msr	BASEPRI, r3
}
9001033e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
90010340:	bf00      	nop
90010342:	3708      	adds	r7, #8
90010344:	46bd      	mov	sp, r7
90010346:	bd80      	pop	{r7, pc}
90010348:	e000ed04 	.word	0xe000ed04

9001034c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
9001034c:	b480      	push	{r7}
9001034e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90010350:	4b0b      	ldr	r3, [pc, #44]	; (90010380 <vPortSetupTimerInterrupt+0x34>)
90010352:	2200      	movs	r2, #0
90010354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
90010356:	4b0b      	ldr	r3, [pc, #44]	; (90010384 <vPortSetupTimerInterrupt+0x38>)
90010358:	2200      	movs	r2, #0
9001035a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9001035c:	4b0a      	ldr	r3, [pc, #40]	; (90010388 <vPortSetupTimerInterrupt+0x3c>)
9001035e:	681b      	ldr	r3, [r3, #0]
90010360:	4a0a      	ldr	r2, [pc, #40]	; (9001038c <vPortSetupTimerInterrupt+0x40>)
90010362:	fba2 2303 	umull	r2, r3, r2, r3
90010366:	099b      	lsrs	r3, r3, #6
90010368:	4a09      	ldr	r2, [pc, #36]	; (90010390 <vPortSetupTimerInterrupt+0x44>)
9001036a:	3b01      	subs	r3, #1
9001036c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9001036e:	4b04      	ldr	r3, [pc, #16]	; (90010380 <vPortSetupTimerInterrupt+0x34>)
90010370:	2207      	movs	r2, #7
90010372:	601a      	str	r2, [r3, #0]
}
90010374:	bf00      	nop
90010376:	46bd      	mov	sp, r7
90010378:	f85d 7b04 	ldr.w	r7, [sp], #4
9001037c:	4770      	bx	lr
9001037e:	bf00      	nop
90010380:	e000e010 	.word	0xe000e010
90010384:	e000e018 	.word	0xe000e018
90010388:	2400002c 	.word	0x2400002c
9001038c:	10624dd3 	.word	0x10624dd3
90010390:	e000e014 	.word	0xe000e014

90010394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
90010394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 900103a4 <vPortEnableVFP+0x10>
90010398:	6801      	ldr	r1, [r0, #0]
9001039a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9001039e:	6001      	str	r1, [r0, #0]
900103a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
900103a2:	bf00      	nop
900103a4:	e000ed88 	.word	0xe000ed88

900103a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
900103a8:	b480      	push	{r7}
900103aa:	b085      	sub	sp, #20
900103ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
900103ae:	f3ef 8305 	mrs	r3, IPSR
900103b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
900103b4:	68fb      	ldr	r3, [r7, #12]
900103b6:	2b0f      	cmp	r3, #15
900103b8:	d914      	bls.n	900103e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
900103ba:	4a17      	ldr	r2, [pc, #92]	; (90010418 <vPortValidateInterruptPriority+0x70>)
900103bc:	68fb      	ldr	r3, [r7, #12]
900103be:	4413      	add	r3, r2
900103c0:	781b      	ldrb	r3, [r3, #0]
900103c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
900103c4:	4b15      	ldr	r3, [pc, #84]	; (9001041c <vPortValidateInterruptPriority+0x74>)
900103c6:	781b      	ldrb	r3, [r3, #0]
900103c8:	7afa      	ldrb	r2, [r7, #11]
900103ca:	429a      	cmp	r2, r3
900103cc:	d20a      	bcs.n	900103e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
900103ce:	f04f 0350 	mov.w	r3, #80	; 0x50
900103d2:	f383 8811 	msr	BASEPRI, r3
900103d6:	f3bf 8f6f 	isb	sy
900103da:	f3bf 8f4f 	dsb	sy
900103de:	607b      	str	r3, [r7, #4]
}
900103e0:	bf00      	nop
900103e2:	e7fe      	b.n	900103e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
900103e4:	4b0e      	ldr	r3, [pc, #56]	; (90010420 <vPortValidateInterruptPriority+0x78>)
900103e6:	681b      	ldr	r3, [r3, #0]
900103e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
900103ec:	4b0d      	ldr	r3, [pc, #52]	; (90010424 <vPortValidateInterruptPriority+0x7c>)
900103ee:	681b      	ldr	r3, [r3, #0]
900103f0:	429a      	cmp	r2, r3
900103f2:	d90a      	bls.n	9001040a <vPortValidateInterruptPriority+0x62>
	__asm volatile
900103f4:	f04f 0350 	mov.w	r3, #80	; 0x50
900103f8:	f383 8811 	msr	BASEPRI, r3
900103fc:	f3bf 8f6f 	isb	sy
90010400:	f3bf 8f4f 	dsb	sy
90010404:	603b      	str	r3, [r7, #0]
}
90010406:	bf00      	nop
90010408:	e7fe      	b.n	90010408 <vPortValidateInterruptPriority+0x60>
	}
9001040a:	bf00      	nop
9001040c:	3714      	adds	r7, #20
9001040e:	46bd      	mov	sp, r7
90010410:	f85d 7b04 	ldr.w	r7, [sp], #4
90010414:	4770      	bx	lr
90010416:	bf00      	nop
90010418:	e000e3f0 	.word	0xe000e3f0
9001041c:	24001c10 	.word	0x24001c10
90010420:	e000ed0c 	.word	0xe000ed0c
90010424:	24001c14 	.word	0x24001c14

90010428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
90010428:	b580      	push	{r7, lr}
9001042a:	b08a      	sub	sp, #40	; 0x28
9001042c:	af00      	add	r7, sp, #0
9001042e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
90010430:	2300      	movs	r3, #0
90010432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
90010434:	f7fe fd92 	bl	9000ef5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
90010438:	4b5b      	ldr	r3, [pc, #364]	; (900105a8 <pvPortMalloc+0x180>)
9001043a:	681b      	ldr	r3, [r3, #0]
9001043c:	2b00      	cmp	r3, #0
9001043e:	d101      	bne.n	90010444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
90010440:	f000 f920 	bl	90010684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
90010444:	4b59      	ldr	r3, [pc, #356]	; (900105ac <pvPortMalloc+0x184>)
90010446:	681a      	ldr	r2, [r3, #0]
90010448:	687b      	ldr	r3, [r7, #4]
9001044a:	4013      	ands	r3, r2
9001044c:	2b00      	cmp	r3, #0
9001044e:	f040 8093 	bne.w	90010578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
90010452:	687b      	ldr	r3, [r7, #4]
90010454:	2b00      	cmp	r3, #0
90010456:	d01d      	beq.n	90010494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
90010458:	2208      	movs	r2, #8
9001045a:	687b      	ldr	r3, [r7, #4]
9001045c:	4413      	add	r3, r2
9001045e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
90010460:	687b      	ldr	r3, [r7, #4]
90010462:	f003 0307 	and.w	r3, r3, #7
90010466:	2b00      	cmp	r3, #0
90010468:	d014      	beq.n	90010494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9001046a:	687b      	ldr	r3, [r7, #4]
9001046c:	f023 0307 	bic.w	r3, r3, #7
90010470:	3308      	adds	r3, #8
90010472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
90010474:	687b      	ldr	r3, [r7, #4]
90010476:	f003 0307 	and.w	r3, r3, #7
9001047a:	2b00      	cmp	r3, #0
9001047c:	d00a      	beq.n	90010494 <pvPortMalloc+0x6c>
	__asm volatile
9001047e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010482:	f383 8811 	msr	BASEPRI, r3
90010486:	f3bf 8f6f 	isb	sy
9001048a:	f3bf 8f4f 	dsb	sy
9001048e:	617b      	str	r3, [r7, #20]
}
90010490:	bf00      	nop
90010492:	e7fe      	b.n	90010492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
90010494:	687b      	ldr	r3, [r7, #4]
90010496:	2b00      	cmp	r3, #0
90010498:	d06e      	beq.n	90010578 <pvPortMalloc+0x150>
9001049a:	4b45      	ldr	r3, [pc, #276]	; (900105b0 <pvPortMalloc+0x188>)
9001049c:	681b      	ldr	r3, [r3, #0]
9001049e:	687a      	ldr	r2, [r7, #4]
900104a0:	429a      	cmp	r2, r3
900104a2:	d869      	bhi.n	90010578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
900104a4:	4b43      	ldr	r3, [pc, #268]	; (900105b4 <pvPortMalloc+0x18c>)
900104a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
900104a8:	4b42      	ldr	r3, [pc, #264]	; (900105b4 <pvPortMalloc+0x18c>)
900104aa:	681b      	ldr	r3, [r3, #0]
900104ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
900104ae:	e004      	b.n	900104ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
900104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900104b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
900104b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900104b6:	681b      	ldr	r3, [r3, #0]
900104b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
900104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900104bc:	685b      	ldr	r3, [r3, #4]
900104be:	687a      	ldr	r2, [r7, #4]
900104c0:	429a      	cmp	r2, r3
900104c2:	d903      	bls.n	900104cc <pvPortMalloc+0xa4>
900104c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900104c6:	681b      	ldr	r3, [r3, #0]
900104c8:	2b00      	cmp	r3, #0
900104ca:	d1f1      	bne.n	900104b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
900104cc:	4b36      	ldr	r3, [pc, #216]	; (900105a8 <pvPortMalloc+0x180>)
900104ce:	681b      	ldr	r3, [r3, #0]
900104d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900104d2:	429a      	cmp	r2, r3
900104d4:	d050      	beq.n	90010578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
900104d6:	6a3b      	ldr	r3, [r7, #32]
900104d8:	681b      	ldr	r3, [r3, #0]
900104da:	2208      	movs	r2, #8
900104dc:	4413      	add	r3, r2
900104de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
900104e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900104e2:	681a      	ldr	r2, [r3, #0]
900104e4:	6a3b      	ldr	r3, [r7, #32]
900104e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
900104e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900104ea:	685a      	ldr	r2, [r3, #4]
900104ec:	687b      	ldr	r3, [r7, #4]
900104ee:	1ad2      	subs	r2, r2, r3
900104f0:	2308      	movs	r3, #8
900104f2:	005b      	lsls	r3, r3, #1
900104f4:	429a      	cmp	r2, r3
900104f6:	d91f      	bls.n	90010538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
900104f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900104fa:	687b      	ldr	r3, [r7, #4]
900104fc:	4413      	add	r3, r2
900104fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
90010500:	69bb      	ldr	r3, [r7, #24]
90010502:	f003 0307 	and.w	r3, r3, #7
90010506:	2b00      	cmp	r3, #0
90010508:	d00a      	beq.n	90010520 <pvPortMalloc+0xf8>
	__asm volatile
9001050a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001050e:	f383 8811 	msr	BASEPRI, r3
90010512:	f3bf 8f6f 	isb	sy
90010516:	f3bf 8f4f 	dsb	sy
9001051a:	613b      	str	r3, [r7, #16]
}
9001051c:	bf00      	nop
9001051e:	e7fe      	b.n	9001051e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
90010520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010522:	685a      	ldr	r2, [r3, #4]
90010524:	687b      	ldr	r3, [r7, #4]
90010526:	1ad2      	subs	r2, r2, r3
90010528:	69bb      	ldr	r3, [r7, #24]
9001052a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
9001052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001052e:	687a      	ldr	r2, [r7, #4]
90010530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
90010532:	69b8      	ldr	r0, [r7, #24]
90010534:	f000 f908 	bl	90010748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
90010538:	4b1d      	ldr	r3, [pc, #116]	; (900105b0 <pvPortMalloc+0x188>)
9001053a:	681a      	ldr	r2, [r3, #0]
9001053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001053e:	685b      	ldr	r3, [r3, #4]
90010540:	1ad3      	subs	r3, r2, r3
90010542:	4a1b      	ldr	r2, [pc, #108]	; (900105b0 <pvPortMalloc+0x188>)
90010544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90010546:	4b1a      	ldr	r3, [pc, #104]	; (900105b0 <pvPortMalloc+0x188>)
90010548:	681a      	ldr	r2, [r3, #0]
9001054a:	4b1b      	ldr	r3, [pc, #108]	; (900105b8 <pvPortMalloc+0x190>)
9001054c:	681b      	ldr	r3, [r3, #0]
9001054e:	429a      	cmp	r2, r3
90010550:	d203      	bcs.n	9001055a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
90010552:	4b17      	ldr	r3, [pc, #92]	; (900105b0 <pvPortMalloc+0x188>)
90010554:	681b      	ldr	r3, [r3, #0]
90010556:	4a18      	ldr	r2, [pc, #96]	; (900105b8 <pvPortMalloc+0x190>)
90010558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9001055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001055c:	685a      	ldr	r2, [r3, #4]
9001055e:	4b13      	ldr	r3, [pc, #76]	; (900105ac <pvPortMalloc+0x184>)
90010560:	681b      	ldr	r3, [r3, #0]
90010562:	431a      	orrs	r2, r3
90010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
90010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001056a:	2200      	movs	r2, #0
9001056c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
9001056e:	4b13      	ldr	r3, [pc, #76]	; (900105bc <pvPortMalloc+0x194>)
90010570:	681b      	ldr	r3, [r3, #0]
90010572:	3301      	adds	r3, #1
90010574:	4a11      	ldr	r2, [pc, #68]	; (900105bc <pvPortMalloc+0x194>)
90010576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
90010578:	f7fe fcfe 	bl	9000ef78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9001057c:	69fb      	ldr	r3, [r7, #28]
9001057e:	f003 0307 	and.w	r3, r3, #7
90010582:	2b00      	cmp	r3, #0
90010584:	d00a      	beq.n	9001059c <pvPortMalloc+0x174>
	__asm volatile
90010586:	f04f 0350 	mov.w	r3, #80	; 0x50
9001058a:	f383 8811 	msr	BASEPRI, r3
9001058e:	f3bf 8f6f 	isb	sy
90010592:	f3bf 8f4f 	dsb	sy
90010596:	60fb      	str	r3, [r7, #12]
}
90010598:	bf00      	nop
9001059a:	e7fe      	b.n	9001059a <pvPortMalloc+0x172>
	return pvReturn;
9001059c:	69fb      	ldr	r3, [r7, #28]
}
9001059e:	4618      	mov	r0, r3
900105a0:	3728      	adds	r7, #40	; 0x28
900105a2:	46bd      	mov	sp, r7
900105a4:	bd80      	pop	{r7, pc}
900105a6:	bf00      	nop
900105a8:	24005820 	.word	0x24005820
900105ac:	24005834 	.word	0x24005834
900105b0:	24005824 	.word	0x24005824
900105b4:	24005818 	.word	0x24005818
900105b8:	24005828 	.word	0x24005828
900105bc:	2400582c 	.word	0x2400582c

900105c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
900105c0:	b580      	push	{r7, lr}
900105c2:	b086      	sub	sp, #24
900105c4:	af00      	add	r7, sp, #0
900105c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
900105c8:	687b      	ldr	r3, [r7, #4]
900105ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
900105cc:	687b      	ldr	r3, [r7, #4]
900105ce:	2b00      	cmp	r3, #0
900105d0:	d04d      	beq.n	9001066e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
900105d2:	2308      	movs	r3, #8
900105d4:	425b      	negs	r3, r3
900105d6:	697a      	ldr	r2, [r7, #20]
900105d8:	4413      	add	r3, r2
900105da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
900105dc:	697b      	ldr	r3, [r7, #20]
900105de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
900105e0:	693b      	ldr	r3, [r7, #16]
900105e2:	685a      	ldr	r2, [r3, #4]
900105e4:	4b24      	ldr	r3, [pc, #144]	; (90010678 <vPortFree+0xb8>)
900105e6:	681b      	ldr	r3, [r3, #0]
900105e8:	4013      	ands	r3, r2
900105ea:	2b00      	cmp	r3, #0
900105ec:	d10a      	bne.n	90010604 <vPortFree+0x44>
	__asm volatile
900105ee:	f04f 0350 	mov.w	r3, #80	; 0x50
900105f2:	f383 8811 	msr	BASEPRI, r3
900105f6:	f3bf 8f6f 	isb	sy
900105fa:	f3bf 8f4f 	dsb	sy
900105fe:	60fb      	str	r3, [r7, #12]
}
90010600:	bf00      	nop
90010602:	e7fe      	b.n	90010602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
90010604:	693b      	ldr	r3, [r7, #16]
90010606:	681b      	ldr	r3, [r3, #0]
90010608:	2b00      	cmp	r3, #0
9001060a:	d00a      	beq.n	90010622 <vPortFree+0x62>
	__asm volatile
9001060c:	f04f 0350 	mov.w	r3, #80	; 0x50
90010610:	f383 8811 	msr	BASEPRI, r3
90010614:	f3bf 8f6f 	isb	sy
90010618:	f3bf 8f4f 	dsb	sy
9001061c:	60bb      	str	r3, [r7, #8]
}
9001061e:	bf00      	nop
90010620:	e7fe      	b.n	90010620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
90010622:	693b      	ldr	r3, [r7, #16]
90010624:	685a      	ldr	r2, [r3, #4]
90010626:	4b14      	ldr	r3, [pc, #80]	; (90010678 <vPortFree+0xb8>)
90010628:	681b      	ldr	r3, [r3, #0]
9001062a:	4013      	ands	r3, r2
9001062c:	2b00      	cmp	r3, #0
9001062e:	d01e      	beq.n	9001066e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
90010630:	693b      	ldr	r3, [r7, #16]
90010632:	681b      	ldr	r3, [r3, #0]
90010634:	2b00      	cmp	r3, #0
90010636:	d11a      	bne.n	9001066e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
90010638:	693b      	ldr	r3, [r7, #16]
9001063a:	685a      	ldr	r2, [r3, #4]
9001063c:	4b0e      	ldr	r3, [pc, #56]	; (90010678 <vPortFree+0xb8>)
9001063e:	681b      	ldr	r3, [r3, #0]
90010640:	43db      	mvns	r3, r3
90010642:	401a      	ands	r2, r3
90010644:	693b      	ldr	r3, [r7, #16]
90010646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
90010648:	f7fe fc88 	bl	9000ef5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
9001064c:	693b      	ldr	r3, [r7, #16]
9001064e:	685a      	ldr	r2, [r3, #4]
90010650:	4b0a      	ldr	r3, [pc, #40]	; (9001067c <vPortFree+0xbc>)
90010652:	681b      	ldr	r3, [r3, #0]
90010654:	4413      	add	r3, r2
90010656:	4a09      	ldr	r2, [pc, #36]	; (9001067c <vPortFree+0xbc>)
90010658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
9001065a:	6938      	ldr	r0, [r7, #16]
9001065c:	f000 f874 	bl	90010748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
90010660:	4b07      	ldr	r3, [pc, #28]	; (90010680 <vPortFree+0xc0>)
90010662:	681b      	ldr	r3, [r3, #0]
90010664:	3301      	adds	r3, #1
90010666:	4a06      	ldr	r2, [pc, #24]	; (90010680 <vPortFree+0xc0>)
90010668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
9001066a:	f7fe fc85 	bl	9000ef78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
9001066e:	bf00      	nop
90010670:	3718      	adds	r7, #24
90010672:	46bd      	mov	sp, r7
90010674:	bd80      	pop	{r7, pc}
90010676:	bf00      	nop
90010678:	24005834 	.word	0x24005834
9001067c:	24005824 	.word	0x24005824
90010680:	24005830 	.word	0x24005830

90010684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
90010684:	b480      	push	{r7}
90010686:	b085      	sub	sp, #20
90010688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
9001068a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
9001068e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
90010690:	4b27      	ldr	r3, [pc, #156]	; (90010730 <prvHeapInit+0xac>)
90010692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
90010694:	68fb      	ldr	r3, [r7, #12]
90010696:	f003 0307 	and.w	r3, r3, #7
9001069a:	2b00      	cmp	r3, #0
9001069c:	d00c      	beq.n	900106b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9001069e:	68fb      	ldr	r3, [r7, #12]
900106a0:	3307      	adds	r3, #7
900106a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
900106a4:	68fb      	ldr	r3, [r7, #12]
900106a6:	f023 0307 	bic.w	r3, r3, #7
900106aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
900106ac:	68ba      	ldr	r2, [r7, #8]
900106ae:	68fb      	ldr	r3, [r7, #12]
900106b0:	1ad3      	subs	r3, r2, r3
900106b2:	4a1f      	ldr	r2, [pc, #124]	; (90010730 <prvHeapInit+0xac>)
900106b4:	4413      	add	r3, r2
900106b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
900106b8:	68fb      	ldr	r3, [r7, #12]
900106ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
900106bc:	4a1d      	ldr	r2, [pc, #116]	; (90010734 <prvHeapInit+0xb0>)
900106be:	687b      	ldr	r3, [r7, #4]
900106c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
900106c2:	4b1c      	ldr	r3, [pc, #112]	; (90010734 <prvHeapInit+0xb0>)
900106c4:	2200      	movs	r2, #0
900106c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
900106c8:	687b      	ldr	r3, [r7, #4]
900106ca:	68ba      	ldr	r2, [r7, #8]
900106cc:	4413      	add	r3, r2
900106ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
900106d0:	2208      	movs	r2, #8
900106d2:	68fb      	ldr	r3, [r7, #12]
900106d4:	1a9b      	subs	r3, r3, r2
900106d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
900106d8:	68fb      	ldr	r3, [r7, #12]
900106da:	f023 0307 	bic.w	r3, r3, #7
900106de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
900106e0:	68fb      	ldr	r3, [r7, #12]
900106e2:	4a15      	ldr	r2, [pc, #84]	; (90010738 <prvHeapInit+0xb4>)
900106e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
900106e6:	4b14      	ldr	r3, [pc, #80]	; (90010738 <prvHeapInit+0xb4>)
900106e8:	681b      	ldr	r3, [r3, #0]
900106ea:	2200      	movs	r2, #0
900106ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
900106ee:	4b12      	ldr	r3, [pc, #72]	; (90010738 <prvHeapInit+0xb4>)
900106f0:	681b      	ldr	r3, [r3, #0]
900106f2:	2200      	movs	r2, #0
900106f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
900106f6:	687b      	ldr	r3, [r7, #4]
900106f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
900106fa:	683b      	ldr	r3, [r7, #0]
900106fc:	68fa      	ldr	r2, [r7, #12]
900106fe:	1ad2      	subs	r2, r2, r3
90010700:	683b      	ldr	r3, [r7, #0]
90010702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
90010704:	4b0c      	ldr	r3, [pc, #48]	; (90010738 <prvHeapInit+0xb4>)
90010706:	681a      	ldr	r2, [r3, #0]
90010708:	683b      	ldr	r3, [r7, #0]
9001070a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9001070c:	683b      	ldr	r3, [r7, #0]
9001070e:	685b      	ldr	r3, [r3, #4]
90010710:	4a0a      	ldr	r2, [pc, #40]	; (9001073c <prvHeapInit+0xb8>)
90010712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
90010714:	683b      	ldr	r3, [r7, #0]
90010716:	685b      	ldr	r3, [r3, #4]
90010718:	4a09      	ldr	r2, [pc, #36]	; (90010740 <prvHeapInit+0xbc>)
9001071a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9001071c:	4b09      	ldr	r3, [pc, #36]	; (90010744 <prvHeapInit+0xc0>)
9001071e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
90010722:	601a      	str	r2, [r3, #0]
}
90010724:	bf00      	nop
90010726:	3714      	adds	r7, #20
90010728:	46bd      	mov	sp, r7
9001072a:	f85d 7b04 	ldr.w	r7, [sp], #4
9001072e:	4770      	bx	lr
90010730:	24001c18 	.word	0x24001c18
90010734:	24005818 	.word	0x24005818
90010738:	24005820 	.word	0x24005820
9001073c:	24005828 	.word	0x24005828
90010740:	24005824 	.word	0x24005824
90010744:	24005834 	.word	0x24005834

90010748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
90010748:	b480      	push	{r7}
9001074a:	b085      	sub	sp, #20
9001074c:	af00      	add	r7, sp, #0
9001074e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
90010750:	4b28      	ldr	r3, [pc, #160]	; (900107f4 <prvInsertBlockIntoFreeList+0xac>)
90010752:	60fb      	str	r3, [r7, #12]
90010754:	e002      	b.n	9001075c <prvInsertBlockIntoFreeList+0x14>
90010756:	68fb      	ldr	r3, [r7, #12]
90010758:	681b      	ldr	r3, [r3, #0]
9001075a:	60fb      	str	r3, [r7, #12]
9001075c:	68fb      	ldr	r3, [r7, #12]
9001075e:	681b      	ldr	r3, [r3, #0]
90010760:	687a      	ldr	r2, [r7, #4]
90010762:	429a      	cmp	r2, r3
90010764:	d8f7      	bhi.n	90010756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
90010766:	68fb      	ldr	r3, [r7, #12]
90010768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9001076a:	68fb      	ldr	r3, [r7, #12]
9001076c:	685b      	ldr	r3, [r3, #4]
9001076e:	68ba      	ldr	r2, [r7, #8]
90010770:	4413      	add	r3, r2
90010772:	687a      	ldr	r2, [r7, #4]
90010774:	429a      	cmp	r2, r3
90010776:	d108      	bne.n	9001078a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
90010778:	68fb      	ldr	r3, [r7, #12]
9001077a:	685a      	ldr	r2, [r3, #4]
9001077c:	687b      	ldr	r3, [r7, #4]
9001077e:	685b      	ldr	r3, [r3, #4]
90010780:	441a      	add	r2, r3
90010782:	68fb      	ldr	r3, [r7, #12]
90010784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
90010786:	68fb      	ldr	r3, [r7, #12]
90010788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
9001078a:	687b      	ldr	r3, [r7, #4]
9001078c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9001078e:	687b      	ldr	r3, [r7, #4]
90010790:	685b      	ldr	r3, [r3, #4]
90010792:	68ba      	ldr	r2, [r7, #8]
90010794:	441a      	add	r2, r3
90010796:	68fb      	ldr	r3, [r7, #12]
90010798:	681b      	ldr	r3, [r3, #0]
9001079a:	429a      	cmp	r2, r3
9001079c:	d118      	bne.n	900107d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
9001079e:	68fb      	ldr	r3, [r7, #12]
900107a0:	681a      	ldr	r2, [r3, #0]
900107a2:	4b15      	ldr	r3, [pc, #84]	; (900107f8 <prvInsertBlockIntoFreeList+0xb0>)
900107a4:	681b      	ldr	r3, [r3, #0]
900107a6:	429a      	cmp	r2, r3
900107a8:	d00d      	beq.n	900107c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
900107aa:	687b      	ldr	r3, [r7, #4]
900107ac:	685a      	ldr	r2, [r3, #4]
900107ae:	68fb      	ldr	r3, [r7, #12]
900107b0:	681b      	ldr	r3, [r3, #0]
900107b2:	685b      	ldr	r3, [r3, #4]
900107b4:	441a      	add	r2, r3
900107b6:	687b      	ldr	r3, [r7, #4]
900107b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
900107ba:	68fb      	ldr	r3, [r7, #12]
900107bc:	681b      	ldr	r3, [r3, #0]
900107be:	681a      	ldr	r2, [r3, #0]
900107c0:	687b      	ldr	r3, [r7, #4]
900107c2:	601a      	str	r2, [r3, #0]
900107c4:	e008      	b.n	900107d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
900107c6:	4b0c      	ldr	r3, [pc, #48]	; (900107f8 <prvInsertBlockIntoFreeList+0xb0>)
900107c8:	681a      	ldr	r2, [r3, #0]
900107ca:	687b      	ldr	r3, [r7, #4]
900107cc:	601a      	str	r2, [r3, #0]
900107ce:	e003      	b.n	900107d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
900107d0:	68fb      	ldr	r3, [r7, #12]
900107d2:	681a      	ldr	r2, [r3, #0]
900107d4:	687b      	ldr	r3, [r7, #4]
900107d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
900107d8:	68fa      	ldr	r2, [r7, #12]
900107da:	687b      	ldr	r3, [r7, #4]
900107dc:	429a      	cmp	r2, r3
900107de:	d002      	beq.n	900107e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
900107e0:	68fb      	ldr	r3, [r7, #12]
900107e2:	687a      	ldr	r2, [r7, #4]
900107e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
900107e6:	bf00      	nop
900107e8:	3714      	adds	r7, #20
900107ea:	46bd      	mov	sp, r7
900107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
900107f0:	4770      	bx	lr
900107f2:	bf00      	nop
900107f4:	24005818 	.word	0x24005818
900107f8:	24005820 	.word	0x24005820

900107fc <checkint>:
900107fc:	f3c1 520a 	ubfx	r2, r1, #20, #11
90010800:	f240 33fe 	movw	r3, #1022	; 0x3fe
90010804:	429a      	cmp	r2, r3
90010806:	b570      	push	{r4, r5, r6, lr}
90010808:	dd2a      	ble.n	90010860 <checkint+0x64>
9001080a:	f240 4333 	movw	r3, #1075	; 0x433
9001080e:	429a      	cmp	r2, r3
90010810:	dc24      	bgt.n	9001085c <checkint+0x60>
90010812:	1a9b      	subs	r3, r3, r2
90010814:	f1a3 0620 	sub.w	r6, r3, #32
90010818:	f04f 32ff 	mov.w	r2, #4294967295
9001081c:	fa02 f403 	lsl.w	r4, r2, r3
90010820:	fa02 f606 	lsl.w	r6, r2, r6
90010824:	f1c3 0520 	rsb	r5, r3, #32
90010828:	fa22 f505 	lsr.w	r5, r2, r5
9001082c:	4334      	orrs	r4, r6
9001082e:	432c      	orrs	r4, r5
90010830:	409a      	lsls	r2, r3
90010832:	ea20 0202 	bic.w	r2, r0, r2
90010836:	ea21 0404 	bic.w	r4, r1, r4
9001083a:	4322      	orrs	r2, r4
9001083c:	f1a3 0420 	sub.w	r4, r3, #32
90010840:	f1c3 0220 	rsb	r2, r3, #32
90010844:	d10c      	bne.n	90010860 <checkint+0x64>
90010846:	40d8      	lsrs	r0, r3
90010848:	fa01 f302 	lsl.w	r3, r1, r2
9001084c:	4318      	orrs	r0, r3
9001084e:	40e1      	lsrs	r1, r4
90010850:	4308      	orrs	r0, r1
90010852:	f000 0001 	and.w	r0, r0, #1
90010856:	f1d0 0002 	rsbs	r0, r0, #2
9001085a:	bd70      	pop	{r4, r5, r6, pc}
9001085c:	2002      	movs	r0, #2
9001085e:	e7fc      	b.n	9001085a <checkint+0x5e>
90010860:	2000      	movs	r0, #0
90010862:	e7fa      	b.n	9001085a <checkint+0x5e>
90010864:	0000      	movs	r0, r0
	...

90010868 <pow>:
90010868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001086c:	ee10 4a90 	vmov	r4, s1
90010870:	ed2d 8b0a 	vpush	{d8-d12}
90010874:	ea4f 5a14 	mov.w	sl, r4, lsr #20
90010878:	ee11 7a90 	vmov	r7, s3
9001087c:	f10a 32ff 	add.w	r2, sl, #4294967295
90010880:	f240 73fd 	movw	r3, #2045	; 0x7fd
90010884:	429a      	cmp	r2, r3
90010886:	ee10 6a10 	vmov	r6, s0
9001088a:	ee11 0a10 	vmov	r0, s2
9001088e:	b086      	sub	sp, #24
90010890:	46d4      	mov	ip, sl
90010892:	ea4f 5517 	mov.w	r5, r7, lsr #20
90010896:	d806      	bhi.n	900108a6 <pow+0x3e>
90010898:	f3c5 030a 	ubfx	r3, r5, #0, #11
9001089c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
900108a0:	2b7f      	cmp	r3, #127	; 0x7f
900108a2:	f240 8156 	bls.w	90010b52 <pow+0x2ea>
900108a6:	1802      	adds	r2, r0, r0
900108a8:	eb47 0107 	adc.w	r1, r7, r7
900108ac:	f06f 0e01 	mvn.w	lr, #1
900108b0:	f112 39ff 	adds.w	r9, r2, #4294967295
900108b4:	f141 38ff 	adc.w	r8, r1, #4294967295
900108b8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
900108bc:	45ce      	cmp	lr, r9
900108be:	eb73 0808 	sbcs.w	r8, r3, r8
900108c2:	d23f      	bcs.n	90010944 <pow+0xdc>
900108c4:	ea52 0301 	orrs.w	r3, r2, r1
900108c8:	f04f 0300 	mov.w	r3, #0
900108cc:	d10c      	bne.n	900108e8 <pow+0x80>
900108ce:	19b6      	adds	r6, r6, r6
900108d0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
900108d4:	4164      	adcs	r4, r4
900108d6:	42b3      	cmp	r3, r6
900108d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
900108dc:	41a3      	sbcs	r3, r4
900108de:	f0c0 808c 	bcc.w	900109fa <pow+0x192>
900108e2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
900108e6:	e028      	b.n	9001093a <pow+0xd2>
900108e8:	4da3      	ldr	r5, [pc, #652]	; (90010b78 <pow+0x310>)
900108ea:	42ac      	cmp	r4, r5
900108ec:	bf08      	it	eq
900108ee:	429e      	cmpeq	r6, r3
900108f0:	d107      	bne.n	90010902 <pow+0x9a>
900108f2:	1800      	adds	r0, r0, r0
900108f4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
900108f8:	417f      	adcs	r7, r7
900108fa:	4283      	cmp	r3, r0
900108fc:	4b9f      	ldr	r3, [pc, #636]	; (90010b7c <pow+0x314>)
900108fe:	41bb      	sbcs	r3, r7
90010900:	e7ed      	b.n	900108de <pow+0x76>
90010902:	19b6      	adds	r6, r6, r6
90010904:	489e      	ldr	r0, [pc, #632]	; (90010b80 <pow+0x318>)
90010906:	4164      	adcs	r4, r4
90010908:	42b3      	cmp	r3, r6
9001090a:	eb70 0504 	sbcs.w	r5, r0, r4
9001090e:	d374      	bcc.n	900109fa <pow+0x192>
90010910:	4281      	cmp	r1, r0
90010912:	bf08      	it	eq
90010914:	429a      	cmpeq	r2, r3
90010916:	d170      	bne.n	900109fa <pow+0x192>
90010918:	4a9a      	ldr	r2, [pc, #616]	; (90010b84 <pow+0x31c>)
9001091a:	4294      	cmp	r4, r2
9001091c:	bf08      	it	eq
9001091e:	429e      	cmpeq	r6, r3
90010920:	d0df      	beq.n	900108e2 <pow+0x7a>
90010922:	4294      	cmp	r4, r2
90010924:	ea6f 0707 	mvn.w	r7, r7
90010928:	bf34      	ite	cc
9001092a:	2400      	movcc	r4, #0
9001092c:	2401      	movcs	r4, #1
9001092e:	0fff      	lsrs	r7, r7, #31
90010930:	42bc      	cmp	r4, r7
90010932:	f040 81d9 	bne.w	90010ce8 <pow+0x480>
90010936:	ee21 0b01 	vmul.f64	d0, d1, d1
9001093a:	b006      	add	sp, #24
9001093c:	ecbd 8b0a 	vpop	{d8-d12}
90010940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90010944:	eb16 0806 	adds.w	r8, r6, r6
90010948:	eb44 0904 	adc.w	r9, r4, r4
9001094c:	f118 31ff 	adds.w	r1, r8, #4294967295
90010950:	f169 0200 	sbc.w	r2, r9, #0
90010954:	458e      	cmp	lr, r1
90010956:	4193      	sbcs	r3, r2
90010958:	d223      	bcs.n	900109a2 <pow+0x13a>
9001095a:	ee20 0b00 	vmul.f64	d0, d0, d0
9001095e:	2c00      	cmp	r4, #0
90010960:	da12      	bge.n	90010988 <pow+0x120>
90010962:	4639      	mov	r1, r7
90010964:	f7ff ff4a 	bl	900107fc <checkint>
90010968:	2801      	cmp	r0, #1
9001096a:	d10d      	bne.n	90010988 <pow+0x120>
9001096c:	eeb1 0b40 	vneg.f64	d0, d0
90010970:	ea58 0309 	orrs.w	r3, r8, r9
90010974:	d10a      	bne.n	9001098c <pow+0x124>
90010976:	2f00      	cmp	r7, #0
90010978:	dadf      	bge.n	9001093a <pow+0xd2>
9001097a:	b006      	add	sp, #24
9001097c:	ecbd 8b0a 	vpop	{d8-d12}
90010980:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010984:	f000 b9f0 	b.w	90010d68 <__math_divzero>
90010988:	2000      	movs	r0, #0
9001098a:	e7f1      	b.n	90010970 <pow+0x108>
9001098c:	2f00      	cmp	r7, #0
9001098e:	dad4      	bge.n	9001093a <pow+0xd2>
90010990:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
90010994:	ee86 7b00 	vdiv.f64	d7, d6, d0
90010998:	ed8d 7b00 	vstr	d7, [sp]
9001099c:	ed9d 0b00 	vldr	d0, [sp]
900109a0:	e7cb      	b.n	9001093a <pow+0xd2>
900109a2:	2c00      	cmp	r4, #0
900109a4:	da2c      	bge.n	90010a00 <pow+0x198>
900109a6:	4639      	mov	r1, r7
900109a8:	f7ff ff28 	bl	900107fc <checkint>
900109ac:	b930      	cbnz	r0, 900109bc <pow+0x154>
900109ae:	b006      	add	sp, #24
900109b0:	ecbd 8b0a 	vpop	{d8-d12}
900109b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900109b8:	f000 b9ee 	b.w	90010d98 <__math_invalid>
900109bc:	2801      	cmp	r0, #1
900109be:	bf14      	ite	ne
900109c0:	2000      	movne	r0, #0
900109c2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
900109c6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
900109ca:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
900109ce:	f3c5 020a 	ubfx	r2, r5, #0, #11
900109d2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
900109d6:	2b7f      	cmp	r3, #127	; 0x7f
900109d8:	d92d      	bls.n	90010a36 <pow+0x1ce>
900109da:	4b67      	ldr	r3, [pc, #412]	; (90010b78 <pow+0x310>)
900109dc:	2000      	movs	r0, #0
900109de:	429c      	cmp	r4, r3
900109e0:	bf08      	it	eq
900109e2:	4286      	cmpeq	r6, r0
900109e4:	f43f af7d 	beq.w	900108e2 <pow+0x7a>
900109e8:	f240 31bd 	movw	r1, #957	; 0x3bd
900109ec:	428a      	cmp	r2, r1
900109ee:	d80c      	bhi.n	90010a0a <pow+0x1a2>
900109f0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
900109f4:	42b0      	cmp	r0, r6
900109f6:	41a3      	sbcs	r3, r4
900109f8:	d204      	bcs.n	90010a04 <pow+0x19c>
900109fa:	ee31 0b00 	vadd.f64	d0, d1, d0
900109fe:	e79c      	b.n	9001093a <pow+0xd2>
90010a00:	2000      	movs	r0, #0
90010a02:	e7e4      	b.n	900109ce <pow+0x166>
90010a04:	ee30 0b41 	vsub.f64	d0, d0, d1
90010a08:	e797      	b.n	9001093a <pow+0xd2>
90010a0a:	2e01      	cmp	r6, #1
90010a0c:	eb74 0303 	sbcs.w	r3, r4, r3
90010a10:	f240 72ff 	movw	r2, #2047	; 0x7ff
90010a14:	bf34      	ite	cc
90010a16:	2301      	movcc	r3, #1
90010a18:	2300      	movcs	r3, #0
90010a1a:	4295      	cmp	r5, r2
90010a1c:	bf8c      	ite	hi
90010a1e:	2500      	movhi	r5, #0
90010a20:	2501      	movls	r5, #1
90010a22:	42ab      	cmp	r3, r5
90010a24:	f000 809d 	beq.w	90010b62 <pow+0x2fa>
90010a28:	b006      	add	sp, #24
90010a2a:	ecbd 8b0a 	vpop	{d8-d12}
90010a2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010a32:	f000 b991 	b.w	90010d58 <__math_oflow>
90010a36:	f1bc 0f00 	cmp.w	ip, #0
90010a3a:	d10b      	bne.n	90010a54 <pow+0x1ec>
90010a3c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 90010b70 <pow+0x308>
90010a40:	ee20 7b07 	vmul.f64	d7, d0, d7
90010a44:	ec53 2b17 	vmov	r2, r3, d7
90010a48:	ee17 6a10 	vmov	r6, s14
90010a4c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
90010a50:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
90010a54:	4b4c      	ldr	r3, [pc, #304]	; (90010b88 <pow+0x320>)
90010a56:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
90010a5a:	4423      	add	r3, r4
90010a5c:	f3c3 3246 	ubfx	r2, r3, #13, #7
90010a60:	1519      	asrs	r1, r3, #20
90010a62:	0d1b      	lsrs	r3, r3, #20
90010a64:	051b      	lsls	r3, r3, #20
90010a66:	eba4 0903 	sub.w	r9, r4, r3
90010a6a:	4b48      	ldr	r3, [pc, #288]	; (90010b8c <pow+0x324>)
90010a6c:	ee04 1a10 	vmov	s8, r1
90010a70:	eb03 1142 	add.w	r1, r3, r2, lsl #5
90010a74:	f1b6 0800 	subs.w	r8, r6, #0
90010a78:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
90010a7c:	ec49 8b15 	vmov	d5, r8, r9
90010a80:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
90010a84:	eea5 6b07 	vfma.f64	d6, d5, d7
90010a88:	ed93 7b00 	vldr	d7, [r3]
90010a8c:	ed93 5b02 	vldr	d5, [r3, #8]
90010a90:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
90010a94:	eea4 2b07 	vfma.f64	d2, d4, d7
90010a98:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
90010a9c:	ee36 ab02 	vadd.f64	d10, d6, d2
90010aa0:	ee32 2b4a 	vsub.f64	d2, d2, d10
90010aa4:	eea4 7b05 	vfma.f64	d7, d4, d5
90010aa8:	ed93 5b04 	vldr	d5, [r3, #16]
90010aac:	ee32 2b06 	vadd.f64	d2, d2, d6
90010ab0:	ee37 7b02 	vadd.f64	d7, d7, d2
90010ab4:	ee26 5b05 	vmul.f64	d5, d6, d5
90010ab8:	ed93 4b08 	vldr	d4, [r3, #32]
90010abc:	ee26 0b05 	vmul.f64	d0, d6, d5
90010ac0:	eeb0 9b40 	vmov.f64	d9, d0
90010ac4:	ee95 9b06 	vfnms.f64	d9, d5, d6
90010ac8:	ed93 5b06 	vldr	d5, [r3, #24]
90010acc:	ee3a 8b00 	vadd.f64	d8, d10, d0
90010ad0:	ee26 bb00 	vmul.f64	d11, d6, d0
90010ad4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
90010ad8:	eea6 5b04 	vfma.f64	d5, d6, d4
90010adc:	ee3a ab48 	vsub.f64	d10, d10, d8
90010ae0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
90010ae4:	ee37 9b09 	vadd.f64	d9, d7, d9
90010ae8:	ee3a ab00 	vadd.f64	d10, d10, d0
90010aec:	eea6 4b03 	vfma.f64	d4, d6, d3
90010af0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
90010af4:	ee39 ab0a 	vadd.f64	d10, d9, d10
90010af8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
90010afc:	eea6 3b0c 	vfma.f64	d3, d6, d12
90010b00:	eea0 4b03 	vfma.f64	d4, d0, d3
90010b04:	eea0 5b04 	vfma.f64	d5, d0, d4
90010b08:	eeab ab05 	vfma.f64	d10, d11, d5
90010b0c:	ee38 6b0a 	vadd.f64	d6, d8, d10
90010b10:	ee21 7b06 	vmul.f64	d7, d1, d6
90010b14:	ee17 3a90 	vmov	r3, s15
90010b18:	eeb0 5b47 	vmov.f64	d5, d7
90010b1c:	f3c3 560a 	ubfx	r6, r3, #20, #11
90010b20:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
90010b24:	18b2      	adds	r2, r6, r2
90010b26:	2a3e      	cmp	r2, #62	; 0x3e
90010b28:	ee91 5b06 	vfnms.f64	d5, d1, d6
90010b2c:	ee38 8b46 	vsub.f64	d8, d8, d6
90010b30:	ee38 ab0a 	vadd.f64	d10, d8, d10
90010b34:	eea1 5b0a 	vfma.f64	d5, d1, d10
90010b38:	d92b      	bls.n	90010b92 <pow+0x32a>
90010b3a:	2a00      	cmp	r2, #0
90010b3c:	da0b      	bge.n	90010b56 <pow+0x2ee>
90010b3e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
90010b42:	ee37 0b00 	vadd.f64	d0, d7, d0
90010b46:	2800      	cmp	r0, #0
90010b48:	f43f aef7 	beq.w	9001093a <pow+0xd2>
90010b4c:	eeb1 0b40 	vneg.f64	d0, d0
90010b50:	e6f3      	b.n	9001093a <pow+0xd2>
90010b52:	2000      	movs	r0, #0
90010b54:	e77e      	b.n	90010a54 <pow+0x1ec>
90010b56:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
90010b5a:	d919      	bls.n	90010b90 <pow+0x328>
90010b5c:	2b00      	cmp	r3, #0
90010b5e:	f6bf af63 	bge.w	90010a28 <pow+0x1c0>
90010b62:	b006      	add	sp, #24
90010b64:	ecbd 8b0a 	vpop	{d8-d12}
90010b68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010b6c:	f000 b8ec 	b.w	90010d48 <__math_uflow>
90010b70:	00000000 	.word	0x00000000
90010b74:	43300000 	.word	0x43300000
90010b78:	3ff00000 	.word	0x3ff00000
90010b7c:	fff00000 	.word	0xfff00000
90010b80:	ffe00000 	.word	0xffe00000
90010b84:	7fe00000 	.word	0x7fe00000
90010b88:	c0196aab 	.word	0xc0196aab
90010b8c:	90013f30 	.word	0x90013f30
90010b90:	2600      	movs	r6, #0
90010b92:	495d      	ldr	r1, [pc, #372]	; (90010d08 <pow+0x4a0>)
90010b94:	ed91 4b02 	vldr	d4, [r1, #8]
90010b98:	ed91 3b00 	vldr	d3, [r1]
90010b9c:	eeb0 6b44 	vmov.f64	d6, d4
90010ba0:	eea7 6b03 	vfma.f64	d6, d7, d3
90010ba4:	ee16 5a10 	vmov	r5, s12
90010ba8:	ee36 6b44 	vsub.f64	d6, d6, d4
90010bac:	ed91 4b04 	vldr	d4, [r1, #16]
90010bb0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
90010bb4:	eea6 7b04 	vfma.f64	d7, d6, d4
90010bb8:	eeb0 0b47 	vmov.f64	d0, d7
90010bbc:	ed91 7b06 	vldr	d7, [r1, #24]
90010bc0:	18dc      	adds	r4, r3, r3
90010bc2:	f104 030f 	add.w	r3, r4, #15
90010bc6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
90010bca:	eea6 0b07 	vfma.f64	d0, d6, d7
90010bce:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
90010bd2:	ee35 0b00 	vadd.f64	d0, d5, d0
90010bd6:	ee20 6b00 	vmul.f64	d6, d0, d0
90010bda:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
90010bde:	ed91 5b08 	vldr	d5, [r1, #32]
90010be2:	ee30 7b07 	vadd.f64	d7, d0, d7
90010be6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
90010bea:	eea0 5b04 	vfma.f64	d5, d0, d4
90010bee:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
90010bf2:	eea6 7b05 	vfma.f64	d7, d6, d5
90010bf6:	ee26 6b06 	vmul.f64	d6, d6, d6
90010bfa:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
90010bfe:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
90010c02:	f8d2 e004 	ldr.w	lr, [r2, #4]
90010c06:	eea0 5b04 	vfma.f64	d5, d0, d4
90010c0a:	1940      	adds	r0, r0, r5
90010c0c:	2700      	movs	r7, #0
90010c0e:	eb17 020c 	adds.w	r2, r7, ip
90010c12:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
90010c16:	eea6 7b05 	vfma.f64	d7, d6, d5
90010c1a:	2e00      	cmp	r6, #0
90010c1c:	d15f      	bne.n	90010cde <pow+0x476>
90010c1e:	42bd      	cmp	r5, r7
90010c20:	db13      	blt.n	90010c4a <pow+0x3e2>
90010c22:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
90010c26:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
90010c2a:	4610      	mov	r0, r2
90010c2c:	ec41 0b10 	vmov	d0, r0, r1
90010c30:	eea7 0b00 	vfma.f64	d0, d7, d0
90010c34:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 90010cf0 <pow+0x488>
90010c38:	ee20 0b07 	vmul.f64	d0, d0, d7
90010c3c:	b006      	add	sp, #24
90010c3e:	ecbd 8b0a 	vpop	{d8-d12}
90010c42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010c46:	f000 b8bf 	b.w	90010dc8 <__math_check_oflow>
90010c4a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
90010c4e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
90010c52:	4610      	mov	r0, r2
90010c54:	ec41 0b15 	vmov	d5, r0, r1
90010c58:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
90010c5c:	ee27 6b05 	vmul.f64	d6, d7, d5
90010c60:	ee35 7b06 	vadd.f64	d7, d5, d6
90010c64:	eeb0 3bc7 	vabs.f64	d3, d7
90010c68:	eeb4 3bc4 	vcmpe.f64	d3, d4
90010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90010c70:	ed9f 0b21 	vldr	d0, [pc, #132]	; 90010cf8 <pow+0x490>
90010c74:	d52a      	bpl.n	90010ccc <pow+0x464>
90010c76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
90010c7a:	ee35 5b47 	vsub.f64	d5, d5, d7
90010c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90010c82:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
90010c86:	ee35 6b06 	vadd.f64	d6, d5, d6
90010c8a:	bf48      	it	mi
90010c8c:	eeb0 4b43 	vmovmi.f64	d4, d3
90010c90:	ee37 3b04 	vadd.f64	d3, d7, d4
90010c94:	ee34 5b43 	vsub.f64	d5, d4, d3
90010c98:	ee35 7b07 	vadd.f64	d7, d5, d7
90010c9c:	ee37 7b06 	vadd.f64	d7, d7, d6
90010ca0:	ee37 7b03 	vadd.f64	d7, d7, d3
90010ca4:	ee37 7b44 	vsub.f64	d7, d7, d4
90010ca8:	eeb5 7b40 	vcmp.f64	d7, #0.0
90010cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90010cb0:	d104      	bne.n	90010cbc <pow+0x454>
90010cb2:	4632      	mov	r2, r6
90010cb4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
90010cb8:	ec43 2b17 	vmov	d7, r2, r3
90010cbc:	ed8d 0b02 	vstr	d0, [sp, #8]
90010cc0:	ed9d 6b02 	vldr	d6, [sp, #8]
90010cc4:	ee26 6b00 	vmul.f64	d6, d6, d0
90010cc8:	ed8d 6b04 	vstr	d6, [sp, #16]
90010ccc:	ee27 0b00 	vmul.f64	d0, d7, d0
90010cd0:	b006      	add	sp, #24
90010cd2:	ecbd 8b0a 	vpop	{d8-d12}
90010cd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010cda:	f000 b86c 	b.w	90010db6 <__math_check_uflow>
90010cde:	ec43 2b10 	vmov	d0, r2, r3
90010ce2:	eea7 0b00 	vfma.f64	d0, d7, d0
90010ce6:	e628      	b.n	9001093a <pow+0xd2>
90010ce8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 90010d00 <pow+0x498>
90010cec:	e625      	b.n	9001093a <pow+0xd2>
90010cee:	bf00      	nop
90010cf0:	00000000 	.word	0x00000000
90010cf4:	7f000000 	.word	0x7f000000
90010cf8:	00000000 	.word	0x00000000
90010cfc:	00100000 	.word	0x00100000
	...
90010d08:	90014f78 	.word	0x90014f78

90010d0c <with_errno>:
90010d0c:	b513      	push	{r0, r1, r4, lr}
90010d0e:	4604      	mov	r4, r0
90010d10:	ed8d 0b00 	vstr	d0, [sp]
90010d14:	f000 f86c 	bl	90010df0 <__errno>
90010d18:	ed9d 0b00 	vldr	d0, [sp]
90010d1c:	6004      	str	r4, [r0, #0]
90010d1e:	b002      	add	sp, #8
90010d20:	bd10      	pop	{r4, pc}

90010d22 <xflow>:
90010d22:	b082      	sub	sp, #8
90010d24:	b158      	cbz	r0, 90010d3e <xflow+0x1c>
90010d26:	eeb1 7b40 	vneg.f64	d7, d0
90010d2a:	ed8d 7b00 	vstr	d7, [sp]
90010d2e:	ed9d 7b00 	vldr	d7, [sp]
90010d32:	2022      	movs	r0, #34	; 0x22
90010d34:	ee20 0b07 	vmul.f64	d0, d0, d7
90010d38:	b002      	add	sp, #8
90010d3a:	f7ff bfe7 	b.w	90010d0c <with_errno>
90010d3e:	eeb0 7b40 	vmov.f64	d7, d0
90010d42:	e7f2      	b.n	90010d2a <xflow+0x8>
90010d44:	0000      	movs	r0, r0
	...

90010d48 <__math_uflow>:
90010d48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 90010d50 <__math_uflow+0x8>
90010d4c:	f7ff bfe9 	b.w	90010d22 <xflow>
90010d50:	00000000 	.word	0x00000000
90010d54:	10000000 	.word	0x10000000

90010d58 <__math_oflow>:
90010d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 90010d60 <__math_oflow+0x8>
90010d5c:	f7ff bfe1 	b.w	90010d22 <xflow>
90010d60:	00000000 	.word	0x00000000
90010d64:	70000000 	.word	0x70000000

90010d68 <__math_divzero>:
90010d68:	b082      	sub	sp, #8
90010d6a:	2800      	cmp	r0, #0
90010d6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
90010d70:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
90010d74:	fe06 7b07 	vseleq.f64	d7, d6, d7
90010d78:	ed8d 7b00 	vstr	d7, [sp]
90010d7c:	ed9d 0b00 	vldr	d0, [sp]
90010d80:	ed9f 7b03 	vldr	d7, [pc, #12]	; 90010d90 <__math_divzero+0x28>
90010d84:	2022      	movs	r0, #34	; 0x22
90010d86:	ee80 0b07 	vdiv.f64	d0, d0, d7
90010d8a:	b002      	add	sp, #8
90010d8c:	f7ff bfbe 	b.w	90010d0c <with_errno>
	...

90010d98 <__math_invalid>:
90010d98:	eeb0 7b40 	vmov.f64	d7, d0
90010d9c:	eeb4 7b47 	vcmp.f64	d7, d7
90010da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90010da4:	ee30 6b40 	vsub.f64	d6, d0, d0
90010da8:	ee86 0b06 	vdiv.f64	d0, d6, d6
90010dac:	d602      	bvs.n	90010db4 <__math_invalid+0x1c>
90010dae:	2021      	movs	r0, #33	; 0x21
90010db0:	f7ff bfac 	b.w	90010d0c <with_errno>
90010db4:	4770      	bx	lr

90010db6 <__math_check_uflow>:
90010db6:	eeb5 0b40 	vcmp.f64	d0, #0.0
90010dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90010dbe:	d102      	bne.n	90010dc6 <__math_check_uflow+0x10>
90010dc0:	2022      	movs	r0, #34	; 0x22
90010dc2:	f7ff bfa3 	b.w	90010d0c <with_errno>
90010dc6:	4770      	bx	lr

90010dc8 <__math_check_oflow>:
90010dc8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 90010de8 <__math_check_oflow+0x20>
90010dcc:	eeb0 7bc0 	vabs.f64	d7, d0
90010dd0:	eeb4 7b46 	vcmp.f64	d7, d6
90010dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90010dd8:	dd02      	ble.n	90010de0 <__math_check_oflow+0x18>
90010dda:	2022      	movs	r0, #34	; 0x22
90010ddc:	f7ff bf96 	b.w	90010d0c <with_errno>
90010de0:	4770      	bx	lr
90010de2:	bf00      	nop
90010de4:	f3af 8000 	nop.w
90010de8:	ffffffff 	.word	0xffffffff
90010dec:	7fefffff 	.word	0x7fefffff

90010df0 <__errno>:
90010df0:	4b01      	ldr	r3, [pc, #4]	; (90010df8 <__errno+0x8>)
90010df2:	6818      	ldr	r0, [r3, #0]
90010df4:	4770      	bx	lr
90010df6:	bf00      	nop
90010df8:	24000040 	.word	0x24000040

90010dfc <std>:
90010dfc:	2300      	movs	r3, #0
90010dfe:	b510      	push	{r4, lr}
90010e00:	4604      	mov	r4, r0
90010e02:	e9c0 3300 	strd	r3, r3, [r0]
90010e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
90010e0a:	6083      	str	r3, [r0, #8]
90010e0c:	8181      	strh	r1, [r0, #12]
90010e0e:	6643      	str	r3, [r0, #100]	; 0x64
90010e10:	81c2      	strh	r2, [r0, #14]
90010e12:	6183      	str	r3, [r0, #24]
90010e14:	4619      	mov	r1, r3
90010e16:	2208      	movs	r2, #8
90010e18:	305c      	adds	r0, #92	; 0x5c
90010e1a:	f000 f91a 	bl	90011052 <memset>
90010e1e:	4b05      	ldr	r3, [pc, #20]	; (90010e34 <std+0x38>)
90010e20:	6263      	str	r3, [r4, #36]	; 0x24
90010e22:	4b05      	ldr	r3, [pc, #20]	; (90010e38 <std+0x3c>)
90010e24:	62a3      	str	r3, [r4, #40]	; 0x28
90010e26:	4b05      	ldr	r3, [pc, #20]	; (90010e3c <std+0x40>)
90010e28:	62e3      	str	r3, [r4, #44]	; 0x2c
90010e2a:	4b05      	ldr	r3, [pc, #20]	; (90010e40 <std+0x44>)
90010e2c:	6224      	str	r4, [r4, #32]
90010e2e:	6323      	str	r3, [r4, #48]	; 0x30
90010e30:	bd10      	pop	{r4, pc}
90010e32:	bf00      	nop
90010e34:	90011b79 	.word	0x90011b79
90010e38:	90011b9b 	.word	0x90011b9b
90010e3c:	90011bd3 	.word	0x90011bd3
90010e40:	90011bf7 	.word	0x90011bf7

90010e44 <_cleanup_r>:
90010e44:	4901      	ldr	r1, [pc, #4]	; (90010e4c <_cleanup_r+0x8>)
90010e46:	f000 b8af 	b.w	90010fa8 <_fwalk_reent>
90010e4a:	bf00      	nop
90010e4c:	90012949 	.word	0x90012949

90010e50 <__sfmoreglue>:
90010e50:	b570      	push	{r4, r5, r6, lr}
90010e52:	2268      	movs	r2, #104	; 0x68
90010e54:	1e4d      	subs	r5, r1, #1
90010e56:	4355      	muls	r5, r2
90010e58:	460e      	mov	r6, r1
90010e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
90010e5e:	f000 f921 	bl	900110a4 <_malloc_r>
90010e62:	4604      	mov	r4, r0
90010e64:	b140      	cbz	r0, 90010e78 <__sfmoreglue+0x28>
90010e66:	2100      	movs	r1, #0
90010e68:	e9c0 1600 	strd	r1, r6, [r0]
90010e6c:	300c      	adds	r0, #12
90010e6e:	60a0      	str	r0, [r4, #8]
90010e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
90010e74:	f000 f8ed 	bl	90011052 <memset>
90010e78:	4620      	mov	r0, r4
90010e7a:	bd70      	pop	{r4, r5, r6, pc}

90010e7c <__sfp_lock_acquire>:
90010e7c:	4801      	ldr	r0, [pc, #4]	; (90010e84 <__sfp_lock_acquire+0x8>)
90010e7e:	f000 b8d8 	b.w	90011032 <__retarget_lock_acquire_recursive>
90010e82:	bf00      	nop
90010e84:	24005839 	.word	0x24005839

90010e88 <__sfp_lock_release>:
90010e88:	4801      	ldr	r0, [pc, #4]	; (90010e90 <__sfp_lock_release+0x8>)
90010e8a:	f000 b8d3 	b.w	90011034 <__retarget_lock_release_recursive>
90010e8e:	bf00      	nop
90010e90:	24005839 	.word	0x24005839

90010e94 <__sinit_lock_acquire>:
90010e94:	4801      	ldr	r0, [pc, #4]	; (90010e9c <__sinit_lock_acquire+0x8>)
90010e96:	f000 b8cc 	b.w	90011032 <__retarget_lock_acquire_recursive>
90010e9a:	bf00      	nop
90010e9c:	2400583a 	.word	0x2400583a

90010ea0 <__sinit_lock_release>:
90010ea0:	4801      	ldr	r0, [pc, #4]	; (90010ea8 <__sinit_lock_release+0x8>)
90010ea2:	f000 b8c7 	b.w	90011034 <__retarget_lock_release_recursive>
90010ea6:	bf00      	nop
90010ea8:	2400583a 	.word	0x2400583a

90010eac <__sinit>:
90010eac:	b510      	push	{r4, lr}
90010eae:	4604      	mov	r4, r0
90010eb0:	f7ff fff0 	bl	90010e94 <__sinit_lock_acquire>
90010eb4:	69a3      	ldr	r3, [r4, #24]
90010eb6:	b11b      	cbz	r3, 90010ec0 <__sinit+0x14>
90010eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90010ebc:	f7ff bff0 	b.w	90010ea0 <__sinit_lock_release>
90010ec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90010ec4:	6523      	str	r3, [r4, #80]	; 0x50
90010ec6:	4b13      	ldr	r3, [pc, #76]	; (90010f14 <__sinit+0x68>)
90010ec8:	4a13      	ldr	r2, [pc, #76]	; (90010f18 <__sinit+0x6c>)
90010eca:	681b      	ldr	r3, [r3, #0]
90010ecc:	62a2      	str	r2, [r4, #40]	; 0x28
90010ece:	42a3      	cmp	r3, r4
90010ed0:	bf04      	itt	eq
90010ed2:	2301      	moveq	r3, #1
90010ed4:	61a3      	streq	r3, [r4, #24]
90010ed6:	4620      	mov	r0, r4
90010ed8:	f000 f820 	bl	90010f1c <__sfp>
90010edc:	6060      	str	r0, [r4, #4]
90010ede:	4620      	mov	r0, r4
90010ee0:	f000 f81c 	bl	90010f1c <__sfp>
90010ee4:	60a0      	str	r0, [r4, #8]
90010ee6:	4620      	mov	r0, r4
90010ee8:	f000 f818 	bl	90010f1c <__sfp>
90010eec:	2200      	movs	r2, #0
90010eee:	60e0      	str	r0, [r4, #12]
90010ef0:	2104      	movs	r1, #4
90010ef2:	6860      	ldr	r0, [r4, #4]
90010ef4:	f7ff ff82 	bl	90010dfc <std>
90010ef8:	68a0      	ldr	r0, [r4, #8]
90010efa:	2201      	movs	r2, #1
90010efc:	2109      	movs	r1, #9
90010efe:	f7ff ff7d 	bl	90010dfc <std>
90010f02:	68e0      	ldr	r0, [r4, #12]
90010f04:	2202      	movs	r2, #2
90010f06:	2112      	movs	r1, #18
90010f08:	f7ff ff78 	bl	90010dfc <std>
90010f0c:	2301      	movs	r3, #1
90010f0e:	61a3      	str	r3, [r4, #24]
90010f10:	e7d2      	b.n	90010eb8 <__sinit+0xc>
90010f12:	bf00      	nop
90010f14:	90015848 	.word	0x90015848
90010f18:	90010e45 	.word	0x90010e45

90010f1c <__sfp>:
90010f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90010f1e:	4607      	mov	r7, r0
90010f20:	f7ff ffac 	bl	90010e7c <__sfp_lock_acquire>
90010f24:	4b1e      	ldr	r3, [pc, #120]	; (90010fa0 <__sfp+0x84>)
90010f26:	681e      	ldr	r6, [r3, #0]
90010f28:	69b3      	ldr	r3, [r6, #24]
90010f2a:	b913      	cbnz	r3, 90010f32 <__sfp+0x16>
90010f2c:	4630      	mov	r0, r6
90010f2e:	f7ff ffbd 	bl	90010eac <__sinit>
90010f32:	3648      	adds	r6, #72	; 0x48
90010f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90010f38:	3b01      	subs	r3, #1
90010f3a:	d503      	bpl.n	90010f44 <__sfp+0x28>
90010f3c:	6833      	ldr	r3, [r6, #0]
90010f3e:	b30b      	cbz	r3, 90010f84 <__sfp+0x68>
90010f40:	6836      	ldr	r6, [r6, #0]
90010f42:	e7f7      	b.n	90010f34 <__sfp+0x18>
90010f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90010f48:	b9d5      	cbnz	r5, 90010f80 <__sfp+0x64>
90010f4a:	4b16      	ldr	r3, [pc, #88]	; (90010fa4 <__sfp+0x88>)
90010f4c:	60e3      	str	r3, [r4, #12]
90010f4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
90010f52:	6665      	str	r5, [r4, #100]	; 0x64
90010f54:	f000 f86c 	bl	90011030 <__retarget_lock_init_recursive>
90010f58:	f7ff ff96 	bl	90010e88 <__sfp_lock_release>
90010f5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
90010f60:	e9c4 5504 	strd	r5, r5, [r4, #16]
90010f64:	6025      	str	r5, [r4, #0]
90010f66:	61a5      	str	r5, [r4, #24]
90010f68:	2208      	movs	r2, #8
90010f6a:	4629      	mov	r1, r5
90010f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90010f70:	f000 f86f 	bl	90011052 <memset>
90010f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90010f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90010f7c:	4620      	mov	r0, r4
90010f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90010f80:	3468      	adds	r4, #104	; 0x68
90010f82:	e7d9      	b.n	90010f38 <__sfp+0x1c>
90010f84:	2104      	movs	r1, #4
90010f86:	4638      	mov	r0, r7
90010f88:	f7ff ff62 	bl	90010e50 <__sfmoreglue>
90010f8c:	4604      	mov	r4, r0
90010f8e:	6030      	str	r0, [r6, #0]
90010f90:	2800      	cmp	r0, #0
90010f92:	d1d5      	bne.n	90010f40 <__sfp+0x24>
90010f94:	f7ff ff78 	bl	90010e88 <__sfp_lock_release>
90010f98:	230c      	movs	r3, #12
90010f9a:	603b      	str	r3, [r7, #0]
90010f9c:	e7ee      	b.n	90010f7c <__sfp+0x60>
90010f9e:	bf00      	nop
90010fa0:	90015848 	.word	0x90015848
90010fa4:	ffff0001 	.word	0xffff0001

90010fa8 <_fwalk_reent>:
90010fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90010fac:	4606      	mov	r6, r0
90010fae:	4688      	mov	r8, r1
90010fb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
90010fb4:	2700      	movs	r7, #0
90010fb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90010fba:	f1b9 0901 	subs.w	r9, r9, #1
90010fbe:	d505      	bpl.n	90010fcc <_fwalk_reent+0x24>
90010fc0:	6824      	ldr	r4, [r4, #0]
90010fc2:	2c00      	cmp	r4, #0
90010fc4:	d1f7      	bne.n	90010fb6 <_fwalk_reent+0xe>
90010fc6:	4638      	mov	r0, r7
90010fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90010fcc:	89ab      	ldrh	r3, [r5, #12]
90010fce:	2b01      	cmp	r3, #1
90010fd0:	d907      	bls.n	90010fe2 <_fwalk_reent+0x3a>
90010fd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90010fd6:	3301      	adds	r3, #1
90010fd8:	d003      	beq.n	90010fe2 <_fwalk_reent+0x3a>
90010fda:	4629      	mov	r1, r5
90010fdc:	4630      	mov	r0, r6
90010fde:	47c0      	blx	r8
90010fe0:	4307      	orrs	r7, r0
90010fe2:	3568      	adds	r5, #104	; 0x68
90010fe4:	e7e9      	b.n	90010fba <_fwalk_reent+0x12>
	...

90010fe8 <__libc_init_array>:
90010fe8:	b570      	push	{r4, r5, r6, lr}
90010fea:	4d0d      	ldr	r5, [pc, #52]	; (90011020 <__libc_init_array+0x38>)
90010fec:	4c0d      	ldr	r4, [pc, #52]	; (90011024 <__libc_init_array+0x3c>)
90010fee:	1b64      	subs	r4, r4, r5
90010ff0:	10a4      	asrs	r4, r4, #2
90010ff2:	2600      	movs	r6, #0
90010ff4:	42a6      	cmp	r6, r4
90010ff6:	d109      	bne.n	9001100c <__libc_init_array+0x24>
90010ff8:	4d0b      	ldr	r5, [pc, #44]	; (90011028 <__libc_init_array+0x40>)
90010ffa:	4c0c      	ldr	r4, [pc, #48]	; (9001102c <__libc_init_array+0x44>)
90010ffc:	f002 fdec 	bl	90013bd8 <_init>
90011000:	1b64      	subs	r4, r4, r5
90011002:	10a4      	asrs	r4, r4, #2
90011004:	2600      	movs	r6, #0
90011006:	42a6      	cmp	r6, r4
90011008:	d105      	bne.n	90011016 <__libc_init_array+0x2e>
9001100a:	bd70      	pop	{r4, r5, r6, pc}
9001100c:	f855 3b04 	ldr.w	r3, [r5], #4
90011010:	4798      	blx	r3
90011012:	3601      	adds	r6, #1
90011014:	e7ee      	b.n	90010ff4 <__libc_init_array+0xc>
90011016:	f855 3b04 	ldr.w	r3, [r5], #4
9001101a:	4798      	blx	r3
9001101c:	3601      	adds	r6, #1
9001101e:	e7f2      	b.n	90011006 <__libc_init_array+0x1e>
90011020:	90015bcc 	.word	0x90015bcc
90011024:	90015bcc 	.word	0x90015bcc
90011028:	90015bcc 	.word	0x90015bcc
9001102c:	90015bd0 	.word	0x90015bd0

90011030 <__retarget_lock_init_recursive>:
90011030:	4770      	bx	lr

90011032 <__retarget_lock_acquire_recursive>:
90011032:	4770      	bx	lr

90011034 <__retarget_lock_release_recursive>:
90011034:	4770      	bx	lr

90011036 <memcpy>:
90011036:	440a      	add	r2, r1
90011038:	4291      	cmp	r1, r2
9001103a:	f100 33ff 	add.w	r3, r0, #4294967295
9001103e:	d100      	bne.n	90011042 <memcpy+0xc>
90011040:	4770      	bx	lr
90011042:	b510      	push	{r4, lr}
90011044:	f811 4b01 	ldrb.w	r4, [r1], #1
90011048:	f803 4f01 	strb.w	r4, [r3, #1]!
9001104c:	4291      	cmp	r1, r2
9001104e:	d1f9      	bne.n	90011044 <memcpy+0xe>
90011050:	bd10      	pop	{r4, pc}

90011052 <memset>:
90011052:	4402      	add	r2, r0
90011054:	4603      	mov	r3, r0
90011056:	4293      	cmp	r3, r2
90011058:	d100      	bne.n	9001105c <memset+0xa>
9001105a:	4770      	bx	lr
9001105c:	f803 1b01 	strb.w	r1, [r3], #1
90011060:	e7f9      	b.n	90011056 <memset+0x4>
	...

90011064 <sbrk_aligned>:
90011064:	b570      	push	{r4, r5, r6, lr}
90011066:	4e0e      	ldr	r6, [pc, #56]	; (900110a0 <sbrk_aligned+0x3c>)
90011068:	460c      	mov	r4, r1
9001106a:	6831      	ldr	r1, [r6, #0]
9001106c:	4605      	mov	r5, r0
9001106e:	b911      	cbnz	r1, 90011076 <sbrk_aligned+0x12>
90011070:	f000 fd52 	bl	90011b18 <_sbrk_r>
90011074:	6030      	str	r0, [r6, #0]
90011076:	4621      	mov	r1, r4
90011078:	4628      	mov	r0, r5
9001107a:	f000 fd4d 	bl	90011b18 <_sbrk_r>
9001107e:	1c43      	adds	r3, r0, #1
90011080:	d00a      	beq.n	90011098 <sbrk_aligned+0x34>
90011082:	1cc4      	adds	r4, r0, #3
90011084:	f024 0403 	bic.w	r4, r4, #3
90011088:	42a0      	cmp	r0, r4
9001108a:	d007      	beq.n	9001109c <sbrk_aligned+0x38>
9001108c:	1a21      	subs	r1, r4, r0
9001108e:	4628      	mov	r0, r5
90011090:	f000 fd42 	bl	90011b18 <_sbrk_r>
90011094:	3001      	adds	r0, #1
90011096:	d101      	bne.n	9001109c <sbrk_aligned+0x38>
90011098:	f04f 34ff 	mov.w	r4, #4294967295
9001109c:	4620      	mov	r0, r4
9001109e:	bd70      	pop	{r4, r5, r6, pc}
900110a0:	24005840 	.word	0x24005840

900110a4 <_malloc_r>:
900110a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900110a8:	1ccd      	adds	r5, r1, #3
900110aa:	f025 0503 	bic.w	r5, r5, #3
900110ae:	3508      	adds	r5, #8
900110b0:	2d0c      	cmp	r5, #12
900110b2:	bf38      	it	cc
900110b4:	250c      	movcc	r5, #12
900110b6:	2d00      	cmp	r5, #0
900110b8:	4607      	mov	r7, r0
900110ba:	db01      	blt.n	900110c0 <_malloc_r+0x1c>
900110bc:	42a9      	cmp	r1, r5
900110be:	d905      	bls.n	900110cc <_malloc_r+0x28>
900110c0:	230c      	movs	r3, #12
900110c2:	603b      	str	r3, [r7, #0]
900110c4:	2600      	movs	r6, #0
900110c6:	4630      	mov	r0, r6
900110c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900110cc:	4e2e      	ldr	r6, [pc, #184]	; (90011188 <_malloc_r+0xe4>)
900110ce:	f001 fc95 	bl	900129fc <__malloc_lock>
900110d2:	6833      	ldr	r3, [r6, #0]
900110d4:	461c      	mov	r4, r3
900110d6:	bb34      	cbnz	r4, 90011126 <_malloc_r+0x82>
900110d8:	4629      	mov	r1, r5
900110da:	4638      	mov	r0, r7
900110dc:	f7ff ffc2 	bl	90011064 <sbrk_aligned>
900110e0:	1c43      	adds	r3, r0, #1
900110e2:	4604      	mov	r4, r0
900110e4:	d14d      	bne.n	90011182 <_malloc_r+0xde>
900110e6:	6834      	ldr	r4, [r6, #0]
900110e8:	4626      	mov	r6, r4
900110ea:	2e00      	cmp	r6, #0
900110ec:	d140      	bne.n	90011170 <_malloc_r+0xcc>
900110ee:	6823      	ldr	r3, [r4, #0]
900110f0:	4631      	mov	r1, r6
900110f2:	4638      	mov	r0, r7
900110f4:	eb04 0803 	add.w	r8, r4, r3
900110f8:	f000 fd0e 	bl	90011b18 <_sbrk_r>
900110fc:	4580      	cmp	r8, r0
900110fe:	d13a      	bne.n	90011176 <_malloc_r+0xd2>
90011100:	6821      	ldr	r1, [r4, #0]
90011102:	3503      	adds	r5, #3
90011104:	1a6d      	subs	r5, r5, r1
90011106:	f025 0503 	bic.w	r5, r5, #3
9001110a:	3508      	adds	r5, #8
9001110c:	2d0c      	cmp	r5, #12
9001110e:	bf38      	it	cc
90011110:	250c      	movcc	r5, #12
90011112:	4629      	mov	r1, r5
90011114:	4638      	mov	r0, r7
90011116:	f7ff ffa5 	bl	90011064 <sbrk_aligned>
9001111a:	3001      	adds	r0, #1
9001111c:	d02b      	beq.n	90011176 <_malloc_r+0xd2>
9001111e:	6823      	ldr	r3, [r4, #0]
90011120:	442b      	add	r3, r5
90011122:	6023      	str	r3, [r4, #0]
90011124:	e00e      	b.n	90011144 <_malloc_r+0xa0>
90011126:	6822      	ldr	r2, [r4, #0]
90011128:	1b52      	subs	r2, r2, r5
9001112a:	d41e      	bmi.n	9001116a <_malloc_r+0xc6>
9001112c:	2a0b      	cmp	r2, #11
9001112e:	d916      	bls.n	9001115e <_malloc_r+0xba>
90011130:	1961      	adds	r1, r4, r5
90011132:	42a3      	cmp	r3, r4
90011134:	6025      	str	r5, [r4, #0]
90011136:	bf18      	it	ne
90011138:	6059      	strne	r1, [r3, #4]
9001113a:	6863      	ldr	r3, [r4, #4]
9001113c:	bf08      	it	eq
9001113e:	6031      	streq	r1, [r6, #0]
90011140:	5162      	str	r2, [r4, r5]
90011142:	604b      	str	r3, [r1, #4]
90011144:	4638      	mov	r0, r7
90011146:	f104 060b 	add.w	r6, r4, #11
9001114a:	f001 fc5d 	bl	90012a08 <__malloc_unlock>
9001114e:	f026 0607 	bic.w	r6, r6, #7
90011152:	1d23      	adds	r3, r4, #4
90011154:	1af2      	subs	r2, r6, r3
90011156:	d0b6      	beq.n	900110c6 <_malloc_r+0x22>
90011158:	1b9b      	subs	r3, r3, r6
9001115a:	50a3      	str	r3, [r4, r2]
9001115c:	e7b3      	b.n	900110c6 <_malloc_r+0x22>
9001115e:	6862      	ldr	r2, [r4, #4]
90011160:	42a3      	cmp	r3, r4
90011162:	bf0c      	ite	eq
90011164:	6032      	streq	r2, [r6, #0]
90011166:	605a      	strne	r2, [r3, #4]
90011168:	e7ec      	b.n	90011144 <_malloc_r+0xa0>
9001116a:	4623      	mov	r3, r4
9001116c:	6864      	ldr	r4, [r4, #4]
9001116e:	e7b2      	b.n	900110d6 <_malloc_r+0x32>
90011170:	4634      	mov	r4, r6
90011172:	6876      	ldr	r6, [r6, #4]
90011174:	e7b9      	b.n	900110ea <_malloc_r+0x46>
90011176:	230c      	movs	r3, #12
90011178:	603b      	str	r3, [r7, #0]
9001117a:	4638      	mov	r0, r7
9001117c:	f001 fc44 	bl	90012a08 <__malloc_unlock>
90011180:	e7a1      	b.n	900110c6 <_malloc_r+0x22>
90011182:	6025      	str	r5, [r4, #0]
90011184:	e7de      	b.n	90011144 <_malloc_r+0xa0>
90011186:	bf00      	nop
90011188:	2400583c 	.word	0x2400583c

9001118c <__cvt>:
9001118c:	b5f0      	push	{r4, r5, r6, r7, lr}
9001118e:	ed2d 8b02 	vpush	{d8}
90011192:	eeb0 8b40 	vmov.f64	d8, d0
90011196:	b085      	sub	sp, #20
90011198:	4617      	mov	r7, r2
9001119a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001119c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001119e:	ee18 2a90 	vmov	r2, s17
900111a2:	f025 0520 	bic.w	r5, r5, #32
900111a6:	2a00      	cmp	r2, #0
900111a8:	bfb6      	itet	lt
900111aa:	222d      	movlt	r2, #45	; 0x2d
900111ac:	2200      	movge	r2, #0
900111ae:	eeb1 8b40 	vneglt.f64	d8, d0
900111b2:	2d46      	cmp	r5, #70	; 0x46
900111b4:	460c      	mov	r4, r1
900111b6:	701a      	strb	r2, [r3, #0]
900111b8:	d004      	beq.n	900111c4 <__cvt+0x38>
900111ba:	2d45      	cmp	r5, #69	; 0x45
900111bc:	d100      	bne.n	900111c0 <__cvt+0x34>
900111be:	3401      	adds	r4, #1
900111c0:	2102      	movs	r1, #2
900111c2:	e000      	b.n	900111c6 <__cvt+0x3a>
900111c4:	2103      	movs	r1, #3
900111c6:	ab03      	add	r3, sp, #12
900111c8:	9301      	str	r3, [sp, #4]
900111ca:	ab02      	add	r3, sp, #8
900111cc:	9300      	str	r3, [sp, #0]
900111ce:	4622      	mov	r2, r4
900111d0:	4633      	mov	r3, r6
900111d2:	eeb0 0b48 	vmov.f64	d0, d8
900111d6:	f000 fdc3 	bl	90011d60 <_dtoa_r>
900111da:	2d47      	cmp	r5, #71	; 0x47
900111dc:	d101      	bne.n	900111e2 <__cvt+0x56>
900111de:	07fb      	lsls	r3, r7, #31
900111e0:	d51a      	bpl.n	90011218 <__cvt+0x8c>
900111e2:	2d46      	cmp	r5, #70	; 0x46
900111e4:	eb00 0204 	add.w	r2, r0, r4
900111e8:	d10c      	bne.n	90011204 <__cvt+0x78>
900111ea:	7803      	ldrb	r3, [r0, #0]
900111ec:	2b30      	cmp	r3, #48	; 0x30
900111ee:	d107      	bne.n	90011200 <__cvt+0x74>
900111f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
900111f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900111f8:	bf1c      	itt	ne
900111fa:	f1c4 0401 	rsbne	r4, r4, #1
900111fe:	6034      	strne	r4, [r6, #0]
90011200:	6833      	ldr	r3, [r6, #0]
90011202:	441a      	add	r2, r3
90011204:	eeb5 8b40 	vcmp.f64	d8, #0.0
90011208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001120c:	bf08      	it	eq
9001120e:	9203      	streq	r2, [sp, #12]
90011210:	2130      	movs	r1, #48	; 0x30
90011212:	9b03      	ldr	r3, [sp, #12]
90011214:	4293      	cmp	r3, r2
90011216:	d307      	bcc.n	90011228 <__cvt+0x9c>
90011218:	9b03      	ldr	r3, [sp, #12]
9001121a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001121c:	1a1b      	subs	r3, r3, r0
9001121e:	6013      	str	r3, [r2, #0]
90011220:	b005      	add	sp, #20
90011222:	ecbd 8b02 	vpop	{d8}
90011226:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011228:	1c5c      	adds	r4, r3, #1
9001122a:	9403      	str	r4, [sp, #12]
9001122c:	7019      	strb	r1, [r3, #0]
9001122e:	e7f0      	b.n	90011212 <__cvt+0x86>

90011230 <__exponent>:
90011230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90011232:	4603      	mov	r3, r0
90011234:	2900      	cmp	r1, #0
90011236:	bfb8      	it	lt
90011238:	4249      	neglt	r1, r1
9001123a:	f803 2b02 	strb.w	r2, [r3], #2
9001123e:	bfb4      	ite	lt
90011240:	222d      	movlt	r2, #45	; 0x2d
90011242:	222b      	movge	r2, #43	; 0x2b
90011244:	2909      	cmp	r1, #9
90011246:	7042      	strb	r2, [r0, #1]
90011248:	dd2a      	ble.n	900112a0 <__exponent+0x70>
9001124a:	f10d 0407 	add.w	r4, sp, #7
9001124e:	46a4      	mov	ip, r4
90011250:	270a      	movs	r7, #10
90011252:	46a6      	mov	lr, r4
90011254:	460a      	mov	r2, r1
90011256:	fb91 f6f7 	sdiv	r6, r1, r7
9001125a:	fb07 1516 	mls	r5, r7, r6, r1
9001125e:	3530      	adds	r5, #48	; 0x30
90011260:	2a63      	cmp	r2, #99	; 0x63
90011262:	f104 34ff 	add.w	r4, r4, #4294967295
90011266:	f80e 5c01 	strb.w	r5, [lr, #-1]
9001126a:	4631      	mov	r1, r6
9001126c:	dcf1      	bgt.n	90011252 <__exponent+0x22>
9001126e:	3130      	adds	r1, #48	; 0x30
90011270:	f1ae 0502 	sub.w	r5, lr, #2
90011274:	f804 1c01 	strb.w	r1, [r4, #-1]
90011278:	1c44      	adds	r4, r0, #1
9001127a:	4629      	mov	r1, r5
9001127c:	4561      	cmp	r1, ip
9001127e:	d30a      	bcc.n	90011296 <__exponent+0x66>
90011280:	f10d 0209 	add.w	r2, sp, #9
90011284:	eba2 020e 	sub.w	r2, r2, lr
90011288:	4565      	cmp	r5, ip
9001128a:	bf88      	it	hi
9001128c:	2200      	movhi	r2, #0
9001128e:	4413      	add	r3, r2
90011290:	1a18      	subs	r0, r3, r0
90011292:	b003      	add	sp, #12
90011294:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011296:	f811 2b01 	ldrb.w	r2, [r1], #1
9001129a:	f804 2f01 	strb.w	r2, [r4, #1]!
9001129e:	e7ed      	b.n	9001127c <__exponent+0x4c>
900112a0:	2330      	movs	r3, #48	; 0x30
900112a2:	3130      	adds	r1, #48	; 0x30
900112a4:	7083      	strb	r3, [r0, #2]
900112a6:	70c1      	strb	r1, [r0, #3]
900112a8:	1d03      	adds	r3, r0, #4
900112aa:	e7f1      	b.n	90011290 <__exponent+0x60>
900112ac:	0000      	movs	r0, r0
	...

900112b0 <_printf_float>:
900112b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900112b4:	b08b      	sub	sp, #44	; 0x2c
900112b6:	460c      	mov	r4, r1
900112b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
900112bc:	4616      	mov	r6, r2
900112be:	461f      	mov	r7, r3
900112c0:	4605      	mov	r5, r0
900112c2:	f001 fb7d 	bl	900129c0 <_localeconv_r>
900112c6:	f8d0 b000 	ldr.w	fp, [r0]
900112ca:	4658      	mov	r0, fp
900112cc:	f7ef f808 	bl	900002e0 <strlen>
900112d0:	2300      	movs	r3, #0
900112d2:	9308      	str	r3, [sp, #32]
900112d4:	f8d8 3000 	ldr.w	r3, [r8]
900112d8:	f894 9018 	ldrb.w	r9, [r4, #24]
900112dc:	6822      	ldr	r2, [r4, #0]
900112de:	3307      	adds	r3, #7
900112e0:	f023 0307 	bic.w	r3, r3, #7
900112e4:	f103 0108 	add.w	r1, r3, #8
900112e8:	f8c8 1000 	str.w	r1, [r8]
900112ec:	4682      	mov	sl, r0
900112ee:	e9d3 0100 	ldrd	r0, r1, [r3]
900112f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
900112f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 90011558 <_printf_float+0x2a8>
900112fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
900112fe:	eeb0 6bc0 	vabs.f64	d6, d0
90011302:	eeb4 6b47 	vcmp.f64	d6, d7
90011306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001130a:	dd24      	ble.n	90011356 <_printf_float+0xa6>
9001130c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
90011310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011314:	d502      	bpl.n	9001131c <_printf_float+0x6c>
90011316:	232d      	movs	r3, #45	; 0x2d
90011318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9001131c:	4b90      	ldr	r3, [pc, #576]	; (90011560 <_printf_float+0x2b0>)
9001131e:	4891      	ldr	r0, [pc, #580]	; (90011564 <_printf_float+0x2b4>)
90011320:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
90011324:	bf94      	ite	ls
90011326:	4698      	movls	r8, r3
90011328:	4680      	movhi	r8, r0
9001132a:	2303      	movs	r3, #3
9001132c:	6123      	str	r3, [r4, #16]
9001132e:	f022 0204 	bic.w	r2, r2, #4
90011332:	2300      	movs	r3, #0
90011334:	6022      	str	r2, [r4, #0]
90011336:	9304      	str	r3, [sp, #16]
90011338:	9700      	str	r7, [sp, #0]
9001133a:	4633      	mov	r3, r6
9001133c:	aa09      	add	r2, sp, #36	; 0x24
9001133e:	4621      	mov	r1, r4
90011340:	4628      	mov	r0, r5
90011342:	f000 f9d3 	bl	900116ec <_printf_common>
90011346:	3001      	adds	r0, #1
90011348:	f040 808a 	bne.w	90011460 <_printf_float+0x1b0>
9001134c:	f04f 30ff 	mov.w	r0, #4294967295
90011350:	b00b      	add	sp, #44	; 0x2c
90011352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011356:	eeb4 0b40 	vcmp.f64	d0, d0
9001135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001135e:	d709      	bvc.n	90011374 <_printf_float+0xc4>
90011360:	ee10 3a90 	vmov	r3, s1
90011364:	2b00      	cmp	r3, #0
90011366:	bfbc      	itt	lt
90011368:	232d      	movlt	r3, #45	; 0x2d
9001136a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
9001136e:	487e      	ldr	r0, [pc, #504]	; (90011568 <_printf_float+0x2b8>)
90011370:	4b7e      	ldr	r3, [pc, #504]	; (9001156c <_printf_float+0x2bc>)
90011372:	e7d5      	b.n	90011320 <_printf_float+0x70>
90011374:	6863      	ldr	r3, [r4, #4]
90011376:	f009 01df 	and.w	r1, r9, #223	; 0xdf
9001137a:	9104      	str	r1, [sp, #16]
9001137c:	1c59      	adds	r1, r3, #1
9001137e:	d13c      	bne.n	900113fa <_printf_float+0x14a>
90011380:	2306      	movs	r3, #6
90011382:	6063      	str	r3, [r4, #4]
90011384:	2300      	movs	r3, #0
90011386:	9303      	str	r3, [sp, #12]
90011388:	ab08      	add	r3, sp, #32
9001138a:	e9cd 9301 	strd	r9, r3, [sp, #4]
9001138e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90011392:	ab07      	add	r3, sp, #28
90011394:	6861      	ldr	r1, [r4, #4]
90011396:	9300      	str	r3, [sp, #0]
90011398:	6022      	str	r2, [r4, #0]
9001139a:	f10d 031b 	add.w	r3, sp, #27
9001139e:	4628      	mov	r0, r5
900113a0:	f7ff fef4 	bl	9001118c <__cvt>
900113a4:	9b04      	ldr	r3, [sp, #16]
900113a6:	9907      	ldr	r1, [sp, #28]
900113a8:	2b47      	cmp	r3, #71	; 0x47
900113aa:	4680      	mov	r8, r0
900113ac:	d108      	bne.n	900113c0 <_printf_float+0x110>
900113ae:	1cc8      	adds	r0, r1, #3
900113b0:	db02      	blt.n	900113b8 <_printf_float+0x108>
900113b2:	6863      	ldr	r3, [r4, #4]
900113b4:	4299      	cmp	r1, r3
900113b6:	dd41      	ble.n	9001143c <_printf_float+0x18c>
900113b8:	f1a9 0902 	sub.w	r9, r9, #2
900113bc:	fa5f f989 	uxtb.w	r9, r9
900113c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
900113c4:	d820      	bhi.n	90011408 <_printf_float+0x158>
900113c6:	3901      	subs	r1, #1
900113c8:	464a      	mov	r2, r9
900113ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
900113ce:	9107      	str	r1, [sp, #28]
900113d0:	f7ff ff2e 	bl	90011230 <__exponent>
900113d4:	9a08      	ldr	r2, [sp, #32]
900113d6:	9004      	str	r0, [sp, #16]
900113d8:	1813      	adds	r3, r2, r0
900113da:	2a01      	cmp	r2, #1
900113dc:	6123      	str	r3, [r4, #16]
900113de:	dc02      	bgt.n	900113e6 <_printf_float+0x136>
900113e0:	6822      	ldr	r2, [r4, #0]
900113e2:	07d2      	lsls	r2, r2, #31
900113e4:	d501      	bpl.n	900113ea <_printf_float+0x13a>
900113e6:	3301      	adds	r3, #1
900113e8:	6123      	str	r3, [r4, #16]
900113ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
900113ee:	2b00      	cmp	r3, #0
900113f0:	d0a2      	beq.n	90011338 <_printf_float+0x88>
900113f2:	232d      	movs	r3, #45	; 0x2d
900113f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900113f8:	e79e      	b.n	90011338 <_printf_float+0x88>
900113fa:	9904      	ldr	r1, [sp, #16]
900113fc:	2947      	cmp	r1, #71	; 0x47
900113fe:	d1c1      	bne.n	90011384 <_printf_float+0xd4>
90011400:	2b00      	cmp	r3, #0
90011402:	d1bf      	bne.n	90011384 <_printf_float+0xd4>
90011404:	2301      	movs	r3, #1
90011406:	e7bc      	b.n	90011382 <_printf_float+0xd2>
90011408:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
9001140c:	d118      	bne.n	90011440 <_printf_float+0x190>
9001140e:	2900      	cmp	r1, #0
90011410:	6863      	ldr	r3, [r4, #4]
90011412:	dd0b      	ble.n	9001142c <_printf_float+0x17c>
90011414:	6121      	str	r1, [r4, #16]
90011416:	b913      	cbnz	r3, 9001141e <_printf_float+0x16e>
90011418:	6822      	ldr	r2, [r4, #0]
9001141a:	07d0      	lsls	r0, r2, #31
9001141c:	d502      	bpl.n	90011424 <_printf_float+0x174>
9001141e:	3301      	adds	r3, #1
90011420:	440b      	add	r3, r1
90011422:	6123      	str	r3, [r4, #16]
90011424:	2300      	movs	r3, #0
90011426:	65a1      	str	r1, [r4, #88]	; 0x58
90011428:	9304      	str	r3, [sp, #16]
9001142a:	e7de      	b.n	900113ea <_printf_float+0x13a>
9001142c:	b913      	cbnz	r3, 90011434 <_printf_float+0x184>
9001142e:	6822      	ldr	r2, [r4, #0]
90011430:	07d2      	lsls	r2, r2, #31
90011432:	d501      	bpl.n	90011438 <_printf_float+0x188>
90011434:	3302      	adds	r3, #2
90011436:	e7f4      	b.n	90011422 <_printf_float+0x172>
90011438:	2301      	movs	r3, #1
9001143a:	e7f2      	b.n	90011422 <_printf_float+0x172>
9001143c:	f04f 0967 	mov.w	r9, #103	; 0x67
90011440:	9b08      	ldr	r3, [sp, #32]
90011442:	4299      	cmp	r1, r3
90011444:	db05      	blt.n	90011452 <_printf_float+0x1a2>
90011446:	6823      	ldr	r3, [r4, #0]
90011448:	6121      	str	r1, [r4, #16]
9001144a:	07d8      	lsls	r0, r3, #31
9001144c:	d5ea      	bpl.n	90011424 <_printf_float+0x174>
9001144e:	1c4b      	adds	r3, r1, #1
90011450:	e7e7      	b.n	90011422 <_printf_float+0x172>
90011452:	2900      	cmp	r1, #0
90011454:	bfd4      	ite	le
90011456:	f1c1 0202 	rsble	r2, r1, #2
9001145a:	2201      	movgt	r2, #1
9001145c:	4413      	add	r3, r2
9001145e:	e7e0      	b.n	90011422 <_printf_float+0x172>
90011460:	6823      	ldr	r3, [r4, #0]
90011462:	055a      	lsls	r2, r3, #21
90011464:	d407      	bmi.n	90011476 <_printf_float+0x1c6>
90011466:	6923      	ldr	r3, [r4, #16]
90011468:	4642      	mov	r2, r8
9001146a:	4631      	mov	r1, r6
9001146c:	4628      	mov	r0, r5
9001146e:	47b8      	blx	r7
90011470:	3001      	adds	r0, #1
90011472:	d12a      	bne.n	900114ca <_printf_float+0x21a>
90011474:	e76a      	b.n	9001134c <_printf_float+0x9c>
90011476:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
9001147a:	f240 80e2 	bls.w	90011642 <_printf_float+0x392>
9001147e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
90011482:	eeb5 7b40 	vcmp.f64	d7, #0.0
90011486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001148a:	d133      	bne.n	900114f4 <_printf_float+0x244>
9001148c:	4a38      	ldr	r2, [pc, #224]	; (90011570 <_printf_float+0x2c0>)
9001148e:	2301      	movs	r3, #1
90011490:	4631      	mov	r1, r6
90011492:	4628      	mov	r0, r5
90011494:	47b8      	blx	r7
90011496:	3001      	adds	r0, #1
90011498:	f43f af58 	beq.w	9001134c <_printf_float+0x9c>
9001149c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
900114a0:	429a      	cmp	r2, r3
900114a2:	db02      	blt.n	900114aa <_printf_float+0x1fa>
900114a4:	6823      	ldr	r3, [r4, #0]
900114a6:	07d8      	lsls	r0, r3, #31
900114a8:	d50f      	bpl.n	900114ca <_printf_float+0x21a>
900114aa:	4653      	mov	r3, sl
900114ac:	465a      	mov	r2, fp
900114ae:	4631      	mov	r1, r6
900114b0:	4628      	mov	r0, r5
900114b2:	47b8      	blx	r7
900114b4:	3001      	adds	r0, #1
900114b6:	f43f af49 	beq.w	9001134c <_printf_float+0x9c>
900114ba:	f04f 0800 	mov.w	r8, #0
900114be:	f104 091a 	add.w	r9, r4, #26
900114c2:	9b08      	ldr	r3, [sp, #32]
900114c4:	3b01      	subs	r3, #1
900114c6:	4543      	cmp	r3, r8
900114c8:	dc09      	bgt.n	900114de <_printf_float+0x22e>
900114ca:	6823      	ldr	r3, [r4, #0]
900114cc:	079b      	lsls	r3, r3, #30
900114ce:	f100 8108 	bmi.w	900116e2 <_printf_float+0x432>
900114d2:	68e0      	ldr	r0, [r4, #12]
900114d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900114d6:	4298      	cmp	r0, r3
900114d8:	bfb8      	it	lt
900114da:	4618      	movlt	r0, r3
900114dc:	e738      	b.n	90011350 <_printf_float+0xa0>
900114de:	2301      	movs	r3, #1
900114e0:	464a      	mov	r2, r9
900114e2:	4631      	mov	r1, r6
900114e4:	4628      	mov	r0, r5
900114e6:	47b8      	blx	r7
900114e8:	3001      	adds	r0, #1
900114ea:	f43f af2f 	beq.w	9001134c <_printf_float+0x9c>
900114ee:	f108 0801 	add.w	r8, r8, #1
900114f2:	e7e6      	b.n	900114c2 <_printf_float+0x212>
900114f4:	9b07      	ldr	r3, [sp, #28]
900114f6:	2b00      	cmp	r3, #0
900114f8:	dc3c      	bgt.n	90011574 <_printf_float+0x2c4>
900114fa:	4a1d      	ldr	r2, [pc, #116]	; (90011570 <_printf_float+0x2c0>)
900114fc:	2301      	movs	r3, #1
900114fe:	4631      	mov	r1, r6
90011500:	4628      	mov	r0, r5
90011502:	47b8      	blx	r7
90011504:	3001      	adds	r0, #1
90011506:	f43f af21 	beq.w	9001134c <_printf_float+0x9c>
9001150a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
9001150e:	4313      	orrs	r3, r2
90011510:	d102      	bne.n	90011518 <_printf_float+0x268>
90011512:	6823      	ldr	r3, [r4, #0]
90011514:	07d9      	lsls	r1, r3, #31
90011516:	d5d8      	bpl.n	900114ca <_printf_float+0x21a>
90011518:	4653      	mov	r3, sl
9001151a:	465a      	mov	r2, fp
9001151c:	4631      	mov	r1, r6
9001151e:	4628      	mov	r0, r5
90011520:	47b8      	blx	r7
90011522:	3001      	adds	r0, #1
90011524:	f43f af12 	beq.w	9001134c <_printf_float+0x9c>
90011528:	f04f 0900 	mov.w	r9, #0
9001152c:	f104 0a1a 	add.w	sl, r4, #26
90011530:	9b07      	ldr	r3, [sp, #28]
90011532:	425b      	negs	r3, r3
90011534:	454b      	cmp	r3, r9
90011536:	dc01      	bgt.n	9001153c <_printf_float+0x28c>
90011538:	9b08      	ldr	r3, [sp, #32]
9001153a:	e795      	b.n	90011468 <_printf_float+0x1b8>
9001153c:	2301      	movs	r3, #1
9001153e:	4652      	mov	r2, sl
90011540:	4631      	mov	r1, r6
90011542:	4628      	mov	r0, r5
90011544:	47b8      	blx	r7
90011546:	3001      	adds	r0, #1
90011548:	f43f af00 	beq.w	9001134c <_printf_float+0x9c>
9001154c:	f109 0901 	add.w	r9, r9, #1
90011550:	e7ee      	b.n	90011530 <_printf_float+0x280>
90011552:	bf00      	nop
90011554:	f3af 8000 	nop.w
90011558:	ffffffff 	.word	0xffffffff
9001155c:	7fefffff 	.word	0x7fefffff
90011560:	9001584c 	.word	0x9001584c
90011564:	90015850 	.word	0x90015850
90011568:	90015858 	.word	0x90015858
9001156c:	90015854 	.word	0x90015854
90011570:	9001585c 	.word	0x9001585c
90011574:	9a08      	ldr	r2, [sp, #32]
90011576:	6da3      	ldr	r3, [r4, #88]	; 0x58
90011578:	429a      	cmp	r2, r3
9001157a:	bfa8      	it	ge
9001157c:	461a      	movge	r2, r3
9001157e:	2a00      	cmp	r2, #0
90011580:	4691      	mov	r9, r2
90011582:	dc38      	bgt.n	900115f6 <_printf_float+0x346>
90011584:	2300      	movs	r3, #0
90011586:	9305      	str	r3, [sp, #20]
90011588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
9001158c:	f104 021a 	add.w	r2, r4, #26
90011590:	6da3      	ldr	r3, [r4, #88]	; 0x58
90011592:	9905      	ldr	r1, [sp, #20]
90011594:	9304      	str	r3, [sp, #16]
90011596:	eba3 0309 	sub.w	r3, r3, r9
9001159a:	428b      	cmp	r3, r1
9001159c:	dc33      	bgt.n	90011606 <_printf_float+0x356>
9001159e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
900115a2:	429a      	cmp	r2, r3
900115a4:	db3c      	blt.n	90011620 <_printf_float+0x370>
900115a6:	6823      	ldr	r3, [r4, #0]
900115a8:	07da      	lsls	r2, r3, #31
900115aa:	d439      	bmi.n	90011620 <_printf_float+0x370>
900115ac:	9b08      	ldr	r3, [sp, #32]
900115ae:	9a04      	ldr	r2, [sp, #16]
900115b0:	9907      	ldr	r1, [sp, #28]
900115b2:	1a9a      	subs	r2, r3, r2
900115b4:	eba3 0901 	sub.w	r9, r3, r1
900115b8:	4591      	cmp	r9, r2
900115ba:	bfa8      	it	ge
900115bc:	4691      	movge	r9, r2
900115be:	f1b9 0f00 	cmp.w	r9, #0
900115c2:	dc35      	bgt.n	90011630 <_printf_float+0x380>
900115c4:	f04f 0800 	mov.w	r8, #0
900115c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
900115cc:	f104 0a1a 	add.w	sl, r4, #26
900115d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
900115d4:	1a9b      	subs	r3, r3, r2
900115d6:	eba3 0309 	sub.w	r3, r3, r9
900115da:	4543      	cmp	r3, r8
900115dc:	f77f af75 	ble.w	900114ca <_printf_float+0x21a>
900115e0:	2301      	movs	r3, #1
900115e2:	4652      	mov	r2, sl
900115e4:	4631      	mov	r1, r6
900115e6:	4628      	mov	r0, r5
900115e8:	47b8      	blx	r7
900115ea:	3001      	adds	r0, #1
900115ec:	f43f aeae 	beq.w	9001134c <_printf_float+0x9c>
900115f0:	f108 0801 	add.w	r8, r8, #1
900115f4:	e7ec      	b.n	900115d0 <_printf_float+0x320>
900115f6:	4613      	mov	r3, r2
900115f8:	4631      	mov	r1, r6
900115fa:	4642      	mov	r2, r8
900115fc:	4628      	mov	r0, r5
900115fe:	47b8      	blx	r7
90011600:	3001      	adds	r0, #1
90011602:	d1bf      	bne.n	90011584 <_printf_float+0x2d4>
90011604:	e6a2      	b.n	9001134c <_printf_float+0x9c>
90011606:	2301      	movs	r3, #1
90011608:	4631      	mov	r1, r6
9001160a:	4628      	mov	r0, r5
9001160c:	9204      	str	r2, [sp, #16]
9001160e:	47b8      	blx	r7
90011610:	3001      	adds	r0, #1
90011612:	f43f ae9b 	beq.w	9001134c <_printf_float+0x9c>
90011616:	9b05      	ldr	r3, [sp, #20]
90011618:	9a04      	ldr	r2, [sp, #16]
9001161a:	3301      	adds	r3, #1
9001161c:	9305      	str	r3, [sp, #20]
9001161e:	e7b7      	b.n	90011590 <_printf_float+0x2e0>
90011620:	4653      	mov	r3, sl
90011622:	465a      	mov	r2, fp
90011624:	4631      	mov	r1, r6
90011626:	4628      	mov	r0, r5
90011628:	47b8      	blx	r7
9001162a:	3001      	adds	r0, #1
9001162c:	d1be      	bne.n	900115ac <_printf_float+0x2fc>
9001162e:	e68d      	b.n	9001134c <_printf_float+0x9c>
90011630:	9a04      	ldr	r2, [sp, #16]
90011632:	464b      	mov	r3, r9
90011634:	4442      	add	r2, r8
90011636:	4631      	mov	r1, r6
90011638:	4628      	mov	r0, r5
9001163a:	47b8      	blx	r7
9001163c:	3001      	adds	r0, #1
9001163e:	d1c1      	bne.n	900115c4 <_printf_float+0x314>
90011640:	e684      	b.n	9001134c <_printf_float+0x9c>
90011642:	9a08      	ldr	r2, [sp, #32]
90011644:	2a01      	cmp	r2, #1
90011646:	dc01      	bgt.n	9001164c <_printf_float+0x39c>
90011648:	07db      	lsls	r3, r3, #31
9001164a:	d537      	bpl.n	900116bc <_printf_float+0x40c>
9001164c:	2301      	movs	r3, #1
9001164e:	4642      	mov	r2, r8
90011650:	4631      	mov	r1, r6
90011652:	4628      	mov	r0, r5
90011654:	47b8      	blx	r7
90011656:	3001      	adds	r0, #1
90011658:	f43f ae78 	beq.w	9001134c <_printf_float+0x9c>
9001165c:	4653      	mov	r3, sl
9001165e:	465a      	mov	r2, fp
90011660:	4631      	mov	r1, r6
90011662:	4628      	mov	r0, r5
90011664:	47b8      	blx	r7
90011666:	3001      	adds	r0, #1
90011668:	f43f ae70 	beq.w	9001134c <_printf_float+0x9c>
9001166c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
90011670:	eeb5 7b40 	vcmp.f64	d7, #0.0
90011674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011678:	d01b      	beq.n	900116b2 <_printf_float+0x402>
9001167a:	9b08      	ldr	r3, [sp, #32]
9001167c:	f108 0201 	add.w	r2, r8, #1
90011680:	3b01      	subs	r3, #1
90011682:	4631      	mov	r1, r6
90011684:	4628      	mov	r0, r5
90011686:	47b8      	blx	r7
90011688:	3001      	adds	r0, #1
9001168a:	d10e      	bne.n	900116aa <_printf_float+0x3fa>
9001168c:	e65e      	b.n	9001134c <_printf_float+0x9c>
9001168e:	2301      	movs	r3, #1
90011690:	464a      	mov	r2, r9
90011692:	4631      	mov	r1, r6
90011694:	4628      	mov	r0, r5
90011696:	47b8      	blx	r7
90011698:	3001      	adds	r0, #1
9001169a:	f43f ae57 	beq.w	9001134c <_printf_float+0x9c>
9001169e:	f108 0801 	add.w	r8, r8, #1
900116a2:	9b08      	ldr	r3, [sp, #32]
900116a4:	3b01      	subs	r3, #1
900116a6:	4543      	cmp	r3, r8
900116a8:	dcf1      	bgt.n	9001168e <_printf_float+0x3de>
900116aa:	9b04      	ldr	r3, [sp, #16]
900116ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
900116b0:	e6db      	b.n	9001146a <_printf_float+0x1ba>
900116b2:	f04f 0800 	mov.w	r8, #0
900116b6:	f104 091a 	add.w	r9, r4, #26
900116ba:	e7f2      	b.n	900116a2 <_printf_float+0x3f2>
900116bc:	2301      	movs	r3, #1
900116be:	4642      	mov	r2, r8
900116c0:	e7df      	b.n	90011682 <_printf_float+0x3d2>
900116c2:	2301      	movs	r3, #1
900116c4:	464a      	mov	r2, r9
900116c6:	4631      	mov	r1, r6
900116c8:	4628      	mov	r0, r5
900116ca:	47b8      	blx	r7
900116cc:	3001      	adds	r0, #1
900116ce:	f43f ae3d 	beq.w	9001134c <_printf_float+0x9c>
900116d2:	f108 0801 	add.w	r8, r8, #1
900116d6:	68e3      	ldr	r3, [r4, #12]
900116d8:	9909      	ldr	r1, [sp, #36]	; 0x24
900116da:	1a5b      	subs	r3, r3, r1
900116dc:	4543      	cmp	r3, r8
900116de:	dcf0      	bgt.n	900116c2 <_printf_float+0x412>
900116e0:	e6f7      	b.n	900114d2 <_printf_float+0x222>
900116e2:	f04f 0800 	mov.w	r8, #0
900116e6:	f104 0919 	add.w	r9, r4, #25
900116ea:	e7f4      	b.n	900116d6 <_printf_float+0x426>

900116ec <_printf_common>:
900116ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900116f0:	4616      	mov	r6, r2
900116f2:	4699      	mov	r9, r3
900116f4:	688a      	ldr	r2, [r1, #8]
900116f6:	690b      	ldr	r3, [r1, #16]
900116f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
900116fc:	4293      	cmp	r3, r2
900116fe:	bfb8      	it	lt
90011700:	4613      	movlt	r3, r2
90011702:	6033      	str	r3, [r6, #0]
90011704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90011708:	4607      	mov	r7, r0
9001170a:	460c      	mov	r4, r1
9001170c:	b10a      	cbz	r2, 90011712 <_printf_common+0x26>
9001170e:	3301      	adds	r3, #1
90011710:	6033      	str	r3, [r6, #0]
90011712:	6823      	ldr	r3, [r4, #0]
90011714:	0699      	lsls	r1, r3, #26
90011716:	bf42      	ittt	mi
90011718:	6833      	ldrmi	r3, [r6, #0]
9001171a:	3302      	addmi	r3, #2
9001171c:	6033      	strmi	r3, [r6, #0]
9001171e:	6825      	ldr	r5, [r4, #0]
90011720:	f015 0506 	ands.w	r5, r5, #6
90011724:	d106      	bne.n	90011734 <_printf_common+0x48>
90011726:	f104 0a19 	add.w	sl, r4, #25
9001172a:	68e3      	ldr	r3, [r4, #12]
9001172c:	6832      	ldr	r2, [r6, #0]
9001172e:	1a9b      	subs	r3, r3, r2
90011730:	42ab      	cmp	r3, r5
90011732:	dc26      	bgt.n	90011782 <_printf_common+0x96>
90011734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90011738:	1e13      	subs	r3, r2, #0
9001173a:	6822      	ldr	r2, [r4, #0]
9001173c:	bf18      	it	ne
9001173e:	2301      	movne	r3, #1
90011740:	0692      	lsls	r2, r2, #26
90011742:	d42b      	bmi.n	9001179c <_printf_common+0xb0>
90011744:	f104 0243 	add.w	r2, r4, #67	; 0x43
90011748:	4649      	mov	r1, r9
9001174a:	4638      	mov	r0, r7
9001174c:	47c0      	blx	r8
9001174e:	3001      	adds	r0, #1
90011750:	d01e      	beq.n	90011790 <_printf_common+0xa4>
90011752:	6823      	ldr	r3, [r4, #0]
90011754:	68e5      	ldr	r5, [r4, #12]
90011756:	6832      	ldr	r2, [r6, #0]
90011758:	f003 0306 	and.w	r3, r3, #6
9001175c:	2b04      	cmp	r3, #4
9001175e:	bf08      	it	eq
90011760:	1aad      	subeq	r5, r5, r2
90011762:	68a3      	ldr	r3, [r4, #8]
90011764:	6922      	ldr	r2, [r4, #16]
90011766:	bf0c      	ite	eq
90011768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9001176c:	2500      	movne	r5, #0
9001176e:	4293      	cmp	r3, r2
90011770:	bfc4      	itt	gt
90011772:	1a9b      	subgt	r3, r3, r2
90011774:	18ed      	addgt	r5, r5, r3
90011776:	2600      	movs	r6, #0
90011778:	341a      	adds	r4, #26
9001177a:	42b5      	cmp	r5, r6
9001177c:	d11a      	bne.n	900117b4 <_printf_common+0xc8>
9001177e:	2000      	movs	r0, #0
90011780:	e008      	b.n	90011794 <_printf_common+0xa8>
90011782:	2301      	movs	r3, #1
90011784:	4652      	mov	r2, sl
90011786:	4649      	mov	r1, r9
90011788:	4638      	mov	r0, r7
9001178a:	47c0      	blx	r8
9001178c:	3001      	adds	r0, #1
9001178e:	d103      	bne.n	90011798 <_printf_common+0xac>
90011790:	f04f 30ff 	mov.w	r0, #4294967295
90011794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90011798:	3501      	adds	r5, #1
9001179a:	e7c6      	b.n	9001172a <_printf_common+0x3e>
9001179c:	18e1      	adds	r1, r4, r3
9001179e:	1c5a      	adds	r2, r3, #1
900117a0:	2030      	movs	r0, #48	; 0x30
900117a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
900117a6:	4422      	add	r2, r4
900117a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
900117ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
900117b0:	3302      	adds	r3, #2
900117b2:	e7c7      	b.n	90011744 <_printf_common+0x58>
900117b4:	2301      	movs	r3, #1
900117b6:	4622      	mov	r2, r4
900117b8:	4649      	mov	r1, r9
900117ba:	4638      	mov	r0, r7
900117bc:	47c0      	blx	r8
900117be:	3001      	adds	r0, #1
900117c0:	d0e6      	beq.n	90011790 <_printf_common+0xa4>
900117c2:	3601      	adds	r6, #1
900117c4:	e7d9      	b.n	9001177a <_printf_common+0x8e>
	...

900117c8 <_printf_i>:
900117c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900117cc:	7e0f      	ldrb	r7, [r1, #24]
900117ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900117d0:	2f78      	cmp	r7, #120	; 0x78
900117d2:	4691      	mov	r9, r2
900117d4:	4680      	mov	r8, r0
900117d6:	460c      	mov	r4, r1
900117d8:	469a      	mov	sl, r3
900117da:	f101 0243 	add.w	r2, r1, #67	; 0x43
900117de:	d807      	bhi.n	900117f0 <_printf_i+0x28>
900117e0:	2f62      	cmp	r7, #98	; 0x62
900117e2:	d80a      	bhi.n	900117fa <_printf_i+0x32>
900117e4:	2f00      	cmp	r7, #0
900117e6:	f000 80d8 	beq.w	9001199a <_printf_i+0x1d2>
900117ea:	2f58      	cmp	r7, #88	; 0x58
900117ec:	f000 80a3 	beq.w	90011936 <_printf_i+0x16e>
900117f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
900117f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900117f8:	e03a      	b.n	90011870 <_printf_i+0xa8>
900117fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900117fe:	2b15      	cmp	r3, #21
90011800:	d8f6      	bhi.n	900117f0 <_printf_i+0x28>
90011802:	a101      	add	r1, pc, #4	; (adr r1, 90011808 <_printf_i+0x40>)
90011804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90011808:	90011861 	.word	0x90011861
9001180c:	90011875 	.word	0x90011875
90011810:	900117f1 	.word	0x900117f1
90011814:	900117f1 	.word	0x900117f1
90011818:	900117f1 	.word	0x900117f1
9001181c:	900117f1 	.word	0x900117f1
90011820:	90011875 	.word	0x90011875
90011824:	900117f1 	.word	0x900117f1
90011828:	900117f1 	.word	0x900117f1
9001182c:	900117f1 	.word	0x900117f1
90011830:	900117f1 	.word	0x900117f1
90011834:	90011981 	.word	0x90011981
90011838:	900118a5 	.word	0x900118a5
9001183c:	90011963 	.word	0x90011963
90011840:	900117f1 	.word	0x900117f1
90011844:	900117f1 	.word	0x900117f1
90011848:	900119a3 	.word	0x900119a3
9001184c:	900117f1 	.word	0x900117f1
90011850:	900118a5 	.word	0x900118a5
90011854:	900117f1 	.word	0x900117f1
90011858:	900117f1 	.word	0x900117f1
9001185c:	9001196b 	.word	0x9001196b
90011860:	682b      	ldr	r3, [r5, #0]
90011862:	1d1a      	adds	r2, r3, #4
90011864:	681b      	ldr	r3, [r3, #0]
90011866:	602a      	str	r2, [r5, #0]
90011868:	f104 0542 	add.w	r5, r4, #66	; 0x42
9001186c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90011870:	2301      	movs	r3, #1
90011872:	e0a3      	b.n	900119bc <_printf_i+0x1f4>
90011874:	6820      	ldr	r0, [r4, #0]
90011876:	6829      	ldr	r1, [r5, #0]
90011878:	0606      	lsls	r6, r0, #24
9001187a:	f101 0304 	add.w	r3, r1, #4
9001187e:	d50a      	bpl.n	90011896 <_printf_i+0xce>
90011880:	680e      	ldr	r6, [r1, #0]
90011882:	602b      	str	r3, [r5, #0]
90011884:	2e00      	cmp	r6, #0
90011886:	da03      	bge.n	90011890 <_printf_i+0xc8>
90011888:	232d      	movs	r3, #45	; 0x2d
9001188a:	4276      	negs	r6, r6
9001188c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90011890:	485e      	ldr	r0, [pc, #376]	; (90011a0c <_printf_i+0x244>)
90011892:	230a      	movs	r3, #10
90011894:	e019      	b.n	900118ca <_printf_i+0x102>
90011896:	680e      	ldr	r6, [r1, #0]
90011898:	602b      	str	r3, [r5, #0]
9001189a:	f010 0f40 	tst.w	r0, #64	; 0x40
9001189e:	bf18      	it	ne
900118a0:	b236      	sxthne	r6, r6
900118a2:	e7ef      	b.n	90011884 <_printf_i+0xbc>
900118a4:	682b      	ldr	r3, [r5, #0]
900118a6:	6820      	ldr	r0, [r4, #0]
900118a8:	1d19      	adds	r1, r3, #4
900118aa:	6029      	str	r1, [r5, #0]
900118ac:	0601      	lsls	r1, r0, #24
900118ae:	d501      	bpl.n	900118b4 <_printf_i+0xec>
900118b0:	681e      	ldr	r6, [r3, #0]
900118b2:	e002      	b.n	900118ba <_printf_i+0xf2>
900118b4:	0646      	lsls	r6, r0, #25
900118b6:	d5fb      	bpl.n	900118b0 <_printf_i+0xe8>
900118b8:	881e      	ldrh	r6, [r3, #0]
900118ba:	4854      	ldr	r0, [pc, #336]	; (90011a0c <_printf_i+0x244>)
900118bc:	2f6f      	cmp	r7, #111	; 0x6f
900118be:	bf0c      	ite	eq
900118c0:	2308      	moveq	r3, #8
900118c2:	230a      	movne	r3, #10
900118c4:	2100      	movs	r1, #0
900118c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900118ca:	6865      	ldr	r5, [r4, #4]
900118cc:	60a5      	str	r5, [r4, #8]
900118ce:	2d00      	cmp	r5, #0
900118d0:	bfa2      	ittt	ge
900118d2:	6821      	ldrge	r1, [r4, #0]
900118d4:	f021 0104 	bicge.w	r1, r1, #4
900118d8:	6021      	strge	r1, [r4, #0]
900118da:	b90e      	cbnz	r6, 900118e0 <_printf_i+0x118>
900118dc:	2d00      	cmp	r5, #0
900118de:	d04d      	beq.n	9001197c <_printf_i+0x1b4>
900118e0:	4615      	mov	r5, r2
900118e2:	fbb6 f1f3 	udiv	r1, r6, r3
900118e6:	fb03 6711 	mls	r7, r3, r1, r6
900118ea:	5dc7      	ldrb	r7, [r0, r7]
900118ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
900118f0:	4637      	mov	r7, r6
900118f2:	42bb      	cmp	r3, r7
900118f4:	460e      	mov	r6, r1
900118f6:	d9f4      	bls.n	900118e2 <_printf_i+0x11a>
900118f8:	2b08      	cmp	r3, #8
900118fa:	d10b      	bne.n	90011914 <_printf_i+0x14c>
900118fc:	6823      	ldr	r3, [r4, #0]
900118fe:	07de      	lsls	r6, r3, #31
90011900:	d508      	bpl.n	90011914 <_printf_i+0x14c>
90011902:	6923      	ldr	r3, [r4, #16]
90011904:	6861      	ldr	r1, [r4, #4]
90011906:	4299      	cmp	r1, r3
90011908:	bfde      	ittt	le
9001190a:	2330      	movle	r3, #48	; 0x30
9001190c:	f805 3c01 	strble.w	r3, [r5, #-1]
90011910:	f105 35ff 	addle.w	r5, r5, #4294967295
90011914:	1b52      	subs	r2, r2, r5
90011916:	6122      	str	r2, [r4, #16]
90011918:	f8cd a000 	str.w	sl, [sp]
9001191c:	464b      	mov	r3, r9
9001191e:	aa03      	add	r2, sp, #12
90011920:	4621      	mov	r1, r4
90011922:	4640      	mov	r0, r8
90011924:	f7ff fee2 	bl	900116ec <_printf_common>
90011928:	3001      	adds	r0, #1
9001192a:	d14c      	bne.n	900119c6 <_printf_i+0x1fe>
9001192c:	f04f 30ff 	mov.w	r0, #4294967295
90011930:	b004      	add	sp, #16
90011932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90011936:	4835      	ldr	r0, [pc, #212]	; (90011a0c <_printf_i+0x244>)
90011938:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
9001193c:	6829      	ldr	r1, [r5, #0]
9001193e:	6823      	ldr	r3, [r4, #0]
90011940:	f851 6b04 	ldr.w	r6, [r1], #4
90011944:	6029      	str	r1, [r5, #0]
90011946:	061d      	lsls	r5, r3, #24
90011948:	d514      	bpl.n	90011974 <_printf_i+0x1ac>
9001194a:	07df      	lsls	r7, r3, #31
9001194c:	bf44      	itt	mi
9001194e:	f043 0320 	orrmi.w	r3, r3, #32
90011952:	6023      	strmi	r3, [r4, #0]
90011954:	b91e      	cbnz	r6, 9001195e <_printf_i+0x196>
90011956:	6823      	ldr	r3, [r4, #0]
90011958:	f023 0320 	bic.w	r3, r3, #32
9001195c:	6023      	str	r3, [r4, #0]
9001195e:	2310      	movs	r3, #16
90011960:	e7b0      	b.n	900118c4 <_printf_i+0xfc>
90011962:	6823      	ldr	r3, [r4, #0]
90011964:	f043 0320 	orr.w	r3, r3, #32
90011968:	6023      	str	r3, [r4, #0]
9001196a:	2378      	movs	r3, #120	; 0x78
9001196c:	4828      	ldr	r0, [pc, #160]	; (90011a10 <_printf_i+0x248>)
9001196e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90011972:	e7e3      	b.n	9001193c <_printf_i+0x174>
90011974:	0659      	lsls	r1, r3, #25
90011976:	bf48      	it	mi
90011978:	b2b6      	uxthmi	r6, r6
9001197a:	e7e6      	b.n	9001194a <_printf_i+0x182>
9001197c:	4615      	mov	r5, r2
9001197e:	e7bb      	b.n	900118f8 <_printf_i+0x130>
90011980:	682b      	ldr	r3, [r5, #0]
90011982:	6826      	ldr	r6, [r4, #0]
90011984:	6961      	ldr	r1, [r4, #20]
90011986:	1d18      	adds	r0, r3, #4
90011988:	6028      	str	r0, [r5, #0]
9001198a:	0635      	lsls	r5, r6, #24
9001198c:	681b      	ldr	r3, [r3, #0]
9001198e:	d501      	bpl.n	90011994 <_printf_i+0x1cc>
90011990:	6019      	str	r1, [r3, #0]
90011992:	e002      	b.n	9001199a <_printf_i+0x1d2>
90011994:	0670      	lsls	r0, r6, #25
90011996:	d5fb      	bpl.n	90011990 <_printf_i+0x1c8>
90011998:	8019      	strh	r1, [r3, #0]
9001199a:	2300      	movs	r3, #0
9001199c:	6123      	str	r3, [r4, #16]
9001199e:	4615      	mov	r5, r2
900119a0:	e7ba      	b.n	90011918 <_printf_i+0x150>
900119a2:	682b      	ldr	r3, [r5, #0]
900119a4:	1d1a      	adds	r2, r3, #4
900119a6:	602a      	str	r2, [r5, #0]
900119a8:	681d      	ldr	r5, [r3, #0]
900119aa:	6862      	ldr	r2, [r4, #4]
900119ac:	2100      	movs	r1, #0
900119ae:	4628      	mov	r0, r5
900119b0:	f7ee fc9e 	bl	900002f0 <memchr>
900119b4:	b108      	cbz	r0, 900119ba <_printf_i+0x1f2>
900119b6:	1b40      	subs	r0, r0, r5
900119b8:	6060      	str	r0, [r4, #4]
900119ba:	6863      	ldr	r3, [r4, #4]
900119bc:	6123      	str	r3, [r4, #16]
900119be:	2300      	movs	r3, #0
900119c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900119c4:	e7a8      	b.n	90011918 <_printf_i+0x150>
900119c6:	6923      	ldr	r3, [r4, #16]
900119c8:	462a      	mov	r2, r5
900119ca:	4649      	mov	r1, r9
900119cc:	4640      	mov	r0, r8
900119ce:	47d0      	blx	sl
900119d0:	3001      	adds	r0, #1
900119d2:	d0ab      	beq.n	9001192c <_printf_i+0x164>
900119d4:	6823      	ldr	r3, [r4, #0]
900119d6:	079b      	lsls	r3, r3, #30
900119d8:	d413      	bmi.n	90011a02 <_printf_i+0x23a>
900119da:	68e0      	ldr	r0, [r4, #12]
900119dc:	9b03      	ldr	r3, [sp, #12]
900119de:	4298      	cmp	r0, r3
900119e0:	bfb8      	it	lt
900119e2:	4618      	movlt	r0, r3
900119e4:	e7a4      	b.n	90011930 <_printf_i+0x168>
900119e6:	2301      	movs	r3, #1
900119e8:	4632      	mov	r2, r6
900119ea:	4649      	mov	r1, r9
900119ec:	4640      	mov	r0, r8
900119ee:	47d0      	blx	sl
900119f0:	3001      	adds	r0, #1
900119f2:	d09b      	beq.n	9001192c <_printf_i+0x164>
900119f4:	3501      	adds	r5, #1
900119f6:	68e3      	ldr	r3, [r4, #12]
900119f8:	9903      	ldr	r1, [sp, #12]
900119fa:	1a5b      	subs	r3, r3, r1
900119fc:	42ab      	cmp	r3, r5
900119fe:	dcf2      	bgt.n	900119e6 <_printf_i+0x21e>
90011a00:	e7eb      	b.n	900119da <_printf_i+0x212>
90011a02:	2500      	movs	r5, #0
90011a04:	f104 0619 	add.w	r6, r4, #25
90011a08:	e7f5      	b.n	900119f6 <_printf_i+0x22e>
90011a0a:	bf00      	nop
90011a0c:	9001585e 	.word	0x9001585e
90011a10:	9001586f 	.word	0x9001586f

90011a14 <iprintf>:
90011a14:	b40f      	push	{r0, r1, r2, r3}
90011a16:	4b0a      	ldr	r3, [pc, #40]	; (90011a40 <iprintf+0x2c>)
90011a18:	b513      	push	{r0, r1, r4, lr}
90011a1a:	681c      	ldr	r4, [r3, #0]
90011a1c:	b124      	cbz	r4, 90011a28 <iprintf+0x14>
90011a1e:	69a3      	ldr	r3, [r4, #24]
90011a20:	b913      	cbnz	r3, 90011a28 <iprintf+0x14>
90011a22:	4620      	mov	r0, r4
90011a24:	f7ff fa42 	bl	90010eac <__sinit>
90011a28:	ab05      	add	r3, sp, #20
90011a2a:	9a04      	ldr	r2, [sp, #16]
90011a2c:	68a1      	ldr	r1, [r4, #8]
90011a2e:	9301      	str	r3, [sp, #4]
90011a30:	4620      	mov	r0, r4
90011a32:	f001 fd5b 	bl	900134ec <_vfiprintf_r>
90011a36:	b002      	add	sp, #8
90011a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90011a3c:	b004      	add	sp, #16
90011a3e:	4770      	bx	lr
90011a40:	24000040 	.word	0x24000040

90011a44 <cleanup_glue>:
90011a44:	b538      	push	{r3, r4, r5, lr}
90011a46:	460c      	mov	r4, r1
90011a48:	6809      	ldr	r1, [r1, #0]
90011a4a:	4605      	mov	r5, r0
90011a4c:	b109      	cbz	r1, 90011a52 <cleanup_glue+0xe>
90011a4e:	f7ff fff9 	bl	90011a44 <cleanup_glue>
90011a52:	4621      	mov	r1, r4
90011a54:	4628      	mov	r0, r5
90011a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90011a5a:	f001 bb75 	b.w	90013148 <_free_r>
	...

90011a60 <_reclaim_reent>:
90011a60:	4b2c      	ldr	r3, [pc, #176]	; (90011b14 <_reclaim_reent+0xb4>)
90011a62:	681b      	ldr	r3, [r3, #0]
90011a64:	4283      	cmp	r3, r0
90011a66:	b570      	push	{r4, r5, r6, lr}
90011a68:	4604      	mov	r4, r0
90011a6a:	d051      	beq.n	90011b10 <_reclaim_reent+0xb0>
90011a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
90011a6e:	b143      	cbz	r3, 90011a82 <_reclaim_reent+0x22>
90011a70:	68db      	ldr	r3, [r3, #12]
90011a72:	2b00      	cmp	r3, #0
90011a74:	d14a      	bne.n	90011b0c <_reclaim_reent+0xac>
90011a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011a78:	6819      	ldr	r1, [r3, #0]
90011a7a:	b111      	cbz	r1, 90011a82 <_reclaim_reent+0x22>
90011a7c:	4620      	mov	r0, r4
90011a7e:	f001 fb63 	bl	90013148 <_free_r>
90011a82:	6961      	ldr	r1, [r4, #20]
90011a84:	b111      	cbz	r1, 90011a8c <_reclaim_reent+0x2c>
90011a86:	4620      	mov	r0, r4
90011a88:	f001 fb5e 	bl	90013148 <_free_r>
90011a8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90011a8e:	b111      	cbz	r1, 90011a96 <_reclaim_reent+0x36>
90011a90:	4620      	mov	r0, r4
90011a92:	f001 fb59 	bl	90013148 <_free_r>
90011a96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
90011a98:	b111      	cbz	r1, 90011aa0 <_reclaim_reent+0x40>
90011a9a:	4620      	mov	r0, r4
90011a9c:	f001 fb54 	bl	90013148 <_free_r>
90011aa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
90011aa2:	b111      	cbz	r1, 90011aaa <_reclaim_reent+0x4a>
90011aa4:	4620      	mov	r0, r4
90011aa6:	f001 fb4f 	bl	90013148 <_free_r>
90011aaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
90011aac:	b111      	cbz	r1, 90011ab4 <_reclaim_reent+0x54>
90011aae:	4620      	mov	r0, r4
90011ab0:	f001 fb4a 	bl	90013148 <_free_r>
90011ab4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90011ab6:	b111      	cbz	r1, 90011abe <_reclaim_reent+0x5e>
90011ab8:	4620      	mov	r0, r4
90011aba:	f001 fb45 	bl	90013148 <_free_r>
90011abe:	6da1      	ldr	r1, [r4, #88]	; 0x58
90011ac0:	b111      	cbz	r1, 90011ac8 <_reclaim_reent+0x68>
90011ac2:	4620      	mov	r0, r4
90011ac4:	f001 fb40 	bl	90013148 <_free_r>
90011ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
90011aca:	b111      	cbz	r1, 90011ad2 <_reclaim_reent+0x72>
90011acc:	4620      	mov	r0, r4
90011ace:	f001 fb3b 	bl	90013148 <_free_r>
90011ad2:	69a3      	ldr	r3, [r4, #24]
90011ad4:	b1e3      	cbz	r3, 90011b10 <_reclaim_reent+0xb0>
90011ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90011ad8:	4620      	mov	r0, r4
90011ada:	4798      	blx	r3
90011adc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
90011ade:	b1b9      	cbz	r1, 90011b10 <_reclaim_reent+0xb0>
90011ae0:	4620      	mov	r0, r4
90011ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011ae6:	f7ff bfad 	b.w	90011a44 <cleanup_glue>
90011aea:	5949      	ldr	r1, [r1, r5]
90011aec:	b941      	cbnz	r1, 90011b00 <_reclaim_reent+0xa0>
90011aee:	3504      	adds	r5, #4
90011af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011af2:	2d80      	cmp	r5, #128	; 0x80
90011af4:	68d9      	ldr	r1, [r3, #12]
90011af6:	d1f8      	bne.n	90011aea <_reclaim_reent+0x8a>
90011af8:	4620      	mov	r0, r4
90011afa:	f001 fb25 	bl	90013148 <_free_r>
90011afe:	e7ba      	b.n	90011a76 <_reclaim_reent+0x16>
90011b00:	680e      	ldr	r6, [r1, #0]
90011b02:	4620      	mov	r0, r4
90011b04:	f001 fb20 	bl	90013148 <_free_r>
90011b08:	4631      	mov	r1, r6
90011b0a:	e7ef      	b.n	90011aec <_reclaim_reent+0x8c>
90011b0c:	2500      	movs	r5, #0
90011b0e:	e7ef      	b.n	90011af0 <_reclaim_reent+0x90>
90011b10:	bd70      	pop	{r4, r5, r6, pc}
90011b12:	bf00      	nop
90011b14:	24000040 	.word	0x24000040

90011b18 <_sbrk_r>:
90011b18:	b538      	push	{r3, r4, r5, lr}
90011b1a:	4d06      	ldr	r5, [pc, #24]	; (90011b34 <_sbrk_r+0x1c>)
90011b1c:	2300      	movs	r3, #0
90011b1e:	4604      	mov	r4, r0
90011b20:	4608      	mov	r0, r1
90011b22:	602b      	str	r3, [r5, #0]
90011b24:	f7f0 fa32 	bl	90001f8c <_sbrk>
90011b28:	1c43      	adds	r3, r0, #1
90011b2a:	d102      	bne.n	90011b32 <_sbrk_r+0x1a>
90011b2c:	682b      	ldr	r3, [r5, #0]
90011b2e:	b103      	cbz	r3, 90011b32 <_sbrk_r+0x1a>
90011b30:	6023      	str	r3, [r4, #0]
90011b32:	bd38      	pop	{r3, r4, r5, pc}
90011b34:	24005844 	.word	0x24005844

90011b38 <siprintf>:
90011b38:	b40e      	push	{r1, r2, r3}
90011b3a:	b500      	push	{lr}
90011b3c:	b09c      	sub	sp, #112	; 0x70
90011b3e:	ab1d      	add	r3, sp, #116	; 0x74
90011b40:	9002      	str	r0, [sp, #8]
90011b42:	9006      	str	r0, [sp, #24]
90011b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
90011b48:	4809      	ldr	r0, [pc, #36]	; (90011b70 <siprintf+0x38>)
90011b4a:	9107      	str	r1, [sp, #28]
90011b4c:	9104      	str	r1, [sp, #16]
90011b4e:	4909      	ldr	r1, [pc, #36]	; (90011b74 <siprintf+0x3c>)
90011b50:	f853 2b04 	ldr.w	r2, [r3], #4
90011b54:	9105      	str	r1, [sp, #20]
90011b56:	6800      	ldr	r0, [r0, #0]
90011b58:	9301      	str	r3, [sp, #4]
90011b5a:	a902      	add	r1, sp, #8
90011b5c:	f001 fb9c 	bl	90013298 <_svfiprintf_r>
90011b60:	9b02      	ldr	r3, [sp, #8]
90011b62:	2200      	movs	r2, #0
90011b64:	701a      	strb	r2, [r3, #0]
90011b66:	b01c      	add	sp, #112	; 0x70
90011b68:	f85d eb04 	ldr.w	lr, [sp], #4
90011b6c:	b003      	add	sp, #12
90011b6e:	4770      	bx	lr
90011b70:	24000040 	.word	0x24000040
90011b74:	ffff0208 	.word	0xffff0208

90011b78 <__sread>:
90011b78:	b510      	push	{r4, lr}
90011b7a:	460c      	mov	r4, r1
90011b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011b80:	f001 fde4 	bl	9001374c <_read_r>
90011b84:	2800      	cmp	r0, #0
90011b86:	bfab      	itete	ge
90011b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90011b8a:	89a3      	ldrhlt	r3, [r4, #12]
90011b8c:	181b      	addge	r3, r3, r0
90011b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90011b92:	bfac      	ite	ge
90011b94:	6563      	strge	r3, [r4, #84]	; 0x54
90011b96:	81a3      	strhlt	r3, [r4, #12]
90011b98:	bd10      	pop	{r4, pc}

90011b9a <__swrite>:
90011b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011b9e:	461f      	mov	r7, r3
90011ba0:	898b      	ldrh	r3, [r1, #12]
90011ba2:	05db      	lsls	r3, r3, #23
90011ba4:	4605      	mov	r5, r0
90011ba6:	460c      	mov	r4, r1
90011ba8:	4616      	mov	r6, r2
90011baa:	d505      	bpl.n	90011bb8 <__swrite+0x1e>
90011bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011bb0:	2302      	movs	r3, #2
90011bb2:	2200      	movs	r2, #0
90011bb4:	f000 ff08 	bl	900129c8 <_lseek_r>
90011bb8:	89a3      	ldrh	r3, [r4, #12]
90011bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90011bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90011bc2:	81a3      	strh	r3, [r4, #12]
90011bc4:	4632      	mov	r2, r6
90011bc6:	463b      	mov	r3, r7
90011bc8:	4628      	mov	r0, r5
90011bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90011bce:	f000 b817 	b.w	90011c00 <_write_r>

90011bd2 <__sseek>:
90011bd2:	b510      	push	{r4, lr}
90011bd4:	460c      	mov	r4, r1
90011bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011bda:	f000 fef5 	bl	900129c8 <_lseek_r>
90011bde:	1c43      	adds	r3, r0, #1
90011be0:	89a3      	ldrh	r3, [r4, #12]
90011be2:	bf15      	itete	ne
90011be4:	6560      	strne	r0, [r4, #84]	; 0x54
90011be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90011bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90011bee:	81a3      	strheq	r3, [r4, #12]
90011bf0:	bf18      	it	ne
90011bf2:	81a3      	strhne	r3, [r4, #12]
90011bf4:	bd10      	pop	{r4, pc}

90011bf6 <__sclose>:
90011bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90011bfa:	f000 b813 	b.w	90011c24 <_close_r>
	...

90011c00 <_write_r>:
90011c00:	b538      	push	{r3, r4, r5, lr}
90011c02:	4d07      	ldr	r5, [pc, #28]	; (90011c20 <_write_r+0x20>)
90011c04:	4604      	mov	r4, r0
90011c06:	4608      	mov	r0, r1
90011c08:	4611      	mov	r1, r2
90011c0a:	2200      	movs	r2, #0
90011c0c:	602a      	str	r2, [r5, #0]
90011c0e:	461a      	mov	r2, r3
90011c10:	f7f0 f96b 	bl	90001eea <_write>
90011c14:	1c43      	adds	r3, r0, #1
90011c16:	d102      	bne.n	90011c1e <_write_r+0x1e>
90011c18:	682b      	ldr	r3, [r5, #0]
90011c1a:	b103      	cbz	r3, 90011c1e <_write_r+0x1e>
90011c1c:	6023      	str	r3, [r4, #0]
90011c1e:	bd38      	pop	{r3, r4, r5, pc}
90011c20:	24005844 	.word	0x24005844

90011c24 <_close_r>:
90011c24:	b538      	push	{r3, r4, r5, lr}
90011c26:	4d06      	ldr	r5, [pc, #24]	; (90011c40 <_close_r+0x1c>)
90011c28:	2300      	movs	r3, #0
90011c2a:	4604      	mov	r4, r0
90011c2c:	4608      	mov	r0, r1
90011c2e:	602b      	str	r3, [r5, #0]
90011c30:	f7f0 f977 	bl	90001f22 <_close>
90011c34:	1c43      	adds	r3, r0, #1
90011c36:	d102      	bne.n	90011c3e <_close_r+0x1a>
90011c38:	682b      	ldr	r3, [r5, #0]
90011c3a:	b103      	cbz	r3, 90011c3e <_close_r+0x1a>
90011c3c:	6023      	str	r3, [r4, #0]
90011c3e:	bd38      	pop	{r3, r4, r5, pc}
90011c40:	24005844 	.word	0x24005844

90011c44 <quorem>:
90011c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011c48:	6903      	ldr	r3, [r0, #16]
90011c4a:	690c      	ldr	r4, [r1, #16]
90011c4c:	42a3      	cmp	r3, r4
90011c4e:	4607      	mov	r7, r0
90011c50:	f2c0 8081 	blt.w	90011d56 <quorem+0x112>
90011c54:	3c01      	subs	r4, #1
90011c56:	f101 0814 	add.w	r8, r1, #20
90011c5a:	f100 0514 	add.w	r5, r0, #20
90011c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
90011c62:	9301      	str	r3, [sp, #4]
90011c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
90011c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
90011c6c:	3301      	adds	r3, #1
90011c6e:	429a      	cmp	r2, r3
90011c70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
90011c74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
90011c78:	fbb2 f6f3 	udiv	r6, r2, r3
90011c7c:	d331      	bcc.n	90011ce2 <quorem+0x9e>
90011c7e:	f04f 0e00 	mov.w	lr, #0
90011c82:	4640      	mov	r0, r8
90011c84:	46ac      	mov	ip, r5
90011c86:	46f2      	mov	sl, lr
90011c88:	f850 2b04 	ldr.w	r2, [r0], #4
90011c8c:	b293      	uxth	r3, r2
90011c8e:	fb06 e303 	mla	r3, r6, r3, lr
90011c92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
90011c96:	b29b      	uxth	r3, r3
90011c98:	ebaa 0303 	sub.w	r3, sl, r3
90011c9c:	f8dc a000 	ldr.w	sl, [ip]
90011ca0:	0c12      	lsrs	r2, r2, #16
90011ca2:	fa13 f38a 	uxtah	r3, r3, sl
90011ca6:	fb06 e202 	mla	r2, r6, r2, lr
90011caa:	9300      	str	r3, [sp, #0]
90011cac:	9b00      	ldr	r3, [sp, #0]
90011cae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
90011cb2:	b292      	uxth	r2, r2
90011cb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
90011cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
90011cbc:	f8bd 3000 	ldrh.w	r3, [sp]
90011cc0:	4581      	cmp	r9, r0
90011cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90011cc6:	f84c 3b04 	str.w	r3, [ip], #4
90011cca:	ea4f 4a22 	mov.w	sl, r2, asr #16
90011cce:	d2db      	bcs.n	90011c88 <quorem+0x44>
90011cd0:	f855 300b 	ldr.w	r3, [r5, fp]
90011cd4:	b92b      	cbnz	r3, 90011ce2 <quorem+0x9e>
90011cd6:	9b01      	ldr	r3, [sp, #4]
90011cd8:	3b04      	subs	r3, #4
90011cda:	429d      	cmp	r5, r3
90011cdc:	461a      	mov	r2, r3
90011cde:	d32e      	bcc.n	90011d3e <quorem+0xfa>
90011ce0:	613c      	str	r4, [r7, #16]
90011ce2:	4638      	mov	r0, r7
90011ce4:	f001 f918 	bl	90012f18 <__mcmp>
90011ce8:	2800      	cmp	r0, #0
90011cea:	db24      	blt.n	90011d36 <quorem+0xf2>
90011cec:	3601      	adds	r6, #1
90011cee:	4628      	mov	r0, r5
90011cf0:	f04f 0c00 	mov.w	ip, #0
90011cf4:	f858 2b04 	ldr.w	r2, [r8], #4
90011cf8:	f8d0 e000 	ldr.w	lr, [r0]
90011cfc:	b293      	uxth	r3, r2
90011cfe:	ebac 0303 	sub.w	r3, ip, r3
90011d02:	0c12      	lsrs	r2, r2, #16
90011d04:	fa13 f38e 	uxtah	r3, r3, lr
90011d08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
90011d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
90011d10:	b29b      	uxth	r3, r3
90011d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90011d16:	45c1      	cmp	r9, r8
90011d18:	f840 3b04 	str.w	r3, [r0], #4
90011d1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
90011d20:	d2e8      	bcs.n	90011cf4 <quorem+0xb0>
90011d22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
90011d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
90011d2a:	b922      	cbnz	r2, 90011d36 <quorem+0xf2>
90011d2c:	3b04      	subs	r3, #4
90011d2e:	429d      	cmp	r5, r3
90011d30:	461a      	mov	r2, r3
90011d32:	d30a      	bcc.n	90011d4a <quorem+0x106>
90011d34:	613c      	str	r4, [r7, #16]
90011d36:	4630      	mov	r0, r6
90011d38:	b003      	add	sp, #12
90011d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011d3e:	6812      	ldr	r2, [r2, #0]
90011d40:	3b04      	subs	r3, #4
90011d42:	2a00      	cmp	r2, #0
90011d44:	d1cc      	bne.n	90011ce0 <quorem+0x9c>
90011d46:	3c01      	subs	r4, #1
90011d48:	e7c7      	b.n	90011cda <quorem+0x96>
90011d4a:	6812      	ldr	r2, [r2, #0]
90011d4c:	3b04      	subs	r3, #4
90011d4e:	2a00      	cmp	r2, #0
90011d50:	d1f0      	bne.n	90011d34 <quorem+0xf0>
90011d52:	3c01      	subs	r4, #1
90011d54:	e7eb      	b.n	90011d2e <quorem+0xea>
90011d56:	2000      	movs	r0, #0
90011d58:	e7ee      	b.n	90011d38 <quorem+0xf4>
90011d5a:	0000      	movs	r0, r0
90011d5c:	0000      	movs	r0, r0
	...

90011d60 <_dtoa_r>:
90011d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011d64:	ed2d 8b02 	vpush	{d8}
90011d68:	6a45      	ldr	r5, [r0, #36]	; 0x24
90011d6a:	b091      	sub	sp, #68	; 0x44
90011d6c:	ed8d 0b02 	vstr	d0, [sp, #8]
90011d70:	ec59 8b10 	vmov	r8, r9, d0
90011d74:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90011d76:	9106      	str	r1, [sp, #24]
90011d78:	4606      	mov	r6, r0
90011d7a:	9208      	str	r2, [sp, #32]
90011d7c:	930c      	str	r3, [sp, #48]	; 0x30
90011d7e:	b975      	cbnz	r5, 90011d9e <_dtoa_r+0x3e>
90011d80:	2010      	movs	r0, #16
90011d82:	f000 fe33 	bl	900129ec <malloc>
90011d86:	4602      	mov	r2, r0
90011d88:	6270      	str	r0, [r6, #36]	; 0x24
90011d8a:	b920      	cbnz	r0, 90011d96 <_dtoa_r+0x36>
90011d8c:	4baa      	ldr	r3, [pc, #680]	; (90012038 <_dtoa_r+0x2d8>)
90011d8e:	21ea      	movs	r1, #234	; 0xea
90011d90:	48aa      	ldr	r0, [pc, #680]	; (9001203c <_dtoa_r+0x2dc>)
90011d92:	f001 fdad 	bl	900138f0 <__assert_func>
90011d96:	e9c0 5501 	strd	r5, r5, [r0, #4]
90011d9a:	6005      	str	r5, [r0, #0]
90011d9c:	60c5      	str	r5, [r0, #12]
90011d9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
90011da0:	6819      	ldr	r1, [r3, #0]
90011da2:	b151      	cbz	r1, 90011dba <_dtoa_r+0x5a>
90011da4:	685a      	ldr	r2, [r3, #4]
90011da6:	604a      	str	r2, [r1, #4]
90011da8:	2301      	movs	r3, #1
90011daa:	4093      	lsls	r3, r2
90011dac:	608b      	str	r3, [r1, #8]
90011dae:	4630      	mov	r0, r6
90011db0:	f000 fe70 	bl	90012a94 <_Bfree>
90011db4:	6a73      	ldr	r3, [r6, #36]	; 0x24
90011db6:	2200      	movs	r2, #0
90011db8:	601a      	str	r2, [r3, #0]
90011dba:	f1b9 0300 	subs.w	r3, r9, #0
90011dbe:	bfbb      	ittet	lt
90011dc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
90011dc4:	9303      	strlt	r3, [sp, #12]
90011dc6:	2300      	movge	r3, #0
90011dc8:	2201      	movlt	r2, #1
90011dca:	bfac      	ite	ge
90011dcc:	6023      	strge	r3, [r4, #0]
90011dce:	6022      	strlt	r2, [r4, #0]
90011dd0:	4b9b      	ldr	r3, [pc, #620]	; (90012040 <_dtoa_r+0x2e0>)
90011dd2:	9c03      	ldr	r4, [sp, #12]
90011dd4:	43a3      	bics	r3, r4
90011dd6:	d11c      	bne.n	90011e12 <_dtoa_r+0xb2>
90011dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90011dda:	f242 730f 	movw	r3, #9999	; 0x270f
90011dde:	6013      	str	r3, [r2, #0]
90011de0:	f3c4 0313 	ubfx	r3, r4, #0, #20
90011de4:	ea53 0308 	orrs.w	r3, r3, r8
90011de8:	f000 84fd 	beq.w	900127e6 <_dtoa_r+0xa86>
90011dec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90011dee:	b963      	cbnz	r3, 90011e0a <_dtoa_r+0xaa>
90011df0:	4b94      	ldr	r3, [pc, #592]	; (90012044 <_dtoa_r+0x2e4>)
90011df2:	e01f      	b.n	90011e34 <_dtoa_r+0xd4>
90011df4:	4b94      	ldr	r3, [pc, #592]	; (90012048 <_dtoa_r+0x2e8>)
90011df6:	9301      	str	r3, [sp, #4]
90011df8:	3308      	adds	r3, #8
90011dfa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90011dfc:	6013      	str	r3, [r2, #0]
90011dfe:	9801      	ldr	r0, [sp, #4]
90011e00:	b011      	add	sp, #68	; 0x44
90011e02:	ecbd 8b02 	vpop	{d8}
90011e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011e0a:	4b8e      	ldr	r3, [pc, #568]	; (90012044 <_dtoa_r+0x2e4>)
90011e0c:	9301      	str	r3, [sp, #4]
90011e0e:	3303      	adds	r3, #3
90011e10:	e7f3      	b.n	90011dfa <_dtoa_r+0x9a>
90011e12:	ed9d 8b02 	vldr	d8, [sp, #8]
90011e16:	eeb5 8b40 	vcmp.f64	d8, #0.0
90011e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011e1e:	d10b      	bne.n	90011e38 <_dtoa_r+0xd8>
90011e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90011e22:	2301      	movs	r3, #1
90011e24:	6013      	str	r3, [r2, #0]
90011e26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90011e28:	2b00      	cmp	r3, #0
90011e2a:	f000 84d9 	beq.w	900127e0 <_dtoa_r+0xa80>
90011e2e:	4887      	ldr	r0, [pc, #540]	; (9001204c <_dtoa_r+0x2ec>)
90011e30:	6018      	str	r0, [r3, #0]
90011e32:	1e43      	subs	r3, r0, #1
90011e34:	9301      	str	r3, [sp, #4]
90011e36:	e7e2      	b.n	90011dfe <_dtoa_r+0x9e>
90011e38:	a90f      	add	r1, sp, #60	; 0x3c
90011e3a:	aa0e      	add	r2, sp, #56	; 0x38
90011e3c:	4630      	mov	r0, r6
90011e3e:	eeb0 0b48 	vmov.f64	d0, d8
90011e42:	f001 f90f 	bl	90013064 <__d2b>
90011e46:	f3c4 510a 	ubfx	r1, r4, #20, #11
90011e4a:	4605      	mov	r5, r0
90011e4c:	980e      	ldr	r0, [sp, #56]	; 0x38
90011e4e:	2900      	cmp	r1, #0
90011e50:	d046      	beq.n	90011ee0 <_dtoa_r+0x180>
90011e52:	ee18 4a90 	vmov	r4, s17
90011e56:	f3c4 0413 	ubfx	r4, r4, #0, #20
90011e5a:	ec53 2b18 	vmov	r2, r3, d8
90011e5e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
90011e62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
90011e66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
90011e6a:	2400      	movs	r4, #0
90011e6c:	ec43 2b16 	vmov	d6, r2, r3
90011e70:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
90011e74:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 90012020 <_dtoa_r+0x2c0>
90011e78:	ee36 7b47 	vsub.f64	d7, d6, d7
90011e7c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 90012028 <_dtoa_r+0x2c8>
90011e80:	eea7 6b05 	vfma.f64	d6, d7, d5
90011e84:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 90012030 <_dtoa_r+0x2d0>
90011e88:	ee07 1a90 	vmov	s15, r1
90011e8c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
90011e90:	eeb0 7b46 	vmov.f64	d7, d6
90011e94:	eea4 7b05 	vfma.f64	d7, d4, d5
90011e98:	eefd 6bc7 	vcvt.s32.f64	s13, d7
90011e9c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
90011ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011ea4:	ee16 ba90 	vmov	fp, s13
90011ea8:	940a      	str	r4, [sp, #40]	; 0x28
90011eaa:	d508      	bpl.n	90011ebe <_dtoa_r+0x15e>
90011eac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
90011eb0:	eeb4 6b47 	vcmp.f64	d6, d7
90011eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011eb8:	bf18      	it	ne
90011eba:	f10b 3bff 	addne.w	fp, fp, #4294967295
90011ebe:	f1bb 0f16 	cmp.w	fp, #22
90011ec2:	d82f      	bhi.n	90011f24 <_dtoa_r+0x1c4>
90011ec4:	4b62      	ldr	r3, [pc, #392]	; (90012050 <_dtoa_r+0x2f0>)
90011ec6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
90011eca:	ed93 7b00 	vldr	d7, [r3]
90011ece:	eeb4 8bc7 	vcmpe.f64	d8, d7
90011ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90011ed6:	d501      	bpl.n	90011edc <_dtoa_r+0x17c>
90011ed8:	f10b 3bff 	add.w	fp, fp, #4294967295
90011edc:	2300      	movs	r3, #0
90011ede:	e022      	b.n	90011f26 <_dtoa_r+0x1c6>
90011ee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
90011ee2:	4401      	add	r1, r0
90011ee4:	f201 4332 	addw	r3, r1, #1074	; 0x432
90011ee8:	2b20      	cmp	r3, #32
90011eea:	bfc1      	itttt	gt
90011eec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
90011ef0:	fa04 f303 	lslgt.w	r3, r4, r3
90011ef4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
90011ef8:	fa28 f804 	lsrgt.w	r8, r8, r4
90011efc:	bfd6      	itet	le
90011efe:	f1c3 0320 	rsble	r3, r3, #32
90011f02:	ea43 0808 	orrgt.w	r8, r3, r8
90011f06:	fa08 f803 	lslle.w	r8, r8, r3
90011f0a:	ee07 8a90 	vmov	s15, r8
90011f0e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
90011f12:	3901      	subs	r1, #1
90011f14:	ee17 4a90 	vmov	r4, s15
90011f18:	ec53 2b17 	vmov	r2, r3, d7
90011f1c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
90011f20:	2401      	movs	r4, #1
90011f22:	e7a3      	b.n	90011e6c <_dtoa_r+0x10c>
90011f24:	2301      	movs	r3, #1
90011f26:	930b      	str	r3, [sp, #44]	; 0x2c
90011f28:	1a43      	subs	r3, r0, r1
90011f2a:	1e5a      	subs	r2, r3, #1
90011f2c:	bf45      	ittet	mi
90011f2e:	f1c3 0301 	rsbmi	r3, r3, #1
90011f32:	9304      	strmi	r3, [sp, #16]
90011f34:	2300      	movpl	r3, #0
90011f36:	2300      	movmi	r3, #0
90011f38:	9205      	str	r2, [sp, #20]
90011f3a:	bf54      	ite	pl
90011f3c:	9304      	strpl	r3, [sp, #16]
90011f3e:	9305      	strmi	r3, [sp, #20]
90011f40:	f1bb 0f00 	cmp.w	fp, #0
90011f44:	db18      	blt.n	90011f78 <_dtoa_r+0x218>
90011f46:	9b05      	ldr	r3, [sp, #20]
90011f48:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90011f4c:	445b      	add	r3, fp
90011f4e:	9305      	str	r3, [sp, #20]
90011f50:	2300      	movs	r3, #0
90011f52:	9a06      	ldr	r2, [sp, #24]
90011f54:	2a09      	cmp	r2, #9
90011f56:	d849      	bhi.n	90011fec <_dtoa_r+0x28c>
90011f58:	2a05      	cmp	r2, #5
90011f5a:	bfc4      	itt	gt
90011f5c:	3a04      	subgt	r2, #4
90011f5e:	9206      	strgt	r2, [sp, #24]
90011f60:	9a06      	ldr	r2, [sp, #24]
90011f62:	f1a2 0202 	sub.w	r2, r2, #2
90011f66:	bfcc      	ite	gt
90011f68:	2400      	movgt	r4, #0
90011f6a:	2401      	movle	r4, #1
90011f6c:	2a03      	cmp	r2, #3
90011f6e:	d848      	bhi.n	90012002 <_dtoa_r+0x2a2>
90011f70:	e8df f002 	tbb	[pc, r2]
90011f74:	3a2c2e0b 	.word	0x3a2c2e0b
90011f78:	9b04      	ldr	r3, [sp, #16]
90011f7a:	2200      	movs	r2, #0
90011f7c:	eba3 030b 	sub.w	r3, r3, fp
90011f80:	9304      	str	r3, [sp, #16]
90011f82:	9209      	str	r2, [sp, #36]	; 0x24
90011f84:	f1cb 0300 	rsb	r3, fp, #0
90011f88:	e7e3      	b.n	90011f52 <_dtoa_r+0x1f2>
90011f8a:	2200      	movs	r2, #0
90011f8c:	9207      	str	r2, [sp, #28]
90011f8e:	9a08      	ldr	r2, [sp, #32]
90011f90:	2a00      	cmp	r2, #0
90011f92:	dc39      	bgt.n	90012008 <_dtoa_r+0x2a8>
90011f94:	f04f 0a01 	mov.w	sl, #1
90011f98:	46d1      	mov	r9, sl
90011f9a:	4652      	mov	r2, sl
90011f9c:	f8cd a020 	str.w	sl, [sp, #32]
90011fa0:	6a77      	ldr	r7, [r6, #36]	; 0x24
90011fa2:	2100      	movs	r1, #0
90011fa4:	6079      	str	r1, [r7, #4]
90011fa6:	2004      	movs	r0, #4
90011fa8:	f100 0c14 	add.w	ip, r0, #20
90011fac:	4594      	cmp	ip, r2
90011fae:	6879      	ldr	r1, [r7, #4]
90011fb0:	d92f      	bls.n	90012012 <_dtoa_r+0x2b2>
90011fb2:	4630      	mov	r0, r6
90011fb4:	930d      	str	r3, [sp, #52]	; 0x34
90011fb6:	f000 fd2d 	bl	90012a14 <_Balloc>
90011fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90011fbc:	9001      	str	r0, [sp, #4]
90011fbe:	4602      	mov	r2, r0
90011fc0:	2800      	cmp	r0, #0
90011fc2:	d149      	bne.n	90012058 <_dtoa_r+0x2f8>
90011fc4:	4b23      	ldr	r3, [pc, #140]	; (90012054 <_dtoa_r+0x2f4>)
90011fc6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
90011fca:	e6e1      	b.n	90011d90 <_dtoa_r+0x30>
90011fcc:	2201      	movs	r2, #1
90011fce:	e7dd      	b.n	90011f8c <_dtoa_r+0x22c>
90011fd0:	2200      	movs	r2, #0
90011fd2:	9207      	str	r2, [sp, #28]
90011fd4:	9a08      	ldr	r2, [sp, #32]
90011fd6:	eb0b 0a02 	add.w	sl, fp, r2
90011fda:	f10a 0901 	add.w	r9, sl, #1
90011fde:	464a      	mov	r2, r9
90011fe0:	2a01      	cmp	r2, #1
90011fe2:	bfb8      	it	lt
90011fe4:	2201      	movlt	r2, #1
90011fe6:	e7db      	b.n	90011fa0 <_dtoa_r+0x240>
90011fe8:	2201      	movs	r2, #1
90011fea:	e7f2      	b.n	90011fd2 <_dtoa_r+0x272>
90011fec:	2401      	movs	r4, #1
90011fee:	2200      	movs	r2, #0
90011ff0:	e9cd 2406 	strd	r2, r4, [sp, #24]
90011ff4:	f04f 3aff 	mov.w	sl, #4294967295
90011ff8:	2100      	movs	r1, #0
90011ffa:	46d1      	mov	r9, sl
90011ffc:	2212      	movs	r2, #18
90011ffe:	9108      	str	r1, [sp, #32]
90012000:	e7ce      	b.n	90011fa0 <_dtoa_r+0x240>
90012002:	2201      	movs	r2, #1
90012004:	9207      	str	r2, [sp, #28]
90012006:	e7f5      	b.n	90011ff4 <_dtoa_r+0x294>
90012008:	f8dd a020 	ldr.w	sl, [sp, #32]
9001200c:	46d1      	mov	r9, sl
9001200e:	4652      	mov	r2, sl
90012010:	e7c6      	b.n	90011fa0 <_dtoa_r+0x240>
90012012:	3101      	adds	r1, #1
90012014:	6079      	str	r1, [r7, #4]
90012016:	0040      	lsls	r0, r0, #1
90012018:	e7c6      	b.n	90011fa8 <_dtoa_r+0x248>
9001201a:	bf00      	nop
9001201c:	f3af 8000 	nop.w
90012020:	636f4361 	.word	0x636f4361
90012024:	3fd287a7 	.word	0x3fd287a7
90012028:	8b60c8b3 	.word	0x8b60c8b3
9001202c:	3fc68a28 	.word	0x3fc68a28
90012030:	509f79fb 	.word	0x509f79fb
90012034:	3fd34413 	.word	0x3fd34413
90012038:	9001588d 	.word	0x9001588d
9001203c:	900158a4 	.word	0x900158a4
90012040:	7ff00000 	.word	0x7ff00000
90012044:	90015889 	.word	0x90015889
90012048:	90015880 	.word	0x90015880
9001204c:	9001585d 	.word	0x9001585d
90012050:	90015998 	.word	0x90015998
90012054:	900158ff 	.word	0x900158ff
90012058:	6a72      	ldr	r2, [r6, #36]	; 0x24
9001205a:	9901      	ldr	r1, [sp, #4]
9001205c:	6011      	str	r1, [r2, #0]
9001205e:	f1b9 0f0e 	cmp.w	r9, #14
90012062:	d86c      	bhi.n	9001213e <_dtoa_r+0x3de>
90012064:	2c00      	cmp	r4, #0
90012066:	d06a      	beq.n	9001213e <_dtoa_r+0x3de>
90012068:	f1bb 0f00 	cmp.w	fp, #0
9001206c:	f340 80a0 	ble.w	900121b0 <_dtoa_r+0x450>
90012070:	49c1      	ldr	r1, [pc, #772]	; (90012378 <_dtoa_r+0x618>)
90012072:	f00b 020f 	and.w	r2, fp, #15
90012076:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
9001207a:	f41b 7f80 	tst.w	fp, #256	; 0x100
9001207e:	ed92 7b00 	vldr	d7, [r2]
90012082:	ea4f 112b 	mov.w	r1, fp, asr #4
90012086:	f000 8087 	beq.w	90012198 <_dtoa_r+0x438>
9001208a:	4abc      	ldr	r2, [pc, #752]	; (9001237c <_dtoa_r+0x61c>)
9001208c:	ed92 6b08 	vldr	d6, [r2, #32]
90012090:	ee88 6b06 	vdiv.f64	d6, d8, d6
90012094:	ed8d 6b02 	vstr	d6, [sp, #8]
90012098:	f001 010f 	and.w	r1, r1, #15
9001209c:	2203      	movs	r2, #3
9001209e:	48b7      	ldr	r0, [pc, #732]	; (9001237c <_dtoa_r+0x61c>)
900120a0:	2900      	cmp	r1, #0
900120a2:	d17b      	bne.n	9001219c <_dtoa_r+0x43c>
900120a4:	ed9d 6b02 	vldr	d6, [sp, #8]
900120a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
900120ac:	ed8d 7b02 	vstr	d7, [sp, #8]
900120b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
900120b2:	2900      	cmp	r1, #0
900120b4:	f000 80a2 	beq.w	900121fc <_dtoa_r+0x49c>
900120b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
900120bc:	ed9d 7b02 	vldr	d7, [sp, #8]
900120c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
900120c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900120c8:	f140 8098 	bpl.w	900121fc <_dtoa_r+0x49c>
900120cc:	f1b9 0f00 	cmp.w	r9, #0
900120d0:	f000 8094 	beq.w	900121fc <_dtoa_r+0x49c>
900120d4:	f1ba 0f00 	cmp.w	sl, #0
900120d8:	dd2f      	ble.n	9001213a <_dtoa_r+0x3da>
900120da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
900120de:	ee27 7b06 	vmul.f64	d7, d7, d6
900120e2:	ed8d 7b02 	vstr	d7, [sp, #8]
900120e6:	f10b 37ff 	add.w	r7, fp, #4294967295
900120ea:	3201      	adds	r2, #1
900120ec:	4650      	mov	r0, sl
900120ee:	ed9d 6b02 	vldr	d6, [sp, #8]
900120f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
900120f6:	ee07 2a90 	vmov	s15, r2
900120fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
900120fe:	eea7 5b06 	vfma.f64	d5, d7, d6
90012102:	ee15 4a90 	vmov	r4, s11
90012106:	ec52 1b15 	vmov	r1, r2, d5
9001210a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
9001210e:	2800      	cmp	r0, #0
90012110:	d177      	bne.n	90012202 <_dtoa_r+0x4a2>
90012112:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
90012116:	ee36 6b47 	vsub.f64	d6, d6, d7
9001211a:	ec42 1b17 	vmov	d7, r1, r2
9001211e:	eeb4 6bc7 	vcmpe.f64	d6, d7
90012122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012126:	f300 8263 	bgt.w	900125f0 <_dtoa_r+0x890>
9001212a:	eeb1 7b47 	vneg.f64	d7, d7
9001212e:	eeb4 6bc7 	vcmpe.f64	d6, d7
90012132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012136:	f100 8258 	bmi.w	900125ea <_dtoa_r+0x88a>
9001213a:	ed8d 8b02 	vstr	d8, [sp, #8]
9001213e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90012140:	2a00      	cmp	r2, #0
90012142:	f2c0 811d 	blt.w	90012380 <_dtoa_r+0x620>
90012146:	f1bb 0f0e 	cmp.w	fp, #14
9001214a:	f300 8119 	bgt.w	90012380 <_dtoa_r+0x620>
9001214e:	4b8a      	ldr	r3, [pc, #552]	; (90012378 <_dtoa_r+0x618>)
90012150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
90012154:	ed93 6b00 	vldr	d6, [r3]
90012158:	9b08      	ldr	r3, [sp, #32]
9001215a:	2b00      	cmp	r3, #0
9001215c:	f280 80b7 	bge.w	900122ce <_dtoa_r+0x56e>
90012160:	f1b9 0f00 	cmp.w	r9, #0
90012164:	f300 80b3 	bgt.w	900122ce <_dtoa_r+0x56e>
90012168:	f040 823f 	bne.w	900125ea <_dtoa_r+0x88a>
9001216c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
90012170:	ee26 6b07 	vmul.f64	d6, d6, d7
90012174:	ed9d 7b02 	vldr	d7, [sp, #8]
90012178:	eeb4 6bc7 	vcmpe.f64	d6, d7
9001217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012180:	464c      	mov	r4, r9
90012182:	464f      	mov	r7, r9
90012184:	f280 8215 	bge.w	900125b2 <_dtoa_r+0x852>
90012188:	f8dd 8004 	ldr.w	r8, [sp, #4]
9001218c:	2331      	movs	r3, #49	; 0x31
9001218e:	f808 3b01 	strb.w	r3, [r8], #1
90012192:	f10b 0b01 	add.w	fp, fp, #1
90012196:	e211      	b.n	900125bc <_dtoa_r+0x85c>
90012198:	2202      	movs	r2, #2
9001219a:	e780      	b.n	9001209e <_dtoa_r+0x33e>
9001219c:	07cc      	lsls	r4, r1, #31
9001219e:	d504      	bpl.n	900121aa <_dtoa_r+0x44a>
900121a0:	ed90 6b00 	vldr	d6, [r0]
900121a4:	3201      	adds	r2, #1
900121a6:	ee27 7b06 	vmul.f64	d7, d7, d6
900121aa:	1049      	asrs	r1, r1, #1
900121ac:	3008      	adds	r0, #8
900121ae:	e777      	b.n	900120a0 <_dtoa_r+0x340>
900121b0:	d022      	beq.n	900121f8 <_dtoa_r+0x498>
900121b2:	f1cb 0100 	rsb	r1, fp, #0
900121b6:	4a70      	ldr	r2, [pc, #448]	; (90012378 <_dtoa_r+0x618>)
900121b8:	f001 000f 	and.w	r0, r1, #15
900121bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
900121c0:	ed92 7b00 	vldr	d7, [r2]
900121c4:	ee28 7b07 	vmul.f64	d7, d8, d7
900121c8:	ed8d 7b02 	vstr	d7, [sp, #8]
900121cc:	486b      	ldr	r0, [pc, #428]	; (9001237c <_dtoa_r+0x61c>)
900121ce:	1109      	asrs	r1, r1, #4
900121d0:	2400      	movs	r4, #0
900121d2:	2202      	movs	r2, #2
900121d4:	b929      	cbnz	r1, 900121e2 <_dtoa_r+0x482>
900121d6:	2c00      	cmp	r4, #0
900121d8:	f43f af6a 	beq.w	900120b0 <_dtoa_r+0x350>
900121dc:	ed8d 7b02 	vstr	d7, [sp, #8]
900121e0:	e766      	b.n	900120b0 <_dtoa_r+0x350>
900121e2:	07cf      	lsls	r7, r1, #31
900121e4:	d505      	bpl.n	900121f2 <_dtoa_r+0x492>
900121e6:	ed90 6b00 	vldr	d6, [r0]
900121ea:	3201      	adds	r2, #1
900121ec:	2401      	movs	r4, #1
900121ee:	ee27 7b06 	vmul.f64	d7, d7, d6
900121f2:	1049      	asrs	r1, r1, #1
900121f4:	3008      	adds	r0, #8
900121f6:	e7ed      	b.n	900121d4 <_dtoa_r+0x474>
900121f8:	2202      	movs	r2, #2
900121fa:	e759      	b.n	900120b0 <_dtoa_r+0x350>
900121fc:	465f      	mov	r7, fp
900121fe:	4648      	mov	r0, r9
90012200:	e775      	b.n	900120ee <_dtoa_r+0x38e>
90012202:	ec42 1b17 	vmov	d7, r1, r2
90012206:	4a5c      	ldr	r2, [pc, #368]	; (90012378 <_dtoa_r+0x618>)
90012208:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
9001220c:	ed12 4b02 	vldr	d4, [r2, #-8]
90012210:	9a01      	ldr	r2, [sp, #4]
90012212:	1814      	adds	r4, r2, r0
90012214:	9a07      	ldr	r2, [sp, #28]
90012216:	b352      	cbz	r2, 9001226e <_dtoa_r+0x50e>
90012218:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
9001221c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
90012220:	f8dd 8004 	ldr.w	r8, [sp, #4]
90012224:	ee83 5b04 	vdiv.f64	d5, d3, d4
90012228:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
9001222c:	ee35 7b47 	vsub.f64	d7, d5, d7
90012230:	eefd 4bc6 	vcvt.s32.f64	s9, d6
90012234:	ee14 2a90 	vmov	r2, s9
90012238:	eeb8 5be4 	vcvt.f64.s32	d5, s9
9001223c:	3230      	adds	r2, #48	; 0x30
9001223e:	ee36 6b45 	vsub.f64	d6, d6, d5
90012242:	eeb4 6bc7 	vcmpe.f64	d6, d7
90012246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001224a:	f808 2b01 	strb.w	r2, [r8], #1
9001224e:	d439      	bmi.n	900122c4 <_dtoa_r+0x564>
90012250:	ee32 5b46 	vsub.f64	d5, d2, d6
90012254:	eeb4 5bc7 	vcmpe.f64	d5, d7
90012258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001225c:	d472      	bmi.n	90012344 <_dtoa_r+0x5e4>
9001225e:	45a0      	cmp	r8, r4
90012260:	f43f af6b 	beq.w	9001213a <_dtoa_r+0x3da>
90012264:	ee27 7b03 	vmul.f64	d7, d7, d3
90012268:	ee26 6b03 	vmul.f64	d6, d6, d3
9001226c:	e7e0      	b.n	90012230 <_dtoa_r+0x4d0>
9001226e:	f8dd 8004 	ldr.w	r8, [sp, #4]
90012272:	ee27 7b04 	vmul.f64	d7, d7, d4
90012276:	4621      	mov	r1, r4
90012278:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
9001227c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
90012280:	ee14 2a90 	vmov	r2, s9
90012284:	3230      	adds	r2, #48	; 0x30
90012286:	f808 2b01 	strb.w	r2, [r8], #1
9001228a:	45a0      	cmp	r8, r4
9001228c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
90012290:	ee36 6b45 	vsub.f64	d6, d6, d5
90012294:	d118      	bne.n	900122c8 <_dtoa_r+0x568>
90012296:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
9001229a:	ee37 4b05 	vadd.f64	d4, d7, d5
9001229e:	eeb4 6bc4 	vcmpe.f64	d6, d4
900122a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900122a6:	dc4d      	bgt.n	90012344 <_dtoa_r+0x5e4>
900122a8:	ee35 7b47 	vsub.f64	d7, d5, d7
900122ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
900122b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900122b4:	f57f af41 	bpl.w	9001213a <_dtoa_r+0x3da>
900122b8:	4688      	mov	r8, r1
900122ba:	3901      	subs	r1, #1
900122bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
900122c0:	2b30      	cmp	r3, #48	; 0x30
900122c2:	d0f9      	beq.n	900122b8 <_dtoa_r+0x558>
900122c4:	46bb      	mov	fp, r7
900122c6:	e02a      	b.n	9001231e <_dtoa_r+0x5be>
900122c8:	ee26 6b03 	vmul.f64	d6, d6, d3
900122cc:	e7d6      	b.n	9001227c <_dtoa_r+0x51c>
900122ce:	ed9d 7b02 	vldr	d7, [sp, #8]
900122d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
900122d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
900122da:	ee87 5b06 	vdiv.f64	d5, d7, d6
900122de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
900122e2:	ee15 3a10 	vmov	r3, s10
900122e6:	3330      	adds	r3, #48	; 0x30
900122e8:	f808 3b01 	strb.w	r3, [r8], #1
900122ec:	9b01      	ldr	r3, [sp, #4]
900122ee:	eba8 0303 	sub.w	r3, r8, r3
900122f2:	4599      	cmp	r9, r3
900122f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
900122f8:	eea3 7b46 	vfms.f64	d7, d3, d6
900122fc:	d133      	bne.n	90012366 <_dtoa_r+0x606>
900122fe:	ee37 7b07 	vadd.f64	d7, d7, d7
90012302:	eeb4 7bc6 	vcmpe.f64	d7, d6
90012306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001230a:	dc1a      	bgt.n	90012342 <_dtoa_r+0x5e2>
9001230c:	eeb4 7b46 	vcmp.f64	d7, d6
90012310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012314:	d103      	bne.n	9001231e <_dtoa_r+0x5be>
90012316:	ee15 3a10 	vmov	r3, s10
9001231a:	07d9      	lsls	r1, r3, #31
9001231c:	d411      	bmi.n	90012342 <_dtoa_r+0x5e2>
9001231e:	4629      	mov	r1, r5
90012320:	4630      	mov	r0, r6
90012322:	f000 fbb7 	bl	90012a94 <_Bfree>
90012326:	2300      	movs	r3, #0
90012328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001232a:	f888 3000 	strb.w	r3, [r8]
9001232e:	f10b 0301 	add.w	r3, fp, #1
90012332:	6013      	str	r3, [r2, #0]
90012334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90012336:	2b00      	cmp	r3, #0
90012338:	f43f ad61 	beq.w	90011dfe <_dtoa_r+0x9e>
9001233c:	f8c3 8000 	str.w	r8, [r3]
90012340:	e55d      	b.n	90011dfe <_dtoa_r+0x9e>
90012342:	465f      	mov	r7, fp
90012344:	4643      	mov	r3, r8
90012346:	4698      	mov	r8, r3
90012348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
9001234c:	2a39      	cmp	r2, #57	; 0x39
9001234e:	d106      	bne.n	9001235e <_dtoa_r+0x5fe>
90012350:	9a01      	ldr	r2, [sp, #4]
90012352:	429a      	cmp	r2, r3
90012354:	d1f7      	bne.n	90012346 <_dtoa_r+0x5e6>
90012356:	9901      	ldr	r1, [sp, #4]
90012358:	2230      	movs	r2, #48	; 0x30
9001235a:	3701      	adds	r7, #1
9001235c:	700a      	strb	r2, [r1, #0]
9001235e:	781a      	ldrb	r2, [r3, #0]
90012360:	3201      	adds	r2, #1
90012362:	701a      	strb	r2, [r3, #0]
90012364:	e7ae      	b.n	900122c4 <_dtoa_r+0x564>
90012366:	ee27 7b04 	vmul.f64	d7, d7, d4
9001236a:	eeb5 7b40 	vcmp.f64	d7, #0.0
9001236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012372:	d1b2      	bne.n	900122da <_dtoa_r+0x57a>
90012374:	e7d3      	b.n	9001231e <_dtoa_r+0x5be>
90012376:	bf00      	nop
90012378:	90015998 	.word	0x90015998
9001237c:	90015970 	.word	0x90015970
90012380:	9907      	ldr	r1, [sp, #28]
90012382:	2900      	cmp	r1, #0
90012384:	f000 80d0 	beq.w	90012528 <_dtoa_r+0x7c8>
90012388:	9906      	ldr	r1, [sp, #24]
9001238a:	2901      	cmp	r1, #1
9001238c:	f300 80b4 	bgt.w	900124f8 <_dtoa_r+0x798>
90012390:	990a      	ldr	r1, [sp, #40]	; 0x28
90012392:	2900      	cmp	r1, #0
90012394:	f000 80ac 	beq.w	900124f0 <_dtoa_r+0x790>
90012398:	f202 4233 	addw	r2, r2, #1075	; 0x433
9001239c:	f8dd 8010 	ldr.w	r8, [sp, #16]
900123a0:	461c      	mov	r4, r3
900123a2:	930a      	str	r3, [sp, #40]	; 0x28
900123a4:	9b04      	ldr	r3, [sp, #16]
900123a6:	4413      	add	r3, r2
900123a8:	9304      	str	r3, [sp, #16]
900123aa:	9b05      	ldr	r3, [sp, #20]
900123ac:	2101      	movs	r1, #1
900123ae:	4413      	add	r3, r2
900123b0:	4630      	mov	r0, r6
900123b2:	9305      	str	r3, [sp, #20]
900123b4:	f000 fc26 	bl	90012c04 <__i2b>
900123b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900123ba:	4607      	mov	r7, r0
900123bc:	f1b8 0f00 	cmp.w	r8, #0
900123c0:	dd0d      	ble.n	900123de <_dtoa_r+0x67e>
900123c2:	9a05      	ldr	r2, [sp, #20]
900123c4:	2a00      	cmp	r2, #0
900123c6:	dd0a      	ble.n	900123de <_dtoa_r+0x67e>
900123c8:	4542      	cmp	r2, r8
900123ca:	9904      	ldr	r1, [sp, #16]
900123cc:	bfa8      	it	ge
900123ce:	4642      	movge	r2, r8
900123d0:	1a89      	subs	r1, r1, r2
900123d2:	9104      	str	r1, [sp, #16]
900123d4:	9905      	ldr	r1, [sp, #20]
900123d6:	eba8 0802 	sub.w	r8, r8, r2
900123da:	1a8a      	subs	r2, r1, r2
900123dc:	9205      	str	r2, [sp, #20]
900123de:	b303      	cbz	r3, 90012422 <_dtoa_r+0x6c2>
900123e0:	9a07      	ldr	r2, [sp, #28]
900123e2:	2a00      	cmp	r2, #0
900123e4:	f000 80a5 	beq.w	90012532 <_dtoa_r+0x7d2>
900123e8:	2c00      	cmp	r4, #0
900123ea:	dd13      	ble.n	90012414 <_dtoa_r+0x6b4>
900123ec:	4639      	mov	r1, r7
900123ee:	4622      	mov	r2, r4
900123f0:	4630      	mov	r0, r6
900123f2:	930d      	str	r3, [sp, #52]	; 0x34
900123f4:	f000 fcc6 	bl	90012d84 <__pow5mult>
900123f8:	462a      	mov	r2, r5
900123fa:	4601      	mov	r1, r0
900123fc:	4607      	mov	r7, r0
900123fe:	4630      	mov	r0, r6
90012400:	f000 fc16 	bl	90012c30 <__multiply>
90012404:	4629      	mov	r1, r5
90012406:	900a      	str	r0, [sp, #40]	; 0x28
90012408:	4630      	mov	r0, r6
9001240a:	f000 fb43 	bl	90012a94 <_Bfree>
9001240e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90012410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012412:	4615      	mov	r5, r2
90012414:	1b1a      	subs	r2, r3, r4
90012416:	d004      	beq.n	90012422 <_dtoa_r+0x6c2>
90012418:	4629      	mov	r1, r5
9001241a:	4630      	mov	r0, r6
9001241c:	f000 fcb2 	bl	90012d84 <__pow5mult>
90012420:	4605      	mov	r5, r0
90012422:	2101      	movs	r1, #1
90012424:	4630      	mov	r0, r6
90012426:	f000 fbed 	bl	90012c04 <__i2b>
9001242a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001242c:	2b00      	cmp	r3, #0
9001242e:	4604      	mov	r4, r0
90012430:	f340 8081 	ble.w	90012536 <_dtoa_r+0x7d6>
90012434:	461a      	mov	r2, r3
90012436:	4601      	mov	r1, r0
90012438:	4630      	mov	r0, r6
9001243a:	f000 fca3 	bl	90012d84 <__pow5mult>
9001243e:	9b06      	ldr	r3, [sp, #24]
90012440:	2b01      	cmp	r3, #1
90012442:	4604      	mov	r4, r0
90012444:	dd7a      	ble.n	9001253c <_dtoa_r+0x7dc>
90012446:	2300      	movs	r3, #0
90012448:	930a      	str	r3, [sp, #40]	; 0x28
9001244a:	6922      	ldr	r2, [r4, #16]
9001244c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
90012450:	6910      	ldr	r0, [r2, #16]
90012452:	f000 fb87 	bl	90012b64 <__hi0bits>
90012456:	f1c0 0020 	rsb	r0, r0, #32
9001245a:	9b05      	ldr	r3, [sp, #20]
9001245c:	4418      	add	r0, r3
9001245e:	f010 001f 	ands.w	r0, r0, #31
90012462:	f000 808c 	beq.w	9001257e <_dtoa_r+0x81e>
90012466:	f1c0 0220 	rsb	r2, r0, #32
9001246a:	2a04      	cmp	r2, #4
9001246c:	f340 8085 	ble.w	9001257a <_dtoa_r+0x81a>
90012470:	f1c0 001c 	rsb	r0, r0, #28
90012474:	9b04      	ldr	r3, [sp, #16]
90012476:	4403      	add	r3, r0
90012478:	9304      	str	r3, [sp, #16]
9001247a:	9b05      	ldr	r3, [sp, #20]
9001247c:	4403      	add	r3, r0
9001247e:	4480      	add	r8, r0
90012480:	9305      	str	r3, [sp, #20]
90012482:	9b04      	ldr	r3, [sp, #16]
90012484:	2b00      	cmp	r3, #0
90012486:	dd05      	ble.n	90012494 <_dtoa_r+0x734>
90012488:	4629      	mov	r1, r5
9001248a:	461a      	mov	r2, r3
9001248c:	4630      	mov	r0, r6
9001248e:	f000 fcd3 	bl	90012e38 <__lshift>
90012492:	4605      	mov	r5, r0
90012494:	9b05      	ldr	r3, [sp, #20]
90012496:	2b00      	cmp	r3, #0
90012498:	dd05      	ble.n	900124a6 <_dtoa_r+0x746>
9001249a:	4621      	mov	r1, r4
9001249c:	461a      	mov	r2, r3
9001249e:	4630      	mov	r0, r6
900124a0:	f000 fcca 	bl	90012e38 <__lshift>
900124a4:	4604      	mov	r4, r0
900124a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900124a8:	2b00      	cmp	r3, #0
900124aa:	d06a      	beq.n	90012582 <_dtoa_r+0x822>
900124ac:	4621      	mov	r1, r4
900124ae:	4628      	mov	r0, r5
900124b0:	f000 fd32 	bl	90012f18 <__mcmp>
900124b4:	2800      	cmp	r0, #0
900124b6:	da64      	bge.n	90012582 <_dtoa_r+0x822>
900124b8:	2300      	movs	r3, #0
900124ba:	4629      	mov	r1, r5
900124bc:	220a      	movs	r2, #10
900124be:	4630      	mov	r0, r6
900124c0:	f000 fb0a 	bl	90012ad8 <__multadd>
900124c4:	9b07      	ldr	r3, [sp, #28]
900124c6:	f10b 3bff 	add.w	fp, fp, #4294967295
900124ca:	4605      	mov	r5, r0
900124cc:	2b00      	cmp	r3, #0
900124ce:	f000 8191 	beq.w	900127f4 <_dtoa_r+0xa94>
900124d2:	4639      	mov	r1, r7
900124d4:	2300      	movs	r3, #0
900124d6:	220a      	movs	r2, #10
900124d8:	4630      	mov	r0, r6
900124da:	f000 fafd 	bl	90012ad8 <__multadd>
900124de:	f1ba 0f00 	cmp.w	sl, #0
900124e2:	4607      	mov	r7, r0
900124e4:	f300 808d 	bgt.w	90012602 <_dtoa_r+0x8a2>
900124e8:	9b06      	ldr	r3, [sp, #24]
900124ea:	2b02      	cmp	r3, #2
900124ec:	dc50      	bgt.n	90012590 <_dtoa_r+0x830>
900124ee:	e088      	b.n	90012602 <_dtoa_r+0x8a2>
900124f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900124f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
900124f6:	e751      	b.n	9001239c <_dtoa_r+0x63c>
900124f8:	f109 34ff 	add.w	r4, r9, #4294967295
900124fc:	42a3      	cmp	r3, r4
900124fe:	bfbf      	itttt	lt
90012500:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
90012502:	1ae3      	sublt	r3, r4, r3
90012504:	18d2      	addlt	r2, r2, r3
90012506:	9209      	strlt	r2, [sp, #36]	; 0x24
90012508:	bfb6      	itet	lt
9001250a:	4623      	movlt	r3, r4
9001250c:	1b1c      	subge	r4, r3, r4
9001250e:	2400      	movlt	r4, #0
90012510:	f1b9 0f00 	cmp.w	r9, #0
90012514:	bfb5      	itete	lt
90012516:	9a04      	ldrlt	r2, [sp, #16]
90012518:	f8dd 8010 	ldrge.w	r8, [sp, #16]
9001251c:	eba2 0809 	sublt.w	r8, r2, r9
90012520:	464a      	movge	r2, r9
90012522:	bfb8      	it	lt
90012524:	2200      	movlt	r2, #0
90012526:	e73c      	b.n	900123a2 <_dtoa_r+0x642>
90012528:	f8dd 8010 	ldr.w	r8, [sp, #16]
9001252c:	9f07      	ldr	r7, [sp, #28]
9001252e:	461c      	mov	r4, r3
90012530:	e744      	b.n	900123bc <_dtoa_r+0x65c>
90012532:	461a      	mov	r2, r3
90012534:	e770      	b.n	90012418 <_dtoa_r+0x6b8>
90012536:	9b06      	ldr	r3, [sp, #24]
90012538:	2b01      	cmp	r3, #1
9001253a:	dc18      	bgt.n	9001256e <_dtoa_r+0x80e>
9001253c:	9b02      	ldr	r3, [sp, #8]
9001253e:	b9b3      	cbnz	r3, 9001256e <_dtoa_r+0x80e>
90012540:	9b03      	ldr	r3, [sp, #12]
90012542:	f3c3 0213 	ubfx	r2, r3, #0, #20
90012546:	b9a2      	cbnz	r2, 90012572 <_dtoa_r+0x812>
90012548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
9001254c:	0d12      	lsrs	r2, r2, #20
9001254e:	0512      	lsls	r2, r2, #20
90012550:	b18a      	cbz	r2, 90012576 <_dtoa_r+0x816>
90012552:	9b04      	ldr	r3, [sp, #16]
90012554:	3301      	adds	r3, #1
90012556:	9304      	str	r3, [sp, #16]
90012558:	9b05      	ldr	r3, [sp, #20]
9001255a:	3301      	adds	r3, #1
9001255c:	9305      	str	r3, [sp, #20]
9001255e:	2301      	movs	r3, #1
90012560:	930a      	str	r3, [sp, #40]	; 0x28
90012562:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012564:	2b00      	cmp	r3, #0
90012566:	f47f af70 	bne.w	9001244a <_dtoa_r+0x6ea>
9001256a:	2001      	movs	r0, #1
9001256c:	e775      	b.n	9001245a <_dtoa_r+0x6fa>
9001256e:	2300      	movs	r3, #0
90012570:	e7f6      	b.n	90012560 <_dtoa_r+0x800>
90012572:	9b02      	ldr	r3, [sp, #8]
90012574:	e7f4      	b.n	90012560 <_dtoa_r+0x800>
90012576:	920a      	str	r2, [sp, #40]	; 0x28
90012578:	e7f3      	b.n	90012562 <_dtoa_r+0x802>
9001257a:	d082      	beq.n	90012482 <_dtoa_r+0x722>
9001257c:	4610      	mov	r0, r2
9001257e:	301c      	adds	r0, #28
90012580:	e778      	b.n	90012474 <_dtoa_r+0x714>
90012582:	f1b9 0f00 	cmp.w	r9, #0
90012586:	dc37      	bgt.n	900125f8 <_dtoa_r+0x898>
90012588:	9b06      	ldr	r3, [sp, #24]
9001258a:	2b02      	cmp	r3, #2
9001258c:	dd34      	ble.n	900125f8 <_dtoa_r+0x898>
9001258e:	46ca      	mov	sl, r9
90012590:	f1ba 0f00 	cmp.w	sl, #0
90012594:	d10d      	bne.n	900125b2 <_dtoa_r+0x852>
90012596:	4621      	mov	r1, r4
90012598:	4653      	mov	r3, sl
9001259a:	2205      	movs	r2, #5
9001259c:	4630      	mov	r0, r6
9001259e:	f000 fa9b 	bl	90012ad8 <__multadd>
900125a2:	4601      	mov	r1, r0
900125a4:	4604      	mov	r4, r0
900125a6:	4628      	mov	r0, r5
900125a8:	f000 fcb6 	bl	90012f18 <__mcmp>
900125ac:	2800      	cmp	r0, #0
900125ae:	f73f adeb 	bgt.w	90012188 <_dtoa_r+0x428>
900125b2:	9b08      	ldr	r3, [sp, #32]
900125b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
900125b8:	ea6f 0b03 	mvn.w	fp, r3
900125bc:	f04f 0900 	mov.w	r9, #0
900125c0:	4621      	mov	r1, r4
900125c2:	4630      	mov	r0, r6
900125c4:	f000 fa66 	bl	90012a94 <_Bfree>
900125c8:	2f00      	cmp	r7, #0
900125ca:	f43f aea8 	beq.w	9001231e <_dtoa_r+0x5be>
900125ce:	f1b9 0f00 	cmp.w	r9, #0
900125d2:	d005      	beq.n	900125e0 <_dtoa_r+0x880>
900125d4:	45b9      	cmp	r9, r7
900125d6:	d003      	beq.n	900125e0 <_dtoa_r+0x880>
900125d8:	4649      	mov	r1, r9
900125da:	4630      	mov	r0, r6
900125dc:	f000 fa5a 	bl	90012a94 <_Bfree>
900125e0:	4639      	mov	r1, r7
900125e2:	4630      	mov	r0, r6
900125e4:	f000 fa56 	bl	90012a94 <_Bfree>
900125e8:	e699      	b.n	9001231e <_dtoa_r+0x5be>
900125ea:	2400      	movs	r4, #0
900125ec:	4627      	mov	r7, r4
900125ee:	e7e0      	b.n	900125b2 <_dtoa_r+0x852>
900125f0:	46bb      	mov	fp, r7
900125f2:	4604      	mov	r4, r0
900125f4:	4607      	mov	r7, r0
900125f6:	e5c7      	b.n	90012188 <_dtoa_r+0x428>
900125f8:	9b07      	ldr	r3, [sp, #28]
900125fa:	46ca      	mov	sl, r9
900125fc:	2b00      	cmp	r3, #0
900125fe:	f000 8100 	beq.w	90012802 <_dtoa_r+0xaa2>
90012602:	f1b8 0f00 	cmp.w	r8, #0
90012606:	dd05      	ble.n	90012614 <_dtoa_r+0x8b4>
90012608:	4639      	mov	r1, r7
9001260a:	4642      	mov	r2, r8
9001260c:	4630      	mov	r0, r6
9001260e:	f000 fc13 	bl	90012e38 <__lshift>
90012612:	4607      	mov	r7, r0
90012614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90012616:	2b00      	cmp	r3, #0
90012618:	d05d      	beq.n	900126d6 <_dtoa_r+0x976>
9001261a:	6879      	ldr	r1, [r7, #4]
9001261c:	4630      	mov	r0, r6
9001261e:	f000 f9f9 	bl	90012a14 <_Balloc>
90012622:	4680      	mov	r8, r0
90012624:	b928      	cbnz	r0, 90012632 <_dtoa_r+0x8d2>
90012626:	4b82      	ldr	r3, [pc, #520]	; (90012830 <_dtoa_r+0xad0>)
90012628:	4602      	mov	r2, r0
9001262a:	f240 21ea 	movw	r1, #746	; 0x2ea
9001262e:	f7ff bbaf 	b.w	90011d90 <_dtoa_r+0x30>
90012632:	693a      	ldr	r2, [r7, #16]
90012634:	3202      	adds	r2, #2
90012636:	0092      	lsls	r2, r2, #2
90012638:	f107 010c 	add.w	r1, r7, #12
9001263c:	300c      	adds	r0, #12
9001263e:	f7fe fcfa 	bl	90011036 <memcpy>
90012642:	2201      	movs	r2, #1
90012644:	4641      	mov	r1, r8
90012646:	4630      	mov	r0, r6
90012648:	f000 fbf6 	bl	90012e38 <__lshift>
9001264c:	9b01      	ldr	r3, [sp, #4]
9001264e:	3301      	adds	r3, #1
90012650:	9304      	str	r3, [sp, #16]
90012652:	9b01      	ldr	r3, [sp, #4]
90012654:	4453      	add	r3, sl
90012656:	9308      	str	r3, [sp, #32]
90012658:	9b02      	ldr	r3, [sp, #8]
9001265a:	f003 0301 	and.w	r3, r3, #1
9001265e:	46b9      	mov	r9, r7
90012660:	9307      	str	r3, [sp, #28]
90012662:	4607      	mov	r7, r0
90012664:	9b04      	ldr	r3, [sp, #16]
90012666:	4621      	mov	r1, r4
90012668:	3b01      	subs	r3, #1
9001266a:	4628      	mov	r0, r5
9001266c:	9302      	str	r3, [sp, #8]
9001266e:	f7ff fae9 	bl	90011c44 <quorem>
90012672:	4603      	mov	r3, r0
90012674:	3330      	adds	r3, #48	; 0x30
90012676:	9005      	str	r0, [sp, #20]
90012678:	4649      	mov	r1, r9
9001267a:	4628      	mov	r0, r5
9001267c:	9309      	str	r3, [sp, #36]	; 0x24
9001267e:	f000 fc4b 	bl	90012f18 <__mcmp>
90012682:	463a      	mov	r2, r7
90012684:	4682      	mov	sl, r0
90012686:	4621      	mov	r1, r4
90012688:	4630      	mov	r0, r6
9001268a:	f000 fc61 	bl	90012f50 <__mdiff>
9001268e:	68c2      	ldr	r2, [r0, #12]
90012690:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012692:	4680      	mov	r8, r0
90012694:	bb0a      	cbnz	r2, 900126da <_dtoa_r+0x97a>
90012696:	4601      	mov	r1, r0
90012698:	4628      	mov	r0, r5
9001269a:	f000 fc3d 	bl	90012f18 <__mcmp>
9001269e:	9b09      	ldr	r3, [sp, #36]	; 0x24
900126a0:	4602      	mov	r2, r0
900126a2:	4641      	mov	r1, r8
900126a4:	4630      	mov	r0, r6
900126a6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
900126aa:	f000 f9f3 	bl	90012a94 <_Bfree>
900126ae:	9b06      	ldr	r3, [sp, #24]
900126b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900126b2:	f8dd 8010 	ldr.w	r8, [sp, #16]
900126b6:	ea43 0102 	orr.w	r1, r3, r2
900126ba:	9b07      	ldr	r3, [sp, #28]
900126bc:	430b      	orrs	r3, r1
900126be:	9b09      	ldr	r3, [sp, #36]	; 0x24
900126c0:	d10d      	bne.n	900126de <_dtoa_r+0x97e>
900126c2:	2b39      	cmp	r3, #57	; 0x39
900126c4:	d029      	beq.n	9001271a <_dtoa_r+0x9ba>
900126c6:	f1ba 0f00 	cmp.w	sl, #0
900126ca:	dd01      	ble.n	900126d0 <_dtoa_r+0x970>
900126cc:	9b05      	ldr	r3, [sp, #20]
900126ce:	3331      	adds	r3, #49	; 0x31
900126d0:	9a02      	ldr	r2, [sp, #8]
900126d2:	7013      	strb	r3, [r2, #0]
900126d4:	e774      	b.n	900125c0 <_dtoa_r+0x860>
900126d6:	4638      	mov	r0, r7
900126d8:	e7b8      	b.n	9001264c <_dtoa_r+0x8ec>
900126da:	2201      	movs	r2, #1
900126dc:	e7e1      	b.n	900126a2 <_dtoa_r+0x942>
900126de:	f1ba 0f00 	cmp.w	sl, #0
900126e2:	db06      	blt.n	900126f2 <_dtoa_r+0x992>
900126e4:	9906      	ldr	r1, [sp, #24]
900126e6:	ea41 0a0a 	orr.w	sl, r1, sl
900126ea:	9907      	ldr	r1, [sp, #28]
900126ec:	ea5a 0101 	orrs.w	r1, sl, r1
900126f0:	d120      	bne.n	90012734 <_dtoa_r+0x9d4>
900126f2:	2a00      	cmp	r2, #0
900126f4:	ddec      	ble.n	900126d0 <_dtoa_r+0x970>
900126f6:	4629      	mov	r1, r5
900126f8:	2201      	movs	r2, #1
900126fa:	4630      	mov	r0, r6
900126fc:	9304      	str	r3, [sp, #16]
900126fe:	f000 fb9b 	bl	90012e38 <__lshift>
90012702:	4621      	mov	r1, r4
90012704:	4605      	mov	r5, r0
90012706:	f000 fc07 	bl	90012f18 <__mcmp>
9001270a:	2800      	cmp	r0, #0
9001270c:	9b04      	ldr	r3, [sp, #16]
9001270e:	dc02      	bgt.n	90012716 <_dtoa_r+0x9b6>
90012710:	d1de      	bne.n	900126d0 <_dtoa_r+0x970>
90012712:	07da      	lsls	r2, r3, #31
90012714:	d5dc      	bpl.n	900126d0 <_dtoa_r+0x970>
90012716:	2b39      	cmp	r3, #57	; 0x39
90012718:	d1d8      	bne.n	900126cc <_dtoa_r+0x96c>
9001271a:	9a02      	ldr	r2, [sp, #8]
9001271c:	2339      	movs	r3, #57	; 0x39
9001271e:	7013      	strb	r3, [r2, #0]
90012720:	4643      	mov	r3, r8
90012722:	4698      	mov	r8, r3
90012724:	3b01      	subs	r3, #1
90012726:	f818 2c01 	ldrb.w	r2, [r8, #-1]
9001272a:	2a39      	cmp	r2, #57	; 0x39
9001272c:	d051      	beq.n	900127d2 <_dtoa_r+0xa72>
9001272e:	3201      	adds	r2, #1
90012730:	701a      	strb	r2, [r3, #0]
90012732:	e745      	b.n	900125c0 <_dtoa_r+0x860>
90012734:	2a00      	cmp	r2, #0
90012736:	dd03      	ble.n	90012740 <_dtoa_r+0x9e0>
90012738:	2b39      	cmp	r3, #57	; 0x39
9001273a:	d0ee      	beq.n	9001271a <_dtoa_r+0x9ba>
9001273c:	3301      	adds	r3, #1
9001273e:	e7c7      	b.n	900126d0 <_dtoa_r+0x970>
90012740:	9a04      	ldr	r2, [sp, #16]
90012742:	9908      	ldr	r1, [sp, #32]
90012744:	f802 3c01 	strb.w	r3, [r2, #-1]
90012748:	428a      	cmp	r2, r1
9001274a:	d02b      	beq.n	900127a4 <_dtoa_r+0xa44>
9001274c:	4629      	mov	r1, r5
9001274e:	2300      	movs	r3, #0
90012750:	220a      	movs	r2, #10
90012752:	4630      	mov	r0, r6
90012754:	f000 f9c0 	bl	90012ad8 <__multadd>
90012758:	45b9      	cmp	r9, r7
9001275a:	4605      	mov	r5, r0
9001275c:	f04f 0300 	mov.w	r3, #0
90012760:	f04f 020a 	mov.w	r2, #10
90012764:	4649      	mov	r1, r9
90012766:	4630      	mov	r0, r6
90012768:	d107      	bne.n	9001277a <_dtoa_r+0xa1a>
9001276a:	f000 f9b5 	bl	90012ad8 <__multadd>
9001276e:	4681      	mov	r9, r0
90012770:	4607      	mov	r7, r0
90012772:	9b04      	ldr	r3, [sp, #16]
90012774:	3301      	adds	r3, #1
90012776:	9304      	str	r3, [sp, #16]
90012778:	e774      	b.n	90012664 <_dtoa_r+0x904>
9001277a:	f000 f9ad 	bl	90012ad8 <__multadd>
9001277e:	4639      	mov	r1, r7
90012780:	4681      	mov	r9, r0
90012782:	2300      	movs	r3, #0
90012784:	220a      	movs	r2, #10
90012786:	4630      	mov	r0, r6
90012788:	f000 f9a6 	bl	90012ad8 <__multadd>
9001278c:	4607      	mov	r7, r0
9001278e:	e7f0      	b.n	90012772 <_dtoa_r+0xa12>
90012790:	f1ba 0f00 	cmp.w	sl, #0
90012794:	9a01      	ldr	r2, [sp, #4]
90012796:	bfcc      	ite	gt
90012798:	46d0      	movgt	r8, sl
9001279a:	f04f 0801 	movle.w	r8, #1
9001279e:	4490      	add	r8, r2
900127a0:	f04f 0900 	mov.w	r9, #0
900127a4:	4629      	mov	r1, r5
900127a6:	2201      	movs	r2, #1
900127a8:	4630      	mov	r0, r6
900127aa:	9302      	str	r3, [sp, #8]
900127ac:	f000 fb44 	bl	90012e38 <__lshift>
900127b0:	4621      	mov	r1, r4
900127b2:	4605      	mov	r5, r0
900127b4:	f000 fbb0 	bl	90012f18 <__mcmp>
900127b8:	2800      	cmp	r0, #0
900127ba:	dcb1      	bgt.n	90012720 <_dtoa_r+0x9c0>
900127bc:	d102      	bne.n	900127c4 <_dtoa_r+0xa64>
900127be:	9b02      	ldr	r3, [sp, #8]
900127c0:	07db      	lsls	r3, r3, #31
900127c2:	d4ad      	bmi.n	90012720 <_dtoa_r+0x9c0>
900127c4:	4643      	mov	r3, r8
900127c6:	4698      	mov	r8, r3
900127c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
900127cc:	2a30      	cmp	r2, #48	; 0x30
900127ce:	d0fa      	beq.n	900127c6 <_dtoa_r+0xa66>
900127d0:	e6f6      	b.n	900125c0 <_dtoa_r+0x860>
900127d2:	9a01      	ldr	r2, [sp, #4]
900127d4:	429a      	cmp	r2, r3
900127d6:	d1a4      	bne.n	90012722 <_dtoa_r+0x9c2>
900127d8:	f10b 0b01 	add.w	fp, fp, #1
900127dc:	2331      	movs	r3, #49	; 0x31
900127de:	e778      	b.n	900126d2 <_dtoa_r+0x972>
900127e0:	4b14      	ldr	r3, [pc, #80]	; (90012834 <_dtoa_r+0xad4>)
900127e2:	f7ff bb27 	b.w	90011e34 <_dtoa_r+0xd4>
900127e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900127e8:	2b00      	cmp	r3, #0
900127ea:	f47f ab03 	bne.w	90011df4 <_dtoa_r+0x94>
900127ee:	4b12      	ldr	r3, [pc, #72]	; (90012838 <_dtoa_r+0xad8>)
900127f0:	f7ff bb20 	b.w	90011e34 <_dtoa_r+0xd4>
900127f4:	f1ba 0f00 	cmp.w	sl, #0
900127f8:	dc03      	bgt.n	90012802 <_dtoa_r+0xaa2>
900127fa:	9b06      	ldr	r3, [sp, #24]
900127fc:	2b02      	cmp	r3, #2
900127fe:	f73f aec7 	bgt.w	90012590 <_dtoa_r+0x830>
90012802:	f8dd 8004 	ldr.w	r8, [sp, #4]
90012806:	4621      	mov	r1, r4
90012808:	4628      	mov	r0, r5
9001280a:	f7ff fa1b 	bl	90011c44 <quorem>
9001280e:	f100 0330 	add.w	r3, r0, #48	; 0x30
90012812:	f808 3b01 	strb.w	r3, [r8], #1
90012816:	9a01      	ldr	r2, [sp, #4]
90012818:	eba8 0202 	sub.w	r2, r8, r2
9001281c:	4592      	cmp	sl, r2
9001281e:	ddb7      	ble.n	90012790 <_dtoa_r+0xa30>
90012820:	4629      	mov	r1, r5
90012822:	2300      	movs	r3, #0
90012824:	220a      	movs	r2, #10
90012826:	4630      	mov	r0, r6
90012828:	f000 f956 	bl	90012ad8 <__multadd>
9001282c:	4605      	mov	r5, r0
9001282e:	e7ea      	b.n	90012806 <_dtoa_r+0xaa6>
90012830:	900158ff 	.word	0x900158ff
90012834:	9001585c 	.word	0x9001585c
90012838:	90015880 	.word	0x90015880

9001283c <__sflush_r>:
9001283c:	898a      	ldrh	r2, [r1, #12]
9001283e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012842:	4605      	mov	r5, r0
90012844:	0710      	lsls	r0, r2, #28
90012846:	460c      	mov	r4, r1
90012848:	d458      	bmi.n	900128fc <__sflush_r+0xc0>
9001284a:	684b      	ldr	r3, [r1, #4]
9001284c:	2b00      	cmp	r3, #0
9001284e:	dc05      	bgt.n	9001285c <__sflush_r+0x20>
90012850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90012852:	2b00      	cmp	r3, #0
90012854:	dc02      	bgt.n	9001285c <__sflush_r+0x20>
90012856:	2000      	movs	r0, #0
90012858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001285c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9001285e:	2e00      	cmp	r6, #0
90012860:	d0f9      	beq.n	90012856 <__sflush_r+0x1a>
90012862:	2300      	movs	r3, #0
90012864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90012868:	682f      	ldr	r7, [r5, #0]
9001286a:	602b      	str	r3, [r5, #0]
9001286c:	d032      	beq.n	900128d4 <__sflush_r+0x98>
9001286e:	6d60      	ldr	r0, [r4, #84]	; 0x54
90012870:	89a3      	ldrh	r3, [r4, #12]
90012872:	075a      	lsls	r2, r3, #29
90012874:	d505      	bpl.n	90012882 <__sflush_r+0x46>
90012876:	6863      	ldr	r3, [r4, #4]
90012878:	1ac0      	subs	r0, r0, r3
9001287a:	6b63      	ldr	r3, [r4, #52]	; 0x34
9001287c:	b10b      	cbz	r3, 90012882 <__sflush_r+0x46>
9001287e:	6c23      	ldr	r3, [r4, #64]	; 0x40
90012880:	1ac0      	subs	r0, r0, r3
90012882:	2300      	movs	r3, #0
90012884:	4602      	mov	r2, r0
90012886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90012888:	6a21      	ldr	r1, [r4, #32]
9001288a:	4628      	mov	r0, r5
9001288c:	47b0      	blx	r6
9001288e:	1c43      	adds	r3, r0, #1
90012890:	89a3      	ldrh	r3, [r4, #12]
90012892:	d106      	bne.n	900128a2 <__sflush_r+0x66>
90012894:	6829      	ldr	r1, [r5, #0]
90012896:	291d      	cmp	r1, #29
90012898:	d82c      	bhi.n	900128f4 <__sflush_r+0xb8>
9001289a:	4a2a      	ldr	r2, [pc, #168]	; (90012944 <__sflush_r+0x108>)
9001289c:	40ca      	lsrs	r2, r1
9001289e:	07d6      	lsls	r6, r2, #31
900128a0:	d528      	bpl.n	900128f4 <__sflush_r+0xb8>
900128a2:	2200      	movs	r2, #0
900128a4:	6062      	str	r2, [r4, #4]
900128a6:	04d9      	lsls	r1, r3, #19
900128a8:	6922      	ldr	r2, [r4, #16]
900128aa:	6022      	str	r2, [r4, #0]
900128ac:	d504      	bpl.n	900128b8 <__sflush_r+0x7c>
900128ae:	1c42      	adds	r2, r0, #1
900128b0:	d101      	bne.n	900128b6 <__sflush_r+0x7a>
900128b2:	682b      	ldr	r3, [r5, #0]
900128b4:	b903      	cbnz	r3, 900128b8 <__sflush_r+0x7c>
900128b6:	6560      	str	r0, [r4, #84]	; 0x54
900128b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
900128ba:	602f      	str	r7, [r5, #0]
900128bc:	2900      	cmp	r1, #0
900128be:	d0ca      	beq.n	90012856 <__sflush_r+0x1a>
900128c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
900128c4:	4299      	cmp	r1, r3
900128c6:	d002      	beq.n	900128ce <__sflush_r+0x92>
900128c8:	4628      	mov	r0, r5
900128ca:	f000 fc3d 	bl	90013148 <_free_r>
900128ce:	2000      	movs	r0, #0
900128d0:	6360      	str	r0, [r4, #52]	; 0x34
900128d2:	e7c1      	b.n	90012858 <__sflush_r+0x1c>
900128d4:	6a21      	ldr	r1, [r4, #32]
900128d6:	2301      	movs	r3, #1
900128d8:	4628      	mov	r0, r5
900128da:	47b0      	blx	r6
900128dc:	1c41      	adds	r1, r0, #1
900128de:	d1c7      	bne.n	90012870 <__sflush_r+0x34>
900128e0:	682b      	ldr	r3, [r5, #0]
900128e2:	2b00      	cmp	r3, #0
900128e4:	d0c4      	beq.n	90012870 <__sflush_r+0x34>
900128e6:	2b1d      	cmp	r3, #29
900128e8:	d001      	beq.n	900128ee <__sflush_r+0xb2>
900128ea:	2b16      	cmp	r3, #22
900128ec:	d101      	bne.n	900128f2 <__sflush_r+0xb6>
900128ee:	602f      	str	r7, [r5, #0]
900128f0:	e7b1      	b.n	90012856 <__sflush_r+0x1a>
900128f2:	89a3      	ldrh	r3, [r4, #12]
900128f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900128f8:	81a3      	strh	r3, [r4, #12]
900128fa:	e7ad      	b.n	90012858 <__sflush_r+0x1c>
900128fc:	690f      	ldr	r7, [r1, #16]
900128fe:	2f00      	cmp	r7, #0
90012900:	d0a9      	beq.n	90012856 <__sflush_r+0x1a>
90012902:	0793      	lsls	r3, r2, #30
90012904:	680e      	ldr	r6, [r1, #0]
90012906:	bf08      	it	eq
90012908:	694b      	ldreq	r3, [r1, #20]
9001290a:	600f      	str	r7, [r1, #0]
9001290c:	bf18      	it	ne
9001290e:	2300      	movne	r3, #0
90012910:	eba6 0807 	sub.w	r8, r6, r7
90012914:	608b      	str	r3, [r1, #8]
90012916:	f1b8 0f00 	cmp.w	r8, #0
9001291a:	dd9c      	ble.n	90012856 <__sflush_r+0x1a>
9001291c:	6a21      	ldr	r1, [r4, #32]
9001291e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90012920:	4643      	mov	r3, r8
90012922:	463a      	mov	r2, r7
90012924:	4628      	mov	r0, r5
90012926:	47b0      	blx	r6
90012928:	2800      	cmp	r0, #0
9001292a:	dc06      	bgt.n	9001293a <__sflush_r+0xfe>
9001292c:	89a3      	ldrh	r3, [r4, #12]
9001292e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90012932:	81a3      	strh	r3, [r4, #12]
90012934:	f04f 30ff 	mov.w	r0, #4294967295
90012938:	e78e      	b.n	90012858 <__sflush_r+0x1c>
9001293a:	4407      	add	r7, r0
9001293c:	eba8 0800 	sub.w	r8, r8, r0
90012940:	e7e9      	b.n	90012916 <__sflush_r+0xda>
90012942:	bf00      	nop
90012944:	20400001 	.word	0x20400001

90012948 <_fflush_r>:
90012948:	b538      	push	{r3, r4, r5, lr}
9001294a:	690b      	ldr	r3, [r1, #16]
9001294c:	4605      	mov	r5, r0
9001294e:	460c      	mov	r4, r1
90012950:	b913      	cbnz	r3, 90012958 <_fflush_r+0x10>
90012952:	2500      	movs	r5, #0
90012954:	4628      	mov	r0, r5
90012956:	bd38      	pop	{r3, r4, r5, pc}
90012958:	b118      	cbz	r0, 90012962 <_fflush_r+0x1a>
9001295a:	6983      	ldr	r3, [r0, #24]
9001295c:	b90b      	cbnz	r3, 90012962 <_fflush_r+0x1a>
9001295e:	f7fe faa5 	bl	90010eac <__sinit>
90012962:	4b14      	ldr	r3, [pc, #80]	; (900129b4 <_fflush_r+0x6c>)
90012964:	429c      	cmp	r4, r3
90012966:	d11b      	bne.n	900129a0 <_fflush_r+0x58>
90012968:	686c      	ldr	r4, [r5, #4]
9001296a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9001296e:	2b00      	cmp	r3, #0
90012970:	d0ef      	beq.n	90012952 <_fflush_r+0xa>
90012972:	6e62      	ldr	r2, [r4, #100]	; 0x64
90012974:	07d0      	lsls	r0, r2, #31
90012976:	d404      	bmi.n	90012982 <_fflush_r+0x3a>
90012978:	0599      	lsls	r1, r3, #22
9001297a:	d402      	bmi.n	90012982 <_fflush_r+0x3a>
9001297c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9001297e:	f7fe fb58 	bl	90011032 <__retarget_lock_acquire_recursive>
90012982:	4628      	mov	r0, r5
90012984:	4621      	mov	r1, r4
90012986:	f7ff ff59 	bl	9001283c <__sflush_r>
9001298a:	6e63      	ldr	r3, [r4, #100]	; 0x64
9001298c:	07da      	lsls	r2, r3, #31
9001298e:	4605      	mov	r5, r0
90012990:	d4e0      	bmi.n	90012954 <_fflush_r+0xc>
90012992:	89a3      	ldrh	r3, [r4, #12]
90012994:	059b      	lsls	r3, r3, #22
90012996:	d4dd      	bmi.n	90012954 <_fflush_r+0xc>
90012998:	6da0      	ldr	r0, [r4, #88]	; 0x58
9001299a:	f7fe fb4b 	bl	90011034 <__retarget_lock_release_recursive>
9001299e:	e7d9      	b.n	90012954 <_fflush_r+0xc>
900129a0:	4b05      	ldr	r3, [pc, #20]	; (900129b8 <_fflush_r+0x70>)
900129a2:	429c      	cmp	r4, r3
900129a4:	d101      	bne.n	900129aa <_fflush_r+0x62>
900129a6:	68ac      	ldr	r4, [r5, #8]
900129a8:	e7df      	b.n	9001296a <_fflush_r+0x22>
900129aa:	4b04      	ldr	r3, [pc, #16]	; (900129bc <_fflush_r+0x74>)
900129ac:	429c      	cmp	r4, r3
900129ae:	bf08      	it	eq
900129b0:	68ec      	ldreq	r4, [r5, #12]
900129b2:	e7da      	b.n	9001296a <_fflush_r+0x22>
900129b4:	90015808 	.word	0x90015808
900129b8:	90015828 	.word	0x90015828
900129bc:	900157e8 	.word	0x900157e8

900129c0 <_localeconv_r>:
900129c0:	4800      	ldr	r0, [pc, #0]	; (900129c4 <_localeconv_r+0x4>)
900129c2:	4770      	bx	lr
900129c4:	24000194 	.word	0x24000194

900129c8 <_lseek_r>:
900129c8:	b538      	push	{r3, r4, r5, lr}
900129ca:	4d07      	ldr	r5, [pc, #28]	; (900129e8 <_lseek_r+0x20>)
900129cc:	4604      	mov	r4, r0
900129ce:	4608      	mov	r0, r1
900129d0:	4611      	mov	r1, r2
900129d2:	2200      	movs	r2, #0
900129d4:	602a      	str	r2, [r5, #0]
900129d6:	461a      	mov	r2, r3
900129d8:	f7ef faca 	bl	90001f70 <_lseek>
900129dc:	1c43      	adds	r3, r0, #1
900129de:	d102      	bne.n	900129e6 <_lseek_r+0x1e>
900129e0:	682b      	ldr	r3, [r5, #0]
900129e2:	b103      	cbz	r3, 900129e6 <_lseek_r+0x1e>
900129e4:	6023      	str	r3, [r4, #0]
900129e6:	bd38      	pop	{r3, r4, r5, pc}
900129e8:	24005844 	.word	0x24005844

900129ec <malloc>:
900129ec:	4b02      	ldr	r3, [pc, #8]	; (900129f8 <malloc+0xc>)
900129ee:	4601      	mov	r1, r0
900129f0:	6818      	ldr	r0, [r3, #0]
900129f2:	f7fe bb57 	b.w	900110a4 <_malloc_r>
900129f6:	bf00      	nop
900129f8:	24000040 	.word	0x24000040

900129fc <__malloc_lock>:
900129fc:	4801      	ldr	r0, [pc, #4]	; (90012a04 <__malloc_lock+0x8>)
900129fe:	f7fe bb18 	b.w	90011032 <__retarget_lock_acquire_recursive>
90012a02:	bf00      	nop
90012a04:	24005838 	.word	0x24005838

90012a08 <__malloc_unlock>:
90012a08:	4801      	ldr	r0, [pc, #4]	; (90012a10 <__malloc_unlock+0x8>)
90012a0a:	f7fe bb13 	b.w	90011034 <__retarget_lock_release_recursive>
90012a0e:	bf00      	nop
90012a10:	24005838 	.word	0x24005838

90012a14 <_Balloc>:
90012a14:	b570      	push	{r4, r5, r6, lr}
90012a16:	6a46      	ldr	r6, [r0, #36]	; 0x24
90012a18:	4604      	mov	r4, r0
90012a1a:	460d      	mov	r5, r1
90012a1c:	b976      	cbnz	r6, 90012a3c <_Balloc+0x28>
90012a1e:	2010      	movs	r0, #16
90012a20:	f7ff ffe4 	bl	900129ec <malloc>
90012a24:	4602      	mov	r2, r0
90012a26:	6260      	str	r0, [r4, #36]	; 0x24
90012a28:	b920      	cbnz	r0, 90012a34 <_Balloc+0x20>
90012a2a:	4b18      	ldr	r3, [pc, #96]	; (90012a8c <_Balloc+0x78>)
90012a2c:	4818      	ldr	r0, [pc, #96]	; (90012a90 <_Balloc+0x7c>)
90012a2e:	2166      	movs	r1, #102	; 0x66
90012a30:	f000 ff5e 	bl	900138f0 <__assert_func>
90012a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
90012a38:	6006      	str	r6, [r0, #0]
90012a3a:	60c6      	str	r6, [r0, #12]
90012a3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
90012a3e:	68f3      	ldr	r3, [r6, #12]
90012a40:	b183      	cbz	r3, 90012a64 <_Balloc+0x50>
90012a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
90012a44:	68db      	ldr	r3, [r3, #12]
90012a46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
90012a4a:	b9b8      	cbnz	r0, 90012a7c <_Balloc+0x68>
90012a4c:	2101      	movs	r1, #1
90012a4e:	fa01 f605 	lsl.w	r6, r1, r5
90012a52:	1d72      	adds	r2, r6, #5
90012a54:	0092      	lsls	r2, r2, #2
90012a56:	4620      	mov	r0, r4
90012a58:	f000 fb60 	bl	9001311c <_calloc_r>
90012a5c:	b160      	cbz	r0, 90012a78 <_Balloc+0x64>
90012a5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
90012a62:	e00e      	b.n	90012a82 <_Balloc+0x6e>
90012a64:	2221      	movs	r2, #33	; 0x21
90012a66:	2104      	movs	r1, #4
90012a68:	4620      	mov	r0, r4
90012a6a:	f000 fb57 	bl	9001311c <_calloc_r>
90012a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90012a70:	60f0      	str	r0, [r6, #12]
90012a72:	68db      	ldr	r3, [r3, #12]
90012a74:	2b00      	cmp	r3, #0
90012a76:	d1e4      	bne.n	90012a42 <_Balloc+0x2e>
90012a78:	2000      	movs	r0, #0
90012a7a:	bd70      	pop	{r4, r5, r6, pc}
90012a7c:	6802      	ldr	r2, [r0, #0]
90012a7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
90012a82:	2300      	movs	r3, #0
90012a84:	e9c0 3303 	strd	r3, r3, [r0, #12]
90012a88:	e7f7      	b.n	90012a7a <_Balloc+0x66>
90012a8a:	bf00      	nop
90012a8c:	9001588d 	.word	0x9001588d
90012a90:	90015910 	.word	0x90015910

90012a94 <_Bfree>:
90012a94:	b570      	push	{r4, r5, r6, lr}
90012a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
90012a98:	4605      	mov	r5, r0
90012a9a:	460c      	mov	r4, r1
90012a9c:	b976      	cbnz	r6, 90012abc <_Bfree+0x28>
90012a9e:	2010      	movs	r0, #16
90012aa0:	f7ff ffa4 	bl	900129ec <malloc>
90012aa4:	4602      	mov	r2, r0
90012aa6:	6268      	str	r0, [r5, #36]	; 0x24
90012aa8:	b920      	cbnz	r0, 90012ab4 <_Bfree+0x20>
90012aaa:	4b09      	ldr	r3, [pc, #36]	; (90012ad0 <_Bfree+0x3c>)
90012aac:	4809      	ldr	r0, [pc, #36]	; (90012ad4 <_Bfree+0x40>)
90012aae:	218a      	movs	r1, #138	; 0x8a
90012ab0:	f000 ff1e 	bl	900138f0 <__assert_func>
90012ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
90012ab8:	6006      	str	r6, [r0, #0]
90012aba:	60c6      	str	r6, [r0, #12]
90012abc:	b13c      	cbz	r4, 90012ace <_Bfree+0x3a>
90012abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
90012ac0:	6862      	ldr	r2, [r4, #4]
90012ac2:	68db      	ldr	r3, [r3, #12]
90012ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
90012ac8:	6021      	str	r1, [r4, #0]
90012aca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
90012ace:	bd70      	pop	{r4, r5, r6, pc}
90012ad0:	9001588d 	.word	0x9001588d
90012ad4:	90015910 	.word	0x90015910

90012ad8 <__multadd>:
90012ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012adc:	690d      	ldr	r5, [r1, #16]
90012ade:	4607      	mov	r7, r0
90012ae0:	460c      	mov	r4, r1
90012ae2:	461e      	mov	r6, r3
90012ae4:	f101 0c14 	add.w	ip, r1, #20
90012ae8:	2000      	movs	r0, #0
90012aea:	f8dc 3000 	ldr.w	r3, [ip]
90012aee:	b299      	uxth	r1, r3
90012af0:	fb02 6101 	mla	r1, r2, r1, r6
90012af4:	0c1e      	lsrs	r6, r3, #16
90012af6:	0c0b      	lsrs	r3, r1, #16
90012af8:	fb02 3306 	mla	r3, r2, r6, r3
90012afc:	b289      	uxth	r1, r1
90012afe:	3001      	adds	r0, #1
90012b00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
90012b04:	4285      	cmp	r5, r0
90012b06:	f84c 1b04 	str.w	r1, [ip], #4
90012b0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
90012b0e:	dcec      	bgt.n	90012aea <__multadd+0x12>
90012b10:	b30e      	cbz	r6, 90012b56 <__multadd+0x7e>
90012b12:	68a3      	ldr	r3, [r4, #8]
90012b14:	42ab      	cmp	r3, r5
90012b16:	dc19      	bgt.n	90012b4c <__multadd+0x74>
90012b18:	6861      	ldr	r1, [r4, #4]
90012b1a:	4638      	mov	r0, r7
90012b1c:	3101      	adds	r1, #1
90012b1e:	f7ff ff79 	bl	90012a14 <_Balloc>
90012b22:	4680      	mov	r8, r0
90012b24:	b928      	cbnz	r0, 90012b32 <__multadd+0x5a>
90012b26:	4602      	mov	r2, r0
90012b28:	4b0c      	ldr	r3, [pc, #48]	; (90012b5c <__multadd+0x84>)
90012b2a:	480d      	ldr	r0, [pc, #52]	; (90012b60 <__multadd+0x88>)
90012b2c:	21b5      	movs	r1, #181	; 0xb5
90012b2e:	f000 fedf 	bl	900138f0 <__assert_func>
90012b32:	6922      	ldr	r2, [r4, #16]
90012b34:	3202      	adds	r2, #2
90012b36:	f104 010c 	add.w	r1, r4, #12
90012b3a:	0092      	lsls	r2, r2, #2
90012b3c:	300c      	adds	r0, #12
90012b3e:	f7fe fa7a 	bl	90011036 <memcpy>
90012b42:	4621      	mov	r1, r4
90012b44:	4638      	mov	r0, r7
90012b46:	f7ff ffa5 	bl	90012a94 <_Bfree>
90012b4a:	4644      	mov	r4, r8
90012b4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
90012b50:	3501      	adds	r5, #1
90012b52:	615e      	str	r6, [r3, #20]
90012b54:	6125      	str	r5, [r4, #16]
90012b56:	4620      	mov	r0, r4
90012b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012b5c:	900158ff 	.word	0x900158ff
90012b60:	90015910 	.word	0x90015910

90012b64 <__hi0bits>:
90012b64:	0c03      	lsrs	r3, r0, #16
90012b66:	041b      	lsls	r3, r3, #16
90012b68:	b9d3      	cbnz	r3, 90012ba0 <__hi0bits+0x3c>
90012b6a:	0400      	lsls	r0, r0, #16
90012b6c:	2310      	movs	r3, #16
90012b6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
90012b72:	bf04      	itt	eq
90012b74:	0200      	lsleq	r0, r0, #8
90012b76:	3308      	addeq	r3, #8
90012b78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
90012b7c:	bf04      	itt	eq
90012b7e:	0100      	lsleq	r0, r0, #4
90012b80:	3304      	addeq	r3, #4
90012b82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
90012b86:	bf04      	itt	eq
90012b88:	0080      	lsleq	r0, r0, #2
90012b8a:	3302      	addeq	r3, #2
90012b8c:	2800      	cmp	r0, #0
90012b8e:	db05      	blt.n	90012b9c <__hi0bits+0x38>
90012b90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
90012b94:	f103 0301 	add.w	r3, r3, #1
90012b98:	bf08      	it	eq
90012b9a:	2320      	moveq	r3, #32
90012b9c:	4618      	mov	r0, r3
90012b9e:	4770      	bx	lr
90012ba0:	2300      	movs	r3, #0
90012ba2:	e7e4      	b.n	90012b6e <__hi0bits+0xa>

90012ba4 <__lo0bits>:
90012ba4:	6803      	ldr	r3, [r0, #0]
90012ba6:	f013 0207 	ands.w	r2, r3, #7
90012baa:	4601      	mov	r1, r0
90012bac:	d00b      	beq.n	90012bc6 <__lo0bits+0x22>
90012bae:	07da      	lsls	r2, r3, #31
90012bb0:	d423      	bmi.n	90012bfa <__lo0bits+0x56>
90012bb2:	0798      	lsls	r0, r3, #30
90012bb4:	bf49      	itett	mi
90012bb6:	085b      	lsrmi	r3, r3, #1
90012bb8:	089b      	lsrpl	r3, r3, #2
90012bba:	2001      	movmi	r0, #1
90012bbc:	600b      	strmi	r3, [r1, #0]
90012bbe:	bf5c      	itt	pl
90012bc0:	600b      	strpl	r3, [r1, #0]
90012bc2:	2002      	movpl	r0, #2
90012bc4:	4770      	bx	lr
90012bc6:	b298      	uxth	r0, r3
90012bc8:	b9a8      	cbnz	r0, 90012bf6 <__lo0bits+0x52>
90012bca:	0c1b      	lsrs	r3, r3, #16
90012bcc:	2010      	movs	r0, #16
90012bce:	b2da      	uxtb	r2, r3
90012bd0:	b90a      	cbnz	r2, 90012bd6 <__lo0bits+0x32>
90012bd2:	3008      	adds	r0, #8
90012bd4:	0a1b      	lsrs	r3, r3, #8
90012bd6:	071a      	lsls	r2, r3, #28
90012bd8:	bf04      	itt	eq
90012bda:	091b      	lsreq	r3, r3, #4
90012bdc:	3004      	addeq	r0, #4
90012bde:	079a      	lsls	r2, r3, #30
90012be0:	bf04      	itt	eq
90012be2:	089b      	lsreq	r3, r3, #2
90012be4:	3002      	addeq	r0, #2
90012be6:	07da      	lsls	r2, r3, #31
90012be8:	d403      	bmi.n	90012bf2 <__lo0bits+0x4e>
90012bea:	085b      	lsrs	r3, r3, #1
90012bec:	f100 0001 	add.w	r0, r0, #1
90012bf0:	d005      	beq.n	90012bfe <__lo0bits+0x5a>
90012bf2:	600b      	str	r3, [r1, #0]
90012bf4:	4770      	bx	lr
90012bf6:	4610      	mov	r0, r2
90012bf8:	e7e9      	b.n	90012bce <__lo0bits+0x2a>
90012bfa:	2000      	movs	r0, #0
90012bfc:	4770      	bx	lr
90012bfe:	2020      	movs	r0, #32
90012c00:	4770      	bx	lr
	...

90012c04 <__i2b>:
90012c04:	b510      	push	{r4, lr}
90012c06:	460c      	mov	r4, r1
90012c08:	2101      	movs	r1, #1
90012c0a:	f7ff ff03 	bl	90012a14 <_Balloc>
90012c0e:	4602      	mov	r2, r0
90012c10:	b928      	cbnz	r0, 90012c1e <__i2b+0x1a>
90012c12:	4b05      	ldr	r3, [pc, #20]	; (90012c28 <__i2b+0x24>)
90012c14:	4805      	ldr	r0, [pc, #20]	; (90012c2c <__i2b+0x28>)
90012c16:	f44f 71a0 	mov.w	r1, #320	; 0x140
90012c1a:	f000 fe69 	bl	900138f0 <__assert_func>
90012c1e:	2301      	movs	r3, #1
90012c20:	6144      	str	r4, [r0, #20]
90012c22:	6103      	str	r3, [r0, #16]
90012c24:	bd10      	pop	{r4, pc}
90012c26:	bf00      	nop
90012c28:	900158ff 	.word	0x900158ff
90012c2c:	90015910 	.word	0x90015910

90012c30 <__multiply>:
90012c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012c34:	4691      	mov	r9, r2
90012c36:	690a      	ldr	r2, [r1, #16]
90012c38:	f8d9 3010 	ldr.w	r3, [r9, #16]
90012c3c:	429a      	cmp	r2, r3
90012c3e:	bfb8      	it	lt
90012c40:	460b      	movlt	r3, r1
90012c42:	460c      	mov	r4, r1
90012c44:	bfbc      	itt	lt
90012c46:	464c      	movlt	r4, r9
90012c48:	4699      	movlt	r9, r3
90012c4a:	6927      	ldr	r7, [r4, #16]
90012c4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
90012c50:	68a3      	ldr	r3, [r4, #8]
90012c52:	6861      	ldr	r1, [r4, #4]
90012c54:	eb07 060a 	add.w	r6, r7, sl
90012c58:	42b3      	cmp	r3, r6
90012c5a:	b085      	sub	sp, #20
90012c5c:	bfb8      	it	lt
90012c5e:	3101      	addlt	r1, #1
90012c60:	f7ff fed8 	bl	90012a14 <_Balloc>
90012c64:	b930      	cbnz	r0, 90012c74 <__multiply+0x44>
90012c66:	4602      	mov	r2, r0
90012c68:	4b44      	ldr	r3, [pc, #272]	; (90012d7c <__multiply+0x14c>)
90012c6a:	4845      	ldr	r0, [pc, #276]	; (90012d80 <__multiply+0x150>)
90012c6c:	f240 115d 	movw	r1, #349	; 0x15d
90012c70:	f000 fe3e 	bl	900138f0 <__assert_func>
90012c74:	f100 0514 	add.w	r5, r0, #20
90012c78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
90012c7c:	462b      	mov	r3, r5
90012c7e:	2200      	movs	r2, #0
90012c80:	4543      	cmp	r3, r8
90012c82:	d321      	bcc.n	90012cc8 <__multiply+0x98>
90012c84:	f104 0314 	add.w	r3, r4, #20
90012c88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
90012c8c:	f109 0314 	add.w	r3, r9, #20
90012c90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
90012c94:	9202      	str	r2, [sp, #8]
90012c96:	1b3a      	subs	r2, r7, r4
90012c98:	3a15      	subs	r2, #21
90012c9a:	f022 0203 	bic.w	r2, r2, #3
90012c9e:	3204      	adds	r2, #4
90012ca0:	f104 0115 	add.w	r1, r4, #21
90012ca4:	428f      	cmp	r7, r1
90012ca6:	bf38      	it	cc
90012ca8:	2204      	movcc	r2, #4
90012caa:	9201      	str	r2, [sp, #4]
90012cac:	9a02      	ldr	r2, [sp, #8]
90012cae:	9303      	str	r3, [sp, #12]
90012cb0:	429a      	cmp	r2, r3
90012cb2:	d80c      	bhi.n	90012cce <__multiply+0x9e>
90012cb4:	2e00      	cmp	r6, #0
90012cb6:	dd03      	ble.n	90012cc0 <__multiply+0x90>
90012cb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
90012cbc:	2b00      	cmp	r3, #0
90012cbe:	d05a      	beq.n	90012d76 <__multiply+0x146>
90012cc0:	6106      	str	r6, [r0, #16]
90012cc2:	b005      	add	sp, #20
90012cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012cc8:	f843 2b04 	str.w	r2, [r3], #4
90012ccc:	e7d8      	b.n	90012c80 <__multiply+0x50>
90012cce:	f8b3 a000 	ldrh.w	sl, [r3]
90012cd2:	f1ba 0f00 	cmp.w	sl, #0
90012cd6:	d024      	beq.n	90012d22 <__multiply+0xf2>
90012cd8:	f104 0e14 	add.w	lr, r4, #20
90012cdc:	46a9      	mov	r9, r5
90012cde:	f04f 0c00 	mov.w	ip, #0
90012ce2:	f85e 2b04 	ldr.w	r2, [lr], #4
90012ce6:	f8d9 1000 	ldr.w	r1, [r9]
90012cea:	fa1f fb82 	uxth.w	fp, r2
90012cee:	b289      	uxth	r1, r1
90012cf0:	fb0a 110b 	mla	r1, sl, fp, r1
90012cf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
90012cf8:	f8d9 2000 	ldr.w	r2, [r9]
90012cfc:	4461      	add	r1, ip
90012cfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
90012d02:	fb0a c20b 	mla	r2, sl, fp, ip
90012d06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
90012d0a:	b289      	uxth	r1, r1
90012d0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90012d10:	4577      	cmp	r7, lr
90012d12:	f849 1b04 	str.w	r1, [r9], #4
90012d16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
90012d1a:	d8e2      	bhi.n	90012ce2 <__multiply+0xb2>
90012d1c:	9a01      	ldr	r2, [sp, #4]
90012d1e:	f845 c002 	str.w	ip, [r5, r2]
90012d22:	9a03      	ldr	r2, [sp, #12]
90012d24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
90012d28:	3304      	adds	r3, #4
90012d2a:	f1b9 0f00 	cmp.w	r9, #0
90012d2e:	d020      	beq.n	90012d72 <__multiply+0x142>
90012d30:	6829      	ldr	r1, [r5, #0]
90012d32:	f104 0c14 	add.w	ip, r4, #20
90012d36:	46ae      	mov	lr, r5
90012d38:	f04f 0a00 	mov.w	sl, #0
90012d3c:	f8bc b000 	ldrh.w	fp, [ip]
90012d40:	f8be 2002 	ldrh.w	r2, [lr, #2]
90012d44:	fb09 220b 	mla	r2, r9, fp, r2
90012d48:	4492      	add	sl, r2
90012d4a:	b289      	uxth	r1, r1
90012d4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
90012d50:	f84e 1b04 	str.w	r1, [lr], #4
90012d54:	f85c 2b04 	ldr.w	r2, [ip], #4
90012d58:	f8be 1000 	ldrh.w	r1, [lr]
90012d5c:	0c12      	lsrs	r2, r2, #16
90012d5e:	fb09 1102 	mla	r1, r9, r2, r1
90012d62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
90012d66:	4567      	cmp	r7, ip
90012d68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
90012d6c:	d8e6      	bhi.n	90012d3c <__multiply+0x10c>
90012d6e:	9a01      	ldr	r2, [sp, #4]
90012d70:	50a9      	str	r1, [r5, r2]
90012d72:	3504      	adds	r5, #4
90012d74:	e79a      	b.n	90012cac <__multiply+0x7c>
90012d76:	3e01      	subs	r6, #1
90012d78:	e79c      	b.n	90012cb4 <__multiply+0x84>
90012d7a:	bf00      	nop
90012d7c:	900158ff 	.word	0x900158ff
90012d80:	90015910 	.word	0x90015910

90012d84 <__pow5mult>:
90012d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90012d88:	4615      	mov	r5, r2
90012d8a:	f012 0203 	ands.w	r2, r2, #3
90012d8e:	4606      	mov	r6, r0
90012d90:	460f      	mov	r7, r1
90012d92:	d007      	beq.n	90012da4 <__pow5mult+0x20>
90012d94:	4c25      	ldr	r4, [pc, #148]	; (90012e2c <__pow5mult+0xa8>)
90012d96:	3a01      	subs	r2, #1
90012d98:	2300      	movs	r3, #0
90012d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
90012d9e:	f7ff fe9b 	bl	90012ad8 <__multadd>
90012da2:	4607      	mov	r7, r0
90012da4:	10ad      	asrs	r5, r5, #2
90012da6:	d03d      	beq.n	90012e24 <__pow5mult+0xa0>
90012da8:	6a74      	ldr	r4, [r6, #36]	; 0x24
90012daa:	b97c      	cbnz	r4, 90012dcc <__pow5mult+0x48>
90012dac:	2010      	movs	r0, #16
90012dae:	f7ff fe1d 	bl	900129ec <malloc>
90012db2:	4602      	mov	r2, r0
90012db4:	6270      	str	r0, [r6, #36]	; 0x24
90012db6:	b928      	cbnz	r0, 90012dc4 <__pow5mult+0x40>
90012db8:	4b1d      	ldr	r3, [pc, #116]	; (90012e30 <__pow5mult+0xac>)
90012dba:	481e      	ldr	r0, [pc, #120]	; (90012e34 <__pow5mult+0xb0>)
90012dbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
90012dc0:	f000 fd96 	bl	900138f0 <__assert_func>
90012dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
90012dc8:	6004      	str	r4, [r0, #0]
90012dca:	60c4      	str	r4, [r0, #12]
90012dcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
90012dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
90012dd4:	b94c      	cbnz	r4, 90012dea <__pow5mult+0x66>
90012dd6:	f240 2171 	movw	r1, #625	; 0x271
90012dda:	4630      	mov	r0, r6
90012ddc:	f7ff ff12 	bl	90012c04 <__i2b>
90012de0:	2300      	movs	r3, #0
90012de2:	f8c8 0008 	str.w	r0, [r8, #8]
90012de6:	4604      	mov	r4, r0
90012de8:	6003      	str	r3, [r0, #0]
90012dea:	f04f 0900 	mov.w	r9, #0
90012dee:	07eb      	lsls	r3, r5, #31
90012df0:	d50a      	bpl.n	90012e08 <__pow5mult+0x84>
90012df2:	4639      	mov	r1, r7
90012df4:	4622      	mov	r2, r4
90012df6:	4630      	mov	r0, r6
90012df8:	f7ff ff1a 	bl	90012c30 <__multiply>
90012dfc:	4639      	mov	r1, r7
90012dfe:	4680      	mov	r8, r0
90012e00:	4630      	mov	r0, r6
90012e02:	f7ff fe47 	bl	90012a94 <_Bfree>
90012e06:	4647      	mov	r7, r8
90012e08:	106d      	asrs	r5, r5, #1
90012e0a:	d00b      	beq.n	90012e24 <__pow5mult+0xa0>
90012e0c:	6820      	ldr	r0, [r4, #0]
90012e0e:	b938      	cbnz	r0, 90012e20 <__pow5mult+0x9c>
90012e10:	4622      	mov	r2, r4
90012e12:	4621      	mov	r1, r4
90012e14:	4630      	mov	r0, r6
90012e16:	f7ff ff0b 	bl	90012c30 <__multiply>
90012e1a:	6020      	str	r0, [r4, #0]
90012e1c:	f8c0 9000 	str.w	r9, [r0]
90012e20:	4604      	mov	r4, r0
90012e22:	e7e4      	b.n	90012dee <__pow5mult+0x6a>
90012e24:	4638      	mov	r0, r7
90012e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90012e2a:	bf00      	nop
90012e2c:	90015a60 	.word	0x90015a60
90012e30:	9001588d 	.word	0x9001588d
90012e34:	90015910 	.word	0x90015910

90012e38 <__lshift>:
90012e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90012e3c:	460c      	mov	r4, r1
90012e3e:	6849      	ldr	r1, [r1, #4]
90012e40:	6923      	ldr	r3, [r4, #16]
90012e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
90012e46:	68a3      	ldr	r3, [r4, #8]
90012e48:	4607      	mov	r7, r0
90012e4a:	4691      	mov	r9, r2
90012e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
90012e50:	f108 0601 	add.w	r6, r8, #1
90012e54:	42b3      	cmp	r3, r6
90012e56:	db0b      	blt.n	90012e70 <__lshift+0x38>
90012e58:	4638      	mov	r0, r7
90012e5a:	f7ff fddb 	bl	90012a14 <_Balloc>
90012e5e:	4605      	mov	r5, r0
90012e60:	b948      	cbnz	r0, 90012e76 <__lshift+0x3e>
90012e62:	4602      	mov	r2, r0
90012e64:	4b2a      	ldr	r3, [pc, #168]	; (90012f10 <__lshift+0xd8>)
90012e66:	482b      	ldr	r0, [pc, #172]	; (90012f14 <__lshift+0xdc>)
90012e68:	f240 11d9 	movw	r1, #473	; 0x1d9
90012e6c:	f000 fd40 	bl	900138f0 <__assert_func>
90012e70:	3101      	adds	r1, #1
90012e72:	005b      	lsls	r3, r3, #1
90012e74:	e7ee      	b.n	90012e54 <__lshift+0x1c>
90012e76:	2300      	movs	r3, #0
90012e78:	f100 0114 	add.w	r1, r0, #20
90012e7c:	f100 0210 	add.w	r2, r0, #16
90012e80:	4618      	mov	r0, r3
90012e82:	4553      	cmp	r3, sl
90012e84:	db37      	blt.n	90012ef6 <__lshift+0xbe>
90012e86:	6920      	ldr	r0, [r4, #16]
90012e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
90012e8c:	f104 0314 	add.w	r3, r4, #20
90012e90:	f019 091f 	ands.w	r9, r9, #31
90012e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
90012e98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
90012e9c:	d02f      	beq.n	90012efe <__lshift+0xc6>
90012e9e:	f1c9 0e20 	rsb	lr, r9, #32
90012ea2:	468a      	mov	sl, r1
90012ea4:	f04f 0c00 	mov.w	ip, #0
90012ea8:	681a      	ldr	r2, [r3, #0]
90012eaa:	fa02 f209 	lsl.w	r2, r2, r9
90012eae:	ea42 020c 	orr.w	r2, r2, ip
90012eb2:	f84a 2b04 	str.w	r2, [sl], #4
90012eb6:	f853 2b04 	ldr.w	r2, [r3], #4
90012eba:	4298      	cmp	r0, r3
90012ebc:	fa22 fc0e 	lsr.w	ip, r2, lr
90012ec0:	d8f2      	bhi.n	90012ea8 <__lshift+0x70>
90012ec2:	1b03      	subs	r3, r0, r4
90012ec4:	3b15      	subs	r3, #21
90012ec6:	f023 0303 	bic.w	r3, r3, #3
90012eca:	3304      	adds	r3, #4
90012ecc:	f104 0215 	add.w	r2, r4, #21
90012ed0:	4290      	cmp	r0, r2
90012ed2:	bf38      	it	cc
90012ed4:	2304      	movcc	r3, #4
90012ed6:	f841 c003 	str.w	ip, [r1, r3]
90012eda:	f1bc 0f00 	cmp.w	ip, #0
90012ede:	d001      	beq.n	90012ee4 <__lshift+0xac>
90012ee0:	f108 0602 	add.w	r6, r8, #2
90012ee4:	3e01      	subs	r6, #1
90012ee6:	4638      	mov	r0, r7
90012ee8:	612e      	str	r6, [r5, #16]
90012eea:	4621      	mov	r1, r4
90012eec:	f7ff fdd2 	bl	90012a94 <_Bfree>
90012ef0:	4628      	mov	r0, r5
90012ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90012ef6:	f842 0f04 	str.w	r0, [r2, #4]!
90012efa:	3301      	adds	r3, #1
90012efc:	e7c1      	b.n	90012e82 <__lshift+0x4a>
90012efe:	3904      	subs	r1, #4
90012f00:	f853 2b04 	ldr.w	r2, [r3], #4
90012f04:	f841 2f04 	str.w	r2, [r1, #4]!
90012f08:	4298      	cmp	r0, r3
90012f0a:	d8f9      	bhi.n	90012f00 <__lshift+0xc8>
90012f0c:	e7ea      	b.n	90012ee4 <__lshift+0xac>
90012f0e:	bf00      	nop
90012f10:	900158ff 	.word	0x900158ff
90012f14:	90015910 	.word	0x90015910

90012f18 <__mcmp>:
90012f18:	b530      	push	{r4, r5, lr}
90012f1a:	6902      	ldr	r2, [r0, #16]
90012f1c:	690c      	ldr	r4, [r1, #16]
90012f1e:	1b12      	subs	r2, r2, r4
90012f20:	d10e      	bne.n	90012f40 <__mcmp+0x28>
90012f22:	f100 0314 	add.w	r3, r0, #20
90012f26:	3114      	adds	r1, #20
90012f28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
90012f2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
90012f30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
90012f34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
90012f38:	42a5      	cmp	r5, r4
90012f3a:	d003      	beq.n	90012f44 <__mcmp+0x2c>
90012f3c:	d305      	bcc.n	90012f4a <__mcmp+0x32>
90012f3e:	2201      	movs	r2, #1
90012f40:	4610      	mov	r0, r2
90012f42:	bd30      	pop	{r4, r5, pc}
90012f44:	4283      	cmp	r3, r0
90012f46:	d3f3      	bcc.n	90012f30 <__mcmp+0x18>
90012f48:	e7fa      	b.n	90012f40 <__mcmp+0x28>
90012f4a:	f04f 32ff 	mov.w	r2, #4294967295
90012f4e:	e7f7      	b.n	90012f40 <__mcmp+0x28>

90012f50 <__mdiff>:
90012f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012f54:	460c      	mov	r4, r1
90012f56:	4606      	mov	r6, r0
90012f58:	4611      	mov	r1, r2
90012f5a:	4620      	mov	r0, r4
90012f5c:	4690      	mov	r8, r2
90012f5e:	f7ff ffdb 	bl	90012f18 <__mcmp>
90012f62:	1e05      	subs	r5, r0, #0
90012f64:	d110      	bne.n	90012f88 <__mdiff+0x38>
90012f66:	4629      	mov	r1, r5
90012f68:	4630      	mov	r0, r6
90012f6a:	f7ff fd53 	bl	90012a14 <_Balloc>
90012f6e:	b930      	cbnz	r0, 90012f7e <__mdiff+0x2e>
90012f70:	4b3a      	ldr	r3, [pc, #232]	; (9001305c <__mdiff+0x10c>)
90012f72:	4602      	mov	r2, r0
90012f74:	f240 2132 	movw	r1, #562	; 0x232
90012f78:	4839      	ldr	r0, [pc, #228]	; (90013060 <__mdiff+0x110>)
90012f7a:	f000 fcb9 	bl	900138f0 <__assert_func>
90012f7e:	2301      	movs	r3, #1
90012f80:	e9c0 3504 	strd	r3, r5, [r0, #16]
90012f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012f88:	bfa4      	itt	ge
90012f8a:	4643      	movge	r3, r8
90012f8c:	46a0      	movge	r8, r4
90012f8e:	4630      	mov	r0, r6
90012f90:	f8d8 1004 	ldr.w	r1, [r8, #4]
90012f94:	bfa6      	itte	ge
90012f96:	461c      	movge	r4, r3
90012f98:	2500      	movge	r5, #0
90012f9a:	2501      	movlt	r5, #1
90012f9c:	f7ff fd3a 	bl	90012a14 <_Balloc>
90012fa0:	b920      	cbnz	r0, 90012fac <__mdiff+0x5c>
90012fa2:	4b2e      	ldr	r3, [pc, #184]	; (9001305c <__mdiff+0x10c>)
90012fa4:	4602      	mov	r2, r0
90012fa6:	f44f 7110 	mov.w	r1, #576	; 0x240
90012faa:	e7e5      	b.n	90012f78 <__mdiff+0x28>
90012fac:	f8d8 7010 	ldr.w	r7, [r8, #16]
90012fb0:	6926      	ldr	r6, [r4, #16]
90012fb2:	60c5      	str	r5, [r0, #12]
90012fb4:	f104 0914 	add.w	r9, r4, #20
90012fb8:	f108 0514 	add.w	r5, r8, #20
90012fbc:	f100 0e14 	add.w	lr, r0, #20
90012fc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
90012fc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
90012fc8:	f108 0210 	add.w	r2, r8, #16
90012fcc:	46f2      	mov	sl, lr
90012fce:	2100      	movs	r1, #0
90012fd0:	f859 3b04 	ldr.w	r3, [r9], #4
90012fd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
90012fd8:	fa1f f883 	uxth.w	r8, r3
90012fdc:	fa11 f18b 	uxtah	r1, r1, fp
90012fe0:	0c1b      	lsrs	r3, r3, #16
90012fe2:	eba1 0808 	sub.w	r8, r1, r8
90012fe6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
90012fea:	eb03 4328 	add.w	r3, r3, r8, asr #16
90012fee:	fa1f f888 	uxth.w	r8, r8
90012ff2:	1419      	asrs	r1, r3, #16
90012ff4:	454e      	cmp	r6, r9
90012ff6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
90012ffa:	f84a 3b04 	str.w	r3, [sl], #4
90012ffe:	d8e7      	bhi.n	90012fd0 <__mdiff+0x80>
90013000:	1b33      	subs	r3, r6, r4
90013002:	3b15      	subs	r3, #21
90013004:	f023 0303 	bic.w	r3, r3, #3
90013008:	3304      	adds	r3, #4
9001300a:	3415      	adds	r4, #21
9001300c:	42a6      	cmp	r6, r4
9001300e:	bf38      	it	cc
90013010:	2304      	movcc	r3, #4
90013012:	441d      	add	r5, r3
90013014:	4473      	add	r3, lr
90013016:	469e      	mov	lr, r3
90013018:	462e      	mov	r6, r5
9001301a:	4566      	cmp	r6, ip
9001301c:	d30e      	bcc.n	9001303c <__mdiff+0xec>
9001301e:	f10c 0203 	add.w	r2, ip, #3
90013022:	1b52      	subs	r2, r2, r5
90013024:	f022 0203 	bic.w	r2, r2, #3
90013028:	3d03      	subs	r5, #3
9001302a:	45ac      	cmp	ip, r5
9001302c:	bf38      	it	cc
9001302e:	2200      	movcc	r2, #0
90013030:	441a      	add	r2, r3
90013032:	f852 3d04 	ldr.w	r3, [r2, #-4]!
90013036:	b17b      	cbz	r3, 90013058 <__mdiff+0x108>
90013038:	6107      	str	r7, [r0, #16]
9001303a:	e7a3      	b.n	90012f84 <__mdiff+0x34>
9001303c:	f856 8b04 	ldr.w	r8, [r6], #4
90013040:	fa11 f288 	uxtah	r2, r1, r8
90013044:	1414      	asrs	r4, r2, #16
90013046:	eb04 4418 	add.w	r4, r4, r8, lsr #16
9001304a:	b292      	uxth	r2, r2
9001304c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
90013050:	f84e 2b04 	str.w	r2, [lr], #4
90013054:	1421      	asrs	r1, r4, #16
90013056:	e7e0      	b.n	9001301a <__mdiff+0xca>
90013058:	3f01      	subs	r7, #1
9001305a:	e7ea      	b.n	90013032 <__mdiff+0xe2>
9001305c:	900158ff 	.word	0x900158ff
90013060:	90015910 	.word	0x90015910

90013064 <__d2b>:
90013064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90013068:	4689      	mov	r9, r1
9001306a:	2101      	movs	r1, #1
9001306c:	ec57 6b10 	vmov	r6, r7, d0
90013070:	4690      	mov	r8, r2
90013072:	f7ff fccf 	bl	90012a14 <_Balloc>
90013076:	4604      	mov	r4, r0
90013078:	b930      	cbnz	r0, 90013088 <__d2b+0x24>
9001307a:	4602      	mov	r2, r0
9001307c:	4b25      	ldr	r3, [pc, #148]	; (90013114 <__d2b+0xb0>)
9001307e:	4826      	ldr	r0, [pc, #152]	; (90013118 <__d2b+0xb4>)
90013080:	f240 310a 	movw	r1, #778	; 0x30a
90013084:	f000 fc34 	bl	900138f0 <__assert_func>
90013088:	f3c7 550a 	ubfx	r5, r7, #20, #11
9001308c:	f3c7 0313 	ubfx	r3, r7, #0, #20
90013090:	bb35      	cbnz	r5, 900130e0 <__d2b+0x7c>
90013092:	2e00      	cmp	r6, #0
90013094:	9301      	str	r3, [sp, #4]
90013096:	d028      	beq.n	900130ea <__d2b+0x86>
90013098:	4668      	mov	r0, sp
9001309a:	9600      	str	r6, [sp, #0]
9001309c:	f7ff fd82 	bl	90012ba4 <__lo0bits>
900130a0:	9900      	ldr	r1, [sp, #0]
900130a2:	b300      	cbz	r0, 900130e6 <__d2b+0x82>
900130a4:	9a01      	ldr	r2, [sp, #4]
900130a6:	f1c0 0320 	rsb	r3, r0, #32
900130aa:	fa02 f303 	lsl.w	r3, r2, r3
900130ae:	430b      	orrs	r3, r1
900130b0:	40c2      	lsrs	r2, r0
900130b2:	6163      	str	r3, [r4, #20]
900130b4:	9201      	str	r2, [sp, #4]
900130b6:	9b01      	ldr	r3, [sp, #4]
900130b8:	61a3      	str	r3, [r4, #24]
900130ba:	2b00      	cmp	r3, #0
900130bc:	bf14      	ite	ne
900130be:	2202      	movne	r2, #2
900130c0:	2201      	moveq	r2, #1
900130c2:	6122      	str	r2, [r4, #16]
900130c4:	b1d5      	cbz	r5, 900130fc <__d2b+0x98>
900130c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
900130ca:	4405      	add	r5, r0
900130cc:	f8c9 5000 	str.w	r5, [r9]
900130d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
900130d4:	f8c8 0000 	str.w	r0, [r8]
900130d8:	4620      	mov	r0, r4
900130da:	b003      	add	sp, #12
900130dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900130e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
900130e4:	e7d5      	b.n	90013092 <__d2b+0x2e>
900130e6:	6161      	str	r1, [r4, #20]
900130e8:	e7e5      	b.n	900130b6 <__d2b+0x52>
900130ea:	a801      	add	r0, sp, #4
900130ec:	f7ff fd5a 	bl	90012ba4 <__lo0bits>
900130f0:	9b01      	ldr	r3, [sp, #4]
900130f2:	6163      	str	r3, [r4, #20]
900130f4:	2201      	movs	r2, #1
900130f6:	6122      	str	r2, [r4, #16]
900130f8:	3020      	adds	r0, #32
900130fa:	e7e3      	b.n	900130c4 <__d2b+0x60>
900130fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
90013100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
90013104:	f8c9 0000 	str.w	r0, [r9]
90013108:	6918      	ldr	r0, [r3, #16]
9001310a:	f7ff fd2b 	bl	90012b64 <__hi0bits>
9001310e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
90013112:	e7df      	b.n	900130d4 <__d2b+0x70>
90013114:	900158ff 	.word	0x900158ff
90013118:	90015910 	.word	0x90015910

9001311c <_calloc_r>:
9001311c:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001311e:	fba1 2402 	umull	r2, r4, r1, r2
90013122:	b94c      	cbnz	r4, 90013138 <_calloc_r+0x1c>
90013124:	4611      	mov	r1, r2
90013126:	9201      	str	r2, [sp, #4]
90013128:	f7fd ffbc 	bl	900110a4 <_malloc_r>
9001312c:	9a01      	ldr	r2, [sp, #4]
9001312e:	4605      	mov	r5, r0
90013130:	b930      	cbnz	r0, 90013140 <_calloc_r+0x24>
90013132:	4628      	mov	r0, r5
90013134:	b003      	add	sp, #12
90013136:	bd30      	pop	{r4, r5, pc}
90013138:	220c      	movs	r2, #12
9001313a:	6002      	str	r2, [r0, #0]
9001313c:	2500      	movs	r5, #0
9001313e:	e7f8      	b.n	90013132 <_calloc_r+0x16>
90013140:	4621      	mov	r1, r4
90013142:	f7fd ff86 	bl	90011052 <memset>
90013146:	e7f4      	b.n	90013132 <_calloc_r+0x16>

90013148 <_free_r>:
90013148:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001314a:	2900      	cmp	r1, #0
9001314c:	d044      	beq.n	900131d8 <_free_r+0x90>
9001314e:	f851 3c04 	ldr.w	r3, [r1, #-4]
90013152:	9001      	str	r0, [sp, #4]
90013154:	2b00      	cmp	r3, #0
90013156:	f1a1 0404 	sub.w	r4, r1, #4
9001315a:	bfb8      	it	lt
9001315c:	18e4      	addlt	r4, r4, r3
9001315e:	f7ff fc4d 	bl	900129fc <__malloc_lock>
90013162:	4a1e      	ldr	r2, [pc, #120]	; (900131dc <_free_r+0x94>)
90013164:	9801      	ldr	r0, [sp, #4]
90013166:	6813      	ldr	r3, [r2, #0]
90013168:	b933      	cbnz	r3, 90013178 <_free_r+0x30>
9001316a:	6063      	str	r3, [r4, #4]
9001316c:	6014      	str	r4, [r2, #0]
9001316e:	b003      	add	sp, #12
90013170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90013174:	f7ff bc48 	b.w	90012a08 <__malloc_unlock>
90013178:	42a3      	cmp	r3, r4
9001317a:	d908      	bls.n	9001318e <_free_r+0x46>
9001317c:	6825      	ldr	r5, [r4, #0]
9001317e:	1961      	adds	r1, r4, r5
90013180:	428b      	cmp	r3, r1
90013182:	bf01      	itttt	eq
90013184:	6819      	ldreq	r1, [r3, #0]
90013186:	685b      	ldreq	r3, [r3, #4]
90013188:	1949      	addeq	r1, r1, r5
9001318a:	6021      	streq	r1, [r4, #0]
9001318c:	e7ed      	b.n	9001316a <_free_r+0x22>
9001318e:	461a      	mov	r2, r3
90013190:	685b      	ldr	r3, [r3, #4]
90013192:	b10b      	cbz	r3, 90013198 <_free_r+0x50>
90013194:	42a3      	cmp	r3, r4
90013196:	d9fa      	bls.n	9001318e <_free_r+0x46>
90013198:	6811      	ldr	r1, [r2, #0]
9001319a:	1855      	adds	r5, r2, r1
9001319c:	42a5      	cmp	r5, r4
9001319e:	d10b      	bne.n	900131b8 <_free_r+0x70>
900131a0:	6824      	ldr	r4, [r4, #0]
900131a2:	4421      	add	r1, r4
900131a4:	1854      	adds	r4, r2, r1
900131a6:	42a3      	cmp	r3, r4
900131a8:	6011      	str	r1, [r2, #0]
900131aa:	d1e0      	bne.n	9001316e <_free_r+0x26>
900131ac:	681c      	ldr	r4, [r3, #0]
900131ae:	685b      	ldr	r3, [r3, #4]
900131b0:	6053      	str	r3, [r2, #4]
900131b2:	4421      	add	r1, r4
900131b4:	6011      	str	r1, [r2, #0]
900131b6:	e7da      	b.n	9001316e <_free_r+0x26>
900131b8:	d902      	bls.n	900131c0 <_free_r+0x78>
900131ba:	230c      	movs	r3, #12
900131bc:	6003      	str	r3, [r0, #0]
900131be:	e7d6      	b.n	9001316e <_free_r+0x26>
900131c0:	6825      	ldr	r5, [r4, #0]
900131c2:	1961      	adds	r1, r4, r5
900131c4:	428b      	cmp	r3, r1
900131c6:	bf04      	itt	eq
900131c8:	6819      	ldreq	r1, [r3, #0]
900131ca:	685b      	ldreq	r3, [r3, #4]
900131cc:	6063      	str	r3, [r4, #4]
900131ce:	bf04      	itt	eq
900131d0:	1949      	addeq	r1, r1, r5
900131d2:	6021      	streq	r1, [r4, #0]
900131d4:	6054      	str	r4, [r2, #4]
900131d6:	e7ca      	b.n	9001316e <_free_r+0x26>
900131d8:	b003      	add	sp, #12
900131da:	bd30      	pop	{r4, r5, pc}
900131dc:	2400583c 	.word	0x2400583c

900131e0 <__ssputs_r>:
900131e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900131e4:	688e      	ldr	r6, [r1, #8]
900131e6:	429e      	cmp	r6, r3
900131e8:	4682      	mov	sl, r0
900131ea:	460c      	mov	r4, r1
900131ec:	4690      	mov	r8, r2
900131ee:	461f      	mov	r7, r3
900131f0:	d838      	bhi.n	90013264 <__ssputs_r+0x84>
900131f2:	898a      	ldrh	r2, [r1, #12]
900131f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
900131f8:	d032      	beq.n	90013260 <__ssputs_r+0x80>
900131fa:	6825      	ldr	r5, [r4, #0]
900131fc:	6909      	ldr	r1, [r1, #16]
900131fe:	eba5 0901 	sub.w	r9, r5, r1
90013202:	6965      	ldr	r5, [r4, #20]
90013204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90013208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9001320c:	3301      	adds	r3, #1
9001320e:	444b      	add	r3, r9
90013210:	106d      	asrs	r5, r5, #1
90013212:	429d      	cmp	r5, r3
90013214:	bf38      	it	cc
90013216:	461d      	movcc	r5, r3
90013218:	0553      	lsls	r3, r2, #21
9001321a:	d531      	bpl.n	90013280 <__ssputs_r+0xa0>
9001321c:	4629      	mov	r1, r5
9001321e:	f7fd ff41 	bl	900110a4 <_malloc_r>
90013222:	4606      	mov	r6, r0
90013224:	b950      	cbnz	r0, 9001323c <__ssputs_r+0x5c>
90013226:	230c      	movs	r3, #12
90013228:	f8ca 3000 	str.w	r3, [sl]
9001322c:	89a3      	ldrh	r3, [r4, #12]
9001322e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90013232:	81a3      	strh	r3, [r4, #12]
90013234:	f04f 30ff 	mov.w	r0, #4294967295
90013238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001323c:	6921      	ldr	r1, [r4, #16]
9001323e:	464a      	mov	r2, r9
90013240:	f7fd fef9 	bl	90011036 <memcpy>
90013244:	89a3      	ldrh	r3, [r4, #12]
90013246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
9001324a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9001324e:	81a3      	strh	r3, [r4, #12]
90013250:	6126      	str	r6, [r4, #16]
90013252:	6165      	str	r5, [r4, #20]
90013254:	444e      	add	r6, r9
90013256:	eba5 0509 	sub.w	r5, r5, r9
9001325a:	6026      	str	r6, [r4, #0]
9001325c:	60a5      	str	r5, [r4, #8]
9001325e:	463e      	mov	r6, r7
90013260:	42be      	cmp	r6, r7
90013262:	d900      	bls.n	90013266 <__ssputs_r+0x86>
90013264:	463e      	mov	r6, r7
90013266:	6820      	ldr	r0, [r4, #0]
90013268:	4632      	mov	r2, r6
9001326a:	4641      	mov	r1, r8
9001326c:	f000 fbe8 	bl	90013a40 <memmove>
90013270:	68a3      	ldr	r3, [r4, #8]
90013272:	1b9b      	subs	r3, r3, r6
90013274:	60a3      	str	r3, [r4, #8]
90013276:	6823      	ldr	r3, [r4, #0]
90013278:	4433      	add	r3, r6
9001327a:	6023      	str	r3, [r4, #0]
9001327c:	2000      	movs	r0, #0
9001327e:	e7db      	b.n	90013238 <__ssputs_r+0x58>
90013280:	462a      	mov	r2, r5
90013282:	f000 fbf7 	bl	90013a74 <_realloc_r>
90013286:	4606      	mov	r6, r0
90013288:	2800      	cmp	r0, #0
9001328a:	d1e1      	bne.n	90013250 <__ssputs_r+0x70>
9001328c:	6921      	ldr	r1, [r4, #16]
9001328e:	4650      	mov	r0, sl
90013290:	f7ff ff5a 	bl	90013148 <_free_r>
90013294:	e7c7      	b.n	90013226 <__ssputs_r+0x46>
	...

90013298 <_svfiprintf_r>:
90013298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001329c:	4698      	mov	r8, r3
9001329e:	898b      	ldrh	r3, [r1, #12]
900132a0:	061b      	lsls	r3, r3, #24
900132a2:	b09d      	sub	sp, #116	; 0x74
900132a4:	4607      	mov	r7, r0
900132a6:	460d      	mov	r5, r1
900132a8:	4614      	mov	r4, r2
900132aa:	d50e      	bpl.n	900132ca <_svfiprintf_r+0x32>
900132ac:	690b      	ldr	r3, [r1, #16]
900132ae:	b963      	cbnz	r3, 900132ca <_svfiprintf_r+0x32>
900132b0:	2140      	movs	r1, #64	; 0x40
900132b2:	f7fd fef7 	bl	900110a4 <_malloc_r>
900132b6:	6028      	str	r0, [r5, #0]
900132b8:	6128      	str	r0, [r5, #16]
900132ba:	b920      	cbnz	r0, 900132c6 <_svfiprintf_r+0x2e>
900132bc:	230c      	movs	r3, #12
900132be:	603b      	str	r3, [r7, #0]
900132c0:	f04f 30ff 	mov.w	r0, #4294967295
900132c4:	e0d1      	b.n	9001346a <_svfiprintf_r+0x1d2>
900132c6:	2340      	movs	r3, #64	; 0x40
900132c8:	616b      	str	r3, [r5, #20]
900132ca:	2300      	movs	r3, #0
900132cc:	9309      	str	r3, [sp, #36]	; 0x24
900132ce:	2320      	movs	r3, #32
900132d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
900132d4:	f8cd 800c 	str.w	r8, [sp, #12]
900132d8:	2330      	movs	r3, #48	; 0x30
900132da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 90013484 <_svfiprintf_r+0x1ec>
900132de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
900132e2:	f04f 0901 	mov.w	r9, #1
900132e6:	4623      	mov	r3, r4
900132e8:	469a      	mov	sl, r3
900132ea:	f813 2b01 	ldrb.w	r2, [r3], #1
900132ee:	b10a      	cbz	r2, 900132f4 <_svfiprintf_r+0x5c>
900132f0:	2a25      	cmp	r2, #37	; 0x25
900132f2:	d1f9      	bne.n	900132e8 <_svfiprintf_r+0x50>
900132f4:	ebba 0b04 	subs.w	fp, sl, r4
900132f8:	d00b      	beq.n	90013312 <_svfiprintf_r+0x7a>
900132fa:	465b      	mov	r3, fp
900132fc:	4622      	mov	r2, r4
900132fe:	4629      	mov	r1, r5
90013300:	4638      	mov	r0, r7
90013302:	f7ff ff6d 	bl	900131e0 <__ssputs_r>
90013306:	3001      	adds	r0, #1
90013308:	f000 80aa 	beq.w	90013460 <_svfiprintf_r+0x1c8>
9001330c:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001330e:	445a      	add	r2, fp
90013310:	9209      	str	r2, [sp, #36]	; 0x24
90013312:	f89a 3000 	ldrb.w	r3, [sl]
90013316:	2b00      	cmp	r3, #0
90013318:	f000 80a2 	beq.w	90013460 <_svfiprintf_r+0x1c8>
9001331c:	2300      	movs	r3, #0
9001331e:	f04f 32ff 	mov.w	r2, #4294967295
90013322:	e9cd 2305 	strd	r2, r3, [sp, #20]
90013326:	f10a 0a01 	add.w	sl, sl, #1
9001332a:	9304      	str	r3, [sp, #16]
9001332c:	9307      	str	r3, [sp, #28]
9001332e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90013332:	931a      	str	r3, [sp, #104]	; 0x68
90013334:	4654      	mov	r4, sl
90013336:	2205      	movs	r2, #5
90013338:	f814 1b01 	ldrb.w	r1, [r4], #1
9001333c:	4851      	ldr	r0, [pc, #324]	; (90013484 <_svfiprintf_r+0x1ec>)
9001333e:	f7ec ffd7 	bl	900002f0 <memchr>
90013342:	9a04      	ldr	r2, [sp, #16]
90013344:	b9d8      	cbnz	r0, 9001337e <_svfiprintf_r+0xe6>
90013346:	06d0      	lsls	r0, r2, #27
90013348:	bf44      	itt	mi
9001334a:	2320      	movmi	r3, #32
9001334c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90013350:	0711      	lsls	r1, r2, #28
90013352:	bf44      	itt	mi
90013354:	232b      	movmi	r3, #43	; 0x2b
90013356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9001335a:	f89a 3000 	ldrb.w	r3, [sl]
9001335e:	2b2a      	cmp	r3, #42	; 0x2a
90013360:	d015      	beq.n	9001338e <_svfiprintf_r+0xf6>
90013362:	9a07      	ldr	r2, [sp, #28]
90013364:	4654      	mov	r4, sl
90013366:	2000      	movs	r0, #0
90013368:	f04f 0c0a 	mov.w	ip, #10
9001336c:	4621      	mov	r1, r4
9001336e:	f811 3b01 	ldrb.w	r3, [r1], #1
90013372:	3b30      	subs	r3, #48	; 0x30
90013374:	2b09      	cmp	r3, #9
90013376:	d94e      	bls.n	90013416 <_svfiprintf_r+0x17e>
90013378:	b1b0      	cbz	r0, 900133a8 <_svfiprintf_r+0x110>
9001337a:	9207      	str	r2, [sp, #28]
9001337c:	e014      	b.n	900133a8 <_svfiprintf_r+0x110>
9001337e:	eba0 0308 	sub.w	r3, r0, r8
90013382:	fa09 f303 	lsl.w	r3, r9, r3
90013386:	4313      	orrs	r3, r2
90013388:	9304      	str	r3, [sp, #16]
9001338a:	46a2      	mov	sl, r4
9001338c:	e7d2      	b.n	90013334 <_svfiprintf_r+0x9c>
9001338e:	9b03      	ldr	r3, [sp, #12]
90013390:	1d19      	adds	r1, r3, #4
90013392:	681b      	ldr	r3, [r3, #0]
90013394:	9103      	str	r1, [sp, #12]
90013396:	2b00      	cmp	r3, #0
90013398:	bfbb      	ittet	lt
9001339a:	425b      	neglt	r3, r3
9001339c:	f042 0202 	orrlt.w	r2, r2, #2
900133a0:	9307      	strge	r3, [sp, #28]
900133a2:	9307      	strlt	r3, [sp, #28]
900133a4:	bfb8      	it	lt
900133a6:	9204      	strlt	r2, [sp, #16]
900133a8:	7823      	ldrb	r3, [r4, #0]
900133aa:	2b2e      	cmp	r3, #46	; 0x2e
900133ac:	d10c      	bne.n	900133c8 <_svfiprintf_r+0x130>
900133ae:	7863      	ldrb	r3, [r4, #1]
900133b0:	2b2a      	cmp	r3, #42	; 0x2a
900133b2:	d135      	bne.n	90013420 <_svfiprintf_r+0x188>
900133b4:	9b03      	ldr	r3, [sp, #12]
900133b6:	1d1a      	adds	r2, r3, #4
900133b8:	681b      	ldr	r3, [r3, #0]
900133ba:	9203      	str	r2, [sp, #12]
900133bc:	2b00      	cmp	r3, #0
900133be:	bfb8      	it	lt
900133c0:	f04f 33ff 	movlt.w	r3, #4294967295
900133c4:	3402      	adds	r4, #2
900133c6:	9305      	str	r3, [sp, #20]
900133c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 90013494 <_svfiprintf_r+0x1fc>
900133cc:	7821      	ldrb	r1, [r4, #0]
900133ce:	2203      	movs	r2, #3
900133d0:	4650      	mov	r0, sl
900133d2:	f7ec ff8d 	bl	900002f0 <memchr>
900133d6:	b140      	cbz	r0, 900133ea <_svfiprintf_r+0x152>
900133d8:	2340      	movs	r3, #64	; 0x40
900133da:	eba0 000a 	sub.w	r0, r0, sl
900133de:	fa03 f000 	lsl.w	r0, r3, r0
900133e2:	9b04      	ldr	r3, [sp, #16]
900133e4:	4303      	orrs	r3, r0
900133e6:	3401      	adds	r4, #1
900133e8:	9304      	str	r3, [sp, #16]
900133ea:	f814 1b01 	ldrb.w	r1, [r4], #1
900133ee:	4826      	ldr	r0, [pc, #152]	; (90013488 <_svfiprintf_r+0x1f0>)
900133f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900133f4:	2206      	movs	r2, #6
900133f6:	f7ec ff7b 	bl	900002f0 <memchr>
900133fa:	2800      	cmp	r0, #0
900133fc:	d038      	beq.n	90013470 <_svfiprintf_r+0x1d8>
900133fe:	4b23      	ldr	r3, [pc, #140]	; (9001348c <_svfiprintf_r+0x1f4>)
90013400:	bb1b      	cbnz	r3, 9001344a <_svfiprintf_r+0x1b2>
90013402:	9b03      	ldr	r3, [sp, #12]
90013404:	3307      	adds	r3, #7
90013406:	f023 0307 	bic.w	r3, r3, #7
9001340a:	3308      	adds	r3, #8
9001340c:	9303      	str	r3, [sp, #12]
9001340e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013410:	4433      	add	r3, r6
90013412:	9309      	str	r3, [sp, #36]	; 0x24
90013414:	e767      	b.n	900132e6 <_svfiprintf_r+0x4e>
90013416:	fb0c 3202 	mla	r2, ip, r2, r3
9001341a:	460c      	mov	r4, r1
9001341c:	2001      	movs	r0, #1
9001341e:	e7a5      	b.n	9001336c <_svfiprintf_r+0xd4>
90013420:	2300      	movs	r3, #0
90013422:	3401      	adds	r4, #1
90013424:	9305      	str	r3, [sp, #20]
90013426:	4619      	mov	r1, r3
90013428:	f04f 0c0a 	mov.w	ip, #10
9001342c:	4620      	mov	r0, r4
9001342e:	f810 2b01 	ldrb.w	r2, [r0], #1
90013432:	3a30      	subs	r2, #48	; 0x30
90013434:	2a09      	cmp	r2, #9
90013436:	d903      	bls.n	90013440 <_svfiprintf_r+0x1a8>
90013438:	2b00      	cmp	r3, #0
9001343a:	d0c5      	beq.n	900133c8 <_svfiprintf_r+0x130>
9001343c:	9105      	str	r1, [sp, #20]
9001343e:	e7c3      	b.n	900133c8 <_svfiprintf_r+0x130>
90013440:	fb0c 2101 	mla	r1, ip, r1, r2
90013444:	4604      	mov	r4, r0
90013446:	2301      	movs	r3, #1
90013448:	e7f0      	b.n	9001342c <_svfiprintf_r+0x194>
9001344a:	ab03      	add	r3, sp, #12
9001344c:	9300      	str	r3, [sp, #0]
9001344e:	462a      	mov	r2, r5
90013450:	4b0f      	ldr	r3, [pc, #60]	; (90013490 <_svfiprintf_r+0x1f8>)
90013452:	a904      	add	r1, sp, #16
90013454:	4638      	mov	r0, r7
90013456:	f7fd ff2b 	bl	900112b0 <_printf_float>
9001345a:	1c42      	adds	r2, r0, #1
9001345c:	4606      	mov	r6, r0
9001345e:	d1d6      	bne.n	9001340e <_svfiprintf_r+0x176>
90013460:	89ab      	ldrh	r3, [r5, #12]
90013462:	065b      	lsls	r3, r3, #25
90013464:	f53f af2c 	bmi.w	900132c0 <_svfiprintf_r+0x28>
90013468:	9809      	ldr	r0, [sp, #36]	; 0x24
9001346a:	b01d      	add	sp, #116	; 0x74
9001346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013470:	ab03      	add	r3, sp, #12
90013472:	9300      	str	r3, [sp, #0]
90013474:	462a      	mov	r2, r5
90013476:	4b06      	ldr	r3, [pc, #24]	; (90013490 <_svfiprintf_r+0x1f8>)
90013478:	a904      	add	r1, sp, #16
9001347a:	4638      	mov	r0, r7
9001347c:	f7fe f9a4 	bl	900117c8 <_printf_i>
90013480:	e7eb      	b.n	9001345a <_svfiprintf_r+0x1c2>
90013482:	bf00      	nop
90013484:	90015a6c 	.word	0x90015a6c
90013488:	90015a76 	.word	0x90015a76
9001348c:	900112b1 	.word	0x900112b1
90013490:	900131e1 	.word	0x900131e1
90013494:	90015a72 	.word	0x90015a72

90013498 <__sfputc_r>:
90013498:	6893      	ldr	r3, [r2, #8]
9001349a:	3b01      	subs	r3, #1
9001349c:	2b00      	cmp	r3, #0
9001349e:	b410      	push	{r4}
900134a0:	6093      	str	r3, [r2, #8]
900134a2:	da08      	bge.n	900134b6 <__sfputc_r+0x1e>
900134a4:	6994      	ldr	r4, [r2, #24]
900134a6:	42a3      	cmp	r3, r4
900134a8:	db01      	blt.n	900134ae <__sfputc_r+0x16>
900134aa:	290a      	cmp	r1, #10
900134ac:	d103      	bne.n	900134b6 <__sfputc_r+0x1e>
900134ae:	f85d 4b04 	ldr.w	r4, [sp], #4
900134b2:	f000 b95d 	b.w	90013770 <__swbuf_r>
900134b6:	6813      	ldr	r3, [r2, #0]
900134b8:	1c58      	adds	r0, r3, #1
900134ba:	6010      	str	r0, [r2, #0]
900134bc:	7019      	strb	r1, [r3, #0]
900134be:	4608      	mov	r0, r1
900134c0:	f85d 4b04 	ldr.w	r4, [sp], #4
900134c4:	4770      	bx	lr

900134c6 <__sfputs_r>:
900134c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900134c8:	4606      	mov	r6, r0
900134ca:	460f      	mov	r7, r1
900134cc:	4614      	mov	r4, r2
900134ce:	18d5      	adds	r5, r2, r3
900134d0:	42ac      	cmp	r4, r5
900134d2:	d101      	bne.n	900134d8 <__sfputs_r+0x12>
900134d4:	2000      	movs	r0, #0
900134d6:	e007      	b.n	900134e8 <__sfputs_r+0x22>
900134d8:	f814 1b01 	ldrb.w	r1, [r4], #1
900134dc:	463a      	mov	r2, r7
900134de:	4630      	mov	r0, r6
900134e0:	f7ff ffda 	bl	90013498 <__sfputc_r>
900134e4:	1c43      	adds	r3, r0, #1
900134e6:	d1f3      	bne.n	900134d0 <__sfputs_r+0xa>
900134e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

900134ec <_vfiprintf_r>:
900134ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900134f0:	460d      	mov	r5, r1
900134f2:	b09d      	sub	sp, #116	; 0x74
900134f4:	4614      	mov	r4, r2
900134f6:	4698      	mov	r8, r3
900134f8:	4606      	mov	r6, r0
900134fa:	b118      	cbz	r0, 90013504 <_vfiprintf_r+0x18>
900134fc:	6983      	ldr	r3, [r0, #24]
900134fe:	b90b      	cbnz	r3, 90013504 <_vfiprintf_r+0x18>
90013500:	f7fd fcd4 	bl	90010eac <__sinit>
90013504:	4b89      	ldr	r3, [pc, #548]	; (9001372c <_vfiprintf_r+0x240>)
90013506:	429d      	cmp	r5, r3
90013508:	d11b      	bne.n	90013542 <_vfiprintf_r+0x56>
9001350a:	6875      	ldr	r5, [r6, #4]
9001350c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9001350e:	07d9      	lsls	r1, r3, #31
90013510:	d405      	bmi.n	9001351e <_vfiprintf_r+0x32>
90013512:	89ab      	ldrh	r3, [r5, #12]
90013514:	059a      	lsls	r2, r3, #22
90013516:	d402      	bmi.n	9001351e <_vfiprintf_r+0x32>
90013518:	6da8      	ldr	r0, [r5, #88]	; 0x58
9001351a:	f7fd fd8a 	bl	90011032 <__retarget_lock_acquire_recursive>
9001351e:	89ab      	ldrh	r3, [r5, #12]
90013520:	071b      	lsls	r3, r3, #28
90013522:	d501      	bpl.n	90013528 <_vfiprintf_r+0x3c>
90013524:	692b      	ldr	r3, [r5, #16]
90013526:	b9eb      	cbnz	r3, 90013564 <_vfiprintf_r+0x78>
90013528:	4629      	mov	r1, r5
9001352a:	4630      	mov	r0, r6
9001352c:	f000 f972 	bl	90013814 <__swsetup_r>
90013530:	b1c0      	cbz	r0, 90013564 <_vfiprintf_r+0x78>
90013532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90013534:	07dc      	lsls	r4, r3, #31
90013536:	d50e      	bpl.n	90013556 <_vfiprintf_r+0x6a>
90013538:	f04f 30ff 	mov.w	r0, #4294967295
9001353c:	b01d      	add	sp, #116	; 0x74
9001353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013542:	4b7b      	ldr	r3, [pc, #492]	; (90013730 <_vfiprintf_r+0x244>)
90013544:	429d      	cmp	r5, r3
90013546:	d101      	bne.n	9001354c <_vfiprintf_r+0x60>
90013548:	68b5      	ldr	r5, [r6, #8]
9001354a:	e7df      	b.n	9001350c <_vfiprintf_r+0x20>
9001354c:	4b79      	ldr	r3, [pc, #484]	; (90013734 <_vfiprintf_r+0x248>)
9001354e:	429d      	cmp	r5, r3
90013550:	bf08      	it	eq
90013552:	68f5      	ldreq	r5, [r6, #12]
90013554:	e7da      	b.n	9001350c <_vfiprintf_r+0x20>
90013556:	89ab      	ldrh	r3, [r5, #12]
90013558:	0598      	lsls	r0, r3, #22
9001355a:	d4ed      	bmi.n	90013538 <_vfiprintf_r+0x4c>
9001355c:	6da8      	ldr	r0, [r5, #88]	; 0x58
9001355e:	f7fd fd69 	bl	90011034 <__retarget_lock_release_recursive>
90013562:	e7e9      	b.n	90013538 <_vfiprintf_r+0x4c>
90013564:	2300      	movs	r3, #0
90013566:	9309      	str	r3, [sp, #36]	; 0x24
90013568:	2320      	movs	r3, #32
9001356a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9001356e:	f8cd 800c 	str.w	r8, [sp, #12]
90013572:	2330      	movs	r3, #48	; 0x30
90013574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 90013738 <_vfiprintf_r+0x24c>
90013578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9001357c:	f04f 0901 	mov.w	r9, #1
90013580:	4623      	mov	r3, r4
90013582:	469a      	mov	sl, r3
90013584:	f813 2b01 	ldrb.w	r2, [r3], #1
90013588:	b10a      	cbz	r2, 9001358e <_vfiprintf_r+0xa2>
9001358a:	2a25      	cmp	r2, #37	; 0x25
9001358c:	d1f9      	bne.n	90013582 <_vfiprintf_r+0x96>
9001358e:	ebba 0b04 	subs.w	fp, sl, r4
90013592:	d00b      	beq.n	900135ac <_vfiprintf_r+0xc0>
90013594:	465b      	mov	r3, fp
90013596:	4622      	mov	r2, r4
90013598:	4629      	mov	r1, r5
9001359a:	4630      	mov	r0, r6
9001359c:	f7ff ff93 	bl	900134c6 <__sfputs_r>
900135a0:	3001      	adds	r0, #1
900135a2:	f000 80aa 	beq.w	900136fa <_vfiprintf_r+0x20e>
900135a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
900135a8:	445a      	add	r2, fp
900135aa:	9209      	str	r2, [sp, #36]	; 0x24
900135ac:	f89a 3000 	ldrb.w	r3, [sl]
900135b0:	2b00      	cmp	r3, #0
900135b2:	f000 80a2 	beq.w	900136fa <_vfiprintf_r+0x20e>
900135b6:	2300      	movs	r3, #0
900135b8:	f04f 32ff 	mov.w	r2, #4294967295
900135bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
900135c0:	f10a 0a01 	add.w	sl, sl, #1
900135c4:	9304      	str	r3, [sp, #16]
900135c6:	9307      	str	r3, [sp, #28]
900135c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
900135cc:	931a      	str	r3, [sp, #104]	; 0x68
900135ce:	4654      	mov	r4, sl
900135d0:	2205      	movs	r2, #5
900135d2:	f814 1b01 	ldrb.w	r1, [r4], #1
900135d6:	4858      	ldr	r0, [pc, #352]	; (90013738 <_vfiprintf_r+0x24c>)
900135d8:	f7ec fe8a 	bl	900002f0 <memchr>
900135dc:	9a04      	ldr	r2, [sp, #16]
900135de:	b9d8      	cbnz	r0, 90013618 <_vfiprintf_r+0x12c>
900135e0:	06d1      	lsls	r1, r2, #27
900135e2:	bf44      	itt	mi
900135e4:	2320      	movmi	r3, #32
900135e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900135ea:	0713      	lsls	r3, r2, #28
900135ec:	bf44      	itt	mi
900135ee:	232b      	movmi	r3, #43	; 0x2b
900135f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
900135f4:	f89a 3000 	ldrb.w	r3, [sl]
900135f8:	2b2a      	cmp	r3, #42	; 0x2a
900135fa:	d015      	beq.n	90013628 <_vfiprintf_r+0x13c>
900135fc:	9a07      	ldr	r2, [sp, #28]
900135fe:	4654      	mov	r4, sl
90013600:	2000      	movs	r0, #0
90013602:	f04f 0c0a 	mov.w	ip, #10
90013606:	4621      	mov	r1, r4
90013608:	f811 3b01 	ldrb.w	r3, [r1], #1
9001360c:	3b30      	subs	r3, #48	; 0x30
9001360e:	2b09      	cmp	r3, #9
90013610:	d94e      	bls.n	900136b0 <_vfiprintf_r+0x1c4>
90013612:	b1b0      	cbz	r0, 90013642 <_vfiprintf_r+0x156>
90013614:	9207      	str	r2, [sp, #28]
90013616:	e014      	b.n	90013642 <_vfiprintf_r+0x156>
90013618:	eba0 0308 	sub.w	r3, r0, r8
9001361c:	fa09 f303 	lsl.w	r3, r9, r3
90013620:	4313      	orrs	r3, r2
90013622:	9304      	str	r3, [sp, #16]
90013624:	46a2      	mov	sl, r4
90013626:	e7d2      	b.n	900135ce <_vfiprintf_r+0xe2>
90013628:	9b03      	ldr	r3, [sp, #12]
9001362a:	1d19      	adds	r1, r3, #4
9001362c:	681b      	ldr	r3, [r3, #0]
9001362e:	9103      	str	r1, [sp, #12]
90013630:	2b00      	cmp	r3, #0
90013632:	bfbb      	ittet	lt
90013634:	425b      	neglt	r3, r3
90013636:	f042 0202 	orrlt.w	r2, r2, #2
9001363a:	9307      	strge	r3, [sp, #28]
9001363c:	9307      	strlt	r3, [sp, #28]
9001363e:	bfb8      	it	lt
90013640:	9204      	strlt	r2, [sp, #16]
90013642:	7823      	ldrb	r3, [r4, #0]
90013644:	2b2e      	cmp	r3, #46	; 0x2e
90013646:	d10c      	bne.n	90013662 <_vfiprintf_r+0x176>
90013648:	7863      	ldrb	r3, [r4, #1]
9001364a:	2b2a      	cmp	r3, #42	; 0x2a
9001364c:	d135      	bne.n	900136ba <_vfiprintf_r+0x1ce>
9001364e:	9b03      	ldr	r3, [sp, #12]
90013650:	1d1a      	adds	r2, r3, #4
90013652:	681b      	ldr	r3, [r3, #0]
90013654:	9203      	str	r2, [sp, #12]
90013656:	2b00      	cmp	r3, #0
90013658:	bfb8      	it	lt
9001365a:	f04f 33ff 	movlt.w	r3, #4294967295
9001365e:	3402      	adds	r4, #2
90013660:	9305      	str	r3, [sp, #20]
90013662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 90013748 <_vfiprintf_r+0x25c>
90013666:	7821      	ldrb	r1, [r4, #0]
90013668:	2203      	movs	r2, #3
9001366a:	4650      	mov	r0, sl
9001366c:	f7ec fe40 	bl	900002f0 <memchr>
90013670:	b140      	cbz	r0, 90013684 <_vfiprintf_r+0x198>
90013672:	2340      	movs	r3, #64	; 0x40
90013674:	eba0 000a 	sub.w	r0, r0, sl
90013678:	fa03 f000 	lsl.w	r0, r3, r0
9001367c:	9b04      	ldr	r3, [sp, #16]
9001367e:	4303      	orrs	r3, r0
90013680:	3401      	adds	r4, #1
90013682:	9304      	str	r3, [sp, #16]
90013684:	f814 1b01 	ldrb.w	r1, [r4], #1
90013688:	482c      	ldr	r0, [pc, #176]	; (9001373c <_vfiprintf_r+0x250>)
9001368a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9001368e:	2206      	movs	r2, #6
90013690:	f7ec fe2e 	bl	900002f0 <memchr>
90013694:	2800      	cmp	r0, #0
90013696:	d03f      	beq.n	90013718 <_vfiprintf_r+0x22c>
90013698:	4b29      	ldr	r3, [pc, #164]	; (90013740 <_vfiprintf_r+0x254>)
9001369a:	bb1b      	cbnz	r3, 900136e4 <_vfiprintf_r+0x1f8>
9001369c:	9b03      	ldr	r3, [sp, #12]
9001369e:	3307      	adds	r3, #7
900136a0:	f023 0307 	bic.w	r3, r3, #7
900136a4:	3308      	adds	r3, #8
900136a6:	9303      	str	r3, [sp, #12]
900136a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900136aa:	443b      	add	r3, r7
900136ac:	9309      	str	r3, [sp, #36]	; 0x24
900136ae:	e767      	b.n	90013580 <_vfiprintf_r+0x94>
900136b0:	fb0c 3202 	mla	r2, ip, r2, r3
900136b4:	460c      	mov	r4, r1
900136b6:	2001      	movs	r0, #1
900136b8:	e7a5      	b.n	90013606 <_vfiprintf_r+0x11a>
900136ba:	2300      	movs	r3, #0
900136bc:	3401      	adds	r4, #1
900136be:	9305      	str	r3, [sp, #20]
900136c0:	4619      	mov	r1, r3
900136c2:	f04f 0c0a 	mov.w	ip, #10
900136c6:	4620      	mov	r0, r4
900136c8:	f810 2b01 	ldrb.w	r2, [r0], #1
900136cc:	3a30      	subs	r2, #48	; 0x30
900136ce:	2a09      	cmp	r2, #9
900136d0:	d903      	bls.n	900136da <_vfiprintf_r+0x1ee>
900136d2:	2b00      	cmp	r3, #0
900136d4:	d0c5      	beq.n	90013662 <_vfiprintf_r+0x176>
900136d6:	9105      	str	r1, [sp, #20]
900136d8:	e7c3      	b.n	90013662 <_vfiprintf_r+0x176>
900136da:	fb0c 2101 	mla	r1, ip, r1, r2
900136de:	4604      	mov	r4, r0
900136e0:	2301      	movs	r3, #1
900136e2:	e7f0      	b.n	900136c6 <_vfiprintf_r+0x1da>
900136e4:	ab03      	add	r3, sp, #12
900136e6:	9300      	str	r3, [sp, #0]
900136e8:	462a      	mov	r2, r5
900136ea:	4b16      	ldr	r3, [pc, #88]	; (90013744 <_vfiprintf_r+0x258>)
900136ec:	a904      	add	r1, sp, #16
900136ee:	4630      	mov	r0, r6
900136f0:	f7fd fdde 	bl	900112b0 <_printf_float>
900136f4:	4607      	mov	r7, r0
900136f6:	1c78      	adds	r0, r7, #1
900136f8:	d1d6      	bne.n	900136a8 <_vfiprintf_r+0x1bc>
900136fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900136fc:	07d9      	lsls	r1, r3, #31
900136fe:	d405      	bmi.n	9001370c <_vfiprintf_r+0x220>
90013700:	89ab      	ldrh	r3, [r5, #12]
90013702:	059a      	lsls	r2, r3, #22
90013704:	d402      	bmi.n	9001370c <_vfiprintf_r+0x220>
90013706:	6da8      	ldr	r0, [r5, #88]	; 0x58
90013708:	f7fd fc94 	bl	90011034 <__retarget_lock_release_recursive>
9001370c:	89ab      	ldrh	r3, [r5, #12]
9001370e:	065b      	lsls	r3, r3, #25
90013710:	f53f af12 	bmi.w	90013538 <_vfiprintf_r+0x4c>
90013714:	9809      	ldr	r0, [sp, #36]	; 0x24
90013716:	e711      	b.n	9001353c <_vfiprintf_r+0x50>
90013718:	ab03      	add	r3, sp, #12
9001371a:	9300      	str	r3, [sp, #0]
9001371c:	462a      	mov	r2, r5
9001371e:	4b09      	ldr	r3, [pc, #36]	; (90013744 <_vfiprintf_r+0x258>)
90013720:	a904      	add	r1, sp, #16
90013722:	4630      	mov	r0, r6
90013724:	f7fe f850 	bl	900117c8 <_printf_i>
90013728:	e7e4      	b.n	900136f4 <_vfiprintf_r+0x208>
9001372a:	bf00      	nop
9001372c:	90015808 	.word	0x90015808
90013730:	90015828 	.word	0x90015828
90013734:	900157e8 	.word	0x900157e8
90013738:	90015a6c 	.word	0x90015a6c
9001373c:	90015a76 	.word	0x90015a76
90013740:	900112b1 	.word	0x900112b1
90013744:	900134c7 	.word	0x900134c7
90013748:	90015a72 	.word	0x90015a72

9001374c <_read_r>:
9001374c:	b538      	push	{r3, r4, r5, lr}
9001374e:	4d07      	ldr	r5, [pc, #28]	; (9001376c <_read_r+0x20>)
90013750:	4604      	mov	r4, r0
90013752:	4608      	mov	r0, r1
90013754:	4611      	mov	r1, r2
90013756:	2200      	movs	r2, #0
90013758:	602a      	str	r2, [r5, #0]
9001375a:	461a      	mov	r2, r3
9001375c:	f7ee fba8 	bl	90001eb0 <_read>
90013760:	1c43      	adds	r3, r0, #1
90013762:	d102      	bne.n	9001376a <_read_r+0x1e>
90013764:	682b      	ldr	r3, [r5, #0]
90013766:	b103      	cbz	r3, 9001376a <_read_r+0x1e>
90013768:	6023      	str	r3, [r4, #0]
9001376a:	bd38      	pop	{r3, r4, r5, pc}
9001376c:	24005844 	.word	0x24005844

90013770 <__swbuf_r>:
90013770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013772:	460e      	mov	r6, r1
90013774:	4614      	mov	r4, r2
90013776:	4605      	mov	r5, r0
90013778:	b118      	cbz	r0, 90013782 <__swbuf_r+0x12>
9001377a:	6983      	ldr	r3, [r0, #24]
9001377c:	b90b      	cbnz	r3, 90013782 <__swbuf_r+0x12>
9001377e:	f7fd fb95 	bl	90010eac <__sinit>
90013782:	4b21      	ldr	r3, [pc, #132]	; (90013808 <__swbuf_r+0x98>)
90013784:	429c      	cmp	r4, r3
90013786:	d12b      	bne.n	900137e0 <__swbuf_r+0x70>
90013788:	686c      	ldr	r4, [r5, #4]
9001378a:	69a3      	ldr	r3, [r4, #24]
9001378c:	60a3      	str	r3, [r4, #8]
9001378e:	89a3      	ldrh	r3, [r4, #12]
90013790:	071a      	lsls	r2, r3, #28
90013792:	d52f      	bpl.n	900137f4 <__swbuf_r+0x84>
90013794:	6923      	ldr	r3, [r4, #16]
90013796:	b36b      	cbz	r3, 900137f4 <__swbuf_r+0x84>
90013798:	6923      	ldr	r3, [r4, #16]
9001379a:	6820      	ldr	r0, [r4, #0]
9001379c:	1ac0      	subs	r0, r0, r3
9001379e:	6963      	ldr	r3, [r4, #20]
900137a0:	b2f6      	uxtb	r6, r6
900137a2:	4283      	cmp	r3, r0
900137a4:	4637      	mov	r7, r6
900137a6:	dc04      	bgt.n	900137b2 <__swbuf_r+0x42>
900137a8:	4621      	mov	r1, r4
900137aa:	4628      	mov	r0, r5
900137ac:	f7ff f8cc 	bl	90012948 <_fflush_r>
900137b0:	bb30      	cbnz	r0, 90013800 <__swbuf_r+0x90>
900137b2:	68a3      	ldr	r3, [r4, #8]
900137b4:	3b01      	subs	r3, #1
900137b6:	60a3      	str	r3, [r4, #8]
900137b8:	6823      	ldr	r3, [r4, #0]
900137ba:	1c5a      	adds	r2, r3, #1
900137bc:	6022      	str	r2, [r4, #0]
900137be:	701e      	strb	r6, [r3, #0]
900137c0:	6963      	ldr	r3, [r4, #20]
900137c2:	3001      	adds	r0, #1
900137c4:	4283      	cmp	r3, r0
900137c6:	d004      	beq.n	900137d2 <__swbuf_r+0x62>
900137c8:	89a3      	ldrh	r3, [r4, #12]
900137ca:	07db      	lsls	r3, r3, #31
900137cc:	d506      	bpl.n	900137dc <__swbuf_r+0x6c>
900137ce:	2e0a      	cmp	r6, #10
900137d0:	d104      	bne.n	900137dc <__swbuf_r+0x6c>
900137d2:	4621      	mov	r1, r4
900137d4:	4628      	mov	r0, r5
900137d6:	f7ff f8b7 	bl	90012948 <_fflush_r>
900137da:	b988      	cbnz	r0, 90013800 <__swbuf_r+0x90>
900137dc:	4638      	mov	r0, r7
900137de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900137e0:	4b0a      	ldr	r3, [pc, #40]	; (9001380c <__swbuf_r+0x9c>)
900137e2:	429c      	cmp	r4, r3
900137e4:	d101      	bne.n	900137ea <__swbuf_r+0x7a>
900137e6:	68ac      	ldr	r4, [r5, #8]
900137e8:	e7cf      	b.n	9001378a <__swbuf_r+0x1a>
900137ea:	4b09      	ldr	r3, [pc, #36]	; (90013810 <__swbuf_r+0xa0>)
900137ec:	429c      	cmp	r4, r3
900137ee:	bf08      	it	eq
900137f0:	68ec      	ldreq	r4, [r5, #12]
900137f2:	e7ca      	b.n	9001378a <__swbuf_r+0x1a>
900137f4:	4621      	mov	r1, r4
900137f6:	4628      	mov	r0, r5
900137f8:	f000 f80c 	bl	90013814 <__swsetup_r>
900137fc:	2800      	cmp	r0, #0
900137fe:	d0cb      	beq.n	90013798 <__swbuf_r+0x28>
90013800:	f04f 37ff 	mov.w	r7, #4294967295
90013804:	e7ea      	b.n	900137dc <__swbuf_r+0x6c>
90013806:	bf00      	nop
90013808:	90015808 	.word	0x90015808
9001380c:	90015828 	.word	0x90015828
90013810:	900157e8 	.word	0x900157e8

90013814 <__swsetup_r>:
90013814:	4b32      	ldr	r3, [pc, #200]	; (900138e0 <__swsetup_r+0xcc>)
90013816:	b570      	push	{r4, r5, r6, lr}
90013818:	681d      	ldr	r5, [r3, #0]
9001381a:	4606      	mov	r6, r0
9001381c:	460c      	mov	r4, r1
9001381e:	b125      	cbz	r5, 9001382a <__swsetup_r+0x16>
90013820:	69ab      	ldr	r3, [r5, #24]
90013822:	b913      	cbnz	r3, 9001382a <__swsetup_r+0x16>
90013824:	4628      	mov	r0, r5
90013826:	f7fd fb41 	bl	90010eac <__sinit>
9001382a:	4b2e      	ldr	r3, [pc, #184]	; (900138e4 <__swsetup_r+0xd0>)
9001382c:	429c      	cmp	r4, r3
9001382e:	d10f      	bne.n	90013850 <__swsetup_r+0x3c>
90013830:	686c      	ldr	r4, [r5, #4]
90013832:	89a3      	ldrh	r3, [r4, #12]
90013834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90013838:	0719      	lsls	r1, r3, #28
9001383a:	d42c      	bmi.n	90013896 <__swsetup_r+0x82>
9001383c:	06dd      	lsls	r5, r3, #27
9001383e:	d411      	bmi.n	90013864 <__swsetup_r+0x50>
90013840:	2309      	movs	r3, #9
90013842:	6033      	str	r3, [r6, #0]
90013844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90013848:	81a3      	strh	r3, [r4, #12]
9001384a:	f04f 30ff 	mov.w	r0, #4294967295
9001384e:	e03e      	b.n	900138ce <__swsetup_r+0xba>
90013850:	4b25      	ldr	r3, [pc, #148]	; (900138e8 <__swsetup_r+0xd4>)
90013852:	429c      	cmp	r4, r3
90013854:	d101      	bne.n	9001385a <__swsetup_r+0x46>
90013856:	68ac      	ldr	r4, [r5, #8]
90013858:	e7eb      	b.n	90013832 <__swsetup_r+0x1e>
9001385a:	4b24      	ldr	r3, [pc, #144]	; (900138ec <__swsetup_r+0xd8>)
9001385c:	429c      	cmp	r4, r3
9001385e:	bf08      	it	eq
90013860:	68ec      	ldreq	r4, [r5, #12]
90013862:	e7e6      	b.n	90013832 <__swsetup_r+0x1e>
90013864:	0758      	lsls	r0, r3, #29
90013866:	d512      	bpl.n	9001388e <__swsetup_r+0x7a>
90013868:	6b61      	ldr	r1, [r4, #52]	; 0x34
9001386a:	b141      	cbz	r1, 9001387e <__swsetup_r+0x6a>
9001386c:	f104 0344 	add.w	r3, r4, #68	; 0x44
90013870:	4299      	cmp	r1, r3
90013872:	d002      	beq.n	9001387a <__swsetup_r+0x66>
90013874:	4630      	mov	r0, r6
90013876:	f7ff fc67 	bl	90013148 <_free_r>
9001387a:	2300      	movs	r3, #0
9001387c:	6363      	str	r3, [r4, #52]	; 0x34
9001387e:	89a3      	ldrh	r3, [r4, #12]
90013880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90013884:	81a3      	strh	r3, [r4, #12]
90013886:	2300      	movs	r3, #0
90013888:	6063      	str	r3, [r4, #4]
9001388a:	6923      	ldr	r3, [r4, #16]
9001388c:	6023      	str	r3, [r4, #0]
9001388e:	89a3      	ldrh	r3, [r4, #12]
90013890:	f043 0308 	orr.w	r3, r3, #8
90013894:	81a3      	strh	r3, [r4, #12]
90013896:	6923      	ldr	r3, [r4, #16]
90013898:	b94b      	cbnz	r3, 900138ae <__swsetup_r+0x9a>
9001389a:	89a3      	ldrh	r3, [r4, #12]
9001389c:	f403 7320 	and.w	r3, r3, #640	; 0x280
900138a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900138a4:	d003      	beq.n	900138ae <__swsetup_r+0x9a>
900138a6:	4621      	mov	r1, r4
900138a8:	4630      	mov	r0, r6
900138aa:	f000 f877 	bl	9001399c <__smakebuf_r>
900138ae:	89a0      	ldrh	r0, [r4, #12]
900138b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900138b4:	f010 0301 	ands.w	r3, r0, #1
900138b8:	d00a      	beq.n	900138d0 <__swsetup_r+0xbc>
900138ba:	2300      	movs	r3, #0
900138bc:	60a3      	str	r3, [r4, #8]
900138be:	6963      	ldr	r3, [r4, #20]
900138c0:	425b      	negs	r3, r3
900138c2:	61a3      	str	r3, [r4, #24]
900138c4:	6923      	ldr	r3, [r4, #16]
900138c6:	b943      	cbnz	r3, 900138da <__swsetup_r+0xc6>
900138c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
900138cc:	d1ba      	bne.n	90013844 <__swsetup_r+0x30>
900138ce:	bd70      	pop	{r4, r5, r6, pc}
900138d0:	0781      	lsls	r1, r0, #30
900138d2:	bf58      	it	pl
900138d4:	6963      	ldrpl	r3, [r4, #20]
900138d6:	60a3      	str	r3, [r4, #8]
900138d8:	e7f4      	b.n	900138c4 <__swsetup_r+0xb0>
900138da:	2000      	movs	r0, #0
900138dc:	e7f7      	b.n	900138ce <__swsetup_r+0xba>
900138de:	bf00      	nop
900138e0:	24000040 	.word	0x24000040
900138e4:	90015808 	.word	0x90015808
900138e8:	90015828 	.word	0x90015828
900138ec:	900157e8 	.word	0x900157e8

900138f0 <__assert_func>:
900138f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
900138f2:	4614      	mov	r4, r2
900138f4:	461a      	mov	r2, r3
900138f6:	4b09      	ldr	r3, [pc, #36]	; (9001391c <__assert_func+0x2c>)
900138f8:	681b      	ldr	r3, [r3, #0]
900138fa:	4605      	mov	r5, r0
900138fc:	68d8      	ldr	r0, [r3, #12]
900138fe:	b14c      	cbz	r4, 90013914 <__assert_func+0x24>
90013900:	4b07      	ldr	r3, [pc, #28]	; (90013920 <__assert_func+0x30>)
90013902:	9100      	str	r1, [sp, #0]
90013904:	e9cd 3401 	strd	r3, r4, [sp, #4]
90013908:	4906      	ldr	r1, [pc, #24]	; (90013924 <__assert_func+0x34>)
9001390a:	462b      	mov	r3, r5
9001390c:	f000 f80e 	bl	9001392c <fiprintf>
90013910:	f000 f8ec 	bl	90013aec <abort>
90013914:	4b04      	ldr	r3, [pc, #16]	; (90013928 <__assert_func+0x38>)
90013916:	461c      	mov	r4, r3
90013918:	e7f3      	b.n	90013902 <__assert_func+0x12>
9001391a:	bf00      	nop
9001391c:	24000040 	.word	0x24000040
90013920:	90015a7d 	.word	0x90015a7d
90013924:	90015a8a 	.word	0x90015a8a
90013928:	90015ab8 	.word	0x90015ab8

9001392c <fiprintf>:
9001392c:	b40e      	push	{r1, r2, r3}
9001392e:	b503      	push	{r0, r1, lr}
90013930:	4601      	mov	r1, r0
90013932:	ab03      	add	r3, sp, #12
90013934:	4805      	ldr	r0, [pc, #20]	; (9001394c <fiprintf+0x20>)
90013936:	f853 2b04 	ldr.w	r2, [r3], #4
9001393a:	6800      	ldr	r0, [r0, #0]
9001393c:	9301      	str	r3, [sp, #4]
9001393e:	f7ff fdd5 	bl	900134ec <_vfiprintf_r>
90013942:	b002      	add	sp, #8
90013944:	f85d eb04 	ldr.w	lr, [sp], #4
90013948:	b003      	add	sp, #12
9001394a:	4770      	bx	lr
9001394c:	24000040 	.word	0x24000040

90013950 <__swhatbuf_r>:
90013950:	b570      	push	{r4, r5, r6, lr}
90013952:	460e      	mov	r6, r1
90013954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90013958:	2900      	cmp	r1, #0
9001395a:	b096      	sub	sp, #88	; 0x58
9001395c:	4614      	mov	r4, r2
9001395e:	461d      	mov	r5, r3
90013960:	da08      	bge.n	90013974 <__swhatbuf_r+0x24>
90013962:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90013966:	2200      	movs	r2, #0
90013968:	602a      	str	r2, [r5, #0]
9001396a:	061a      	lsls	r2, r3, #24
9001396c:	d410      	bmi.n	90013990 <__swhatbuf_r+0x40>
9001396e:	f44f 6380 	mov.w	r3, #1024	; 0x400
90013972:	e00e      	b.n	90013992 <__swhatbuf_r+0x42>
90013974:	466a      	mov	r2, sp
90013976:	f000 f8c1 	bl	90013afc <_fstat_r>
9001397a:	2800      	cmp	r0, #0
9001397c:	dbf1      	blt.n	90013962 <__swhatbuf_r+0x12>
9001397e:	9a01      	ldr	r2, [sp, #4]
90013980:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90013984:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90013988:	425a      	negs	r2, r3
9001398a:	415a      	adcs	r2, r3
9001398c:	602a      	str	r2, [r5, #0]
9001398e:	e7ee      	b.n	9001396e <__swhatbuf_r+0x1e>
90013990:	2340      	movs	r3, #64	; 0x40
90013992:	2000      	movs	r0, #0
90013994:	6023      	str	r3, [r4, #0]
90013996:	b016      	add	sp, #88	; 0x58
90013998:	bd70      	pop	{r4, r5, r6, pc}
	...

9001399c <__smakebuf_r>:
9001399c:	898b      	ldrh	r3, [r1, #12]
9001399e:	b573      	push	{r0, r1, r4, r5, r6, lr}
900139a0:	079d      	lsls	r5, r3, #30
900139a2:	4606      	mov	r6, r0
900139a4:	460c      	mov	r4, r1
900139a6:	d507      	bpl.n	900139b8 <__smakebuf_r+0x1c>
900139a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
900139ac:	6023      	str	r3, [r4, #0]
900139ae:	6123      	str	r3, [r4, #16]
900139b0:	2301      	movs	r3, #1
900139b2:	6163      	str	r3, [r4, #20]
900139b4:	b002      	add	sp, #8
900139b6:	bd70      	pop	{r4, r5, r6, pc}
900139b8:	ab01      	add	r3, sp, #4
900139ba:	466a      	mov	r2, sp
900139bc:	f7ff ffc8 	bl	90013950 <__swhatbuf_r>
900139c0:	9900      	ldr	r1, [sp, #0]
900139c2:	4605      	mov	r5, r0
900139c4:	4630      	mov	r0, r6
900139c6:	f7fd fb6d 	bl	900110a4 <_malloc_r>
900139ca:	b948      	cbnz	r0, 900139e0 <__smakebuf_r+0x44>
900139cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900139d0:	059a      	lsls	r2, r3, #22
900139d2:	d4ef      	bmi.n	900139b4 <__smakebuf_r+0x18>
900139d4:	f023 0303 	bic.w	r3, r3, #3
900139d8:	f043 0302 	orr.w	r3, r3, #2
900139dc:	81a3      	strh	r3, [r4, #12]
900139de:	e7e3      	b.n	900139a8 <__smakebuf_r+0xc>
900139e0:	4b0d      	ldr	r3, [pc, #52]	; (90013a18 <__smakebuf_r+0x7c>)
900139e2:	62b3      	str	r3, [r6, #40]	; 0x28
900139e4:	89a3      	ldrh	r3, [r4, #12]
900139e6:	6020      	str	r0, [r4, #0]
900139e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900139ec:	81a3      	strh	r3, [r4, #12]
900139ee:	9b00      	ldr	r3, [sp, #0]
900139f0:	6163      	str	r3, [r4, #20]
900139f2:	9b01      	ldr	r3, [sp, #4]
900139f4:	6120      	str	r0, [r4, #16]
900139f6:	b15b      	cbz	r3, 90013a10 <__smakebuf_r+0x74>
900139f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
900139fc:	4630      	mov	r0, r6
900139fe:	f000 f88f 	bl	90013b20 <_isatty_r>
90013a02:	b128      	cbz	r0, 90013a10 <__smakebuf_r+0x74>
90013a04:	89a3      	ldrh	r3, [r4, #12]
90013a06:	f023 0303 	bic.w	r3, r3, #3
90013a0a:	f043 0301 	orr.w	r3, r3, #1
90013a0e:	81a3      	strh	r3, [r4, #12]
90013a10:	89a0      	ldrh	r0, [r4, #12]
90013a12:	4305      	orrs	r5, r0
90013a14:	81a5      	strh	r5, [r4, #12]
90013a16:	e7cd      	b.n	900139b4 <__smakebuf_r+0x18>
90013a18:	90010e45 	.word	0x90010e45

90013a1c <__ascii_mbtowc>:
90013a1c:	b082      	sub	sp, #8
90013a1e:	b901      	cbnz	r1, 90013a22 <__ascii_mbtowc+0x6>
90013a20:	a901      	add	r1, sp, #4
90013a22:	b142      	cbz	r2, 90013a36 <__ascii_mbtowc+0x1a>
90013a24:	b14b      	cbz	r3, 90013a3a <__ascii_mbtowc+0x1e>
90013a26:	7813      	ldrb	r3, [r2, #0]
90013a28:	600b      	str	r3, [r1, #0]
90013a2a:	7812      	ldrb	r2, [r2, #0]
90013a2c:	1e10      	subs	r0, r2, #0
90013a2e:	bf18      	it	ne
90013a30:	2001      	movne	r0, #1
90013a32:	b002      	add	sp, #8
90013a34:	4770      	bx	lr
90013a36:	4610      	mov	r0, r2
90013a38:	e7fb      	b.n	90013a32 <__ascii_mbtowc+0x16>
90013a3a:	f06f 0001 	mvn.w	r0, #1
90013a3e:	e7f8      	b.n	90013a32 <__ascii_mbtowc+0x16>

90013a40 <memmove>:
90013a40:	4288      	cmp	r0, r1
90013a42:	b510      	push	{r4, lr}
90013a44:	eb01 0402 	add.w	r4, r1, r2
90013a48:	d902      	bls.n	90013a50 <memmove+0x10>
90013a4a:	4284      	cmp	r4, r0
90013a4c:	4623      	mov	r3, r4
90013a4e:	d807      	bhi.n	90013a60 <memmove+0x20>
90013a50:	1e43      	subs	r3, r0, #1
90013a52:	42a1      	cmp	r1, r4
90013a54:	d008      	beq.n	90013a68 <memmove+0x28>
90013a56:	f811 2b01 	ldrb.w	r2, [r1], #1
90013a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
90013a5e:	e7f8      	b.n	90013a52 <memmove+0x12>
90013a60:	4402      	add	r2, r0
90013a62:	4601      	mov	r1, r0
90013a64:	428a      	cmp	r2, r1
90013a66:	d100      	bne.n	90013a6a <memmove+0x2a>
90013a68:	bd10      	pop	{r4, pc}
90013a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
90013a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
90013a72:	e7f7      	b.n	90013a64 <memmove+0x24>

90013a74 <_realloc_r>:
90013a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90013a78:	4680      	mov	r8, r0
90013a7a:	4614      	mov	r4, r2
90013a7c:	460e      	mov	r6, r1
90013a7e:	b921      	cbnz	r1, 90013a8a <_realloc_r+0x16>
90013a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90013a84:	4611      	mov	r1, r2
90013a86:	f7fd bb0d 	b.w	900110a4 <_malloc_r>
90013a8a:	b92a      	cbnz	r2, 90013a98 <_realloc_r+0x24>
90013a8c:	f7ff fb5c 	bl	90013148 <_free_r>
90013a90:	4625      	mov	r5, r4
90013a92:	4628      	mov	r0, r5
90013a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013a98:	f000 f852 	bl	90013b40 <_malloc_usable_size_r>
90013a9c:	4284      	cmp	r4, r0
90013a9e:	4607      	mov	r7, r0
90013aa0:	d802      	bhi.n	90013aa8 <_realloc_r+0x34>
90013aa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
90013aa6:	d812      	bhi.n	90013ace <_realloc_r+0x5a>
90013aa8:	4621      	mov	r1, r4
90013aaa:	4640      	mov	r0, r8
90013aac:	f7fd fafa 	bl	900110a4 <_malloc_r>
90013ab0:	4605      	mov	r5, r0
90013ab2:	2800      	cmp	r0, #0
90013ab4:	d0ed      	beq.n	90013a92 <_realloc_r+0x1e>
90013ab6:	42bc      	cmp	r4, r7
90013ab8:	4622      	mov	r2, r4
90013aba:	4631      	mov	r1, r6
90013abc:	bf28      	it	cs
90013abe:	463a      	movcs	r2, r7
90013ac0:	f7fd fab9 	bl	90011036 <memcpy>
90013ac4:	4631      	mov	r1, r6
90013ac6:	4640      	mov	r0, r8
90013ac8:	f7ff fb3e 	bl	90013148 <_free_r>
90013acc:	e7e1      	b.n	90013a92 <_realloc_r+0x1e>
90013ace:	4635      	mov	r5, r6
90013ad0:	e7df      	b.n	90013a92 <_realloc_r+0x1e>

90013ad2 <__ascii_wctomb>:
90013ad2:	b149      	cbz	r1, 90013ae8 <__ascii_wctomb+0x16>
90013ad4:	2aff      	cmp	r2, #255	; 0xff
90013ad6:	bf85      	ittet	hi
90013ad8:	238a      	movhi	r3, #138	; 0x8a
90013ada:	6003      	strhi	r3, [r0, #0]
90013adc:	700a      	strbls	r2, [r1, #0]
90013ade:	f04f 30ff 	movhi.w	r0, #4294967295
90013ae2:	bf98      	it	ls
90013ae4:	2001      	movls	r0, #1
90013ae6:	4770      	bx	lr
90013ae8:	4608      	mov	r0, r1
90013aea:	4770      	bx	lr

90013aec <abort>:
90013aec:	b508      	push	{r3, lr}
90013aee:	2006      	movs	r0, #6
90013af0:	f000 f856 	bl	90013ba0 <raise>
90013af4:	2001      	movs	r0, #1
90013af6:	f7ee f9d1 	bl	90001e9c <_exit>
	...

90013afc <_fstat_r>:
90013afc:	b538      	push	{r3, r4, r5, lr}
90013afe:	4d07      	ldr	r5, [pc, #28]	; (90013b1c <_fstat_r+0x20>)
90013b00:	2300      	movs	r3, #0
90013b02:	4604      	mov	r4, r0
90013b04:	4608      	mov	r0, r1
90013b06:	4611      	mov	r1, r2
90013b08:	602b      	str	r3, [r5, #0]
90013b0a:	f7ee fa16 	bl	90001f3a <_fstat>
90013b0e:	1c43      	adds	r3, r0, #1
90013b10:	d102      	bne.n	90013b18 <_fstat_r+0x1c>
90013b12:	682b      	ldr	r3, [r5, #0]
90013b14:	b103      	cbz	r3, 90013b18 <_fstat_r+0x1c>
90013b16:	6023      	str	r3, [r4, #0]
90013b18:	bd38      	pop	{r3, r4, r5, pc}
90013b1a:	bf00      	nop
90013b1c:	24005844 	.word	0x24005844

90013b20 <_isatty_r>:
90013b20:	b538      	push	{r3, r4, r5, lr}
90013b22:	4d06      	ldr	r5, [pc, #24]	; (90013b3c <_isatty_r+0x1c>)
90013b24:	2300      	movs	r3, #0
90013b26:	4604      	mov	r4, r0
90013b28:	4608      	mov	r0, r1
90013b2a:	602b      	str	r3, [r5, #0]
90013b2c:	f7ee fa15 	bl	90001f5a <_isatty>
90013b30:	1c43      	adds	r3, r0, #1
90013b32:	d102      	bne.n	90013b3a <_isatty_r+0x1a>
90013b34:	682b      	ldr	r3, [r5, #0]
90013b36:	b103      	cbz	r3, 90013b3a <_isatty_r+0x1a>
90013b38:	6023      	str	r3, [r4, #0]
90013b3a:	bd38      	pop	{r3, r4, r5, pc}
90013b3c:	24005844 	.word	0x24005844

90013b40 <_malloc_usable_size_r>:
90013b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
90013b44:	1f18      	subs	r0, r3, #4
90013b46:	2b00      	cmp	r3, #0
90013b48:	bfbc      	itt	lt
90013b4a:	580b      	ldrlt	r3, [r1, r0]
90013b4c:	18c0      	addlt	r0, r0, r3
90013b4e:	4770      	bx	lr

90013b50 <_raise_r>:
90013b50:	291f      	cmp	r1, #31
90013b52:	b538      	push	{r3, r4, r5, lr}
90013b54:	4604      	mov	r4, r0
90013b56:	460d      	mov	r5, r1
90013b58:	d904      	bls.n	90013b64 <_raise_r+0x14>
90013b5a:	2316      	movs	r3, #22
90013b5c:	6003      	str	r3, [r0, #0]
90013b5e:	f04f 30ff 	mov.w	r0, #4294967295
90013b62:	bd38      	pop	{r3, r4, r5, pc}
90013b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
90013b66:	b112      	cbz	r2, 90013b6e <_raise_r+0x1e>
90013b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90013b6c:	b94b      	cbnz	r3, 90013b82 <_raise_r+0x32>
90013b6e:	4620      	mov	r0, r4
90013b70:	f000 f830 	bl	90013bd4 <_getpid_r>
90013b74:	462a      	mov	r2, r5
90013b76:	4601      	mov	r1, r0
90013b78:	4620      	mov	r0, r4
90013b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90013b7e:	f000 b817 	b.w	90013bb0 <_kill_r>
90013b82:	2b01      	cmp	r3, #1
90013b84:	d00a      	beq.n	90013b9c <_raise_r+0x4c>
90013b86:	1c59      	adds	r1, r3, #1
90013b88:	d103      	bne.n	90013b92 <_raise_r+0x42>
90013b8a:	2316      	movs	r3, #22
90013b8c:	6003      	str	r3, [r0, #0]
90013b8e:	2001      	movs	r0, #1
90013b90:	e7e7      	b.n	90013b62 <_raise_r+0x12>
90013b92:	2400      	movs	r4, #0
90013b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90013b98:	4628      	mov	r0, r5
90013b9a:	4798      	blx	r3
90013b9c:	2000      	movs	r0, #0
90013b9e:	e7e0      	b.n	90013b62 <_raise_r+0x12>

90013ba0 <raise>:
90013ba0:	4b02      	ldr	r3, [pc, #8]	; (90013bac <raise+0xc>)
90013ba2:	4601      	mov	r1, r0
90013ba4:	6818      	ldr	r0, [r3, #0]
90013ba6:	f7ff bfd3 	b.w	90013b50 <_raise_r>
90013baa:	bf00      	nop
90013bac:	24000040 	.word	0x24000040

90013bb0 <_kill_r>:
90013bb0:	b538      	push	{r3, r4, r5, lr}
90013bb2:	4d07      	ldr	r5, [pc, #28]	; (90013bd0 <_kill_r+0x20>)
90013bb4:	2300      	movs	r3, #0
90013bb6:	4604      	mov	r4, r0
90013bb8:	4608      	mov	r0, r1
90013bba:	4611      	mov	r1, r2
90013bbc:	602b      	str	r3, [r5, #0]
90013bbe:	f7ee f95d 	bl	90001e7c <_kill>
90013bc2:	1c43      	adds	r3, r0, #1
90013bc4:	d102      	bne.n	90013bcc <_kill_r+0x1c>
90013bc6:	682b      	ldr	r3, [r5, #0]
90013bc8:	b103      	cbz	r3, 90013bcc <_kill_r+0x1c>
90013bca:	6023      	str	r3, [r4, #0]
90013bcc:	bd38      	pop	{r3, r4, r5, pc}
90013bce:	bf00      	nop
90013bd0:	24005844 	.word	0x24005844

90013bd4 <_getpid_r>:
90013bd4:	f7ee b94a 	b.w	90001e6c <_getpid>

90013bd8 <_init>:
90013bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013bda:	bf00      	nop
90013bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
90013bde:	bc08      	pop	{r3}
90013be0:	469e      	mov	lr, r3
90013be2:	4770      	bx	lr

90013be4 <_fini>:
90013be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013be6:	bf00      	nop
90013be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
90013bea:	bc08      	pop	{r3}
90013bec:	469e      	mov	lr, r3
90013bee:	4770      	bx	lr
