
BmpTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f44  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080091e8  080091e8  000191e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08009560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000250  200001e4  08009744  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000434  08009744  00020434  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ac0d  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002c44  00000000  00000000  0003ae1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e70  00000000  00000000  0003da68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d58  00000000  00000000  0003e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038f3d  00000000  00000000  0003f630  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000de11  00000000  00000000  0007856d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001776c3  00000000  00000000  0008637e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001fda41  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004630  00000000  00000000  001fdabc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e4 	.word	0x200001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080091cc 	.word	0x080091cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e8 	.word	0x200001e8
 80002dc:	080091cc 	.word	0x080091cc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_ldivmod>:
 8000390:	b97b      	cbnz	r3, 80003b2 <__aeabi_ldivmod+0x22>
 8000392:	b972      	cbnz	r2, 80003b2 <__aeabi_ldivmod+0x22>
 8000394:	2900      	cmp	r1, #0
 8000396:	bfbe      	ittt	lt
 8000398:	2000      	movlt	r0, #0
 800039a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800039e:	e006      	blt.n	80003ae <__aeabi_ldivmod+0x1e>
 80003a0:	bf08      	it	eq
 80003a2:	2800      	cmpeq	r0, #0
 80003a4:	bf1c      	itt	ne
 80003a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003aa:	f04f 30ff 	movne.w	r0, #4294967295
 80003ae:	f000 b9bd 	b.w	800072c <__aeabi_idiv0>
 80003b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ba:	2900      	cmp	r1, #0
 80003bc:	db09      	blt.n	80003d2 <__aeabi_ldivmod+0x42>
 80003be:	2b00      	cmp	r3, #0
 80003c0:	db1a      	blt.n	80003f8 <__aeabi_ldivmod+0x68>
 80003c2:	f000 f84d 	bl	8000460 <__udivmoddi4>
 80003c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ce:	b004      	add	sp, #16
 80003d0:	4770      	bx	lr
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db1b      	blt.n	8000414 <__aeabi_ldivmod+0x84>
 80003dc:	f000 f840 	bl	8000460 <__udivmoddi4>
 80003e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003e8:	b004      	add	sp, #16
 80003ea:	4240      	negs	r0, r0
 80003ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f0:	4252      	negs	r2, r2
 80003f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f6:	4770      	bx	lr
 80003f8:	4252      	negs	r2, r2
 80003fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003fe:	f000 f82f 	bl	8000460 <__udivmoddi4>
 8000402:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000406:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040a:	b004      	add	sp, #16
 800040c:	4240      	negs	r0, r0
 800040e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000412:	4770      	bx	lr
 8000414:	4252      	negs	r2, r2
 8000416:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041a:	f000 f821 	bl	8000460 <__udivmoddi4>
 800041e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000426:	b004      	add	sp, #16
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	4770      	bx	lr

08000430 <__aeabi_uldivmod>:
 8000430:	b953      	cbnz	r3, 8000448 <__aeabi_uldivmod+0x18>
 8000432:	b94a      	cbnz	r2, 8000448 <__aeabi_uldivmod+0x18>
 8000434:	2900      	cmp	r1, #0
 8000436:	bf08      	it	eq
 8000438:	2800      	cmpeq	r0, #0
 800043a:	bf1c      	itt	ne
 800043c:	f04f 31ff 	movne.w	r1, #4294967295
 8000440:	f04f 30ff 	movne.w	r0, #4294967295
 8000444:	f000 b972 	b.w	800072c <__aeabi_idiv0>
 8000448:	f1ad 0c08 	sub.w	ip, sp, #8
 800044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000450:	f000 f806 	bl	8000460 <__udivmoddi4>
 8000454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045c:	b004      	add	sp, #16
 800045e:	4770      	bx	lr

08000460 <__udivmoddi4>:
 8000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000464:	9e08      	ldr	r6, [sp, #32]
 8000466:	4604      	mov	r4, r0
 8000468:	4688      	mov	r8, r1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d14b      	bne.n	8000506 <__udivmoddi4+0xa6>
 800046e:	428a      	cmp	r2, r1
 8000470:	4615      	mov	r5, r2
 8000472:	d967      	bls.n	8000544 <__udivmoddi4+0xe4>
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	b14a      	cbz	r2, 800048e <__udivmoddi4+0x2e>
 800047a:	f1c2 0720 	rsb	r7, r2, #32
 800047e:	fa01 f302 	lsl.w	r3, r1, r2
 8000482:	fa20 f707 	lsr.w	r7, r0, r7
 8000486:	4095      	lsls	r5, r2
 8000488:	ea47 0803 	orr.w	r8, r7, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000492:	0c23      	lsrs	r3, r4, #16
 8000494:	fbb8 f7fe 	udiv	r7, r8, lr
 8000498:	fa1f fc85 	uxth.w	ip, r5
 800049c:	fb0e 8817 	mls	r8, lr, r7, r8
 80004a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004a4:	fb07 f10c 	mul.w	r1, r7, ip
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x60>
 80004ac:	18eb      	adds	r3, r5, r3
 80004ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80004b2:	f080 811b 	bcs.w	80006ec <__udivmoddi4+0x28c>
 80004b6:	4299      	cmp	r1, r3
 80004b8:	f240 8118 	bls.w	80006ec <__udivmoddi4+0x28c>
 80004bc:	3f02      	subs	r7, #2
 80004be:	442b      	add	r3, r5
 80004c0:	1a5b      	subs	r3, r3, r1
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004d4:	45a4      	cmp	ip, r4
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x8c>
 80004d8:	192c      	adds	r4, r5, r4
 80004da:	f100 33ff 	add.w	r3, r0, #4294967295
 80004de:	f080 8107 	bcs.w	80006f0 <__udivmoddi4+0x290>
 80004e2:	45a4      	cmp	ip, r4
 80004e4:	f240 8104 	bls.w	80006f0 <__udivmoddi4+0x290>
 80004e8:	3802      	subs	r0, #2
 80004ea:	442c      	add	r4, r5
 80004ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80004f0:	eba4 040c 	sub.w	r4, r4, ip
 80004f4:	2700      	movs	r7, #0
 80004f6:	b11e      	cbz	r6, 8000500 <__udivmoddi4+0xa0>
 80004f8:	40d4      	lsrs	r4, r2
 80004fa:	2300      	movs	r3, #0
 80004fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000500:	4639      	mov	r1, r7
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0xbe>
 800050a:	2e00      	cmp	r6, #0
 800050c:	f000 80eb 	beq.w	80006e6 <__udivmoddi4+0x286>
 8000510:	2700      	movs	r7, #0
 8000512:	e9c6 0100 	strd	r0, r1, [r6]
 8000516:	4638      	mov	r0, r7
 8000518:	4639      	mov	r1, r7
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f783 	clz	r7, r3
 8000522:	2f00      	cmp	r7, #0
 8000524:	d147      	bne.n	80005b6 <__udivmoddi4+0x156>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0xd0>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80fa 	bhi.w	8000724 <__udivmoddi4+0x2c4>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0303 	sbc.w	r3, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	4698      	mov	r8, r3
 800053a:	2e00      	cmp	r6, #0
 800053c:	d0e0      	beq.n	8000500 <__udivmoddi4+0xa0>
 800053e:	e9c6 4800 	strd	r4, r8, [r6]
 8000542:	e7dd      	b.n	8000500 <__udivmoddi4+0xa0>
 8000544:	b902      	cbnz	r2, 8000548 <__udivmoddi4+0xe8>
 8000546:	deff      	udf	#255	; 0xff
 8000548:	fab2 f282 	clz	r2, r2
 800054c:	2a00      	cmp	r2, #0
 800054e:	f040 808f 	bne.w	8000670 <__udivmoddi4+0x210>
 8000552:	1b49      	subs	r1, r1, r5
 8000554:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000558:	fa1f f885 	uxth.w	r8, r5
 800055c:	2701      	movs	r7, #1
 800055e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000562:	0c23      	lsrs	r3, r4, #16
 8000564:	fb0e 111c 	mls	r1, lr, ip, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb08 f10c 	mul.w	r1, r8, ip
 8000570:	4299      	cmp	r1, r3
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x124>
 8000574:	18eb      	adds	r3, r5, r3
 8000576:	f10c 30ff 	add.w	r0, ip, #4294967295
 800057a:	d202      	bcs.n	8000582 <__udivmoddi4+0x122>
 800057c:	4299      	cmp	r1, r3
 800057e:	f200 80cd 	bhi.w	800071c <__udivmoddi4+0x2bc>
 8000582:	4684      	mov	ip, r0
 8000584:	1a59      	subs	r1, r3, r1
 8000586:	b2a3      	uxth	r3, r4
 8000588:	fbb1 f0fe 	udiv	r0, r1, lr
 800058c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000590:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000594:	fb08 f800 	mul.w	r8, r8, r0
 8000598:	45a0      	cmp	r8, r4
 800059a:	d907      	bls.n	80005ac <__udivmoddi4+0x14c>
 800059c:	192c      	adds	r4, r5, r4
 800059e:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a2:	d202      	bcs.n	80005aa <__udivmoddi4+0x14a>
 80005a4:	45a0      	cmp	r8, r4
 80005a6:	f200 80b6 	bhi.w	8000716 <__udivmoddi4+0x2b6>
 80005aa:	4618      	mov	r0, r3
 80005ac:	eba4 0408 	sub.w	r4, r4, r8
 80005b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005b4:	e79f      	b.n	80004f6 <__udivmoddi4+0x96>
 80005b6:	f1c7 0c20 	rsb	ip, r7, #32
 80005ba:	40bb      	lsls	r3, r7
 80005bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005c4:	fa01 f407 	lsl.w	r4, r1, r7
 80005c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80005d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005d4:	4325      	orrs	r5, r4
 80005d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005da:	0c2c      	lsrs	r4, r5, #16
 80005dc:	fb08 3319 	mls	r3, r8, r9, r3
 80005e0:	fa1f fa8e 	uxth.w	sl, lr
 80005e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80005e8:	fb09 f40a 	mul.w	r4, r9, sl
 80005ec:	429c      	cmp	r4, r3
 80005ee:	fa02 f207 	lsl.w	r2, r2, r7
 80005f2:	fa00 f107 	lsl.w	r1, r0, r7
 80005f6:	d90b      	bls.n	8000610 <__udivmoddi4+0x1b0>
 80005f8:	eb1e 0303 	adds.w	r3, lr, r3
 80005fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000600:	f080 8087 	bcs.w	8000712 <__udivmoddi4+0x2b2>
 8000604:	429c      	cmp	r4, r3
 8000606:	f240 8084 	bls.w	8000712 <__udivmoddi4+0x2b2>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4473      	add	r3, lr
 8000610:	1b1b      	subs	r3, r3, r4
 8000612:	b2ad      	uxth	r5, r5
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3310 	mls	r3, r8, r0, r3
 800061c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000620:	fb00 fa0a 	mul.w	sl, r0, sl
 8000624:	45a2      	cmp	sl, r4
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x1da>
 8000628:	eb1e 0404 	adds.w	r4, lr, r4
 800062c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000630:	d26b      	bcs.n	800070a <__udivmoddi4+0x2aa>
 8000632:	45a2      	cmp	sl, r4
 8000634:	d969      	bls.n	800070a <__udivmoddi4+0x2aa>
 8000636:	3802      	subs	r0, #2
 8000638:	4474      	add	r4, lr
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	fba0 8902 	umull	r8, r9, r0, r2
 8000642:	eba4 040a 	sub.w	r4, r4, sl
 8000646:	454c      	cmp	r4, r9
 8000648:	46c2      	mov	sl, r8
 800064a:	464b      	mov	r3, r9
 800064c:	d354      	bcc.n	80006f8 <__udivmoddi4+0x298>
 800064e:	d051      	beq.n	80006f4 <__udivmoddi4+0x294>
 8000650:	2e00      	cmp	r6, #0
 8000652:	d069      	beq.n	8000728 <__udivmoddi4+0x2c8>
 8000654:	ebb1 050a 	subs.w	r5, r1, sl
 8000658:	eb64 0403 	sbc.w	r4, r4, r3
 800065c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000660:	40fd      	lsrs	r5, r7
 8000662:	40fc      	lsrs	r4, r7
 8000664:	ea4c 0505 	orr.w	r5, ip, r5
 8000668:	e9c6 5400 	strd	r5, r4, [r6]
 800066c:	2700      	movs	r7, #0
 800066e:	e747      	b.n	8000500 <__udivmoddi4+0xa0>
 8000670:	f1c2 0320 	rsb	r3, r2, #32
 8000674:	fa20 f703 	lsr.w	r7, r0, r3
 8000678:	4095      	lsls	r5, r2
 800067a:	fa01 f002 	lsl.w	r0, r1, r2
 800067e:	fa21 f303 	lsr.w	r3, r1, r3
 8000682:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000686:	4338      	orrs	r0, r7
 8000688:	0c01      	lsrs	r1, r0, #16
 800068a:	fbb3 f7fe 	udiv	r7, r3, lr
 800068e:	fa1f f885 	uxth.w	r8, r5
 8000692:	fb0e 3317 	mls	r3, lr, r7, r3
 8000696:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800069a:	fb07 f308 	mul.w	r3, r7, r8
 800069e:	428b      	cmp	r3, r1
 80006a0:	fa04 f402 	lsl.w	r4, r4, r2
 80006a4:	d907      	bls.n	80006b6 <__udivmoddi4+0x256>
 80006a6:	1869      	adds	r1, r5, r1
 80006a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006ac:	d22f      	bcs.n	800070e <__udivmoddi4+0x2ae>
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d92d      	bls.n	800070e <__udivmoddi4+0x2ae>
 80006b2:	3f02      	subs	r7, #2
 80006b4:	4429      	add	r1, r5
 80006b6:	1acb      	subs	r3, r1, r3
 80006b8:	b281      	uxth	r1, r0
 80006ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80006be:	fb0e 3310 	mls	r3, lr, r0, r3
 80006c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006c6:	fb00 f308 	mul.w	r3, r0, r8
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d907      	bls.n	80006de <__udivmoddi4+0x27e>
 80006ce:	1869      	adds	r1, r5, r1
 80006d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006d4:	d217      	bcs.n	8000706 <__udivmoddi4+0x2a6>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d915      	bls.n	8000706 <__udivmoddi4+0x2a6>
 80006da:	3802      	subs	r0, #2
 80006dc:	4429      	add	r1, r5
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80006e4:	e73b      	b.n	800055e <__udivmoddi4+0xfe>
 80006e6:	4637      	mov	r7, r6
 80006e8:	4630      	mov	r0, r6
 80006ea:	e709      	b.n	8000500 <__udivmoddi4+0xa0>
 80006ec:	4607      	mov	r7, r0
 80006ee:	e6e7      	b.n	80004c0 <__udivmoddi4+0x60>
 80006f0:	4618      	mov	r0, r3
 80006f2:	e6fb      	b.n	80004ec <__udivmoddi4+0x8c>
 80006f4:	4541      	cmp	r1, r8
 80006f6:	d2ab      	bcs.n	8000650 <__udivmoddi4+0x1f0>
 80006f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80006fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000700:	3801      	subs	r0, #1
 8000702:	4613      	mov	r3, r2
 8000704:	e7a4      	b.n	8000650 <__udivmoddi4+0x1f0>
 8000706:	4660      	mov	r0, ip
 8000708:	e7e9      	b.n	80006de <__udivmoddi4+0x27e>
 800070a:	4618      	mov	r0, r3
 800070c:	e795      	b.n	800063a <__udivmoddi4+0x1da>
 800070e:	4667      	mov	r7, ip
 8000710:	e7d1      	b.n	80006b6 <__udivmoddi4+0x256>
 8000712:	4681      	mov	r9, r0
 8000714:	e77c      	b.n	8000610 <__udivmoddi4+0x1b0>
 8000716:	3802      	subs	r0, #2
 8000718:	442c      	add	r4, r5
 800071a:	e747      	b.n	80005ac <__udivmoddi4+0x14c>
 800071c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000720:	442b      	add	r3, r5
 8000722:	e72f      	b.n	8000584 <__udivmoddi4+0x124>
 8000724:	4638      	mov	r0, r7
 8000726:	e708      	b.n	800053a <__udivmoddi4+0xda>
 8000728:	4637      	mov	r7, r6
 800072a:	e6e9      	b.n	8000500 <__udivmoddi4+0xa0>

0800072c <__aeabi_idiv0>:
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000734:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <SystemInit+0x104>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a3e      	ldr	r2, [pc, #248]	; (8000834 <SystemInit+0x104>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000744:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <SystemInit+0x104>)
 8000746:	691b      	ldr	r3, [r3, #16]
 8000748:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <SystemInit+0x104>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000750:	4b39      	ldr	r3, [pc, #228]	; (8000838 <SystemInit+0x108>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f003 030f 	and.w	r3, r3, #15
 8000758:	2b06      	cmp	r3, #6
 800075a:	d807      	bhi.n	800076c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <SystemInit+0x108>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f023 030f 	bic.w	r3, r3, #15
 8000764:	4a34      	ldr	r2, [pc, #208]	; (8000838 <SystemInit+0x108>)
 8000766:	f043 0307 	orr.w	r3, r3, #7
 800076a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <SystemInit+0x10c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a32      	ldr	r2, [pc, #200]	; (800083c <SystemInit+0x10c>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <SystemInit+0x10c>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <SystemInit+0x10c>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	492e      	ldr	r1, [pc, #184]	; (800083c <SystemInit+0x10c>)
 8000784:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <SystemInit+0x110>)
 8000786:	4013      	ands	r3, r2
 8000788:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <SystemInit+0x108>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	2b07      	cmp	r3, #7
 8000794:	d907      	bls.n	80007a6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <SystemInit+0x108>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f023 030f 	bic.w	r3, r3, #15
 800079e:	4a26      	ldr	r2, [pc, #152]	; (8000838 <SystemInit+0x108>)
 80007a0:	f043 0307 	orr.w	r3, r3, #7
 80007a4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007a6:	4b25      	ldr	r3, [pc, #148]	; (800083c <SystemInit+0x10c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <SystemInit+0x10c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007b2:	4b22      	ldr	r3, [pc, #136]	; (800083c <SystemInit+0x10c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <SystemInit+0x10c>)
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <SystemInit+0x114>)
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SystemInit+0x10c>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <SystemInit+0x118>)
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <SystemInit+0x10c>)
 80007c6:	4a21      	ldr	r2, [pc, #132]	; (800084c <SystemInit+0x11c>)
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <SystemInit+0x10c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <SystemInit+0x10c>)
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <SystemInit+0x11c>)
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <SystemInit+0x10c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <SystemInit+0x10c>)
 80007de:	4a1b      	ldr	r2, [pc, #108]	; (800084c <SystemInit+0x11c>)
 80007e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <SystemInit+0x10c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <SystemInit+0x10c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a13      	ldr	r2, [pc, #76]	; (800083c <SystemInit+0x10c>)
 80007ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <SystemInit+0x10c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <SystemInit+0x120>)
 80007fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <SystemInit+0x120>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <SystemInit+0x124>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <SystemInit+0x128>)
 800080c:	4013      	ands	r3, r2
 800080e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000812:	d202      	bcs.n	800081a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <SystemInit+0x12c>)
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <SystemInit+0x130>)
 800081c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000820:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SystemInit+0x104>)
 8000824:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000828:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	52002000 	.word	0x52002000
 800083c:	58024400 	.word	0x58024400
 8000840:	eaf6ed7f 	.word	0xeaf6ed7f
 8000844:	02020200 	.word	0x02020200
 8000848:	01ff0000 	.word	0x01ff0000
 800084c:	01010280 	.word	0x01010280
 8000850:	580000c0 	.word	0x580000c0
 8000854:	5c001000 	.word	0x5c001000
 8000858:	ffff0000 	.word	0xffff0000
 800085c:	51008108 	.word	0x51008108
 8000860:	52004000 	.word	0x52004000

08000864 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2203      	movs	r2, #3
 8000870:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2203      	movs	r2, #3
 800087c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2203      	movs	r2, #3
 8000882:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2203      	movs	r2, #3
 8000888:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2203      	movs	r2, #3
 800088e:	715a      	strb	r2, [r3, #5]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	460b      	mov	r3, r1
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80008b6:	7afb      	ldrb	r3, [r7, #11]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	8af9      	ldrh	r1, [r7, #22]
 80008bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2302      	movs	r3, #2
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	f001 fed3 	bl	8002678 <HAL_I2C_Mem_Read>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10b      	bne.n	80008f0 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80008d8:	7d7b      	ldrb	r3, [r7, #21]
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7d3b      	ldrb	r3, [r7, #20]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	801a      	strh	r2, [r3, #0]
		return true;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <read_register16+0x56>
	} else
		return false;
 80008f0:	2300      	movs	r3, #0

}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80008fa:	b590      	push	{r4, r7, lr}
 80008fc:	b08b      	sub	sp, #44	; 0x2c
 80008fe:	af04      	add	r7, sp, #16
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	461a      	mov	r2, r3
 8000906:	460b      	mov	r3, r1
 8000908:	72fb      	strb	r3, [r7, #11]
 800090a:	4613      	mov	r3, r2
 800090c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800091a:	7afb      	ldrb	r3, [r7, #11]
 800091c:	b29c      	uxth	r4, r3
 800091e:	7abb      	ldrb	r3, [r7, #10]
 8000920:	b29b      	uxth	r3, r3
 8000922:	8af9      	ldrh	r1, [r7, #22]
 8000924:	f241 3288 	movw	r2, #5000	; 0x1388
 8000928:	9202      	str	r2, [sp, #8]
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	4622      	mov	r2, r4
 8000934:	f001 fea0 	bl	8002678 <HAL_I2C_Mem_Read>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <read_data+0x48>
		return 0;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <read_data+0x4a>
	else
		return 1;
 8000942:	2301      	movs	r3, #1

}
 8000944:	4618      	mov	r0, r3
 8000946:	371c      	adds	r7, #28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd90      	pop	{r4, r7, pc}

0800094c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	461a      	mov	r2, r3
 8000958:	2188      	movs	r1, #136	; 0x88
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ff9e 	bl	800089c <read_register16>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d06f      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3302      	adds	r3, #2
 800096a:	461a      	mov	r2, r3
 800096c:	218a      	movs	r1, #138	; 0x8a
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff94 	bl	800089c <read_register16>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d065      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3304      	adds	r3, #4
 800097e:	461a      	mov	r2, r3
 8000980:	218c      	movs	r1, #140	; 0x8c
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff8a 	bl	800089c <read_register16>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d05b      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3306      	adds	r3, #6
 8000992:	461a      	mov	r2, r3
 8000994:	218e      	movs	r1, #142	; 0x8e
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff80 	bl	800089c <read_register16>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d051      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3308      	adds	r3, #8
 80009a6:	461a      	mov	r2, r3
 80009a8:	2190      	movs	r1, #144	; 0x90
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff76 	bl	800089c <read_register16>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d047      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	330a      	adds	r3, #10
 80009ba:	461a      	mov	r2, r3
 80009bc:	2192      	movs	r1, #146	; 0x92
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ff6c 	bl	800089c <read_register16>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d03d      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	330c      	adds	r3, #12
 80009ce:	461a      	mov	r2, r3
 80009d0:	2194      	movs	r1, #148	; 0x94
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff62 	bl	800089c <read_register16>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d033      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	330e      	adds	r3, #14
 80009e2:	461a      	mov	r2, r3
 80009e4:	2196      	movs	r1, #150	; 0x96
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff58 	bl	800089c <read_register16>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d029      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3310      	adds	r3, #16
 80009f6:	461a      	mov	r2, r3
 80009f8:	2198      	movs	r1, #152	; 0x98
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff4e 	bl	800089c <read_register16>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d01f      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3312      	adds	r3, #18
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	219a      	movs	r1, #154	; 0x9a
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff44 	bl	800089c <read_register16>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d015      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3314      	adds	r3, #20
 8000a1e:	461a      	mov	r2, r3
 8000a20:	219c      	movs	r1, #156	; 0x9c
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ff3a 	bl	800089c <read_register16>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00b      	beq.n	8000a46 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000a32:	461a      	mov	r2, r3
 8000a34:	219e      	movs	r1, #158	; 0x9e
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ff30 	bl	800089c <read_register16>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <read_calibration_data+0xfa>

		return true;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <read_calibration_data+0xfc>
	}

	return false;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f103 0218 	add.w	r2, r3, #24
 8000a5e:	2301      	movs	r3, #1
 8000a60:	21a1      	movs	r1, #161	; 0xa1
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ff49 	bl	80008fa <read_data>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d14b      	bne.n	8000b06 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	331a      	adds	r3, #26
 8000a72:	461a      	mov	r2, r3
 8000a74:	21e1      	movs	r1, #225	; 0xe1
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ff10 	bl	800089c <read_register16>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d041      	beq.n	8000b06 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f103 021c 	add.w	r2, r3, #28
 8000a88:	2301      	movs	r3, #1
 8000a8a:	21e3      	movs	r1, #227	; 0xe3
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff34 	bl	80008fa <read_data>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d136      	bne.n	8000b06 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000a98:	f107 030e 	add.w	r3, r7, #14
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	21e4      	movs	r1, #228	; 0xe4
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fefb 	bl	800089c <read_register16>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d02c      	beq.n	8000b06 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	21e5      	movs	r1, #229	; 0xe5
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fef1 	bl	800089c <read_register16>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d022      	beq.n	8000b06 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	21e7      	movs	r1, #231	; 0xe7
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff15 	bl	80008fa <read_data>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d117      	bne.n	8000b06 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000ad6:	89fb      	ldrh	r3, [r7, #14]
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000ae0:	b21a      	sxth	r2, r3
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	121b      	asrs	r3, r3, #8
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	841a      	strh	r2, [r3, #32]

		return true;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <read_hum_calibration_data+0xb8>
	}

	return false;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	89f9      	ldrh	r1, [r7, #14]
 8000b32:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	1cbb      	adds	r3, r7, #2
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2301      	movs	r3, #1
 8000b42:	f001 fc85 	bl	8002450 <HAL_I2C_Mem_Write>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d101      	bne.n	8000b50 <write_register8+0x40>
		return false;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e000      	b.n	8000b52 <write_register8+0x42>
	else
		return true;
 8000b50:	2301      	movs	r3, #1
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b68:	2b76      	cmp	r3, #118	; 0x76
 8000b6a:	d005      	beq.n	8000b78 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b70:	2b77      	cmp	r3, #119	; 0x77
 8000b72:	d001      	beq.n	8000b78 <bmp280_init+0x1e>

		return false;
 8000b74:	2300      	movs	r3, #0
 8000b76:	e099      	b.n	8000cac <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000b7e:	2301      	movs	r3, #1
 8000b80:	21d0      	movs	r1, #208	; 0xd0
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff feb9 	bl	80008fa <read_data>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <bmp280_init+0x38>
		return false;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e08c      	b.n	8000cac <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000b98:	2b58      	cmp	r3, #88	; 0x58
 8000b9a:	d006      	beq.n	8000baa <bmp280_init+0x50>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000ba2:	2b60      	cmp	r3, #96	; 0x60
 8000ba4:	d001      	beq.n	8000baa <bmp280_init+0x50>

		return false;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e080      	b.n	8000cac <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000baa:	22b6      	movs	r2, #182	; 0xb6
 8000bac:	21e0      	movs	r1, #224	; 0xe0
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffae 	bl	8000b10 <write_register8>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <bmp280_init+0x64>
		return false;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e076      	b.n	8000cac <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000bbe:	f107 020c 	add.w	r2, r7, #12
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	21f3      	movs	r1, #243	; 0xf3
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fe97 	bl	80008fa <read_data>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1f5      	bne.n	8000bbe <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000bd2:	7b3b      	ldrb	r3, [r7, #12]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f0      	bne.n	8000bbe <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff feb5 	bl	800094c <read_calibration_data>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f083 0301 	eor.w	r3, r3, #1
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d100      	bne.n	8000bf0 <bmp280_init+0x96>
 8000bee:	e001      	b.n	8000bf4 <bmp280_init+0x9a>
		return false;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e05b      	b.n	8000cac <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000bfa:	2b60      	cmp	r3, #96	; 0x60
 8000bfc:	d10a      	bne.n	8000c14 <bmp280_init+0xba>
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff26 	bl	8000a50 <read_hum_calibration_data>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <bmp280_init+0xba>
		return false;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e04b      	b.n	8000cac <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	795b      	ldrb	r3, [r3, #5]
 8000c18:	015b      	lsls	r3, r3, #5
 8000c1a:	b25a      	sxtb	r2, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	21f5      	movs	r1, #245	; 0xf5
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff6d 	bl	8000b10 <write_register8>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <bmp280_init+0xe6>
		return false;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e035      	b.n	8000cac <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d102      	bne.n	8000c4e <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	78db      	ldrb	r3, [r3, #3]
 8000c52:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000c54:	b25a      	sxtb	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	789b      	ldrb	r3, [r3, #2]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b25a      	sxtb	r2, r3
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000c6c:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c74:	2b60      	cmp	r3, #96	; 0x60
 8000c76:	d10d      	bne.n	8000c94 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	791b      	ldrb	r3, [r3, #4]
 8000c7c:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000c7e:	7b7b      	ldrb	r3, [r7, #13]
 8000c80:	461a      	mov	r2, r3
 8000c82:	21f2      	movs	r1, #242	; 0xf2
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff43 	bl	8000b10 <write_register8>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <bmp280_init+0x13a>
			return false;
 8000c90:	2300      	movs	r3, #0
 8000c92:	e00b      	b.n	8000cac <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	461a      	mov	r2, r3
 8000c98:	21f4      	movs	r1, #244	; 0xf4
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff38 	bl	8000b10 <write_register8>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <bmp280_init+0x150>
		return false;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <bmp280_init+0x152>
	}

	return true;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	10da      	asrs	r2, r3, #3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000cd2:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000cd6:	12db      	asrs	r3, r3, #11
 8000cd8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	111b      	asrs	r3, r3, #4
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	8812      	ldrh	r2, [r2, #0]
 8000ce2:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	1112      	asrs	r2, r2, #4
 8000ce8:	68f9      	ldr	r1, [r7, #12]
 8000cea:	8809      	ldrh	r1, [r1, #0]
 8000cec:	1a52      	subs	r2, r2, r1
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000cfe:	139b      	asrs	r3, r3, #14
 8000d00:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	441a      	add	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	3380      	adds	r3, #128	; 0x80
 8000d18:	121b      	asrs	r3, r3, #8
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	371c      	adds	r7, #28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000d26:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4619      	mov	r1, r3
 8000d38:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000d3c:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8000d40:	f142 34ff 	adc.w	r4, r2, #4294967295
 8000d44:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	6a3a      	ldr	r2, [r7, #32]
 8000d4c:	fb02 f203 	mul.w	r2, r2, r3
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	6a39      	ldr	r1, [r7, #32]
 8000d54:	fb01 f303 	mul.w	r3, r1, r3
 8000d58:	441a      	add	r2, r3
 8000d5a:	6a39      	ldr	r1, [r7, #32]
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	fba1 3403 	umull	r3, r4, r1, r3
 8000d62:	4422      	add	r2, r4
 8000d64:	4614      	mov	r4, r2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000d6c:	b211      	sxth	r1, r2
 8000d6e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000d72:	fb01 f504 	mul.w	r5, r1, r4
 8000d76:	fb03 f002 	mul.w	r0, r3, r2
 8000d7a:	4428      	add	r0, r5
 8000d7c:	fba3 3401 	umull	r3, r4, r3, r1
 8000d80:	1902      	adds	r2, r0, r4
 8000d82:	4614      	mov	r4, r2
 8000d84:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8000d88:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000d98:	6a3a      	ldr	r2, [r7, #32]
 8000d9a:	fb04 f102 	mul.w	r1, r4, r2
 8000d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da0:	fb03 f202 	mul.w	r2, r3, r2
 8000da4:	1888      	adds	r0, r1, r2
 8000da6:	6a3a      	ldr	r2, [r7, #32]
 8000da8:	fba2 1203 	umull	r1, r2, r2, r3
 8000dac:	1883      	adds	r3, r0, r2
 8000dae:	461a      	mov	r2, r3
 8000db0:	f04f 0500 	mov.w	r5, #0
 8000db4:	f04f 0600 	mov.w	r6, #0
 8000db8:	0456      	lsls	r6, r2, #17
 8000dba:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8000dbe:	044d      	lsls	r5, r1, #17
 8000dc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000dc4:	186b      	adds	r3, r5, r1
 8000dc6:	eb46 0402 	adc.w	r4, r6, r2
 8000dca:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000dd4:	b219      	sxth	r1, r3
 8000dd6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000dda:	f04f 0500 	mov.w	r5, #0
 8000dde:	f04f 0600 	mov.w	r6, #0
 8000de2:	00ce      	lsls	r6, r1, #3
 8000de4:	2500      	movs	r5, #0
 8000de6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000dea:	186b      	adds	r3, r5, r1
 8000dec:	eb46 0402 	adc.w	r4, r6, r2
 8000df0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	6a3a      	ldr	r2, [r7, #32]
 8000df8:	fb02 f203 	mul.w	r2, r2, r3
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	6a39      	ldr	r1, [r7, #32]
 8000e00:	fb01 f303 	mul.w	r3, r1, r3
 8000e04:	441a      	add	r2, r3
 8000e06:	6a39      	ldr	r1, [r7, #32]
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	fba1 3403 	umull	r3, r4, r1, r3
 8000e0e:	4422      	add	r2, r4
 8000e10:	4614      	mov	r4, r2
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000e18:	b211      	sxth	r1, r2
 8000e1a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000e1e:	fb01 f504 	mul.w	r5, r1, r4
 8000e22:	fb03 f002 	mul.w	r0, r3, r2
 8000e26:	4428      	add	r0, r5
 8000e28:	fba3 3401 	umull	r3, r4, r3, r1
 8000e2c:	1902      	adds	r2, r0, r4
 8000e2e:	4614      	mov	r4, r2
 8000e30:	f04f 0100 	mov.w	r1, #0
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	0a19      	lsrs	r1, r3, #8
 8000e3a:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8000e3e:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000e4c:	6a38      	ldr	r0, [r7, #32]
 8000e4e:	fb04 f500 	mul.w	r5, r4, r0
 8000e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e54:	fb03 f000 	mul.w	r0, r3, r0
 8000e58:	4428      	add	r0, r5
 8000e5a:	6a3d      	ldr	r5, [r7, #32]
 8000e5c:	fba5 5603 	umull	r5, r6, r5, r3
 8000e60:	1983      	adds	r3, r0, r6
 8000e62:	461e      	mov	r6, r3
 8000e64:	f04f 0b00 	mov.w	fp, #0
 8000e68:	f04f 0c00 	mov.w	ip, #0
 8000e6c:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8000e70:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8000e74:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000e78:	eb1b 0301 	adds.w	r3, fp, r1
 8000e7c:	eb4c 0402 	adc.w	r4, ip, r2
 8000e80:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000e84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000e88:	1c19      	adds	r1, r3, #0
 8000e8a:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	88db      	ldrh	r3, [r3, #6]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	f04f 0400 	mov.w	r4, #0
 8000e98:	fb03 f502 	mul.w	r5, r3, r2
 8000e9c:	fb01 f004 	mul.w	r0, r1, r4
 8000ea0:	4428      	add	r0, r5
 8000ea2:	fba1 3403 	umull	r3, r4, r1, r3
 8000ea6:	1902      	adds	r2, r0, r4
 8000ea8:	4614      	mov	r4, r2
 8000eaa:	f04f 0100 	mov.w	r1, #0
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	1061      	asrs	r1, r4, #1
 8000eb4:	17e2      	asrs	r2, r4, #31
 8000eb6:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8000eba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	d101      	bne.n	8000ec6 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e0d4      	b.n	8001070 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000ecc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000ed0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	ea4f 0963 	mov.w	r9, r3, asr #1
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8000ee0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000ee4:	4645      	mov	r5, r8
 8000ee6:	464e      	mov	r6, r9
 8000ee8:	1aed      	subs	r5, r5, r3
 8000eea:	eb66 0604 	sbc.w	r6, r6, r4
 8000eee:	46a8      	mov	r8, r5
 8000ef0:	46b1      	mov	r9, r6
 8000ef2:	eb18 0308 	adds.w	r3, r8, r8
 8000ef6:	eb49 0409 	adc.w	r4, r9, r9
 8000efa:	4698      	mov	r8, r3
 8000efc:	46a1      	mov	r9, r4
 8000efe:	eb18 0805 	adds.w	r8, r8, r5
 8000f02:	eb49 0906 	adc.w	r9, r9, r6
 8000f06:	f04f 0100 	mov.w	r1, #0
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8000f12:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8000f16:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8000f1a:	eb18 0801 	adds.w	r8, r8, r1
 8000f1e:	eb49 0902 	adc.w	r9, r9, r2
 8000f22:	f04f 0100 	mov.w	r1, #0
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8000f2e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000f32:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000f36:	4688      	mov	r8, r1
 8000f38:	4691      	mov	r9, r2
 8000f3a:	eb18 0805 	adds.w	r8, r8, r5
 8000f3e:	eb49 0906 	adc.w	r9, r9, r6
 8000f42:	f04f 0100 	mov.w	r1, #0
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8000f4e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000f52:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000f56:	4688      	mov	r8, r1
 8000f58:	4691      	mov	r9, r2
 8000f5a:	eb18 0005 	adds.w	r0, r8, r5
 8000f5e:	eb49 0106 	adc.w	r1, r9, r6
 8000f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f66:	f7ff fa13 	bl	8000390 <__aeabi_ldivmod>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460c      	mov	r4, r1
 8000f6e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f78:	b219      	sxth	r1, r3
 8000f7a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000f7e:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	f04f 0400 	mov.w	r4, #0
 8000f8a:	0b6b      	lsrs	r3, r5, #13
 8000f8c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8000f90:	1374      	asrs	r4, r6, #13
 8000f92:	fb03 f502 	mul.w	r5, r3, r2
 8000f96:	fb01 f004 	mul.w	r0, r1, r4
 8000f9a:	4428      	add	r0, r5
 8000f9c:	fba1 1203 	umull	r1, r2, r1, r3
 8000fa0:	1883      	adds	r3, r0, r2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	f04f 0400 	mov.w	r4, #0
 8000fb0:	0b6b      	lsrs	r3, r5, #13
 8000fb2:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8000fb6:	1374      	asrs	r4, r6, #13
 8000fb8:	fb03 f502 	mul.w	r5, r3, r2
 8000fbc:	fb01 f004 	mul.w	r0, r1, r4
 8000fc0:	4428      	add	r0, r5
 8000fc2:	fba1 1203 	umull	r1, r2, r1, r3
 8000fc6:	1883      	adds	r3, r0, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	f04f 0400 	mov.w	r4, #0
 8000fd2:	0e4b      	lsrs	r3, r1, #25
 8000fd4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8000fd8:	1654      	asrs	r4, r2, #25
 8000fda:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	fb04 f102 	mul.w	r1, r4, r2
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	fb03 f202 	mul.w	r2, r3, r2
 8000ff6:	1888      	adds	r0, r1, r2
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	fba2 1203 	umull	r1, r2, r2, r3
 8000ffe:	1883      	adds	r3, r0, r2
 8001000:	461a      	mov	r2, r3
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	f04f 0400 	mov.w	r4, #0
 800100a:	0ccb      	lsrs	r3, r1, #19
 800100c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001010:	14d4      	asrs	r4, r2, #19
 8001012:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001016:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800101a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800101e:	eb11 0803 	adds.w	r8, r1, r3
 8001022:	eb42 0904 	adc.w	r9, r2, r4
 8001026:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800102a:	eb13 0508 	adds.w	r5, r3, r8
 800102e:	eb44 0609 	adc.w	r6, r4, r9
 8001032:	f04f 0100 	mov.w	r1, #0
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	0a29      	lsrs	r1, r5, #8
 800103c:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001040:	1232      	asrs	r2, r6, #8
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001048:	b21d      	sxth	r5, r3
 800104a:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800104e:	f04f 0800 	mov.w	r8, #0
 8001052:	f04f 0900 	mov.w	r9, #0
 8001056:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800105a:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800105e:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001062:	eb18 0301 	adds.w	r3, r8, r1
 8001066:	eb49 0402 	adc.w	r4, r9, r2
 800106a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 800106e:	693b      	ldr	r3, [r7, #16]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800107a <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800107a:	b480      	push	{r7}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800108c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	039a      	lsls	r2, r3, #14
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001098:	051b      	lsls	r3, r3, #20
 800109a:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80010a2:	4619      	mov	r1, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fb03 f301 	mul.w	r3, r3, r1
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010b0:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80010b8:	4611      	mov	r1, r2
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	fb02 f201 	mul.w	r2, r2, r1
 80010c0:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	7f09      	ldrb	r1, [r1, #28]
 80010c6:	4608      	mov	r0, r1
 80010c8:	6979      	ldr	r1, [r7, #20]
 80010ca:	fb01 f100 	mul.w	r1, r1, r0
 80010ce:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80010d0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80010d4:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80010d8:	1292      	asrs	r2, r2, #10
 80010da:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80010de:	68f9      	ldr	r1, [r7, #12]
 80010e0:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80010e4:	fb01 f202 	mul.w	r2, r1, r2
 80010e8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80010ec:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	13db      	asrs	r3, r3, #15
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	13d2      	asrs	r2, r2, #15
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	7e12      	ldrb	r2, [r2, #24]
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001118:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001120:	bfa8      	it	ge
 8001122:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001126:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	131b      	asrs	r3, r3, #12
}
 800112c:	4618      	mov	r0, r3
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800114c:	2b60      	cmp	r3, #96	; 0x60
 800114e:	d007      	beq.n	8001160 <bmp280_read_fixed+0x28>
		if (humidity)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800115c:	2300      	movs	r3, #0
 800115e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <bmp280_read_fixed+0x32>
 8001166:	2308      	movs	r3, #8
 8001168:	e000      	b.n	800116c <bmp280_read_fixed+0x34>
 800116a:	2306      	movs	r3, #6
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f107 0218 	add.w	r2, r7, #24
 8001176:	21f7      	movs	r1, #247	; 0xf7
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff fbbe 	bl	80008fa <read_data>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <bmp280_read_fixed+0x50>
		return false;
 8001184:	2300      	movs	r3, #0
 8001186:	e038      	b.n	80011fa <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001188:	7e3b      	ldrb	r3, [r7, #24]
 800118a:	031a      	lsls	r2, r3, #12
 800118c:	7e7b      	ldrb	r3, [r7, #25]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4313      	orrs	r3, r2
 8001192:	7eba      	ldrb	r2, [r7, #26]
 8001194:	0912      	lsrs	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	4313      	orrs	r3, r2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800119c:	7efb      	ldrb	r3, [r7, #27]
 800119e:	031a      	lsls	r2, r3, #12
 80011a0:	7f3b      	ldrb	r3, [r7, #28]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4313      	orrs	r3, r2
 80011a6:	7f7a      	ldrb	r2, [r7, #29]
 80011a8:	0912      	lsrs	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	4313      	orrs	r3, r2
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	461a      	mov	r2, r3
 80011b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff fd7b 	bl	8000cb4 <compensate_temperature>
 80011be:	4602      	mov	r2, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	461a      	mov	r2, r3
 80011c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff fdab 	bl	8000d26 <compensate_pressure>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00d      	beq.n	80011f8 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80011dc:	7fbb      	ldrb	r3, [r7, #30]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	7ffa      	ldrb	r2, [r7, #31]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	461a      	mov	r2, r3
 80011ea:	6a39      	ldr	r1, [r7, #32]
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff ff44 	bl	800107a <compensate_humidity>
 80011f2:	4602      	mov	r2, r0
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	601a      	str	r2, [r3, #0]
	}

	return true;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3730      	adds	r7, #48	; 0x30
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <bmp280_read_float+0x1a>
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	e000      	b.n	8001220 <bmp280_read_float+0x1c>
 800121e:	2300      	movs	r3, #0
 8001220:	f107 0218 	add.w	r2, r7, #24
 8001224:	f107 011c 	add.w	r1, r7, #28
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff ff85 	bl	8001138 <bmp280_read_fixed>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d028      	beq.n	8001286 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001290 <bmp280_read_float+0x8c>
 8001242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001256:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001294 <bmp280_read_float+0x90>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001298 <bmp280_read_float+0x94>
 8001278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <bmp280_read_float+0x84>
	}

	return false;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	42c80000 	.word	0x42c80000
 8001294:	43800000 	.word	0x43800000
 8001298:	44800000 	.word	0x44800000
 800129c:	00000000 	.word	0x00000000

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80012a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012aa:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80012ac:	bf00      	nop
 80012ae:	4bb2      	ldr	r3, [pc, #712]	; (8001578 <main+0x2d8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <main+0x24>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dcf4      	bgt.n	80012ae <main+0xe>
  if ( timeout < 0 )
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da01      	bge.n	80012ce <main+0x2e>
  {
  Error_Handler();
 80012ca:	f000 fb6b 	bl	80019a4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f000 fcad 	bl	8001c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f979 	bl	80015c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80012d6:	4ba8      	ldr	r3, [pc, #672]	; (8001578 <main+0x2d8>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	4aa6      	ldr	r2, [pc, #664]	; (8001578 <main+0x2d8>)
 80012de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e6:	4ba4      	ldr	r3, [pc, #656]	; (8001578 <main+0x2d8>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 ffed 	bl	80022d4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80012fa:	2100      	movs	r1, #0
 80012fc:	2000      	movs	r0, #0
 80012fe:	f001 f803 	bl	8002308 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001306:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001308:	bf00      	nop
 800130a:	4b9b      	ldr	r3, [pc, #620]	; (8001578 <main+0x2d8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d104      	bne.n	8001320 <main+0x80>
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	617a      	str	r2, [r7, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	dcf4      	bgt.n	800130a <main+0x6a>
if ( timeout < 0 )
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	da01      	bge.n	800132a <main+0x8a>
{
Error_Handler();
 8001326:	f000 fb3d 	bl	80019a4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132a:	f000 fa75 	bl	8001818 <MX_GPIO_Init>
  MX_I2C1_Init();
 800132e:	f000 f9e7 	bl	8001700 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001332:	f000 fa25 	bl	8001780 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  bmp280_init_default_params(&bmp280.params);
 8001336:	4891      	ldr	r0, [pc, #580]	; (800157c <main+0x2dc>)
 8001338:	f7ff fa94 	bl	8000864 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800133c:	4b90      	ldr	r3, [pc, #576]	; (8001580 <main+0x2e0>)
 800133e:	2276      	movs	r2, #118	; 0x76
 8001340:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8001342:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <main+0x2e0>)
 8001344:	4a8f      	ldr	r2, [pc, #572]	; (8001584 <main+0x2e4>)
 8001346:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001348:	e01e      	b.n	8001388 <main+0xe8>
  		size = sprintf((char *)Data, "BMP280 initialization failed\n");
 800134a:	4a8f      	ldr	r2, [pc, #572]	; (8001588 <main+0x2e8>)
 800134c:	4b8f      	ldr	r3, [pc, #572]	; (800158c <main+0x2ec>)
 800134e:	4615      	mov	r5, r2
 8001350:	461c      	mov	r4, r3
 8001352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001354:	6028      	str	r0, [r5, #0]
 8001356:	6069      	str	r1, [r5, #4]
 8001358:	60aa      	str	r2, [r5, #8]
 800135a:	60eb      	str	r3, [r5, #12]
 800135c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800135e:	6128      	str	r0, [r5, #16]
 8001360:	6169      	str	r1, [r5, #20]
 8001362:	61aa      	str	r2, [r5, #24]
 8001364:	8823      	ldrh	r3, [r4, #0]
 8001366:	83ab      	strh	r3, [r5, #28]
 8001368:	231d      	movs	r3, #29
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b88      	ldr	r3, [pc, #544]	; (8001590 <main+0x2f0>)
 800136e:	801a      	strh	r2, [r3, #0]
  		HAL_UART_Transmit(&huart3, Data, size, 1000);
 8001370:	4b87      	ldr	r3, [pc, #540]	; (8001590 <main+0x2f0>)
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	4983      	ldr	r1, [pc, #524]	; (8001588 <main+0x2e8>)
 800137a:	4886      	ldr	r0, [pc, #536]	; (8001594 <main+0x2f4>)
 800137c:	f004 f888 	bl	8005490 <HAL_UART_Transmit>
  		HAL_Delay(2000);
 8001380:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001384:	f000 fce4 	bl	8001d50 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001388:	497c      	ldr	r1, [pc, #496]	; (800157c <main+0x2dc>)
 800138a:	487d      	ldr	r0, [pc, #500]	; (8001580 <main+0x2e0>)
 800138c:	f7ff fbe5 	bl	8000b5a <bmp280_init>
 8001390:	4603      	mov	r3, r0
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1d6      	bne.n	800134a <main+0xaa>
  	}
  	bool bme280p = bmp280.id == BME280_CHIP_ID;
 800139c:	4b78      	ldr	r3, [pc, #480]	; (8001580 <main+0x2e0>)
 800139e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013a2:	2b60      	cmp	r3, #96	; 0x60
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
  	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <main+0x116>
 80013b2:	4b79      	ldr	r3, [pc, #484]	; (8001598 <main+0x2f8>)
 80013b4:	e000      	b.n	80013b8 <main+0x118>
 80013b6:	4b79      	ldr	r3, [pc, #484]	; (800159c <main+0x2fc>)
 80013b8:	461a      	mov	r2, r3
 80013ba:	4979      	ldr	r1, [pc, #484]	; (80015a0 <main+0x300>)
 80013bc:	4872      	ldr	r0, [pc, #456]	; (8001588 <main+0x2e8>)
 80013be:	f005 fda3 	bl	8006f08 <siprintf>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b72      	ldr	r3, [pc, #456]	; (8001590 <main+0x2f0>)
 80013c8:	801a      	strh	r2, [r3, #0]
  	HAL_UART_Transmit(&huart3, Data, size, 1000);
 80013ca:	4b71      	ldr	r3, [pc, #452]	; (8001590 <main+0x2f0>)
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	496d      	ldr	r1, [pc, #436]	; (8001588 <main+0x2e8>)
 80013d4:	486f      	ldr	r0, [pc, #444]	; (8001594 <main+0x2f4>)
 80013d6:	f004 f85b 	bl	8005490 <HAL_UART_Transmit>
  	int filter = 150;
 80013da:	2396      	movs	r3, #150	; 0x96
 80013dc:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < filter; i++){
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	e05f      	b.n	80014a4 <main+0x204>
		  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
			  size = sprintf((char *)Data, "Temperature/pressure reading failed\n");
 80013e4:	4b68      	ldr	r3, [pc, #416]	; (8001588 <main+0x2e8>)
 80013e6:	4a6f      	ldr	r2, [pc, #444]	; (80015a4 <main+0x304>)
 80013e8:	4614      	mov	r4, r2
 80013ea:	469c      	mov	ip, r3
 80013ec:	f104 0e20 	add.w	lr, r4, #32
 80013f0:	4665      	mov	r5, ip
 80013f2:	4626      	mov	r6, r4
 80013f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013f6:	6028      	str	r0, [r5, #0]
 80013f8:	6069      	str	r1, [r5, #4]
 80013fa:	60aa      	str	r2, [r5, #8]
 80013fc:	60eb      	str	r3, [r5, #12]
 80013fe:	3410      	adds	r4, #16
 8001400:	f10c 0c10 	add.w	ip, ip, #16
 8001404:	4574      	cmp	r4, lr
 8001406:	d1f3      	bne.n	80013f0 <main+0x150>
 8001408:	4663      	mov	r3, ip
 800140a:	4622      	mov	r2, r4
 800140c:	6810      	ldr	r0, [r2, #0]
 800140e:	6018      	str	r0, [r3, #0]
 8001410:	7912      	ldrb	r2, [r2, #4]
 8001412:	711a      	strb	r2, [r3, #4]
 8001414:	2324      	movs	r3, #36	; 0x24
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <main+0x2f0>)
 800141a:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Transmit(&huart3, Data, size, 1000);
 800141c:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <main+0x2f0>)
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001424:	4958      	ldr	r1, [pc, #352]	; (8001588 <main+0x2e8>)
 8001426:	485b      	ldr	r0, [pc, #364]	; (8001594 <main+0x2f4>)
 8001428:	f004 f832 	bl	8005490 <HAL_UART_Transmit>
			  HAL_Delay(2000);
 800142c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001430:	f000 fc8e 	bl	8001d50 <HAL_Delay>
		  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001434:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <main+0x308>)
 8001436:	4a5d      	ldr	r2, [pc, #372]	; (80015ac <main+0x30c>)
 8001438:	495d      	ldr	r1, [pc, #372]	; (80015b0 <main+0x310>)
 800143a:	4851      	ldr	r0, [pc, #324]	; (8001580 <main+0x2e0>)
 800143c:	f7ff fee2 	bl	8001204 <bmp280_read_float>
 8001440:	4603      	mov	r3, r0
 8001442:	f083 0301 	eor.w	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1cb      	bne.n	80013e4 <main+0x144>
		  }

		  altitude += 44330 * (1.0 - pow(pressure/100 / 1013.25, 0.1903));
 800144c:	4b57      	ldr	r3, [pc, #348]	; (80015ac <main+0x30c>)
 800144e:	ed93 7a00 	vldr	s14, [r3]
 8001452:	eddf 6a58 	vldr	s13, [pc, #352]	; 80015b4 <main+0x314>
 8001456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800145e:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8001560 <main+0x2c0>
 8001462:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001466:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001568 <main+0x2c8>
 800146a:	eeb0 0b45 	vmov.f64	d0, d5
 800146e:	f007 f8bf 	bl	80085f0 <pow>
 8001472:	eeb0 6b40 	vmov.f64	d6, d0
 8001476:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800147a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800147e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8001570 <main+0x2d0>
 8001482:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <main+0x318>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001490:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001494:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <main+0x318>)
 800149a:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0; i < filter; i++){
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	3301      	adds	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbc3      	blt.n	8001434 <main+0x194>
	  }
	  altitude /= filter;
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <main+0x318>)
 80014ae:	edd3 6a00 	vldr	s13, [r3]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <main+0x318>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	  size = sprintf((char *)Data,"%.2f", altitude);
 80014c6:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <main+0x318>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d0:	ec53 2b17 	vmov	r2, r3, d7
 80014d4:	4939      	ldr	r1, [pc, #228]	; (80015bc <main+0x31c>)
 80014d6:	482c      	ldr	r0, [pc, #176]	; (8001588 <main+0x2e8>)
 80014d8:	f005 fd16 	bl	8006f08 <siprintf>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <main+0x2f0>)
 80014e2:	801a      	strh	r2, [r3, #0]
	  altitude = 0;
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <main+0x318>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, Data, size, 1000);
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <main+0x2f0>)
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f4:	4924      	ldr	r1, [pc, #144]	; (8001588 <main+0x2e8>)
 80014f6:	4827      	ldr	r0, [pc, #156]	; (8001594 <main+0x2f4>)
 80014f8:	f003 ffca 	bl	8005490 <HAL_UART_Transmit>
	  if (bme280p) {
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d017      	beq.n	8001532 <main+0x292>
		  size = sprintf((char *)Data,", Humidity: %.2f\n", humidity);
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <main+0x308>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800150c:	ec53 2b17 	vmov	r2, r3, d7
 8001510:	492b      	ldr	r1, [pc, #172]	; (80015c0 <main+0x320>)
 8001512:	481d      	ldr	r0, [pc, #116]	; (8001588 <main+0x2e8>)
 8001514:	f005 fcf8 	bl	8006f08 <siprintf>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <main+0x2f0>)
 800151e:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, Data, size, 1000);
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <main+0x2f0>)
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001528:	4917      	ldr	r1, [pc, #92]	; (8001588 <main+0x2e8>)
 800152a:	481a      	ldr	r0, [pc, #104]	; (8001594 <main+0x2f4>)
 800152c:	f003 ffb0 	bl	8005490 <HAL_UART_Transmit>
 8001530:	e00f      	b.n	8001552 <main+0x2b2>
	  }

	  else {
		  size = sprintf((char *)Data, "\n");
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <main+0x2e8>)
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <main+0x324>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	8013      	strh	r3, [r2, #0]
 800153a:	2301      	movs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <main+0x2f0>)
 8001540:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, Data, size, 1000);
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <main+0x2f0>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	490f      	ldr	r1, [pc, #60]	; (8001588 <main+0x2e8>)
 800154c:	4811      	ldr	r0, [pc, #68]	; (8001594 <main+0x2f4>)
 800154e:	f003 ff9f 	bl	8005490 <HAL_UART_Transmit>
	  }
	  HAL_Delay(3);
 8001552:	2003      	movs	r0, #3
 8001554:	f000 fbfc 	bl	8001d50 <HAL_Delay>
	  for(int i = 0; i < filter; i++){
 8001558:	e741      	b.n	80013de <main+0x13e>
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w
 8001560:	00000000 	.word	0x00000000
 8001564:	408faa00 	.word	0x408faa00
 8001568:	1a36e2eb 	.word	0x1a36e2eb
 800156c:	3fc85bc0 	.word	0x3fc85bc0
 8001570:	00000000 	.word	0x00000000
 8001574:	40e5a540 	.word	0x40e5a540
 8001578:	58024400 	.word	0x58024400
 800157c:	20000424 	.word	0x20000424
 8001580:	200003f8 	.word	0x200003f8
 8001584:	20000298 	.word	0x20000298
 8001588:	200002f0 	.word	0x200002f0
 800158c:	080091e8 	.word	0x080091e8
 8001590:	200003f4 	.word	0x200003f4
 8001594:	2000020c 	.word	0x2000020c
 8001598:	08009208 	.word	0x08009208
 800159c:	08009210 	.word	0x08009210
 80015a0:	08009218 	.word	0x08009218
 80015a4:	0800922c 	.word	0x0800922c
 80015a8:	200002ec 	.word	0x200002ec
 80015ac:	200002e8 	.word	0x200002e8
 80015b0:	200002e4 	.word	0x200002e4
 80015b4:	42c80000 	.word	0x42c80000
 80015b8:	200003f0 	.word	0x200003f0
 80015bc:	08009254 	.word	0x08009254
 80015c0:	0800925c 	.word	0x0800925c
 80015c4:	08009270 	.word	0x08009270

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0cc      	sub	sp, #304	; 0x130
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015d2:	224c      	movs	r2, #76	; 0x4c
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 f852 	bl	8006680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015e0:	2220      	movs	r2, #32
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 f84b 	bl	8006680 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4618      	mov	r0, r3
 80015f0:	23bc      	movs	r3, #188	; 0xbc
 80015f2:	461a      	mov	r2, r3
 80015f4:	2100      	movs	r1, #0
 80015f6:	f005 f843 	bl	8006680 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80015fa:	2004      	movs	r0, #4
 80015fc:	f001 fc0a 	bl	8002e14 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <SystemClock_Config+0x130>)
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	4a3b      	ldr	r2, [pc, #236]	; (80016f8 <SystemClock_Config+0x130>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001612:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <SystemClock_Config+0x130>)
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	f003 0201 	and.w	r2, r3, #1
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <SystemClock_Config+0x134>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001626:	4a35      	ldr	r2, [pc, #212]	; (80016fc <SystemClock_Config+0x134>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <SystemClock_Config+0x134>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800163e:	bf00      	nop
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <SystemClock_Config+0x134>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164c:	d1f8      	bne.n	8001640 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001654:	2301      	movs	r3, #1
 8001656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165a:	2340      	movs	r3, #64	; 0x40
 800165c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001666:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fc2c 	bl	8002ec8 <HAL_RCC_OscConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001676:	f000 f995 	bl	80019a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167a:	233f      	movs	r3, #63	; 0x3f
 800167c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 f819 	bl	80036e8 <HAL_RCC_ClockConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80016bc:	f000 f972 	bl	80019a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	220a      	movs	r2, #10
 80016c6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2200      	movs	r2, #0
 80016ce:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	2200      	movs	r2, #0
 80016d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fb86 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x126>
  {
    Error_Handler();
 80016ea:	f000 f95b 	bl	80019a4 <Error_Handler>
  }
}
 80016ee:	bf00      	nop
 80016f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	58000400 	.word	0x58000400
 80016fc:	58024800 	.word	0x58024800

08001700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <MX_I2C1_Init+0x74>)
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <MX_I2C1_Init+0x78>)
 8001708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_I2C1_Init+0x74>)
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <MX_I2C1_Init+0x7c>)
 800170e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_I2C1_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_I2C1_Init+0x74>)
 8001718:	2201      	movs	r2, #1
 800171a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_I2C1_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_I2C1_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_I2C1_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_I2C1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_I2C1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800173a:	480e      	ldr	r0, [pc, #56]	; (8001774 <MX_I2C1_Init+0x74>)
 800173c:	f000 fdf8 	bl	8002330 <HAL_I2C_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001746:	f000 f92d 	bl	80019a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174a:	2100      	movs	r1, #0
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <MX_I2C1_Init+0x74>)
 800174e:	f001 fac9 	bl	8002ce4 <HAL_I2CEx_ConfigAnalogFilter>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001758:	f000 f924 	bl	80019a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800175c:	2100      	movs	r1, #0
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_I2C1_Init+0x74>)
 8001760:	f001 fb0b 	bl	8002d7a <HAL_I2CEx_ConfigDigitalFilter>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800176a:	f000 f91b 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000298 	.word	0x20000298
 8001778:	40005400 	.word	0x40005400
 800177c:	10707dbc 	.word	0x10707dbc

08001780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <MX_USART3_UART_Init+0x90>)
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <MX_USART3_UART_Init+0x94>)
 8001788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_USART3_UART_Init+0x90>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_USART3_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_USART3_UART_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017ca:	f003 fe11 	bl	80053f0 <HAL_UART_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017d4:	f000 f8e6 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d8:	2100      	movs	r1, #0
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017dc:	f004 fe41 	bl	8006462 <HAL_UARTEx_SetTxFifoThreshold>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017e6:	f000 f8dd 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ea:	2100      	movs	r1, #0
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017ee:	f004 fe76 	bl	80064de <HAL_UARTEx_SetRxFifoThreshold>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017f8:	f000 f8d4 	bl	80019a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_USART3_UART_Init+0x90>)
 80017fe:	f004 fdf7 	bl	80063f0 <HAL_UARTEx_DisableFifoMode>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001808:	f000 f8cc 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000020c 	.word	0x2000020c
 8001814:	40004800 	.word	0x40004800

08001818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	4b58      	ldr	r3, [pc, #352]	; (8001990 <MX_GPIO_Init+0x178>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001834:	4a56      	ldr	r2, [pc, #344]	; (8001990 <MX_GPIO_Init+0x178>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183e:	4b54      	ldr	r3, [pc, #336]	; (8001990 <MX_GPIO_Init+0x178>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <MX_GPIO_Init+0x178>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001852:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <MX_GPIO_Init+0x178>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185c:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <MX_GPIO_Init+0x178>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b49      	ldr	r3, [pc, #292]	; (8001990 <MX_GPIO_Init+0x178>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a47      	ldr	r2, [pc, #284]	; (8001990 <MX_GPIO_Init+0x178>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b45      	ldr	r3, [pc, #276]	; (8001990 <MX_GPIO_Init+0x178>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <MX_GPIO_Init+0x178>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188e:	4a40      	ldr	r2, [pc, #256]	; (8001990 <MX_GPIO_Init+0x178>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <MX_GPIO_Init+0x178>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <MX_GPIO_Init+0x178>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	4a38      	ldr	r2, [pc, #224]	; (8001990 <MX_GPIO_Init+0x178>)
 80018ae:	f043 0308 	orr.w	r3, r3, #8
 80018b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <MX_GPIO_Init+0x178>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <MX_GPIO_Init+0x178>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ca:	4a31      	ldr	r2, [pc, #196]	; (8001990 <MX_GPIO_Init+0x178>)
 80018cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d4:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <MX_GPIO_Init+0x178>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80018e2:	2332      	movs	r3, #50	; 0x32
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018f2:	230b      	movs	r3, #11
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4825      	ldr	r0, [pc, #148]	; (8001994 <MX_GPIO_Init+0x17c>)
 80018fe:	f000 fb39 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001902:	2386      	movs	r3, #134	; 0x86
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001912:	230b      	movs	r3, #11
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	481e      	ldr	r0, [pc, #120]	; (8001998 <MX_GPIO_Init+0x180>)
 800191e:	f000 fb29 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001934:	230b      	movs	r3, #11
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4817      	ldr	r0, [pc, #92]	; (800199c <MX_GPIO_Init+0x184>)
 8001940:	f000 fb18 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001944:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001956:	230a      	movs	r3, #10
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_GPIO_Init+0x180>)
 8001962:	f000 fb07 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001966:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001978:	230b      	movs	r3, #11
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	4807      	ldr	r0, [pc, #28]	; (80019a0 <MX_GPIO_Init+0x188>)
 8001984:	f000 faf6 	bl	8001f74 <HAL_GPIO_Init>

}
 8001988:	bf00      	nop
 800198a:	3730      	adds	r7, #48	; 0x30
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	58024400 	.word	0x58024400
 8001994:	58020800 	.word	0x58020800
 8001998:	58020000 	.word	0x58020000
 800199c:	58020400 	.word	0x58020400
 80019a0:	58021800 	.word	0x58021800

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_MspInit+0x30>)
 80019bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x30>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x30>)
 80019cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	58024400 	.word	0x58024400

080019e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12d      	bne.n	8001a66 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a28:	23c0      	movs	r3, #192	; 0xc0
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	480d      	ldr	r0, [pc, #52]	; (8001a78 <HAL_I2C_MspInit+0x90>)
 8001a44:	f000 fa96 	bl	8001f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40005400 	.word	0x40005400
 8001a74:	58024400 	.word	0x58024400
 8001a78:	58020400 	.word	0x58020400

08001a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <HAL_UART_MspInit+0x88>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d12e      	bne.n	8001afc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_UART_MspInit+0x8c>)
 8001aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa4:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <HAL_UART_MspInit+0x8c>)
 8001aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_UART_MspInit+0x8c>)
 8001ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_UART_MspInit+0x8c>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_UART_MspInit+0x8c>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_UART_MspInit+0x8c>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aec:	2307      	movs	r3, #7
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_UART_MspInit+0x90>)
 8001af8:	f000 fa3c 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40004800 	.word	0x40004800
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020c00 	.word	0x58020c00

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b64:	f000 f8d4 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f004 fd46 	bl	800662c <__errno>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20020000 	.word	0x20020000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	20000200 	.word	0x20000200
 8001bd4:	20000438 	.word	0x20000438

08001bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c10 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bdc:	f7fe fda8 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001be0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001be2:	e003      	b.n	8001bec <LoopCopyDataInit>

08001be4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001be6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bea:	3104      	adds	r1, #4

08001bec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bec:	480a      	ldr	r0, [pc, #40]	; (8001c18 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001bf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bf4:	d3f6      	bcc.n	8001be4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001bf8:	e002      	b.n	8001c00 <LoopFillZerobss>

08001bfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bfc:	f842 3b04 	str.w	r3, [r2], #4

08001c00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c04:	d3f9      	bcc.n	8001bfa <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001c06:	f004 fd17 	bl	8006638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0a:	f7ff fb49 	bl	80012a0 <main>
  bx  lr    
 8001c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c14:	08009560 	.word	0x08009560
  ldr  r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c1c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001c20:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001c24:	20000434 	.word	0x20000434

08001c28 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC3_IRQHandler>
	...

08001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c32:	2003      	movs	r0, #3
 8001c34:	f000 f96c 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c38:	f001 ff0c 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_Init+0x68>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <HAL_Init+0x6c>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa21 f303 	lsr.w	r3, r1, r3
 8001c54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_Init+0x68>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_Init+0x6c>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_Init+0x70>)
 8001c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_Init+0x74>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f814 	bl	8001ca4 <HAL_InitTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e002      	b.n	8001c8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c86:	f7ff fe95 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58024400 	.word	0x58024400
 8001c98:	08009284 	.word	0x08009284
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_InitTick+0x60>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e021      	b.n	8001cfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_InitTick+0x64>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_InitTick+0x60>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f943 	bl	8001f5a <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 f91b 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x68>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000008 	.word	0x20000008

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2000000c 	.word	0x2000000c
 8001d34:	2000042c 	.word	0x2000042c

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2000042c 	.word	0x2000042c

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_Delay+0x40>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000000c 	.word	0x2000000c

08001d94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetREVID+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0c1b      	lsrs	r3, r3, #16
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	5c001000 	.word	0x5c001000

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <__NVIC_SetPriorityGrouping+0x40>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x40>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00
 8001df0:	05fa0000 	.word	0x05fa0000

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db0a      	blt.n	8001e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	490c      	ldr	r1, [pc, #48]	; (8001e5c <__NVIC_SetPriority+0x4c>)
 8001e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e38:	e00a      	b.n	8001e50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4908      	ldr	r1, [pc, #32]	; (8001e60 <__NVIC_SetPriority+0x50>)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	761a      	strb	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f1c3 0307 	rsb	r3, r3, #7
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	bf28      	it	cs
 8001e82:	2304      	movcs	r3, #4
 8001e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d902      	bls.n	8001e94 <NVIC_EncodePriority+0x30>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3b03      	subs	r3, #3
 8001e92:	e000      	b.n	8001e96 <NVIC_EncodePriority+0x32>
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	4313      	orrs	r3, r2
         );
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f7ff ff8e 	bl	8001e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff47 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff5e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff90 	bl	8001e64 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5f 	bl	8001e10 <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffb2 	bl	8001ecc <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_GPIO_Init+0x234>)
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f86:	e194      	b.n	80022b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8186 	beq.w	80022ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_GPIO_Init+0x4c>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d007      	beq.n	8001fc0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb4:	2b11      	cmp	r3, #17
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b12      	cmp	r3, #18
 8001fbe:	d130      	bne.n	8002022 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 0201 	and.w	r2, r3, #1
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0xee>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b12      	cmp	r3, #18
 8002060:	d123      	bne.n	80020aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0203 	and.w	r2, r3, #3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80e0 	beq.w	80022ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f2:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020fc:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_GPIO_Init+0x23c>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <HAL_GPIO_Init+0x240>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d052      	beq.n	80021dc <HAL_GPIO_Init+0x268>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_GPIO_Init+0x244>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_GPIO_Init+0x22e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_GPIO_Init+0x248>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02b      	beq.n	800219e <HAL_GPIO_Init+0x22a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_GPIO_Init+0x24c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d025      	beq.n	800219a <HAL_GPIO_Init+0x226>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x250>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <HAL_GPIO_Init+0x222>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x254>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d019      	beq.n	8002192 <HAL_GPIO_Init+0x21e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_GPIO_Init+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x21a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_GPIO_Init+0x25c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x216>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x260>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x212>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_GPIO_Init+0x264>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x20e>
 800217e:	2309      	movs	r3, #9
 8002180:	e02d      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002182:	230a      	movs	r3, #10
 8002184:	e02b      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002186:	2308      	movs	r3, #8
 8002188:	e029      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800218a:	2307      	movs	r3, #7
 800218c:	e027      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800218e:	2306      	movs	r3, #6
 8002190:	e025      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002192:	2305      	movs	r3, #5
 8002194:	e023      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002196:	2304      	movs	r3, #4
 8002198:	e021      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800219a:	2303      	movs	r3, #3
 800219c:	e01f      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e01d      	b.n	80021de <HAL_GPIO_Init+0x26a>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e01b      	b.n	80021de <HAL_GPIO_Init+0x26a>
 80021a6:	bf00      	nop
 80021a8:	58000080 	.word	0x58000080
 80021ac:	58024400 	.word	0x58024400
 80021b0:	58000400 	.word	0x58000400
 80021b4:	58020000 	.word	0x58020000
 80021b8:	58020400 	.word	0x58020400
 80021bc:	58020800 	.word	0x58020800
 80021c0:	58020c00 	.word	0x58020c00
 80021c4:	58021000 	.word	0x58021000
 80021c8:	58021400 	.word	0x58021400
 80021cc:	58021800 	.word	0x58021800
 80021d0:	58021c00 	.word	0x58021c00
 80021d4:	58022000 	.word	0x58022000
 80021d8:	58022400 	.word	0x58022400
 80021dc:	2300      	movs	r3, #0
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ee:	4938      	ldr	r1, [pc, #224]	; (80022d0 <HAL_GPIO_Init+0x35c>)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f ae63 	bne.w	8001f88 <HAL_GPIO_Init+0x14>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	58000400 	.word	0x58000400

080022d4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80022dc:	4a08      	ldr	r2, [pc, #32]	; (8002300 <HAL_HSEM_FastTake+0x2c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3320      	adds	r3, #32
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_HSEM_FastTake+0x30>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	58026400 	.word	0x58026400
 8002304:	80000300 	.word	0x80000300

08002308 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002312:	4906      	ldr	r1, [pc, #24]	; (800232c <HAL_HSEM_Release+0x24>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	58026400 	.word	0x58026400

08002330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fb46 	bl	80019e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	e006      	b.n	80023b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d104      	bne.n	80023ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_I2C_Init+0x11c>)
 80023d6:	430b      	orrs	r3, r1
 80023d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	021a      	lsls	r2, r3, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69d9      	ldr	r1, [r3, #28]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	02008000 	.word	0x02008000

08002450 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	4608      	mov	r0, r1
 800245a:	4611      	mov	r1, r2
 800245c:	461a      	mov	r2, r3
 800245e:	4603      	mov	r3, r0
 8002460:	817b      	strh	r3, [r7, #10]
 8002462:	460b      	mov	r3, r1
 8002464:	813b      	strh	r3, [r7, #8]
 8002466:	4613      	mov	r3, r2
 8002468:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b20      	cmp	r3, #32
 8002474:	f040 80f9 	bne.w	800266a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_I2C_Mem_Write+0x34>
 800247e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0ed      	b.n	800266c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_I2C_Mem_Write+0x4e>
 800249a:	2302      	movs	r3, #2
 800249c:	e0e6      	b.n	800266c <HAL_I2C_Mem_Write+0x21c>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024a6:	f7ff fc47 	bl	8001d38 <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2319      	movs	r3, #25
 80024b2:	2201      	movs	r2, #1
 80024b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fac3 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d1      	b.n	800266c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2221      	movs	r2, #33	; 0x21
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f0:	88f8      	ldrh	r0, [r7, #6]
 80024f2:	893a      	ldrh	r2, [r7, #8]
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4603      	mov	r3, r0
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f9d3 	bl	80028ac <I2C_RequestMemoryWrite>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0a9      	b.n	800266c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2bff      	cmp	r3, #255	; 0xff
 8002520:	d90e      	bls.n	8002540 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	22ff      	movs	r2, #255	; 0xff
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	b2da      	uxtb	r2, r3
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	2300      	movs	r3, #0
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fba5 	bl	8002c88 <I2C_TransferConfig>
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	b2da      	uxtb	r2, r3
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	2300      	movs	r3, #0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fb94 	bl	8002c88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 faad 	bl	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e07b      	b.n	800266c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d034      	beq.n	8002618 <HAL_I2C_Mem_Write+0x1c8>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d130      	bne.n	8002618 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	2200      	movs	r2, #0
 80025be:	2180      	movs	r1, #128	; 0x80
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fa3f 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e04d      	b.n	800266c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2bff      	cmp	r3, #255	; 0xff
 80025d8:	d90e      	bls.n	80025f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	22ff      	movs	r2, #255	; 0xff
 80025de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	8979      	ldrh	r1, [r7, #10]
 80025e8:	2300      	movs	r3, #0
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fb49 	bl	8002c88 <I2C_TransferConfig>
 80025f6:	e00f      	b.n	8002618 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	b2da      	uxtb	r2, r3
 8002608:	8979      	ldrh	r1, [r7, #10]
 800260a:	2300      	movs	r3, #0
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fb38 	bl	8002c88 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d19e      	bne.n	8002560 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa8c 	bl	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e01a      	b.n	800266c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2220      	movs	r2, #32
 800263c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_I2C_Mem_Write+0x224>)
 800264a:	400b      	ands	r3, r1
 800264c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	fe00e800 	.word	0xfe00e800

08002678 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4603      	mov	r3, r0
 8002688:	817b      	strh	r3, [r7, #10]
 800268a:	460b      	mov	r3, r1
 800268c:	813b      	strh	r3, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	f040 80fd 	bne.w	800289a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_I2C_Mem_Read+0x34>
 80026a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0f1      	b.n	800289c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Mem_Read+0x4e>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e0ea      	b.n	800289c <HAL_I2C_Mem_Read+0x224>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ce:	f7ff fb33 	bl	8001d38 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2319      	movs	r3, #25
 80026da:	2201      	movs	r2, #1
 80026dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f9af 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d5      	b.n	800289c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2222      	movs	r2, #34	; 0x22
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002718:	88f8      	ldrh	r0, [r7, #6]
 800271a:	893a      	ldrh	r2, [r7, #8]
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4603      	mov	r3, r0
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f913 	bl	8002954 <I2C_RequestMemoryRead>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0ad      	b.n	800289c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2bff      	cmp	r3, #255	; 0xff
 8002748:	d90e      	bls.n	8002768 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	22ff      	movs	r2, #255	; 0xff
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	b2da      	uxtb	r2, r3
 8002756:	8979      	ldrh	r1, [r7, #10]
 8002758:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <HAL_I2C_Mem_Read+0x22c>)
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fa91 	bl	8002c88 <I2C_TransferConfig>
 8002766:	e00f      	b.n	8002788 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	b2da      	uxtb	r2, r3
 8002778:	8979      	ldrh	r1, [r7, #10]
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_I2C_Mem_Read+0x22c>)
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fa80 	bl	8002c88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	2200      	movs	r2, #0
 8002790:	2104      	movs	r1, #4
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f956 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e07c      	b.n	800289c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d034      	beq.n	8002848 <HAL_I2C_Mem_Read+0x1d0>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d130      	bne.n	8002848 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f927 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e04d      	b.n	800289c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	2bff      	cmp	r3, #255	; 0xff
 8002808:	d90e      	bls.n	8002828 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	22ff      	movs	r2, #255	; 0xff
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	b2da      	uxtb	r2, r3
 8002816:	8979      	ldrh	r1, [r7, #10]
 8002818:	2300      	movs	r3, #0
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fa31 	bl	8002c88 <I2C_TransferConfig>
 8002826:	e00f      	b.n	8002848 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	b2da      	uxtb	r2, r3
 8002838:	8979      	ldrh	r1, [r7, #10]
 800283a:	2300      	movs	r3, #0
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa20 	bl	8002c88 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d19a      	bne.n	8002788 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f974 	bl	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e01a      	b.n	800289c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2220      	movs	r2, #32
 800286c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_I2C_Mem_Read+0x230>)
 800287a:	400b      	ands	r3, r1
 800287c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800289a:	2302      	movs	r3, #2
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	80002400 	.word	0x80002400
 80028a8:	fe00e800 	.word	0xfe00e800

080028ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	4608      	mov	r0, r1
 80028b6:	4611      	mov	r1, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	817b      	strh	r3, [r7, #10]
 80028be:	460b      	mov	r3, r1
 80028c0:	813b      	strh	r3, [r7, #8]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	8979      	ldrh	r1, [r7, #10]
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <I2C_RequestMemoryWrite+0xa4>)
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f9d7 	bl	8002c88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	69b9      	ldr	r1, [r7, #24]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f8f0 	bl	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e02c      	b.n	8002948 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d105      	bne.n	8002900 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f4:	893b      	ldrh	r3, [r7, #8]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
 80028fe:	e015      	b.n	800292c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002900:	893b      	ldrh	r3, [r7, #8]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b29b      	uxth	r3, r3
 8002906:	b2da      	uxtb	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	69b9      	ldr	r1, [r7, #24]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f8d6 	bl	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e012      	b.n	8002948 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002922:	893b      	ldrh	r3, [r7, #8]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2200      	movs	r2, #0
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f884 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	80002000 	.word	0x80002000

08002954 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	8979      	ldrh	r1, [r7, #10]
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <I2C_RequestMemoryRead+0xa4>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2300      	movs	r3, #0
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f984 	bl	8002c88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f89d 	bl	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e02c      	b.n	80029ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d105      	bne.n	80029a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800299a:	893b      	ldrh	r3, [r7, #8]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
 80029a4:	e015      	b.n	80029d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029a6:	893b      	ldrh	r3, [r7, #8]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f883 	bl	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e012      	b.n	80029ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2200      	movs	r2, #0
 80029da:	2140      	movs	r1, #64	; 0x40
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f831 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	80002000 	.word	0x80002000

080029fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d103      	bne.n	8002a1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d007      	beq.n	8002a38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	619a      	str	r2, [r3, #24]
  }
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a54:	e022      	b.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d01e      	beq.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7ff f96b 	bl	8001d38 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d302      	bcc.n	8002a74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d113      	bne.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e00f      	b.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d0cd      	beq.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ad0:	e02c      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f870 	bl	8002bbc <I2C_IsAcknowledgeFailed>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e02a      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d01e      	beq.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7ff f923 	bl	8001d38 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d113      	bne.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d1cb      	bne.n	8002ad2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b50:	e028      	b.n	8002ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f830 	bl	8002bbc <I2C_IsAcknowledgeFailed>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e026      	b.n	8002bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b66:	f7ff f8e7 	bl	8001d38 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d113      	bne.n	8002ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e007      	b.n	8002bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d1cf      	bne.n	8002b52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d151      	bne.n	8002c7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd6:	e022      	b.n	8002c1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d01e      	beq.n	8002c1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be0:	f7ff f8aa 	bl	8001d38 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d302      	bcc.n	8002bf6 <I2C_IsAcknowledgeFailed+0x3a>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d113      	bne.n	8002c1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e02e      	b.n	8002c7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d1d5      	bne.n	8002bd8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2210      	movs	r2, #16
 8002c32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff fedd 	bl	80029fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <I2C_IsAcknowledgeFailed+0xc8>)
 8002c4e:	400b      	ands	r3, r1
 8002c50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f043 0204 	orr.w	r2, r3, #4
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	fe00e800 	.word	0xfe00e800

08002c88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	817b      	strh	r3, [r7, #10]
 8002c96:	4613      	mov	r3, r2
 8002c98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	0d5b      	lsrs	r3, r3, #21
 8002ca4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <I2C_TransferConfig+0x58>)
 8002caa:	430b      	orrs	r3, r1
 8002cac:	43db      	mvns	r3, r3
 8002cae:	ea02 0103 	and.w	r1, r2, r3
 8002cb2:	897b      	ldrh	r3, [r7, #10]
 8002cb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cb8:	7a7b      	ldrb	r3, [r7, #9]
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	03ff63ff 	.word	0x03ff63ff

08002ce4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d138      	bne.n	8002d6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e032      	b.n	8002d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d139      	bne.n	8002e04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e033      	b.n	8002e06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2224      	movs	r2, #36	; 0x24
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e1c:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	2b06      	cmp	r3, #6
 8002e26:	d00a      	beq.n	8002e3e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e28:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d001      	beq.n	8002e3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e040      	b.n	8002ebc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e03e      	b.n	8002ebc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002e46:	491f      	ldr	r1, [pc, #124]	; (8002ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e4e:	f7fe ff73 	bl	8001d38 <HAL_GetTick>
 8002e52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e54:	e009      	b.n	8002e6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e56:	f7fe ff6f 	bl	8001d38 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e64:	d901      	bls.n	8002e6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e028      	b.n	8002ebc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e76:	d1ee      	bne.n	8002e56 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b1e      	cmp	r3, #30
 8002e7c:	d008      	beq.n	8002e90 <HAL_PWREx_ConfigSupply+0x7c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b2e      	cmp	r3, #46	; 0x2e
 8002e82:	d005      	beq.n	8002e90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b1d      	cmp	r3, #29
 8002e88:	d002      	beq.n	8002e90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b2d      	cmp	r3, #45	; 0x2d
 8002e8e:	d114      	bne.n	8002eba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e90:	f7fe ff52 	bl	8001d38 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e96:	e009      	b.n	8002eac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e98:	f7fe ff4e 	bl	8001d38 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea6:	d901      	bls.n	8002eac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e007      	b.n	8002ebc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	58024800 	.word	0x58024800

08002ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e3ff      	b.n	80036da <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8087 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee8:	4b99      	ldr	r3, [pc, #612]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ef2:	4b97      	ldr	r3, [pc, #604]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d007      	beq.n	8002f0e <HAL_RCC_OscConfig+0x46>
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b18      	cmp	r3, #24
 8002f02:	d110      	bne.n	8002f26 <HAL_RCC_OscConfig+0x5e>
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0e:	4b90      	ldr	r3, [pc, #576]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d06c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x12c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d168      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e3d9      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x76>
 8002f30:	4b87      	ldr	r3, [pc, #540]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a86      	ldr	r2, [pc, #536]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e02e      	b.n	8002f9c <HAL_RCC_OscConfig+0xd4>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x98>
 8002f46:	4b82      	ldr	r3, [pc, #520]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a81      	ldr	r2, [pc, #516]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b7f      	ldr	r3, [pc, #508]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7e      	ldr	r2, [pc, #504]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0xd4>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0xbc>
 8002f6a:	4b79      	ldr	r3, [pc, #484]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a78      	ldr	r2, [pc, #480]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b76      	ldr	r3, [pc, #472]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a75      	ldr	r2, [pc, #468]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0xd4>
 8002f84:	4b72      	ldr	r3, [pc, #456]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a71      	ldr	r2, [pc, #452]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fec8 	bl	8001d38 <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fac:	f7fe fec4 	bl	8001d38 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e38d      	b.n	80036da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fbe:	4b64      	ldr	r3, [pc, #400]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0xe4>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe feb4 	bl	8001d38 <HAL_GetTick>
 8002fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe feb0 	bl	8001d38 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e379      	b.n	80036da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fe6:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x10c>
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80ae 	beq.w	8003160 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003004:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800300c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800300e:	4b50      	ldr	r3, [pc, #320]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_RCC_OscConfig+0x162>
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	2b18      	cmp	r3, #24
 800301e:	d13a      	bne.n	8003096 <HAL_RCC_OscConfig+0x1ce>
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d135      	bne.n	8003096 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x17a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e34b      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	f7fe fea7 	bl	8001d94 <HAL_GetREVID>
 8003046:	4602      	mov	r2, r0
 8003048:	f241 0303 	movw	r3, #4099	; 0x1003
 800304c:	429a      	cmp	r2, r3
 800304e:	d817      	bhi.n	8003080 <HAL_RCC_OscConfig+0x1b8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d108      	bne.n	800306a <HAL_RCC_OscConfig+0x1a2>
 8003058:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003060:	4a3b      	ldr	r2, [pc, #236]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003066:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003068:	e07a      	b.n	8003160 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	031b      	lsls	r3, r3, #12
 8003078:	4935      	ldr	r1, [pc, #212]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800307e:	e06f      	b.n	8003160 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b33      	ldr	r3, [pc, #204]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	4930      	ldr	r1, [pc, #192]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003094:	e064      	b.n	8003160 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d045      	beq.n	800312a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0219 	bic.w	r2, r3, #25
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4929      	ldr	r1, [pc, #164]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe fe42 	bl	8001d38 <HAL_GetTick>
 80030b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fe fe3e 	bl	8001d38 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e307      	b.n	80036da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	f7fe fe5d 	bl	8001d94 <HAL_GetREVID>
 80030da:	4602      	mov	r2, r0
 80030dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d817      	bhi.n	8003114 <HAL_RCC_OscConfig+0x24c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d108      	bne.n	80030fe <HAL_RCC_OscConfig+0x236>
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80030f4:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 80030f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fa:	6053      	str	r3, [r2, #4]
 80030fc:	e030      	b.n	8003160 <HAL_RCC_OscConfig+0x298>
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	031b      	lsls	r3, r3, #12
 800310c:	4910      	ldr	r1, [pc, #64]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
 8003112:	e025      	b.n	8003160 <HAL_RCC_OscConfig+0x298>
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	490b      	ldr	r1, [pc, #44]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
 8003128:	e01a      	b.n	8003160 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_RCC_OscConfig+0x288>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fe fdff 	bl	8001d38 <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313e:	f7fe fdfb 	bl	8001d38 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d903      	bls.n	8003154 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e2c4      	b.n	80036da <HAL_RCC_OscConfig+0x812>
 8003150:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003154:	4ba4      	ldr	r3, [pc, #656]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ee      	bne.n	800313e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a9 	beq.w	80032c0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316e:	4b9e      	ldr	r3, [pc, #632]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003176:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003178:	4b9b      	ldr	r3, [pc, #620]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d007      	beq.n	8003194 <HAL_RCC_OscConfig+0x2cc>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b18      	cmp	r3, #24
 8003188:	d13a      	bne.n	8003200 <HAL_RCC_OscConfig+0x338>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d135      	bne.n	8003200 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003194:	4b94      	ldr	r3, [pc, #592]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x2e4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e296      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ac:	f7fe fdf2 	bl	8001d94 <HAL_GetREVID>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d817      	bhi.n	80031ea <HAL_RCC_OscConfig+0x322>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d108      	bne.n	80031d4 <HAL_RCC_OscConfig+0x30c>
 80031c2:	4b89      	ldr	r3, [pc, #548]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031ca:	4a87      	ldr	r2, [pc, #540]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80031cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031d2:	e075      	b.n	80032c0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031d4:	4b84      	ldr	r3, [pc, #528]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	069b      	lsls	r3, r3, #26
 80031e2:	4981      	ldr	r1, [pc, #516]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031e8:	e06a      	b.n	80032c0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ea:	4b7f      	ldr	r3, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	061b      	lsls	r3, r3, #24
 80031f8:	497b      	ldr	r1, [pc, #492]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031fe:	e05f      	b.n	80032c0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d042      	beq.n	800328e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003208:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a76      	ldr	r2, [pc, #472]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 800320e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fd90 	bl	8001d38 <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800321c:	f7fe fd8c 	bl	8001d38 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e255      	b.n	80036da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800322e:	4b6e      	ldr	r3, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800323a:	f7fe fdab 	bl	8001d94 <HAL_GetREVID>
 800323e:	4602      	mov	r2, r0
 8003240:	f241 0303 	movw	r3, #4099	; 0x1003
 8003244:	429a      	cmp	r2, r3
 8003246:	d817      	bhi.n	8003278 <HAL_RCC_OscConfig+0x3b0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	2b20      	cmp	r3, #32
 800324e:	d108      	bne.n	8003262 <HAL_RCC_OscConfig+0x39a>
 8003250:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003258:	4a63      	ldr	r2, [pc, #396]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 800325a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800325e:	6053      	str	r3, [r2, #4]
 8003260:	e02e      	b.n	80032c0 <HAL_RCC_OscConfig+0x3f8>
 8003262:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	069b      	lsls	r3, r3, #26
 8003270:	495d      	ldr	r1, [pc, #372]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
 8003276:	e023      	b.n	80032c0 <HAL_RCC_OscConfig+0x3f8>
 8003278:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	4958      	ldr	r1, [pc, #352]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003288:	4313      	orrs	r3, r2
 800328a:	60cb      	str	r3, [r1, #12]
 800328c:	e018      	b.n	80032c0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800328e:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a55      	ldr	r2, [pc, #340]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fd4d 	bl	8001d38 <HAL_GetTick>
 800329e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032a2:	f7fe fd49 	bl	8001d38 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e212      	b.n	80036da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d036      	beq.n	800333a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d019      	beq.n	8003308 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d4:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	4a43      	ldr	r2, [pc, #268]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe fd2a 	bl	8001d38 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fd26 	bl	8001d38 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1ef      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x420>
 8003306:	e018      	b.n	800333a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003308:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330c:	4a36      	ldr	r2, [pc, #216]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe fd10 	bl	8001d38 <HAL_GetTick>
 8003318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe fd0c 	bl	8001d38 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1d5      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800332e:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d036      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d019      	beq.n	8003382 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003358:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800335a:	f7fe fced 	bl	8001d38 <HAL_GetTick>
 800335e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003362:	f7fe fce9 	bl	8001d38 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1b2      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003374:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x49a>
 8003380:	e018      	b.n	80033b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 8003388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800338c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800338e:	f7fe fcd3 	bl	8001d38 <HAL_GetTick>
 8003392:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003396:	f7fe fccf 	bl	8001d38 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e198      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_RCC_OscConfig+0x520>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f0      	bne.n	8003396 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8085 	beq.w	80034cc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_OscConfig+0x524>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <HAL_RCC_OscConfig+0x524>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ce:	f7fe fcb3 	bl	8001d38 <HAL_GetTick>
 80033d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033d4:	e00c      	b.n	80033f0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033d6:	f7fe fcaf 	bl	8001d38 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b64      	cmp	r3, #100	; 0x64
 80033e2:	d905      	bls.n	80033f0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e178      	b.n	80036da <HAL_RCC_OscConfig+0x812>
 80033e8:	58024400 	.word	0x58024400
 80033ec:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f0:	4b96      	ldr	r3, [pc, #600]	; (800364c <HAL_RCC_OscConfig+0x784>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ec      	beq.n	80033d6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x54a>
 8003404:	4b92      	ldr	r3, [pc, #584]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a91      	ldr	r2, [pc, #580]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
 8003410:	e02d      	b.n	800346e <HAL_RCC_OscConfig+0x5a6>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x56c>
 800341a:	4b8d      	ldr	r3, [pc, #564]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	4a8c      	ldr	r2, [pc, #560]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6713      	str	r3, [r2, #112]	; 0x70
 8003426:	4b8a      	ldr	r3, [pc, #552]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a89      	ldr	r2, [pc, #548]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	e01c      	b.n	800346e <HAL_RCC_OscConfig+0x5a6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d10c      	bne.n	8003456 <HAL_RCC_OscConfig+0x58e>
 800343c:	4b84      	ldr	r3, [pc, #528]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a83      	ldr	r2, [pc, #524]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
 8003448:	4b81      	ldr	r3, [pc, #516]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a80      	ldr	r2, [pc, #512]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	e00b      	b.n	800346e <HAL_RCC_OscConfig+0x5a6>
 8003456:	4b7e      	ldr	r3, [pc, #504]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a7d      	ldr	r2, [pc, #500]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
 8003462:	4b7b      	ldr	r3, [pc, #492]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a7a      	ldr	r2, [pc, #488]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003468:	f023 0304 	bic.w	r3, r3, #4
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d015      	beq.n	80034a2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003476:	f7fe fc5f 	bl	8001d38 <HAL_GetTick>
 800347a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe fc5b 	bl	8001d38 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e122      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003494:	4b6e      	ldr	r3, [pc, #440]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ee      	beq.n	800347e <HAL_RCC_OscConfig+0x5b6>
 80034a0:	e014      	b.n	80034cc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fc49 	bl	8001d38 <HAL_GetTick>
 80034a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fc45 	bl	8001d38 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e10c      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034c0:	4b63      	ldr	r3, [pc, #396]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ee      	bne.n	80034aa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8101 	beq.w	80036d8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034d6:	4b5e      	ldr	r3, [pc, #376]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034de:	2b18      	cmp	r3, #24
 80034e0:	f000 80bc 	beq.w	800365c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	f040 8095 	bne.w	8003618 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b58      	ldr	r3, [pc, #352]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a57      	ldr	r2, [pc, #348]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80034f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe fc1d 	bl	8001d38 <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe fc19 	bl	8001d38 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0e2      	b.n	80036da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003514:	4b4e      	ldr	r3, [pc, #312]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003520:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <HAL_RCC_OscConfig+0x78c>)
 8003526:	4013      	ands	r3, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	430a      	orrs	r2, r1
 8003534:	4946      	ldr	r1, [pc, #280]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003536:	4313      	orrs	r3, r2
 8003538:	628b      	str	r3, [r1, #40]	; 0x28
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	3b01      	subs	r3, #1
 8003540:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	3b01      	subs	r3, #1
 800354a:	025b      	lsls	r3, r3, #9
 800354c:	b29b      	uxth	r3, r3
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	3b01      	subs	r3, #1
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	3b01      	subs	r3, #1
 8003564:	061b      	lsls	r3, r3, #24
 8003566:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800356a:	4939      	ldr	r1, [pc, #228]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800356c:	4313      	orrs	r3, r2
 800356e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003570:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	4a36      	ldr	r2, [pc, #216]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800357c:	4b34      	ldr	r3, [pc, #208]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800357e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003580:	4b35      	ldr	r3, [pc, #212]	; (8003658 <HAL_RCC_OscConfig+0x790>)
 8003582:	4013      	ands	r3, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003588:	00d2      	lsls	r2, r2, #3
 800358a:	4931      	ldr	r1, [pc, #196]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800358c:	4313      	orrs	r3, r2
 800358e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003590:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	f023 020c 	bic.w	r2, r3, #12
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	492c      	ldr	r1, [pc, #176]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035a2:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f023 0202 	bic.w	r2, r3, #2
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4928      	ldr	r1, [pc, #160]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e4:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 80035ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fba2 	bl	8001d38 <HAL_GetTick>
 80035f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fe fb9e 	bl	8001d38 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e067      	b.n	80036da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x730>
 8003616:	e05f      	b.n	80036d8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0c      	ldr	r2, [pc, #48]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 800361e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe fb88 	bl	8001d38 <HAL_GetTick>
 8003628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362c:	f7fe fb84 	bl	8001d38 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04d      	b.n	80036da <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <HAL_RCC_OscConfig+0x788>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x764>
 800364a:	e045      	b.n	80036d8 <HAL_RCC_OscConfig+0x810>
 800364c:	58024800 	.word	0x58024800
 8003650:	58024400 	.word	0x58024400
 8003654:	fffffc0c 	.word	0xfffffc0c
 8003658:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800365c:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_RCC_OscConfig+0x81c>)
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCC_OscConfig+0x81c>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	2b01      	cmp	r3, #1
 800366e:	d031      	beq.n	80036d4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0203 	and.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d12a      	bne.n	80036d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d122      	bne.n	80036d4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d11a      	bne.n	80036d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	0a5b      	lsrs	r3, r3, #9
 80036a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d111      	bne.n	80036d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	0c1b      	lsrs	r3, r3, #16
 80036b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d108      	bne.n	80036d4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0e1b      	lsrs	r3, r3, #24
 80036c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3730      	adds	r7, #48	; 0x30
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	58024400 	.word	0x58024400

080036e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e19c      	b.n	8003a36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b8a      	ldr	r3, [pc, #552]	; (8003928 <HAL_RCC_ClockConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d910      	bls.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b87      	ldr	r3, [pc, #540]	; (8003928 <HAL_RCC_ClockConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 020f 	bic.w	r2, r3, #15
 8003712:	4985      	ldr	r1, [pc, #532]	; (8003928 <HAL_RCC_ClockConfig+0x240>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b83      	ldr	r3, [pc, #524]	; (8003928 <HAL_RCC_ClockConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e184      	b.n	8003a36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	4b7b      	ldr	r3, [pc, #492]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003744:	429a      	cmp	r2, r3
 8003746:	d908      	bls.n	800375a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003748:	4b78      	ldr	r3, [pc, #480]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	4975      	ldr	r1, [pc, #468]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 8003756:	4313      	orrs	r3, r2
 8003758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	4b70      	ldr	r3, [pc, #448]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003772:	429a      	cmp	r2, r3
 8003774:	d908      	bls.n	8003788 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003776:	4b6d      	ldr	r3, [pc, #436]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	496a      	ldr	r1, [pc, #424]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 8003784:	4313      	orrs	r3, r2
 8003786:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	4b64      	ldr	r3, [pc, #400]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d908      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037a4:	4b61      	ldr	r3, [pc, #388]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	495e      	ldr	r1, [pc, #376]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d908      	bls.n	80037e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037d2:	4b56      	ldr	r3, [pc, #344]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4953      	ldr	r1, [pc, #332]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d010      	beq.n	8003812 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	4b4d      	ldr	r3, [pc, #308]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d908      	bls.n	8003812 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b4a      	ldr	r3, [pc, #296]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	f023 020f 	bic.w	r2, r3, #15
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4947      	ldr	r1, [pc, #284]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800380e:	4313      	orrs	r3, r2
 8003810:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d055      	beq.n	80038ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800381e:	4b43      	ldr	r3, [pc, #268]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4940      	ldr	r1, [pc, #256]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800382c:	4313      	orrs	r3, r2
 800382e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d107      	bne.n	8003848 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003838:	4b3c      	ldr	r3, [pc, #240]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d121      	bne.n	8003888 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0f6      	b.n	8003a36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d107      	bne.n	8003860 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003850:	4b36      	ldr	r3, [pc, #216]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d115      	bne.n	8003888 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0ea      	b.n	8003a36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d107      	bne.n	8003878 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003868:	4b30      	ldr	r3, [pc, #192]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0de      	b.n	8003a36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003878:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0d6      	b.n	8003a36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003888:	4b28      	ldr	r3, [pc, #160]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f023 0207 	bic.w	r2, r3, #7
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4925      	ldr	r1, [pc, #148]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 8003896:	4313      	orrs	r3, r2
 8003898:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fe fa4d 	bl	8001d38 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a2:	f7fe fa49 	bl	8001d38 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0be      	b.n	8003a36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d1eb      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d208      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f023 020f 	bic.w	r2, r3, #15
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	490e      	ldr	r1, [pc, #56]	; (800392c <HAL_RCC_ClockConfig+0x244>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_ClockConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d214      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_RCC_ClockConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 020f 	bic.w	r2, r3, #15
 800390e:	4906      	ldr	r1, [pc, #24]	; (8003928 <HAL_RCC_ClockConfig+0x240>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_RCC_ClockConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e086      	b.n	8003a36 <HAL_RCC_ClockConfig+0x34e>
 8003928:	52002000 	.word	0x52002000
 800392c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003948:	429a      	cmp	r2, r3
 800394a:	d208      	bcs.n	800395e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800394c:	4b3c      	ldr	r3, [pc, #240]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4939      	ldr	r1, [pc, #228]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 800395a:	4313      	orrs	r3, r2
 800395c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d010      	beq.n	800398c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003976:	429a      	cmp	r2, r3
 8003978:	d208      	bcs.n	800398c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800397a:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	492e      	ldr	r1, [pc, #184]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 8003988:	4313      	orrs	r3, r2
 800398a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d208      	bcs.n	80039ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039a8:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	4922      	ldr	r1, [pc, #136]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d010      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d208      	bcs.n	80039e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039d6:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4917      	ldr	r1, [pc, #92]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039e8:	f000 f834 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 80039ec:	4601      	mov	r1, r0
 80039ee:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <HAL_RCC_ClockConfig+0x35c>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa21 f303 	lsr.w	r3, r1, r3
 8003a04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <HAL_RCC_ClockConfig+0x358>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <HAL_RCC_ClockConfig+0x35c>)
 8003a10:	5cd3      	ldrb	r3, [r2, r3]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <HAL_RCC_ClockConfig+0x360>)
 8003a1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a20:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <HAL_RCC_ClockConfig+0x364>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_RCC_ClockConfig+0x368>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe f93a 	bl	8001ca4 <HAL_InitTick>
 8003a30:	4603      	mov	r3, r0
 8003a32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	58024400 	.word	0x58024400
 8003a44:	08009284 	.word	0x08009284
 8003a48:	20000004 	.word	0x20000004
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	20000008 	.word	0x20000008

08003a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5a:	4baf      	ldr	r3, [pc, #700]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a62:	2b18      	cmp	r3, #24
 8003a64:	f200 814e 	bhi.w	8003d04 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003ad5 	.word	0x08003ad5
 8003a74:	08003d05 	.word	0x08003d05
 8003a78:	08003d05 	.word	0x08003d05
 8003a7c:	08003d05 	.word	0x08003d05
 8003a80:	08003d05 	.word	0x08003d05
 8003a84:	08003d05 	.word	0x08003d05
 8003a88:	08003d05 	.word	0x08003d05
 8003a8c:	08003d05 	.word	0x08003d05
 8003a90:	08003afb 	.word	0x08003afb
 8003a94:	08003d05 	.word	0x08003d05
 8003a98:	08003d05 	.word	0x08003d05
 8003a9c:	08003d05 	.word	0x08003d05
 8003aa0:	08003d05 	.word	0x08003d05
 8003aa4:	08003d05 	.word	0x08003d05
 8003aa8:	08003d05 	.word	0x08003d05
 8003aac:	08003d05 	.word	0x08003d05
 8003ab0:	08003b01 	.word	0x08003b01
 8003ab4:	08003d05 	.word	0x08003d05
 8003ab8:	08003d05 	.word	0x08003d05
 8003abc:	08003d05 	.word	0x08003d05
 8003ac0:	08003d05 	.word	0x08003d05
 8003ac4:	08003d05 	.word	0x08003d05
 8003ac8:	08003d05 	.word	0x08003d05
 8003acc:	08003d05 	.word	0x08003d05
 8003ad0:	08003b07 	.word	0x08003b07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad4:	4b90      	ldr	r3, [pc, #576]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ae0:	4b8d      	ldr	r3, [pc, #564]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	08db      	lsrs	r3, r3, #3
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	4a8c      	ldr	r2, [pc, #560]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
 8003af0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003af2:	e10a      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003af4:	4b89      	ldr	r3, [pc, #548]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003af6:	61bb      	str	r3, [r7, #24]
    break;
 8003af8:	e107      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003afa:	4b89      	ldr	r3, [pc, #548]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003afc:	61bb      	str	r3, [r7, #24]
    break;
 8003afe:	e104      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003b00:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003b02:	61bb      	str	r3, [r7, #24]
    break;
 8003b04:	e101      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b06:	4b84      	ldr	r3, [pc, #528]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003b10:	4b81      	ldr	r3, [pc, #516]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b1c:	4b7e      	ldr	r3, [pc, #504]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003b26:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	08db      	lsrs	r3, r3, #3
 8003b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80da 	beq.w	8003cfe <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d05a      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d302      	bcc.n	8003b5a <HAL_RCC_GetSysClockFreq+0x106>
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d078      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003b58:	e099      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b5a:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d02d      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b66:	4b6c      	ldr	r3, [pc, #432]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	08db      	lsrs	r3, r3, #3
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b90:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003bc0:	e087      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bcc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003d2c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bdc:	ee07 3a90 	vmov	s15, r3
 8003be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c04:	e065      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c10:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003d30 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c18:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c20:	ee07 3a90 	vmov	s15, r3
 8003c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c28:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c2c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c48:	e043      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c54:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5c:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c70:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c8c:	e021      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c98:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003d30 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cd0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	0a5b      	lsrs	r3, r3, #9
 8003cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cdc:	3301      	adds	r3, #1
 8003cde:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf6:	ee17 3a90 	vmov	r3, s15
 8003cfa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003cfc:	e005      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
    break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003d06:	61bb      	str	r3, [r7, #24]
    break;
 8003d08:	bf00      	nop
  }

  return sysclockfreq;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3724      	adds	r7, #36	; 0x24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	03d09000 	.word	0x03d09000
 8003d20:	003d0900 	.word	0x003d0900
 8003d24:	017d7840 	.word	0x017d7840
 8003d28:	46000000 	.word	0x46000000
 8003d2c:	4c742400 	.word	0x4c742400
 8003d30:	4a742400 	.word	0x4a742400
 8003d34:	4bbebc20 	.word	0x4bbebc20

08003d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d3e:	f7ff fe89 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8003d42:	4601      	mov	r1, r0
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8003d50:	5cd3      	ldrb	r3, [r2, r3]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	fa21 f303 	lsr.w	r3, r1, r3
 8003d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8003d66:	5cd3      	ldrb	r3, [r2, r3]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d76:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	08009284 	.word	0x08009284
 8003d90:	20000004 	.word	0x20000004
 8003d94:	20000000 	.word	0x20000000

08003d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d9c:	f7ff ffcc 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003da0:	4601      	mov	r1, r0
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	58024400 	.word	0x58024400
 8003dc0:	08009284 	.word	0x08009284

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003dc8:	f7ff ffb6 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4a04      	ldr	r2, [pc, #16]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	58024400 	.word	0x58024400
 8003dec:	08009284 	.word	0x08009284

08003df0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df8:	2300      	movs	r3, #0
 8003dfa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d03d      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e14:	d013      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1a:	d802      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003e20:	e01f      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e26:	d013      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003e28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e2c:	d01c      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003e2e:	e018      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e30:	4baf      	ldr	r3, [pc, #700]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	4aae      	ldr	r2, [pc, #696]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e3c:	e015      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3304      	adds	r3, #4
 8003e42:	2102      	movs	r1, #2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 f96f 	bl	8005128 <RCCEx_PLL2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e4e:	e00c      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3324      	adds	r3, #36	; 0x24
 8003e54:	2102      	movs	r1, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fa18 	bl	800528c <RCCEx_PLL3_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
      break;
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d109      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e70:	4b9f      	ldr	r3, [pc, #636]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e7c:	499c      	ldr	r1, [pc, #624]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	650b      	str	r3, [r1, #80]	; 0x50
 8003e82:	e001      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d03d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d826      	bhi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003eb9 	.word	0x08003eb9
 8003ea8:	08003ec7 	.word	0x08003ec7
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003ef1 	.word	0x08003ef1
 8003eb4:	08003ef1 	.word	0x08003ef1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb8:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a8c      	ldr	r2, [pc, #560]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 f92b 	bl	8005128 <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ed6:	e00c      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3324      	adds	r3, #36	; 0x24
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f9d4 	bl	800528c <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ee8:	e003      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
      break;
 8003eee:	e000      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef8:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efc:	f023 0207 	bic.w	r2, r3, #7
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	497a      	ldr	r1, [pc, #488]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	650b      	str	r3, [r1, #80]	; 0x50
 8003f0a:	e001      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d03e      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	d01c      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f24:	2b80      	cmp	r3, #128	; 0x80
 8003f26:	d804      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d00d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f30:	e01e      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003f32:	2bc0      	cmp	r3, #192	; 0xc0
 8003f34:	d01f      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3a:	d01e      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f3c:	e018      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f3e:	4b6c      	ldr	r3, [pc, #432]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	4a6b      	ldr	r2, [pc, #428]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f4a:	e017      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 f8e8 	bl	8005128 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f5c:	e00e      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3324      	adds	r3, #36	; 0x24
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 f991 	bl	800528c <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f6e:	e005      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
      break;
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f82:	4b5b      	ldr	r3, [pc, #364]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	4958      	ldr	r1, [pc, #352]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	650b      	str	r3, [r1, #80]	; 0x50
 8003f94:	e001      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
 8003f98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d044      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb0:	d01f      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb6:	d805      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003fc2:	e01f      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003fc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003fc8:	d01f      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fce:	d01e      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003fd0:	e018      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	4a46      	ldr	r2, [pc, #280]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fde:	e017      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 f89e 	bl	8005128 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ff0:	e00e      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	; 0x24
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 f947 	bl	800528c <RCCEx_PLL3_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004002:	e005      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
      break;
 8004008:	e002      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800400a:	bf00      	nop
 800400c:	e000      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800400e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004024:	4932      	ldr	r1, [pc, #200]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004026:	4313      	orrs	r3, r2
 8004028:	658b      	str	r3, [r1, #88]	; 0x58
 800402a:	e001      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004038:	2b00      	cmp	r3, #0
 800403a:	d044      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004046:	d01f      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800404c:	d805      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004052:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004056:	d00e      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004058:	e01f      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800405a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800405e:	d01f      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004064:	d01e      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004066:	e018      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800406e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004074:	e017      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f001 f853 	bl	8005128 <RCCEx_PLL2_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004086:	e00e      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3324      	adds	r3, #36	; 0x24
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f001 f8fc 	bl	800528c <RCCEx_PLL3_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004098:	e005      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
      break;
 800409e:	e002      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80040a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040ba:	490d      	ldr	r1, [pc, #52]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	658b      	str	r3, [r1, #88]	; 0x58
 80040c0:	e001      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d035      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d00c      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d802      	bhi.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01b      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80040e2:	e017      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d00c      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80040e8:	2b30      	cmp	r3, #48	; 0x30
 80040ea:	d018      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80040ec:	e012      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80040ee:	bf00      	nop
 80040f0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f4:	4baf      	ldr	r3, [pc, #700]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	4aae      	ldr	r2, [pc, #696]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004100:	e00e      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f80d 	bl	8005128 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004112:	e005      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75fb      	strb	r3, [r7, #23]
      break;
 8004118:	e002      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800411e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004126:	4ba3      	ldr	r3, [pc, #652]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004132:	49a0      	ldr	r1, [pc, #640]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004138:	e001      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d042      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	d01f      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004158:	d805      	bhi.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d00e      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004164:	e01f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004166:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800416a:	d01f      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800416c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004170:	d01e      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004172:	e018      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004174:	4b8f      	ldr	r3, [pc, #572]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4a8e      	ldr	r2, [pc, #568]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800417a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004180:	e017      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f000 ffcd 	bl	8005128 <RCCEx_PLL2_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004192:	e00e      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3324      	adds	r3, #36	; 0x24
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f001 f876 	bl	800528c <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041a4:	e005      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
      break;
 80041aa:	e002      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80041b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80041b8:	4b7e      	ldr	r3, [pc, #504]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	497b      	ldr	r1, [pc, #492]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	650b      	str	r3, [r1, #80]	; 0x50
 80041ca:	e001      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d042      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e4:	d01b      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80041e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ea:	d805      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d022      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d00a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80041f6:	e01b      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80041f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041fc:	d01d      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80041fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004202:	d01c      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004204:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004208:	d01b      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800420a:	e011      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	2101      	movs	r1, #1
 8004212:	4618      	mov	r0, r3
 8004214:	f000 ff88 	bl	8005128 <RCCEx_PLL2_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800421c:	e012      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3324      	adds	r3, #36	; 0x24
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f001 f831 	bl	800528c <RCCEx_PLL3_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800422e:	e009      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
      break;
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004236:	bf00      	nop
 8004238:	e004      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800423a:	bf00      	nop
 800423c:	e002      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800424a:	4b5a      	ldr	r3, [pc, #360]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	4957      	ldr	r1, [pc, #348]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004258:	4313      	orrs	r3, r2
 800425a:	650b      	str	r3, [r1, #80]	; 0x50
 800425c:	e001      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d044      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d01b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800427a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800427e:	d805      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d022      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800428a:	e01b      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d01d      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004296:	d01c      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004298:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800429c:	d01b      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800429e:	e011      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 ff3e 	bl	8005128 <RCCEx_PLL2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80042b0:	e012      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3324      	adds	r3, #36	; 0x24
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 ffe7 	bl	800528c <RCCEx_PLL3_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80042c2:	e009      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
      break;
 80042c8:	e006      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80042ca:	bf00      	nop
 80042cc:	e004      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80042ce:	bf00      	nop
 80042d0:	e002      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80042d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042de:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042ec:	4931      	ldr	r1, [pc, #196]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	658b      	str	r3, [r1, #88]	; 0x58
 80042f2:	e001      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d02d      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800430c:	d005      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800430e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004312:	d009      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004318:	e00f      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431a:	4b26      	ldr	r3, [pc, #152]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a25      	ldr	r2, [pc, #148]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004324:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004326:	e00c      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fefa 	bl	8005128 <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004338:	e003      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
      break;
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004348:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800434a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004354:	4917      	ldr	r1, [pc, #92]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	650b      	str	r3, [r1, #80]	; 0x50
 800435a:	e001      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d035      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	2b03      	cmp	r3, #3
 8004372:	d81b      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	080043b9 	.word	0x080043b9
 8004380:	0800438d 	.word	0x0800438d
 8004384:	0800439b 	.word	0x0800439b
 8004388:	080043b9 	.word	0x080043b9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004398:	e00f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fec1 	bl	8005128 <RCCEx_PLL2_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80043aa:	e006      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	75fb      	strb	r3, [r7, #23]
      break;
 80043b0:	e003      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
      break;
 80043b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80043c0:	4bba      	ldr	r3, [pc, #744]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	f023 0203 	bic.w	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	49b7      	ldr	r1, [pc, #732]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8086 	beq.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e6:	4bb2      	ldr	r3, [pc, #712]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4ab1      	ldr	r2, [pc, #708]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043f2:	f7fd fca1 	bl	8001d38 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f8:	e009      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fd fc9d 	bl	8001d38 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d902      	bls.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	75fb      	strb	r3, [r7, #23]
        break;
 800440c:	e005      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800440e:	4ba8      	ldr	r3, [pc, #672]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ef      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d166      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004420:	4ba2      	ldr	r3, [pc, #648]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800442a:	4053      	eors	r3, r2
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004434:	4b9d      	ldr	r3, [pc, #628]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b9b      	ldr	r3, [pc, #620]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a9a      	ldr	r2, [pc, #616]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800444a:	4b98      	ldr	r3, [pc, #608]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a97      	ldr	r2, [pc, #604]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004456:	4a95      	ldr	r2, [pc, #596]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004466:	d115      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fd fc66 	bl	8001d38 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800446e:	e00b      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fd fc62 	bl	8001d38 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d902      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	75fb      	strb	r3, [r7, #23]
            break;
 8004486:	e005      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004488:	4b88      	ldr	r3, [pc, #544]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ed      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d126      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a8:	d10d      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80044aa:	4b80      	ldr	r3, [pc, #512]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044b8:	0919      	lsrs	r1, r3, #4
 80044ba:	4b7e      	ldr	r3, [pc, #504]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80044bc:	400b      	ands	r3, r1
 80044be:	497b      	ldr	r1, [pc, #492]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	610b      	str	r3, [r1, #16]
 80044c4:	e005      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80044c6:	4b79      	ldr	r3, [pc, #484]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	4a78      	ldr	r2, [pc, #480]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044d0:	6113      	str	r3, [r2, #16]
 80044d2:	4b76      	ldr	r3, [pc, #472]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e0:	4972      	ldr	r1, [pc, #456]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	670b      	str	r3, [r1, #112]	; 0x70
 80044e6:	e004      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	75bb      	strb	r3, [r7, #22]
 80044ec:	e001      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d07d      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004502:	2b28      	cmp	r3, #40	; 0x28
 8004504:	d866      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	080045db 	.word	0x080045db
 8004510:	080045d5 	.word	0x080045d5
 8004514:	080045d5 	.word	0x080045d5
 8004518:	080045d5 	.word	0x080045d5
 800451c:	080045d5 	.word	0x080045d5
 8004520:	080045d5 	.word	0x080045d5
 8004524:	080045d5 	.word	0x080045d5
 8004528:	080045d5 	.word	0x080045d5
 800452c:	080045b1 	.word	0x080045b1
 8004530:	080045d5 	.word	0x080045d5
 8004534:	080045d5 	.word	0x080045d5
 8004538:	080045d5 	.word	0x080045d5
 800453c:	080045d5 	.word	0x080045d5
 8004540:	080045d5 	.word	0x080045d5
 8004544:	080045d5 	.word	0x080045d5
 8004548:	080045d5 	.word	0x080045d5
 800454c:	080045c3 	.word	0x080045c3
 8004550:	080045d5 	.word	0x080045d5
 8004554:	080045d5 	.word	0x080045d5
 8004558:	080045d5 	.word	0x080045d5
 800455c:	080045d5 	.word	0x080045d5
 8004560:	080045d5 	.word	0x080045d5
 8004564:	080045d5 	.word	0x080045d5
 8004568:	080045d5 	.word	0x080045d5
 800456c:	080045db 	.word	0x080045db
 8004570:	080045d5 	.word	0x080045d5
 8004574:	080045d5 	.word	0x080045d5
 8004578:	080045d5 	.word	0x080045d5
 800457c:	080045d5 	.word	0x080045d5
 8004580:	080045d5 	.word	0x080045d5
 8004584:	080045d5 	.word	0x080045d5
 8004588:	080045d5 	.word	0x080045d5
 800458c:	080045db 	.word	0x080045db
 8004590:	080045d5 	.word	0x080045d5
 8004594:	080045d5 	.word	0x080045d5
 8004598:	080045d5 	.word	0x080045d5
 800459c:	080045d5 	.word	0x080045d5
 80045a0:	080045d5 	.word	0x080045d5
 80045a4:	080045d5 	.word	0x080045d5
 80045a8:	080045d5 	.word	0x080045d5
 80045ac:	080045db 	.word	0x080045db
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fdb6 	bl	8005128 <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80045c0:	e00c      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3324      	adds	r3, #36	; 0x24
 80045c6:	2101      	movs	r1, #1
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fe5f 	bl	800528c <RCCEx_PLL3_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	75fb      	strb	r3, [r7, #23]
      break;
 80045d8:	e000      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80045da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045e2:	4b32      	ldr	r3, [pc, #200]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ee:	492f      	ldr	r1, [pc, #188]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	654b      	str	r3, [r1, #84]	; 0x54
 80045f4:	e001      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d037      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460a:	2b05      	cmp	r3, #5
 800460c:	d820      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004657 	.word	0x08004657
 8004618:	0800462d 	.word	0x0800462d
 800461c:	0800463f 	.word	0x0800463f
 8004620:	08004657 	.word	0x08004657
 8004624:	08004657 	.word	0x08004657
 8004628:	08004657 	.word	0x08004657
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fd78 	bl	8005128 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800463c:	e00c      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3324      	adds	r3, #36	; 0x24
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fe21 	bl	800528c <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800464e:	e003      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
      break;
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f023 0207 	bic.w	r2, r3, #7
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466a:	4910      	ldr	r1, [pc, #64]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800466c:	4313      	orrs	r3, r2
 800466e:	654b      	str	r3, [r1, #84]	; 0x54
 8004670:	e001      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d040      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	2b05      	cmp	r3, #5
 800468a:	d827      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046e3 	.word	0x080046e3
 8004698:	080046b9 	.word	0x080046b9
 800469c:	080046cb 	.word	0x080046cb
 80046a0:	080046e3 	.word	0x080046e3
 80046a4:	080046e3 	.word	0x080046e3
 80046a8:	080046e3 	.word	0x080046e3
 80046ac:	58024400 	.word	0x58024400
 80046b0:	58024800 	.word	0x58024800
 80046b4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	2101      	movs	r1, #1
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fd32 	bl	8005128 <RCCEx_PLL2_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046c8:	e00c      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3324      	adds	r3, #36	; 0x24
 80046ce:	2101      	movs	r1, #1
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fddb 	bl	800528c <RCCEx_PLL3_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046da:	e003      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
      break;
 80046e0:	e000      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80046e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10a      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ea:	4bb2      	ldr	r3, [pc, #712]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	f023 0207 	bic.w	r2, r3, #7
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	49ae      	ldr	r1, [pc, #696]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	658b      	str	r3, [r1, #88]	; 0x58
 80046fe:	e001      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d044      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800471a:	d01b      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800471c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004720:	d805      	bhi.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d022      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800472c:	e01b      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800472e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004732:	d01d      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004738:	d01c      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800473a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800473e:	d01b      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004740:	e011      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fced 	bl	8005128 <RCCEx_PLL2_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004752:	e012      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3324      	adds	r3, #36	; 0x24
 8004758:	2102      	movs	r1, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fd96 	bl	800528c <RCCEx_PLL3_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004764:	e009      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
      break;
 800476a:	e006      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800476c:	bf00      	nop
 800476e:	e004      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004770:	bf00      	nop
 8004772:	e002      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004780:	4b8c      	ldr	r3, [pc, #560]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478e:	4989      	ldr	r1, [pc, #548]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004790:	4313      	orrs	r3, r2
 8004792:	654b      	str	r3, [r1, #84]	; 0x54
 8004794:	e001      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d044      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b0:	d01b      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80047b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b6:	d805      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d022      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80047c2:	e01b      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c8:	d01d      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80047ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047ce:	d01c      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80047d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047d4:	d01b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80047d6:	e011      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fca2 	bl	8005128 <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047e8:	e012      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3324      	adds	r3, #36	; 0x24
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fd4b 	bl	800528c <RCCEx_PLL3_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047fa:	e009      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004802:	bf00      	nop
 8004804:	e004      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800480e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004816:	4b67      	ldr	r3, [pc, #412]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004824:	4963      	ldr	r1, [pc, #396]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	658b      	str	r3, [r1, #88]	; 0x58
 800482a:	e001      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482c:	7dfb      	ldrb	r3, [r7, #23]
 800482e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d044      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004846:	d01b      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484c:	d805      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d022      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004858:	e01b      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800485a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485e:	d01d      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004860:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004864:	d01c      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004866:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800486a:	d01b      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800486c:	e011      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fc57 	bl	8005128 <RCCEx_PLL2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800487e:	e012      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3324      	adds	r3, #36	; 0x24
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd00 	bl	800528c <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004890:	e009      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	75fb      	strb	r3, [r7, #23]
      break;
 8004896:	e006      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004898:	bf00      	nop
 800489a:	e004      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800489c:	bf00      	nop
 800489e:	e002      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80048a0:	bf00      	nop
 80048a2:	e000      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80048a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048ac:	4b41      	ldr	r3, [pc, #260]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ba:	493e      	ldr	r1, [pc, #248]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	658b      	str	r3, [r1, #88]	; 0x58
 80048c0:	e001      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048dc:	d10a      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3324      	adds	r3, #36	; 0x24
 80048e2:	2102      	movs	r1, #2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fcd1 	bl	800528c <RCCEx_PLL3_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048f4:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004902:	492c      	ldr	r1, [pc, #176]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004904:	4313      	orrs	r3, r2
 8004906:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491e:	d10a      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3324      	adds	r3, #36	; 0x24
 8004924:	2102      	movs	r1, #2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fcb0 	bl	800528c <RCCEx_PLL3_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004936:	4b1f      	ldr	r3, [pc, #124]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004944:	491b      	ldr	r1, [pc, #108]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d032      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d00d      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004966:	d016      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004968:	2b00      	cmp	r3, #0
 800496a:	d111      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fbd8 	bl	8005128 <RCCEx_PLL2_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800497c:	e00c      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3324      	adds	r3, #36	; 0x24
 8004982:	2102      	movs	r1, #2
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fc81 	bl	800528c <RCCEx_PLL3_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
      break;
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10c      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049ac:	4901      	ldr	r1, [pc, #4]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	658b      	str	r3, [r1, #88]	; 0x58
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80049b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d2:	d00c      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80049d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049d8:	d015      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049de:	d10f      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e0:	4b79      	ldr	r3, [pc, #484]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a78      	ldr	r2, [pc, #480]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80049ec:	e00c      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3324      	adds	r3, #36	; 0x24
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fc49 	bl	800528c <RCCEx_PLL3_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80049fe:	e003      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
      break;
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a0e:	4b6e      	ldr	r3, [pc, #440]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1c:	496a      	ldr	r1, [pc, #424]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	654b      	str	r3, [r1, #84]	; 0x54
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d029      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d007      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004a42:	e00f      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a44:	4b60      	ldr	r3, [pc, #384]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	4a5f      	ldr	r2, [pc, #380]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a50:	e00b      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2102      	movs	r1, #2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fb65 	bl	8005128 <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
      break;
 8004a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a70:	4b55      	ldr	r3, [pc, #340]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7c:	4952      	ldr	r1, [pc, #328]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a82:	e001      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	2102      	movs	r1, #2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fbf6 	bl	800528c <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02f      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abe:	d00c      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac4:	d802      	bhi.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d011      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004aca:	e00d      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad0:	d00f      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad6:	d00e      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004ad8:	e006      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004ae6:	e007      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	75fb      	strb	r3, [r7, #23]
      break;
 8004aec:	e004      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004afe:	4b32      	ldr	r3, [pc, #200]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0a:	492f      	ldr	r1, [pc, #188]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	654b      	str	r3, [r1, #84]	; 0x54
 8004b10:	e001      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b22:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	4926      	ldr	r1, [pc, #152]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d009      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b40:	4b21      	ldr	r3, [pc, #132]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b4e:	491e      	ldr	r1, [pc, #120]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b6c:	4916      	ldr	r1, [pc, #88]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4a11      	ldr	r2, [pc, #68]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b88:	6113      	str	r3, [r2, #16]
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b94:	490c      	ldr	r1, [pc, #48]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da08      	bge.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bae:	4906      	ldr	r1, [pc, #24]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004bb4:	7dbb      	ldrb	r3, [r7, #22]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	58024400 	.word	0x58024400

08004bcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bd0:	f7ff f8b2 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4601      	mov	r1, r0
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	08009284 	.word	0x08009284

08004bf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c00:	4b9d      	ldr	r3, [pc, #628]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c0a:	4b9b      	ldr	r3, [pc, #620]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	0b1b      	lsrs	r3, r3, #12
 8004c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c16:	4b98      	ldr	r3, [pc, #608]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c22:	4b95      	ldr	r3, [pc, #596]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	08db      	lsrs	r3, r3, #3
 8004c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 810a 	beq.w	8004e5a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d05a      	beq.n	8004d02 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d302      	bcc.n	8004c56 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d078      	beq.n	8004d46 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004c54:	e099      	b.n	8004d8a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c56:	4b88      	ldr	r3, [pc, #544]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d02d      	beq.n	8004cbe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c62:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	08db      	lsrs	r3, r3, #3
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	4a83      	ldr	r2, [pc, #524]	; (8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c72:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	ee07 3a90 	vmov	s15, r3
 8004c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8c:	4b7a      	ldr	r3, [pc, #488]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004cbc:	e087      	b.n	8004dce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004ccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd0:	4b69      	ldr	r3, [pc, #420]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce0:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d00:	e065      	b.n	8004dce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	ee07 3a90 	vmov	s15, r3
 8004d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d14:	4b58      	ldr	r3, [pc, #352]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d24:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d28:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d44:	e043      	b.n	8004dce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d50:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004e8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d58:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d68:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d88:	e021      	b.n	8004dce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dac:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004e80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004db4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dcc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004dce:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	0a5b      	lsrs	r3, r3, #9
 8004dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004de4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df4:	ee17 2a90 	vmov	r2, s15
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004dfc:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e22:	ee17 2a90 	vmov	r2, s15
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	0e1b      	lsrs	r3, r3, #24
 8004e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e50:	ee17 2a90 	vmov	r2, s15
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e58:	e008      	b.n	8004e6c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
}
 8004e6c:	bf00      	nop
 8004e6e:	3724      	adds	r7, #36	; 0x24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	58024400 	.word	0x58024400
 8004e7c:	03d09000 	.word	0x03d09000
 8004e80:	46000000 	.word	0x46000000
 8004e84:	4c742400 	.word	0x4c742400
 8004e88:	4a742400 	.word	0x4a742400
 8004e8c:	4bbebc20 	.word	0x4bbebc20

08004e90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e98:	4b9d      	ldr	r3, [pc, #628]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ea2:	4b9b      	ldr	r3, [pc, #620]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	0d1b      	lsrs	r3, r3, #20
 8004ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004eae:	4b98      	ldr	r3, [pc, #608]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004eba:	4b95      	ldr	r3, [pc, #596]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 810a 	beq.w	80050f2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d05a      	beq.n	8004f9a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d302      	bcc.n	8004eee <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d078      	beq.n	8004fde <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004eec:	e099      	b.n	8005022 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eee:	4b88      	ldr	r3, [pc, #544]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d02d      	beq.n	8004f56 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004efa:	4b85      	ldr	r3, [pc, #532]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	08db      	lsrs	r3, r3, #3
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	4a83      	ldr	r2, [pc, #524]	; (8005114 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f24:	4b7a      	ldr	r3, [pc, #488]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f54:	e087      	b.n	8005066 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800511c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f68:	4b69      	ldr	r3, [pc, #420]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f98:	e065      	b.n	8005066 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fac:	4b58      	ldr	r3, [pc, #352]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fdc:	e043      	b.n	8005066 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005124 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff0:	4b47      	ldr	r3, [pc, #284]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005000:	ed97 6a03 	vldr	s12, [r7, #12]
 8005004:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005020:	e021      	b.n	8005066 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005034:	4b36      	ldr	r3, [pc, #216]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005044:	ed97 6a03 	vldr	s12, [r7, #12]
 8005048:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005118 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800504c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005060:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005064:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005066:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	0a5b      	lsrs	r3, r3, #9
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	ee07 3a90 	vmov	s15, r3
 8005074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800507c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005080:	edd7 6a07 	vldr	s13, [r7, #28]
 8005084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508c:	ee17 2a90 	vmov	r2, s15
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005094:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ba:	ee17 2a90 	vmov	r2, s15
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	0e1b      	lsrs	r3, r3, #24
 80050c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050cc:	ee07 3a90 	vmov	s15, r3
 80050d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e8:	ee17 2a90 	vmov	r2, s15
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	3724      	adds	r7, #36	; 0x24
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	58024400 	.word	0x58024400
 8005114:	03d09000 	.word	0x03d09000
 8005118:	46000000 	.word	0x46000000
 800511c:	4c742400 	.word	0x4c742400
 8005120:	4a742400 	.word	0x4a742400
 8005124:	4bbebc20 	.word	0x4bbebc20

08005128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005136:	4b53      	ldr	r3, [pc, #332]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d101      	bne.n	8005146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e099      	b.n	800527a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005146:	4b4f      	ldr	r3, [pc, #316]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4e      	ldr	r2, [pc, #312]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800514c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005152:	f7fc fdf1 	bl	8001d38 <HAL_GetTick>
 8005156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005158:	e008      	b.n	800516c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800515a:	f7fc fded 	bl	8001d38 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e086      	b.n	800527a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800516c:	4b45      	ldr	r3, [pc, #276]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005178:	4b42      	ldr	r3, [pc, #264]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	031b      	lsls	r3, r3, #12
 8005186:	493f      	ldr	r1, [pc, #252]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	628b      	str	r3, [r1, #40]	; 0x28
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	3b01      	subs	r3, #1
 8005192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	3b01      	subs	r3, #1
 800519c:	025b      	lsls	r3, r3, #9
 800519e:	b29b      	uxth	r3, r3
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	061b      	lsls	r3, r3, #24
 80051b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051bc:	4931      	ldr	r1, [pc, #196]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	492d      	ldr	r1, [pc, #180]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051d4:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	f023 0220 	bic.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	4928      	ldr	r1, [pc, #160]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	4a26      	ldr	r2, [pc, #152]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	f023 0310 	bic.w	r3, r3, #16
 80051f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 80051f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <RCCEx_PLL2_Config+0x160>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	69d2      	ldr	r2, [r2, #28]
 80051fe:	00d2      	lsls	r2, r2, #3
 8005200:	4920      	ldr	r1, [pc, #128]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005206:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800520c:	f043 0310 	orr.w	r3, r3, #16
 8005210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005218:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	4a19      	ldr	r2, [pc, #100]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800521e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005222:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005224:	e00f      	b.n	8005246 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d106      	bne.n	800523a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800522c:	4b15      	ldr	r3, [pc, #84]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a14      	ldr	r2, [pc, #80]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005236:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005238:	e005      	b.n	8005246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a11      	ldr	r2, [pc, #68]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800524c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005252:	f7fc fd71 	bl	8001d38 <HAL_GetTick>
 8005256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005258:	e008      	b.n	800526c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800525a:	f7fc fd6d 	bl	8001d38 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <RCCEx_PLL2_Config+0x15c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400
 8005288:	ffff0007 	.word	0xffff0007

0800528c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800529a:	4b53      	ldr	r3, [pc, #332]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d101      	bne.n	80052aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e099      	b.n	80053de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052aa:	4b4f      	ldr	r3, [pc, #316]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4e      	ldr	r2, [pc, #312]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b6:	f7fc fd3f 	bl	8001d38 <HAL_GetTick>
 80052ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052be:	f7fc fd3b 	bl	8001d38 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e086      	b.n	80053de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052d0:	4b45      	ldr	r3, [pc, #276]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052dc:	4b42      	ldr	r3, [pc, #264]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	051b      	lsls	r3, r3, #20
 80052ea:	493f      	ldr	r1, [pc, #252]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	628b      	str	r3, [r1, #40]	; 0x28
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	3b01      	subs	r3, #1
 8005300:	025b      	lsls	r3, r3, #9
 8005302:	b29b      	uxth	r3, r3
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	3b01      	subs	r3, #1
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	3b01      	subs	r3, #1
 800531a:	061b      	lsls	r3, r3, #24
 800531c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005320:	4931      	ldr	r1, [pc, #196]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005326:	4b30      	ldr	r3, [pc, #192]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	492d      	ldr	r1, [pc, #180]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	4928      	ldr	r1, [pc, #160]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800534a:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005356:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <RCCEx_PLL3_Config+0x160>)
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	69d2      	ldr	r2, [r2, #28]
 8005362:	00d2      	lsls	r2, r2, #3
 8005364:	4920      	ldr	r1, [pc, #128]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005366:	4313      	orrs	r3, r2
 8005368:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800536a:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800537c:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005388:	e00f      	b.n	80053aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005390:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 8005396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800539a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800539c:	e005      	b.n	80053aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800539e:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a0e      	ldr	r2, [pc, #56]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b6:	f7fc fcbf 	bl	8001d38 <HAL_GetTick>
 80053ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053bc:	e008      	b.n	80053d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80053be:	f7fc fcbb 	bl	8001d38 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e006      	b.n	80053de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <RCCEx_PLL3_Config+0x15c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	58024400 	.word	0x58024400
 80053ec:	ffff0007 	.word	0xffff0007

080053f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e042      	b.n	8005488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fc fb31 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2224      	movs	r2, #36	; 0x24
 800541e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8c2 	bl	80055bc <UART_SetConfig>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e022      	b.n	8005488 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fe66 	bl	800611c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800545e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800546e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 feed 	bl	8006260 <UART_CheckIdleState>
 8005486:	4603      	mov	r3, r0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	f040 8083 	bne.w	80055b2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_UART_Transmit+0x28>
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e07b      	b.n	80055b4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Transmit+0x3a>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e074      	b.n	80055b4 <HAL_UART_Transmit+0x124>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2221      	movs	r2, #33	; 0x21
 80054de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054e2:	f7fc fc29 	bl	8001d38 <HAL_GetTick>
 80054e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005500:	d108      	bne.n	8005514 <HAL_UART_Transmit+0x84>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e003      	b.n	800551c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005518:	2300      	movs	r3, #0
 800551a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005524:	e02c      	b.n	8005580 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2200      	movs	r2, #0
 800552e:	2180      	movs	r1, #128	; 0x80
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fedd 	bl	80062f0 <UART_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e039      	b.n	80055b4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005554:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	3302      	adds	r3, #2
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	e007      	b.n	800556e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	3301      	adds	r3, #1
 800556c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1cc      	bne.n	8005526 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2200      	movs	r2, #0
 8005594:	2140      	movs	r1, #64	; 0x40
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 feaa 	bl	80062f0 <UART_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e006      	b.n	80055b4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80055c0:	b08e      	sub	sp, #56	; 0x38
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ea:	4313      	orrs	r3, r2
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4bc1      	ldr	r3, [pc, #772]	; (80058fc <UART_SetConfig+0x340>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055fe:	430b      	orrs	r3, r1
 8005600:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4ab7      	ldr	r2, [pc, #732]	; (8005900 <UART_SetConfig+0x344>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562e:	4313      	orrs	r3, r2
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	4bb2      	ldr	r3, [pc, #712]	; (8005904 <UART_SetConfig+0x348>)
 800563a:	4013      	ands	r3, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005642:	430b      	orrs	r3, r1
 8005644:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	f023 010f 	bic.w	r1, r3, #15
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4aa9      	ldr	r2, [pc, #676]	; (8005908 <UART_SetConfig+0x34c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d177      	bne.n	8005756 <UART_SetConfig+0x19a>
 8005666:	4ba9      	ldr	r3, [pc, #676]	; (800590c <UART_SetConfig+0x350>)
 8005668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800566e:	2b28      	cmp	r3, #40	; 0x28
 8005670:	d86c      	bhi.n	800574c <UART_SetConfig+0x190>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <UART_SetConfig+0xbc>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	0800571d 	.word	0x0800571d
 800567c:	0800574d 	.word	0x0800574d
 8005680:	0800574d 	.word	0x0800574d
 8005684:	0800574d 	.word	0x0800574d
 8005688:	0800574d 	.word	0x0800574d
 800568c:	0800574d 	.word	0x0800574d
 8005690:	0800574d 	.word	0x0800574d
 8005694:	0800574d 	.word	0x0800574d
 8005698:	08005725 	.word	0x08005725
 800569c:	0800574d 	.word	0x0800574d
 80056a0:	0800574d 	.word	0x0800574d
 80056a4:	0800574d 	.word	0x0800574d
 80056a8:	0800574d 	.word	0x0800574d
 80056ac:	0800574d 	.word	0x0800574d
 80056b0:	0800574d 	.word	0x0800574d
 80056b4:	0800574d 	.word	0x0800574d
 80056b8:	0800572d 	.word	0x0800572d
 80056bc:	0800574d 	.word	0x0800574d
 80056c0:	0800574d 	.word	0x0800574d
 80056c4:	0800574d 	.word	0x0800574d
 80056c8:	0800574d 	.word	0x0800574d
 80056cc:	0800574d 	.word	0x0800574d
 80056d0:	0800574d 	.word	0x0800574d
 80056d4:	0800574d 	.word	0x0800574d
 80056d8:	08005735 	.word	0x08005735
 80056dc:	0800574d 	.word	0x0800574d
 80056e0:	0800574d 	.word	0x0800574d
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	0800574d 	.word	0x0800574d
 80056ec:	0800574d 	.word	0x0800574d
 80056f0:	0800574d 	.word	0x0800574d
 80056f4:	0800574d 	.word	0x0800574d
 80056f8:	0800573d 	.word	0x0800573d
 80056fc:	0800574d 	.word	0x0800574d
 8005700:	0800574d 	.word	0x0800574d
 8005704:	0800574d 	.word	0x0800574d
 8005708:	0800574d 	.word	0x0800574d
 800570c:	0800574d 	.word	0x0800574d
 8005710:	0800574d 	.word	0x0800574d
 8005714:	0800574d 	.word	0x0800574d
 8005718:	08005745 	.word	0x08005745
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005722:	e233      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572a:	e22f      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005732:	e22b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573a:	e227      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800573c:	2320      	movs	r3, #32
 800573e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005742:	e223      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574a:	e21f      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005752:	bf00      	nop
 8005754:	e21a      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a6d      	ldr	r2, [pc, #436]	; (8005910 <UART_SetConfig+0x354>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d132      	bne.n	80057c6 <UART_SetConfig+0x20a>
 8005760:	4b6a      	ldr	r3, [pc, #424]	; (800590c <UART_SetConfig+0x350>)
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	2b05      	cmp	r3, #5
 800576a:	d827      	bhi.n	80057bc <UART_SetConfig+0x200>
 800576c:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0x1b8>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	0800578d 	.word	0x0800578d
 8005778:	08005795 	.word	0x08005795
 800577c:	0800579d 	.word	0x0800579d
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005792:	e1fb      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005794:	2304      	movs	r3, #4
 8005796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579a:	e1f7      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800579c:	2308      	movs	r3, #8
 800579e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a2:	e1f3      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80057a4:	2310      	movs	r3, #16
 80057a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057aa:	e1ef      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80057ac:	2320      	movs	r3, #32
 80057ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b2:	e1eb      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80057b4:	2340      	movs	r3, #64	; 0x40
 80057b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ba:	e1e7      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c2:	bf00      	nop
 80057c4:	e1e2      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a52      	ldr	r2, [pc, #328]	; (8005914 <UART_SetConfig+0x358>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d132      	bne.n	8005836 <UART_SetConfig+0x27a>
 80057d0:	4b4e      	ldr	r3, [pc, #312]	; (800590c <UART_SetConfig+0x350>)
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	2b05      	cmp	r3, #5
 80057da:	d827      	bhi.n	800582c <UART_SetConfig+0x270>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <UART_SetConfig+0x228>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057fd 	.word	0x080057fd
 80057e8:	08005805 	.word	0x08005805
 80057ec:	0800580d 	.word	0x0800580d
 80057f0:	08005815 	.word	0x08005815
 80057f4:	0800581d 	.word	0x0800581d
 80057f8:	08005825 	.word	0x08005825
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005802:	e1c3      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005804:	2304      	movs	r3, #4
 8005806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580a:	e1bf      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800580c:	2308      	movs	r3, #8
 800580e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005812:	e1bb      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005814:	2310      	movs	r3, #16
 8005816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581a:	e1b7      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800581c:	2320      	movs	r3, #32
 800581e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005822:	e1b3      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005824:	2340      	movs	r3, #64	; 0x40
 8005826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800582a:	e1af      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800582c:	2380      	movs	r3, #128	; 0x80
 800582e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005832:	bf00      	nop
 8005834:	e1aa      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a37      	ldr	r2, [pc, #220]	; (8005918 <UART_SetConfig+0x35c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d132      	bne.n	80058a6 <UART_SetConfig+0x2ea>
 8005840:	4b32      	ldr	r3, [pc, #200]	; (800590c <UART_SetConfig+0x350>)
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	2b05      	cmp	r3, #5
 800584a:	d827      	bhi.n	800589c <UART_SetConfig+0x2e0>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x298>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	0800586d 	.word	0x0800586d
 8005858:	08005875 	.word	0x08005875
 800585c:	0800587d 	.word	0x0800587d
 8005860:	08005885 	.word	0x08005885
 8005864:	0800588d 	.word	0x0800588d
 8005868:	08005895 	.word	0x08005895
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005872:	e18b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005874:	2304      	movs	r3, #4
 8005876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587a:	e187      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800587c:	2308      	movs	r3, #8
 800587e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005882:	e183      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005884:	2310      	movs	r3, #16
 8005886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588a:	e17f      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800588c:	2320      	movs	r3, #32
 800588e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005892:	e17b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589a:	e177      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a2:	bf00      	nop
 80058a4:	e172      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <UART_SetConfig+0x360>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d144      	bne.n	800593a <UART_SetConfig+0x37e>
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <UART_SetConfig+0x350>)
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	2b05      	cmp	r3, #5
 80058ba:	d839      	bhi.n	8005930 <UART_SetConfig+0x374>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x308>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058dd 	.word	0x080058dd
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	080058ed 	.word	0x080058ed
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	08005921 	.word	0x08005921
 80058d8:	08005929 	.word	0x08005929
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e2:	e153      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e14f      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e14b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e147      	b.n	8005b8c <UART_SetConfig+0x5d0>
 80058fc:	cfff69f3 	.word	0xcfff69f3
 8005900:	58000c00 	.word	0x58000c00
 8005904:	11fff4ff 	.word	0x11fff4ff
 8005908:	40011000 	.word	0x40011000
 800590c:	58024400 	.word	0x58024400
 8005910:	40004400 	.word	0x40004400
 8005914:	40004800 	.word	0x40004800
 8005918:	40004c00 	.word	0x40004c00
 800591c:	40005000 	.word	0x40005000
 8005920:	2320      	movs	r3, #32
 8005922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005926:	e131      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005928:	2340      	movs	r3, #64	; 0x40
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592e:	e12d      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005936:	bf00      	nop
 8005938:	e128      	b.n	8005b8c <UART_SetConfig+0x5d0>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4ab6      	ldr	r2, [pc, #728]	; (8005c18 <UART_SetConfig+0x65c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d178      	bne.n	8005a36 <UART_SetConfig+0x47a>
 8005944:	4bb5      	ldr	r3, [pc, #724]	; (8005c1c <UART_SetConfig+0x660>)
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800594c:	2b28      	cmp	r3, #40	; 0x28
 800594e:	d86d      	bhi.n	8005a2c <UART_SetConfig+0x470>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x39c>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	080059fd 	.word	0x080059fd
 800595c:	08005a2d 	.word	0x08005a2d
 8005960:	08005a2d 	.word	0x08005a2d
 8005964:	08005a2d 	.word	0x08005a2d
 8005968:	08005a2d 	.word	0x08005a2d
 800596c:	08005a2d 	.word	0x08005a2d
 8005970:	08005a2d 	.word	0x08005a2d
 8005974:	08005a2d 	.word	0x08005a2d
 8005978:	08005a05 	.word	0x08005a05
 800597c:	08005a2d 	.word	0x08005a2d
 8005980:	08005a2d 	.word	0x08005a2d
 8005984:	08005a2d 	.word	0x08005a2d
 8005988:	08005a2d 	.word	0x08005a2d
 800598c:	08005a2d 	.word	0x08005a2d
 8005990:	08005a2d 	.word	0x08005a2d
 8005994:	08005a2d 	.word	0x08005a2d
 8005998:	08005a0d 	.word	0x08005a0d
 800599c:	08005a2d 	.word	0x08005a2d
 80059a0:	08005a2d 	.word	0x08005a2d
 80059a4:	08005a2d 	.word	0x08005a2d
 80059a8:	08005a2d 	.word	0x08005a2d
 80059ac:	08005a2d 	.word	0x08005a2d
 80059b0:	08005a2d 	.word	0x08005a2d
 80059b4:	08005a2d 	.word	0x08005a2d
 80059b8:	08005a15 	.word	0x08005a15
 80059bc:	08005a2d 	.word	0x08005a2d
 80059c0:	08005a2d 	.word	0x08005a2d
 80059c4:	08005a2d 	.word	0x08005a2d
 80059c8:	08005a2d 	.word	0x08005a2d
 80059cc:	08005a2d 	.word	0x08005a2d
 80059d0:	08005a2d 	.word	0x08005a2d
 80059d4:	08005a2d 	.word	0x08005a2d
 80059d8:	08005a1d 	.word	0x08005a1d
 80059dc:	08005a2d 	.word	0x08005a2d
 80059e0:	08005a2d 	.word	0x08005a2d
 80059e4:	08005a2d 	.word	0x08005a2d
 80059e8:	08005a2d 	.word	0x08005a2d
 80059ec:	08005a2d 	.word	0x08005a2d
 80059f0:	08005a2d 	.word	0x08005a2d
 80059f4:	08005a2d 	.word	0x08005a2d
 80059f8:	08005a25 	.word	0x08005a25
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	e0c3      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0a:	e0bf      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a12:	e0bb      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1a:	e0b7      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a22:	e0b3      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2a:	e0af      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a32:	bf00      	nop
 8005a34:	e0aa      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a79      	ldr	r2, [pc, #484]	; (8005c20 <UART_SetConfig+0x664>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d132      	bne.n	8005aa6 <UART_SetConfig+0x4ea>
 8005a40:	4b76      	ldr	r3, [pc, #472]	; (8005c1c <UART_SetConfig+0x660>)
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d827      	bhi.n	8005a9c <UART_SetConfig+0x4e0>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x498>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a6d 	.word	0x08005a6d
 8005a58:	08005a75 	.word	0x08005a75
 8005a5c:	08005a7d 	.word	0x08005a7d
 8005a60:	08005a85 	.word	0x08005a85
 8005a64:	08005a8d 	.word	0x08005a8d
 8005a68:	08005a95 	.word	0x08005a95
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e08b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a74:	2304      	movs	r3, #4
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e087      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a82:	e083      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8a:	e07f      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a92:	e07b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9a:	e077      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa2:	bf00      	nop
 8005aa4:	e072      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a5e      	ldr	r2, [pc, #376]	; (8005c24 <UART_SetConfig+0x668>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d132      	bne.n	8005b16 <UART_SetConfig+0x55a>
 8005ab0:	4b5a      	ldr	r3, [pc, #360]	; (8005c1c <UART_SetConfig+0x660>)
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	2b05      	cmp	r3, #5
 8005aba:	d827      	bhi.n	8005b0c <UART_SetConfig+0x550>
 8005abc:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <UART_SetConfig+0x508>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005add 	.word	0x08005add
 8005ac8:	08005ae5 	.word	0x08005ae5
 8005acc:	08005aed 	.word	0x08005aed
 8005ad0:	08005af5 	.word	0x08005af5
 8005ad4:	08005afd 	.word	0x08005afd
 8005ad8:	08005b05 	.word	0x08005b05
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e053      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aea:	e04f      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005aec:	2308      	movs	r3, #8
 8005aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af2:	e04b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005af4:	2310      	movs	r3, #16
 8005af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afa:	e047      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005afc:	2320      	movs	r3, #32
 8005afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b02:	e043      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b04:	2340      	movs	r3, #64	; 0x40
 8005b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0a:	e03f      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b12:	bf00      	nop
 8005b14:	e03a      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a43      	ldr	r2, [pc, #268]	; (8005c28 <UART_SetConfig+0x66c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d132      	bne.n	8005b86 <UART_SetConfig+0x5ca>
 8005b20:	4b3e      	ldr	r3, [pc, #248]	; (8005c1c <UART_SetConfig+0x660>)
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d827      	bhi.n	8005b7c <UART_SetConfig+0x5c0>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0x578>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b4d 	.word	0x08005b4d
 8005b38:	08005b55 	.word	0x08005b55
 8005b3c:	08005b5d 	.word	0x08005b5d
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e01b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b54:	2304      	movs	r3, #4
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e017      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e013      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b64:	2310      	movs	r3, #16
 8005b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6a:	e00f      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	e00b      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7a:	e007      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b82:	bf00      	nop
 8005b84:	e002      	b.n	8005b8c <UART_SetConfig+0x5d0>
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <UART_SetConfig+0x66c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	f040 80b8 	bne.w	8005d08 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d019      	beq.n	8005bd4 <UART_SetConfig+0x618>
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	dc04      	bgt.n	8005bae <UART_SetConfig+0x5f2>
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d009      	beq.n	8005bbc <UART_SetConfig+0x600>
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d00b      	beq.n	8005bc4 <UART_SetConfig+0x608>
 8005bac:	e042      	b.n	8005c34 <UART_SetConfig+0x678>
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d02b      	beq.n	8005c0a <UART_SetConfig+0x64e>
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d02c      	beq.n	8005c10 <UART_SetConfig+0x654>
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d014      	beq.n	8005be4 <UART_SetConfig+0x628>
 8005bba:	e03b      	b.n	8005c34 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005bbc:	f7ff f806 	bl	8004bcc <HAL_RCCEx_GetD3PCLK1Freq>
 8005bc0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005bc2:	e03d      	b.n	8005c40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff f815 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bd2:	e035      	b.n	8005c40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bd4:	f107 0308 	add.w	r3, r7, #8
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff f959 	bl	8004e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005be2:	e02d      	b.n	8005c40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <UART_SetConfig+0x660>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <UART_SetConfig+0x660>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	08db      	lsrs	r3, r3, #3
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <UART_SetConfig+0x670>)
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c02:	e01d      	b.n	8005c40 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <UART_SetConfig+0x670>)
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c08:	e01a      	b.n	8005c40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <UART_SetConfig+0x674>)
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c0e:	e017      	b.n	8005c40 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c16:	e013      	b.n	8005c40 <UART_SetConfig+0x684>
 8005c18:	40011400 	.word	0x40011400
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	40007800 	.word	0x40007800
 8005c24:	40007c00 	.word	0x40007c00
 8005c28:	58000c00 	.word	0x58000c00
 8005c2c:	03d09000 	.word	0x03d09000
 8005c30:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 824d 	beq.w	80060e2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	4aad      	ldr	r2, [pc, #692]	; (8005f04 <UART_SetConfig+0x948>)
 8005c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c52:	461a      	mov	r2, r3
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c5a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	4413      	add	r3, r2
 8005c66:	6a3a      	ldr	r2, [r7, #32]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d305      	bcc.n	8005c78 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c72:	6a3a      	ldr	r2, [r7, #32]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d903      	bls.n	8005c80 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005c7e:	e230      	b.n	80060e2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	4618      	mov	r0, r3
 8005c84:	f04f 0100 	mov.w	r1, #0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	4a9d      	ldr	r2, [pc, #628]	; (8005f04 <UART_SetConfig+0x948>)
 8005c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f04f 0400 	mov.w	r4, #0
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	f7fa fbc8 	bl	8000430 <__aeabi_uldivmod>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	f04f 0400 	mov.w	r4, #0
 8005cb0:	0214      	lsls	r4, r2, #8
 8005cb2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005cb6:	020b      	lsls	r3, r1, #8
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6852      	ldr	r2, [r2, #4]
 8005cbc:	0852      	lsrs	r2, r2, #1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	eb13 0b01 	adds.w	fp, r3, r1
 8005cc8:	eb44 0c02 	adc.w	ip, r4, r2
 8005ccc:	4658      	mov	r0, fp
 8005cce:	4661      	mov	r1, ip
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f04f 0400 	mov.w	r4, #0
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4623      	mov	r3, r4
 8005cdc:	f7fa fba8 	bl	8000430 <__aeabi_uldivmod>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cec:	d308      	bcc.n	8005d00 <UART_SetConfig+0x744>
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf4:	d204      	bcs.n	8005d00 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfc:	60da      	str	r2, [r3, #12]
 8005cfe:	e1f0      	b.n	80060e2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005d06:	e1ec      	b.n	80060e2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d10:	f040 8100 	bne.w	8005f14 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005d14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	f200 80b7 	bhi.w	8005e8c <UART_SetConfig+0x8d0>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0x768>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005e29 	.word	0x08005e29
 8005d28:	08005e31 	.word	0x08005e31
 8005d2c:	08005e8d 	.word	0x08005e8d
 8005d30:	08005e8d 	.word	0x08005e8d
 8005d34:	08005e39 	.word	0x08005e39
 8005d38:	08005e8d 	.word	0x08005e8d
 8005d3c:	08005e8d 	.word	0x08005e8d
 8005d40:	08005e8d 	.word	0x08005e8d
 8005d44:	08005e49 	.word	0x08005e49
 8005d48:	08005e8d 	.word	0x08005e8d
 8005d4c:	08005e8d 	.word	0x08005e8d
 8005d50:	08005e8d 	.word	0x08005e8d
 8005d54:	08005e8d 	.word	0x08005e8d
 8005d58:	08005e8d 	.word	0x08005e8d
 8005d5c:	08005e8d 	.word	0x08005e8d
 8005d60:	08005e8d 	.word	0x08005e8d
 8005d64:	08005e59 	.word	0x08005e59
 8005d68:	08005e8d 	.word	0x08005e8d
 8005d6c:	08005e8d 	.word	0x08005e8d
 8005d70:	08005e8d 	.word	0x08005e8d
 8005d74:	08005e8d 	.word	0x08005e8d
 8005d78:	08005e8d 	.word	0x08005e8d
 8005d7c:	08005e8d 	.word	0x08005e8d
 8005d80:	08005e8d 	.word	0x08005e8d
 8005d84:	08005e8d 	.word	0x08005e8d
 8005d88:	08005e8d 	.word	0x08005e8d
 8005d8c:	08005e8d 	.word	0x08005e8d
 8005d90:	08005e8d 	.word	0x08005e8d
 8005d94:	08005e8d 	.word	0x08005e8d
 8005d98:	08005e8d 	.word	0x08005e8d
 8005d9c:	08005e8d 	.word	0x08005e8d
 8005da0:	08005e8d 	.word	0x08005e8d
 8005da4:	08005e7f 	.word	0x08005e7f
 8005da8:	08005e8d 	.word	0x08005e8d
 8005dac:	08005e8d 	.word	0x08005e8d
 8005db0:	08005e8d 	.word	0x08005e8d
 8005db4:	08005e8d 	.word	0x08005e8d
 8005db8:	08005e8d 	.word	0x08005e8d
 8005dbc:	08005e8d 	.word	0x08005e8d
 8005dc0:	08005e8d 	.word	0x08005e8d
 8005dc4:	08005e8d 	.word	0x08005e8d
 8005dc8:	08005e8d 	.word	0x08005e8d
 8005dcc:	08005e8d 	.word	0x08005e8d
 8005dd0:	08005e8d 	.word	0x08005e8d
 8005dd4:	08005e8d 	.word	0x08005e8d
 8005dd8:	08005e8d 	.word	0x08005e8d
 8005ddc:	08005e8d 	.word	0x08005e8d
 8005de0:	08005e8d 	.word	0x08005e8d
 8005de4:	08005e8d 	.word	0x08005e8d
 8005de8:	08005e8d 	.word	0x08005e8d
 8005dec:	08005e8d 	.word	0x08005e8d
 8005df0:	08005e8d 	.word	0x08005e8d
 8005df4:	08005e8d 	.word	0x08005e8d
 8005df8:	08005e8d 	.word	0x08005e8d
 8005dfc:	08005e8d 	.word	0x08005e8d
 8005e00:	08005e8d 	.word	0x08005e8d
 8005e04:	08005e8d 	.word	0x08005e8d
 8005e08:	08005e8d 	.word	0x08005e8d
 8005e0c:	08005e8d 	.word	0x08005e8d
 8005e10:	08005e8d 	.word	0x08005e8d
 8005e14:	08005e8d 	.word	0x08005e8d
 8005e18:	08005e8d 	.word	0x08005e8d
 8005e1c:	08005e8d 	.word	0x08005e8d
 8005e20:	08005e8d 	.word	0x08005e8d
 8005e24:	08005e85 	.word	0x08005e85
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fd ffb6 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e2e:	e033      	b.n	8005e98 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fd ffc8 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8005e34:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e36:	e02f      	b.n	8005e98 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e38:	f107 0314 	add.w	r3, r7, #20
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fe fedb 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e46:	e027      	b.n	8005e98 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e48:	f107 0308 	add.w	r3, r7, #8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff f81f 	bl	8004e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e56:	e01f      	b.n	8005e98 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e58:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <UART_SetConfig+0x94c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d009      	beq.n	8005e78 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e64:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <UART_SetConfig+0x94c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	08db      	lsrs	r3, r3, #3
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	4a27      	ldr	r2, [pc, #156]	; (8005f0c <UART_SetConfig+0x950>)
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e76:	e00f      	b.n	8005e98 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005e78:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <UART_SetConfig+0x950>)
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e7c:	e00c      	b.n	8005e98 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <UART_SetConfig+0x954>)
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e82:	e009      	b.n	8005e98 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e8a:	e005      	b.n	8005e98 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005e96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8121 	beq.w	80060e2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <UART_SetConfig+0x948>)
 8005ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eb2:	005a      	lsls	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	441a      	add	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	d916      	bls.n	8005efc <UART_SetConfig+0x940>
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d212      	bcs.n	8005efc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f023 030f 	bic.w	r3, r3, #15
 8005ede:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ef8:	60da      	str	r2, [r3, #12]
 8005efa:	e0f2      	b.n	80060e2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f02:	e0ee      	b.n	80060e2 <UART_SetConfig+0xb26>
 8005f04:	08009294 	.word	0x08009294
 8005f08:	58024400 	.word	0x58024400
 8005f0c:	03d09000 	.word	0x03d09000
 8005f10:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	f200 80b7 	bhi.w	800608c <UART_SetConfig+0xad0>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x968>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08006029 	.word	0x08006029
 8005f28:	08006031 	.word	0x08006031
 8005f2c:	0800608d 	.word	0x0800608d
 8005f30:	0800608d 	.word	0x0800608d
 8005f34:	08006039 	.word	0x08006039
 8005f38:	0800608d 	.word	0x0800608d
 8005f3c:	0800608d 	.word	0x0800608d
 8005f40:	0800608d 	.word	0x0800608d
 8005f44:	08006049 	.word	0x08006049
 8005f48:	0800608d 	.word	0x0800608d
 8005f4c:	0800608d 	.word	0x0800608d
 8005f50:	0800608d 	.word	0x0800608d
 8005f54:	0800608d 	.word	0x0800608d
 8005f58:	0800608d 	.word	0x0800608d
 8005f5c:	0800608d 	.word	0x0800608d
 8005f60:	0800608d 	.word	0x0800608d
 8005f64:	08006059 	.word	0x08006059
 8005f68:	0800608d 	.word	0x0800608d
 8005f6c:	0800608d 	.word	0x0800608d
 8005f70:	0800608d 	.word	0x0800608d
 8005f74:	0800608d 	.word	0x0800608d
 8005f78:	0800608d 	.word	0x0800608d
 8005f7c:	0800608d 	.word	0x0800608d
 8005f80:	0800608d 	.word	0x0800608d
 8005f84:	0800608d 	.word	0x0800608d
 8005f88:	0800608d 	.word	0x0800608d
 8005f8c:	0800608d 	.word	0x0800608d
 8005f90:	0800608d 	.word	0x0800608d
 8005f94:	0800608d 	.word	0x0800608d
 8005f98:	0800608d 	.word	0x0800608d
 8005f9c:	0800608d 	.word	0x0800608d
 8005fa0:	0800608d 	.word	0x0800608d
 8005fa4:	0800607f 	.word	0x0800607f
 8005fa8:	0800608d 	.word	0x0800608d
 8005fac:	0800608d 	.word	0x0800608d
 8005fb0:	0800608d 	.word	0x0800608d
 8005fb4:	0800608d 	.word	0x0800608d
 8005fb8:	0800608d 	.word	0x0800608d
 8005fbc:	0800608d 	.word	0x0800608d
 8005fc0:	0800608d 	.word	0x0800608d
 8005fc4:	0800608d 	.word	0x0800608d
 8005fc8:	0800608d 	.word	0x0800608d
 8005fcc:	0800608d 	.word	0x0800608d
 8005fd0:	0800608d 	.word	0x0800608d
 8005fd4:	0800608d 	.word	0x0800608d
 8005fd8:	0800608d 	.word	0x0800608d
 8005fdc:	0800608d 	.word	0x0800608d
 8005fe0:	0800608d 	.word	0x0800608d
 8005fe4:	0800608d 	.word	0x0800608d
 8005fe8:	0800608d 	.word	0x0800608d
 8005fec:	0800608d 	.word	0x0800608d
 8005ff0:	0800608d 	.word	0x0800608d
 8005ff4:	0800608d 	.word	0x0800608d
 8005ff8:	0800608d 	.word	0x0800608d
 8005ffc:	0800608d 	.word	0x0800608d
 8006000:	0800608d 	.word	0x0800608d
 8006004:	0800608d 	.word	0x0800608d
 8006008:	0800608d 	.word	0x0800608d
 800600c:	0800608d 	.word	0x0800608d
 8006010:	0800608d 	.word	0x0800608d
 8006014:	0800608d 	.word	0x0800608d
 8006018:	0800608d 	.word	0x0800608d
 800601c:	0800608d 	.word	0x0800608d
 8006020:	0800608d 	.word	0x0800608d
 8006024:	08006085 	.word	0x08006085
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fd feb6 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 800602c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800602e:	e033      	b.n	8006098 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006030:	f7fd fec8 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8006034:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006036:	e02f      	b.n	8006098 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fddb 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006046:	e027      	b.n	8006098 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	4618      	mov	r0, r3
 800604e:	f7fe ff1f 	bl	8004e90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006056:	e01f      	b.n	8006098 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006058:	4b2c      	ldr	r3, [pc, #176]	; (800610c <UART_SetConfig+0xb50>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006064:	4b29      	ldr	r3, [pc, #164]	; (800610c <UART_SetConfig+0xb50>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	08db      	lsrs	r3, r3, #3
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	4a28      	ldr	r2, [pc, #160]	; (8006110 <UART_SetConfig+0xb54>)
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006076:	e00f      	b.n	8006098 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006078:	4b25      	ldr	r3, [pc, #148]	; (8006110 <UART_SetConfig+0xb54>)
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800607c:	e00c      	b.n	8006098 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800607e:	4b25      	ldr	r3, [pc, #148]	; (8006114 <UART_SetConfig+0xb58>)
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006082:	e009      	b.n	8006098 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800608a:	e005      	b.n	8006098 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006096:	bf00      	nop
    }

    if (pclk != 0U)
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d021      	beq.n	80060e2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <UART_SetConfig+0xb5c>)
 80060a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a8:	461a      	mov	r2, r3
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	441a      	add	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	2b0f      	cmp	r3, #15
 80060c8:	d908      	bls.n	80060dc <UART_SetConfig+0xb20>
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d0:	d204      	bcs.n	80060dc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d8:	60da      	str	r2, [r3, #12]
 80060da:	e002      	b.n	80060e2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80060fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006102:	4618      	mov	r0, r3
 8006104:	3738      	adds	r7, #56	; 0x38
 8006106:	46bd      	mov	sp, r7
 8006108:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800610c:	58024400 	.word	0x58024400
 8006110:	03d09000 	.word	0x03d09000
 8006114:	003d0900 	.word	0x003d0900
 8006118:	08009294 	.word	0x08009294

0800611c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621a:	d10a      	bne.n	8006232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006270:	f7fb fd62 	bl	8001d38 <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b08      	cmp	r3, #8
 8006282:	d10e      	bne.n	80062a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f82c 	bl	80062f0 <UART_WaitOnFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e022      	b.n	80062e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d10e      	bne.n	80062ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f816 	bl	80062f0 <UART_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e00c      	b.n	80062e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006300:	e062      	b.n	80063c8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d05e      	beq.n	80063c8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630a:	f7fb fd15 	bl	8001d38 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	429a      	cmp	r2, r3
 8006318:	d302      	bcc.n	8006320 <UART_WaitOnFlagUntilTimeout+0x30>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d11d      	bne.n	800635c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800632e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e045      	b.n	80063e8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d02e      	beq.n	80063c8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006378:	d126      	bne.n	80063c8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006382:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006392:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e00f      	b.n	80063e8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69da      	ldr	r2, [r3, #28]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4013      	ands	r3, r2
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	bf0c      	ite	eq
 80063d8:	2301      	moveq	r3, #1
 80063da:	2300      	movne	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d08d      	beq.n	8006302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_UARTEx_DisableFifoMode+0x16>
 8006402:	2302      	movs	r3, #2
 8006404:	e027      	b.n	8006456 <HAL_UARTEx_DisableFifoMode+0x66>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2224      	movs	r2, #36	; 0x24
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006434:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006476:	2302      	movs	r3, #2
 8006478:	e02d      	b.n	80064d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2224      	movs	r2, #36	; 0x24
 8006486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f850 	bl	800655c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e02d      	b.n	8006552 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2224      	movs	r2, #36	; 0x24
 8006502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f812 	bl	800655c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b089      	sub	sp, #36	; 0x24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006564:	4a2f      	ldr	r2, [pc, #188]	; (8006624 <UARTEx_SetNbDataToProcess+0xc8>)
 8006566:	f107 0314 	add.w	r3, r7, #20
 800656a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800656e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006572:	4a2d      	ldr	r2, [pc, #180]	; (8006628 <UARTEx_SetNbDataToProcess+0xcc>)
 8006574:	f107 030c 	add.w	r3, r7, #12
 8006578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800657c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006584:	2b00      	cmp	r3, #0
 8006586:	d108      	bne.n	800659a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006598:	e03d      	b.n	8006616 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800659a:	2310      	movs	r3, #16
 800659c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800659e:	2310      	movs	r3, #16
 80065a0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	0e5b      	lsrs	r3, r3, #25
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	0f5b      	lsrs	r3, r3, #29
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80065c2:	7fbb      	ldrb	r3, [r7, #30]
 80065c4:	7f3a      	ldrb	r2, [r7, #28]
 80065c6:	f107 0120 	add.w	r1, r7, #32
 80065ca:	440a      	add	r2, r1
 80065cc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80065d0:	fb02 f303 	mul.w	r3, r2, r3
 80065d4:	7f3a      	ldrb	r2, [r7, #28]
 80065d6:	f107 0120 	add.w	r1, r7, #32
 80065da:	440a      	add	r2, r1
 80065dc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80065e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80065ec:	7ffb      	ldrb	r3, [r7, #31]
 80065ee:	7f7a      	ldrb	r2, [r7, #29]
 80065f0:	f107 0120 	add.w	r1, r7, #32
 80065f4:	440a      	add	r2, r1
 80065f6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80065fa:	fb02 f303 	mul.w	r3, r2, r3
 80065fe:	7f7a      	ldrb	r2, [r7, #29]
 8006600:	f107 0120 	add.w	r1, r7, #32
 8006604:	440a      	add	r2, r1
 8006606:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800660a:	fb93 f3f2 	sdiv	r3, r3, r2
 800660e:	b29a      	uxth	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006616:	bf00      	nop
 8006618:	3724      	adds	r7, #36	; 0x24
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	08009274 	.word	0x08009274
 8006628:	0800927c 	.word	0x0800927c

0800662c <__errno>:
 800662c:	4b01      	ldr	r3, [pc, #4]	; (8006634 <__errno+0x8>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000010 	.word	0x20000010

08006638 <__libc_init_array>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4e0d      	ldr	r6, [pc, #52]	; (8006670 <__libc_init_array+0x38>)
 800663c:	4c0d      	ldr	r4, [pc, #52]	; (8006674 <__libc_init_array+0x3c>)
 800663e:	1ba4      	subs	r4, r4, r6
 8006640:	10a4      	asrs	r4, r4, #2
 8006642:	2500      	movs	r5, #0
 8006644:	42a5      	cmp	r5, r4
 8006646:	d109      	bne.n	800665c <__libc_init_array+0x24>
 8006648:	4e0b      	ldr	r6, [pc, #44]	; (8006678 <__libc_init_array+0x40>)
 800664a:	4c0c      	ldr	r4, [pc, #48]	; (800667c <__libc_init_array+0x44>)
 800664c:	f002 fdbe 	bl	80091cc <_init>
 8006650:	1ba4      	subs	r4, r4, r6
 8006652:	10a4      	asrs	r4, r4, #2
 8006654:	2500      	movs	r5, #0
 8006656:	42a5      	cmp	r5, r4
 8006658:	d105      	bne.n	8006666 <__libc_init_array+0x2e>
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006660:	4798      	blx	r3
 8006662:	3501      	adds	r5, #1
 8006664:	e7ee      	b.n	8006644 <__libc_init_array+0xc>
 8006666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800666a:	4798      	blx	r3
 800666c:	3501      	adds	r5, #1
 800666e:	e7f2      	b.n	8006656 <__libc_init_array+0x1e>
 8006670:	08009558 	.word	0x08009558
 8006674:	08009558 	.word	0x08009558
 8006678:	08009558 	.word	0x08009558
 800667c:	0800955c 	.word	0x0800955c

08006680 <memset>:
 8006680:	4402      	add	r2, r0
 8006682:	4603      	mov	r3, r0
 8006684:	4293      	cmp	r3, r2
 8006686:	d100      	bne.n	800668a <memset+0xa>
 8006688:	4770      	bx	lr
 800668a:	f803 1b01 	strb.w	r1, [r3], #1
 800668e:	e7f9      	b.n	8006684 <memset+0x4>

08006690 <__cvt>:
 8006690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006692:	ed2d 8b02 	vpush	{d8}
 8006696:	eeb0 8b40 	vmov.f64	d8, d0
 800669a:	b085      	sub	sp, #20
 800669c:	4617      	mov	r7, r2
 800669e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80066a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80066a2:	ee18 2a90 	vmov	r2, s17
 80066a6:	f025 0520 	bic.w	r5, r5, #32
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	bfb6      	itet	lt
 80066ae:	222d      	movlt	r2, #45	; 0x2d
 80066b0:	2200      	movge	r2, #0
 80066b2:	eeb1 8b40 	vneglt.f64	d8, d0
 80066b6:	2d46      	cmp	r5, #70	; 0x46
 80066b8:	460c      	mov	r4, r1
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	d004      	beq.n	80066c8 <__cvt+0x38>
 80066be:	2d45      	cmp	r5, #69	; 0x45
 80066c0:	d100      	bne.n	80066c4 <__cvt+0x34>
 80066c2:	3401      	adds	r4, #1
 80066c4:	2102      	movs	r1, #2
 80066c6:	e000      	b.n	80066ca <__cvt+0x3a>
 80066c8:	2103      	movs	r1, #3
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	ab02      	add	r3, sp, #8
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	4622      	mov	r2, r4
 80066d4:	4633      	mov	r3, r6
 80066d6:	eeb0 0b48 	vmov.f64	d0, d8
 80066da:	f000 fcc1 	bl	8007060 <_dtoa_r>
 80066de:	2d47      	cmp	r5, #71	; 0x47
 80066e0:	d101      	bne.n	80066e6 <__cvt+0x56>
 80066e2:	07fb      	lsls	r3, r7, #31
 80066e4:	d51e      	bpl.n	8006724 <__cvt+0x94>
 80066e6:	2d46      	cmp	r5, #70	; 0x46
 80066e8:	eb00 0304 	add.w	r3, r0, r4
 80066ec:	d10c      	bne.n	8006708 <__cvt+0x78>
 80066ee:	7802      	ldrb	r2, [r0, #0]
 80066f0:	2a30      	cmp	r2, #48	; 0x30
 80066f2:	d107      	bne.n	8006704 <__cvt+0x74>
 80066f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80066f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fc:	bf1c      	itt	ne
 80066fe:	f1c4 0401 	rsbne	r4, r4, #1
 8006702:	6034      	strne	r4, [r6, #0]
 8006704:	6832      	ldr	r2, [r6, #0]
 8006706:	4413      	add	r3, r2
 8006708:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800670c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006710:	d007      	beq.n	8006722 <__cvt+0x92>
 8006712:	2130      	movs	r1, #48	; 0x30
 8006714:	9a03      	ldr	r2, [sp, #12]
 8006716:	429a      	cmp	r2, r3
 8006718:	d204      	bcs.n	8006724 <__cvt+0x94>
 800671a:	1c54      	adds	r4, r2, #1
 800671c:	9403      	str	r4, [sp, #12]
 800671e:	7011      	strb	r1, [r2, #0]
 8006720:	e7f8      	b.n	8006714 <__cvt+0x84>
 8006722:	9303      	str	r3, [sp, #12]
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006728:	1a1b      	subs	r3, r3, r0
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	b005      	add	sp, #20
 800672e:	ecbd 8b02 	vpop	{d8}
 8006732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006734 <__exponent>:
 8006734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006736:	2900      	cmp	r1, #0
 8006738:	4604      	mov	r4, r0
 800673a:	bfba      	itte	lt
 800673c:	4249      	neglt	r1, r1
 800673e:	232d      	movlt	r3, #45	; 0x2d
 8006740:	232b      	movge	r3, #43	; 0x2b
 8006742:	2909      	cmp	r1, #9
 8006744:	f804 2b02 	strb.w	r2, [r4], #2
 8006748:	7043      	strb	r3, [r0, #1]
 800674a:	dd20      	ble.n	800678e <__exponent+0x5a>
 800674c:	f10d 0307 	add.w	r3, sp, #7
 8006750:	461f      	mov	r7, r3
 8006752:	260a      	movs	r6, #10
 8006754:	fb91 f5f6 	sdiv	r5, r1, r6
 8006758:	fb06 1115 	mls	r1, r6, r5, r1
 800675c:	3130      	adds	r1, #48	; 0x30
 800675e:	2d09      	cmp	r5, #9
 8006760:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006764:	f103 32ff 	add.w	r2, r3, #4294967295
 8006768:	4629      	mov	r1, r5
 800676a:	dc09      	bgt.n	8006780 <__exponent+0x4c>
 800676c:	3130      	adds	r1, #48	; 0x30
 800676e:	3b02      	subs	r3, #2
 8006770:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006774:	42bb      	cmp	r3, r7
 8006776:	4622      	mov	r2, r4
 8006778:	d304      	bcc.n	8006784 <__exponent+0x50>
 800677a:	1a10      	subs	r0, r2, r0
 800677c:	b003      	add	sp, #12
 800677e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006780:	4613      	mov	r3, r2
 8006782:	e7e7      	b.n	8006754 <__exponent+0x20>
 8006784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006788:	f804 2b01 	strb.w	r2, [r4], #1
 800678c:	e7f2      	b.n	8006774 <__exponent+0x40>
 800678e:	2330      	movs	r3, #48	; 0x30
 8006790:	4419      	add	r1, r3
 8006792:	7083      	strb	r3, [r0, #2]
 8006794:	1d02      	adds	r2, r0, #4
 8006796:	70c1      	strb	r1, [r0, #3]
 8006798:	e7ef      	b.n	800677a <__exponent+0x46>
 800679a:	0000      	movs	r0, r0
 800679c:	0000      	movs	r0, r0
	...

080067a0 <_printf_float>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	b08d      	sub	sp, #52	; 0x34
 80067a6:	460c      	mov	r4, r1
 80067a8:	4616      	mov	r6, r2
 80067aa:	461f      	mov	r7, r3
 80067ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80067b0:	4605      	mov	r5, r0
 80067b2:	f001 f9a1 	bl	8007af8 <_localeconv_r>
 80067b6:	f8d0 b000 	ldr.w	fp, [r0]
 80067ba:	4658      	mov	r0, fp
 80067bc:	f7f9 fd90 	bl	80002e0 <strlen>
 80067c0:	2300      	movs	r3, #0
 80067c2:	930a      	str	r3, [sp, #40]	; 0x28
 80067c4:	f8d8 3000 	ldr.w	r3, [r8]
 80067c8:	9005      	str	r0, [sp, #20]
 80067ca:	3307      	adds	r3, #7
 80067cc:	f023 0307 	bic.w	r3, r3, #7
 80067d0:	f103 0108 	add.w	r1, r3, #8
 80067d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	f8c8 1000 	str.w	r1, [r8]
 80067de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80067e6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8006a70 <_printf_float+0x2d0>
 80067ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80067ee:	eeb0 6bc0 	vabs.f64	d6, d0
 80067f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80067f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fa:	dd24      	ble.n	8006846 <_printf_float+0xa6>
 80067fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006804:	d502      	bpl.n	800680c <_printf_float+0x6c>
 8006806:	232d      	movs	r3, #45	; 0x2d
 8006808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800680c:	499a      	ldr	r1, [pc, #616]	; (8006a78 <_printf_float+0x2d8>)
 800680e:	4b9b      	ldr	r3, [pc, #620]	; (8006a7c <_printf_float+0x2dc>)
 8006810:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006814:	bf8c      	ite	hi
 8006816:	4688      	movhi	r8, r1
 8006818:	4698      	movls	r8, r3
 800681a:	f022 0204 	bic.w	r2, r2, #4
 800681e:	2303      	movs	r3, #3
 8006820:	6123      	str	r3, [r4, #16]
 8006822:	6022      	str	r2, [r4, #0]
 8006824:	f04f 0a00 	mov.w	sl, #0
 8006828:	9700      	str	r7, [sp, #0]
 800682a:	4633      	mov	r3, r6
 800682c:	aa0b      	add	r2, sp, #44	; 0x2c
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f000 f9e1 	bl	8006bf8 <_printf_common>
 8006836:	3001      	adds	r0, #1
 8006838:	f040 8089 	bne.w	800694e <_printf_float+0x1ae>
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	b00d      	add	sp, #52	; 0x34
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	eeb4 0b40 	vcmp.f64	d0, d0
 800684a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800684e:	d702      	bvc.n	8006856 <_printf_float+0xb6>
 8006850:	498b      	ldr	r1, [pc, #556]	; (8006a80 <_printf_float+0x2e0>)
 8006852:	4b8c      	ldr	r3, [pc, #560]	; (8006a84 <_printf_float+0x2e4>)
 8006854:	e7dc      	b.n	8006810 <_printf_float+0x70>
 8006856:	6861      	ldr	r1, [r4, #4]
 8006858:	1c4b      	adds	r3, r1, #1
 800685a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800685e:	ab0a      	add	r3, sp, #40	; 0x28
 8006860:	a809      	add	r0, sp, #36	; 0x24
 8006862:	d13b      	bne.n	80068dc <_printf_float+0x13c>
 8006864:	2106      	movs	r1, #6
 8006866:	6061      	str	r1, [r4, #4]
 8006868:	f04f 0c00 	mov.w	ip, #0
 800686c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006870:	e9cd 0900 	strd	r0, r9, [sp]
 8006874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006878:	6022      	str	r2, [r4, #0]
 800687a:	6861      	ldr	r1, [r4, #4]
 800687c:	4628      	mov	r0, r5
 800687e:	f7ff ff07 	bl	8006690 <__cvt>
 8006882:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8006886:	2b47      	cmp	r3, #71	; 0x47
 8006888:	4680      	mov	r8, r0
 800688a:	d109      	bne.n	80068a0 <_printf_float+0x100>
 800688c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688e:	1cd8      	adds	r0, r3, #3
 8006890:	db02      	blt.n	8006898 <_printf_float+0xf8>
 8006892:	6862      	ldr	r2, [r4, #4]
 8006894:	4293      	cmp	r3, r2
 8006896:	dd47      	ble.n	8006928 <_printf_float+0x188>
 8006898:	f1a9 0902 	sub.w	r9, r9, #2
 800689c:	fa5f f989 	uxtb.w	r9, r9
 80068a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068a6:	d824      	bhi.n	80068f2 <_printf_float+0x152>
 80068a8:	3901      	subs	r1, #1
 80068aa:	464a      	mov	r2, r9
 80068ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068b0:	9109      	str	r1, [sp, #36]	; 0x24
 80068b2:	f7ff ff3f 	bl	8006734 <__exponent>
 80068b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b8:	1813      	adds	r3, r2, r0
 80068ba:	2a01      	cmp	r2, #1
 80068bc:	4682      	mov	sl, r0
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	dc02      	bgt.n	80068c8 <_printf_float+0x128>
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	07d1      	lsls	r1, r2, #31
 80068c6:	d501      	bpl.n	80068cc <_printf_float+0x12c>
 80068c8:	3301      	adds	r3, #1
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0a9      	beq.n	8006828 <_printf_float+0x88>
 80068d4:	232d      	movs	r3, #45	; 0x2d
 80068d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068da:	e7a5      	b.n	8006828 <_printf_float+0x88>
 80068dc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80068e0:	f000 8178 	beq.w	8006bd4 <_printf_float+0x434>
 80068e4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80068e8:	d1be      	bne.n	8006868 <_printf_float+0xc8>
 80068ea:	2900      	cmp	r1, #0
 80068ec:	d1bc      	bne.n	8006868 <_printf_float+0xc8>
 80068ee:	2101      	movs	r1, #1
 80068f0:	e7b9      	b.n	8006866 <_printf_float+0xc6>
 80068f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068f6:	d119      	bne.n	800692c <_printf_float+0x18c>
 80068f8:	2900      	cmp	r1, #0
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	dd0c      	ble.n	8006918 <_printf_float+0x178>
 80068fe:	6121      	str	r1, [r4, #16]
 8006900:	b913      	cbnz	r3, 8006908 <_printf_float+0x168>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	07d2      	lsls	r2, r2, #31
 8006906:	d502      	bpl.n	800690e <_printf_float+0x16e>
 8006908:	3301      	adds	r3, #1
 800690a:	440b      	add	r3, r1
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006910:	65a3      	str	r3, [r4, #88]	; 0x58
 8006912:	f04f 0a00 	mov.w	sl, #0
 8006916:	e7d9      	b.n	80068cc <_printf_float+0x12c>
 8006918:	b913      	cbnz	r3, 8006920 <_printf_float+0x180>
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	07d0      	lsls	r0, r2, #31
 800691e:	d501      	bpl.n	8006924 <_printf_float+0x184>
 8006920:	3302      	adds	r3, #2
 8006922:	e7f3      	b.n	800690c <_printf_float+0x16c>
 8006924:	2301      	movs	r3, #1
 8006926:	e7f1      	b.n	800690c <_printf_float+0x16c>
 8006928:	f04f 0967 	mov.w	r9, #103	; 0x67
 800692c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006930:	4293      	cmp	r3, r2
 8006932:	db05      	blt.n	8006940 <_printf_float+0x1a0>
 8006934:	6822      	ldr	r2, [r4, #0]
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	07d1      	lsls	r1, r2, #31
 800693a:	d5e8      	bpl.n	800690e <_printf_float+0x16e>
 800693c:	3301      	adds	r3, #1
 800693e:	e7e5      	b.n	800690c <_printf_float+0x16c>
 8006940:	2b00      	cmp	r3, #0
 8006942:	bfd4      	ite	le
 8006944:	f1c3 0302 	rsble	r3, r3, #2
 8006948:	2301      	movgt	r3, #1
 800694a:	4413      	add	r3, r2
 800694c:	e7de      	b.n	800690c <_printf_float+0x16c>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	055a      	lsls	r2, r3, #21
 8006952:	d407      	bmi.n	8006964 <_printf_float+0x1c4>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	4642      	mov	r2, r8
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	d12a      	bne.n	80069b8 <_printf_float+0x218>
 8006962:	e76b      	b.n	800683c <_printf_float+0x9c>
 8006964:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006968:	f240 80de 	bls.w	8006b28 <_printf_float+0x388>
 800696c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006970:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006978:	d133      	bne.n	80069e2 <_printf_float+0x242>
 800697a:	2301      	movs	r3, #1
 800697c:	4a42      	ldr	r2, [pc, #264]	; (8006a88 <_printf_float+0x2e8>)
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	f43f af59 	beq.w	800683c <_printf_float+0x9c>
 800698a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800698e:	429a      	cmp	r2, r3
 8006990:	db02      	blt.n	8006998 <_printf_float+0x1f8>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	07d8      	lsls	r0, r3, #31
 8006996:	d50f      	bpl.n	80069b8 <_printf_float+0x218>
 8006998:	9b05      	ldr	r3, [sp, #20]
 800699a:	465a      	mov	r2, fp
 800699c:	4631      	mov	r1, r6
 800699e:	4628      	mov	r0, r5
 80069a0:	47b8      	blx	r7
 80069a2:	3001      	adds	r0, #1
 80069a4:	f43f af4a 	beq.w	800683c <_printf_float+0x9c>
 80069a8:	f04f 0800 	mov.w	r8, #0
 80069ac:	f104 091a 	add.w	r9, r4, #26
 80069b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b2:	3b01      	subs	r3, #1
 80069b4:	4543      	cmp	r3, r8
 80069b6:	dc09      	bgt.n	80069cc <_printf_float+0x22c>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	079b      	lsls	r3, r3, #30
 80069bc:	f100 8105 	bmi.w	8006bca <_printf_float+0x42a>
 80069c0:	68e0      	ldr	r0, [r4, #12]
 80069c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c4:	4298      	cmp	r0, r3
 80069c6:	bfb8      	it	lt
 80069c8:	4618      	movlt	r0, r3
 80069ca:	e739      	b.n	8006840 <_printf_float+0xa0>
 80069cc:	2301      	movs	r3, #1
 80069ce:	464a      	mov	r2, r9
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	f43f af30 	beq.w	800683c <_printf_float+0x9c>
 80069dc:	f108 0801 	add.w	r8, r8, #1
 80069e0:	e7e6      	b.n	80069b0 <_printf_float+0x210>
 80069e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dc2b      	bgt.n	8006a40 <_printf_float+0x2a0>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4a27      	ldr	r2, [pc, #156]	; (8006a88 <_printf_float+0x2e8>)
 80069ec:	4631      	mov	r1, r6
 80069ee:	4628      	mov	r0, r5
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	f43f af22 	beq.w	800683c <_printf_float+0x9c>
 80069f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fa:	b923      	cbnz	r3, 8006a06 <_printf_float+0x266>
 80069fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fe:	b913      	cbnz	r3, 8006a06 <_printf_float+0x266>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	07d9      	lsls	r1, r3, #31
 8006a04:	d5d8      	bpl.n	80069b8 <_printf_float+0x218>
 8006a06:	9b05      	ldr	r3, [sp, #20]
 8006a08:	465a      	mov	r2, fp
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	f43f af13 	beq.w	800683c <_printf_float+0x9c>
 8006a16:	f04f 0900 	mov.w	r9, #0
 8006a1a:	f104 0a1a 	add.w	sl, r4, #26
 8006a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a20:	425b      	negs	r3, r3
 8006a22:	454b      	cmp	r3, r9
 8006a24:	dc01      	bgt.n	8006a2a <_printf_float+0x28a>
 8006a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a28:	e795      	b.n	8006956 <_printf_float+0x1b6>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4652      	mov	r2, sl
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f af01 	beq.w	800683c <_printf_float+0x9c>
 8006a3a:	f109 0901 	add.w	r9, r9, #1
 8006a3e:	e7ee      	b.n	8006a1e <_printf_float+0x27e>
 8006a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a44:	429a      	cmp	r2, r3
 8006a46:	bfa8      	it	ge
 8006a48:	461a      	movge	r2, r3
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	4691      	mov	r9, r2
 8006a4e:	dd07      	ble.n	8006a60 <_printf_float+0x2c0>
 8006a50:	4613      	mov	r3, r2
 8006a52:	4631      	mov	r1, r6
 8006a54:	4642      	mov	r2, r8
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f43f aeee 	beq.w	800683c <_printf_float+0x9c>
 8006a60:	f104 031a 	add.w	r3, r4, #26
 8006a64:	f04f 0a00 	mov.w	sl, #0
 8006a68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a6c:	9307      	str	r3, [sp, #28]
 8006a6e:	e017      	b.n	8006aa0 <_printf_float+0x300>
 8006a70:	ffffffff 	.word	0xffffffff
 8006a74:	7fefffff 	.word	0x7fefffff
 8006a78:	080092b0 	.word	0x080092b0
 8006a7c:	080092ac 	.word	0x080092ac
 8006a80:	080092b8 	.word	0x080092b8
 8006a84:	080092b4 	.word	0x080092b4
 8006a88:	080092bc 	.word	0x080092bc
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	9a07      	ldr	r2, [sp, #28]
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f aed0 	beq.w	800683c <_printf_float+0x9c>
 8006a9c:	f10a 0a01 	add.w	sl, sl, #1
 8006aa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aa2:	9306      	str	r3, [sp, #24]
 8006aa4:	eba3 0309 	sub.w	r3, r3, r9
 8006aa8:	4553      	cmp	r3, sl
 8006aaa:	dcef      	bgt.n	8006a8c <_printf_float+0x2ec>
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	4498      	add	r8, r3
 8006ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	db15      	blt.n	8006ae4 <_printf_float+0x344>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	07da      	lsls	r2, r3, #31
 8006abc:	d412      	bmi.n	8006ae4 <_printf_float+0x344>
 8006abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac0:	9a06      	ldr	r2, [sp, #24]
 8006ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ac4:	1a9a      	subs	r2, r3, r2
 8006ac6:	eba3 0a01 	sub.w	sl, r3, r1
 8006aca:	4592      	cmp	sl, r2
 8006acc:	bfa8      	it	ge
 8006ace:	4692      	movge	sl, r2
 8006ad0:	f1ba 0f00 	cmp.w	sl, #0
 8006ad4:	dc0e      	bgt.n	8006af4 <_printf_float+0x354>
 8006ad6:	f04f 0800 	mov.w	r8, #0
 8006ada:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ade:	f104 091a 	add.w	r9, r4, #26
 8006ae2:	e019      	b.n	8006b18 <_printf_float+0x378>
 8006ae4:	9b05      	ldr	r3, [sp, #20]
 8006ae6:	465a      	mov	r2, fp
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	d1e5      	bne.n	8006abe <_printf_float+0x31e>
 8006af2:	e6a3      	b.n	800683c <_printf_float+0x9c>
 8006af4:	4653      	mov	r3, sl
 8006af6:	4642      	mov	r2, r8
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	d1e9      	bne.n	8006ad6 <_printf_float+0x336>
 8006b02:	e69b      	b.n	800683c <_printf_float+0x9c>
 8006b04:	2301      	movs	r3, #1
 8006b06:	464a      	mov	r2, r9
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f ae94 	beq.w	800683c <_printf_float+0x9c>
 8006b14:	f108 0801 	add.w	r8, r8, #1
 8006b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	eba3 030a 	sub.w	r3, r3, sl
 8006b22:	4543      	cmp	r3, r8
 8006b24:	dcee      	bgt.n	8006b04 <_printf_float+0x364>
 8006b26:	e747      	b.n	80069b8 <_printf_float+0x218>
 8006b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b2a:	2a01      	cmp	r2, #1
 8006b2c:	dc01      	bgt.n	8006b32 <_printf_float+0x392>
 8006b2e:	07db      	lsls	r3, r3, #31
 8006b30:	d539      	bpl.n	8006ba6 <_printf_float+0x406>
 8006b32:	2301      	movs	r3, #1
 8006b34:	4642      	mov	r2, r8
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b8      	blx	r7
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	f43f ae7d 	beq.w	800683c <_printf_float+0x9c>
 8006b42:	9b05      	ldr	r3, [sp, #20]
 8006b44:	465a      	mov	r2, fp
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	f108 0801 	add.w	r8, r8, #1
 8006b52:	f43f ae73 	beq.w	800683c <_printf_float+0x9c>
 8006b56:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b64:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b68:	d018      	beq.n	8006b9c <_printf_float+0x3fc>
 8006b6a:	4642      	mov	r2, r8
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b8      	blx	r7
 8006b72:	3001      	adds	r0, #1
 8006b74:	d10e      	bne.n	8006b94 <_printf_float+0x3f4>
 8006b76:	e661      	b.n	800683c <_printf_float+0x9c>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	464a      	mov	r2, r9
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	f43f ae5a 	beq.w	800683c <_printf_float+0x9c>
 8006b88:	f108 0801 	add.w	r8, r8, #1
 8006b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	4543      	cmp	r3, r8
 8006b92:	dcf1      	bgt.n	8006b78 <_printf_float+0x3d8>
 8006b94:	4653      	mov	r3, sl
 8006b96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b9a:	e6dd      	b.n	8006958 <_printf_float+0x1b8>
 8006b9c:	f04f 0800 	mov.w	r8, #0
 8006ba0:	f104 091a 	add.w	r9, r4, #26
 8006ba4:	e7f2      	b.n	8006b8c <_printf_float+0x3ec>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e7df      	b.n	8006b6a <_printf_float+0x3ca>
 8006baa:	2301      	movs	r3, #1
 8006bac:	464a      	mov	r2, r9
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b8      	blx	r7
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	f43f ae41 	beq.w	800683c <_printf_float+0x9c>
 8006bba:	f108 0801 	add.w	r8, r8, #1
 8006bbe:	68e3      	ldr	r3, [r4, #12]
 8006bc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bc2:	1a9b      	subs	r3, r3, r2
 8006bc4:	4543      	cmp	r3, r8
 8006bc6:	dcf0      	bgt.n	8006baa <_printf_float+0x40a>
 8006bc8:	e6fa      	b.n	80069c0 <_printf_float+0x220>
 8006bca:	f04f 0800 	mov.w	r8, #0
 8006bce:	f104 0919 	add.w	r9, r4, #25
 8006bd2:	e7f4      	b.n	8006bbe <_printf_float+0x41e>
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	f43f ae8a 	beq.w	80068ee <_printf_float+0x14e>
 8006bda:	f04f 0c00 	mov.w	ip, #0
 8006bde:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006be2:	e9cd 0900 	strd	r0, r9, [sp]
 8006be6:	6022      	str	r2, [r4, #0]
 8006be8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bec:	4628      	mov	r0, r5
 8006bee:	f7ff fd4f 	bl	8006690 <__cvt>
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	e64a      	b.n	800688c <_printf_float+0xec>
 8006bf6:	bf00      	nop

08006bf8 <_printf_common>:
 8006bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	4691      	mov	r9, r2
 8006bfe:	461f      	mov	r7, r3
 8006c00:	688a      	ldr	r2, [r1, #8]
 8006c02:	690b      	ldr	r3, [r1, #16]
 8006c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	bfb8      	it	lt
 8006c0c:	4613      	movlt	r3, r2
 8006c0e:	f8c9 3000 	str.w	r3, [r9]
 8006c12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c16:	4606      	mov	r6, r0
 8006c18:	460c      	mov	r4, r1
 8006c1a:	b112      	cbz	r2, 8006c22 <_printf_common+0x2a>
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	f8c9 3000 	str.w	r3, [r9]
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	0699      	lsls	r1, r3, #26
 8006c26:	bf42      	ittt	mi
 8006c28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c2c:	3302      	addmi	r3, #2
 8006c2e:	f8c9 3000 	strmi.w	r3, [r9]
 8006c32:	6825      	ldr	r5, [r4, #0]
 8006c34:	f015 0506 	ands.w	r5, r5, #6
 8006c38:	d107      	bne.n	8006c4a <_printf_common+0x52>
 8006c3a:	f104 0a19 	add.w	sl, r4, #25
 8006c3e:	68e3      	ldr	r3, [r4, #12]
 8006c40:	f8d9 2000 	ldr.w	r2, [r9]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	42ab      	cmp	r3, r5
 8006c48:	dc28      	bgt.n	8006c9c <_printf_common+0xa4>
 8006c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	3300      	adds	r3, #0
 8006c52:	bf18      	it	ne
 8006c54:	2301      	movne	r3, #1
 8006c56:	0692      	lsls	r2, r2, #26
 8006c58:	d42d      	bmi.n	8006cb6 <_printf_common+0xbe>
 8006c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c5e:	4639      	mov	r1, r7
 8006c60:	4630      	mov	r0, r6
 8006c62:	47c0      	blx	r8
 8006c64:	3001      	adds	r0, #1
 8006c66:	d020      	beq.n	8006caa <_printf_common+0xb2>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	68e5      	ldr	r5, [r4, #12]
 8006c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c70:	f003 0306 	and.w	r3, r3, #6
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	bf08      	it	eq
 8006c78:	1aad      	subeq	r5, r5, r2
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	6922      	ldr	r2, [r4, #16]
 8006c7e:	bf0c      	ite	eq
 8006c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c84:	2500      	movne	r5, #0
 8006c86:	4293      	cmp	r3, r2
 8006c88:	bfc4      	itt	gt
 8006c8a:	1a9b      	subgt	r3, r3, r2
 8006c8c:	18ed      	addgt	r5, r5, r3
 8006c8e:	f04f 0900 	mov.w	r9, #0
 8006c92:	341a      	adds	r4, #26
 8006c94:	454d      	cmp	r5, r9
 8006c96:	d11a      	bne.n	8006cce <_printf_common+0xd6>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	e008      	b.n	8006cae <_printf_common+0xb6>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	4652      	mov	r2, sl
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	47c0      	blx	r8
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d103      	bne.n	8006cb2 <_printf_common+0xba>
 8006caa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	e7c3      	b.n	8006c3e <_printf_common+0x46>
 8006cb6:	18e1      	adds	r1, r4, r3
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	2030      	movs	r0, #48	; 0x30
 8006cbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cc0:	4422      	add	r2, r4
 8006cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cca:	3302      	adds	r3, #2
 8006ccc:	e7c5      	b.n	8006c5a <_printf_common+0x62>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	47c0      	blx	r8
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d0e6      	beq.n	8006caa <_printf_common+0xb2>
 8006cdc:	f109 0901 	add.w	r9, r9, #1
 8006ce0:	e7d8      	b.n	8006c94 <_printf_common+0x9c>
	...

08006ce4 <_printf_i>:
 8006ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ce8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006cec:	460c      	mov	r4, r1
 8006cee:	7e09      	ldrb	r1, [r1, #24]
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	296e      	cmp	r1, #110	; 0x6e
 8006cf4:	4617      	mov	r7, r2
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	4698      	mov	r8, r3
 8006cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cfc:	f000 80b3 	beq.w	8006e66 <_printf_i+0x182>
 8006d00:	d822      	bhi.n	8006d48 <_printf_i+0x64>
 8006d02:	2963      	cmp	r1, #99	; 0x63
 8006d04:	d036      	beq.n	8006d74 <_printf_i+0x90>
 8006d06:	d80a      	bhi.n	8006d1e <_printf_i+0x3a>
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	f000 80b9 	beq.w	8006e80 <_printf_i+0x19c>
 8006d0e:	2958      	cmp	r1, #88	; 0x58
 8006d10:	f000 8083 	beq.w	8006e1a <_printf_i+0x136>
 8006d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d1c:	e032      	b.n	8006d84 <_printf_i+0xa0>
 8006d1e:	2964      	cmp	r1, #100	; 0x64
 8006d20:	d001      	beq.n	8006d26 <_printf_i+0x42>
 8006d22:	2969      	cmp	r1, #105	; 0x69
 8006d24:	d1f6      	bne.n	8006d14 <_printf_i+0x30>
 8006d26:	6820      	ldr	r0, [r4, #0]
 8006d28:	6813      	ldr	r3, [r2, #0]
 8006d2a:	0605      	lsls	r5, r0, #24
 8006d2c:	f103 0104 	add.w	r1, r3, #4
 8006d30:	d52a      	bpl.n	8006d88 <_printf_i+0xa4>
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6011      	str	r1, [r2, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da03      	bge.n	8006d42 <_printf_i+0x5e>
 8006d3a:	222d      	movs	r2, #45	; 0x2d
 8006d3c:	425b      	negs	r3, r3
 8006d3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d42:	486f      	ldr	r0, [pc, #444]	; (8006f00 <_printf_i+0x21c>)
 8006d44:	220a      	movs	r2, #10
 8006d46:	e039      	b.n	8006dbc <_printf_i+0xd8>
 8006d48:	2973      	cmp	r1, #115	; 0x73
 8006d4a:	f000 809d 	beq.w	8006e88 <_printf_i+0x1a4>
 8006d4e:	d808      	bhi.n	8006d62 <_printf_i+0x7e>
 8006d50:	296f      	cmp	r1, #111	; 0x6f
 8006d52:	d020      	beq.n	8006d96 <_printf_i+0xb2>
 8006d54:	2970      	cmp	r1, #112	; 0x70
 8006d56:	d1dd      	bne.n	8006d14 <_printf_i+0x30>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	f043 0320 	orr.w	r3, r3, #32
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	e003      	b.n	8006d6a <_printf_i+0x86>
 8006d62:	2975      	cmp	r1, #117	; 0x75
 8006d64:	d017      	beq.n	8006d96 <_printf_i+0xb2>
 8006d66:	2978      	cmp	r1, #120	; 0x78
 8006d68:	d1d4      	bne.n	8006d14 <_printf_i+0x30>
 8006d6a:	2378      	movs	r3, #120	; 0x78
 8006d6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d70:	4864      	ldr	r0, [pc, #400]	; (8006f04 <_printf_i+0x220>)
 8006d72:	e055      	b.n	8006e20 <_printf_i+0x13c>
 8006d74:	6813      	ldr	r3, [r2, #0]
 8006d76:	1d19      	adds	r1, r3, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6011      	str	r1, [r2, #0]
 8006d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d84:	2301      	movs	r3, #1
 8006d86:	e08c      	b.n	8006ea2 <_printf_i+0x1be>
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6011      	str	r1, [r2, #0]
 8006d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d90:	bf18      	it	ne
 8006d92:	b21b      	sxthne	r3, r3
 8006d94:	e7cf      	b.n	8006d36 <_printf_i+0x52>
 8006d96:	6813      	ldr	r3, [r2, #0]
 8006d98:	6825      	ldr	r5, [r4, #0]
 8006d9a:	1d18      	adds	r0, r3, #4
 8006d9c:	6010      	str	r0, [r2, #0]
 8006d9e:	0628      	lsls	r0, r5, #24
 8006da0:	d501      	bpl.n	8006da6 <_printf_i+0xc2>
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	e002      	b.n	8006dac <_printf_i+0xc8>
 8006da6:	0668      	lsls	r0, r5, #25
 8006da8:	d5fb      	bpl.n	8006da2 <_printf_i+0xbe>
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	4854      	ldr	r0, [pc, #336]	; (8006f00 <_printf_i+0x21c>)
 8006dae:	296f      	cmp	r1, #111	; 0x6f
 8006db0:	bf14      	ite	ne
 8006db2:	220a      	movne	r2, #10
 8006db4:	2208      	moveq	r2, #8
 8006db6:	2100      	movs	r1, #0
 8006db8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dbc:	6865      	ldr	r5, [r4, #4]
 8006dbe:	60a5      	str	r5, [r4, #8]
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	f2c0 8095 	blt.w	8006ef0 <_printf_i+0x20c>
 8006dc6:	6821      	ldr	r1, [r4, #0]
 8006dc8:	f021 0104 	bic.w	r1, r1, #4
 8006dcc:	6021      	str	r1, [r4, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d13d      	bne.n	8006e4e <_printf_i+0x16a>
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	f040 808e 	bne.w	8006ef4 <_printf_i+0x210>
 8006dd8:	4665      	mov	r5, ip
 8006dda:	2a08      	cmp	r2, #8
 8006ddc:	d10b      	bne.n	8006df6 <_printf_i+0x112>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	07db      	lsls	r3, r3, #31
 8006de2:	d508      	bpl.n	8006df6 <_printf_i+0x112>
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	6862      	ldr	r2, [r4, #4]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	bfde      	ittt	le
 8006dec:	2330      	movle	r3, #48	; 0x30
 8006dee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006df2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006df6:	ebac 0305 	sub.w	r3, ip, r5
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	f8cd 8000 	str.w	r8, [sp]
 8006e00:	463b      	mov	r3, r7
 8006e02:	aa03      	add	r2, sp, #12
 8006e04:	4621      	mov	r1, r4
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7ff fef6 	bl	8006bf8 <_printf_common>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d14d      	bne.n	8006eac <_printf_i+0x1c8>
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	b005      	add	sp, #20
 8006e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e1a:	4839      	ldr	r0, [pc, #228]	; (8006f00 <_printf_i+0x21c>)
 8006e1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e20:	6813      	ldr	r3, [r2, #0]
 8006e22:	6821      	ldr	r1, [r4, #0]
 8006e24:	1d1d      	adds	r5, r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6015      	str	r5, [r2, #0]
 8006e2a:	060a      	lsls	r2, r1, #24
 8006e2c:	d50b      	bpl.n	8006e46 <_printf_i+0x162>
 8006e2e:	07ca      	lsls	r2, r1, #31
 8006e30:	bf44      	itt	mi
 8006e32:	f041 0120 	orrmi.w	r1, r1, #32
 8006e36:	6021      	strmi	r1, [r4, #0]
 8006e38:	b91b      	cbnz	r3, 8006e42 <_printf_i+0x15e>
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	f022 0220 	bic.w	r2, r2, #32
 8006e40:	6022      	str	r2, [r4, #0]
 8006e42:	2210      	movs	r2, #16
 8006e44:	e7b7      	b.n	8006db6 <_printf_i+0xd2>
 8006e46:	064d      	lsls	r5, r1, #25
 8006e48:	bf48      	it	mi
 8006e4a:	b29b      	uxthmi	r3, r3
 8006e4c:	e7ef      	b.n	8006e2e <_printf_i+0x14a>
 8006e4e:	4665      	mov	r5, ip
 8006e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e54:	fb02 3311 	mls	r3, r2, r1, r3
 8006e58:	5cc3      	ldrb	r3, [r0, r3]
 8006e5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e5e:	460b      	mov	r3, r1
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d1f5      	bne.n	8006e50 <_printf_i+0x16c>
 8006e64:	e7b9      	b.n	8006dda <_printf_i+0xf6>
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	6825      	ldr	r5, [r4, #0]
 8006e6a:	6961      	ldr	r1, [r4, #20]
 8006e6c:	1d18      	adds	r0, r3, #4
 8006e6e:	6010      	str	r0, [r2, #0]
 8006e70:	0628      	lsls	r0, r5, #24
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	d501      	bpl.n	8006e7a <_printf_i+0x196>
 8006e76:	6019      	str	r1, [r3, #0]
 8006e78:	e002      	b.n	8006e80 <_printf_i+0x19c>
 8006e7a:	066a      	lsls	r2, r5, #25
 8006e7c:	d5fb      	bpl.n	8006e76 <_printf_i+0x192>
 8006e7e:	8019      	strh	r1, [r3, #0]
 8006e80:	2300      	movs	r3, #0
 8006e82:	6123      	str	r3, [r4, #16]
 8006e84:	4665      	mov	r5, ip
 8006e86:	e7b9      	b.n	8006dfc <_printf_i+0x118>
 8006e88:	6813      	ldr	r3, [r2, #0]
 8006e8a:	1d19      	adds	r1, r3, #4
 8006e8c:	6011      	str	r1, [r2, #0]
 8006e8e:	681d      	ldr	r5, [r3, #0]
 8006e90:	6862      	ldr	r2, [r4, #4]
 8006e92:	2100      	movs	r1, #0
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7f9 fa2b 	bl	80002f0 <memchr>
 8006e9a:	b108      	cbz	r0, 8006ea0 <_printf_i+0x1bc>
 8006e9c:	1b40      	subs	r0, r0, r5
 8006e9e:	6060      	str	r0, [r4, #4]
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eaa:	e7a7      	b.n	8006dfc <_printf_i+0x118>
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	462a      	mov	r2, r5
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	47c0      	blx	r8
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d0aa      	beq.n	8006e10 <_printf_i+0x12c>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	079b      	lsls	r3, r3, #30
 8006ebe:	d413      	bmi.n	8006ee8 <_printf_i+0x204>
 8006ec0:	68e0      	ldr	r0, [r4, #12]
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	4298      	cmp	r0, r3
 8006ec6:	bfb8      	it	lt
 8006ec8:	4618      	movlt	r0, r3
 8006eca:	e7a3      	b.n	8006e14 <_printf_i+0x130>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	464a      	mov	r2, r9
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	47c0      	blx	r8
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d09a      	beq.n	8006e10 <_printf_i+0x12c>
 8006eda:	3501      	adds	r5, #1
 8006edc:	68e3      	ldr	r3, [r4, #12]
 8006ede:	9a03      	ldr	r2, [sp, #12]
 8006ee0:	1a9b      	subs	r3, r3, r2
 8006ee2:	42ab      	cmp	r3, r5
 8006ee4:	dcf2      	bgt.n	8006ecc <_printf_i+0x1e8>
 8006ee6:	e7eb      	b.n	8006ec0 <_printf_i+0x1dc>
 8006ee8:	2500      	movs	r5, #0
 8006eea:	f104 0919 	add.w	r9, r4, #25
 8006eee:	e7f5      	b.n	8006edc <_printf_i+0x1f8>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1ac      	bne.n	8006e4e <_printf_i+0x16a>
 8006ef4:	7803      	ldrb	r3, [r0, #0]
 8006ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006efa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006efe:	e76c      	b.n	8006dda <_printf_i+0xf6>
 8006f00:	080092be 	.word	0x080092be
 8006f04:	080092cf 	.word	0x080092cf

08006f08 <siprintf>:
 8006f08:	b40e      	push	{r1, r2, r3}
 8006f0a:	b500      	push	{lr}
 8006f0c:	b09c      	sub	sp, #112	; 0x70
 8006f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f10:	9002      	str	r0, [sp, #8]
 8006f12:	9006      	str	r0, [sp, #24]
 8006f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f18:	4809      	ldr	r0, [pc, #36]	; (8006f40 <siprintf+0x38>)
 8006f1a:	9107      	str	r1, [sp, #28]
 8006f1c:	9104      	str	r1, [sp, #16]
 8006f1e:	4909      	ldr	r1, [pc, #36]	; (8006f44 <siprintf+0x3c>)
 8006f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f24:	9105      	str	r1, [sp, #20]
 8006f26:	6800      	ldr	r0, [r0, #0]
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	a902      	add	r1, sp, #8
 8006f2c:	f001 f9f0 	bl	8008310 <_svfiprintf_r>
 8006f30:	9b02      	ldr	r3, [sp, #8]
 8006f32:	2200      	movs	r2, #0
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	b01c      	add	sp, #112	; 0x70
 8006f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f3c:	b003      	add	sp, #12
 8006f3e:	4770      	bx	lr
 8006f40:	20000010 	.word	0x20000010
 8006f44:	ffff0208 	.word	0xffff0208

08006f48 <quorem>:
 8006f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	6903      	ldr	r3, [r0, #16]
 8006f4e:	690c      	ldr	r4, [r1, #16]
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	4680      	mov	r8, r0
 8006f54:	f2c0 8082 	blt.w	800705c <quorem+0x114>
 8006f58:	3c01      	subs	r4, #1
 8006f5a:	f101 0714 	add.w	r7, r1, #20
 8006f5e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006f62:	f100 0614 	add.w	r6, r0, #20
 8006f66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006f6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006f6e:	eb06 030c 	add.w	r3, r6, ip
 8006f72:	3501      	adds	r5, #1
 8006f74:	eb07 090c 	add.w	r9, r7, ip
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	fbb0 f5f5 	udiv	r5, r0, r5
 8006f7e:	b395      	cbz	r5, 8006fe6 <quorem+0x9e>
 8006f80:	f04f 0a00 	mov.w	sl, #0
 8006f84:	4638      	mov	r0, r7
 8006f86:	46b6      	mov	lr, r6
 8006f88:	46d3      	mov	fp, sl
 8006f8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f8e:	b293      	uxth	r3, r2
 8006f90:	fb05 a303 	mla	r3, r5, r3, sl
 8006f94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ebab 0303 	sub.w	r3, fp, r3
 8006f9e:	0c12      	lsrs	r2, r2, #16
 8006fa0:	f8de b000 	ldr.w	fp, [lr]
 8006fa4:	fb05 a202 	mla	r2, r5, r2, sl
 8006fa8:	fa13 f38b 	uxtah	r3, r3, fp
 8006fac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006fb0:	fa1f fb82 	uxth.w	fp, r2
 8006fb4:	f8de 2000 	ldr.w	r2, [lr]
 8006fb8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006fbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fc6:	4581      	cmp	r9, r0
 8006fc8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006fcc:	f84e 3b04 	str.w	r3, [lr], #4
 8006fd0:	d2db      	bcs.n	8006f8a <quorem+0x42>
 8006fd2:	f856 300c 	ldr.w	r3, [r6, ip]
 8006fd6:	b933      	cbnz	r3, 8006fe6 <quorem+0x9e>
 8006fd8:	9b01      	ldr	r3, [sp, #4]
 8006fda:	3b04      	subs	r3, #4
 8006fdc:	429e      	cmp	r6, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	d330      	bcc.n	8007044 <quorem+0xfc>
 8006fe2:	f8c8 4010 	str.w	r4, [r8, #16]
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	f000 ffbc 	bl	8007f64 <__mcmp>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	db25      	blt.n	800703c <quorem+0xf4>
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f04f 0c00 	mov.w	ip, #0
 8006ff8:	f857 2b04 	ldr.w	r2, [r7], #4
 8006ffc:	f8d0 e000 	ldr.w	lr, [r0]
 8007000:	b293      	uxth	r3, r2
 8007002:	ebac 0303 	sub.w	r3, ip, r3
 8007006:	0c12      	lsrs	r2, r2, #16
 8007008:	fa13 f38e 	uxtah	r3, r3, lr
 800700c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007014:	b29b      	uxth	r3, r3
 8007016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800701a:	45b9      	cmp	r9, r7
 800701c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007020:	f840 3b04 	str.w	r3, [r0], #4
 8007024:	d2e8      	bcs.n	8006ff8 <quorem+0xb0>
 8007026:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800702a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800702e:	b92a      	cbnz	r2, 800703c <quorem+0xf4>
 8007030:	3b04      	subs	r3, #4
 8007032:	429e      	cmp	r6, r3
 8007034:	461a      	mov	r2, r3
 8007036:	d30b      	bcc.n	8007050 <quorem+0x108>
 8007038:	f8c8 4010 	str.w	r4, [r8, #16]
 800703c:	4628      	mov	r0, r5
 800703e:	b003      	add	sp, #12
 8007040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	3b04      	subs	r3, #4
 8007048:	2a00      	cmp	r2, #0
 800704a:	d1ca      	bne.n	8006fe2 <quorem+0x9a>
 800704c:	3c01      	subs	r4, #1
 800704e:	e7c5      	b.n	8006fdc <quorem+0x94>
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	3b04      	subs	r3, #4
 8007054:	2a00      	cmp	r2, #0
 8007056:	d1ef      	bne.n	8007038 <quorem+0xf0>
 8007058:	3c01      	subs	r4, #1
 800705a:	e7ea      	b.n	8007032 <quorem+0xea>
 800705c:	2000      	movs	r0, #0
 800705e:	e7ee      	b.n	800703e <quorem+0xf6>

08007060 <_dtoa_r>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	ec57 6b10 	vmov	r6, r7, d0
 8007068:	b095      	sub	sp, #84	; 0x54
 800706a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800706c:	9108      	str	r1, [sp, #32]
 800706e:	4604      	mov	r4, r0
 8007070:	920a      	str	r2, [sp, #40]	; 0x28
 8007072:	9311      	str	r3, [sp, #68]	; 0x44
 8007074:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007078:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800707c:	b93d      	cbnz	r5, 800708e <_dtoa_r+0x2e>
 800707e:	2010      	movs	r0, #16
 8007080:	f000 fd48 	bl	8007b14 <malloc>
 8007084:	6260      	str	r0, [r4, #36]	; 0x24
 8007086:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800708a:	6005      	str	r5, [r0, #0]
 800708c:	60c5      	str	r5, [r0, #12]
 800708e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007090:	6819      	ldr	r1, [r3, #0]
 8007092:	b151      	cbz	r1, 80070aa <_dtoa_r+0x4a>
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	604a      	str	r2, [r1, #4]
 8007098:	2301      	movs	r3, #1
 800709a:	4093      	lsls	r3, r2
 800709c:	608b      	str	r3, [r1, #8]
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fd7f 	bl	8007ba2 <_Bfree>
 80070a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	1e3b      	subs	r3, r7, #0
 80070ac:	bfb9      	ittee	lt
 80070ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070b2:	9303      	strlt	r3, [sp, #12]
 80070b4:	2300      	movge	r3, #0
 80070b6:	f8c8 3000 	strge.w	r3, [r8]
 80070ba:	9d03      	ldr	r5, [sp, #12]
 80070bc:	4bac      	ldr	r3, [pc, #688]	; (8007370 <_dtoa_r+0x310>)
 80070be:	bfbc      	itt	lt
 80070c0:	2201      	movlt	r2, #1
 80070c2:	f8c8 2000 	strlt.w	r2, [r8]
 80070c6:	43ab      	bics	r3, r5
 80070c8:	d11b      	bne.n	8007102 <_dtoa_r+0xa2>
 80070ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80070cc:	f242 730f 	movw	r3, #9999	; 0x270f
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	9b02      	ldr	r3, [sp, #8]
 80070d4:	b923      	cbnz	r3, 80070e0 <_dtoa_r+0x80>
 80070d6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80070da:	2d00      	cmp	r5, #0
 80070dc:	f000 84dd 	beq.w	8007a9a <_dtoa_r+0xa3a>
 80070e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070e2:	b953      	cbnz	r3, 80070fa <_dtoa_r+0x9a>
 80070e4:	4ba3      	ldr	r3, [pc, #652]	; (8007374 <_dtoa_r+0x314>)
 80070e6:	e020      	b.n	800712a <_dtoa_r+0xca>
 80070e8:	4ba3      	ldr	r3, [pc, #652]	; (8007378 <_dtoa_r+0x318>)
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	3308      	adds	r3, #8
 80070ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	9804      	ldr	r0, [sp, #16]
 80070f4:	b015      	add	sp, #84	; 0x54
 80070f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fa:	4b9e      	ldr	r3, [pc, #632]	; (8007374 <_dtoa_r+0x314>)
 80070fc:	9304      	str	r3, [sp, #16]
 80070fe:	3303      	adds	r3, #3
 8007100:	e7f5      	b.n	80070ee <_dtoa_r+0x8e>
 8007102:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007106:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800710a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007112:	d10c      	bne.n	800712e <_dtoa_r+0xce>
 8007114:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007116:	2301      	movs	r3, #1
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 84b9 	beq.w	8007a94 <_dtoa_r+0xa34>
 8007122:	4b96      	ldr	r3, [pc, #600]	; (800737c <_dtoa_r+0x31c>)
 8007124:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	3b01      	subs	r3, #1
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	e7e1      	b.n	80070f2 <_dtoa_r+0x92>
 800712e:	a913      	add	r1, sp, #76	; 0x4c
 8007130:	aa12      	add	r2, sp, #72	; 0x48
 8007132:	ed9d 0b04 	vldr	d0, [sp, #16]
 8007136:	4620      	mov	r0, r4
 8007138:	f000 ff8b 	bl	8008052 <__d2b>
 800713c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8007140:	9001      	str	r0, [sp, #4]
 8007142:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007144:	2e00      	cmp	r6, #0
 8007146:	d046      	beq.n	80071d6 <_dtoa_r+0x176>
 8007148:	9805      	ldr	r0, [sp, #20]
 800714a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800714e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007152:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8007156:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800715a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800715e:	2700      	movs	r7, #0
 8007160:	ee07 aa90 	vmov	s15, sl
 8007164:	ec43 2b16 	vmov	d6, r2, r3
 8007168:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800716c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8007358 <_dtoa_r+0x2f8>
 8007170:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007174:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007178:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007360 <_dtoa_r+0x300>
 800717c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8007180:	eeb0 7b46 	vmov.f64	d7, d6
 8007184:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8007368 <_dtoa_r+0x308>
 8007188:	eea5 7b06 	vfma.f64	d7, d5, d6
 800718c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007190:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007198:	ee16 ba90 	vmov	fp, s13
 800719c:	d508      	bpl.n	80071b0 <_dtoa_r+0x150>
 800719e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80071a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80071a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071aa:	bf18      	it	ne
 80071ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80071b0:	f1bb 0f16 	cmp.w	fp, #22
 80071b4:	d834      	bhi.n	8007220 <_dtoa_r+0x1c0>
 80071b6:	4b72      	ldr	r3, [pc, #456]	; (8007380 <_dtoa_r+0x320>)
 80071b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071bc:	ed93 7b00 	vldr	d7, [r3]
 80071c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80071c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071cc:	dd01      	ble.n	80071d2 <_dtoa_r+0x172>
 80071ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071d2:	2300      	movs	r3, #0
 80071d4:	e025      	b.n	8007222 <_dtoa_r+0x1c2>
 80071d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071d8:	eb01 0a03 	add.w	sl, r1, r3
 80071dc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	dd17      	ble.n	8007214 <_dtoa_r+0x1b4>
 80071e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80071e8:	9a02      	ldr	r2, [sp, #8]
 80071ea:	409d      	lsls	r5, r3
 80071ec:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	432b      	orrs	r3, r5
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80071fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007202:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007206:	9805      	ldr	r0, [sp, #20]
 8007208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800720c:	2701      	movs	r7, #1
 800720e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8007212:	e7a5      	b.n	8007160 <_dtoa_r+0x100>
 8007214:	9a02      	ldr	r2, [sp, #8]
 8007216:	f1c3 0320 	rsb	r3, r3, #32
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	e7ea      	b.n	80071f6 <_dtoa_r+0x196>
 8007220:	2301      	movs	r3, #1
 8007222:	eba1 0a0a 	sub.w	sl, r1, sl
 8007226:	9310      	str	r3, [sp, #64]	; 0x40
 8007228:	f1ba 0301 	subs.w	r3, sl, #1
 800722c:	9307      	str	r3, [sp, #28]
 800722e:	bf43      	ittte	mi
 8007230:	2300      	movmi	r3, #0
 8007232:	f1ca 0a01 	rsbmi	sl, sl, #1
 8007236:	9307      	strmi	r3, [sp, #28]
 8007238:	f04f 0a00 	movpl.w	sl, #0
 800723c:	f1bb 0f00 	cmp.w	fp, #0
 8007240:	db19      	blt.n	8007276 <_dtoa_r+0x216>
 8007242:	9b07      	ldr	r3, [sp, #28]
 8007244:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007248:	445b      	add	r3, fp
 800724a:	9307      	str	r3, [sp, #28]
 800724c:	f04f 0800 	mov.w	r8, #0
 8007250:	9b08      	ldr	r3, [sp, #32]
 8007252:	2b09      	cmp	r3, #9
 8007254:	d866      	bhi.n	8007324 <_dtoa_r+0x2c4>
 8007256:	2b05      	cmp	r3, #5
 8007258:	bfc4      	itt	gt
 800725a:	3b04      	subgt	r3, #4
 800725c:	9308      	strgt	r3, [sp, #32]
 800725e:	9b08      	ldr	r3, [sp, #32]
 8007260:	f1a3 0302 	sub.w	r3, r3, #2
 8007264:	bfcc      	ite	gt
 8007266:	2500      	movgt	r5, #0
 8007268:	2501      	movle	r5, #1
 800726a:	2b03      	cmp	r3, #3
 800726c:	d866      	bhi.n	800733c <_dtoa_r+0x2dc>
 800726e:	e8df f003 	tbb	[pc, r3]
 8007272:	5755      	.short	0x5755
 8007274:	4909      	.short	0x4909
 8007276:	2300      	movs	r3, #0
 8007278:	ebaa 0a0b 	sub.w	sl, sl, fp
 800727c:	f1cb 0800 	rsb	r8, fp, #0
 8007280:	930b      	str	r3, [sp, #44]	; 0x2c
 8007282:	e7e5      	b.n	8007250 <_dtoa_r+0x1f0>
 8007284:	2301      	movs	r3, #1
 8007286:	9309      	str	r3, [sp, #36]	; 0x24
 8007288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	dd59      	ble.n	8007342 <_dtoa_r+0x2e2>
 800728e:	9306      	str	r3, [sp, #24]
 8007290:	4699      	mov	r9, r3
 8007292:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007294:	2200      	movs	r2, #0
 8007296:	6072      	str	r2, [r6, #4]
 8007298:	2204      	movs	r2, #4
 800729a:	f102 0014 	add.w	r0, r2, #20
 800729e:	4298      	cmp	r0, r3
 80072a0:	6871      	ldr	r1, [r6, #4]
 80072a2:	d953      	bls.n	800734c <_dtoa_r+0x2ec>
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 fc48 	bl	8007b3a <_Balloc>
 80072aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ac:	6030      	str	r0, [r6, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	f1b9 0f0e 	cmp.w	r9, #14
 80072b6:	f200 80c2 	bhi.w	800743e <_dtoa_r+0x3de>
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	f000 80bf 	beq.w	800743e <_dtoa_r+0x3de>
 80072c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072c4:	f1bb 0f00 	cmp.w	fp, #0
 80072c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80072cc:	f340 80e6 	ble.w	800749c <_dtoa_r+0x43c>
 80072d0:	4a2b      	ldr	r2, [pc, #172]	; (8007380 <_dtoa_r+0x320>)
 80072d2:	f00b 030f 	and.w	r3, fp, #15
 80072d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072da:	ed93 7b00 	vldr	d7, [r3]
 80072de:	ea4f 132b 	mov.w	r3, fp, asr #4
 80072e2:	06da      	lsls	r2, r3, #27
 80072e4:	f140 80d8 	bpl.w	8007498 <_dtoa_r+0x438>
 80072e8:	4a26      	ldr	r2, [pc, #152]	; (8007384 <_dtoa_r+0x324>)
 80072ea:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80072ee:	ed92 6b08 	vldr	d6, [r2, #32]
 80072f2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80072f6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	2203      	movs	r2, #3
 8007300:	4920      	ldr	r1, [pc, #128]	; (8007384 <_dtoa_r+0x324>)
 8007302:	e04a      	b.n	800739a <_dtoa_r+0x33a>
 8007304:	2301      	movs	r3, #1
 8007306:	9309      	str	r3, [sp, #36]	; 0x24
 8007308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730a:	445b      	add	r3, fp
 800730c:	f103 0901 	add.w	r9, r3, #1
 8007310:	9306      	str	r3, [sp, #24]
 8007312:	464b      	mov	r3, r9
 8007314:	2b01      	cmp	r3, #1
 8007316:	bfb8      	it	lt
 8007318:	2301      	movlt	r3, #1
 800731a:	e7ba      	b.n	8007292 <_dtoa_r+0x232>
 800731c:	2300      	movs	r3, #0
 800731e:	e7b2      	b.n	8007286 <_dtoa_r+0x226>
 8007320:	2300      	movs	r3, #0
 8007322:	e7f0      	b.n	8007306 <_dtoa_r+0x2a6>
 8007324:	2501      	movs	r5, #1
 8007326:	2300      	movs	r3, #0
 8007328:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800732c:	f04f 33ff 	mov.w	r3, #4294967295
 8007330:	9306      	str	r3, [sp, #24]
 8007332:	4699      	mov	r9, r3
 8007334:	2200      	movs	r2, #0
 8007336:	2312      	movs	r3, #18
 8007338:	920a      	str	r2, [sp, #40]	; 0x28
 800733a:	e7aa      	b.n	8007292 <_dtoa_r+0x232>
 800733c:	2301      	movs	r3, #1
 800733e:	9309      	str	r3, [sp, #36]	; 0x24
 8007340:	e7f4      	b.n	800732c <_dtoa_r+0x2cc>
 8007342:	2301      	movs	r3, #1
 8007344:	9306      	str	r3, [sp, #24]
 8007346:	4699      	mov	r9, r3
 8007348:	461a      	mov	r2, r3
 800734a:	e7f5      	b.n	8007338 <_dtoa_r+0x2d8>
 800734c:	3101      	adds	r1, #1
 800734e:	6071      	str	r1, [r6, #4]
 8007350:	0052      	lsls	r2, r2, #1
 8007352:	e7a2      	b.n	800729a <_dtoa_r+0x23a>
 8007354:	f3af 8000 	nop.w
 8007358:	636f4361 	.word	0x636f4361
 800735c:	3fd287a7 	.word	0x3fd287a7
 8007360:	8b60c8b3 	.word	0x8b60c8b3
 8007364:	3fc68a28 	.word	0x3fc68a28
 8007368:	509f79fb 	.word	0x509f79fb
 800736c:	3fd34413 	.word	0x3fd34413
 8007370:	7ff00000 	.word	0x7ff00000
 8007374:	080092e9 	.word	0x080092e9
 8007378:	080092e0 	.word	0x080092e0
 800737c:	080092bd 	.word	0x080092bd
 8007380:	08009318 	.word	0x08009318
 8007384:	080092f0 	.word	0x080092f0
 8007388:	07de      	lsls	r6, r3, #31
 800738a:	d504      	bpl.n	8007396 <_dtoa_r+0x336>
 800738c:	ed91 6b00 	vldr	d6, [r1]
 8007390:	3201      	adds	r2, #1
 8007392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007396:	105b      	asrs	r3, r3, #1
 8007398:	3108      	adds	r1, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f4      	bne.n	8007388 <_dtoa_r+0x328>
 800739e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80073a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80073a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80a7 	beq.w	8007500 <_dtoa_r+0x4a0>
 80073b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80073b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80073be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c2:	f140 809d 	bpl.w	8007500 <_dtoa_r+0x4a0>
 80073c6:	f1b9 0f00 	cmp.w	r9, #0
 80073ca:	f000 8099 	beq.w	8007500 <_dtoa_r+0x4a0>
 80073ce:	9b06      	ldr	r3, [sp, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dd30      	ble.n	8007436 <_dtoa_r+0x3d6>
 80073d4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80073d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073e0:	9d06      	ldr	r5, [sp, #24]
 80073e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80073e6:	3201      	adds	r2, #1
 80073e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80073ec:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80073f0:	ee07 2a90 	vmov	s15, r2
 80073f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80073fc:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007400:	9a03      	ldr	r2, [sp, #12]
 8007402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007406:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800740a:	2d00      	cmp	r5, #0
 800740c:	d17b      	bne.n	8007506 <_dtoa_r+0x4a6>
 800740e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007412:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007416:	ec41 0b17 	vmov	d7, r0, r1
 800741a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007422:	f300 8253 	bgt.w	80078cc <_dtoa_r+0x86c>
 8007426:	eeb1 7b47 	vneg.f64	d7, d7
 800742a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800742e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007432:	f100 8249 	bmi.w	80078c8 <_dtoa_r+0x868>
 8007436:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800743a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800743e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007440:	2b00      	cmp	r3, #0
 8007442:	f2c0 8119 	blt.w	8007678 <_dtoa_r+0x618>
 8007446:	f1bb 0f0e 	cmp.w	fp, #14
 800744a:	f300 8115 	bgt.w	8007678 <_dtoa_r+0x618>
 800744e:	4bc3      	ldr	r3, [pc, #780]	; (800775c <_dtoa_r+0x6fc>)
 8007450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007454:	ed93 6b00 	vldr	d6, [r3]
 8007458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	f280 80ba 	bge.w	80075d4 <_dtoa_r+0x574>
 8007460:	f1b9 0f00 	cmp.w	r9, #0
 8007464:	f300 80b6 	bgt.w	80075d4 <_dtoa_r+0x574>
 8007468:	f040 822d 	bne.w	80078c6 <_dtoa_r+0x866>
 800746c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007470:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007474:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007478:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800747c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007480:	464d      	mov	r5, r9
 8007482:	464f      	mov	r7, r9
 8007484:	f280 8204 	bge.w	8007890 <_dtoa_r+0x830>
 8007488:	9b04      	ldr	r3, [sp, #16]
 800748a:	9a04      	ldr	r2, [sp, #16]
 800748c:	1c5e      	adds	r6, r3, #1
 800748e:	2331      	movs	r3, #49	; 0x31
 8007490:	7013      	strb	r3, [r2, #0]
 8007492:	f10b 0b01 	add.w	fp, fp, #1
 8007496:	e1ff      	b.n	8007898 <_dtoa_r+0x838>
 8007498:	2202      	movs	r2, #2
 800749a:	e731      	b.n	8007300 <_dtoa_r+0x2a0>
 800749c:	d02e      	beq.n	80074fc <_dtoa_r+0x49c>
 800749e:	f1cb 0300 	rsb	r3, fp, #0
 80074a2:	4aae      	ldr	r2, [pc, #696]	; (800775c <_dtoa_r+0x6fc>)
 80074a4:	f003 010f 	and.w	r1, r3, #15
 80074a8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80074ac:	ed92 7b00 	vldr	d7, [r2]
 80074b0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80074b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80074b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80074bc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80074c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80074c4:	49a6      	ldr	r1, [pc, #664]	; (8007760 <_dtoa_r+0x700>)
 80074c6:	111b      	asrs	r3, r3, #4
 80074c8:	2000      	movs	r0, #0
 80074ca:	2202      	movs	r2, #2
 80074cc:	b93b      	cbnz	r3, 80074de <_dtoa_r+0x47e>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f43f af6b 	beq.w	80073aa <_dtoa_r+0x34a>
 80074d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074dc:	e765      	b.n	80073aa <_dtoa_r+0x34a>
 80074de:	07dd      	lsls	r5, r3, #31
 80074e0:	d509      	bpl.n	80074f6 <_dtoa_r+0x496>
 80074e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80074e6:	ed91 7b00 	vldr	d7, [r1]
 80074ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80074ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80074f2:	3201      	adds	r2, #1
 80074f4:	2001      	movs	r0, #1
 80074f6:	105b      	asrs	r3, r3, #1
 80074f8:	3108      	adds	r1, #8
 80074fa:	e7e7      	b.n	80074cc <_dtoa_r+0x46c>
 80074fc:	2202      	movs	r2, #2
 80074fe:	e754      	b.n	80073aa <_dtoa_r+0x34a>
 8007500:	465b      	mov	r3, fp
 8007502:	464d      	mov	r5, r9
 8007504:	e770      	b.n	80073e8 <_dtoa_r+0x388>
 8007506:	4a95      	ldr	r2, [pc, #596]	; (800775c <_dtoa_r+0x6fc>)
 8007508:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800750c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007512:	ec41 0b17 	vmov	d7, r0, r1
 8007516:	b35a      	cbz	r2, 8007570 <_dtoa_r+0x510>
 8007518:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800751c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007520:	9e04      	ldr	r6, [sp, #16]
 8007522:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007526:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800752a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800752e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007532:	ee14 2a90 	vmov	r2, s9
 8007536:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800753a:	3230      	adds	r2, #48	; 0x30
 800753c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007540:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007548:	f806 2b01 	strb.w	r2, [r6], #1
 800754c:	d43b      	bmi.n	80075c6 <_dtoa_r+0x566>
 800754e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007552:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755a:	d472      	bmi.n	8007642 <_dtoa_r+0x5e2>
 800755c:	9a04      	ldr	r2, [sp, #16]
 800755e:	1ab2      	subs	r2, r6, r2
 8007560:	4295      	cmp	r5, r2
 8007562:	f77f af68 	ble.w	8007436 <_dtoa_r+0x3d6>
 8007566:	ee27 7b03 	vmul.f64	d7, d7, d3
 800756a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800756e:	e7de      	b.n	800752e <_dtoa_r+0x4ce>
 8007570:	9a04      	ldr	r2, [sp, #16]
 8007572:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007576:	1956      	adds	r6, r2, r5
 8007578:	4611      	mov	r1, r2
 800757a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800757e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007582:	ee14 2a90 	vmov	r2, s9
 8007586:	3230      	adds	r2, #48	; 0x30
 8007588:	f801 2b01 	strb.w	r2, [r1], #1
 800758c:	42b1      	cmp	r1, r6
 800758e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007592:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007596:	d11a      	bne.n	80075ce <_dtoa_r+0x56e>
 8007598:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800759c:	ee37 4b05 	vadd.f64	d4, d7, d5
 80075a0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80075a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a8:	dc4b      	bgt.n	8007642 <_dtoa_r+0x5e2>
 80075aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80075ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b6:	f57f af3e 	bpl.w	8007436 <_dtoa_r+0x3d6>
 80075ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80075be:	2a30      	cmp	r2, #48	; 0x30
 80075c0:	f106 31ff 	add.w	r1, r6, #4294967295
 80075c4:	d001      	beq.n	80075ca <_dtoa_r+0x56a>
 80075c6:	469b      	mov	fp, r3
 80075c8:	e02a      	b.n	8007620 <_dtoa_r+0x5c0>
 80075ca:	460e      	mov	r6, r1
 80075cc:	e7f5      	b.n	80075ba <_dtoa_r+0x55a>
 80075ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 80075d2:	e7d4      	b.n	800757e <_dtoa_r+0x51e>
 80075d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075d8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80075dc:	9e04      	ldr	r6, [sp, #16]
 80075de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80075e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80075e6:	ee15 3a10 	vmov	r3, s10
 80075ea:	3330      	adds	r3, #48	; 0x30
 80075ec:	f806 3b01 	strb.w	r3, [r6], #1
 80075f0:	9b04      	ldr	r3, [sp, #16]
 80075f2:	1af3      	subs	r3, r6, r3
 80075f4:	4599      	cmp	r9, r3
 80075f6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80075fa:	eea3 7b46 	vfms.f64	d7, d3, d6
 80075fe:	d133      	bne.n	8007668 <_dtoa_r+0x608>
 8007600:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007604:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760c:	dc18      	bgt.n	8007640 <_dtoa_r+0x5e0>
 800760e:	eeb4 7b46 	vcmp.f64	d7, d6
 8007612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007616:	d103      	bne.n	8007620 <_dtoa_r+0x5c0>
 8007618:	ee15 3a10 	vmov	r3, s10
 800761c:	07db      	lsls	r3, r3, #31
 800761e:	d40f      	bmi.n	8007640 <_dtoa_r+0x5e0>
 8007620:	9901      	ldr	r1, [sp, #4]
 8007622:	4620      	mov	r0, r4
 8007624:	f000 fabd 	bl	8007ba2 <_Bfree>
 8007628:	2300      	movs	r3, #0
 800762a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800762c:	7033      	strb	r3, [r6, #0]
 800762e:	f10b 0301 	add.w	r3, fp, #1
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007636:	2b00      	cmp	r3, #0
 8007638:	f43f ad5b 	beq.w	80070f2 <_dtoa_r+0x92>
 800763c:	601e      	str	r6, [r3, #0]
 800763e:	e558      	b.n	80070f2 <_dtoa_r+0x92>
 8007640:	465b      	mov	r3, fp
 8007642:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007646:	2939      	cmp	r1, #57	; 0x39
 8007648:	f106 32ff 	add.w	r2, r6, #4294967295
 800764c:	d106      	bne.n	800765c <_dtoa_r+0x5fc>
 800764e:	9904      	ldr	r1, [sp, #16]
 8007650:	4291      	cmp	r1, r2
 8007652:	d107      	bne.n	8007664 <_dtoa_r+0x604>
 8007654:	2230      	movs	r2, #48	; 0x30
 8007656:	700a      	strb	r2, [r1, #0]
 8007658:	3301      	adds	r3, #1
 800765a:	460a      	mov	r2, r1
 800765c:	7811      	ldrb	r1, [r2, #0]
 800765e:	3101      	adds	r1, #1
 8007660:	7011      	strb	r1, [r2, #0]
 8007662:	e7b0      	b.n	80075c6 <_dtoa_r+0x566>
 8007664:	4616      	mov	r6, r2
 8007666:	e7ec      	b.n	8007642 <_dtoa_r+0x5e2>
 8007668:	ee27 7b04 	vmul.f64	d7, d7, d4
 800766c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007674:	d1b3      	bne.n	80075de <_dtoa_r+0x57e>
 8007676:	e7d3      	b.n	8007620 <_dtoa_r+0x5c0>
 8007678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800767a:	2a00      	cmp	r2, #0
 800767c:	f000 808d 	beq.w	800779a <_dtoa_r+0x73a>
 8007680:	9a08      	ldr	r2, [sp, #32]
 8007682:	2a01      	cmp	r2, #1
 8007684:	dc72      	bgt.n	800776c <_dtoa_r+0x70c>
 8007686:	2f00      	cmp	r7, #0
 8007688:	d06c      	beq.n	8007764 <_dtoa_r+0x704>
 800768a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800768e:	4645      	mov	r5, r8
 8007690:	4656      	mov	r6, sl
 8007692:	9a07      	ldr	r2, [sp, #28]
 8007694:	2101      	movs	r1, #1
 8007696:	441a      	add	r2, r3
 8007698:	4620      	mov	r0, r4
 800769a:	449a      	add	sl, r3
 800769c:	9207      	str	r2, [sp, #28]
 800769e:	f000 fb20 	bl	8007ce2 <__i2b>
 80076a2:	4607      	mov	r7, r0
 80076a4:	2e00      	cmp	r6, #0
 80076a6:	dd0b      	ble.n	80076c0 <_dtoa_r+0x660>
 80076a8:	9b07      	ldr	r3, [sp, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dd08      	ble.n	80076c0 <_dtoa_r+0x660>
 80076ae:	42b3      	cmp	r3, r6
 80076b0:	9a07      	ldr	r2, [sp, #28]
 80076b2:	bfa8      	it	ge
 80076b4:	4633      	movge	r3, r6
 80076b6:	ebaa 0a03 	sub.w	sl, sl, r3
 80076ba:	1af6      	subs	r6, r6, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	f1b8 0f00 	cmp.w	r8, #0
 80076c4:	d01d      	beq.n	8007702 <_dtoa_r+0x6a2>
 80076c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d06a      	beq.n	80077a2 <_dtoa_r+0x742>
 80076cc:	b18d      	cbz	r5, 80076f2 <_dtoa_r+0x692>
 80076ce:	4639      	mov	r1, r7
 80076d0:	462a      	mov	r2, r5
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 fba4 	bl	8007e20 <__pow5mult>
 80076d8:	9a01      	ldr	r2, [sp, #4]
 80076da:	4601      	mov	r1, r0
 80076dc:	4607      	mov	r7, r0
 80076de:	4620      	mov	r0, r4
 80076e0:	f000 fb08 	bl	8007cf4 <__multiply>
 80076e4:	9901      	ldr	r1, [sp, #4]
 80076e6:	900c      	str	r0, [sp, #48]	; 0x30
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fa5a 	bl	8007ba2 <_Bfree>
 80076ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	ebb8 0205 	subs.w	r2, r8, r5
 80076f6:	d004      	beq.n	8007702 <_dtoa_r+0x6a2>
 80076f8:	9901      	ldr	r1, [sp, #4]
 80076fa:	4620      	mov	r0, r4
 80076fc:	f000 fb90 	bl	8007e20 <__pow5mult>
 8007700:	9001      	str	r0, [sp, #4]
 8007702:	2101      	movs	r1, #1
 8007704:	4620      	mov	r0, r4
 8007706:	f000 faec 	bl	8007ce2 <__i2b>
 800770a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800770c:	4605      	mov	r5, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 81ca 	beq.w	8007aa8 <_dtoa_r+0xa48>
 8007714:	461a      	mov	r2, r3
 8007716:	4601      	mov	r1, r0
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fb81 	bl	8007e20 <__pow5mult>
 800771e:	9b08      	ldr	r3, [sp, #32]
 8007720:	2b01      	cmp	r3, #1
 8007722:	4605      	mov	r5, r0
 8007724:	dc44      	bgt.n	80077b0 <_dtoa_r+0x750>
 8007726:	9b02      	ldr	r3, [sp, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d13c      	bne.n	80077a6 <_dtoa_r+0x746>
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007732:	2b00      	cmp	r3, #0
 8007734:	d137      	bne.n	80077a6 <_dtoa_r+0x746>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800773c:	0d1b      	lsrs	r3, r3, #20
 800773e:	051b      	lsls	r3, r3, #20
 8007740:	2b00      	cmp	r3, #0
 8007742:	d033      	beq.n	80077ac <_dtoa_r+0x74c>
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	f10a 0a01 	add.w	sl, sl, #1
 800774c:	9307      	str	r3, [sp, #28]
 800774e:	f04f 0801 	mov.w	r8, #1
 8007752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007754:	bb73      	cbnz	r3, 80077b4 <_dtoa_r+0x754>
 8007756:	2001      	movs	r0, #1
 8007758:	e034      	b.n	80077c4 <_dtoa_r+0x764>
 800775a:	bf00      	nop
 800775c:	08009318 	.word	0x08009318
 8007760:	080092f0 	.word	0x080092f0
 8007764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800776a:	e790      	b.n	800768e <_dtoa_r+0x62e>
 800776c:	f109 35ff 	add.w	r5, r9, #4294967295
 8007770:	45a8      	cmp	r8, r5
 8007772:	bfbf      	itttt	lt
 8007774:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007776:	eba5 0808 	sublt.w	r8, r5, r8
 800777a:	4443      	addlt	r3, r8
 800777c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800777e:	bfb6      	itet	lt
 8007780:	46a8      	movlt	r8, r5
 8007782:	eba8 0505 	subge.w	r5, r8, r5
 8007786:	2500      	movlt	r5, #0
 8007788:	f1b9 0f00 	cmp.w	r9, #0
 800778c:	bfb9      	ittee	lt
 800778e:	ebaa 0609 	sublt.w	r6, sl, r9
 8007792:	2300      	movlt	r3, #0
 8007794:	4656      	movge	r6, sl
 8007796:	464b      	movge	r3, r9
 8007798:	e77b      	b.n	8007692 <_dtoa_r+0x632>
 800779a:	4645      	mov	r5, r8
 800779c:	4656      	mov	r6, sl
 800779e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077a0:	e780      	b.n	80076a4 <_dtoa_r+0x644>
 80077a2:	4642      	mov	r2, r8
 80077a4:	e7a8      	b.n	80076f8 <_dtoa_r+0x698>
 80077a6:	f04f 0800 	mov.w	r8, #0
 80077aa:	e7d2      	b.n	8007752 <_dtoa_r+0x6f2>
 80077ac:	4698      	mov	r8, r3
 80077ae:	e7d0      	b.n	8007752 <_dtoa_r+0x6f2>
 80077b0:	f04f 0800 	mov.w	r8, #0
 80077b4:	692b      	ldr	r3, [r5, #16]
 80077b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80077ba:	6918      	ldr	r0, [r3, #16]
 80077bc:	f000 fa43 	bl	8007c46 <__hi0bits>
 80077c0:	f1c0 0020 	rsb	r0, r0, #32
 80077c4:	9b07      	ldr	r3, [sp, #28]
 80077c6:	4418      	add	r0, r3
 80077c8:	f010 001f 	ands.w	r0, r0, #31
 80077cc:	d047      	beq.n	800785e <_dtoa_r+0x7fe>
 80077ce:	f1c0 0320 	rsb	r3, r0, #32
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	dd3b      	ble.n	800784e <_dtoa_r+0x7ee>
 80077d6:	9b07      	ldr	r3, [sp, #28]
 80077d8:	f1c0 001c 	rsb	r0, r0, #28
 80077dc:	4482      	add	sl, r0
 80077de:	4406      	add	r6, r0
 80077e0:	4403      	add	r3, r0
 80077e2:	9307      	str	r3, [sp, #28]
 80077e4:	f1ba 0f00 	cmp.w	sl, #0
 80077e8:	dd05      	ble.n	80077f6 <_dtoa_r+0x796>
 80077ea:	4652      	mov	r2, sl
 80077ec:	9901      	ldr	r1, [sp, #4]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 fb64 	bl	8007ebc <__lshift>
 80077f4:	9001      	str	r0, [sp, #4]
 80077f6:	9b07      	ldr	r3, [sp, #28]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dd05      	ble.n	8007808 <_dtoa_r+0x7a8>
 80077fc:	4629      	mov	r1, r5
 80077fe:	461a      	mov	r2, r3
 8007800:	4620      	mov	r0, r4
 8007802:	f000 fb5b 	bl	8007ebc <__lshift>
 8007806:	4605      	mov	r5, r0
 8007808:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800780a:	b353      	cbz	r3, 8007862 <_dtoa_r+0x802>
 800780c:	4629      	mov	r1, r5
 800780e:	9801      	ldr	r0, [sp, #4]
 8007810:	f000 fba8 	bl	8007f64 <__mcmp>
 8007814:	2800      	cmp	r0, #0
 8007816:	da24      	bge.n	8007862 <_dtoa_r+0x802>
 8007818:	2300      	movs	r3, #0
 800781a:	220a      	movs	r2, #10
 800781c:	9901      	ldr	r1, [sp, #4]
 800781e:	4620      	mov	r0, r4
 8007820:	f000 f9d6 	bl	8007bd0 <__multadd>
 8007824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007826:	9001      	str	r0, [sp, #4]
 8007828:	f10b 3bff 	add.w	fp, fp, #4294967295
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8142 	beq.w	8007ab6 <_dtoa_r+0xa56>
 8007832:	2300      	movs	r3, #0
 8007834:	4639      	mov	r1, r7
 8007836:	220a      	movs	r2, #10
 8007838:	4620      	mov	r0, r4
 800783a:	f000 f9c9 	bl	8007bd0 <__multadd>
 800783e:	9b06      	ldr	r3, [sp, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	4607      	mov	r7, r0
 8007844:	dc4b      	bgt.n	80078de <_dtoa_r+0x87e>
 8007846:	9b08      	ldr	r3, [sp, #32]
 8007848:	2b02      	cmp	r3, #2
 800784a:	dd48      	ble.n	80078de <_dtoa_r+0x87e>
 800784c:	e011      	b.n	8007872 <_dtoa_r+0x812>
 800784e:	d0c9      	beq.n	80077e4 <_dtoa_r+0x784>
 8007850:	9a07      	ldr	r2, [sp, #28]
 8007852:	331c      	adds	r3, #28
 8007854:	441a      	add	r2, r3
 8007856:	449a      	add	sl, r3
 8007858:	441e      	add	r6, r3
 800785a:	4613      	mov	r3, r2
 800785c:	e7c1      	b.n	80077e2 <_dtoa_r+0x782>
 800785e:	4603      	mov	r3, r0
 8007860:	e7f6      	b.n	8007850 <_dtoa_r+0x7f0>
 8007862:	f1b9 0f00 	cmp.w	r9, #0
 8007866:	dc34      	bgt.n	80078d2 <_dtoa_r+0x872>
 8007868:	9b08      	ldr	r3, [sp, #32]
 800786a:	2b02      	cmp	r3, #2
 800786c:	dd31      	ble.n	80078d2 <_dtoa_r+0x872>
 800786e:	f8cd 9018 	str.w	r9, [sp, #24]
 8007872:	9b06      	ldr	r3, [sp, #24]
 8007874:	b963      	cbnz	r3, 8007890 <_dtoa_r+0x830>
 8007876:	4629      	mov	r1, r5
 8007878:	2205      	movs	r2, #5
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f9a8 	bl	8007bd0 <__multadd>
 8007880:	4601      	mov	r1, r0
 8007882:	4605      	mov	r5, r0
 8007884:	9801      	ldr	r0, [sp, #4]
 8007886:	f000 fb6d 	bl	8007f64 <__mcmp>
 800788a:	2800      	cmp	r0, #0
 800788c:	f73f adfc 	bgt.w	8007488 <_dtoa_r+0x428>
 8007890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007892:	9e04      	ldr	r6, [sp, #16]
 8007894:	ea6f 0b03 	mvn.w	fp, r3
 8007898:	f04f 0900 	mov.w	r9, #0
 800789c:	4629      	mov	r1, r5
 800789e:	4620      	mov	r0, r4
 80078a0:	f000 f97f 	bl	8007ba2 <_Bfree>
 80078a4:	2f00      	cmp	r7, #0
 80078a6:	f43f aebb 	beq.w	8007620 <_dtoa_r+0x5c0>
 80078aa:	f1b9 0f00 	cmp.w	r9, #0
 80078ae:	d005      	beq.n	80078bc <_dtoa_r+0x85c>
 80078b0:	45b9      	cmp	r9, r7
 80078b2:	d003      	beq.n	80078bc <_dtoa_r+0x85c>
 80078b4:	4649      	mov	r1, r9
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 f973 	bl	8007ba2 <_Bfree>
 80078bc:	4639      	mov	r1, r7
 80078be:	4620      	mov	r0, r4
 80078c0:	f000 f96f 	bl	8007ba2 <_Bfree>
 80078c4:	e6ac      	b.n	8007620 <_dtoa_r+0x5c0>
 80078c6:	2500      	movs	r5, #0
 80078c8:	462f      	mov	r7, r5
 80078ca:	e7e1      	b.n	8007890 <_dtoa_r+0x830>
 80078cc:	469b      	mov	fp, r3
 80078ce:	462f      	mov	r7, r5
 80078d0:	e5da      	b.n	8007488 <_dtoa_r+0x428>
 80078d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d4:	f8cd 9018 	str.w	r9, [sp, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80f3 	beq.w	8007ac4 <_dtoa_r+0xa64>
 80078de:	2e00      	cmp	r6, #0
 80078e0:	dd05      	ble.n	80078ee <_dtoa_r+0x88e>
 80078e2:	4639      	mov	r1, r7
 80078e4:	4632      	mov	r2, r6
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 fae8 	bl	8007ebc <__lshift>
 80078ec:	4607      	mov	r7, r0
 80078ee:	f1b8 0f00 	cmp.w	r8, #0
 80078f2:	d04c      	beq.n	800798e <_dtoa_r+0x92e>
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 f91f 	bl	8007b3a <_Balloc>
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	3202      	adds	r2, #2
 8007900:	4606      	mov	r6, r0
 8007902:	0092      	lsls	r2, r2, #2
 8007904:	f107 010c 	add.w	r1, r7, #12
 8007908:	300c      	adds	r0, #12
 800790a:	f000 f90b 	bl	8007b24 <memcpy>
 800790e:	2201      	movs	r2, #1
 8007910:	4631      	mov	r1, r6
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fad2 	bl	8007ebc <__lshift>
 8007918:	9b02      	ldr	r3, [sp, #8]
 800791a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	46b9      	mov	r9, r7
 8007924:	9307      	str	r3, [sp, #28]
 8007926:	4607      	mov	r7, r0
 8007928:	4629      	mov	r1, r5
 800792a:	9801      	ldr	r0, [sp, #4]
 800792c:	f7ff fb0c 	bl	8006f48 <quorem>
 8007930:	4649      	mov	r1, r9
 8007932:	4606      	mov	r6, r0
 8007934:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007938:	9801      	ldr	r0, [sp, #4]
 800793a:	f000 fb13 	bl	8007f64 <__mcmp>
 800793e:	463a      	mov	r2, r7
 8007940:	9002      	str	r0, [sp, #8]
 8007942:	4629      	mov	r1, r5
 8007944:	4620      	mov	r0, r4
 8007946:	f000 fb27 	bl	8007f98 <__mdiff>
 800794a:	68c3      	ldr	r3, [r0, #12]
 800794c:	4602      	mov	r2, r0
 800794e:	bb03      	cbnz	r3, 8007992 <_dtoa_r+0x932>
 8007950:	4601      	mov	r1, r0
 8007952:	9009      	str	r0, [sp, #36]	; 0x24
 8007954:	9801      	ldr	r0, [sp, #4]
 8007956:	f000 fb05 	bl	8007f64 <__mcmp>
 800795a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800795c:	4603      	mov	r3, r0
 800795e:	4611      	mov	r1, r2
 8007960:	4620      	mov	r0, r4
 8007962:	9309      	str	r3, [sp, #36]	; 0x24
 8007964:	f000 f91d 	bl	8007ba2 <_Bfree>
 8007968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796a:	b9a3      	cbnz	r3, 8007996 <_dtoa_r+0x936>
 800796c:	9a08      	ldr	r2, [sp, #32]
 800796e:	b992      	cbnz	r2, 8007996 <_dtoa_r+0x936>
 8007970:	9a07      	ldr	r2, [sp, #28]
 8007972:	b982      	cbnz	r2, 8007996 <_dtoa_r+0x936>
 8007974:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007978:	d029      	beq.n	80079ce <_dtoa_r+0x96e>
 800797a:	9b02      	ldr	r3, [sp, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	dd01      	ble.n	8007984 <_dtoa_r+0x924>
 8007980:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8007984:	f10a 0601 	add.w	r6, sl, #1
 8007988:	f88a 8000 	strb.w	r8, [sl]
 800798c:	e786      	b.n	800789c <_dtoa_r+0x83c>
 800798e:	4638      	mov	r0, r7
 8007990:	e7c2      	b.n	8007918 <_dtoa_r+0x8b8>
 8007992:	2301      	movs	r3, #1
 8007994:	e7e3      	b.n	800795e <_dtoa_r+0x8fe>
 8007996:	9a02      	ldr	r2, [sp, #8]
 8007998:	2a00      	cmp	r2, #0
 800799a:	db04      	blt.n	80079a6 <_dtoa_r+0x946>
 800799c:	d124      	bne.n	80079e8 <_dtoa_r+0x988>
 800799e:	9a08      	ldr	r2, [sp, #32]
 80079a0:	bb12      	cbnz	r2, 80079e8 <_dtoa_r+0x988>
 80079a2:	9a07      	ldr	r2, [sp, #28]
 80079a4:	bb02      	cbnz	r2, 80079e8 <_dtoa_r+0x988>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	ddec      	ble.n	8007984 <_dtoa_r+0x924>
 80079aa:	2201      	movs	r2, #1
 80079ac:	9901      	ldr	r1, [sp, #4]
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 fa84 	bl	8007ebc <__lshift>
 80079b4:	4629      	mov	r1, r5
 80079b6:	9001      	str	r0, [sp, #4]
 80079b8:	f000 fad4 	bl	8007f64 <__mcmp>
 80079bc:	2800      	cmp	r0, #0
 80079be:	dc03      	bgt.n	80079c8 <_dtoa_r+0x968>
 80079c0:	d1e0      	bne.n	8007984 <_dtoa_r+0x924>
 80079c2:	f018 0f01 	tst.w	r8, #1
 80079c6:	d0dd      	beq.n	8007984 <_dtoa_r+0x924>
 80079c8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079cc:	d1d8      	bne.n	8007980 <_dtoa_r+0x920>
 80079ce:	2339      	movs	r3, #57	; 0x39
 80079d0:	f10a 0601 	add.w	r6, sl, #1
 80079d4:	f88a 3000 	strb.w	r3, [sl]
 80079d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079dc:	2b39      	cmp	r3, #57	; 0x39
 80079de:	f106 32ff 	add.w	r2, r6, #4294967295
 80079e2:	d04c      	beq.n	8007a7e <_dtoa_r+0xa1e>
 80079e4:	3301      	adds	r3, #1
 80079e6:	e051      	b.n	8007a8c <_dtoa_r+0xa2c>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f10a 0601 	add.w	r6, sl, #1
 80079ee:	dd05      	ble.n	80079fc <_dtoa_r+0x99c>
 80079f0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079f4:	d0eb      	beq.n	80079ce <_dtoa_r+0x96e>
 80079f6:	f108 0801 	add.w	r8, r8, #1
 80079fa:	e7c5      	b.n	8007988 <_dtoa_r+0x928>
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	9a06      	ldr	r2, [sp, #24]
 8007a00:	f806 8c01 	strb.w	r8, [r6, #-1]
 8007a04:	1af3      	subs	r3, r6, r3
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d021      	beq.n	8007a4e <_dtoa_r+0x9ee>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	220a      	movs	r2, #10
 8007a0e:	9901      	ldr	r1, [sp, #4]
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 f8dd 	bl	8007bd0 <__multadd>
 8007a16:	45b9      	cmp	r9, r7
 8007a18:	9001      	str	r0, [sp, #4]
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	f04f 020a 	mov.w	r2, #10
 8007a22:	4649      	mov	r1, r9
 8007a24:	4620      	mov	r0, r4
 8007a26:	d105      	bne.n	8007a34 <_dtoa_r+0x9d4>
 8007a28:	f000 f8d2 	bl	8007bd0 <__multadd>
 8007a2c:	4681      	mov	r9, r0
 8007a2e:	4607      	mov	r7, r0
 8007a30:	46b2      	mov	sl, r6
 8007a32:	e779      	b.n	8007928 <_dtoa_r+0x8c8>
 8007a34:	f000 f8cc 	bl	8007bd0 <__multadd>
 8007a38:	4639      	mov	r1, r7
 8007a3a:	4681      	mov	r9, r0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	220a      	movs	r2, #10
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 f8c5 	bl	8007bd0 <__multadd>
 8007a46:	4607      	mov	r7, r0
 8007a48:	e7f2      	b.n	8007a30 <_dtoa_r+0x9d0>
 8007a4a:	f04f 0900 	mov.w	r9, #0
 8007a4e:	2201      	movs	r2, #1
 8007a50:	9901      	ldr	r1, [sp, #4]
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 fa32 	bl	8007ebc <__lshift>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	9001      	str	r0, [sp, #4]
 8007a5c:	f000 fa82 	bl	8007f64 <__mcmp>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	dcb9      	bgt.n	80079d8 <_dtoa_r+0x978>
 8007a64:	d102      	bne.n	8007a6c <_dtoa_r+0xa0c>
 8007a66:	f018 0f01 	tst.w	r8, #1
 8007a6a:	d1b5      	bne.n	80079d8 <_dtoa_r+0x978>
 8007a6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a70:	2b30      	cmp	r3, #48	; 0x30
 8007a72:	f106 32ff 	add.w	r2, r6, #4294967295
 8007a76:	f47f af11 	bne.w	800789c <_dtoa_r+0x83c>
 8007a7a:	4616      	mov	r6, r2
 8007a7c:	e7f6      	b.n	8007a6c <_dtoa_r+0xa0c>
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d105      	bne.n	8007a90 <_dtoa_r+0xa30>
 8007a84:	9a04      	ldr	r2, [sp, #16]
 8007a86:	f10b 0b01 	add.w	fp, fp, #1
 8007a8a:	2331      	movs	r3, #49	; 0x31
 8007a8c:	7013      	strb	r3, [r2, #0]
 8007a8e:	e705      	b.n	800789c <_dtoa_r+0x83c>
 8007a90:	4616      	mov	r6, r2
 8007a92:	e7a1      	b.n	80079d8 <_dtoa_r+0x978>
 8007a94:	4b16      	ldr	r3, [pc, #88]	; (8007af0 <_dtoa_r+0xa90>)
 8007a96:	f7ff bb48 	b.w	800712a <_dtoa_r+0xca>
 8007a9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f47f ab23 	bne.w	80070e8 <_dtoa_r+0x88>
 8007aa2:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <_dtoa_r+0xa94>)
 8007aa4:	f7ff bb41 	b.w	800712a <_dtoa_r+0xca>
 8007aa8:	9b08      	ldr	r3, [sp, #32]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	f77f ae3b 	ble.w	8007726 <_dtoa_r+0x6c6>
 8007ab0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007ab4:	e64f      	b.n	8007756 <_dtoa_r+0x6f6>
 8007ab6:	9b06      	ldr	r3, [sp, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	dc03      	bgt.n	8007ac4 <_dtoa_r+0xa64>
 8007abc:	9b08      	ldr	r3, [sp, #32]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	f73f aed7 	bgt.w	8007872 <_dtoa_r+0x812>
 8007ac4:	9e04      	ldr	r6, [sp, #16]
 8007ac6:	9801      	ldr	r0, [sp, #4]
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7ff fa3d 	bl	8006f48 <quorem>
 8007ace:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ad2:	f806 8b01 	strb.w	r8, [r6], #1
 8007ad6:	9b04      	ldr	r3, [sp, #16]
 8007ad8:	9a06      	ldr	r2, [sp, #24]
 8007ada:	1af3      	subs	r3, r6, r3
 8007adc:	429a      	cmp	r2, r3
 8007ade:	ddb4      	ble.n	8007a4a <_dtoa_r+0x9ea>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	220a      	movs	r2, #10
 8007ae4:	9901      	ldr	r1, [sp, #4]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 f872 	bl	8007bd0 <__multadd>
 8007aec:	9001      	str	r0, [sp, #4]
 8007aee:	e7ea      	b.n	8007ac6 <_dtoa_r+0xa66>
 8007af0:	080092bc 	.word	0x080092bc
 8007af4:	080092e0 	.word	0x080092e0

08007af8 <_localeconv_r>:
 8007af8:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <_localeconv_r+0x14>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6a18      	ldr	r0, [r3, #32]
 8007afe:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <_localeconv_r+0x18>)
 8007b00:	2800      	cmp	r0, #0
 8007b02:	bf08      	it	eq
 8007b04:	4618      	moveq	r0, r3
 8007b06:	30f0      	adds	r0, #240	; 0xf0
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20000010 	.word	0x20000010
 8007b10:	20000074 	.word	0x20000074

08007b14 <malloc>:
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <malloc+0xc>)
 8007b16:	4601      	mov	r1, r0
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f000 bb45 	b.w	80081a8 <_malloc_r>
 8007b1e:	bf00      	nop
 8007b20:	20000010 	.word	0x20000010

08007b24 <memcpy>:
 8007b24:	b510      	push	{r4, lr}
 8007b26:	1e43      	subs	r3, r0, #1
 8007b28:	440a      	add	r2, r1
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	d100      	bne.n	8007b30 <memcpy+0xc>
 8007b2e:	bd10      	pop	{r4, pc}
 8007b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b38:	e7f7      	b.n	8007b2a <memcpy+0x6>

08007b3a <_Balloc>:
 8007b3a:	b570      	push	{r4, r5, r6, lr}
 8007b3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460e      	mov	r6, r1
 8007b42:	b93d      	cbnz	r5, 8007b54 <_Balloc+0x1a>
 8007b44:	2010      	movs	r0, #16
 8007b46:	f7ff ffe5 	bl	8007b14 <malloc>
 8007b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b4c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b50:	6005      	str	r5, [r0, #0]
 8007b52:	60c5      	str	r5, [r0, #12]
 8007b54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b56:	68eb      	ldr	r3, [r5, #12]
 8007b58:	b183      	cbz	r3, 8007b7c <_Balloc+0x42>
 8007b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b62:	b9b8      	cbnz	r0, 8007b94 <_Balloc+0x5a>
 8007b64:	2101      	movs	r1, #1
 8007b66:	fa01 f506 	lsl.w	r5, r1, r6
 8007b6a:	1d6a      	adds	r2, r5, #5
 8007b6c:	0092      	lsls	r2, r2, #2
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 fabe 	bl	80080f0 <_calloc_r>
 8007b74:	b160      	cbz	r0, 8007b90 <_Balloc+0x56>
 8007b76:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b7a:	e00e      	b.n	8007b9a <_Balloc+0x60>
 8007b7c:	2221      	movs	r2, #33	; 0x21
 8007b7e:	2104      	movs	r1, #4
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fab5 	bl	80080f0 <_calloc_r>
 8007b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b88:	60e8      	str	r0, [r5, #12]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e4      	bne.n	8007b5a <_Balloc+0x20>
 8007b90:	2000      	movs	r0, #0
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
 8007b94:	6802      	ldr	r2, [r0, #0]
 8007b96:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ba0:	e7f7      	b.n	8007b92 <_Balloc+0x58>

08007ba2 <_Bfree>:
 8007ba2:	b570      	push	{r4, r5, r6, lr}
 8007ba4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460d      	mov	r5, r1
 8007baa:	b93c      	cbnz	r4, 8007bbc <_Bfree+0x1a>
 8007bac:	2010      	movs	r0, #16
 8007bae:	f7ff ffb1 	bl	8007b14 <malloc>
 8007bb2:	6270      	str	r0, [r6, #36]	; 0x24
 8007bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bb8:	6004      	str	r4, [r0, #0]
 8007bba:	60c4      	str	r4, [r0, #12]
 8007bbc:	b13d      	cbz	r5, 8007bce <_Bfree+0x2c>
 8007bbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007bc0:	686a      	ldr	r2, [r5, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc8:	6029      	str	r1, [r5, #0]
 8007bca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007bce:	bd70      	pop	{r4, r5, r6, pc}

08007bd0 <__multadd>:
 8007bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd4:	690d      	ldr	r5, [r1, #16]
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	4606      	mov	r6, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	f101 0c14 	add.w	ip, r1, #20
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8dc 0000 	ldr.w	r0, [ip]
 8007be6:	b281      	uxth	r1, r0
 8007be8:	fb02 7101 	mla	r1, r2, r1, r7
 8007bec:	0c0f      	lsrs	r7, r1, #16
 8007bee:	0c00      	lsrs	r0, r0, #16
 8007bf0:	fb02 7000 	mla	r0, r2, r0, r7
 8007bf4:	b289      	uxth	r1, r1
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007bfc:	429d      	cmp	r5, r3
 8007bfe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007c02:	f84c 1b04 	str.w	r1, [ip], #4
 8007c06:	dcec      	bgt.n	8007be2 <__multadd+0x12>
 8007c08:	b1d7      	cbz	r7, 8007c40 <__multadd+0x70>
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	42ab      	cmp	r3, r5
 8007c0e:	dc12      	bgt.n	8007c36 <__multadd+0x66>
 8007c10:	6861      	ldr	r1, [r4, #4]
 8007c12:	4630      	mov	r0, r6
 8007c14:	3101      	adds	r1, #1
 8007c16:	f7ff ff90 	bl	8007b3a <_Balloc>
 8007c1a:	6922      	ldr	r2, [r4, #16]
 8007c1c:	3202      	adds	r2, #2
 8007c1e:	f104 010c 	add.w	r1, r4, #12
 8007c22:	4680      	mov	r8, r0
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	300c      	adds	r0, #12
 8007c28:	f7ff ff7c 	bl	8007b24 <memcpy>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff ffb7 	bl	8007ba2 <_Bfree>
 8007c34:	4644      	mov	r4, r8
 8007c36:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c3a:	3501      	adds	r5, #1
 8007c3c:	615f      	str	r7, [r3, #20]
 8007c3e:	6125      	str	r5, [r4, #16]
 8007c40:	4620      	mov	r0, r4
 8007c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c46 <__hi0bits>:
 8007c46:	0c02      	lsrs	r2, r0, #16
 8007c48:	0412      	lsls	r2, r2, #16
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	b9b2      	cbnz	r2, 8007c7c <__hi0bits+0x36>
 8007c4e:	0403      	lsls	r3, r0, #16
 8007c50:	2010      	movs	r0, #16
 8007c52:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c56:	bf04      	itt	eq
 8007c58:	021b      	lsleq	r3, r3, #8
 8007c5a:	3008      	addeq	r0, #8
 8007c5c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c60:	bf04      	itt	eq
 8007c62:	011b      	lsleq	r3, r3, #4
 8007c64:	3004      	addeq	r0, #4
 8007c66:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c6a:	bf04      	itt	eq
 8007c6c:	009b      	lsleq	r3, r3, #2
 8007c6e:	3002      	addeq	r0, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	db06      	blt.n	8007c82 <__hi0bits+0x3c>
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	d503      	bpl.n	8007c80 <__hi0bits+0x3a>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	4770      	bx	lr
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e7e8      	b.n	8007c52 <__hi0bits+0xc>
 8007c80:	2020      	movs	r0, #32
 8007c82:	4770      	bx	lr

08007c84 <__lo0bits>:
 8007c84:	6803      	ldr	r3, [r0, #0]
 8007c86:	f013 0207 	ands.w	r2, r3, #7
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	d00b      	beq.n	8007ca6 <__lo0bits+0x22>
 8007c8e:	07da      	lsls	r2, r3, #31
 8007c90:	d423      	bmi.n	8007cda <__lo0bits+0x56>
 8007c92:	0798      	lsls	r0, r3, #30
 8007c94:	bf49      	itett	mi
 8007c96:	085b      	lsrmi	r3, r3, #1
 8007c98:	089b      	lsrpl	r3, r3, #2
 8007c9a:	2001      	movmi	r0, #1
 8007c9c:	600b      	strmi	r3, [r1, #0]
 8007c9e:	bf5c      	itt	pl
 8007ca0:	600b      	strpl	r3, [r1, #0]
 8007ca2:	2002      	movpl	r0, #2
 8007ca4:	4770      	bx	lr
 8007ca6:	b298      	uxth	r0, r3
 8007ca8:	b9a8      	cbnz	r0, 8007cd6 <__lo0bits+0x52>
 8007caa:	0c1b      	lsrs	r3, r3, #16
 8007cac:	2010      	movs	r0, #16
 8007cae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007cb2:	bf04      	itt	eq
 8007cb4:	0a1b      	lsreq	r3, r3, #8
 8007cb6:	3008      	addeq	r0, #8
 8007cb8:	071a      	lsls	r2, r3, #28
 8007cba:	bf04      	itt	eq
 8007cbc:	091b      	lsreq	r3, r3, #4
 8007cbe:	3004      	addeq	r0, #4
 8007cc0:	079a      	lsls	r2, r3, #30
 8007cc2:	bf04      	itt	eq
 8007cc4:	089b      	lsreq	r3, r3, #2
 8007cc6:	3002      	addeq	r0, #2
 8007cc8:	07da      	lsls	r2, r3, #31
 8007cca:	d402      	bmi.n	8007cd2 <__lo0bits+0x4e>
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	d006      	beq.n	8007cde <__lo0bits+0x5a>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	600b      	str	r3, [r1, #0]
 8007cd4:	4770      	bx	lr
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	e7e9      	b.n	8007cae <__lo0bits+0x2a>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	4770      	bx	lr
 8007cde:	2020      	movs	r0, #32
 8007ce0:	4770      	bx	lr

08007ce2 <__i2b>:
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	f7ff ff27 	bl	8007b3a <_Balloc>
 8007cec:	2201      	movs	r2, #1
 8007cee:	6144      	str	r4, [r0, #20]
 8007cf0:	6102      	str	r2, [r0, #16]
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <__multiply>:
 8007cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	690a      	ldr	r2, [r1, #16]
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	bfb8      	it	lt
 8007d02:	460b      	movlt	r3, r1
 8007d04:	4688      	mov	r8, r1
 8007d06:	bfbc      	itt	lt
 8007d08:	46a0      	movlt	r8, r4
 8007d0a:	461c      	movlt	r4, r3
 8007d0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d1c:	eb07 0609 	add.w	r6, r7, r9
 8007d20:	42b3      	cmp	r3, r6
 8007d22:	bfb8      	it	lt
 8007d24:	3101      	addlt	r1, #1
 8007d26:	f7ff ff08 	bl	8007b3a <_Balloc>
 8007d2a:	f100 0514 	add.w	r5, r0, #20
 8007d2e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007d32:	462b      	mov	r3, r5
 8007d34:	2200      	movs	r2, #0
 8007d36:	4573      	cmp	r3, lr
 8007d38:	d316      	bcc.n	8007d68 <__multiply+0x74>
 8007d3a:	f104 0214 	add.w	r2, r4, #20
 8007d3e:	f108 0114 	add.w	r1, r8, #20
 8007d42:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d46:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	9b00      	ldr	r3, [sp, #0]
 8007d4e:	9201      	str	r2, [sp, #4]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d80c      	bhi.n	8007d6e <__multiply+0x7a>
 8007d54:	2e00      	cmp	r6, #0
 8007d56:	dd03      	ble.n	8007d60 <__multiply+0x6c>
 8007d58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05d      	beq.n	8007e1c <__multiply+0x128>
 8007d60:	6106      	str	r6, [r0, #16]
 8007d62:	b003      	add	sp, #12
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	f843 2b04 	str.w	r2, [r3], #4
 8007d6c:	e7e3      	b.n	8007d36 <__multiply+0x42>
 8007d6e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d72:	f1bb 0f00 	cmp.w	fp, #0
 8007d76:	d023      	beq.n	8007dc0 <__multiply+0xcc>
 8007d78:	4689      	mov	r9, r1
 8007d7a:	46ac      	mov	ip, r5
 8007d7c:	f04f 0800 	mov.w	r8, #0
 8007d80:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d84:	f8dc a000 	ldr.w	sl, [ip]
 8007d88:	b2a3      	uxth	r3, r4
 8007d8a:	fa1f fa8a 	uxth.w	sl, sl
 8007d8e:	fb0b a303 	mla	r3, fp, r3, sl
 8007d92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d96:	f8dc 4000 	ldr.w	r4, [ip]
 8007d9a:	4443      	add	r3, r8
 8007d9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007da0:	fb0b 840a 	mla	r4, fp, sl, r8
 8007da4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007da8:	46e2      	mov	sl, ip
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007db0:	454f      	cmp	r7, r9
 8007db2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007db6:	f84a 3b04 	str.w	r3, [sl], #4
 8007dba:	d82b      	bhi.n	8007e14 <__multiply+0x120>
 8007dbc:	f8cc 8004 	str.w	r8, [ip, #4]
 8007dc0:	9b01      	ldr	r3, [sp, #4]
 8007dc2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007dc6:	3204      	adds	r2, #4
 8007dc8:	f1ba 0f00 	cmp.w	sl, #0
 8007dcc:	d020      	beq.n	8007e10 <__multiply+0x11c>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	4689      	mov	r9, r1
 8007dd2:	46a8      	mov	r8, r5
 8007dd4:	f04f 0b00 	mov.w	fp, #0
 8007dd8:	f8b9 c000 	ldrh.w	ip, [r9]
 8007ddc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007de0:	fb0a 440c 	mla	r4, sl, ip, r4
 8007de4:	445c      	add	r4, fp
 8007de6:	46c4      	mov	ip, r8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007dee:	f84c 3b04 	str.w	r3, [ip], #4
 8007df2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007df6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007dfa:	0c1b      	lsrs	r3, r3, #16
 8007dfc:	fb0a b303 	mla	r3, sl, r3, fp
 8007e00:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007e04:	454f      	cmp	r7, r9
 8007e06:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007e0a:	d805      	bhi.n	8007e18 <__multiply+0x124>
 8007e0c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e10:	3504      	adds	r5, #4
 8007e12:	e79b      	b.n	8007d4c <__multiply+0x58>
 8007e14:	46d4      	mov	ip, sl
 8007e16:	e7b3      	b.n	8007d80 <__multiply+0x8c>
 8007e18:	46e0      	mov	r8, ip
 8007e1a:	e7dd      	b.n	8007dd8 <__multiply+0xe4>
 8007e1c:	3e01      	subs	r6, #1
 8007e1e:	e799      	b.n	8007d54 <__multiply+0x60>

08007e20 <__pow5mult>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	4615      	mov	r5, r2
 8007e26:	f012 0203 	ands.w	r2, r2, #3
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460f      	mov	r7, r1
 8007e2e:	d007      	beq.n	8007e40 <__pow5mult+0x20>
 8007e30:	3a01      	subs	r2, #1
 8007e32:	4c21      	ldr	r4, [pc, #132]	; (8007eb8 <__pow5mult+0x98>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e3a:	f7ff fec9 	bl	8007bd0 <__multadd>
 8007e3e:	4607      	mov	r7, r0
 8007e40:	10ad      	asrs	r5, r5, #2
 8007e42:	d035      	beq.n	8007eb0 <__pow5mult+0x90>
 8007e44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e46:	b93c      	cbnz	r4, 8007e58 <__pow5mult+0x38>
 8007e48:	2010      	movs	r0, #16
 8007e4a:	f7ff fe63 	bl	8007b14 <malloc>
 8007e4e:	6270      	str	r0, [r6, #36]	; 0x24
 8007e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e54:	6004      	str	r4, [r0, #0]
 8007e56:	60c4      	str	r4, [r0, #12]
 8007e58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e60:	b94c      	cbnz	r4, 8007e76 <__pow5mult+0x56>
 8007e62:	f240 2171 	movw	r1, #625	; 0x271
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff ff3b 	bl	8007ce2 <__i2b>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e72:	4604      	mov	r4, r0
 8007e74:	6003      	str	r3, [r0, #0]
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	07eb      	lsls	r3, r5, #31
 8007e7c:	d50a      	bpl.n	8007e94 <__pow5mult+0x74>
 8007e7e:	4639      	mov	r1, r7
 8007e80:	4622      	mov	r2, r4
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff ff36 	bl	8007cf4 <__multiply>
 8007e88:	4639      	mov	r1, r7
 8007e8a:	4681      	mov	r9, r0
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7ff fe88 	bl	8007ba2 <_Bfree>
 8007e92:	464f      	mov	r7, r9
 8007e94:	106d      	asrs	r5, r5, #1
 8007e96:	d00b      	beq.n	8007eb0 <__pow5mult+0x90>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	b938      	cbnz	r0, 8007eac <__pow5mult+0x8c>
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff ff27 	bl	8007cf4 <__multiply>
 8007ea6:	6020      	str	r0, [r4, #0]
 8007ea8:	f8c0 8000 	str.w	r8, [r0]
 8007eac:	4604      	mov	r4, r0
 8007eae:	e7e4      	b.n	8007e7a <__pow5mult+0x5a>
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb6:	bf00      	nop
 8007eb8:	080093e0 	.word	0x080093e0

08007ebc <__lshift>:
 8007ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	6849      	ldr	r1, [r1, #4]
 8007eca:	eb0a 0903 	add.w	r9, sl, r3
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	4616      	mov	r6, r2
 8007ed4:	f109 0501 	add.w	r5, r9, #1
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	db32      	blt.n	8007f42 <__lshift+0x86>
 8007edc:	4638      	mov	r0, r7
 8007ede:	f7ff fe2c 	bl	8007b3a <_Balloc>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4680      	mov	r8, r0
 8007ee6:	f100 0114 	add.w	r1, r0, #20
 8007eea:	461a      	mov	r2, r3
 8007eec:	4553      	cmp	r3, sl
 8007eee:	db2b      	blt.n	8007f48 <__lshift+0x8c>
 8007ef0:	6920      	ldr	r0, [r4, #16]
 8007ef2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ef6:	f104 0314 	add.w	r3, r4, #20
 8007efa:	f016 021f 	ands.w	r2, r6, #31
 8007efe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f06:	d025      	beq.n	8007f54 <__lshift+0x98>
 8007f08:	f1c2 0e20 	rsb	lr, r2, #32
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	681e      	ldr	r6, [r3, #0]
 8007f10:	468a      	mov	sl, r1
 8007f12:	4096      	lsls	r6, r2
 8007f14:	4330      	orrs	r0, r6
 8007f16:	f84a 0b04 	str.w	r0, [sl], #4
 8007f1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f1e:	459c      	cmp	ip, r3
 8007f20:	fa20 f00e 	lsr.w	r0, r0, lr
 8007f24:	d814      	bhi.n	8007f50 <__lshift+0x94>
 8007f26:	6048      	str	r0, [r1, #4]
 8007f28:	b108      	cbz	r0, 8007f2e <__lshift+0x72>
 8007f2a:	f109 0502 	add.w	r5, r9, #2
 8007f2e:	3d01      	subs	r5, #1
 8007f30:	4638      	mov	r0, r7
 8007f32:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f36:	4621      	mov	r1, r4
 8007f38:	f7ff fe33 	bl	8007ba2 <_Bfree>
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	3101      	adds	r1, #1
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	e7c7      	b.n	8007ed8 <__lshift+0x1c>
 8007f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	e7cd      	b.n	8007eec <__lshift+0x30>
 8007f50:	4651      	mov	r1, sl
 8007f52:	e7dc      	b.n	8007f0e <__lshift+0x52>
 8007f54:	3904      	subs	r1, #4
 8007f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f5e:	459c      	cmp	ip, r3
 8007f60:	d8f9      	bhi.n	8007f56 <__lshift+0x9a>
 8007f62:	e7e4      	b.n	8007f2e <__lshift+0x72>

08007f64 <__mcmp>:
 8007f64:	6903      	ldr	r3, [r0, #16]
 8007f66:	690a      	ldr	r2, [r1, #16]
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	b530      	push	{r4, r5, lr}
 8007f6c:	d10c      	bne.n	8007f88 <__mcmp+0x24>
 8007f6e:	0092      	lsls	r2, r2, #2
 8007f70:	3014      	adds	r0, #20
 8007f72:	3114      	adds	r1, #20
 8007f74:	1884      	adds	r4, r0, r2
 8007f76:	4411      	add	r1, r2
 8007f78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f80:	4295      	cmp	r5, r2
 8007f82:	d003      	beq.n	8007f8c <__mcmp+0x28>
 8007f84:	d305      	bcc.n	8007f92 <__mcmp+0x2e>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd30      	pop	{r4, r5, pc}
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d3f3      	bcc.n	8007f78 <__mcmp+0x14>
 8007f90:	e7fa      	b.n	8007f88 <__mcmp+0x24>
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295
 8007f96:	e7f7      	b.n	8007f88 <__mcmp+0x24>

08007f98 <__mdiff>:
 8007f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	f7ff ffdd 	bl	8007f64 <__mcmp>
 8007faa:	1e06      	subs	r6, r0, #0
 8007fac:	d108      	bne.n	8007fc0 <__mdiff+0x28>
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f7ff fdc2 	bl	8007b3a <_Balloc>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc0:	bfa4      	itt	ge
 8007fc2:	4623      	movge	r3, r4
 8007fc4:	462c      	movge	r4, r5
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	6861      	ldr	r1, [r4, #4]
 8007fca:	bfa6      	itte	ge
 8007fcc:	461d      	movge	r5, r3
 8007fce:	2600      	movge	r6, #0
 8007fd0:	2601      	movlt	r6, #1
 8007fd2:	f7ff fdb2 	bl	8007b3a <_Balloc>
 8007fd6:	692b      	ldr	r3, [r5, #16]
 8007fd8:	60c6      	str	r6, [r0, #12]
 8007fda:	6926      	ldr	r6, [r4, #16]
 8007fdc:	f105 0914 	add.w	r9, r5, #20
 8007fe0:	f104 0214 	add.w	r2, r4, #20
 8007fe4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fe8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007fec:	f100 0514 	add.w	r5, r0, #20
 8007ff0:	f04f 0e00 	mov.w	lr, #0
 8007ff4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ff8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ffc:	fa1e f18a 	uxtah	r1, lr, sl
 8008000:	b2a3      	uxth	r3, r4
 8008002:	1ac9      	subs	r1, r1, r3
 8008004:	0c23      	lsrs	r3, r4, #16
 8008006:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800800a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800800e:	b289      	uxth	r1, r1
 8008010:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008014:	45c8      	cmp	r8, r9
 8008016:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800801a:	4694      	mov	ip, r2
 800801c:	f845 3b04 	str.w	r3, [r5], #4
 8008020:	d8e8      	bhi.n	8007ff4 <__mdiff+0x5c>
 8008022:	45bc      	cmp	ip, r7
 8008024:	d304      	bcc.n	8008030 <__mdiff+0x98>
 8008026:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800802a:	b183      	cbz	r3, 800804e <__mdiff+0xb6>
 800802c:	6106      	str	r6, [r0, #16]
 800802e:	e7c5      	b.n	8007fbc <__mdiff+0x24>
 8008030:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008034:	fa1e f381 	uxtah	r3, lr, r1
 8008038:	141a      	asrs	r2, r3, #16
 800803a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800803e:	b29b      	uxth	r3, r3
 8008040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008044:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008048:	f845 3b04 	str.w	r3, [r5], #4
 800804c:	e7e9      	b.n	8008022 <__mdiff+0x8a>
 800804e:	3e01      	subs	r6, #1
 8008050:	e7e9      	b.n	8008026 <__mdiff+0x8e>

08008052 <__d2b>:
 8008052:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008056:	460e      	mov	r6, r1
 8008058:	2101      	movs	r1, #1
 800805a:	ec59 8b10 	vmov	r8, r9, d0
 800805e:	4615      	mov	r5, r2
 8008060:	f7ff fd6b 	bl	8007b3a <_Balloc>
 8008064:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008068:	4607      	mov	r7, r0
 800806a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800806e:	bb34      	cbnz	r4, 80080be <__d2b+0x6c>
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	f1b8 0300 	subs.w	r3, r8, #0
 8008076:	d027      	beq.n	80080c8 <__d2b+0x76>
 8008078:	a802      	add	r0, sp, #8
 800807a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800807e:	f7ff fe01 	bl	8007c84 <__lo0bits>
 8008082:	9900      	ldr	r1, [sp, #0]
 8008084:	b1f0      	cbz	r0, 80080c4 <__d2b+0x72>
 8008086:	9a01      	ldr	r2, [sp, #4]
 8008088:	f1c0 0320 	rsb	r3, r0, #32
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	430b      	orrs	r3, r1
 8008092:	40c2      	lsrs	r2, r0
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	9201      	str	r2, [sp, #4]
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	bf14      	ite	ne
 80080a0:	2102      	movne	r1, #2
 80080a2:	2101      	moveq	r1, #1
 80080a4:	6139      	str	r1, [r7, #16]
 80080a6:	b1c4      	cbz	r4, 80080da <__d2b+0x88>
 80080a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80080ac:	4404      	add	r4, r0
 80080ae:	6034      	str	r4, [r6, #0]
 80080b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080b4:	6028      	str	r0, [r5, #0]
 80080b6:	4638      	mov	r0, r7
 80080b8:	b003      	add	sp, #12
 80080ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080c2:	e7d5      	b.n	8008070 <__d2b+0x1e>
 80080c4:	6179      	str	r1, [r7, #20]
 80080c6:	e7e7      	b.n	8008098 <__d2b+0x46>
 80080c8:	a801      	add	r0, sp, #4
 80080ca:	f7ff fddb 	bl	8007c84 <__lo0bits>
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	2101      	movs	r1, #1
 80080d4:	6139      	str	r1, [r7, #16]
 80080d6:	3020      	adds	r0, #32
 80080d8:	e7e5      	b.n	80080a6 <__d2b+0x54>
 80080da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080e2:	6030      	str	r0, [r6, #0]
 80080e4:	6918      	ldr	r0, [r3, #16]
 80080e6:	f7ff fdae 	bl	8007c46 <__hi0bits>
 80080ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080ee:	e7e1      	b.n	80080b4 <__d2b+0x62>

080080f0 <_calloc_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	fb02 f401 	mul.w	r4, r2, r1
 80080f6:	4621      	mov	r1, r4
 80080f8:	f000 f856 	bl	80081a8 <_malloc_r>
 80080fc:	4605      	mov	r5, r0
 80080fe:	b118      	cbz	r0, 8008108 <_calloc_r+0x18>
 8008100:	4622      	mov	r2, r4
 8008102:	2100      	movs	r1, #0
 8008104:	f7fe fabc 	bl	8006680 <memset>
 8008108:	4628      	mov	r0, r5
 800810a:	bd38      	pop	{r3, r4, r5, pc}

0800810c <_free_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4605      	mov	r5, r0
 8008110:	2900      	cmp	r1, #0
 8008112:	d045      	beq.n	80081a0 <_free_r+0x94>
 8008114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008118:	1f0c      	subs	r4, r1, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	bfb8      	it	lt
 800811e:	18e4      	addlt	r4, r4, r3
 8008120:	f000 fa29 	bl	8008576 <__malloc_lock>
 8008124:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <_free_r+0x98>)
 8008126:	6813      	ldr	r3, [r2, #0]
 8008128:	4610      	mov	r0, r2
 800812a:	b933      	cbnz	r3, 800813a <_free_r+0x2e>
 800812c:	6063      	str	r3, [r4, #4]
 800812e:	6014      	str	r4, [r2, #0]
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008136:	f000 ba1f 	b.w	8008578 <__malloc_unlock>
 800813a:	42a3      	cmp	r3, r4
 800813c:	d90c      	bls.n	8008158 <_free_r+0x4c>
 800813e:	6821      	ldr	r1, [r4, #0]
 8008140:	1862      	adds	r2, r4, r1
 8008142:	4293      	cmp	r3, r2
 8008144:	bf04      	itt	eq
 8008146:	681a      	ldreq	r2, [r3, #0]
 8008148:	685b      	ldreq	r3, [r3, #4]
 800814a:	6063      	str	r3, [r4, #4]
 800814c:	bf04      	itt	eq
 800814e:	1852      	addeq	r2, r2, r1
 8008150:	6022      	streq	r2, [r4, #0]
 8008152:	6004      	str	r4, [r0, #0]
 8008154:	e7ec      	b.n	8008130 <_free_r+0x24>
 8008156:	4613      	mov	r3, r2
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	b10a      	cbz	r2, 8008160 <_free_r+0x54>
 800815c:	42a2      	cmp	r2, r4
 800815e:	d9fa      	bls.n	8008156 <_free_r+0x4a>
 8008160:	6819      	ldr	r1, [r3, #0]
 8008162:	1858      	adds	r0, r3, r1
 8008164:	42a0      	cmp	r0, r4
 8008166:	d10b      	bne.n	8008180 <_free_r+0x74>
 8008168:	6820      	ldr	r0, [r4, #0]
 800816a:	4401      	add	r1, r0
 800816c:	1858      	adds	r0, r3, r1
 800816e:	4282      	cmp	r2, r0
 8008170:	6019      	str	r1, [r3, #0]
 8008172:	d1dd      	bne.n	8008130 <_free_r+0x24>
 8008174:	6810      	ldr	r0, [r2, #0]
 8008176:	6852      	ldr	r2, [r2, #4]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	4401      	add	r1, r0
 800817c:	6019      	str	r1, [r3, #0]
 800817e:	e7d7      	b.n	8008130 <_free_r+0x24>
 8008180:	d902      	bls.n	8008188 <_free_r+0x7c>
 8008182:	230c      	movs	r3, #12
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	e7d3      	b.n	8008130 <_free_r+0x24>
 8008188:	6820      	ldr	r0, [r4, #0]
 800818a:	1821      	adds	r1, r4, r0
 800818c:	428a      	cmp	r2, r1
 800818e:	bf04      	itt	eq
 8008190:	6811      	ldreq	r1, [r2, #0]
 8008192:	6852      	ldreq	r2, [r2, #4]
 8008194:	6062      	str	r2, [r4, #4]
 8008196:	bf04      	itt	eq
 8008198:	1809      	addeq	r1, r1, r0
 800819a:	6021      	streq	r1, [r4, #0]
 800819c:	605c      	str	r4, [r3, #4]
 800819e:	e7c7      	b.n	8008130 <_free_r+0x24>
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop
 80081a4:	20000204 	.word	0x20000204

080081a8 <_malloc_r>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	1ccd      	adds	r5, r1, #3
 80081ac:	f025 0503 	bic.w	r5, r5, #3
 80081b0:	3508      	adds	r5, #8
 80081b2:	2d0c      	cmp	r5, #12
 80081b4:	bf38      	it	cc
 80081b6:	250c      	movcc	r5, #12
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	4606      	mov	r6, r0
 80081bc:	db01      	blt.n	80081c2 <_malloc_r+0x1a>
 80081be:	42a9      	cmp	r1, r5
 80081c0:	d903      	bls.n	80081ca <_malloc_r+0x22>
 80081c2:	230c      	movs	r3, #12
 80081c4:	6033      	str	r3, [r6, #0]
 80081c6:	2000      	movs	r0, #0
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
 80081ca:	f000 f9d4 	bl	8008576 <__malloc_lock>
 80081ce:	4a21      	ldr	r2, [pc, #132]	; (8008254 <_malloc_r+0xac>)
 80081d0:	6814      	ldr	r4, [r2, #0]
 80081d2:	4621      	mov	r1, r4
 80081d4:	b991      	cbnz	r1, 80081fc <_malloc_r+0x54>
 80081d6:	4c20      	ldr	r4, [pc, #128]	; (8008258 <_malloc_r+0xb0>)
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	b91b      	cbnz	r3, 80081e4 <_malloc_r+0x3c>
 80081dc:	4630      	mov	r0, r6
 80081de:	f000 f98f 	bl	8008500 <_sbrk_r>
 80081e2:	6020      	str	r0, [r4, #0]
 80081e4:	4629      	mov	r1, r5
 80081e6:	4630      	mov	r0, r6
 80081e8:	f000 f98a 	bl	8008500 <_sbrk_r>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d124      	bne.n	800823a <_malloc_r+0x92>
 80081f0:	230c      	movs	r3, #12
 80081f2:	6033      	str	r3, [r6, #0]
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 f9bf 	bl	8008578 <__malloc_unlock>
 80081fa:	e7e4      	b.n	80081c6 <_malloc_r+0x1e>
 80081fc:	680b      	ldr	r3, [r1, #0]
 80081fe:	1b5b      	subs	r3, r3, r5
 8008200:	d418      	bmi.n	8008234 <_malloc_r+0x8c>
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d90f      	bls.n	8008226 <_malloc_r+0x7e>
 8008206:	600b      	str	r3, [r1, #0]
 8008208:	50cd      	str	r5, [r1, r3]
 800820a:	18cc      	adds	r4, r1, r3
 800820c:	4630      	mov	r0, r6
 800820e:	f000 f9b3 	bl	8008578 <__malloc_unlock>
 8008212:	f104 000b 	add.w	r0, r4, #11
 8008216:	1d23      	adds	r3, r4, #4
 8008218:	f020 0007 	bic.w	r0, r0, #7
 800821c:	1ac3      	subs	r3, r0, r3
 800821e:	d0d3      	beq.n	80081c8 <_malloc_r+0x20>
 8008220:	425a      	negs	r2, r3
 8008222:	50e2      	str	r2, [r4, r3]
 8008224:	e7d0      	b.n	80081c8 <_malloc_r+0x20>
 8008226:	428c      	cmp	r4, r1
 8008228:	684b      	ldr	r3, [r1, #4]
 800822a:	bf16      	itet	ne
 800822c:	6063      	strne	r3, [r4, #4]
 800822e:	6013      	streq	r3, [r2, #0]
 8008230:	460c      	movne	r4, r1
 8008232:	e7eb      	b.n	800820c <_malloc_r+0x64>
 8008234:	460c      	mov	r4, r1
 8008236:	6849      	ldr	r1, [r1, #4]
 8008238:	e7cc      	b.n	80081d4 <_malloc_r+0x2c>
 800823a:	1cc4      	adds	r4, r0, #3
 800823c:	f024 0403 	bic.w	r4, r4, #3
 8008240:	42a0      	cmp	r0, r4
 8008242:	d005      	beq.n	8008250 <_malloc_r+0xa8>
 8008244:	1a21      	subs	r1, r4, r0
 8008246:	4630      	mov	r0, r6
 8008248:	f000 f95a 	bl	8008500 <_sbrk_r>
 800824c:	3001      	adds	r0, #1
 800824e:	d0cf      	beq.n	80081f0 <_malloc_r+0x48>
 8008250:	6025      	str	r5, [r4, #0]
 8008252:	e7db      	b.n	800820c <_malloc_r+0x64>
 8008254:	20000204 	.word	0x20000204
 8008258:	20000208 	.word	0x20000208

0800825c <__ssputs_r>:
 800825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	688e      	ldr	r6, [r1, #8]
 8008262:	429e      	cmp	r6, r3
 8008264:	4682      	mov	sl, r0
 8008266:	460c      	mov	r4, r1
 8008268:	4690      	mov	r8, r2
 800826a:	4699      	mov	r9, r3
 800826c:	d837      	bhi.n	80082de <__ssputs_r+0x82>
 800826e:	898a      	ldrh	r2, [r1, #12]
 8008270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008274:	d031      	beq.n	80082da <__ssputs_r+0x7e>
 8008276:	6825      	ldr	r5, [r4, #0]
 8008278:	6909      	ldr	r1, [r1, #16]
 800827a:	1a6f      	subs	r7, r5, r1
 800827c:	6965      	ldr	r5, [r4, #20]
 800827e:	2302      	movs	r3, #2
 8008280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008284:	fb95 f5f3 	sdiv	r5, r5, r3
 8008288:	f109 0301 	add.w	r3, r9, #1
 800828c:	443b      	add	r3, r7
 800828e:	429d      	cmp	r5, r3
 8008290:	bf38      	it	cc
 8008292:	461d      	movcc	r5, r3
 8008294:	0553      	lsls	r3, r2, #21
 8008296:	d530      	bpl.n	80082fa <__ssputs_r+0x9e>
 8008298:	4629      	mov	r1, r5
 800829a:	f7ff ff85 	bl	80081a8 <_malloc_r>
 800829e:	4606      	mov	r6, r0
 80082a0:	b950      	cbnz	r0, 80082b8 <__ssputs_r+0x5c>
 80082a2:	230c      	movs	r3, #12
 80082a4:	f8ca 3000 	str.w	r3, [sl]
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b8:	463a      	mov	r2, r7
 80082ba:	6921      	ldr	r1, [r4, #16]
 80082bc:	f7ff fc32 	bl	8007b24 <memcpy>
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	6126      	str	r6, [r4, #16]
 80082ce:	6165      	str	r5, [r4, #20]
 80082d0:	443e      	add	r6, r7
 80082d2:	1bed      	subs	r5, r5, r7
 80082d4:	6026      	str	r6, [r4, #0]
 80082d6:	60a5      	str	r5, [r4, #8]
 80082d8:	464e      	mov	r6, r9
 80082da:	454e      	cmp	r6, r9
 80082dc:	d900      	bls.n	80082e0 <__ssputs_r+0x84>
 80082de:	464e      	mov	r6, r9
 80082e0:	4632      	mov	r2, r6
 80082e2:	4641      	mov	r1, r8
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	f000 f92d 	bl	8008544 <memmove>
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	1b9b      	subs	r3, r3, r6
 80082ee:	60a3      	str	r3, [r4, #8]
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	441e      	add	r6, r3
 80082f4:	6026      	str	r6, [r4, #0]
 80082f6:	2000      	movs	r0, #0
 80082f8:	e7dc      	b.n	80082b4 <__ssputs_r+0x58>
 80082fa:	462a      	mov	r2, r5
 80082fc:	f000 f93d 	bl	800857a <_realloc_r>
 8008300:	4606      	mov	r6, r0
 8008302:	2800      	cmp	r0, #0
 8008304:	d1e2      	bne.n	80082cc <__ssputs_r+0x70>
 8008306:	6921      	ldr	r1, [r4, #16]
 8008308:	4650      	mov	r0, sl
 800830a:	f7ff feff 	bl	800810c <_free_r>
 800830e:	e7c8      	b.n	80082a2 <__ssputs_r+0x46>

08008310 <_svfiprintf_r>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	461d      	mov	r5, r3
 8008316:	898b      	ldrh	r3, [r1, #12]
 8008318:	061f      	lsls	r7, r3, #24
 800831a:	b09d      	sub	sp, #116	; 0x74
 800831c:	4680      	mov	r8, r0
 800831e:	460c      	mov	r4, r1
 8008320:	4616      	mov	r6, r2
 8008322:	d50f      	bpl.n	8008344 <_svfiprintf_r+0x34>
 8008324:	690b      	ldr	r3, [r1, #16]
 8008326:	b96b      	cbnz	r3, 8008344 <_svfiprintf_r+0x34>
 8008328:	2140      	movs	r1, #64	; 0x40
 800832a:	f7ff ff3d 	bl	80081a8 <_malloc_r>
 800832e:	6020      	str	r0, [r4, #0]
 8008330:	6120      	str	r0, [r4, #16]
 8008332:	b928      	cbnz	r0, 8008340 <_svfiprintf_r+0x30>
 8008334:	230c      	movs	r3, #12
 8008336:	f8c8 3000 	str.w	r3, [r8]
 800833a:	f04f 30ff 	mov.w	r0, #4294967295
 800833e:	e0c8      	b.n	80084d2 <_svfiprintf_r+0x1c2>
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	6163      	str	r3, [r4, #20]
 8008344:	2300      	movs	r3, #0
 8008346:	9309      	str	r3, [sp, #36]	; 0x24
 8008348:	2320      	movs	r3, #32
 800834a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800834e:	2330      	movs	r3, #48	; 0x30
 8008350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008354:	9503      	str	r5, [sp, #12]
 8008356:	f04f 0b01 	mov.w	fp, #1
 800835a:	4637      	mov	r7, r6
 800835c:	463d      	mov	r5, r7
 800835e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008362:	b10b      	cbz	r3, 8008368 <_svfiprintf_r+0x58>
 8008364:	2b25      	cmp	r3, #37	; 0x25
 8008366:	d13e      	bne.n	80083e6 <_svfiprintf_r+0xd6>
 8008368:	ebb7 0a06 	subs.w	sl, r7, r6
 800836c:	d00b      	beq.n	8008386 <_svfiprintf_r+0x76>
 800836e:	4653      	mov	r3, sl
 8008370:	4632      	mov	r2, r6
 8008372:	4621      	mov	r1, r4
 8008374:	4640      	mov	r0, r8
 8008376:	f7ff ff71 	bl	800825c <__ssputs_r>
 800837a:	3001      	adds	r0, #1
 800837c:	f000 80a4 	beq.w	80084c8 <_svfiprintf_r+0x1b8>
 8008380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008382:	4453      	add	r3, sl
 8008384:	9309      	str	r3, [sp, #36]	; 0x24
 8008386:	783b      	ldrb	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 809d 	beq.w	80084c8 <_svfiprintf_r+0x1b8>
 800838e:	2300      	movs	r3, #0
 8008390:	f04f 32ff 	mov.w	r2, #4294967295
 8008394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	9307      	str	r3, [sp, #28]
 800839c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083a0:	931a      	str	r3, [sp, #104]	; 0x68
 80083a2:	462f      	mov	r7, r5
 80083a4:	2205      	movs	r2, #5
 80083a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083aa:	4850      	ldr	r0, [pc, #320]	; (80084ec <_svfiprintf_r+0x1dc>)
 80083ac:	f7f7 ffa0 	bl	80002f0 <memchr>
 80083b0:	9b04      	ldr	r3, [sp, #16]
 80083b2:	b9d0      	cbnz	r0, 80083ea <_svfiprintf_r+0xda>
 80083b4:	06d9      	lsls	r1, r3, #27
 80083b6:	bf44      	itt	mi
 80083b8:	2220      	movmi	r2, #32
 80083ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083be:	071a      	lsls	r2, r3, #28
 80083c0:	bf44      	itt	mi
 80083c2:	222b      	movmi	r2, #43	; 0x2b
 80083c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083c8:	782a      	ldrb	r2, [r5, #0]
 80083ca:	2a2a      	cmp	r2, #42	; 0x2a
 80083cc:	d015      	beq.n	80083fa <_svfiprintf_r+0xea>
 80083ce:	9a07      	ldr	r2, [sp, #28]
 80083d0:	462f      	mov	r7, r5
 80083d2:	2000      	movs	r0, #0
 80083d4:	250a      	movs	r5, #10
 80083d6:	4639      	mov	r1, r7
 80083d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083dc:	3b30      	subs	r3, #48	; 0x30
 80083de:	2b09      	cmp	r3, #9
 80083e0:	d94d      	bls.n	800847e <_svfiprintf_r+0x16e>
 80083e2:	b1b8      	cbz	r0, 8008414 <_svfiprintf_r+0x104>
 80083e4:	e00f      	b.n	8008406 <_svfiprintf_r+0xf6>
 80083e6:	462f      	mov	r7, r5
 80083e8:	e7b8      	b.n	800835c <_svfiprintf_r+0x4c>
 80083ea:	4a40      	ldr	r2, [pc, #256]	; (80084ec <_svfiprintf_r+0x1dc>)
 80083ec:	1a80      	subs	r0, r0, r2
 80083ee:	fa0b f000 	lsl.w	r0, fp, r0
 80083f2:	4318      	orrs	r0, r3
 80083f4:	9004      	str	r0, [sp, #16]
 80083f6:	463d      	mov	r5, r7
 80083f8:	e7d3      	b.n	80083a2 <_svfiprintf_r+0x92>
 80083fa:	9a03      	ldr	r2, [sp, #12]
 80083fc:	1d11      	adds	r1, r2, #4
 80083fe:	6812      	ldr	r2, [r2, #0]
 8008400:	9103      	str	r1, [sp, #12]
 8008402:	2a00      	cmp	r2, #0
 8008404:	db01      	blt.n	800840a <_svfiprintf_r+0xfa>
 8008406:	9207      	str	r2, [sp, #28]
 8008408:	e004      	b.n	8008414 <_svfiprintf_r+0x104>
 800840a:	4252      	negs	r2, r2
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	9207      	str	r2, [sp, #28]
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	783b      	ldrb	r3, [r7, #0]
 8008416:	2b2e      	cmp	r3, #46	; 0x2e
 8008418:	d10c      	bne.n	8008434 <_svfiprintf_r+0x124>
 800841a:	787b      	ldrb	r3, [r7, #1]
 800841c:	2b2a      	cmp	r3, #42	; 0x2a
 800841e:	d133      	bne.n	8008488 <_svfiprintf_r+0x178>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	1d1a      	adds	r2, r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	9203      	str	r2, [sp, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	bfb8      	it	lt
 800842c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008430:	3702      	adds	r7, #2
 8008432:	9305      	str	r3, [sp, #20]
 8008434:	4d2e      	ldr	r5, [pc, #184]	; (80084f0 <_svfiprintf_r+0x1e0>)
 8008436:	7839      	ldrb	r1, [r7, #0]
 8008438:	2203      	movs	r2, #3
 800843a:	4628      	mov	r0, r5
 800843c:	f7f7 ff58 	bl	80002f0 <memchr>
 8008440:	b138      	cbz	r0, 8008452 <_svfiprintf_r+0x142>
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	1b40      	subs	r0, r0, r5
 8008446:	fa03 f000 	lsl.w	r0, r3, r0
 800844a:	9b04      	ldr	r3, [sp, #16]
 800844c:	4303      	orrs	r3, r0
 800844e:	3701      	adds	r7, #1
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	7839      	ldrb	r1, [r7, #0]
 8008454:	4827      	ldr	r0, [pc, #156]	; (80084f4 <_svfiprintf_r+0x1e4>)
 8008456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800845a:	2206      	movs	r2, #6
 800845c:	1c7e      	adds	r6, r7, #1
 800845e:	f7f7 ff47 	bl	80002f0 <memchr>
 8008462:	2800      	cmp	r0, #0
 8008464:	d038      	beq.n	80084d8 <_svfiprintf_r+0x1c8>
 8008466:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <_svfiprintf_r+0x1e8>)
 8008468:	bb13      	cbnz	r3, 80084b0 <_svfiprintf_r+0x1a0>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	3307      	adds	r3, #7
 800846e:	f023 0307 	bic.w	r3, r3, #7
 8008472:	3308      	adds	r3, #8
 8008474:	9303      	str	r3, [sp, #12]
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	444b      	add	r3, r9
 800847a:	9309      	str	r3, [sp, #36]	; 0x24
 800847c:	e76d      	b.n	800835a <_svfiprintf_r+0x4a>
 800847e:	fb05 3202 	mla	r2, r5, r2, r3
 8008482:	2001      	movs	r0, #1
 8008484:	460f      	mov	r7, r1
 8008486:	e7a6      	b.n	80083d6 <_svfiprintf_r+0xc6>
 8008488:	2300      	movs	r3, #0
 800848a:	3701      	adds	r7, #1
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	4619      	mov	r1, r3
 8008490:	250a      	movs	r5, #10
 8008492:	4638      	mov	r0, r7
 8008494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008498:	3a30      	subs	r2, #48	; 0x30
 800849a:	2a09      	cmp	r2, #9
 800849c:	d903      	bls.n	80084a6 <_svfiprintf_r+0x196>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0c8      	beq.n	8008434 <_svfiprintf_r+0x124>
 80084a2:	9105      	str	r1, [sp, #20]
 80084a4:	e7c6      	b.n	8008434 <_svfiprintf_r+0x124>
 80084a6:	fb05 2101 	mla	r1, r5, r1, r2
 80084aa:	2301      	movs	r3, #1
 80084ac:	4607      	mov	r7, r0
 80084ae:	e7f0      	b.n	8008492 <_svfiprintf_r+0x182>
 80084b0:	ab03      	add	r3, sp, #12
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4622      	mov	r2, r4
 80084b6:	4b11      	ldr	r3, [pc, #68]	; (80084fc <_svfiprintf_r+0x1ec>)
 80084b8:	a904      	add	r1, sp, #16
 80084ba:	4640      	mov	r0, r8
 80084bc:	f7fe f970 	bl	80067a0 <_printf_float>
 80084c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084c4:	4681      	mov	r9, r0
 80084c6:	d1d6      	bne.n	8008476 <_svfiprintf_r+0x166>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	065b      	lsls	r3, r3, #25
 80084cc:	f53f af35 	bmi.w	800833a <_svfiprintf_r+0x2a>
 80084d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d2:	b01d      	add	sp, #116	; 0x74
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d8:	ab03      	add	r3, sp, #12
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4622      	mov	r2, r4
 80084de:	4b07      	ldr	r3, [pc, #28]	; (80084fc <_svfiprintf_r+0x1ec>)
 80084e0:	a904      	add	r1, sp, #16
 80084e2:	4640      	mov	r0, r8
 80084e4:	f7fe fbfe 	bl	8006ce4 <_printf_i>
 80084e8:	e7ea      	b.n	80084c0 <_svfiprintf_r+0x1b0>
 80084ea:	bf00      	nop
 80084ec:	080093ec 	.word	0x080093ec
 80084f0:	080093f2 	.word	0x080093f2
 80084f4:	080093f6 	.word	0x080093f6
 80084f8:	080067a1 	.word	0x080067a1
 80084fc:	0800825d 	.word	0x0800825d

08008500 <_sbrk_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4c06      	ldr	r4, [pc, #24]	; (800851c <_sbrk_r+0x1c>)
 8008504:	2300      	movs	r3, #0
 8008506:	4605      	mov	r5, r0
 8008508:	4608      	mov	r0, r1
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	f7f9 fb2e 	bl	8001b6c <_sbrk>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_sbrk_r+0x1a>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	b103      	cbz	r3, 800851a <_sbrk_r+0x1a>
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	20000430 	.word	0x20000430

08008520 <__ascii_mbtowc>:
 8008520:	b082      	sub	sp, #8
 8008522:	b901      	cbnz	r1, 8008526 <__ascii_mbtowc+0x6>
 8008524:	a901      	add	r1, sp, #4
 8008526:	b142      	cbz	r2, 800853a <__ascii_mbtowc+0x1a>
 8008528:	b14b      	cbz	r3, 800853e <__ascii_mbtowc+0x1e>
 800852a:	7813      	ldrb	r3, [r2, #0]
 800852c:	600b      	str	r3, [r1, #0]
 800852e:	7812      	ldrb	r2, [r2, #0]
 8008530:	1c10      	adds	r0, r2, #0
 8008532:	bf18      	it	ne
 8008534:	2001      	movne	r0, #1
 8008536:	b002      	add	sp, #8
 8008538:	4770      	bx	lr
 800853a:	4610      	mov	r0, r2
 800853c:	e7fb      	b.n	8008536 <__ascii_mbtowc+0x16>
 800853e:	f06f 0001 	mvn.w	r0, #1
 8008542:	e7f8      	b.n	8008536 <__ascii_mbtowc+0x16>

08008544 <memmove>:
 8008544:	4288      	cmp	r0, r1
 8008546:	b510      	push	{r4, lr}
 8008548:	eb01 0302 	add.w	r3, r1, r2
 800854c:	d807      	bhi.n	800855e <memmove+0x1a>
 800854e:	1e42      	subs	r2, r0, #1
 8008550:	4299      	cmp	r1, r3
 8008552:	d00a      	beq.n	800856a <memmove+0x26>
 8008554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008558:	f802 4f01 	strb.w	r4, [r2, #1]!
 800855c:	e7f8      	b.n	8008550 <memmove+0xc>
 800855e:	4283      	cmp	r3, r0
 8008560:	d9f5      	bls.n	800854e <memmove+0xa>
 8008562:	1881      	adds	r1, r0, r2
 8008564:	1ad2      	subs	r2, r2, r3
 8008566:	42d3      	cmn	r3, r2
 8008568:	d100      	bne.n	800856c <memmove+0x28>
 800856a:	bd10      	pop	{r4, pc}
 800856c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008570:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008574:	e7f7      	b.n	8008566 <memmove+0x22>

08008576 <__malloc_lock>:
 8008576:	4770      	bx	lr

08008578 <__malloc_unlock>:
 8008578:	4770      	bx	lr

0800857a <_realloc_r>:
 800857a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857c:	4607      	mov	r7, r0
 800857e:	4614      	mov	r4, r2
 8008580:	460e      	mov	r6, r1
 8008582:	b921      	cbnz	r1, 800858e <_realloc_r+0x14>
 8008584:	4611      	mov	r1, r2
 8008586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800858a:	f7ff be0d 	b.w	80081a8 <_malloc_r>
 800858e:	b922      	cbnz	r2, 800859a <_realloc_r+0x20>
 8008590:	f7ff fdbc 	bl	800810c <_free_r>
 8008594:	4625      	mov	r5, r4
 8008596:	4628      	mov	r0, r5
 8008598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859a:	f000 f821 	bl	80085e0 <_malloc_usable_size_r>
 800859e:	42a0      	cmp	r0, r4
 80085a0:	d20f      	bcs.n	80085c2 <_realloc_r+0x48>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff fdff 	bl	80081a8 <_malloc_r>
 80085aa:	4605      	mov	r5, r0
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d0f2      	beq.n	8008596 <_realloc_r+0x1c>
 80085b0:	4631      	mov	r1, r6
 80085b2:	4622      	mov	r2, r4
 80085b4:	f7ff fab6 	bl	8007b24 <memcpy>
 80085b8:	4631      	mov	r1, r6
 80085ba:	4638      	mov	r0, r7
 80085bc:	f7ff fda6 	bl	800810c <_free_r>
 80085c0:	e7e9      	b.n	8008596 <_realloc_r+0x1c>
 80085c2:	4635      	mov	r5, r6
 80085c4:	e7e7      	b.n	8008596 <_realloc_r+0x1c>

080085c6 <__ascii_wctomb>:
 80085c6:	b149      	cbz	r1, 80085dc <__ascii_wctomb+0x16>
 80085c8:	2aff      	cmp	r2, #255	; 0xff
 80085ca:	bf85      	ittet	hi
 80085cc:	238a      	movhi	r3, #138	; 0x8a
 80085ce:	6003      	strhi	r3, [r0, #0]
 80085d0:	700a      	strbls	r2, [r1, #0]
 80085d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80085d6:	bf98      	it	ls
 80085d8:	2001      	movls	r0, #1
 80085da:	4770      	bx	lr
 80085dc:	4608      	mov	r0, r1
 80085de:	4770      	bx	lr

080085e0 <_malloc_usable_size_r>:
 80085e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e4:	1f18      	subs	r0, r3, #4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bfbc      	itt	lt
 80085ea:	580b      	ldrlt	r3, [r1, r0]
 80085ec:	18c0      	addlt	r0, r0, r3
 80085ee:	4770      	bx	lr

080085f0 <pow>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	ed2d 8b0a 	vpush	{d8-d12}
 80085f6:	eeb0 9b40 	vmov.f64	d9, d0
 80085fa:	eeb0 8b41 	vmov.f64	d8, d1
 80085fe:	4c8c      	ldr	r4, [pc, #560]	; (8008830 <pow+0x240>)
 8008600:	b08a      	sub	sp, #40	; 0x28
 8008602:	f000 f925 	bl	8008850 <__ieee754_pow>
 8008606:	f994 3000 	ldrsb.w	r3, [r4]
 800860a:	eeb0 ab40 	vmov.f64	d10, d0
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	4626      	mov	r6, r4
 8008612:	d04b      	beq.n	80086ac <pow+0xbc>
 8008614:	eeb4 8b48 	vcmp.f64	d8, d8
 8008618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861c:	d646      	bvs.n	80086ac <pow+0xbc>
 800861e:	eeb4 9b49 	vcmp.f64	d9, d9
 8008622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008626:	d719      	bvc.n	800865c <pow+0x6c>
 8008628:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	d13c      	bne.n	80086ac <pow+0xbc>
 8008632:	2201      	movs	r2, #1
 8008634:	9200      	str	r2, [sp, #0]
 8008636:	497f      	ldr	r1, [pc, #508]	; (8008834 <pow+0x244>)
 8008638:	4a7f      	ldr	r2, [pc, #508]	; (8008838 <pow+0x248>)
 800863a:	9201      	str	r2, [sp, #4]
 800863c:	2000      	movs	r0, #0
 800863e:	2200      	movs	r2, #0
 8008640:	2b02      	cmp	r3, #2
 8008642:	9208      	str	r2, [sp, #32]
 8008644:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008648:	ed8d 8b04 	vstr	d8, [sp, #16]
 800864c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008650:	d02a      	beq.n	80086a8 <pow+0xb8>
 8008652:	4668      	mov	r0, sp
 8008654:	f000 fc96 	bl	8008f84 <matherr>
 8008658:	bb00      	cbnz	r0, 800869c <pow+0xac>
 800865a:	e04e      	b.n	80086fa <pow+0x10a>
 800865c:	ed9f bb72 	vldr	d11, [pc, #456]	; 8008828 <pow+0x238>
 8008660:	eeb4 9b4b 	vcmp.f64	d9, d11
 8008664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008668:	eeb0 cb4b 	vmov.f64	d12, d11
 800866c:	d14a      	bne.n	8008704 <pow+0x114>
 800866e:	eeb4 8b4b 	vcmp.f64	d8, d11
 8008672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008676:	d11f      	bne.n	80086b8 <pow+0xc8>
 8008678:	2201      	movs	r2, #1
 800867a:	9200      	str	r2, [sp, #0]
 800867c:	4a6e      	ldr	r2, [pc, #440]	; (8008838 <pow+0x248>)
 800867e:	9201      	str	r2, [sp, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	9208      	str	r2, [sp, #32]
 8008684:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008688:	ed8d 8b04 	vstr	d8, [sp, #16]
 800868c:	ed8d bb06 	vstr	d11, [sp, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0de      	beq.n	8008652 <pow+0x62>
 8008694:	4b67      	ldr	r3, [pc, #412]	; (8008834 <pow+0x244>)
 8008696:	2200      	movs	r2, #0
 8008698:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800869c:	9b08      	ldr	r3, [sp, #32]
 800869e:	b11b      	cbz	r3, 80086a8 <pow+0xb8>
 80086a0:	f7fd ffc4 	bl	800662c <__errno>
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	6003      	str	r3, [r0, #0]
 80086a8:	ed9d ab06 	vldr	d10, [sp, #24]
 80086ac:	eeb0 0b4a 	vmov.f64	d0, d10
 80086b0:	b00a      	add	sp, #40	; 0x28
 80086b2:	ecbd 8b0a 	vpop	{d8-d12}
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	eeb0 0b48 	vmov.f64	d0, d8
 80086bc:	f000 fc5a 	bl	8008f74 <finite>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d0f3      	beq.n	80086ac <pow+0xbc>
 80086c4:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80086c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086cc:	d5ee      	bpl.n	80086ac <pow+0xbc>
 80086ce:	2301      	movs	r3, #1
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	4b59      	ldr	r3, [pc, #356]	; (8008838 <pow+0x248>)
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9308      	str	r3, [sp, #32]
 80086da:	f994 3000 	ldrsb.w	r3, [r4]
 80086de:	ed8d 9b02 	vstr	d9, [sp, #8]
 80086e2:	ed8d 8b04 	vstr	d8, [sp, #16]
 80086e6:	b913      	cbnz	r3, 80086ee <pow+0xfe>
 80086e8:	ed8d bb06 	vstr	d11, [sp, #24]
 80086ec:	e7b1      	b.n	8008652 <pow+0x62>
 80086ee:	4953      	ldr	r1, [pc, #332]	; (800883c <pow+0x24c>)
 80086f0:	2000      	movs	r0, #0
 80086f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d1ab      	bne.n	8008652 <pow+0x62>
 80086fa:	f7fd ff97 	bl	800662c <__errno>
 80086fe:	2321      	movs	r3, #33	; 0x21
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	e7cb      	b.n	800869c <pow+0xac>
 8008704:	f000 fc36 	bl	8008f74 <finite>
 8008708:	4605      	mov	r5, r0
 800870a:	2800      	cmp	r0, #0
 800870c:	d164      	bne.n	80087d8 <pow+0x1e8>
 800870e:	eeb0 0b49 	vmov.f64	d0, d9
 8008712:	f000 fc2f 	bl	8008f74 <finite>
 8008716:	2800      	cmp	r0, #0
 8008718:	d05e      	beq.n	80087d8 <pow+0x1e8>
 800871a:	eeb0 0b48 	vmov.f64	d0, d8
 800871e:	f000 fc29 	bl	8008f74 <finite>
 8008722:	2800      	cmp	r0, #0
 8008724:	d058      	beq.n	80087d8 <pow+0x1e8>
 8008726:	eeb4 ab4a 	vcmp.f64	d10, d10
 800872a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872e:	f994 3000 	ldrsb.w	r3, [r4]
 8008732:	4a41      	ldr	r2, [pc, #260]	; (8008838 <pow+0x248>)
 8008734:	d70e      	bvc.n	8008754 <pow+0x164>
 8008736:	2101      	movs	r1, #1
 8008738:	e9cd 1200 	strd	r1, r2, [sp]
 800873c:	9508      	str	r5, [sp, #32]
 800873e:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008742:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0ce      	beq.n	80086e8 <pow+0xf8>
 800874a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800874e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008752:	e7d0      	b.n	80086f6 <pow+0x106>
 8008754:	2103      	movs	r1, #3
 8008756:	ed8d 8b04 	vstr	d8, [sp, #16]
 800875a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800875e:	ee28 8b07 	vmul.f64	d8, d8, d7
 8008762:	e9cd 1200 	strd	r1, r2, [sp]
 8008766:	9508      	str	r5, [sp, #32]
 8008768:	ed8d 9b02 	vstr	d9, [sp, #8]
 800876c:	b9fb      	cbnz	r3, 80087ae <pow+0x1be>
 800876e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8008772:	4b33      	ldr	r3, [pc, #204]	; (8008840 <pow+0x250>)
 8008774:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008780:	d54b      	bpl.n	800881a <pow+0x22a>
 8008782:	eeb0 0b48 	vmov.f64	d0, d8
 8008786:	f000 fc07 	bl	8008f98 <rint>
 800878a:	eeb4 0b48 	vcmp.f64	d0, d8
 800878e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008792:	d004      	beq.n	800879e <pow+0x1ae>
 8008794:	4b2b      	ldr	r3, [pc, #172]	; (8008844 <pow+0x254>)
 8008796:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800879a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800879e:	f996 3000 	ldrsb.w	r3, [r6]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d139      	bne.n	800881a <pow+0x22a>
 80087a6:	f7fd ff41 	bl	800662c <__errno>
 80087aa:	2322      	movs	r3, #34	; 0x22
 80087ac:	e7a8      	b.n	8008700 <pow+0x110>
 80087ae:	4b26      	ldr	r3, [pc, #152]	; (8008848 <pow+0x258>)
 80087b0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80087b4:	2200      	movs	r2, #0
 80087b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087be:	d5ee      	bpl.n	800879e <pow+0x1ae>
 80087c0:	eeb0 0b48 	vmov.f64	d0, d8
 80087c4:	f000 fbe8 	bl	8008f98 <rint>
 80087c8:	eeb4 0b48 	vcmp.f64	d0, d8
 80087cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d0:	d0e5      	beq.n	800879e <pow+0x1ae>
 80087d2:	2200      	movs	r2, #0
 80087d4:	4b19      	ldr	r3, [pc, #100]	; (800883c <pow+0x24c>)
 80087d6:	e7e0      	b.n	800879a <pow+0x1aa>
 80087d8:	eeb5 ab40 	vcmp.f64	d10, #0.0
 80087dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e0:	f47f af64 	bne.w	80086ac <pow+0xbc>
 80087e4:	eeb0 0b49 	vmov.f64	d0, d9
 80087e8:	f000 fbc4 	bl	8008f74 <finite>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f43f af5d 	beq.w	80086ac <pow+0xbc>
 80087f2:	eeb0 0b48 	vmov.f64	d0, d8
 80087f6:	f000 fbbd 	bl	8008f74 <finite>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	f43f af56 	beq.w	80086ac <pow+0xbc>
 8008800:	2304      	movs	r3, #4
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <pow+0x248>)
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	2300      	movs	r3, #0
 800880a:	9308      	str	r3, [sp, #32]
 800880c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008810:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008814:	ed8d cb06 	vstr	d12, [sp, #24]
 8008818:	e7c1      	b.n	800879e <pow+0x1ae>
 800881a:	4668      	mov	r0, sp
 800881c:	f000 fbb2 	bl	8008f84 <matherr>
 8008820:	2800      	cmp	r0, #0
 8008822:	f47f af3b 	bne.w	800869c <pow+0xac>
 8008826:	e7be      	b.n	80087a6 <pow+0x1b6>
	...
 8008830:	200001e0 	.word	0x200001e0
 8008834:	3ff00000 	.word	0x3ff00000
 8008838:	08009508 	.word	0x08009508
 800883c:	fff00000 	.word	0xfff00000
 8008840:	47efffff 	.word	0x47efffff
 8008844:	c7efffff 	.word	0xc7efffff
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	00000000 	.word	0x00000000

08008850 <__ieee754_pow>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	ec57 6b11 	vmov	r6, r7, d1
 8008858:	ed2d 8b02 	vpush	{d8}
 800885c:	eeb0 8b40 	vmov.f64	d8, d0
 8008860:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008864:	ea58 0306 	orrs.w	r3, r8, r6
 8008868:	b085      	sub	sp, #20
 800886a:	46b9      	mov	r9, r7
 800886c:	ee11 2a10 	vmov	r2, s2
 8008870:	f000 8306 	beq.w	8008e80 <__ieee754_pow+0x630>
 8008874:	ee18 aa90 	vmov	sl, s17
 8008878:	4bb9      	ldr	r3, [pc, #740]	; (8008b60 <__ieee754_pow+0x310>)
 800887a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800887e:	429c      	cmp	r4, r3
 8008880:	ee10 ba10 	vmov	fp, s0
 8008884:	dc0b      	bgt.n	800889e <__ieee754_pow+0x4e>
 8008886:	d105      	bne.n	8008894 <__ieee754_pow+0x44>
 8008888:	f1bb 0f00 	cmp.w	fp, #0
 800888c:	d107      	bne.n	800889e <__ieee754_pow+0x4e>
 800888e:	45a0      	cmp	r8, r4
 8008890:	dc0d      	bgt.n	80088ae <__ieee754_pow+0x5e>
 8008892:	e001      	b.n	8008898 <__ieee754_pow+0x48>
 8008894:	4598      	cmp	r8, r3
 8008896:	dc02      	bgt.n	800889e <__ieee754_pow+0x4e>
 8008898:	4598      	cmp	r8, r3
 800889a:	d110      	bne.n	80088be <__ieee754_pow+0x6e>
 800889c:	b17a      	cbz	r2, 80088be <__ieee754_pow+0x6e>
 800889e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80088a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80088a6:	ea54 030b 	orrs.w	r3, r4, fp
 80088aa:	f000 82e9 	beq.w	8008e80 <__ieee754_pow+0x630>
 80088ae:	48ad      	ldr	r0, [pc, #692]	; (8008b64 <__ieee754_pow+0x314>)
 80088b0:	b005      	add	sp, #20
 80088b2:	ecbd 8b02 	vpop	{d8}
 80088b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	f000 bb65 	b.w	8008f88 <nan>
 80088be:	f1ba 0f00 	cmp.w	sl, #0
 80088c2:	da4e      	bge.n	8008962 <__ieee754_pow+0x112>
 80088c4:	4ba8      	ldr	r3, [pc, #672]	; (8008b68 <__ieee754_pow+0x318>)
 80088c6:	4598      	cmp	r8, r3
 80088c8:	dc49      	bgt.n	800895e <__ieee754_pow+0x10e>
 80088ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80088ce:	4598      	cmp	r8, r3
 80088d0:	dd47      	ble.n	8008962 <__ieee754_pow+0x112>
 80088d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80088d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088da:	2b14      	cmp	r3, #20
 80088dc:	dd24      	ble.n	8008928 <__ieee754_pow+0xd8>
 80088de:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80088e2:	fa22 f503 	lsr.w	r5, r2, r3
 80088e6:	fa05 f303 	lsl.w	r3, r5, r3
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d139      	bne.n	8008962 <__ieee754_pow+0x112>
 80088ee:	f005 0501 	and.w	r5, r5, #1
 80088f2:	f1c5 0502 	rsb	r5, r5, #2
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	d15a      	bne.n	80089b0 <__ieee754_pow+0x160>
 80088fa:	4b99      	ldr	r3, [pc, #612]	; (8008b60 <__ieee754_pow+0x310>)
 80088fc:	4598      	cmp	r8, r3
 80088fe:	d122      	bne.n	8008946 <__ieee754_pow+0xf6>
 8008900:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008904:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008908:	ea53 030b 	orrs.w	r3, r3, fp
 800890c:	f000 82b8 	beq.w	8008e80 <__ieee754_pow+0x630>
 8008910:	4b96      	ldr	r3, [pc, #600]	; (8008b6c <__ieee754_pow+0x31c>)
 8008912:	429c      	cmp	r4, r3
 8008914:	dd27      	ble.n	8008966 <__ieee754_pow+0x116>
 8008916:	f1b9 0f00 	cmp.w	r9, #0
 800891a:	f280 82b4 	bge.w	8008e86 <__ieee754_pow+0x636>
 800891e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8008b30 <__ieee754_pow+0x2e0>
 8008922:	ed8d 7b00 	vstr	d7, [sp]
 8008926:	e026      	b.n	8008976 <__ieee754_pow+0x126>
 8008928:	2a00      	cmp	r2, #0
 800892a:	d140      	bne.n	80089ae <__ieee754_pow+0x15e>
 800892c:	f1c3 0314 	rsb	r3, r3, #20
 8008930:	fa48 f503 	asr.w	r5, r8, r3
 8008934:	fa05 f303 	lsl.w	r3, r5, r3
 8008938:	4543      	cmp	r3, r8
 800893a:	f040 82aa 	bne.w	8008e92 <__ieee754_pow+0x642>
 800893e:	f005 0501 	and.w	r5, r5, #1
 8008942:	f1c5 0502 	rsb	r5, r5, #2
 8008946:	4b8a      	ldr	r3, [pc, #552]	; (8008b70 <__ieee754_pow+0x320>)
 8008948:	4598      	cmp	r8, r3
 800894a:	d11b      	bne.n	8008984 <__ieee754_pow+0x134>
 800894c:	f1b9 0f00 	cmp.w	r9, #0
 8008950:	f280 829c 	bge.w	8008e8c <__ieee754_pow+0x63c>
 8008954:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008958:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800895c:	e7e1      	b.n	8008922 <__ieee754_pow+0xd2>
 800895e:	2502      	movs	r5, #2
 8008960:	e7c9      	b.n	80088f6 <__ieee754_pow+0xa6>
 8008962:	2500      	movs	r5, #0
 8008964:	e7c7      	b.n	80088f6 <__ieee754_pow+0xa6>
 8008966:	f1b9 0f00 	cmp.w	r9, #0
 800896a:	dad8      	bge.n	800891e <__ieee754_pow+0xce>
 800896c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8008970:	4633      	mov	r3, r6
 8008972:	e9cd 3400 	strd	r3, r4, [sp]
 8008976:	ed9d 0b00 	vldr	d0, [sp]
 800897a:	b005      	add	sp, #20
 800897c:	ecbd 8b02 	vpop	{d8}
 8008980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008984:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008988:	d102      	bne.n	8008990 <__ieee754_pow+0x140>
 800898a:	ee28 7b08 	vmul.f64	d7, d8, d8
 800898e:	e7c8      	b.n	8008922 <__ieee754_pow+0xd2>
 8008990:	4b78      	ldr	r3, [pc, #480]	; (8008b74 <__ieee754_pow+0x324>)
 8008992:	4599      	cmp	r9, r3
 8008994:	d10c      	bne.n	80089b0 <__ieee754_pow+0x160>
 8008996:	f1ba 0f00 	cmp.w	sl, #0
 800899a:	db09      	blt.n	80089b0 <__ieee754_pow+0x160>
 800899c:	eeb0 0b48 	vmov.f64	d0, d8
 80089a0:	b005      	add	sp, #20
 80089a2:	ecbd 8b02 	vpop	{d8}
 80089a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089aa:	f000 bad7 	b.w	8008f5c <__ieee754_sqrt>
 80089ae:	2500      	movs	r5, #0
 80089b0:	eeb0 0b48 	vmov.f64	d0, d8
 80089b4:	f000 fad5 	bl	8008f62 <fabs>
 80089b8:	ed8d 0b00 	vstr	d0, [sp]
 80089bc:	f1bb 0f00 	cmp.w	fp, #0
 80089c0:	d128      	bne.n	8008a14 <__ieee754_pow+0x1c4>
 80089c2:	b124      	cbz	r4, 80089ce <__ieee754_pow+0x17e>
 80089c4:	4b6a      	ldr	r3, [pc, #424]	; (8008b70 <__ieee754_pow+0x320>)
 80089c6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d122      	bne.n	8008a14 <__ieee754_pow+0x1c4>
 80089ce:	f1b9 0f00 	cmp.w	r9, #0
 80089d2:	da07      	bge.n	80089e4 <__ieee754_pow+0x194>
 80089d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80089d8:	ed9d 6b00 	vldr	d6, [sp]
 80089dc:	ee87 7b06 	vdiv.f64	d7, d7, d6
 80089e0:	ed8d 7b00 	vstr	d7, [sp]
 80089e4:	f1ba 0f00 	cmp.w	sl, #0
 80089e8:	dac5      	bge.n	8008976 <__ieee754_pow+0x126>
 80089ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80089ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80089f2:	ea54 0305 	orrs.w	r3, r4, r5
 80089f6:	d106      	bne.n	8008a06 <__ieee754_pow+0x1b6>
 80089f8:	ed9d 7b00 	vldr	d7, [sp]
 80089fc:	ee37 7b47 	vsub.f64	d7, d7, d7
 8008a00:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8008a04:	e78d      	b.n	8008922 <__ieee754_pow+0xd2>
 8008a06:	2d01      	cmp	r5, #1
 8008a08:	d1b5      	bne.n	8008976 <__ieee754_pow+0x126>
 8008a0a:	ed9d 7b00 	vldr	d7, [sp]
 8008a0e:	eeb1 7b47 	vneg.f64	d7, d7
 8008a12:	e786      	b.n	8008922 <__ieee754_pow+0xd2>
 8008a14:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8008a18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a1c:	ea55 030a 	orrs.w	r3, r5, sl
 8008a20:	d104      	bne.n	8008a2c <__ieee754_pow+0x1dc>
 8008a22:	ee38 8b48 	vsub.f64	d8, d8, d8
 8008a26:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8008a2a:	e77a      	b.n	8008922 <__ieee754_pow+0xd2>
 8008a2c:	4b52      	ldr	r3, [pc, #328]	; (8008b78 <__ieee754_pow+0x328>)
 8008a2e:	4598      	cmp	r8, r3
 8008a30:	f340 80a8 	ble.w	8008b84 <__ieee754_pow+0x334>
 8008a34:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008a38:	4598      	cmp	r8, r3
 8008a3a:	dd0b      	ble.n	8008a54 <__ieee754_pow+0x204>
 8008a3c:	4b4b      	ldr	r3, [pc, #300]	; (8008b6c <__ieee754_pow+0x31c>)
 8008a3e:	429c      	cmp	r4, r3
 8008a40:	dc0e      	bgt.n	8008a60 <__ieee754_pow+0x210>
 8008a42:	f1b9 0f00 	cmp.w	r9, #0
 8008a46:	f6bf af6a 	bge.w	800891e <__ieee754_pow+0xce>
 8008a4a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8008b38 <__ieee754_pow+0x2e8>
 8008a4e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8008a52:	e766      	b.n	8008922 <__ieee754_pow+0xd2>
 8008a54:	4b49      	ldr	r3, [pc, #292]	; (8008b7c <__ieee754_pow+0x32c>)
 8008a56:	429c      	cmp	r4, r3
 8008a58:	ddf3      	ble.n	8008a42 <__ieee754_pow+0x1f2>
 8008a5a:	4b45      	ldr	r3, [pc, #276]	; (8008b70 <__ieee754_pow+0x320>)
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	dd03      	ble.n	8008a68 <__ieee754_pow+0x218>
 8008a60:	f1b9 0f00 	cmp.w	r9, #0
 8008a64:	dcf1      	bgt.n	8008a4a <__ieee754_pow+0x1fa>
 8008a66:	e75a      	b.n	800891e <__ieee754_pow+0xce>
 8008a68:	ed9d 7b00 	vldr	d7, [sp]
 8008a6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008a70:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8008b40 <__ieee754_pow+0x2f0>
 8008a74:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008a78:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8008a7c:	eeb1 3b46 	vneg.f64	d3, d6
 8008a80:	eea3 5b07 	vfma.f64	d5, d3, d7
 8008a84:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008a88:	eea5 7b46 	vfms.f64	d7, d5, d6
 8008a8c:	ee26 5b06 	vmul.f64	d5, d6, d6
 8008a90:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008a94:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8008b48 <__ieee754_pow+0x2f8>
 8008a98:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008a9c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008b50 <__ieee754_pow+0x300>
 8008aa0:	eea6 7b05 	vfma.f64	d7, d6, d5
 8008aa4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008b58 <__ieee754_pow+0x308>
 8008aa8:	eeb0 4b47 	vmov.f64	d4, d7
 8008aac:	eea6 4b05 	vfma.f64	d4, d6, d5
 8008ab0:	ec53 2b14 	vmov	r2, r3, d4
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	ec43 2b14 	vmov	d4, r2, r3
 8008aba:	eeb0 6b44 	vmov.f64	d6, d4
 8008abe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008ac2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008ac6:	3d01      	subs	r5, #1
 8008ac8:	ea55 030a 	orrs.w	r3, r5, sl
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8008ad6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008ada:	ec47 6b15 	vmov	d5, r6, r7
 8008ade:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8008ae2:	ec47 6b13 	vmov	d3, r6, r7
 8008ae6:	ec43 2b16 	vmov	d6, r2, r3
 8008aea:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008aee:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008af2:	4b23      	ldr	r3, [pc, #140]	; (8008b80 <__ieee754_pow+0x330>)
 8008af4:	eea5 7b04 	vfma.f64	d7, d5, d4
 8008af8:	ee24 6b06 	vmul.f64	d6, d4, d6
 8008afc:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008b00:	ee15 1a90 	vmov	r1, s11
 8008b04:	4299      	cmp	r1, r3
 8008b06:	ee15 2a10 	vmov	r2, s10
 8008b0a:	f340 819b 	ble.w	8008e44 <__ieee754_pow+0x5f4>
 8008b0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008b12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008b16:	4313      	orrs	r3, r2
 8008b18:	f000 810a 	beq.w	8008d30 <__ieee754_pow+0x4e0>
 8008b1c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8008b38 <__ieee754_pow+0x2e8>
 8008b20:	ee28 8b07 	vmul.f64	d8, d8, d7
 8008b24:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008b28:	e6fb      	b.n	8008922 <__ieee754_pow+0xd2>
 8008b2a:	bf00      	nop
 8008b2c:	f3af 8000 	nop.w
	...
 8008b38:	8800759c 	.word	0x8800759c
 8008b3c:	7e37e43c 	.word	0x7e37e43c
 8008b40:	55555555 	.word	0x55555555
 8008b44:	3fd55555 	.word	0x3fd55555
 8008b48:	652b82fe 	.word	0x652b82fe
 8008b4c:	3ff71547 	.word	0x3ff71547
 8008b50:	f85ddf44 	.word	0xf85ddf44
 8008b54:	3e54ae0b 	.word	0x3e54ae0b
 8008b58:	60000000 	.word	0x60000000
 8008b5c:	3ff71547 	.word	0x3ff71547
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	080093f1 	.word	0x080093f1
 8008b68:	433fffff 	.word	0x433fffff
 8008b6c:	3fefffff 	.word	0x3fefffff
 8008b70:	3ff00000 	.word	0x3ff00000
 8008b74:	3fe00000 	.word	0x3fe00000
 8008b78:	41e00000 	.word	0x41e00000
 8008b7c:	3feffffe 	.word	0x3feffffe
 8008b80:	408fffff 	.word	0x408fffff
 8008b84:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008b88:	f280 80ce 	bge.w	8008d28 <__ieee754_pow+0x4d8>
 8008b8c:	ed9d 6b00 	vldr	d6, [sp]
 8008b90:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8008e98 <__ieee754_pow+0x648>
 8008b94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b98:	ed8d 7b00 	vstr	d7, [sp]
 8008b9c:	9c01      	ldr	r4, [sp, #4]
 8008b9e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8008ba2:	1521      	asrs	r1, r4, #20
 8008ba4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ba8:	4419      	add	r1, r3
 8008baa:	4be3      	ldr	r3, [pc, #908]	; (8008f38 <__ieee754_pow+0x6e8>)
 8008bac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008bb0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8008bb4:	429c      	cmp	r4, r3
 8008bb6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8008bba:	dd06      	ble.n	8008bca <__ieee754_pow+0x37a>
 8008bbc:	4bdf      	ldr	r3, [pc, #892]	; (8008f3c <__ieee754_pow+0x6ec>)
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	f340 80b4 	ble.w	8008d2c <__ieee754_pow+0x4dc>
 8008bc4:	3101      	adds	r1, #1
 8008bc6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008bca:	2400      	movs	r4, #0
 8008bcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	ec43 2b17 	vmov	d7, r2, r3
 8008bda:	4bd9      	ldr	r3, [pc, #868]	; (8008f40 <__ieee754_pow+0x6f0>)
 8008bdc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8008be0:	4463      	add	r3, ip
 8008be2:	ed93 5b00 	vldr	d5, [r3]
 8008be6:	1040      	asrs	r0, r0, #1
 8008be8:	ee37 2b45 	vsub.f64	d2, d7, d5
 8008bec:	ee35 6b07 	vadd.f64	d6, d5, d7
 8008bf0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8008bf4:	ee22 6b01 	vmul.f64	d6, d2, d1
 8008bf8:	ed8d 6b00 	vstr	d6, [sp]
 8008bfc:	e9dd 8900 	ldrd	r8, r9, [sp]
 8008c00:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8008c04:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8008c08:	f04f 0800 	mov.w	r8, #0
 8008c0c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8008c10:	2200      	movs	r2, #0
 8008c12:	ec49 8b14 	vmov	d4, r8, r9
 8008c16:	ec43 2b16 	vmov	d6, r2, r3
 8008c1a:	eeb1 3b44 	vneg.f64	d3, d4
 8008c1e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8008c22:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008c26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008c2a:	eea3 2b07 	vfma.f64	d2, d3, d7
 8008c2e:	ed9d 7b00 	vldr	d7, [sp]
 8008c32:	ee22 2b01 	vmul.f64	d2, d2, d1
 8008c36:	ee27 5b07 	vmul.f64	d5, d7, d7
 8008c3a:	ee37 6b04 	vadd.f64	d6, d7, d4
 8008c3e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8008ea0 <__ieee754_pow+0x650>
 8008c42:	ee25 0b05 	vmul.f64	d0, d5, d5
 8008c46:	ee26 6b02 	vmul.f64	d6, d6, d2
 8008c4a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8008ea8 <__ieee754_pow+0x658>
 8008c4e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8008c52:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8008eb0 <__ieee754_pow+0x660>
 8008c56:	eea7 1b05 	vfma.f64	d1, d7, d5
 8008c5a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8008eb8 <__ieee754_pow+0x668>
 8008c5e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8008c62:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8008ec0 <__ieee754_pow+0x670>
 8008c66:	eea7 1b05 	vfma.f64	d1, d7, d5
 8008c6a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8008ec8 <__ieee754_pow+0x678>
 8008c6e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8008c72:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008c76:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8008c7a:	eeb0 5b47 	vmov.f64	d5, d7
 8008c7e:	eea4 5b04 	vfma.f64	d5, d4, d4
 8008c82:	ee35 5b06 	vadd.f64	d5, d5, d6
 8008c86:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008c8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c8e:	ed9d 5b02 	vldr	d5, [sp, #8]
 8008c92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008c96:	eea3 7b04 	vfma.f64	d7, d3, d4
 8008c9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c9e:	ed9d 6b00 	vldr	d6, [sp]
 8008ca2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ca6:	eea2 7b05 	vfma.f64	d7, d2, d5
 8008caa:	eeb0 6b47 	vmov.f64	d6, d7
 8008cae:	eea4 6b05 	vfma.f64	d6, d4, d5
 8008cb2:	ed8d 6b00 	vstr	d6, [sp]
 8008cb6:	f8cd 8000 	str.w	r8, [sp]
 8008cba:	ed9d 2b00 	vldr	d2, [sp]
 8008cbe:	eeb0 6b42 	vmov.f64	d6, d2
 8008cc2:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008cc6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008cca:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8008ed0 <__ieee754_pow+0x680>
 8008cce:	4b9d      	ldr	r3, [pc, #628]	; (8008f44 <__ieee754_pow+0x6f4>)
 8008cd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008cd4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8008ed8 <__ieee754_pow+0x688>
 8008cd8:	4463      	add	r3, ip
 8008cda:	eea2 7b06 	vfma.f64	d7, d2, d6
 8008cde:	ed93 6b00 	vldr	d6, [r3]
 8008ce2:	4b99      	ldr	r3, [pc, #612]	; (8008f48 <__ieee754_pow+0x6f8>)
 8008ce4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8008ce8:	449c      	add	ip, r3
 8008cea:	ed9c 1b00 	vldr	d1, [ip]
 8008cee:	eeb0 4b46 	vmov.f64	d4, d6
 8008cf2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8008ee0 <__ieee754_pow+0x690>
 8008cf6:	ee07 1a90 	vmov	s15, r1
 8008cfa:	eea2 4b03 	vfma.f64	d4, d2, d3
 8008cfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d02:	ee34 4b01 	vadd.f64	d4, d4, d1
 8008d06:	ee34 5b07 	vadd.f64	d5, d4, d7
 8008d0a:	ed8d 5b00 	vstr	d5, [sp]
 8008d0e:	f8cd 8000 	str.w	r8, [sp]
 8008d12:	ed9d 4b00 	vldr	d4, [sp]
 8008d16:	ee34 7b47 	vsub.f64	d7, d4, d7
 8008d1a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8008d1e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8008d22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008d26:	e6ce      	b.n	8008ac6 <__ieee754_pow+0x276>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e73a      	b.n	8008ba2 <__ieee754_pow+0x352>
 8008d2c:	2401      	movs	r4, #1
 8008d2e:	e74d      	b.n	8008bcc <__ieee754_pow+0x37c>
 8008d30:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8008ee8 <__ieee754_pow+0x698>
 8008d34:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008d38:	ee37 4b04 	vadd.f64	d4, d7, d4
 8008d3c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8008d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d44:	f73f aeea 	bgt.w	8008b1c <__ieee754_pow+0x2cc>
 8008d48:	4a80      	ldr	r2, [pc, #512]	; (8008f4c <__ieee754_pow+0x6fc>)
 8008d4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	f340 808e 	ble.w	8008e70 <__ieee754_pow+0x620>
 8008d54:	151b      	asrs	r3, r3, #20
 8008d56:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8008d5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d5e:	4103      	asrs	r3, r0
 8008d60:	440b      	add	r3, r1
 8008d62:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008d66:	487a      	ldr	r0, [pc, #488]	; (8008f50 <__ieee754_pow+0x700>)
 8008d68:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008d6c:	4110      	asrs	r0, r2
 8008d6e:	ea23 0500 	bic.w	r5, r3, r0
 8008d72:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8008d76:	2400      	movs	r4, #0
 8008d78:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8008d7c:	f1c2 0214 	rsb	r2, r2, #20
 8008d80:	ec45 4b15 	vmov	d5, r4, r5
 8008d84:	4110      	asrs	r0, r2
 8008d86:	2900      	cmp	r1, #0
 8008d88:	bfb8      	it	lt
 8008d8a:	4240      	neglt	r0, r0
 8008d8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008d90:	ee36 5b07 	vadd.f64	d5, d6, d7
 8008d94:	ec53 2b15 	vmov	r2, r3, d5
 8008d98:	2200      	movs	r2, #0
 8008d9a:	ec43 2b15 	vmov	d5, r2, r3
 8008d9e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8008ef0 <__ieee754_pow+0x6a0>
 8008da2:	ee35 6b46 	vsub.f64	d6, d5, d6
 8008da6:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008daa:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8008ef8 <__ieee754_pow+0x6a8>
 8008dae:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008db2:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008db6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8008f00 <__ieee754_pow+0x6b0>
 8008dba:	eeb0 4b47 	vmov.f64	d4, d7
 8008dbe:	eea5 4b06 	vfma.f64	d4, d5, d6
 8008dc2:	eeb0 3b44 	vmov.f64	d3, d4
 8008dc6:	eea5 3b46 	vfms.f64	d3, d5, d6
 8008dca:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8008f08 <__ieee754_pow+0x6b8>
 8008dce:	ee37 7b43 	vsub.f64	d7, d7, d3
 8008dd2:	ee24 6b04 	vmul.f64	d6, d4, d4
 8008dd6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8008f10 <__ieee754_pow+0x6c0>
 8008dda:	eea4 7b07 	vfma.f64	d7, d4, d7
 8008dde:	eea6 3b05 	vfma.f64	d3, d6, d5
 8008de2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8008f18 <__ieee754_pow+0x6c8>
 8008de6:	eea3 5b06 	vfma.f64	d5, d3, d6
 8008dea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8008f20 <__ieee754_pow+0x6d0>
 8008dee:	eea5 3b06 	vfma.f64	d3, d5, d6
 8008df2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8008f28 <__ieee754_pow+0x6d8>
 8008df6:	eea3 5b06 	vfma.f64	d5, d3, d6
 8008dfa:	eeb0 3b44 	vmov.f64	d3, d4
 8008dfe:	eea5 3b46 	vfms.f64	d3, d5, d6
 8008e02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008e06:	eeb0 6b43 	vmov.f64	d6, d3
 8008e0a:	ee24 3b03 	vmul.f64	d3, d4, d3
 8008e0e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8008e12:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8008e16:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008e1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008e1e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8008e22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008e26:	ed8d 7b00 	vstr	d7, [sp]
 8008e2a:	9901      	ldr	r1, [sp, #4]
 8008e2c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8008e30:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008e34:	da1e      	bge.n	8008e74 <__ieee754_pow+0x624>
 8008e36:	eeb0 0b47 	vmov.f64	d0, d7
 8008e3a:	f000 f939 	bl	80090b0 <scalbn>
 8008e3e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8008e42:	e56e      	b.n	8008922 <__ieee754_pow+0xd2>
 8008e44:	4b43      	ldr	r3, [pc, #268]	; (8008f54 <__ieee754_pow+0x704>)
 8008e46:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8008e4a:	4298      	cmp	r0, r3
 8008e4c:	f77f af7c 	ble.w	8008d48 <__ieee754_pow+0x4f8>
 8008e50:	4b41      	ldr	r3, [pc, #260]	; (8008f58 <__ieee754_pow+0x708>)
 8008e52:	440b      	add	r3, r1
 8008e54:	4313      	orrs	r3, r2
 8008e56:	d002      	beq.n	8008e5e <__ieee754_pow+0x60e>
 8008e58:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8008f30 <__ieee754_pow+0x6e0>
 8008e5c:	e660      	b.n	8008b20 <__ieee754_pow+0x2d0>
 8008e5e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008e62:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6a:	f6ff af6d 	blt.w	8008d48 <__ieee754_pow+0x4f8>
 8008e6e:	e7f3      	b.n	8008e58 <__ieee754_pow+0x608>
 8008e70:	2000      	movs	r0, #0
 8008e72:	e78d      	b.n	8008d90 <__ieee754_pow+0x540>
 8008e74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	ec43 2b10 	vmov	d0, r2, r3
 8008e7e:	e7de      	b.n	8008e3e <__ieee754_pow+0x5ee>
 8008e80:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008e84:	e54d      	b.n	8008922 <__ieee754_pow+0xd2>
 8008e86:	e9cd 6700 	strd	r6, r7, [sp]
 8008e8a:	e574      	b.n	8008976 <__ieee754_pow+0x126>
 8008e8c:	ed8d 8b00 	vstr	d8, [sp]
 8008e90:	e571      	b.n	8008976 <__ieee754_pow+0x126>
 8008e92:	4615      	mov	r5, r2
 8008e94:	e557      	b.n	8008946 <__ieee754_pow+0xf6>
 8008e96:	bf00      	nop
 8008e98:	00000000 	.word	0x00000000
 8008e9c:	43400000 	.word	0x43400000
 8008ea0:	4a454eef 	.word	0x4a454eef
 8008ea4:	3fca7e28 	.word	0x3fca7e28
 8008ea8:	93c9db65 	.word	0x93c9db65
 8008eac:	3fcd864a 	.word	0x3fcd864a
 8008eb0:	a91d4101 	.word	0xa91d4101
 8008eb4:	3fd17460 	.word	0x3fd17460
 8008eb8:	518f264d 	.word	0x518f264d
 8008ebc:	3fd55555 	.word	0x3fd55555
 8008ec0:	db6fabff 	.word	0xdb6fabff
 8008ec4:	3fdb6db6 	.word	0x3fdb6db6
 8008ec8:	33333303 	.word	0x33333303
 8008ecc:	3fe33333 	.word	0x3fe33333
 8008ed0:	dc3a03fd 	.word	0xdc3a03fd
 8008ed4:	3feec709 	.word	0x3feec709
 8008ed8:	145b01f5 	.word	0x145b01f5
 8008edc:	be3e2fe0 	.word	0xbe3e2fe0
 8008ee0:	e0000000 	.word	0xe0000000
 8008ee4:	3feec709 	.word	0x3feec709
 8008ee8:	652b82fe 	.word	0x652b82fe
 8008eec:	3c971547 	.word	0x3c971547
 8008ef0:	fefa39ef 	.word	0xfefa39ef
 8008ef4:	3fe62e42 	.word	0x3fe62e42
 8008ef8:	0ca86c39 	.word	0x0ca86c39
 8008efc:	be205c61 	.word	0xbe205c61
 8008f00:	00000000 	.word	0x00000000
 8008f04:	3fe62e43 	.word	0x3fe62e43
 8008f08:	72bea4d0 	.word	0x72bea4d0
 8008f0c:	3e663769 	.word	0x3e663769
 8008f10:	c5d26bf1 	.word	0xc5d26bf1
 8008f14:	bebbbd41 	.word	0xbebbbd41
 8008f18:	af25de2c 	.word	0xaf25de2c
 8008f1c:	3f11566a 	.word	0x3f11566a
 8008f20:	16bebd93 	.word	0x16bebd93
 8008f24:	bf66c16c 	.word	0xbf66c16c
 8008f28:	5555553e 	.word	0x5555553e
 8008f2c:	3fc55555 	.word	0x3fc55555
 8008f30:	c2f8f359 	.word	0xc2f8f359
 8008f34:	01a56e1f 	.word	0x01a56e1f
 8008f38:	0003988e 	.word	0x0003988e
 8008f3c:	000bb679 	.word	0x000bb679
 8008f40:	08009510 	.word	0x08009510
 8008f44:	08009530 	.word	0x08009530
 8008f48:	08009520 	.word	0x08009520
 8008f4c:	3fe00000 	.word	0x3fe00000
 8008f50:	000fffff 	.word	0x000fffff
 8008f54:	4090cbff 	.word	0x4090cbff
 8008f58:	3f6f3400 	.word	0x3f6f3400

08008f5c <__ieee754_sqrt>:
 8008f5c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8008f60:	4770      	bx	lr

08008f62 <fabs>:
 8008f62:	ec51 0b10 	vmov	r0, r1, d0
 8008f66:	ee10 2a10 	vmov	r2, s0
 8008f6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f6e:	ec43 2b10 	vmov	d0, r2, r3
 8008f72:	4770      	bx	lr

08008f74 <finite>:
 8008f74:	ee10 3a90 	vmov	r3, s1
 8008f78:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008f7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008f80:	0fc0      	lsrs	r0, r0, #31
 8008f82:	4770      	bx	lr

08008f84 <matherr>:
 8008f84:	2000      	movs	r0, #0
 8008f86:	4770      	bx	lr

08008f88 <nan>:
 8008f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f90 <nan+0x8>
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	00000000 	.word	0x00000000
 8008f94:	7ff80000 	.word	0x7ff80000

08008f98 <rint>:
 8008f98:	b530      	push	{r4, r5, lr}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	ed8d 0b00 	vstr	d0, [sp]
 8008fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fa4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8008fa8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 8008fac:	2813      	cmp	r0, #19
 8008fae:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8008fb2:	dc5a      	bgt.n	800906a <rint+0xd2>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	da2f      	bge.n	8009018 <rint+0x80>
 8008fb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008fbc:	4311      	orrs	r1, r2
 8008fbe:	d027      	beq.n	8009010 <rint+0x78>
 8008fc0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8008fc4:	4315      	orrs	r5, r2
 8008fc6:	426a      	negs	r2, r5
 8008fc8:	432a      	orrs	r2, r5
 8008fca:	0b12      	lsrs	r2, r2, #12
 8008fcc:	0c5b      	lsrs	r3, r3, #17
 8008fce:	045b      	lsls	r3, r3, #17
 8008fd0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8008fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fd8:	ea42 0103 	orr.w	r1, r2, r3
 8008fdc:	4b31      	ldr	r3, [pc, #196]	; (80090a4 <rint+0x10c>)
 8008fde:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fe2:	ed93 6b00 	vldr	d6, [r3]
 8008fe6:	ec41 0b17 	vmov	d7, r0, r1
 8008fea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008fee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ff2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ff6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008ffa:	ed8d 7b00 	vstr	d7, [sp]
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009008:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800900c:	e9cd 0100 	strd	r0, r1, [sp]
 8009010:	ed9d 0b00 	vldr	d0, [sp]
 8009014:	b005      	add	sp, #20
 8009016:	bd30      	pop	{r4, r5, pc}
 8009018:	4923      	ldr	r1, [pc, #140]	; (80090a8 <rint+0x110>)
 800901a:	4101      	asrs	r1, r0
 800901c:	ea03 0501 	and.w	r5, r3, r1
 8009020:	4315      	orrs	r5, r2
 8009022:	d0f5      	beq.n	8009010 <rint+0x78>
 8009024:	0849      	lsrs	r1, r1, #1
 8009026:	ea03 0501 	and.w	r5, r3, r1
 800902a:	432a      	orrs	r2, r5
 800902c:	d00b      	beq.n	8009046 <rint+0xae>
 800902e:	ea23 0101 	bic.w	r1, r3, r1
 8009032:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009036:	2813      	cmp	r0, #19
 8009038:	fa43 f300 	asr.w	r3, r3, r0
 800903c:	bf0c      	ite	eq
 800903e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8009042:	2200      	movne	r2, #0
 8009044:	430b      	orrs	r3, r1
 8009046:	4619      	mov	r1, r3
 8009048:	4b16      	ldr	r3, [pc, #88]	; (80090a4 <rint+0x10c>)
 800904a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800904e:	ed94 6b00 	vldr	d6, [r4]
 8009052:	4610      	mov	r0, r2
 8009054:	ec41 0b17 	vmov	d7, r0, r1
 8009058:	ee36 7b07 	vadd.f64	d7, d6, d7
 800905c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009064:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009068:	e008      	b.n	800907c <rint+0xe4>
 800906a:	2833      	cmp	r0, #51	; 0x33
 800906c:	dd09      	ble.n	8009082 <rint+0xea>
 800906e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009072:	d1cd      	bne.n	8009010 <rint+0x78>
 8009074:	ed9d 7b00 	vldr	d7, [sp]
 8009078:	ee37 7b07 	vadd.f64	d7, d7, d7
 800907c:	ed8d 7b00 	vstr	d7, [sp]
 8009080:	e7c6      	b.n	8009010 <rint+0x78>
 8009082:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8009086:	f04f 31ff 	mov.w	r1, #4294967295
 800908a:	40c1      	lsrs	r1, r0
 800908c:	420a      	tst	r2, r1
 800908e:	d0bf      	beq.n	8009010 <rint+0x78>
 8009090:	0849      	lsrs	r1, r1, #1
 8009092:	420a      	tst	r2, r1
 8009094:	bf1f      	itttt	ne
 8009096:	ea22 0101 	bicne.w	r1, r2, r1
 800909a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800909e:	4102      	asrne	r2, r0
 80090a0:	430a      	orrne	r2, r1
 80090a2:	e7d0      	b.n	8009046 <rint+0xae>
 80090a4:	08009540 	.word	0x08009540
 80090a8:	000fffff 	.word	0x000fffff
 80090ac:	00000000 	.word	0x00000000

080090b0 <scalbn>:
 80090b0:	b500      	push	{lr}
 80090b2:	ed2d 8b02 	vpush	{d8}
 80090b6:	b083      	sub	sp, #12
 80090b8:	ed8d 0b00 	vstr	d0, [sp]
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80090c2:	b9a2      	cbnz	r2, 80090ee <scalbn+0x3e>
 80090c4:	9a00      	ldr	r2, [sp, #0]
 80090c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090ca:	4313      	orrs	r3, r2
 80090cc:	d03a      	beq.n	8009144 <scalbn+0x94>
 80090ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009188 <scalbn+0xd8>
 80090d2:	4b35      	ldr	r3, [pc, #212]	; (80091a8 <scalbn+0xf8>)
 80090d4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80090d8:	4298      	cmp	r0, r3
 80090da:	ed8d 7b00 	vstr	d7, [sp]
 80090de:	da11      	bge.n	8009104 <scalbn+0x54>
 80090e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8009190 <scalbn+0xe0>
 80090e4:	ed9d 6b00 	vldr	d6, [sp]
 80090e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090ec:	e007      	b.n	80090fe <scalbn+0x4e>
 80090ee:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80090f2:	428a      	cmp	r2, r1
 80090f4:	d10a      	bne.n	800910c <scalbn+0x5c>
 80090f6:	ed9d 7b00 	vldr	d7, [sp]
 80090fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80090fe:	ed8d 7b00 	vstr	d7, [sp]
 8009102:	e01f      	b.n	8009144 <scalbn+0x94>
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800910a:	3a36      	subs	r2, #54	; 0x36
 800910c:	4402      	add	r2, r0
 800910e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009112:	428a      	cmp	r2, r1
 8009114:	dd0a      	ble.n	800912c <scalbn+0x7c>
 8009116:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8009198 <scalbn+0xe8>
 800911a:	eeb0 0b48 	vmov.f64	d0, d8
 800911e:	ed9d 1b00 	vldr	d1, [sp]
 8009122:	f000 f843 	bl	80091ac <copysign>
 8009126:	ee20 7b08 	vmul.f64	d7, d0, d8
 800912a:	e7e8      	b.n	80090fe <scalbn+0x4e>
 800912c:	2a00      	cmp	r2, #0
 800912e:	dd10      	ble.n	8009152 <scalbn+0xa2>
 8009130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009134:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009138:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800913c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009140:	e9cd 0100 	strd	r0, r1, [sp]
 8009144:	ed9d 0b00 	vldr	d0, [sp]
 8009148:	b003      	add	sp, #12
 800914a:	ecbd 8b02 	vpop	{d8}
 800914e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009152:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009156:	da06      	bge.n	8009166 <scalbn+0xb6>
 8009158:	f24c 3350 	movw	r3, #50000	; 0xc350
 800915c:	4298      	cmp	r0, r3
 800915e:	dcda      	bgt.n	8009116 <scalbn+0x66>
 8009160:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8009190 <scalbn+0xe0>
 8009164:	e7d9      	b.n	800911a <scalbn+0x6a>
 8009166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800916a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800916e:	3236      	adds	r2, #54	; 0x36
 8009170:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009174:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009178:	ec41 0b17 	vmov	d7, r0, r1
 800917c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80091a0 <scalbn+0xf0>
 8009180:	e7b2      	b.n	80090e8 <scalbn+0x38>
 8009182:	bf00      	nop
 8009184:	f3af 8000 	nop.w
 8009188:	00000000 	.word	0x00000000
 800918c:	43500000 	.word	0x43500000
 8009190:	c2f8f359 	.word	0xc2f8f359
 8009194:	01a56e1f 	.word	0x01a56e1f
 8009198:	8800759c 	.word	0x8800759c
 800919c:	7e37e43c 	.word	0x7e37e43c
 80091a0:	00000000 	.word	0x00000000
 80091a4:	3c900000 	.word	0x3c900000
 80091a8:	ffff3cb0 	.word	0xffff3cb0

080091ac <copysign>:
 80091ac:	ec51 0b10 	vmov	r0, r1, d0
 80091b0:	ee11 0a90 	vmov	r0, s3
 80091b4:	ee10 2a10 	vmov	r2, s0
 80091b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80091bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80091c0:	ea41 0300 	orr.w	r3, r1, r0
 80091c4:	ec43 2b10 	vmov	d0, r2, r3
 80091c8:	4770      	bx	lr
	...

080091cc <_init>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr

080091d8 <_fini>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr
